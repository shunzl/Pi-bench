	.text
	.syntax unified
	.eabi_attribute	67, "2.09"	@ Tag_conformance
	.cpu	cortex-a8
	.eabi_attribute	6, 10	@ Tag_CPU_arch
	.eabi_attribute	7, 65	@ Tag_CPU_arch_profile
	.eabi_attribute	8, 1	@ Tag_ARM_ISA_use
	.eabi_attribute	9, 2	@ Tag_THUMB_ISA_use
	.fpu	neon
	.eabi_attribute	17, 1	@ Tag_ABI_PCS_GOT_use
	.eabi_attribute	20, 1	@ Tag_ABI_FP_denormal
	.eabi_attribute	21, 1	@ Tag_ABI_FP_exceptions
	.eabi_attribute	23, 3	@ Tag_ABI_FP_number_model
	.eabi_attribute	34, 1	@ Tag_CPU_unaligned_access
	.eabi_attribute	24, 1	@ Tag_ABI_align_needed
	.eabi_attribute	25, 1	@ Tag_ABI_align_preserved
	.eabi_attribute	38, 1	@ Tag_ABI_FP_16bit_format
	.eabi_attribute	18, 4	@ Tag_ABI_PCS_wchar_t
	.eabi_attribute	26, 2	@ Tag_ABI_enum_size
	.eabi_attribute	14, 0	@ Tag_ABI_PCS_R9_use
	.eabi_attribute	68, 1	@ Tag_Virtualization_use
	.file	"all.bc"
	.globl	fft_short
	.p2align	2
	.type	fft_short,%function
	.code	32                      @ @fft_short
fft_short:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #112
	movw	r3, #0
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [r11, #-12]
	strh	r3, [r11, #-18]
.LBB0_1:                                @ =>This Loop Header: Depth=1
                                        @     Child Loop BB0_4 Depth 2
                                        @     Child Loop BB0_9 Depth 2
                                        @     Child Loop BB0_14 Depth 2
	ldrsh	r0, [r11, #-18]
	cmp	r0, #3
	bge	.LBB0_20
@ BB#2:                                 @   in Loop: Header=BB0_1 Depth=1
	movw	r0, #31
	movw	r1, #192
	movw	r2, #10
	ldr	r3, [r11, #-4]
	ldrsh	r12, [r11, #-18]
	add	r3, r3, r12, lsl #10
	add	r3, r3, #512
	str	r3, [r11, #-24]
	ldrsh	r3, [r11, #-18]
	add	r3, r3, #1
	mul	r1, r3, r1
	strh	r1, [r11, #-26]
	strh	r0, [r11, #-16]
	ldr	r0, [r11, #-8]
	cmp	r0, #2
	str	r2, [sp, #20]           @ 4-byte Spill
	bge	.LBB0_7
@ BB#3:                                 @   in Loop: Header=BB0_1 Depth=1
	b	.LBB0_4
.LBB0_4:                                @   Parent Loop BB0_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	movw	r0, #1
	ldrsh	r1, [r11, #-16]
	movw	r2, :lower16:rv_tbl
	movt	r2, :upper16:rv_tbl
	add	r1, r2, r1, lsl #3
	ldrh	r1, [r1]
	strh	r1, [r11, #-14]
	ldrsh	r1, [r11, #-14]
	movw	r2, :lower16:window_s
	movt	r2, :upper16:window_s
	add	r3, r2, r1, lsl #2
	vldr	s0, [r3]
	ldr	r3, [r11, #-12]
	ldr	r12, [r11, #-8]
	ldr	r3, [r3, r12, lsl #2]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	add	r1, r3, r1, lsl #1
	ldrsh	r1, [r1]
	vmov	s2, r1
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-32]
	ldrsh	r1, [r11, #-14]
	rsb	r3, r1, #127
	add	r3, r2, r3, lsl #2
	vldr	s0, [r3]
	ldr	r3, [r11, #-12]
	ldr	r12, [r11, #-8]
	ldr	r3, [r3, r12, lsl #2]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	add	r1, r3, r1, lsl #1
	mov	r3, #256
	ldrsh	r1, [r1, r3]
	vmov	s2, r1
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-48]
	vldr	s2, [r11, #-32]
	vsub.f32	s0, s2, s0
	vstr	s0, [r11, #-36]
	vldr	s0, [r11, #-32]
	vldr	s2, [r11, #-48]
	vadd.f32	s0, s0, s2
	vstr	s0, [r11, #-32]
	ldrsh	r1, [r11, #-14]
	add	r3, r2, r1, lsl #2
	vldr	s0, [r3, #256]
	ldr	r3, [r11, #-12]
	ldr	r12, [r11, #-8]
	ldr	r3, [r3, r12, lsl #2]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	add	r1, r3, r1, lsl #1
	ldrsh	r1, [r1, #128]
	vmov	s2, r1
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-40]
	ldrsh	r1, [r11, #-14]
	rsb	r3, r1, #63
	add	r3, r2, r3, lsl #2
	vldr	s0, [r3]
	ldr	r3, [r11, #-12]
	ldr	r12, [r11, #-8]
	ldr	r3, [r3, r12, lsl #2]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	add	r1, r3, r1, lsl #1
	mov	r3, #384
	ldrsh	r1, [r1, r3]
	vmov	s2, r1
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-48]
	vldr	s2, [r11, #-40]
	vsub.f32	s0, s2, s0
	vstr	s0, [r11, #-44]
	vldr	s0, [r11, #-40]
	vldr	s2, [r11, #-48]
	vadd.f32	s0, s0, s2
	vstr	s0, [r11, #-40]
	ldr	r1, [r11, #-24]
	sub	r3, r1, #16
	str	r3, [r11, #-24]
	vldr	s0, [r11, #-32]
	vldr	s2, [r11, #-40]
	vadd.f32	s0, s0, s2
	vstr	s0, [r1, #-16]
	vldr	s0, [r11, #-32]
	vldr	s2, [r11, #-40]
	vsub.f32	s0, s0, s2
	ldr	r1, [r11, #-24]
	vstr	s0, [r1, #8]
	vldr	s0, [r11, #-36]
	vldr	s2, [r11, #-44]
	vadd.f32	s0, s0, s2
	ldr	r1, [r11, #-24]
	vstr	s0, [r1, #4]
	vldr	s0, [r11, #-36]
	vldr	s2, [r11, #-44]
	vsub.f32	s0, s0, s2
	ldr	r1, [r11, #-24]
	vstr	s0, [r1, #12]
	ldrsh	r1, [r11, #-14]
	add	r3, r2, r1, lsl #2
	vldr	s0, [r3, #4]
	ldr	r3, [r11, #-12]
	ldr	r12, [r11, #-8]
	ldr	r3, [r3, r12, lsl #2]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	add	r1, r3, r1, lsl #1
	ldrsh	r1, [r1, #2]
	vmov	s2, r1
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-32]
	ldrsh	r1, [r11, #-14]
	rsb	r3, r1, #126
	add	r3, r2, r3, lsl #2
	vldr	s0, [r3]
	ldr	r3, [r11, #-12]
	ldr	r12, [r11, #-8]
	ldr	r3, [r3, r12, lsl #2]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	add	r1, r3, r1, lsl #1
	movw	r3, #258
	ldrsh	r1, [r1, r3]
	vmov	s2, r1
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-48]
	vldr	s2, [r11, #-32]
	vsub.f32	s0, s2, s0
	vstr	s0, [r11, #-36]
	vldr	s0, [r11, #-32]
	vldr	s2, [r11, #-48]
	vadd.f32	s0, s0, s2
	vstr	s0, [r11, #-32]
	ldrsh	r1, [r11, #-14]
	add	r3, r2, r1, lsl #2
	vldr	s0, [r3, #260]
	ldr	r3, [r11, #-12]
	ldr	r12, [r11, #-8]
	ldr	r3, [r3, r12, lsl #2]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	add	r1, r3, r1, lsl #1
	ldrsh	r1, [r1, #130]
	vmov	s2, r1
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-40]
	ldrsh	r1, [r11, #-14]
	rsb	r3, r1, #62
	add	r2, r2, r3, lsl #2
	vldr	s0, [r2]
	ldr	r2, [r11, #-12]
	ldr	r3, [r11, #-8]
	ldr	r2, [r2, r3, lsl #2]
	ldrsh	r3, [r11, #-26]
	add	r1, r1, r3
	add	r1, r1, #193
	add	r1, r2, r1, lsl #1
	ldrsh	r1, [r1]
	vmov	s2, r1
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-48]
	vldr	s0, [r11, #-40]
	vldr	s2, [r11, #-48]
	vsub.f32	s0, s0, s2
	vstr	s0, [r11, #-44]
	vldr	s0, [r11, #-40]
	vldr	s2, [r11, #-48]
	vadd.f32	s0, s0, s2
	vstr	s0, [r11, #-40]
	vldr	s0, [r11, #-32]
	vldr	s2, [r11, #-40]
	vadd.f32	s0, s0, s2
	ldr	r1, [r11, #-24]
	add	r1, r1, #512
	vstr	s0, [r1]
	vldr	s0, [r11, #-32]
	vldr	s2, [r11, #-40]
	vsub.f32	s0, s0, s2
	ldr	r1, [r11, #-24]
	add	r1, r1, #520
	vstr	s0, [r1]
	vldr	s0, [r11, #-36]
	vldr	s2, [r11, #-44]
	vadd.f32	s0, s0, s2
	ldr	r1, [r11, #-24]
	add	r1, r1, #516
	vstr	s0, [r1]
	vldr	s0, [r11, #-36]
	vldr	s2, [r11, #-44]
	vsub.f32	s0, s0, s2
	ldr	r1, [r11, #-24]
	add	r1, r1, #524
	vstr	s0, [r1]
	str	r0, [sp, #16]           @ 4-byte Spill
@ BB#5:                                 @   in Loop: Header=BB0_4 Depth=2
	movw	r0, #65535
	ldrh	r1, [r11, #-16]
	add	r0, r1, r0
	strh	r0, [r11, #-16]
	sxth	r0, r0
	cmp	r0, #0
	bge	.LBB0_4
@ BB#6:                                 @   in Loop: Header=BB0_1 Depth=1
	b	.LBB0_18
.LBB0_7:                                @   in Loop: Header=BB0_1 Depth=1
	ldr	r0, [r11, #-8]
	cmp	r0, #2
	bne	.LBB0_13
@ BB#8:                                 @   in Loop: Header=BB0_1 Depth=1
	b	.LBB0_9
.LBB0_9:                                @   Parent Loop BB0_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	vldr	s0, .LCPI0_1
	movw	r0, #1
	ldrsh	r1, [r11, #-16]
	movw	r2, :lower16:rv_tbl
	movt	r2, :upper16:rv_tbl
	add	r1, r2, r1, lsl #3
	ldrh	r1, [r1]
	strh	r1, [r11, #-14]
	ldrsh	r1, [r11, #-14]
	movw	r2, :lower16:window_s
	movt	r2, :upper16:window_s
	add	r3, r2, r1, lsl #2
	vldr	s2, [r3]
	ldr	r3, [r11, #-12]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	ldr	r12, [r3]
	ldr	r3, [r3, #4]
	add	r12, r12, r1, lsl #1
	ldrsh	r12, [r12]
	add	r1, r3, r1, lsl #1
	ldrsh	r1, [r1]
	add	r1, r12, r1
	vmov	s4, r1
	vcvt.f32.s32	s4, s4
	vldr	s6, .LCPI0_1
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [r11, #-52]
	ldrsh	r1, [r11, #-14]
	rsb	r3, r1, #127
	add	r3, r2, r3, lsl #2
	vldr	s2, [r3]
	ldr	r3, [r11, #-12]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	mov	r12, #256
	add	r1, r12, r1, lsl #1
	ldr	r12, [r3]
	ldr	r3, [r3, #4]
	add	r12, r12, r1
	ldrsh	r12, [r12]
	add	r1, r3, r1
	ldrsh	r1, [r1]
	add	r1, r12, r1
	vmov	s4, r1
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #44]
	vldr	s4, [r11, #-52]
	vsub.f32	s2, s4, s2
	vstr	s2, [sp, #56]
	vldr	s2, [r11, #-52]
	vldr	s4, [sp, #44]
	vadd.f32	s2, s2, s4
	vstr	s2, [r11, #-52]
	ldrsh	r1, [r11, #-14]
	add	r3, r2, r1, lsl #2
	vldr	s2, [r3, #256]
	ldr	r3, [r11, #-12]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	mov	r12, #128
	add	r1, r12, r1, lsl #1
	ldr	r12, [r3]
	ldr	r3, [r3, #4]
	add	r12, r12, r1
	ldrsh	r12, [r12]
	add	r1, r3, r1
	ldrsh	r1, [r1]
	add	r1, r12, r1
	vmov	s4, r1
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #52]
	ldrsh	r1, [r11, #-14]
	rsb	r3, r1, #63
	add	r3, r2, r3, lsl #2
	vldr	s2, [r3]
	ldr	r3, [r11, #-12]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	mov	r12, #384
	add	r1, r12, r1, lsl #1
	ldr	r12, [r3]
	ldr	r3, [r3, #4]
	add	r12, r12, r1
	ldrsh	r12, [r12]
	add	r1, r3, r1
	ldrsh	r1, [r1]
	add	r1, r12, r1
	vmov	s4, r1
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #44]
	vldr	s4, [sp, #52]
	vsub.f32	s2, s4, s2
	vstr	s2, [sp, #48]
	vldr	s2, [sp, #52]
	vldr	s4, [sp, #44]
	vadd.f32	s2, s2, s4
	vstr	s2, [sp, #52]
	ldr	r1, [r11, #-24]
	sub	r3, r1, #16
	str	r3, [r11, #-24]
	vldr	s2, [r11, #-52]
	vldr	s4, [sp, #52]
	vadd.f32	s2, s2, s4
	vstr	s2, [r1, #-16]
	vldr	s2, [r11, #-52]
	vldr	s4, [sp, #52]
	vsub.f32	s2, s2, s4
	ldr	r1, [r11, #-24]
	vstr	s2, [r1, #8]
	vldr	s2, [sp, #56]
	vldr	s4, [sp, #48]
	vadd.f32	s2, s2, s4
	ldr	r1, [r11, #-24]
	vstr	s2, [r1, #4]
	vldr	s2, [sp, #56]
	vldr	s4, [sp, #48]
	vsub.f32	s2, s2, s4
	ldr	r1, [r11, #-24]
	vstr	s2, [r1, #12]
	ldrsh	r1, [r11, #-14]
	add	r3, r2, r1, lsl #2
	vldr	s2, [r3, #4]
	ldr	r3, [r11, #-12]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	mov	r12, #2
	add	r1, r12, r1, lsl #1
	ldr	r12, [r3]
	ldr	r3, [r3, #4]
	add	r12, r12, r1
	ldrsh	r12, [r12]
	add	r1, r3, r1
	ldrsh	r1, [r1]
	add	r1, r12, r1
	vmov	s4, r1
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [r11, #-52]
	ldrsh	r1, [r11, #-14]
	rsb	r3, r1, #126
	add	r3, r2, r3, lsl #2
	vldr	s2, [r3]
	ldr	r3, [r11, #-12]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	movw	r12, #258
	add	r1, r12, r1, lsl #1
	ldr	r12, [r3]
	ldr	r3, [r3, #4]
	add	r12, r12, r1
	ldrsh	r12, [r12]
	add	r1, r3, r1
	ldrsh	r1, [r1]
	add	r1, r12, r1
	vmov	s4, r1
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #44]
	vldr	s4, [r11, #-52]
	vsub.f32	s2, s4, s2
	vstr	s2, [sp, #56]
	vldr	s2, [r11, #-52]
	vldr	s4, [sp, #44]
	vadd.f32	s2, s2, s4
	vstr	s2, [r11, #-52]
	ldrsh	r1, [r11, #-14]
	add	r3, r2, r1, lsl #2
	vldr	s2, [r3, #260]
	ldr	r3, [r11, #-12]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	mov	r12, #130
	add	r1, r12, r1, lsl #1
	ldr	r12, [r3]
	ldr	r3, [r3, #4]
	add	r12, r12, r1
	ldrsh	r12, [r12]
	add	r1, r3, r1
	ldrsh	r1, [r1]
	add	r1, r12, r1
	vmov	s4, r1
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #52]
	ldrsh	r1, [r11, #-14]
	rsb	r3, r1, #62
	add	r2, r2, r3, lsl #2
	vldr	s2, [r2]
	ldr	r2, [r11, #-12]
	ldrsh	r3, [r11, #-26]
	add	r1, r1, r3
	add	r1, r1, #193
	ldr	r3, [r2]
	ldr	r2, [r2, #4]
	add	r3, r3, r1, lsl #1
	ldrsh	r3, [r3]
	add	r1, r2, r1, lsl #1
	ldrsh	r1, [r1]
	add	r1, r3, r1
	vmov	s4, r1
	vcvt.f32.s32	s4, s4
	vmul.f32	s0, s0, s4
	vmul.f32	s0, s2, s0
	vstr	s0, [sp, #44]
	vldr	s0, [sp, #52]
	vldr	s2, [sp, #44]
	vsub.f32	s0, s0, s2
	vstr	s0, [sp, #48]
	vldr	s0, [sp, #52]
	vldr	s2, [sp, #44]
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #52]
	vldr	s0, [r11, #-52]
	vldr	s2, [sp, #52]
	vadd.f32	s0, s0, s2
	ldr	r1, [r11, #-24]
	add	r1, r1, #512
	vstr	s0, [r1]
	vldr	s0, [r11, #-52]
	vldr	s2, [sp, #52]
	vsub.f32	s0, s0, s2
	ldr	r1, [r11, #-24]
	add	r1, r1, #520
	vstr	s0, [r1]
	vldr	s0, [sp, #56]
	vldr	s2, [sp, #48]
	vadd.f32	s0, s0, s2
	ldr	r1, [r11, #-24]
	add	r1, r1, #516
	vstr	s0, [r1]
	vldr	s0, [sp, #56]
	vldr	s2, [sp, #48]
	vsub.f32	s0, s0, s2
	ldr	r1, [r11, #-24]
	add	r1, r1, #524
	vstr	s0, [r1]
	str	r0, [sp, #12]           @ 4-byte Spill
@ BB#10:                                @   in Loop: Header=BB0_9 Depth=2
	movw	r0, #65535
	ldrh	r1, [r11, #-16]
	add	r0, r1, r0
	strh	r0, [r11, #-16]
	sxth	r0, r0
	cmp	r0, #0
	bge	.LBB0_9
@ BB#11:                                @   in Loop: Header=BB0_1 Depth=1
	b	.LBB0_17
	.p2align	2
@ BB#12:
.LCPI0_1:
	.long	1060439283              @ float 0.707106769
.LBB0_13:                               @   in Loop: Header=BB0_1 Depth=1
	b	.LBB0_14
.LBB0_14:                               @   Parent Loop BB0_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	vldr	s0, .LCPI0_1
	movw	r0, #1
	ldrsh	r1, [r11, #-16]
	movw	r2, :lower16:rv_tbl
	movt	r2, :upper16:rv_tbl
	add	r1, r2, r1, lsl #3
	ldrh	r1, [r1]
	strh	r1, [r11, #-14]
	ldrsh	r1, [r11, #-14]
	movw	r2, :lower16:window_s
	movt	r2, :upper16:window_s
	add	r3, r2, r1, lsl #2
	vldr	s2, [r3]
	ldr	r3, [r11, #-12]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	ldr	r12, [r3]
	ldr	r3, [r3, #4]
	add	r12, r12, r1, lsl #1
	ldrsh	r12, [r12]
	add	r1, r3, r1, lsl #1
	ldrsh	r1, [r1]
	sub	r1, r12, r1
	vmov	s4, r1
	vcvt.f32.s32	s4, s4
	vldr	s6, .LCPI0_0
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #40]
	ldrsh	r1, [r11, #-14]
	rsb	r3, r1, #127
	add	r3, r2, r3, lsl #2
	vldr	s2, [r3]
	ldr	r3, [r11, #-12]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	mov	r12, #256
	add	r1, r12, r1, lsl #1
	ldr	r12, [r3]
	ldr	r3, [r3, #4]
	add	r12, r12, r1
	ldrsh	r12, [r12]
	add	r1, r3, r1
	ldrsh	r1, [r1]
	sub	r1, r12, r1
	vmov	s4, r1
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #24]
	vldr	s4, [sp, #40]
	vsub.f32	s2, s4, s2
	vstr	s2, [sp, #36]
	vldr	s2, [sp, #40]
	vldr	s4, [sp, #24]
	vadd.f32	s2, s2, s4
	vstr	s2, [sp, #40]
	ldrsh	r1, [r11, #-14]
	add	r3, r2, r1, lsl #2
	vldr	s2, [r3, #256]
	ldr	r3, [r11, #-12]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	mov	r12, #128
	add	r1, r12, r1, lsl #1
	ldr	r12, [r3]
	ldr	r3, [r3, #4]
	add	r12, r12, r1
	ldrsh	r12, [r12]
	add	r1, r3, r1
	ldrsh	r1, [r1]
	sub	r1, r12, r1
	vmov	s4, r1
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #32]
	ldrsh	r1, [r11, #-14]
	rsb	r3, r1, #63
	add	r3, r2, r3, lsl #2
	vldr	s2, [r3]
	ldr	r3, [r11, #-12]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	mov	r12, #384
	add	r1, r12, r1, lsl #1
	ldr	r12, [r3]
	ldr	r3, [r3, #4]
	add	r12, r12, r1
	ldrsh	r12, [r12]
	add	r1, r3, r1
	ldrsh	r1, [r1]
	sub	r1, r12, r1
	vmov	s4, r1
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #24]
	vldr	s4, [sp, #32]
	vsub.f32	s2, s4, s2
	vstr	s2, [sp, #28]
	vldr	s2, [sp, #32]
	vldr	s4, [sp, #24]
	vadd.f32	s2, s2, s4
	vstr	s2, [sp, #32]
	ldr	r1, [r11, #-24]
	sub	r3, r1, #16
	str	r3, [r11, #-24]
	vldr	s2, [sp, #40]
	vldr	s4, [sp, #32]
	vadd.f32	s2, s2, s4
	vstr	s2, [r1, #-16]
	vldr	s2, [sp, #40]
	vldr	s4, [sp, #32]
	vsub.f32	s2, s2, s4
	ldr	r1, [r11, #-24]
	vstr	s2, [r1, #8]
	vldr	s2, [sp, #36]
	vldr	s4, [sp, #28]
	vadd.f32	s2, s2, s4
	ldr	r1, [r11, #-24]
	vstr	s2, [r1, #4]
	vldr	s2, [sp, #36]
	vldr	s4, [sp, #28]
	vsub.f32	s2, s2, s4
	ldr	r1, [r11, #-24]
	vstr	s2, [r1, #12]
	ldrsh	r1, [r11, #-14]
	add	r3, r2, r1, lsl #2
	vldr	s2, [r3, #4]
	ldr	r3, [r11, #-12]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	mov	r12, #2
	add	r1, r12, r1, lsl #1
	ldr	r12, [r3]
	ldr	r3, [r3, #4]
	add	r12, r12, r1
	ldrsh	r12, [r12]
	add	r1, r3, r1
	ldrsh	r1, [r1]
	sub	r1, r12, r1
	vmov	s4, r1
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #40]
	ldrsh	r1, [r11, #-14]
	rsb	r3, r1, #126
	add	r3, r2, r3, lsl #2
	vldr	s2, [r3]
	ldr	r3, [r11, #-12]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	movw	r12, #258
	add	r1, r12, r1, lsl #1
	ldr	r12, [r3]
	ldr	r3, [r3, #4]
	add	r12, r12, r1
	ldrsh	r12, [r12]
	add	r1, r3, r1
	ldrsh	r1, [r1]
	sub	r1, r12, r1
	vmov	s4, r1
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #24]
	vldr	s4, [sp, #40]
	vsub.f32	s2, s4, s2
	vstr	s2, [sp, #36]
	vldr	s2, [sp, #40]
	vldr	s4, [sp, #24]
	vadd.f32	s2, s2, s4
	vstr	s2, [sp, #40]
	ldrsh	r1, [r11, #-14]
	add	r3, r2, r1, lsl #2
	vldr	s2, [r3, #260]
	ldr	r3, [r11, #-12]
	ldrsh	r12, [r11, #-26]
	add	r1, r1, r12
	mov	r12, #130
	add	r1, r12, r1, lsl #1
	ldr	r12, [r3]
	ldr	r3, [r3, #4]
	add	r12, r12, r1
	ldrsh	r12, [r12]
	add	r1, r3, r1
	ldrsh	r1, [r1]
	sub	r1, r12, r1
	vmov	s4, r1
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #32]
	ldrsh	r1, [r11, #-14]
	rsb	r3, r1, #62
	add	r2, r2, r3, lsl #2
	vldr	s2, [r2]
	ldr	r2, [r11, #-12]
	ldrsh	r3, [r11, #-26]
	add	r1, r1, r3
	add	r1, r1, #193
	ldr	r3, [r2]
	ldr	r2, [r2, #4]
	add	r3, r3, r1, lsl #1
	ldrsh	r3, [r3]
	add	r1, r2, r1, lsl #1
	ldrsh	r1, [r1]
	sub	r1, r3, r1
	vmov	s4, r1
	vcvt.f32.s32	s4, s4
	vmul.f32	s0, s0, s4
	vmul.f32	s0, s2, s0
	vstr	s0, [sp, #24]
	vldr	s0, [sp, #32]
	vldr	s2, [sp, #24]
	vsub.f32	s0, s0, s2
	vstr	s0, [sp, #28]
	vldr	s0, [sp, #32]
	vldr	s2, [sp, #24]
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #32]
	vldr	s0, [sp, #40]
	vldr	s2, [sp, #32]
	vadd.f32	s0, s0, s2
	ldr	r1, [r11, #-24]
	add	r1, r1, #512
	vstr	s0, [r1]
	vldr	s0, [sp, #40]
	vldr	s2, [sp, #32]
	vsub.f32	s0, s0, s2
	ldr	r1, [r11, #-24]
	add	r1, r1, #520
	vstr	s0, [r1]
	vldr	s0, [sp, #36]
	vldr	s2, [sp, #28]
	vadd.f32	s0, s0, s2
	ldr	r1, [r11, #-24]
	add	r1, r1, #516
	vstr	s0, [r1]
	vldr	s0, [sp, #36]
	vldr	s2, [sp, #28]
	vsub.f32	s0, s0, s2
	ldr	r1, [r11, #-24]
	add	r1, r1, #524
	vstr	s0, [r1]
	str	r0, [sp, #8]            @ 4-byte Spill
@ BB#15:                                @   in Loop: Header=BB0_14 Depth=2
	movw	r0, #65535
	ldrh	r1, [r11, #-16]
	add	r0, r1, r0
	strh	r0, [r11, #-16]
	sxth	r0, r0
	cmp	r0, #0
	bge	.LBB0_14
@ BB#16:                                @   in Loop: Header=BB0_1 Depth=1
	b	.LBB0_17
.LBB0_17:                               @   in Loop: Header=BB0_1 Depth=1
	b	.LBB0_18
.LBB0_18:                               @   in Loop: Header=BB0_1 Depth=1
	movw	r0, #256
	ldr	r1, [r11, #-24]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #4]            @ 4-byte Reload
	sxth	r1, r1
	bl	fht
@ BB#19:                                @   in Loop: Header=BB0_1 Depth=1
	movw	r0, #1
	ldrh	r1, [r11, #-18]
	add	r0, r1, r0
	strh	r0, [r11, #-18]
	b	.LBB0_1
.LBB0_20:
	mov	sp, r11
	pop	{r11, pc}
	.p2align	2
@ BB#21:
.LCPI0_0:
	.long	1060439283              @ float 0.707106769
.Lfunc_end0:
	.size	fft_short, .Lfunc_end0-fft_short
	.cantunwind
	.fnend

	.p2align	3
	.type	fht,%function
	.code	32                      @ @fht
fht:
	.fnstart
@ BB#0:
	sub	sp, sp, #132
	movw	r2, #4
	movw	r3, :lower16:costab
	movt	r3, :upper16:costab
	movw	r12, #2
	str	r0, [sp, #128]
	strh	r1, [sp, #126]
	ldr	r0, [sp, #128]
	ldrsh	r1, [sp, #126]
	add	r0, r0, r1, lsl #2
	str	r0, [sp, #116]
	str	r3, [sp, #108]
	strh	r2, [sp, #124]
	str	r12, [sp, #20]          @ 4-byte Spill
.LBB1_1:                                @ =>This Loop Header: Depth=1
                                        @     Child Loop BB1_2 Depth 2
                                        @     Child Loop BB1_6 Depth 2
                                        @       Child Loop BB1_8 Depth 3
	movw	r0, #2
	ldrsh	r1, [sp, #124]
	lsr	r1, r1, #1
	strh	r1, [sp, #90]
	ldrh	r1, [sp, #124]
	strh	r1, [sp, #96]
	ldrh	r1, [sp, #124]
	lsl	r1, r1, #1
	strh	r1, [sp, #94]
	ldrh	r1, [sp, #94]
	ldrsh	r2, [sp, #96]
	add	r1, r1, r2
	strh	r1, [sp, #92]
	ldrh	r1, [sp, #94]
	lsl	r1, r1, #1
	strh	r1, [sp, #124]
	ldr	r1, [sp, #128]
	str	r1, [sp, #120]
	ldrsh	r2, [sp, #90]
	add	r1, r1, r2, lsl #2
	str	r1, [sp, #112]
	str	r0, [sp, #16]           @ 4-byte Spill
.LBB1_2:                                @   Parent Loop BB1_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	movw	r0, #2
	ldr	r1, [sp, #120]
	vldr	s0, [r1]
	ldrsh	r2, [sp, #96]
	add	r1, r1, r2, lsl #2
	vldr	s2, [r1]
	vsub.f32	s0, s0, s2
	vstr	s0, [sp, #80]
	ldr	r1, [sp, #120]
	vldr	s0, [r1]
	ldrsh	r2, [sp, #96]
	add	r1, r1, r2, lsl #2
	vldr	s2, [r1]
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #84]
	ldr	r1, [sp, #120]
	ldrsh	r2, [sp, #94]
	add	r2, r1, r2, lsl #2
	vldr	s0, [r2]
	ldrsh	r2, [sp, #92]
	add	r1, r1, r2, lsl #2
	vldr	s2, [r1]
	vsub.f32	s0, s0, s2
	vstr	s0, [sp, #72]
	ldr	r1, [sp, #120]
	ldrsh	r2, [sp, #94]
	add	r2, r1, r2, lsl #2
	vldr	s0, [r2]
	ldrsh	r2, [sp, #92]
	add	r1, r1, r2, lsl #2
	vldr	s2, [r1]
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #76]
	vldr	s2, [sp, #84]
	vsub.f32	s0, s2, s0
	ldr	r1, [sp, #120]
	ldrsh	r2, [sp, #94]
	add	r1, r1, r2, lsl #2
	vstr	s0, [r1]
	vldr	s0, [sp, #84]
	vldr	s2, [sp, #76]
	vadd.f32	s0, s0, s2
	ldr	r1, [sp, #120]
	vstr	s0, [r1]
	vldr	s0, [sp, #80]
	vldr	s2, [sp, #72]
	vsub.f32	s0, s0, s2
	ldr	r1, [sp, #120]
	ldrsh	r2, [sp, #92]
	add	r1, r1, r2, lsl #2
	vstr	s0, [r1]
	vldr	s0, [sp, #80]
	vldr	s2, [sp, #72]
	vadd.f32	s0, s0, s2
	ldr	r1, [sp, #120]
	ldrsh	r2, [sp, #96]
	add	r1, r1, r2, lsl #2
	vstr	s0, [r1]
	ldr	r1, [sp, #112]
	vldr	s0, [r1]
	ldrsh	r2, [sp, #96]
	add	r1, r1, r2, lsl #2
	vldr	s2, [r1]
	vsub.f32	s0, s0, s2
	vstr	s0, [sp, #80]
	ldr	r1, [sp, #112]
	vldr	s0, [r1]
	ldrsh	r2, [sp, #96]
	add	r1, r1, r2, lsl #2
	vldr	s2, [r1]
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #84]
	ldr	r1, [sp, #112]
	ldrsh	r2, [sp, #92]
	add	r1, r1, r2, lsl #2
	vldr	s0, [r1]
	vcvt.f64.f32	d16, s0
	vldr	d17, .LCPI1_1
	vmul.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	vstr	s0, [sp, #72]
	ldr	r1, [sp, #112]
	ldrsh	r2, [sp, #94]
	add	r1, r1, r2, lsl #2
	vldr	s0, [r1]
	vcvt.f64.f32	d16, s0
	vmul.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	vstr	s0, [sp, #76]
	vldr	s2, [sp, #84]
	vsub.f32	s0, s2, s0
	ldr	r1, [sp, #112]
	ldrsh	r2, [sp, #94]
	add	r1, r1, r2, lsl #2
	vstr	s0, [r1]
	vldr	s0, [sp, #84]
	vldr	s2, [sp, #76]
	vadd.f32	s0, s0, s2
	ldr	r1, [sp, #112]
	vstr	s0, [r1]
	vldr	s0, [sp, #80]
	vldr	s2, [sp, #72]
	vsub.f32	s0, s0, s2
	ldr	r1, [sp, #112]
	ldrsh	r2, [sp, #92]
	add	r1, r1, r2, lsl #2
	vstr	s0, [r1]
	vldr	s0, [sp, #80]
	vldr	s2, [sp, #72]
	vadd.f32	s0, s0, s2
	ldr	r1, [sp, #112]
	ldrsh	r2, [sp, #96]
	add	r1, r1, r2, lsl #2
	vstr	s0, [r1]
	ldrsh	r1, [sp, #124]
	ldr	r2, [sp, #112]
	add	r1, r2, r1, lsl #2
	str	r1, [sp, #112]
	ldrsh	r1, [sp, #124]
	ldr	r2, [sp, #120]
	add	r1, r2, r1, lsl #2
	str	r1, [sp, #120]
	str	r0, [sp, #12]           @ 4-byte Spill
	b	.LBB1_4
	.p2align	3
@ BB#3:
.LCPI1_1:
	.long	1719614413              @ double 1.4142135623730951
	.long	1073127582
.LBB1_4:                                @   in Loop: Header=BB1_2 Depth=2
	ldr	r0, [sp, #120]
	ldr	r1, [sp, #116]
	cmp	r0, r1
	blo	.LBB1_2
@ BB#5:                                 @   in Loop: Header=BB1_1 Depth=1
	movw	r0, #1
	ldr	r1, [sp, #108]
	vldr	s0, [r1]
	vstr	s0, [sp, #100]
	ldr	r1, [sp, #108]
	vldr	s0, [r1, #4]
	vstr	s0, [sp, #104]
	strh	r0, [sp, #98]
.LBB1_6:                                @   Parent Loop BB1_1 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB1_8 Depth 3
	ldrsh	r0, [sp, #98]
	ldrsh	r1, [sp, #90]
	cmp	r0, r1
	bge	.LBB1_12
@ BB#7:                                 @   in Loop: Header=BB1_6 Depth=2
	movw	r0, #2
	vldr	s0, [sp, #104]
	vmov.f32	s2, #-2.000000e+00
	vmul.f32	s2, s0, s2
	vmul.f32	s0, s2, s0
	vmov.f32	s2, #1.000000e+00
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #68]
	vldr	s0, [sp, #104]
	vadd.f32	s0, s0, s0
	vldr	s2, [sp, #100]
	vmul.f32	s0, s0, s2
	vstr	s0, [sp, #64]
	ldr	r1, [sp, #128]
	ldrsh	r2, [sp, #98]
	add	r1, r1, r2, lsl #2
	str	r1, [sp, #120]
	ldr	r1, [sp, #128]
	ldrsh	r2, [sp, #96]
	add	r1, r1, r2, lsl #2
	ldrsh	r2, [sp, #98]
	rsb	r3, r2, #0
	sub	r1, r1, r2, lsl #2
	str	r1, [sp, #112]
	str	r0, [sp, #8]            @ 4-byte Spill
	str	r3, [sp, #4]            @ 4-byte Spill
.LBB1_8:                                @   Parent Loop BB1_1 Depth=1
                                        @     Parent Loop BB1_6 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	movw	r0, #2
	vldr	s0, [sp, #64]
	ldr	r1, [sp, #120]
	ldrsh	r2, [sp, #96]
	add	r1, r1, r2, lsl #2
	vldr	s2, [r1]
	vmul.f32	s0, s0, s2
	vldr	s2, [sp, #68]
	ldr	r1, [sp, #112]
	add	r1, r1, r2, lsl #2
	vldr	s4, [r1]
	vmul.f32	s2, s2, s4
	vsub.f32	s0, s0, s2
	vstr	s0, [sp, #56]
	vldr	s0, [sp, #68]
	ldr	r1, [sp, #120]
	ldrsh	r2, [sp, #96]
	add	r1, r1, r2, lsl #2
	vldr	s2, [r1]
	vmul.f32	s0, s0, s2
	vldr	s2, [sp, #64]
	ldr	r1, [sp, #112]
	add	r1, r1, r2, lsl #2
	vldr	s4, [r1]
	vmul.f32	s2, s2, s4
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #60]
	ldr	r1, [sp, #120]
	vldr	s2, [r1]
	vsub.f32	s0, s2, s0
	vstr	s0, [sp, #44]
	ldr	r1, [sp, #120]
	vldr	s0, [r1]
	vldr	s2, [sp, #60]
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #48]
	ldr	r1, [sp, #112]
	vldr	s0, [r1]
	vldr	s2, [sp, #56]
	vsub.f32	s0, s0, s2
	vstr	s0, [sp, #40]
	ldr	r1, [sp, #112]
	vldr	s0, [r1]
	vldr	s2, [sp, #56]
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #52]
	vldr	s0, [sp, #64]
	ldr	r1, [sp, #120]
	ldrsh	r2, [sp, #92]
	add	r1, r1, r2, lsl #2
	vldr	s2, [r1]
	vmul.f32	s0, s0, s2
	vldr	s2, [sp, #68]
	ldr	r1, [sp, #112]
	add	r1, r1, r2, lsl #2
	vldr	s4, [r1]
	vmul.f32	s2, s2, s4
	vsub.f32	s0, s0, s2
	vstr	s0, [sp, #56]
	vldr	s0, [sp, #68]
	ldr	r1, [sp, #120]
	ldrsh	r2, [sp, #92]
	add	r1, r1, r2, lsl #2
	vldr	s2, [r1]
	vmul.f32	s0, s0, s2
	vldr	s2, [sp, #64]
	ldr	r1, [sp, #112]
	add	r1, r1, r2, lsl #2
	vldr	s4, [r1]
	vmul.f32	s2, s2, s4
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #60]
	ldr	r1, [sp, #120]
	ldrsh	r2, [sp, #94]
	add	r1, r1, r2, lsl #2
	vldr	s2, [r1]
	vsub.f32	s0, s2, s0
	vstr	s0, [sp, #28]
	ldr	r1, [sp, #120]
	ldrsh	r2, [sp, #94]
	add	r1, r1, r2, lsl #2
	vldr	s0, [r1]
	vldr	s2, [sp, #60]
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #36]
	ldr	r1, [sp, #112]
	ldrsh	r2, [sp, #94]
	add	r1, r1, r2, lsl #2
	vldr	s0, [r1]
	vldr	s2, [sp, #56]
	vsub.f32	s0, s0, s2
	vstr	s0, [sp, #24]
	ldr	r1, [sp, #112]
	ldrsh	r2, [sp, #94]
	add	r1, r1, r2, lsl #2
	vldr	s0, [r1]
	vldr	s2, [sp, #56]
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #32]
	vldr	s0, [sp, #104]
	vldr	s2, [sp, #36]
	vmul.f32	s0, s0, s2
	vldr	s2, [sp, #100]
	vldr	s4, [sp, #24]
	vmul.f32	s2, s2, s4
	vsub.f32	s0, s0, s2
	vstr	s0, [sp, #56]
	vldr	s0, [sp, #100]
	vldr	s2, [sp, #36]
	vmul.f32	s0, s0, s2
	vldr	s2, [sp, #104]
	vldr	s4, [sp, #24]
	vmul.f32	s2, s2, s4
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #60]
	vldr	s2, [sp, #48]
	vsub.f32	s0, s2, s0
	ldr	r1, [sp, #120]
	ldrsh	r2, [sp, #94]
	add	r1, r1, r2, lsl #2
	vstr	s0, [r1]
	vldr	s0, [sp, #48]
	vldr	s2, [sp, #60]
	vadd.f32	s0, s0, s2
	ldr	r1, [sp, #120]
	vstr	s0, [r1]
	vldr	s0, [sp, #40]
	vldr	s2, [sp, #56]
	vsub.f32	s0, s0, s2
	ldr	r1, [sp, #112]
	ldrsh	r2, [sp, #92]
	add	r1, r1, r2, lsl #2
	vstr	s0, [r1]
	vldr	s0, [sp, #40]
	vldr	s2, [sp, #56]
	vadd.f32	s0, s0, s2
	ldr	r1, [sp, #112]
	ldrsh	r2, [sp, #96]
	add	r1, r1, r2, lsl #2
	vstr	s0, [r1]
	vldr	s0, [sp, #100]
	vldr	s2, [sp, #32]
	vmul.f32	s0, s0, s2
	vldr	s2, [sp, #104]
	vldr	s4, [sp, #28]
	vmul.f32	s2, s2, s4
	vsub.f32	s0, s0, s2
	vstr	s0, [sp, #56]
	vldr	s0, [sp, #104]
	vldr	s2, [sp, #32]
	vmul.f32	s0, s0, s2
	vldr	s2, [sp, #100]
	vldr	s4, [sp, #28]
	vmul.f32	s2, s2, s4
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #60]
	vldr	s2, [sp, #52]
	vsub.f32	s0, s2, s0
	ldr	r1, [sp, #112]
	ldrsh	r2, [sp, #94]
	add	r1, r1, r2, lsl #2
	vstr	s0, [r1]
	vldr	s0, [sp, #52]
	vldr	s2, [sp, #60]
	vadd.f32	s0, s0, s2
	ldr	r1, [sp, #112]
	vstr	s0, [r1]
	vldr	s0, [sp, #44]
	vldr	s2, [sp, #56]
	vsub.f32	s0, s0, s2
	ldr	r1, [sp, #120]
	ldrsh	r2, [sp, #92]
	add	r1, r1, r2, lsl #2
	vstr	s0, [r1]
	vldr	s0, [sp, #44]
	vldr	s2, [sp, #56]
	vadd.f32	s0, s0, s2
	ldr	r1, [sp, #120]
	ldrsh	r2, [sp, #96]
	add	r1, r1, r2, lsl #2
	vstr	s0, [r1]
	ldrsh	r1, [sp, #124]
	ldr	r2, [sp, #112]
	add	r1, r2, r1, lsl #2
	str	r1, [sp, #112]
	ldrsh	r1, [sp, #124]
	ldr	r2, [sp, #120]
	add	r1, r2, r1, lsl #2
	str	r1, [sp, #120]
	str	r0, [sp]                @ 4-byte Spill
@ BB#9:                                 @   in Loop: Header=BB1_8 Depth=3
	ldr	r0, [sp, #120]
	ldr	r1, [sp, #116]
	cmp	r0, r1
	blo	.LBB1_8
@ BB#10:                                @   in Loop: Header=BB1_6 Depth=2
	vldr	s0, [sp, #100]
	vstr	s0, [sp, #68]
	vldr	s0, [sp, #68]
	ldr	r0, [sp, #108]
	vldr	s2, [r0]
	vmul.f32	s0, s0, s2
	vldr	s2, [sp, #104]
	ldr	r0, [sp, #108]
	vldr	s4, [r0, #4]
	vmul.f32	s2, s2, s4
	vsub.f32	s0, s0, s2
	vstr	s0, [sp, #100]
	vldr	s0, [sp, #68]
	ldr	r0, [sp, #108]
	vldr	s2, [r0, #4]
	vmul.f32	s0, s0, s2
	vldr	s2, [sp, #104]
	ldr	r0, [sp, #108]
	vldr	s4, [r0]
	vmul.f32	s2, s2, s4
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #104]
@ BB#11:                                @   in Loop: Header=BB1_6 Depth=2
	movw	r0, #1
	ldrh	r1, [sp, #98]
	add	r0, r1, r0
	strh	r0, [sp, #98]
	b	.LBB1_6
.LBB1_12:                               @   in Loop: Header=BB1_1 Depth=1
	ldr	r0, [sp, #108]
	add	r0, r0, #8
	str	r0, [sp, #108]
@ BB#13:                                @   in Loop: Header=BB1_1 Depth=1
	ldrsh	r0, [sp, #124]
	ldrsh	r1, [sp, #126]
	cmp	r0, r1
	blt	.LBB1_1
@ BB#14:
	add	sp, sp, #132
	bx	lr
@ BB#15:
.Lfunc_end1:
	.size	fht, .Lfunc_end1-fht
	.cantunwind
	.fnend

	.globl	fft_long
	.p2align	2
	.type	fft_long,%function
	.code	32                      @ @fft_long
fft_long:
	.fnstart
@ BB#0:
	push	{r4, r5, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #96
	movw	r3, #127
	str	r0, [r11, #-12]
	str	r1, [r11, #-16]
	str	r2, [r11, #-20]
	strh	r3, [r11, #-24]
	ldr	r0, [r11, #-12]
	add	r0, r0, #2048
	str	r0, [r11, #-12]
	ldr	r0, [r11, #-16]
	cmp	r0, #2
	bge	.LBB2_5
@ BB#1:
	b	.LBB2_2
.LBB2_2:                                @ =>This Inner Loop Header: Depth=1
	movw	r0, #2060
	movw	r1, #2052
	movw	r2, #2056
	movw	r3, #1
	ldrsh	r12, [r11, #-24]
	movw	lr, :lower16:rv_tbl
	movt	lr, :upper16:rv_tbl
	add	r12, lr, r12, lsl #1
	ldrh	r12, [r12]
	strh	r12, [r11, #-22]
	ldrsh	r12, [r11, #-22]
	movw	lr, :lower16:window
	movt	lr, :upper16:window
	add	r4, lr, r12, lsl #2
	vldr	s0, [r4]
	ldr	r4, [r11, #-20]
	ldr	r5, [r11, #-16]
	ldr	r4, [r4, r5, lsl #2]
	add	r12, r4, r12, lsl #1
	ldrsh	r12, [r12]
	vmov	s2, r12
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-28]
	ldrsh	r12, [r11, #-22]
	movw	r4, #511
	sub	r4, r4, r12
	add	r4, lr, r4, lsl #2
	vldr	s0, [r4]
	ldr	r4, [r11, #-20]
	ldr	r5, [r11, #-16]
	ldr	r4, [r4, r5, lsl #2]
	add	r12, r4, r12, lsl #1
	mov	r4, #1024
	ldrsh	r12, [r12, r4]
	vmov	s2, r12
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-44]
	vldr	s2, [r11, #-28]
	vsub.f32	s0, s2, s0
	vstr	s0, [r11, #-32]
	vldr	s0, [r11, #-28]
	vldr	s2, [r11, #-44]
	vadd.f32	s0, s0, s2
	vstr	s0, [r11, #-28]
	ldrsh	r12, [r11, #-22]
	add	r12, r12, #256
	add	r4, lr, r12, lsl #2
	vldr	s0, [r4]
	ldr	r4, [r11, #-20]
	ldr	r5, [r11, #-16]
	ldr	r4, [r4, r5, lsl #2]
	add	r12, r4, r12, lsl #1
	ldrsh	r12, [r12]
	vmov	s2, r12
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-36]
	ldrsh	r12, [r11, #-22]
	rsb	r4, r12, #255
	add	r4, lr, r4, lsl #2
	vldr	s0, [r4]
	ldr	r4, [r11, #-20]
	ldr	r5, [r11, #-16]
	ldr	r4, [r4, r5, lsl #2]
	add	r12, r4, r12, lsl #1
	mov	r4, #1536
	ldrsh	r12, [r12, r4]
	vmov	s2, r12
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-44]
	vldr	s2, [r11, #-36]
	vsub.f32	s0, s2, s0
	vstr	s0, [r11, #-40]
	vldr	s0, [r11, #-36]
	vldr	s2, [r11, #-44]
	vadd.f32	s0, s0, s2
	vstr	s0, [r11, #-36]
	ldr	r12, [r11, #-12]
	sub	r4, r12, #16
	str	r4, [r11, #-12]
	vldr	s0, [r11, #-28]
	vldr	s2, [r11, #-36]
	vadd.f32	s0, s0, s2
	vstr	s0, [r12, #-16]
	vldr	s0, [r11, #-28]
	vldr	s2, [r11, #-36]
	vsub.f32	s0, s0, s2
	ldr	r12, [r11, #-12]
	vstr	s0, [r12, #8]
	vldr	s0, [r11, #-32]
	vldr	s2, [r11, #-40]
	vadd.f32	s0, s0, s2
	ldr	r12, [r11, #-12]
	vstr	s0, [r12, #4]
	vldr	s0, [r11, #-32]
	vldr	s2, [r11, #-40]
	vsub.f32	s0, s0, s2
	ldr	r12, [r11, #-12]
	vstr	s0, [r12, #12]
	ldrsh	r12, [r11, #-22]
	add	r12, r12, #1
	add	r4, lr, r12, lsl #2
	vldr	s0, [r4]
	ldr	r4, [r11, #-20]
	ldr	r5, [r11, #-16]
	ldr	r4, [r4, r5, lsl #2]
	add	r12, r4, r12, lsl #1
	ldrsh	r12, [r12]
	vmov	s2, r12
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-28]
	ldrsh	r12, [r11, #-22]
	movw	r4, #510
	sub	r4, r4, r12
	add	r4, lr, r4, lsl #2
	vldr	s0, [r4]
	ldr	r4, [r11, #-20]
	ldr	r5, [r11, #-16]
	ldr	r4, [r4, r5, lsl #2]
	add	r12, r4, r12, lsl #1
	movw	r4, #1026
	ldrsh	r12, [r12, r4]
	vmov	s2, r12
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-44]
	vldr	s2, [r11, #-28]
	vsub.f32	s0, s2, s0
	vstr	s0, [r11, #-32]
	vldr	s0, [r11, #-28]
	vldr	s2, [r11, #-44]
	vadd.f32	s0, s0, s2
	vstr	s0, [r11, #-28]
	ldrsh	r12, [r11, #-22]
	movw	r4, #257
	add	r12, r12, r4
	add	r4, lr, r12, lsl #2
	vldr	s0, [r4]
	ldr	r4, [r11, #-20]
	ldr	r5, [r11, #-16]
	ldr	r4, [r4, r5, lsl #2]
	add	r12, r4, r12, lsl #1
	ldrsh	r12, [r12]
	vmov	s2, r12
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-36]
	ldrsh	r12, [r11, #-22]
	rsb	r4, r12, #254
	add	lr, lr, r4, lsl #2
	vldr	s0, [lr]
	ldr	lr, [r11, #-20]
	ldr	r4, [r11, #-16]
	ldr	lr, [lr, r4, lsl #2]
	movw	r4, #769
	add	r12, r12, r4
	add	r12, lr, r12, lsl #1
	ldrsh	r12, [r12]
	vmov	s2, r12
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-44]
	vldr	s0, [r11, #-36]
	vldr	s2, [r11, #-44]
	vsub.f32	s0, s0, s2
	vstr	s0, [r11, #-40]
	vldr	s0, [r11, #-36]
	vldr	s2, [r11, #-44]
	vadd.f32	s0, s0, s2
	vstr	s0, [r11, #-36]
	vldr	s0, [r11, #-28]
	vldr	s2, [r11, #-36]
	vadd.f32	s0, s0, s2
	ldr	r12, [r11, #-12]
	add	r12, r12, #2048
	vstr	s0, [r12]
	vldr	s0, [r11, #-28]
	vldr	s2, [r11, #-36]
	vsub.f32	s0, s0, s2
	ldr	r12, [r11, #-12]
	add	r2, r12, r2
	vstr	s0, [r2]
	vldr	s0, [r11, #-32]
	vldr	s2, [r11, #-40]
	vadd.f32	s0, s0, s2
	ldr	r2, [r11, #-12]
	add	r1, r2, r1
	vstr	s0, [r1]
	vldr	s0, [r11, #-32]
	vldr	s2, [r11, #-40]
	vsub.f32	s0, s0, s2
	ldr	r1, [r11, #-12]
	add	r0, r1, r0
	vstr	s0, [r0]
	str	r3, [sp, #16]           @ 4-byte Spill
@ BB#3:                                 @   in Loop: Header=BB2_2 Depth=1
	movw	r0, #65535
	ldrh	r1, [r11, #-24]
	add	r0, r1, r0
	strh	r0, [r11, #-24]
	sxth	r0, r0
	cmp	r0, #0
	bge	.LBB2_2
@ BB#4:
	b	.LBB2_16
.LBB2_5:
	ldr	r0, [r11, #-16]
	cmp	r0, #2
	bne	.LBB2_11
@ BB#6:
	b	.LBB2_7
.LBB2_7:                                @ =>This Inner Loop Header: Depth=1
	movw	r0, #2060
	movw	r1, #2052
	movw	r2, #2056
	vldr	s0, .LCPI2_1
	movw	r3, #1
	ldrsh	r12, [r11, #-24]
	movw	lr, :lower16:rv_tbl
	movt	lr, :upper16:rv_tbl
	add	r12, lr, r12, lsl #1
	ldrh	r12, [r12]
	strh	r12, [r11, #-22]
	ldrsh	r12, [r11, #-22]
	movw	lr, :lower16:window
	movt	lr, :upper16:window
	add	r4, lr, r12, lsl #2
	vldr	s2, [r4]
	ldr	r4, [r11, #-20]
	ldr	r5, [r4]
	ldr	r4, [r4, #4]
	add	r5, r5, r12, lsl #1
	ldrsh	r5, [r5]
	add	r12, r4, r12, lsl #1
	ldrsh	r12, [r12]
	add	r12, r5, r12
	vmov	s4, r12
	vcvt.f32.s32	s4, s4
	vldr	s6, .LCPI2_1
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [r11, #-48]
	ldrsh	r12, [r11, #-22]
	movw	r4, #511
	sub	r4, r4, r12
	add	r4, lr, r4, lsl #2
	vldr	s2, [r4]
	ldr	r4, [r11, #-20]
	mov	r5, #1024
	add	r12, r5, r12, lsl #1
	ldr	r5, [r4]
	ldr	r4, [r4, #4]
	add	r5, r5, r12
	ldrsh	r5, [r5]
	add	r12, r4, r12
	ldrsh	r12, [r12]
	add	r12, r5, r12
	vmov	s4, r12
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #40]
	vldr	s4, [r11, #-48]
	vsub.f32	s2, s4, s2
	vstr	s2, [sp, #52]
	vldr	s2, [r11, #-48]
	vldr	s4, [sp, #40]
	vadd.f32	s2, s2, s4
	vstr	s2, [r11, #-48]
	ldrsh	r12, [r11, #-22]
	add	r12, r12, #256
	add	r4, lr, r12, lsl #2
	vldr	s2, [r4]
	ldr	r4, [r11, #-20]
	ldr	r5, [r4]
	ldr	r4, [r4, #4]
	add	r5, r5, r12, lsl #1
	ldrsh	r5, [r5]
	add	r12, r4, r12, lsl #1
	ldrsh	r12, [r12]
	add	r12, r5, r12
	vmov	s4, r12
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #48]
	ldrsh	r12, [r11, #-22]
	rsb	r4, r12, #255
	add	r4, lr, r4, lsl #2
	vldr	s2, [r4]
	ldr	r4, [r11, #-20]
	mov	r5, #1536
	add	r12, r5, r12, lsl #1
	ldr	r5, [r4]
	ldr	r4, [r4, #4]
	add	r5, r5, r12
	ldrsh	r5, [r5]
	add	r12, r4, r12
	ldrsh	r12, [r12]
	add	r12, r5, r12
	vmov	s4, r12
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #40]
	vldr	s4, [sp, #48]
	vsub.f32	s2, s4, s2
	vstr	s2, [sp, #44]
	vldr	s2, [sp, #48]
	vldr	s4, [sp, #40]
	vadd.f32	s2, s2, s4
	vstr	s2, [sp, #48]
	ldr	r12, [r11, #-12]
	sub	r4, r12, #16
	str	r4, [r11, #-12]
	vldr	s2, [r11, #-48]
	vldr	s4, [sp, #48]
	vadd.f32	s2, s2, s4
	vstr	s2, [r12, #-16]
	vldr	s2, [r11, #-48]
	vldr	s4, [sp, #48]
	vsub.f32	s2, s2, s4
	ldr	r12, [r11, #-12]
	vstr	s2, [r12, #8]
	vldr	s2, [sp, #52]
	vldr	s4, [sp, #44]
	vadd.f32	s2, s2, s4
	ldr	r12, [r11, #-12]
	vstr	s2, [r12, #4]
	vldr	s2, [sp, #52]
	vldr	s4, [sp, #44]
	vsub.f32	s2, s2, s4
	ldr	r12, [r11, #-12]
	vstr	s2, [r12, #12]
	ldrsh	r12, [r11, #-22]
	add	r12, r12, #1
	add	r4, lr, r12, lsl #2
	vldr	s2, [r4]
	ldr	r4, [r11, #-20]
	ldr	r5, [r4]
	ldr	r4, [r4, #4]
	add	r5, r5, r12, lsl #1
	ldrsh	r5, [r5]
	add	r12, r4, r12, lsl #1
	ldrsh	r12, [r12]
	add	r12, r5, r12
	vmov	s4, r12
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [r11, #-48]
	ldrsh	r12, [r11, #-22]
	movw	r4, #510
	sub	r4, r4, r12
	add	r4, lr, r4, lsl #2
	vldr	s2, [r4]
	ldr	r4, [r11, #-20]
	movw	r5, #1026
	add	r12, r5, r12, lsl #1
	ldr	r5, [r4]
	ldr	r4, [r4, #4]
	add	r5, r5, r12
	ldrsh	r5, [r5]
	add	r12, r4, r12
	ldrsh	r12, [r12]
	add	r12, r5, r12
	vmov	s4, r12
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #40]
	vldr	s4, [r11, #-48]
	vsub.f32	s2, s4, s2
	vstr	s2, [sp, #52]
	vldr	s2, [r11, #-48]
	vldr	s4, [sp, #40]
	vadd.f32	s2, s2, s4
	vstr	s2, [r11, #-48]
	ldrsh	r12, [r11, #-22]
	movw	r4, #257
	add	r12, r12, r4
	add	r4, lr, r12, lsl #2
	vldr	s2, [r4]
	ldr	r4, [r11, #-20]
	ldr	r5, [r4]
	ldr	r4, [r4, #4]
	add	r5, r5, r12, lsl #1
	ldrsh	r5, [r5]
	add	r12, r4, r12, lsl #1
	ldrsh	r12, [r12]
	add	r12, r5, r12
	vmov	s4, r12
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #48]
	ldrsh	r12, [r11, #-22]
	rsb	r4, r12, #254
	add	lr, lr, r4, lsl #2
	vldr	s2, [lr]
	ldr	lr, [r11, #-20]
	movw	r4, #769
	add	r12, r12, r4
	ldr	r4, [lr]
	ldr	lr, [lr, #4]
	add	r4, r4, r12, lsl #1
	ldrsh	r4, [r4]
	add	r12, lr, r12, lsl #1
	ldrsh	r12, [r12]
	add	r12, r4, r12
	vmov	s4, r12
	vcvt.f32.s32	s4, s4
	vmul.f32	s0, s0, s4
	vmul.f32	s0, s2, s0
	vstr	s0, [sp, #40]
	vldr	s0, [sp, #48]
	vldr	s2, [sp, #40]
	vsub.f32	s0, s0, s2
	vstr	s0, [sp, #44]
	vldr	s0, [sp, #48]
	vldr	s2, [sp, #40]
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #48]
	vldr	s0, [r11, #-48]
	vldr	s2, [sp, #48]
	vadd.f32	s0, s0, s2
	ldr	r12, [r11, #-12]
	add	r12, r12, #2048
	vstr	s0, [r12]
	vldr	s0, [r11, #-48]
	vldr	s2, [sp, #48]
	vsub.f32	s0, s0, s2
	ldr	r12, [r11, #-12]
	add	r2, r12, r2
	vstr	s0, [r2]
	vldr	s0, [sp, #52]
	vldr	s2, [sp, #44]
	vadd.f32	s0, s0, s2
	ldr	r2, [r11, #-12]
	add	r1, r2, r1
	vstr	s0, [r1]
	vldr	s0, [sp, #52]
	vldr	s2, [sp, #44]
	vsub.f32	s0, s0, s2
	ldr	r1, [r11, #-12]
	add	r0, r1, r0
	vstr	s0, [r0]
	str	r3, [sp, #12]           @ 4-byte Spill
@ BB#8:                                 @   in Loop: Header=BB2_7 Depth=1
	movw	r0, #65535
	ldrh	r1, [r11, #-24]
	add	r0, r1, r0
	strh	r0, [r11, #-24]
	sxth	r0, r0
	cmp	r0, #0
	bge	.LBB2_7
@ BB#9:
	b	.LBB2_15
	.p2align	2
@ BB#10:
.LCPI2_1:
	.long	1060439283              @ float 0.707106769
.LBB2_11:
	b	.LBB2_12
.LBB2_12:                               @ =>This Inner Loop Header: Depth=1
	movw	r0, #2060
	movw	r1, #2052
	movw	r2, #2056
	vldr	s0, .LCPI2_0
	movw	r3, #1
	ldrsh	r12, [r11, #-24]
	movw	lr, :lower16:rv_tbl
	movt	lr, :upper16:rv_tbl
	add	r12, lr, r12, lsl #1
	ldrh	r12, [r12]
	strh	r12, [r11, #-22]
	ldrsh	r12, [r11, #-22]
	movw	lr, :lower16:window
	movt	lr, :upper16:window
	add	r4, lr, r12, lsl #2
	vldr	s2, [r4]
	ldr	r4, [r11, #-20]
	ldr	r5, [r4]
	ldr	r4, [r4, #4]
	add	r5, r5, r12, lsl #1
	ldrsh	r5, [r5]
	add	r12, r4, r12, lsl #1
	ldrsh	r12, [r12]
	sub	r12, r5, r12
	vmov	s4, r12
	vcvt.f32.s32	s4, s4
	vldr	s6, .LCPI2_0
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #36]
	ldrsh	r12, [r11, #-22]
	movw	r4, #511
	sub	r4, r4, r12
	add	r4, lr, r4, lsl #2
	vldr	s2, [r4]
	ldr	r4, [r11, #-20]
	mov	r5, #1024
	add	r12, r5, r12, lsl #1
	ldr	r5, [r4]
	ldr	r4, [r4, #4]
	add	r5, r5, r12
	ldrsh	r5, [r5]
	add	r12, r4, r12
	ldrsh	r12, [r12]
	sub	r12, r5, r12
	vmov	s4, r12
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #20]
	vldr	s4, [sp, #36]
	vsub.f32	s2, s4, s2
	vstr	s2, [sp, #32]
	vldr	s2, [sp, #36]
	vldr	s4, [sp, #20]
	vadd.f32	s2, s2, s4
	vstr	s2, [sp, #36]
	ldrsh	r12, [r11, #-22]
	add	r12, r12, #256
	add	r4, lr, r12, lsl #2
	vldr	s2, [r4]
	ldr	r4, [r11, #-20]
	ldr	r5, [r4]
	ldr	r4, [r4, #4]
	add	r5, r5, r12, lsl #1
	ldrsh	r5, [r5]
	add	r12, r4, r12, lsl #1
	ldrsh	r12, [r12]
	sub	r12, r5, r12
	vmov	s4, r12
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #28]
	ldrsh	r12, [r11, #-22]
	rsb	r4, r12, #255
	add	r4, lr, r4, lsl #2
	vldr	s2, [r4]
	ldr	r4, [r11, #-20]
	mov	r5, #1536
	add	r12, r5, r12, lsl #1
	ldr	r5, [r4]
	ldr	r4, [r4, #4]
	add	r5, r5, r12
	ldrsh	r5, [r5]
	add	r12, r4, r12
	ldrsh	r12, [r12]
	sub	r12, r5, r12
	vmov	s4, r12
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #20]
	vldr	s4, [sp, #28]
	vsub.f32	s2, s4, s2
	vstr	s2, [sp, #24]
	vldr	s2, [sp, #28]
	vldr	s4, [sp, #20]
	vadd.f32	s2, s2, s4
	vstr	s2, [sp, #28]
	ldr	r12, [r11, #-12]
	sub	r4, r12, #16
	str	r4, [r11, #-12]
	vldr	s2, [sp, #36]
	vldr	s4, [sp, #28]
	vadd.f32	s2, s2, s4
	vstr	s2, [r12, #-16]
	vldr	s2, [sp, #36]
	vldr	s4, [sp, #28]
	vsub.f32	s2, s2, s4
	ldr	r12, [r11, #-12]
	vstr	s2, [r12, #8]
	vldr	s2, [sp, #32]
	vldr	s4, [sp, #24]
	vadd.f32	s2, s2, s4
	ldr	r12, [r11, #-12]
	vstr	s2, [r12, #4]
	vldr	s2, [sp, #32]
	vldr	s4, [sp, #24]
	vsub.f32	s2, s2, s4
	ldr	r12, [r11, #-12]
	vstr	s2, [r12, #12]
	ldrsh	r12, [r11, #-22]
	add	r12, r12, #1
	add	r4, lr, r12, lsl #2
	vldr	s2, [r4]
	ldr	r4, [r11, #-20]
	ldr	r5, [r4]
	ldr	r4, [r4, #4]
	add	r5, r5, r12, lsl #1
	ldrsh	r5, [r5]
	add	r12, r4, r12, lsl #1
	ldrsh	r12, [r12]
	sub	r12, r5, r12
	vmov	s4, r12
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #36]
	ldrsh	r12, [r11, #-22]
	movw	r4, #510
	sub	r4, r4, r12
	add	r4, lr, r4, lsl #2
	vldr	s2, [r4]
	ldr	r4, [r11, #-20]
	movw	r5, #1026
	add	r12, r5, r12, lsl #1
	ldr	r5, [r4]
	ldr	r4, [r4, #4]
	add	r5, r5, r12
	ldrsh	r5, [r5]
	add	r12, r4, r12
	ldrsh	r12, [r12]
	sub	r12, r5, r12
	vmov	s4, r12
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #20]
	vldr	s4, [sp, #36]
	vsub.f32	s2, s4, s2
	vstr	s2, [sp, #32]
	vldr	s2, [sp, #36]
	vldr	s4, [sp, #20]
	vadd.f32	s2, s2, s4
	vstr	s2, [sp, #36]
	ldrsh	r12, [r11, #-22]
	movw	r4, #257
	add	r12, r12, r4
	add	r4, lr, r12, lsl #2
	vldr	s2, [r4]
	ldr	r4, [r11, #-20]
	ldr	r5, [r4]
	ldr	r4, [r4, #4]
	add	r5, r5, r12, lsl #1
	ldrsh	r5, [r5]
	add	r12, r4, r12, lsl #1
	ldrsh	r12, [r12]
	sub	r12, r5, r12
	vmov	s4, r12
	vcvt.f32.s32	s4, s4
	vmul.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #28]
	ldrsh	r12, [r11, #-22]
	rsb	r4, r12, #254
	add	lr, lr, r4, lsl #2
	vldr	s2, [lr]
	ldr	lr, [r11, #-20]
	movw	r4, #769
	add	r12, r12, r4
	ldr	r4, [lr]
	ldr	lr, [lr, #4]
	add	r4, r4, r12, lsl #1
	ldrsh	r4, [r4]
	add	r12, lr, r12, lsl #1
	ldrsh	r12, [r12]
	sub	r12, r4, r12
	vmov	s4, r12
	vcvt.f32.s32	s4, s4
	vmul.f32	s0, s0, s4
	vmul.f32	s0, s2, s0
	vstr	s0, [sp, #20]
	vldr	s0, [sp, #28]
	vldr	s2, [sp, #20]
	vsub.f32	s0, s0, s2
	vstr	s0, [sp, #24]
	vldr	s0, [sp, #28]
	vldr	s2, [sp, #20]
	vadd.f32	s0, s0, s2
	vstr	s0, [sp, #28]
	vldr	s0, [sp, #36]
	vldr	s2, [sp, #28]
	vadd.f32	s0, s0, s2
	ldr	r12, [r11, #-12]
	add	r12, r12, #2048
	vstr	s0, [r12]
	vldr	s0, [sp, #36]
	vldr	s2, [sp, #28]
	vsub.f32	s0, s0, s2
	ldr	r12, [r11, #-12]
	add	r2, r12, r2
	vstr	s0, [r2]
	vldr	s0, [sp, #32]
	vldr	s2, [sp, #24]
	vadd.f32	s0, s0, s2
	ldr	r2, [r11, #-12]
	add	r1, r2, r1
	vstr	s0, [r1]
	vldr	s0, [sp, #32]
	vldr	s2, [sp, #24]
	vsub.f32	s0, s0, s2
	ldr	r1, [r11, #-12]
	add	r0, r1, r0
	vstr	s0, [r0]
	str	r3, [sp, #8]            @ 4-byte Spill
@ BB#13:                                @   in Loop: Header=BB2_12 Depth=1
	movw	r0, #65535
	ldrh	r1, [r11, #-24]
	add	r0, r1, r0
	strh	r0, [r11, #-24]
	sxth	r0, r0
	cmp	r0, #0
	bge	.LBB2_12
@ BB#14:
	b	.LBB2_15
.LBB2_15:
	b	.LBB2_16
.LBB2_16:
	movw	r0, #1024
	ldr	r1, [r11, #-12]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #4]            @ 4-byte Reload
	sxth	r1, r1
	bl	fht
	sub	sp, r11, #8
	pop	{r4, r5, r11, pc}
	.p2align	2
@ BB#17:
.LCPI2_0:
	.long	1060439283              @ float 0.707106769
.Lfunc_end2:
	.size	fft_long, .Lfunc_end2-fft_long
	.cantunwind
	.fnend

	.globl	init_fft
	.p2align	3
	.type	init_fft,%function
	.code	32                      @ @init_fft
init_fft:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #64
	movw	r0, #0
	vldr	s0, .LCPI3_0
	vstr	s0, [r11, #-8]
	str	r0, [r11, #-4]
.LBB3_1:                                @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-4]
	cmp	r0, #4
	bge	.LBB3_4
@ BB#2:                                 @   in Loop: Header=BB3_1 Depth=1
	vmov.f64	d16, #2.500000e-01
	movw	r0, :lower16:costab
	movt	r0, :upper16:costab
	movw	r1, #2
	vldr	s0, [r11, #-8]
	vcvt.f64.f32	d17, s0
	vmov	r2, r3, d17
	str	r0, [r11, #-12]         @ 4-byte Spill
	mov	r0, r2
	str	r1, [r11, #-16]         @ 4-byte Spill
	mov	r1, r3
	vstr	d16, [r11, #-24]        @ 8-byte Spill
	bl	cos
	vmov	d16, r0, r1
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-4]
	movw	r1, :lower16:costab
	movt	r1, :upper16:costab
	add	r0, r1, r0, lsl #3
	vstr	s0, [r0]
	vldr	s0, [r11, #-8]
	vcvt.f64.f32	d16, s0
	vmov	r0, r2, d16
	str	r1, [r11, #-28]         @ 4-byte Spill
	mov	r1, r2
	bl	sin
	vmov	d16, r0, r1
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-4]
	mov	r1, #1
	orr	r0, r1, r0, lsl #1
	ldr	r1, [r11, #-28]         @ 4-byte Reload
	add	r0, r1, r0, lsl #2
	vstr	s0, [r0]
	vldr	s0, [r11, #-8]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-24]        @ 8-byte Reload
	vmul.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	vstr	s0, [r11, #-8]
@ BB#3:                                 @   in Loop: Header=BB3_1 Depth=1
	ldr	r0, [r11, #-4]
	add	r0, r0, #1
	str	r0, [r11, #-4]
	b	.LBB3_1
.LBB3_4:
	movw	r0, #0
	str	r0, [r11, #-4]
.LBB3_5:                                @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-4]
	cmp	r0, #512
	bge	.LBB3_8
@ BB#6:                                 @   in Loop: Header=BB3_5 Depth=1
	movw	r0, :lower16:window
	movt	r0, :upper16:window
	movw	r1, #2
	ldr	r2, [r11, #-4]
	vmov	s0, r2
	vcvt.f64.s32	d16, s0
	vmov.f64	d17, #5.000000e-01
	vadd.f64	d16, d16, d17
	vldr	d18, .LCPI3_1
	vmul.f64	d16, d16, d18
	vldr	d18, .LCPI3_3
	vdiv.f64	d16, d16, d18
	vmov	r2, r3, d16
	str	r0, [sp, #32]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #28]           @ 4-byte Spill
	mov	r1, r3
	vstr	d17, [sp, #16]          @ 8-byte Spill
	bl	cos
	vmov	d16, r0, r1
	vmov.f64	d17, #1.000000e+00
	vsub.f64	d16, d17, d16
	vldr	d17, [sp, #16]          @ 8-byte Reload
	vmul.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-4]
	movw	r1, :lower16:window
	movt	r1, :upper16:window
	add	r0, r1, r0, lsl #2
	vstr	s0, [r0]
@ BB#7:                                 @   in Loop: Header=BB3_5 Depth=1
	ldr	r0, [r11, #-4]
	add	r0, r0, #1
	str	r0, [r11, #-4]
	b	.LBB3_5
.LBB3_8:
	movw	r0, #0
	str	r0, [r11, #-4]
.LBB3_9:                                @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-4]
	cmp	r0, #128
	bge	.LBB3_12
@ BB#10:                                @   in Loop: Header=BB3_9 Depth=1
	movw	r0, :lower16:window_s
	movt	r0, :upper16:window_s
	movw	r1, #2
	ldr	r2, [r11, #-4]
	vmov	s0, r2
	vcvt.f64.s32	d16, s0
	vmov.f64	d17, #5.000000e-01
	vadd.f64	d16, d16, d17
	vldr	d18, .LCPI3_1
	vmul.f64	d16, d16, d18
	vldr	d18, .LCPI3_2
	vdiv.f64	d16, d16, d18
	vmov	r2, r3, d16
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #8]            @ 4-byte Spill
	mov	r1, r3
	vstr	d17, [sp]               @ 8-byte Spill
	bl	cos
	vmov	d16, r0, r1
	vmov.f64	d17, #1.000000e+00
	vsub.f64	d16, d17, d16
	vldr	d17, [sp]               @ 8-byte Reload
	vmul.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-4]
	movw	r1, :lower16:window_s
	movt	r1, :upper16:window_s
	add	r0, r1, r0, lsl #2
	vstr	s0, [r0]
@ BB#11:                                @   in Loop: Header=BB3_9 Depth=1
	ldr	r0, [r11, #-4]
	add	r0, r0, #1
	str	r0, [r11, #-4]
	b	.LBB3_9
.LBB3_12:
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#13:
.LCPI3_1:
	.long	1413754136              @ double 6.2831853071795862
	.long	1075388923
.LCPI3_2:
	.long	0                       @ double 256
	.long	1081081856
.LCPI3_3:
	.long	0                       @ double 1024
	.long	1083179008
.LCPI3_0:
	.long	1053364187              @ float 0.392699093
.Lfunc_end3:
	.size	init_fft, .Lfunc_end3-init_fft
	.cantunwind
	.fnend

	.globl	InitFormatBitStream
	.p2align	2
	.type	InitFormatBitStream,%function
	.code	32                      @ @InitFormatBitStream
InitFormatBitStream:
	.fnstart
@ BB#0:
	movw	r0, #0
	movw	r1, :lower16:BitsRemaining
	movt	r1, :upper16:BitsRemaining
	movw	r2, :lower16:ThisFrameSize
	movt	r2, :upper16:ThisFrameSize
	movw	r3, :lower16:BitCount
	movt	r3, :upper16:BitCount
	str	r0, [r3]
	str	r0, [r2]
	str	r0, [r1]
	bx	lr
.Lfunc_end4:
	.size	InitFormatBitStream, .Lfunc_end4-InitFormatBitStream
	.cantunwind
	.fnend

	.globl	BF_BitstreamFrame
	.p2align	2
	.type	BF_BitstreamFrame,%function
	.code	32                      @ @BF_BitstreamFrame
BF_BitstreamFrame:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #56
	movw	r2, #1
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #4]
	cmp	r0, #2
	str	r2, [r11, #-12]         @ 4-byte Spill
	ble	.LBB5_2
@ BB#1:
	movw	r0, :lower16:.L.str
	movt	r0, :upper16:.L.str
	movw	r1, :lower16:.L.str.1
	movt	r1, :upper16:.L.str.1
	movw	r2, #59
	movw	r3, :lower16:.L__func__.BF_BitstreamFrame
	movt	r3, :upper16:.L__func__.BF_BitstreamFrame
	bl	__assert_fail
	movw	r0, #0
	str	r0, [r11, #-12]         @ 4-byte Spill
.LBB5_2:
	ldr	r0, [r11, #-12]         @ 4-byte Reload
	movw	r1, #1
	ldr	r2, [r11, #-4]
	ldr	r2, [r2, #8]
	cmp	r2, #2
	str	r0, [r11, #-16]         @ 4-byte Spill
	str	r1, [r11, #-20]         @ 4-byte Spill
	ble	.LBB5_4
@ BB#3:
	movw	r0, :lower16:.L.str.2
	movt	r0, :upper16:.L.str.2
	movw	r1, :lower16:.L.str.1
	movt	r1, :upper16:.L.str.1
	movw	r2, #60
	movw	r3, :lower16:.L__func__.BF_BitstreamFrame
	movt	r3, :upper16:.L__func__.BF_BitstreamFrame
	bl	__assert_fail
	movw	r0, #0
	str	r0, [r11, #-20]         @ 4-byte Spill
.LBB5_4:
	ldr	r0, [r11, #-20]         @ 4-byte Reload
	ldr	r1, [r11, #-4]
	str	r0, [r11, #-24]         @ 4-byte Spill
	mov	r0, r1
	bl	store_side_info
	ldr	r1, [r11, #-8]
	str	r0, [r1]
	ldr	r0, [r11, #-4]
	ldr	r1, [r11, #-8]
	bl	main_data
	movw	r1, #1
	movw	lr, #8
	movw	r2, :lower16:BitsRemaining
	movt	r2, :upper16:BitsRemaining
	ldr	r3, [r11, #-8]
	str	r0, [r3, #4]
	ldr	r0, [r2]
	str	r1, [sp, #28]           @ 4-byte Spill
	mov	r1, lr
	bl	__modsi3
	cmp	r0, #0
	ldr	r0, [sp, #28]           @ 4-byte Reload
	str	r0, [sp, #24]           @ 4-byte Spill
	beq	.LBB5_6
@ BB#5:
	movw	r0, :lower16:.L.str.3
	movt	r0, :upper16:.L.str.3
	movw	r1, :lower16:.L.str.1
	movt	r1, :upper16:.L.str.1
	movw	r2, #74
	movw	r3, :lower16:.L__func__.BF_BitstreamFrame
	movt	r3, :upper16:.L__func__.BF_BitstreamFrame
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #24]           @ 4-byte Spill
.LBB5_6:
	ldr	r0, [sp, #24]           @ 4-byte Reload
	movw	r1, :lower16:forwardFrameLength
	movt	r1, :upper16:forwardFrameLength
	movw	r2, :lower16:forwardSILength
	movt	r2, :upper16:forwardSILength
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	side_queue_elements
	movw	r1, #8
	movw	r2, :lower16:forwardSILength
	movt	r2, :upper16:forwardSILength
	movw	lr, :lower16:forwardFrameLength
	movt	lr, :upper16:forwardFrameLength
	movw	r3, :lower16:BitsRemaining
	movt	r3, :upper16:BitsRemaining
	movw	r12, :lower16:elements
	movt	r12, :upper16:elements
	str	r0, [r12]
	ldr	r0, [r3]
	str	r1, [sp, #16]           @ 4-byte Spill
	str	lr, [sp, #12]           @ 4-byte Spill
	str	r2, [sp, #8]            @ 4-byte Spill
	bl	__divsi3
	ldr	r1, [sp, #12]           @ 4-byte Reload
	ldr	r2, [r1]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r2
	ldr	r1, [sp, #16]           @ 4-byte Reload
	bl	__divsi3
	ldr	r1, [sp, #4]            @ 4-byte Reload
	add	r0, r1, r0
	ldr	r1, [sp, #8]            @ 4-byte Reload
	ldr	r2, [r1]
	str	r0, [sp]                @ 4-byte Spill
	mov	r0, r2
	ldr	r1, [sp, #16]           @ 4-byte Reload
	bl	__divsi3
	ldr	r1, [sp]                @ 4-byte Reload
	sub	r0, r1, r0
	ldr	r1, [r11, #-8]
	str	r0, [r1, #8]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end5:
	.size	BF_BitstreamFrame, .Lfunc_end5-BF_BitstreamFrame
	.cantunwind
	.fnend

	.p2align	2
	.type	store_side_info,%function
	.code	32                      @ @store_side_info
store_side_info:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #48
	movw	r1, #0
	movw	r2, :lower16:side_queue_free
	movt	r2, :upper16:side_queue_free
	str	r0, [r11, #-4]
	ldr	r0, [r2]
	str	r0, [r11, #-20]
	str	r1, [sp, #24]
	ldr	r0, [r11, #-20]
	cmp	r0, r1
	bne	.LBB6_16
@ BB#1:
	movw	r0, #1
	movw	r1, #52
	bl	calloc
	movw	r1, #0
	str	r0, [r11, #-16]
	ldr	r0, [r11, #-16]
	cmp	r0, r1
	bne	.LBB6_3
@ BB#2:
	movw	r1, :lower16:.L.str.14
	movt	r1, :upper16:.L.str.14
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	movw	r1, #1
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB6_3:
	movw	r0, #0
	ldr	r1, [r11, #-16]
	str	r0, [r1]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #12]
	ldr	r0, [r0]
	bl	BF_newPartHolder
	ldr	r1, [r11, #-16]
	str	r0, [r1, #20]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #16]
	ldr	r0, [r0]
	bl	BF_newPartHolder
	movw	r1, #0
	ldr	lr, [r11, #-16]
	str	r0, [lr, #24]
	str	r1, [r11, #-8]
.LBB6_4:                                @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-8]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #8]
	cmp	r0, r1
	bge	.LBB6_7
@ BB#5:                                 @   in Loop: Header=BB6_4 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-4]
	ldr	r2, [r11, #-8]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1, #20]
	ldr	r1, [r1]
	str	r0, [sp, #16]           @ 4-byte Spill
	mov	r0, r1
	bl	BF_newPartHolder
	ldr	r1, [r11, #-16]
	add	r1, r1, #28
	ldr	r2, [r11, #-8]
	add	r1, r1, r2, lsl #2
	str	r0, [r1]
@ BB#6:                                 @   in Loop: Header=BB6_4 Depth=1
	ldr	r0, [r11, #-8]
	add	r0, r0, #1
	str	r0, [r11, #-8]
	b	.LBB6_4
.LBB6_7:
	movw	r0, #0
	str	r0, [r11, #-12]
.LBB6_8:                                @ =>This Loop Header: Depth=1
                                        @     Child Loop BB6_10 Depth 2
	ldr	r0, [r11, #-12]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #4]
	cmp	r0, r1
	bge	.LBB6_15
@ BB#9:                                 @   in Loop: Header=BB6_8 Depth=1
	movw	r0, #0
	str	r0, [r11, #-8]
.LBB6_10:                               @   Parent Loop BB6_8 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-8]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #8]
	cmp	r0, r1
	bge	.LBB6_13
@ BB#11:                                @   in Loop: Header=BB6_10 Depth=2
	movw	r0, #2
	ldr	r1, [r11, #-4]
	ldr	r2, [r11, #-12]
	add	r1, r1, r2, lsl #3
	ldr	r2, [r11, #-8]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1, #28]
	ldr	r1, [r1]
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r1
	bl	BF_newPartHolder
	ldr	r1, [r11, #-16]
	ldr	r2, [r11, #-12]
	add	r1, r1, r2, lsl #3
	add	r1, r1, #36
	ldr	r2, [r11, #-8]
	add	r1, r1, r2, lsl #2
	str	r0, [r1]
@ BB#12:                                @   in Loop: Header=BB6_10 Depth=2
	ldr	r0, [r11, #-8]
	add	r0, r0, #1
	str	r0, [r11, #-8]
	b	.LBB6_10
.LBB6_13:                               @   in Loop: Header=BB6_8 Depth=1
	b	.LBB6_14
.LBB6_14:                               @   in Loop: Header=BB6_8 Depth=1
	ldr	r0, [r11, #-12]
	add	r0, r0, #1
	str	r0, [r11, #-12]
	b	.LBB6_8
.LBB6_15:
	b	.LBB6_17
.LBB6_16:
	movw	r0, #0
	movw	r1, :lower16:side_queue_free
	movt	r1, :upper16:side_queue_free
	ldr	r2, [r11, #-20]
	ldr	r2, [r2]
	str	r2, [r1]
	ldr	r1, [r11, #-20]
	str	r0, [r1]
	ldr	r0, [r11, #-20]
	str	r0, [r11, #-16]
.LBB6_17:
	ldr	r0, [r11, #-4]
	ldr	r0, [r0]
	ldr	r1, [r11, #-16]
	str	r0, [r1, #4]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #4]
	ldr	r1, [r11, #-16]
	str	r0, [r1, #12]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #8]
	ldr	r1, [r11, #-16]
	str	r0, [r1, #16]
	ldr	r0, [r11, #-16]
	ldr	r0, [r0, #20]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #12]
	bl	BF_LoadHolderFromBitstreamPart
	ldr	r1, [r11, #-16]
	str	r0, [r1, #20]
	ldr	r0, [r11, #-16]
	ldr	r0, [r0, #24]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #16]
	bl	BF_LoadHolderFromBitstreamPart
	ldr	r1, [r11, #-16]
	str	r0, [r1, #24]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #12]
	bl	BF_PartLength
	ldr	r1, [sp, #24]
	add	r0, r1, r0
	str	r0, [sp, #24]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #16]
	bl	BF_PartLength
	movw	r1, #0
	ldr	lr, [sp, #24]
	add	r0, lr, r0
	str	r0, [sp, #24]
	str	r1, [r11, #-8]
.LBB6_18:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-8]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #8]
	cmp	r0, r1
	bge	.LBB6_21
@ BB#19:                                @   in Loop: Header=BB6_18 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-16]
	ldr	r2, [r11, #-8]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1, #28]
	ldr	r3, [r11, #-4]
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2, #20]
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	BF_LoadHolderFromBitstreamPart
	ldr	r1, [r11, #-16]
	ldr	r2, [r11, #-8]
	add	r1, r1, r2, lsl #2
	str	r0, [r1, #28]
	ldr	r0, [r11, #-4]
	add	r0, r0, #20
	ldr	r1, [r11, #-8]
	add	r0, r0, r1, lsl #2
	ldr	r0, [r0]
	bl	BF_PartLength
	ldr	r1, [sp, #24]
	add	r0, r1, r0
	str	r0, [sp, #24]
@ BB#20:                                @   in Loop: Header=BB6_18 Depth=1
	ldr	r0, [r11, #-8]
	add	r0, r0, #1
	str	r0, [r11, #-8]
	b	.LBB6_18
.LBB6_21:
	movw	r0, #0
	str	r0, [r11, #-12]
.LBB6_22:                               @ =>This Loop Header: Depth=1
                                        @     Child Loop BB6_24 Depth 2
	ldr	r0, [r11, #-12]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #4]
	cmp	r0, r1
	bge	.LBB6_29
@ BB#23:                                @   in Loop: Header=BB6_22 Depth=1
	movw	r0, #0
	str	r0, [r11, #-8]
.LBB6_24:                               @   Parent Loop BB6_22 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-8]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #8]
	cmp	r0, r1
	bge	.LBB6_27
@ BB#25:                                @   in Loop: Header=BB6_24 Depth=2
	movw	r0, #2
	ldr	r1, [r11, #-16]
	ldr	r2, [r11, #-12]
	add	r1, r1, r2, lsl #3
	ldr	r3, [r11, #-8]
	add	r1, r1, r3, lsl #2
	ldr	r1, [r1, #36]
	ldr	r12, [r11, #-4]
	add	r2, r12, r2, lsl #3
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2, #28]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	BF_LoadHolderFromBitstreamPart
	ldr	r1, [r11, #-16]
	ldr	r2, [r11, #-12]
	add	r1, r1, r2, lsl #3
	ldr	r2, [r11, #-8]
	add	r1, r1, r2, lsl #2
	str	r0, [r1, #36]
	ldr	r0, [r11, #-4]
	ldr	r1, [r11, #-12]
	add	r0, r0, r1, lsl #3
	add	r0, r0, #28
	ldr	r1, [r11, #-8]
	add	r0, r0, r1, lsl #2
	ldr	r0, [r0]
	bl	BF_PartLength
	ldr	r1, [sp, #24]
	add	r0, r1, r0
	str	r0, [sp, #24]
@ BB#26:                                @   in Loop: Header=BB6_24 Depth=2
	ldr	r0, [r11, #-8]
	add	r0, r0, #1
	str	r0, [r11, #-8]
	b	.LBB6_24
.LBB6_27:                               @   in Loop: Header=BB6_22 Depth=1
	b	.LBB6_28
.LBB6_28:                               @   in Loop: Header=BB6_22 Depth=1
	ldr	r0, [r11, #-12]
	add	r0, r0, #1
	str	r0, [r11, #-12]
	b	.LBB6_22
.LBB6_29:
	movw	r0, #0
	movw	r1, :lower16:side_queue_head
	movt	r1, :upper16:side_queue_head
	ldr	r2, [sp, #24]
	ldr	r3, [r11, #-16]
	str	r2, [r3, #8]
	ldr	r1, [r1]
	str	r1, [r11, #-20]
	ldr	r1, [r11, #-20]
	cmp	r1, r0
	bne	.LBB6_31
@ BB#30:
	movw	r0, :lower16:side_queue_head
	movt	r0, :upper16:side_queue_head
	ldr	r1, [r11, #-16]
	str	r1, [r0]
	b	.LBB6_35
.LBB6_31:
	b	.LBB6_32
.LBB6_32:                               @ =>This Inner Loop Header: Depth=1
	movw	r0, #0
	ldr	r1, [r11, #-20]
	ldr	r1, [r1]
	cmp	r1, r0
	beq	.LBB6_34
@ BB#33:                                @   in Loop: Header=BB6_32 Depth=1
	ldr	r0, [r11, #-20]
	ldr	r0, [r0]
	str	r0, [r11, #-20]
	b	.LBB6_32
.LBB6_34:
	ldr	r0, [r11, #-16]
	ldr	r1, [r11, #-20]
	str	r0, [r1]
.LBB6_35:
	ldr	r0, [sp, #24]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end6:
	.size	store_side_info, .Lfunc_end6-store_side_info
	.cantunwind
	.fnend

	.p2align	2
	.type	main_data,%function
	.code	32                      @ @main_data
main_data:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #48
	movw	r2, #0
	movw	r3, :lower16:writePartMainData
	movt	r3, :upper16:writePartMainData
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r3, [sp, #24]
	str	r2, [r11, #-20]
	ldr	r0, [r11, #-8]
	str	r2, [r0, #4]
	str	r2, [r11, #-12]
.LBB7_1:                                @ =>This Loop Header: Depth=1
                                        @     Child Loop BB7_3 Depth 2
	ldr	r0, [r11, #-12]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #4]
	cmp	r0, r1
	bge	.LBB7_8
@ BB#2:                                 @   in Loop: Header=BB7_1 Depth=1
	movw	r0, #0
	str	r0, [r11, #-16]
.LBB7_3:                                @   Parent Loop BB7_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-16]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #8]
	cmp	r0, r1
	bge	.LBB7_6
@ BB#4:                                 @   in Loop: Header=BB7_3 Depth=2
	movw	r0, #2
	ldr	r1, [sp, #24]
	ldr	r2, [r11, #-4]
	ldr	r3, [r11, #-12]
	add	r2, r2, r3, lsl #3
	ldr	r3, [r11, #-16]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2, #44]
	ldr	r3, [r11, #-8]
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #16]           @ 4-byte Spill
	mov	r1, r3
	ldr	r2, [sp, #16]           @ 4-byte Reload
	blx	r2
	ldr	r1, [r11, #-20]
	add	r0, r1, r0
	str	r0, [r11, #-20]
	ldr	r0, [sp, #24]
	ldr	r1, [r11, #-4]
	ldr	r2, [r11, #-12]
	add	r1, r1, r2, lsl #3
	ldr	r2, [r11, #-16]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1, #60]
	ldr	r2, [r11, #-8]
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	ldr	r2, [sp, #12]           @ 4-byte Reload
	blx	r2
	ldr	r1, [r11, #-20]
	add	r0, r1, r0
	str	r0, [r11, #-20]
	ldr	r0, [sp, #24]
	ldr	r1, [r11, #-4]
	ldr	r2, [r11, #-12]
	add	r1, r1, r2, lsl #3
	add	r1, r1, #76
	ldr	r2, [r11, #-16]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	ldr	r2, [r11, #-8]
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	ldr	r2, [sp, #8]            @ 4-byte Reload
	blx	r2
	ldr	r1, [r11, #-20]
	add	r0, r1, r0
	str	r0, [r11, #-20]
@ BB#5:                                 @   in Loop: Header=BB7_3 Depth=2
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB7_3
.LBB7_6:                                @   in Loop: Header=BB7_1 Depth=1
	b	.LBB7_7
.LBB7_7:                                @   in Loop: Header=BB7_1 Depth=1
	ldr	r0, [r11, #-12]
	add	r0, r0, #1
	str	r0, [r11, #-12]
	b	.LBB7_1
.LBB7_8:
	ldr	r0, [sp, #24]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #92]
	ldr	r2, [r11, #-8]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	ldr	r2, [sp, #4]            @ 4-byte Reload
	blx	r2
	ldr	r1, [r11, #-20]
	add	r0, r1, r0
	str	r0, [r11, #-20]
	ldr	r0, [r11, #-20]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end7:
	.size	main_data, .Lfunc_end7-main_data
	.cantunwind
	.fnend

	.p2align	2
	.type	side_queue_elements,%function
	.code	32                      @ @side_queue_elements
side_queue_elements:
	.fnstart
@ BB#0:
	sub	sp, sp, #16
	movw	r2, :lower16:side_queue_head
	movt	r2, :upper16:side_queue_head
	movw	r3, #0
	str	r0, [sp, #12]
	str	r1, [sp, #8]
	str	r3, [sp, #4]
	ldr	r0, [sp, #12]
	str	r3, [r0]
	ldr	r0, [sp, #8]
	str	r3, [r0]
	ldr	r0, [r2]
	str	r0, [sp]
.LBB8_1:                                @ =>This Inner Loop Header: Depth=1
	movw	r0, #0
	ldr	r1, [sp]
	cmp	r1, r0
	beq	.LBB8_4
@ BB#2:                                 @   in Loop: Header=BB8_1 Depth=1
	ldr	r0, [sp, #4]
	add	r0, r0, #1
	str	r0, [sp, #4]
	ldr	r0, [sp]
	ldr	r0, [r0, #4]
	ldr	r1, [sp, #12]
	ldr	r2, [r1]
	add	r0, r2, r0
	str	r0, [r1]
	ldr	r0, [sp]
	ldr	r0, [r0, #8]
	ldr	r1, [sp, #8]
	ldr	r2, [r1]
	add	r0, r2, r0
	str	r0, [r1]
@ BB#3:                                 @   in Loop: Header=BB8_1 Depth=1
	ldr	r0, [sp]
	ldr	r0, [r0]
	str	r0, [sp]
	b	.LBB8_1
.LBB8_4:
	ldr	r0, [sp, #4]
	add	sp, sp, #16
	bx	lr
.Lfunc_end8:
	.size	side_queue_elements, .Lfunc_end8-side_queue_elements
	.cantunwind
	.fnend

	.p2align	2
	.type	writePartMainData,%function
	.code	32                      @ @writePartMainData
writePartMainData:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #40
	movw	r2, #1
	movw	r3, #0
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r3, [sp, #20]
	ldr	r0, [r11, #-8]
	cmp	r0, r3
	str	r2, [sp, #16]           @ 4-byte Spill
	bne	.LBB9_2
@ BB#1:
	movw	r0, :lower16:.L.str.7
	movt	r0, :upper16:.L.str.7
	movw	r1, :lower16:.L.str.1
	movt	r1, :upper16:.L.str.1
	movw	r2, #157
	movw	r3, :lower16:.L__func__.writePartMainData
	movt	r3, :upper16:.L__func__.writePartMainData
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #16]           @ 4-byte Spill
.LBB9_2:
	ldr	r0, [sp, #16]           @ 4-byte Reload
	movw	r1, #1
	movw	r2, #0
	ldr	r3, [r11, #-4]
	cmp	r3, r2
	str	r0, [sp, #12]           @ 4-byte Spill
	str	r1, [sp, #8]            @ 4-byte Spill
	bne	.LBB9_4
@ BB#3:
	movw	r0, :lower16:.L.str.8
	movt	r0, :upper16:.L.str.8
	movw	r1, :lower16:.L.str.1
	movt	r1, :upper16:.L.str.1
	movw	r2, #158
	movw	r3, :lower16:.L__func__.writePartMainData
	movt	r3, :upper16:.L__func__.writePartMainData
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #8]            @ 4-byte Spill
.LBB9_4:
	ldr	r0, [sp, #8]            @ 4-byte Reload
	movw	r1, #0
	ldr	r2, [r11, #-4]
	ldr	r2, [r2, #4]
	str	r2, [r11, #-12]
	str	r1, [r11, #-16]
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB9_5:                                @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-16]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1]
	cmp	r0, r1
	bhs	.LBB9_8
@ BB#6:                                 @   in Loop: Header=BB9_5 Depth=1
	ldr	r0, [r11, #-12]
	ldr	r0, [r0]
	ldr	r1, [r11, #-12]
	ldrh	r1, [r1, #4]
	ldr	r2, [r11, #-8]
	bl	WriteMainDataBits
	ldr	r0, [r11, #-12]
	ldrh	r0, [r0, #4]
	ldr	r1, [sp, #20]
	add	r0, r1, r0
	str	r0, [sp, #20]
@ BB#7:                                 @   in Loop: Header=BB9_5 Depth=1
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	ldr	r0, [r11, #-12]
	add	r0, r0, #8
	str	r0, [r11, #-12]
	b	.LBB9_5
.LBB9_8:
	ldr	r0, [sp, #20]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end9:
	.size	writePartMainData, .Lfunc_end9-writePartMainData
	.cantunwind
	.fnend

	.p2align	2
	.type	WriteMainDataBits,%function
	.code	32                      @ @WriteMainDataBits
WriteMainDataBits:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #56
	movw	r3, #1
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [r11, #-12]
	ldr	r0, [r11, #-8]
	cmp	r0, #32
	str	r3, [r11, #-20]         @ 4-byte Spill
	bls	.LBB10_2
@ BB#1:
	movw	r0, :lower16:.L.str.9
	movt	r0, :upper16:.L.str.9
	movw	r1, :lower16:.L.str.1
	movt	r1, :upper16:.L.str.1
	movw	r2, #217
	movw	r3, :lower16:.L__func__.WriteMainDataBits
	movt	r3, :upper16:.L__func__.WriteMainDataBits
	bl	__assert_fail
	movw	r0, #0
	str	r0, [r11, #-20]         @ 4-byte Spill
.LBB10_2:
	ldr	r0, [r11, #-20]         @ 4-byte Reload
	ldr	r1, [r11, #-8]
	cmp	r1, #0
	str	r0, [r11, #-24]         @ 4-byte Spill
	bne	.LBB10_4
@ BB#3:
	b	.LBB10_16
.LBB10_4:
	movw	r0, :lower16:ThisFrameSize
	movt	r0, :upper16:ThisFrameSize
	movw	r1, :lower16:BitCount
	movt	r1, :upper16:BitCount
	ldr	r1, [r1]
	ldr	r0, [r0]
	cmp	r1, r0
	bne	.LBB10_6
@ BB#5:
	bl	write_side_info
	movw	lr, :lower16:BitsRemaining
	movt	lr, :upper16:BitsRemaining
	movw	r1, :lower16:BitCount
	movt	r1, :upper16:BitCount
	movw	r2, :lower16:ThisFrameSize
	movt	r2, :upper16:ThisFrameSize
	str	r0, [r1]
	ldr	r0, [r2]
	ldr	r1, [r1]
	sub	r0, r0, r1
	str	r0, [lr]
.LBB10_6:
	movw	r0, :lower16:BitsRemaining
	movt	r0, :upper16:BitsRemaining
	ldr	r1, [r11, #-8]
	ldr	r0, [r0]
	cmp	r1, r0
	bls	.LBB10_8
@ BB#7:
	movw	r0, :lower16:BitsRemaining
	movt	r0, :upper16:BitsRemaining
	ldr	r1, [r11, #-4]
	ldr	r2, [r11, #-8]
	ldr	r3, [r0]
	sub	r2, r2, r3
	lsr	r1, r1, r2
	str	r1, [r11, #-16]
	ldr	r1, [r0]
	ldr	r2, [r11, #-8]
	sub	r1, r2, r1
	str	r1, [r11, #-8]
	ldr	r1, [r11, #-16]
	ldr	r0, [r0]
	str	r0, [sp, #28]           @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #28]           @ 4-byte Reload
	bl	putMyBits
	bl	write_side_info
	movw	r1, :lower16:BitsRemaining
	movt	r1, :upper16:BitsRemaining
	movw	r2, :lower16:BitCount
	movt	r2, :upper16:BitCount
	movw	r3, :lower16:ThisFrameSize
	movt	r3, :upper16:ThisFrameSize
	str	r0, [r2]
	ldr	r0, [r3]
	ldr	r2, [r2]
	sub	r0, r0, r2
	str	r0, [r1]
	ldr	r0, [r11, #-4]
	ldr	r1, [r11, #-8]
	bl	putMyBits
	b	.LBB10_9
.LBB10_8:
	ldr	r0, [r11, #-4]
	ldr	r1, [r11, #-8]
	bl	putMyBits
.LBB10_9:
	movw	r0, #1
	movw	r1, :lower16:ThisFrameSize
	movt	r1, :upper16:ThisFrameSize
	movw	r2, :lower16:BitCount
	movt	r2, :upper16:BitCount
	movw	r3, :lower16:BitsRemaining
	movt	r3, :upper16:BitsRemaining
	ldr	r12, [r11, #-8]
	ldr	lr, [r2]
	add	r12, lr, r12
	str	r12, [r2]
	ldr	r12, [r11, #-8]
	ldr	lr, [r3]
	sub	r12, lr, r12
	str	r12, [r3]
	ldr	r2, [r2]
	ldr	r1, [r1]
	cmp	r2, r1
	str	r0, [sp, #24]           @ 4-byte Spill
	ble	.LBB10_11
@ BB#10:
	movw	r0, :lower16:.L.str.10
	movt	r0, :upper16:.L.str.10
	movw	r1, :lower16:.L.str.1
	movt	r1, :upper16:.L.str.1
	movw	r2, #238
	movw	r3, :lower16:.L__func__.WriteMainDataBits
	movt	r3, :upper16:.L__func__.WriteMainDataBits
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #24]           @ 4-byte Spill
.LBB10_11:
	ldr	r0, [sp, #24]           @ 4-byte Reload
	movw	r1, #1
	movw	r2, :lower16:BitsRemaining
	movt	r2, :upper16:BitsRemaining
	ldr	r2, [r2]
	cmp	r2, #0
	str	r0, [sp, #20]           @ 4-byte Spill
	str	r1, [sp, #16]           @ 4-byte Spill
	bge	.LBB10_13
@ BB#12:
	movw	r0, :lower16:.L.str.11
	movt	r0, :upper16:.L.str.11
	movw	r1, :lower16:.L.str.1
	movt	r1, :upper16:.L.str.1
	movw	r2, #239
	movw	r3, :lower16:.L__func__.WriteMainDataBits
	movt	r3, :upper16:.L__func__.WriteMainDataBits
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #16]           @ 4-byte Spill
.LBB10_13:
	ldr	r0, [sp, #16]           @ 4-byte Reload
	movw	r1, #1
	movw	r2, :lower16:ThisFrameSize
	movt	r2, :upper16:ThisFrameSize
	movw	r3, :lower16:BitsRemaining
	movt	r3, :upper16:BitsRemaining
	movw	r12, :lower16:BitCount
	movt	r12, :upper16:BitCount
	ldr	r12, [r12]
	ldr	r3, [r3]
	add	r3, r12, r3
	ldr	r2, [r2]
	cmp	r3, r2
	str	r0, [sp, #12]           @ 4-byte Spill
	str	r1, [sp, #8]            @ 4-byte Spill
	beq	.LBB10_15
@ BB#14:
	movw	r0, :lower16:.L.str.12
	movt	r0, :upper16:.L.str.12
	movw	r1, :lower16:.L.str.1
	movt	r1, :upper16:.L.str.1
	movw	r2, #240
	movw	r3, :lower16:.L__func__.WriteMainDataBits
	movt	r3, :upper16:.L__func__.WriteMainDataBits
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #8]            @ 4-byte Spill
.LBB10_15:
	ldr	r0, [sp, #8]            @ 4-byte Reload
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB10_16:
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end10:
	.size	WriteMainDataBits, .Lfunc_end10-WriteMainDataBits
	.cantunwind
	.fnend

	.p2align	2
	.type	write_side_info,%function
	.code	32                      @ @write_side_info
write_side_info:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #40
	movw	r0, #0
	movw	r1, :lower16:writePartSideInfo
	movt	r1, :upper16:writePartSideInfo
	str	r1, [sp, #20]
	str	r0, [r11, #-8]
	bl	get_side_info
	movw	r1, #0
	movw	lr, :lower16:ThisFrameSize
	movt	lr, :upper16:ThisFrameSize
	str	r0, [r11, #-4]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0]
	str	r0, [lr]
	ldr	r0, [sp, #20]
	ldr	lr, [r11, #-4]
	ldr	lr, [lr, #16]
	ldr	lr, [lr, #4]
	str	r0, [sp, #16]           @ 4-byte Spill
	mov	r0, lr
	ldr	lr, [sp, #16]           @ 4-byte Reload
	blx	lr
	movw	r1, #0
	ldr	lr, [r11, #-8]
	add	r0, lr, r0
	str	r0, [r11, #-8]
	ldr	r0, [sp, #20]
	ldr	lr, [r11, #-4]
	ldr	lr, [lr, #20]
	ldr	lr, [lr, #4]
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, lr
	ldr	lr, [sp, #12]           @ 4-byte Reload
	blx	lr
	movw	r1, #0
	ldr	lr, [r11, #-8]
	add	r0, lr, r0
	str	r0, [r11, #-8]
	str	r1, [r11, #-12]
.LBB11_1:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-12]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #12]
	cmp	r0, r1
	bge	.LBB11_4
@ BB#2:                                 @   in Loop: Header=BB11_1 Depth=1
	movw	r1, #0
	movw	r0, #2
	ldr	r2, [sp, #20]
	ldr	r3, [r11, #-4]
	add	r3, r3, #24
	ldr	r12, [r11, #-12]
	add	r3, r3, r12, lsl #2
	ldr	r3, [r3]
	ldr	r3, [r3, #4]
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r3
	blx	r2
	ldr	r1, [r11, #-8]
	add	r0, r1, r0
	str	r0, [r11, #-8]
@ BB#3:                                 @   in Loop: Header=BB11_1 Depth=1
	ldr	r0, [r11, #-12]
	add	r0, r0, #1
	str	r0, [r11, #-12]
	b	.LBB11_1
.LBB11_4:
	movw	r0, #0
	str	r0, [r11, #-16]
.LBB11_5:                               @ =>This Loop Header: Depth=1
                                        @     Child Loop BB11_7 Depth 2
	ldr	r0, [r11, #-16]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #8]
	cmp	r0, r1
	bge	.LBB11_12
@ BB#6:                                 @   in Loop: Header=BB11_5 Depth=1
	movw	r0, #0
	str	r0, [r11, #-12]
.LBB11_7:                               @   Parent Loop BB11_5 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-12]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #12]
	cmp	r0, r1
	bge	.LBB11_10
@ BB#8:                                 @   in Loop: Header=BB11_7 Depth=2
	movw	r1, #0
	movw	r0, #2
	ldr	r2, [sp, #20]
	ldr	r3, [r11, #-4]
	ldr	r12, [r11, #-16]
	add	r3, r3, r12, lsl #3
	add	r3, r3, #32
	ldr	r12, [r11, #-12]
	add	r3, r3, r12, lsl #2
	ldr	r3, [r3]
	ldr	r3, [r3, #4]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r3
	blx	r2
	ldr	r1, [r11, #-8]
	add	r0, r1, r0
	str	r0, [r11, #-8]
@ BB#9:                                 @   in Loop: Header=BB11_7 Depth=2
	ldr	r0, [r11, #-12]
	add	r0, r0, #1
	str	r0, [r11, #-12]
	b	.LBB11_7
.LBB11_10:                              @   in Loop: Header=BB11_5 Depth=1
	b	.LBB11_11
.LBB11_11:                              @   in Loop: Header=BB11_5 Depth=1
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB11_5
.LBB11_12:
	ldr	r0, [r11, #-8]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end11:
	.size	write_side_info, .Lfunc_end11-write_side_info
	.cantunwind
	.fnend

	.p2align	2
	.type	writePartSideInfo,%function
	.code	32                      @ @writePartSideInfo
writePartSideInfo:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #32
	movw	r2, #1
	movw	r3, #0
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r3, [sp, #12]
	ldr	r0, [r11, #-4]
	cmp	r0, r3
	str	r2, [sp, #8]            @ 4-byte Spill
	bne	.LBB12_2
@ BB#1:
	movw	r0, :lower16:.L.str.8
	movt	r0, :upper16:.L.str.8
	movw	r1, :lower16:.L.str.1
	movt	r1, :upper16:.L.str.1
	movw	r2, #176
	movw	r3, :lower16:.L__func__.writePartSideInfo
	movt	r3, :upper16:.L__func__.writePartSideInfo
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #8]            @ 4-byte Spill
.LBB12_2:
	ldr	r0, [sp, #8]            @ 4-byte Reload
	movw	r1, #0
	ldr	r2, [r11, #-4]
	ldr	r2, [r2, #4]
	str	r2, [r11, #-12]
	str	r1, [sp, #16]
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB12_3:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #16]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1]
	cmp	r0, r1
	bhs	.LBB12_6
@ BB#4:                                 @   in Loop: Header=BB12_3 Depth=1
	ldr	r0, [r11, #-12]
	ldr	r0, [r0]
	ldr	r1, [r11, #-12]
	ldrh	r1, [r1, #4]
	bl	putMyBits
	ldr	r0, [r11, #-12]
	ldrh	r0, [r0, #4]
	ldr	r1, [sp, #12]
	add	r0, r1, r0
	str	r0, [sp, #12]
@ BB#5:                                 @   in Loop: Header=BB12_3 Depth=1
	ldr	r0, [sp, #16]
	add	r0, r0, #1
	str	r0, [sp, #16]
	ldr	r0, [r11, #-12]
	add	r0, r0, #8
	str	r0, [r11, #-12]
	b	.LBB12_3
.LBB12_6:
	ldr	r0, [sp, #12]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end12:
	.size	writePartSideInfo, .Lfunc_end12-writePartSideInfo
	.cantunwind
	.fnend

	.p2align	2
	.type	get_side_info,%function
	.code	32                      @ @get_side_info
get_side_info:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #16
	movw	r0, #1
	movw	r1, #0
	movw	r2, :lower16:side_queue_head
	movt	r2, :upper16:side_queue_head
	movw	r3, :lower16:side_queue_free
	movt	r3, :upper16:side_queue_free
	ldr	r3, [r3]
	str	r3, [r11, #-4]
	ldr	r2, [r2]
	str	r2, [sp, #8]
	ldr	r2, [sp, #8]
	cmp	r2, r1
	str	r0, [sp, #4]            @ 4-byte Spill
	bne	.LBB13_2
@ BB#1:
	movw	r0, :lower16:.L.str.13
	movt	r0, :upper16:.L.str.13
	movw	r1, :lower16:.L.str.1
	movt	r1, :upper16:.L.str.1
	movw	r2, #384
	movw	r3, :lower16:.L__func__.get_side_info
	movt	r3, :upper16:.L__func__.get_side_info
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB13_2:
	ldr	r0, [sp, #4]            @ 4-byte Reload
	movw	r1, :lower16:side_queue_free
	movt	r1, :upper16:side_queue_free
	movw	r2, :lower16:side_queue_head
	movt	r2, :upper16:side_queue_head
	ldr	r3, [sp, #8]
	ldr	r3, [r3]
	str	r3, [r2]
	ldr	r2, [sp, #8]
	str	r2, [r1]
	ldr	r1, [r11, #-4]
	ldr	r2, [sp, #8]
	str	r1, [r2]
	ldr	r1, [sp, #8]
	add	r1, r1, #4
	str	r0, [sp]                @ 4-byte Spill
	mov	r0, r1
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end13:
	.size	get_side_info, .Lfunc_end13-get_side_info
	.cantunwind
	.fnend

	.globl	BF_newPartHolder
	.p2align	2
	.type	BF_newPartHolder,%function
	.code	32                      @ @BF_newPartHolder
BF_newPartHolder:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #32
	movw	r1, #1
	movw	r2, #8
	str	r0, [r11, #-4]
	mov	r0, r1
	mov	r1, r2
	bl	calloc
	movw	r1, #1
	movw	r2, #0
	str	r0, [r11, #-8]
	ldr	r0, [r11, #-8]
	cmp	r0, r2
	str	r1, [r11, #-12]         @ 4-byte Spill
	bne	.LBB14_2
@ BB#1:
	movw	r0, :lower16:.L.str.4
	movt	r0, :upper16:.L.str.4
	movw	r1, :lower16:.L.str.1
	movt	r1, :upper16:.L.str.1
	movw	r2, #443
	movw	r3, :lower16:.L__func__.BF_newPartHolder
	movt	r3, :upper16:.L__func__.BF_newPartHolder
	bl	__assert_fail
	movw	r0, #0
	str	r0, [r11, #-12]         @ 4-byte Spill
.LBB14_2:
	ldr	r0, [r11, #-12]         @ 4-byte Reload
	movw	r1, #1
	movw	r2, #8
	ldr	r3, [r11, #-4]
	ldr	r12, [r11, #-8]
	str	r3, [r12]
	str	r0, [sp, #16]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	calloc
	movw	r1, #1
	movw	r2, #0
	ldr	r3, [r11, #-8]
	str	r0, [r3, #4]
	ldr	r0, [r11, #-8]
	ldr	r0, [r0, #4]
	cmp	r0, r2
	str	r1, [sp, #12]           @ 4-byte Spill
	bne	.LBB14_4
@ BB#3:
	movw	r0, :lower16:.L.str.5
	movt	r0, :upper16:.L.str.5
	movw	r1, :lower16:.L.str.1
	movt	r1, :upper16:.L.str.1
	movw	r2, #446
	movw	r3, :lower16:.L__func__.BF_newPartHolder
	movt	r3, :upper16:.L__func__.BF_newPartHolder
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #12]           @ 4-byte Spill
.LBB14_4:
	ldr	r0, [sp, #12]           @ 4-byte Reload
	movw	r1, #8
	ldr	r2, [r11, #-4]
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r2
	bl	calloc
	ldr	r1, [r11, #-8]
	ldr	r1, [r1, #4]
	str	r0, [r1, #4]
	ldr	r0, [r11, #-4]
	cmp	r0, #0
	ble	.LBB14_8
@ BB#5:
	movw	r0, #1
	movw	r1, #0
	ldr	r2, [r11, #-8]
	ldr	r2, [r2, #4]
	ldr	r2, [r2, #4]
	cmp	r2, r1
	str	r0, [sp, #4]            @ 4-byte Spill
	bne	.LBB14_7
@ BB#6:
	movw	r0, :lower16:.L.str.6
	movt	r0, :upper16:.L.str.6
	movw	r1, :lower16:.L.str.1
	movt	r1, :upper16:.L.str.1
	movw	r2, #448
	movw	r3, :lower16:.L__func__.BF_newPartHolder
	movt	r3, :upper16:.L__func__.BF_newPartHolder
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB14_7:
	ldr	r0, [sp, #4]            @ 4-byte Reload
	str	r0, [sp]                @ 4-byte Spill
.LBB14_8:
	movw	r0, #0
	ldr	r1, [r11, #-8]
	ldr	r1, [r1, #4]
	str	r0, [r1]
	ldr	r0, [r11, #-8]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end14:
	.size	BF_newPartHolder, .Lfunc_end14-BF_newPartHolder
	.cantunwind
	.fnend

	.globl	BF_LoadHolderFromBitstreamPart
	.p2align	2
	.type	BF_LoadHolderFromBitstreamPart,%function
	.code	32                      @ @BF_LoadHolderFromBitstreamPart
BF_LoadHolderFromBitstreamPart:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	movw	r2, #0
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #4]
	str	r2, [r0]
	str	r2, [sp, #8]
.LBB15_1:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #8]
	ldr	r1, [r11, #-8]
	ldr	r1, [r1]
	cmp	r0, r1
	bhs	.LBB15_4
@ BB#2:                                 @   in Loop: Header=BB15_1 Depth=1
	movw	r0, #3
	ldr	r1, [r11, #-8]
	ldr	r1, [r1, #4]
	ldr	r2, [sp, #8]
	add	r1, r1, r2, lsl #3
	str	r1, [sp, #12]
	ldr	r1, [r11, #-4]
	ldr	r2, [sp, #12]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	BF_addElement
	str	r0, [r11, #-4]
@ BB#3:                                 @   in Loop: Header=BB15_1 Depth=1
	ldr	r0, [sp, #8]
	add	r0, r0, #1
	str	r0, [sp, #8]
	b	.LBB15_1
.LBB15_4:
	ldr	r0, [r11, #-4]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end15:
	.size	BF_LoadHolderFromBitstreamPart, .Lfunc_end15-BF_LoadHolderFromBitstreamPart
	.cantunwind
	.fnend

	.globl	BF_PartLength
	.p2align	2
	.type	BF_PartLength,%function
	.code	32                      @ @BF_PartLength
BF_PartLength:
	.fnstart
@ BB#0:
	sub	sp, sp, #16
	movw	r1, #0
	str	r0, [sp, #12]
	ldr	r0, [sp, #12]
	ldr	r0, [r0, #4]
	str	r0, [sp, #8]
	str	r1, [sp]
	str	r1, [sp, #4]
.LBB16_1:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #4]
	ldr	r1, [sp, #12]
	ldr	r1, [r1]
	cmp	r0, r1
	bhs	.LBB16_4
@ BB#2:                                 @   in Loop: Header=BB16_1 Depth=1
	ldr	r0, [sp, #8]
	ldrh	r0, [r0, #4]
	ldr	r1, [sp]
	add	r0, r1, r0
	str	r0, [sp]
@ BB#3:                                 @   in Loop: Header=BB16_1 Depth=1
	ldr	r0, [sp, #4]
	add	r0, r0, #1
	str	r0, [sp, #4]
	ldr	r0, [sp, #8]
	add	r0, r0, #8
	str	r0, [sp, #8]
	b	.LBB16_1
.LBB16_4:
	ldr	r0, [sp]
	add	sp, sp, #16
	bx	lr
.Lfunc_end16:
	.size	BF_PartLength, .Lfunc_end16-BF_PartLength
	.cantunwind
	.fnend

	.globl	BF_addElement
	.p2align	2
	.type	BF_addElement,%function
	.code	32                      @ @BF_addElement
BF_addElement:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	movw	r2, #8
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	ldr	r0, [r11, #-4]
	str	r0, [sp, #12]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #4]
	ldr	r0, [r0]
	add	r0, r0, #1
	str	r0, [sp, #8]
	str	r2, [sp, #4]
	ldr	r0, [sp, #8]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1]
	cmp	r0, r1
	ble	.LBB17_2
@ BB#1:
	ldr	r0, [r11, #-4]
	ldr	r1, [sp, #8]
	ldr	r2, [sp, #4]
	add	r1, r1, r2
	bl	BF_resizePartHolder
	str	r0, [sp, #12]
.LBB17_2:
	movw	r0, #3
	ldr	r1, [sp, #12]
	ldr	r1, [r1, #4]
	ldr	r2, [r1]
	ldr	r3, [r1, #4]
	add	r12, r2, #1
	str	r12, [r1]
	add	r1, r3, r2, lsl #3
	ldr	r2, [r11, #-8]
	ldr	r3, [r2]
	str	r3, [r1]
	ldr	r2, [r2, #4]
	str	r2, [r1, #4]
	ldr	r1, [sp, #12]
	str	r0, [sp]                @ 4-byte Spill
	mov	r0, r1
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end17:
	.size	BF_addElement, .Lfunc_end17-BF_addElement
	.cantunwind
	.fnend

	.globl	BF_resizePartHolder
	.p2align	2
	.type	BF_resizePartHolder,%function
	.code	32                      @ @BF_resizePartHolder
BF_resizePartHolder:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #32
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	ldr	r0, [r11, #-8]
	bl	BF_newPartHolder
	str	r0, [sp, #12]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0]
	ldr	r1, [r11, #-8]
	cmp	r0, r1
	ble	.LBB18_2
@ BB#1:
	ldr	r0, [r11, #-8]
	str	r0, [sp, #8]            @ 4-byte Spill
	b	.LBB18_3
.LBB18_2:
	ldr	r0, [r11, #-4]
	ldr	r0, [r0]
	str	r0, [sp, #8]            @ 4-byte Spill
.LBB18_3:
	ldr	r0, [sp, #8]            @ 4-byte Reload
	movw	r1, #0
	str	r0, [r11, #-12]
	ldr	r0, [r11, #-12]
	ldr	r2, [sp, #12]
	ldr	r2, [r2, #4]
	str	r0, [r2]
	str	r1, [sp, #16]
.LBB18_4:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #16]
	ldr	r1, [r11, #-12]
	cmp	r0, r1
	bge	.LBB18_7
@ BB#5:                                 @   in Loop: Header=BB18_4 Depth=1
	movw	r0, #3
	ldr	r1, [sp, #12]
	ldr	r1, [r1, #4]
	ldr	r1, [r1, #4]
	ldr	r2, [sp, #16]
	add	r1, r1, r2, lsl #3
	ldr	r3, [r11, #-4]
	ldr	r3, [r3, #4]
	ldr	r3, [r3, #4]
	add	r2, r3, r2, lsl #3
	ldr	r3, [r2]
	str	r3, [r1]
	ldr	r2, [r2, #4]
	str	r2, [r1, #4]
	str	r0, [sp, #4]            @ 4-byte Spill
@ BB#6:                                 @   in Loop: Header=BB18_4 Depth=1
	ldr	r0, [sp, #16]
	add	r0, r0, #1
	str	r0, [sp, #16]
	b	.LBB18_4
.LBB18_7:
	ldr	r0, [r11, #-4]
	bl	BF_freePartHolder
	ldr	lr, [sp, #12]
	str	r0, [sp]                @ 4-byte Spill
	mov	r0, lr
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end18:
	.size	BF_resizePartHolder, .Lfunc_end18-BF_resizePartHolder
	.cantunwind
	.fnend

	.globl	BF_freePartHolder
	.p2align	2
	.type	BF_freePartHolder,%function
	.code	32                      @ @BF_freePartHolder
BF_freePartHolder:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #8
	str	r0, [sp, #4]
	ldr	r0, [sp, #4]
	ldr	r0, [r0, #4]
	ldr	r0, [r0, #4]
	bl	free
	ldr	r0, [sp, #4]
	ldr	r0, [r0, #4]
	bl	free
	ldr	r0, [sp, #4]
	bl	free
	movw	r0, #0
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end19:
	.size	BF_freePartHolder, .Lfunc_end19-BF_freePartHolder
	.cantunwind
	.fnend

	.globl	BF_FlushBitstream
	.p2align	2
	.type	BF_FlushBitstream,%function
	.code	32                      @ @BF_FlushBitstream
BF_FlushBitstream:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	movw	r2, :lower16:elements
	movt	r2, :upper16:elements
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	ldr	r0, [r2]
	cmp	r0, #0
	beq	.LBB20_5
@ BB#1:
	movw	r1, #32
	movw	r0, :lower16:forwardSILength
	movt	r0, :upper16:forwardSILength
	movw	r2, :lower16:forwardFrameLength
	movt	r2, :upper16:forwardFrameLength
	ldr	r2, [r2]
	ldr	r0, [r0]
	sub	r0, r2, r0
	str	r0, [sp, #12]
	ldr	r0, [sp, #12]
	bl	__divsi3
	str	r0, [sp, #8]
.LBB20_2:                               @ =>This Inner Loop Header: Depth=1
	mvn	r0, #0
	ldr	r1, [sp, #8]
	add	r0, r1, r0
	str	r0, [sp, #8]
	cmp	r1, #0
	beq	.LBB20_4
@ BB#3:                                 @   in Loop: Header=BB20_2 Depth=1
	movw	r0, #0
	movw	r1, #32
	ldr	r2, [r11, #-8]
	bl	WriteMainDataBits
	b	.LBB20_2
.LBB20_4:
	movw	r0, #0
	movw	r1, #32
	ldr	r2, [sp, #12]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r2
	bl	__modsi3
	ldr	r2, [r11, #-8]
	ldr	r1, [sp, #4]            @ 4-byte Reload
	str	r0, [sp]                @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp]                @ 4-byte Reload
	bl	WriteMainDataBits
.LBB20_5:
	movw	r0, #0
	movw	r1, :lower16:forwardSILength
	movt	r1, :upper16:forwardSILength
	movw	r2, :lower16:forwardFrameLength
	movt	r2, :upper16:forwardFrameLength
	ldr	r2, [r2]
	ldr	r3, [r1]
	sub	r2, r2, r3
	ldr	r3, [r11, #-8]
	str	r2, [r3, #4]
	ldr	r1, [r1]
	ldr	r2, [r11, #-8]
	str	r1, [r2]
	ldr	r1, [r11, #-8]
	str	r0, [r1, #8]
	bl	free_side_queues
	movw	r0, #0
	movw	r1, :lower16:BitsRemaining
	movt	r1, :upper16:BitsRemaining
	movw	r2, :lower16:ThisFrameSize
	movt	r2, :upper16:ThisFrameSize
	movw	r3, :lower16:BitCount
	movt	r3, :upper16:BitCount
	str	r0, [r3]
	str	r0, [r2]
	str	r0, [r1]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end20:
	.size	BF_FlushBitstream, .Lfunc_end20-BF_FlushBitstream
	.cantunwind
	.fnend

	.p2align	2
	.type	free_side_queues,%function
	.code	32                      @ @free_side_queues
free_side_queues:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #8
	movw	r0, :lower16:side_queue_head
	movt	r0, :upper16:side_queue_head
	ldr	r0, [r0]
	str	r0, [sp, #4]
.LBB21_1:                               @ =>This Inner Loop Header: Depth=1
	movw	r0, #0
	ldr	r1, [sp, #4]
	cmp	r1, r0
	beq	.LBB21_4
@ BB#2:                                 @   in Loop: Header=BB21_1 Depth=1
	ldr	r0, [sp, #4]
	ldr	r0, [r0]
	str	r0, [sp]
	ldr	r0, [sp, #4]
	bl	free_side_info_link
@ BB#3:                                 @   in Loop: Header=BB21_1 Depth=1
	ldr	r0, [sp]
	str	r0, [sp, #4]
	b	.LBB21_1
.LBB21_4:
	movw	r0, :lower16:side_queue_free
	movt	r0, :upper16:side_queue_free
	movw	r1, #0
	movw	r2, :lower16:side_queue_head
	movt	r2, :upper16:side_queue_head
	str	r1, [r2]
	ldr	r0, [r0]
	str	r0, [sp, #4]
.LBB21_5:                               @ =>This Inner Loop Header: Depth=1
	movw	r0, #0
	ldr	r1, [sp, #4]
	cmp	r1, r0
	beq	.LBB21_8
@ BB#6:                                 @   in Loop: Header=BB21_5 Depth=1
	ldr	r0, [sp, #4]
	ldr	r0, [r0]
	str	r0, [sp]
	ldr	r0, [sp, #4]
	bl	free_side_info_link
@ BB#7:                                 @   in Loop: Header=BB21_5 Depth=1
	ldr	r0, [sp]
	str	r0, [sp, #4]
	b	.LBB21_5
.LBB21_8:
	movw	r0, #0
	movw	r1, :lower16:side_queue_free
	movt	r1, :upper16:side_queue_free
	str	r0, [r1]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end21:
	.size	free_side_queues, .Lfunc_end21-free_side_queues
	.cantunwind
	.fnend

	.p2align	2
	.type	free_side_info_link,%function
	.code	32                      @ @free_side_info_link
free_side_info_link:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	str	r0, [r11, #-4]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #20]
	bl	BF_freePartHolder
	ldr	lr, [r11, #-4]
	str	r0, [lr, #20]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #24]
	bl	BF_freePartHolder
	movw	lr, #0
	ldr	r1, [r11, #-4]
	str	r0, [r1, #24]
	str	lr, [sp, #12]
.LBB22_1:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #12]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #16]
	cmp	r0, r1
	bge	.LBB22_4
@ BB#2:                                 @   in Loop: Header=BB22_1 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-4]
	ldr	r2, [sp, #12]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1, #28]
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r1
	bl	BF_freePartHolder
	ldr	r1, [r11, #-4]
	add	r1, r1, #28
	ldr	r2, [sp, #12]
	add	r1, r1, r2, lsl #2
	str	r0, [r1]
@ BB#3:                                 @   in Loop: Header=BB22_1 Depth=1
	ldr	r0, [sp, #12]
	add	r0, r0, #1
	str	r0, [sp, #12]
	b	.LBB22_1
.LBB22_4:
	movw	r0, #0
	str	r0, [r11, #-8]
.LBB22_5:                               @ =>This Loop Header: Depth=1
                                        @     Child Loop BB22_7 Depth 2
	ldr	r0, [r11, #-8]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #12]
	cmp	r0, r1
	bge	.LBB22_12
@ BB#6:                                 @   in Loop: Header=BB22_5 Depth=1
	movw	r0, #0
	str	r0, [sp, #12]
.LBB22_7:                               @   Parent Loop BB22_5 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #12]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #16]
	cmp	r0, r1
	bge	.LBB22_10
@ BB#8:                                 @   in Loop: Header=BB22_7 Depth=2
	movw	r0, #2
	ldr	r1, [r11, #-4]
	ldr	r2, [r11, #-8]
	add	r1, r1, r2, lsl #3
	ldr	r2, [sp, #12]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1, #36]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	bl	BF_freePartHolder
	ldr	r1, [r11, #-4]
	ldr	r2, [r11, #-8]
	add	r1, r1, r2, lsl #3
	add	r1, r1, #36
	ldr	r2, [sp, #12]
	add	r1, r1, r2, lsl #2
	str	r0, [r1]
@ BB#9:                                 @   in Loop: Header=BB22_7 Depth=2
	ldr	r0, [sp, #12]
	add	r0, r0, #1
	str	r0, [sp, #12]
	b	.LBB22_7
.LBB22_10:                              @   in Loop: Header=BB22_5 Depth=1
	b	.LBB22_11
.LBB22_11:                              @   in Loop: Header=BB22_5 Depth=1
	ldr	r0, [r11, #-8]
	add	r0, r0, #1
	str	r0, [r11, #-8]
	b	.LBB22_5
.LBB22_12:
	ldr	r0, [r11, #-4]
	bl	free
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end22:
	.size	free_side_info_link, .Lfunc_end22-free_side_info_link
	.cantunwind
	.fnend

	.globl	BF_NewHolderFromBitstreamPart
	.p2align	2
	.type	BF_NewHolderFromBitstreamPart,%function
	.code	32                      @ @BF_NewHolderFromBitstreamPart
BF_NewHolderFromBitstreamPart:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #8
	str	r0, [sp, #4]
	ldr	r0, [sp, #4]
	ldr	r0, [r0]
	bl	BF_newPartHolder
	str	r0, [sp]
	ldr	r0, [sp]
	ldr	r1, [sp, #4]
	bl	BF_LoadHolderFromBitstreamPart
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end23:
	.size	BF_NewHolderFromBitstreamPart, .Lfunc_end23-BF_NewHolderFromBitstreamPart
	.cantunwind
	.fnend

	.globl	BF_addEntry
	.p2align	2
	.type	BF_addEntry,%function
	.code	32                      @ @BF_addEntry
BF_addEntry:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	str	r0, [r11, #-8]
	str	r1, [sp, #12]
	str	r2, [sp, #8]
	ldr	r0, [sp, #12]
	str	r0, [sp]
	ldr	r0, [sp, #8]
	strh	r0, [sp, #4]
	ldr	r0, [sp, #8]
	cmp	r0, #0
	beq	.LBB24_2
@ BB#1:
	mov	r1, sp
	ldr	r0, [r11, #-8]
	bl	BF_addElement
	str	r0, [r11, #-4]
	b	.LBB24_3
.LBB24_2:
	ldr	r0, [r11, #-8]
	str	r0, [r11, #-4]
.LBB24_3:
	ldr	r0, [r11, #-4]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end24:
	.size	BF_addEntry, .Lfunc_end24-BF_addEntry
	.cantunwind
	.fnend

	.globl	id3_inittag
	.p2align	2
	.type	id3_inittag,%function
	.code	32                      @ @id3_inittag
id3_inittag:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #40
	movw	r1, #0
	movw	r2, #0
	movw	r3, #255
	str	r0, [r11, #-4]
	ldr	r0, [r11, #-4]
	add	r0, r0, #8
	movw	r12, :lower16:.L.str.151
	movt	r12, :upper16:.L.str.151
	str	r1, [r11, #-8]          @ 4-byte Spill
	mov	r1, r12
	str	r3, [r11, #-12]         @ 4-byte Spill
	str	r2, [r11, #-16]         @ 4-byte Spill
	bl	strcpy
	ldr	r1, [r11, #-4]
	add	r1, r1, #39
	movw	r2, :lower16:.L.str.151
	movt	r2, :upper16:.L.str.151
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	strcpy
	ldr	r1, [r11, #-4]
	add	r1, r1, #70
	movw	r2, :lower16:.L.str.151
	movt	r2, :upper16:.L.str.151
	str	r0, [sp, #16]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	strcpy
	ldr	r1, [r11, #-4]
	add	r1, r1, #101
	movw	r2, :lower16:.L.str.151
	movt	r2, :upper16:.L.str.151
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	strcpy
	ldr	r1, [r11, #-4]
	add	r1, r1, #106
	movw	r2, :lower16:.L.str.151
	movt	r2, :upper16:.L.str.151
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	strcpy
	ldr	r1, [r11, #-4]
	ldr	r2, [r11, #-12]         @ 4-byte Reload
	strb	r2, [r1, #265]
	ldr	r1, [r11, #-4]
	ldr	r3, [r11, #-16]         @ 4-byte Reload
	strb	r3, [r1, #266]
	ldr	r1, [r11, #-4]
	ldr	r12, [r11, #-8]         @ 4-byte Reload
	str	r12, [r1, #4]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end25:
	.size	id3_inittag, .Lfunc_end25-id3_inittag
	.cantunwind
	.fnend

	.globl	id3_buildtag
	.p2align	2
	.type	id3_buildtag,%function
	.code	32                      @ @id3_buildtag
id3_buildtag:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #40
	movw	r1, #30
	str	r0, [r11, #-4]
	ldr	r0, [r11, #-4]
	add	r0, r0, #137
	movw	r2, :lower16:.L.str.1.152
	movt	r2, :upper16:.L.str.1.152
	str	r1, [r11, #-8]          @ 4-byte Spill
	mov	r1, r2
	bl	strcpy
	ldr	r1, [r11, #-4]
	add	r1, r1, #8
	str	r0, [r11, #-12]         @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [r11, #-8]          @ 4-byte Reload
	bl	id3_pad
	movw	r2, #30
	ldr	r0, [r11, #-4]
	add	r0, r0, #137
	ldr	r1, [r11, #-4]
	add	r1, r1, #8
	bl	strncat
	movw	r1, #30
	ldr	r2, [r11, #-4]
	add	r2, r2, #39
	str	r0, [r11, #-16]         @ 4-byte Spill
	mov	r0, r2
	bl	id3_pad
	movw	r2, #30
	ldr	r0, [r11, #-4]
	add	r0, r0, #137
	ldr	r1, [r11, #-4]
	add	r1, r1, #39
	bl	strncat
	movw	r1, #30
	ldr	r2, [r11, #-4]
	add	r2, r2, #70
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, r2
	bl	id3_pad
	movw	r2, #30
	ldr	r0, [r11, #-4]
	add	r0, r0, #137
	ldr	r1, [r11, #-4]
	add	r1, r1, #70
	bl	strncat
	movw	r1, #4
	ldr	r2, [r11, #-4]
	add	r2, r2, #101
	str	r0, [sp, #16]           @ 4-byte Spill
	mov	r0, r2
	bl	id3_pad
	movw	r2, #4
	ldr	r0, [r11, #-4]
	add	r0, r0, #137
	ldr	r1, [r11, #-4]
	add	r1, r1, #101
	bl	strncat
	movw	r1, #30
	ldr	r2, [r11, #-4]
	add	r2, r2, #106
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r2
	bl	id3_pad
	movw	r2, #30
	ldr	r0, [r11, #-4]
	add	r0, r0, #137
	ldr	r1, [r11, #-4]
	add	r1, r1, #106
	bl	strncat
	movw	r1, #1
	movw	r2, #265
	ldr	lr, [r11, #-4]
	add	r2, lr, r2
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r2
	bl	id3_pad
	movw	r2, #1
	movw	r0, #265
	ldr	r1, [r11, #-4]
	add	r1, r1, #137
	ldr	lr, [r11, #-4]
	add	r0, lr, r0
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #4]            @ 4-byte Reload
	bl	strncat
	ldr	r1, [r11, #-4]
	ldrb	r1, [r1, #266]
	cmp	r1, #0
	str	r0, [sp]                @ 4-byte Spill
	beq	.LBB26_2
@ BB#1:
	movw	r0, #0
	ldr	r1, [r11, #-4]
	strb	r0, [r1, #262]
	ldr	r0, [r11, #-4]
	ldrb	r0, [r0, #266]
	ldr	r1, [r11, #-4]
	strb	r0, [r1, #263]
.LBB26_2:
	movw	r0, #1
	ldr	r1, [r11, #-4]
	str	r0, [r1, #4]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end26:
	.size	id3_buildtag, .Lfunc_end26-id3_buildtag
	.cantunwind
	.fnend

	.p2align	2
	.type	id3_pad,%function
	.code	32                      @ @id3_pad
id3_pad:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #16
	str	r0, [r11, #-4]
	str	r1, [sp, #8]
	ldr	r0, [r11, #-4]
	bl	strlen
	str	r0, [sp, #4]
.LBB27_1:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #4]
	ldr	r1, [sp, #8]
	cmp	r0, r1
	bge	.LBB27_3
@ BB#2:                                 @   in Loop: Header=BB27_1 Depth=1
	movw	r0, #32
	ldr	r1, [r11, #-4]
	ldr	r2, [sp, #4]
	add	r1, r1, r2
	strb	r0, [r1]
	ldr	r0, [sp, #4]
	add	r0, r0, #1
	str	r0, [sp, #4]
	b	.LBB27_1
.LBB27_3:
	movw	r0, #0
	ldr	r1, [r11, #-4]
	ldr	r2, [sp, #4]
	add	r1, r1, r2
	strb	r0, [r1]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end27:
	.size	id3_pad, .Lfunc_end27-id3_pad
	.cantunwind
	.fnend

	.globl	id3_writetag
	.p2align	2
	.type	id3_writetag,%function
	.code	32                      @ @id3_writetag
id3_writetag:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #32
	str	r0, [r11, #-8]
	str	r1, [r11, #-12]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #4]
	cmp	r0, #0
	bne	.LBB28_2
@ BB#1:
	mvn	r0, #0
	str	r0, [r11, #-4]
	b	.LBB28_5
.LBB28_2:
	movw	r1, :lower16:.L.str.2.153
	movt	r1, :upper16:.L.str.2.153
	ldr	r0, [r11, #-8]
	bl	fopen
	movw	r1, #0
	str	r0, [sp, #16]
	ldr	r0, [sp, #16]
	cmp	r0, r1
	bne	.LBB28_4
@ BB#3:
	mvn	r0, #0
	str	r0, [r11, #-4]
	b	.LBB28_5
.LBB28_4:
	movw	r1, #0
	movw	r2, #2
	ldr	r0, [sp, #16]
	bl	fseek
	movw	r1, #1
	movw	r2, #128
	ldr	lr, [r11, #-12]
	add	lr, lr, #137
	ldr	r3, [sp, #16]
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, lr
	bl	fwrite
	ldr	r1, [sp, #16]
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r1
	bl	fclose
	movw	r1, #0
	str	r1, [r11, #-4]
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB28_5:
	ldr	r0, [r11, #-4]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end28:
	.size	id3_writetag, .Lfunc_end28-id3_writetag
	.cantunwind
	.fnend

	.globl	ConvertFromIeeeSingle
	.p2align	3
	.type	ConvertFromIeeeSingle,%function
	.code	32                      @ @ConvertFromIeeeSingle
ConvertFromIeeeSingle:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #56
	ldr	r1, .LCPI29_0
	movw	r2, #8
	movw	r3, #16
	movw	r12, #24
	str	r0, [r11, #-12]
	ldr	r0, [r11, #-12]
	ldrb	r0, [r0]
	and	r0, r0, #255
	lsl	r0, r0, #24
	ldr	lr, [r11, #-12]
	ldrb	lr, [lr, #1]
	and	lr, lr, #255
	lsl	lr, lr, #16
	orr	r0, r0, lr
	ldr	lr, [r11, #-12]
	ldrb	lr, [lr, #2]
	and	lr, lr, #255
	lsl	lr, lr, #8
	orr	r0, r0, lr
	ldr	lr, [r11, #-12]
	ldrb	lr, [lr, #3]
	and	lr, lr, #255
	orr	r0, r0, lr
	str	r0, [sp, #20]
	ldr	r0, [sp, #20]
	and	r0, r0, r1
	cmp	r0, #0
	str	r12, [sp, #16]          @ 4-byte Spill
	str	r3, [sp, #12]           @ 4-byte Spill
	str	r2, [sp, #8]            @ 4-byte Spill
	bne	.LBB29_2
@ BB#1:
	vldr	d16, .LCPI29_4
	vstr	d16, [r11, #-24]
	b	.LBB29_9
.LBB29_2:
	movw	r0, #23
	ldr	r1, .LCPI29_1
	ldr	r2, [sp, #20]
	and	r1, r2, r1
	asr	r1, r1, #23
	str	r1, [sp, #24]
	ldr	r1, [sp, #24]
	cmp	r1, #255
	str	r0, [sp, #4]            @ 4-byte Spill
	bne	.LBB29_4
@ BB#3:
	vldr	d16, .LCPI29_3
	vstr	d16, [r11, #-24]
	b	.LBB29_8
.LBB29_4:
	ldr	r0, [sp, #24]
	cmp	r0, #0
	bne	.LBB29_6
@ BB#5:
	ldr	r0, .LCPI29_2
	ldr	r1, [sp, #20]
	and	r0, r1, r0
	str	r0, [sp, #28]
	ldr	r0, [sp, #28]
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	ldr	r0, [sp, #24]
	sub	r0, r0, #127
	sub	r0, r0, #23
	add	r2, r0, #1
	vmov	r0, r1, d16
	bl	ldexp
	vmov	d16, r0, r1
	vstr	d16, [r11, #-24]
	b	.LBB29_7
.LBB29_6:
	ldr	r0, .LCPI29_2
	ldr	r1, [sp, #20]
	and	r0, r1, r0
	add	r0, r0, #8388608
	str	r0, [sp, #28]
	ldr	r0, [sp, #28]
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	ldr	r0, [sp, #24]
	sub	r0, r0, #127
	sub	r2, r0, #23
	vmov	r0, r1, d16
	bl	ldexp
	vmov	d16, r0, r1
	vstr	d16, [r11, #-24]
.LBB29_7:
	b	.LBB29_8
.LBB29_8:
	b	.LBB29_9
.LBB29_9:
	ldr	r0, [sp, #20]
	and	r0, r0, #-2147483648
	cmp	r0, #0
	beq	.LBB29_11
@ BB#10:
	vldr	d16, [r11, #-24]
	vneg.f64	d16, d16
	vstr	d16, [r11, #-8]
	b	.LBB29_12
.LBB29_11:
	vldr	d16, [r11, #-24]
	vstr	d16, [r11, #-8]
.LBB29_12:
	vldr	d16, [r11, #-8]
	vmov	r0, r1, d16
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#13:
.LCPI29_3:
	.long	0                       @ double +Inf
	.long	2146435072
.LCPI29_4:
	.long	0                       @ double 0
	.long	0
.LCPI29_0:
	.long	2147483647              @ 0x7fffffff
.LCPI29_1:
	.long	2139095040              @ 0x7f800000
.LCPI29_2:
	.long	8388607                 @ 0x7fffff
.Lfunc_end29:
	.size	ConvertFromIeeeSingle, .Lfunc_end29-ConvertFromIeeeSingle
	.cantunwind
	.fnend

	.globl	ConvertToIeeeSingle
	.p2align	3
	.type	ConvertToIeeeSingle,%function
	.code	32                      @ @ConvertToIeeeSingle
ConvertToIeeeSingle:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #64
	vmov	d16, r0, r1
	vstr	d16, [r11, #-8]
	str	r2, [r11, #-12]
	vldr	d16, [r11, #-8]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB30_2
@ BB#1:
	vmov.f64	d16, #-1.000000e+00
	ldr	r0, .LCPI30_0
	str	r0, [r11, #-16]
	vldr	d17, [r11, #-8]
	vmul.f64	d16, d17, d16
	vstr	d16, [r11, #-8]
	b	.LBB30_3
.LBB30_2:
	movw	r0, #0
	str	r0, [r11, #-16]
.LBB30_3:
	vldr	d16, [r11, #-8]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	bne	.LBB30_5
@ BB#4:
	movw	r0, #0
	str	r0, [r11, #-20]
	b	.LBB30_16
.LBB30_5:
	add	r2, sp, #28
	vldr	d16, [r11, #-8]
	vmov	r0, r1, d16
	bl	frexp
	vmov	d16, r0, r1
	vstr	d16, [sp, #32]
	ldr	r0, [sp, #28]
	cmp	r0, #129
	bgt	.LBB30_7
@ BB#6:
	vmov.f64	d16, #1.000000e+00
	vldr	d17, [sp, #32]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	bmi	.LBB30_8
.LBB30_7:
	ldr	r0, .LCPI30_2
	ldr	r1, [r11, #-16]
	orr	r0, r1, r0
	str	r0, [r11, #-20]
	b	.LBB30_15
.LBB30_8:
	ldr	r0, [sp, #28]
	cmn	r0, #125
	bge	.LBB30_13
@ BB#9:
	ldr	r0, [sp, #28]
	add	r0, r0, #149
	str	r0, [sp, #20]
	ldr	r0, [sp, #20]
	cmp	r0, #0
	bge	.LBB30_11
@ BB#10:
	ldr	r0, [r11, #-16]
	str	r0, [r11, #-20]
	b	.LBB30_12
.LBB30_11:
	movw	r0, #1
	vldr	d16, [sp, #32]
	ldr	r1, [sp, #20]
	lsl	r0, r0, r1
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	str	r0, [sp, #24]
	ldr	r0, [r11, #-16]
	ldr	r1, [sp, #24]
	orr	r0, r0, r1
	str	r0, [r11, #-20]
.LBB30_12:
	b	.LBB30_14
.LBB30_13:
	movw	r0, #23
	vldr	d16, .LCPI30_1
	vldr	d17, [sp, #32]
	vmul.f64	d16, d17, d16
	vmov	r1, r2, d16
	str	r0, [sp, #16]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	floor
	vmov	d16, r0, r1
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	str	r0, [sp, #24]
	ldr	r0, [sp, #24]
	sub	r0, r0, #8388608
	str	r0, [sp, #24]
	ldr	r0, [r11, #-16]
	ldr	r1, [sp, #28]
	add	r1, r1, #127
	sub	r1, r1, #1
	lsl	r1, r1, #23
	orr	r0, r0, r1
	ldr	r1, [sp, #24]
	orr	r0, r0, r1
	str	r0, [r11, #-20]
.LBB30_14:
	b	.LBB30_15
.LBB30_15:
	b	.LBB30_16
.LBB30_16:
	movw	r0, #8
	movw	r1, #16
	movw	r2, #24
	ldr	r3, [r11, #-20]
	asr	r3, r3, #24
	ldr	r12, [r11, #-12]
	strb	r3, [r12]
	ldr	r3, [r11, #-20]
	asr	r3, r3, #16
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #1]
	ldr	r3, [r11, #-20]
	asr	r3, r3, #8
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #2]
	ldr	r3, [r11, #-20]
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #3]
	str	r0, [sp, #12]           @ 4-byte Spill
	str	r1, [sp, #8]            @ 4-byte Spill
	str	r2, [sp, #4]            @ 4-byte Spill
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#17:
.LCPI30_1:
	.long	0                       @ double 16777216
	.long	1097859072
.LCPI30_0:
	.long	2147483648              @ 0x80000000
.LCPI30_2:
	.long	2139095040              @ 0x7f800000
.Lfunc_end30:
	.size	ConvertToIeeeSingle, .Lfunc_end30-ConvertToIeeeSingle
	.cantunwind
	.fnend

	.globl	ConvertFromIeeeDouble
	.p2align	3
	.type	ConvertFromIeeeDouble,%function
	.code	32                      @ @ConvertFromIeeeDouble
ConvertFromIeeeDouble:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #56
	movw	r1, #8
	movw	r2, #16
	movw	r3, #24
	str	r0, [r11, #-12]
	ldr	r0, [r11, #-12]
	ldrb	r0, [r0]
	and	r0, r0, #255
	lsl	r0, r0, #24
	ldr	r12, [r11, #-12]
	ldrb	r12, [r12, #1]
	and	r12, r12, #255
	lsl	r12, r12, #16
	orr	r0, r0, r12
	ldr	r12, [r11, #-12]
	ldrb	r12, [r12, #2]
	and	r12, r12, #255
	lsl	r12, r12, #8
	orr	r0, r0, r12
	ldr	r12, [r11, #-12]
	ldrb	r12, [r12, #3]
	and	r12, r12, #255
	orr	r0, r0, r12
	str	r0, [sp, #20]
	ldr	r0, [r11, #-12]
	ldrb	r0, [r0, #4]
	and	r0, r0, #255
	lsl	r0, r0, #24
	ldr	r12, [r11, #-12]
	ldrb	r12, [r12, #5]
	and	r12, r12, #255
	lsl	r12, r12, #16
	orr	r0, r0, r12
	ldr	r12, [r11, #-12]
	ldrb	r12, [r12, #6]
	and	r12, r12, #255
	lsl	r12, r12, #8
	orr	r0, r0, r12
	ldr	r12, [r11, #-12]
	ldrb	r12, [r12, #7]
	and	r12, r12, #255
	orr	r0, r0, r12
	str	r0, [sp, #16]
	ldr	r0, [sp, #20]
	cmp	r0, #0
	str	r3, [sp, #12]           @ 4-byte Spill
	str	r1, [sp, #8]            @ 4-byte Spill
	str	r2, [sp, #4]            @ 4-byte Spill
	bne	.LBB31_3
@ BB#1:
	ldr	r0, [sp, #16]
	cmp	r0, #0
	bne	.LBB31_3
@ BB#2:
	vldr	d16, .LCPI31_5
	vstr	d16, [r11, #-24]
	b	.LBB31_10
.LBB31_3:
	movw	r0, #2047
	movw	r1, #20
	ldr	r2, .LCPI31_0
	ldr	r3, [sp, #20]
	and	r2, r3, r2
	lsr	r2, r2, #20
	str	r2, [sp, #24]
	ldr	r2, [sp, #24]
	cmp	r2, r0
	str	r1, [sp]                @ 4-byte Spill
	bne	.LBB31_5
@ BB#4:
	vldr	d16, .LCPI31_4
	vstr	d16, [r11, #-24]
	b	.LBB31_9
.LBB31_5:
	ldr	r0, [sp, #24]
	cmp	r0, #0
	bne	.LBB31_7
@ BB#6:
	movw	r0, #1023
	ldr	r1, .LCPI31_3
	ldr	r2, [sp, #20]
	and	r1, r2, r1
	str	r1, [sp, #28]
	ldr	r1, [sp, #28]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	ldr	r1, [sp, #24]
	sub	r0, r1, r0
	sub	r0, r0, #20
	add	r2, r0, #1
	vmov	r0, r1, d16
	bl	ldexp
	vmov	d16, r0, r1
	movw	r0, #1023
	vldr	d17, .LCPI31_1
	ldr	r1, .LCPI31_2
	vstr	d16, [r11, #-24]
	ldr	r2, [sp, #16]
	sub	r1, r2, r1
	sub	r1, r1, #1
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vadd.f64	d16, d16, d17
	ldr	r1, [sp, #24]
	sub	r0, r1, r0
	sub	r0, r0, #20
	add	r0, r0, #1
	sub	r2, r0, #32
	vmov	r0, r1, d16
	bl	ldexp
	vmov	d16, r0, r1
	vldr	d17, [r11, #-24]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-24]
	b	.LBB31_8
.LBB31_7:
	movw	r0, #1023
	ldr	r1, .LCPI31_3
	ldr	r2, [sp, #20]
	and	r1, r2, r1
	add	r1, r1, #1048576
	str	r1, [sp, #28]
	ldr	r1, [sp, #28]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	ldr	r1, [sp, #24]
	sub	r0, r1, r0
	sub	r2, r0, #20
	vmov	r0, r1, d16
	bl	ldexp
	vmov	d16, r0, r1
	movw	r0, #1023
	vldr	d17, .LCPI31_1
	ldr	r1, .LCPI31_2
	vstr	d16, [r11, #-24]
	ldr	r2, [sp, #16]
	sub	r1, r2, r1
	sub	r1, r1, #1
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vadd.f64	d16, d16, d17
	ldr	r1, [sp, #24]
	sub	r0, r1, r0
	sub	r0, r0, #20
	sub	r2, r0, #32
	vmov	r0, r1, d16
	bl	ldexp
	vmov	d16, r0, r1
	vldr	d17, [r11, #-24]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-24]
.LBB31_8:
	b	.LBB31_9
.LBB31_9:
	b	.LBB31_10
.LBB31_10:
	ldr	r0, [sp, #20]
	and	r0, r0, #-2147483648
	cmp	r0, #0
	beq	.LBB31_12
@ BB#11:
	vldr	d16, [r11, #-24]
	vneg.f64	d16, d16
	vstr	d16, [r11, #-8]
	b	.LBB31_13
.LBB31_12:
	vldr	d16, [r11, #-24]
	vstr	d16, [r11, #-8]
.LBB31_13:
	vldr	d16, [r11, #-8]
	vmov	r0, r1, d16
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#14:
.LCPI31_1:
	.long	0                       @ double 2147483648
	.long	1105199104
.LCPI31_4:
	.long	0                       @ double +Inf
	.long	2146435072
.LCPI31_5:
	.long	0                       @ double 0
	.long	0
.LCPI31_0:
	.long	2146435072              @ 0x7ff00000
.LCPI31_2:
	.long	2147483647              @ 0x7fffffff
.LCPI31_3:
	.long	1048575                 @ 0xfffff
.Lfunc_end31:
	.size	ConvertFromIeeeDouble, .Lfunc_end31-ConvertFromIeeeDouble
	.cantunwind
	.fnend

	.globl	ConvertToIeeeDouble
	.p2align	3
	.type	ConvertToIeeeDouble,%function
	.code	32                      @ @ConvertToIeeeDouble
ConvertToIeeeDouble:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #128
	vmov	d16, r0, r1
	vstr	d16, [r11, #-8]
	str	r2, [r11, #-12]
	vldr	d16, [r11, #-8]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB32_2
@ BB#1:
	vmov.f64	d16, #-1.000000e+00
	ldr	r0, .LCPI32_0
	str	r0, [r11, #-16]
	vldr	d17, [r11, #-8]
	vmul.f64	d16, d17, d16
	vstr	d16, [r11, #-8]
	b	.LBB32_3
.LBB32_2:
	movw	r0, #0
	str	r0, [r11, #-16]
.LBB32_3:
	vldr	d16, [r11, #-8]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	bne	.LBB32_5
@ BB#4:
	movw	r0, #0
	str	r0, [r11, #-20]
	str	r0, [r11, #-24]
	b	.LBB32_19
.LBB32_5:
	sub	r2, r11, #44
	vldr	d16, [r11, #-8]
	vmov	r0, r1, d16
	bl	frexp
	vmov	d16, r0, r1
	movw	r0, #1025
	vstr	d16, [r11, #-32]
	ldr	r1, [r11, #-44]
	cmp	r1, r0
	bgt	.LBB32_7
@ BB#6:
	vmov.f64	d16, #1.000000e+00
	vldr	d17, [r11, #-32]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	bmi	.LBB32_8
.LBB32_7:
	movw	r0, #0
	ldr	r1, .LCPI32_4
	ldr	r2, [r11, #-16]
	orr	r1, r2, r1
	str	r1, [r11, #-20]
	str	r0, [r11, #-24]
	b	.LBB32_18
.LBB32_8:
	mvn	r0, #1020
	ldr	r1, [r11, #-44]
	cmp	r1, r0
	bge	.LBB32_16
@ BB#9:
	movw	r0, #1042
	ldr	r1, [r11, #-44]
	add	r0, r1, r0
	str	r0, [r11, #-52]
	ldr	r0, [r11, #-52]
	cmp	r0, #0
	bge	.LBB32_14
@ BB#10:
	ldr	r0, [r11, #-16]
	str	r0, [r11, #-20]
	ldr	r0, [r11, #-52]
	add	r0, r0, #32
	str	r0, [r11, #-52]
	ldr	r0, [r11, #-52]
	cmp	r0, #0
	bge	.LBB32_12
@ BB#11:
	movw	r0, #0
	str	r0, [r11, #-24]
	b	.LBB32_13
.LBB32_12:
	vldr	d16, [r11, #-32]
	ldr	r2, [r11, #-52]
	vmov	r0, r1, d16
	bl	ldexp
	vmov	d16, r0, r1
	ldr	r0, .LCPI32_1
	vldr	d17, .LCPI32_2
	vmov	r1, r2, d16
	str	r0, [r11, #-56]         @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	vstr	d17, [sp, #64]          @ 8-byte Spill
	bl	floor
	vmov	d16, r0, r1
	vldr	d17, [sp, #64]          @ 8-byte Reload
	vsub.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	ldr	r1, [r11, #-56]         @ 4-byte Reload
	add	r0, r0, r1
	add	r0, r0, #1
	str	r0, [r11, #-24]
.LBB32_13:
	b	.LBB32_15
.LBB32_14:
	vldr	d16, [r11, #-32]
	ldr	r2, [r11, #-52]
	vmov	r0, r1, d16
	bl	ldexp
	vmov	d16, r0, r1
	movw	r2, #32
	vstr	d16, [r11, #-40]
	vldr	d16, [r11, #-40]
	vmov	r0, r1, d16
	str	r2, [sp, #60]           @ 4-byte Spill
	bl	floor
	vmov	d16, r0, r1
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	str	r0, [r11, #-48]
	ldr	r0, [r11, #-16]
	ldr	r1, [r11, #-48]
	orr	r0, r0, r1
	str	r0, [r11, #-20]
	vldr	d16, [r11, #-40]
	ldr	r0, [r11, #-48]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vsub.f64	d16, d16, d17
	vmov	r0, r1, d16
	ldr	r2, [sp, #60]           @ 4-byte Reload
	bl	ldexp
	vmov	d16, r0, r1
	ldr	r0, .LCPI32_1
	vldr	d17, .LCPI32_2
	vmov	r1, r2, d16
	str	r0, [sp, #56]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	vstr	d17, [sp, #48]          @ 8-byte Spill
	bl	floor
	vmov	d16, r0, r1
	vldr	d17, [sp, #48]          @ 8-byte Reload
	vsub.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	ldr	r1, [sp, #56]           @ 4-byte Reload
	add	r0, r0, r1
	add	r0, r0, #1
	str	r0, [r11, #-24]
.LBB32_15:
	b	.LBB32_17
.LBB32_16:
	movw	r2, #21
	vldr	d16, [r11, #-32]
	vmov	r0, r1, d16
	bl	ldexp
	vmov	d16, r0, r1
	movw	r2, #32
	movw	r0, #20
	movw	r1, #1023
	vldr	d17, .LCPI32_3
	vstr	d16, [r11, #-40]
	vldr	d16, [r11, #-40]
	vmov	lr, r3, d16
	str	r0, [sp, #44]           @ 4-byte Spill
	mov	r0, lr
	str	r1, [sp, #40]           @ 4-byte Spill
	mov	r1, r3
	vstr	d17, [sp, #32]          @ 8-byte Spill
	str	r2, [sp, #28]           @ 4-byte Spill
	bl	floor
	vmov	d16, r0, r1
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	str	r0, [r11, #-48]
	ldr	r0, [r11, #-48]
	sub	r0, r0, #1048576
	str	r0, [r11, #-48]
	vldr	d16, [r11, #-40]
	vldr	d17, [sp, #32]          @ 8-byte Reload
	vsub.f64	d16, d16, d17
	vstr	d16, [r11, #-40]
	ldr	r0, [r11, #-16]
	ldr	r1, [r11, #-44]
	ldr	r2, [sp, #40]           @ 4-byte Reload
	add	r1, r1, r2
	sub	r1, r1, #1
	lsl	r1, r1, #20
	orr	r0, r0, r1
	ldr	r1, [r11, #-48]
	orr	r0, r0, r1
	str	r0, [r11, #-20]
	vldr	d16, [r11, #-40]
	ldr	r0, [r11, #-48]
	vmov	s0, r0
	vcvt.f64.s32	d18, s0
	vsub.f64	d16, d16, d18
	vmov	r0, r1, d16
	ldr	r2, [sp, #28]           @ 4-byte Reload
	bl	ldexp
	vmov	d16, r0, r1
	ldr	r0, .LCPI32_1
	vldr	d17, .LCPI32_2
	vmov	r1, r2, d16
	str	r0, [sp, #24]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	vstr	d17, [sp, #16]          @ 8-byte Spill
	bl	floor
	vmov	d16, r0, r1
	vldr	d17, [sp, #16]          @ 8-byte Reload
	vsub.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	ldr	r1, [sp, #24]           @ 4-byte Reload
	add	r0, r0, r1
	add	r0, r0, #1
	str	r0, [r11, #-24]
.LBB32_17:
	b	.LBB32_18
.LBB32_18:
	b	.LBB32_19
.LBB32_19:
	movw	r0, #8
	movw	r1, #16
	movw	r2, #24
	ldr	r3, [r11, #-20]
	asr	r3, r3, #24
	ldr	r12, [r11, #-12]
	strb	r3, [r12]
	ldr	r3, [r11, #-20]
	asr	r3, r3, #16
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #1]
	ldr	r3, [r11, #-20]
	asr	r3, r3, #8
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #2]
	ldr	r3, [r11, #-20]
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #3]
	ldr	r3, [r11, #-24]
	asr	r3, r3, #24
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #4]
	ldr	r3, [r11, #-24]
	asr	r3, r3, #16
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #5]
	ldr	r3, [r11, #-24]
	asr	r3, r3, #8
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #6]
	ldr	r3, [r11, #-24]
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #7]
	str	r0, [sp, #12]           @ 4-byte Spill
	str	r1, [sp, #8]            @ 4-byte Spill
	str	r2, [sp, #4]            @ 4-byte Spill
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#20:
.LCPI32_2:
	.long	0                       @ double 2147483648
	.long	1105199104
.LCPI32_3:
	.long	0                       @ double 1048576
	.long	1093664768
.LCPI32_0:
	.long	2147483648              @ 0x80000000
.LCPI32_1:
	.long	2147483647              @ 0x7fffffff
.LCPI32_4:
	.long	2146435072              @ 0x7ff00000
.Lfunc_end32:
	.size	ConvertToIeeeDouble, .Lfunc_end32-ConvertToIeeeDouble
	.cantunwind
	.fnend

	.globl	ConvertFromIeeeExtended
	.p2align	3
	.type	ConvertFromIeeeExtended,%function
	.code	32                      @ @ConvertFromIeeeExtended
ConvertFromIeeeExtended:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #56
	movw	r1, #8
	movw	r2, #16
	movw	r3, #24
	str	r0, [r11, #-12]
	ldr	r0, [r11, #-12]
	ldrb	r0, [r0]
	and	r0, r0, #127
	lsl	r0, r0, #8
	ldr	r12, [r11, #-12]
	ldrb	r12, [r12, #1]
	and	r12, r12, #255
	orr	r0, r0, r12
	str	r0, [sp, #28]
	ldr	r0, [r11, #-12]
	ldrb	r0, [r0, #2]
	and	r0, r0, #255
	lsl	r0, r0, #24
	ldr	r12, [r11, #-12]
	ldrb	r12, [r12, #3]
	and	r12, r12, #255
	lsl	r12, r12, #16
	orr	r0, r0, r12
	ldr	r12, [r11, #-12]
	ldrb	r12, [r12, #4]
	and	r12, r12, #255
	lsl	r12, r12, #8
	orr	r0, r0, r12
	ldr	r12, [r11, #-12]
	ldrb	r12, [r12, #5]
	and	r12, r12, #255
	orr	r0, r0, r12
	str	r0, [sp, #24]
	ldr	r0, [r11, #-12]
	ldrb	r0, [r0, #6]
	and	r0, r0, #255
	lsl	r0, r0, #24
	ldr	r12, [r11, #-12]
	ldrb	r12, [r12, #7]
	and	r12, r12, #255
	lsl	r12, r12, #16
	orr	r0, r0, r12
	ldr	r12, [r11, #-12]
	ldrb	r12, [r12, #8]
	and	r12, r12, #255
	lsl	r12, r12, #8
	orr	r0, r0, r12
	ldr	r12, [r11, #-12]
	ldrb	r12, [r12, #9]
	and	r12, r12, #255
	orr	r0, r0, r12
	str	r0, [sp, #20]
	ldr	r0, [sp, #28]
	cmp	r0, #0
	str	r3, [sp, #16]           @ 4-byte Spill
	str	r1, [sp, #12]           @ 4-byte Spill
	str	r2, [sp, #8]            @ 4-byte Spill
	bne	.LBB33_4
@ BB#1:
	ldr	r0, [sp, #24]
	cmp	r0, #0
	bne	.LBB33_4
@ BB#2:
	ldr	r0, [sp, #20]
	cmp	r0, #0
	bne	.LBB33_4
@ BB#3:
	vldr	d16, .LCPI33_3
	vstr	d16, [r11, #-24]
	b	.LBB33_8
.LBB33_4:
	movw	r0, #32767
	ldr	r1, [sp, #28]
	cmp	r1, r0
	bne	.LBB33_6
@ BB#5:
	vldr	d16, .LCPI33_2
	vstr	d16, [r11, #-24]
	b	.LBB33_7
.LBB33_6:
	vldr	d16, .LCPI33_0
	ldr	r0, .LCPI33_1
	movw	r1, #16383
	ldr	r2, [sp, #28]
	sub	r1, r2, r1
	str	r1, [sp, #28]
	ldr	r1, [sp, #24]
	sub	r0, r1, r0
	sub	r0, r0, #1
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vadd.f64	d16, d17, d16
	ldr	r0, [sp, #28]
	sub	r0, r0, #31
	str	r0, [sp, #28]
	str	r0, [sp, #4]            @ 4-byte Spill
	vmov	r0, r1, d16
	ldr	r2, [sp, #4]            @ 4-byte Reload
	bl	ldexp
	vmov	d16, r0, r1
	vldr	d17, .LCPI33_0
	ldr	r0, .LCPI33_1
	vstr	d16, [r11, #-24]
	ldr	r1, [sp, #20]
	sub	r0, r1, r0
	sub	r0, r0, #1
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	vadd.f64	d16, d16, d17
	ldr	r0, [sp, #28]
	sub	r0, r0, #32
	str	r0, [sp, #28]
	str	r0, [sp]                @ 4-byte Spill
	vmov	r0, r1, d16
	ldr	r2, [sp]                @ 4-byte Reload
	bl	ldexp
	vmov	d16, r0, r1
	vldr	d17, [r11, #-24]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-24]
.LBB33_7:
	b	.LBB33_8
.LBB33_8:
	ldr	r0, [r11, #-12]
	ldrb	r0, [r0]
	and	r0, r0, #128
	cmp	r0, #0
	beq	.LBB33_10
@ BB#9:
	vldr	d16, [r11, #-24]
	vneg.f64	d16, d16
	vstr	d16, [r11, #-8]
	b	.LBB33_11
.LBB33_10:
	vldr	d16, [r11, #-24]
	vstr	d16, [r11, #-8]
.LBB33_11:
	vldr	d16, [r11, #-8]
	vmov	r0, r1, d16
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#12:
.LCPI33_0:
	.long	0                       @ double 2147483648
	.long	1105199104
.LCPI33_2:
	.long	0                       @ double +Inf
	.long	2146435072
.LCPI33_3:
	.long	0                       @ double 0
	.long	0
.LCPI33_1:
	.long	2147483647              @ 0x7fffffff
.Lfunc_end33:
	.size	ConvertFromIeeeExtended, .Lfunc_end33-ConvertFromIeeeExtended
	.cantunwind
	.fnend

	.globl	ConvertToIeeeExtended
	.p2align	3
	.type	ConvertToIeeeExtended,%function
	.code	32                      @ @ConvertToIeeeExtended
ConvertToIeeeExtended:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #96
	vmov	d16, r0, r1
	vstr	d16, [r11, #-8]
	str	r2, [r11, #-12]
	vldr	d16, [r11, #-8]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB34_2
@ BB#1:
	vmov.f64	d16, #-1.000000e+00
	movw	r0, #32768
	str	r0, [r11, #-16]
	vldr	d17, [r11, #-8]
	vmul.f64	d16, d17, d16
	vstr	d16, [r11, #-8]
	b	.LBB34_3
.LBB34_2:
	movw	r0, #0
	str	r0, [r11, #-16]
.LBB34_3:
	vldr	d16, [r11, #-8]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	bne	.LBB34_5
@ BB#4:
	movw	r0, #0
	str	r0, [r11, #-20]
	str	r0, [r11, #-44]
	str	r0, [sp, #48]
	b	.LBB34_12
.LBB34_5:
	sub	r2, r11, #20
	vldr	d16, [r11, #-8]
	vmov	r0, r1, d16
	bl	frexp
	vmov	d16, r0, r1
	vstr	d16, [r11, #-32]
	ldr	r0, [r11, #-20]
	cmp	r0, #16384
	bgt	.LBB34_7
@ BB#6:
	vmov.f64	d16, #1.000000e+00
	vldr	d17, [r11, #-32]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	bmi	.LBB34_8
.LBB34_7:
	movw	r0, #0
	movw	r1, #32767
	ldr	r2, [r11, #-16]
	orr	r1, r2, r1
	str	r1, [r11, #-20]
	str	r0, [r11, #-44]
	str	r0, [sp, #48]
	b	.LBB34_11
.LBB34_8:
	movw	r0, #16382
	ldr	r1, [r11, #-20]
	add	r0, r1, r0
	str	r0, [r11, #-20]
	ldr	r0, [r11, #-20]
	cmp	r0, #0
	bge	.LBB34_10
@ BB#9:
	vldr	d16, [r11, #-32]
	ldr	r2, [r11, #-20]
	vmov	r0, r1, d16
	bl	ldexp
	vmov	d16, r0, r1
	movw	r0, #0
	vstr	d16, [r11, #-32]
	str	r0, [r11, #-20]
.LBB34_10:
	movw	r2, #32
	ldr	r0, [r11, #-16]
	ldr	r1, [r11, #-20]
	orr	r0, r1, r0
	str	r0, [r11, #-20]
	vldr	d16, [r11, #-32]
	vmov	r0, r1, d16
	bl	ldexp
	vmov	d16, r0, r1
	movw	r2, #32
	ldr	r0, .LCPI34_0
	vldr	d17, .LCPI34_1
	vstr	d16, [r11, #-32]
	vldr	d16, [r11, #-32]
	vmov	r1, lr, d16
	str	r0, [sp, #44]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, lr
	vstr	d17, [sp, #32]          @ 8-byte Spill
	str	r2, [sp, #28]           @ 4-byte Spill
	bl	floor
	vmov	d16, r0, r1
	vstr	d16, [r11, #-40]
	vldr	d16, [r11, #-40]
	vldr	d17, [sp, #32]          @ 8-byte Reload
	vsub.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	ldr	r1, [sp, #44]           @ 4-byte Reload
	add	r0, r0, r1
	add	r0, r0, #1
	str	r0, [r11, #-44]
	vldr	d16, [r11, #-32]
	vldr	d18, [r11, #-40]
	vsub.f64	d16, d16, d18
	vmov	r0, r1, d16
	ldr	r2, [sp, #28]           @ 4-byte Reload
	bl	ldexp
	vmov	d16, r0, r1
	ldr	r0, .LCPI34_0
	vldr	d17, .LCPI34_1
	vstr	d16, [r11, #-32]
	vldr	d16, [r11, #-32]
	vmov	r1, r2, d16
	str	r0, [sp, #24]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	vstr	d17, [sp, #16]          @ 8-byte Spill
	bl	floor
	vmov	d16, r0, r1
	vstr	d16, [r11, #-40]
	vldr	d16, [r11, #-40]
	vldr	d17, [sp, #16]          @ 8-byte Reload
	vsub.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	ldr	r1, [sp, #24]           @ 4-byte Reload
	add	r0, r0, r1
	add	r0, r0, #1
	str	r0, [sp, #48]
.LBB34_11:
	b	.LBB34_12
.LBB34_12:
	movw	r0, #8
	movw	r1, #16
	movw	r2, #24
	ldr	r3, [r11, #-20]
	asr	r3, r3, #8
	ldr	r12, [r11, #-12]
	strb	r3, [r12]
	ldr	r3, [r11, #-20]
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #1]
	ldr	r3, [r11, #-44]
	lsr	r3, r3, #24
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #2]
	ldr	r3, [r11, #-44]
	lsr	r3, r3, #16
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #3]
	ldr	r3, [r11, #-44]
	lsr	r3, r3, #8
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #4]
	ldr	r3, [r11, #-44]
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #5]
	ldr	r3, [sp, #48]
	lsr	r3, r3, #24
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #6]
	ldr	r3, [sp, #48]
	lsr	r3, r3, #16
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #7]
	ldr	r3, [sp, #48]
	lsr	r3, r3, #8
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #8]
	ldr	r3, [sp, #48]
	ldr	r12, [r11, #-12]
	strb	r3, [r12, #9]
	str	r0, [sp, #12]           @ 4-byte Spill
	str	r1, [sp, #8]            @ 4-byte Spill
	str	r2, [sp, #4]            @ 4-byte Spill
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#13:
.LCPI34_1:
	.long	0                       @ double 2147483648
	.long	1105199104
.LCPI34_0:
	.long	2147483647              @ 0x7fffffff
.Lfunc_end34:
	.size	ConvertToIeeeExtended, .Lfunc_end34-ConvertToIeeeExtended
	.cantunwind
	.fnend

	.globl	putMyBits
	.p2align	2
	.type	putMyBits,%function
	.code	32                      @ @putMyBits
putMyBits:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #8
	movw	r2, :lower16:bs
	movt	r2, :upper16:bs
	str	r0, [sp, #4]
	str	r1, [sp]
	ldr	r0, [r2]
	ldr	r1, [sp, #4]
	ldr	r2, [sp]
	bl	putbits
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end35:
	.size	putMyBits, .Lfunc_end35-putMyBits
	.cantunwind
	.fnend

	.globl	III_format_bitstream
	.p2align	2
	.type	III_format_bitstream,%function
	.code	32                      @ @III_format_bitstream
III_format_bitstream:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r10, r11, lr}
	add	r11, sp, #16
	sub	sp, sp, #80
	ldr	r12, [r11, #12]
	ldr	lr, [r11, #8]
	movw	r4, #0
	movw	r5, :lower16:frameData
	movt	r5, :upper16:frameData
	movw	r6, :lower16:bs
	movt	r6, :upper16:bs
	str	r0, [r11, #-20]
	str	r1, [r11, #-24]
	str	r2, [r11, #-28]
	str	r3, [r11, #-32]
	str	lr, [r11, #-36]
	str	r12, [r11, #-40]
	ldr	r0, [r11, #-40]
	str	r0, [r6]
	ldr	r0, [r5]
	cmp	r0, r4
	bne	.LBB36_4
@ BB#1:
	movw	r0, #1
	movw	r1, #96
	bl	calloc
	movw	r1, #1
	movw	lr, #0
	movw	r2, :lower16:frameData
	movt	r2, :upper16:frameData
	str	r0, [r2]
	ldr	r0, [r2]
	cmp	r0, lr
	str	r1, [sp, #44]           @ 4-byte Spill
	bne	.LBB36_3
@ BB#2:
	movw	r0, :lower16:.L.str.156
	movt	r0, :upper16:.L.str.156
	movw	r1, :lower16:.L.str.1.157
	movt	r1, :upper16:.L.str.1.157
	movw	r2, #73
	movw	r3, :lower16:.L__func__.III_format_bitstream
	movt	r3, :upper16:.L__func__.III_format_bitstream
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #44]           @ 4-byte Spill
.LBB36_3:
	ldr	r0, [sp, #44]           @ 4-byte Reload
	str	r0, [sp, #40]           @ 4-byte Spill
.LBB36_4:
	movw	r0, #0
	movw	r1, :lower16:frameResults
	movt	r1, :upper16:frameResults
	ldr	r1, [r1]
	cmp	r1, r0
	bne	.LBB36_8
@ BB#5:
	movw	r0, #1
	movw	r1, #12
	bl	calloc
	movw	r1, #1
	movw	lr, #0
	movw	r2, :lower16:frameResults
	movt	r2, :upper16:frameResults
	str	r0, [r2]
	ldr	r0, [r2]
	cmp	r0, lr
	str	r1, [sp, #36]           @ 4-byte Spill
	bne	.LBB36_7
@ BB#6:
	movw	r0, :lower16:.L.str.2.158
	movt	r0, :upper16:.L.str.2.158
	movw	r1, :lower16:.L.str.1.157
	movt	r1, :upper16:.L.str.1.157
	movw	r2, #78
	movw	r3, :lower16:.L__func__.III_format_bitstream
	movt	r3, :upper16:.L__func__.III_format_bitstream
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #36]           @ 4-byte Spill
.LBB36_7:
	ldr	r0, [sp, #36]           @ 4-byte Reload
	str	r0, [sp, #32]           @ 4-byte Spill
.LBB36_8:
	movw	r0, :lower16:PartHoldersInitialized
	movt	r0, :upper16:PartHoldersInitialized
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LBB36_22
@ BB#9:
	movw	r0, #14
	bl	BF_newPartHolder
	movw	lr, #12
	movw	r1, :lower16:headerPH
	movt	r1, :upper16:headerPH
	str	r0, [r1]
	mov	r0, lr
	bl	BF_newPartHolder
	movw	r1, #0
	movw	lr, :lower16:frameSIPH
	movt	lr, :upper16:frameSIPH
	str	r0, [lr]
	str	r1, [sp, #48]
.LBB36_10:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #48]
	cmp	r0, #2
	bge	.LBB36_13
@ BB#11:                                @   in Loop: Header=BB36_10 Depth=1
	movw	r0, :lower16:channelSIPH
	movt	r0, :upper16:channelSIPH
	movw	r1, #2
	mov	r2, #8
	str	r0, [sp, #28]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #24]           @ 4-byte Spill
	bl	BF_newPartHolder
	ldr	r1, [sp, #48]
	movw	r2, :lower16:channelSIPH
	movt	r2, :upper16:channelSIPH
	add	r1, r2, r1, lsl #2
	str	r0, [r1]
@ BB#12:                                @   in Loop: Header=BB36_10 Depth=1
	ldr	r0, [sp, #48]
	add	r0, r0, #1
	str	r0, [sp, #48]
	b	.LBB36_10
.LBB36_13:
	movw	r0, #0
	str	r0, [r11, #-44]
.LBB36_14:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB36_16 Depth 2
	ldr	r0, [r11, #-44]
	cmp	r0, #2
	bge	.LBB36_21
@ BB#15:                                @   in Loop: Header=BB36_14 Depth=1
	movw	r0, #0
	str	r0, [sp, #48]
.LBB36_16:                              @   Parent Loop BB36_14 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #48]
	cmp	r0, #2
	bge	.LBB36_19
@ BB#17:                                @   in Loop: Header=BB36_16 Depth=2
	movw	r0, #2
	mov	r1, #32
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, r1
	bl	BF_newPartHolder
	ldr	r1, [r11, #-44]
	movw	lr, :lower16:spectrumSIPH
	movt	lr, :upper16:spectrumSIPH
	add	r1, lr, r1, lsl #3
	ldr	lr, [sp, #48]
	str	r0, [r1, lr, lsl #2]
	mov	r0, #64
	bl	BF_newPartHolder
	ldr	r1, [r11, #-44]
	movw	lr, :lower16:scaleFactorsPH
	movt	lr, :upper16:scaleFactorsPH
	add	r1, lr, r1, lsl #3
	ldr	lr, [sp, #48]
	str	r0, [r1, lr, lsl #2]
	mov	r0, #576
	bl	BF_newPartHolder
	ldr	r1, [r11, #-44]
	movw	lr, :lower16:codedDataPH
	movt	lr, :upper16:codedDataPH
	add	r1, lr, r1, lsl #3
	ldr	lr, [sp, #48]
	str	r0, [r1, lr, lsl #2]
	mov	r0, #4
	bl	BF_newPartHolder
	ldr	r1, [r11, #-44]
	movw	lr, :lower16:userSpectrumPH
	movt	lr, :upper16:userSpectrumPH
	add	r1, lr, r1, lsl #3
	ldr	lr, [sp, #48]
	add	r1, r1, lr, lsl #2
	str	r0, [r1]
@ BB#18:                                @   in Loop: Header=BB36_16 Depth=2
	ldr	r0, [sp, #48]
	add	r0, r0, #1
	str	r0, [sp, #48]
	b	.LBB36_16
.LBB36_19:                              @   in Loop: Header=BB36_14 Depth=1
	b	.LBB36_20
.LBB36_20:                              @   in Loop: Header=BB36_14 Depth=1
	ldr	r0, [r11, #-44]
	add	r0, r0, #1
	str	r0, [r11, #-44]
	b	.LBB36_14
.LBB36_21:
	movw	r0, #8
	bl	BF_newPartHolder
	movw	lr, #1
	movw	r1, :lower16:PartHoldersInitialized
	movt	r1, :upper16:PartHoldersInitialized
	movw	r2, :lower16:userFrameDataPH
	movt	r2, :upper16:userFrameDataPH
	str	r0, [r2]
	str	lr, [r1]
.LBB36_22:
	ldr	r0, [r11, #-20]
	ldr	r1, [r11, #-32]
	bl	encodeSideInfo
	ldr	r1, [r11, #-20]
	ldr	lr, [r11, #-28]
	ldr	r2, [r11, #-32]
	ldr	r3, [r11, #-36]
	str	r0, [sp, #16]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, lr
	bl	encodeMainData
	ldr	r0, [r11, #-32]
	ldr	r0, [r0, #8]
	bl	drain_into_ancillary_data
	movw	r0, #0
	movw	r1, :lower16:frameData
	movt	r1, :upper16:frameData
	movw	r2, :lower16:frameSIPH
	movt	r2, :upper16:frameSIPH
	movw	r3, :lower16:headerPH
	movt	r3, :upper16:headerPH
	ldr	lr, [r11, #-24]
	ldr	r12, [r1]
	str	lr, [r12]
	ldr	r12, [r11, #-20]
	ldr	r12, [r12, #180]
	ldr	lr, [r1]
	str	r12, [lr, #4]
	ldr	r12, [r11, #-20]
	ldr	r12, [r12, #184]
	ldr	lr, [r1]
	str	r12, [lr, #8]
	ldr	r3, [r3]
	ldr	r3, [r3, #4]
	ldr	r12, [r1]
	str	r3, [r12, #12]
	ldr	r2, [r2]
	ldr	r2, [r2, #4]
	ldr	r1, [r1]
	str	r2, [r1, #16]
	str	r0, [sp, #48]
.LBB36_23:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #48]
	ldr	r1, [r11, #-20]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB36_26
@ BB#24:                                @   in Loop: Header=BB36_23 Depth=1
	movw	r0, #2
	ldr	r1, [sp, #48]
	movw	r2, :lower16:channelSIPH
	movt	r2, :upper16:channelSIPH
	ldr	r2, [r2, r1, lsl #2]
	ldr	r2, [r2, #4]
	movw	r3, :lower16:frameData
	movt	r3, :upper16:frameData
	ldr	r3, [r3]
	add	r3, r3, #20
	add	r1, r3, r1, lsl #2
	str	r2, [r1]
	str	r0, [sp, #12]           @ 4-byte Spill
@ BB#25:                                @   in Loop: Header=BB36_23 Depth=1
	ldr	r0, [sp, #48]
	add	r0, r0, #1
	str	r0, [sp, #48]
	b	.LBB36_23
.LBB36_26:
	movw	r0, #0
	str	r0, [r11, #-44]
.LBB36_27:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB36_29 Depth 2
	ldr	r0, [r11, #-44]
	ldr	r1, [r11, #-20]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB36_34
@ BB#28:                                @   in Loop: Header=BB36_27 Depth=1
	movw	r0, #0
	str	r0, [sp, #48]
.LBB36_29:                              @   Parent Loop BB36_27 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #48]
	ldr	r1, [r11, #-20]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB36_32
@ BB#30:                                @   in Loop: Header=BB36_29 Depth=2
	movw	r0, #2
	ldr	r1, [r11, #-44]
	movw	r2, :lower16:spectrumSIPH
	movt	r2, :upper16:spectrumSIPH
	add	r2, r2, r1, lsl #3
	ldr	r3, [sp, #48]
	ldr	r2, [r2, r3, lsl #2]
	ldr	r2, [r2, #4]
	movw	r12, :lower16:frameData
	movt	r12, :upper16:frameData
	ldr	lr, [r12]
	add	r1, lr, r1, lsl #3
	add	r1, r1, r3, lsl #2
	str	r2, [r1, #28]
	ldr	r1, [r11, #-44]
	movw	r2, :lower16:scaleFactorsPH
	movt	r2, :upper16:scaleFactorsPH
	add	r2, r2, r1, lsl #3
	ldr	r3, [sp, #48]
	ldr	r2, [r2, r3, lsl #2]
	ldr	r2, [r2, #4]
	ldr	lr, [r12]
	add	r1, lr, r1, lsl #3
	add	r1, r1, r3, lsl #2
	str	r2, [r1, #44]
	ldr	r1, [r11, #-44]
	movw	r2, :lower16:codedDataPH
	movt	r2, :upper16:codedDataPH
	add	r2, r2, r1, lsl #3
	ldr	r3, [sp, #48]
	ldr	r2, [r2, r3, lsl #2]
	ldr	r2, [r2, #4]
	ldr	lr, [r12]
	add	r1, lr, r1, lsl #3
	add	r1, r1, r3, lsl #2
	str	r2, [r1, #60]
	ldr	r1, [r11, #-44]
	movw	r2, :lower16:userSpectrumPH
	movt	r2, :upper16:userSpectrumPH
	add	r2, r2, r1, lsl #3
	ldr	r3, [sp, #48]
	ldr	r2, [r2, r3, lsl #2]
	ldr	r2, [r2, #4]
	ldr	r12, [r12]
	add	r1, r12, r1, lsl #3
	add	r1, r1, #76
	add	r1, r1, r3, lsl #2
	str	r2, [r1]
	str	r0, [sp, #8]            @ 4-byte Spill
@ BB#31:                                @   in Loop: Header=BB36_29 Depth=2
	ldr	r0, [sp, #48]
	add	r0, r0, #1
	str	r0, [sp, #48]
	b	.LBB36_29
.LBB36_32:                              @   in Loop: Header=BB36_27 Depth=1
	b	.LBB36_33
.LBB36_33:                              @   in Loop: Header=BB36_27 Depth=1
	ldr	r0, [r11, #-44]
	add	r0, r0, #1
	str	r0, [r11, #-44]
	b	.LBB36_27
.LBB36_34:
	movw	r0, :lower16:frameResults
	movt	r0, :upper16:frameResults
	movw	r1, :lower16:frameData
	movt	r1, :upper16:frameData
	movw	r2, :lower16:userFrameDataPH
	movt	r2, :upper16:userFrameDataPH
	ldr	r2, [r2]
	ldr	r2, [r2, #4]
	ldr	r3, [r1]
	str	r2, [r3, #92]
	ldr	r1, [r1]
	ldr	r0, [r0]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #4]            @ 4-byte Reload
	bl	BF_BitstreamFrame
	movw	r0, :lower16:frameResults
	movt	r0, :upper16:frameResults
	ldr	r0, [r0]
	ldr	r0, [r0, #8]
	ldr	r1, [r11, #-32]
	str	r0, [r1]
	sub	sp, r11, #16
	pop	{r4, r5, r6, r10, r11, pc}
.Lfunc_end36:
	.size	III_format_bitstream, .Lfunc_end36-III_format_bitstream
	.cantunwind
	.fnend

	.p2align	2
	.type	encodeSideInfo,%function
	.code	32                      @ @encodeSideInfo
encodeSideInfo:
	.fnstart
@ BB#0:
	push	{r4, r5, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #112
	movw	r2, #4095
	movw	r3, #12
	movw	r12, :lower16:headerPH
	movt	r12, :upper16:headerPH
	movw	lr, #0
	movw	r4, #65535
	movw	r5, :lower16:crc
	movt	r5, :upper16:crc
	str	r0, [r11, #-12]
	str	r1, [r11, #-16]
	str	r4, [r5]
	ldr	r0, [r12]
	ldr	r0, [r0, #4]
	str	lr, [r0]
	ldr	r0, [r12]
	mov	r1, r2
	mov	r2, r3
	bl	BF_addEntry
	movw	r2, #1
	movw	r1, :lower16:headerPH
	movt	r1, :upper16:headerPH
	str	r0, [r1]
	ldr	r0, [r1]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #172]
	bl	BF_addEntry
	movw	r1, #1
	movw	r2, #2
	movw	r3, :lower16:headerPH
	movt	r3, :upper16:headerPH
	str	r0, [r3]
	ldr	r0, [r3]
	bl	BF_addEntry
	movw	r2, #1
	mvn	r1, #0
	movw	r3, :lower16:headerPH
	movt	r3, :upper16:headerPH
	str	r0, [r3]
	ldr	r0, [r3]
	ldr	r3, [r11, #-12]
	ldr	r3, [r3, #56]
	cmp	r3, #0
	movw	r3, #0
	movne	r3, #1
	eor	r1, r3, r1
	and	r1, r1, #1
	bl	BF_addEntry
	movw	r2, #4
	movw	r1, :lower16:headerPH
	movt	r1, :upper16:headerPH
	str	r0, [r1]
	ldr	r0, [r1]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #200]
	bl	CRC_BF_addEntry
	movw	r2, #2
	movw	r1, :lower16:headerPH
	movt	r1, :upper16:headerPH
	str	r0, [r1]
	ldr	r0, [r1]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #204]
	bl	CRC_BF_addEntry
	movw	r2, #1
	movw	r1, :lower16:headerPH
	movt	r1, :upper16:headerPH
	str	r0, [r1]
	ldr	r0, [r1]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #176]
	bl	CRC_BF_addEntry
	movw	r2, #1
	movw	r1, :lower16:headerPH
	movt	r1, :upper16:headerPH
	str	r0, [r1]
	ldr	r0, [r1]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #64]
	bl	CRC_BF_addEntry
	movw	r2, #2
	movw	r1, :lower16:headerPH
	movt	r1, :upper16:headerPH
	str	r0, [r1]
	ldr	r0, [r1]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #32]
	bl	CRC_BF_addEntry
	movw	r2, #2
	movw	r1, :lower16:headerPH
	movt	r1, :upper16:headerPH
	str	r0, [r1]
	ldr	r0, [r1]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #208]
	bl	CRC_BF_addEntry
	movw	r2, #1
	movw	r1, :lower16:headerPH
	movt	r1, :upper16:headerPH
	str	r0, [r1]
	ldr	r0, [r1]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #48]
	bl	CRC_BF_addEntry
	movw	r2, #1
	movw	r1, :lower16:headerPH
	movt	r1, :upper16:headerPH
	str	r0, [r1]
	ldr	r0, [r1]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #52]
	bl	CRC_BF_addEntry
	movw	r2, #2
	movw	r1, :lower16:headerPH
	movt	r1, :upper16:headerPH
	str	r0, [r1]
	ldr	r0, [r1]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #152]
	bl	CRC_BF_addEntry
	movw	r1, #0
	movw	r2, :lower16:frameSIPH
	movt	r2, :upper16:frameSIPH
	movw	r3, #32
	movw	r12, :lower16:headerPH
	movt	r12, :upper16:headerPH
	str	r0, [r12]
	str	r3, [r11, #-40]
	ldr	r0, [r2]
	ldr	r0, [r0, #4]
	str	r1, [r0]
	str	r1, [r11, #-24]
.LBB37_1:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-24]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB37_4
@ BB#2:                                 @   in Loop: Header=BB37_1 Depth=1
	movw	r0, #0
	movw	r1, :lower16:channelSIPH
	movt	r1, :upper16:channelSIPH
	movw	r2, #2
	ldr	r3, [r11, #-24]
	movw	r12, :lower16:channelSIPH
	movt	r12, :upper16:channelSIPH
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	ldr	r3, [r3, #4]
	str	r0, [r3]
	str	r2, [sp, #56]           @ 4-byte Spill
	str	r1, [sp, #52]           @ 4-byte Spill
@ BB#3:                                 @   in Loop: Header=BB37_1 Depth=1
	ldr	r0, [r11, #-24]
	add	r0, r0, #1
	str	r0, [r11, #-24]
	b	.LBB37_1
.LBB37_4:
	movw	r0, #0
	str	r0, [r11, #-20]
.LBB37_5:                               @ =>This Loop Header: Depth=1
                                        @     Child Loop BB37_7 Depth 2
	ldr	r0, [r11, #-20]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB37_12
@ BB#6:                                 @   in Loop: Header=BB37_5 Depth=1
	movw	r0, #0
	str	r0, [r11, #-24]
.LBB37_7:                               @   Parent Loop BB37_5 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-24]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB37_10
@ BB#8:                                 @   in Loop: Header=BB37_7 Depth=2
	movw	r0, #0
	movw	r1, #2
	ldr	r2, [r11, #-20]
	movw	r3, :lower16:spectrumSIPH
	movt	r3, :upper16:spectrumSIPH
	add	r2, r3, r2, lsl #3
	ldr	r3, [r11, #-24]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2]
	ldr	r2, [r2, #4]
	str	r0, [r2]
	str	r1, [sp, #48]           @ 4-byte Spill
@ BB#9:                                 @   in Loop: Header=BB37_7 Depth=2
	ldr	r0, [r11, #-24]
	add	r0, r0, #1
	str	r0, [r11, #-24]
	b	.LBB37_7
.LBB37_10:                              @   in Loop: Header=BB37_5 Depth=1
	b	.LBB37_11
.LBB37_11:                              @   in Loop: Header=BB37_5 Depth=1
	ldr	r0, [r11, #-20]
	add	r0, r0, #1
	str	r0, [r11, #-20]
	b	.LBB37_5
.LBB37_12:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #172]
	cmp	r0, #1
	bne	.LBB37_53
@ BB#13:
	movw	r2, #9
	movw	r0, :lower16:frameSIPH
	movt	r0, :upper16:frameSIPH
	ldr	r0, [r0]
	ldr	r1, [r11, #-16]
	ldr	r1, [r1]
	bl	CRC_BF_addEntry
	movw	r1, :lower16:frameSIPH
	movt	r1, :upper16:frameSIPH
	str	r0, [r1]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #184]
	cmp	r0, #2
	bne	.LBB37_15
@ BB#14:
	movw	r2, #3
	movw	r0, :lower16:frameSIPH
	movt	r0, :upper16:frameSIPH
	ldr	r0, [r0]
	ldr	r1, [r11, #-16]
	ldr	r1, [r1, #4]
	bl	CRC_BF_addEntry
	movw	r1, :lower16:frameSIPH
	movt	r1, :upper16:frameSIPH
	str	r0, [r1]
	b	.LBB37_16
.LBB37_15:
	movw	r2, #5
	movw	r0, :lower16:frameSIPH
	movt	r0, :upper16:frameSIPH
	ldr	r0, [r0]
	ldr	r1, [r11, #-16]
	ldr	r1, [r1, #4]
	bl	CRC_BF_addEntry
	movw	r1, :lower16:frameSIPH
	movt	r1, :upper16:frameSIPH
	str	r0, [r1]
.LBB37_16:
	movw	r0, #0
	str	r0, [r11, #-24]
.LBB37_17:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB37_19 Depth 2
	ldr	r0, [r11, #-24]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB37_24
@ BB#18:                                @   in Loop: Header=BB37_17 Depth=1
	movw	r0, #0
	str	r0, [r11, #-28]
.LBB37_19:                              @   Parent Loop BB37_17 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-28]
	cmp	r0, #4
	bge	.LBB37_22
@ BB#20:                                @   in Loop: Header=BB37_19 Depth=2
	movw	r2, #1
	movw	r0, #2
	ldr	r1, [r11, #-24]
	movw	r3, :lower16:channelSIPH
	movt	r3, :upper16:channelSIPH
	add	r12, r3, r1, lsl #2
	str	r12, [r11, #-44]
	ldr	r1, [r3, r1, lsl #2]
	ldr	r3, [r11, #-16]
	ldr	r12, [r11, #-24]
	add	r3, r3, r12, lsl #4
	add	r3, r3, #12
	ldr	r12, [r11, #-28]
	add	r3, r3, r12, lsl #2
	ldr	r3, [r3]
	str	r0, [sp, #44]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r3
	bl	CRC_BF_addEntry
	ldr	r1, [r11, #-44]
	str	r0, [r1]
@ BB#21:                                @   in Loop: Header=BB37_19 Depth=2
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB37_19
.LBB37_22:                              @   in Loop: Header=BB37_17 Depth=1
	b	.LBB37_23
.LBB37_23:                              @   in Loop: Header=BB37_17 Depth=1
	ldr	r0, [r11, #-24]
	add	r0, r0, #1
	str	r0, [r11, #-24]
	b	.LBB37_17
.LBB37_24:
	movw	r0, #0
	str	r0, [r11, #-20]
.LBB37_25:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB37_27 Depth 2
                                        @       Child Loop BB37_30 Depth 3
                                        @       Child Loop BB37_34 Depth 3
                                        @       Child Loop BB37_41 Depth 3
	ldr	r0, [r11, #-20]
	cmp	r0, #2
	bge	.LBB37_49
@ BB#26:                                @   in Loop: Header=BB37_25 Depth=1
	movw	r0, #0
	str	r0, [r11, #-24]
.LBB37_27:                              @   Parent Loop BB37_25 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB37_30 Depth 3
                                        @       Child Loop BB37_34 Depth 3
                                        @       Child Loop BB37_41 Depth 3
	ldr	r0, [r11, #-24]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB37_47
@ BB#28:                                @   in Loop: Header=BB37_27 Depth=2
	movw	r2, #12
	movw	r0, #112
	movw	r1, #224
	movw	r3, #2
	ldr	r12, [r11, #-20]
	movw	lr, :lower16:spectrumSIPH
	movt	lr, :upper16:spectrumSIPH
	add	r12, lr, r12, lsl #3
	ldr	lr, [r11, #-24]
	add	r12, r12, lr, lsl #2
	str	r12, [r11, #-48]
	ldr	r12, [r11, #-16]
	add	r12, r12, #44
	ldr	lr, [r11, #-20]
	mul	r1, lr, r1
	add	r1, r12, r1
	ldr	r12, [r11, #-24]
	mul	r0, r12, r0
	add	r0, r1, r0
	str	r0, [r11, #-52]
	ldr	r0, [r11, #-48]
	ldr	r0, [r0]
	ldr	r1, [r11, #-52]
	ldr	r1, [r1]
	str	r3, [sp, #40]           @ 4-byte Spill
	bl	CRC_BF_addEntry
	movw	r2, #9
	ldr	r1, [r11, #-48]
	str	r0, [r1]
	ldr	r0, [r11, #-48]
	ldr	r0, [r0]
	ldr	r1, [r11, #-52]
	ldr	r1, [r1, #4]
	bl	CRC_BF_addEntry
	movw	r2, #8
	ldr	r1, [r11, #-48]
	str	r0, [r1]
	ldr	r0, [r11, #-48]
	ldr	r0, [r0]
	ldr	r1, [r11, #-52]
	ldr	r1, [r1, #12]
	bl	CRC_BF_addEntry
	movw	r2, #4
	ldr	r1, [r11, #-48]
	str	r0, [r1]
	ldr	r0, [r11, #-48]
	ldr	r0, [r0]
	ldr	r1, [r11, #-52]
	ldr	r1, [r1, #16]
	bl	CRC_BF_addEntry
	movw	r2, #1
	ldr	r1, [r11, #-48]
	str	r0, [r1]
	ldr	r0, [r11, #-48]
	ldr	r0, [r0]
	ldr	r1, [r11, #-52]
	ldr	r1, [r1, #20]
	bl	CRC_BF_addEntry
	ldr	r1, [r11, #-48]
	str	r0, [r1]
	ldr	r0, [r11, #-52]
	ldr	r0, [r0, #20]
	cmp	r0, #0
	beq	.LBB37_38
@ BB#29:                                @   in Loop: Header=BB37_27 Depth=2
	movw	r2, #2
	ldr	r0, [r11, #-48]
	ldr	r0, [r0]
	ldr	r1, [r11, #-52]
	ldr	r1, [r1, #24]
	bl	CRC_BF_addEntry
	movw	r2, #1
	ldr	r1, [r11, #-48]
	str	r0, [r1]
	ldr	r0, [r11, #-48]
	ldr	r0, [r0]
	ldr	r1, [r11, #-52]
	ldr	r1, [r1, #28]
	bl	CRC_BF_addEntry
	movw	r1, #0
	ldr	r2, [r11, #-48]
	str	r0, [r2]
	str	r1, [r11, #-32]
.LBB37_30:                              @   Parent Loop BB37_25 Depth=1
                                        @     Parent Loop BB37_27 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-32]
	cmp	r0, #2
	bge	.LBB37_33
@ BB#31:                                @   in Loop: Header=BB37_30 Depth=3
	movw	r2, #5
	movw	r0, #2
	ldr	r1, [r11, #-48]
	ldr	r1, [r1]
	ldr	r3, [r11, #-52]
	add	r3, r3, #32
	ldr	r12, [r11, #-32]
	add	r3, r3, r12, lsl #2
	ldr	r3, [r3]
	str	r0, [sp, #36]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r3
	bl	CRC_BF_addEntry
	ldr	r1, [r11, #-48]
	str	r0, [r1]
@ BB#32:                                @   in Loop: Header=BB37_30 Depth=3
	ldr	r0, [r11, #-32]
	add	r0, r0, #1
	str	r0, [r11, #-32]
	b	.LBB37_30
.LBB37_33:                              @   in Loop: Header=BB37_27 Depth=2
	movw	r0, #0
	str	r0, [r11, #-36]
.LBB37_34:                              @   Parent Loop BB37_25 Depth=1
                                        @     Parent Loop BB37_27 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-36]
	cmp	r0, #3
	bge	.LBB37_37
@ BB#35:                                @   in Loop: Header=BB37_34 Depth=3
	movw	r2, #3
	movw	r0, #2
	ldr	r1, [r11, #-48]
	ldr	r1, [r1]
	ldr	r3, [r11, #-52]
	add	r3, r3, #44
	ldr	r12, [r11, #-36]
	add	r3, r3, r12, lsl #2
	ldr	r3, [r3]
	str	r0, [sp, #32]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r3
	bl	CRC_BF_addEntry
	ldr	r1, [r11, #-48]
	str	r0, [r1]
@ BB#36:                                @   in Loop: Header=BB37_34 Depth=3
	ldr	r0, [r11, #-36]
	add	r0, r0, #1
	str	r0, [r11, #-36]
	b	.LBB37_34
.LBB37_37:                              @   in Loop: Header=BB37_27 Depth=2
	b	.LBB37_45
.LBB37_38:                              @   in Loop: Header=BB37_27 Depth=2
	movw	r0, #1
	ldr	r1, [r11, #-52]
	ldr	r1, [r1, #24]
	cmp	r1, #0
	str	r0, [sp, #28]           @ 4-byte Spill
	beq	.LBB37_40
@ BB#39:                                @   in Loop: Header=BB37_27 Depth=2
	movw	r0, :lower16:.L.str.15.171
	movt	r0, :upper16:.L.str.15.171
	movw	r1, :lower16:.L.str.1.157
	movt	r1, :upper16:.L.str.1.157
	movw	r2, #380
	movw	r3, :lower16:.L__func__.encodeSideInfo
	movt	r3, :upper16:.L__func__.encodeSideInfo
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #28]           @ 4-byte Spill
.LBB37_40:                              @   in Loop: Header=BB37_27 Depth=2
	ldr	r0, [sp, #28]           @ 4-byte Reload
	movw	r1, #0
	str	r1, [r11, #-32]
	str	r0, [sp, #24]           @ 4-byte Spill
.LBB37_41:                              @   Parent Loop BB37_25 Depth=1
                                        @     Parent Loop BB37_27 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-32]
	cmp	r0, #3
	bge	.LBB37_44
@ BB#42:                                @   in Loop: Header=BB37_41 Depth=3
	movw	r2, #5
	movw	r0, #2
	ldr	r1, [r11, #-48]
	ldr	r1, [r1]
	ldr	r3, [r11, #-52]
	add	r3, r3, #32
	ldr	r12, [r11, #-32]
	add	r3, r3, r12, lsl #2
	ldr	r3, [r3]
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r3
	bl	CRC_BF_addEntry
	ldr	r1, [r11, #-48]
	str	r0, [r1]
@ BB#43:                                @   in Loop: Header=BB37_41 Depth=3
	ldr	r0, [r11, #-32]
	add	r0, r0, #1
	str	r0, [r11, #-32]
	b	.LBB37_41
.LBB37_44:                              @   in Loop: Header=BB37_27 Depth=2
	movw	r2, #4
	ldr	r0, [r11, #-48]
	ldr	r0, [r0]
	ldr	r1, [r11, #-52]
	ldr	r1, [r1, #56]
	bl	CRC_BF_addEntry
	movw	r2, #3
	ldr	r1, [r11, #-48]
	str	r0, [r1]
	ldr	r0, [r11, #-48]
	ldr	r0, [r0]
	ldr	r1, [r11, #-52]
	ldr	r1, [r1, #60]
	bl	CRC_BF_addEntry
	ldr	r1, [r11, #-48]
	str	r0, [r1]
.LBB37_45:                              @   in Loop: Header=BB37_27 Depth=2
	movw	r2, #1
	ldr	r0, [r11, #-48]
	ldr	r0, [r0]
	ldr	r1, [r11, #-52]
	ldr	r1, [r1, #64]
	bl	CRC_BF_addEntry
	movw	r2, #1
	ldr	r1, [r11, #-48]
	str	r0, [r1]
	ldr	r0, [r11, #-48]
	ldr	r0, [r0]
	ldr	r1, [r11, #-52]
	ldr	r1, [r1, #68]
	bl	CRC_BF_addEntry
	movw	r2, #1
	ldr	r1, [r11, #-48]
	str	r0, [r1]
	ldr	r0, [r11, #-48]
	ldr	r0, [r0]
	ldr	r1, [r11, #-52]
	ldr	r1, [r1, #72]
	bl	CRC_BF_addEntry
	ldr	r1, [r11, #-48]
	str	r0, [r1]
@ BB#46:                                @   in Loop: Header=BB37_27 Depth=2
	ldr	r0, [r11, #-24]
	add	r0, r0, #1
	str	r0, [r11, #-24]
	b	.LBB37_27
.LBB37_47:                              @   in Loop: Header=BB37_25 Depth=1
	b	.LBB37_48
.LBB37_48:                              @   in Loop: Header=BB37_25 Depth=1
	ldr	r0, [r11, #-20]
	add	r0, r0, #1
	str	r0, [r11, #-20]
	b	.LBB37_25
.LBB37_49:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #184]
	cmp	r0, #2
	bne	.LBB37_51
@ BB#50:
	ldr	r0, [r11, #-40]
	add	r0, r0, #256
	str	r0, [r11, #-40]
	b	.LBB37_52
.LBB37_51:
	ldr	r0, [r11, #-40]
	add	r0, r0, #136
	str	r0, [r11, #-40]
.LBB37_52:
	b	.LBB37_79
.LBB37_53:
	movw	r2, #8
	movw	r0, :lower16:frameSIPH
	movt	r0, :upper16:frameSIPH
	ldr	r0, [r0]
	ldr	r1, [r11, #-16]
	ldr	r1, [r1]
	bl	CRC_BF_addEntry
	movw	r1, :lower16:frameSIPH
	movt	r1, :upper16:frameSIPH
	str	r0, [r1]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #184]
	cmp	r0, #2
	bne	.LBB37_55
@ BB#54:
	movw	r2, #2
	movw	r0, :lower16:frameSIPH
	movt	r0, :upper16:frameSIPH
	ldr	r0, [r0]
	ldr	r1, [r11, #-16]
	ldr	r1, [r1, #4]
	bl	CRC_BF_addEntry
	movw	r1, :lower16:frameSIPH
	movt	r1, :upper16:frameSIPH
	str	r0, [r1]
	b	.LBB37_56
.LBB37_55:
	movw	r2, #1
	movw	r0, :lower16:frameSIPH
	movt	r0, :upper16:frameSIPH
	ldr	r0, [r0]
	ldr	r1, [r11, #-16]
	ldr	r1, [r1, #4]
	bl	CRC_BF_addEntry
	movw	r1, :lower16:frameSIPH
	movt	r1, :upper16:frameSIPH
	str	r0, [r1]
.LBB37_56:
	movw	r0, #0
	str	r0, [r11, #-20]
	str	r0, [r11, #-24]
.LBB37_57:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB37_60 Depth 2
                                        @     Child Loop BB37_64 Depth 2
                                        @     Child Loop BB37_69 Depth 2
	ldr	r0, [r11, #-24]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB37_75
@ BB#58:                                @   in Loop: Header=BB37_57 Depth=1
	movw	r2, #12
	movw	r0, #112
	movw	r1, #224
	movw	r3, #2
	ldr	r12, [r11, #-20]
	movw	lr, :lower16:spectrumSIPH
	movt	lr, :upper16:spectrumSIPH
	add	r12, lr, r12, lsl #3
	ldr	lr, [r11, #-24]
	add	r12, r12, lr, lsl #2
	str	r12, [r11, #-56]
	ldr	r12, [r11, #-16]
	add	r12, r12, #44
	ldr	lr, [r11, #-20]
	mul	r1, lr, r1
	add	r1, r12, r1
	ldr	r12, [r11, #-24]
	mul	r0, r12, r0
	add	r0, r1, r0
	str	r0, [sp, #60]
	ldr	r0, [r11, #-56]
	ldr	r0, [r0]
	ldr	r1, [sp, #60]
	ldr	r1, [r1]
	str	r3, [sp, #16]           @ 4-byte Spill
	bl	CRC_BF_addEntry
	movw	r2, #9
	ldr	r1, [r11, #-56]
	str	r0, [r1]
	ldr	r0, [r11, #-56]
	ldr	r0, [r0]
	ldr	r1, [sp, #60]
	ldr	r1, [r1, #4]
	bl	CRC_BF_addEntry
	movw	r2, #8
	ldr	r1, [r11, #-56]
	str	r0, [r1]
	ldr	r0, [r11, #-56]
	ldr	r0, [r0]
	ldr	r1, [sp, #60]
	ldr	r1, [r1, #12]
	bl	CRC_BF_addEntry
	movw	r2, #9
	ldr	r1, [r11, #-56]
	str	r0, [r1]
	ldr	r0, [r11, #-56]
	ldr	r0, [r0]
	ldr	r1, [sp, #60]
	ldr	r1, [r1, #16]
	bl	CRC_BF_addEntry
	movw	r2, #1
	ldr	r1, [r11, #-56]
	str	r0, [r1]
	ldr	r0, [r11, #-56]
	ldr	r0, [r0]
	ldr	r1, [sp, #60]
	ldr	r1, [r1, #20]
	bl	CRC_BF_addEntry
	ldr	r1, [r11, #-56]
	str	r0, [r1]
	ldr	r0, [sp, #60]
	ldr	r0, [r0, #20]
	cmp	r0, #0
	beq	.LBB37_68
@ BB#59:                                @   in Loop: Header=BB37_57 Depth=1
	movw	r2, #2
	ldr	r0, [r11, #-56]
	ldr	r0, [r0]
	ldr	r1, [sp, #60]
	ldr	r1, [r1, #24]
	bl	CRC_BF_addEntry
	movw	r2, #1
	ldr	r1, [r11, #-56]
	str	r0, [r1]
	ldr	r0, [r11, #-56]
	ldr	r0, [r0]
	ldr	r1, [sp, #60]
	ldr	r1, [r1, #28]
	bl	CRC_BF_addEntry
	movw	r1, #0
	ldr	r2, [r11, #-56]
	str	r0, [r2]
	str	r1, [r11, #-32]
.LBB37_60:                              @   Parent Loop BB37_57 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-32]
	cmp	r0, #2
	bge	.LBB37_63
@ BB#61:                                @   in Loop: Header=BB37_60 Depth=2
	movw	r2, #5
	movw	r0, #2
	ldr	r1, [r11, #-56]
	ldr	r1, [r1]
	ldr	r3, [sp, #60]
	add	r3, r3, #32
	ldr	r12, [r11, #-32]
	add	r3, r3, r12, lsl #2
	ldr	r3, [r3]
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r3
	bl	CRC_BF_addEntry
	ldr	r1, [r11, #-56]
	str	r0, [r1]
@ BB#62:                                @   in Loop: Header=BB37_60 Depth=2
	ldr	r0, [r11, #-32]
	add	r0, r0, #1
	str	r0, [r11, #-32]
	b	.LBB37_60
.LBB37_63:                              @   in Loop: Header=BB37_57 Depth=1
	movw	r0, #0
	str	r0, [r11, #-36]
.LBB37_64:                              @   Parent Loop BB37_57 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-36]
	cmp	r0, #3
	bge	.LBB37_67
@ BB#65:                                @   in Loop: Header=BB37_64 Depth=2
	movw	r2, #3
	movw	r0, #2
	ldr	r1, [r11, #-56]
	ldr	r1, [r1]
	ldr	r3, [sp, #60]
	add	r3, r3, #44
	ldr	r12, [r11, #-36]
	add	r3, r3, r12, lsl #2
	ldr	r3, [r3]
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r1
	mov	r1, r3
	bl	CRC_BF_addEntry
	ldr	r1, [r11, #-56]
	str	r0, [r1]
@ BB#66:                                @   in Loop: Header=BB37_64 Depth=2
	ldr	r0, [r11, #-36]
	add	r0, r0, #1
	str	r0, [r11, #-36]
	b	.LBB37_64
.LBB37_67:                              @   in Loop: Header=BB37_57 Depth=1
	b	.LBB37_73
.LBB37_68:                              @   in Loop: Header=BB37_57 Depth=1
	movw	r0, #0
	str	r0, [r11, #-32]
.LBB37_69:                              @   Parent Loop BB37_57 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-32]
	cmp	r0, #3
	bge	.LBB37_72
@ BB#70:                                @   in Loop: Header=BB37_69 Depth=2
	movw	r2, #5
	movw	r0, #2
	ldr	r1, [r11, #-56]
	ldr	r1, [r1]
	ldr	r3, [sp, #60]
	add	r3, r3, #32
	ldr	r12, [r11, #-32]
	add	r3, r3, r12, lsl #2
	ldr	r3, [r3]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	mov	r1, r3
	bl	CRC_BF_addEntry
	ldr	r1, [r11, #-56]
	str	r0, [r1]
@ BB#71:                                @   in Loop: Header=BB37_69 Depth=2
	ldr	r0, [r11, #-32]
	add	r0, r0, #1
	str	r0, [r11, #-32]
	b	.LBB37_69
.LBB37_72:                              @   in Loop: Header=BB37_57 Depth=1
	movw	r2, #4
	ldr	r0, [r11, #-56]
	ldr	r0, [r0]
	ldr	r1, [sp, #60]
	ldr	r1, [r1, #56]
	bl	CRC_BF_addEntry
	movw	r2, #3
	ldr	r1, [r11, #-56]
	str	r0, [r1]
	ldr	r0, [r11, #-56]
	ldr	r0, [r0]
	ldr	r1, [sp, #60]
	ldr	r1, [r1, #60]
	bl	CRC_BF_addEntry
	ldr	r1, [r11, #-56]
	str	r0, [r1]
.LBB37_73:                              @   in Loop: Header=BB37_57 Depth=1
	movw	r2, #1
	ldr	r0, [r11, #-56]
	ldr	r0, [r0]
	ldr	r1, [sp, #60]
	ldr	r1, [r1, #68]
	bl	CRC_BF_addEntry
	movw	r2, #1
	ldr	r1, [r11, #-56]
	str	r0, [r1]
	ldr	r0, [r11, #-56]
	ldr	r0, [r0]
	ldr	r1, [sp, #60]
	ldr	r1, [r1, #72]
	bl	CRC_BF_addEntry
	ldr	r1, [r11, #-56]
	str	r0, [r1]
@ BB#74:                                @   in Loop: Header=BB37_57 Depth=1
	ldr	r0, [r11, #-24]
	add	r0, r0, #1
	str	r0, [r11, #-24]
	b	.LBB37_57
.LBB37_75:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #184]
	cmp	r0, #2
	bne	.LBB37_77
@ BB#76:
	ldr	r0, [r11, #-40]
	add	r0, r0, #136
	str	r0, [r11, #-40]
	b	.LBB37_78
.LBB37_77:
	ldr	r0, [r11, #-40]
	add	r0, r0, #72
	str	r0, [r11, #-40]
.LBB37_78:
	b	.LBB37_79
.LBB37_79:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #56]
	cmp	r0, #0
	beq	.LBB37_81
@ BB#80:
	movw	r2, #16
	movw	r0, :lower16:crc
	movt	r0, :upper16:crc
	movw	r1, :lower16:headerPH
	movt	r1, :upper16:headerPH
	ldr	r1, [r1]
	ldr	r0, [r0]
	str	r0, [sp]                @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp]                @ 4-byte Reload
	bl	BF_addEntry
	movw	r1, :lower16:headerPH
	movt	r1, :upper16:headerPH
	str	r0, [r1]
	ldr	r0, [r11, #-40]
	add	r0, r0, #16
	str	r0, [r11, #-40]
.LBB37_81:
	ldr	r0, [r11, #-40]
	sub	sp, r11, #8
	pop	{r4, r5, r11, pc}
.Lfunc_end37:
	.size	encodeSideInfo, .Lfunc_end37-encodeSideInfo
	.cantunwind
	.fnend

	.p2align	2
	.type	encodeMainData,%function
	.code	32                      @ @encodeMainData
encodeMainData:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r10, r11, lr}
	add	r11, sp, #16
	sub	sp, sp, #208
	movw	r12, #0
	str	r0, [r11, #-20]
	str	r1, [r11, #-24]
	str	r2, [r11, #-28]
	str	r3, [r11, #-32]
	str	r12, [r11, #-40]
.LBB38_1:                               @ =>This Loop Header: Depth=1
                                        @     Child Loop BB38_3 Depth 2
	ldr	r0, [r11, #-40]
	ldr	r1, [r11, #-20]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB38_8
@ BB#2:                                 @   in Loop: Header=BB38_1 Depth=1
	movw	r0, #0
	str	r0, [r11, #-44]
.LBB38_3:                               @   Parent Loop BB38_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-44]
	ldr	r1, [r11, #-20]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB38_6
@ BB#4:                                 @   in Loop: Header=BB38_3 Depth=2
	movw	r0, #0
	movw	r1, #2
	ldr	r2, [r11, #-40]
	movw	r3, :lower16:scaleFactorsPH
	movt	r3, :upper16:scaleFactorsPH
	add	r2, r3, r2, lsl #3
	ldr	r3, [r11, #-44]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2]
	ldr	r2, [r2, #4]
	str	r0, [r2]
	str	r1, [r11, #-108]        @ 4-byte Spill
@ BB#5:                                 @   in Loop: Header=BB38_3 Depth=2
	ldr	r0, [r11, #-44]
	add	r0, r0, #1
	str	r0, [r11, #-44]
	b	.LBB38_3
.LBB38_6:                               @   in Loop: Header=BB38_1 Depth=1
	b	.LBB38_7
.LBB38_7:                               @   in Loop: Header=BB38_1 Depth=1
	ldr	r0, [r11, #-40]
	add	r0, r0, #1
	str	r0, [r11, #-40]
	b	.LBB38_1
.LBB38_8:
	movw	r0, #0
	str	r0, [r11, #-40]
.LBB38_9:                               @ =>This Loop Header: Depth=1
                                        @     Child Loop BB38_11 Depth 2
	ldr	r0, [r11, #-40]
	ldr	r1, [r11, #-20]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB38_16
@ BB#10:                                @   in Loop: Header=BB38_9 Depth=1
	movw	r0, #0
	str	r0, [r11, #-44]
.LBB38_11:                              @   Parent Loop BB38_9 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-44]
	ldr	r1, [r11, #-20]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB38_14
@ BB#12:                                @   in Loop: Header=BB38_11 Depth=2
	movw	r0, #0
	movw	r1, #2
	ldr	r2, [r11, #-40]
	movw	r3, :lower16:codedDataPH
	movt	r3, :upper16:codedDataPH
	add	r2, r3, r2, lsl #3
	ldr	r3, [r11, #-44]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2]
	ldr	r2, [r2, #4]
	str	r0, [r2]
	str	r1, [sp, #112]          @ 4-byte Spill
@ BB#13:                                @   in Loop: Header=BB38_11 Depth=2
	ldr	r0, [r11, #-44]
	add	r0, r0, #1
	str	r0, [r11, #-44]
	b	.LBB38_11
.LBB38_14:                              @   in Loop: Header=BB38_9 Depth=1
	b	.LBB38_15
.LBB38_15:                              @   in Loop: Header=BB38_9 Depth=1
	ldr	r0, [r11, #-40]
	add	r0, r0, #1
	str	r0, [r11, #-40]
	b	.LBB38_9
.LBB38_16:
	ldr	r0, [r11, #-20]
	ldr	r0, [r0, #172]
	cmp	r0, #1
	bne	.LBB38_73
@ BB#17:
	movw	r0, #0
	str	r0, [r11, #-40]
.LBB38_18:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB38_20 Depth 2
                                        @       Child Loop BB38_23 Depth 3
                                        @         Child Loop BB38_25 Depth 4
                                        @       Child Loop BB38_31 Depth 3
                                        @         Child Loop BB38_33 Depth 4
                                        @       Child Loop BB38_42 Depth 3
                                        @       Child Loop BB38_49 Depth 3
                                        @       Child Loop BB38_56 Depth 3
                                        @       Child Loop BB38_63 Depth 3
	ldr	r0, [r11, #-40]
	cmp	r0, #2
	bge	.LBB38_72
@ BB#19:                                @   in Loop: Header=BB38_18 Depth=1
	movw	r0, #0
	str	r0, [r11, #-44]
.LBB38_20:                              @   Parent Loop BB38_18 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB38_23 Depth 3
                                        @         Child Loop BB38_25 Depth 4
                                        @       Child Loop BB38_31 Depth 3
                                        @         Child Loop BB38_33 Depth 4
                                        @       Child Loop BB38_42 Depth 3
                                        @       Child Loop BB38_49 Depth 3
                                        @       Child Loop BB38_56 Depth 3
                                        @       Child Loop BB38_63 Depth 3
	ldr	r0, [r11, #-44]
	ldr	r1, [r11, #-20]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB38_70
@ BB#21:                                @   in Loop: Header=BB38_20 Depth=2
	movw	r0, #2304
	movw	r1, #4608
	movw	r2, :lower16:slen2_tab
	movt	r2, :upper16:slen2_tab
	movw	r3, #2
	ldr	r12, [r11, #-40]
	movw	lr, :lower16:scaleFactorsPH
	movt	lr, :upper16:scaleFactorsPH
	add	r12, lr, r12, lsl #3
	ldr	lr, [r11, #-44]
	add	r12, r12, lr, lsl #2
	str	r12, [r11, #-56]
	ldr	r12, [r11, #-28]
	ldr	lr, [r11, #-40]
	rsb	lr, lr, lr, lsl #3
	add	r12, r12, lr, lsl #5
	ldr	lr, [r11, #-44]
	rsb	lr, lr, lr, lsl #3
	add	r12, r12, lr, lsl #4
	add	lr, r12, #44
	str	lr, [r11, #-60]
	ldr	r12, [r12, #60]
	movw	lr, :lower16:slen1_tab
	movt	lr, :upper16:slen1_tab
	ldr	r12, [lr, r12, lsl #2]
	str	r12, [r11, #-64]
	ldr	r12, [r11, #-60]
	ldr	r12, [r12, #16]
	movw	lr, :lower16:slen2_tab
	movt	lr, :upper16:slen2_tab
	add	r12, lr, r12, lsl #2
	ldr	r12, [r12]
	str	r12, [r11, #-68]
	ldr	r12, [r11, #-24]
	ldr	lr, [r11, #-40]
	mul	r1, lr, r1
	add	r1, r12, r1
	ldr	r12, [r11, #-44]
	mul	r0, r12, r0
	add	r0, r1, r0
	str	r0, [r11, #-72]
	ldr	r0, [r11, #-60]
	ldr	r0, [r0, #24]
	cmp	r0, #2
	str	r2, [sp, #108]          @ 4-byte Spill
	str	r3, [sp, #104]          @ 4-byte Spill
	bne	.LBB38_39
@ BB#22:                                @   in Loop: Header=BB38_20 Depth=2
	movw	r0, #0
	str	r0, [r11, #-48]
.LBB38_23:                              @   Parent Loop BB38_18 Depth=1
                                        @     Parent Loop BB38_20 Depth=2
                                        @ =>    This Loop Header: Depth=3
                                        @         Child Loop BB38_25 Depth 4
	ldr	r0, [r11, #-48]
	cmp	r0, #6
	bge	.LBB38_30
@ BB#24:                                @   in Loop: Header=BB38_23 Depth=3
	movw	r0, #0
	str	r0, [r11, #-52]
.LBB38_25:                              @   Parent Loop BB38_18 Depth=1
                                        @     Parent Loop BB38_20 Depth=2
                                        @       Parent Loop BB38_23 Depth=3
                                        @ =>      This Inner Loop Header: Depth=4
	ldr	r0, [r11, #-52]
	cmp	r0, #3
	bge	.LBB38_28
@ BB#26:                                @   in Loop: Header=BB38_25 Depth=4
	movw	r0, #2
	ldr	r1, [r11, #-56]
	ldr	r1, [r1]
	ldr	r2, [r11, #-32]
	ldr	r3, [r11, #-40]
	mov	r12, #488
	mla	r2, r3, r12, r2
	ldr	r3, [r11, #-44]
	mov	r12, #244
	mla	r2, r3, r12, r2
	ldr	r3, [r11, #-48]
	add	r3, r3, r3, lsl #1
	add	r2, r2, r3, lsl #2
	add	r2, r2, #88
	ldr	r3, [r11, #-52]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2]
	ldr	r3, [r11, #-64]
	str	r0, [sp, #100]          @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	mov	r2, r3
	bl	BF_addEntry
	ldr	r1, [r11, #-56]
	str	r0, [r1]
@ BB#27:                                @   in Loop: Header=BB38_25 Depth=4
	ldr	r0, [r11, #-52]
	add	r0, r0, #1
	str	r0, [r11, #-52]
	b	.LBB38_25
.LBB38_28:                              @   in Loop: Header=BB38_23 Depth=3
	b	.LBB38_29
.LBB38_29:                              @   in Loop: Header=BB38_23 Depth=3
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB38_23
.LBB38_30:                              @   in Loop: Header=BB38_20 Depth=2
	movw	r0, #6
	str	r0, [r11, #-48]
.LBB38_31:                              @   Parent Loop BB38_18 Depth=1
                                        @     Parent Loop BB38_20 Depth=2
                                        @ =>    This Loop Header: Depth=3
                                        @         Child Loop BB38_33 Depth 4
	ldr	r0, [r11, #-48]
	cmp	r0, #12
	bge	.LBB38_38
@ BB#32:                                @   in Loop: Header=BB38_31 Depth=3
	movw	r0, #0
	str	r0, [r11, #-52]
.LBB38_33:                              @   Parent Loop BB38_18 Depth=1
                                        @     Parent Loop BB38_20 Depth=2
                                        @       Parent Loop BB38_31 Depth=3
                                        @ =>      This Inner Loop Header: Depth=4
	ldr	r0, [r11, #-52]
	cmp	r0, #3
	bge	.LBB38_36
@ BB#34:                                @   in Loop: Header=BB38_33 Depth=4
	movw	r0, #2
	ldr	r1, [r11, #-56]
	ldr	r1, [r1]
	ldr	r2, [r11, #-32]
	ldr	r3, [r11, #-40]
	mov	r12, #488
	mla	r2, r3, r12, r2
	ldr	r3, [r11, #-44]
	mov	r12, #244
	mla	r2, r3, r12, r2
	ldr	r3, [r11, #-48]
	add	r3, r3, r3, lsl #1
	add	r2, r2, r3, lsl #2
	add	r2, r2, #88
	ldr	r3, [r11, #-52]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2]
	ldr	r3, [r11, #-68]
	str	r0, [sp, #96]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	mov	r2, r3
	bl	BF_addEntry
	ldr	r1, [r11, #-56]
	str	r0, [r1]
@ BB#35:                                @   in Loop: Header=BB38_33 Depth=4
	ldr	r0, [r11, #-52]
	add	r0, r0, #1
	str	r0, [r11, #-52]
	b	.LBB38_33
.LBB38_36:                              @   in Loop: Header=BB38_31 Depth=3
	b	.LBB38_37
.LBB38_37:                              @   in Loop: Header=BB38_31 Depth=3
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB38_31
.LBB38_38:                              @   in Loop: Header=BB38_20 Depth=2
	b	.LBB38_68
.LBB38_39:                              @   in Loop: Header=BB38_20 Depth=2
	ldr	r0, [r11, #-40]
	cmp	r0, #0
	beq	.LBB38_41
@ BB#40:                                @   in Loop: Header=BB38_20 Depth=2
	movw	r0, #4
	ldr	r1, [r11, #-28]
	add	r1, r1, #12
	ldr	r2, [r11, #-44]
	add	r1, r1, r2, lsl #4
	ldr	r1, [r1]
	cmp	r1, #0
	str	r0, [sp, #92]           @ 4-byte Spill
	bne	.LBB38_46
.LBB38_41:                              @   in Loop: Header=BB38_20 Depth=2
	movw	r0, #0
	str	r0, [r11, #-48]
.LBB38_42:                              @   Parent Loop BB38_18 Depth=1
                                        @     Parent Loop BB38_20 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-48]
	cmp	r0, #6
	bge	.LBB38_45
@ BB#43:                                @   in Loop: Header=BB38_42 Depth=3
	movw	r0, #2
	ldr	r1, [r11, #-56]
	ldr	r1, [r1]
	ldr	r2, [r11, #-32]
	ldr	r3, [r11, #-40]
	mov	r12, #488
	mla	r2, r3, r12, r2
	ldr	r3, [r11, #-44]
	mov	r12, #244
	mla	r2, r3, r12, r2
	mov	r3, r2
	ldr	r12, [r11, #-48]
	add	r2, r2, r12, lsl #2
	ldr	r2, [r2]
	ldr	r12, [r11, #-64]
	str	r0, [sp, #88]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	mov	r2, r12
	str	r3, [sp, #84]           @ 4-byte Spill
	bl	BF_addEntry
	ldr	r1, [r11, #-56]
	str	r0, [r1]
@ BB#44:                                @   in Loop: Header=BB38_42 Depth=3
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB38_42
.LBB38_45:                              @   in Loop: Header=BB38_20 Depth=2
	b	.LBB38_46
.LBB38_46:                              @   in Loop: Header=BB38_20 Depth=2
	ldr	r0, [r11, #-40]
	cmp	r0, #0
	beq	.LBB38_48
@ BB#47:                                @   in Loop: Header=BB38_20 Depth=2
	movw	r0, #4
	ldr	r1, [r11, #-28]
	add	r1, r1, #12
	ldr	r2, [r11, #-44]
	add	r1, r1, r2, lsl #4
	ldr	r1, [r1, #4]
	cmp	r1, #0
	str	r0, [sp, #80]           @ 4-byte Spill
	bne	.LBB38_53
.LBB38_48:                              @   in Loop: Header=BB38_20 Depth=2
	movw	r0, #6
	str	r0, [r11, #-48]
.LBB38_49:                              @   Parent Loop BB38_18 Depth=1
                                        @     Parent Loop BB38_20 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-48]
	cmp	r0, #11
	bge	.LBB38_52
@ BB#50:                                @   in Loop: Header=BB38_49 Depth=3
	movw	r0, #2
	ldr	r1, [r11, #-56]
	ldr	r1, [r1]
	ldr	r2, [r11, #-32]
	ldr	r3, [r11, #-40]
	mov	r12, #488
	mla	r2, r3, r12, r2
	ldr	r3, [r11, #-44]
	mov	r12, #244
	mla	r2, r3, r12, r2
	mov	r3, r2
	ldr	r12, [r11, #-48]
	add	r2, r2, r12, lsl #2
	ldr	r2, [r2]
	ldr	r12, [r11, #-64]
	str	r0, [sp, #76]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	mov	r2, r12
	str	r3, [sp, #72]           @ 4-byte Spill
	bl	BF_addEntry
	ldr	r1, [r11, #-56]
	str	r0, [r1]
@ BB#51:                                @   in Loop: Header=BB38_49 Depth=3
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB38_49
.LBB38_52:                              @   in Loop: Header=BB38_20 Depth=2
	b	.LBB38_53
.LBB38_53:                              @   in Loop: Header=BB38_20 Depth=2
	ldr	r0, [r11, #-40]
	cmp	r0, #0
	beq	.LBB38_55
@ BB#54:                                @   in Loop: Header=BB38_20 Depth=2
	movw	r0, #4
	ldr	r1, [r11, #-28]
	add	r1, r1, #12
	ldr	r2, [r11, #-44]
	add	r1, r1, r2, lsl #4
	ldr	r1, [r1, #8]
	cmp	r1, #0
	str	r0, [sp, #68]           @ 4-byte Spill
	bne	.LBB38_60
.LBB38_55:                              @   in Loop: Header=BB38_20 Depth=2
	movw	r0, #11
	str	r0, [r11, #-48]
.LBB38_56:                              @   Parent Loop BB38_18 Depth=1
                                        @     Parent Loop BB38_20 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-48]
	cmp	r0, #16
	bge	.LBB38_59
@ BB#57:                                @   in Loop: Header=BB38_56 Depth=3
	movw	r0, #2
	ldr	r1, [r11, #-56]
	ldr	r1, [r1]
	ldr	r2, [r11, #-32]
	ldr	r3, [r11, #-40]
	mov	r12, #488
	mla	r2, r3, r12, r2
	ldr	r3, [r11, #-44]
	mov	r12, #244
	mla	r2, r3, r12, r2
	mov	r3, r2
	ldr	r12, [r11, #-48]
	add	r2, r2, r12, lsl #2
	ldr	r2, [r2]
	ldr	r12, [r11, #-68]
	str	r0, [sp, #64]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	mov	r2, r12
	str	r3, [sp, #60]           @ 4-byte Spill
	bl	BF_addEntry
	ldr	r1, [r11, #-56]
	str	r0, [r1]
@ BB#58:                                @   in Loop: Header=BB38_56 Depth=3
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB38_56
.LBB38_59:                              @   in Loop: Header=BB38_20 Depth=2
	b	.LBB38_60
.LBB38_60:                              @   in Loop: Header=BB38_20 Depth=2
	ldr	r0, [r11, #-40]
	cmp	r0, #0
	beq	.LBB38_62
@ BB#61:                                @   in Loop: Header=BB38_20 Depth=2
	movw	r0, #4
	ldr	r1, [r11, #-28]
	add	r1, r1, #12
	ldr	r2, [r11, #-44]
	add	r1, r1, r2, lsl #4
	ldr	r1, [r1, #12]
	cmp	r1, #0
	str	r0, [sp, #56]           @ 4-byte Spill
	bne	.LBB38_67
.LBB38_62:                              @   in Loop: Header=BB38_20 Depth=2
	movw	r0, #16
	str	r0, [r11, #-48]
.LBB38_63:                              @   Parent Loop BB38_18 Depth=1
                                        @     Parent Loop BB38_20 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-48]
	cmp	r0, #21
	bge	.LBB38_66
@ BB#64:                                @   in Loop: Header=BB38_63 Depth=3
	movw	r0, #2
	ldr	r1, [r11, #-56]
	ldr	r1, [r1]
	ldr	r2, [r11, #-32]
	ldr	r3, [r11, #-40]
	mov	r12, #488
	mla	r2, r3, r12, r2
	ldr	r3, [r11, #-44]
	mov	r12, #244
	mla	r2, r3, r12, r2
	mov	r3, r2
	ldr	r12, [r11, #-48]
	add	r2, r2, r12, lsl #2
	ldr	r2, [r2]
	ldr	r12, [r11, #-68]
	str	r0, [sp, #52]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	mov	r2, r12
	str	r3, [sp, #48]           @ 4-byte Spill
	bl	BF_addEntry
	ldr	r1, [r11, #-56]
	str	r0, [r1]
@ BB#65:                                @   in Loop: Header=BB38_63 Depth=3
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB38_63
.LBB38_66:                              @   in Loop: Header=BB38_20 Depth=2
	b	.LBB38_67
.LBB38_67:                              @   in Loop: Header=BB38_20 Depth=2
	b	.LBB38_68
.LBB38_68:                              @   in Loop: Header=BB38_20 Depth=2
	movw	r0, #2
	ldr	r1, [r11, #-40]
	movw	r2, :lower16:codedDataPH
	movt	r2, :upper16:codedDataPH
	add	r1, r2, r1, lsl #3
	ldr	r2, [r11, #-44]
	add	r1, r1, r2, lsl #2
	ldr	r2, [r11, #-72]
	ldr	r3, [r11, #-60]
	str	r0, [sp, #44]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	mov	r2, r3
	bl	Huffmancodebits
@ BB#69:                                @   in Loop: Header=BB38_20 Depth=2
	ldr	r0, [r11, #-44]
	add	r0, r0, #1
	str	r0, [r11, #-44]
	b	.LBB38_20
.LBB38_70:                              @   in Loop: Header=BB38_18 Depth=1
	b	.LBB38_71
.LBB38_71:                              @   in Loop: Header=BB38_18 Depth=1
	ldr	r0, [r11, #-40]
	add	r0, r0, #1
	str	r0, [r11, #-40]
	b	.LBB38_18
.LBB38_72:
	b	.LBB38_103
.LBB38_73:
	movw	r0, #0
	str	r0, [r11, #-40]
	str	r0, [r11, #-44]
.LBB38_74:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB38_79 Depth 2
                                        @       Child Loop BB38_81 Depth 3
                                        @         Child Loop BB38_83 Depth 4
                                        @     Child Loop BB38_92 Depth 2
                                        @       Child Loop BB38_94 Depth 3
	ldr	r0, [r11, #-44]
	ldr	r1, [r11, #-20]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB38_102
@ BB#75:                                @   in Loop: Header=BB38_74 Depth=1
	movw	r0, #1
	movw	r1, #0
	movw	r2, #2304
	movw	r3, #4608
	movw	r12, #112
	movw	lr, #224
	movw	r4, #2
	ldr	r5, [r11, #-40]
	movw	r6, :lower16:scaleFactorsPH
	movt	r6, :upper16:scaleFactorsPH
	add	r5, r6, r5, lsl #3
	ldr	r6, [r11, #-44]
	add	r5, r5, r6, lsl #2
	str	r5, [r11, #-76]
	ldr	r5, [r11, #-28]
	add	r5, r5, #44
	ldr	r6, [r11, #-40]
	mul	lr, r6, lr
	add	lr, r5, lr
	ldr	r5, [r11, #-44]
	mul	r12, r5, r12
	add	r12, lr, r12
	str	r12, [r11, #-80]
	ldr	r12, [r11, #-24]
	ldr	lr, [r11, #-40]
	mul	r3, lr, r3
	add	r3, r12, r3
	ldr	r12, [r11, #-44]
	mul	r2, r12, r2
	add	r2, r3, r2
	str	r2, [r11, #-84]
	ldr	r2, [r11, #-80]
	ldr	r2, [r2, #92]
	cmp	r2, r1
	str	r4, [sp, #40]           @ 4-byte Spill
	str	r0, [sp, #36]           @ 4-byte Spill
	bne	.LBB38_77
@ BB#76:                                @   in Loop: Header=BB38_74 Depth=1
	movw	r0, :lower16:.L.str.7.159
	movt	r0, :upper16:.L.str.7.159
	movw	r1, :lower16:.L.str.1.157
	movt	r1, :upper16:.L.str.1.157
	movw	r2, #236
	movw	r3, :lower16:.L__func__.encodeMainData
	movt	r3, :upper16:.L__func__.encodeMainData
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #36]           @ 4-byte Spill
.LBB38_77:                              @   in Loop: Header=BB38_74 Depth=1
	ldr	r0, [sp, #36]           @ 4-byte Reload
	ldr	r1, [r11, #-80]
	ldr	r1, [r1, #24]
	cmp	r1, #2
	str	r0, [sp, #32]           @ 4-byte Spill
	bne	.LBB38_91
@ BB#78:                                @   in Loop: Header=BB38_74 Depth=1
	movw	r0, #0
	str	r0, [r11, #-48]
	str	r0, [r11, #-88]
.LBB38_79:                              @   Parent Loop BB38_74 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB38_81 Depth 3
                                        @         Child Loop BB38_83 Depth 4
	ldr	r0, [r11, #-88]
	cmp	r0, #4
	bge	.LBB38_90
@ BB#80:                                @   in Loop: Header=BB38_79 Depth=2
	movw	r0, #0
	movw	r1, #2
	ldr	r2, [r11, #-80]
	ldr	r2, [r2, #92]
	ldr	r3, [r11, #-88]
	ldr	r2, [r2, r3, lsl #2]
	movw	r3, #43691
	movt	r3, #43690
	umull	r2, r3, r2, r3
	lsr	r3, r3, #1
	str	r3, [r11, #-92]
	ldr	r3, [r11, #-80]
	add	r3, r3, #96
	ldr	r12, [r11, #-88]
	add	r3, r3, r12, lsl #2
	ldr	r3, [r3]
	str	r3, [r11, #-96]
	str	r0, [r11, #-36]
	str	r2, [sp, #28]           @ 4-byte Spill
	str	r1, [sp, #24]           @ 4-byte Spill
.LBB38_81:                              @   Parent Loop BB38_74 Depth=1
                                        @     Parent Loop BB38_79 Depth=2
                                        @ =>    This Loop Header: Depth=3
                                        @         Child Loop BB38_83 Depth 4
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-92]
	cmp	r0, r1
	bge	.LBB38_88
@ BB#82:                                @   in Loop: Header=BB38_81 Depth=3
	movw	r0, #0
	str	r0, [r11, #-52]
.LBB38_83:                              @   Parent Loop BB38_74 Depth=1
                                        @     Parent Loop BB38_79 Depth=2
                                        @       Parent Loop BB38_81 Depth=3
                                        @ =>      This Inner Loop Header: Depth=4
	ldr	r0, [r11, #-52]
	cmp	r0, #3
	bge	.LBB38_86
@ BB#84:                                @   in Loop: Header=BB38_83 Depth=4
	movw	r0, #2
	ldr	r1, [r11, #-76]
	ldr	r1, [r1]
	ldr	r2, [r11, #-32]
	ldr	r3, [r11, #-40]
	mov	r12, #488
	mla	r2, r3, r12, r2
	ldr	r3, [r11, #-44]
	mov	r12, #244
	mla	r2, r3, r12, r2
	ldr	r3, [r11, #-48]
	add	r3, r3, r3, lsl #1
	add	r2, r2, r3, lsl #2
	add	r2, r2, #88
	ldr	r3, [r11, #-52]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2]
	ldr	r3, [r11, #-96]
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	mov	r2, r3
	bl	BF_addEntry
	ldr	r1, [r11, #-76]
	str	r0, [r1]
@ BB#85:                                @   in Loop: Header=BB38_83 Depth=4
	ldr	r0, [r11, #-52]
	add	r0, r0, #1
	str	r0, [r11, #-52]
	b	.LBB38_83
.LBB38_86:                              @   in Loop: Header=BB38_81 Depth=3
	b	.LBB38_87
.LBB38_87:                              @   in Loop: Header=BB38_81 Depth=3
	ldr	r0, [r11, #-36]
	add	r0, r0, #1
	str	r0, [r11, #-36]
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB38_81
.LBB38_88:                              @   in Loop: Header=BB38_79 Depth=2
	b	.LBB38_89
.LBB38_89:                              @   in Loop: Header=BB38_79 Depth=2
	ldr	r0, [r11, #-88]
	add	r0, r0, #1
	str	r0, [r11, #-88]
	b	.LBB38_79
.LBB38_90:                              @   in Loop: Header=BB38_74 Depth=1
	b	.LBB38_100
.LBB38_91:                              @   in Loop: Header=BB38_74 Depth=1
	movw	r0, #0
	str	r0, [r11, #-48]
	str	r0, [r11, #-88]
.LBB38_92:                              @   Parent Loop BB38_74 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB38_94 Depth 3
	ldr	r0, [r11, #-88]
	cmp	r0, #4
	bge	.LBB38_99
@ BB#93:                                @   in Loop: Header=BB38_92 Depth=2
	movw	r0, #0
	movw	r1, #2
	ldr	r2, [r11, #-80]
	ldr	r2, [r2, #92]
	ldr	r3, [r11, #-88]
	ldr	r2, [r2, r3, lsl #2]
	str	r2, [r11, #-100]
	ldr	r2, [r11, #-80]
	add	r2, r2, #96
	ldr	r3, [r11, #-88]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2]
	str	r2, [r11, #-104]
	str	r0, [r11, #-36]
	str	r1, [sp, #16]           @ 4-byte Spill
.LBB38_94:                              @   Parent Loop BB38_74 Depth=1
                                        @     Parent Loop BB38_92 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-100]
	cmp	r0, r1
	bge	.LBB38_97
@ BB#95:                                @   in Loop: Header=BB38_94 Depth=3
	movw	r0, #2
	ldr	r1, [r11, #-76]
	ldr	r1, [r1]
	ldr	r2, [r11, #-32]
	ldr	r3, [r11, #-40]
	mov	r12, #488
	mla	r2, r3, r12, r2
	ldr	r3, [r11, #-44]
	mov	r12, #244
	mla	r2, r3, r12, r2
	mov	r3, r2
	ldr	r12, [r11, #-48]
	add	r2, r2, r12, lsl #2
	ldr	r2, [r2]
	ldr	r12, [r11, #-104]
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	mov	r2, r12
	str	r3, [sp, #8]            @ 4-byte Spill
	bl	BF_addEntry
	ldr	r1, [r11, #-76]
	str	r0, [r1]
@ BB#96:                                @   in Loop: Header=BB38_94 Depth=3
	ldr	r0, [r11, #-36]
	add	r0, r0, #1
	str	r0, [r11, #-36]
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB38_94
.LBB38_97:                              @   in Loop: Header=BB38_92 Depth=2
	b	.LBB38_98
.LBB38_98:                              @   in Loop: Header=BB38_92 Depth=2
	ldr	r0, [r11, #-88]
	add	r0, r0, #1
	str	r0, [r11, #-88]
	b	.LBB38_92
.LBB38_99:                              @   in Loop: Header=BB38_74 Depth=1
	b	.LBB38_100
.LBB38_100:                             @   in Loop: Header=BB38_74 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-40]
	movw	r2, :lower16:codedDataPH
	movt	r2, :upper16:codedDataPH
	add	r1, r2, r1, lsl #3
	ldr	r2, [r11, #-44]
	add	r1, r1, r2, lsl #2
	ldr	r2, [r11, #-84]
	ldr	r3, [r11, #-80]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	mov	r2, r3
	bl	Huffmancodebits
@ BB#101:                               @   in Loop: Header=BB38_74 Depth=1
	ldr	r0, [r11, #-44]
	add	r0, r0, #1
	str	r0, [r11, #-44]
	b	.LBB38_74
.LBB38_102:
	b	.LBB38_103
.LBB38_103:
	sub	sp, r11, #16
	pop	{r4, r5, r6, r10, r11, pc}
.Lfunc_end38:
	.size	encodeMainData, .Lfunc_end38-encodeMainData
	.cantunwind
	.fnend

	.p2align	2
	.type	drain_into_ancillary_data,%function
	.code	32                      @ @drain_into_ancillary_data
drain_into_ancillary_data:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #32
	movw	r1, #0
	movw	r2, :lower16:userFrameDataPH
	movt	r2, :upper16:userFrameDataPH
	movw	r3, #32
	str	r0, [r11, #-4]
	ldr	r0, [r11, #-4]
	str	r1, [sp, #12]           @ 4-byte Spill
	mov	r1, r3
	str	r3, [sp, #8]            @ 4-byte Spill
	str	r2, [sp, #4]            @ 4-byte Spill
	bl	__divsi3
	str	r0, [r11, #-8]
	ldr	r0, [r11, #-4]
	ldr	r1, [sp, #8]            @ 4-byte Reload
	bl	__modsi3
	str	r0, [r11, #-12]
	ldr	r0, [sp, #4]            @ 4-byte Reload
	ldr	r1, [r0]
	ldr	r1, [r1, #4]
	ldr	r2, [sp, #12]           @ 4-byte Reload
	str	r2, [r1]
	str	r2, [sp, #16]
.LBB39_1:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #16]
	ldr	r1, [r11, #-8]
	cmp	r0, r1
	bge	.LBB39_4
@ BB#2:                                 @   in Loop: Header=BB39_1 Depth=1
	movw	r1, #0
	movw	r2, #32
	movw	r0, :lower16:userFrameDataPH
	movt	r0, :upper16:userFrameDataPH
	ldr	r0, [r0]
	bl	BF_addEntry
	movw	r1, :lower16:userFrameDataPH
	movt	r1, :upper16:userFrameDataPH
	str	r0, [r1]
@ BB#3:                                 @   in Loop: Header=BB39_1 Depth=1
	ldr	r0, [sp, #16]
	add	r0, r0, #1
	str	r0, [sp, #16]
	b	.LBB39_1
.LBB39_4:
	ldr	r0, [r11, #-12]
	cmp	r0, #0
	beq	.LBB39_6
@ BB#5:
	movw	r1, #0
	movw	r0, :lower16:userFrameDataPH
	movt	r0, :upper16:userFrameDataPH
	ldr	r0, [r0]
	ldr	r2, [r11, #-12]
	bl	BF_addEntry
	movw	r1, :lower16:userFrameDataPH
	movt	r1, :upper16:userFrameDataPH
	str	r0, [r1]
.LBB39_6:
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end39:
	.size	drain_into_ancillary_data, .Lfunc_end39-drain_into_ancillary_data
	.cantunwind
	.fnend

	.p2align	2
	.type	Huffmancodebits,%function
	.code	32                      @ @Huffmancodebits
Huffmancodebits:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r7, r11, lr}
	add	r11, sp, #16
	sub	sp, sp, #280
	movw	r3, #1
	str	r0, [r11, #-20]
	str	r1, [r11, #-24]
	str	r2, [r11, #-28]
	mov	r0, #0
	str	r0, [r11, #-92]
	ldr	r0, [r11, #-28]
	ldr	r0, [r0, #4]
	lsl	r0, r0, #1
	str	r0, [r11, #-44]
	ldr	r0, [r11, #-44]
	cmp	r0, #0
	str	r3, [r11, #-140]        @ 4-byte Spill
	beq	.LBB40_44
@ BB#1:
	ldr	r0, [r11, #-28]
	ldr	r0, [r0, #28]
	cmp	r0, #0
	bne	.LBB40_21
@ BB#2:
	ldr	r0, [r11, #-28]
	ldr	r0, [r0, #24]
	cmp	r0, #2
	bne	.LBB40_21
@ BB#3:
	movw	r0, #0
	movw	r1, #576
	movw	r2, #12
	ldr	r3, [r11, #-24]
	str	r3, [r11, #-116]
	str	r2, [r11, #-32]
	str	r1, [r11, #-36]
	str	r0, [r11, #-96]
.LBB40_4:                               @ =>This Loop Header: Depth=1
                                        @     Child Loop BB40_11 Depth 2
                                        @       Child Loop BB40_13 Depth 3
	ldr	r0, [r11, #-96]
	cmp	r0, #13
	bge	.LBB40_20
@ BB#5:                                 @   in Loop: Header=BB40_4 Depth=1
	movw	r0, :lower16:scalefac_band
	movt	r0, :upper16:scalefac_band
	add	r0, r0, #92
	movw	r1, #2
	mov	r2, #100
	str	r2, [r11, #-120]
	ldr	r2, [r11, #-96]
	movw	r3, :lower16:scalefac_band
	movt	r3, :upper16:scalefac_band
	add	r3, r3, #92
	ldr	r2, [r3, r2, lsl #2]
	str	r2, [r11, #-108]
	ldr	r2, [r11, #-96]
	add	r2, r2, #1
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	str	r2, [r11, #-112]
	ldr	r2, [r11, #-108]
	ldr	r3, [r11, #-32]
	cmp	r2, r3
	str	r0, [r11, #-144]        @ 4-byte Spill
	str	r1, [sp, #148]          @ 4-byte Spill
	bge	.LBB40_7
@ BB#6:                                 @   in Loop: Header=BB40_4 Depth=1
	ldr	r0, [r11, #-28]
	ldr	r0, [r0, #32]
	str	r0, [r11, #-120]
	b	.LBB40_8
.LBB40_7:                               @   in Loop: Header=BB40_4 Depth=1
	ldr	r0, [r11, #-28]
	ldr	r0, [r0, #36]
	str	r0, [r11, #-120]
.LBB40_8:                               @   in Loop: Header=BB40_4 Depth=1
	movw	r0, #1
	ldr	r1, [r11, #-120]
	cmp	r1, #32
	str	r0, [sp, #144]          @ 4-byte Spill
	blo	.LBB40_10
@ BB#9:                                 @   in Loop: Header=BB40_4 Depth=1
	movw	r0, :lower16:.L.str.8.160
	movt	r0, :upper16:.L.str.8.160
	movw	r1, :lower16:.L.str.1.157
	movt	r1, :upper16:.L.str.1.157
	movw	r2, #532
	movw	r3, :lower16:.L__func__.Huffmancodebits
	movt	r3, :upper16:.L__func__.Huffmancodebits
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #144]          @ 4-byte Spill
.LBB40_10:                              @   in Loop: Header=BB40_4 Depth=1
	ldr	r0, [sp, #144]          @ 4-byte Reload
	movw	r1, #0
	str	r1, [r11, #-100]
	str	r0, [sp, #140]          @ 4-byte Spill
.LBB40_11:                              @   Parent Loop BB40_4 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB40_13 Depth 3
	ldr	r0, [r11, #-100]
	cmp	r0, #3
	bge	.LBB40_18
@ BB#12:                                @   in Loop: Header=BB40_11 Depth=2
	ldr	r0, [r11, #-108]
	str	r0, [r11, #-104]
.LBB40_13:                              @   Parent Loop BB40_4 Depth=1
                                        @     Parent Loop BB40_11 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-104]
	ldr	r1, [r11, #-112]
	cmp	r0, r1
	bge	.LBB40_16
@ BB#14:                                @   in Loop: Header=BB40_13 Depth=3
	sub	r3, r11, #84
	sub	r0, r11, #88
	sub	r1, r11, #72
	sub	r2, r11, #76
	movw	r12, #2
	ldr	lr, [r11, #-116]
	ldr	r4, [r11, #-104]
	add	r4, r4, r4, lsl #1
	add	lr, lr, r4, lsl #2
	ldr	r4, [r11, #-100]
	ldr	lr, [lr, r4, lsl #2]
	str	lr, [r11, #-60]
	ldr	lr, [r11, #-116]
	ldr	r4, [r11, #-104]
	add	r4, r4, r4, lsl #1
	add	lr, lr, r4, lsl #2
	add	lr, lr, #12
	ldr	r4, [r11, #-100]
	add	lr, lr, r4, lsl #2
	ldr	lr, [lr]
	str	lr, [r11, #-64]
	ldr	lr, [r11, #-120]
	ldr	r4, [r11, #-60]
	ldr	r5, [r11, #-64]
	str	r0, [sp, #136]          @ 4-byte Spill
	mov	r0, lr
	str	r1, [sp, #132]          @ 4-byte Spill
	mov	r1, r4
	str	r2, [sp, #128]          @ 4-byte Spill
	mov	r2, r5
	ldr	lr, [sp, #136]          @ 4-byte Reload
	str	lr, [sp]
	ldr	r4, [sp, #132]          @ 4-byte Reload
	str	r4, [sp, #4]
	ldr	r5, [sp, #128]          @ 4-byte Reload
	str	r5, [sp, #8]
	str	r12, [sp, #124]         @ 4-byte Spill
	bl	HuffmanCode
	str	r0, [r11, #-68]
	ldr	r0, [r11, #-20]
	ldr	r0, [r0]
	ldr	r1, [r11, #-84]
	ldr	r2, [r11, #-72]
	bl	BF_addEntry
	ldr	r1, [r11, #-20]
	str	r0, [r1]
	ldr	r0, [r11, #-20]
	ldr	r0, [r0]
	ldr	r1, [r11, #-88]
	ldr	r2, [r11, #-76]
	bl	BF_addEntry
	ldr	r1, [r11, #-20]
	str	r0, [r1]
	ldr	r0, [r11, #-68]
	ldr	r1, [r11, #-92]
	add	r0, r1, r0
	str	r0, [r11, #-92]
@ BB#15:                                @   in Loop: Header=BB40_13 Depth=3
	ldr	r0, [r11, #-104]
	add	r0, r0, #2
	str	r0, [r11, #-104]
	b	.LBB40_13
.LBB40_16:                              @   in Loop: Header=BB40_11 Depth=2
	b	.LBB40_17
.LBB40_17:                              @   in Loop: Header=BB40_11 Depth=2
	ldr	r0, [r11, #-100]
	add	r0, r0, #1
	str	r0, [r11, #-100]
	b	.LBB40_11
.LBB40_18:                              @   in Loop: Header=BB40_4 Depth=1
	b	.LBB40_19
.LBB40_19:                              @   in Loop: Header=BB40_4 Depth=1
	ldr	r0, [r11, #-96]
	add	r0, r0, #1
	str	r0, [r11, #-96]
	b	.LBB40_4
.LBB40_20:
	b	.LBB40_43
.LBB40_21:
	movw	r0, #100
	str	r0, [r11, #-124]
	ldr	r0, [r11, #-28]
	ldr	r0, [r0, #28]
	cmp	r0, #0
	beq	.LBB40_23
@ BB#22:
	movw	r0, #576
	movw	r1, #36
	str	r1, [r11, #-32]
	str	r0, [r11, #-36]
	b	.LBB40_28
.LBB40_23:
	movw	r0, #1
	ldr	r1, [r11, #-28]
	ldr	r1, [r1, #56]
	add	r1, r1, #1
	str	r1, [r11, #-124]
	ldr	r1, [r11, #-124]
	cmp	r1, #23
	str	r0, [sp, #120]          @ 4-byte Spill
	blo	.LBB40_25
@ BB#24:
	movw	r0, :lower16:.L.str.9.161
	movt	r0, :upper16:.L.str.9.161
	movw	r1, :lower16:.L.str.1.157
	movt	r1, :upper16:.L.str.1.157
	movw	r2, #605
	movw	r3, :lower16:.L__func__.Huffmancodebits
	movt	r3, :upper16:.L__func__.Huffmancodebits
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #120]          @ 4-byte Spill
.LBB40_25:
	ldr	r0, [sp, #120]          @ 4-byte Reload
	movw	r1, #1
	movw	r2, :lower16:scalefac_band
	movt	r2, :upper16:scalefac_band
	movw	r3, #2
	ldr	r12, [r11, #-124]
	movw	lr, :lower16:scalefac_band
	movt	lr, :upper16:scalefac_band
	add	r12, lr, r12, lsl #2
	ldr	r12, [r12]
	str	r12, [r11, #-32]
	ldr	r12, [r11, #-28]
	ldr	r12, [r12, #60]
	add	r12, r12, #1
	ldr	lr, [r11, #-124]
	add	r12, lr, r12
	str	r12, [r11, #-124]
	ldr	r12, [r11, #-124]
	cmp	r12, #23
	str	r0, [sp, #116]          @ 4-byte Spill
	str	r3, [sp, #112]          @ 4-byte Spill
	str	r2, [sp, #108]          @ 4-byte Spill
	str	r1, [sp, #104]          @ 4-byte Spill
	blo	.LBB40_27
@ BB#26:
	movw	r0, :lower16:.L.str.9.161
	movt	r0, :upper16:.L.str.9.161
	movw	r1, :lower16:.L.str.1.157
	movt	r1, :upper16:.L.str.1.157
	movw	r2, #608
	movw	r3, :lower16:.L__func__.Huffmancodebits
	movt	r3, :upper16:.L__func__.Huffmancodebits
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #104]          @ 4-byte Spill
.LBB40_27:
	ldr	r0, [sp, #104]          @ 4-byte Reload
	movw	r1, :lower16:scalefac_band
	movt	r1, :upper16:scalefac_band
	movw	r2, #2
	ldr	r3, [r11, #-124]
	movw	r12, :lower16:scalefac_band
	movt	r12, :upper16:scalefac_band
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	str	r3, [r11, #-36]
	str	r0, [sp, #100]          @ 4-byte Spill
	str	r1, [sp, #96]           @ 4-byte Spill
	str	r2, [sp, #92]           @ 4-byte Spill
.LBB40_28:
	movw	r0, #0
	str	r0, [r11, #-40]
.LBB40_29:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-40]
	ldr	r1, [r11, #-44]
	cmp	r0, r1
	bge	.LBB40_42
@ BB#30:                                @   in Loop: Header=BB40_29 Depth=1
	movw	r0, #100
	str	r0, [r11, #-128]
	ldr	r0, [r11, #-40]
	ldr	r1, [r11, #-32]
	cmp	r0, r1
	bge	.LBB40_32
@ BB#31:                                @   in Loop: Header=BB40_29 Depth=1
	ldr	r0, [r11, #-28]
	ldr	r0, [r0, #32]
	str	r0, [r11, #-128]
	b	.LBB40_36
.LBB40_32:                              @   in Loop: Header=BB40_29 Depth=1
	ldr	r0, [r11, #-40]
	ldr	r1, [r11, #-36]
	cmp	r0, r1
	bge	.LBB40_34
@ BB#33:                                @   in Loop: Header=BB40_29 Depth=1
	ldr	r0, [r11, #-28]
	ldr	r0, [r0, #36]
	str	r0, [r11, #-128]
	b	.LBB40_35
.LBB40_34:                              @   in Loop: Header=BB40_29 Depth=1
	ldr	r0, [r11, #-28]
	ldr	r0, [r0, #40]
	str	r0, [r11, #-128]
.LBB40_35:                              @   in Loop: Header=BB40_29 Depth=1
	b	.LBB40_36
.LBB40_36:                              @   in Loop: Header=BB40_29 Depth=1
	movw	r0, #1
	ldr	r1, [r11, #-128]
	cmp	r1, #32
	str	r0, [sp, #88]           @ 4-byte Spill
	blo	.LBB40_38
@ BB#37:                                @   in Loop: Header=BB40_29 Depth=1
	movw	r0, :lower16:.L.str.8.160
	movt	r0, :upper16:.L.str.8.160
	movw	r1, :lower16:.L.str.1.157
	movt	r1, :upper16:.L.str.1.157
	movw	r2, #629
	movw	r3, :lower16:.L__func__.Huffmancodebits
	movt	r3, :upper16:.L__func__.Huffmancodebits
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #88]           @ 4-byte Spill
.LBB40_38:                              @   in Loop: Header=BB40_29 Depth=1
	ldr	r0, [sp, #88]           @ 4-byte Reload
	movw	r1, #2
	ldr	r2, [r11, #-24]
	ldr	r3, [r11, #-40]
	ldr	r2, [r2, r3, lsl #2]
	str	r2, [r11, #-60]
	ldr	r2, [r11, #-24]
	ldr	r3, [r11, #-40]
	add	r3, r3, #1
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2]
	str	r2, [r11, #-64]
	ldr	r2, [r11, #-128]
	cmp	r2, #0
	str	r0, [sp, #84]           @ 4-byte Spill
	str	r1, [sp, #80]           @ 4-byte Spill
	beq	.LBB40_40
@ BB#39:                                @   in Loop: Header=BB40_29 Depth=1
	sub	r3, r11, #84
	sub	r0, r11, #88
	sub	r1, r11, #72
	sub	r2, r11, #76
	ldr	r12, [r11, #-128]
	ldr	lr, [r11, #-60]
	ldr	r4, [r11, #-64]
	str	r0, [sp, #76]           @ 4-byte Spill
	mov	r0, r12
	str	r1, [sp, #72]           @ 4-byte Spill
	mov	r1, lr
	str	r2, [sp, #68]           @ 4-byte Spill
	mov	r2, r4
	ldr	r12, [sp, #76]          @ 4-byte Reload
	str	r12, [sp]
	ldr	lr, [sp, #72]           @ 4-byte Reload
	str	lr, [sp, #4]
	ldr	r4, [sp, #68]           @ 4-byte Reload
	str	r4, [sp, #8]
	bl	HuffmanCode
	str	r0, [r11, #-68]
	ldr	r0, [r11, #-20]
	ldr	r0, [r0]
	ldr	r1, [r11, #-84]
	ldr	r2, [r11, #-72]
	bl	BF_addEntry
	ldr	r1, [r11, #-20]
	str	r0, [r1]
	ldr	r0, [r11, #-20]
	ldr	r0, [r0]
	ldr	r1, [r11, #-88]
	ldr	r2, [r11, #-76]
	bl	BF_addEntry
	ldr	r1, [r11, #-20]
	str	r0, [r1]
	ldr	r0, [r11, #-68]
	ldr	r1, [r11, #-92]
	add	r0, r1, r0
	str	r0, [r11, #-92]
.LBB40_40:                              @   in Loop: Header=BB40_29 Depth=1
	b	.LBB40_41
.LBB40_41:                              @   in Loop: Header=BB40_29 Depth=1
	ldr	r0, [r11, #-40]
	add	r0, r0, #2
	str	r0, [r11, #-40]
	b	.LBB40_29
.LBB40_42:
	b	.LBB40_43
.LBB40_43:
	b	.LBB40_44
.LBB40_44:
	movw	r0, #1
	ldr	r1, [r11, #-28]
	ldr	r1, [r1, #72]
	cmp	r1, #2
	str	r0, [sp, #64]           @ 4-byte Spill
	blo	.LBB40_46
@ BB#45:
	movw	r0, :lower16:.L.str.10.162
	movt	r0, :upper16:.L.str.10.162
	movw	r1, :lower16:.L.str.1.157
	movt	r1, :upper16:.L.str.1.157
	movw	r2, #649
	movw	r3, :lower16:.L__func__.Huffmancodebits
	movt	r3, :upper16:.L__func__.Huffmancodebits
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #64]           @ 4-byte Spill
.LBB40_46:
	ldr	r0, [sp, #64]           @ 4-byte Reload
	movw	r1, #1
	movw	r2, #2
	ldr	r3, [r11, #-44]
	ldr	r12, [r11, #-28]
	ldr	r12, [r12, #8]
	lsl	r12, r12, #2
	add	r3, r3, r12
	str	r3, [r11, #-48]
	ldr	r3, [r11, #-48]
	cmp	r3, #576
	str	r0, [sp, #60]           @ 4-byte Spill
	str	r2, [sp, #56]           @ 4-byte Spill
	str	r1, [sp, #52]           @ 4-byte Spill
	ble	.LBB40_48
@ BB#47:
	movw	r0, :lower16:.L.str.11.163
	movt	r0, :upper16:.L.str.11.163
	movw	r1, :lower16:.L.str.1.157
	movt	r1, :upper16:.L.str.1.157
	movw	r2, #652
	movw	r3, :lower16:.L__func__.Huffmancodebits
	movt	r3, :upper16:.L__func__.Huffmancodebits
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #52]           @ 4-byte Spill
.LBB40_48:
	ldr	r0, [sp, #52]           @ 4-byte Reload
	ldr	r1, [r11, #-44]
	str	r1, [r11, #-40]
	str	r0, [sp, #48]           @ 4-byte Spill
.LBB40_49:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-40]
	ldr	r1, [r11, #-48]
	cmp	r0, r1
	bge	.LBB40_52
@ BB#50:                                @   in Loop: Header=BB40_49 Depth=1
	movw	r0, :lower16:ht
	movt	r0, :upper16:ht
	movw	r1, #4
	ldr	r2, [r11, #-24]
	ldr	r3, [r11, #-40]
	ldr	r2, [r2, r3, lsl #2]
	str	r2, [r11, #-52]
	ldr	r2, [r11, #-24]
	ldr	r3, [r11, #-40]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2, #4]
	str	r2, [r11, #-56]
	ldr	r2, [r11, #-24]
	ldr	r3, [r11, #-40]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2, #8]
	str	r2, [r11, #-60]
	ldr	r2, [r11, #-24]
	ldr	r3, [r11, #-40]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2, #12]
	str	r2, [r11, #-64]
	ldr	r2, [r11, #-20]
	ldr	r3, [r11, #-28]
	ldr	r3, [r3, #72]
	add	r3, r3, #32
	movw	r12, :lower16:ht
	movt	r12, :upper16:ht
	add	r3, r12, r3, lsl #4
	ldr	r12, [r11, #-52]
	ldr	lr, [r11, #-56]
	ldr	r4, [r11, #-60]
	ldr	r5, [r11, #-64]
	str	r0, [sp, #44]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #40]           @ 4-byte Spill
	mov	r1, r3
	mov	r2, r12
	mov	r3, lr
	str	r4, [sp]
	str	r5, [sp, #4]
	bl	L3_huffman_coder_count1
	ldr	r1, [r11, #-92]
	add	r0, r1, r0
	str	r0, [r11, #-92]
@ BB#51:                                @   in Loop: Header=BB40_49 Depth=1
	ldr	r0, [r11, #-40]
	add	r0, r0, #4
	str	r0, [r11, #-40]
	b	.LBB40_49
.LBB40_52:
	ldr	r0, [r11, #-28]
	ldr	r0, [r0]
	ldr	r1, [r11, #-28]
	ldr	r1, [r1, #76]
	sub	r0, r0, r1
	ldr	r1, [r11, #-92]
	sub	r0, r0, r1
	str	r0, [r11, #-80]
	cmp	r0, #0
	beq	.LBB40_59
@ BB#53:
	movw	r1, :lower16:.L.str.12.164
	movt	r1, :upper16:.L.str.12.164
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	movw	r2, #32
	ldr	r3, [r11, #-80]
	str	r0, [sp, #36]           @ 4-byte Spill
	mov	r0, r3
	str	r1, [sp, #32]           @ 4-byte Spill
	mov	r1, r2
	str	r2, [sp, #28]           @ 4-byte Spill
	bl	__divsi3
	str	r0, [r11, #-132]
	ldr	r0, [r11, #-80]
	ldr	r1, [sp, #28]           @ 4-byte Reload
	bl	__modsi3
	str	r0, [r11, #-136]
	ldr	r0, [sp, #36]           @ 4-byte Reload
	ldr	r0, [r0]
	ldr	r2, [r11, #-80]
	ldr	r1, [sp, #32]           @ 4-byte Reload
	bl	fprintf
	movw	r1, :lower16:.L.str.13.165
	movt	r1, :upper16:.L.str.13.165
	movw	r2, :lower16:stderr
	movt	r2, :upper16:stderr
	ldr	r2, [r2]
	str	r0, [sp, #24]           @ 4-byte Spill
	mov	r0, r2
	bl	fprintf
	str	r0, [sp, #20]           @ 4-byte Spill
.LBB40_54:                              @ =>This Inner Loop Header: Depth=1
	mvn	r0, #0
	ldr	r1, [r11, #-132]
	add	r0, r1, r0
	str	r0, [r11, #-132]
	cmp	r1, #0
	beq	.LBB40_56
@ BB#55:                                @   in Loop: Header=BB40_54 Depth=1
	mvn	r1, #0
	movw	r2, #32
	ldr	r0, [r11, #-20]
	ldr	r0, [r0]
	bl	BF_addEntry
	ldr	r1, [r11, #-20]
	str	r0, [r1]
	b	.LBB40_54
.LBB40_56:
	ldr	r0, [r11, #-136]
	cmp	r0, #0
	beq	.LBB40_58
@ BB#57:
	mvn	r1, #0
	ldr	r0, [r11, #-20]
	ldr	r0, [r0]
	ldr	r2, [r11, #-136]
	bl	BF_addEntry
	ldr	r1, [r11, #-20]
	str	r0, [r1]
.LBB40_58:
	ldr	r0, [r11, #-80]
	ldr	r1, [r11, #-92]
	add	r0, r1, r0
	str	r0, [r11, #-92]
.LBB40_59:
	movw	r0, #1
	ldr	r1, [r11, #-92]
	ldr	r2, [r11, #-28]
	ldr	r2, [r2]
	ldr	r3, [r11, #-28]
	ldr	r3, [r3, #76]
	sub	r2, r2, r3
	cmp	r1, r2
	str	r0, [sp, #16]           @ 4-byte Spill
	beq	.LBB40_61
@ BB#60:
	movw	r0, :lower16:.L.str.14.166
	movt	r0, :upper16:.L.str.14.166
	movw	r1, :lower16:.L.str.1.157
	movt	r1, :upper16:.L.str.1.157
	movw	r2, #683
	movw	r3, :lower16:.L__func__.Huffmancodebits
	movt	r3, :upper16:.L__func__.Huffmancodebits
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #16]           @ 4-byte Spill
.LBB40_61:
	ldr	r0, [sp, #16]           @ 4-byte Reload
	str	r0, [sp, #12]           @ 4-byte Spill
	sub	sp, r11, #16
	pop	{r4, r5, r6, r7, r11, pc}
.Lfunc_end40:
	.size	Huffmancodebits, .Lfunc_end40-Huffmancodebits
	.cantunwind
	.fnend

	.globl	HuffmanCode
	.p2align	2
	.type	HuffmanCode,%function
	.code	32                      @ @HuffmanCode
HuffmanCode:
	.fnstart
@ BB#0:
	push	{r4, r5, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #128
	ldr	r12, [r11, #16]
	ldr	lr, [r11, #12]
	ldr	r4, [r11, #8]
	movw	r5, #0
	str	r0, [r11, #-16]
	str	r1, [r11, #-20]
	str	r2, [r11, #-24]
	str	r3, [r11, #-28]
	str	r4, [r11, #-32]
	str	lr, [r11, #-36]
	str	r12, [r11, #-40]
	ldr	r0, [r11, #-36]
	str	r5, [r0]
	ldr	r0, [r11, #-40]
	str	r5, [r0]
	ldr	r0, [r11, #-28]
	str	r5, [r0]
	ldr	r0, [r11, #-32]
	str	r5, [r0]
	ldr	r0, [r11, #-16]
	cmp	r0, #0
	bne	.LBB41_2
@ BB#1:
	movw	r0, #0
	str	r0, [r11, #-12]
	b	.LBB41_30
.LBB41_2:
	movw	r0, :lower16:ht
	movt	r0, :upper16:ht
	movw	r1, #4
	sub	r2, r11, #20
	str	r0, [sp, #64]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #60]           @ 4-byte Spill
	bl	abs_and_sign
	str	r0, [r11, #-44]
	sub	r0, r11, #24
	bl	abs_and_sign
	str	r0, [r11, #-48]
	ldr	r0, [r11, #-16]
	movw	r1, :lower16:ht
	movt	r1, :upper16:ht
	add	r0, r1, r0, lsl #4
	str	r0, [sp, #68]
	ldr	r0, [r11, #-16]
	cmp	r0, #15
	ble	.LBB41_20
@ BB#3:
	movw	r0, #0
	ldr	r1, [sp, #68]
	ldr	r1, [r1]
	str	r1, [r11, #-60]
	str	r0, [r11, #-56]
	str	r0, [r11, #-52]
	ldr	r0, [r11, #-20]
	cmp	r0, #14
	ble	.LBB41_7
@ BB#4:
	movw	r0, #1
	ldr	r1, [r11, #-20]
	sub	r1, r1, #15
	str	r1, [r11, #-52]
	ldr	r1, [r11, #-52]
	ldr	r2, [sp, #68]
	ldr	r2, [r2, #4]
	cmp	r1, r2
	str	r0, [sp, #56]           @ 4-byte Spill
	bls	.LBB41_6
@ BB#5:
	movw	r0, :lower16:.L.str.3.167
	movt	r0, :upper16:.L.str.3.167
	movw	r1, :lower16:.L.str.1.157
	movt	r1, :upper16:.L.str.1.157
	movw	r2, #797
	movw	r3, :lower16:.L__func__.HuffmanCode
	movt	r3, :upper16:.L__func__.HuffmanCode
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #56]           @ 4-byte Spill
.LBB41_6:
	ldr	r0, [sp, #56]           @ 4-byte Reload
	movw	r1, #15
	str	r1, [r11, #-20]
	str	r0, [sp, #52]           @ 4-byte Spill
.LBB41_7:
	ldr	r0, [r11, #-24]
	cmp	r0, #14
	ble	.LBB41_11
@ BB#8:
	movw	r0, #1
	ldr	r1, [r11, #-24]
	sub	r1, r1, #15
	str	r1, [r11, #-56]
	ldr	r1, [r11, #-56]
	ldr	r2, [sp, #68]
	ldr	r2, [r2, #4]
	cmp	r1, r2
	str	r0, [sp, #48]           @ 4-byte Spill
	bls	.LBB41_10
@ BB#9:
	movw	r0, :lower16:.L.str.4.168
	movt	r0, :upper16:.L.str.4.168
	movw	r1, :lower16:.L.str.1.157
	movt	r1, :upper16:.L.str.1.157
	movw	r2, #803
	movw	r3, :lower16:.L__func__.HuffmanCode
	movt	r3, :upper16:.L__func__.HuffmanCode
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #48]           @ 4-byte Spill
.LBB41_10:
	ldr	r0, [sp, #48]           @ 4-byte Reload
	movw	r1, #15
	str	r1, [r11, #-24]
	str	r0, [sp, #44]           @ 4-byte Spill
.LBB41_11:
	movw	r0, #2
	ldr	r1, [r11, #-20]
	ldr	r2, [r11, #-24]
	add	r1, r2, r1, lsl #4
	str	r1, [r11, #-64]
	ldr	r2, [sp, #68]
	ldr	r2, [r2, #8]
	add	r1, r2, r1, lsl #2
	ldr	r1, [r1]
	ldr	r2, [r11, #-28]
	str	r1, [r2]
	ldr	r1, [sp, #68]
	ldr	r1, [r1, #12]
	ldr	r2, [r11, #-64]
	add	r1, r1, r2
	ldrb	r1, [r1]
	ldr	r2, [r11, #-36]
	str	r1, [r2]
	ldr	r1, [r11, #-20]
	cmp	r1, #14
	str	r0, [sp, #40]           @ 4-byte Spill
	ble	.LBB41_13
@ BB#12:
	ldr	r0, [r11, #-52]
	ldr	r1, [r11, #-32]
	ldr	r2, [r1]
	orr	r0, r2, r0
	str	r0, [r1]
	ldr	r0, [r11, #-60]
	ldr	r1, [r11, #-40]
	ldr	r2, [r1]
	add	r0, r2, r0
	str	r0, [r1]
.LBB41_13:
	ldr	r0, [r11, #-20]
	cmp	r0, #0
	beq	.LBB41_15
@ BB#14:
	movw	r0, #1
	ldr	r1, [r11, #-32]
	ldr	r2, [r1]
	lsl	r2, r2, #1
	str	r2, [r1]
	ldr	r1, [r11, #-44]
	ldr	r2, [r11, #-32]
	ldr	r3, [r2]
	orr	r1, r3, r1
	str	r1, [r2]
	ldr	r1, [r11, #-40]
	ldr	r2, [r1]
	add	r2, r2, #1
	str	r2, [r1]
	str	r0, [sp, #36]           @ 4-byte Spill
.LBB41_15:
	ldr	r0, [r11, #-24]
	cmp	r0, #14
	ble	.LBB41_17
@ BB#16:
	ldr	r0, [r11, #-60]
	ldr	r1, [r11, #-32]
	ldr	r2, [r1]
	lsl	r0, r2, r0
	str	r0, [r1]
	ldr	r0, [r11, #-56]
	ldr	r1, [r11, #-32]
	ldr	r2, [r1]
	orr	r0, r2, r0
	str	r0, [r1]
	ldr	r0, [r11, #-60]
	ldr	r1, [r11, #-40]
	ldr	r2, [r1]
	add	r0, r2, r0
	str	r0, [r1]
.LBB41_17:
	ldr	r0, [r11, #-24]
	cmp	r0, #0
	beq	.LBB41_19
@ BB#18:
	movw	r0, #1
	ldr	r1, [r11, #-32]
	ldr	r2, [r1]
	lsl	r2, r2, #1
	str	r2, [r1]
	ldr	r1, [r11, #-48]
	ldr	r2, [r11, #-32]
	ldr	r3, [r2]
	orr	r1, r3, r1
	str	r1, [r2]
	ldr	r1, [r11, #-40]
	ldr	r2, [r1]
	add	r2, r2, #1
	str	r2, [r1]
	str	r0, [sp, #32]           @ 4-byte Spill
.LBB41_19:
	b	.LBB41_25
.LBB41_20:
	movw	r0, #2
	ldr	r1, [r11, #-20]
	ldr	r2, [r11, #-24]
	add	r1, r2, r1, lsl #4
	str	r1, [r11, #-64]
	ldr	r2, [sp, #68]
	ldr	r2, [r2, #8]
	add	r1, r2, r1, lsl #2
	ldr	r1, [r1]
	ldr	r2, [r11, #-28]
	str	r1, [r2]
	ldr	r1, [sp, #68]
	ldr	r1, [r1, #12]
	ldr	r2, [r11, #-64]
	add	r1, r1, r2
	ldrb	r1, [r1]
	ldr	r2, [r11, #-36]
	ldr	r3, [r2]
	add	r1, r3, r1
	str	r1, [r2]
	ldr	r1, [r11, #-20]
	cmp	r1, #0
	str	r0, [sp, #28]           @ 4-byte Spill
	beq	.LBB41_22
@ BB#21:
	movw	r0, #1
	ldr	r1, [r11, #-28]
	ldr	r2, [r1]
	lsl	r2, r2, #1
	str	r2, [r1]
	ldr	r1, [r11, #-44]
	ldr	r2, [r11, #-28]
	ldr	r3, [r2]
	orr	r1, r3, r1
	str	r1, [r2]
	ldr	r1, [r11, #-36]
	ldr	r2, [r1]
	add	r2, r2, #1
	str	r2, [r1]
	str	r0, [sp, #24]           @ 4-byte Spill
.LBB41_22:
	ldr	r0, [r11, #-24]
	cmp	r0, #0
	beq	.LBB41_24
@ BB#23:
	movw	r0, #1
	ldr	r1, [r11, #-28]
	ldr	r2, [r1]
	lsl	r2, r2, #1
	str	r2, [r1]
	ldr	r1, [r11, #-48]
	ldr	r2, [r11, #-28]
	ldr	r3, [r2]
	orr	r1, r3, r1
	str	r1, [r2]
	ldr	r1, [r11, #-36]
	ldr	r2, [r1]
	add	r2, r2, #1
	str	r2, [r1]
	str	r0, [sp, #20]           @ 4-byte Spill
.LBB41_24:
	b	.LBB41_25
.LBB41_25:
	movw	r0, #1
	ldr	r1, [r11, #-36]
	ldr	r1, [r1]
	cmp	r1, #32
	str	r0, [sp, #16]           @ 4-byte Spill
	ble	.LBB41_27
@ BB#26:
	movw	r0, :lower16:.L.str.5.169
	movt	r0, :upper16:.L.str.5.169
	movw	r1, :lower16:.L.str.1.157
	movt	r1, :upper16:.L.str.1.157
	movw	r2, #851
	movw	r3, :lower16:.L__func__.HuffmanCode
	movt	r3, :upper16:.L__func__.HuffmanCode
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #16]           @ 4-byte Spill
.LBB41_27:
	ldr	r0, [sp, #16]           @ 4-byte Reload
	movw	r1, #1
	ldr	r2, [r11, #-40]
	ldr	r2, [r2]
	cmp	r2, #32
	str	r0, [sp, #12]           @ 4-byte Spill
	str	r1, [sp, #8]            @ 4-byte Spill
	ble	.LBB41_29
@ BB#28:
	movw	r0, :lower16:.L.str.6.170
	movt	r0, :upper16:.L.str.6.170
	movw	r1, :lower16:.L.str.1.157
	movt	r1, :upper16:.L.str.1.157
	movw	r2, #852
	movw	r3, :lower16:.L__func__.HuffmanCode
	movt	r3, :upper16:.L__func__.HuffmanCode
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #8]            @ 4-byte Spill
.LBB41_29:
	ldr	r0, [sp, #8]            @ 4-byte Reload
	ldr	r1, [r11, #-36]
	ldr	r1, [r1]
	ldr	r2, [r11, #-40]
	ldr	r2, [r2]
	add	r1, r1, r2
	str	r1, [r11, #-12]
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB41_30:
	ldr	r0, [r11, #-12]
	sub	sp, r11, #8
	pop	{r4, r5, r11, pc}
.Lfunc_end41:
	.size	HuffmanCode, .Lfunc_end41-HuffmanCode
	.cantunwind
	.fnend

	.globl	L3_huffman_coder_count1
	.p2align	2
	.type	L3_huffman_coder_count1,%function
	.code	32                      @ @L3_huffman_coder_count1
L3_huffman_coder_count1:
	.fnstart
@ BB#0:
	push	{r4, r10, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #72
	ldr	r12, [r11, #12]
	ldr	lr, [r11, #8]
	movw	r4, #2
	str	r0, [r11, #-12]
	str	r1, [r11, #-16]
	str	r2, [r11, #-20]
	str	r3, [r11, #-24]
	str	lr, [r11, #-28]
	str	r12, [r11, #-32]
	mov	r0, #0
	str	r0, [sp, #16]
	sub	r0, r11, #20
	str	r4, [sp, #12]           @ 4-byte Spill
	bl	abs_and_sign
	str	r0, [sp, #40]
	sub	r0, r11, #24
	bl	abs_and_sign
	str	r0, [sp, #36]
	sub	r0, r11, #28
	bl	abs_and_sign
	str	r0, [sp, #32]
	sub	r0, r11, #32
	bl	abs_and_sign
	str	r0, [sp, #28]
	ldr	r0, [r11, #-20]
	lsl	r0, r0, #3
	ldr	r1, [r11, #-24]
	add	r0, r0, r1, lsl #2
	ldr	r1, [r11, #-28]
	add	r0, r0, r1, lsl #1
	ldr	r1, [r11, #-32]
	add	r0, r0, r1
	str	r0, [sp, #24]
	ldr	r1, [r11, #-16]
	ldr	r1, [r1, #8]
	add	r0, r1, r0, lsl #2
	ldr	r0, [r0]
	str	r0, [r11, #-36]
	ldr	r0, [r11, #-16]
	ldr	r0, [r0, #12]
	ldr	r1, [sp, #24]
	add	r0, r0, r1
	ldrb	r0, [r0]
	str	r0, [sp, #20]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0]
	ldr	r1, [r11, #-36]
	ldr	r2, [sp, #20]
	bl	BF_addEntry
	movw	r1, #0
	ldr	r2, [r11, #-12]
	str	r0, [r2]
	str	r1, [sp, #16]
	str	r1, [sp, #24]
	ldr	r0, [r11, #-20]
	cmp	r0, #0
	beq	.LBB42_2
@ BB#1:
	ldr	r0, [sp, #40]
	str	r0, [sp, #24]
	ldr	r0, [sp, #16]
	add	r0, r0, #1
	str	r0, [sp, #16]
.LBB42_2:
	ldr	r0, [r11, #-24]
	cmp	r0, #0
	beq	.LBB42_4
@ BB#3:
	movw	r0, #1
	ldr	r1, [sp, #24]
	lsl	r1, r1, #1
	ldr	r2, [sp, #36]
	add	r1, r1, r2
	str	r1, [sp, #24]
	ldr	r1, [sp, #16]
	add	r1, r1, #1
	str	r1, [sp, #16]
	str	r0, [sp, #8]            @ 4-byte Spill
.LBB42_4:
	ldr	r0, [r11, #-28]
	cmp	r0, #0
	beq	.LBB42_6
@ BB#5:
	movw	r0, #1
	ldr	r1, [sp, #24]
	lsl	r1, r1, #1
	ldr	r2, [sp, #32]
	add	r1, r1, r2
	str	r1, [sp, #24]
	ldr	r1, [sp, #16]
	add	r1, r1, #1
	str	r1, [sp, #16]
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB42_6:
	ldr	r0, [r11, #-32]
	cmp	r0, #0
	beq	.LBB42_8
@ BB#7:
	movw	r0, #1
	ldr	r1, [sp, #24]
	lsl	r1, r1, #1
	ldr	r2, [sp, #28]
	add	r1, r1, r2
	str	r1, [sp, #24]
	ldr	r1, [sp, #16]
	add	r1, r1, #1
	str	r1, [sp, #16]
	str	r0, [sp]                @ 4-byte Spill
.LBB42_8:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0]
	ldr	r1, [sp, #24]
	ldr	r2, [sp, #16]
	bl	BF_addEntry
	ldr	r1, [r11, #-12]
	str	r0, [r1]
	ldr	r0, [sp, #16]
	ldr	r1, [sp, #20]
	add	r0, r0, r1
	sub	sp, r11, #8
	pop	{r4, r10, r11, pc}
.Lfunc_end42:
	.size	L3_huffman_coder_count1, .Lfunc_end42-L3_huffman_coder_count1
	.cantunwind
	.fnend

	.globl	abs_and_sign
	.p2align	2
	.type	abs_and_sign,%function
	.code	32                      @ @abs_and_sign
abs_and_sign:
	.fnstart
@ BB#0:
	sub	sp, sp, #8
	str	r0, [sp]
	ldr	r0, [sp]
	ldr	r0, [r0]
	cmp	r0, #0
	ble	.LBB43_2
@ BB#1:
	movw	r0, #0
	str	r0, [sp, #4]
	b	.LBB43_3
.LBB43_2:
	movw	r0, #1
	mvn	r1, #0
	ldr	r2, [sp]
	ldr	r3, [r2]
	mul	r1, r3, r1
	str	r1, [r2]
	str	r0, [sp, #4]
.LBB43_3:
	ldr	r0, [sp, #4]
	add	sp, sp, #8
	bx	lr
.Lfunc_end43:
	.size	abs_and_sign, .Lfunc_end43-abs_and_sign
	.cantunwind
	.fnend

	.p2align	2
	.type	CRC_BF_addEntry,%function
	.code	32                      @ @CRC_BF_addEntry
CRC_BF_addEntry:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	movw	r3, #1
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [sp, #12]
	ldr	r0, [sp, #12]
	lsl	r0, r3, r0
	str	r0, [sp, #8]
.LBB44_1:                               @ =>This Inner Loop Header: Depth=1
	movw	r0, #1
	ldr	r1, [sp, #8]
	lsr	r1, r1, #1
	str	r1, [sp, #8]
	cmp	r1, #0
	str	r0, [sp, #4]            @ 4-byte Spill
	beq	.LBB44_5
@ BB#2:                                 @   in Loop: Header=BB44_1 Depth=1
	mvn	r0, #0
	movw	r1, :lower16:crc
	movt	r1, :upper16:crc
	movw	r2, #1
	ldr	r3, [r1]
	lsl	r3, r3, #1
	str	r3, [r1]
	ldr	r1, [r1]
	and	r1, r1, #65536
	cmp	r1, #0
	movw	r1, #0
	movne	r1, #1
	eor	r1, r1, r0
	and	r1, r1, #1
	ldr	r3, [r11, #-8]
	ldr	r12, [sp, #8]
	and	r3, r3, r12
	cmp	r3, #0
	movw	r3, #0
	movne	r3, #1
	eor	r0, r3, r0
	and	r0, r0, #1
	eor	r0, r1, r0
	cmp	r0, #0
	str	r2, [sp]                @ 4-byte Spill
	beq	.LBB44_4
@ BB#3:                                 @   in Loop: Header=BB44_1 Depth=1
	movw	r0, :lower16:crc
	movt	r0, :upper16:crc
	movw	r1, #32773
	ldr	r2, [r0]
	eor	r1, r2, r1
	str	r1, [r0]
.LBB44_4:                               @   in Loop: Header=BB44_1 Depth=1
	b	.LBB44_1
.LBB44_5:
	movw	r0, :lower16:crc
	movt	r0, :upper16:crc
	movw	r1, #65535
	ldr	r2, [r0]
	and	r1, r2, r1
	str	r1, [r0]
	ldr	r0, [r11, #-4]
	ldr	r1, [r11, #-8]
	ldr	r2, [sp, #12]
	bl	BF_addEntry
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end44:
	.size	CRC_BF_addEntry, .Lfunc_end44-CRC_BF_addEntry
	.cantunwind
	.fnend

	.globl	III_FlushBitstream
	.p2align	2
	.type	III_FlushBitstream,%function
	.code	32                      @ @III_FlushBitstream
III_FlushBitstream:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #8
	movw	r0, :lower16:PartHoldersInitialized
	movt	r0, :upper16:PartHoldersInitialized
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LBB45_2
@ BB#1:
	movw	r0, :lower16:frameResults
	movt	r0, :upper16:frameResults
	movw	r1, :lower16:frameData
	movt	r1, :upper16:frameData
	ldr	r1, [r1]
	ldr	r0, [r0]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #4]            @ 4-byte Reload
	bl	BF_FlushBitstream
.LBB45_2:
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end45:
	.size	III_FlushBitstream, .Lfunc_end45-III_FlushBitstream
	.cantunwind
	.fnend

	.globl	lame_init_params
	.p2align	3
	.type	lame_init_params,%function
	.code	32                      @ @lame_init_params
lame_init_params:
	.fnstart
@ BB#0:
	push	{r4, r10, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #160
	movw	r1, #0
	movw	r2, :lower16:l3_side
	movt	r2, :upper16:l3_side
	movw	r3, #0
	movw	r12, #492
	movw	lr, :lower16:bs.172
	movt	lr, :upper16:bs.172
	movw	r4, #32
	str	r0, [r11, #-12]
	mov	r0, lr
	and	lr, r3, #255
	str	r1, [r11, #-60]         @ 4-byte Spill
	mov	r1, lr
	str	r2, [r11, #-64]         @ 4-byte Spill
	mov	r2, r4
	str	r3, [r11, #-68]         @ 4-byte Spill
	str	r12, [r11, #-72]        @ 4-byte Spill
	bl	memset
	ldr	r0, [r11, #-64]         @ 4-byte Reload
	ldr	r1, [r11, #-68]         @ 4-byte Reload
	and	r1, r1, #255
	ldr	r2, [r11, #-72]         @ 4-byte Reload
	bl	memset
	ldr	r0, [r11, #-12]
	ldr	r1, [r11, #-60]         @ 4-byte Reload
	str	r1, [r0, #156]
	bl	InitFormatBitStream
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #4]
	cmp	r0, #1
	bne	.LBB46_2
@ BB#1:
	movw	r0, #3
	ldr	r1, [r11, #-12]
	str	r0, [r1, #32]
.LBB46_2:
	movw	r0, #2
	ldr	r1, [r11, #-12]
	str	r0, [r1, #184]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #32]
	cmp	r0, #3
	bne	.LBB46_4
@ BB#3:
	movw	r0, #1
	ldr	r1, [r11, #-12]
	str	r0, [r1, #184]
.LBB46_4:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #12]
	cmp	r0, #0
	bne	.LBB46_44
@ BB#5:
	movw	r0, #48000
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #8]
	ldr	r2, [r11, #-12]
	str	r1, [r2, #12]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #12]
	cmp	r1, r0
	blt	.LBB46_7
@ BB#6:
	movw	r0, #48000
	ldr	r1, [r11, #-12]
	str	r0, [r1, #12]
	b	.LBB46_20
.LBB46_7:
	movw	r0, #44100
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #12]
	cmp	r1, r0
	blt	.LBB46_9
@ BB#8:
	movw	r0, #44100
	ldr	r1, [r11, #-12]
	str	r0, [r1, #12]
	b	.LBB46_19
.LBB46_9:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #12]
	cmp	r0, #32000
	blt	.LBB46_11
@ BB#10:
	movw	r0, #32000
	ldr	r1, [r11, #-12]
	str	r0, [r1, #12]
	b	.LBB46_18
.LBB46_11:
	movw	r0, #24000
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #12]
	cmp	r1, r0
	blt	.LBB46_13
@ BB#12:
	movw	r0, #24000
	ldr	r1, [r11, #-12]
	str	r0, [r1, #12]
	b	.LBB46_17
.LBB46_13:
	movw	r0, #22050
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #12]
	cmp	r1, r0
	blt	.LBB46_15
@ BB#14:
	movw	r0, #22050
	ldr	r1, [r11, #-12]
	str	r0, [r1, #12]
	b	.LBB46_16
.LBB46_15:
	movw	r0, #16000
	ldr	r1, [r11, #-12]
	str	r0, [r1, #12]
.LBB46_16:
	b	.LBB46_17
.LBB46_17:
	b	.LBB46_18
.LBB46_18:
	b	.LBB46_19
.LBB46_19:
	b	.LBB46_20
.LBB46_20:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #44]
	cmp	r0, #0
	ble	.LBB46_43
@ BB#21:
	vldr	d16, .LCPI46_7
	movw	r0, #4
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #12]
	lsl	r1, r1, #4
	ldr	r2, [r11, #-12]
	ldr	r2, [r2, #184]
	mul	r1, r1, r2
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #44]
	vmov	s0, r1
	vcvt.f64.s32	d18, s0
	vmul.f64	d16, d16, d18
	vdiv.f64	d16, d17, d16
	vcvt.f32.f64	s0, d16
	vstr	s0, [r11, #-20]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #84]
	cmp	r1, #0
	str	r0, [r11, #-76]         @ 4-byte Spill
	bne	.LBB46_42
@ BB#22:
	vmov.f32	s0, #1.300000e+01
	vldr	s2, [r11, #-20]
	vcmpe.f32	s2, s0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB46_42
@ BB#23:
	movw	r0, #4
	ldr	r1, [r11, #-12]
	vldr	s0, [r1, #44]
	vcvt.f64.s32	d16, s0
	vldr	d17, .LCPI46_8
	vmul.f64	d16, d16, d17
	ldr	r1, [r1, #184]
	lsl	r1, r1, #4
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	ldr	r2, [r11, #-12]
	str	r1, [r2, #12]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #12]
	cmp	r1, #16000
	str	r0, [r11, #-80]         @ 4-byte Spill
	bgt	.LBB46_25
@ BB#24:
	movw	r0, #16000
	ldr	r1, [r11, #-12]
	str	r0, [r1, #12]
	b	.LBB46_41
.LBB46_25:
	movw	r0, #22050
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #12]
	cmp	r1, r0
	bgt	.LBB46_27
@ BB#26:
	movw	r0, #22050
	ldr	r1, [r11, #-12]
	str	r0, [r1, #12]
	b	.LBB46_40
.LBB46_27:
	movw	r0, #24000
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #12]
	cmp	r1, r0
	bgt	.LBB46_29
@ BB#28:
	movw	r0, #24000
	ldr	r1, [r11, #-12]
	str	r0, [r1, #12]
	b	.LBB46_39
.LBB46_29:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #12]
	cmp	r0, #32000
	bgt	.LBB46_31
@ BB#30:
	movw	r0, #32000
	ldr	r1, [r11, #-12]
	str	r0, [r1, #12]
	b	.LBB46_38
.LBB46_31:
	movw	r0, #44100
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #12]
	cmp	r1, r0
	bgt	.LBB46_36
@ BB#32:
	movw	r0, #44100
	ldr	r1, [r11, #-12]
	str	r0, [r1, #12]
	b	.LBB46_37
	.p2align	3
@ BB#33:
.LCPI46_7:
	.long	0                       @ double 1000
	.long	1083129856
	.p2align	3
@ BB#34:
.LCPI46_8:
	.long	0                       @ double 1.0E+4
	.long	1086556160
	.p2align	3
@ BB#35:
.LCPI46_9:
	.long	2576980378              @ double 4.4000000000000004
	.long	1074895257
.LBB46_36:
	movw	r0, #48000
	ldr	r1, [r11, #-12]
	str	r0, [r1, #12]
.LBB46_37:
	b	.LBB46_38
.LBB46_38:
	b	.LBB46_39
.LBB46_39:
	b	.LBB46_40
.LBB46_40:
	b	.LBB46_41
.LBB46_41:
	b	.LBB46_42
.LBB46_42:
	b	.LBB46_43
.LBB46_43:
	b	.LBB46_44
.LBB46_44:
	movw	r0, #576
	movw	r1, #800
	movw	r2, #1
	movw	r3, #24000
	ldr	r12, [r11, #-12]
	ldr	r12, [r12, #12]
	cmp	r12, r3
	movw	r3, #0
	movle	r3, #1
	tst	r3, #1
	moveq	r2, #2
	ldr	r3, [r11, #-12]
	str	r2, [r3, #180]
	ldr	r2, [r11, #-12]
	str	r1, [r2, #164]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #180]
	mul	r0, r1, r0
	ldr	r1, [r11, #-12]
	str	r0, [r1, #168]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #44]
	cmp	r0, #0
	bne	.LBB46_48
@ BB#45:
	movw	r0, #128
	ldr	r1, [r11, #-12]
	str	r0, [r1, #44]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #180]
	cmp	r0, #1
	bne	.LBB46_47
@ BB#46:
	movw	r0, #64
	ldr	r1, [r11, #-12]
	str	r0, [r1, #44]
.LBB46_47:
	b	.LBB46_48
.LBB46_48:
	vmov.f32	s0, #1.000000e+00
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #196]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #12]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #8]
	cmp	r0, r1
	beq	.LBB46_50
@ BB#49:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #8]
	vmov	s0, r0
	vcvt.f32.s32	s0, s0
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #12]
	vmov	s2, r0
	vcvt.f32.s32	s2, s2
	vdiv.f32	s0, s0, s2
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #196]
.LBB46_50:
	vmov.f32	s0, #2.000000e+00
	movw	r0, #0
	ldr	r1, [r11, #-12]
	str	r0, [r1, #160]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0]
	vmov	s2, r0
	vcvt.f32.u32	s2, s2
	ldr	r0, [r11, #-12]
	vldr	s4, [r0, #196]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #168]
	vmov	s6, r0
	vcvt.f32.s32	s6, s6
	vmul.f32	s4, s4, s6
	vdiv.f32	s2, s2, s4
	vadd.f32	s0, s0, s2
	vcvt.s32.f32	s0, s0
	vmov	r0, s0
	ldr	r1, [r11, #-12]
	str	r0, [r1, #160]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #44]
	cmp	r0, #320
	blt	.LBB46_52
@ BB#51:
	movw	r0, #0
	ldr	r1, [r11, #-12]
	str	r0, [r1, #84]
.LBB46_52:
	vldr	d16, .LCPI46_7
	movw	r0, #4
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #12]
	lsl	r1, r1, #4
	ldr	r2, [r11, #-12]
	ldr	r2, [r2, #184]
	mul	r1, r1, r2
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #44]
	vmov	s0, r1
	vcvt.f64.s32	d18, s0
	vmul.f64	d16, d16, d18
	vdiv.f64	d16, d17, d16
	vcvt.f32.f64	s0, d16
	vstr	s0, [r11, #-20]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #84]
	cmp	r1, #0
	str	r0, [sp, #84]           @ 4-byte Spill
	beq	.LBB46_55
@ BB#53:
	vmov.f32	s0, #1.100000e+01
	vldr	s2, [r11, #-20]
	vcmpe.f32	s2, s0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB46_55
@ BB#54:
	vldr	d16, .LCPI46_9
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #88]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vadd.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	vstr	s0, [r11, #-20]
.LBB46_55:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #36]
	cmp	r0, #0
	bne	.LBB46_60
@ BB#56:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #32]
	cmp	r0, #3
	beq	.LBB46_60
@ BB#57:
	vmov.f32	s0, #9.000000e+00
	vldr	s2, [r11, #-20]
	vcmpe.f32	s2, s0
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB46_59
@ BB#58:
	movw	r0, #0
	ldr	r1, [r11, #-12]
	str	r0, [r1, #32]
.LBB46_59:
	b	.LBB46_60
.LBB46_60:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #100]
	cmp	r0, #0
	bne	.LBB46_64
@ BB#61:
	vmov.f64	d16, #1.600000e+01
	vldr	s0, [r11, #-20]
	vcvt.f64.f32	d17, s0
	vdiv.f64	d16, d17, d16
	vmov	r0, r1, d16
	bl	log
	vmov	d16, r0, r1
	vmov.f64	d17, #1.000000e+00
	vmov.f64	d18, #1.450000e+01
	vmov.f64	d19, #1.800000e+01
	vmul.f64	d16, d19, d16
	vsub.f64	d16, d18, d16
	vmov	r0, r1, d16
	vstr	d17, [sp, #72]          @ 8-byte Spill
	bl	floor
	vmov	d16, r0, r1
	vldr	d17, [sp, #72]          @ 8-byte Reload
	vadd.f64	d16, d17, d16
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	str	r0, [r11, #-24]
	ldr	r0, [r11, #-24]
	cmp	r0, #31
	bge	.LBB46_63
@ BB#62:
	vmov.f64	d16, #3.100000e+01
	ldr	r0, [r11, #-24]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d17, d17, d16
	vcvt.f32.f64	s0, d17
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #212]
	ldr	r0, [r11, #-24]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d17, d16
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #216]
.LBB46_63:
	b	.LBB46_64
.LBB46_64:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #104]
	cmp	r0, #0
	ble	.LBB46_75
@ BB#65:
	vmov.f64	d16, #2.000000e+00
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #104]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d16, d17
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #12]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #220]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #112]
	cmp	r0, #0
	blt	.LBB46_67
@ BB#66:
	vmov.f64	d16, #2.000000e+00
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #104]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #112]
	add	r0, r0, r1
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d16, d17
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #12]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #224]
	b	.LBB46_68
.LBB46_67:
	vmov.f64	d16, #2.000000e+00
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #104]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d16, d17
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #12]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #224]
.LBB46_68:
	vmov.f32	s0, #1.000000e+00
	ldr	r0, [r11, #-12]
	vldr	s2, [r0, #220]
	vcmpe.f32	s0, s2
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB46_70
@ BB#69:
	vmov.f32	s0, #1.000000e+00
	vstr	s0, [sp, #68]           @ 4-byte Spill
	b	.LBB46_71
.LBB46_70:
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #220]
	vstr	s0, [sp, #68]           @ 4-byte Spill
.LBB46_71:
	vldr	s0, [sp, #68]           @ 4-byte Reload
	vmov.f32	s2, #1.000000e+00
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #220]
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #224]
	vcmpe.f32	s2, s0
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB46_73
@ BB#72:
	vmov.f32	s0, #1.000000e+00
	vstr	s0, [sp, #64]           @ 4-byte Spill
	b	.LBB46_74
.LBB46_73:
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #224]
	vstr	s0, [sp, #64]           @ 4-byte Spill
.LBB46_74:
	vldr	s0, [sp, #64]           @ 4-byte Reload
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #224]
.LBB46_75:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #100]
	cmp	r0, #0
	ble	.LBB46_88
@ BB#76:
	vmov.f64	d16, #2.000000e+00
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #100]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d16, d17
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #12]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #216]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #108]
	cmp	r0, #0
	blt	.LBB46_80
@ BB#77:
	vmov.f64	d16, #2.000000e+00
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #100]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #108]
	sub	r0, r0, r1
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d16, d17
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #12]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #212]
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #212]
	vcmpe.f32	s0, #0
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB46_79
@ BB#78:
	vldr	s0, .LCPI46_10
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #212]
.LBB46_79:
	b	.LBB46_81
.LBB46_80:
	vmov.f64	d16, #2.000000e+00
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #100]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d16, d17
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #12]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #212]
.LBB46_81:
	vmov.f32	s0, #1.000000e+00
	ldr	r0, [r11, #-12]
	vldr	s2, [r0, #212]
	vcmpe.f32	s0, s2
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB46_83
@ BB#82:
	vmov.f32	s0, #1.000000e+00
	vstr	s0, [sp, #60]           @ 4-byte Spill
	b	.LBB46_84
.LBB46_83:
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #212]
	vstr	s0, [sp, #60]           @ 4-byte Spill
.LBB46_84:
	vldr	s0, [sp, #60]           @ 4-byte Reload
	vmov.f32	s2, #1.000000e+00
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #212]
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #216]
	vcmpe.f32	s2, s0
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB46_86
@ BB#85:
	vmov.f32	s0, #1.000000e+00
	vstr	s0, [sp, #56]           @ 4-byte Spill
	b	.LBB46_87
.LBB46_86:
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #216]
	vstr	s0, [sp, #56]           @ 4-byte Spill
.LBB46_87:
	vldr	s0, [sp, #56]           @ 4-byte Reload
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #216]
.LBB46_88:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #236]
	cmp	r0, #0
	bne	.LBB46_144
@ BB#89:
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #212]
	vcmpe.f32	s0, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB46_112
@ BB#90:
	movw	r0, #0
	mvn	r1, #0
	movw	r2, #999
	str	r2, [r11, #-36]
	str	r1, [r11, #-32]
	str	r0, [r11, #-28]
.LBB46_91:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-28]
	cmp	r0, #31
	bgt	.LBB46_108
@ BB#92:                                @   in Loop: Header=BB46_91 Depth=1
	vmov.f64	d16, #1.000000e+00
	vmov.f64	d17, #3.100000e+01
	ldr	r0, [r11, #-28]
	vmov	s0, r0
	vcvt.f64.s32	d18, s0
	vdiv.f64	d17, d18, d17
	vstr	d17, [r11, #-56]
	vstr	d16, [r11, #-48]
	vldr	d16, [r11, #-56]
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #216]
	vcvt.f64.f32	d17, s0
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	blt	.LBB46_97
@ BB#93:                                @   in Loop: Header=BB46_91 Depth=1
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #228]
	ldr	r1, [r11, #-28]
	cmp	r0, r1
	bge	.LBB46_95
@ BB#94:                                @   in Loop: Header=BB46_91 Depth=1
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #228]
	str	r0, [sp, #52]           @ 4-byte Spill
	b	.LBB46_96
.LBB46_95:                              @   in Loop: Header=BB46_91 Depth=1
	ldr	r0, [r11, #-28]
	str	r0, [sp, #52]           @ 4-byte Spill
.LBB46_96:                              @   in Loop: Header=BB46_91 Depth=1
	ldr	r0, [sp, #52]           @ 4-byte Reload
	vldr	d16, .LCPI46_11
	ldr	r1, [r11, #-12]
	str	r0, [r1, #228]
	vstr	d16, [r11, #-48]
.LBB46_97:                              @   in Loop: Header=BB46_91 Depth=1
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #212]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-56]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB46_106
@ BB#98:                                @   in Loop: Header=BB46_91 Depth=1
	vldr	d16, [r11, #-56]
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #216]
	vcvt.f64.f32	d17, s0
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB46_106
@ BB#99:                                @   in Loop: Header=BB46_91 Depth=1
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-28]
	cmp	r0, r1
	bge	.LBB46_101
@ BB#100:                               @   in Loop: Header=BB46_91 Depth=1
	ldr	r0, [r11, #-36]
	str	r0, [sp, #48]           @ 4-byte Spill
	b	.LBB46_102
.LBB46_101:                             @   in Loop: Header=BB46_91 Depth=1
	ldr	r0, [r11, #-28]
	str	r0, [sp, #48]           @ 4-byte Spill
.LBB46_102:                             @   in Loop: Header=BB46_91 Depth=1
	ldr	r0, [sp, #48]           @ 4-byte Reload
	str	r0, [r11, #-36]
	ldr	r0, [r11, #-32]
	ldr	r1, [r11, #-28]
	cmp	r0, r1
	ble	.LBB46_104
@ BB#103:                               @   in Loop: Header=BB46_91 Depth=1
	ldr	r0, [r11, #-32]
	str	r0, [sp, #44]           @ 4-byte Spill
	b	.LBB46_105
.LBB46_104:                             @   in Loop: Header=BB46_91 Depth=1
	ldr	r0, [r11, #-28]
	str	r0, [sp, #44]           @ 4-byte Spill
.LBB46_105:                             @   in Loop: Header=BB46_91 Depth=1
	ldr	r0, [sp, #44]           @ 4-byte Reload
	vldr	d16, .LCPI46_12
	str	r0, [r11, #-32]
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #212]
	vcvt.f64.f32	d17, s0
	vldr	d18, [r11, #-56]
	vsub.f64	d17, d17, d18
	vmul.f64	d16, d16, d17
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #216]
	ldr	r0, [r11, #-12]
	vldr	s2, [r0, #212]
	vsub.f32	s0, s0, s2
	vcvt.f64.f32	d17, s0
	vdiv.f64	d16, d16, d17
	vmov	r0, r1, d16
	bl	cos
	vmov	d16, r0, r1
	vstr	d16, [r11, #-48]
.LBB46_106:                             @   in Loop: Header=BB46_91 Depth=1
	b	.LBB46_107
.LBB46_107:                             @   in Loop: Header=BB46_91 Depth=1
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB46_91
.LBB46_108:
	movw	r0, #999
	ldr	r1, [r11, #-36]
	cmp	r1, r0
	bne	.LBB46_110
@ BB#109:
	vmov.f64	d16, #3.100000e+01
	vmov.f64	d17, #7.500000e-01
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #228]
	vmov	s0, r0
	vcvt.f64.s32	d18, s0
	vsub.f64	d17, d18, d17
	vdiv.f64	d16, d17, d16
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #212]
	b	.LBB46_111
.LBB46_110:
	vmov.f64	d16, #3.100000e+01
	vmov.f64	d17, #7.500000e-01
	ldr	r0, [r11, #-36]
	vmov	s0, r0
	vcvt.f64.s32	d18, s0
	vsub.f64	d17, d18, d17
	vdiv.f64	d16, d17, d16
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #212]
.LBB46_111:
	vmov.f64	d16, #3.100000e+01
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #228]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d17, d16
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #216]
.LBB46_112:
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #224]
	vcmpe.f32	s0, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB46_116
@ BB#113:
	vldr	d16, .LCPI46_13
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #224]
	vcvt.f64.f32	d17, s0
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB46_115
@ BB#114:
	movw	r1, :lower16:.L.str.173
	movt	r1, :upper16:.L.str.173
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	vldr	s0, .LCPI46_10
	ldr	r2, [r11, #-12]
	vstr	s0, [r2, #220]
	ldr	r2, [r11, #-12]
	vstr	s0, [r2, #224]
	ldr	r0, [r0]
	bl	fprintf
	str	r0, [sp, #40]           @ 4-byte Spill
.LBB46_115:
	b	.LBB46_116
.LBB46_116:
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #224]
	vcmpe.f32	s0, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB46_143
@ BB#117:
	movw	r0, #0
	mvn	r1, #0
	movw	r2, #999
	str	r2, [r11, #-36]
	str	r1, [r11, #-32]
	str	r0, [r11, #-28]
.LBB46_118:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-28]
	cmp	r0, #31
	bgt	.LBB46_136
@ BB#119:                               @   in Loop: Header=BB46_118 Depth=1
	vmov.f64	d16, #1.000000e+00
	vmov.f64	d17, #3.100000e+01
	ldr	r0, [r11, #-28]
	vmov	s0, r0
	vcvt.f64.s32	d18, s0
	vdiv.f64	d17, d18, d17
	vstr	d17, [r11, #-56]
	vstr	d16, [r11, #-48]
	vldr	d16, [r11, #-56]
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #220]
	vcvt.f64.f32	d17, s0
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bhi	.LBB46_125
@ BB#120:                               @   in Loop: Header=BB46_118 Depth=1
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #232]
	ldr	r1, [r11, #-28]
	cmp	r0, r1
	ble	.LBB46_123
@ BB#121:                               @   in Loop: Header=BB46_118 Depth=1
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #232]
	str	r0, [sp, #36]           @ 4-byte Spill
	b	.LBB46_124
	.p2align	2
@ BB#122:
.LCPI46_10:
	.long	0                       @ float 0
.LBB46_123:                             @   in Loop: Header=BB46_118 Depth=1
	ldr	r0, [r11, #-28]
	str	r0, [sp, #36]           @ 4-byte Spill
.LBB46_124:                             @   in Loop: Header=BB46_118 Depth=1
	ldr	r0, [sp, #36]           @ 4-byte Reload
	vldr	d16, .LCPI46_11
	ldr	r1, [r11, #-12]
	str	r0, [r1, #232]
	vstr	d16, [r11, #-48]
.LBB46_125:                             @   in Loop: Header=BB46_118 Depth=1
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #220]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-56]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB46_134
@ BB#126:                               @   in Loop: Header=BB46_118 Depth=1
	vldr	d16, [r11, #-56]
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #224]
	vcvt.f64.f32	d17, s0
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB46_134
@ BB#127:                               @   in Loop: Header=BB46_118 Depth=1
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-28]
	cmp	r0, r1
	bge	.LBB46_129
@ BB#128:                               @   in Loop: Header=BB46_118 Depth=1
	ldr	r0, [r11, #-36]
	str	r0, [sp, #32]           @ 4-byte Spill
	b	.LBB46_130
.LBB46_129:                             @   in Loop: Header=BB46_118 Depth=1
	ldr	r0, [r11, #-28]
	str	r0, [sp, #32]           @ 4-byte Spill
.LBB46_130:                             @   in Loop: Header=BB46_118 Depth=1
	ldr	r0, [sp, #32]           @ 4-byte Reload
	str	r0, [r11, #-36]
	ldr	r0, [r11, #-32]
	ldr	r1, [r11, #-28]
	cmp	r0, r1
	ble	.LBB46_132
@ BB#131:                               @   in Loop: Header=BB46_118 Depth=1
	ldr	r0, [r11, #-32]
	str	r0, [sp, #28]           @ 4-byte Spill
	b	.LBB46_133
.LBB46_132:                             @   in Loop: Header=BB46_118 Depth=1
	ldr	r0, [r11, #-28]
	str	r0, [sp, #28]           @ 4-byte Spill
.LBB46_133:                             @   in Loop: Header=BB46_118 Depth=1
	ldr	r0, [sp, #28]           @ 4-byte Reload
	vldr	d16, .LCPI46_12
	str	r0, [r11, #-32]
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #224]
	vcvt.f64.f32	d17, s0
	vldr	d18, [r11, #-56]
	vsub.f64	d17, d17, d18
	vmul.f64	d16, d16, d17
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #224]
	ldr	r0, [r11, #-12]
	vldr	s2, [r0, #220]
	vsub.f32	s0, s0, s2
	vcvt.f64.f32	d17, s0
	vdiv.f64	d16, d16, d17
	vmov	r0, r1, d16
	bl	cos
	vmov	d16, r0, r1
	vstr	d16, [r11, #-48]
.LBB46_134:                             @   in Loop: Header=BB46_118 Depth=1
	b	.LBB46_135
.LBB46_135:                             @   in Loop: Header=BB46_118 Depth=1
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB46_118
.LBB46_136:
	vmov.f64	d16, #3.100000e+01
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #232]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d17, d16
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #220]
	ldr	r0, [r11, #-32]
	cmn	r0, #1
	bne	.LBB46_141
@ BB#137:
	vmov.f64	d16, #3.100000e+01
	vmov.f64	d17, #7.500000e-01
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #232]
	vmov	s0, r0
	vcvt.f64.s32	d18, s0
	vadd.f64	d17, d18, d17
	vdiv.f64	d16, d17, d16
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #224]
	b	.LBB46_142
	.p2align	3
@ BB#138:
.LCPI46_11:
	.long	0                       @ double 0
	.long	0
	.p2align	3
@ BB#139:
.LCPI46_12:
	.long	1413754136              @ double 1.5707963267948966
	.long	1073291771
	.p2align	3
@ BB#140:
.LCPI46_13:
	.long	1690277452              @ double 0.021774193548387097
	.long	1066814457
.LBB46_141:
	vmov.f64	d16, #3.100000e+01
	vmov.f64	d17, #7.500000e-01
	ldr	r0, [r11, #-32]
	vmov	s0, r0
	vcvt.f64.s32	d18, s0
	vadd.f64	d17, d18, d17
	vdiv.f64	d16, d17, d16
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-12]
	vstr	s0, [r0, #224]
.LBB46_142:
	b	.LBB46_143
.LBB46_143:
	b	.LBB46_144
.LBB46_144:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #236]
	cmp	r0, #1
	bne	.LBB46_146
@ BB#145:
	b	.LBB46_146
.LBB46_146:
	movw	r0, #1
	movw	r1, #0
	ldr	r2, [r11, #-12]
	str	r1, [r2, #208]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #32]
	cmp	r1, #3
	movw	r1, #0
	moveq	r1, #1
	tst	r1, #1
	moveq	r0, #2
	ldr	r1, [r11, #-12]
	str	r0, [r1, #184]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #12]
	ldr	r1, [r11, #-12]
	add	r1, r1, #172
	bl	SmpFrqIndex
	ldr	r1, [r11, #-12]
	str	r0, [r1, #204]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #204]
	cmp	r0, #0
	bge	.LBB46_148
@ BB#147:
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	display_bitrates
	movw	r0, #1
	bl	exit
.LBB46_148:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #44]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #172]
	ldr	r2, [r11, #-12]
	ldr	r2, [r2, #12]
	bl	BitrateIndex
	ldr	r1, [r11, #-12]
	str	r0, [r1, #200]
	cmp	r0, #0
	bge	.LBB46_150
@ BB#149:
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	display_bitrates
	movw	r0, #1
	bl	exit
.LBB46_150:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #84]
	cmp	r0, #0
	beq	.LBB46_170
@ BB#151:
	movw	r0, #0
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #96]
	cmp	r0, r1
	bne	.LBB46_161
@ BB#152:
	movw	r0, #13
	ldr	r1, [r11, #-12]
	str	r0, [r1, #192]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #92]
	cmp	r0, #256
	blt	.LBB46_154
@ BB#153:
	movw	r0, #14
	ldr	r1, [r11, #-12]
	str	r0, [r1, #192]
.LBB46_154:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #88]
	cmp	r0, #0
	bne	.LBB46_156
@ BB#155:
	movw	r0, #14
	ldr	r1, [r11, #-12]
	str	r0, [r1, #192]
.LBB46_156:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #88]
	cmp	r0, #4
	blt	.LBB46_158
@ BB#157:
	movw	r0, #12
	ldr	r1, [r11, #-12]
	str	r0, [r1, #192]
.LBB46_158:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #88]
	cmp	r0, #8
	blt	.LBB46_160
@ BB#159:
	movw	r0, #9
	ldr	r1, [r11, #-12]
	str	r0, [r1, #192]
.LBB46_160:
	b	.LBB46_164
.LBB46_161:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #96]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #172]
	ldr	r2, [r11, #-12]
	ldr	r2, [r2, #12]
	bl	BitrateIndex
	ldr	r1, [r11, #-12]
	str	r0, [r1, #192]
	cmp	r0, #0
	bge	.LBB46_163
@ BB#162:
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	display_bitrates
	movw	r0, #1
	bl	exit
.LBB46_163:
	b	.LBB46_164
.LBB46_164:
	movw	r0, #0
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #92]
	cmp	r0, r1
	bne	.LBB46_166
@ BB#165:
	movw	r0, #1
	ldr	r1, [r11, #-12]
	str	r0, [r1, #188]
	b	.LBB46_169
.LBB46_166:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #92]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #172]
	ldr	r2, [r11, #-12]
	ldr	r2, [r2, #12]
	bl	BitrateIndex
	ldr	r1, [r11, #-12]
	str	r0, [r1, #188]
	cmp	r0, #0
	bge	.LBB46_168
@ BB#167:
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	display_bitrates
	movw	r0, #1
	bl	exit
.LBB46_168:
	b	.LBB46_169
.LBB46_169:
	b	.LBB46_170
.LBB46_170:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #84]
	cmp	r0, #0
	beq	.LBB46_175
@ BB#171:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #24]
	cmp	r0, #2
	bge	.LBB46_173
@ BB#172:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #24]
	str	r0, [sp, #24]           @ 4-byte Spill
	b	.LBB46_174
.LBB46_173:
	movw	r0, #2
	str	r0, [sp, #24]           @ 4-byte Spill
	b	.LBB46_174
.LBB46_174:
	ldr	r0, [sp, #24]           @ 4-byte Reload
	ldr	r1, [r11, #-12]
	str	r0, [r1, #24]
.LBB46_175:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #32]
	cmp	r0, #3
	bne	.LBB46_177
@ BB#176:
	movw	r0, #0
	ldr	r1, [r11, #-12]
	str	r0, [r1, #40]
.LBB46_177:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #84]
	cmp	r0, #0
	bne	.LBB46_179
@ BB#178:
	movw	r0, #0
	ldr	r1, [r11, #-12]
	str	r0, [r1, #20]
.LBB46_179:
	movw	r0, #0
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #128]
	cmp	r1, r0
	beq	.LBB46_182
@ BB#180:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #128]
	ldrb	r0, [r0]
	cmp	r0, #45
	bne	.LBB46_182
@ BB#181:
	movw	r0, #0
	ldr	r1, [r11, #-12]
	str	r0, [r1, #20]
.LBB46_182:
	movw	r0, #0
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #128]
	cmp	r1, r0
	beq	.LBB46_184
@ BB#183:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #128]
	ldrb	r0, [r0]
	cmp	r0, #45
	bne	.LBB46_185
.LBB46_184:
	movw	r0, #0
	movw	r1, :lower16:id3tag
	movt	r1, :upper16:id3tag
	str	r0, [r1]
.LBB46_185:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #16]
	cmp	r0, #0
	beq	.LBB46_187
@ BB#186:
	movw	r0, #0
	ldr	r1, [r11, #-12]
	str	r0, [r1, #20]
.LBB46_187:
	movw	r0, :lower16:bs.172
	movt	r0, :upper16:bs.172
	bl	init_bit_stream_w
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #24]
	cmp	r0, #9
	bne	.LBB46_189
@ BB#188:
	movw	r0, #0
	ldr	r1, [r11, #-12]
	str	r0, [r1, #236]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #252]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #240]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #244]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #248]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #256]
.LBB46_189:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #24]
	cmp	r0, #8
	bne	.LBB46_191
@ BB#190:
	movw	r0, #7
	ldr	r1, [r11, #-12]
	str	r0, [r1, #24]
.LBB46_191:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #24]
	cmp	r0, #7
	bne	.LBB46_193
@ BB#192:
	movw	r0, #0
	movw	r1, #1
	ldr	r2, [r11, #-12]
	str	r0, [r2, #236]
	ldr	r2, [r11, #-12]
	str	r1, [r2, #252]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #240]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #244]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #248]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #256]
.LBB46_193:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #24]
	cmp	r0, #6
	bne	.LBB46_195
@ BB#194:
	movw	r0, #5
	ldr	r1, [r11, #-12]
	str	r0, [r1, #24]
.LBB46_195:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #24]
	cmp	r0, #5
	bne	.LBB46_197
@ BB#196:
	movw	r0, #0
	movw	r1, #1
	ldr	r2, [r11, #-12]
	str	r0, [r2, #236]
	ldr	r2, [r11, #-12]
	str	r1, [r2, #252]
	ldr	r2, [r11, #-12]
	str	r0, [r2, #240]
	ldr	r2, [r11, #-12]
	str	r1, [r2, #244]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #248]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #256]
.LBB46_197:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #24]
	cmp	r0, #4
	bne	.LBB46_199
@ BB#198:
	movw	r0, #2
	ldr	r1, [r11, #-12]
	str	r0, [r1, #24]
.LBB46_199:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #24]
	cmp	r0, #3
	bne	.LBB46_201
@ BB#200:
	movw	r0, #2
	ldr	r1, [r11, #-12]
	str	r0, [r1, #24]
.LBB46_201:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #24]
	cmp	r0, #2
	bne	.LBB46_203
@ BB#202:
	movw	r0, #1
	movw	r1, #0
	ldr	r2, [r11, #-12]
	str	r1, [r2, #236]
	ldr	r2, [r11, #-12]
	str	r0, [r2, #252]
	ldr	r2, [r11, #-12]
	str	r0, [r2, #240]
	ldr	r2, [r11, #-12]
	str	r0, [r2, #244]
	ldr	r2, [r11, #-12]
	str	r1, [r2, #248]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #256]
.LBB46_203:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #24]
	cmp	r0, #1
	bne	.LBB46_205
@ BB#204:
	movw	r0, #1
	movw	r1, #0
	ldr	r2, [r11, #-12]
	str	r1, [r2, #236]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #252]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #240]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #244]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #248]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #256]
.LBB46_205:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #24]
	cmp	r0, #0
	bne	.LBB46_207
@ BB#206:
	mvn	r0, #98
	movw	r1, #2
	movw	r2, #3
	movw	r3, #1
	ldr	r12, [r11, #-12]
	str	r3, [r12, #236]
	ldr	r12, [r11, #-12]
	str	r3, [r12, #252]
	ldr	r12, [r11, #-12]
	str	r3, [r12, #240]
	ldr	r3, [r11, #-12]
	str	r2, [r3, #244]
	ldr	r2, [r11, #-12]
	str	r1, [r2, #248]
	ldr	r2, [r11, #-12]
	str	r1, [r2, #256]
	bl	exit
.LBB46_207:
	movw	r0, #0
	str	r0, [r11, #-16]
.LBB46_208:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-16]
	cmp	r0, #23
	bge	.LBB46_211
@ BB#209:                               @   in Loop: Header=BB46_208 Depth=1
	movw	r0, :lower16:scalefac_band
	movt	r0, :upper16:scalefac_band
	movw	r1, #2
	ldr	r2, [r11, #-12]
	ldr	r3, [r2, #172]
	ldr	r2, [r2, #204]
	add	r3, r3, r3, lsl #1
	add	r2, r2, r3
	movw	r3, :lower16:sfBandIndex
	movt	r3, :upper16:sfBandIndex
	mov	r12, #148
	mla	r2, r2, r12, r3
	ldr	r3, [r11, #-16]
	ldr	r2, [r2, r3, lsl #2]
	movw	r12, :lower16:scalefac_band
	movt	r12, :upper16:scalefac_band
	add	r3, r12, r3, lsl #2
	str	r2, [r3]
	str	r0, [sp, #20]           @ 4-byte Spill
	str	r1, [sp, #16]           @ 4-byte Spill
@ BB#210:                               @   in Loop: Header=BB46_208 Depth=1
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB46_208
.LBB46_211:
	movw	r0, #0
	str	r0, [r11, #-16]
.LBB46_212:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-16]
	cmp	r0, #14
	bge	.LBB46_215
@ BB#213:                               @   in Loop: Header=BB46_212 Depth=1
	movw	r0, :lower16:scalefac_band
	movt	r0, :upper16:scalefac_band
	add	r0, r0, #92
	movw	r1, #2
	ldr	r2, [r11, #-12]
	ldr	r3, [r2, #172]
	ldr	r2, [r2, #204]
	add	r3, r3, r3, lsl #1
	add	r2, r2, r3
	movw	r3, :lower16:sfBandIndex
	movt	r3, :upper16:sfBandIndex
	mov	r12, #148
	mla	r2, r2, r12, r3
	ldr	r3, [r11, #-16]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2, #92]
	movw	r12, :lower16:scalefac_band
	movt	r12, :upper16:scalefac_band
	add	r3, r12, r3, lsl #2
	add	r3, r3, #92
	str	r2, [r3]
	str	r0, [sp, #12]           @ 4-byte Spill
	str	r1, [sp, #8]            @ 4-byte Spill
@ BB#214:                               @   in Loop: Header=BB46_212 Depth=1
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB46_212
.LBB46_215:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #20]
	cmp	r0, #0
	beq	.LBB46_217
@ BB#216:
	movw	r0, :lower16:bs.172
	movt	r0, :upper16:bs.172
	movw	r1, #1
	ldr	r2, [r11, #-12]
	ldr	r2, [r2, #172]
	sub	r1, r1, r2
	ldr	r2, [r11, #-12]
	ldr	r2, [r2, #32]
	ldr	r3, [r11, #-12]
	ldr	r3, [r3, #204]
	bl	InitVbrTag
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB46_217:
	sub	sp, r11, #8
	pop	{r4, r10, r11, pc}
@ BB#218:
.Lfunc_end46:
	.size	lame_init_params, .Lfunc_end46-lame_init_params
	.cantunwind
	.fnend

	.globl	lame_print_config
	.p2align	3
	.type	lame_print_config,%function
	.code	32                      @ @lame_print_config
lame_print_config:
	.fnstart
@ BB#0:
	push	{r4, r10, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #120
	movw	r1, :lower16:stderr
	movt	r1, :upper16:stderr
	movw	r2, #4
	str	r0, [r11, #-12]
	vldr	s0, [r0, #12]
	vcvt.f64.s32	d16, s0
	vldr	d17, .LCPI47_2
	vdiv.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	vstr	s0, [r11, #-16]
	ldr	r0, [r11, #-12]
	vldr	s2, [r0, #196]
	vmul.f32	s0, s2, s0
	vstr	s0, [r11, #-20]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #184]
	lsl	r0, r0, #4
	vmov	s0, r0
	vcvt.f32.s32	s0, s0
	vldr	s2, [r11, #-16]
	vmul.f32	s0, s0, s2
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #44]
	vmov	s2, r0
	vcvt.f32.s32	s2, s2
	vdiv.f32	s0, s0, s2
	vstr	s0, [r11, #-24]
	ldr	r0, [r1]
	str	r2, [r11, #-28]         @ 4-byte Spill
	bl	lame_print_version
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #4]
	cmp	r0, #2
	bne	.LBB47_3
@ BB#1:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #184]
	cmp	r0, #1
	bne	.LBB47_3
@ BB#2:
	movw	r1, :lower16:.L.str.5.174
	movt	r1, :upper16:.L.str.5.174
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	str	r0, [r11, #-32]         @ 4-byte Spill
.LBB47_3:
	vmov.f32	s0, #1.000000e+00
	ldr	r0, [r11, #-12]
	vldr	s2, [r0, #196]
	vcmpe.f32	s2, s0
	vmrs	APSR_nzcv, fpscr
	beq	.LBB47_5
@ BB#4:
	movw	r1, :lower16:.L.str.6.175
	movt	r1, :upper16:.L.str.6.175
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	vldr	s0, [r11, #-20]
	vcvt.s32.f32	s0, s0
	vmov	r2, s0
	vldr	s0, [r11, #-16]
	vcvt.s32.f32	s0, s0
	vmov	r3, s0
	bl	fprintf
	str	r0, [r11, #-36]         @ 4-byte Spill
.LBB47_5:
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #224]
	vcvt.f64.f32	d16, s0
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB47_7
@ BB#6:
	movw	r1, :lower16:.L.str.7.176
	movt	r1, :upper16:.L.str.7.176
	vldr	s0, .LCPI47_1
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	ldr	r2, [r11, #-12]
	vldr	s2, [r2, #220]
	vldr	s4, [r11, #-16]
	vmul.f32	s2, s2, s4
	vmul.f32	s2, s2, s0
	vcvt.f64.f32	d16, s2
	ldr	r2, [r11, #-12]
	vldr	s2, [r2, #224]
	vldr	s4, [r11, #-16]
	vmul.f32	s2, s2, s4
	vmul.f32	s0, s2, s0
	vcvt.f64.f32	d17, s0
	vmov	r2, r3, d16
	vstr	d17, [sp]
	bl	fprintf
	str	r0, [r11, #-40]         @ 4-byte Spill
.LBB47_7:
	ldr	r0, [r11, #-12]
	vldr	s0, [r0, #212]
	vcvt.f64.f32	d16, s0
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB47_9
@ BB#8:
	movw	r1, :lower16:.L.str.8.177
	movt	r1, :upper16:.L.str.8.177
	vldr	s0, .LCPI47_1
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	ldr	r2, [r11, #-12]
	vldr	s2, [r2, #212]
	vldr	s4, [r11, #-16]
	vmul.f32	s2, s2, s4
	vmul.f32	s2, s2, s0
	vcvt.f64.f32	d16, s2
	ldr	r2, [r11, #-12]
	vldr	s2, [r2, #216]
	vldr	s4, [r11, #-16]
	vmul.f32	s2, s2, s4
	vmul.f32	s0, s2, s0
	vcvt.f64.f32	d17, s0
	vmov	r2, r3, d16
	vstr	d17, [sp]
	bl	fprintf
	str	r0, [r11, #-44]         @ 4-byte Spill
.LBB47_9:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #16]
	cmp	r0, #0
	beq	.LBB47_11
@ BB#10:
	movw	r1, :lower16:.L.str.9.178
	movt	r1, :upper16:.L.str.9.178
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	ldr	r2, [r11, #-12]
	ldr	r2, [r2, #124]
	bl	fprintf
	str	r0, [r11, #-48]         @ 4-byte Spill
	b	.LBB47_22
.LBB47_11:
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #124]
	movw	r2, :lower16:.L.str.11.179
	movt	r2, :upper16:.L.str.11.179
	str	r0, [r11, #-52]         @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	strcmp
	cmp	r0, #0
	beq	.LBB47_13
@ BB#12:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #124]
	bl	mybasename
	str	r0, [r11, #-56]         @ 4-byte Spill
	b	.LBB47_14
.LBB47_13:
	movw	r0, :lower16:.L.str.12.180
	movt	r0, :upper16:.L.str.12.180
	str	r0, [r11, #-56]         @ 4-byte Spill
	b	.LBB47_14
.LBB47_14:
	ldr	r0, [r11, #-56]         @ 4-byte Reload
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #128]
	movw	r2, :lower16:.L.str.11.179
	movt	r2, :upper16:.L.str.11.179
	str	r0, [r11, #-60]         @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	strcmp
	cmp	r0, #0
	beq	.LBB47_16
@ BB#15:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #128]
	bl	mybasename
	str	r0, [sp, #64]           @ 4-byte Spill
	b	.LBB47_17
.LBB47_16:
	movw	r0, :lower16:.L.str.13.181
	movt	r0, :upper16:.L.str.13.181
	str	r0, [sp, #64]           @ 4-byte Spill
	b	.LBB47_17
.LBB47_17:
	ldr	r0, [sp, #64]           @ 4-byte Reload
	movw	r1, :lower16:.L.str.10.182
	movt	r1, :upper16:.L.str.10.182
	ldr	r2, [r11, #-52]         @ 4-byte Reload
	str	r0, [sp, #60]           @ 4-byte Spill
	mov	r0, r2
	ldr	r2, [r11, #-60]         @ 4-byte Reload
	ldr	r3, [sp, #60]           @ 4-byte Reload
	bl	fprintf
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #84]
	cmp	r1, #0
	str	r0, [sp, #56]           @ 4-byte Spill
	beq	.LBB47_20
@ BB#18:
	movw	r1, :lower16:.L.str.14.183
	movt	r1, :upper16:.L.str.14.183
	movw	r0, #2
	movw	r2, :lower16:lame_print_config.mode_names
	movt	r2, :upper16:lame_print_config.mode_names
	movw	r3, :lower16:stderr
	movt	r3, :upper16:stderr
	ldr	r3, [r3]
	ldr	r12, [r11, #-12]
	vldr	s0, [r12, #12]
	vcvt.f64.s32	d16, s0
	vldr	d17, .LCPI47_0
	vdiv.f64	d16, d16, d17
	ldr	lr, [r12, #88]
	ldr	r12, [r12, #32]
	movw	r4, :lower16:lame_print_config.mode_names
	movt	r4, :upper16:lame_print_config.mode_names
	add	r12, r4, r12, lsl #2
	ldr	r12, [r12]
	ldr	r4, [r11, #-12]
	ldr	r4, [r4, #172]
	sub	r0, r0, r4
	ldr	r4, [r11, #-12]
	ldr	r4, [r4, #24]
	str	r0, [sp, #52]           @ 4-byte Spill
	mov	r0, r3
	str	r2, [sp, #48]           @ 4-byte Spill
	vmov	r2, r3, d16
	str	lr, [sp]
	str	r12, [sp, #4]
	ldr	r12, [sp, #52]          @ 4-byte Reload
	str	r12, [sp, #8]
	str	r4, [sp, #12]
	bl	fprintf
	str	r0, [sp, #44]           @ 4-byte Spill
	b	.LBB47_21
	.p2align	3
@ BB#19:
.LCPI47_2:
	.long	0                       @ double 1000
	.long	1083129856
.LBB47_20:
	movw	r1, :lower16:.L.str.15.184
	movt	r1, :upper16:.L.str.15.184
	movw	r0, #2
	movw	r2, :lower16:lame_print_config.mode_names
	movt	r2, :upper16:lame_print_config.mode_names
	movw	r3, :lower16:stderr
	movt	r3, :upper16:stderr
	ldr	r3, [r3]
	ldr	r12, [r11, #-12]
	vldr	s0, [r12, #12]
	vcvt.f64.s32	d16, s0
	vldr	d17, .LCPI47_0
	vdiv.f64	d16, d16, d17
	ldr	lr, [r12, #44]
	ldr	r12, [r12, #32]
	movw	r4, :lower16:lame_print_config.mode_names
	movt	r4, :upper16:lame_print_config.mode_names
	add	r12, r4, r12, lsl #2
	ldr	r12, [r12]
	ldr	r4, [r11, #-12]
	ldr	r4, [r4, #172]
	sub	r0, r0, r4
	vldr	s0, [r11, #-24]
	vcvt.f64.f32	d17, s0
	ldr	r4, [r11, #-12]
	ldr	r4, [r4, #24]
	str	r0, [sp, #40]           @ 4-byte Spill
	mov	r0, r3
	str	r2, [sp, #36]           @ 4-byte Spill
	vmov	r2, r3, d16
	str	lr, [sp]
	str	r12, [sp, #4]
	ldr	r12, [sp, #40]          @ 4-byte Reload
	str	r12, [sp, #8]
	vstr	d17, [sp, #16]
	str	r4, [sp, #24]
	bl	fprintf
	str	r0, [sp, #32]           @ 4-byte Spill
.LBB47_21:
	b	.LBB47_22
.LBB47_22:
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fflush
	str	r0, [sp, #28]           @ 4-byte Spill
	sub	sp, r11, #8
	pop	{r4, r10, r11, pc}
	.p2align	3
@ BB#23:
.LCPI47_0:
	.long	0                       @ double 1000
	.long	1083129856
.LCPI47_1:
	.long	1140457472              @ float 500
.Lfunc_end47:
	.size	lame_print_config, .Lfunc_end47-lame_print_config
	.cantunwind
	.fnend

	.p2align	2
	.type	mybasename,%function
	.code	32                      @ @mybasename
mybasename:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #16
	movw	r1, #47
	str	r0, [r11, #-4]
	ldr	r0, [r11, #-4]
	bl	strrchr
	movw	r1, #0
	str	r0, [sp, #8]
	ldr	r0, [sp, #8]
	cmp	r0, r1
	beq	.LBB48_2
@ BB#1:
	ldr	r0, [sp, #8]
	add	r0, r0, #1
	str	r0, [sp, #4]            @ 4-byte Spill
	b	.LBB48_3
.LBB48_2:
	ldr	r0, [r11, #-4]
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB48_3:
	ldr	r0, [sp, #4]            @ 4-byte Reload
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end48:
	.size	mybasename, .Lfunc_end48-mybasename
	.cantunwind
	.fnend

	.globl	lame_encode_frame
	.p2align	3
	.type	lame_encode_frame,%function
	.code	32                      @ @lame_encode_frame
lame_encode_frame:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
	add	r11, sp, #28
	sub	sp, sp, #12
	sub	sp, sp, #36864
	add	r10, sp, #8192
	add	r12, r10, #1004
	ldr	lr, [r11, #12]
	ldr	r4, [r11, #8]
	movw	r5, #0
	movw	r6, #0
	movw	r7, #976
	add	r8, sp, #404
	movw	r9, #3904
	str	r5, [r11, #-32]
	add	r5, sp, #1024
	add	r10, r5, #360
	str	r0, [sp, #220]          @ 4-byte Spill
	add	r5, sp, #5120
	add	r0, r5, #168
	vldr	d16, .LCPI49_5
	str	r0, [sp, #216]          @ 4-byte Spill
	ldr	r0, [sp, #220]          @ 4-byte Reload
	str	r0, [r11, #-36]
	str	r1, [r11, #-40]
	str	r2, [r11, #-44]
	str	r3, [r11, #-48]
	str	r4, [r11, #-52]
	str	lr, [r11, #-56]
	vstr	d16, [sp, #296]
	vstr	d16, [sp, #288]
	ldr	r1, [sp, #216]          @ 4-byte Reload
	mov	r0, r1
	and	r1, r6, #255
	mov	r2, r9
	str	r12, [sp, #212]         @ 4-byte Spill
	str	r8, [sp, #208]          @ 4-byte Spill
	str	r9, [sp, #204]          @ 4-byte Spill
	str	r10, [sp, #200]         @ 4-byte Spill
	str	r6, [sp, #196]          @ 4-byte Spill
	str	r7, [sp, #192]          @ 4-byte Spill
	ldr	r5, [r11, #-32]
	str	r5, [sp, #188]          @ 4-byte Spill
	bl	memset
	ldr	r0, [sp, #200]          @ 4-byte Reload
	ldr	r1, [sp, #196]          @ 4-byte Reload
	and	r1, r1, #255
	ldr	r2, [sp, #204]          @ 4-byte Reload
	bl	memset
	ldr	r0, [sp, #208]          @ 4-byte Reload
	ldr	r1, [sp, #196]          @ 4-byte Reload
	and	r1, r1, #255
	ldr	r2, [sp, #192]          @ 4-byte Reload
	bl	memset
	ldr	r0, [r11, #-40]
	str	r0, [sp, #396]
	ldr	r0, [r11, #-44]
	str	r0, [sp, #400]
	ldr	r0, [r11, #-36]
	ldr	r1, [sp, #188]          @ 4-byte Reload
	str	r1, [r0, #208]
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #156]
	cmp	r0, #0
	bne	.LBB49_8
@ BB#1:
	vldr	d16, .LCPI49_6
	movw	r0, :lower16:lame_encode_frame.frac_SpF
	movt	r0, :upper16:lame_encode_frame.frac_SpF
	movw	r1, :lower16:lame_encode_frame.bitsPerSlot
	movt	r1, :upper16:lame_encode_frame.bitsPerSlot
	movw	r2, #8
	movw	r3, #0
	movw	r12, :lower16:lame_encode_frame.sentBits
	movt	r12, :upper16:lame_encode_frame.sentBits
	vldr	d17, .LCPI49_7
	ldr	lr, [r11, #-36]
	ldr	lr, [lr, #12]
	vmov	s0, lr
	vcvt.f64.s32	d18, s0
	vdiv.f64	d17, d18, d17
	vstr	d17, [sp, #272]
	ldr	lr, [r11, #-36]
	ldr	lr, [lr, #44]
	str	lr, [sp, #268]
	str	r3, [r12]
	str	r2, [r1]
	ldr	r2, [sp, #268]
	ldr	r3, [r11, #-36]
	ldr	r3, [r3, #168]
	mul	r2, r2, r3
	vmov	s0, r2
	vcvt.f64.s32	d17, s0
	vldr	d18, [sp, #272]
	ldr	r1, [r1]
	vmov	s0, r1
	vcvt.f64.u32	d19, s0
	vmul.f64	d18, d18, d19
	vdiv.f64	d17, d17, d18
	vstr	d17, [sp, #280]
	vldr	d17, [sp, #280]
	vldr	d18, [sp, #280]
	vadd.f64	d18, d18, d16
	vmov	r1, r2, d18
	str	r0, [sp, #184]          @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	vstr	d16, [sp, #176]         @ 8-byte Spill
	vstr	d17, [sp, #168]         @ 8-byte Spill
	bl	floor
	vmov	d16, r0, r1
	vldr	d17, [sp, #168]         @ 8-byte Reload
	vsub.f64	d16, d17, d16
	ldr	r0, [sp, #184]          @ 4-byte Reload
	vstr	d16, [r0]
	vldr	d16, [r0]
	vabs.f64	d16, d16
	vldr	d17, [sp, #176]         @ 8-byte Reload
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB49_3
@ BB#2:
	vldr	d16, .LCPI49_5
	movw	r0, :lower16:lame_encode_frame.frac_SpF
	movt	r0, :upper16:lame_encode_frame.frac_SpF
	vstr	d16, [r0]
.LBB49_3:
	movw	r0, :lower16:lame_encode_frame.frac_SpF
	movt	r0, :upper16:lame_encode_frame.frac_SpF
	movw	r1, #1
	movw	r2, :lower16:lame_encode_frame.slot_lag
	movt	r2, :upper16:lame_encode_frame.slot_lag
	vldr	d16, [r0]
	vneg.f64	d16, d16
	vstr	d16, [r2]
	ldr	r2, [r11, #-36]
	str	r1, [r2, #176]
	vldr	d16, [r0]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	bne	.LBB49_5
@ BB#4:
	movw	r0, #0
	ldr	r1, [r11, #-36]
	str	r0, [r1, #176]
.LBB49_5:
	movw	r0, #1
	ldr	r1, [r11, #-48]
	ldr	r2, [r11, #-36]
	ldr	r2, [r2, #168]
	add	r2, r2, #1024
	sub	r2, r2, #272
	cmp	r1, r2
	str	r0, [sp, #164]          @ 4-byte Spill
	bge	.LBB49_7
@ BB#6:
	movw	r0, :lower16:.L.str.16.189
	movt	r0, :upper16:.L.str.16.189
	movw	r1, :lower16:.L.str.17.190
	movt	r1, :upper16:.L.str.17.190
	movw	r2, #666
	movw	r3, :lower16:.L__func__.lame_encode_frame
	movt	r3, :upper16:.L__func__.lame_encode_frame
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #164]          @ 4-byte Spill
.LBB49_7:
	ldr	r0, [sp, #164]          @ 4-byte Reload
	str	r0, [sp, #160]          @ 4-byte Spill
.LBB49_8:
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #60]
	cmp	r0, #0
	str	r0, [sp, #156]          @ 4-byte Spill
	beq	.LBB49_11
	b	.LBB49_9
.LBB49_9:
	ldr	r0, [sp, #156]          @ 4-byte Reload
	cmp	r0, #1
	beq	.LBB49_12
	b	.LBB49_10
.LBB49_10:
	ldr	r0, [sp, #156]          @ 4-byte Reload
	cmp	r0, #2
	beq	.LBB49_13
	b	.LBB49_14
.LBB49_11:
	movw	r0, #0
	ldr	r1, [r11, #-36]
	str	r0, [r1, #176]
	b	.LBB49_30
.LBB49_12:
	movw	r0, #1
	ldr	r1, [r11, #-36]
	str	r0, [r1, #176]
	b	.LBB49_30
.LBB49_13:
	b	.LBB49_14
.LBB49_14:
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #84]
	cmp	r0, #0
	beq	.LBB49_16
@ BB#15:
	movw	r0, #0
	ldr	r1, [r11, #-36]
	str	r0, [r1, #176]
	b	.LBB49_29
.LBB49_16:
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #68]
	cmp	r0, #0
	beq	.LBB49_18
@ BB#17:
	movw	r0, #0
	ldr	r1, [r11, #-36]
	str	r0, [r1, #176]
	b	.LBB49_28
.LBB49_18:
	movw	r0, :lower16:lame_encode_frame.frac_SpF
	movt	r0, :upper16:lame_encode_frame.frac_SpF
	vldr	d16, [r0]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	beq	.LBB49_27
@ BB#19:
	vmov.f64	d16, #1.000000e+00
	movw	r0, :lower16:lame_encode_frame.frac_SpF
	movt	r0, :upper16:lame_encode_frame.frac_SpF
	movw	r1, :lower16:lame_encode_frame.slot_lag
	movt	r1, :upper16:lame_encode_frame.slot_lag
	vldr	d17, [r1]
	vldr	d18, [r0]
	vsub.f64	d16, d18, d16
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	ble	.LBB49_25
@ BB#20:
	movw	r0, #0
	movw	r1, :lower16:lame_encode_frame.slot_lag
	movt	r1, :upper16:lame_encode_frame.slot_lag
	movw	r2, :lower16:lame_encode_frame.frac_SpF
	movt	r2, :upper16:lame_encode_frame.frac_SpF
	vldr	d16, [r2]
	vldr	d17, [r1]
	vsub.f64	d16, d17, d16
	vstr	d16, [r1]
	ldr	r1, [r11, #-36]
	str	r0, [r1, #176]
	b	.LBB49_26
	.p2align	3
@ BB#21:
.LCPI49_5:
	.long	0                       @ double 0
	.long	0
	.p2align	3
@ BB#22:
.LCPI49_6:
	.long	3894859413              @ double 1.0000000000000001E-9
	.long	1041313291
	.p2align	3
@ BB#23:
.LCPI49_7:
	.long	0                       @ double 1000
	.long	1083129856
	.p2align	3
@ BB#24:
.LCPI49_8:
	.long	0                       @ double 700
	.long	1082515456
.LBB49_25:
	movw	r0, :lower16:lame_encode_frame.slot_lag
	movt	r0, :upper16:lame_encode_frame.slot_lag
	vmov.f64	d16, #1.000000e+00
	movw	r1, :lower16:lame_encode_frame.frac_SpF
	movt	r1, :upper16:lame_encode_frame.frac_SpF
	movw	r2, #1
	ldr	r3, [r11, #-36]
	str	r2, [r3, #176]
	vldr	d17, [r1]
	vsub.f64	d16, d16, d17
	vldr	d17, [r0]
	vadd.f64	d16, d17, d16
	vstr	d16, [r0]
.LBB49_26:
	b	.LBB49_27
.LBB49_27:
	b	.LBB49_28
.LBB49_28:
	b	.LBB49_29
.LBB49_29:
	b	.LBB49_30
.LBB49_30:
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #16]
	cmp	r0, #0
	bne	.LBB49_35
@ BB#31:
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #28]
	cmp	r0, #0
	bne	.LBB49_35
@ BB#32:
	movw	r0, #200
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #172]
	cmp	r1, #0
	movw	r1, #0
	moveq	r1, #1
	tst	r1, #1
	moveq	r0, #50
	str	r0, [sp, #264]
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #156]
	ldr	r1, [sp, #264]
	bl	__modsi3
	cmp	r0, #0
	bne	.LBB49_34
@ BB#33:
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #12]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #156]
	ldr	r2, [r11, #-36]
	ldr	r2, [r2, #160]
	ldr	r3, [r11, #-36]
	ldr	r3, [r3, #168]
	bl	timestatus
.LBB49_34:
	b	.LBB49_35
.LBB49_35:
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #252]
	cmp	r0, #0
	beq	.LBB49_49
@ BB#36:
	movw	r0, #0
	movw	r1, :lower16:lame_encode_frame.ms_ratio
	movt	r1, :upper16:lame_encode_frame.ms_ratio
	movw	r2, #3
	ldr	r3, [r11, #-36]
	ldr	r3, [r3, #180]
	sub	r3, r3, #1
	movw	r12, :lower16:lame_encode_frame.ms_ratio
	movt	r12, :upper16:lame_encode_frame.ms_ratio
	add	r3, r12, r3, lsl #3
	vldr	d16, [r3]
	vstr	d16, [sp, #288]
	str	r0, [sp, #316]
	str	r2, [sp, #152]          @ 4-byte Spill
	str	r1, [sp, #148]          @ 4-byte Spill
.LBB49_37:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB49_39 Depth 2
                                        @     Child Loop BB49_43 Depth 2
	ldr	r0, [sp, #316]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB49_48
@ BB#38:                                @   in Loop: Header=BB49_37 Depth=1
	movw	r0, #0
	str	r0, [sp, #320]
.LBB49_39:                              @   Parent Loop BB49_37 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #320]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB49_42
@ BB#40:                                @   in Loop: Header=BB49_39 Depth=2
	add	r0, sp, #256
	movw	r1, #2
	ldr	r2, [sp, #320]
	add	r3, sp, #396
	ldr	r3, [r3, r2, lsl #2]
	ldr	r12, [sp, #316]
	add	r12, r12, r12, lsl #3
	add	r3, r3, r12, lsl #7
	add	r3, r3, #608
	add	r12, sp, #256
	add	r2, r12, r2, lsl #2
	str	r3, [r2]
	str	r0, [sp, #144]          @ 4-byte Spill
	str	r1, [sp, #140]          @ 4-byte Spill
@ BB#41:                                @   in Loop: Header=BB49_39 Depth=2
	ldr	r0, [sp, #320]
	add	r0, r0, #1
	str	r0, [sp, #320]
	b	.LBB49_39
.LBB49_42:                              @   in Loop: Header=BB49_37 Depth=1
	add	r0, sp, #296
	add	r1, sp, #248
	add	r2, sp, #328
	movw	r3, #4
	ldr	r12, [r11, #-36]
	add	lr, sp, #256
	ldr	r4, [sp, #316]
	mov	r5, r4
	movw	r6, :lower16:lame_encode_frame.ms_ratio
	movt	r6, :upper16:lame_encode_frame.ms_ratio
	add	r6, r6, r4, lsl #3
	movw	r7, :lower16:lame_encode_frame.ms_ener_ratio
	movt	r7, :upper16:lame_encode_frame.ms_ener_ratio
	add	r7, r7, r4, lsl #3
	add	r10, sp, #5120
	add	r8, r10, #168
	add	r10, sp, #1024
	add	r9, r10, #360
	add	r10, sp, #360
	add	r10, r10, r4, lsl #4
	str	r0, [sp, #136]          @ 4-byte Spill
	add	r0, sp, #328
	add	r0, r0, r4, lsl #4
	str	r0, [sp, #132]          @ 4-byte Spill
	mov	r0, r12
	str	r1, [sp, #128]          @ 4-byte Spill
	mov	r1, lr
	str	r2, [sp, #124]          @ 4-byte Spill
	mov	r2, r5
	str	r3, [sp, #120]          @ 4-byte Spill
	mov	r3, r6
	ldr	r12, [sp, #136]         @ 4-byte Reload
	str	r12, [sp]
	str	r7, [sp, #4]
	str	r8, [sp, #8]
	str	r9, [sp, #12]
	str	r10, [sp, #16]
	ldr	lr, [sp, #132]          @ 4-byte Reload
	str	lr, [sp, #20]
	ldr	r4, [sp, #128]          @ 4-byte Reload
	str	r4, [sp, #24]
	bl	L3psycho_anal
	movw	r0, #0
	str	r0, [sp, #320]
.LBB49_43:                              @   Parent Loop BB49_37 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #320]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB49_46
@ BB#44:                                @   in Loop: Header=BB49_43 Depth=2
	movw	r0, #112
	movw	r1, :lower16:l3_side
	movt	r1, :upper16:l3_side
	add	r1, r1, #44
	movw	r2, #224
	add	r3, sp, #248
	movw	r12, #2
	ldr	lr, [sp, #320]
	add	r4, sp, #248
	add	lr, r4, lr, lsl #2
	ldr	lr, [lr]
	ldr	r4, [sp, #316]
	mul	r2, r4, r2
	add	r1, r1, r2
	ldr	r2, [sp, #320]
	mul	r0, r2, r0
	add	r0, r1, r0
	str	lr, [r0, #24]
	str	r3, [sp, #116]          @ 4-byte Spill
	str	r12, [sp, #112]         @ 4-byte Spill
@ BB#45:                                @   in Loop: Header=BB49_43 Depth=2
	ldr	r0, [sp, #320]
	add	r0, r0, #1
	str	r0, [sp, #320]
	b	.LBB49_43
.LBB49_46:                              @   in Loop: Header=BB49_37 Depth=1
	b	.LBB49_47
.LBB49_47:                              @   in Loop: Header=BB49_37 Depth=1
	ldr	r0, [sp, #316]
	add	r0, r0, #1
	str	r0, [sp, #316]
	b	.LBB49_37
.LBB49_48:
	b	.LBB49_58
.LBB49_49:
	movw	r0, #0
	str	r0, [sp, #316]
.LBB49_50:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB49_52 Depth 2
	ldr	r0, [sp, #316]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB49_57
@ BB#51:                                @   in Loop: Header=BB49_50 Depth=1
	movw	r0, #0
	str	r0, [sp, #320]
.LBB49_52:                              @   Parent Loop BB49_50 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #320]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB49_55
@ BB#53:                                @   in Loop: Header=BB49_52 Depth=2
	vldr	d16, .LCPI49_8
	movw	r0, #3
	ldr	r1, [sp, #316]
	rsb	r1, r1, r1, lsl #3
	movw	r2, :lower16:l3_side
	movt	r2, :upper16:l3_side
	add	r1, r2, r1, lsl #5
	ldr	r2, [sp, #320]
	rsb	r2, r2, r2, lsl #3
	add	r1, r1, r2, lsl #4
	mov	r2, #0
	str	r2, [r1, #68]
	ldr	r1, [sp, #316]
	add	r2, sp, #360
	add	r1, r2, r1, lsl #4
	ldr	r2, [sp, #320]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	str	r0, [sp, #108]          @ 4-byte Spill
@ BB#54:                                @   in Loop: Header=BB49_52 Depth=2
	ldr	r0, [sp, #320]
	add	r0, r0, #1
	str	r0, [sp, #320]
	b	.LBB49_52
.LBB49_55:                              @   in Loop: Header=BB49_50 Depth=1
	b	.LBB49_56
.LBB49_56:                              @   in Loop: Header=BB49_50 Depth=1
	ldr	r0, [sp, #316]
	add	r0, r0, #1
	str	r0, [sp, #316]
	b	.LBB49_50
.LBB49_57:
	b	.LBB49_58
.LBB49_58:
	movw	r0, #0
	str	r0, [sp, #316]
.LBB49_59:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB49_61 Depth 2
	ldr	r0, [sp, #316]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB49_69
@ BB#60:                                @   in Loop: Header=BB49_59 Depth=1
	movw	r0, #0
	str	r0, [sp, #320]
.LBB49_61:                              @   Parent Loop BB49_59 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #320]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB49_67
@ BB#62:                                @   in Loop: Header=BB49_61 Depth=2
	movw	r0, #0
	movw	r1, #112
	movw	r2, :lower16:l3_side
	movt	r2, :upper16:l3_side
	add	r2, r2, #44
	movw	r3, #224
	ldr	r12, [sp, #316]
	mul	r3, r12, r3
	add	r2, r2, r3
	ldr	r3, [sp, #320]
	mul	r1, r3, r1
	add	r1, r2, r1
	str	r1, [sp, #244]
	ldr	r1, [sp, #244]
	str	r0, [r1, #28]
	ldr	r0, [sp, #244]
	ldr	r0, [r0, #24]
	cmp	r0, #0
	bne	.LBB49_64
@ BB#63:                                @   in Loop: Header=BB49_61 Depth=2
	movw	r0, #0
	ldr	r1, [sp, #244]
	str	r0, [r1, #20]
	b	.LBB49_65
.LBB49_64:                              @   in Loop: Header=BB49_61 Depth=2
	movw	r0, #1
	ldr	r1, [sp, #244]
	str	r0, [r1, #20]
.LBB49_65:                              @   in Loop: Header=BB49_61 Depth=2
	b	.LBB49_66
.LBB49_66:                              @   in Loop: Header=BB49_61 Depth=2
	ldr	r0, [sp, #320]
	add	r0, r0, #1
	str	r0, [sp, #320]
	b	.LBB49_61
.LBB49_67:                              @   in Loop: Header=BB49_59 Depth=1
	b	.LBB49_68
.LBB49_68:                              @   in Loop: Header=BB49_59 Depth=1
	ldr	r0, [sp, #316]
	add	r0, r0, #1
	str	r0, [sp, #316]
	b	.LBB49_59
.LBB49_69:
	movw	r0, :lower16:l3_side
	movt	r0, :upper16:l3_side
	add	r4, sp, #16384
	add	r3, r4, #2032
	ldr	r1, [r11, #-36]
	ldr	r2, [sp, #396]
	ldr	r12, [sp, #400]
	str	r0, [sp, #104]          @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	mov	r2, r12
	ldr	r12, [sp, #104]         @ 4-byte Reload
	str	r12, [sp]
	bl	mdct_sub48
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #32]
	cmp	r0, #1
	movw	r0, #0
	moveq	r0, #1
	and	r0, r0, #1
	str	r0, [sp, #304]
	ldr	r0, [sp, #304]
	cmp	r0, #0
	beq	.LBB49_73
@ BB#70:
	movw	r0, #0
	movw	r1, :lower16:l3_side
	movt	r1, :upper16:l3_side
	ldr	r2, [r1, #68]
	ldr	r1, [r1, #180]
	cmp	r2, r1
	str	r0, [sp, #100]          @ 4-byte Spill
	bne	.LBB49_72
@ BB#71:
	movw	r0, :lower16:l3_side
	movt	r0, :upper16:l3_side
	ldr	r1, [r0, #292]
	ldr	r0, [r0, #404]
	cmp	r1, r0
	movw	r0, #0
	moveq	r0, #1
	str	r0, [sp, #100]          @ 4-byte Spill
.LBB49_72:
	ldr	r0, [sp, #100]          @ 4-byte Reload
	and	r0, r0, #1
	str	r0, [sp, #304]
.LBB49_73:
	ldr	r0, [sp, #304]
	cmp	r0, #0
	beq	.LBB49_77
@ BB#74:
	vldr	d16, .LCPI49_4
	vmov.f64	d17, #5.000000e-01
	movw	r0, :lower16:lame_encode_frame.ms_ener_ratio
	movt	r0, :upper16:lame_encode_frame.ms_ener_ratio
	vmov.f64	d18, #2.500000e-01
	movw	r1, :lower16:lame_encode_frame.ms_ratio
	movt	r1, :upper16:lame_encode_frame.ms_ratio
	vldr	d19, [r1]
	vldr	d20, [r1, #8]
	vadd.f64	d19, d19, d20
	vldr	d20, [sp, #288]
	vadd.f64	d19, d19, d20
	vldr	d20, [sp, #296]
	vadd.f64	d19, d19, d20
	vmul.f64	d18, d18, d19
	vstr	d18, [sp, #232]
	vldr	d18, [r0]
	vldr	d19, [r0, #8]
	vadd.f64	d18, d18, d19
	vmul.f64	d17, d17, d18
	vstr	d17, [sp, #224]
	vldr	d17, [sp, #232]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB49_76
@ BB#75:
	movw	r0, #2
	ldr	r1, [r11, #-36]
	str	r0, [r1, #208]
.LBB49_76:
	b	.LBB49_77
.LBB49_77:
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #40]
	cmp	r0, #0
	beq	.LBB49_79
@ BB#78:
	movw	r0, #2
	ldr	r1, [r11, #-36]
	str	r0, [r1, #208]
.LBB49_79:
	movw	r0, #2
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #208]
	cmp	r0, r1
	bne	.LBB49_81
@ BB#80:
	add	r0, sp, #328
	add	lr, sp, #1024
	add	r1, lr, #360
	str	r1, [sp, #1380]
	str	r0, [sp, #324]
	b	.LBB49_82
.LBB49_81:
	add	r0, sp, #360
	add	lr, sp, #5120
	add	r1, lr, #168
	str	r1, [sp, #1380]
	str	r0, [sp, #324]
.LBB49_82:
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #84]
	cmp	r0, #0
	beq	.LBB49_84
@ BB#83:
	movw	r2, :lower16:lame_encode_frame.ms_ratio
	movt	r2, :upper16:lame_encode_frame.ms_ratio
	movw	r0, :lower16:l3_side
	movt	r0, :upper16:l3_side
	add	r1, sp, #404
	add	r6, sp, #8192
	add	r3, r6, #1008
	add	r6, sp, #16384
	add	r12, r6, #2032
	ldr	lr, [r11, #-36]
	ldr	r4, [sp, #324]
	ldr	r5, [sp, #1380]
	str	r0, [sp, #96]           @ 4-byte Spill
	mov	r0, lr
	str	r1, [sp, #92]           @ 4-byte Spill
	mov	r1, r4
	str	r3, [sp, #88]           @ 4-byte Spill
	mov	r3, r12
	str	r5, [sp]
	ldr	r12, [sp, #96]          @ 4-byte Reload
	str	r12, [sp, #4]
	ldr	lr, [sp, #88]           @ 4-byte Reload
	str	lr, [sp, #8]
	ldr	r4, [sp, #92]           @ 4-byte Reload
	str	r4, [sp, #12]
	bl	VBR_iteration_loop
	b	.LBB49_85
.LBB49_84:
	movw	r2, :lower16:lame_encode_frame.ms_ratio
	movt	r2, :upper16:lame_encode_frame.ms_ratio
	movw	r0, :lower16:l3_side
	movt	r0, :upper16:l3_side
	add	r1, sp, #404
	add	r6, sp, #8192
	add	r3, r6, #1008
	add	r6, sp, #16384
	add	r12, r6, #2032
	ldr	lr, [r11, #-36]
	ldr	r4, [sp, #324]
	ldr	r5, [sp, #1380]
	str	r0, [sp, #84]           @ 4-byte Spill
	mov	r0, lr
	str	r1, [sp, #80]           @ 4-byte Spill
	mov	r1, r4
	str	r3, [sp, #76]           @ 4-byte Spill
	mov	r3, r12
	str	r5, [sp]
	ldr	r12, [sp, #84]          @ 4-byte Reload
	str	r12, [sp, #4]
	ldr	lr, [sp, #76]           @ 4-byte Reload
	str	lr, [sp, #8]
	ldr	r4, [sp, #80]           @ 4-byte Reload
	str	r4, [sp, #12]
	bl	iteration_loop
.LBB49_85:
	add	r1, sp, #308
	add	r2, sp, #312
	ldr	r0, [r11, #-36]
	bl	getframebits
	movw	r3, :lower16:l3_side
	movt	r3, :upper16:l3_side
	movw	r0, :lower16:bs.172
	movt	r0, :upper16:bs.172
	add	r1, sp, #404
	add	r4, sp, #8192
	add	r2, r4, #1008
	ldr	lr, [r11, #-36]
	ldr	r12, [sp, #308]
	str	r0, [sp, #72]           @ 4-byte Spill
	mov	r0, lr
	str	r1, [sp, #68]           @ 4-byte Spill
	mov	r1, r12
	ldr	r12, [sp, #68]          @ 4-byte Reload
	str	r12, [sp]
	ldr	lr, [sp, #72]           @ 4-byte Reload
	str	lr, [sp, #4]
	bl	III_format_bitstream
	movw	r0, :lower16:lame_encode_frame.bitsPerSlot
	movt	r0, :upper16:lame_encode_frame.bitsPerSlot
	movw	r1, :lower16:lame_encode_frame.frameBits
	movt	r1, :upper16:lame_encode_frame.frameBits
	movw	r2, :lower16:lame_encode_frame.sentBits
	movt	r2, :upper16:lame_encode_frame.sentBits
	movw	r3, :lower16:bs.172
	movt	r3, :upper16:bs.172
	ldr	r3, [r3, #20]
	ldr	r2, [r2]
	sub	r2, r3, r2
	str	r2, [r1]
	ldr	r1, [r1]
	ldr	r0, [r0]
	str	r0, [sp, #64]           @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #64]           @ 4-byte Reload
	bl	__umodsi3
	cmp	r0, #0
	beq	.LBB49_87
@ BB#86:
	movw	r1, :lower16:.L.str.18.191
	movt	r1, :upper16:.L.str.18.191
	movw	r0, :lower16:lame_encode_frame.bitsPerSlot
	movt	r0, :upper16:lame_encode_frame.bitsPerSlot
	movw	r2, :lower16:lame_encode_frame.frameBits
	movt	r2, :upper16:lame_encode_frame.frameBits
	movw	r3, :lower16:stderr
	movt	r3, :upper16:stderr
	ldr	r3, [r3]
	ldr	r12, [r2]
	ldr	lr, [r2]
	ldr	r4, [r0]
	str	r0, [sp, #60]           @ 4-byte Spill
	mov	r0, lr
	str	r1, [sp, #56]           @ 4-byte Spill
	mov	r1, r4
	str	r3, [sp, #52]           @ 4-byte Spill
	str	r12, [sp, #48]          @ 4-byte Spill
	str	r2, [sp, #44]           @ 4-byte Spill
	bl	__udivsi3
	ldr	r1, [sp, #44]           @ 4-byte Reload
	ldr	r2, [r1]
	ldr	r3, [sp, #60]           @ 4-byte Reload
	ldr	r1, [r3]
	str	r0, [sp, #40]           @ 4-byte Spill
	mov	r0, r2
	bl	__umodsi3
	ldr	r1, [sp, #52]           @ 4-byte Reload
	str	r0, [sp, #36]           @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #56]           @ 4-byte Reload
	ldr	r2, [sp, #48]           @ 4-byte Reload
	ldr	r3, [sp, #40]           @ 4-byte Reload
	ldr	r12, [sp, #36]          @ 4-byte Reload
	str	r12, [sp]
	bl	fprintf
	str	r0, [sp, #32]           @ 4-byte Spill
.LBB49_87:
	movw	r2, :lower16:bs.172
	movt	r2, :upper16:bs.172
	movw	r0, :lower16:lame_encode_frame.sentBits
	movt	r0, :upper16:lame_encode_frame.sentBits
	movw	r1, :lower16:lame_encode_frame.frameBits
	movt	r1, :upper16:lame_encode_frame.frameBits
	ldr	r1, [r1]
	ldr	r3, [r0]
	add	r1, r3, r1
	str	r1, [r0]
	ldr	r0, [r11, #-52]
	ldr	r1, [r11, #-56]
	bl	copy_buffer
	ldr	r1, [sp, #212]          @ 4-byte Reload
	str	r0, [r1]
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #20]
	cmp	r0, #0
	beq	.LBB49_89
@ BB#88:
	movw	r0, #3
	movw	r1, #8
	movw	r2, :lower16:lame_encode_frame.sentBits
	movt	r2, :upper16:lame_encode_frame.sentBits
	ldr	r2, [r2]
	str	r0, [sp, #28]           @ 4-byte Spill
	mov	r0, r2
	bl	__udivsi3
	bl	AddVbrFrame
.LBB49_89:
	ldr	r0, [r11, #-36]
	ldr	r1, [r0, #156]
	add	r1, r1, #1
	str	r1, [r0, #156]
	ldr	r0, [sp, #212]          @ 4-byte Reload
	ldr	r0, [r0]
	sub	sp, r11, #28
	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
	.p2align	3
@ BB#90:
.LCPI49_4:
	.long	1717986918              @ double 0.34999999999999998
	.long	1071015526
.Lfunc_end49:
	.size	lame_encode_frame, .Lfunc_end49-lame_encode_frame
	.cantunwind
	.fnend

	.globl	fill_buffer_resample
	.p2align	3
	.type	fill_buffer_resample,%function
	.code	32                      @ @fill_buffer_resample
fill_buffer_resample:
	.fnstart
@ BB#0:
	push	{r4, r5, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #264
	ldr	r12, [r11, #16]
	ldr	lr, [r11, #12]
	ldr	r4, [r11, #8]
	movw	r5, #0
	str	r0, [r11, #-12]
	str	r1, [r11, #-16]
	str	r2, [r11, #-20]
	str	r3, [r11, #-24]
	str	r4, [r11, #-28]
	str	lr, [r11, #-32]
	str	r12, [r11, #-36]
	str	r5, [r11, #-44]
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #156]
	cmp	r0, #0
	bne	.LBB50_3
@ BB#1:
	movw	r0, :lower16:fill_buffer_resample.init
	movt	r0, :upper16:fill_buffer_resample.init
	movw	r1, #2
	ldr	r2, [r11, #-36]
	movw	r3, :lower16:fill_buffer_resample.init
	movt	r3, :upper16:fill_buffer_resample.init
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	cmp	r2, #0
	str	r0, [r11, #-116]        @ 4-byte Spill
	str	r1, [r11, #-120]        @ 4-byte Spill
	bne	.LBB50_3
@ BB#2:
	movw	r0, #0
	movw	r1, #10
	movw	r2, :lower16:fill_buffer_resample.inbuf_old
	movt	r2, :upper16:fill_buffer_resample.inbuf_old
	vldr	d16, .LCPI50_3
	movw	r3, :lower16:fill_buffer_resample.itime
	movt	r3, :upper16:fill_buffer_resample.itime
	movw	r12, #3
	ldr	lr, [r11, #-36]
	movw	r4, :lower16:fill_buffer_resample.init
	movt	r4, :upper16:fill_buffer_resample.init
	mov	r5, #1
	str	r5, [r4, lr, lsl #2]
	ldr	lr, [r11, #-36]
	movw	r4, :lower16:fill_buffer_resample.itime
	movt	r4, :upper16:fill_buffer_resample.itime
	add	lr, r4, lr, lsl #3
	vstr	d16, [lr]
	ldr	lr, [r11, #-36]
	mul	lr, lr, r1
	add	r2, r2, lr
	str	r0, [r11, #-124]        @ 4-byte Spill
	mov	r0, r2
	ldr	r2, [r11, #-124]        @ 4-byte Reload
	and	lr, r2, #255
	str	r1, [r11, #-128]        @ 4-byte Spill
	mov	r1, lr
	ldr	r2, [r11, #-128]        @ 4-byte Reload
	str	r12, [r11, #-132]       @ 4-byte Spill
	str	r3, [sp, #136]          @ 4-byte Spill
	bl	memset
.LBB50_3:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #156]
	cmp	r0, #0
	beq	.LBB50_5
@ BB#4:
	movw	r0, #0
	movw	r1, :lower16:fill_buffer_resample.init
	movt	r1, :upper16:fill_buffer_resample.init
	movw	r2, #2
	ldr	r3, [r11, #-36]
	movw	r12, :lower16:fill_buffer_resample.init
	movt	r12, :upper16:fill_buffer_resample.init
	add	r3, r12, r3, lsl #2
	str	r0, [r3]
	str	r2, [sp, #132]          @ 4-byte Spill
	str	r1, [sp, #128]          @ 4-byte Spill
.LBB50_5:
	movw	r0, #0
	vldr	d16, .LCPI50_4
	vmov.f64	d17, #5.000000e-01
	ldr	r1, [r11, #-12]
	vldr	s0, [r1, #196]
	vcvt.f64.f32	d18, s0
	ldr	r1, [r11, #-12]
	vldr	s0, [r1, #196]
	vcvt.f64.f32	d19, s0
	vadd.f64	d17, d17, d19
	vmov	r1, r2, d17
	str	r0, [sp, #124]          @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	vstr	d18, [sp, #112]         @ 8-byte Spill
	vstr	d16, [sp, #104]         @ 8-byte Spill
	bl	floor
	vmov	d16, r0, r1
	vldr	d17, [sp, #112]         @ 8-byte Reload
	vsub.f64	d16, d17, d16
	vabs.f64	d16, d16
	vldr	d17, [sp, #104]         @ 8-byte Reload
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	movw	r0, #0
	movmi	r0, #1
	and	r0, r0, #1
	str	r0, [r11, #-52]
	ldr	r0, [sp, #124]          @ 4-byte Reload
	str	r0, [r11, #-48]
.LBB50_6:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-48]
	ldr	r1, [r11, #-20]
	cmp	r0, r1
	bge	.LBB50_34
@ BB#7:                                 @   in Loop: Header=BB50_6 Depth=1
	movw	r0, :lower16:fill_buffer_resample.itime
	movt	r0, :upper16:fill_buffer_resample.itime
	movw	r1, #3
	vldr	s0, [r11, #-48]
	vcvt.f32.s32	s0, s0
	ldr	r2, [r11, #-12]
	vldr	s2, [r2, #196]
	vmul.f32	s0, s0, s2
	vcvt.f64.f32	d16, s0
	vstr	d16, [r11, #-112]
	ldr	r2, [r11, #-36]
	movw	r3, :lower16:fill_buffer_resample.itime
	movt	r3, :upper16:fill_buffer_resample.itime
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	vsub.f64	d16, d16, d17
	vmov	r2, r3, d16
	str	r0, [sp, #100]          @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #96]           @ 4-byte Spill
	mov	r1, r3
	bl	floor
	vmov	d16, r0, r1
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	str	r0, [r11, #-44]
	ldr	r0, [r11, #-44]
	add	r0, r0, #2
	ldr	r1, [r11, #-28]
	cmp	r0, r1
	blt	.LBB50_9
@ BB#8:
	b	.LBB50_34
.LBB50_9:                               @   in Loop: Header=BB50_6 Depth=1
	vmov.f64	d16, #1.000000e+00
	movw	r0, :lower16:fill_buffer_resample.itime
	movt	r0, :upper16:fill_buffer_resample.itime
	movw	r1, #3
	vldr	d17, [r11, #-112]
	ldr	r2, [r11, #-36]
	movw	r3, :lower16:fill_buffer_resample.itime
	movt	r3, :upper16:fill_buffer_resample.itime
	add	r2, r3, r2, lsl #3
	vldr	d18, [r2]
	ldr	r2, [r11, #-44]
	vmov	s0, r2
	vcvt.f64.s32	d19, s0
	vadd.f64	d18, d18, d19
	vsub.f64	d17, d17, d18
	vstr	d17, [r11, #-88]
	vldr	d17, [r11, #-88]
	vsub.f64	d16, d17, d16
	vstr	d16, [r11, #-96]
	ldr	r2, [r11, #-44]
	cmp	r2, #0
	str	r1, [sp, #92]           @ 4-byte Spill
	str	r0, [sp, #88]           @ 4-byte Spill
	bge	.LBB50_11
@ BB#10:                                @   in Loop: Header=BB50_6 Depth=1
	movw	r0, #1
	ldr	r1, [r11, #-36]
	add	r1, r1, r1, lsl #2
	movw	r2, :lower16:fill_buffer_resample.inbuf_old
	movt	r2, :upper16:fill_buffer_resample.inbuf_old
	add	r1, r2, r1, lsl #1
	ldr	r2, [r11, #-44]
	add	r2, r2, #5
	add	r1, r1, r2, lsl #1
	ldrsh	r1, [r1]
	str	r0, [sp, #84]           @ 4-byte Spill
	str	r1, [sp, #80]           @ 4-byte Spill
	b	.LBB50_12
.LBB50_11:                              @   in Loop: Header=BB50_6 Depth=1
	movw	r0, #1
	ldr	r1, [r11, #-24]
	ldr	r2, [r11, #-44]
	add	r1, r1, r2, lsl #1
	ldrsh	r1, [r1]
	str	r0, [sp, #76]           @ 4-byte Spill
	str	r1, [sp, #80]           @ 4-byte Spill
.LBB50_12:                              @   in Loop: Header=BB50_6 Depth=1
	ldr	r0, [sp, #80]           @ 4-byte Reload
	str	r0, [r11, #-64]
	ldr	r0, [r11, #-44]
	add	r0, r0, #1
	cmp	r0, #0
	bge	.LBB50_14
@ BB#13:                                @   in Loop: Header=BB50_6 Depth=1
	movw	r0, #1
	ldr	r1, [r11, #-36]
	add	r1, r1, r1, lsl #2
	movw	r2, :lower16:fill_buffer_resample.inbuf_old
	movt	r2, :upper16:fill_buffer_resample.inbuf_old
	add	r1, r2, r1, lsl #1
	ldr	r2, [r11, #-44]
	add	r2, r2, #6
	add	r1, r1, r2, lsl #1
	ldrsh	r1, [r1]
	str	r0, [sp, #72]           @ 4-byte Spill
	str	r1, [sp, #68]           @ 4-byte Spill
	b	.LBB50_15
.LBB50_14:                              @   in Loop: Header=BB50_6 Depth=1
	movw	r0, #1
	ldr	r1, [r11, #-24]
	ldr	r2, [r11, #-44]
	add	r2, r2, #1
	add	r1, r1, r2, lsl #1
	ldrsh	r1, [r1]
	str	r0, [sp, #64]           @ 4-byte Spill
	str	r1, [sp, #68]           @ 4-byte Spill
.LBB50_15:                              @   in Loop: Header=BB50_6 Depth=1
	ldr	r0, [sp, #68]           @ 4-byte Reload
	str	r0, [r11, #-68]
	ldr	r0, [r11, #-52]
	cmp	r0, #0
	beq	.LBB50_17
@ BB#16:                                @   in Loop: Header=BB50_6 Depth=1
	movw	r0, #1
	vldr	s0, [r11, #-68]
	vcvt.f64.s32	d16, s0
	vldr	d17, [r11, #-88]
	vmul.f64	d16, d16, d17
	vldr	s0, [r11, #-64]
	vcvt.f64.s32	d17, s0
	vldr	d18, [r11, #-96]
	vmul.f64	d17, d17, d18
	vsub.f64	d16, d16, d17
	vmov.f64	d17, #5.000000e-01
	vadd.f64	d16, d16, d17
	vmov	r1, r2, d16
	str	r0, [sp, #60]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	floor
	vmov	d16, r0, r1
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	ldr	r1, [r11, #-16]
	ldr	r2, [r11, #-48]
	add	r1, r1, r2, lsl #1
	strh	r0, [r1]
	b	.LBB50_32
.LBB50_17:                              @   in Loop: Header=BB50_6 Depth=1
	vmov.f64	d16, #2.000000e+00
	vmov.f64	d17, #1.000000e+00
	vldr	d18, [r11, #-88]
	vadd.f64	d17, d18, d17
	vstr	d17, [r11, #-80]
	vldr	d17, [r11, #-88]
	vsub.f64	d16, d17, d16
	vstr	d16, [r11, #-104]
	ldr	r0, [r11, #-44]
	sub	r0, r0, #1
	cmp	r0, #0
	bge	.LBB50_21
@ BB#18:                                @   in Loop: Header=BB50_6 Depth=1
	movw	r0, #1
	ldr	r1, [r11, #-36]
	add	r1, r1, r1, lsl #2
	movw	r2, :lower16:fill_buffer_resample.inbuf_old
	movt	r2, :upper16:fill_buffer_resample.inbuf_old
	add	r1, r2, r1, lsl #1
	ldr	r2, [r11, #-44]
	add	r2, r2, #4
	add	r1, r1, r2, lsl #1
	ldrsh	r1, [r1]
	str	r0, [sp, #56]           @ 4-byte Spill
	str	r1, [sp, #52]           @ 4-byte Spill
	b	.LBB50_22
	.p2align	3
@ BB#19:
.LCPI50_3:
	.long	0                       @ double 0
	.long	0
	.p2align	3
@ BB#20:
.LCPI50_4:
	.long	3944497965              @ double 1.0E-4
	.long	1058682594
.LBB50_21:                              @   in Loop: Header=BB50_6 Depth=1
	movw	r0, #1
	ldr	r1, [r11, #-24]
	ldr	r2, [r11, #-44]
	sub	r2, r2, #1
	add	r1, r1, r2, lsl #1
	ldrsh	r1, [r1]
	str	r0, [sp, #48]           @ 4-byte Spill
	str	r1, [sp, #52]           @ 4-byte Spill
.LBB50_22:                              @   in Loop: Header=BB50_6 Depth=1
	ldr	r0, [sp, #52]           @ 4-byte Reload
	str	r0, [r11, #-60]
	ldr	r0, [r11, #-44]
	add	r0, r0, #2
	cmp	r0, #0
	bge	.LBB50_24
@ BB#23:                                @   in Loop: Header=BB50_6 Depth=1
	movw	r0, #1
	ldr	r1, [r11, #-36]
	add	r1, r1, r1, lsl #2
	movw	r2, :lower16:fill_buffer_resample.inbuf_old
	movt	r2, :upper16:fill_buffer_resample.inbuf_old
	add	r1, r2, r1, lsl #1
	ldr	r2, [r11, #-44]
	add	r2, r2, #7
	add	r1, r1, r2, lsl #1
	ldrsh	r1, [r1]
	str	r0, [sp, #44]           @ 4-byte Spill
	str	r1, [sp, #40]           @ 4-byte Spill
	b	.LBB50_25
.LBB50_24:                              @   in Loop: Header=BB50_6 Depth=1
	movw	r0, #1
	ldr	r1, [r11, #-24]
	ldr	r2, [r11, #-44]
	add	r2, r2, #2
	add	r1, r1, r2, lsl #1
	ldrsh	r1, [r1]
	str	r0, [sp, #36]           @ 4-byte Spill
	str	r1, [sp, #40]           @ 4-byte Spill
.LBB50_25:                              @   in Loop: Header=BB50_6 Depth=1
	ldr	r0, [sp, #40]           @ 4-byte Reload
	movw	r1, #32767
	vmov.f64	d16, #6.000000e+00
	vmov.f64	d17, #2.000000e+00
	vmov.f64	d18, #5.000000e-01
	movw	r2, #0
	str	r0, [r11, #-72]
	ldr	r0, [r11, #-60]
	sub	r0, r2, r0
	vmov	s0, r0
	vcvt.f64.s32	d19, s0
	vldr	d20, [r11, #-88]
	vmul.f64	d19, d19, d20
	vldr	d20, [r11, #-96]
	vmul.f64	d19, d19, d20
	vldr	d20, [r11, #-104]
	vmul.f64	d19, d19, d20
	vdiv.f64	d19, d19, d16
	vadd.f64	d18, d18, d19
	ldr	r0, [r11, #-64]
	vmov	s0, r0
	vcvt.f64.s32	d19, s0
	vldr	d20, [r11, #-80]
	vmul.f64	d19, d19, d20
	vldr	d20, [r11, #-96]
	vmul.f64	d19, d19, d20
	vldr	d20, [r11, #-104]
	vmul.f64	d19, d19, d20
	vdiv.f64	d19, d19, d17
	vadd.f64	d18, d18, d19
	ldr	r0, [r11, #-68]
	vmov	s0, r0
	vcvt.f64.s32	d19, s0
	vldr	d20, [r11, #-80]
	vmul.f64	d19, d19, d20
	vldr	d20, [r11, #-88]
	vmul.f64	d19, d19, d20
	vldr	d20, [r11, #-104]
	vmul.f64	d19, d19, d20
	vdiv.f64	d17, d19, d17
	vsub.f64	d17, d18, d17
	ldr	r0, [r11, #-72]
	vmov	s0, r0
	vcvt.f64.s32	d18, s0
	vldr	d19, [r11, #-80]
	vmul.f64	d18, d18, d19
	vldr	d19, [r11, #-88]
	vmul.f64	d18, d18, d19
	vldr	d19, [r11, #-96]
	vmul.f64	d18, d18, d19
	vdiv.f64	d16, d18, d16
	vadd.f64	d16, d17, d16
	vmov	r0, r2, d16
	str	r1, [sp, #32]           @ 4-byte Spill
	mov	r1, r2
	bl	floor
	vmov	d16, r0, r1
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	str	r0, [r11, #-56]
	ldr	r0, [r11, #-56]
	ldr	r1, [sp, #32]           @ 4-byte Reload
	cmp	r0, r1
	ble	.LBB50_27
@ BB#26:                                @   in Loop: Header=BB50_6 Depth=1
	movw	r0, #32767
	movw	r1, #1
	ldr	r2, [r11, #-16]
	ldr	r3, [r11, #-48]
	add	r2, r2, r3, lsl #1
	strh	r0, [r2]
	str	r1, [sp, #28]           @ 4-byte Spill
	b	.LBB50_31
.LBB50_27:                              @   in Loop: Header=BB50_6 Depth=1
	ldr	r0, .LCPI50_2
	ldr	r1, [r11, #-56]
	cmp	r1, r0
	bge	.LBB50_29
@ BB#28:                                @   in Loop: Header=BB50_6 Depth=1
	movw	r0, #32769
	movw	r1, #1
	ldr	r2, [r11, #-16]
	ldr	r3, [r11, #-48]
	add	r2, r2, r3, lsl #1
	strh	r0, [r2]
	str	r1, [sp, #24]           @ 4-byte Spill
	b	.LBB50_30
.LBB50_29:                              @   in Loop: Header=BB50_6 Depth=1
	movw	r0, #1
	ldr	r1, [r11, #-56]
	ldr	r2, [r11, #-16]
	ldr	r3, [r11, #-48]
	add	r2, r2, r3, lsl #1
	strh	r1, [r2]
	str	r0, [sp, #20]           @ 4-byte Spill
.LBB50_30:                              @   in Loop: Header=BB50_6 Depth=1
	b	.LBB50_31
.LBB50_31:                              @   in Loop: Header=BB50_6 Depth=1
	b	.LBB50_32
.LBB50_32:                              @   in Loop: Header=BB50_6 Depth=1
	b	.LBB50_33
.LBB50_33:                              @   in Loop: Header=BB50_6 Depth=1
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB50_6
.LBB50_34:
	ldr	r0, [r11, #-28]
	ldr	r1, [r11, #-44]
	add	r1, r1, #2
	cmp	r0, r1
	bge	.LBB50_36
@ BB#35:
	ldr	r0, [r11, #-28]
	str	r0, [sp, #16]           @ 4-byte Spill
	b	.LBB50_37
.LBB50_36:
	ldr	r0, [r11, #-44]
	add	r0, r0, #2
	str	r0, [sp, #16]           @ 4-byte Spill
.LBB50_37:
	ldr	r0, [sp, #16]           @ 4-byte Reload
	movw	r1, #0
	movw	r2, :lower16:fill_buffer_resample.itime
	movt	r2, :upper16:fill_buffer_resample.itime
	movw	r3, #3
	ldr	r12, [r11, #-32]
	str	r0, [r12]
	ldr	r0, [r11, #-32]
	vldr	s0, [r0]
	vcvt.f32.s32	s0, s0
	vldr	s2, [r11, #-48]
	vcvt.f32.s32	s2, s2
	ldr	r0, [r11, #-12]
	vldr	s4, [r0, #196]
	vmul.f32	s2, s2, s4
	vsub.f32	s0, s0, s2
	vcvt.f64.f32	d16, s0
	ldr	r0, [r11, #-36]
	movw	r12, :lower16:fill_buffer_resample.itime
	movt	r12, :upper16:fill_buffer_resample.itime
	add	r0, r12, r0, lsl #3
	vldr	d17, [r0]
	vadd.f64	d16, d17, d16
	vstr	d16, [r0]
	str	r1, [r11, #-40]
	str	r3, [sp, #12]           @ 4-byte Spill
	str	r2, [sp, #8]            @ 4-byte Spill
.LBB50_38:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-40]
	cmp	r0, #5
	bge	.LBB50_41
@ BB#39:                                @   in Loop: Header=BB50_38 Depth=1
	movw	r0, #1
	ldr	r1, [r11, #-24]
	ldr	r2, [r11, #-32]
	ldr	r2, [r2]
	ldr	r3, [r11, #-40]
	add	r2, r2, r3
	add	r1, r1, r2, lsl #1
	ldrh	r1, [r1, #-10]
	ldr	r2, [r11, #-36]
	add	r2, r2, r2, lsl #2
	movw	r12, :lower16:fill_buffer_resample.inbuf_old
	movt	r12, :upper16:fill_buffer_resample.inbuf_old
	add	r2, r12, r2, lsl #1
	add	r2, r2, r3, lsl #1
	strh	r1, [r2]
	str	r0, [sp, #4]            @ 4-byte Spill
@ BB#40:                                @   in Loop: Header=BB50_38 Depth=1
	ldr	r0, [r11, #-40]
	add	r0, r0, #1
	str	r0, [r11, #-40]
	b	.LBB50_38
.LBB50_41:
	ldr	r0, [r11, #-48]
	sub	sp, r11, #8
	pop	{r4, r5, r11, pc}
	.p2align	2
@ BB#42:
.LCPI50_2:
	.long	4294934529              @ 0xffff8001
.Lfunc_end50:
	.size	fill_buffer_resample, .Lfunc_end50-fill_buffer_resample
	.cantunwind
	.fnend

	.globl	fill_buffer
	.p2align	2
	.type	fill_buffer,%function
	.code	32                      @ @fill_buffer
fill_buffer:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #40
	ldr	r12, [r11, #8]
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [r11, #-12]
	str	r3, [r11, #-16]
	str	r12, [sp, #20]
	ldr	r0, [r11, #-12]
	ldr	r1, [sp, #20]
	cmp	r0, r1
	bge	.LBB51_2
@ BB#1:
	ldr	r0, [r11, #-12]
	str	r0, [sp, #12]           @ 4-byte Spill
	b	.LBB51_3
.LBB51_2:
	ldr	r0, [sp, #20]
	str	r0, [sp, #12]           @ 4-byte Spill
.LBB51_3:
	ldr	r0, [sp, #12]           @ 4-byte Reload
	movw	r1, #1
	str	r0, [sp, #16]
	ldr	r2, [r11, #-8]
	ldr	r3, [r11, #-16]
	mov	r12, r0
	lsl	r0, r0, #1
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #4]            @ 4-byte Spill
	mov	r1, r3
	ldr	r2, [sp, #8]            @ 4-byte Reload
	str	r12, [sp]               @ 4-byte Spill
	bl	memcpy
	ldr	r0, [sp, #16]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end51:
	.size	fill_buffer, .Lfunc_end51-fill_buffer
	.cantunwind
	.fnend

	.globl	lame_encode_buffer
	.p2align	2
	.type	lame_encode_buffer,%function
	.code	32                      @ @lame_encode_buffer
lame_encode_buffer:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r10, r11, lr}
	add	r11, sp, #16
	sub	sp, sp, #168
	ldr	r12, [r11, #12]
	ldr	lr, [r11, #8]
	movw	r4, #1
	movw	r5, #3056
	movw	r6, #0
	str	r0, [r11, #-24]
	str	r1, [r11, #-28]
	str	r2, [r11, #-32]
	str	r3, [r11, #-36]
	str	lr, [r11, #-40]
	str	r12, [r11, #-44]
	str	r6, [r11, #-48]
	ldr	r0, [r11, #-28]
	str	r0, [r11, #-72]
	ldr	r0, [r11, #-32]
	str	r0, [r11, #-68]
	ldr	r0, [r11, #-24]
	ldr	r0, [r0, #168]
	add	r0, r0, #1024
	sub	r0, r0, #272
	str	r0, [r11, #-64]
	ldr	r0, [r11, #-64]
	cmp	r5, r0
	str	r4, [r11, #-84]         @ 4-byte Spill
	bge	.LBB52_2
@ BB#1:
	movw	r0, :lower16:.L.str.19.192
	movt	r0, :upper16:.L.str.19.192
	movw	r1, :lower16:.L.str.17.190
	movt	r1, :upper16:.L.str.17.190
	movw	r2, #995
	movw	r3, :lower16:.L__func__.lame_encode_buffer
	movt	r3, :upper16:.L__func__.lame_encode_buffer
	bl	__assert_fail
	movw	r0, #0
	str	r0, [r11, #-84]         @ 4-byte Spill
.LBB52_2:
	ldr	r0, [r11, #-84]         @ 4-byte Reload
	ldr	r1, [r11, #-24]
	ldr	r1, [r1, #156]
	cmp	r1, #0
	str	r0, [r11, #-88]         @ 4-byte Spill
	bne	.LBB52_5
@ BB#3:
	movw	r0, :lower16:lame_encode_buffer.frame_buffered
	movt	r0, :upper16:lame_encode_buffer.frame_buffered
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LBB52_5
@ BB#4:
	movw	r0, #752
	movw	r1, :lower16:mf_size
	movt	r1, :upper16:mf_size
	movw	r2, #1088
	movw	r3, :lower16:mf_samples_to_encode
	movt	r3, :upper16:mf_samples_to_encode
	movw	r12, #1
	movw	lr, :lower16:lame_encode_buffer.frame_buffered
	movt	lr, :upper16:lame_encode_buffer.frame_buffered
	movw	r4, :lower16:mfbuf
	movt	r4, :upper16:mfbuf
	movw	r5, #0
	movw	r6, #12224
	str	r0, [sp, #92]           @ 4-byte Spill
	mov	r0, r4
	and	r4, r5, #255
	str	r1, [sp, #88]           @ 4-byte Spill
	mov	r1, r4
	str	r2, [sp, #84]           @ 4-byte Spill
	mov	r2, r6
	str	r12, [sp, #80]          @ 4-byte Spill
	str	lr, [sp, #76]           @ 4-byte Spill
	str	r3, [sp, #72]           @ 4-byte Spill
	bl	memset
	ldr	r0, [sp, #80]           @ 4-byte Reload
	ldr	r1, [sp, #76]           @ 4-byte Reload
	str	r0, [r1]
	ldr	r2, [sp, #84]           @ 4-byte Reload
	ldr	r3, [sp, #72]           @ 4-byte Reload
	str	r2, [r3]
	ldr	r12, [sp, #92]          @ 4-byte Reload
	ldr	lr, [sp, #88]           @ 4-byte Reload
	str	r12, [lr]
.LBB52_5:
	ldr	r0, [r11, #-24]
	ldr	r0, [r0, #156]
	cmp	r0, #1
	bne	.LBB52_7
@ BB#6:
	movw	r0, #0
	movw	r1, :lower16:lame_encode_buffer.frame_buffered
	movt	r1, :upper16:lame_encode_buffer.frame_buffered
	str	r0, [r1]
.LBB52_7:
	ldr	r0, [r11, #-24]
	ldr	r0, [r0, #4]
	cmp	r0, #2
	bne	.LBB52_14
@ BB#8:
	ldr	r0, [r11, #-24]
	ldr	r0, [r0, #184]
	cmp	r0, #1
	bne	.LBB52_14
@ BB#9:
	movw	r0, #0
	str	r0, [r11, #-56]
.LBB52_10:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-56]
	ldr	r1, [r11, #-36]
	cmp	r0, r1
	bge	.LBB52_13
@ BB#11:                                @   in Loop: Header=BB52_10 Depth=1
	movw	r0, #0
	movw	r1, #1
	ldr	r2, [r11, #-56]
	ldr	r3, [r11, #-72]
	ldr	r12, [r11, #-68]
	add	r3, r3, r2, lsl #1
	ldrsh	lr, [r3]
	add	r2, r12, r2, lsl #1
	ldrsh	r2, [r2]
	add	r2, lr, r2
	add	r2, r2, r2, lsr #31
	lsr	r2, r2, #1
	strh	r2, [r3]
	ldr	r2, [r11, #-68]
	ldr	r3, [r11, #-56]
	add	r2, r2, r3, lsl #1
	strh	r0, [r2]
	str	r1, [sp, #68]           @ 4-byte Spill
@ BB#12:                                @   in Loop: Header=BB52_10 Depth=1
	ldr	r0, [r11, #-56]
	add	r0, r0, #1
	str	r0, [r11, #-56]
	b	.LBB52_10
.LBB52_13:
	b	.LBB52_14
.LBB52_14:
	b	.LBB52_15
.LBB52_15:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB52_17 Depth 2
                                        @     Child Loop BB52_29 Depth 2
                                        @       Child Loop BB52_31 Depth 3
	ldr	r0, [r11, #-36]
	cmp	r0, #0
	ble	.LBB52_38
@ BB#16:                                @   in Loop: Header=BB52_15 Depth=1
	movw	r0, #0
	str	r0, [r11, #-76]
	str	r0, [r11, #-80]
	str	r0, [r11, #-60]
.LBB52_17:                              @   Parent Loop BB52_15 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-60]
	ldr	r1, [r11, #-24]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB52_23
@ BB#18:                                @   in Loop: Header=BB52_17 Depth=2
	vmov.f32	s0, #1.000000e+00
	ldr	r0, [r11, #-24]
	vldr	s2, [r0, #196]
	vcmpe.f32	s2, s0
	vmrs	APSR_nzcv, fpscr
	beq	.LBB52_20
@ BB#19:                                @   in Loop: Header=BB52_17 Depth=2
	sub	r0, r11, #76
	sub	r1, r11, #72
	movw	r2, #2
	ldr	r3, [r11, #-24]
	ldr	r12, [r11, #-60]
	movw	lr, :lower16:mfbuf
	movt	lr, :upper16:mfbuf
	movw	r4, #6112
	mla	lr, r12, r4, lr
	movw	r4, :lower16:mf_size
	movt	r4, :upper16:mf_size
	ldr	r4, [r4]
	add	lr, lr, r4, lsl #1
	ldr	r4, [r3, #168]
	sub	r5, r11, #72
	add	r12, r5, r12, lsl #2
	ldr	r12, [r12]
	ldr	r5, [r11, #-36]
	ldr	r6, [r11, #-60]
	str	r0, [sp, #64]           @ 4-byte Spill
	mov	r0, r3
	str	r1, [sp, #60]           @ 4-byte Spill
	mov	r1, lr
	str	r2, [sp, #56]           @ 4-byte Spill
	mov	r2, r4
	mov	r3, r12
	str	r5, [sp]
	ldr	r12, [sp, #64]          @ 4-byte Reload
	str	r12, [sp, #4]
	str	r6, [sp, #8]
	bl	fill_buffer_resample
	str	r0, [r11, #-80]
	b	.LBB52_21
.LBB52_20:                              @   in Loop: Header=BB52_17 Depth=2
	sub	r0, r11, #72
	movw	r1, #2
	ldr	r2, [r11, #-24]
	ldr	r3, [r11, #-60]
	movw	r12, :lower16:mfbuf
	movt	r12, :upper16:mfbuf
	movw	lr, #6112
	mla	r12, r3, lr, r12
	movw	lr, :lower16:mf_size
	movt	lr, :upper16:mf_size
	ldr	lr, [lr]
	add	r12, r12, lr, lsl #1
	ldr	lr, [r2, #168]
	sub	r4, r11, #72
	add	r3, r4, r3, lsl #2
	ldr	r3, [r3]
	ldr	r4, [r11, #-36]
	str	r0, [sp, #52]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #48]           @ 4-byte Spill
	mov	r1, r12
	mov	r2, lr
	str	r4, [sp]
	bl	fill_buffer
	str	r0, [r11, #-80]
	ldr	r0, [r11, #-80]
	str	r0, [r11, #-76]
.LBB52_21:                              @   in Loop: Header=BB52_17 Depth=2
	movw	r0, #1
	ldr	r1, [r11, #-76]
	ldr	r2, [r11, #-60]
	sub	r3, r11, #72
	add	r12, r3, r2, lsl #2
	ldr	r2, [r3, r2, lsl #2]
	add	r1, r2, r1, lsl #1
	str	r1, [r12]
	str	r0, [sp, #44]           @ 4-byte Spill
@ BB#22:                                @   in Loop: Header=BB52_17 Depth=2
	ldr	r0, [r11, #-60]
	add	r0, r0, #1
	str	r0, [r11, #-60]
	b	.LBB52_17
.LBB52_23:                              @   in Loop: Header=BB52_15 Depth=1
	movw	r0, #1
	movw	r1, :lower16:mf_size
	movt	r1, :upper16:mf_size
	ldr	r2, [r11, #-76]
	ldr	r3, [r11, #-36]
	sub	r2, r3, r2
	str	r2, [r11, #-36]
	ldr	r2, [r11, #-80]
	ldr	r3, [r1]
	add	r2, r3, r2
	str	r2, [r1]
	ldr	r1, [r1]
	cmp	r1, #3056
	str	r0, [sp, #40]           @ 4-byte Spill
	ble	.LBB52_25
@ BB#24:                                @   in Loop: Header=BB52_15 Depth=1
	movw	r0, :lower16:.L.str.20.193
	movt	r0, :upper16:.L.str.20.193
	movw	r1, :lower16:.L.str.17.190
	movt	r1, :upper16:.L.str.17.190
	movw	r2, #1045
	movw	r3, :lower16:.L__func__.lame_encode_buffer
	movt	r3, :upper16:.L__func__.lame_encode_buffer
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #40]           @ 4-byte Spill
.LBB52_25:                              @   in Loop: Header=BB52_15 Depth=1
	ldr	r0, [sp, #40]           @ 4-byte Reload
	movw	r1, :lower16:mf_size
	movt	r1, :upper16:mf_size
	movw	r2, :lower16:mf_samples_to_encode
	movt	r2, :upper16:mf_samples_to_encode
	ldr	r3, [r11, #-80]
	ldr	r12, [r2]
	add	r3, r12, r3
	str	r3, [r2]
	ldr	r1, [r1]
	ldr	r2, [r11, #-64]
	cmp	r1, r2
	str	r0, [sp, #36]           @ 4-byte Spill
	blt	.LBB52_37
@ BB#26:                                @   in Loop: Header=BB52_15 Depth=1
	movw	r0, :lower16:mfbuf
	movt	r0, :upper16:mfbuf
	movw	r1, #6112
	add	r2, r0, r1
	movw	r1, :lower16:mf_size
	movt	r1, :upper16:mf_size
	ldr	r3, [r11, #-24]
	ldr	r1, [r1]
	ldr	r12, [r11, #-40]
	ldr	lr, [r11, #-44]
	str	r0, [sp, #32]           @ 4-byte Spill
	mov	r0, r3
	ldr	r3, [sp, #32]           @ 4-byte Reload
	str	r1, [sp, #28]           @ 4-byte Spill
	mov	r1, r3
	ldr	r3, [sp, #28]           @ 4-byte Reload
	str	r12, [sp]
	str	lr, [sp, #4]
	bl	lame_encode_frame
	str	r0, [r11, #-52]
	ldr	r0, [r11, #-52]
	cmn	r0, #1
	bne	.LBB52_28
@ BB#27:
	mvn	r0, #0
	str	r0, [r11, #-20]
	b	.LBB52_41
.LBB52_28:                              @   in Loop: Header=BB52_15 Depth=1
	movw	r0, #0
	movw	r1, :lower16:mf_samples_to_encode
	movt	r1, :upper16:mf_samples_to_encode
	movw	r2, :lower16:mf_size
	movt	r2, :upper16:mf_size
	ldr	r3, [r11, #-52]
	ldr	r12, [r11, #-40]
	add	r3, r12, r3
	str	r3, [r11, #-40]
	ldr	r3, [r11, #-52]
	ldr	r12, [r11, #-48]
	add	r3, r12, r3
	str	r3, [r11, #-48]
	ldr	r3, [r11, #-24]
	ldr	r3, [r3, #168]
	ldr	r12, [r2]
	sub	r3, r12, r3
	str	r3, [r2]
	ldr	r2, [r11, #-24]
	ldr	r2, [r2, #168]
	ldr	r3, [r1]
	sub	r2, r3, r2
	str	r2, [r1]
	str	r0, [r11, #-60]
.LBB52_29:                              @   Parent Loop BB52_15 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB52_31 Depth 3
	ldr	r0, [r11, #-60]
	ldr	r1, [r11, #-24]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB52_36
@ BB#30:                                @   in Loop: Header=BB52_29 Depth=2
	movw	r0, #0
	str	r0, [r11, #-56]
.LBB52_31:                              @   Parent Loop BB52_15 Depth=1
                                        @     Parent Loop BB52_29 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	movw	r0, :lower16:mf_size
	movt	r0, :upper16:mf_size
	ldr	r1, [r11, #-56]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB52_34
@ BB#32:                                @   in Loop: Header=BB52_31 Depth=3
	movw	r0, #1
	ldr	r1, [r11, #-60]
	movw	r2, :lower16:mfbuf
	movt	r2, :upper16:mfbuf
	movw	r3, #6112
	mla	r1, r1, r3, r2
	ldr	r2, [r11, #-56]
	ldr	r3, [r11, #-24]
	ldr	r3, [r3, #168]
	add	r3, r2, r3
	add	r3, r1, r3, lsl #1
	ldrh	r3, [r3]
	mov	r12, r1
	add	r1, r1, r2, lsl #1
	strh	r3, [r1]
	str	r0, [sp, #24]           @ 4-byte Spill
	str	r12, [sp, #20]          @ 4-byte Spill
@ BB#33:                                @   in Loop: Header=BB52_31 Depth=3
	ldr	r0, [r11, #-56]
	add	r0, r0, #1
	str	r0, [r11, #-56]
	b	.LBB52_31
.LBB52_34:                              @   in Loop: Header=BB52_29 Depth=2
	b	.LBB52_35
.LBB52_35:                              @   in Loop: Header=BB52_29 Depth=2
	ldr	r0, [r11, #-60]
	add	r0, r0, #1
	str	r0, [r11, #-60]
	b	.LBB52_29
.LBB52_36:                              @   in Loop: Header=BB52_15 Depth=1
	b	.LBB52_37
.LBB52_37:                              @   in Loop: Header=BB52_15 Depth=1
	b	.LBB52_15
.LBB52_38:
	movw	r0, #1
	ldr	r1, [r11, #-36]
	cmp	r1, #0
	str	r0, [sp, #16]           @ 4-byte Spill
	beq	.LBB52_40
@ BB#39:
	movw	r0, :lower16:.L.str.21.194
	movt	r0, :upper16:.L.str.21.194
	movw	r1, :lower16:.L.str.17.190
	movt	r1, :upper16:.L.str.17.190
	movw	r2, #1066
	movw	r3, :lower16:.L__func__.lame_encode_buffer
	movt	r3, :upper16:.L__func__.lame_encode_buffer
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #16]           @ 4-byte Spill
.LBB52_40:
	ldr	r0, [sp, #16]           @ 4-byte Reload
	ldr	r1, [r11, #-48]
	str	r1, [r11, #-20]
	str	r0, [sp, #12]           @ 4-byte Spill
.LBB52_41:
	ldr	r0, [r11, #-20]
	sub	sp, r11, #16
	pop	{r4, r5, r6, r10, r11, pc}
.Lfunc_end52:
	.size	lame_encode_buffer, .Lfunc_end52-lame_encode_buffer
	.cantunwind
	.fnend

	.globl	lame_encode_buffer_interleaved
	.p2align	2
	.type	lame_encode_buffer_interleaved,%function
	.code	32                      @ @lame_encode_buffer_interleaved
lame_encode_buffer_interleaved:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r10, r11, lr}
	add	r11, sp, #16
	sub	sp, sp, #160
	ldr	r12, [r11, #8]
	movw	lr, #1
	movw	r4, #3056
	movw	r5, #0
	str	r0, [r11, #-24]
	str	r1, [r11, #-28]
	str	r2, [r11, #-32]
	str	r3, [r11, #-36]
	str	r12, [r11, #-40]
	str	r5, [r11, #-44]
	ldr	r0, [r11, #-24]
	ldr	r0, [r0, #168]
	add	r0, r0, #1024
	sub	r0, r0, #272
	str	r0, [r11, #-60]
	ldr	r0, [r11, #-60]
	cmp	r4, r0
	str	lr, [r11, #-76]         @ 4-byte Spill
	bge	.LBB53_2
@ BB#1:
	movw	r0, :lower16:.L.str.19.192
	movt	r0, :upper16:.L.str.19.192
	movw	r1, :lower16:.L.str.17.190
	movt	r1, :upper16:.L.str.17.190
	movw	r2, #1083
	movw	r3, :lower16:.L__func__.lame_encode_buffer_interleaved
	movt	r3, :upper16:.L__func__.lame_encode_buffer_interleaved
	bl	__assert_fail
	movw	r0, #0
	str	r0, [r11, #-76]         @ 4-byte Spill
.LBB53_2:
	ldr	r0, [r11, #-76]         @ 4-byte Reload
	ldr	r1, [r11, #-24]
	ldr	r1, [r1, #4]
	cmp	r1, #1
	str	r0, [r11, #-80]         @ 4-byte Spill
	bne	.LBB53_4
@ BB#3:
	movw	r2, #0
	ldr	r0, [r11, #-24]
	ldr	r1, [r11, #-28]
	ldr	r3, [r11, #-32]
	ldr	r12, [r11, #-36]
	ldr	lr, [r11, #-40]
	str	r12, [sp]
	str	lr, [sp, #4]
	bl	lame_encode_buffer
	str	r0, [r11, #-20]
	b	.LBB53_52
.LBB53_4:
	vmov.f32	s0, #1.000000e+00
	ldr	r0, [r11, #-24]
	vldr	s2, [r0, #196]
	vcmpe.f32	s2, s0
	vmrs	APSR_nzcv, fpscr
	beq	.LBB53_13
@ BB#5:
	movw	r0, #1
	ldr	r1, [r11, #-32]
	lsl	r1, r1, #1
	str	r0, [r11, #-84]         @ 4-byte Spill
	mov	r0, r1
	bl	malloc
	str	r0, [r11, #-64]
	ldr	r0, [r11, #-32]
	lsl	r0, r0, #1
	bl	malloc
	movw	r1, #0
	str	r0, [r11, #-68]
	ldr	r0, [r11, #-64]
	cmp	r0, r1
	beq	.LBB53_7
@ BB#6:
	movw	r0, #0
	ldr	r1, [r11, #-68]
	cmp	r1, r0
	bne	.LBB53_8
.LBB53_7:
	mvn	r0, #0
	str	r0, [r11, #-20]
	b	.LBB53_52
.LBB53_8:
	movw	r0, #0
	str	r0, [r11, #-52]
.LBB53_9:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-52]
	ldr	r1, [r11, #-32]
	cmp	r0, r1
	bge	.LBB53_12
@ BB#10:                                @   in Loop: Header=BB53_9 Depth=1
	movw	r0, #1
	ldr	r1, [r11, #-28]
	ldr	r2, [r11, #-52]
	add	r1, r1, r2, lsl #2
	ldrh	r1, [r1]
	ldr	r3, [r11, #-64]
	add	r2, r3, r2, lsl #1
	strh	r1, [r2]
	ldr	r1, [r11, #-28]
	ldr	r2, [r11, #-52]
	add	r1, r1, r2, lsl #2
	ldrh	r1, [r1, #2]
	ldr	r3, [r11, #-68]
	add	r2, r3, r2, lsl #1
	strh	r1, [r2]
	str	r0, [sp, #88]           @ 4-byte Spill
@ BB#11:                                @   in Loop: Header=BB53_9 Depth=1
	ldr	r0, [r11, #-52]
	add	r0, r0, #1
	str	r0, [r11, #-52]
	b	.LBB53_9
.LBB53_12:
	ldr	r0, [r11, #-24]
	ldr	r1, [r11, #-64]
	ldr	r2, [r11, #-68]
	ldr	r3, [r11, #-32]
	ldr	r12, [r11, #-36]
	ldr	lr, [r11, #-40]
	str	r12, [sp]
	str	lr, [sp, #4]
	bl	lame_encode_buffer
	str	r0, [r11, #-48]
	ldr	r0, [r11, #-64]
	bl	free
	ldr	r0, [r11, #-68]
	bl	free
	ldr	r0, [r11, #-48]
	str	r0, [r11, #-20]
	b	.LBB53_52
.LBB53_13:
	ldr	r0, [r11, #-24]
	ldr	r0, [r0, #156]
	cmp	r0, #0
	bne	.LBB53_16
@ BB#14:
	movw	r0, :lower16:lame_encode_buffer_interleaved.frame_buffered
	movt	r0, :upper16:lame_encode_buffer_interleaved.frame_buffered
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LBB53_16
@ BB#15:
	movw	r0, #752
	movw	r1, :lower16:mf_size
	movt	r1, :upper16:mf_size
	movw	r2, #1088
	movw	r3, :lower16:mf_samples_to_encode
	movt	r3, :upper16:mf_samples_to_encode
	movw	r12, #1
	movw	lr, :lower16:lame_encode_buffer_interleaved.frame_buffered
	movt	lr, :upper16:lame_encode_buffer_interleaved.frame_buffered
	movw	r4, :lower16:mfbuf
	movt	r4, :upper16:mfbuf
	movw	r5, #0
	movw	r6, #12224
	str	r0, [sp, #84]           @ 4-byte Spill
	mov	r0, r4
	and	r4, r5, #255
	str	r1, [sp, #80]           @ 4-byte Spill
	mov	r1, r4
	str	r2, [sp, #76]           @ 4-byte Spill
	mov	r2, r6
	str	r12, [sp, #72]          @ 4-byte Spill
	str	lr, [sp, #68]           @ 4-byte Spill
	str	r3, [sp, #64]           @ 4-byte Spill
	bl	memset
	ldr	r0, [sp, #72]           @ 4-byte Reload
	ldr	r1, [sp, #68]           @ 4-byte Reload
	str	r0, [r1]
	ldr	r2, [sp, #76]           @ 4-byte Reload
	ldr	r3, [sp, #64]           @ 4-byte Reload
	str	r2, [r3]
	ldr	r12, [sp, #84]          @ 4-byte Reload
	ldr	lr, [sp, #80]           @ 4-byte Reload
	str	r12, [lr]
.LBB53_16:
	ldr	r0, [r11, #-24]
	ldr	r0, [r0, #156]
	cmp	r0, #1
	bne	.LBB53_18
@ BB#17:
	movw	r0, #0
	movw	r1, :lower16:lame_encode_buffer_interleaved.frame_buffered
	movt	r1, :upper16:lame_encode_buffer_interleaved.frame_buffered
	str	r0, [r1]
.LBB53_18:
	ldr	r0, [r11, #-24]
	ldr	r0, [r0, #4]
	cmp	r0, #2
	bne	.LBB53_25
@ BB#19:
	ldr	r0, [r11, #-24]
	ldr	r0, [r0, #184]
	cmp	r0, #1
	bne	.LBB53_25
@ BB#20:
	movw	r0, #0
	str	r0, [r11, #-52]
.LBB53_21:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-52]
	ldr	r1, [r11, #-32]
	cmp	r0, r1
	bge	.LBB53_24
@ BB#22:                                @   in Loop: Header=BB53_21 Depth=1
	movw	r0, #0
	movw	r1, #1
	ldr	r2, [r11, #-28]
	ldr	r3, [r11, #-52]
	lsl	r3, r3, #2
	ldrsh	r3, [r2, r3]!
	ldrsh	r12, [r2, #2]
	add	r3, r3, r12
	add	r3, r3, r3, lsr #31
	lsr	r3, r3, #1
	strh	r3, [r2]
	ldr	r2, [r11, #-28]
	ldr	r3, [r11, #-52]
	mov	r12, #1
	orr	r3, r12, r3, lsl #1
	add	r2, r2, r3, lsl #1
	strh	r0, [r2]
	str	r1, [sp, #60]           @ 4-byte Spill
@ BB#23:                                @   in Loop: Header=BB53_21 Depth=1
	ldr	r0, [r11, #-52]
	add	r0, r0, #1
	str	r0, [r11, #-52]
	b	.LBB53_21
.LBB53_24:
	b	.LBB53_25
.LBB53_25:
	b	.LBB53_26
.LBB53_26:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB53_31 Depth 2
                                        @     Child Loop BB53_40 Depth 2
                                        @       Child Loop BB53_42 Depth 3
	ldr	r0, [r11, #-32]
	cmp	r0, #0
	ble	.LBB53_49
@ BB#27:                                @   in Loop: Header=BB53_26 Depth=1
	ldr	r0, [r11, #-24]
	ldr	r0, [r0, #168]
	ldr	r1, [r11, #-32]
	cmp	r0, r1
	bge	.LBB53_29
@ BB#28:                                @   in Loop: Header=BB53_26 Depth=1
	ldr	r0, [r11, #-24]
	ldr	r0, [r0, #168]
	str	r0, [sp, #56]           @ 4-byte Spill
	b	.LBB53_30
.LBB53_29:                              @   in Loop: Header=BB53_26 Depth=1
	ldr	r0, [r11, #-32]
	str	r0, [sp, #56]           @ 4-byte Spill
.LBB53_30:                              @   in Loop: Header=BB53_26 Depth=1
	ldr	r0, [sp, #56]           @ 4-byte Reload
	movw	r1, #0
	str	r0, [r11, #-72]
	str	r1, [r11, #-52]
.LBB53_31:                              @   Parent Loop BB53_26 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-52]
	ldr	r1, [r11, #-72]
	cmp	r0, r1
	bge	.LBB53_34
@ BB#32:                                @   in Loop: Header=BB53_31 Depth=2
	movw	r0, :lower16:mfbuf
	movt	r0, :upper16:mfbuf
	movw	r1, #6112
	add	r0, r0, r1
	movw	r1, #1
	ldr	r2, [r11, #-28]
	ldr	r3, [r11, #-52]
	add	r2, r2, r3, lsl #2
	ldrh	r2, [r2]
	movw	r12, :lower16:mf_size
	movt	r12, :upper16:mf_size
	ldr	lr, [r12]
	add	r3, lr, r3
	movw	lr, :lower16:mfbuf
	movt	lr, :upper16:mfbuf
	add	r3, lr, r3, lsl #1
	strh	r2, [r3]
	ldr	r2, [r11, #-28]
	ldr	r3, [r11, #-52]
	add	r2, r2, r3, lsl #2
	ldrh	r2, [r2, #2]
	ldr	r12, [r12]
	add	r3, r12, r3
	add	r3, lr, r3, lsl #1
	movw	r12, #6112
	add	r3, r3, r12
	strh	r2, [r3]
	str	r0, [sp, #52]           @ 4-byte Spill
	str	r1, [sp, #48]           @ 4-byte Spill
@ BB#33:                                @   in Loop: Header=BB53_31 Depth=2
	ldr	r0, [r11, #-52]
	add	r0, r0, #1
	str	r0, [r11, #-52]
	b	.LBB53_31
.LBB53_34:                              @   in Loop: Header=BB53_26 Depth=1
	movw	r0, #1
	movw	r1, :lower16:mf_size
	movt	r1, :upper16:mf_size
	movw	r2, #1
	ldr	r3, [r11, #-72]
	lsl	r12, r3, #1
	ldr	lr, [r11, #-28]
	add	r3, lr, r3, lsl #2
	str	r3, [r11, #-28]
	ldr	r3, [r11, #-72]
	ldr	lr, [r11, #-32]
	sub	r3, lr, r3
	str	r3, [r11, #-32]
	ldr	r3, [r11, #-72]
	ldr	lr, [r1]
	add	r3, lr, r3
	str	r3, [r1]
	ldr	r1, [r1]
	cmp	r1, #3056
	str	r2, [sp, #44]           @ 4-byte Spill
	str	r12, [sp, #40]          @ 4-byte Spill
	str	r0, [sp, #36]           @ 4-byte Spill
	ble	.LBB53_36
@ BB#35:                                @   in Loop: Header=BB53_26 Depth=1
	movw	r0, :lower16:.L.str.20.193
	movt	r0, :upper16:.L.str.20.193
	movw	r1, :lower16:.L.str.17.190
	movt	r1, :upper16:.L.str.17.190
	movw	r2, #1140
	movw	r3, :lower16:.L__func__.lame_encode_buffer_interleaved
	movt	r3, :upper16:.L__func__.lame_encode_buffer_interleaved
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #36]           @ 4-byte Spill
.LBB53_36:                              @   in Loop: Header=BB53_26 Depth=1
	ldr	r0, [sp, #36]           @ 4-byte Reload
	movw	r1, :lower16:mf_size
	movt	r1, :upper16:mf_size
	movw	r2, :lower16:mf_samples_to_encode
	movt	r2, :upper16:mf_samples_to_encode
	ldr	r3, [r11, #-72]
	ldr	r12, [r2]
	add	r3, r12, r3
	str	r3, [r2]
	ldr	r1, [r1]
	ldr	r2, [r11, #-60]
	cmp	r1, r2
	str	r0, [sp, #32]           @ 4-byte Spill
	blt	.LBB53_48
@ BB#37:                                @   in Loop: Header=BB53_26 Depth=1
	movw	r0, :lower16:mfbuf
	movt	r0, :upper16:mfbuf
	movw	r1, #6112
	add	r2, r0, r1
	movw	r1, :lower16:mf_size
	movt	r1, :upper16:mf_size
	ldr	r3, [r11, #-24]
	ldr	r1, [r1]
	ldr	r12, [r11, #-36]
	ldr	lr, [r11, #-40]
	str	r0, [sp, #28]           @ 4-byte Spill
	mov	r0, r3
	ldr	r3, [sp, #28]           @ 4-byte Reload
	str	r1, [sp, #24]           @ 4-byte Spill
	mov	r1, r3
	ldr	r3, [sp, #24]           @ 4-byte Reload
	str	r12, [sp]
	str	lr, [sp, #4]
	bl	lame_encode_frame
	str	r0, [r11, #-48]
	ldr	r0, [r11, #-48]
	cmn	r0, #1
	bne	.LBB53_39
@ BB#38:
	mvn	r0, #0
	str	r0, [r11, #-20]
	b	.LBB53_52
.LBB53_39:                              @   in Loop: Header=BB53_26 Depth=1
	movw	r0, #0
	movw	r1, :lower16:mf_samples_to_encode
	movt	r1, :upper16:mf_samples_to_encode
	movw	r2, :lower16:mf_size
	movt	r2, :upper16:mf_size
	ldr	r3, [r11, #-48]
	ldr	r12, [r11, #-36]
	add	r3, r12, r3
	str	r3, [r11, #-36]
	ldr	r3, [r11, #-48]
	ldr	r12, [r11, #-44]
	add	r3, r12, r3
	str	r3, [r11, #-44]
	ldr	r3, [r11, #-24]
	ldr	r3, [r3, #168]
	ldr	r12, [r2]
	sub	r3, r12, r3
	str	r3, [r2]
	ldr	r2, [r11, #-24]
	ldr	r2, [r2, #168]
	ldr	r3, [r1]
	sub	r2, r3, r2
	str	r2, [r1]
	str	r0, [r11, #-56]
.LBB53_40:                              @   Parent Loop BB53_26 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB53_42 Depth 3
	ldr	r0, [r11, #-56]
	ldr	r1, [r11, #-24]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB53_47
@ BB#41:                                @   in Loop: Header=BB53_40 Depth=2
	movw	r0, #0
	str	r0, [r11, #-52]
.LBB53_42:                              @   Parent Loop BB53_26 Depth=1
                                        @     Parent Loop BB53_40 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	movw	r0, :lower16:mf_size
	movt	r0, :upper16:mf_size
	ldr	r1, [r11, #-52]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB53_45
@ BB#43:                                @   in Loop: Header=BB53_42 Depth=3
	movw	r0, #1
	ldr	r1, [r11, #-56]
	movw	r2, :lower16:mfbuf
	movt	r2, :upper16:mfbuf
	movw	r3, #6112
	mla	r1, r1, r3, r2
	ldr	r2, [r11, #-52]
	ldr	r3, [r11, #-24]
	ldr	r3, [r3, #168]
	add	r3, r2, r3
	add	r3, r1, r3, lsl #1
	ldrh	r3, [r3]
	mov	r12, r1
	add	r1, r1, r2, lsl #1
	strh	r3, [r1]
	str	r0, [sp, #20]           @ 4-byte Spill
	str	r12, [sp, #16]          @ 4-byte Spill
@ BB#44:                                @   in Loop: Header=BB53_42 Depth=3
	ldr	r0, [r11, #-52]
	add	r0, r0, #1
	str	r0, [r11, #-52]
	b	.LBB53_42
.LBB53_45:                              @   in Loop: Header=BB53_40 Depth=2
	b	.LBB53_46
.LBB53_46:                              @   in Loop: Header=BB53_40 Depth=2
	ldr	r0, [r11, #-56]
	add	r0, r0, #1
	str	r0, [r11, #-56]
	b	.LBB53_40
.LBB53_47:                              @   in Loop: Header=BB53_26 Depth=1
	b	.LBB53_48
.LBB53_48:                              @   in Loop: Header=BB53_26 Depth=1
	b	.LBB53_26
.LBB53_49:
	movw	r0, #1
	ldr	r1, [r11, #-32]
	cmp	r1, #0
	str	r0, [sp, #12]           @ 4-byte Spill
	beq	.LBB53_51
@ BB#50:
	movw	r0, :lower16:.L.str.21.194
	movt	r0, :upper16:.L.str.21.194
	movw	r1, :lower16:.L.str.17.190
	movt	r1, :upper16:.L.str.17.190
	movw	r2, #1161
	movw	r3, :lower16:.L__func__.lame_encode_buffer_interleaved
	movt	r3, :upper16:.L__func__.lame_encode_buffer_interleaved
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #12]           @ 4-byte Spill
.LBB53_51:
	ldr	r0, [sp, #12]           @ 4-byte Reload
	ldr	r1, [r11, #-44]
	str	r1, [r11, #-20]
	str	r0, [sp, #8]            @ 4-byte Spill
.LBB53_52:
	ldr	r0, [r11, #-20]
	sub	sp, r11, #16
	pop	{r4, r5, r6, r10, r11, pc}
.Lfunc_end53:
	.size	lame_encode_buffer_interleaved, .Lfunc_end53-lame_encode_buffer_interleaved
	.cantunwind
	.fnend

	.globl	lame_encode
	.p2align	2
	.type	lame_encode,%function
	.code	32                      @ @lame_encode
lame_encode:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #32
	movw	r12, #576
	movw	lr, :lower16:mf_samples_to_encode
	movt	lr, :upper16:mf_samples_to_encode
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [r11, #-12]
	str	r3, [sp, #16]
	ldr	r0, [lr]
	str	r0, [sp, #8]
	ldr	r0, [r11, #-4]
	ldr	r1, [r11, #-8]
	ldr	r2, [r11, #-8]
	add	r2, r2, #2304
	ldr	r3, [r11, #-4]
	ldr	r3, [r3, #180]
	mul	r3, r3, r12
	ldr	r12, [r11, #-12]
	ldr	lr, [sp, #16]
	str	r12, [sp]
	str	lr, [sp, #4]
	bl	lame_encode_buffer
	movw	r1, :lower16:mf_samples_to_encode
	movt	r1, :upper16:mf_samples_to_encode
	str	r0, [sp, #12]
	ldr	r0, [sp, #8]
	str	r0, [r1]
	ldr	r0, [sp, #12]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end54:
	.size	lame_encode, .Lfunc_end54-lame_encode
	.cantunwind
	.fnend

	.globl	lame_init
	.p2align	2
	.type	lame_init,%function
	.code	32                      @ @lame_init
lame_init:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r7, r8, r10, r11, lr}
	add	r11, sp, #24
	sub	sp, sp, #4
	movw	r1, #0
	movw	r2, :lower16:id3tag
	movt	r2, :upper16:id3tag
	mvn	r3, #0
	movw	r12, #2
	movw	lr, #44100
	movw	r4, #1
	movw	r5, #13
	movw	r6, #4
	vmov.f32	s0, #1.000000e+00
	movw	r7, #32
	vldr	s2, .LCPI55_0
	movw	r8, #5
	str	r0, [sp]
	ldr	r0, [sp]
	str	r1, [r0, #144]
	ldr	r0, [sp]
	str	r1, [r0, #132]
	ldr	r0, [sp]
	str	r1, [r0, #136]
	ldr	r0, [sp]
	str	r4, [r0, #20]
	ldr	r0, [sp]
	vstr	s2, [r0, #140]
	ldr	r0, [sp]
	str	r1, [r0, #68]
	ldr	r0, [sp]
	str	r1, [r0, #72]
	ldr	r0, [sp]
	str	r1, [r0, #76]
	ldr	r0, [sp]
	str	r1, [r0, #80]
	ldr	r0, [sp]
	str	r1, [r0, #156]
	ldr	r0, [sp]
	str	r1, [r0, #16]
	ldr	r0, [sp]
	str	r8, [r0, #24]
	ldr	r0, [sp]
	str	r1, [r0, #116]
	ldr	r0, [sp]
	str	r1, [r0, #236]
	ldr	r0, [sp]
	str	r1, [r0, #100]
	ldr	r0, [sp]
	str	r1, [r0, #104]
	ldr	r0, [sp]
	str	r3, [r0, #108]
	ldr	r0, [sp]
	str	r3, [r0, #112]
	ldr	r0, [sp]
	vstr	s2, [r0, #212]
	ldr	r0, [sp]
	vstr	s2, [r0, #216]
	ldr	r0, [sp]
	vstr	s2, [r0, #220]
	ldr	r0, [sp]
	vstr	s2, [r0, #224]
	ldr	r0, [sp]
	str	r7, [r0, #228]
	ldr	r0, [sp]
	str	r3, [r0, #232]
	ldr	r0, [sp]
	str	r1, [r0, #148]
	ldr	r0, [sp]
	vstr	s0, [r0, #196]
	ldr	r0, [sp]
	str	r12, [r0, #60]
	ldr	r0, [sp]
	str	r1, [r0, #176]
	ldr	r0, [sp]
	str	r1, [r0, #120]
	ldr	r0, [sp]
	str	r1, [r0, #28]
	ldr	r0, [sp]
	str	r1, [r0, #160]
	ldr	r0, [sp]
	str	r1, [r0, #84]
	ldr	r0, [sp]
	str	r6, [r0, #88]
	ldr	r0, [sp]
	str	r1, [r0, #92]
	ldr	r0, [sp]
	str	r1, [r0, #96]
	ldr	r0, [sp]
	str	r4, [r0, #188]
	ldr	r0, [sp]
	str	r5, [r0, #192]
	ldr	r0, [sp]
	str	r4, [r0, #172]
	ldr	r0, [sp]
	str	r4, [r0, #32]
	ldr	r0, [sp]
	str	r1, [r0, #36]
	ldr	r0, [sp]
	str	r1, [r0, #40]
	ldr	r0, [sp]
	str	r1, [r0, #44]
	ldr	r0, [sp]
	str	r1, [r0, #48]
	ldr	r0, [sp]
	str	r4, [r0, #52]
	ldr	r0, [sp]
	str	r1, [r0, #64]
	ldr	r0, [sp]
	str	r1, [r0, #56]
	ldr	r0, [sp]
	str	r1, [r0, #152]
	ldr	r0, [sp]
	str	lr, [r0, #8]
	ldr	r0, [sp]
	str	r1, [r0, #12]
	ldr	r0, [sp]
	str	r12, [r0, #4]
	ldr	r0, [sp]
	str	r3, [r0]
	ldr	r0, [sp]
	str	r1, [r0, #124]
	ldr	r0, [sp]
	str	r1, [r0, #128]
	str	r1, [r2]
	sub	sp, r11, #24
	pop	{r4, r5, r6, r7, r8, r10, r11, pc}
	.p2align	2
@ BB#1:
.LCPI55_0:
	.long	0                       @ float 0
.Lfunc_end55:
	.size	lame_init, .Lfunc_end55-lame_init
	.cantunwind
	.fnend

	.globl	lame_encode_finish
	.p2align	2
	.type	lame_encode_finish,%function
	.code	32                      @ @lame_encode_finish
lame_encode_finish:
	.fnstart
@ BB#0:
	push	{r4, r10, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #552
	sub	sp, sp, #4096
	movw	r3, #0
	movw	r12, #0
	movw	lr, #4608
	add	r4, sp, #12
	str	r0, [r11, #-16]
	str	r1, [r11, #-20]
	str	r2, [r11, #-24]
	mov	r0, r4
	and	r1, r12, #255
	mov	r2, lr
	str	r3, [sp, #8]            @ 4-byte Spill
	bl	memset
	ldr	r0, [sp, #8]            @ 4-byte Reload
	str	r0, [r11, #-32]
.LBB56_1:                               @ =>This Inner Loop Header: Depth=1
	movw	r0, :lower16:mf_samples_to_encode
	movt	r0, :upper16:mf_samples_to_encode
	ldr	r0, [r0]
	cmp	r0, #0
	ble	.LBB56_7
@ BB#2:                                 @   in Loop: Header=BB56_1 Depth=1
	ldr	r0, [r11, #-24]
	ldr	r1, [r11, #-32]
	sub	r0, r0, r1
	str	r0, [r11, #-36]
	ldr	r0, [r11, #-24]
	cmp	r0, #0
	bne	.LBB56_4
@ BB#3:                                 @   in Loop: Header=BB56_1 Depth=1
	movw	r0, #0
	str	r0, [r11, #-36]
.LBB56_4:                               @   in Loop: Header=BB56_1 Depth=1
	add	r1, sp, #12
	ldr	r0, [r11, #-16]
	ldr	r2, [r11, #-20]
	ldr	r3, [r11, #-36]
	bl	lame_encode
	str	r0, [r11, #-28]
	ldr	r0, [r11, #-28]
	cmn	r0, #1
	bne	.LBB56_6
@ BB#5:
	movw	r0, :lower16:bs.172
	movt	r0, :upper16:bs.172
	bl	desalloc_buffer
	mvn	r0, #0
	str	r0, [r11, #-12]
	b	.LBB56_15
.LBB56_6:                               @   in Loop: Header=BB56_1 Depth=1
	movw	r0, :lower16:mf_samples_to_encode
	movt	r0, :upper16:mf_samples_to_encode
	ldr	r1, [r11, #-28]
	ldr	r2, [r11, #-20]
	add	r1, r2, r1
	str	r1, [r11, #-20]
	ldr	r1, [r11, #-28]
	ldr	r2, [r11, #-32]
	add	r1, r2, r1
	str	r1, [r11, #-32]
	ldr	r1, [r11, #-16]
	ldr	r1, [r1, #168]
	ldr	r2, [r0]
	sub	r1, r2, r1
	str	r1, [r0]
	b	.LBB56_1
.LBB56_7:
	mvn	r0, #0
	ldr	r1, [r11, #-16]
	ldr	r2, [r1, #156]
	add	r0, r2, r0
	str	r0, [r1, #156]
	ldr	r0, [r11, #-16]
	ldr	r0, [r0, #16]
	cmp	r0, #0
	bne	.LBB56_10
@ BB#8:
	ldr	r0, [r11, #-16]
	ldr	r0, [r0, #28]
	cmp	r0, #0
	bne	.LBB56_10
@ BB#9:
	ldr	r0, [r11, #-16]
	ldr	r0, [r0, #12]
	ldr	r1, [r11, #-16]
	ldr	r1, [r1, #156]
	ldr	r2, [r11, #-16]
	ldr	r2, [r2, #160]
	ldr	r3, [r11, #-16]
	ldr	r3, [r3, #168]
	bl	timestatus
	movw	r1, :lower16:.L.str.22.195
	movt	r1, :upper16:.L.str.22.195
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	movw	r1, :lower16:stderr
	movt	r1, :upper16:stderr
	ldr	r1, [r1]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	bl	fflush
	str	r0, [sp]                @ 4-byte Spill
.LBB56_10:
	bl	III_FlushBitstream
	ldr	lr, [r11, #-24]
	ldr	r0, [r11, #-32]
	sub	r0, lr, r0
	str	r0, [r11, #-36]
	ldr	r0, [r11, #-24]
	cmp	r0, #0
	bne	.LBB56_12
@ BB#11:
	movw	r0, #0
	str	r0, [r11, #-36]
.LBB56_12:
	movw	r2, :lower16:bs.172
	movt	r2, :upper16:bs.172
	ldr	r0, [r11, #-20]
	ldr	r1, [r11, #-36]
	bl	copy_buffer
	str	r0, [r11, #-28]
	ldr	r0, [r11, #-28]
	cmn	r0, #1
	bne	.LBB56_14
@ BB#13:
	movw	r0, :lower16:bs.172
	movt	r0, :upper16:bs.172
	bl	desalloc_buffer
	mvn	r0, #0
	str	r0, [r11, #-12]
	b	.LBB56_15
.LBB56_14:
	movw	r0, :lower16:bs.172
	movt	r0, :upper16:bs.172
	ldr	r1, [r11, #-28]
	ldr	r2, [r11, #-32]
	add	r1, r2, r1
	str	r1, [r11, #-32]
	bl	desalloc_buffer
	ldr	r0, [r11, #-32]
	str	r0, [r11, #-12]
.LBB56_15:
	ldr	r0, [r11, #-12]
	sub	sp, r11, #8
	pop	{r4, r10, r11, pc}
.Lfunc_end56:
	.size	lame_encode_finish, .Lfunc_end56-lame_encode_finish
	.cantunwind
	.fnend

	.globl	lame_mp3_tags
	.p2align	2
	.type	lame_mp3_tags,%function
	.code	32                      @ @lame_mp3_tags
lame_mp3_tags:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	str	r0, [r11, #-4]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #20]
	cmp	r0, #0
	beq	.LBB57_2
@ BB#1:
	movw	r0, #1
	movw	r1, #9
	movw	r2, #100
	ldr	r3, [r11, #-4]
	ldr	r3, [r3, #88]
	mul	r2, r3, r2
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r2
	bl	__divsi3
	str	r0, [r11, #-8]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #128]
	ldr	r1, [r11, #-8]
	ldr	r2, [r11, #-4]
	ldr	r2, [r2, #172]
	ldr	r3, [sp, #12]           @ 4-byte Reload
	sub	r2, r3, r2
	bl	PutVbrTag
	str	r0, [sp, #8]            @ 4-byte Spill
.LBB57_2:
	movw	r0, :lower16:id3tag
	movt	r0, :upper16:id3tag
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LBB57_4
@ BB#3:
	movw	r0, :lower16:id3tag
	movt	r0, :upper16:id3tag
	bl	id3_buildtag
	movw	r1, :lower16:id3tag
	movt	r1, :upper16:id3tag
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #128]
	bl	id3_writetag
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB57_4:
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end57:
	.size	lame_mp3_tags, .Lfunc_end57-lame_mp3_tags
	.cantunwind
	.fnend

	.globl	lame_version
	.p2align	2
	.type	lame_version,%function
	.code	32                      @ @lame_version
lame_version:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	ldr	r0, [r11, #-8]
	str	r0, [sp, #12]           @ 4-byte Spill
	bl	get_lame_version
	movw	r2, #20
	ldr	r1, [sp, #12]           @ 4-byte Reload
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #8]            @ 4-byte Reload
	bl	strncpy
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end58:
	.size	lame_version, .Lfunc_end58-lame_version
	.cantunwind
	.fnend

	.globl	main
	.p2align	2
	.type	main,%function
	.code	32                      @ @main
main:
	.fnstart
@ BB#0:
	push	{r4, r5, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #840
	sub	sp, sp, #20480
	add	r2, sp, #48
	movw	r3, #0
	str	r3, [r11, #-12]
	str	r0, [r11, #-16]
	str	r1, [r11, #-20]
	mov	r0, r2
	bl	lame_init
	ldr	r0, [r11, #-16]
	cmp	r0, #1
	bne	.LBB59_2
@ BB#1:
	add	r0, sp, #48
	ldr	r1, [r11, #-20]
	ldr	r1, [r1]
	bl	lame_usage
.LBB59_2:
	add	r0, sp, #48
	ldr	r1, [r11, #-16]
	ldr	r2, [r11, #-20]
	bl	lame_parse_args
	ldr	r0, [sp, #64]
	cmp	r0, #0
	bne	.LBB59_9
@ BB#3:
	ldr	r0, [sp, #176]
	movw	r1, :lower16:.L.str.196
	movt	r1, :upper16:.L.str.196
	bl	strcmp
	cmp	r0, #0
	bne	.LBB59_5
@ BB#4:
	movw	r0, :lower16:stdout
	movt	r0, :upper16:stdout
	ldr	r0, [r0]
	str	r0, [sp, #44]
	b	.LBB59_8
.LBB59_5:
	movw	r1, :lower16:.L.str.1.197
	movt	r1, :upper16:.L.str.1.197
	ldr	r0, [sp, #176]
	bl	fopen
	movw	r1, #0
	str	r0, [sp, #44]
	cmp	r0, r1
	bne	.LBB59_7
@ BB#6:
	movw	r1, :lower16:.L.str.2.198
	movt	r1, :upper16:.L.str.2.198
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	ldr	r2, [sp, #176]
	bl	fprintf
	movw	r1, #1
	str	r0, [sp, #40]           @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB59_7:
	b	.LBB59_8
.LBB59_8:
	b	.LBB59_9
.LBB59_9:
	add	r0, sp, #48
	bl	lame_init_infile
	add	r0, sp, #48
	bl	lame_init_params
	add	r0, sp, #48
	bl	lame_print_config
.LBB59_10:                              @ =>This Inner Loop Header: Depth=1
	add	r0, sp, #48
	add	r1, sp, #316
	bl	lame_readframe
	add	r1, sp, #48
	movw	lr, #16384
	add	r4, sp, #4096
	add	r2, r4, #828
	add	r3, sp, #316
	str	r0, [sp, #312]
	add	r0, r3, #2304
	ldr	r12, [sp, #312]
	str	r0, [sp, #36]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r3
	ldr	r3, [sp, #36]           @ 4-byte Reload
	str	r2, [sp, #32]           @ 4-byte Spill
	mov	r2, r3
	mov	r3, r12
	ldr	r12, [sp, #32]          @ 4-byte Reload
	str	r12, [sp]
	str	lr, [sp, #4]
	bl	lame_encode_buffer
	str	r0, [sp, #308]
	ldr	r0, [sp, #308]
	cmn	r0, #1
	bne	.LBB59_12
@ BB#11:
	movw	r1, :lower16:.L.str.3.199
	movt	r1, :upper16:.L.str.3.199
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	movw	r1, #1
	str	r0, [sp, #28]           @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB59_12:                              @   in Loop: Header=BB59_10 Depth=1
	movw	r1, #1
	add	r4, sp, #4096
	add	r0, r4, #828
	ldr	r2, [sp, #308]
	ldr	r3, [sp, #44]
	bl	fwrite
	ldr	r1, [sp, #308]
	cmp	r0, r1
	beq	.LBB59_14
@ BB#13:
	movw	r1, :lower16:.L.str.4.200
	movt	r1, :upper16:.L.str.4.200
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	movw	r1, #1
	str	r0, [sp, #24]           @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB59_14:                              @   in Loop: Header=BB59_10 Depth=1
	b	.LBB59_15
.LBB59_15:                              @   in Loop: Header=BB59_10 Depth=1
	ldr	r0, [sp, #312]
	cmp	r0, #0
	bne	.LBB59_10
@ BB#16:
	add	r0, sp, #48
	movw	r2, #16384
	add	r4, sp, #4096
	add	r1, r4, #828
	bl	lame_encode_finish
	movw	r1, #1
	add	r4, sp, #4096
	add	r2, r4, #828
	str	r0, [sp, #308]
	ldr	r0, [sp, #308]
	ldr	r3, [sp, #44]
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, r2
	ldr	r2, [sp, #20]           @ 4-byte Reload
	bl	fwrite
	ldr	r1, [sp, #44]
	str	r0, [sp, #16]           @ 4-byte Spill
	mov	r0, r1
	bl	fclose
	add	r1, sp, #48
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r1
	bl	lame_close_infile
	add	r0, sp, #48
	bl	lame_mp3_tags
	movw	r0, #0
	sub	sp, r11, #8
	pop	{r4, r5, r11, pc}
.Lfunc_end59:
	.size	main, .Lfunc_end59-main
	.cantunwind
	.fnend

	.globl	mdct_sub48
	.p2align	3
	.type	mdct_sub48,%function
	.code	32                      @ @mdct_sub48
mdct_sub48:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r10, r11, lr}
	add	r11, sp, #16
	sub	sp, sp, #152
	ldr	r12, [r11, #8]
	movw	lr, :lower16:mdct_sub48.init
	movt	lr, :upper16:mdct_sub48.init
	str	r0, [r11, #-20]
	str	r1, [r11, #-24]
	str	r2, [r11, #-28]
	str	r3, [r11, #-32]
	str	r12, [r11, #-36]
	ldr	r0, [lr]
	cmp	r0, #0
	bne	.LBB60_2
@ BB#1:
	bl	mdct_init48
	movw	lr, :lower16:mdct_sub48.init
	movt	lr, :upper16:mdct_sub48.init
	ldr	r0, [lr]
	add	r0, r0, #1
	str	r0, [lr]
.LBB60_2:
	movw	r0, #0
	ldr	r1, [r11, #-24]
	str	r1, [r11, #-52]
	str	r0, [r11, #-48]
.LBB60_3:                               @ =>This Loop Header: Depth=1
                                        @     Child Loop BB60_5 Depth 2
                                        @       Child Loop BB60_7 Depth 3
                                        @         Child Loop BB60_9 Depth 4
                                        @       Child Loop BB60_16 Depth 3
                                        @         Child Loop BB60_20 Depth 4
                                        @         Child Loop BB60_27 Depth 4
                                        @       Child Loop BB60_35 Depth 3
                                        @         Child Loop BB60_42 Depth 4
                                        @         Child Loop BB60_47 Depth 4
                                        @         Child Loop BB60_56 Depth 4
	ldr	r0, [r11, #-48]
	ldr	r1, [r11, #-20]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB60_68
@ BB#4:                                 @   in Loop: Header=BB60_3 Depth=1
	movw	r0, #0
	str	r0, [r11, #-40]
.LBB60_5:                               @   Parent Loop BB60_3 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB60_7 Depth 3
                                        @         Child Loop BB60_9 Depth 4
                                        @       Child Loop BB60_16 Depth 3
                                        @         Child Loop BB60_20 Depth 4
                                        @         Child Loop BB60_27 Depth 4
                                        @       Child Loop BB60_35 Depth 3
                                        @         Child Loop BB60_42 Depth 4
                                        @         Child Loop BB60_47 Depth 4
                                        @         Child Loop BB60_56 Depth 4
	ldr	r0, [r11, #-40]
	ldr	r1, [r11, #-20]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB60_64
@ BB#6:                                 @   in Loop: Header=BB60_5 Depth=2
	movw	r0, #0
	movw	r1, #4608
	movw	r2, #1
	movw	r3, :lower16:sb_sample
	movt	r3, :upper16:sb_sample
	movw	r12, #9216
	movw	lr, #112
	movw	r4, #224
	ldr	r5, [r11, #-32]
	ldr	r6, [r11, #-40]
	mul	r6, r6, r12
	add	r5, r5, r6
	ldr	r6, [r11, #-48]
	mul	r6, r6, r1
	add	r5, r5, r6
	str	r5, [r11, #-60]
	ldr	r5, [r11, #-36]
	add	r5, r5, #44
	ldr	r6, [r11, #-40]
	mul	r4, r6, r4
	add	r4, r5, r4
	ldr	r5, [r11, #-48]
	mul	lr, r5, lr
	add	lr, r4, lr
	str	lr, [r11, #-64]
	ldr	lr, [r11, #-48]
	mul	r12, lr, r12
	add	r3, r3, r12
	ldr	r12, [r11, #-40]
	sub	r2, r2, r12
	mul	r1, r2, r1
	add	r1, r3, r1
	str	r1, [r11, #-68]
	str	r0, [r11, #-44]
.LBB60_7:                               @   Parent Loop BB60_3 Depth=1
                                        @     Parent Loop BB60_5 Depth=2
                                        @ =>    This Loop Header: Depth=3
                                        @         Child Loop BB60_9 Depth 4
	ldr	r0, [r11, #-44]
	cmp	r0, #9
	bge	.LBB60_14
@ BB#8:                                 @   in Loop: Header=BB60_7 Depth=3
	movw	r0, :lower16:win
	movt	r0, :upper16:win
	add	r2, r0, #608
	ldr	r0, [r11, #-52]
	ldr	r1, [r11, #-68]
	bl	window_subband
	movw	r0, :lower16:win
	movt	r0, :upper16:win
	add	r2, r0, #608
	ldr	r0, [r11, #-52]
	add	r0, r0, #64
	ldr	r1, [r11, #-68]
	add	r1, r1, #256
	bl	window_subband
	movw	r0, #1
	str	r0, [r11, #-56]
.LBB60_9:                               @   Parent Loop BB60_3 Depth=1
                                        @     Parent Loop BB60_5 Depth=2
                                        @       Parent Loop BB60_7 Depth=3
                                        @ =>      This Inner Loop Header: Depth=4
	ldr	r0, [r11, #-56]
	cmp	r0, #32
	bge	.LBB60_12
@ BB#10:                                @   in Loop: Header=BB60_9 Depth=4
	vmov.f64	d16, #-1.000000e+00
	movw	r0, #3
	ldr	r1, [r11, #-68]
	ldr	r2, [r11, #-56]
	add	r2, r2, #32
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vmul.f64	d16, d17, d16
	vstr	d16, [r1]
	str	r0, [sp, #44]           @ 4-byte Spill
@ BB#11:                                @   in Loop: Header=BB60_9 Depth=4
	ldr	r0, [r11, #-56]
	add	r0, r0, #2
	str	r0, [r11, #-56]
	b	.LBB60_9
.LBB60_12:                              @   in Loop: Header=BB60_7 Depth=3
	ldr	r0, [r11, #-68]
	add	r0, r0, #512
	str	r0, [r11, #-68]
	ldr	r0, [r11, #-52]
	add	r0, r0, #128
	str	r0, [r11, #-52]
@ BB#13:                                @   in Loop: Header=BB60_7 Depth=3
	ldr	r0, [r11, #-44]
	add	r0, r0, #1
	str	r0, [r11, #-44]
	b	.LBB60_7
.LBB60_14:                              @   in Loop: Header=BB60_5 Depth=2
	ldr	r0, [r11, #-20]
	ldr	r0, [r0, #236]
	cmp	r0, #0
	bne	.LBB60_34
@ BB#15:                                @   in Loop: Header=BB60_5 Depth=2
	ldr	r0, [r11, #-20]
	ldr	r0, [r0, #232]
	add	r0, r0, #1
	str	r0, [r11, #-56]
.LBB60_16:                              @   Parent Loop BB60_3 Depth=1
                                        @     Parent Loop BB60_5 Depth=2
                                        @ =>    This Loop Header: Depth=3
                                        @         Child Loop BB60_20 Depth 4
                                        @         Child Loop BB60_27 Depth 4
	ldr	r0, [r11, #-56]
	ldr	r1, [r11, #-20]
	ldr	r1, [r1, #228]
	cmp	r0, r1
	bge	.LBB60_33
@ BB#17:                                @   in Loop: Header=BB60_16 Depth=3
	vmov.f64	d16, #3.100000e+01
	ldr	r0, [r11, #-56]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d17, d16
	vstr	d16, [sp, #80]
	ldr	r0, [r11, #-20]
	vldr	s0, [r0, #212]
	vcvt.f64.f32	d16, s0
	vldr	d17, [sp, #80]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB60_24
@ BB#18:                                @   in Loop: Header=BB60_16 Depth=3
	vldr	d16, [sp, #80]
	ldr	r0, [r11, #-20]
	vldr	s0, [r0, #216]
	vcvt.f64.f32	d17, s0
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB60_24
@ BB#19:                                @   in Loop: Header=BB60_16 Depth=3
	movw	r0, #0
	vldr	d16, .LCPI60_1
	ldr	r1, [r11, #-20]
	vldr	s0, [r1, #212]
	vcvt.f64.f32	d17, s0
	vldr	d18, [sp, #80]
	vsub.f64	d17, d17, d18
	vmul.f64	d16, d16, d17
	ldr	r1, [r11, #-20]
	vldr	s0, [r1, #216]
	ldr	r1, [r11, #-20]
	vldr	s2, [r1, #212]
	vsub.f32	s0, s0, s2
	vcvt.f64.f32	d17, s0
	vdiv.f64	d16, d16, d17
	vmov	r1, r2, d16
	str	r0, [sp, #40]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	cos
	vmov	d16, r0, r1
	vstr	d16, [r11, #-80]
	ldr	r0, [sp, #40]           @ 4-byte Reload
	str	r0, [r11, #-44]
.LBB60_20:                              @   Parent Loop BB60_3 Depth=1
                                        @     Parent Loop BB60_5 Depth=2
                                        @       Parent Loop BB60_16 Depth=3
                                        @ =>      This Inner Loop Header: Depth=4
	ldr	r0, [r11, #-44]
	cmp	r0, #18
	bge	.LBB60_23
@ BB#21:                                @   in Loop: Header=BB60_20 Depth=4
	movw	r0, #3
	vldr	d16, [r11, #-80]
	ldr	r1, [r11, #-48]
	add	r1, r1, r1, lsl #3
	movw	r2, :lower16:sb_sample
	movt	r2, :upper16:sb_sample
	add	r1, r2, r1, lsl #10
	ldr	r2, [r11, #-40]
	rsb	r2, r2, #1
	add	r2, r2, r2, lsl #3
	add	r1, r1, r2, lsl #9
	ldr	r2, [r11, #-44]
	add	r1, r1, r2, lsl #8
	ldr	r2, [r11, #-56]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vmul.f64	d16, d17, d16
	vstr	d16, [r1]
	str	r0, [sp, #36]           @ 4-byte Spill
@ BB#22:                                @   in Loop: Header=BB60_20 Depth=4
	ldr	r0, [r11, #-44]
	add	r0, r0, #1
	str	r0, [r11, #-44]
	b	.LBB60_20
.LBB60_23:                              @   in Loop: Header=BB60_16 Depth=3
	b	.LBB60_24
.LBB60_24:                              @   in Loop: Header=BB60_16 Depth=3
	ldr	r0, [r11, #-20]
	vldr	s0, [r0, #220]
	vcvt.f64.f32	d16, s0
	vldr	d17, [sp, #80]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB60_31
@ BB#25:                                @   in Loop: Header=BB60_16 Depth=3
	vldr	d16, [sp, #80]
	ldr	r0, [r11, #-20]
	vldr	s0, [r0, #224]
	vcvt.f64.f32	d17, s0
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB60_31
@ BB#26:                                @   in Loop: Header=BB60_16 Depth=3
	movw	r0, #0
	vldr	d16, .LCPI60_1
	ldr	r1, [r11, #-20]
	vldr	s0, [r1, #224]
	vcvt.f64.f32	d17, s0
	vldr	d18, [sp, #80]
	vsub.f64	d17, d17, d18
	vmul.f64	d16, d16, d17
	ldr	r1, [r11, #-20]
	vldr	s0, [r1, #224]
	ldr	r1, [r11, #-20]
	vldr	s2, [r1, #220]
	vsub.f32	s0, s0, s2
	vcvt.f64.f32	d17, s0
	vdiv.f64	d16, d16, d17
	vmov	r1, r2, d16
	str	r0, [sp, #32]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	cos
	vmov	d16, r0, r1
	vstr	d16, [r11, #-80]
	ldr	r0, [sp, #32]           @ 4-byte Reload
	str	r0, [r11, #-44]
.LBB60_27:                              @   Parent Loop BB60_3 Depth=1
                                        @     Parent Loop BB60_5 Depth=2
                                        @       Parent Loop BB60_16 Depth=3
                                        @ =>      This Inner Loop Header: Depth=4
	ldr	r0, [r11, #-44]
	cmp	r0, #18
	bge	.LBB60_30
@ BB#28:                                @   in Loop: Header=BB60_27 Depth=4
	movw	r0, #3
	vldr	d16, [r11, #-80]
	ldr	r1, [r11, #-48]
	add	r1, r1, r1, lsl #3
	movw	r2, :lower16:sb_sample
	movt	r2, :upper16:sb_sample
	add	r1, r2, r1, lsl #10
	ldr	r2, [r11, #-40]
	rsb	r2, r2, #1
	add	r2, r2, r2, lsl #3
	add	r1, r1, r2, lsl #9
	ldr	r2, [r11, #-44]
	add	r1, r1, r2, lsl #8
	ldr	r2, [r11, #-56]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vmul.f64	d16, d17, d16
	vstr	d16, [r1]
	str	r0, [sp, #28]           @ 4-byte Spill
@ BB#29:                                @   in Loop: Header=BB60_27 Depth=4
	ldr	r0, [r11, #-44]
	add	r0, r0, #1
	str	r0, [r11, #-44]
	b	.LBB60_27
.LBB60_30:                              @   in Loop: Header=BB60_16 Depth=3
	b	.LBB60_31
.LBB60_31:                              @   in Loop: Header=BB60_16 Depth=3
	b	.LBB60_32
.LBB60_32:                              @   in Loop: Header=BB60_16 Depth=3
	ldr	r0, [r11, #-56]
	add	r0, r0, #1
	str	r0, [r11, #-56]
	b	.LBB60_16
.LBB60_33:                              @   in Loop: Header=BB60_5 Depth=2
	b	.LBB60_34
.LBB60_34:                              @   in Loop: Header=BB60_5 Depth=2
	movw	r0, #0
	str	r0, [r11, #-56]
.LBB60_35:                              @   Parent Loop BB60_3 Depth=1
                                        @     Parent Loop BB60_5 Depth=2
                                        @ =>    This Loop Header: Depth=3
                                        @         Child Loop BB60_42 Depth 4
                                        @         Child Loop BB60_47 Depth 4
                                        @         Child Loop BB60_56 Depth 4
	ldr	r0, [r11, #-56]
	cmp	r0, #32
	bge	.LBB60_62
@ BB#36:                                @   in Loop: Header=BB60_35 Depth=3
	ldr	r0, [r11, #-64]
	ldr	r0, [r0, #24]
	str	r0, [sp, #76]
	ldr	r0, [r11, #-56]
	ldr	r1, [r11, #-20]
	ldr	r1, [r1, #228]
	cmp	r0, r1
	bge	.LBB60_38
@ BB#37:                                @   in Loop: Header=BB60_35 Depth=3
	ldr	r0, [r11, #-56]
	ldr	r1, [r11, #-20]
	ldr	r1, [r1, #232]
	cmp	r0, r1
	bgt	.LBB60_40
.LBB60_38:                              @   in Loop: Header=BB60_35 Depth=3
	movw	r0, #0
	movw	r2, #144
	ldr	r1, [r11, #-60]
	str	r0, [sp, #24]           @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #24]           @ 4-byte Reload
	and	r1, r1, #255
	bl	memset
	b	.LBB60_52
	.p2align	3
@ BB#39:
.LCPI60_1:
	.long	1413754136              @ double 1.5707963267948966
	.long	1073291771
.LBB60_40:                              @   in Loop: Header=BB60_35 Depth=3
	ldr	r0, [sp, #76]
	cmp	r0, #2
	bne	.LBB60_46
@ BB#41:                                @   in Loop: Header=BB60_35 Depth=3
	movw	r0, #2
	str	r0, [r11, #-44]
.LBB60_42:                              @   Parent Loop BB60_3 Depth=1
                                        @     Parent Loop BB60_5 Depth=2
                                        @       Parent Loop BB60_35 Depth=3
                                        @ =>      This Inner Loop Header: Depth=4
	ldr	r0, [r11, #-44]
	cmp	r0, #0
	blt	.LBB60_45
@ BB#43:                                @   in Loop: Header=BB60_42 Depth=4
	movw	r0, :lower16:win
	movt	r0, :upper16:win
	add	r0, r0, #608
	movw	r1, #3
	ldr	r2, [r11, #-44]
	movw	r3, :lower16:win
	movt	r3, :upper16:win
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2, #576]
	vstr	d16, [sp, #64]
	ldr	r2, [r11, #-48]
	add	r2, r2, r2, lsl #3
	movw	r12, :lower16:sb_sample
	movt	r12, :upper16:sb_sample
	add	r2, r12, r2, lsl #10
	ldr	lr, [r11, #-40]
	add	lr, lr, lr, lsl #3
	add	r2, r2, lr, lsl #9
	ldr	lr, [r11, #-44]
	add	r4, r2, lr, lsl #8
	ldr	r5, [r11, #-56]
	add	r4, r4, r5, lsl #3
	add	r4, r4, #1536
	vldr	d17, [r4]
	vmul.f64	d16, d17, d16
	rsb	r4, lr, #11
	add	r2, r2, r4, lsl #8
	add	r2, r2, r5, lsl #3
	vldr	d17, [r2]
	vsub.f64	d16, d16, d17
	add	r2, r3, #608
	add	r3, r2, lr, lsl #3
	vstr	d16, [r3]
	ldr	r3, [r11, #-44]
	add	lr, r2, r3, lsl #3
	ldr	r4, [r11, #-48]
	add	r4, r4, r4, lsl #3
	add	r4, r12, r4, lsl #10
	ldr	r5, [r11, #-40]
	add	r5, r5, r5, lsl #3
	add	r4, r4, r5, lsl #9
	add	r5, r4, r3, lsl #8
	ldr	r6, [r11, #-56]
	add	r5, r5, r6, lsl #3
	add	r5, r5, #3072
	vldr	d16, [r5]
	rsb	r3, r3, #17
	add	r3, r4, r3, lsl #8
	add	r3, r3, r6, lsl #3
	vldr	d17, [r3]
	vldr	d18, [sp, #64]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vstr	d16, [lr, #24]
	ldr	r3, [r11, #-44]
	add	lr, r2, r3, lsl #3
	ldr	r4, [r11, #-48]
	add	r4, r4, r4, lsl #3
	add	r4, r12, r4, lsl #10
	ldr	r5, [r11, #-40]
	add	r5, r5, r5, lsl #3
	add	r4, r4, r5, lsl #9
	add	r5, r4, r3, lsl #8
	ldr	r6, [r11, #-56]
	add	r5, r5, r6, lsl #3
	add	r5, r5, #3072
	vldr	d16, [r5]
	vldr	d17, [sp, #64]
	vmul.f64	d16, d16, d17
	rsb	r3, r3, #17
	add	r3, r4, r3, lsl #8
	add	r3, r3, r6, lsl #3
	vldr	d17, [r3]
	vsub.f64	d16, d16, d17
	vstr	d16, [lr, #48]
	ldr	r3, [r11, #-44]
	add	lr, r2, r3, lsl #3
	ldr	r4, [r11, #-48]
	add	r4, r4, r4, lsl #3
	add	r4, r12, r4, lsl #10
	ldr	r5, [r11, #-40]
	rsb	r5, r5, #1
	add	r5, r5, r5, lsl #3
	add	r4, r4, r5, lsl #9
	add	r5, r4, r3, lsl #8
	ldr	r6, [r11, #-56]
	add	r5, r5, r6, lsl #3
	vldr	d16, [r5]
	rsb	r3, r3, #5
	add	r3, r4, r3, lsl #8
	add	r3, r3, r6, lsl #3
	vldr	d17, [r3]
	vldr	d18, [sp, #64]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vstr	d16, [lr, #72]
	ldr	r3, [r11, #-44]
	add	lr, r2, r3, lsl #3
	ldr	r4, [r11, #-48]
	add	r4, r4, r4, lsl #3
	add	r4, r12, r4, lsl #10
	ldr	r5, [r11, #-40]
	rsb	r5, r5, #1
	add	r5, r5, r5, lsl #3
	add	r4, r4, r5, lsl #9
	add	r5, r4, r3, lsl #8
	ldr	r6, [r11, #-56]
	add	r5, r5, r6, lsl #3
	vldr	d16, [r5]
	vldr	d17, [sp, #64]
	vmul.f64	d16, d16, d17
	rsb	r3, r3, #5
	add	r3, r4, r3, lsl #8
	add	r3, r3, r6, lsl #3
	vldr	d17, [r3]
	vsub.f64	d16, d16, d17
	vstr	d16, [lr, #96]
	ldr	r3, [r11, #-48]
	add	r3, r3, r3, lsl #3
	add	r3, r12, r3, lsl #10
	ldr	r12, [r11, #-40]
	rsb	r12, r12, #1
	add	r12, r12, r12, lsl #3
	add	r3, r3, r12, lsl #9
	ldr	r12, [r11, #-44]
	add	lr, r3, r12, lsl #8
	ldr	r4, [r11, #-56]
	add	lr, lr, r4, lsl #3
	add	lr, lr, #1536
	vldr	d16, [lr]
	rsb	lr, r12, #11
	add	r3, r3, lr, lsl #8
	add	r3, r3, r4, lsl #3
	vldr	d17, [r3]
	vldr	d18, [sp, #64]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	add	r3, r12, #15
	add	r2, r2, r3, lsl #3
	vstr	d16, [r2]
	str	r0, [sp, #20]           @ 4-byte Spill
	str	r1, [sp, #16]           @ 4-byte Spill
@ BB#44:                                @   in Loop: Header=BB60_42 Depth=4
	mvn	r0, #0
	ldr	r1, [r11, #-44]
	add	r0, r1, r0
	str	r0, [r11, #-44]
	b	.LBB60_42
.LBB60_45:                              @   in Loop: Header=BB60_35 Depth=3
	movw	r0, :lower16:win
	movt	r0, :upper16:win
	add	r1, r0, #608
	ldr	r0, [r11, #-60]
	bl	mdct_short
	b	.LBB60_51
.LBB60_46:                              @   in Loop: Header=BB60_35 Depth=3
	movw	r0, #8
	str	r0, [r11, #-44]
.LBB60_47:                              @   Parent Loop BB60_3 Depth=1
                                        @     Parent Loop BB60_5 Depth=2
                                        @       Parent Loop BB60_35 Depth=3
                                        @ =>      This Inner Loop Header: Depth=4
	ldr	r0, [r11, #-44]
	cmp	r0, #0
	blt	.LBB60_50
@ BB#48:                                @   in Loop: Header=BB60_47 Depth=4
	movw	r0, :lower16:win
	movt	r0, :upper16:win
	add	r0, r0, #608
	movw	r1, #3
	ldr	r2, [sp, #76]
	add	r2, r2, r2, lsl #3
	movw	r3, :lower16:win
	movt	r3, :upper16:win
	add	r2, r3, r2, lsl #5
	ldr	r12, [r11, #-44]
	add	r2, r2, r12, lsl #3
	ldr	lr, [r11, #-48]
	add	lr, lr, lr, lsl #3
	movw	r4, :lower16:sb_sample
	movt	r4, :upper16:sb_sample
	add	lr, r4, lr, lsl #10
	ldr	r5, [r11, #-40]
	add	r5, r5, r5, lsl #3
	add	lr, lr, r5, lsl #9
	add	r5, lr, r12, lsl #8
	ldr	r6, [r11, #-56]
	add	r5, r5, r6, lsl #3
	vldr	d16, [r5]
	vldr	d17, [r2]
	vldr	d18, [r2, #72]
	vmul.f64	d16, d17, d16
	rsb	r2, r12, #17
	add	r2, lr, r2, lsl #8
	add	r2, r2, r6, lsl #3
	vldr	d17, [r2]
	vmul.f64	d17, d18, d17
	vsub.f64	d16, d16, d17
	add	r2, r3, #608
	add	r12, r2, r12, lsl #3
	vstr	d16, [r12]
	ldr	r12, [sp, #76]
	add	r12, r12, r12, lsl #3
	add	r3, r3, r12, lsl #5
	ldr	r12, [r11, #-44]
	add	r3, r3, r12, lsl #3
	ldr	lr, [r11, #-48]
	add	lr, lr, lr, lsl #3
	add	lr, r4, lr, lsl #10
	ldr	r4, [r11, #-40]
	rsb	r4, r4, #1
	add	r4, r4, r4, lsl #3
	add	lr, lr, r4, lsl #9
	add	r4, lr, r12, lsl #8
	ldr	r5, [r11, #-56]
	add	r4, r4, r5, lsl #3
	vldr	d16, [r4]
	vldr	d17, [r3, #144]
	vldr	d18, [r3, #216]
	vmul.f64	d16, d17, d16
	rsb	r3, r12, #17
	add	r3, lr, r3, lsl #8
	add	r3, r3, r5, lsl #3
	vldr	d17, [r3]
	vmul.f64	d17, d18, d17
	vadd.f64	d16, d16, d17
	add	r3, r12, #9
	add	r2, r2, r3, lsl #3
	vstr	d16, [r2]
	str	r0, [sp, #12]           @ 4-byte Spill
	str	r1, [sp, #8]            @ 4-byte Spill
@ BB#49:                                @   in Loop: Header=BB60_47 Depth=4
	mvn	r0, #0
	ldr	r1, [r11, #-44]
	add	r0, r1, r0
	str	r0, [r11, #-44]
	b	.LBB60_47
.LBB60_50:                              @   in Loop: Header=BB60_35 Depth=3
	movw	r0, :lower16:win
	movt	r0, :upper16:win
	add	r1, r0, #608
	ldr	r0, [r11, #-60]
	bl	mdct_long
.LBB60_51:                              @   in Loop: Header=BB60_35 Depth=3
	b	.LBB60_52
.LBB60_52:                              @   in Loop: Header=BB60_35 Depth=3
	ldr	r0, [sp, #76]
	cmp	r0, #2
	beq	.LBB60_60
@ BB#53:                                @   in Loop: Header=BB60_35 Depth=3
	ldr	r0, [r11, #-56]
	cmp	r0, #0
	bne	.LBB60_55
@ BB#54:                                @   in Loop: Header=BB60_35 Depth=3
	b	.LBB60_61
.LBB60_55:                              @   in Loop: Header=BB60_35 Depth=3
	movw	r0, #7
	str	r0, [r11, #-44]
.LBB60_56:                              @   Parent Loop BB60_3 Depth=1
                                        @     Parent Loop BB60_5 Depth=2
                                        @       Parent Loop BB60_35 Depth=3
                                        @ =>      This Inner Loop Header: Depth=4
	ldr	r0, [r11, #-44]
	cmp	r0, #0
	blt	.LBB60_59
@ BB#57:                                @   in Loop: Header=BB60_56 Depth=4
	movw	r0, #3
	ldr	r1, [r11, #-60]
	ldr	r2, [r11, #-44]
	add	r3, r1, r2, lsl #3
	vldr	d16, [r3]
	movw	r3, :lower16:ca
	movt	r3, :upper16:ca
	add	r12, r3, r2, lsl #3
	vldr	d17, [r12]
	vmul.f64	d16, d16, d17
	mvn	r12, r2
	add	r1, r1, r12, lsl #3
	vldr	d17, [r1]
	movw	r1, :lower16:cs
	movt	r1, :upper16:cs
	add	r2, r1, r2, lsl #3
	vldr	d18, [r2]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vstr	d16, [sp, #56]
	ldr	r2, [r11, #-60]
	ldr	r12, [r11, #-44]
	add	lr, r2, r12, lsl #3
	vldr	d16, [lr]
	add	r1, r1, r12, lsl #3
	vldr	d17, [r1]
	vmul.f64	d16, d16, d17
	mvn	r1, r12
	add	r1, r2, r1, lsl #3
	vldr	d17, [r1]
	add	r1, r3, r12, lsl #3
	vldr	d18, [r1]
	vmul.f64	d17, d17, d18
	vsub.f64	d16, d16, d17
	vstr	d16, [sp, #48]
	vldr	d16, [sp, #56]
	ldr	r1, [r11, #-60]
	ldr	r2, [r11, #-44]
	mvn	r2, r2
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	vldr	d16, [sp, #48]
	ldr	r1, [r11, #-60]
	ldr	r2, [r11, #-44]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	str	r0, [sp, #4]            @ 4-byte Spill
@ BB#58:                                @   in Loop: Header=BB60_56 Depth=4
	mvn	r0, #0
	ldr	r1, [r11, #-44]
	add	r0, r1, r0
	str	r0, [r11, #-44]
	b	.LBB60_56
.LBB60_59:                              @   in Loop: Header=BB60_35 Depth=3
	b	.LBB60_60
.LBB60_60:                              @   in Loop: Header=BB60_35 Depth=3
	b	.LBB60_61
.LBB60_61:                              @   in Loop: Header=BB60_35 Depth=3
	ldr	r0, [r11, #-56]
	add	r0, r0, #1
	str	r0, [r11, #-56]
	ldr	r0, [r11, #-60]
	add	r0, r0, #144
	str	r0, [r11, #-60]
	b	.LBB60_35
.LBB60_62:                              @   in Loop: Header=BB60_5 Depth=2
	b	.LBB60_63
.LBB60_63:                              @   in Loop: Header=BB60_5 Depth=2
	ldr	r0, [r11, #-40]
	add	r0, r0, #1
	str	r0, [r11, #-40]
	b	.LBB60_5
.LBB60_64:                              @   in Loop: Header=BB60_3 Depth=1
	ldr	r0, [r11, #-28]
	str	r0, [r11, #-52]
	ldr	r0, [r11, #-20]
	ldr	r0, [r0, #180]
	cmp	r0, #1
	bne	.LBB60_66
@ BB#65:                                @   in Loop: Header=BB60_3 Depth=1
	movw	r2, #4608
	movw	r0, :lower16:sb_sample
	movt	r0, :upper16:sb_sample
	movw	r1, #9216
	ldr	r3, [r11, #-48]
	mul	r3, r3, r1
	add	r3, r0, r3
	ldr	r12, [r11, #-48]
	mul	r1, r12, r1
	add	r0, r0, r1
	add	r0, r0, #4608
	str	r0, [sp]                @ 4-byte Spill
	mov	r0, r3
	ldr	r1, [sp]                @ 4-byte Reload
	bl	memcpy
.LBB60_66:                              @   in Loop: Header=BB60_3 Depth=1
	b	.LBB60_67
.LBB60_67:                              @   in Loop: Header=BB60_3 Depth=1
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB60_3
.LBB60_68:
	sub	sp, r11, #16
	pop	{r4, r5, r6, r10, r11, pc}
@ BB#69:
.Lfunc_end60:
	.size	mdct_sub48, .Lfunc_end60-mdct_sub48
	.cantunwind
	.fnend

	.globl	mdct_init48
	.p2align	3
	.type	mdct_init48,%function
	.code	32                      @ @mdct_init48
mdct_init48:
	.fnstart
@ BB#0:
	push	{r4, r5, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #608
	movw	r0, #0
	str	r0, [r11, #-16]
.LBB61_1:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-16]
	cmp	r0, #8
	bge	.LBB61_4
@ BB#2:                                 @   in Loop: Header=BB61_1 Depth=1
	movw	r0, :lower16:cs
	movt	r0, :upper16:cs
	movw	r1, #3
	ldr	r2, [r11, #-16]
	movw	r3, :lower16:mdct_init48.c
	movt	r3, :upper16:mdct_init48.c
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vmul.f64	d16, d16, d16
	vmov.f64	d17, #1.000000e+00
	vadd.f64	d16, d16, d17
	vstr	d16, [r11, #-32]
	vmov	r2, r12, d16
	str	r0, [sp, #276]          @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #272]          @ 4-byte Spill
	mov	r1, r12
	vstr	d17, [sp, #264]         @ 8-byte Spill
	str	r3, [sp, #260]          @ 4-byte Spill
	bl	sqrt
	vmov	d16, r0, r1
	vstr	d16, [r11, #-32]
	ldr	r0, [r11, #-16]
	ldr	r1, [sp, #260]          @ 4-byte Reload
	add	r2, r1, r0, lsl #3
	vldr	d17, [r2]
	vdiv.f64	d16, d17, d16
	movw	r2, :lower16:ca
	movt	r2, :upper16:ca
	add	r0, r2, r0, lsl #3
	vstr	d16, [r0]
	vldr	d16, [r11, #-32]
	vldr	d17, [sp, #264]         @ 8-byte Reload
	vdiv.f64	d16, d17, d16
	ldr	r0, [r11, #-16]
	movw	r2, :lower16:cs
	movt	r2, :upper16:cs
	add	r0, r2, r0, lsl #3
	vstr	d16, [r0]
@ BB#3:                                 @   in Loop: Header=BB61_1 Depth=1
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB61_1
.LBB61_4:
	movw	r0, #0
	str	r0, [r11, #-12]
.LBB61_5:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-12]
	cmp	r0, #36
	bge	.LBB61_8
@ BB#6:                                 @   in Loop: Header=BB61_5 Depth=1
	movw	r0, :lower16:win
	movt	r0, :upper16:win
	movw	r1, #3
	ldr	r2, [r11, #-12]
	vmov	s0, r2
	vcvt.f64.s32	d16, s0
	vmov.f64	d17, #5.000000e-01
	vadd.f64	d16, d16, d17
	vldr	d17, .LCPI61_12
	vmul.f64	d16, d16, d17
	vmov	r2, r3, d16
	str	r0, [sp, #256]          @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #252]          @ 4-byte Spill
	mov	r1, r3
	bl	sin
	vmov	d16, r0, r1
	ldr	r0, [r11, #-12]
	movw	r1, :lower16:win
	movt	r1, :upper16:win
	add	r0, r1, r0, lsl #3
	vstr	d16, [r0]
@ BB#7:                                 @   in Loop: Header=BB61_5 Depth=1
	ldr	r0, [r11, #-12]
	add	r0, r0, #1
	str	r0, [r11, #-12]
	b	.LBB61_5
.LBB61_8:
	movw	r0, #0
	str	r0, [r11, #-12]
.LBB61_9:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-12]
	cmp	r0, #18
	bge	.LBB61_12
@ BB#10:                                @   in Loop: Header=BB61_9 Depth=1
	movw	r0, :lower16:win
	movt	r0, :upper16:win
	add	r0, r0, #288
	movw	r1, #3
	ldr	r2, [r11, #-12]
	movw	r3, :lower16:win
	movt	r3, :upper16:win
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	add	r2, r2, #288
	vstr	d16, [r2]
	str	r0, [sp, #248]          @ 4-byte Spill
	str	r1, [sp, #244]          @ 4-byte Spill
@ BB#11:                                @   in Loop: Header=BB61_9 Depth=1
	ldr	r0, [r11, #-12]
	add	r0, r0, #1
	str	r0, [r11, #-12]
	b	.LBB61_9
.LBB61_12:
	b	.LBB61_13
.LBB61_13:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-12]
	cmp	r0, #24
	bge	.LBB61_16
@ BB#14:                                @   in Loop: Header=BB61_13 Depth=1
	vmov.f64	d16, #1.000000e+00
	movw	r0, :lower16:win
	movt	r0, :upper16:win
	add	r0, r0, #288
	movw	r1, #3
	ldr	r2, [r11, #-12]
	movw	r3, :lower16:win
	movt	r3, :upper16:win
	add	r2, r3, r2, lsl #3
	add	r2, r2, #288
	vstr	d16, [r2]
	str	r1, [sp, #240]          @ 4-byte Spill
	str	r0, [sp, #236]          @ 4-byte Spill
@ BB#15:                                @   in Loop: Header=BB61_13 Depth=1
	ldr	r0, [r11, #-12]
	add	r0, r0, #1
	str	r0, [r11, #-12]
	b	.LBB61_13
.LBB61_16:
	b	.LBB61_17
.LBB61_17:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-12]
	cmp	r0, #30
	bge	.LBB61_20
@ BB#18:                                @   in Loop: Header=BB61_17 Depth=1
	movw	r0, :lower16:win
	movt	r0, :upper16:win
	add	r0, r0, #288
	movw	r1, #3
	ldr	r2, [r11, #-12]
	vmov	s0, r2
	vcvt.f64.s32	d16, s0
	vmov.f64	d17, #5.000000e-01
	vadd.f64	d16, d16, d17
	vldr	d17, .LCPI61_13
	vmul.f64	d16, d16, d17
	vmov	r2, r3, d16
	str	r0, [sp, #232]          @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #228]          @ 4-byte Spill
	mov	r1, r3
	bl	cos
	vmov	d16, r0, r1
	ldr	r0, [r11, #-12]
	movw	r1, :lower16:win
	movt	r1, :upper16:win
	add	r0, r1, r0, lsl #3
	add	r0, r0, #288
	vstr	d16, [r0]
@ BB#19:                                @   in Loop: Header=BB61_17 Depth=1
	ldr	r0, [r11, #-12]
	add	r0, r0, #1
	str	r0, [r11, #-12]
	b	.LBB61_17
.LBB61_20:
	b	.LBB61_21
.LBB61_21:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-12]
	cmp	r0, #36
	bge	.LBB61_24
@ BB#22:                                @   in Loop: Header=BB61_21 Depth=1
	vldr	d16, .LCPI61_14
	movw	r0, :lower16:win
	movt	r0, :upper16:win
	add	r0, r0, #288
	movw	r1, #3
	ldr	r2, [r11, #-12]
	movw	r3, :lower16:win
	movt	r3, :upper16:win
	add	r2, r3, r2, lsl #3
	add	r2, r2, #288
	vstr	d16, [r2]
	str	r1, [sp, #224]          @ 4-byte Spill
	str	r0, [sp, #220]          @ 4-byte Spill
@ BB#23:                                @   in Loop: Header=BB61_21 Depth=1
	ldr	r0, [r11, #-12]
	add	r0, r0, #1
	str	r0, [r11, #-12]
	b	.LBB61_21
.LBB61_24:
	movw	r0, #0
	str	r0, [r11, #-12]
.LBB61_25:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-12]
	cmp	r0, #36
	bge	.LBB61_28
@ BB#26:                                @   in Loop: Header=BB61_25 Depth=1
	movw	r0, :lower16:win
	movt	r0, :upper16:win
	add	r0, r0, #864
	movw	r1, #3
	ldr	r2, [r11, #-12]
	rsb	r3, r2, #35
	movw	r12, :lower16:win
	movt	r12, :upper16:win
	add	r3, r12, r3, lsl #3
	vldr	d16, [r3, #288]
	add	r2, r12, r2, lsl #3
	add	r2, r2, #864
	vstr	d16, [r2]
	str	r0, [sp, #216]          @ 4-byte Spill
	str	r1, [sp, #212]          @ 4-byte Spill
@ BB#27:                                @   in Loop: Header=BB61_25 Depth=1
	ldr	r0, [r11, #-12]
	add	r0, r0, #1
	str	r0, [r11, #-12]
	b	.LBB61_25
.LBB61_28:
	movw	r0, #11
	movw	r1, :lower16:cos_l
	movt	r1, :upper16:cos_l
	vldr	d16, .LCPI61_15
	vstr	d16, [r11, #-32]
	str	r1, [r11, #-44]
	str	r0, [r11, #-48]
.LBB61_29:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB61_30 Depth 2
                                        @     Child Loop BB61_34 Depth 2
	movw	r0, #0
	movw	r1, :lower16:all
	movt	r1, :upper16:all
	movw	r2, #2
	ldr	r3, [r11, #-48]
	movw	r12, :lower16:all
	movt	r12, :upper16:all
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	str	r3, [r11, #-20]
	str	r0, [r11, #-16]
	str	r2, [sp, #208]          @ 4-byte Spill
	str	r1, [sp, #204]          @ 4-byte Spill
.LBB61_30:                              @   Parent Loop BB61_29 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-16]
	cmp	r0, #9
	bge	.LBB61_33
@ BB#31:                                @   in Loop: Header=BB61_30 Depth=2
	movw	r0, #2
	vldr	d16, [r11, #-32]
	ldr	r1, [r11, #-20]
	mov	r2, #1
	orr	r1, r2, r1, lsl #1
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vldr	d18, .LCPI61_16
	vmul.f64	d17, d17, d18
	ldr	r1, [r11, #-16]
	lsl	r1, r1, #2
	add	r1, r1, #2
	add	r1, r1, #36
	vmov	s0, r1
	vcvt.f64.s32	d18, s0
	vmul.f64	d17, d17, d18
	vmov	r1, r2, d17
	str	r0, [sp, #200]          @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	vstr	d16, [sp, #192]         @ 8-byte Spill
	bl	cos
	vmov	d16, r0, r1
	vldr	d17, [sp, #192]         @ 8-byte Reload
	vmul.f64	d16, d17, d16
	ldr	r0, [r11, #-44]
	add	r1, r0, #8
	str	r1, [r11, #-44]
	vstr	d16, [r0]
@ BB#32:                                @   in Loop: Header=BB61_30 Depth=2
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB61_30
.LBB61_33:                              @   in Loop: Header=BB61_29 Depth=1
	movw	r0, #0
	str	r0, [r11, #-16]
.LBB61_34:                              @   Parent Loop BB61_29 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-16]
	cmp	r0, #9
	bge	.LBB61_44
@ BB#35:                                @   in Loop: Header=BB61_34 Depth=2
	movw	r0, #2
	vldr	d16, [r11, #-32]
	ldr	r1, [r11, #-20]
	mov	r2, #1
	orr	r1, r2, r1, lsl #1
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vldr	d18, .LCPI61_16
	vmul.f64	d17, d17, d18
	ldr	r1, [r11, #-16]
	lsl	r1, r1, #2
	add	r1, r1, #2
	add	r1, r1, #108
	vmov	s0, r1
	vcvt.f64.s32	d18, s0
	vmul.f64	d17, d17, d18
	vmov	r1, r2, d17
	str	r0, [sp, #188]          @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	vstr	d16, [sp, #176]         @ 8-byte Spill
	bl	cos
	vmov	d16, r0, r1
	vldr	d17, [sp, #176]         @ 8-byte Reload
	vmul.f64	d16, d17, d16
	ldr	r0, [r11, #-44]
	add	r1, r0, #8
	str	r1, [r11, #-44]
	vstr	d16, [r0]
@ BB#36:                                @   in Loop: Header=BB61_34 Depth=2
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB61_34
	.p2align	3
@ BB#37:
.LCPI61_12:
	.long	1256670343              @ double 0.087266462599716474
	.long	1068914456
	.p2align	3
@ BB#38:
.LCPI61_13:
	.long	942502757               @ double 0.26179938779914941
	.long	1070645586
	.p2align	3
@ BB#39:
.LCPI61_14:
	.long	0                       @ double 0
	.long	0
	.p2align	3
@ BB#40:
.LCPI61_15:
	.long	477218588               @ double 0.1111111111111111
	.long	1069314503
	.p2align	3
@ BB#41:
.LCPI61_16:
	.long	1256670343              @ double 0.021816615649929118
	.long	1066817304
	.p2align	3
@ BB#42:
.LCPI61_17:
	.long	0                       @ double 46
	.long	1078394880
	.p2align	3
@ BB#43:
.LCPI61_18:
	.long	0                       @ double 38
	.long	1078132736
.LBB61_44:                              @   in Loop: Header=BB61_29 Depth=1
	b	.LBB61_45
.LBB61_45:                              @   in Loop: Header=BB61_29 Depth=1
	mvn	r0, #0
	ldr	r1, [r11, #-48]
	add	r0, r1, r0
	str	r0, [r11, #-48]
	cmp	r0, #0
	bge	.LBB61_29
@ BB#46:
	movw	r0, #3
	str	r0, [r11, #-48]
.LBB61_47:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB61_48 Depth 2
                                        @     Child Loop BB61_52 Depth 2
	movw	r0, #0
	movw	r1, :lower16:mdct_init48.d3
	movt	r1, :upper16:mdct_init48.d3
	movw	r2, #2
	ldr	r3, [r11, #-48]
	movw	r12, :lower16:mdct_init48.d3
	movt	r12, :upper16:mdct_init48.d3
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	str	r3, [r11, #-20]
	str	r0, [r11, #-16]
	str	r2, [sp, #172]          @ 4-byte Spill
	str	r1, [sp, #168]          @ 4-byte Spill
.LBB61_48:                              @   Parent Loop BB61_47 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-16]
	cmp	r0, #3
	bge	.LBB61_51
@ BB#49:                                @   in Loop: Header=BB61_48 Depth=2
	movw	r0, #2
	vldr	d16, [r11, #-32]
	ldr	r1, [r11, #-20]
	mov	r2, #1
	orr	r1, r2, r1, lsl #1
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vldr	d18, .LCPI61_16
	vmul.f64	d17, d17, d18
	ldr	r1, [r11, #-16]
	lsl	r1, r1, #2
	add	r1, r1, #2
	add	r1, r1, #36
	vmov	s0, r1
	vcvt.f64.s32	d18, s0
	vmul.f64	d17, d17, d18
	vmov	r1, r2, d17
	str	r0, [sp, #164]          @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	vstr	d16, [sp, #152]         @ 8-byte Spill
	bl	cos
	vmov	d16, r0, r1
	vldr	d17, [sp, #152]         @ 8-byte Reload
	vmul.f64	d16, d17, d16
	ldr	r0, [r11, #-44]
	add	r1, r0, #8
	str	r1, [r11, #-44]
	vstr	d16, [r0]
@ BB#50:                                @   in Loop: Header=BB61_48 Depth=2
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB61_48
.LBB61_51:                              @   in Loop: Header=BB61_47 Depth=1
	movw	r0, #6
	str	r0, [r11, #-16]
.LBB61_52:                              @   Parent Loop BB61_47 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-16]
	cmp	r0, #9
	bge	.LBB61_55
@ BB#53:                                @   in Loop: Header=BB61_52 Depth=2
	movw	r0, #2
	vldr	d16, [r11, #-32]
	ldr	r1, [r11, #-20]
	mov	r2, #1
	orr	r1, r2, r1, lsl #1
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vldr	d18, .LCPI61_16
	vmul.f64	d17, d17, d18
	ldr	r1, [r11, #-16]
	lsl	r1, r1, #2
	add	r1, r1, #2
	add	r1, r1, #36
	vmov	s0, r1
	vcvt.f64.s32	d18, s0
	vmul.f64	d17, d17, d18
	vmov	r1, r2, d17
	str	r0, [sp, #148]          @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	vstr	d16, [sp, #136]         @ 8-byte Spill
	bl	cos
	vmov	d16, r0, r1
	vldr	d17, [sp, #136]         @ 8-byte Reload
	vmul.f64	d16, d17, d16
	ldr	r0, [r11, #-44]
	add	r1, r0, #8
	str	r1, [r11, #-44]
	vstr	d16, [r0]
@ BB#54:                                @   in Loop: Header=BB61_52 Depth=2
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB61_52
.LBB61_55:                              @   in Loop: Header=BB61_47 Depth=1
	b	.LBB61_56
.LBB61_56:                              @   in Loop: Header=BB61_47 Depth=1
	mvn	r0, #0
	ldr	r1, [r11, #-48]
	add	r0, r1, r0
	str	r0, [r11, #-48]
	cmp	r0, #0
	bge	.LBB61_47
@ BB#57:
	movw	r0, #1
	str	r0, [r11, #-48]
.LBB61_58:                              @ =>This Inner Loop Header: Depth=1
	vldr	d16, .LCPI61_17
	vldr	d17, .LCPI61_16
	movw	r0, #1
	ldr	r1, [r11, #-48]
	movw	r2, :lower16:mdct_init48.d9
	movt	r2, :upper16:mdct_init48.d9
	ldr	r1, [r2, r1, lsl #2]
	str	r1, [r11, #-20]
	vldr	d18, [r11, #-32]
	mov	r2, #1
	orr	r1, r2, r1, lsl #1
	vmov	s0, r1
	vcvt.f64.s32	d19, s0
	vldr	d20, .LCPI61_16
	vmul.f64	d19, d19, d20
	vldr	d20, .LCPI61_18
	vmul.f64	d19, d19, d20
	vmov	r1, r2, d19
	str	r0, [sp, #132]          @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	vstr	d16, [sp, #120]         @ 8-byte Spill
	vstr	d17, [sp, #112]         @ 8-byte Spill
	vstr	d18, [sp, #104]         @ 8-byte Spill
	bl	cos
	vmov	d16, r0, r1
	vldr	d17, [sp, #104]         @ 8-byte Reload
	vmul.f64	d16, d17, d16
	ldr	r0, [r11, #-44]
	add	r1, r0, #8
	str	r1, [r11, #-44]
	vstr	d16, [r0]
	vldr	d16, [r11, #-32]
	ldr	r0, [r11, #-20]
	lsl	r0, r0, #1
	add	r0, r0, #1
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vldr	d18, [sp, #112]         @ 8-byte Reload
	vmul.f64	d17, d18, d17
	vldr	d19, [sp, #120]         @ 8-byte Reload
	vmul.f64	d17, d17, d19
	vmov	r0, r1, d17
	vstr	d16, [sp, #96]          @ 8-byte Spill
	bl	cos
	vmov	d16, r0, r1
	vldr	d17, [sp, #96]          @ 8-byte Reload
	vmul.f64	d16, d17, d16
	ldr	r0, [r11, #-44]
	add	r1, r0, #8
	str	r1, [r11, #-44]
	vstr	d16, [r0]
@ BB#59:                                @   in Loop: Header=BB61_58 Depth=1
	mvn	r0, #0
	ldr	r1, [r11, #-48]
	add	r0, r1, r0
	str	r0, [r11, #-48]
	cmp	r0, #0
	bge	.LBB61_58
@ BB#60:
	movw	r0, #0
	movw	r1, :lower16:enwindow
	movt	r1, :upper16:enwindow
	add	r2, r1, #1984
	vldr	d16, [r2]
	vstr	d16, [r11, #-40]
	str	r1, [r11, #-52]
	str	r1, [r11, #-56]
	ldr	r1, [r11, #-52]
	add	r2, r1, #8
	str	r2, [r11, #-52]
	vldr	d16, [r1]
	vstr	d16, [sp, #304]
	vldr	d16, [sp, #304]
	vldr	d17, [r11, #-40]
	vdiv.f64	d16, d16, d17
	vstr	d16, [r11, #-184]
	str	r0, [r11, #-16]
.LBB61_61:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-16]
	cmp	r0, #7
	bge	.LBB61_64
@ BB#62:                                @   in Loop: Header=BB61_61 Depth=1
	ldr	r0, [r11, #-52]
	add	r1, r0, #8
	str	r1, [r11, #-52]
	vldr	d16, [r0]
	vldr	d17, [sp, #304]
	vdiv.f64	d16, d16, d17
	ldr	r0, [r11, #-56]
	add	r1, r0, #8
	str	r1, [r11, #-56]
	vstr	d16, [r0]
@ BB#63:                                @   in Loop: Header=BB61_61 Depth=1
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB61_61
.LBB61_64:
	movw	r0, #14
	str	r0, [r11, #-12]
.LBB61_65:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB61_67 Depth 2
	ldr	r0, [r11, #-12]
	cmp	r0, #0
	blt	.LBB61_72
@ BB#66:                                @   in Loop: Header=BB61_65 Depth=1
	movw	r0, #0
	sub	r1, r11, #304
	movw	r2, #3
	ldr	r3, [r11, #-52]
	add	r12, r3, #8
	str	r12, [r11, #-52]
	vldr	d16, [r3]
	vstr	d16, [sp, #296]
	vldr	d17, [r11, #-40]
	vdiv.f64	d16, d16, d17
	ldr	r3, [r11, #-12]
	rsb	r3, r3, #30
	sub	r12, r11, #304
	add	r3, r12, r3, lsl #3
	vstr	d16, [r3]
	ldr	r3, [r11, #-12]
	add	r3, r12, r3, lsl #3
	vstr	d16, [r3]
	str	r0, [r11, #-16]
	str	r2, [sp, #92]           @ 4-byte Spill
	str	r1, [sp, #88]           @ 4-byte Spill
.LBB61_67:                              @   Parent Loop BB61_65 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-16]
	cmp	r0, #15
	bge	.LBB61_70
@ BB#68:                                @   in Loop: Header=BB61_67 Depth=2
	ldr	r0, [r11, #-52]
	add	r1, r0, #8
	str	r1, [r11, #-52]
	vldr	d16, [r0]
	vldr	d17, [sp, #296]
	vdiv.f64	d16, d16, d17
	ldr	r0, [r11, #-56]
	add	r1, r0, #8
	str	r1, [r11, #-56]
	vstr	d16, [r0]
@ BB#69:                                @   in Loop: Header=BB61_67 Depth=2
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB61_67
.LBB61_70:                              @   in Loop: Header=BB61_65 Depth=1
	b	.LBB61_71
.LBB61_71:                              @   in Loop: Header=BB61_65 Depth=1
	mvn	r0, #0
	ldr	r1, [r11, #-12]
	add	r0, r1, r0
	str	r0, [r11, #-12]
	b	.LBB61_65
.LBB61_72:
	movw	r0, #0
	ldr	r1, [r11, #-52]
	add	r1, r1, #8
	str	r1, [r11, #-52]
	str	r0, [r11, #-16]
.LBB61_73:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-16]
	cmp	r0, #7
	bge	.LBB61_76
@ BB#74:                                @   in Loop: Header=BB61_73 Depth=1
	ldr	r0, [r11, #-52]
	add	r1, r0, #8
	str	r1, [r11, #-52]
	vldr	d16, [r0]
	vldr	d17, [r11, #-40]
	vdiv.f64	d16, d16, d17
	ldr	r0, [r11, #-56]
	add	r1, r0, #8
	str	r1, [r11, #-56]
	vstr	d16, [r0]
@ BB#75:                                @   in Loop: Header=BB61_73 Depth=1
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB61_73
.LBB61_76:
	movw	r0, #15
	movw	r1, :lower16:mm
	movt	r1, :upper16:mm
	str	r1, [r11, #-52]
	str	r0, [r11, #-12]
.LBB61_77:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB61_79 Depth 2
	ldr	r0, [r11, #-12]
	cmp	r0, #0
	blt	.LBB61_84
@ BB#78:                                @   in Loop: Header=BB61_77 Depth=1
	movw	r0, #1
	str	r0, [r11, #-16]
.LBB61_79:                              @   Parent Loop BB61_77 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-16]
	cmp	r0, #32
	bge	.LBB61_82
@ BB#80:                                @   in Loop: Header=BB61_79 Depth=2
	sub	r0, r11, #304
	movw	r1, #3
	ldr	r2, [r11, #-12]
	mov	r3, #1
	orr	r2, r3, r2, lsl #1
	ldr	r3, [r11, #-16]
	mul	r2, r2, r3
	vmov	s0, r2
	vcvt.f64.s32	d16, s0
	vldr	d17, .LCPI61_19
	vmul.f64	d16, d16, d17
	vldr	d17, .LCPI61_20
	vdiv.f64	d16, d16, d17
	vmov	r2, r3, d16
	str	r0, [sp, #84]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #80]           @ 4-byte Spill
	mov	r1, r3
	bl	cos
	vmov	d16, r0, r1
	ldr	r0, [r11, #-16]
	sub	r0, r0, #1
	sub	r1, r11, #304
	add	r0, r1, r0, lsl #3
	vldr	d17, [r0]
	vmul.f64	d16, d16, d17
	ldr	r0, [r11, #-52]
	add	r1, r0, #8
	str	r1, [r11, #-52]
	vstr	d16, [r0]
@ BB#81:                                @   in Loop: Header=BB61_79 Depth=2
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB61_79
.LBB61_82:                              @   in Loop: Header=BB61_77 Depth=1
	b	.LBB61_83
.LBB61_83:                              @   in Loop: Header=BB61_77 Depth=1
	mvn	r0, #0
	ldr	r1, [r11, #-12]
	add	r0, r1, r0
	str	r0, [r11, #-12]
	b	.LBB61_77
.LBB61_84:
	movw	r0, #0
	str	r0, [r11, #-16]
.LBB61_85:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-16]
	cmp	r0, #4
	bge	.LBB61_88
@ BB#86:                                @   in Loop: Header=BB61_85 Depth=1
	movw	r0, :lower16:win
	movt	r0, :upper16:win
	add	r0, r0, #864
	movw	r1, #3
	ldr	r2, [r11, #-16]
	rsb	r2, r2, #17
	movw	r3, :lower16:win
	movt	r3, :upper16:win
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vstr	d16, [sp, #288]
	ldr	r2, [r11, #-16]
	add	r12, r3, r2, lsl #3
	vldr	d16, [r12, #72]
	rsb	r2, r2, #17
	add	r2, r3, r2, lsl #3
	vstr	d16, [r2]
	ldr	r2, [r11, #-16]
	add	r2, r3, r2, lsl #3
	vldr	d16, [sp, #288]
	vstr	d16, [r2, #72]
	ldr	r2, [r11, #-16]
	rsb	r2, r2, #35
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vstr	d16, [sp, #288]
	ldr	r2, [r11, #-16]
	add	r12, r3, r2, lsl #3
	vldr	d16, [r12, #216]
	rsb	r2, r2, #35
	add	r2, r3, r2, lsl #3
	vstr	d16, [r2]
	ldr	r2, [r11, #-16]
	add	r2, r3, r2, lsl #3
	vldr	d16, [sp, #288]
	vstr	d16, [r2, #216]
	ldr	r2, [r11, #-16]
	rsb	r2, r2, #17
	add	r12, r3, #288
	add	r2, r12, r2, lsl #3
	vldr	d16, [r2]
	vstr	d16, [sp, #288]
	ldr	r2, [r11, #-16]
	add	lr, r12, r2, lsl #3
	vldr	d16, [lr, #72]
	rsb	r2, r2, #17
	add	r2, r12, r2, lsl #3
	vstr	d16, [r2]
	ldr	r2, [r11, #-16]
	add	r2, r12, r2, lsl #3
	vldr	d16, [sp, #288]
	vstr	d16, [r2, #72]
	ldr	r2, [r11, #-16]
	rsb	r2, r2, #35
	add	r2, r12, r2, lsl #3
	vldr	d16, [r2]
	vstr	d16, [sp, #288]
	ldr	r2, [r11, #-16]
	add	lr, r12, r2, lsl #3
	vldr	d16, [lr, #216]
	rsb	r2, r2, #35
	add	r2, r12, r2, lsl #3
	vstr	d16, [r2]
	ldr	r2, [r11, #-16]
	add	r2, r12, r2, lsl #3
	vldr	d16, [sp, #288]
	vstr	d16, [r2, #216]
	ldr	r2, [r11, #-16]
	rsb	r2, r2, #17
	add	r3, r3, #864
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vstr	d16, [sp, #288]
	ldr	r2, [r11, #-16]
	add	r12, r3, r2, lsl #3
	vldr	d16, [r12, #72]
	rsb	r2, r2, #17
	add	r2, r3, r2, lsl #3
	vstr	d16, [r2]
	ldr	r2, [r11, #-16]
	add	r2, r3, r2, lsl #3
	vldr	d16, [sp, #288]
	vstr	d16, [r2, #72]
	ldr	r2, [r11, #-16]
	rsb	r2, r2, #35
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vstr	d16, [sp, #288]
	ldr	r2, [r11, #-16]
	add	r12, r3, r2, lsl #3
	vldr	d16, [r12, #216]
	rsb	r2, r2, #35
	add	r2, r3, r2, lsl #3
	vstr	d16, [r2]
	vldr	d16, [sp, #288]
	ldr	r2, [r11, #-16]
	add	r2, r2, #27
	add	r2, r3, r2, lsl #3
	vstr	d16, [r2]
	str	r0, [sp, #76]           @ 4-byte Spill
	str	r1, [sp, #72]           @ 4-byte Spill
@ BB#87:                                @   in Loop: Header=BB61_85 Depth=1
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB61_85
.LBB61_88:
	movw	r0, #0
	str	r0, [r11, #-12]
.LBB61_89:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-12]
	cmp	r0, #36
	bge	.LBB61_94
@ BB#90:                                @   in Loop: Header=BB61_89 Depth=1
	movw	r0, :lower16:win
	movt	r0, :upper16:win
	add	r0, r0, #864
	movw	r1, #3
	vldr	d16, [r11, #-40]
	vldr	d17, .LCPI61_6
	vdiv.f64	d16, d16, d17
	ldr	r2, [r11, #-12]
	movw	r3, :lower16:win
	movt	r3, :upper16:win
	add	r2, r3, r2, lsl #3
	vldr	d18, [r2]
	vmul.f64	d16, d18, d16
	vstr	d16, [r2]
	vldr	d16, [r11, #-40]
	vdiv.f64	d16, d16, d17
	ldr	r2, [r11, #-12]
	add	r2, r3, r2, lsl #3
	vldr	d18, [r2, #288]
	vmul.f64	d16, d18, d16
	vstr	d16, [r2, #288]
	vldr	d16, [r11, #-40]
	vdiv.f64	d16, d16, d17
	ldr	r2, [r11, #-12]
	add	r2, r3, r2, lsl #3
	add	r2, r2, #864
	vldr	d17, [r2]
	vmul.f64	d16, d17, d16
	vstr	d16, [r2]
	str	r0, [sp, #68]           @ 4-byte Spill
	str	r1, [sp, #64]           @ 4-byte Spill
@ BB#91:                                @   in Loop: Header=BB61_89 Depth=1
	ldr	r0, [r11, #-12]
	add	r0, r0, #1
	str	r0, [r11, #-12]
	b	.LBB61_89
	.p2align	3
@ BB#92:
.LCPI61_19:
	.long	1413754136              @ double 3.1415926535897931
	.long	1074340347
	.p2align	3
@ BB#93:
.LCPI61_20:
	.long	0                       @ double 64
	.long	1078984704
.LBB61_94:
	movw	r0, #0
	vldr	d16, .LCPI61_4
	vstr	d16, [r11, #-32]
	str	r0, [r11, #-12]
.LBB61_95:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB61_97 Depth 2
	ldr	r0, [r11, #-12]
	cmp	r0, #3
	bge	.LBB61_102
@ BB#96:                                @   in Loop: Header=BB61_95 Depth=1
	movw	r0, #0
	movw	r1, :lower16:win
	movt	r1, :upper16:win
	add	r1, r1, #576
	movw	r2, #3
	ldr	r3, [r11, #-12]
	vmov	s0, r3
	vcvt.f64.s32	d16, s0
	vmov.f64	d17, #5.000000e-01
	vadd.f64	d16, d16, d17
	vldr	d18, .LCPI61_5
	vmul.f64	d16, d16, d18
	vmov	r3, r12, d16
	str	r0, [sp, #60]           @ 4-byte Spill
	mov	r0, r3
	str	r1, [sp, #56]           @ 4-byte Spill
	mov	r1, r12
	vstr	d18, [sp, #48]          @ 8-byte Spill
	vstr	d17, [sp, #40]          @ 8-byte Spill
	str	r2, [sp, #36]           @ 4-byte Spill
	bl	cos
	vmov	d16, r0, r1
	vldr	d17, [r11, #-40]
	vmul.f64	d16, d16, d17
	vldr	d17, .LCPI61_6
	vdiv.f64	d16, d16, d17
	vldr	d17, [r11, #-32]
	vmul.f64	d16, d16, d17
	vstr	d16, [sp, #280]
	ldr	r0, [r11, #-12]
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #40]          @ 8-byte Reload
	vadd.f64	d16, d16, d17
	vldr	d18, [sp, #48]          @ 8-byte Reload
	vmul.f64	d16, d16, d18
	vmov	r0, r1, d16
	bl	tan
	vmov	d16, r0, r1
	ldr	r0, [r11, #-12]
	movw	r1, :lower16:win
	movt	r1, :upper16:win
	add	r0, r1, r0, lsl #3
	add	r0, r0, #576
	vstr	d16, [r0]
	ldr	r0, [sp, #60]           @ 4-byte Reload
	str	r0, [r11, #-20]
.LBB61_97:                              @   Parent Loop BB61_95 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-20]
	cmp	r0, #6
	bge	.LBB61_100
@ BB#98:                                @   in Loop: Header=BB61_97 Depth=2
	movw	r0, #3
	vldr	d16, [sp, #280]
	ldr	r1, [r11, #-20]
	mov	r2, #1
	orr	r1, r2, r1, lsl #1
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vldr	d18, .LCPI61_7
	vmul.f64	d17, d17, d18
	ldr	r1, [r11, #-12]
	mov	r3, #14
	add	r1, r3, r1, lsl #2
	vmov	s0, r1
	vcvt.f64.s32	d19, s0
	vmul.f64	d17, d17, d19
	vmov	r1, r3, d17
	str	r0, [sp, #32]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r3
	vstr	d18, [sp, #24]          @ 8-byte Spill
	vstr	d16, [sp, #16]          @ 8-byte Spill
	str	r2, [sp, #12]           @ 4-byte Spill
	bl	cos
	vmov	d16, r0, r1
	vldr	d17, [sp, #16]          @ 8-byte Reload
	vmul.f64	d16, d17, d16
	ldr	r0, [r11, #-20]
	add	r0, r0, r0, lsl #1
	movw	r1, :lower16:cos_s
	movt	r1, :upper16:cos_s
	add	r0, r1, r0, lsl #4
	ldr	r2, [r11, #-12]
	add	r0, r0, r2, lsl #3
	vstr	d16, [r0]
	vldr	d16, [sp, #280]
	ldr	r0, [r11, #-20]
	ldr	r2, [sp, #12]           @ 4-byte Reload
	orr	r0, r2, r0, lsl #1
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vldr	d18, [sp, #24]          @ 8-byte Reload
	vmul.f64	d17, d17, d18
	ldr	r0, [r11, #-12]
	mov	r3, #38
	add	r0, r3, r0, lsl #2
	vmov	s0, r0
	vcvt.f64.s32	d19, s0
	vmul.f64	d17, d17, d19
	vmov	r0, r3, d17
	str	r1, [sp, #8]            @ 4-byte Spill
	mov	r1, r3
	vstr	d16, [sp]               @ 8-byte Spill
	bl	cos
	vmov	d16, r0, r1
	vldr	d17, [sp]               @ 8-byte Reload
	vmul.f64	d16, d17, d16
	ldr	r0, [r11, #-20]
	add	r0, r0, r0, lsl #1
	ldr	r1, [sp, #8]            @ 4-byte Reload
	add	r0, r1, r0, lsl #4
	ldr	r2, [r11, #-12]
	add	r2, r2, #3
	add	r0, r0, r2, lsl #3
	vstr	d16, [r0]
@ BB#99:                                @   in Loop: Header=BB61_97 Depth=2
	ldr	r0, [r11, #-20]
	add	r0, r0, #1
	str	r0, [r11, #-20]
	b	.LBB61_97
.LBB61_100:                             @   in Loop: Header=BB61_95 Depth=1
	b	.LBB61_101
.LBB61_101:                             @   in Loop: Header=BB61_95 Depth=1
	ldr	r0, [r11, #-12]
	add	r0, r0, #1
	str	r0, [r11, #-12]
	b	.LBB61_95
.LBB61_102:
	sub	sp, r11, #8
	pop	{r4, r5, r11, pc}
	.p2align	3
@ BB#103:
.LCPI61_4:
	.long	1431655765              @ double 0.33333333333333331
	.long	1070945621
.LCPI61_5:
	.long	942502757               @ double 0.26179938779914941
	.long	1070645586
.LCPI61_6:
	.long	0                       @ double 32768
	.long	1088421888
.LCPI61_7:
	.long	942502757               @ double 0.065449846949787352
	.long	1068548434
.Lfunc_end61:
	.size	mdct_init48, .Lfunc_end61-mdct_init48
	.cantunwind
	.fnend

	.p2align	2
	.type	window_subband,%function
	.code	32                      @ @window_subband
window_subband:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
	add	r11, sp, #28
	sub	sp, sp, #108
	movw	r3, #14
	movw	r12, #958
	movw	lr, #894
	movw	r4, #830
	movw	r5, #766
	movw	r6, #702
	movw	r7, #318
	movw	r8, #638
	movw	r9, #382
	movw	r10, #574
	str	r0, [sp, #20]           @ 4-byte Spill
	movw	r0, #446
	str	r0, [sp, #16]           @ 4-byte Spill
	movw	r0, #510
	str	r0, [sp, #12]           @ 4-byte Spill
	movw	r0, :lower16:enwindow
	movt	r0, :upper16:enwindow
	str	r0, [sp, #8]            @ 4-byte Spill
	ldr	r0, [sp, #20]           @ 4-byte Reload
	str	r0, [r11, #-32]
	str	r1, [r11, #-36]
	str	r2, [r11, #-40]
	ldr	r1, [sp, #8]            @ 4-byte Reload
	str	r1, [sp, #68]
	ldr	r2, [r11, #-32]
	ldr	r0, [sp, #12]           @ 4-byte Reload
	add	r2, r2, r0
	ldrsh	r2, [r2]
	vmov	s0, r2
	vcvt.f64.s32	d16, s0
	vstr	d16, [r11, #-64]
	ldr	r2, [r11, #-32]
	ldr	r0, [sp, #16]           @ 4-byte Reload
	add	r2, r2, r0
	ldrsh	r2, [r2]
	ldr	r0, [r11, #-32]
	add	r0, r0, r10
	ldrsh	r0, [r0]
	sub	r0, r2, r0
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	ldr	r0, [sp, #68]
	add	r2, r0, #8
	str	r2, [sp, #68]
	vldr	d17, [r0]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r0, [r11, #-32]
	add	r0, r0, r9
	ldrsh	r0, [r0]
	ldr	r2, [r11, #-32]
	add	r2, r2, r8
	ldrsh	r2, [r2]
	add	r0, r0, r2
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	ldr	r0, [sp, #68]
	add	r2, r0, #8
	str	r2, [sp, #68]
	vldr	d17, [r0]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r0, [r11, #-32]
	add	r0, r0, r7
	ldrsh	r0, [r0]
	ldr	r2, [r11, #-32]
	add	r2, r2, r6
	ldrsh	r2, [r2]
	sub	r0, r0, r2
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	ldr	r0, [sp, #68]
	add	r2, r0, #8
	str	r2, [sp, #68]
	vldr	d17, [r0]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r0, [r11, #-32]
	ldrsh	r0, [r0, #254]
	ldr	r2, [r11, #-32]
	add	r2, r2, r5
	ldrsh	r2, [r2]
	add	r0, r0, r2
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	ldr	r0, [sp, #68]
	add	r2, r0, #8
	str	r2, [sp, #68]
	vldr	d17, [r0]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r0, [r11, #-32]
	ldrsh	r0, [r0, #190]
	ldr	r2, [r11, #-32]
	add	r2, r2, r4
	ldrsh	r2, [r2]
	sub	r0, r0, r2
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	ldr	r0, [sp, #68]
	add	r2, r0, #8
	str	r2, [sp, #68]
	vldr	d17, [r0]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r0, [r11, #-32]
	ldrsh	r0, [r0, #126]
	ldr	r2, [r11, #-32]
	add	r2, r2, lr
	ldrsh	r2, [r2]
	add	r0, r0, r2
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	ldr	r0, [sp, #68]
	add	r2, r0, #8
	str	r2, [sp, #68]
	vldr	d17, [r0]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r0, [r11, #-32]
	ldrsh	r0, [r0, #62]
	ldr	r2, [r11, #-32]
	add	r2, r2, r12
	ldrsh	r2, [r2]
	sub	r0, r0, r2
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	ldr	r0, [sp, #68]
	add	r2, r0, #8
	str	r2, [sp, #68]
	vldr	d17, [r0]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	vldr	d16, [r11, #-64]
	ldr	r0, [r11, #-40]
	vstr	d16, [r0, #120]
	str	r3, [r11, #-44]
.LBB62_1:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-44]
	cmp	r0, #0
	blt	.LBB62_4
@ BB#2:                                 @   in Loop: Header=BB62_1 Depth=1
	movw	r0, #3
	ldr	r1, [r11, #-32]
	ldr	r2, [r11, #-44]
	add	r1, r1, r2, lsl #1
	str	r1, [sp, #64]
	ldr	r1, [r11, #-32]
	ldr	r2, [r11, #-44]
	sub	r1, r1, r2, lsl #1
	str	r1, [sp, #60]
	mov	r2, #540
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vstr	d16, [r11, #-56]
	ldr	r1, [sp, #64]
	mov	r2, #480
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vstr	d16, [r11, #-64]
	ldr	r1, [sp, #68]
	add	r2, r1, #8
	str	r2, [sp, #68]
	vldr	d16, [r1]
	vstr	d16, [sp, #48]
	ldr	r1, [sp, #60]
	mov	r2, #668
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d17, d16
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [sp, #64]
	mov	r2, #352
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #48]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r1, [sp, #68]
	add	r2, r1, #8
	str	r2, [sp, #68]
	vldr	d16, [r1]
	vstr	d16, [sp, #48]
	ldr	r1, [sp, #60]
	mov	r2, #796
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d17, d16
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [sp, #64]
	ldrsh	r1, [r1, #224]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #48]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r1, [sp, #68]
	add	r2, r1, #8
	str	r2, [sp, #68]
	vldr	d16, [r1]
	vstr	d16, [sp, #48]
	ldr	r1, [sp, #60]
	mov	r2, #924
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d17, d16
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [sp, #64]
	ldrsh	r1, [r1, #96]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #48]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r1, [sp, #68]
	add	r2, r1, #8
	str	r2, [sp, #68]
	vldr	d16, [r1]
	vstr	d16, [sp, #48]
	ldr	r1, [sp, #60]
	ldrsh	r1, [r1, #28]
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d17, d16
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [sp, #64]
	mov	r2, #992
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #48]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r1, [sp, #68]
	add	r2, r1, #8
	str	r2, [sp, #68]
	vldr	d16, [r1]
	vstr	d16, [sp, #48]
	ldr	r1, [sp, #60]
	ldrsh	r1, [r1, #156]
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d17, d16
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [sp, #64]
	mov	r2, #864
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #48]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r1, [sp, #68]
	add	r2, r1, #8
	str	r2, [sp, #68]
	vldr	d16, [r1]
	vstr	d16, [sp, #48]
	ldr	r1, [sp, #60]
	mov	r2, #284
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d17, d16
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [sp, #64]
	mov	r2, #736
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #48]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r1, [sp, #68]
	add	r2, r1, #8
	str	r2, [sp, #68]
	vldr	d16, [r1]
	vstr	d16, [sp, #48]
	ldr	r1, [sp, #60]
	mov	r2, #412
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d17, d16
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [sp, #64]
	mov	r2, #608
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #48]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r1, [sp, #68]
	add	r2, r1, #8
	str	r2, [sp, #68]
	vldr	d16, [r1]
	vstr	d16, [sp, #48]
	ldr	r1, [sp, #64]
	ldrsh	r1, [r1, #32]
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d17, d16
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [sp, #60]
	mov	r2, #988
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #48]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vsub.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r1, [sp, #68]
	add	r2, r1, #8
	str	r2, [sp, #68]
	vldr	d16, [r1]
	vstr	d16, [sp, #48]
	ldr	r1, [sp, #64]
	ldrsh	r1, [r1, #160]
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d17, d16
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [sp, #60]
	mov	r2, #860
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #48]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vsub.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r1, [sp, #68]
	add	r2, r1, #8
	str	r2, [sp, #68]
	vldr	d16, [r1]
	vstr	d16, [sp, #48]
	ldr	r1, [sp, #64]
	mov	r2, #288
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d17, d16
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [sp, #60]
	mov	r2, #732
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #48]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vsub.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r1, [sp, #68]
	add	r2, r1, #8
	str	r2, [sp, #68]
	vldr	d16, [r1]
	vstr	d16, [sp, #48]
	ldr	r1, [sp, #64]
	mov	r2, #416
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d17, d16
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [sp, #60]
	mov	r2, #604
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #48]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vsub.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r1, [sp, #68]
	add	r2, r1, #8
	str	r2, [sp, #68]
	vldr	d16, [r1]
	vstr	d16, [sp, #48]
	ldr	r1, [sp, #64]
	mov	r2, #544
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d17, d16
	vldr	d17, [r11, #-56]
	vsub.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [sp, #60]
	mov	r2, #476
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #48]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r1, [sp, #68]
	add	r2, r1, #8
	str	r2, [sp, #68]
	vldr	d16, [r1]
	vstr	d16, [sp, #48]
	ldr	r1, [sp, #64]
	mov	r2, #672
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d17, d16
	vldr	d17, [r11, #-56]
	vsub.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [sp, #60]
	mov	r2, #348
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #48]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r1, [sp, #68]
	add	r2, r1, #8
	str	r2, [sp, #68]
	vldr	d16, [r1]
	vstr	d16, [sp, #48]
	ldr	r1, [sp, #64]
	mov	r2, #800
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d17, d16
	vldr	d17, [r11, #-56]
	vsub.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [sp, #60]
	ldrsh	r1, [r1, #220]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #48]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	ldr	r1, [sp, #68]
	add	r2, r1, #8
	str	r2, [sp, #68]
	vldr	d16, [r1]
	vstr	d16, [sp, #48]
	ldr	r1, [sp, #64]
	mov	r2, #928
	ldrsh	r1, [r1, r2]
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d17, d16
	vldr	d17, [r11, #-56]
	vsub.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [sp, #60]
	ldrsh	r1, [r1, #92]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #48]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	vldr	d16, [r11, #-56]
	ldr	r1, [r11, #-40]
	ldr	r2, [r11, #-44]
	rsb	r2, r2, #30
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	vldr	d16, [r11, #-64]
	ldr	r1, [r11, #-40]
	ldr	r2, [r11, #-44]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	str	r0, [sp, #4]            @ 4-byte Spill
@ BB#3:                                 @   in Loop: Header=BB62_1 Depth=1
	mvn	r0, #0
	ldr	r1, [r11, #-44]
	add	r0, r1, r0
	str	r0, [r11, #-44]
	b	.LBB62_1
.LBB62_4:
	movw	r0, #15
	movw	r1, :lower16:mm
	movt	r1, :upper16:mm
	movw	r2, #990
	movw	r3, #862
	movw	r12, #734
	movw	lr, #606
	movw	r4, #350
	movw	r5, #478
	ldr	r6, [r11, #-32]
	add	r5, r6, r5
	ldrsh	r5, [r5]
	vmov	s0, r5
	vcvt.f64.s32	d16, s0
	vstr	d16, [r11, #-56]
	ldr	r5, [r11, #-32]
	add	r4, r5, r4
	ldrsh	r4, [r4]
	vmov	s0, r4
	vcvt.f64.s32	d16, s0
	ldr	r4, [sp, #68]
	add	r5, r4, #8
	str	r5, [sp, #68]
	vldr	d17, [r4]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r4, [r11, #-32]
	ldrsh	r4, [r4, #222]
	vmov	s0, r4
	vcvt.f64.s32	d16, s0
	ldr	r4, [sp, #68]
	add	r5, r4, #8
	str	r5, [sp, #68]
	vldr	d17, [r4]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r4, [r11, #-32]
	ldrsh	r4, [r4, #94]
	vmov	s0, r4
	vcvt.f64.s32	d16, s0
	ldr	r4, [sp, #68]
	add	r5, r4, #8
	str	r5, [sp, #68]
	vldr	d17, [r4]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r4, [r11, #-32]
	add	lr, r4, lr
	ldrsh	lr, [lr]
	vmov	s0, lr
	vcvt.f64.s32	d16, s0
	ldr	lr, [sp, #68]
	add	r4, lr, #8
	str	r4, [sp, #68]
	vldr	d17, [lr]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-56]
	vsub.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	lr, [r11, #-32]
	add	r12, lr, r12
	ldrsh	r12, [r12]
	vmov	s0, r12
	vcvt.f64.s32	d16, s0
	ldr	r12, [sp, #68]
	add	lr, r12, #8
	str	lr, [sp, #68]
	vldr	d17, [r12]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-56]
	vsub.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r12, [r11, #-32]
	add	r3, r12, r3
	ldrsh	r3, [r3]
	vmov	s0, r3
	vcvt.f64.s32	d16, s0
	ldr	r3, [sp, #68]
	add	r12, r3, #8
	str	r12, [sp, #68]
	vldr	d17, [r3]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-56]
	vsub.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r3, [r11, #-32]
	add	r2, r3, r2
	ldrsh	r2, [r2]
	vmov	s0, r2
	vcvt.f64.s32	d16, s0
	ldr	r2, [sp, #68]
	add	r3, r2, #8
	str	r3, [sp, #68]
	vldr	d17, [r2]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-56]
	vsub.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r2, [r11, #-40]
	add	r2, r2, #8
	str	r2, [r11, #-40]
	str	r1, [sp, #68]
	str	r0, [r11, #-44]
.LBB62_5:                               @ =>This Loop Header: Depth=1
                                        @     Child Loop BB62_7 Depth 2
	ldr	r0, [r11, #-44]
	cmp	r0, #0
	blt	.LBB62_12
@ BB#6:                                 @   in Loop: Header=BB62_5 Depth=1
	movw	r0, #14
	vldr	d16, [r11, #-56]
	vstr	d16, [sp, #32]
	vldr	d16, [r11, #-64]
	ldr	r1, [sp, #68]
	add	r2, r1, #8
	str	r2, [sp, #68]
	vldr	d17, [r1]
	vmul.f64	d16, d16, d17
	vstr	d16, [sp, #24]
	str	r0, [sp, #44]
.LBB62_7:                               @   Parent Loop BB62_5 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #44]
	cmp	r0, #0
	blt	.LBB62_10
@ BB#8:                                 @   in Loop: Header=BB62_7 Depth=2
	ldr	r0, [sp, #68]
	add	r1, r0, #8
	str	r1, [sp, #68]
	vldr	d16, [r0]
	ldr	r0, [r11, #-40]
	add	r1, r0, #8
	str	r1, [r11, #-40]
	vldr	d17, [r0]
	vmul.f64	d16, d16, d17
	vldr	d17, [sp, #32]
	vadd.f64	d16, d17, d16
	vstr	d16, [sp, #32]
	ldr	r0, [sp, #68]
	add	r1, r0, #8
	str	r1, [sp, #68]
	vldr	d16, [r0]
	ldr	r0, [r11, #-40]
	add	r1, r0, #8
	str	r1, [r11, #-40]
	vldr	d17, [r0]
	vmul.f64	d16, d16, d17
	vldr	d17, [sp, #24]
	vadd.f64	d16, d17, d16
	vstr	d16, [sp, #24]
@ BB#9:                                 @   in Loop: Header=BB62_7 Depth=2
	mvn	r0, #0
	ldr	r1, [sp, #44]
	add	r0, r1, r0
	str	r0, [sp, #44]
	b	.LBB62_7
.LBB62_10:                              @   in Loop: Header=BB62_5 Depth=1
	movw	r0, #3
	ldr	r1, [r11, #-40]
	sub	r1, r1, #240
	str	r1, [r11, #-40]
	vldr	d16, [sp, #32]
	vldr	d17, [sp, #24]
	vadd.f64	d16, d16, d17
	ldr	r1, [r11, #-36]
	ldr	r2, [r11, #-44]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	vldr	d16, [sp, #32]
	vldr	d17, [sp, #24]
	vsub.f64	d16, d16, d17
	ldr	r1, [r11, #-36]
	ldr	r2, [r11, #-44]
	rsb	r2, r2, #31
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	str	r0, [sp]                @ 4-byte Spill
@ BB#11:                                @   in Loop: Header=BB62_5 Depth=1
	mvn	r0, #0
	ldr	r1, [r11, #-44]
	add	r0, r1, r0
	str	r0, [r11, #-44]
	b	.LBB62_5
.LBB62_12:
	sub	sp, r11, #28
	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
.Lfunc_end62:
	.size	window_subband, .Lfunc_end62-window_subband
	.cantunwind
	.fnend

	.p2align	2
	.type	mdct_short,%function
	.code	32                      @ @mdct_short
mdct_short:
	.fnstart
@ BB#0:
	sub	sp, sp, #72
	movw	r2, #5
	str	r0, [sp, #68]
	str	r1, [sp, #64]
	str	r2, [sp, #60]
.LBB63_1:                               @ =>This Loop Header: Depth=1
                                        @     Child Loop BB63_3 Depth 2
	ldr	r0, [sp, #60]
	cmp	r0, #0
	blt	.LBB63_8
@ BB#2:                                 @   in Loop: Header=BB63_1 Depth=1
	movw	r0, #2
	movw	r1, :lower16:cos_s
	movt	r1, :upper16:cos_s
	movw	r2, #48
	ldr	r3, [sp, #60]
	mul	r3, r3, r2
	add	r3, r1, r3
	vldr	d16, [r3]
	vstr	d16, [sp, #48]
	ldr	r3, [sp, #60]
	mul	r3, r3, r2
	add	r3, r1, r3
	vldr	d16, [r3, #8]
	vstr	d16, [sp, #40]
	ldr	r3, [sp, #60]
	mul	r3, r3, r2
	add	r3, r1, r3
	vldr	d16, [r3, #16]
	vstr	d16, [sp, #32]
	ldr	r3, [sp, #60]
	mul	r3, r3, r2
	add	r3, r1, r3
	vldr	d16, [r3, #24]
	vstr	d16, [sp, #24]
	ldr	r3, [sp, #60]
	mul	r3, r3, r2
	add	r3, r1, r3
	vldr	d16, [r3, #32]
	vstr	d16, [sp, #16]
	ldr	r3, [sp, #60]
	mul	r2, r3, r2
	add	r1, r1, r2
	vldr	d16, [r1, #40]
	vstr	d16, [sp, #8]
	str	r0, [sp, #56]
.LBB63_3:                               @   Parent Loop BB63_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #56]
	cmp	r0, #0
	blt	.LBB63_6
@ BB#4:                                 @   in Loop: Header=BB63_3 Depth=2
	movw	r0, #3
	vldr	d16, [sp, #48]
	ldr	r1, [sp, #64]
	ldr	r2, [sp, #56]
	add	r3, r2, r2, lsl #1
	add	r1, r1, r3, lsl #4
	vldr	d17, [r1]
	vldr	d18, [r1, #8]
	vldr	d19, [r1, #16]
	vldr	d20, [r1, #24]
	vmul.f64	d16, d16, d17
	vldr	d17, [sp, #40]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #32]
	vmul.f64	d17, d17, d19
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #24]
	vmul.f64	d17, d17, d20
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #16]
	vldr	d18, [r1, #32]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #8]
	vldr	d18, [r1, #40]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	ldr	r1, [sp, #68]
	ldr	r3, [sp, #60]
	add	r3, r3, r3, lsl #1
	add	r2, r3, r2
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	str	r0, [sp, #4]            @ 4-byte Spill
@ BB#5:                                 @   in Loop: Header=BB63_3 Depth=2
	mvn	r0, #0
	ldr	r1, [sp, #56]
	add	r0, r1, r0
	str	r0, [sp, #56]
	b	.LBB63_3
.LBB63_6:                               @   in Loop: Header=BB63_1 Depth=1
	b	.LBB63_7
.LBB63_7:                               @   in Loop: Header=BB63_1 Depth=1
	mvn	r0, #0
	ldr	r1, [sp, #60]
	add	r0, r1, r0
	str	r0, [sp, #60]
	b	.LBB63_1
.LBB63_8:
	add	sp, sp, #72
	bx	lr
.Lfunc_end63:
	.size	mdct_short, .Lfunc_end63-mdct_short
	.cantunwind
	.fnend

	.p2align	2
	.type	mdct_long,%function
	.code	32                      @ @mdct_long
mdct_long:
	.fnstart
@ BB#0:
	sub	sp, sp, #72
	movw	r2, :lower16:cos_l
	movt	r2, :upper16:cos_l
	movw	r3, #11
	str	r0, [sp, #68]
	str	r1, [sp, #64]
	str	r3, [sp, #12]
	str	r2, [sp, #8]
.LBB64_1:                               @ =>This Inner Loop Header: Depth=1
	movw	r0, #3
	ldr	r1, [sp, #64]
	ldr	r2, [sp, #8]
	vldr	d16, [r1]
	vldr	d17, [r1, #8]
	vldr	d18, [r1, #16]
	vldr	d19, [r1, #24]
	vldr	d20, [r2]
	vldr	d21, [r2, #8]
	vldr	d22, [r2, #16]
	vldr	d23, [r2, #24]
	vmul.f64	d16, d16, d20
	vmul.f64	d17, d17, d21
	vadd.f64	d16, d16, d17
	vmul.f64	d17, d18, d22
	vadd.f64	d16, d16, d17
	vmul.f64	d17, d19, d23
	vadd.f64	d16, d16, d17
	vldr	d17, [r1, #32]
	vldr	d18, [r2, #32]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [r1, #40]
	vldr	d18, [r2, #40]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [r1, #48]
	vldr	d18, [r2, #48]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [r1, #56]
	vldr	d18, [r2, #56]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [r1, #64]
	vldr	d18, [r2, #64]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [r1, #72]
	vldr	d18, [r2, #72]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [r1, #80]
	vldr	d18, [r2, #80]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [r1, #88]
	vldr	d18, [r2, #88]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [r1, #96]
	vldr	d18, [r2, #96]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [r1, #104]
	vldr	d18, [r2, #104]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [r1, #112]
	vldr	d18, [r2, #112]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [r1, #120]
	vldr	d18, [r2, #120]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [r1, #128]
	vldr	d18, [r2, #128]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [r1, #136]
	vldr	d18, [r2, #136]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	ldr	r1, [sp, #68]
	ldr	r2, [sp, #12]
	movw	r3, :lower16:all
	movt	r3, :upper16:all
	ldr	r2, [r3, r2, lsl #2]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	ldr	r1, [sp, #8]
	add	r1, r1, #144
	str	r1, [sp, #8]
	str	r0, [sp, #4]            @ 4-byte Spill
@ BB#2:                                 @   in Loop: Header=BB64_1 Depth=1
	mvn	r0, #0
	ldr	r1, [sp, #12]
	add	r0, r1, r0
	str	r0, [sp, #12]
	cmp	r0, #0
	bge	.LBB64_1
@ BB#3:
	ldr	r0, [sp, #64]
	vldr	d16, [r0]
	ldr	r0, [sp, #64]
	vldr	d17, [r0, #40]
	vadd.f64	d16, d16, d17
	ldr	r0, [sp, #64]
	vldr	d17, [r0, #120]
	vadd.f64	d16, d16, d17
	vstr	d16, [sp, #56]
	ldr	r0, [sp, #64]
	vldr	d16, [r0, #8]
	ldr	r0, [sp, #64]
	vldr	d17, [r0, #32]
	vadd.f64	d16, d16, d17
	ldr	r0, [sp, #64]
	vldr	d17, [r0, #128]
	vadd.f64	d16, d16, d17
	vstr	d16, [sp, #48]
	ldr	r0, [sp, #64]
	vldr	d16, [r0, #16]
	ldr	r0, [sp, #64]
	vldr	d17, [r0, #24]
	vadd.f64	d16, d16, d17
	ldr	r0, [sp, #64]
	vldr	d17, [r0, #136]
	vadd.f64	d16, d16, d17
	vstr	d16, [sp, #40]
	ldr	r0, [sp, #64]
	vldr	d16, [r0, #48]
	ldr	r0, [sp, #64]
	vldr	d17, [r0, #72]
	vsub.f64	d16, d16, d17
	ldr	r0, [sp, #64]
	vldr	d17, [r0, #112]
	vadd.f64	d16, d16, d17
	vstr	d16, [sp, #32]
	ldr	r0, [sp, #64]
	vldr	d16, [r0, #56]
	ldr	r0, [sp, #64]
	vldr	d17, [r0, #80]
	vsub.f64	d16, d16, d17
	ldr	r0, [sp, #64]
	vldr	d17, [r0, #104]
	vadd.f64	d16, d16, d17
	vstr	d16, [sp, #24]
	ldr	r0, [sp, #64]
	vldr	d16, [r0, #64]
	ldr	r0, [sp, #64]
	vldr	d17, [r0, #88]
	vsub.f64	d16, d16, d17
	ldr	r0, [sp, #64]
	vldr	d17, [r0, #96]
	vadd.f64	d16, d16, d17
	vstr	d16, [sp, #16]
	vldr	d16, [sp, #56]
	ldr	r0, [sp, #8]
	vldr	d17, [r0]
	vmul.f64	d16, d16, d17
	vldr	d17, [sp, #48]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #8]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #40]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #16]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #32]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #24]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #24]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #32]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #16]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #40]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	ldr	r0, [sp, #68]
	vstr	d16, [r0, #128]
	ldr	r0, [sp, #8]
	add	r0, r0, #48
	str	r0, [sp, #8]
	vldr	d16, [sp, #56]
	ldr	r0, [sp, #8]
	vldr	d17, [r0]
	vmul.f64	d16, d16, d17
	vldr	d17, [sp, #48]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #8]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #40]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #16]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #32]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #24]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #24]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #32]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #16]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #40]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	ldr	r0, [sp, #68]
	vstr	d16, [r0, #80]
	ldr	r0, [sp, #8]
	add	r0, r0, #48
	str	r0, [sp, #8]
	vldr	d16, [sp, #56]
	ldr	r0, [sp, #8]
	vldr	d17, [r0]
	vmul.f64	d16, d16, d17
	vldr	d17, [sp, #48]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #8]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #40]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #16]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #32]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #24]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #24]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #32]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #16]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #40]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	ldr	r0, [sp, #68]
	vstr	d16, [r0, #56]
	ldr	r0, [sp, #8]
	add	r0, r0, #48
	str	r0, [sp, #8]
	vldr	d16, [sp, #56]
	ldr	r0, [sp, #8]
	vldr	d17, [r0]
	vmul.f64	d16, d16, d17
	vldr	d17, [sp, #48]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #8]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #40]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #16]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #32]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #24]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #24]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #32]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #16]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #40]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	ldr	r0, [sp, #68]
	vstr	d16, [r0, #8]
	ldr	r0, [sp, #8]
	add	r0, r0, #48
	str	r0, [sp, #8]
	vldr	d16, [sp, #56]
	vldr	d17, [sp, #48]
	vsub.f64	d16, d16, d17
	vldr	d17, [sp, #16]
	vadd.f64	d16, d16, d17
	vstr	d16, [sp, #56]
	vldr	d16, [sp, #40]
	vldr	d17, [sp, #32]
	vsub.f64	d16, d16, d17
	vldr	d17, [sp, #24]
	vsub.f64	d16, d16, d17
	vstr	d16, [sp, #40]
	vldr	d16, [sp, #56]
	ldr	r0, [sp, #8]
	vldr	d17, [r0]
	vmul.f64	d16, d16, d17
	vldr	d17, [sp, #40]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #8]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	ldr	r0, [sp, #68]
	vstr	d16, [r0, #104]
	vldr	d16, [sp, #56]
	ldr	r0, [sp, #8]
	vldr	d17, [r0, #16]
	vmul.f64	d16, d16, d17
	vldr	d17, [sp, #40]
	ldr	r0, [sp, #8]
	vldr	d18, [r0, #24]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	ldr	r0, [sp, #68]
	vstr	d16, [r0, #32]
	add	sp, sp, #72
	bx	lr
.Lfunc_end64:
	.size	mdct_long, .Lfunc_end64-mdct_long
	.cantunwind
	.fnend

	.globl	ReadByte
	.p2align	2
	.type	ReadByte,%function
	.code	32                      @ @ReadByte
ReadByte:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #8
	str	r0, [sp, #4]
	ldr	r0, [sp, #4]
	bl	getc
	and	r0, r0, #255
	str	r0, [sp]
	ldr	r0, [sp]
	and	r0, r0, #128
	cmp	r0, #0
	beq	.LBB65_2
@ BB#1:
	ldr	r0, [sp]
	sub	r0, r0, #256
	str	r0, [sp]
.LBB65_2:
	ldr	r0, [sp]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end65:
	.size	ReadByte, .Lfunc_end65-ReadByte
	.cantunwind
	.fnend

	.globl	Read16BitsLowHigh
	.p2align	2
	.type	Read16BitsLowHigh,%function
	.code	32                      @ @Read16BitsLowHigh
Read16BitsLowHigh:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	str	r0, [r11, #-4]
	ldr	r0, [r11, #-4]
	bl	getc
	and	r0, r0, #255
	str	r0, [r11, #-8]
	ldr	r0, [r11, #-4]
	bl	getc
	movw	lr, #8
	and	r0, r0, #255
	str	r0, [sp, #12]
	ldr	r0, [sp, #12]
	lsl	r0, r0, #8
	ldr	r1, [r11, #-8]
	add	r0, r0, r1
	str	r0, [sp, #8]
	ldr	r0, [sp, #8]
	and	r0, r0, #32768
	cmp	r0, #0
	str	lr, [sp, #4]            @ 4-byte Spill
	beq	.LBB66_2
@ BB#1:
	ldr	r0, [sp, #8]
	sub	r0, r0, #65536
	str	r0, [sp, #8]
.LBB66_2:
	ldr	r0, [sp, #8]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end66:
	.size	Read16BitsLowHigh, .Lfunc_end66-Read16BitsLowHigh
	.cantunwind
	.fnend

	.globl	Read16BitsHighLow
	.p2align	2
	.type	Read16BitsHighLow,%function
	.code	32                      @ @Read16BitsHighLow
Read16BitsHighLow:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	str	r0, [r11, #-4]
	ldr	r0, [r11, #-4]
	bl	getc
	and	r0, r0, #255
	str	r0, [r11, #-8]
	ldr	r0, [r11, #-4]
	bl	getc
	movw	lr, #8
	and	r0, r0, #255
	str	r0, [sp, #12]
	ldr	r0, [r11, #-8]
	lsl	r0, r0, #8
	ldr	r1, [sp, #12]
	add	r0, r0, r1
	str	r0, [sp, #8]
	ldr	r0, [sp, #8]
	and	r0, r0, #32768
	cmp	r0, #0
	str	lr, [sp, #4]            @ 4-byte Spill
	beq	.LBB67_2
@ BB#1:
	ldr	r0, [sp, #8]
	sub	r0, r0, #65536
	str	r0, [sp, #8]
.LBB67_2:
	ldr	r0, [sp, #8]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end67:
	.size	Read16BitsHighLow, .Lfunc_end67-Read16BitsHighLow
	.cantunwind
	.fnend

	.globl	Write8Bits
	.p2align	2
	.type	Write8Bits,%function
	.code	32                      @ @Write8Bits
Write8Bits:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #16
	str	r0, [r11, #-4]
	str	r1, [sp, #8]
	ldr	r0, [sp, #8]
	and	r0, r0, #255
	ldr	r1, [r11, #-4]
	bl	putc
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end68:
	.size	Write8Bits, .Lfunc_end68-Write8Bits
	.cantunwind
	.fnend

	.globl	Write16BitsLowHigh
	.p2align	2
	.type	Write16BitsLowHigh,%function
	.code	32                      @ @Write16BitsLowHigh
Write16BitsLowHigh:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	ldr	r0, [r11, #-8]
	and	r0, r0, #255
	ldr	r1, [r11, #-4]
	bl	putc
	movw	r1, #8
	ldr	lr, [r11, #-8]
	asr	lr, lr, #8
	and	lr, lr, #255
	ldr	r2, [r11, #-4]
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, lr
	str	r1, [sp, #8]            @ 4-byte Spill
	mov	r1, r2
	bl	putc
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end69:
	.size	Write16BitsLowHigh, .Lfunc_end69-Write16BitsLowHigh
	.cantunwind
	.fnend

	.globl	Write16BitsHighLow
	.p2align	2
	.type	Write16BitsHighLow,%function
	.code	32                      @ @Write16BitsHighLow
Write16BitsHighLow:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	movw	r2, #8
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	ldr	r0, [r11, #-8]
	asr	r0, r0, #8
	and	r0, r0, #255
	ldr	r1, [r11, #-4]
	str	r2, [sp, #12]           @ 4-byte Spill
	bl	putc
	ldr	r1, [r11, #-8]
	and	r1, r1, #255
	ldr	r2, [r11, #-4]
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	putc
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end70:
	.size	Write16BitsHighLow, .Lfunc_end70-Write16BitsHighLow
	.cantunwind
	.fnend

	.globl	Read24BitsHighLow
	.p2align	2
	.type	Read24BitsHighLow,%function
	.code	32                      @ @Read24BitsHighLow
Read24BitsHighLow:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #32
	str	r0, [r11, #-4]
	ldr	r0, [r11, #-4]
	bl	getc
	and	r0, r0, #255
	str	r0, [r11, #-8]
	ldr	r0, [r11, #-4]
	bl	getc
	and	r0, r0, #255
	str	r0, [r11, #-12]
	ldr	r0, [r11, #-4]
	bl	getc
	movw	lr, #8
	movw	r1, #16
	and	r0, r0, #255
	str	r0, [sp, #16]
	ldr	r0, [r11, #-8]
	lsl	r0, r0, #16
	ldr	r2, [r11, #-12]
	lsl	r2, r2, #8
	add	r0, r0, r2
	ldr	r2, [sp, #16]
	add	r0, r0, r2
	str	r0, [sp, #12]
	ldr	r0, [sp, #12]
	and	r0, r0, #8388608
	cmp	r0, #0
	str	r1, [sp, #8]            @ 4-byte Spill
	str	lr, [sp, #4]            @ 4-byte Spill
	beq	.LBB71_2
@ BB#1:
	ldr	r0, [sp, #12]
	sub	r0, r0, #16777216
	str	r0, [sp, #12]
.LBB71_2:
	ldr	r0, [sp, #12]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end71:
	.size	Read24BitsHighLow, .Lfunc_end71-Read24BitsHighLow
	.cantunwind
	.fnend

	.globl	Read32Bits
	.p2align	2
	.type	Read32Bits,%function
	.code	32                      @ @Read32Bits
Read32Bits:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	str	r0, [r11, #-4]
	ldr	r0, [r11, #-4]
	bl	Read16BitsLowHigh
	movw	lr, #65535
	and	r0, r0, lr
	str	r0, [r11, #-8]
	ldr	r0, [r11, #-4]
	bl	Read16BitsLowHigh
	movw	lr, #16
	movw	r1, #65535
	and	r0, r0, r1
	str	r0, [sp, #12]
	ldr	r0, [sp, #12]
	lsl	r0, r0, #16
	ldr	r1, [r11, #-8]
	add	r0, r0, r1
	str	r0, [sp, #8]
	ldr	r0, [sp, #8]
	str	lr, [sp, #4]            @ 4-byte Spill
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end72:
	.size	Read32Bits, .Lfunc_end72-Read32Bits
	.cantunwind
	.fnend

	.globl	Read32BitsHighLow
	.p2align	2
	.type	Read32BitsHighLow,%function
	.code	32                      @ @Read32BitsHighLow
Read32BitsHighLow:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	str	r0, [r11, #-4]
	ldr	r0, [r11, #-4]
	bl	Read16BitsHighLow
	movw	lr, #65535
	and	r0, r0, lr
	str	r0, [r11, #-8]
	ldr	r0, [r11, #-4]
	bl	Read16BitsHighLow
	movw	lr, #16
	movw	r1, #65535
	and	r0, r0, r1
	str	r0, [sp, #12]
	ldr	r0, [r11, #-8]
	lsl	r0, r0, #16
	ldr	r1, [sp, #12]
	add	r0, r0, r1
	str	r0, [sp, #8]
	ldr	r0, [sp, #8]
	str	lr, [sp, #4]            @ 4-byte Spill
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end73:
	.size	Read32BitsHighLow, .Lfunc_end73-Read32BitsHighLow
	.cantunwind
	.fnend

	.globl	Write32Bits
	.p2align	2
	.type	Write32Bits,%function
	.code	32                      @ @Write32Bits
Write32Bits:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #16
	movw	r2, #65535
	str	r0, [r11, #-4]
	str	r1, [sp, #8]
	ldr	r0, [r11, #-4]
	ldr	r1, [sp, #8]
	and	r1, r1, r2
	bl	Write16BitsLowHigh
	movw	r0, #65535
	movw	r1, #16
	ldr	r2, [r11, #-4]
	ldr	lr, [sp, #8]
	asr	lr, lr, #16
	and	r0, lr, r0
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r2
	ldr	r2, [sp, #4]            @ 4-byte Reload
	str	r1, [sp]                @ 4-byte Spill
	mov	r1, r2
	bl	Write16BitsLowHigh
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end74:
	.size	Write32Bits, .Lfunc_end74-Write32Bits
	.cantunwind
	.fnend

	.globl	Write32BitsLowHigh
	.p2align	2
	.type	Write32BitsLowHigh,%function
	.code	32                      @ @Write32BitsLowHigh
Write32BitsLowHigh:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #16
	movw	r2, #65535
	str	r0, [r11, #-4]
	str	r1, [sp, #8]
	ldr	r0, [r11, #-4]
	ldr	r1, [sp, #8]
	and	r1, r1, r2
	bl	Write16BitsLowHigh
	movw	r0, #65535
	movw	r1, #16
	ldr	r2, [r11, #-4]
	ldr	lr, [sp, #8]
	asr	lr, lr, #16
	and	r0, lr, r0
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r2
	ldr	r2, [sp, #4]            @ 4-byte Reload
	str	r1, [sp]                @ 4-byte Spill
	mov	r1, r2
	bl	Write16BitsLowHigh
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end75:
	.size	Write32BitsLowHigh, .Lfunc_end75-Write32BitsLowHigh
	.cantunwind
	.fnend

	.globl	Write32BitsHighLow
	.p2align	2
	.type	Write32BitsHighLow,%function
	.code	32                      @ @Write32BitsHighLow
Write32BitsHighLow:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #16
	movw	r2, #65535
	movw	r3, #16
	str	r0, [r11, #-4]
	str	r1, [sp, #8]
	ldr	r0, [r11, #-4]
	ldr	r1, [sp, #8]
	asr	r1, r1, #16
	and	r1, r1, r2
	str	r3, [sp, #4]            @ 4-byte Spill
	bl	Write16BitsHighLow
	movw	r0, #65535
	ldr	r1, [r11, #-4]
	ldr	r2, [sp, #8]
	and	r0, r2, r0
	str	r0, [sp]                @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp]                @ 4-byte Reload
	bl	Write16BitsHighLow
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end76:
	.size	Write32BitsHighLow, .Lfunc_end76-Write32BitsHighLow
	.cantunwind
	.fnend

	.globl	ReadBytes
	.p2align	2
	.type	ReadBytes,%function
	.code	32                      @ @ReadBytes
ReadBytes:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #16
	str	r0, [r11, #-4]
	str	r1, [sp, #8]
	str	r2, [sp, #4]
.LBB77_1:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-4]
	bl	feof
	mvn	lr, #0
	cmp	r0, #0
	movw	r0, #0
	movne	r0, #1
	eor	r0, r0, lr
	and	r0, r0, #1
	ldr	r1, [sp, #4]
	add	lr, r1, lr
	str	lr, [sp, #4]
	cmp	r1, #0
	movw	r1, #0
	movgt	r1, #1
	and	r1, r1, #1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LBB77_3
@ BB#2:                                 @   in Loop: Header=BB77_1 Depth=1
	ldr	r0, [r11, #-4]
	bl	getc
	ldr	lr, [sp, #8]
	add	r1, lr, #1
	str	r1, [sp, #8]
	strb	r0, [lr]
	b	.LBB77_1
.LBB77_3:
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end77:
	.size	ReadBytes, .Lfunc_end77-ReadBytes
	.cantunwind
	.fnend

	.globl	ReadBytesSwapped
	.p2align	2
	.type	ReadBytesSwapped,%function
	.code	32                      @ @ReadBytesSwapped
ReadBytesSwapped:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #16
	str	r0, [r11, #-4]
	str	r1, [sp, #8]
	str	r2, [sp, #4]
	ldr	r0, [sp, #8]
	str	r0, [sp]
.LBB78_1:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-4]
	bl	feof
	mvn	lr, #0
	cmp	r0, #0
	movw	r0, #0
	movne	r0, #1
	eor	r0, r0, lr
	and	r0, r0, #1
	ldr	r1, [sp, #4]
	add	lr, r1, lr
	str	lr, [sp, #4]
	cmp	r1, #0
	movw	r1, #0
	movgt	r1, #1
	and	r1, r1, #1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LBB78_3
@ BB#2:                                 @   in Loop: Header=BB78_1 Depth=1
	ldr	r0, [r11, #-4]
	bl	getc
	ldr	lr, [sp]
	add	r1, lr, #1
	str	r1, [sp]
	strb	r0, [lr]
	b	.LBB78_1
.LBB78_3:
	mvn	r0, #0
	ldr	r1, [sp]
	add	r0, r1, r0
	str	r0, [sp]
.LBB78_4:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #8]
	ldr	r1, [sp]
	cmp	r0, r1
	bhs	.LBB78_7
@ BB#5:                                 @   in Loop: Header=BB78_4 Depth=1
	ldr	r0, [sp, #8]
	ldrb	r0, [r0]
	str	r0, [sp, #4]
	ldr	r0, [sp]
	ldrb	r0, [r0]
	ldr	r1, [sp, #8]
	strb	r0, [r1]
	ldr	r0, [sp, #4]
	ldr	r1, [sp]
	strb	r0, [r1]
@ BB#6:                                 @   in Loop: Header=BB78_4 Depth=1
	mvn	r0, #0
	ldr	r1, [sp, #8]
	add	r1, r1, #1
	str	r1, [sp, #8]
	ldr	r1, [sp]
	add	r0, r1, r0
	str	r0, [sp]
	b	.LBB78_4
.LBB78_7:
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end78:
	.size	ReadBytesSwapped, .Lfunc_end78-ReadBytesSwapped
	.cantunwind
	.fnend

	.globl	WriteBytes
	.p2align	2
	.type	WriteBytes,%function
	.code	32                      @ @WriteBytes
WriteBytes:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #16
	str	r0, [r11, #-4]
	str	r1, [sp, #8]
	str	r2, [sp, #4]
.LBB79_1:                               @ =>This Inner Loop Header: Depth=1
	mvn	r0, #0
	ldr	r1, [sp, #4]
	add	r0, r1, r0
	str	r0, [sp, #4]
	cmp	r1, #0
	ble	.LBB79_3
@ BB#2:                                 @   in Loop: Header=BB79_1 Depth=1
	ldr	r0, [sp, #8]
	add	r1, r0, #1
	str	r1, [sp, #8]
	ldrb	r0, [r0]
	ldr	r1, [r11, #-4]
	bl	putc
	str	r0, [sp]                @ 4-byte Spill
	b	.LBB79_1
.LBB79_3:
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end79:
	.size	WriteBytes, .Lfunc_end79-WriteBytes
	.cantunwind
	.fnend

	.globl	WriteBytesSwapped
	.p2align	2
	.type	WriteBytesSwapped,%function
	.code	32                      @ @WriteBytesSwapped
WriteBytesSwapped:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #16
	str	r0, [r11, #-4]
	str	r1, [sp, #8]
	str	r2, [sp, #4]
	ldr	r0, [sp, #4]
	sub	r0, r0, #1
	ldr	r1, [sp, #8]
	add	r0, r1, r0
	str	r0, [sp, #8]
.LBB80_1:                               @ =>This Inner Loop Header: Depth=1
	mvn	r0, #0
	ldr	r1, [sp, #4]
	add	r0, r1, r0
	str	r0, [sp, #4]
	cmp	r1, #0
	ble	.LBB80_3
@ BB#2:                                 @   in Loop: Header=BB80_1 Depth=1
	mvn	r0, #0
	ldr	r1, [sp, #8]
	add	r0, r1, r0
	str	r0, [sp, #8]
	ldrb	r0, [r1]
	ldr	r1, [r11, #-4]
	bl	putc
	str	r0, [sp]                @ 4-byte Spill
	b	.LBB80_1
.LBB80_3:
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end80:
	.size	WriteBytesSwapped, .Lfunc_end80-WriteBytesSwapped
	.cantunwind
	.fnend

	.globl	ReadIeeeFloatHighLow
	.p2align	2
	.type	ReadIeeeFloatHighLow,%function
	.code	32                      @ @ReadIeeeFloatHighLow
ReadIeeeFloatHighLow:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	str	r0, [r11, #-4]
	sub	r1, r11, #8
	mov	r2, #4
	str	r1, [sp, #12]           @ 4-byte Spill
	bl	ReadBytes
	ldr	r0, [sp, #12]           @ 4-byte Reload
	bl	ConvertFromIeeeSingle
	vmov	d16, r0, r1
	vstr	d16, [sp]               @ 8-byte Spill
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end81:
	.size	ReadIeeeFloatHighLow, .Lfunc_end81-ReadIeeeFloatHighLow
	.cantunwind
	.fnend

	.globl	ReadIeeeFloatLowHigh
	.p2align	2
	.type	ReadIeeeFloatLowHigh,%function
	.code	32                      @ @ReadIeeeFloatLowHigh
ReadIeeeFloatLowHigh:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	str	r0, [r11, #-4]
	sub	r1, r11, #8
	mov	r2, #4
	str	r1, [sp, #12]           @ 4-byte Spill
	bl	ReadBytesSwapped
	ldr	r0, [sp, #12]           @ 4-byte Reload
	bl	ConvertFromIeeeSingle
	vmov	d16, r0, r1
	vstr	d16, [sp]               @ 8-byte Spill
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end82:
	.size	ReadIeeeFloatLowHigh, .Lfunc_end82-ReadIeeeFloatLowHigh
	.cantunwind
	.fnend

	.globl	ReadIeeeDoubleHighLow
	.p2align	2
	.type	ReadIeeeDoubleHighLow,%function
	.code	32                      @ @ReadIeeeDoubleHighLow
ReadIeeeDoubleHighLow:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	str	r0, [r11, #-4]
	add	r1, sp, #12
	mov	r2, #8
	str	r1, [sp, #8]            @ 4-byte Spill
	bl	ReadBytes
	ldr	r0, [sp, #8]            @ 4-byte Reload
	bl	ConvertFromIeeeDouble
	vmov	d16, r0, r1
	vstr	d16, [sp]               @ 8-byte Spill
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end83:
	.size	ReadIeeeDoubleHighLow, .Lfunc_end83-ReadIeeeDoubleHighLow
	.cantunwind
	.fnend

	.globl	ReadIeeeDoubleLowHigh
	.p2align	2
	.type	ReadIeeeDoubleLowHigh,%function
	.code	32                      @ @ReadIeeeDoubleLowHigh
ReadIeeeDoubleLowHigh:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	str	r0, [r11, #-4]
	add	r1, sp, #12
	mov	r2, #8
	str	r1, [sp, #8]            @ 4-byte Spill
	bl	ReadBytesSwapped
	ldr	r0, [sp, #8]            @ 4-byte Reload
	bl	ConvertFromIeeeDouble
	vmov	d16, r0, r1
	vstr	d16, [sp]               @ 8-byte Spill
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end84:
	.size	ReadIeeeDoubleLowHigh, .Lfunc_end84-ReadIeeeDoubleLowHigh
	.cantunwind
	.fnend

	.globl	ReadIeeeExtendedHighLow
	.p2align	2
	.type	ReadIeeeExtendedHighLow,%function
	.code	32                      @ @ReadIeeeExtendedHighLow
ReadIeeeExtendedHighLow:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #32
	str	r0, [r11, #-4]
	sub	r1, r11, #14
	mov	r2, #10
	str	r1, [sp, #12]           @ 4-byte Spill
	bl	ReadBytes
	ldr	r0, [sp, #12]           @ 4-byte Reload
	bl	ConvertFromIeeeExtended
	vmov	d16, r0, r1
	vstr	d16, [sp]               @ 8-byte Spill
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end85:
	.size	ReadIeeeExtendedHighLow, .Lfunc_end85-ReadIeeeExtendedHighLow
	.cantunwind
	.fnend

	.globl	ReadIeeeExtendedLowHigh
	.p2align	2
	.type	ReadIeeeExtendedLowHigh,%function
	.code	32                      @ @ReadIeeeExtendedLowHigh
ReadIeeeExtendedLowHigh:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #32
	str	r0, [r11, #-4]
	sub	r1, r11, #14
	mov	r2, #10
	str	r1, [sp, #12]           @ 4-byte Spill
	bl	ReadBytesSwapped
	ldr	r0, [sp, #12]           @ 4-byte Reload
	bl	ConvertFromIeeeExtended
	vmov	d16, r0, r1
	vstr	d16, [sp]               @ 8-byte Spill
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end86:
	.size	ReadIeeeExtendedLowHigh, .Lfunc_end86-ReadIeeeExtendedLowHigh
	.cantunwind
	.fnend

	.globl	WriteIeeeFloatLowHigh
	.p2align	2
	.type	WriteIeeeFloatLowHigh,%function
	.code	32                      @ @WriteIeeeFloatLowHigh
WriteIeeeFloatLowHigh:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	vmov	d16, r2, r3
	add	r2, sp, #4
	str	r0, [r11, #-4]
	vstr	d16, [sp, #8]
	vldr	d16, [sp, #8]
	vmov	r0, r1, d16
	bl	ConvertToIeeeSingle
	movw	r2, #4
	add	r1, sp, #4
	ldr	r0, [r11, #-4]
	bl	WriteBytesSwapped
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end87:
	.size	WriteIeeeFloatLowHigh, .Lfunc_end87-WriteIeeeFloatLowHigh
	.cantunwind
	.fnend

	.globl	WriteIeeeFloatHighLow
	.p2align	2
	.type	WriteIeeeFloatHighLow,%function
	.code	32                      @ @WriteIeeeFloatHighLow
WriteIeeeFloatHighLow:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	vmov	d16, r2, r3
	add	r2, sp, #4
	str	r0, [r11, #-4]
	vstr	d16, [sp, #8]
	vldr	d16, [sp, #8]
	vmov	r0, r1, d16
	bl	ConvertToIeeeSingle
	movw	r2, #4
	add	r1, sp, #4
	ldr	r0, [r11, #-4]
	bl	WriteBytes
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end88:
	.size	WriteIeeeFloatHighLow, .Lfunc_end88-WriteIeeeFloatHighLow
	.cantunwind
	.fnend

	.globl	WriteIeeeDoubleLowHigh
	.p2align	2
	.type	WriteIeeeDoubleLowHigh,%function
	.code	32                      @ @WriteIeeeDoubleLowHigh
WriteIeeeDoubleLowHigh:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	vmov	d16, r2, r3
	mov	r2, sp
	str	r0, [r11, #-4]
	vstr	d16, [sp, #8]
	vldr	d16, [sp, #8]
	vmov	r0, r1, d16
	bl	ConvertToIeeeDouble
	movw	r2, #8
	mov	r1, sp
	ldr	r0, [r11, #-4]
	bl	WriteBytesSwapped
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end89:
	.size	WriteIeeeDoubleLowHigh, .Lfunc_end89-WriteIeeeDoubleLowHigh
	.cantunwind
	.fnend

	.globl	WriteIeeeDoubleHighLow
	.p2align	2
	.type	WriteIeeeDoubleHighLow,%function
	.code	32                      @ @WriteIeeeDoubleHighLow
WriteIeeeDoubleHighLow:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	vmov	d16, r2, r3
	mov	r2, sp
	str	r0, [r11, #-4]
	vstr	d16, [sp, #8]
	vldr	d16, [sp, #8]
	vmov	r0, r1, d16
	bl	ConvertToIeeeDouble
	movw	r2, #8
	mov	r1, sp
	ldr	r0, [r11, #-4]
	bl	WriteBytes
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end90:
	.size	WriteIeeeDoubleHighLow, .Lfunc_end90-WriteIeeeDoubleHighLow
	.cantunwind
	.fnend

	.globl	WriteIeeeExtendedLowHigh
	.p2align	2
	.type	WriteIeeeExtendedLowHigh,%function
	.code	32                      @ @WriteIeeeExtendedLowHigh
WriteIeeeExtendedLowHigh:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #32
	vmov	d16, r2, r3
	add	r2, sp, #6
	str	r0, [r11, #-4]
	vstr	d16, [sp, #16]
	vldr	d16, [sp, #16]
	vmov	r0, r1, d16
	bl	ConvertToIeeeExtended
	movw	r2, #10
	add	r1, sp, #6
	ldr	r0, [r11, #-4]
	bl	WriteBytesSwapped
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end91:
	.size	WriteIeeeExtendedLowHigh, .Lfunc_end91-WriteIeeeExtendedLowHigh
	.cantunwind
	.fnend

	.globl	WriteIeeeExtendedHighLow
	.p2align	2
	.type	WriteIeeeExtendedHighLow,%function
	.code	32                      @ @WriteIeeeExtendedHighLow
WriteIeeeExtendedHighLow:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #32
	vmov	d16, r2, r3
	add	r2, sp, #6
	str	r0, [r11, #-4]
	vstr	d16, [sp, #16]
	vldr	d16, [sp, #16]
	vmov	r0, r1, d16
	bl	ConvertToIeeeExtended
	movw	r2, #10
	add	r1, sp, #6
	ldr	r0, [r11, #-4]
	bl	WriteBytes
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end92:
	.size	WriteIeeeExtendedHighLow, .Lfunc_end92-WriteIeeeExtendedHighLow
	.cantunwind
	.fnend

	.globl	L3psycho_anal
	.p2align	3
	.type	L3psycho_anal,%function
	.code	32                      @ @L3psycho_anal
L3psycho_anal:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
	add	r11, sp, #28
	sub	sp, sp, #484
	sub	sp, sp, #2048
	ldr	r12, [r11, #32]
	ldr	lr, [r11, #28]
	ldr	r4, [r11, #24]
	ldr	r5, [r11, #20]
	ldr	r6, [r11, #16]
	ldr	r7, [r11, #12]
	ldr	r8, [r11, #8]
	vldr	d16, .LCPI93_20
	str	r0, [r11, #-36]
	str	r1, [r11, #-40]
	str	r2, [r11, #-44]
	str	r3, [r11, #-48]
	str	r8, [r11, #-52]
	str	r7, [r11, #-56]
	str	r6, [r11, #-60]
	str	r5, [r11, #-64]
	str	r4, [r11, #-68]
	str	lr, [r11, #-72]
	str	r12, [r11, #-76]
	vstr	d16, [r11, #-112]
	vstr	d16, [r11, #-120]
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #156]
	cmp	r0, #0
	bne	.LBB93_125
@ BB#1:
	ldr	r0, [r11, #-44]
	cmp	r0, #0
	bne	.LBB93_125
@ BB#2:
	movw	r0, :lower16:L3psycho_anal.blocktype_old
	movt	r0, :upper16:L3psycho_anal.blocktype_old
	mov	r1, #3
	str	r1, [r0]
	str	r1, [r0, #4]
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #12]
	str	r0, [r11, #-152]
	cmp	r0, #16000
	str	r0, [r11, #-1084]       @ 4-byte Spill
	beq	.LBB93_11
	b	.LBB93_3
.LBB93_3:
	movw	r0, #22050
	ldr	r1, [r11, #-1084]       @ 4-byte Reload
	cmp	r1, r0
	beq	.LBB93_12
	b	.LBB93_4
.LBB93_4:
	movw	r0, #24000
	ldr	r1, [r11, #-1084]       @ 4-byte Reload
	cmp	r1, r0
	beq	.LBB93_13
	b	.LBB93_5
.LBB93_5:
	ldr	r0, [r11, #-1084]       @ 4-byte Reload
	cmp	r0, #32000
	beq	.LBB93_8
	b	.LBB93_6
.LBB93_6:
	movw	r0, #44100
	ldr	r1, [r11, #-1084]       @ 4-byte Reload
	cmp	r1, r0
	beq	.LBB93_9
	b	.LBB93_7
.LBB93_7:
	movw	r0, #48000
	ldr	r1, [r11, #-1084]       @ 4-byte Reload
	cmp	r1, r0
	beq	.LBB93_10
	b	.LBB93_14
.LBB93_8:
	b	.LBB93_15
.LBB93_9:
	b	.LBB93_15
.LBB93_10:
	b	.LBB93_15
.LBB93_11:
	b	.LBB93_15
.LBB93_12:
	b	.LBB93_15
.LBB93_13:
	b	.LBB93_15
.LBB93_14:
	movw	r1, :lower16:.L.str.205
	movt	r1, :upper16:.L.str.205
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	ldr	r2, [r11, #-152]
	bl	fprintf
	mvn	r1, #0
	str	r0, [r11, #-1088]       @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB93_15:
	movw	r0, #6
	movw	r1, :lower16:L3psycho_anal.cw_lower_index
	movt	r1, :upper16:L3psycho_anal.cw_lower_index
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	movw	r3, #0
	movw	r12, #1952
	movw	lr, :lower16:L3psycho_anal.en
	movt	lr, :upper16:L3psycho_anal.en
	movw	r4, :lower16:L3psycho_anal.bx_sav
	movt	r4, :upper16:L3psycho_anal.bx_sav
	movw	r5, #16416
	movw	r6, :lower16:L3psycho_anal.ax_sav
	movt	r6, :upper16:L3psycho_anal.ax_sav
	movw	r7, :lower16:L3psycho_anal.rx_sav
	movt	r7, :upper16:L3psycho_anal.rx_sav
	str	r0, [r11, #-1092]       @ 4-byte Spill
	mov	r0, r7
	and	r7, r3, #255
	str	r1, [r11, #-1096]       @ 4-byte Spill
	mov	r1, r7
	str	r2, [r11, #-1100]       @ 4-byte Spill
	mov	r2, r5
	str	r6, [r11, #-1104]       @ 4-byte Spill
	str	r5, [r11, #-1108]       @ 4-byte Spill
	str	r4, [r11, #-1112]       @ 4-byte Spill
	str	r3, [r11, #-1116]       @ 4-byte Spill
	str	r12, [r11, #-1120]      @ 4-byte Spill
	str	lr, [r11, #-1124]       @ 4-byte Spill
	bl	memset
	ldr	r0, [r11, #-1104]       @ 4-byte Reload
	ldr	r1, [r11, #-1116]       @ 4-byte Reload
	and	r1, r1, #255
	ldr	r2, [r11, #-1108]       @ 4-byte Reload
	bl	memset
	ldr	r0, [r11, #-1112]       @ 4-byte Reload
	ldr	r1, [r11, #-1116]       @ 4-byte Reload
	and	r1, r1, #255
	ldr	r2, [r11, #-1108]       @ 4-byte Reload
	bl	memset
	ldr	r0, [r11, #-1124]       @ 4-byte Reload
	ldr	r1, [r11, #-1116]       @ 4-byte Reload
	and	r1, r1, #255
	ldr	r2, [r11, #-1120]       @ 4-byte Reload
	bl	memset
	ldr	r0, [r11, #-1100]       @ 4-byte Reload
	ldr	r1, [r11, #-1116]       @ 4-byte Reload
	and	r1, r1, #255
	ldr	r2, [r11, #-1120]       @ 4-byte Reload
	bl	memset
	ldr	r0, [r11, #-1092]       @ 4-byte Reload
	ldr	r1, [r11, #-1096]       @ 4-byte Reload
	str	r0, [r1]
	ldr	r2, [r11, #-36]
	vldr	s0, [r2, #140]
	vcmpe.f32	s0, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB93_17
@ BB#16:
	ldr	r0, [r11, #-36]
	vldr	s0, [r0, #140]
	vstr	s0, [r11, #-172]
	b	.LBB93_18
.LBB93_17:
	vldr	s0, .LCPI93_21
	vstr	s0, [r11, #-172]
.LBB93_18:
	movw	r0, #509
	movw	r1, :lower16:L3psycho_anal.cw_upper_index
	movt	r1, :upper16:L3psycho_anal.cw_upper_index
	vldr	d16, .LCPI93_22
	vldr	d17, .LCPI93_23
	vldr	s0, [r11, #-172]
	vcvt.f64.f32	d18, s0
	vmul.f64	d17, d18, d17
	vmul.f64	d16, d17, d16
	ldr	r2, [r11, #-36]
	ldr	r2, [r2, #12]
	vmov	s0, r2
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r2, s0
	str	r2, [r1]
	ldr	r1, [r1]
	cmp	r0, r1
	bge	.LBB93_20
@ BB#19:
	movw	r0, #509
	str	r0, [r11, #-1128]       @ 4-byte Spill
	b	.LBB93_21
.LBB93_20:
	movw	r0, :lower16:L3psycho_anal.cw_upper_index
	movt	r0, :upper16:L3psycho_anal.cw_upper_index
	ldr	r0, [r0]
	str	r0, [r11, #-1128]       @ 4-byte Spill
.LBB93_21:
	ldr	r0, [r11, #-1128]       @ 4-byte Reload
	movw	r1, #6
	movw	r2, :lower16:L3psycho_anal.cw_upper_index
	movt	r2, :upper16:L3psycho_anal.cw_upper_index
	str	r0, [r2]
	ldr	r0, [r2]
	cmp	r1, r0
	ble	.LBB93_23
@ BB#22:
	movw	r0, #6
	str	r0, [r11, #-1132]       @ 4-byte Spill
	b	.LBB93_24
.LBB93_23:
	movw	r0, :lower16:L3psycho_anal.cw_upper_index
	movt	r0, :upper16:L3psycho_anal.cw_upper_index
	ldr	r0, [r0]
	str	r0, [r11, #-1132]       @ 4-byte Spill
.LBB93_24:
	ldr	r0, [r11, #-1132]       @ 4-byte Reload
	movw	r1, #0
	movw	r2, :lower16:L3psycho_anal.cw_upper_index
	movt	r2, :upper16:L3psycho_anal.cw_upper_index
	str	r0, [r2]
	str	r1, [r11, #-156]
.LBB93_25:                              @ =>This Inner Loop Header: Depth=1
	movw	r0, #513
	ldr	r1, [r11, #-156]
	cmp	r1, r0
	bge	.LBB93_28
@ BB#26:                                @   in Loop: Header=BB93_25 Depth=1
	vldr	s0, .LCPI93_24
	movw	r0, :lower16:L3psycho_anal.cw
	movt	r0, :upper16:L3psycho_anal.cw
	movw	r1, #2
	ldr	r2, [r11, #-156]
	movw	r3, :lower16:L3psycho_anal.cw
	movt	r3, :upper16:L3psycho_anal.cw
	add	r2, r3, r2, lsl #2
	vstr	s0, [r2]
	str	r1, [r11, #-1136]       @ 4-byte Spill
	str	r0, [r11, #-1140]       @ 4-byte Spill
@ BB#27:                                @   in Loop: Header=BB93_25 Depth=1
	ldr	r0, [r11, #-156]
	add	r0, r0, #1
	str	r0, [r11, #-156]
	b	.LBB93_25
.LBB93_28:
	movw	r0, #0
	str	r0, [r11, #-164]
.LBB93_29:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-164]
	cmp	r0, #12
	bge	.LBB93_36
@ BB#30:                                @   in Loop: Header=BB93_29 Depth=1
	movw	r0, :lower16:L3psycho_anal.mld_s
	movt	r0, :upper16:L3psycho_anal.mld_s
	movw	r1, #3
	ldr	r2, [r11, #-164]
	vmov	s0, r2
	vcvt.f64.s32	d16, s0
	vldr	d17, .LCPI93_25
	vmul.f64	d16, d16, d17
	vmov.f64	d17, #1.200000e+01
	vdiv.f64	d16, d16, d17
	vmov	r2, r3, d16
	str	r0, [r11, #-1144]       @ 4-byte Spill
	mov	r0, r2
	str	r1, [r11, #-1148]       @ 4-byte Spill
	mov	r1, r3
	bl	cos
	vmov	d16, r0, r1
	vmov.f64	d17, #1.000000e+00
	vsub.f64	d16, d17, d16
	vmov.f64	d17, #1.250000e+00
	vmul.f64	d16, d16, d17
	vmov.f64	d17, #-2.500000e+00
	vadd.f64	d16, d16, d17
	vstr	d16, [r11, #-688]
	vmov	r2, r3, d16
	vmov.f64	d16, #1.000000e+01
	vmov	r0, r1, d16
	bl	pow
	vmov	d16, r0, r1
	ldr	r0, [r11, #-164]
	movw	r1, :lower16:L3psycho_anal.mld_s
	movt	r1, :upper16:L3psycho_anal.mld_s
	add	r0, r1, r0, lsl #3
	vstr	d16, [r0]
@ BB#31:                                @   in Loop: Header=BB93_29 Depth=1
	ldr	r0, [r11, #-164]
	add	r0, r0, #1
	str	r0, [r11, #-164]
	b	.LBB93_29
	.p2align	3
@ BB#32:
.LCPI93_20:
	.long	0                       @ double 0
	.long	0
	.p2align	3
@ BB#33:
.LCPI93_22:
	.long	0                       @ double 1024
	.long	1083179008
	.p2align	3
@ BB#34:
.LCPI93_23:
	.long	0                       @ double 1000
	.long	1083129856
	.p2align	3
@ BB#35:
.LCPI93_25:
	.long	1413754136              @ double 3.1415926535897931
	.long	1074340347
.LBB93_36:
	movw	r0, #0
	str	r0, [r11, #-164]
.LBB93_37:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-164]
	cmp	r0, #21
	bge	.LBB93_40
@ BB#38:                                @   in Loop: Header=BB93_37 Depth=1
	movw	r0, :lower16:L3psycho_anal.mld_l
	movt	r0, :upper16:L3psycho_anal.mld_l
	movw	r1, #3
	ldr	r2, [r11, #-164]
	vmov	s0, r2
	vcvt.f64.s32	d16, s0
	vldr	d17, .LCPI93_25
	vmul.f64	d16, d16, d17
	vmov.f64	d17, #2.100000e+01
	vdiv.f64	d16, d16, d17
	vmov	r2, r3, d16
	str	r0, [r11, #-1152]       @ 4-byte Spill
	mov	r0, r2
	str	r1, [r11, #-1156]       @ 4-byte Spill
	mov	r1, r3
	bl	cos
	vmov	d16, r0, r1
	vmov.f64	d17, #1.000000e+00
	vsub.f64	d16, d17, d16
	vmov.f64	d17, #1.250000e+00
	vmul.f64	d16, d16, d17
	vmov.f64	d17, #-2.500000e+00
	vadd.f64	d16, d16, d17
	vstr	d16, [r11, #-696]
	vmov	r2, r3, d16
	vmov.f64	d16, #1.000000e+01
	vmov	r0, r1, d16
	bl	pow
	vmov	d16, r0, r1
	ldr	r0, [r11, #-164]
	movw	r1, :lower16:L3psycho_anal.mld_l
	movt	r1, :upper16:L3psycho_anal.mld_l
	add	r0, r1, r0, lsl #3
	vstr	d16, [r0]
@ BB#39:                                @   in Loop: Header=BB93_37 Depth=1
	ldr	r0, [r11, #-164]
	add	r0, r0, #1
	str	r0, [r11, #-164]
	b	.LBB93_37
.LBB93_40:
	movw	r0, #0
	str	r0, [r11, #-152]
.LBB93_41:                              @ =>This Inner Loop Header: Depth=1
	movw	r0, #513
	ldr	r1, [r11, #-152]
	cmp	r1, r0
	bge	.LBB93_45
@ BB#42:                                @   in Loop: Header=BB93_41 Depth=1
	mvn	r0, #0
	movw	r1, :lower16:L3psycho_anal.partition_l
	movt	r1, :upper16:L3psycho_anal.partition_l
	movw	r2, #2
	ldr	r3, [r11, #-152]
	movw	r12, :lower16:L3psycho_anal.partition_l
	movt	r12, :upper16:L3psycho_anal.partition_l
	add	r3, r12, r3, lsl #2
	str	r0, [r3]
	str	r2, [r11, #-1160]       @ 4-byte Spill
	str	r1, [r11, #-1164]       @ 4-byte Spill
@ BB#43:                                @   in Loop: Header=BB93_41 Depth=1
	ldr	r0, [r11, #-152]
	add	r0, r0, #1
	str	r0, [r11, #-152]
	b	.LBB93_41
	.p2align	2
@ BB#44:
.LCPI93_21:
	.long	1091433084              @ float 8.87170029
.LBB93_45:
	movw	r2, :lower16:L3psycho_anal.numlines_l
	movt	r2, :upper16:L3psycho_anal.numlines_l
	movw	r3, :lower16:L3psycho_anal.numlines_s
	movt	r3, :upper16:L3psycho_anal.numlines_s
	movw	r0, :lower16:L3psycho_anal.partition_l
	movt	r0, :upper16:L3psycho_anal.partition_l
	movw	r1, :lower16:L3psycho_anal.minval
	movt	r1, :upper16:L3psycho_anal.minval
	movw	r12, :lower16:L3psycho_anal.qthr_l
	movt	r12, :upper16:L3psycho_anal.qthr_l
	movw	lr, :lower16:L3psycho_anal.s3_l
	movt	lr, :upper16:L3psycho_anal.s3_l
	movw	r4, :lower16:L3psycho_anal.s3_s
	movt	r4, :upper16:L3psycho_anal.s3_s
	movw	r5, :lower16:L3psycho_anal.qthr_s
	movt	r5, :upper16:L3psycho_anal.qthr_s
	movw	r6, :lower16:L3psycho_anal.bu_l
	movt	r6, :upper16:L3psycho_anal.bu_l
	movw	r7, :lower16:L3psycho_anal.bo_l
	movt	r7, :upper16:L3psycho_anal.bo_l
	movw	r8, :lower16:L3psycho_anal.w1_l
	movt	r8, :upper16:L3psycho_anal.w1_l
	movw	r9, :lower16:L3psycho_anal.w2_l
	movt	r9, :upper16:L3psycho_anal.w2_l
	movw	r10, :lower16:L3psycho_anal.bu_s
	movt	r10, :upper16:L3psycho_anal.bu_s
	str	r0, [r11, #-1168]       @ 4-byte Spill
	movw	r0, :lower16:L3psycho_anal.bo_s
	movt	r0, :upper16:L3psycho_anal.bo_s
	str	r0, [r11, #-1172]       @ 4-byte Spill
	movw	r0, :lower16:L3psycho_anal.w1_s
	movt	r0, :upper16:L3psycho_anal.w1_s
	str	r0, [r11, #-1176]       @ 4-byte Spill
	movw	r0, :lower16:L3psycho_anal.w2_s
	movt	r0, :upper16:L3psycho_anal.w2_s
	str	r0, [r11, #-1180]       @ 4-byte Spill
	sub	r0, r11, #680
	str	r0, [r11, #-1184]       @ 4-byte Spill
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #12]
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	str	r1, [r11, #-1188]       @ 4-byte Spill
	vmov	r0, r1, d16
	str	r12, [r11, #-1192]      @ 4-byte Spill
	ldr	r12, [r11, #-1168]      @ 4-byte Reload
	str	r12, [sp]
	ldr	r12, [r11, #-1188]      @ 4-byte Reload
	str	r12, [sp, #4]
	ldr	r12, [r11, #-1192]      @ 4-byte Reload
	str	r12, [sp, #8]
	str	lr, [sp, #12]
	str	r4, [sp, #16]
	str	r5, [sp, #20]
	ldr	lr, [r11, #-1184]       @ 4-byte Reload
	str	lr, [sp, #24]
	str	r6, [sp, #28]
	str	r7, [sp, #32]
	str	r8, [sp, #36]
	str	r9, [sp, #40]
	str	r10, [sp, #44]
	ldr	r4, [r11, #-1172]       @ 4-byte Reload
	str	r4, [sp, #48]
	ldr	r5, [r11, #-1176]       @ 4-byte Reload
	str	r5, [sp, #52]
	ldr	r6, [r11, #-1180]       @ 4-byte Reload
	str	r6, [sp, #56]
	bl	L3para_read
	movw	r0, #0
	movw	r1, :lower16:L3psycho_anal.npart_s_orig
	movt	r1, :upper16:L3psycho_anal.npart_s_orig
	movw	r2, :lower16:L3psycho_anal.npart_l_orig
	movt	r2, :upper16:L3psycho_anal.npart_l_orig
	str	r0, [r2]
	str	r0, [r1]
	str	r0, [r11, #-152]
.LBB93_46:                              @ =>This Inner Loop Header: Depth=1
	movw	r0, #513
	ldr	r1, [r11, #-152]
	cmp	r1, r0
	bge	.LBB93_52
@ BB#47:                                @   in Loop: Header=BB93_46 Depth=1
	movw	r0, :lower16:L3psycho_anal.npart_l_orig
	movt	r0, :upper16:L3psycho_anal.npart_l_orig
	movw	r1, :lower16:L3psycho_anal.partition_l
	movt	r1, :upper16:L3psycho_anal.partition_l
	movw	r2, #2
	ldr	r3, [r11, #-152]
	movw	r12, :lower16:L3psycho_anal.partition_l
	movt	r12, :upper16:L3psycho_anal.partition_l
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	ldr	r0, [r0]
	cmp	r3, r0
	str	r2, [r11, #-1196]       @ 4-byte Spill
	str	r1, [r11, #-1200]       @ 4-byte Spill
	ble	.LBB93_49
@ BB#48:                                @   in Loop: Header=BB93_46 Depth=1
	movw	r0, :lower16:L3psycho_anal.npart_l_orig
	movt	r0, :upper16:L3psycho_anal.npart_l_orig
	movw	r1, :lower16:L3psycho_anal.partition_l
	movt	r1, :upper16:L3psycho_anal.partition_l
	movw	r2, #2
	ldr	r3, [r11, #-152]
	movw	r12, :lower16:L3psycho_anal.partition_l
	movt	r12, :upper16:L3psycho_anal.partition_l
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	str	r3, [r0]
	str	r2, [r11, #-1204]       @ 4-byte Spill
	str	r1, [r11, #-1208]       @ 4-byte Spill
.LBB93_49:                              @   in Loop: Header=BB93_46 Depth=1
	b	.LBB93_50
.LBB93_50:                              @   in Loop: Header=BB93_46 Depth=1
	ldr	r0, [r11, #-152]
	add	r0, r0, #1
	str	r0, [r11, #-152]
	b	.LBB93_46
	.p2align	2
@ BB#51:
.LCPI93_24:
	.long	1053609165              @ float 0.400000006
.LBB93_52:
	movw	r0, #0
	movw	r1, :lower16:L3psycho_anal.npart_l_orig
	movt	r1, :upper16:L3psycho_anal.npart_l_orig
	ldr	r2, [r1]
	add	r2, r2, #1
	str	r2, [r1]
	str	r0, [r11, #-152]
.LBB93_53:                              @ =>This Inner Loop Header: Depth=1
	movw	r0, :lower16:L3psycho_anal.numlines_s
	movt	r0, :upper16:L3psycho_anal.numlines_s
	movw	r1, #2
	ldr	r2, [r11, #-152]
	movw	r3, :lower16:L3psycho_anal.numlines_s
	movt	r3, :upper16:L3psycho_anal.numlines_s
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	cmp	r2, #0
	str	r0, [r11, #-1212]       @ 4-byte Spill
	str	r1, [r11, #-1216]       @ 4-byte Spill
	blt	.LBB93_56
@ BB#54:                                @   in Loop: Header=BB93_53 Depth=1
	b	.LBB93_55
.LBB93_55:                              @   in Loop: Header=BB93_53 Depth=1
	ldr	r0, [r11, #-152]
	add	r0, r0, #1
	str	r0, [r11, #-152]
	b	.LBB93_53
.LBB93_56:
	movw	r0, :lower16:L3psycho_anal.npart_l_orig
	movt	r0, :upper16:L3psycho_anal.npart_l_orig
	movw	r1, :lower16:L3psycho_anal.npart_l
	movt	r1, :upper16:L3psycho_anal.npart_l
	movw	r2, :lower16:L3psycho_anal.npart_s
	movt	r2, :upper16:L3psycho_anal.npart_s
	movw	r3, :lower16:L3psycho_anal.bo_s
	movt	r3, :upper16:L3psycho_anal.bo_s
	movw	r12, :lower16:L3psycho_anal.bo_l
	movt	r12, :upper16:L3psycho_anal.bo_l
	movw	lr, :lower16:L3psycho_anal.npart_s_orig
	movt	lr, :upper16:L3psycho_anal.npart_s_orig
	ldr	r4, [r11, #-152]
	str	r4, [lr]
	ldr	r12, [r12, #80]
	add	r12, r12, #1
	str	r12, [r1]
	ldr	r3, [r3, #44]
	add	r3, r3, #1
	str	r3, [r2]
	ldr	r1, [r1]
	ldr	r0, [r0]
	cmp	r1, r0
	ble	.LBB93_58
@ BB#57:
	vmov.f64	d16, #1.000000e+00
	movw	r0, :lower16:L3psycho_anal.w2_l
	movt	r0, :upper16:L3psycho_anal.w2_l
	movw	r1, :lower16:L3psycho_anal.bo_l
	movt	r1, :upper16:L3psycho_anal.bo_l
	movw	r2, :lower16:L3psycho_anal.npart_l
	movt	r2, :upper16:L3psycho_anal.npart_l
	movw	r3, :lower16:L3psycho_anal.npart_l_orig
	movt	r3, :upper16:L3psycho_anal.npart_l_orig
	ldr	r3, [r3]
	str	r3, [r2]
	ldr	r2, [r2]
	sub	r2, r2, #1
	str	r2, [r1, #80]
	vstr	d16, [r0, #160]
.LBB93_58:
	movw	r0, :lower16:L3psycho_anal.npart_s_orig
	movt	r0, :upper16:L3psycho_anal.npart_s_orig
	movw	r1, :lower16:L3psycho_anal.npart_s
	movt	r1, :upper16:L3psycho_anal.npart_s
	ldr	r1, [r1]
	ldr	r0, [r0]
	cmp	r1, r0
	ble	.LBB93_60
@ BB#59:
	vmov.f64	d16, #1.000000e+00
	movw	r0, :lower16:L3psycho_anal.w2_s
	movt	r0, :upper16:L3psycho_anal.w2_s
	movw	r1, :lower16:L3psycho_anal.bo_s
	movt	r1, :upper16:L3psycho_anal.bo_s
	movw	r2, :lower16:L3psycho_anal.npart_s
	movt	r2, :upper16:L3psycho_anal.npart_s
	movw	r3, :lower16:L3psycho_anal.npart_s_orig
	movt	r3, :upper16:L3psycho_anal.npart_s_orig
	ldr	r3, [r3]
	str	r3, [r2]
	ldr	r2, [r2]
	sub	r2, r2, #1
	str	r2, [r1, #44]
	vstr	d16, [r0, #88]
.LBB93_60:
	movw	r0, #0
	str	r0, [r11, #-152]
.LBB93_61:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB93_63 Depth 2
                                        @     Child Loop BB93_69 Depth 2
	movw	r0, :lower16:L3psycho_anal.npart_l
	movt	r0, :upper16:L3psycho_anal.npart_l
	ldr	r1, [r11, #-152]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB93_76
@ BB#62:                                @   in Loop: Header=BB93_61 Depth=1
	movw	r0, #0
	str	r0, [r11, #-156]
.LBB93_63:                              @   Parent Loop BB93_61 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	movw	r0, :lower16:L3psycho_anal.npart_l_orig
	movt	r0, :upper16:L3psycho_anal.npart_l_orig
	ldr	r1, [r11, #-156]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB93_68
@ BB#64:                                @   in Loop: Header=BB93_63 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-152]
	movw	r2, :lower16:L3psycho_anal.s3_l
	movt	r2, :upper16:L3psycho_anal.s3_l
	add	r1, r2, r1, lsl #9
	ldr	r2, [r11, #-156]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	str	r0, [r11, #-1220]       @ 4-byte Spill
	beq	.LBB93_66
@ BB#65:                                @   in Loop: Header=BB93_61 Depth=1
	b	.LBB93_68
.LBB93_66:                              @   in Loop: Header=BB93_63 Depth=2
	b	.LBB93_67
.LBB93_67:                              @   in Loop: Header=BB93_63 Depth=2
	ldr	r0, [r11, #-156]
	add	r0, r0, #1
	str	r0, [r11, #-156]
	b	.LBB93_63
.LBB93_68:                              @   in Loop: Header=BB93_61 Depth=1
	movw	r0, :lower16:L3psycho_anal.npart_l_orig
	movt	r0, :upper16:L3psycho_anal.npart_l_orig
	movw	r1, :lower16:L3psycho_anal.s3ind
	movt	r1, :upper16:L3psycho_anal.s3ind
	movw	r2, #3
	ldr	r3, [r11, #-156]
	ldr	r12, [r11, #-152]
	movw	lr, :lower16:L3psycho_anal.s3ind
	movt	lr, :upper16:L3psycho_anal.s3ind
	add	r12, lr, r12, lsl #3
	str	r3, [r12]
	ldr	r0, [r0]
	sub	r0, r0, #1
	str	r0, [r11, #-156]
	str	r2, [r11, #-1224]       @ 4-byte Spill
	str	r1, [r11, #-1228]       @ 4-byte Spill
.LBB93_69:                              @   Parent Loop BB93_61 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-156]
	cmp	r0, #0
	ble	.LBB93_74
@ BB#70:                                @   in Loop: Header=BB93_69 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-152]
	movw	r2, :lower16:L3psycho_anal.s3_l
	movt	r2, :upper16:L3psycho_anal.s3_l
	add	r1, r2, r1, lsl #9
	ldr	r2, [r11, #-156]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	str	r0, [r11, #-1232]       @ 4-byte Spill
	beq	.LBB93_72
@ BB#71:                                @   in Loop: Header=BB93_61 Depth=1
	b	.LBB93_74
.LBB93_72:                              @   in Loop: Header=BB93_69 Depth=2
	b	.LBB93_73
.LBB93_73:                              @   in Loop: Header=BB93_69 Depth=2
	mvn	r0, #0
	ldr	r1, [r11, #-156]
	add	r0, r1, r0
	str	r0, [r11, #-156]
	b	.LBB93_69
.LBB93_74:                              @   in Loop: Header=BB93_61 Depth=1
	movw	r0, :lower16:L3psycho_anal.s3ind
	movt	r0, :upper16:L3psycho_anal.s3ind
	movw	r1, #3
	ldr	r2, [r11, #-156]
	ldr	r3, [r11, #-152]
	movw	r12, :lower16:L3psycho_anal.s3ind
	movt	r12, :upper16:L3psycho_anal.s3ind
	add	r3, r12, r3, lsl #3
	str	r2, [r3, #4]
	str	r0, [r11, #-1236]       @ 4-byte Spill
	str	r1, [r11, #-1240]       @ 4-byte Spill
@ BB#75:                                @   in Loop: Header=BB93_61 Depth=1
	ldr	r0, [r11, #-152]
	add	r0, r0, #1
	str	r0, [r11, #-152]
	b	.LBB93_61
.LBB93_76:
	movw	r0, #0
	str	r0, [r11, #-152]
.LBB93_77:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB93_79 Depth 2
                                        @     Child Loop BB93_85 Depth 2
	movw	r0, :lower16:L3psycho_anal.npart_s
	movt	r0, :upper16:L3psycho_anal.npart_s
	ldr	r1, [r11, #-152]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB93_92
@ BB#78:                                @   in Loop: Header=BB93_77 Depth=1
	movw	r0, #0
	str	r0, [r11, #-156]
.LBB93_79:                              @   Parent Loop BB93_77 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	movw	r0, :lower16:L3psycho_anal.npart_s_orig
	movt	r0, :upper16:L3psycho_anal.npart_s_orig
	ldr	r1, [r11, #-156]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB93_84
@ BB#80:                                @   in Loop: Header=BB93_79 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-152]
	movw	r2, :lower16:L3psycho_anal.s3_s
	movt	r2, :upper16:L3psycho_anal.s3_s
	add	r1, r2, r1, lsl #9
	ldr	r2, [r11, #-156]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	str	r0, [r11, #-1244]       @ 4-byte Spill
	beq	.LBB93_82
@ BB#81:                                @   in Loop: Header=BB93_77 Depth=1
	b	.LBB93_84
.LBB93_82:                              @   in Loop: Header=BB93_79 Depth=2
	b	.LBB93_83
.LBB93_83:                              @   in Loop: Header=BB93_79 Depth=2
	ldr	r0, [r11, #-156]
	add	r0, r0, #1
	str	r0, [r11, #-156]
	b	.LBB93_79
.LBB93_84:                              @   in Loop: Header=BB93_77 Depth=1
	movw	r0, :lower16:L3psycho_anal.npart_s_orig
	movt	r0, :upper16:L3psycho_anal.npart_s_orig
	movw	r1, :lower16:L3psycho_anal.s3ind_s
	movt	r1, :upper16:L3psycho_anal.s3ind_s
	movw	r2, #3
	ldr	r3, [r11, #-156]
	ldr	r12, [r11, #-152]
	movw	lr, :lower16:L3psycho_anal.s3ind_s
	movt	lr, :upper16:L3psycho_anal.s3ind_s
	add	r12, lr, r12, lsl #3
	str	r3, [r12]
	ldr	r0, [r0]
	sub	r0, r0, #1
	str	r0, [r11, #-156]
	str	r2, [r11, #-1248]       @ 4-byte Spill
	str	r1, [r11, #-1252]       @ 4-byte Spill
.LBB93_85:                              @   Parent Loop BB93_77 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-156]
	cmp	r0, #0
	ble	.LBB93_90
@ BB#86:                                @   in Loop: Header=BB93_85 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-152]
	movw	r2, :lower16:L3psycho_anal.s3_s
	movt	r2, :upper16:L3psycho_anal.s3_s
	add	r1, r2, r1, lsl #9
	ldr	r2, [r11, #-156]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	str	r0, [r11, #-1256]       @ 4-byte Spill
	beq	.LBB93_88
@ BB#87:                                @   in Loop: Header=BB93_77 Depth=1
	b	.LBB93_90
.LBB93_88:                              @   in Loop: Header=BB93_85 Depth=2
	b	.LBB93_89
.LBB93_89:                              @   in Loop: Header=BB93_85 Depth=2
	mvn	r0, #0
	ldr	r1, [r11, #-156]
	add	r0, r1, r0
	str	r0, [r11, #-156]
	b	.LBB93_85
.LBB93_90:                              @   in Loop: Header=BB93_77 Depth=1
	movw	r0, :lower16:L3psycho_anal.s3ind_s
	movt	r0, :upper16:L3psycho_anal.s3ind_s
	movw	r1, #3
	ldr	r2, [r11, #-156]
	ldr	r3, [r11, #-152]
	movw	r12, :lower16:L3psycho_anal.s3ind_s
	movt	r12, :upper16:L3psycho_anal.s3ind_s
	add	r3, r12, r3, lsl #3
	str	r2, [r3, #4]
	str	r0, [r11, #-1260]       @ 4-byte Spill
	str	r1, [r11, #-1264]       @ 4-byte Spill
@ BB#91:                                @   in Loop: Header=BB93_77 Depth=1
	ldr	r0, [r11, #-152]
	add	r0, r0, #1
	str	r0, [r11, #-152]
	b	.LBB93_77
.LBB93_92:
	movw	r0, #0
	str	r0, [r11, #-148]
.LBB93_93:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB93_95 Depth 2
                                        @     Child Loop BB93_99 Depth 2
	movw	r0, :lower16:L3psycho_anal.npart_l
	movt	r0, :upper16:L3psycho_anal.npart_l
	ldr	r1, [r11, #-148]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB93_104
@ BB#94:                                @   in Loop: Header=BB93_93 Depth=1
	movw	r0, :lower16:L3psycho_anal.s3ind
	movt	r0, :upper16:L3psycho_anal.s3ind
	movw	r1, #3
	mov	r2, #0
	str	r2, [r11, #-700]
	str	r2, [r11, #-704]
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.s3ind
	movt	r3, :upper16:L3psycho_anal.s3ind
	add	r2, r3, r2, lsl #3
	ldr	r2, [r2]
	str	r2, [r11, #-160]
	str	r0, [r11, #-1268]       @ 4-byte Spill
	str	r1, [r11, #-1272]       @ 4-byte Spill
.LBB93_95:                              @   Parent Loop BB93_93 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	movw	r0, :lower16:L3psycho_anal.s3ind
	movt	r0, :upper16:L3psycho_anal.s3ind
	movw	r1, #3
	ldr	r2, [r11, #-160]
	ldr	r3, [r11, #-148]
	movw	r12, :lower16:L3psycho_anal.s3ind
	movt	r12, :upper16:L3psycho_anal.s3ind
	add	r3, r12, r3, lsl #3
	ldr	r3, [r3, #4]
	cmp	r2, r3
	str	r0, [r11, #-1276]       @ 4-byte Spill
	str	r1, [sp, #1280]         @ 4-byte Spill
	bgt	.LBB93_98
@ BB#96:                                @   in Loop: Header=BB93_95 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-148]
	movw	r2, :lower16:L3psycho_anal.s3_l
	movt	r2, :upper16:L3psycho_anal.s3_l
	add	r1, r2, r1, lsl #9
	ldr	r2, [r11, #-160]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vldr	d17, [r11, #-704]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-704]
	str	r0, [sp, #1276]         @ 4-byte Spill
@ BB#97:                                @   in Loop: Header=BB93_95 Depth=2
	ldr	r0, [r11, #-160]
	add	r0, r0, #1
	str	r0, [r11, #-160]
	b	.LBB93_95
.LBB93_98:                              @   in Loop: Header=BB93_93 Depth=1
	movw	r0, :lower16:L3psycho_anal.s3ind
	movt	r0, :upper16:L3psycho_anal.s3ind
	movw	r1, #3
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.s3ind
	movt	r3, :upper16:L3psycho_anal.s3ind
	add	r2, r3, r2, lsl #3
	ldr	r2, [r2]
	str	r2, [r11, #-160]
	str	r0, [sp, #1272]         @ 4-byte Spill
	str	r1, [sp, #1268]         @ 4-byte Spill
.LBB93_99:                              @   Parent Loop BB93_93 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	movw	r0, :lower16:L3psycho_anal.s3ind
	movt	r0, :upper16:L3psycho_anal.s3ind
	movw	r1, #3
	ldr	r2, [r11, #-160]
	ldr	r3, [r11, #-148]
	movw	r12, :lower16:L3psycho_anal.s3ind
	movt	r12, :upper16:L3psycho_anal.s3ind
	add	r3, r12, r3, lsl #3
	ldr	r3, [r3, #4]
	cmp	r2, r3
	str	r0, [sp, #1264]         @ 4-byte Spill
	str	r1, [sp, #1260]         @ 4-byte Spill
	bgt	.LBB93_102
@ BB#100:                               @   in Loop: Header=BB93_99 Depth=2
	movw	r0, #3
	vldr	d16, .LCPI93_26
	vmov	r1, r2, d16
	str	r0, [sp, #1256]         @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	exp
	vmov	d16, r0, r1
	vldr	d17, [r11, #-704]
	vdiv.f64	d16, d16, d17
	ldr	r0, [r11, #-148]
	movw	r1, :lower16:L3psycho_anal.s3_l
	movt	r1, :upper16:L3psycho_anal.s3_l
	add	r0, r1, r0, lsl #9
	ldr	r1, [r11, #-160]
	add	r0, r0, r1, lsl #3
	vldr	d17, [r0]
	vmul.f64	d16, d17, d16
	vstr	d16, [r0]
@ BB#101:                               @   in Loop: Header=BB93_99 Depth=2
	ldr	r0, [r11, #-160]
	add	r0, r0, #1
	str	r0, [r11, #-160]
	b	.LBB93_99
.LBB93_102:                             @   in Loop: Header=BB93_93 Depth=1
	b	.LBB93_103
.LBB93_103:                             @   in Loop: Header=BB93_93 Depth=1
	ldr	r0, [r11, #-148]
	add	r0, r0, #1
	str	r0, [r11, #-148]
	b	.LBB93_93
.LBB93_104:
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #172]
	cmp	r0, #1
	bne	.LBB93_110
@ BB#105:
	movw	r0, #0
	str	r0, [r11, #-148]
.LBB93_106:                             @ =>This Inner Loop Header: Depth=1
	movw	r0, :lower16:L3psycho_anal.npart_s
	movt	r0, :upper16:L3psycho_anal.npart_s
	ldr	r1, [r11, #-148]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB93_109
@ BB#107:                               @   in Loop: Header=BB93_106 Depth=1
	sub	r0, r11, #680
	movw	r1, #3
	ldr	r2, [r11, #-148]
	sub	r3, r11, #680
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, .LCPI93_27
	vmul.f64	d16, d16, d17
	vmov	r2, r12, d16
	str	r0, [sp, #1252]         @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #1248]         @ 4-byte Spill
	mov	r1, r12
	str	r3, [sp, #1244]         @ 4-byte Spill
	bl	exp
	vmov	d16, r0, r1
	ldr	r0, [r11, #-148]
	ldr	r1, [sp, #1244]         @ 4-byte Reload
	add	r0, r1, r0, lsl #3
	vstr	d16, [r0]
@ BB#108:                               @   in Loop: Header=BB93_106 Depth=1
	ldr	r0, [r11, #-148]
	add	r0, r0, #1
	str	r0, [r11, #-148]
	b	.LBB93_106
.LBB93_109:
	b	.LBB93_110
.LBB93_110:
	movw	r0, #0
	str	r0, [r11, #-148]
.LBB93_111:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB93_113 Depth 2
                                        @     Child Loop BB93_117 Depth 2
	movw	r0, :lower16:L3psycho_anal.npart_s
	movt	r0, :upper16:L3psycho_anal.npart_s
	ldr	r1, [r11, #-148]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB93_124
@ BB#112:                               @   in Loop: Header=BB93_111 Depth=1
	movw	r0, :lower16:L3psycho_anal.s3ind_s
	movt	r0, :upper16:L3psycho_anal.s3ind_s
	movw	r1, #3
	mov	r2, #0
	str	r2, [r11, #-708]
	str	r2, [r11, #-712]
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.s3ind_s
	movt	r3, :upper16:L3psycho_anal.s3ind_s
	add	r2, r3, r2, lsl #3
	ldr	r2, [r2]
	str	r2, [r11, #-160]
	str	r0, [sp, #1240]         @ 4-byte Spill
	str	r1, [sp, #1236]         @ 4-byte Spill
.LBB93_113:                             @   Parent Loop BB93_111 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	movw	r0, :lower16:L3psycho_anal.s3ind_s
	movt	r0, :upper16:L3psycho_anal.s3ind_s
	movw	r1, #3
	ldr	r2, [r11, #-160]
	ldr	r3, [r11, #-148]
	movw	r12, :lower16:L3psycho_anal.s3ind_s
	movt	r12, :upper16:L3psycho_anal.s3ind_s
	add	r3, r12, r3, lsl #3
	ldr	r3, [r3, #4]
	cmp	r2, r3
	str	r0, [sp, #1232]         @ 4-byte Spill
	str	r1, [sp, #1228]         @ 4-byte Spill
	bgt	.LBB93_116
@ BB#114:                               @   in Loop: Header=BB93_113 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-148]
	movw	r2, :lower16:L3psycho_anal.s3_s
	movt	r2, :upper16:L3psycho_anal.s3_s
	add	r1, r2, r1, lsl #9
	ldr	r2, [r11, #-160]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vldr	d17, [r11, #-712]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-712]
	str	r0, [sp, #1224]         @ 4-byte Spill
@ BB#115:                               @   in Loop: Header=BB93_113 Depth=2
	ldr	r0, [r11, #-160]
	add	r0, r0, #1
	str	r0, [r11, #-160]
	b	.LBB93_113
.LBB93_116:                             @   in Loop: Header=BB93_111 Depth=1
	movw	r0, :lower16:L3psycho_anal.s3ind_s
	movt	r0, :upper16:L3psycho_anal.s3ind_s
	movw	r1, #3
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.s3ind_s
	movt	r3, :upper16:L3psycho_anal.s3ind_s
	add	r2, r3, r2, lsl #3
	ldr	r2, [r2]
	str	r2, [r11, #-160]
	str	r0, [sp, #1220]         @ 4-byte Spill
	str	r1, [sp, #1216]         @ 4-byte Spill
.LBB93_117:                             @   Parent Loop BB93_111 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	movw	r0, :lower16:L3psycho_anal.s3ind_s
	movt	r0, :upper16:L3psycho_anal.s3ind_s
	movw	r1, #3
	ldr	r2, [r11, #-160]
	ldr	r3, [r11, #-148]
	movw	r12, :lower16:L3psycho_anal.s3ind_s
	movt	r12, :upper16:L3psycho_anal.s3ind_s
	add	r3, r12, r3, lsl #3
	ldr	r3, [r3, #4]
	cmp	r2, r3
	str	r0, [sp, #1212]         @ 4-byte Spill
	str	r1, [sp, #1208]         @ 4-byte Spill
	bgt	.LBB93_120
@ BB#118:                               @   in Loop: Header=BB93_117 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-148]
	sub	r2, r11, #680
	add	r2, r2, r1, lsl #3
	vldr	d16, [r2]
	vldr	d17, [r11, #-712]
	vdiv.f64	d16, d16, d17
	movw	r2, :lower16:L3psycho_anal.s3_s
	movt	r2, :upper16:L3psycho_anal.s3_s
	add	r1, r2, r1, lsl #9
	ldr	r2, [r11, #-160]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vmul.f64	d16, d17, d16
	vstr	d16, [r1]
	str	r0, [sp, #1204]         @ 4-byte Spill
@ BB#119:                               @   in Loop: Header=BB93_117 Depth=2
	ldr	r0, [r11, #-160]
	add	r0, r0, #1
	str	r0, [r11, #-160]
	b	.LBB93_117
.LBB93_120:                             @   in Loop: Header=BB93_111 Depth=1
	b	.LBB93_121
.LBB93_121:                             @   in Loop: Header=BB93_111 Depth=1
	ldr	r0, [r11, #-148]
	add	r0, r0, #1
	str	r0, [r11, #-148]
	b	.LBB93_111
	.p2align	3
@ BB#122:
.LCPI93_26:
	.long	1202087450              @ double -1.3815510557964275
	.long	3220576981
	.p2align	3
@ BB#123:
.LCPI93_27:
	.long	1602783267              @ double 0.23025850929940458
	.long	1070430492
.LBB93_124:
	bl	init_fft
.LBB93_125:
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #184]
	str	r0, [r11, #-140]
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #32]
	cmp	r0, #1
	bne	.LBB93_127
@ BB#126:
	movw	r0, #4
	str	r0, [r11, #-140]
.LBB93_127:
	movw	r0, #0
	str	r0, [r11, #-144]
.LBB93_128:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB93_133 Depth 2
                                        @     Child Loop BB93_137 Depth 2
                                        @       Child Loop BB93_139 Depth 3
                                        @     Child Loop BB93_147 Depth 2
                                        @     Child Loop BB93_151 Depth 2
                                        @       Child Loop BB93_153 Depth 3
                                        @     Child Loop BB93_160 Depth 2
                                        @     Child Loop BB93_175 Depth 2
                                        @     Child Loop BB93_188 Depth 2
                                        @       Child Loop BB93_190 Depth 3
                                        @     Child Loop BB93_195 Depth 2
                                        @       Child Loop BB93_197 Depth 3
                                        @     Child Loop BB93_203 Depth 2
                                        @       Child Loop BB93_205 Depth 3
                                        @     Child Loop BB93_249 Depth 2
                                        @     Child Loop BB93_274 Depth 2
                                        @       Child Loop BB93_276 Depth 3
                                        @     Child Loop BB93_283 Depth 2
                                        @       Child Loop BB93_285 Depth 3
                                        @         Child Loop BB93_287 Depth 4
                                        @       Child Loop BB93_295 Depth 3
                                        @         Child Loop BB93_297 Depth 4
                                        @       Child Loop BB93_306 Depth 3
                                        @         Child Loop BB93_308 Depth 4
	ldr	r0, [r11, #-144]
	ldr	r1, [r11, #-140]
	cmp	r0, r1
	bge	.LBB93_317
@ BB#129:                               @   in Loop: Header=BB93_128 Depth=1
	movw	r0, :lower16:L3psycho_anal.wsamp_L
	movt	r0, :upper16:L3psycho_anal.wsamp_L
	movw	r1, #12
	ldr	r2, [r11, #-144]
	and	r2, r2, #1
	add	r2, r2, r2, lsl #1
	movw	r3, :lower16:L3psycho_anal.wsamp_S
	movt	r3, :upper16:L3psycho_anal.wsamp_S
	add	r2, r3, r2, lsl #10
	str	r2, [r11, #-84]
	ldr	r2, [r11, #-144]
	and	r2, r2, #1
	movw	r3, :lower16:L3psycho_anal.wsamp_L
	movt	r3, :upper16:L3psycho_anal.wsamp_L
	add	r2, r3, r2, lsl #12
	str	r2, [r11, #-80]
	ldr	r2, [r11, #-144]
	cmp	r2, #2
	str	r0, [sp, #1200]         @ 4-byte Spill
	str	r1, [sp, #1196]         @ 4-byte Spill
	bge	.LBB93_131
@ BB#130:                               @   in Loop: Header=BB93_128 Depth=1
	movw	r0, #488
	movw	r1, :lower16:L3psycho_anal.en
	movt	r1, :upper16:L3psycho_anal.en
	movw	r2, #976
	movw	r3, #1952
	movw	r12, :lower16:L3psycho_anal.thm
	movt	r12, :upper16:L3psycho_anal.thm
	movw	lr, #3
	ldr	r4, [r11, #-80]
	ldr	r5, [r11, #-144]
	ldr	r6, [r11, #-40]
	str	r0, [sp, #1192]         @ 4-byte Spill
	mov	r0, r4
	str	r1, [sp, #1188]         @ 4-byte Spill
	mov	r1, r5
	str	r2, [sp, #1184]         @ 4-byte Spill
	mov	r2, r6
	str	r12, [sp, #1180]        @ 4-byte Spill
	str	lr, [sp, #1176]         @ 4-byte Spill
	str	r3, [sp, #1172]         @ 4-byte Spill
	bl	fft_long
	ldr	r0, [r11, #-84]
	ldr	r1, [r11, #-144]
	ldr	r2, [r11, #-40]
	bl	fft_short
	ldr	r0, [r11, #-144]
	movw	r1, :lower16:L3psycho_anal.pe
	movt	r1, :upper16:L3psycho_anal.pe
	add	r1, r1, r0, lsl #3
	vldr	d16, [r1]
	ldr	r1, [r11, #-68]
	add	r0, r1, r0, lsl #3
	vstr	d16, [r0]
	ldr	r0, [r11, #-60]
	ldr	r1, [r11, #-44]
	ldr	r2, [sp, #1172]         @ 4-byte Reload
	mul	r1, r1, r2
	add	r0, r0, r1
	ldr	r1, [r11, #-144]
	ldr	r3, [sp, #1184]         @ 4-byte Reload
	mul	r1, r1, r3
	add	r0, r0, r1
	ldr	r1, [r11, #-144]
	ldr	r12, [sp, #1192]        @ 4-byte Reload
	mul	r1, r1, r12
	ldr	lr, [sp, #1180]         @ 4-byte Reload
	add	r1, lr, r1
	mov	r2, r12
	bl	memcpy
	ldr	r0, [r11, #-60]
	ldr	r1, [r11, #-44]
	ldr	r2, [sp, #1172]         @ 4-byte Reload
	mul	r1, r1, r2
	add	r0, r0, r1
	ldr	r1, [r11, #-144]
	ldr	r3, [sp, #1184]         @ 4-byte Reload
	mul	r1, r1, r3
	add	r0, r0, r1
	add	r0, r0, #488
	ldr	r1, [r11, #-144]
	ldr	r12, [sp, #1192]        @ 4-byte Reload
	mul	r1, r1, r12
	ldr	lr, [sp, #1188]         @ 4-byte Reload
	add	r1, lr, r1
	mov	r2, r12
	bl	memcpy
	b	.LBB93_146
.LBB93_131:                             @   in Loop: Header=BB93_128 Depth=1
	movw	r0, #488
	movw	r1, :lower16:L3psycho_anal.thm
	movt	r1, :upper16:L3psycho_anal.thm
	movw	r2, #976
	movw	r3, #1952
	movw	r12, :lower16:L3psycho_anal.en
	movt	r12, :upper16:L3psycho_anal.en
	movw	lr, #3
	ldr	r4, [r11, #-144]
	movw	r5, :lower16:L3psycho_anal.pe
	movt	r5, :upper16:L3psycho_anal.pe
	add	r5, r5, r4, lsl #3
	vldr	d16, [r5]
	ldr	r5, [r11, #-72]
	sub	r4, r4, #2
	add	r4, r5, r4, lsl #3
	vstr	d16, [r4]
	ldr	r4, [r11, #-64]
	ldr	r5, [r11, #-44]
	mul	r5, r5, r3
	add	r4, r4, r5
	ldr	r5, [r11, #-144]
	sub	r5, r5, #2
	mul	r5, r5, r2
	add	r4, r4, r5
	add	r4, r4, #488
	ldr	r5, [r11, #-144]
	mul	r5, r5, r0
	add	r12, r12, r5
	str	r0, [sp, #1168]         @ 4-byte Spill
	mov	r0, r4
	str	r1, [sp, #1164]         @ 4-byte Spill
	mov	r1, r12
	ldr	r12, [sp, #1168]        @ 4-byte Reload
	str	r2, [sp, #1160]         @ 4-byte Spill
	mov	r2, r12
	str	lr, [sp, #1156]         @ 4-byte Spill
	str	r3, [sp, #1152]         @ 4-byte Spill
	bl	memcpy
	ldr	r0, [r11, #-64]
	ldr	r1, [r11, #-44]
	ldr	r2, [sp, #1152]         @ 4-byte Reload
	mul	r1, r1, r2
	add	r0, r0, r1
	ldr	r1, [r11, #-144]
	sub	r1, r1, #2
	ldr	r3, [sp, #1160]         @ 4-byte Reload
	mul	r1, r1, r3
	add	r0, r0, r1
	ldr	r1, [r11, #-144]
	ldr	r12, [sp, #1168]        @ 4-byte Reload
	mul	r1, r1, r12
	ldr	lr, [sp, #1164]         @ 4-byte Reload
	add	r1, lr, r1
	mov	r2, r12
	bl	memcpy
	ldr	r0, [r11, #-144]
	cmp	r0, #2
	bne	.LBB93_145
@ BB#132:                               @   in Loop: Header=BB93_128 Depth=1
	movw	r0, #1023
	str	r0, [r11, #-156]
.LBB93_133:                             @   Parent Loop BB93_128 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-156]
	cmp	r0, #0
	blt	.LBB93_136
@ BB#134:                               @   in Loop: Header=BB93_133 Depth=2
	movw	r0, :lower16:L3psycho_anal.wsamp_L
	movt	r0, :upper16:L3psycho_anal.wsamp_L
	add	r0, r0, #4096
	movw	r1, #2
	ldr	r2, [r11, #-156]
	movw	r3, :lower16:L3psycho_anal.wsamp_L
	movt	r3, :upper16:L3psycho_anal.wsamp_L
	add	r2, r3, r2, lsl #2
	vldr	s0, [r2]
	vstr	s0, [r11, #-716]
	ldr	r2, [r11, #-156]
	add	r12, r3, #4096
	add	r2, r12, r2, lsl #2
	vldr	s0, [r2]
	vstr	s0, [r11, #-720]
	vldr	s2, [r11, #-716]
	vadd.f32	s0, s2, s0
	vldr	s2, .LCPI93_28
	vmul.f32	s0, s0, s2
	ldr	r2, [r11, #-156]
	add	r2, r3, r2, lsl #2
	vstr	s0, [r2]
	vldr	s0, [r11, #-716]
	vldr	s4, [r11, #-720]
	vsub.f32	s0, s0, s4
	vmul.f32	s0, s0, s2
	ldr	r2, [r11, #-156]
	add	r2, r12, r2, lsl #2
	vstr	s0, [r2]
	str	r0, [sp, #1148]         @ 4-byte Spill
	str	r1, [sp, #1144]         @ 4-byte Spill
@ BB#135:                               @   in Loop: Header=BB93_133 Depth=2
	mvn	r0, #0
	ldr	r1, [r11, #-156]
	add	r0, r1, r0
	str	r0, [r11, #-156]
	b	.LBB93_133
.LBB93_136:                             @   in Loop: Header=BB93_128 Depth=1
	movw	r0, #2
	str	r0, [r11, #-148]
.LBB93_137:                             @   Parent Loop BB93_128 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB93_139 Depth 3
	ldr	r0, [r11, #-148]
	cmp	r0, #0
	blt	.LBB93_144
@ BB#138:                               @   in Loop: Header=BB93_137 Depth=2
	movw	r0, #255
	str	r0, [r11, #-156]
.LBB93_139:                             @   Parent Loop BB93_128 Depth=1
                                        @     Parent Loop BB93_137 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-156]
	cmp	r0, #0
	blt	.LBB93_142
@ BB#140:                               @   in Loop: Header=BB93_139 Depth=3
	movw	r0, #2
	ldr	r1, [r11, #-148]
	movw	r2, :lower16:L3psycho_anal.wsamp_S
	movt	r2, :upper16:L3psycho_anal.wsamp_S
	add	r1, r2, r1, lsl #10
	ldr	r3, [r11, #-156]
	add	r1, r1, r3, lsl #2
	vldr	s0, [r1]
	vstr	s0, [r11, #-724]
	ldr	r1, [r11, #-148]
	add	r3, r2, #3072
	add	r1, r3, r1, lsl #10
	ldr	r12, [r11, #-156]
	add	r1, r1, r12, lsl #2
	vldr	s0, [r1]
	vstr	s0, [r11, #-728]
	vldr	s2, [r11, #-724]
	vadd.f32	s0, s2, s0
	vldr	s2, .LCPI93_28
	vmul.f32	s0, s0, s2
	ldr	r1, [r11, #-148]
	add	r1, r2, r1, lsl #10
	ldr	r2, [r11, #-156]
	add	r1, r1, r2, lsl #2
	vstr	s0, [r1]
	vldr	s0, [r11, #-724]
	vldr	s4, [r11, #-728]
	vsub.f32	s0, s0, s4
	vmul.f32	s0, s0, s2
	ldr	r1, [r11, #-148]
	add	r1, r3, r1, lsl #10
	ldr	r2, [r11, #-156]
	add	r1, r1, r2, lsl #2
	vstr	s0, [r1]
	str	r0, [sp, #1140]         @ 4-byte Spill
@ BB#141:                               @   in Loop: Header=BB93_139 Depth=3
	mvn	r0, #0
	ldr	r1, [r11, #-156]
	add	r0, r1, r0
	str	r0, [r11, #-156]
	b	.LBB93_139
.LBB93_142:                             @   in Loop: Header=BB93_137 Depth=2
	b	.LBB93_143
.LBB93_143:                             @   in Loop: Header=BB93_137 Depth=2
	mvn	r0, #0
	ldr	r1, [r11, #-148]
	add	r0, r1, r0
	str	r0, [r11, #-148]
	b	.LBB93_137
.LBB93_144:                             @   in Loop: Header=BB93_128 Depth=1
	b	.LBB93_145
.LBB93_145:                             @   in Loop: Header=BB93_128 Depth=1
	b	.LBB93_146
.LBB93_146:                             @   in Loop: Header=BB93_128 Depth=1
	movw	r0, #511
	sub	r1, r11, #100
	movw	r2, #2
	ldr	r3, [r11, #-80]
	vldr	s0, [r3]
	movw	r3, :lower16:L3psycho_anal.energy
	movt	r3, :upper16:L3psycho_anal.energy
	vstr	s0, [r3]
	vmul.f32	s0, s0, s0
	vstr	s0, [r3]
	ldr	r3, [r11, #-144]
	sub	r12, r11, #100
	add	r3, r12, r3, lsl #2
	vstr	s0, [r3]
	str	r0, [r11, #-156]
	str	r2, [sp, #1136]         @ 4-byte Spill
	str	r1, [sp, #1132]         @ 4-byte Spill
.LBB93_147:                             @   Parent Loop BB93_128 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-156]
	cmp	r0, #0
	blt	.LBB93_150
@ BB#148:                               @   in Loop: Header=BB93_147 Depth=2
	sub	r0, r11, #100
	movw	r1, #2
	ldr	r2, [r11, #-80]
	ldr	r3, [r11, #-156]
	rsb	r3, r3, #512
	add	r2, r2, r3, lsl #2
	vldr	s0, [r2]
	vstr	s0, [r11, #-732]
	ldr	r2, [r11, #-80]
	ldr	r3, [r11, #-156]
	add	r2, r2, r3, lsl #2
	add	r2, r2, #2048
	vldr	s0, [r2]
	vstr	s0, [r11, #-736]
	vldr	s2, [r11, #-732]
	vmul.f32	s2, s2, s2
	vmul.f32	s0, s0, s0
	vadd.f32	s0, s2, s0
	vmov.f32	s2, #5.000000e-01
	vmul.f32	s0, s0, s2
	ldr	r2, [r11, #-156]
	rsb	r2, r2, #512
	movw	r3, :lower16:L3psycho_anal.energy
	movt	r3, :upper16:L3psycho_anal.energy
	add	r2, r3, r2, lsl #2
	vstr	s0, [r2]
	ldr	r2, [r11, #-156]
	rsb	r2, r2, #512
	add	r2, r3, r2, lsl #2
	vldr	s0, [r2]
	ldr	r2, [r11, #-144]
	sub	r3, r11, #100
	add	r2, r3, r2, lsl #2
	vldr	s2, [r2]
	vadd.f32	s0, s2, s0
	vstr	s0, [r2]
	str	r0, [sp, #1128]         @ 4-byte Spill
	str	r1, [sp, #1124]         @ 4-byte Spill
@ BB#149:                               @   in Loop: Header=BB93_147 Depth=2
	mvn	r0, #0
	ldr	r1, [r11, #-156]
	add	r0, r1, r0
	str	r0, [r11, #-156]
	b	.LBB93_147
.LBB93_150:                             @   in Loop: Header=BB93_128 Depth=1
	movw	r0, #2
	str	r0, [r11, #-148]
.LBB93_151:                             @   Parent Loop BB93_128 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB93_153 Depth 3
	ldr	r0, [r11, #-148]
	cmp	r0, #0
	blt	.LBB93_159
@ BB#152:                               @   in Loop: Header=BB93_151 Depth=2
	movw	r0, #127
	movw	r1, :lower16:L3psycho_anal.energy_s
	movt	r1, :upper16:L3psycho_anal.energy_s
	movw	r2, #516
	movw	r3, #10
	ldr	r12, [r11, #-84]
	ldr	lr, [r11, #-148]
	add	r12, r12, lr, lsl #10
	vldr	s0, [r12]
	ldr	r12, [r11, #-148]
	mul	r12, r12, r2
	add	r12, r1, r12
	vstr	s0, [r12]
	ldr	r12, [r11, #-148]
	mul	r12, r12, r2
	add	r12, r1, r12
	vldr	s0, [r12]
	ldr	r12, [r11, #-148]
	mul	r2, r12, r2
	add	r1, r1, r2
	vldr	s2, [r1]
	vmul.f32	s0, s2, s0
	vstr	s0, [r1]
	str	r0, [r11, #-156]
	str	r3, [sp, #1120]         @ 4-byte Spill
.LBB93_153:                             @   Parent Loop BB93_128 Depth=1
                                        @     Parent Loop BB93_151 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-156]
	cmp	r0, #0
	blt	.LBB93_156
@ BB#154:                               @   in Loop: Header=BB93_153 Depth=3
	movw	r0, #2
	ldr	r1, [r11, #-84]
	ldr	r2, [r11, #-148]
	add	r1, r1, r2, lsl #10
	ldr	r2, [r11, #-156]
	rsb	r2, r2, #128
	add	r1, r1, r2, lsl #2
	vldr	s0, [r1]
	vstr	s0, [r11, #-740]
	ldr	r1, [r11, #-84]
	ldr	r2, [r11, #-148]
	add	r1, r1, r2, lsl #10
	ldr	r2, [r11, #-156]
	add	r1, r1, r2, lsl #2
	vldr	s0, [r1, #512]
	vstr	s0, [r11, #-744]
	vldr	s2, [r11, #-740]
	vmul.f32	s2, s2, s2
	vmul.f32	s0, s0, s0
	vadd.f32	s0, s2, s0
	vmov.f32	s2, #5.000000e-01
	vmul.f32	s0, s0, s2
	ldr	r1, [r11, #-148]
	add	r1, r1, r1, lsl #7
	movw	r2, :lower16:L3psycho_anal.energy_s
	movt	r2, :upper16:L3psycho_anal.energy_s
	add	r1, r2, r1, lsl #2
	ldr	r2, [r11, #-156]
	rsb	r2, r2, #128
	add	r1, r1, r2, lsl #2
	vstr	s0, [r1]
	str	r0, [sp, #1116]         @ 4-byte Spill
@ BB#155:                               @   in Loop: Header=BB93_153 Depth=3
	mvn	r0, #0
	ldr	r1, [r11, #-156]
	add	r0, r1, r0
	str	r0, [r11, #-156]
	b	.LBB93_153
.LBB93_156:                             @   in Loop: Header=BB93_151 Depth=2
	b	.LBB93_157
.LBB93_157:                             @   in Loop: Header=BB93_151 Depth=2
	mvn	r0, #0
	ldr	r1, [r11, #-148]
	add	r0, r1, r0
	str	r0, [r11, #-148]
	b	.LBB93_151
	.p2align	2
@ BB#158:
.LCPI93_28:
	.long	1060439283              @ float 0.707106769
.LBB93_159:                             @   in Loop: Header=BB93_128 Depth=1
	movw	r0, #0
	str	r0, [r11, #-156]
.LBB93_160:                             @   Parent Loop BB93_128 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	movw	r0, :lower16:L3psycho_anal.cw_lower_index
	movt	r0, :upper16:L3psycho_anal.cw_lower_index
	ldr	r1, [r11, #-156]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB93_174
@ BB#161:                               @   in Loop: Header=BB93_160 Depth=2
	movw	r0, #2
	ldr	r1, [r11, #-144]
	add	r1, r1, r1, lsl #9
	movw	r2, :lower16:L3psycho_anal.ax_sav
	movt	r2, :upper16:L3psycho_anal.ax_sav
	add	r1, r2, r1, lsl #3
	ldr	r3, [r11, #-156]
	add	r1, r1, r3, lsl #2
	movw	r3, #2052
	add	r1, r1, r3
	vldr	s0, [r1]
	vstr	s0, [r11, #-756]
	ldr	r1, [r11, #-144]
	add	r1, r1, r1, lsl #9
	movw	r12, :lower16:L3psycho_anal.bx_sav
	movt	r12, :upper16:L3psycho_anal.bx_sav
	add	r1, r12, r1, lsl #3
	ldr	lr, [r11, #-156]
	add	r1, r1, lr, lsl #2
	add	r1, r1, r3
	vldr	s0, [r1]
	vstr	s0, [r11, #-768]
	ldr	r1, [r11, #-144]
	add	r1, r1, r1, lsl #9
	movw	lr, :lower16:L3psycho_anal.rx_sav
	movt	lr, :upper16:L3psycho_anal.rx_sav
	add	r1, lr, r1, lsl #3
	ldr	r4, [r11, #-156]
	add	r1, r1, r4, lsl #2
	add	r1, r1, r3
	vldr	s0, [r1]
	vstr	s0, [r11, #-780]
	ldr	r1, [r11, #-144]
	add	r1, r1, r1, lsl #9
	add	r1, r2, r1, lsl #3
	ldr	r4, [r11, #-156]
	add	r1, r1, r4, lsl #2
	vldr	s0, [r1]
	add	r1, r1, r3
	vstr	s0, [r1]
	vstr	s0, [r11, #-752]
	ldr	r1, [r11, #-144]
	add	r1, r1, r1, lsl #9
	add	r1, r12, r1, lsl #3
	ldr	r12, [r11, #-156]
	add	r1, r1, r12, lsl #2
	vldr	s0, [r1]
	add	r1, r1, r3
	vstr	s0, [r1]
	vstr	s0, [r11, #-764]
	ldr	r1, [r11, #-144]
	add	r1, r1, r1, lsl #9
	add	r1, lr, r1, lsl #3
	ldr	r12, [r11, #-156]
	add	r1, r1, r12, lsl #2
	vldr	s0, [r1]
	add	r1, r1, r3
	vstr	s0, [r1]
	vstr	s0, [r11, #-776]
	ldr	r1, [r11, #-80]
	ldr	r3, [r11, #-156]
	add	r1, r1, r3, lsl #2
	vldr	s0, [r1]
	ldr	r1, [r11, #-144]
	add	r1, r1, r1, lsl #9
	add	r1, r2, r1, lsl #3
	add	r1, r1, r3, lsl #2
	vstr	s0, [r1]
	vstr	s0, [r11, #-748]
	ldr	r1, [r11, #-156]
	cmp	r1, #0
	str	r0, [sp, #1112]         @ 4-byte Spill
	bne	.LBB93_163
@ BB#162:                               @   in Loop: Header=BB93_160 Depth=2
	ldr	r0, [r11, #-80]
	vldr	s0, [r0]
	add	lr, sp, #1024
	vstr	s0, [lr, #84]           @ 4-byte Spill
	b	.LBB93_164
.LBB93_163:                             @   in Loop: Header=BB93_160 Depth=2
	movw	r0, #2
	ldr	r1, [r11, #-80]
	ldr	r2, [r11, #-156]
	rsb	r2, r2, #1024
	add	r1, r1, r2, lsl #2
	vldr	s0, [r1]
	str	r0, [sp, #1104]         @ 4-byte Spill
	add	lr, sp, #1024
	vstr	s0, [lr, #84]           @ 4-byte Spill
.LBB93_164:                             @   in Loop: Header=BB93_160 Depth=2
	add	r4, sp, #1024
	vldr	s0, [r4, #84]           @ 4-byte Reload
	movw	r0, #2
	ldr	r1, [r11, #-144]
	add	r1, r1, r1, lsl #9
	movw	r2, :lower16:L3psycho_anal.bx_sav
	movt	r2, :upper16:L3psycho_anal.bx_sav
	add	r1, r2, r1, lsl #3
	ldr	r2, [r11, #-156]
	add	r1, r1, r2, lsl #2
	vstr	s0, [r1]
	vstr	s0, [r11, #-760]
	ldr	r1, [r11, #-156]
	movw	r2, :lower16:L3psycho_anal.energy
	movt	r2, :upper16:L3psycho_anal.energy
	add	r1, r2, r1, lsl #2
	vldr	s0, [r1]
	vcvt.f64.f32	d16, s0
	vmov	r1, r2, d16
	str	r0, [sp, #1100]         @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	sqrt
	vmov	d16, r0, r1
	vcvt.f32.f64	s0, d16
	ldr	r0, [r11, #-144]
	add	r0, r0, r0, lsl #9
	movw	r1, :lower16:L3psycho_anal.rx_sav
	movt	r1, :upper16:L3psycho_anal.rx_sav
	add	r0, r1, r0, lsl #3
	ldr	r1, [r11, #-156]
	add	r0, r0, r1, lsl #2
	vstr	s0, [r0]
	vstr	s0, [r11, #-772]
	vldr	s0, [r11, #-776]
	vcmpe.f32	s0, #0
	vmrs	APSR_nzcv, fpscr
	beq	.LBB93_166
@ BB#165:                               @   in Loop: Header=BB93_160 Depth=2
	vmov.f32	s0, #5.000000e-01
	vldr	s2, [r11, #-752]
	vldr	s4, [r11, #-764]
	vmul.f32	s2, s2, s4
	vstr	s2, [r11, #-784]
	vldr	s2, [r11, #-752]
	vldr	s4, [r11, #-752]
	vmul.f32	s2, s2, s4
	vldr	s4, [r11, #-764]
	vldr	s6, [r11, #-764]
	vmul.f32	s4, s4, s6
	vsub.f32	s2, s2, s4
	vmul.f32	s0, s2, s0
	vstr	s0, [r11, #-788]
	vldr	s0, [r11, #-776]
	vldr	s2, [r11, #-776]
	vmul.f32	s0, s0, s2
	vstr	s0, [r11, #-792]
	b	.LBB93_167
.LBB93_166:                             @   in Loop: Header=BB93_160 Depth=2
	vmov.f32	s0, #1.000000e+00
	vldr	s2, .LCPI93_29
	vstr	s0, [r11, #-784]
	vstr	s2, [r11, #-788]
	vstr	s0, [r11, #-792]
.LBB93_167:                             @   in Loop: Header=BB93_160 Depth=2
	vldr	s0, [r11, #-780]
	vcmpe.f32	s0, #0
	vmrs	APSR_nzcv, fpscr
	beq	.LBB93_169
@ BB#168:                               @   in Loop: Header=BB93_160 Depth=2
	vmov.f32	s0, #5.000000e-01
	vldr	s2, [r11, #-788]
	vldr	s4, [r11, #-784]
	vadd.f32	s2, s2, s4
	vldr	s4, [r11, #-756]
	vldr	s6, [r11, #-768]
	vadd.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vmul.f32	s0, s2, s0
	vstr	s0, [r11, #-796]
	vldr	s0, [r11, #-756]
	vneg.f32	s0, s0
	vldr	s2, [r11, #-784]
	vmul.f32	s0, s0, s2
	vldr	s2, [r11, #-796]
	vadd.f32	s0, s0, s2
	vstr	s0, [r11, #-800]
	vldr	s0, [r11, #-768]
	vneg.f32	s0, s0
	vldr	s2, [r11, #-788]
	vmul.f32	s0, s0, s2
	vldr	s2, [r11, #-796]
	vadd.f32	s0, s0, s2
	vstr	s0, [r11, #-784]
	vldr	s0, [r11, #-800]
	vstr	s0, [r11, #-788]
	vldr	s0, [r11, #-780]
	vldr	s2, [r11, #-792]
	vmul.f32	s0, s2, s0
	vstr	s0, [r11, #-792]
	b	.LBB93_170
.LBB93_169:                             @   in Loop: Header=BB93_160 Depth=2
	b	.LBB93_170
.LBB93_170:                             @   in Loop: Header=BB93_160 Depth=2
	vmov.f32	s0, #2.000000e+00
	vldr	s2, [r11, #-776]
	vmul.f32	s2, s0, s2
	vldr	s4, [r11, #-780]
	vsub.f32	s2, s2, s4
	vldr	s4, [r11, #-792]
	vdiv.f32	s2, s2, s4
	vstr	s2, [r11, #-804]
	vldr	s2, [r11, #-804]
	vldr	s4, [r11, #-784]
	vmul.f32	s2, s4, s2
	vstr	s2, [r11, #-784]
	vldr	s2, [r11, #-804]
	vldr	s4, [r11, #-788]
	vmul.f32	s2, s4, s2
	vstr	s2, [r11, #-788]
	vldr	s2, [r11, #-772]
	vcvt.f64.f32	d16, s2
	vldr	s2, [r11, #-776]
	vmul.f32	s0, s0, s2
	vldr	s2, [r11, #-780]
	vsub.f32	s0, s0, s2
	vcvt.f64.f32	d17, s0
	vabs.f64	d17, d17
	vadd.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	vstr	s0, [r11, #-792]
	vldr	s0, [r11, #-792]
	vcmpe.f32	s0, #0
	vmrs	APSR_nzcv, fpscr
	beq	.LBB93_172
@ BB#171:                               @   in Loop: Header=BB93_160 Depth=2
	vmov.f32	s0, #5.000000e-01
	vldr	s2, [r11, #-748]
	vldr	s4, [r11, #-760]
	vadd.f32	s2, s2, s4
	vmul.f32	s2, s2, s0
	vldr	s4, [r11, #-784]
	vsub.f32	s2, s2, s4
	vstr	s2, [r11, #-784]
	vldr	s2, [r11, #-748]
	vldr	s4, [r11, #-760]
	vsub.f32	s2, s2, s4
	vmul.f32	s0, s2, s0
	vldr	s2, [r11, #-788]
	vsub.f32	s0, s0, s2
	vstr	s0, [r11, #-788]
	vldr	s0, [r11, #-784]
	vldr	s2, [r11, #-784]
	vmul.f32	s0, s0, s2
	vldr	s2, [r11, #-788]
	vldr	s4, [r11, #-788]
	vmul.f32	s2, s2, s4
	vadd.f32	s0, s0, s2
	vcvt.f64.f32	d16, s0
	vmov	r0, r1, d16
	bl	sqrt
	vmov	d16, r0, r1
	vldr	s0, [r11, #-792]
	vcvt.f64.f32	d17, s0
	vdiv.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	vstr	s0, [r11, #-792]
.LBB93_172:                             @   in Loop: Header=BB93_160 Depth=2
	movw	r0, :lower16:L3psycho_anal.cw
	movt	r0, :upper16:L3psycho_anal.cw
	movw	r1, #2
	vldr	s0, [r11, #-792]
	ldr	r2, [r11, #-156]
	movw	r3, :lower16:L3psycho_anal.cw
	movt	r3, :upper16:L3psycho_anal.cw
	add	r2, r3, r2, lsl #2
	vstr	s0, [r2]
	str	r0, [sp, #1096]         @ 4-byte Spill
	str	r1, [sp, #1092]         @ 4-byte Spill
@ BB#173:                               @   in Loop: Header=BB93_160 Depth=2
	ldr	r0, [r11, #-156]
	add	r0, r0, #1
	str	r0, [r11, #-156]
	b	.LBB93_160
.LBB93_174:                             @   in Loop: Header=BB93_128 Depth=1
	movw	r0, :lower16:L3psycho_anal.cw_lower_index
	movt	r0, :upper16:L3psycho_anal.cw_lower_index
	ldr	r0, [r0]
	str	r0, [r11, #-156]
.LBB93_175:                             @   Parent Loop BB93_128 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	movw	r0, :lower16:L3psycho_anal.cw_upper_index
	movt	r0, :upper16:L3psycho_anal.cw_upper_index
	ldr	r1, [r11, #-156]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB93_187
@ BB#176:                               @   in Loop: Header=BB93_175 Depth=2
	movw	r0, :lower16:L3psycho_anal.energy_s
	movt	r0, :upper16:L3psycho_anal.energy_s
	movw	r1, #2
	ldr	r2, [r11, #-156]
	add	r2, r2, #2
	asr	r3, r2, #31
	add	r2, r2, r3, lsr #30
	asr	r3, r2, #2
	str	r3, [r11, #-160]
	bfc	r2, #0, #2
	movw	r3, :lower16:L3psycho_anal.energy_s
	movt	r3, :upper16:L3psycho_anal.energy_s
	add	r2, r3, r2
	vldr	s0, [r2]
	vstr	s0, [r11, #-812]
	vldr	s0, [r11, #-812]
	vcmpe.f32	s0, #0
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #1088]         @ 4-byte Spill
	str	r1, [sp, #1084]         @ 4-byte Spill
	beq	.LBB93_179
@ BB#177:                               @   in Loop: Header=BB93_175 Depth=2
	vmov.f32	s0, #5.000000e-01
	movw	r0, #2
	ldr	r1, [r11, #-84]
	ldr	r2, [r11, #-160]
	add	r1, r1, r2, lsl #2
	vldr	s2, [r1]
	vstr	s2, [r11, #-832]
	ldr	r1, [r11, #-84]
	ldr	r2, [r11, #-160]
	rsb	r2, r2, #256
	add	r1, r1, r2, lsl #2
	vldr	s2, [r1]
	vstr	s2, [r11, #-836]
	vldr	s2, [r11, #-832]
	vldr	s4, [r11, #-836]
	vmul.f32	s2, s2, s4
	vstr	s2, [r11, #-820]
	vldr	s2, [r11, #-832]
	vldr	s4, [r11, #-832]
	vmul.f32	s2, s2, s4
	vldr	s4, [r11, #-836]
	vldr	s6, [r11, #-836]
	vmul.f32	s4, s4, s6
	vsub.f32	s2, s2, s4
	vmul.f32	s0, s2, s0
	vstr	s0, [r11, #-824]
	vldr	s0, [r11, #-812]
	vstr	s0, [r11, #-828]
	vldr	s0, [r11, #-812]
	vcvt.f64.f32	d16, s0
	vmov	r1, r2, d16
	str	r0, [sp, #1080]         @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	sqrt
	vmov	d16, r0, r1
	vcvt.f32.f64	s0, d16
	vstr	s0, [r11, #-812]
	b	.LBB93_180
	.p2align	2
@ BB#178:
.LCPI93_29:
	.long	0                       @ float 0
.LBB93_179:                             @   in Loop: Header=BB93_175 Depth=2
	vmov.f32	s0, #1.000000e+00
	vldr	s2, .LCPI93_29
	vstr	s0, [r11, #-820]
	vstr	s2, [r11, #-824]
	vstr	s0, [r11, #-828]
.LBB93_180:                             @   in Loop: Header=BB93_175 Depth=2
	movw	r0, :lower16:L3psycho_anal.energy_s
	movt	r0, :upper16:L3psycho_anal.energy_s
	movw	r1, #1032
	add	r0, r0, r1
	movw	r1, #2
	ldr	r2, [r11, #-160]
	movw	r3, :lower16:L3psycho_anal.energy_s
	movt	r3, :upper16:L3psycho_anal.energy_s
	add	r2, r3, r2, lsl #2
	movw	r3, #1032
	add	r2, r2, r3
	vldr	s0, [r2]
	vstr	s0, [r11, #-816]
	vldr	s0, [r11, #-816]
	vcmpe.f32	s0, #0
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #1076]         @ 4-byte Spill
	str	r1, [sp, #1072]         @ 4-byte Spill
	beq	.LBB93_182
@ BB#181:                               @   in Loop: Header=BB93_175 Depth=2
	vmov.f32	s0, #5.000000e-01
	movw	r0, #2
	ldr	r1, [r11, #-84]
	ldr	r2, [r11, #-160]
	add	r1, r1, r2, lsl #2
	add	r1, r1, #2048
	vldr	s2, [r1]
	vstr	s2, [r11, #-840]
	ldr	r1, [r11, #-84]
	add	r1, r1, #2048
	ldr	r2, [r11, #-160]
	rsb	r2, r2, #256
	add	r1, r1, r2, lsl #2
	vldr	s2, [r1]
	vstr	s2, [r11, #-844]
	vldr	s2, [r11, #-824]
	vldr	s4, [r11, #-820]
	vadd.f32	s2, s2, s4
	vldr	s4, [r11, #-840]
	vldr	s6, [r11, #-844]
	vadd.f32	s4, s4, s6
	vmul.f32	s2, s2, s4
	vmul.f32	s0, s2, s0
	vstr	s0, [r11, #-848]
	vldr	s0, [r11, #-840]
	vneg.f32	s0, s0
	vldr	s2, [r11, #-820]
	vmul.f32	s0, s0, s2
	vldr	s2, [r11, #-848]
	vadd.f32	s0, s0, s2
	vstr	s0, [r11, #-852]
	vldr	s0, [r11, #-844]
	vneg.f32	s0, s0
	vldr	s2, [r11, #-824]
	vmul.f32	s0, s0, s2
	vldr	s2, [r11, #-848]
	vadd.f32	s0, s0, s2
	vstr	s0, [r11, #-820]
	vldr	s0, [r11, #-852]
	vstr	s0, [r11, #-824]
	vldr	s0, [r11, #-816]
	vcvt.f64.f32	d16, s0
	vmov	r1, r2, d16
	str	r0, [sp, #1068]         @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	sqrt
	vmov	d16, r0, r1
	vcvt.f32.f64	s0, d16
	vstr	s0, [r11, #-816]
	vldr	s0, [r11, #-816]
	vldr	s2, [r11, #-828]
	vmul.f32	s0, s2, s0
	vstr	s0, [r11, #-828]
	b	.LBB93_183
.LBB93_182:                             @   in Loop: Header=BB93_175 Depth=2
	b	.LBB93_183
.LBB93_183:                             @   in Loop: Header=BB93_175 Depth=2
	vmov.f32	s0, #2.000000e+00
	movw	r0, :lower16:L3psycho_anal.energy_s
	movt	r0, :upper16:L3psycho_anal.energy_s
	add	r0, r0, #516
	movw	r1, #2
	vldr	s2, [r11, #-812]
	vadd.f32	s2, s2, s2
	vldr	s4, [r11, #-816]
	vsub.f32	s2, s2, s4
	vldr	s4, [r11, #-828]
	vdiv.f32	s2, s2, s4
	vstr	s2, [r11, #-856]
	vldr	s4, [r11, #-820]
	vmul.f32	s2, s4, s2
	vstr	s2, [r11, #-820]
	vldr	s2, [r11, #-856]
	vldr	s4, [r11, #-824]
	vmul.f32	s2, s4, s2
	vstr	s2, [r11, #-824]
	ldr	r2, [r11, #-160]
	movw	r3, :lower16:L3psycho_anal.energy_s
	movt	r3, :upper16:L3psycho_anal.energy_s
	add	r2, r3, r2, lsl #2
	add	r2, r2, #516
	vldr	s2, [r2]
	vcvt.f64.f32	d16, s2
	vmov	r2, r3, d16
	str	r0, [sp, #1064]         @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #1060]         @ 4-byte Spill
	mov	r1, r3
	add	r4, sp, #1024
	vstr	s0, [r4, #32]           @ 4-byte Spill
	bl	sqrt
	vmov	d16, r0, r1
	vcvt.f32.f64	s0, d16
	vstr	s0, [r11, #-808]
	vldr	s0, [r11, #-808]
	vcvt.f64.f32	d16, s0
	vldr	s0, [r11, #-812]
	add	lr, sp, #1024
	vldr	s2, [lr, #32]           @ 4-byte Reload
	vmul.f32	s0, s2, s0
	vldr	s4, [r11, #-816]
	vsub.f32	s0, s0, s4
	vcvt.f64.f32	d17, s0
	vabs.f64	d17, d17
	vadd.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	vstr	s0, [r11, #-828]
	vldr	s0, [r11, #-828]
	vcmpe.f32	s0, #0
	vmrs	APSR_nzcv, fpscr
	beq	.LBB93_185
@ BB#184:                               @   in Loop: Header=BB93_175 Depth=2
	vmov.f32	s0, #5.000000e-01
	movw	r0, #2
	ldr	r1, [r11, #-84]
	ldr	r2, [r11, #-160]
	add	r1, r1, r2, lsl #2
	add	r1, r1, #1024
	vldr	s2, [r1]
	vstr	s2, [r11, #-860]
	ldr	r1, [r11, #-84]
	add	r1, r1, #1024
	ldr	r2, [r11, #-160]
	rsb	r2, r2, #256
	add	r1, r1, r2, lsl #2
	vldr	s2, [r1]
	vstr	s2, [r11, #-864]
	vldr	s2, [r11, #-860]
	vldr	s4, [r11, #-864]
	vadd.f32	s2, s2, s4
	vmul.f32	s2, s2, s0
	vldr	s4, [r11, #-820]
	vsub.f32	s2, s2, s4
	vstr	s2, [r11, #-820]
	vldr	s2, [r11, #-860]
	vldr	s4, [r11, #-864]
	vsub.f32	s2, s2, s4
	vmul.f32	s0, s2, s0
	vldr	s2, [r11, #-824]
	vsub.f32	s0, s0, s2
	vstr	s0, [r11, #-824]
	vldr	s0, [r11, #-820]
	vldr	s2, [r11, #-820]
	vmul.f32	s0, s0, s2
	vldr	s2, [r11, #-824]
	vldr	s4, [r11, #-824]
	vmul.f32	s2, s2, s4
	vadd.f32	s0, s0, s2
	vcvt.f64.f32	d16, s0
	vmov	r1, r2, d16
	str	r0, [sp, #1052]         @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	sqrt
	vmov	d16, r0, r1
	vldr	s0, [r11, #-828]
	vcvt.f64.f32	d17, s0
	vdiv.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	vstr	s0, [r11, #-828]
.LBB93_185:                             @   in Loop: Header=BB93_175 Depth=2
	movw	r0, :lower16:L3psycho_anal.cw
	movt	r0, :upper16:L3psycho_anal.cw
	movw	r1, #2
	vldr	s0, [r11, #-828]
	ldr	r2, [r11, #-156]
	movw	r3, :lower16:L3psycho_anal.cw
	movt	r3, :upper16:L3psycho_anal.cw
	add	r2, r3, r2, lsl #2
	vstr	s0, [r2]
	ldr	r2, [r11, #-156]
	add	r2, r3, r2, lsl #2
	vstr	s0, [r2, #12]
	ldr	r2, [r11, #-156]
	add	r2, r3, r2, lsl #2
	vstr	s0, [r2, #8]
	ldr	r2, [r11, #-156]
	add	r2, r2, #1
	add	r2, r3, r2, lsl #2
	vstr	s0, [r2]
	str	r0, [sp, #1048]         @ 4-byte Spill
	str	r1, [sp, #1044]         @ 4-byte Spill
@ BB#186:                               @   in Loop: Header=BB93_175 Depth=2
	ldr	r0, [r11, #-156]
	add	r0, r0, #4
	str	r0, [r11, #-156]
	b	.LBB93_175
.LBB93_187:                             @   in Loop: Header=BB93_128 Depth=1
	movw	r0, #0
	str	r0, [r11, #-148]
	str	r0, [r11, #-156]
.LBB93_188:                             @   Parent Loop BB93_128 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB93_190 Depth 3
	movw	r0, :lower16:L3psycho_anal.cw_upper_index
	movt	r0, :upper16:L3psycho_anal.cw_upper_index
	ldr	r1, [r11, #-156]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB93_194
@ BB#189:                               @   in Loop: Header=BB93_188 Depth=2
	movw	r0, :lower16:L3psycho_anal.numlines_l
	movt	r0, :upper16:L3psycho_anal.numlines_l
	movw	r1, #2
	ldr	r2, [r11, #-156]
	movw	r3, :lower16:L3psycho_anal.energy
	movt	r3, :upper16:L3psycho_anal.energy
	add	r2, r3, r2, lsl #2
	vldr	s0, [r2]
	vcvt.f64.f32	d16, s0
	vstr	d16, [r11, #-872]
	ldr	r2, [r11, #-156]
	add	r3, r3, r2, lsl #2
	vldr	s0, [r3]
	movw	r3, :lower16:L3psycho_anal.cw
	movt	r3, :upper16:L3psycho_anal.cw
	add	r2, r3, r2, lsl #2
	vldr	s2, [r2]
	vmul.f32	s0, s0, s2
	vcvt.f64.f32	d16, s0
	vstr	d16, [r11, #-880]
	ldr	r2, [r11, #-156]
	add	r2, r2, #1
	str	r2, [r11, #-156]
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.numlines_l
	movt	r3, :upper16:L3psycho_anal.numlines_l
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	sub	r2, r2, #1
	str	r2, [r11, #-884]
	str	r0, [sp, #1040]         @ 4-byte Spill
	str	r1, [sp, #1036]         @ 4-byte Spill
.LBB93_190:                             @   Parent Loop BB93_128 Depth=1
                                        @     Parent Loop BB93_188 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-884]
	cmp	r0, #0
	ble	.LBB93_193
@ BB#191:                               @   in Loop: Header=BB93_190 Depth=3
	movw	r0, :lower16:L3psycho_anal.cw
	movt	r0, :upper16:L3psycho_anal.cw
	movw	r1, #2
	ldr	r2, [r11, #-156]
	movw	r3, :lower16:L3psycho_anal.energy
	movt	r3, :upper16:L3psycho_anal.energy
	add	r2, r3, r2, lsl #2
	vldr	s0, [r2]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-872]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-872]
	ldr	r2, [r11, #-156]
	add	r3, r3, r2, lsl #2
	vldr	s0, [r3]
	movw	r3, :lower16:L3psycho_anal.cw
	movt	r3, :upper16:L3psycho_anal.cw
	add	r2, r3, r2, lsl #2
	vldr	s2, [r2]
	vmul.f32	s0, s0, s2
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-880]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-880]
	ldr	r2, [r11, #-156]
	add	r2, r2, #1
	str	r2, [r11, #-156]
	str	r0, [sp, #1032]         @ 4-byte Spill
	str	r1, [sp, #1028]         @ 4-byte Spill
@ BB#192:                               @   in Loop: Header=BB93_190 Depth=3
	mvn	r0, #0
	ldr	r1, [r11, #-884]
	add	r0, r1, r0
	str	r0, [r11, #-884]
	b	.LBB93_190
.LBB93_193:                             @   in Loop: Header=BB93_188 Depth=2
	movw	r0, :lower16:L3psycho_anal.cb
	movt	r0, :upper16:L3psycho_anal.cb
	movw	r1, #3
	vldr	d16, [r11, #-872]
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.eb
	movt	r3, :upper16:L3psycho_anal.eb
	add	r2, r3, r2, lsl #3
	vstr	d16, [r2]
	vldr	d16, [r11, #-880]
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.cb
	movt	r3, :upper16:L3psycho_anal.cb
	add	r2, r3, r2, lsl #3
	vstr	d16, [r2]
	ldr	r2, [r11, #-148]
	add	r2, r2, #1
	str	r2, [r11, #-148]
	str	r0, [sp, #1024]         @ 4-byte Spill
	str	r1, [sp, #1020]         @ 4-byte Spill
	b	.LBB93_188
.LBB93_194:                             @   in Loop: Header=BB93_128 Depth=1
	b	.LBB93_195
.LBB93_195:                             @   Parent Loop BB93_128 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB93_197 Depth 3
	movw	r0, :lower16:L3psycho_anal.npart_l_orig
	movt	r0, :upper16:L3psycho_anal.npart_l_orig
	ldr	r1, [r11, #-148]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB93_202
@ BB#196:                               @   in Loop: Header=BB93_195 Depth=2
	movw	r0, :lower16:L3psycho_anal.numlines_l
	movt	r0, :upper16:L3psycho_anal.numlines_l
	movw	r1, #2
	ldr	r2, [r11, #-156]
	add	r3, r2, #1
	str	r3, [r11, #-156]
	movw	r3, :lower16:L3psycho_anal.energy
	movt	r3, :upper16:L3psycho_anal.energy
	add	r2, r3, r2, lsl #2
	vldr	s0, [r2]
	vcvt.f64.f32	d16, s0
	vstr	d16, [r11, #-896]
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.numlines_l
	movt	r3, :upper16:L3psycho_anal.numlines_l
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	sub	r2, r2, #1
	str	r2, [r11, #-888]
	str	r0, [sp, #1016]         @ 4-byte Spill
	str	r1, [sp, #1012]         @ 4-byte Spill
.LBB93_197:                             @   Parent Loop BB93_128 Depth=1
                                        @     Parent Loop BB93_195 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-888]
	cmp	r0, #0
	ble	.LBB93_200
@ BB#198:                               @   in Loop: Header=BB93_197 Depth=3
	movw	r0, :lower16:L3psycho_anal.energy
	movt	r0, :upper16:L3psycho_anal.energy
	movw	r1, #2
	ldr	r2, [r11, #-156]
	add	r3, r2, #1
	str	r3, [r11, #-156]
	movw	r3, :lower16:L3psycho_anal.energy
	movt	r3, :upper16:L3psycho_anal.energy
	add	r2, r3, r2, lsl #2
	vldr	s0, [r2]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-896]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-896]
	str	r0, [sp, #1008]         @ 4-byte Spill
	str	r1, [sp, #1004]         @ 4-byte Spill
@ BB#199:                               @   in Loop: Header=BB93_197 Depth=3
	mvn	r0, #0
	ldr	r1, [r11, #-888]
	add	r0, r1, r0
	str	r0, [r11, #-888]
	b	.LBB93_197
.LBB93_200:                             @   in Loop: Header=BB93_195 Depth=2
	movw	r0, :lower16:L3psycho_anal.cb
	movt	r0, :upper16:L3psycho_anal.cb
	movw	r1, #3
	vldr	d16, [r11, #-896]
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.eb
	movt	r3, :upper16:L3psycho_anal.eb
	add	r2, r3, r2, lsl #3
	vstr	d16, [r2]
	vldr	d16, [r11, #-896]
	vldr	d17, .LCPI93_30
	vmul.f64	d16, d16, d17
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.cb
	movt	r3, :upper16:L3psycho_anal.cb
	add	r2, r3, r2, lsl #3
	vstr	d16, [r2]
	str	r0, [sp, #1000]         @ 4-byte Spill
	str	r1, [sp, #996]          @ 4-byte Spill
@ BB#201:                               @   in Loop: Header=BB93_195 Depth=2
	ldr	r0, [r11, #-148]
	add	r0, r0, #1
	str	r0, [r11, #-148]
	b	.LBB93_195
.LBB93_202:                             @   in Loop: Header=BB93_128 Depth=1
	movw	r0, #0
	vldr	d16, .LCPI93_31
	movw	r1, :lower16:L3psycho_anal.pe
	movt	r1, :upper16:L3psycho_anal.pe
	movw	r2, #3
	ldr	r3, [r11, #-144]
	movw	r12, :lower16:L3psycho_anal.pe
	movt	r12, :upper16:L3psycho_anal.pe
	add	r3, r12, r3, lsl #3
	vstr	d16, [r3]
	str	r0, [r11, #-148]
	str	r1, [sp, #992]          @ 4-byte Spill
	str	r2, [sp, #988]          @ 4-byte Spill
.LBB93_203:                             @   Parent Loop BB93_128 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB93_205 Depth 3
	movw	r0, :lower16:L3psycho_anal.npart_l
	movt	r0, :upper16:L3psycho_anal.npart_l
	ldr	r1, [r11, #-148]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB93_243
@ BB#204:                               @   in Loop: Header=BB93_203 Depth=2
	movw	r0, :lower16:L3psycho_anal.s3ind
	movt	r0, :upper16:L3psycho_anal.s3ind
	movw	r1, #3
	mov	r2, #0
	str	r2, [r11, #-908]
	str	r2, [r11, #-912]
	str	r2, [r11, #-916]
	str	r2, [r11, #-920]
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.s3ind
	movt	r3, :upper16:L3psycho_anal.s3ind
	add	r2, r3, r2, lsl #3
	ldr	r2, [r2]
	str	r2, [r11, #-160]
	str	r0, [sp, #984]          @ 4-byte Spill
	str	r1, [sp, #980]          @ 4-byte Spill
.LBB93_205:                             @   Parent Loop BB93_128 Depth=1
                                        @     Parent Loop BB93_203 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	movw	r0, :lower16:L3psycho_anal.s3ind
	movt	r0, :upper16:L3psycho_anal.s3ind
	movw	r1, #3
	ldr	r2, [r11, #-160]
	ldr	r3, [r11, #-148]
	movw	r12, :lower16:L3psycho_anal.s3ind
	movt	r12, :upper16:L3psycho_anal.s3ind
	add	r3, r12, r3, lsl #3
	ldr	r3, [r3, #4]
	cmp	r2, r3
	str	r0, [sp, #976]          @ 4-byte Spill
	str	r1, [sp, #972]          @ 4-byte Spill
	bgt	.LBB93_208
@ BB#206:                               @   in Loop: Header=BB93_205 Depth=3
	movw	r0, :lower16:L3psycho_anal.cb
	movt	r0, :upper16:L3psycho_anal.cb
	movw	r1, #3
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.s3_l
	movt	r3, :upper16:L3psycho_anal.s3_l
	add	r2, r3, r2, lsl #9
	ldr	r12, [r11, #-160]
	add	r2, r2, r12, lsl #3
	vldr	d16, [r2]
	movw	r2, :lower16:L3psycho_anal.eb
	movt	r2, :upper16:L3psycho_anal.eb
	add	r2, r2, r12, lsl #3
	vldr	d17, [r2]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-912]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-912]
	ldr	r2, [r11, #-148]
	add	r2, r3, r2, lsl #9
	ldr	r3, [r11, #-160]
	add	r2, r2, r3, lsl #3
	vldr	d16, [r2]
	movw	r2, :lower16:L3psycho_anal.cb
	movt	r2, :upper16:L3psycho_anal.cb
	add	r2, r2, r3, lsl #3
	vldr	d17, [r2]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-920]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-920]
	str	r0, [sp, #968]          @ 4-byte Spill
	str	r1, [sp, #964]          @ 4-byte Spill
@ BB#207:                               @   in Loop: Header=BB93_205 Depth=3
	ldr	r0, [r11, #-160]
	add	r0, r0, #1
	str	r0, [r11, #-160]
	b	.LBB93_205
.LBB93_208:                             @   in Loop: Header=BB93_203 Depth=2
	vldr	d16, [r11, #-912]
	vstr	d16, [r11, #-904]
	vldr	d16, [r11, #-904]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	beq	.LBB93_216
@ BB#209:                               @   in Loop: Header=BB93_203 Depth=2
	vldr	d16, .LCPI93_32
	vldr	d17, [r11, #-920]
	vldr	d18, [r11, #-904]
	vdiv.f64	d17, d17, d18
	vstr	d17, [r11, #-904]
	vldr	d17, [r11, #-904]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	bhi	.LBB93_211
@ BB#210:                               @   in Loop: Header=BB93_203 Depth=2
	vldr	d16, .LCPI93_33
	vmov	r0, r1, d16
	bl	exp
	vmov	d16, r0, r1
	vstr	d16, [r11, #-904]
	b	.LBB93_215
.LBB93_211:                             @   in Loop: Header=BB93_203 Depth=2
	vldr	d16, .LCPI93_34
	vldr	d17, [r11, #-904]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	ble	.LBB93_213
@ BB#212:                               @   in Loop: Header=BB93_203 Depth=2
	vmov.f64	d16, #1.000000e+00
	vstr	d16, [r11, #-904]
	b	.LBB93_214
.LBB93_213:                             @   in Loop: Header=BB93_203 Depth=2
	vldr	d16, [r11, #-904]
	vmov	r0, r1, d16
	bl	log
	vmov	d16, r0, r1
	vldr	d17, .LCPI93_35
	vldr	d18, .LCPI93_36
	vstr	d16, [r11, #-904]
	vldr	d16, [r11, #-904]
	vmul.f64	d16, d18, d16
	vadd.f64	d16, d17, d16
	vmov	r0, r1, d16
	bl	exp
	vmov	d16, r0, r1
	vstr	d16, [r11, #-904]
.LBB93_214:                             @   in Loop: Header=BB93_203 Depth=2
	b	.LBB93_215
.LBB93_215:                             @   in Loop: Header=BB93_203 Depth=2
	b	.LBB93_216
.LBB93_216:                             @   in Loop: Header=BB93_203 Depth=2
	movw	r0, :lower16:L3psycho_anal.minval
	movt	r0, :upper16:L3psycho_anal.minval
	movw	r1, #3
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.minval
	movt	r3, :upper16:L3psycho_anal.minval
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [r11, #-904]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #960]          @ 4-byte Spill
	str	r1, [sp, #956]          @ 4-byte Spill
	bpl	.LBB93_218
@ BB#217:                               @   in Loop: Header=BB93_203 Depth=2
	movw	r0, :lower16:L3psycho_anal.minval
	movt	r0, :upper16:L3psycho_anal.minval
	movw	r1, #3
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.minval
	movt	r3, :upper16:L3psycho_anal.minval
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	str	r0, [sp, #952]          @ 4-byte Spill
	str	r1, [sp, #948]          @ 4-byte Spill
	vstr	d16, [sp, #936]         @ 8-byte Spill
	b	.LBB93_219
.LBB93_218:                             @   in Loop: Header=BB93_203 Depth=2
	vldr	d16, [r11, #-904]
	vstr	d16, [sp, #936]         @ 8-byte Spill
.LBB93_219:                             @   in Loop: Header=BB93_203 Depth=2
	vldr	d16, [sp, #936]         @ 8-byte Reload
	vmov.f64	d17, #1.600000e+01
	movw	r0, #3
	vstr	d16, [r11, #-904]
	vldr	d18, [r11, #-912]
	vmul.f64	d16, d18, d16
	vstr	d16, [r11, #-912]
	ldr	r1, [r11, #-144]
	rsb	r1, r1, r1, lsl #6
	movw	r2, :lower16:L3psycho_anal.nb_1
	movt	r2, :upper16:L3psycho_anal.nb_1
	add	r2, r2, r1, lsl #3
	ldr	r3, [r11, #-148]
	add	r2, r2, r3, lsl #3
	vldr	d18, [r2]
	vadd.f64	d18, d18, d18
	movw	r2, :lower16:L3psycho_anal.nb_2
	movt	r2, :upper16:L3psycho_anal.nb_2
	add	r1, r2, r1, lsl #3
	add	r1, r1, r3, lsl #3
	vldr	d19, [r1]
	vmul.f64	d17, d17, d19
	vcmpe.f64	d18, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #932]          @ 4-byte Spill
	vstr	d16, [sp, #920]         @ 8-byte Spill
	bpl	.LBB93_221
@ BB#220:                               @   in Loop: Header=BB93_203 Depth=2
	vmov.f64	d16, #2.000000e+00
	movw	r0, #3
	ldr	r1, [r11, #-144]
	rsb	r1, r1, r1, lsl #6
	movw	r2, :lower16:L3psycho_anal.nb_1
	movt	r2, :upper16:L3psycho_anal.nb_1
	add	r1, r2, r1, lsl #3
	ldr	r2, [r11, #-148]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vmul.f64	d16, d16, d17
	str	r0, [sp, #916]          @ 4-byte Spill
	vstr	d16, [sp, #904]         @ 8-byte Spill
	b	.LBB93_222
.LBB93_221:                             @   in Loop: Header=BB93_203 Depth=2
	vmov.f64	d16, #1.600000e+01
	movw	r0, #3
	ldr	r1, [r11, #-144]
	rsb	r1, r1, r1, lsl #6
	movw	r2, :lower16:L3psycho_anal.nb_2
	movt	r2, :upper16:L3psycho_anal.nb_2
	add	r1, r2, r1, lsl #3
	ldr	r2, [r11, #-148]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vmul.f64	d16, d16, d17
	str	r0, [sp, #900]          @ 4-byte Spill
	vstr	d16, [sp, #904]         @ 8-byte Spill
.LBB93_222:                             @   in Loop: Header=BB93_203 Depth=2
	vldr	d16, [sp, #904]         @ 8-byte Reload
	vldr	d17, [sp, #920]         @ 8-byte Reload
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB93_232
@ BB#223:                               @   in Loop: Header=BB93_203 Depth=2
	vldr	d16, [r11, #-912]
	vstr	d16, [sp, #888]         @ 8-byte Spill
	b	.LBB93_236
	.p2align	3
@ BB#224:
.LCPI93_30:
	.long	2576980378              @ double 0.40000000000000002
	.long	1071225241
	.p2align	3
@ BB#225:
.LCPI93_31:
	.long	0                       @ double 0
	.long	0
	.p2align	3
@ BB#226:
.LCPI93_32:
	.long	2658076749              @ double 0.048755843010000001
	.long	1068037766
	.p2align	3
@ BB#227:
.LCPI93_33:
	.long	1202087450              @ double -2.7631021115928549
	.long	3221625557
	.p2align	3
@ BB#228:
.LCPI93_34:
	.long	3739886327              @ double 0.49890038269999998
	.long	1071640059
	.p2align	3
@ BB#229:
.LCPI93_35:
	.long	3825698407              @ double 0.82616753136626364
	.long	1072328694
	.p2align	3
@ BB#230:
.LCPI93_36:
	.long	3009480163              @ double 1.1881339079849276
	.long	1072890520
	.p2align	3
@ BB#231:
.LCPI93_37:
	.long	0                       @ double 3000
	.long	1084715008
.LBB93_232:                             @   in Loop: Header=BB93_203 Depth=2
	vmov.f64	d16, #1.600000e+01
	movw	r0, #3
	ldr	r1, [r11, #-144]
	rsb	r1, r1, r1, lsl #6
	movw	r2, :lower16:L3psycho_anal.nb_1
	movt	r2, :upper16:L3psycho_anal.nb_1
	add	r2, r2, r1, lsl #3
	ldr	r3, [r11, #-148]
	add	r2, r2, r3, lsl #3
	vldr	d17, [r2]
	vadd.f64	d17, d17, d17
	movw	r2, :lower16:L3psycho_anal.nb_2
	movt	r2, :upper16:L3psycho_anal.nb_2
	add	r1, r2, r1, lsl #3
	add	r1, r1, r3, lsl #3
	vldr	d18, [r1]
	vmul.f64	d16, d16, d18
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #884]          @ 4-byte Spill
	bpl	.LBB93_234
@ BB#233:                               @   in Loop: Header=BB93_203 Depth=2
	vmov.f64	d16, #2.000000e+00
	movw	r0, #3
	ldr	r1, [r11, #-144]
	rsb	r1, r1, r1, lsl #6
	movw	r2, :lower16:L3psycho_anal.nb_1
	movt	r2, :upper16:L3psycho_anal.nb_1
	add	r1, r2, r1, lsl #3
	ldr	r2, [r11, #-148]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vmul.f64	d16, d16, d17
	str	r0, [sp, #880]          @ 4-byte Spill
	vstr	d16, [sp, #872]         @ 8-byte Spill
	b	.LBB93_235
.LBB93_234:                             @   in Loop: Header=BB93_203 Depth=2
	vmov.f64	d16, #1.600000e+01
	movw	r0, #3
	ldr	r1, [r11, #-144]
	rsb	r1, r1, r1, lsl #6
	movw	r2, :lower16:L3psycho_anal.nb_2
	movt	r2, :upper16:L3psycho_anal.nb_2
	add	r1, r2, r1, lsl #3
	ldr	r2, [r11, #-148]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vmul.f64	d16, d16, d17
	str	r0, [sp, #868]          @ 4-byte Spill
	vstr	d16, [sp, #872]         @ 8-byte Spill
.LBB93_235:                             @   in Loop: Header=BB93_203 Depth=2
	vldr	d16, [sp, #872]         @ 8-byte Reload
	vstr	d16, [sp, #888]         @ 8-byte Spill
.LBB93_236:                             @   in Loop: Header=BB93_203 Depth=2
	vldr	d16, [sp, #888]         @ 8-byte Reload
	movw	r0, :lower16:L3psycho_anal.qthr_l
	movt	r0, :upper16:L3psycho_anal.qthr_l
	movw	r1, #3
	vstr	d16, [r11, #-928]
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.qthr_l
	movt	r3, :upper16:L3psycho_anal.qthr_l
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [r11, #-928]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r1, [sp, #864]          @ 4-byte Spill
	str	r0, [sp, #860]          @ 4-byte Spill
	ble	.LBB93_238
@ BB#237:                               @   in Loop: Header=BB93_203 Depth=2
	movw	r0, :lower16:L3psycho_anal.qthr_l
	movt	r0, :upper16:L3psycho_anal.qthr_l
	movw	r1, #3
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.qthr_l
	movt	r3, :upper16:L3psycho_anal.qthr_l
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	str	r0, [sp, #856]          @ 4-byte Spill
	str	r1, [sp, #852]          @ 4-byte Spill
	vstr	d16, [sp, #840]         @ 8-byte Spill
	b	.LBB93_239
.LBB93_238:                             @   in Loop: Header=BB93_203 Depth=2
	vldr	d16, [r11, #-928]
	vstr	d16, [sp, #840]         @ 8-byte Spill
.LBB93_239:                             @   in Loop: Header=BB93_203 Depth=2
	vldr	d16, [sp, #840]         @ 8-byte Reload
	movw	r0, :lower16:L3psycho_anal.eb
	movt	r0, :upper16:L3psycho_anal.eb
	movw	r1, #3
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.thr
	movt	r3, :upper16:L3psycho_anal.thr
	add	r2, r3, r2, lsl #3
	vstr	d16, [r2]
	ldr	r2, [r11, #-144]
	rsb	r2, r2, r2, lsl #6
	movw	r12, :lower16:L3psycho_anal.nb_1
	movt	r12, :upper16:L3psycho_anal.nb_1
	add	lr, r12, r2, lsl #3
	ldr	r4, [r11, #-148]
	add	lr, lr, r4, lsl #3
	vldr	d16, [lr]
	movw	lr, :lower16:L3psycho_anal.nb_2
	movt	lr, :upper16:L3psycho_anal.nb_2
	add	r2, lr, r2, lsl #3
	add	r2, r2, r4, lsl #3
	vstr	d16, [r2]
	vldr	d16, [r11, #-912]
	ldr	r2, [r11, #-144]
	rsb	r2, r2, r2, lsl #6
	add	r2, r12, r2, lsl #3
	ldr	r12, [r11, #-148]
	add	r2, r2, r12, lsl #3
	vstr	d16, [r2]
	ldr	r2, [r11, #-148]
	add	r3, r3, r2, lsl #3
	vldr	d16, [r3]
	movw	r3, :lower16:L3psycho_anal.eb
	movt	r3, :upper16:L3psycho_anal.eb
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r1, [sp, #836]          @ 4-byte Spill
	str	r0, [sp, #832]          @ 4-byte Spill
	bpl	.LBB93_241
@ BB#240:                               @   in Loop: Header=BB93_203 Depth=2
	movw	r0, :lower16:L3psycho_anal.pe
	movt	r0, :upper16:L3psycho_anal.pe
	movw	r1, #3
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.numlines_l
	movt	r3, :upper16:L3psycho_anal.numlines_l
	add	r3, r3, r2, lsl #2
	vldr	s0, [r3]
	vcvt.f64.s32	d16, s0
	movw	r3, :lower16:L3psycho_anal.thr
	movt	r3, :upper16:L3psycho_anal.thr
	add	r3, r3, r2, lsl #3
	vldr	d17, [r3]
	movw	r3, :lower16:L3psycho_anal.eb
	movt	r3, :upper16:L3psycho_anal.eb
	add	r2, r3, r2, lsl #3
	vldr	d18, [r2]
	vdiv.f64	d17, d17, d18
	vmov	r2, r3, d17
	str	r0, [sp, #828]          @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #824]          @ 4-byte Spill
	mov	r1, r3
	vstr	d16, [sp, #816]         @ 8-byte Spill
	bl	log
	vmov	d16, r0, r1
	vldr	d17, [sp, #816]         @ 8-byte Reload
	vmul.f64	d16, d17, d16
	ldr	r0, [r11, #-144]
	movw	r1, :lower16:L3psycho_anal.pe
	movt	r1, :upper16:L3psycho_anal.pe
	add	r0, r1, r0, lsl #3
	vldr	d17, [r0]
	vsub.f64	d16, d17, d16
	vstr	d16, [r0]
.LBB93_241:                             @   in Loop: Header=BB93_203 Depth=2
	b	.LBB93_242
.LBB93_242:                             @   in Loop: Header=BB93_203 Depth=2
	ldr	r0, [r11, #-148]
	add	r0, r0, #1
	str	r0, [r11, #-148]
	b	.LBB93_203
.LBB93_243:                             @   in Loop: Header=BB93_128 Depth=1
	ldr	r0, [r11, #-144]
	cmp	r0, #2
	bge	.LBB93_273
@ BB#244:                               @   in Loop: Header=BB93_128 Depth=1
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #148]
	cmp	r0, #0
	beq	.LBB93_246
@ BB#245:                               @   in Loop: Header=BB93_128 Depth=1
	movw	r0, #1
	sub	r1, r11, #136
	movw	r2, #2
	ldr	r3, [r11, #-144]
	sub	r12, r11, #136
	add	r3, r12, r3, lsl #2
	str	r0, [r3]
	str	r2, [sp, #812]          @ 4-byte Spill
	str	r1, [sp, #808]          @ 4-byte Spill
	b	.LBB93_272
.LBB93_246:                             @   in Loop: Header=BB93_128 Depth=1
	vldr	d16, .LCPI93_37
	movw	r0, :lower16:L3psycho_anal.pe
	movt	r0, :upper16:L3psycho_anal.pe
	movw	r1, #3
	ldr	r2, [r11, #-144]
	movw	r3, :lower16:L3psycho_anal.pe
	movt	r3, :upper16:L3psycho_anal.pe
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	str	r1, [sp, #804]          @ 4-byte Spill
	str	r0, [sp, #800]          @ 4-byte Spill
	ble	.LBB93_248
@ BB#247:                               @   in Loop: Header=BB93_128 Depth=1
	movw	r0, #0
	sub	r1, r11, #136
	movw	r2, #2
	ldr	r3, [r11, #-144]
	sub	r12, r11, #136
	add	r3, r12, r3, lsl #2
	str	r0, [r3]
	str	r2, [sp, #796]          @ 4-byte Spill
	str	r1, [sp, #792]          @ 4-byte Spill
	b	.LBB93_271
.LBB93_248:                             @   in Loop: Header=BB93_128 Depth=1
	movw	r0, #64
	vldr	s0, .LCPI93_38
	vstr	s0, [r11, #-940]
	vstr	s0, [r11, #-944]
	vstr	s0, [r11, #-948]
	str	r0, [r11, #-156]
.LBB93_249:                             @   Parent Loop BB93_128 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-156]
	cmp	r0, #129
	bge	.LBB93_252
@ BB#250:                               @   in Loop: Header=BB93_249 Depth=2
	movw	r0, :lower16:L3psycho_anal.energy_s
	movt	r0, :upper16:L3psycho_anal.energy_s
	movw	r1, #1032
	add	r0, r0, r1
	movw	r1, #2
	ldr	r2, [r11, #-156]
	movw	r3, :lower16:L3psycho_anal.energy_s
	movt	r3, :upper16:L3psycho_anal.energy_s
	add	r2, r3, r2, lsl #2
	vldr	s0, [r2]
	vldr	s2, [r11, #-940]
	vadd.f32	s0, s2, s0
	vstr	s0, [r11, #-940]
	ldr	r2, [r11, #-156]
	add	r2, r3, r2, lsl #2
	vldr	s0, [r2, #516]
	vldr	s2, [r11, #-944]
	vadd.f32	s0, s2, s0
	vstr	s0, [r11, #-944]
	ldr	r2, [r11, #-156]
	add	r2, r3, r2, lsl #2
	movw	r3, #1032
	add	r2, r2, r3
	vldr	s0, [r2]
	vldr	s2, [r11, #-948]
	vadd.f32	s0, s2, s0
	vstr	s0, [r11, #-948]
	str	r0, [sp, #788]          @ 4-byte Spill
	str	r1, [sp, #784]          @ 4-byte Spill
@ BB#251:                               @   in Loop: Header=BB93_249 Depth=2
	ldr	r0, [r11, #-156]
	add	r0, r0, #1
	str	r0, [r11, #-156]
	b	.LBB93_249
.LBB93_252:                             @   in Loop: Header=BB93_128 Depth=1
	vldr	s0, [r11, #-940]
	vldr	s2, [r11, #-944]
	vcmpe.f32	s0, s2
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB93_254
@ BB#253:                               @   in Loop: Header=BB93_128 Depth=1
	vldr	s0, [r11, #-940]
	vstr	s0, [sp, #780]          @ 4-byte Spill
	b	.LBB93_255
.LBB93_254:                             @   in Loop: Header=BB93_128 Depth=1
	vldr	s0, [r11, #-944]
	vstr	s0, [sp, #780]          @ 4-byte Spill
.LBB93_255:                             @   in Loop: Header=BB93_128 Depth=1
	vldr	s0, [sp, #780]          @ 4-byte Reload
	vstr	s0, [r11, #-932]
	vldr	s0, [r11, #-932]
	vldr	s2, [r11, #-948]
	vcmpe.f32	s0, s2
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB93_257
@ BB#256:                               @   in Loop: Header=BB93_128 Depth=1
	vldr	s0, [r11, #-932]
	vstr	s0, [sp, #776]          @ 4-byte Spill
	b	.LBB93_258
.LBB93_257:                             @   in Loop: Header=BB93_128 Depth=1
	vldr	s0, [r11, #-948]
	vstr	s0, [sp, #776]          @ 4-byte Spill
.LBB93_258:                             @   in Loop: Header=BB93_128 Depth=1
	vldr	s0, [sp, #776]          @ 4-byte Reload
	vstr	s0, [r11, #-932]
	vldr	s0, [r11, #-940]
	vldr	s2, [r11, #-944]
	vcmpe.f32	s0, s2
	vmrs	APSR_nzcv, fpscr
	ble	.LBB93_260
@ BB#259:                               @   in Loop: Header=BB93_128 Depth=1
	vldr	s0, [r11, #-940]
	vstr	s0, [sp, #772]          @ 4-byte Spill
	b	.LBB93_261
.LBB93_260:                             @   in Loop: Header=BB93_128 Depth=1
	vldr	s0, [r11, #-944]
	vstr	s0, [sp, #772]          @ 4-byte Spill
.LBB93_261:                             @   in Loop: Header=BB93_128 Depth=1
	vldr	s0, [sp, #772]          @ 4-byte Reload
	vstr	s0, [r11, #-936]
	vldr	s0, [r11, #-936]
	vldr	s2, [r11, #-948]
	vcmpe.f32	s0, s2
	vmrs	APSR_nzcv, fpscr
	ble	.LBB93_263
@ BB#262:                               @   in Loop: Header=BB93_128 Depth=1
	vldr	s0, [r11, #-936]
	vstr	s0, [sp, #768]          @ 4-byte Spill
	b	.LBB93_264
.LBB93_263:                             @   in Loop: Header=BB93_128 Depth=1
	vldr	s0, [r11, #-948]
	vstr	s0, [sp, #768]          @ 4-byte Spill
.LBB93_264:                             @   in Loop: Header=BB93_128 Depth=1
	vldr	s0, [sp, #768]          @ 4-byte Reload
	vmov.f32	s2, #3.000000e+01
	movw	r0, #1
	sub	r1, r11, #136
	movw	r2, #2
	vstr	s0, [r11, #-936]
	ldr	r3, [r11, #-144]
	sub	r12, r11, #136
	add	r3, r12, r3, lsl #2
	str	r0, [r3]
	vldr	s0, [r11, #-936]
	vldr	s4, [r11, #-932]
	vmul.f32	s2, s2, s4
	vcmpe.f32	s0, s2
	vmrs	APSR_nzcv, fpscr
	str	r2, [sp, #764]          @ 4-byte Spill
	str	r1, [sp, #760]          @ 4-byte Spill
	ble	.LBB93_266
@ BB#265:                               @   in Loop: Header=BB93_128 Depth=1
	movw	r0, #0
	sub	r1, r11, #136
	movw	r2, #2
	ldr	r3, [r11, #-144]
	sub	r12, r11, #136
	add	r3, r12, r3, lsl #2
	str	r0, [r3]
	str	r2, [sp, #756]          @ 4-byte Spill
	str	r1, [sp, #752]          @ 4-byte Spill
	b	.LBB93_270
.LBB93_266:                             @   in Loop: Header=BB93_128 Depth=1
	vmov.f32	s0, #1.000000e+01
	vldr	s2, [r11, #-936]
	vldr	s4, [r11, #-932]
	vmul.f32	s0, s0, s4
	vcmpe.f32	s2, s0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB93_269
@ BB#267:                               @   in Loop: Header=BB93_128 Depth=1
	vldr	d16, .LCPI93_39
	movw	r0, :lower16:L3psycho_anal.pe
	movt	r0, :upper16:L3psycho_anal.pe
	movw	r1, #3
	ldr	r2, [r11, #-144]
	movw	r3, :lower16:L3psycho_anal.pe
	movt	r3, :upper16:L3psycho_anal.pe
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	str	r1, [sp, #748]          @ 4-byte Spill
	str	r0, [sp, #744]          @ 4-byte Spill
	ble	.LBB93_269
@ BB#268:                               @   in Loop: Header=BB93_128 Depth=1
	movw	r0, #0
	sub	r1, r11, #136
	movw	r2, #2
	ldr	r3, [r11, #-144]
	sub	r12, r11, #136
	add	r3, r12, r3, lsl #2
	str	r0, [r3]
	str	r2, [sp, #740]          @ 4-byte Spill
	str	r1, [sp, #736]          @ 4-byte Spill
.LBB93_269:                             @   in Loop: Header=BB93_128 Depth=1
	b	.LBB93_270
.LBB93_270:                             @   in Loop: Header=BB93_128 Depth=1
	b	.LBB93_271
.LBB93_271:                             @   in Loop: Header=BB93_128 Depth=1
	b	.LBB93_272
.LBB93_272:                             @   in Loop: Header=BB93_128 Depth=1
	b	.LBB93_273
.LBB93_273:                             @   in Loop: Header=BB93_128 Depth=1
	movw	r0, #0
	str	r0, [r11, #-164]
.LBB93_274:                             @   Parent Loop BB93_128 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB93_276 Depth 3
	ldr	r0, [r11, #-164]
	cmp	r0, #21
	bge	.LBB93_282
@ BB#275:                               @   in Loop: Header=BB93_274 Depth=2
	movw	r0, :lower16:L3psycho_anal.bu_l
	movt	r0, :upper16:L3psycho_anal.bu_l
	movw	r1, #2
	ldr	r2, [r11, #-164]
	movw	r3, :lower16:L3psycho_anal.w1_l
	movt	r3, :upper16:L3psycho_anal.w1_l
	add	r12, r3, r2, lsl #3
	vldr	d16, [r12]
	movw	r12, :lower16:L3psycho_anal.bu_l
	movt	r12, :upper16:L3psycho_anal.bu_l
	ldr	lr, [r12, r2, lsl #2]
	movw	r4, :lower16:L3psycho_anal.eb
	movt	r4, :upper16:L3psycho_anal.eb
	add	lr, r4, lr, lsl #3
	vldr	d17, [lr]
	vmul.f64	d16, d16, d17
	movw	lr, :lower16:L3psycho_anal.w2_l
	movt	lr, :upper16:L3psycho_anal.w2_l
	add	r5, lr, r2, lsl #3
	vldr	d17, [r5]
	movw	r5, :lower16:L3psycho_anal.bo_l
	movt	r5, :upper16:L3psycho_anal.bo_l
	ldr	r2, [r5, r2, lsl #2]
	add	r2, r4, r2, lsl #3
	vldr	d18, [r2]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vstr	d16, [r11, #-960]
	ldr	r2, [r11, #-164]
	add	r3, r3, r2, lsl #3
	vldr	d16, [r3]
	ldr	r3, [r12, r2, lsl #2]
	movw	r4, :lower16:L3psycho_anal.thr
	movt	r4, :upper16:L3psycho_anal.thr
	add	r3, r4, r3, lsl #3
	vldr	d17, [r3]
	vmul.f64	d16, d16, d17
	add	r3, lr, r2, lsl #3
	vldr	d17, [r3]
	ldr	r2, [r5, r2, lsl #2]
	add	r2, r4, r2, lsl #3
	vldr	d18, [r2]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vstr	d16, [r11, #-968]
	ldr	r2, [r11, #-164]
	add	r2, r12, r2, lsl #2
	ldr	r2, [r2]
	add	r2, r2, #1
	str	r2, [r11, #-148]
	str	r0, [sp, #732]          @ 4-byte Spill
	str	r1, [sp, #728]          @ 4-byte Spill
.LBB93_276:                             @   Parent Loop BB93_128 Depth=1
                                        @     Parent Loop BB93_274 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	movw	r0, :lower16:L3psycho_anal.bo_l
	movt	r0, :upper16:L3psycho_anal.bo_l
	movw	r1, #2
	ldr	r2, [r11, #-148]
	ldr	r3, [r11, #-164]
	movw	r12, :lower16:L3psycho_anal.bo_l
	movt	r12, :upper16:L3psycho_anal.bo_l
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	cmp	r2, r3
	str	r0, [sp, #724]          @ 4-byte Spill
	str	r1, [sp, #720]          @ 4-byte Spill
	bge	.LBB93_280
@ BB#277:                               @   in Loop: Header=BB93_276 Depth=3
	movw	r0, :lower16:L3psycho_anal.thr
	movt	r0, :upper16:L3psycho_anal.thr
	movw	r1, #3
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.eb
	movt	r3, :upper16:L3psycho_anal.eb
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [r11, #-960]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-960]
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.thr
	movt	r3, :upper16:L3psycho_anal.thr
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [r11, #-968]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-968]
	str	r0, [sp, #716]          @ 4-byte Spill
	str	r1, [sp, #712]          @ 4-byte Spill
@ BB#278:                               @   in Loop: Header=BB93_276 Depth=3
	ldr	r0, [r11, #-148]
	add	r0, r0, #1
	str	r0, [r11, #-148]
	b	.LBB93_276
	.p2align	2
@ BB#279:
.LCPI93_38:
	.long	0                       @ float 0
.LBB93_280:                             @   in Loop: Header=BB93_274 Depth=2
	movw	r0, #3
	vldr	d16, [r11, #-960]
	ldr	r1, [r11, #-144]
	movw	r2, :lower16:L3psycho_anal.en
	movt	r2, :upper16:L3psycho_anal.en
	mov	r3, #488
	mla	r1, r1, r3, r2
	ldr	r2, [r11, #-164]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	vldr	d16, [r11, #-968]
	ldr	r1, [r11, #-144]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mla	r1, r1, r3, r2
	mov	r2, r1
	ldr	r3, [r11, #-164]
	add	r1, r1, r3, lsl #3
	vstr	d16, [r1]
	str	r0, [sp, #708]          @ 4-byte Spill
	str	r2, [sp, #704]          @ 4-byte Spill
@ BB#281:                               @   in Loop: Header=BB93_274 Depth=2
	ldr	r0, [r11, #-164]
	add	r0, r0, #1
	str	r0, [r11, #-164]
	b	.LBB93_274
.LBB93_282:                             @   in Loop: Header=BB93_128 Depth=1
	movw	r0, #0
	str	r0, [r11, #-168]
.LBB93_283:                             @   Parent Loop BB93_128 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB93_285 Depth 3
                                        @         Child Loop BB93_287 Depth 4
                                        @       Child Loop BB93_295 Depth 3
                                        @         Child Loop BB93_297 Depth 4
                                        @       Child Loop BB93_306 Depth 3
                                        @         Child Loop BB93_308 Depth 4
	ldr	r0, [r11, #-168]
	cmp	r0, #3
	bge	.LBB93_315
@ BB#284:                               @   in Loop: Header=BB93_283 Depth=2
	movw	r0, #0
	str	r0, [r11, #-156]
	str	r0, [r11, #-148]
.LBB93_285:                             @   Parent Loop BB93_128 Depth=1
                                        @     Parent Loop BB93_283 Depth=2
                                        @ =>    This Loop Header: Depth=3
                                        @         Child Loop BB93_287 Depth 4
	movw	r0, :lower16:L3psycho_anal.npart_s_orig
	movt	r0, :upper16:L3psycho_anal.npart_s_orig
	ldr	r1, [r11, #-148]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB93_294
@ BB#286:                               @   in Loop: Header=BB93_285 Depth=3
	movw	r0, :lower16:L3psycho_anal.numlines_s
	movt	r0, :upper16:L3psycho_anal.numlines_s
	movw	r1, #2
	ldr	r2, [r11, #-168]
	add	r2, r2, r2, lsl #7
	movw	r3, :lower16:L3psycho_anal.energy_s
	movt	r3, :upper16:L3psycho_anal.energy_s
	add	r2, r3, r2, lsl #2
	ldr	r3, [r11, #-156]
	add	r12, r3, #1
	str	r12, [r11, #-156]
	ldr	r2, [r2, r3, lsl #2]
	str	r2, [r11, #-976]
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.numlines_s
	movt	r3, :upper16:L3psycho_anal.numlines_s
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	str	r2, [r11, #-972]
	str	r0, [sp, #700]          @ 4-byte Spill
	str	r1, [sp, #696]          @ 4-byte Spill
.LBB93_287:                             @   Parent Loop BB93_128 Depth=1
                                        @     Parent Loop BB93_283 Depth=2
                                        @       Parent Loop BB93_285 Depth=3
                                        @ =>      This Inner Loop Header: Depth=4
	ldr	r0, [r11, #-972]
	cmp	r0, #0
	ble	.LBB93_290
@ BB#288:                               @   in Loop: Header=BB93_287 Depth=4
	movw	r0, #2
	ldr	r1, [r11, #-168]
	add	r1, r1, r1, lsl #7
	movw	r2, :lower16:L3psycho_anal.energy_s
	movt	r2, :upper16:L3psycho_anal.energy_s
	add	r1, r2, r1, lsl #2
	ldr	r2, [r11, #-156]
	add	r3, r2, #1
	str	r3, [r11, #-156]
	add	r1, r1, r2, lsl #2
	vldr	s0, [r1]
	vldr	s2, [r11, #-976]
	vadd.f32	s0, s2, s0
	vstr	s0, [r11, #-976]
	str	r0, [sp, #692]          @ 4-byte Spill
@ BB#289:                               @   in Loop: Header=BB93_287 Depth=4
	mvn	r0, #0
	ldr	r1, [r11, #-972]
	add	r0, r1, r0
	str	r0, [r11, #-972]
	b	.LBB93_287
.LBB93_290:                             @   in Loop: Header=BB93_285 Depth=3
	movw	r0, :lower16:L3psycho_anal.eb
	movt	r0, :upper16:L3psycho_anal.eb
	movw	r1, #3
	vldr	s0, [r11, #-976]
	vcvt.f64.f32	d16, s0
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.eb
	movt	r3, :upper16:L3psycho_anal.eb
	add	r2, r3, r2, lsl #3
	vstr	d16, [r2]
	str	r0, [sp, #688]          @ 4-byte Spill
	str	r1, [sp, #684]          @ 4-byte Spill
@ BB#291:                               @   in Loop: Header=BB93_285 Depth=3
	ldr	r0, [r11, #-148]
	add	r0, r0, #1
	str	r0, [r11, #-148]
	b	.LBB93_285
	.p2align	3
@ BB#292:
.LCPI93_39:
	.long	0                       @ double 1000
	.long	1083129856
	.p2align	3
@ BB#293:
.LCPI93_40:
	.long	343597384               @ double 1.5800000000000001
	.long	1073301422
.LBB93_294:                             @   in Loop: Header=BB93_283 Depth=2
	movw	r0, #0
	str	r0, [r11, #-148]
.LBB93_295:                             @   Parent Loop BB93_128 Depth=1
                                        @     Parent Loop BB93_283 Depth=2
                                        @ =>    This Loop Header: Depth=3
                                        @         Child Loop BB93_297 Depth 4
	movw	r0, :lower16:L3psycho_anal.npart_s
	movt	r0, :upper16:L3psycho_anal.npart_s
	ldr	r1, [r11, #-148]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB93_305
@ BB#296:                               @   in Loop: Header=BB93_295 Depth=3
	movw	r0, :lower16:L3psycho_anal.s3ind_s
	movt	r0, :upper16:L3psycho_anal.s3ind_s
	movw	r1, #3
	mov	r2, #0
	str	r2, [r11, #-980]
	str	r2, [r11, #-984]
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.s3ind_s
	movt	r3, :upper16:L3psycho_anal.s3ind_s
	add	r2, r3, r2, lsl #3
	ldr	r2, [r2]
	str	r2, [r11, #-160]
	str	r0, [sp, #680]          @ 4-byte Spill
	str	r1, [sp, #676]          @ 4-byte Spill
.LBB93_297:                             @   Parent Loop BB93_128 Depth=1
                                        @     Parent Loop BB93_283 Depth=2
                                        @       Parent Loop BB93_295 Depth=3
                                        @ =>      This Inner Loop Header: Depth=4
	movw	r0, :lower16:L3psycho_anal.s3ind_s
	movt	r0, :upper16:L3psycho_anal.s3ind_s
	movw	r1, #3
	ldr	r2, [r11, #-160]
	ldr	r3, [r11, #-148]
	movw	r12, :lower16:L3psycho_anal.s3ind_s
	movt	r12, :upper16:L3psycho_anal.s3ind_s
	add	r3, r12, r3, lsl #3
	ldr	r3, [r3, #4]
	cmp	r2, r3
	str	r0, [sp, #672]          @ 4-byte Spill
	str	r1, [sp, #668]          @ 4-byte Spill
	bgt	.LBB93_300
@ BB#298:                               @   in Loop: Header=BB93_297 Depth=4
	movw	r0, :lower16:L3psycho_anal.eb
	movt	r0, :upper16:L3psycho_anal.eb
	movw	r1, #3
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.s3_s
	movt	r3, :upper16:L3psycho_anal.s3_s
	add	r2, r3, r2, lsl #9
	ldr	r3, [r11, #-160]
	add	r2, r2, r3, lsl #3
	vldr	d16, [r2]
	movw	r2, :lower16:L3psycho_anal.eb
	movt	r2, :upper16:L3psycho_anal.eb
	add	r2, r2, r3, lsl #3
	vldr	d17, [r2]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-984]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-984]
	str	r0, [sp, #664]          @ 4-byte Spill
	str	r1, [sp, #660]          @ 4-byte Spill
@ BB#299:                               @   in Loop: Header=BB93_297 Depth=4
	ldr	r0, [r11, #-160]
	add	r0, r0, #1
	str	r0, [r11, #-160]
	b	.LBB93_297
.LBB93_300:                             @   in Loop: Header=BB93_295 Depth=3
	movw	r0, :lower16:L3psycho_anal.qthr_s
	movt	r0, :upper16:L3psycho_anal.qthr_s
	movw	r1, #3
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.qthr_s
	movt	r3, :upper16:L3psycho_anal.qthr_s
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [r11, #-984]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #656]          @ 4-byte Spill
	str	r1, [sp, #652]          @ 4-byte Spill
	ble	.LBB93_302
@ BB#301:                               @   in Loop: Header=BB93_295 Depth=3
	movw	r0, :lower16:L3psycho_anal.qthr_s
	movt	r0, :upper16:L3psycho_anal.qthr_s
	movw	r1, #3
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.qthr_s
	movt	r3, :upper16:L3psycho_anal.qthr_s
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	str	r0, [sp, #648]          @ 4-byte Spill
	str	r1, [sp, #644]          @ 4-byte Spill
	vstr	d16, [sp, #632]         @ 8-byte Spill
	b	.LBB93_303
.LBB93_302:                             @   in Loop: Header=BB93_295 Depth=3
	vldr	d16, [r11, #-984]
	vstr	d16, [sp, #632]         @ 8-byte Spill
.LBB93_303:                             @   in Loop: Header=BB93_295 Depth=3
	vldr	d16, [sp, #632]         @ 8-byte Reload
	movw	r0, :lower16:L3psycho_anal.thr
	movt	r0, :upper16:L3psycho_anal.thr
	movw	r1, #3
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.thr
	movt	r3, :upper16:L3psycho_anal.thr
	add	r2, r3, r2, lsl #3
	vstr	d16, [r2]
	str	r1, [sp, #628]          @ 4-byte Spill
	str	r0, [sp, #624]          @ 4-byte Spill
@ BB#304:                               @   in Loop: Header=BB93_295 Depth=3
	ldr	r0, [r11, #-148]
	add	r0, r0, #1
	str	r0, [r11, #-148]
	b	.LBB93_295
.LBB93_305:                             @   in Loop: Header=BB93_283 Depth=2
	movw	r0, #0
	str	r0, [r11, #-164]
.LBB93_306:                             @   Parent Loop BB93_128 Depth=1
                                        @     Parent Loop BB93_283 Depth=2
                                        @ =>    This Loop Header: Depth=3
                                        @         Child Loop BB93_308 Depth 4
	ldr	r0, [r11, #-164]
	cmp	r0, #12
	bge	.LBB93_313
@ BB#307:                               @   in Loop: Header=BB93_306 Depth=3
	movw	r0, :lower16:L3psycho_anal.bu_s
	movt	r0, :upper16:L3psycho_anal.bu_s
	movw	r1, #2
	ldr	r2, [r11, #-164]
	movw	r3, :lower16:L3psycho_anal.w1_s
	movt	r3, :upper16:L3psycho_anal.w1_s
	add	r12, r3, r2, lsl #3
	vldr	d16, [r12]
	movw	r12, :lower16:L3psycho_anal.bu_s
	movt	r12, :upper16:L3psycho_anal.bu_s
	ldr	lr, [r12, r2, lsl #2]
	movw	r4, :lower16:L3psycho_anal.eb
	movt	r4, :upper16:L3psycho_anal.eb
	add	lr, r4, lr, lsl #3
	vldr	d17, [lr]
	vmul.f64	d16, d16, d17
	movw	lr, :lower16:L3psycho_anal.w2_s
	movt	lr, :upper16:L3psycho_anal.w2_s
	add	r5, lr, r2, lsl #3
	vldr	d17, [r5]
	movw	r5, :lower16:L3psycho_anal.bo_s
	movt	r5, :upper16:L3psycho_anal.bo_s
	ldr	r2, [r5, r2, lsl #2]
	add	r2, r4, r2, lsl #3
	vldr	d18, [r2]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vstr	d16, [r11, #-992]
	ldr	r2, [r11, #-164]
	add	r3, r3, r2, lsl #3
	vldr	d16, [r3]
	ldr	r3, [r12, r2, lsl #2]
	movw	r4, :lower16:L3psycho_anal.thr
	movt	r4, :upper16:L3psycho_anal.thr
	add	r3, r4, r3, lsl #3
	vldr	d17, [r3]
	vmul.f64	d16, d16, d17
	add	r3, lr, r2, lsl #3
	vldr	d17, [r3]
	ldr	r2, [r5, r2, lsl #2]
	add	r2, r4, r2, lsl #3
	vldr	d18, [r2]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d16, d17
	vstr	d16, [r11, #-1000]
	ldr	r2, [r11, #-164]
	add	r2, r12, r2, lsl #2
	ldr	r2, [r2]
	add	r2, r2, #1
	str	r2, [r11, #-148]
	str	r0, [sp, #620]          @ 4-byte Spill
	str	r1, [sp, #616]          @ 4-byte Spill
.LBB93_308:                             @   Parent Loop BB93_128 Depth=1
                                        @     Parent Loop BB93_283 Depth=2
                                        @       Parent Loop BB93_306 Depth=3
                                        @ =>      This Inner Loop Header: Depth=4
	movw	r0, :lower16:L3psycho_anal.bo_s
	movt	r0, :upper16:L3psycho_anal.bo_s
	movw	r1, #2
	ldr	r2, [r11, #-148]
	ldr	r3, [r11, #-164]
	movw	r12, :lower16:L3psycho_anal.bo_s
	movt	r12, :upper16:L3psycho_anal.bo_s
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	cmp	r2, r3
	str	r0, [sp, #612]          @ 4-byte Spill
	str	r1, [sp, #608]          @ 4-byte Spill
	bge	.LBB93_311
@ BB#309:                               @   in Loop: Header=BB93_308 Depth=4
	movw	r0, :lower16:L3psycho_anal.thr
	movt	r0, :upper16:L3psycho_anal.thr
	movw	r1, #3
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.eb
	movt	r3, :upper16:L3psycho_anal.eb
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [r11, #-992]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-992]
	ldr	r2, [r11, #-148]
	movw	r3, :lower16:L3psycho_anal.thr
	movt	r3, :upper16:L3psycho_anal.thr
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [r11, #-1000]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-1000]
	str	r0, [sp, #604]          @ 4-byte Spill
	str	r1, [sp, #600]          @ 4-byte Spill
@ BB#310:                               @   in Loop: Header=BB93_308 Depth=4
	ldr	r0, [r11, #-148]
	add	r0, r0, #1
	str	r0, [r11, #-148]
	b	.LBB93_308
.LBB93_311:                             @   in Loop: Header=BB93_306 Depth=3
	movw	r0, #3
	vldr	d16, [r11, #-992]
	ldr	r1, [r11, #-144]
	movw	r2, :lower16:L3psycho_anal.en
	movt	r2, :upper16:L3psycho_anal.en
	mov	r3, #488
	mla	r1, r1, r3, r2
	ldr	r2, [r11, #-164]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #3
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1, #176]
	vldr	d16, [r11, #-1000]
	ldr	r1, [r11, #-144]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mla	r1, r1, r3, r2
	ldr	r2, [r11, #-164]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #3
	add	r1, r1, #176
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	str	r0, [sp, #596]          @ 4-byte Spill
@ BB#312:                               @   in Loop: Header=BB93_306 Depth=3
	ldr	r0, [r11, #-164]
	add	r0, r0, #1
	str	r0, [r11, #-164]
	b	.LBB93_306
.LBB93_313:                             @   in Loop: Header=BB93_283 Depth=2
	b	.LBB93_314
.LBB93_314:                             @   in Loop: Header=BB93_283 Depth=2
	ldr	r0, [r11, #-168]
	add	r0, r0, #1
	str	r0, [r11, #-168]
	b	.LBB93_283
.LBB93_315:                             @   in Loop: Header=BB93_128 Depth=1
	b	.LBB93_316
.LBB93_316:                             @   in Loop: Header=BB93_128 Depth=1
	ldr	r0, [r11, #-144]
	add	r0, r0, #1
	str	r0, [r11, #-144]
	b	.LBB93_128
.LBB93_317:
	ldr	r0, [r11, #-140]
	cmp	r0, #4
	bne	.LBB93_374
@ BB#318:
	movw	r0, #0
	movw	r1, #3
	movw	r2, #2
	str	r2, [r11, #-1028]
	str	r1, [r11, #-1032]
	str	r0, [r11, #-164]
.LBB93_319:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-164]
	cmp	r0, #21
	bge	.LBB93_344
@ BB#320:                               @   in Loop: Header=BB93_319 Depth=1
	vldr	d16, .LCPI93_40
	movw	r0, :lower16:L3psycho_anal.thm
	movt	r0, :upper16:L3psycho_anal.thm
	add	r0, r0, #488
	movw	r1, #3
	ldr	r2, [r11, #-164]
	movw	r3, :lower16:L3psycho_anal.thm
	movt	r3, :upper16:L3psycho_anal.thm
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	add	r2, r2, #488
	vldr	d18, [r2]
	vmul.f64	d16, d16, d18
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	str	r1, [sp, #592]          @ 4-byte Spill
	str	r0, [sp, #588]          @ 4-byte Spill
	bhi	.LBB93_342
@ BB#321:                               @   in Loop: Header=BB93_319 Depth=1
	vldr	d16, .LCPI93_41
	movw	r0, :lower16:L3psycho_anal.thm
	movt	r0, :upper16:L3psycho_anal.thm
	movw	r1, #3
	ldr	r2, [r11, #-164]
	movw	r3, :lower16:L3psycho_anal.thm
	movt	r3, :upper16:L3psycho_anal.thm
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2, #488]
	vldr	d18, [r2]
	vmul.f64	d16, d16, d18
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	str	r1, [sp, #584]          @ 4-byte Spill
	str	r0, [sp, #580]          @ 4-byte Spill
	bhi	.LBB93_342
@ BB#322:                               @   in Loop: Header=BB93_319 Depth=1
	movw	r0, #3
	ldr	r1, [r11, #-164]
	movw	r2, :lower16:L3psycho_anal.mld_l
	movt	r2, :upper16:L3psycho_anal.mld_l
	add	r2, r2, r1, lsl #3
	vldr	d16, [r2]
	ldr	r2, [r11, #-1032]
	movw	r3, :lower16:L3psycho_anal.en
	movt	r3, :upper16:L3psycho_anal.en
	mov	r12, #488
	mla	r2, r2, r12, r3
	add	r1, r2, r1, lsl #3
	vldr	d17, [r1]
	vmul.f64	d16, d16, d17
	sub	lr, r11, #1024
	vstr	d16, [lr, #-0]
	ldr	r1, [r11, #-1028]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mla	r1, r1, r12, r2
	ldr	r3, [r11, #-164]
	add	r1, r1, r3, lsl #3
	vldr	d16, [r1]
	ldr	r1, [r11, #-1032]
	mla	r1, r1, r12, r2
	mov	r2, r1
	add	r1, r1, r3, lsl #3
	vldr	d17, [r1]
	sub	lr, r11, #1024
	vldr	d18, [lr, #-0]
	vcmpe.f64	d17, d18
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #576]          @ 4-byte Spill
	vstr	d16, [sp, #568]         @ 8-byte Spill
	str	r2, [sp, #564]          @ 4-byte Spill
	bpl	.LBB93_324
@ BB#323:                               @   in Loop: Header=BB93_319 Depth=1
	movw	r0, #3
	ldr	r1, [r11, #-1032]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	mov	r2, r1
	ldr	r3, [r11, #-164]
	add	r1, r1, r3, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #560]          @ 4-byte Spill
	str	r2, [sp, #556]          @ 4-byte Spill
	vstr	d16, [sp, #544]         @ 8-byte Spill
	b	.LBB93_325
.LBB93_324:                             @   in Loop: Header=BB93_319 Depth=1
	sub	lr, r11, #1024
	vldr	d16, [lr, #-0]
	vstr	d16, [sp, #544]         @ 8-byte Spill
.LBB93_325:                             @   in Loop: Header=BB93_319 Depth=1
	vldr	d16, [sp, #544]         @ 8-byte Reload
	vldr	d17, [sp, #568]         @ 8-byte Reload
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	ble	.LBB93_327
@ BB#326:                               @   in Loop: Header=BB93_319 Depth=1
	movw	r0, #3
	ldr	r1, [r11, #-1028]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	mov	r2, r1
	ldr	r3, [r11, #-164]
	add	r1, r1, r3, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #540]          @ 4-byte Spill
	str	r2, [sp, #536]          @ 4-byte Spill
	vstr	d16, [sp, #528]         @ 8-byte Spill
	b	.LBB93_331
.LBB93_327:                             @   in Loop: Header=BB93_319 Depth=1
	movw	r0, #3
	ldr	r1, [r11, #-1032]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	mov	r2, r1
	ldr	r3, [r11, #-164]
	add	r1, r1, r3, lsl #3
	vldr	d16, [r1]
	sub	lr, r11, #1024
	vldr	d17, [lr, #-0]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #524]          @ 4-byte Spill
	str	r2, [sp, #520]          @ 4-byte Spill
	bpl	.LBB93_329
@ BB#328:                               @   in Loop: Header=BB93_319 Depth=1
	movw	r0, #3
	ldr	r1, [r11, #-1032]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	mov	r2, r1
	ldr	r3, [r11, #-164]
	add	r1, r1, r3, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #516]          @ 4-byte Spill
	str	r2, [sp, #512]          @ 4-byte Spill
	vstr	d16, [sp, #504]         @ 8-byte Spill
	b	.LBB93_330
.LBB93_329:                             @   in Loop: Header=BB93_319 Depth=1
	sub	lr, r11, #1024
	vldr	d16, [lr, #-0]
	vstr	d16, [sp, #504]         @ 8-byte Spill
.LBB93_330:                             @   in Loop: Header=BB93_319 Depth=1
	vldr	d16, [sp, #504]         @ 8-byte Reload
	vstr	d16, [sp, #528]         @ 8-byte Spill
.LBB93_331:                             @   in Loop: Header=BB93_319 Depth=1
	vldr	d16, [sp, #528]         @ 8-byte Reload
	movw	r0, #3
	vstr	d16, [r11, #-1016]
	ldr	r1, [r11, #-164]
	movw	r2, :lower16:L3psycho_anal.mld_l
	movt	r2, :upper16:L3psycho_anal.mld_l
	add	r2, r2, r1, lsl #3
	vldr	d16, [r2]
	ldr	r2, [r11, #-1028]
	movw	r3, :lower16:L3psycho_anal.en
	movt	r3, :upper16:L3psycho_anal.en
	mov	r12, #488
	mla	r2, r2, r12, r3
	add	r1, r2, r1, lsl #3
	vldr	d17, [r1]
	vmul.f64	d16, d16, d17
	sub	lr, r11, #1024
	vstr	d16, [lr, #-0]
	ldr	r1, [r11, #-1032]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mla	r1, r1, r12, r2
	ldr	r3, [r11, #-164]
	add	r1, r1, r3, lsl #3
	vldr	d16, [r1]
	ldr	r1, [r11, #-1028]
	mla	r1, r1, r12, r2
	mov	r2, r1
	add	r1, r1, r3, lsl #3
	vldr	d17, [r1]
	sub	lr, r11, #1024
	vldr	d18, [lr, #-0]
	vcmpe.f64	d17, d18
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #500]          @ 4-byte Spill
	vstr	d16, [sp, #488]         @ 8-byte Spill
	str	r2, [sp, #484]          @ 4-byte Spill
	bpl	.LBB93_333
@ BB#332:                               @   in Loop: Header=BB93_319 Depth=1
	movw	r0, #3
	ldr	r1, [r11, #-1028]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	mov	r2, r1
	ldr	r3, [r11, #-164]
	add	r1, r1, r3, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #480]          @ 4-byte Spill
	str	r2, [sp, #476]          @ 4-byte Spill
	vstr	d16, [sp, #464]         @ 8-byte Spill
	b	.LBB93_334
.LBB93_333:                             @   in Loop: Header=BB93_319 Depth=1
	sub	lr, r11, #1024
	vldr	d16, [lr, #-0]
	vstr	d16, [sp, #464]         @ 8-byte Spill
.LBB93_334:                             @   in Loop: Header=BB93_319 Depth=1
	vldr	d16, [sp, #464]         @ 8-byte Reload
	vldr	d17, [sp, #488]         @ 8-byte Reload
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	ble	.LBB93_336
@ BB#335:                               @   in Loop: Header=BB93_319 Depth=1
	movw	r0, #3
	ldr	r1, [r11, #-1032]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	mov	r2, r1
	ldr	r3, [r11, #-164]
	add	r1, r1, r3, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #460]          @ 4-byte Spill
	str	r2, [sp, #456]          @ 4-byte Spill
	vstr	d16, [sp, #448]         @ 8-byte Spill
	b	.LBB93_341
.LBB93_336:                             @   in Loop: Header=BB93_319 Depth=1
	movw	r0, #3
	ldr	r1, [r11, #-1028]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	mov	r2, r1
	ldr	r3, [r11, #-164]
	add	r1, r1, r3, lsl #3
	vldr	d16, [r1]
	sub	lr, r11, #1024
	vldr	d17, [lr, #-0]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #444]          @ 4-byte Spill
	str	r2, [sp, #440]          @ 4-byte Spill
	bpl	.LBB93_339
@ BB#337:                               @   in Loop: Header=BB93_319 Depth=1
	movw	r0, #3
	ldr	r1, [r11, #-1028]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	mov	r2, r1
	ldr	r3, [r11, #-164]
	add	r1, r1, r3, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #436]          @ 4-byte Spill
	str	r2, [sp, #432]          @ 4-byte Spill
	vstr	d16, [sp, #424]         @ 8-byte Spill
	b	.LBB93_340
	.p2align	3
@ BB#338:
.LCPI93_41:
	.long	343597384               @ double 1.5800000000000001
	.long	1073301422
.LBB93_339:                             @   in Loop: Header=BB93_319 Depth=1
	sub	lr, r11, #1024
	vldr	d16, [lr, #-0]
	vstr	d16, [sp, #424]         @ 8-byte Spill
.LBB93_340:                             @   in Loop: Header=BB93_319 Depth=1
	vldr	d16, [sp, #424]         @ 8-byte Reload
	vstr	d16, [sp, #448]         @ 8-byte Spill
.LBB93_341:                             @   in Loop: Header=BB93_319 Depth=1
	vldr	d16, [sp, #448]         @ 8-byte Reload
	movw	r0, #3
	vstr	d16, [r11, #-1008]
	vldr	d16, [r11, #-1016]
	ldr	r1, [r11, #-1028]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	ldr	r12, [r11, #-164]
	add	r1, r1, r12, lsl #3
	vstr	d16, [r1]
	vldr	d16, [r11, #-1008]
	ldr	r1, [r11, #-1032]
	mla	r1, r1, r3, r2
	mov	r2, r1
	ldr	r3, [r11, #-164]
	add	r1, r1, r3, lsl #3
	vstr	d16, [r1]
	str	r0, [sp, #420]          @ 4-byte Spill
	str	r2, [sp, #416]          @ 4-byte Spill
.LBB93_342:                             @   in Loop: Header=BB93_319 Depth=1
	b	.LBB93_343
.LBB93_343:                             @   in Loop: Header=BB93_319 Depth=1
	ldr	r0, [r11, #-164]
	add	r0, r0, #1
	str	r0, [r11, #-164]
	b	.LBB93_319
.LBB93_344:
	movw	r0, #0
	str	r0, [r11, #-164]
.LBB93_345:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB93_347 Depth 2
	ldr	r0, [r11, #-164]
	cmp	r0, #12
	bge	.LBB93_373
@ BB#346:                               @   in Loop: Header=BB93_345 Depth=1
	movw	r0, #0
	str	r0, [r11, #-168]
.LBB93_347:                             @   Parent Loop BB93_345 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-168]
	cmp	r0, #3
	bge	.LBB93_371
@ BB#348:                               @   in Loop: Header=BB93_347 Depth=2
	vldr	d16, .LCPI93_41
	movw	r0, #3
	ldr	r1, [r11, #-164]
	add	r1, r1, r1, lsl #1
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	ldr	r3, [r11, #-168]
	add	r1, r2, r1, lsl #3
	add	r2, r1, r3, lsl #3
	vldr	d17, [r2, #176]
	add	r1, r1, #664
	add	r1, r1, r3, lsl #3
	vldr	d18, [r1]
	vmul.f64	d16, d16, d18
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #412]          @ 4-byte Spill
	bhi	.LBB93_369
@ BB#349:                               @   in Loop: Header=BB93_347 Depth=2
	vldr	d16, .LCPI93_41
	movw	r0, #3
	ldr	r1, [r11, #-164]
	add	r1, r1, r1, lsl #1
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	ldr	r3, [r11, #-168]
	add	r1, r2, r1, lsl #3
	add	r2, r1, r3, lsl #3
	vldr	d17, [r2, #664]
	add	r1, r1, #176
	add	r1, r1, r3, lsl #3
	vldr	d18, [r1]
	vmul.f64	d16, d16, d18
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #408]          @ 4-byte Spill
	bhi	.LBB93_369
@ BB#350:                               @   in Loop: Header=BB93_347 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-164]
	movw	r2, :lower16:L3psycho_anal.mld_s
	movt	r2, :upper16:L3psycho_anal.mld_s
	add	r2, r2, r1, lsl #3
	vldr	d16, [r2]
	ldr	r2, [r11, #-1032]
	movw	r3, :lower16:L3psycho_anal.en
	movt	r3, :upper16:L3psycho_anal.en
	mov	r12, #488
	mla	r2, r2, r12, r3
	add	r1, r1, r1, lsl #1
	add	r1, r2, r1, lsl #3
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1, #176]
	vmul.f64	d16, d16, d17
	sub	r4, r11, #1024
	vstr	d16, [r4, #-0]
	ldr	r1, [r11, #-1028]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mla	r1, r1, r12, r2
	ldr	r3, [r11, #-164]
	add	r3, r3, r3, lsl #1
	add	r1, r1, r3, lsl #3
	ldr	lr, [r11, #-168]
	add	r1, r1, lr, lsl #3
	vldr	d16, [r1, #176]
	ldr	r1, [r11, #-1032]
	mla	r1, r1, r12, r2
	add	r1, r1, r3, lsl #3
	add	r1, r1, #176
	add	r1, r1, lr, lsl #3
	vldr	d17, [r1]
	sub	lr, r11, #1024
	vldr	d18, [lr, #-0]
	vcmpe.f64	d17, d18
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #404]          @ 4-byte Spill
	vstr	d16, [sp, #392]         @ 8-byte Spill
	bpl	.LBB93_352
@ BB#351:                               @   in Loop: Header=BB93_347 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-1032]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	ldr	r2, [r11, #-164]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #3
	add	r1, r1, #176
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #388]          @ 4-byte Spill
	vstr	d16, [sp, #376]         @ 8-byte Spill
	b	.LBB93_353
.LBB93_352:                             @   in Loop: Header=BB93_347 Depth=2
	sub	lr, r11, #1024
	vldr	d16, [lr, #-0]
	vstr	d16, [sp, #376]         @ 8-byte Spill
.LBB93_353:                             @   in Loop: Header=BB93_347 Depth=2
	vldr	d16, [sp, #376]         @ 8-byte Reload
	vldr	d17, [sp, #392]         @ 8-byte Reload
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	ble	.LBB93_355
@ BB#354:                               @   in Loop: Header=BB93_347 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-1028]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	ldr	r2, [r11, #-164]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #3
	add	r1, r1, #176
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #372]          @ 4-byte Spill
	vstr	d16, [sp, #360]         @ 8-byte Spill
	b	.LBB93_359
.LBB93_355:                             @   in Loop: Header=BB93_347 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-1032]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	ldr	r2, [r11, #-164]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #3
	add	r1, r1, #176
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	sub	lr, r11, #1024
	vldr	d17, [lr, #-0]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #356]          @ 4-byte Spill
	bpl	.LBB93_357
@ BB#356:                               @   in Loop: Header=BB93_347 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-1032]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	ldr	r2, [r11, #-164]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #3
	add	r1, r1, #176
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #352]          @ 4-byte Spill
	vstr	d16, [sp, #344]         @ 8-byte Spill
	b	.LBB93_358
.LBB93_357:                             @   in Loop: Header=BB93_347 Depth=2
	sub	lr, r11, #1024
	vldr	d16, [lr, #-0]
	vstr	d16, [sp, #344]         @ 8-byte Spill
.LBB93_358:                             @   in Loop: Header=BB93_347 Depth=2
	vldr	d16, [sp, #344]         @ 8-byte Reload
	vstr	d16, [sp, #360]         @ 8-byte Spill
.LBB93_359:                             @   in Loop: Header=BB93_347 Depth=2
	vldr	d16, [sp, #360]         @ 8-byte Reload
	movw	r0, #3
	vstr	d16, [r11, #-1016]
	ldr	r1, [r11, #-164]
	movw	r2, :lower16:L3psycho_anal.mld_s
	movt	r2, :upper16:L3psycho_anal.mld_s
	add	r2, r2, r1, lsl #3
	vldr	d16, [r2]
	ldr	r2, [r11, #-1028]
	movw	r3, :lower16:L3psycho_anal.en
	movt	r3, :upper16:L3psycho_anal.en
	mov	r12, #488
	mla	r2, r2, r12, r3
	add	r1, r1, r1, lsl #1
	add	r1, r2, r1, lsl #3
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1, #176]
	vmul.f64	d16, d16, d17
	sub	r4, r11, #1024
	vstr	d16, [r4, #-0]
	ldr	r1, [r11, #-1032]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mla	r1, r1, r12, r2
	ldr	r3, [r11, #-164]
	add	r3, r3, r3, lsl #1
	add	r1, r1, r3, lsl #3
	ldr	lr, [r11, #-168]
	add	r1, r1, lr, lsl #3
	vldr	d16, [r1, #176]
	ldr	r1, [r11, #-1028]
	mla	r1, r1, r12, r2
	add	r1, r1, r3, lsl #3
	add	r1, r1, #176
	add	r1, r1, lr, lsl #3
	vldr	d17, [r1]
	sub	lr, r11, #1024
	vldr	d18, [lr, #-0]
	vcmpe.f64	d17, d18
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #340]          @ 4-byte Spill
	vstr	d16, [sp, #328]         @ 8-byte Spill
	bpl	.LBB93_361
@ BB#360:                               @   in Loop: Header=BB93_347 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-1028]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	ldr	r2, [r11, #-164]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #3
	add	r1, r1, #176
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #324]          @ 4-byte Spill
	vstr	d16, [sp, #312]         @ 8-byte Spill
	b	.LBB93_362
.LBB93_361:                             @   in Loop: Header=BB93_347 Depth=2
	sub	lr, r11, #1024
	vldr	d16, [lr, #-0]
	vstr	d16, [sp, #312]         @ 8-byte Spill
.LBB93_362:                             @   in Loop: Header=BB93_347 Depth=2
	vldr	d16, [sp, #312]         @ 8-byte Reload
	vldr	d17, [sp, #328]         @ 8-byte Reload
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	ble	.LBB93_364
@ BB#363:                               @   in Loop: Header=BB93_347 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-1032]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	ldr	r2, [r11, #-164]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #3
	add	r1, r1, #176
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #308]          @ 4-byte Spill
	vstr	d16, [sp, #296]         @ 8-byte Spill
	b	.LBB93_368
.LBB93_364:                             @   in Loop: Header=BB93_347 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-1028]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	ldr	r2, [r11, #-164]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #3
	add	r1, r1, #176
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	sub	lr, r11, #1024
	vldr	d17, [lr, #-0]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #292]          @ 4-byte Spill
	bpl	.LBB93_366
@ BB#365:                               @   in Loop: Header=BB93_347 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-1028]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	ldr	r2, [r11, #-164]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #3
	add	r1, r1, #176
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #288]          @ 4-byte Spill
	vstr	d16, [sp, #280]         @ 8-byte Spill
	b	.LBB93_367
.LBB93_366:                             @   in Loop: Header=BB93_347 Depth=2
	sub	lr, r11, #1024
	vldr	d16, [lr, #-0]
	vstr	d16, [sp, #280]         @ 8-byte Spill
.LBB93_367:                             @   in Loop: Header=BB93_347 Depth=2
	vldr	d16, [sp, #280]         @ 8-byte Reload
	vstr	d16, [sp, #296]         @ 8-byte Spill
.LBB93_368:                             @   in Loop: Header=BB93_347 Depth=2
	vldr	d16, [sp, #296]         @ 8-byte Reload
	movw	r0, #3
	vstr	d16, [r11, #-1008]
	vldr	d16, [r11, #-1016]
	ldr	r1, [r11, #-1028]
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	mov	r3, #488
	mla	r1, r1, r3, r2
	ldr	r12, [r11, #-164]
	add	r12, r12, r12, lsl #1
	add	r1, r1, r12, lsl #3
	ldr	r12, [r11, #-168]
	add	r1, r1, r12, lsl #3
	vstr	d16, [r1, #176]
	vldr	d16, [r11, #-1008]
	ldr	r1, [r11, #-1032]
	mla	r1, r1, r3, r2
	ldr	r2, [r11, #-164]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #3
	add	r1, r1, #176
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	str	r0, [sp, #276]          @ 4-byte Spill
.LBB93_369:                             @   in Loop: Header=BB93_347 Depth=2
	b	.LBB93_370
.LBB93_370:                             @   in Loop: Header=BB93_347 Depth=2
	ldr	r0, [r11, #-168]
	add	r0, r0, #1
	str	r0, [r11, #-168]
	b	.LBB93_347
.LBB93_371:                             @   in Loop: Header=BB93_345 Depth=1
	b	.LBB93_372
.LBB93_372:                             @   in Loop: Header=BB93_345 Depth=1
	ldr	r0, [r11, #-164]
	add	r0, r0, #1
	str	r0, [r11, #-164]
	b	.LBB93_345
.LBB93_373:
	b	.LBB93_374
.LBB93_374:
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #32]
	cmp	r0, #1
	bne	.LBB93_415
@ BB#375:
	movw	r0, #5
	vldr	d16, .LCPI93_42
	sub	lr, r11, #1024
	vstr	d16, [lr, #-40]
	sub	lr, r11, #1024
	vstr	d16, [lr, #-48]
	str	r0, [r11, #-164]
.LBB93_376:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-164]
	cmp	r0, #21
	bge	.LBB93_388
@ BB#377:                               @   in Loop: Header=BB93_376 Depth=1
	movw	r0, :lower16:L3psycho_anal.thm
	movt	r0, :upper16:L3psycho_anal.thm
	add	r0, r0, #488
	movw	r1, #3
	ldr	r2, [r11, #-164]
	movw	r3, :lower16:L3psycho_anal.thm
	movt	r3, :upper16:L3psycho_anal.thm
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	add	r2, r2, #488
	vldr	d17, [r2]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #272]          @ 4-byte Spill
	str	r1, [sp, #268]          @ 4-byte Spill
	bpl	.LBB93_379
@ BB#378:                               @   in Loop: Header=BB93_376 Depth=1
	movw	r0, :lower16:L3psycho_anal.thm
	movt	r0, :upper16:L3psycho_anal.thm
	movw	r1, #3
	ldr	r2, [r11, #-164]
	movw	r3, :lower16:L3psycho_anal.thm
	movt	r3, :upper16:L3psycho_anal.thm
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	str	r0, [sp, #264]          @ 4-byte Spill
	str	r1, [sp, #260]          @ 4-byte Spill
	vstr	d16, [sp, #248]         @ 8-byte Spill
	b	.LBB93_380
.LBB93_379:                             @   in Loop: Header=BB93_376 Depth=1
	movw	r0, :lower16:L3psycho_anal.thm
	movt	r0, :upper16:L3psycho_anal.thm
	add	r0, r0, #488
	movw	r1, #3
	ldr	r2, [r11, #-164]
	movw	r3, :lower16:L3psycho_anal.thm
	movt	r3, :upper16:L3psycho_anal.thm
	add	r2, r3, r2, lsl #3
	add	r2, r2, #488
	vldr	d16, [r2]
	str	r0, [sp, #244]          @ 4-byte Spill
	str	r1, [sp, #240]          @ 4-byte Spill
	vstr	d16, [sp, #248]         @ 8-byte Spill
.LBB93_380:                             @   in Loop: Header=BB93_376 Depth=1
	vldr	d16, [sp, #248]         @ 8-byte Reload
	movw	r0, :lower16:L3psycho_anal.thm
	movt	r0, :upper16:L3psycho_anal.thm
	add	r0, r0, #488
	movw	r1, #3
	sub	lr, r11, #1024
	vstr	d16, [lr, #-24]
	ldr	r2, [r11, #-164]
	movw	r3, :lower16:L3psycho_anal.thm
	movt	r3, :upper16:L3psycho_anal.thm
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	add	r2, r2, #488
	vldr	d17, [r2]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r1, [sp, #236]          @ 4-byte Spill
	str	r0, [sp, #232]          @ 4-byte Spill
	ble	.LBB93_382
@ BB#381:                               @   in Loop: Header=BB93_376 Depth=1
	movw	r0, :lower16:L3psycho_anal.thm
	movt	r0, :upper16:L3psycho_anal.thm
	movw	r1, #3
	ldr	r2, [r11, #-164]
	movw	r3, :lower16:L3psycho_anal.thm
	movt	r3, :upper16:L3psycho_anal.thm
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	str	r0, [sp, #228]          @ 4-byte Spill
	str	r1, [sp, #224]          @ 4-byte Spill
	vstr	d16, [sp, #216]         @ 8-byte Spill
	b	.LBB93_383
.LBB93_382:                             @   in Loop: Header=BB93_376 Depth=1
	movw	r0, :lower16:L3psycho_anal.thm
	movt	r0, :upper16:L3psycho_anal.thm
	add	r0, r0, #488
	movw	r1, #3
	ldr	r2, [r11, #-164]
	movw	r3, :lower16:L3psycho_anal.thm
	movt	r3, :upper16:L3psycho_anal.thm
	add	r2, r3, r2, lsl #3
	add	r2, r2, #488
	vldr	d16, [r2]
	str	r0, [sp, #212]          @ 4-byte Spill
	str	r1, [sp, #208]          @ 4-byte Spill
	vstr	d16, [sp, #216]         @ 8-byte Spill
.LBB93_383:                             @   in Loop: Header=BB93_376 Depth=1
	vldr	d16, [sp, #216]         @ 8-byte Reload
	vldr	d17, .LCPI93_43
	sub	lr, r11, #1024
	vstr	d16, [lr, #-32]
	sub	lr, r11, #1024
	vldr	d16, [lr, #-32]
	sub	lr, r11, #1024
	vldr	d18, [lr, #-24]
	vmul.f64	d17, d17, d18
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	blt	.LBB93_385
@ BB#384:                               @   in Loop: Header=BB93_376 Depth=1
	vmov.f64	d16, #3.000000e+00
	sub	lr, r11, #1024
	vstr	d16, [lr, #-16]
	b	.LBB93_386
.LBB93_385:                             @   in Loop: Header=BB93_376 Depth=1
	sub	r4, r11, #1024
	vldr	d16, [r4, #-32]
	sub	r4, r11, #1024
	vldr	d17, [r4, #-24]
	vdiv.f64	d16, d16, d17
	vmov	r0, r1, d16
	bl	log10
	vmov	d16, r0, r1
	sub	lr, r11, #1024
	vstr	d16, [lr, #-16]
.LBB93_386:                             @   in Loop: Header=BB93_376 Depth=1
	vmov.f64	d16, #1.000000e+00
	sub	lr, r11, #1024
	vldr	d17, [lr, #-16]
	sub	lr, r11, #1024
	vldr	d18, [lr, #-40]
	vadd.f64	d17, d18, d17
	sub	lr, r11, #1024
	vstr	d17, [lr, #-40]
	sub	lr, r11, #1024
	vldr	d17, [lr, #-48]
	vadd.f64	d16, d17, d16
	sub	lr, r11, #1024
	vstr	d16, [lr, #-48]
@ BB#387:                               @   in Loop: Header=BB93_376 Depth=1
	ldr	r0, [r11, #-164]
	add	r0, r0, #1
	str	r0, [r11, #-164]
	b	.LBB93_376
.LBB93_388:
	vmov.f64	d16, #5.000000e-01
	vldr	d17, .LCPI93_44
	sub	lr, r11, #1024
	vldr	d18, [lr, #-40]
	sub	lr, r11, #1024
	vldr	d19, [lr, #-48]
	vdiv.f64	d18, d18, d19
	vmul.f64	d17, d18, d17
	vstr	d17, [r11, #-112]
	vldr	d17, [r11, #-112]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB93_390
@ BB#389:
	vldr	d16, [r11, #-112]
	vstr	d16, [sp, #200]         @ 8-byte Spill
	b	.LBB93_391
.LBB93_390:
	vmov.f64	d16, #5.000000e-01
	vstr	d16, [sp, #200]         @ 8-byte Spill
	b	.LBB93_391
.LBB93_391:
	vldr	d16, [sp, #200]         @ 8-byte Reload
	movw	r0, #0
	vldr	d17, .LCPI93_42
	vstr	d16, [r11, #-112]
	sub	lr, r11, #1024
	vstr	d17, [lr, #-40]
	sub	lr, r11, #1024
	vstr	d17, [lr, #-48]
	str	r0, [r11, #-168]
.LBB93_392:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB93_394 Depth 2
	ldr	r0, [r11, #-168]
	cmp	r0, #3
	bge	.LBB93_411
@ BB#393:                               @   in Loop: Header=BB93_392 Depth=1
	movw	r0, #3
	str	r0, [r11, #-164]
.LBB93_394:                             @   Parent Loop BB93_392 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-164]
	cmp	r0, #12
	bge	.LBB93_409
@ BB#395:                               @   in Loop: Header=BB93_394 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-164]
	add	r1, r1, r1, lsl #1
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	ldr	r3, [r11, #-168]
	add	r1, r2, r1, lsl #3
	add	r2, r1, r3, lsl #3
	vldr	d16, [r2, #176]
	add	r1, r1, #664
	add	r1, r1, r3, lsl #3
	vldr	d17, [r1]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #196]          @ 4-byte Spill
	bpl	.LBB93_397
@ BB#396:                               @   in Loop: Header=BB93_394 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-164]
	add	r1, r1, r1, lsl #1
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	add	r1, r2, r1, lsl #3
	add	r1, r1, #176
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #192]          @ 4-byte Spill
	vstr	d16, [sp, #184]         @ 8-byte Spill
	b	.LBB93_398
.LBB93_397:                             @   in Loop: Header=BB93_394 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-164]
	add	r1, r1, r1, lsl #1
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	add	r1, r2, r1, lsl #3
	add	r1, r1, #664
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #180]          @ 4-byte Spill
	vstr	d16, [sp, #184]         @ 8-byte Spill
.LBB93_398:                             @   in Loop: Header=BB93_394 Depth=2
	vldr	d16, [sp, #184]         @ 8-byte Reload
	movw	r0, #3
	sub	lr, r11, #1024
	vstr	d16, [lr, #-24]
	ldr	r1, [r11, #-164]
	add	r1, r1, r1, lsl #1
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	ldr	r3, [r11, #-168]
	add	r1, r2, r1, lsl #3
	add	r2, r1, r3, lsl #3
	vldr	d16, [r2, #176]
	add	r1, r1, #664
	add	r1, r1, r3, lsl #3
	vldr	d17, [r1]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #176]          @ 4-byte Spill
	ble	.LBB93_401
@ BB#399:                               @   in Loop: Header=BB93_394 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-164]
	add	r1, r1, r1, lsl #1
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	add	r1, r2, r1, lsl #3
	add	r1, r1, #176
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #172]          @ 4-byte Spill
	vstr	d16, [sp, #160]         @ 8-byte Spill
	b	.LBB93_402
	.p2align	3
@ BB#400:
.LCPI93_42:
	.long	0                       @ double 0
	.long	0
.LBB93_401:                             @   in Loop: Header=BB93_394 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-164]
	add	r1, r1, r1, lsl #1
	movw	r2, :lower16:L3psycho_anal.thm
	movt	r2, :upper16:L3psycho_anal.thm
	add	r1, r2, r1, lsl #3
	add	r1, r1, #664
	ldr	r2, [r11, #-168]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #156]          @ 4-byte Spill
	vstr	d16, [sp, #160]         @ 8-byte Spill
.LBB93_402:                             @   in Loop: Header=BB93_394 Depth=2
	vldr	d16, [sp, #160]         @ 8-byte Reload
	vldr	d17, .LCPI93_43
	sub	lr, r11, #1024
	vstr	d16, [lr, #-32]
	sub	lr, r11, #1024
	vldr	d16, [lr, #-32]
	sub	lr, r11, #1024
	vldr	d18, [lr, #-24]
	vmul.f64	d17, d17, d18
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	blt	.LBB93_406
@ BB#403:                               @   in Loop: Header=BB93_394 Depth=2
	vmov.f64	d16, #3.000000e+00
	sub	lr, r11, #1024
	vstr	d16, [lr, #-16]
	b	.LBB93_407
	.p2align	3
@ BB#404:
.LCPI93_43:
	.long	0                       @ double 1000
	.long	1083129856
	.p2align	3
@ BB#405:
.LCPI93_44:
	.long	1717986918              @ double 0.69999999999999996
	.long	1072064102
.LBB93_406:                             @   in Loop: Header=BB93_394 Depth=2
	sub	r4, r11, #1024
	vldr	d16, [r4, #-32]
	sub	r4, r11, #1024
	vldr	d17, [r4, #-24]
	vdiv.f64	d16, d16, d17
	vmov	r0, r1, d16
	bl	log10
	vmov	d16, r0, r1
	sub	lr, r11, #1024
	vstr	d16, [lr, #-16]
.LBB93_407:                             @   in Loop: Header=BB93_394 Depth=2
	vmov.f64	d16, #1.000000e+00
	sub	lr, r11, #1024
	vldr	d17, [lr, #-16]
	sub	lr, r11, #1024
	vldr	d18, [lr, #-40]
	vadd.f64	d17, d18, d17
	sub	lr, r11, #1024
	vstr	d17, [lr, #-40]
	sub	lr, r11, #1024
	vldr	d17, [lr, #-48]
	vadd.f64	d16, d17, d16
	sub	lr, r11, #1024
	vstr	d16, [lr, #-48]
@ BB#408:                               @   in Loop: Header=BB93_394 Depth=2
	ldr	r0, [r11, #-164]
	add	r0, r0, #1
	str	r0, [r11, #-164]
	b	.LBB93_394
.LBB93_409:                             @   in Loop: Header=BB93_392 Depth=1
	b	.LBB93_410
.LBB93_410:                             @   in Loop: Header=BB93_392 Depth=1
	ldr	r0, [r11, #-168]
	add	r0, r0, #1
	str	r0, [r11, #-168]
	b	.LBB93_392
.LBB93_411:
	vmov.f64	d16, #5.000000e-01
	vldr	d17, .LCPI93_44
	sub	lr, r11, #1024
	vldr	d18, [lr, #-40]
	sub	lr, r11, #1024
	vldr	d19, [lr, #-48]
	vdiv.f64	d18, d18, d19
	vmul.f64	d17, d18, d17
	vstr	d17, [r11, #-120]
	vldr	d17, [r11, #-120]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB93_413
@ BB#412:
	vldr	d16, [r11, #-120]
	vstr	d16, [sp, #144]         @ 8-byte Spill
	b	.LBB93_414
.LBB93_413:
	vmov.f64	d16, #5.000000e-01
	vstr	d16, [sp, #144]         @ 8-byte Spill
	b	.LBB93_414
.LBB93_414:
	vldr	d16, [sp, #144]         @ 8-byte Reload
	vstr	d16, [r11, #-120]
.LBB93_415:
	movw	r0, #0
	str	r0, [r11, #-144]
.LBB93_416:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-144]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB93_419
@ BB#417:                               @   in Loop: Header=BB93_416 Depth=1
	movw	r0, #0
	sub	r1, r11, #128
	movw	r2, #2
	ldr	r3, [r11, #-144]
	sub	r12, r11, #128
	add	r3, r12, r3, lsl #2
	str	r0, [r3]
	str	r2, [sp, #140]          @ 4-byte Spill
	str	r1, [sp, #136]          @ 4-byte Spill
@ BB#418:                               @   in Loop: Header=BB93_416 Depth=1
	ldr	r0, [r11, #-144]
	add	r0, r0, #1
	str	r0, [r11, #-144]
	b	.LBB93_416
.LBB93_419:
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #184]
	cmp	r0, #2
	bne	.LBB93_428
@ BB#420:
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #144]
	cmp	r0, #0
	beq	.LBB93_422
@ BB#421:
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #32]
	cmp	r0, #1
	bne	.LBB93_427
.LBB93_422:
	movw	r0, #0
	ldr	r1, [r11, #-136]
	cmp	r1, #0
	str	r0, [sp, #132]          @ 4-byte Spill
	beq	.LBB93_424
@ BB#423:
	ldr	r0, [r11, #-132]
	cmp	r0, #0
	movw	r0, #0
	movne	r0, #1
	str	r0, [sp, #132]          @ 4-byte Spill
.LBB93_424:
	ldr	r0, [sp, #132]          @ 4-byte Reload
	and	r0, r0, #1
	str	r0, [r11, #-1076]
	ldr	r0, [r11, #-1076]
	cmp	r0, #0
	bne	.LBB93_426
@ BB#425:
	movw	r0, #0
	str	r0, [r11, #-136]
	str	r0, [r11, #-132]
.LBB93_426:
	b	.LBB93_427
.LBB93_427:
	b	.LBB93_428
.LBB93_428:
	movw	r0, #0
	str	r0, [r11, #-144]
.LBB93_429:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-144]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB93_445
@ BB#430:                               @   in Loop: Header=BB93_429 Depth=1
	sub	r0, r11, #136
	movw	r1, #2
	ldr	r2, [r11, #-144]
	sub	r3, r11, #136
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	cmp	r2, #0
	str	r0, [sp, #128]          @ 4-byte Spill
	str	r1, [sp, #124]          @ 4-byte Spill
	beq	.LBB93_438
@ BB#431:                               @   in Loop: Header=BB93_429 Depth=1
	ldr	r0, [r11, #-144]
	movw	r1, :lower16:L3psycho_anal.blocktype_old
	movt	r1, :upper16:L3psycho_anal.blocktype_old
	ldr	r0, [r1, r0, lsl #2]
	cmp	r0, #3
	str	r0, [sp, #120]          @ 4-byte Spill
	bhi	.LBB93_437
@ BB#432:                               @   in Loop: Header=BB93_429 Depth=1
	ldr	r0, [sp, #120]          @ 4-byte Reload
	lsl	r1, r0, #2
	adr	r2, .LJTI93_0
	ldr	r1, [r1, r2]
	mov	pc, r1
@ BB#433:
	.p2align	2
.LJTI93_0:
	.long	.LBB93_434
	.long	.LBB93_436
	.long	.LBB93_435
	.long	.LBB93_434
.LBB93_434:                             @   in Loop: Header=BB93_429 Depth=1
	movw	r0, #0
	sub	r1, r11, #128
	movw	r2, #2
	ldr	r3, [r11, #-144]
	sub	r12, r11, #128
	add	r3, r12, r3, lsl #2
	str	r0, [r3]
	str	r2, [sp, #116]          @ 4-byte Spill
	str	r1, [sp, #112]          @ 4-byte Spill
	b	.LBB93_437
.LBB93_435:                             @   in Loop: Header=BB93_429 Depth=1
	movw	r0, #3
	sub	r1, r11, #128
	movw	r2, #2
	ldr	r3, [r11, #-144]
	sub	r12, r11, #128
	add	r3, r12, r3, lsl #2
	str	r0, [r3]
	str	r2, [sp, #108]          @ 4-byte Spill
	str	r1, [sp, #104]          @ 4-byte Spill
	b	.LBB93_437
.LBB93_436:
	movw	r1, :lower16:.L.str.1.206
	movt	r1, :upper16:.L.str.1.206
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	str	r0, [sp, #100]          @ 4-byte Spill
	bl	abort
.LBB93_437:                             @   in Loop: Header=BB93_429 Depth=1
	b	.LBB93_443
.LBB93_438:                             @   in Loop: Header=BB93_429 Depth=1
	movw	r0, :lower16:L3psycho_anal.blocktype_old
	movt	r0, :upper16:L3psycho_anal.blocktype_old
	movw	r1, #2
	ldr	r2, [r11, #-144]
	sub	r3, r11, #128
	mov	r12, #2
	str	r12, [r3, r2, lsl #2]
	ldr	r2, [r11, #-144]
	movw	r3, :lower16:L3psycho_anal.blocktype_old
	movt	r3, :upper16:L3psycho_anal.blocktype_old
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	cmp	r2, #0
	str	r0, [sp, #96]           @ 4-byte Spill
	str	r1, [sp, #92]           @ 4-byte Spill
	bne	.LBB93_440
@ BB#439:                               @   in Loop: Header=BB93_429 Depth=1
	movw	r0, #1
	movw	r1, :lower16:L3psycho_anal.blocktype_old
	movt	r1, :upper16:L3psycho_anal.blocktype_old
	movw	r2, #2
	ldr	r3, [r11, #-144]
	movw	r12, :lower16:L3psycho_anal.blocktype_old
	movt	r12, :upper16:L3psycho_anal.blocktype_old
	add	r3, r12, r3, lsl #2
	str	r0, [r3]
	str	r2, [sp, #88]           @ 4-byte Spill
	str	r1, [sp, #84]           @ 4-byte Spill
.LBB93_440:                             @   in Loop: Header=BB93_429 Depth=1
	movw	r0, :lower16:L3psycho_anal.blocktype_old
	movt	r0, :upper16:L3psycho_anal.blocktype_old
	movw	r1, #2
	ldr	r2, [r11, #-144]
	movw	r3, :lower16:L3psycho_anal.blocktype_old
	movt	r3, :upper16:L3psycho_anal.blocktype_old
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	cmp	r2, #3
	str	r0, [sp, #80]           @ 4-byte Spill
	str	r1, [sp, #76]           @ 4-byte Spill
	bne	.LBB93_442
@ BB#441:                               @   in Loop: Header=BB93_429 Depth=1
	movw	r0, #2
	movw	r1, :lower16:L3psycho_anal.blocktype_old
	movt	r1, :upper16:L3psycho_anal.blocktype_old
	ldr	r2, [r11, #-144]
	movw	r3, :lower16:L3psycho_anal.blocktype_old
	movt	r3, :upper16:L3psycho_anal.blocktype_old
	add	r2, r3, r2, lsl #2
	str	r0, [r2]
	str	r1, [sp, #72]           @ 4-byte Spill
.LBB93_442:                             @   in Loop: Header=BB93_429 Depth=1
	b	.LBB93_443
.LBB93_443:                             @   in Loop: Header=BB93_429 Depth=1
	movw	r0, :lower16:L3psycho_anal.blocktype_old
	movt	r0, :upper16:L3psycho_anal.blocktype_old
	movw	r1, #2
	ldr	r2, [r11, #-144]
	movw	r3, :lower16:L3psycho_anal.blocktype_old
	movt	r3, :upper16:L3psycho_anal.blocktype_old
	ldr	r12, [r3, r2, lsl #2]
	ldr	lr, [r11, #-76]
	str	r12, [lr, r2, lsl #2]
	ldr	r2, [r11, #-144]
	sub	r12, r11, #128
	ldr	r12, [r12, r2, lsl #2]
	add	r2, r3, r2, lsl #2
	str	r12, [r2]
	str	r0, [sp, #68]           @ 4-byte Spill
	str	r1, [sp, #64]           @ 4-byte Spill
@ BB#444:                               @   in Loop: Header=BB93_429 Depth=1
	ldr	r0, [r11, #-144]
	add	r0, r0, #1
	str	r0, [r11, #-144]
	b	.LBB93_429
.LBB93_445:
	ldr	r0, [r11, #-76]
	ldr	r0, [r0]
	cmp	r0, #2
	bne	.LBB93_447
@ BB#446:
	movw	r0, :lower16:L3psycho_anal.ms_ratio_s_old
	movt	r0, :upper16:L3psycho_anal.ms_ratio_s_old
	vldr	d16, [r0]
	ldr	r0, [r11, #-48]
	vstr	d16, [r0]
	b	.LBB93_448
.LBB93_447:
	movw	r0, :lower16:L3psycho_anal.ms_ratio_l_old
	movt	r0, :upper16:L3psycho_anal.ms_ratio_l_old
	vldr	d16, [r0]
	ldr	r0, [r11, #-48]
	vstr	d16, [r0]
.LBB93_448:
	movw	r0, :lower16:L3psycho_anal.ms_ratio_l_old
	movt	r0, :upper16:L3psycho_anal.ms_ratio_l_old
	movw	r1, :lower16:L3psycho_anal.ms_ratio_s_old
	movt	r1, :upper16:L3psycho_anal.ms_ratio_s_old
	vldr	d16, [r11, #-120]
	vstr	d16, [r1]
	vldr	d16, [r11, #-112]
	vstr	d16, [r0]
	vldr	d16, [r11, #-112]
	ldr	r0, [r11, #-52]
	vstr	d16, [r0]
	ldr	r0, [r11, #-140]
	cmp	r0, #4
	bne	.LBB93_452
@ BB#449:
	vldr	d16, .LCPI93_0
	movw	r0, :lower16:L3psycho_anal.ms_ener_ratio_old
	movt	r0, :upper16:L3psycho_anal.ms_ener_ratio_old
	vldr	s0, [r11, #-88]
	vldr	s2, [r11, #-92]
	vadd.f32	s0, s0, s2
	sub	lr, r11, #1024
	vstr	s0, [lr, #-56]
	vldr	d17, [r0]
	ldr	r1, [r11, #-56]
	vstr	d17, [r1]
	vstr	d16, [r0]
	sub	lr, r11, #1024
	vldr	s0, [lr, #-56]
	vcmpe.f32	s0, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB93_451
@ BB#450:
	movw	r0, :lower16:L3psycho_anal.ms_ener_ratio_old
	movt	r0, :upper16:L3psycho_anal.ms_ener_ratio_old
	vldr	s0, [r11, #-88]
	sub	lr, r11, #1024
	vldr	s2, [lr, #-56]
	vdiv.f32	s0, s0, s2
	vcvt.f64.f32	d16, s0
	vstr	d16, [r0]
.LBB93_451:
	b	.LBB93_453
.LBB93_452:
	vldr	d16, .LCPI93_0
	ldr	r0, [r11, #-56]
	vstr	d16, [r0]
.LBB93_453:
	sub	sp, r11, #28
	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
	.p2align	3
@ BB#454:
.LCPI93_0:
	.long	0                       @ double 0
	.long	0
.Lfunc_end93:
	.size	L3psycho_anal, .Lfunc_end93-L3psycho_anal
	.cantunwind
	.fnend

	.globl	L3para_read
	.p2align	3
	.type	L3para_read,%function
	.code	32                      @ @L3para_read
L3para_read:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
	add	r11, sp, #28
	sub	sp, sp, #476
	sub	sp, sp, #1024
	vmov	d16, r0, r1
	ldr	r0, [r11, #64]
	ldr	r1, [r11, #60]
	ldr	r12, [r11, #56]
	ldr	lr, [r11, #52]
	ldr	r4, [r11, #48]
	ldr	r5, [r11, #44]
	ldr	r6, [r11, #40]
	ldr	r7, [r11, #36]
	ldr	r8, [r11, #32]
	ldr	r9, [r11, #28]
	ldr	r10, [r11, #24]
	str	r0, [sp, #284]          @ 4-byte Spill
	ldr	r0, [r11, #20]
	str	r0, [sp, #280]          @ 4-byte Spill
	ldr	r0, [r11, #16]
	str	r0, [sp, #276]          @ 4-byte Spill
	ldr	r0, [r11, #12]
	str	r0, [sp, #272]          @ 4-byte Spill
	ldr	r0, [r11, #8]
	str	r0, [sp, #268]          @ 4-byte Spill
	movw	r0, #0
	str	r0, [sp, #264]          @ 4-byte Spill
	movw	r0, #1
	str	r0, [sp, #260]          @ 4-byte Spill
	movw	r0, :lower16:psy_data
	movt	r0, :upper16:psy_data
	vstr	d16, [r11, #-40]
	str	r2, [r11, #-44]
	str	r3, [r11, #-48]
	ldr	r2, [sp, #268]          @ 4-byte Reload
	str	r2, [r11, #-52]
	ldr	r3, [sp, #272]          @ 4-byte Reload
	str	r3, [r11, #-56]
	ldr	r2, [sp, #276]          @ 4-byte Reload
	str	r2, [r11, #-60]
	ldr	r2, [sp, #280]          @ 4-byte Reload
	str	r2, [r11, #-64]
	str	r10, [r11, #-68]
	str	r9, [r11, #-72]
	str	r8, [r11, #-76]
	str	r7, [r11, #-80]
	str	r6, [r11, #-84]
	str	r5, [r11, #-88]
	str	r4, [r11, #-92]
	str	lr, [r11, #-96]
	str	r12, [r11, #-100]
	str	r1, [r11, #-104]
	ldr	r1, [sp, #284]          @ 4-byte Reload
	str	r1, [r11, #-108]
	ldr	r12, [sp, #264]         @ 4-byte Reload
	str	r12, [sp, #396]
	str	r0, [sp, #388]
	ldr	r0, [sp, #260]          @ 4-byte Reload
	str	r0, [sp, #356]
	str	r12, [sp, #364]
.LBB94_1:                               @ =>This Loop Header: Depth=1
                                        @     Child Loop BB94_4 Depth 2
                                        @       Child Loop BB94_8 Depth 3
	ldr	r0, [sp, #364]
	cmp	r0, #6
	bge	.LBB94_17
@ BB#2:                                 @   in Loop: Header=BB94_1 Depth=1
	ldr	r0, [sp, #388]
	add	r1, r0, #8
	str	r1, [sp, #388]
	vldr	d16, [r0]
	vstr	d16, [r11, #-120]
	ldr	r0, [sp, #388]
	add	r1, r0, #8
	str	r1, [sp, #388]
	vldr	d16, [r0]
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	str	r0, [sp, #392]
	ldr	r0, [sp, #392]
	add	r0, r0, #1
	str	r0, [sp, #392]
	vldr	d16, [r11, #-40]
	vldr	d17, [r11, #-120]
	ldr	r0, [sp, #356]
	vmov	s0, r0
	vcvt.f64.s32	d18, s0
	vdiv.f64	d17, d17, d18
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bne	.LBB94_14
@ BB#3:                                 @   in Loop: Header=BB94_1 Depth=1
	movw	r0, #0
	ldr	r1, [sp, #392]
	str	r1, [sp, #396]
	str	r0, [sp, #380]
	str	r0, [sp, #368]
.LBB94_4:                               @   Parent Loop BB94_1 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB94_8 Depth 3
	ldr	r0, [sp, #380]
	ldr	r1, [sp, #392]
	cmp	r0, r1
	bge	.LBB94_13
@ BB#5:                                 @   in Loop: Header=BB94_4 Depth=2
	sub	r0, r11, #624
	movw	r1, #3
	ldr	r2, [sp, #388]
	add	r3, r2, #8
	str	r3, [sp, #388]
	vldr	d16, [r2]
	vcvt.s32.f64	s0, d16
	vstr	s0, [sp, #376]
	ldr	r2, [sp, #388]
	add	r3, r2, #8
	str	r3, [sp, #388]
	vldr	d16, [r2]
	vcvt.s32.f64	s0, d16
	vmov	r2, s0
	ldr	r3, [r11, #-44]
	ldr	r12, [sp, #380]
	str	r2, [r3, r12, lsl #2]
	ldr	r2, [sp, #388]
	add	r3, r2, #8
	str	r3, [sp, #388]
	vldr	d16, [r2]
	vmov.f64	d17, #-6.000000e+00
	vadd.f64	d16, d16, d17
	vldr	d17, .LCPI94_8
	vmul.f64	d16, d16, d17
	vmov	r2, r3, d16
	str	r0, [sp, #256]          @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #252]          @ 4-byte Spill
	mov	r1, r3
	bl	exp
	ldr	r2, [r11, #-56]
	ldr	r3, [sp, #380]
	str	r0, [r2, r3, lsl #3]!
	str	r1, [r2, #4]
	ldr	r0, [sp, #388]
	add	r1, r0, #8
	str	r1, [sp, #388]
	vldr	d16, [r0]
	ldr	r0, [r11, #-60]
	ldr	r1, [sp, #380]
	add	r0, r0, r1, lsl #3
	vstr	d16, [r0]
	ldr	r0, [sp, #388]
	add	r1, r0, #8
	str	r1, [sp, #388]
	add	r1, r0, #16
	str	r1, [sp, #388]
	vldr	d16, [r0, #8]
	ldr	r0, [sp, #380]
	sub	r1, r11, #624
	add	r0, r1, r0, lsl #3
	vstr	d16, [r0]
	ldr	r0, [sp, #376]
	ldr	r1, [sp, #380]
	cmp	r0, r1
	beq	.LBB94_7
@ BB#6:
	movw	r1, :lower16:.L.str.2.207
	movt	r1, :upper16:.L.str.2.207
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	mvn	r1, #0
	str	r0, [sp, #248]          @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB94_7:                               @   in Loop: Header=BB94_4 Depth=2
	movw	r0, #0
	str	r0, [sp, #372]
.LBB94_8:                               @   Parent Loop BB94_1 Depth=1
                                        @     Parent Loop BB94_4 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	movw	r0, #2
	ldr	r1, [sp, #372]
	ldr	r2, [r11, #-44]
	ldr	r3, [sp, #380]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2]
	cmp	r1, r2
	str	r0, [sp, #244]          @ 4-byte Spill
	bge	.LBB94_11
@ BB#9:                                 @   in Loop: Header=BB94_8 Depth=3
	movw	r0, #2
	ldr	r1, [sp, #380]
	ldr	r2, [r11, #-52]
	ldr	r3, [sp, #368]
	add	r12, r3, #1
	str	r12, [sp, #368]
	add	r2, r2, r3, lsl #2
	str	r1, [r2]
	str	r0, [sp, #240]          @ 4-byte Spill
@ BB#10:                                @   in Loop: Header=BB94_8 Depth=3
	ldr	r0, [sp, #372]
	add	r0, r0, #1
	str	r0, [sp, #372]
	b	.LBB94_8
.LBB94_11:                              @   in Loop: Header=BB94_4 Depth=2
	b	.LBB94_12
.LBB94_12:                              @   in Loop: Header=BB94_4 Depth=2
	ldr	r0, [sp, #380]
	add	r0, r0, #1
	str	r0, [sp, #380]
	b	.LBB94_4
.LBB94_13:                              @   in Loop: Header=BB94_1 Depth=1
	b	.LBB94_15
.LBB94_14:                              @   in Loop: Header=BB94_1 Depth=1
	movw	r0, #3
	ldr	r1, [sp, #392]
	add	r1, r1, r1, lsl #1
	lsl	r1, r1, #1
	ldr	r2, [sp, #388]
	add	r1, r2, r1, lsl #3
	str	r1, [sp, #388]
	str	r0, [sp, #236]          @ 4-byte Spill
.LBB94_15:                              @   in Loop: Header=BB94_1 Depth=1
	b	.LBB94_16
.LBB94_16:                              @   in Loop: Header=BB94_1 Depth=1
	ldr	r0, [sp, #364]
	add	r0, r0, #1
	str	r0, [sp, #364]
	b	.LBB94_1
.LBB94_17:
	movw	r0, #0
	ldr	r1, [sp, #396]
	str	r1, [sp, #360]
	str	r0, [sp, #380]
.LBB94_18:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB94_20 Depth 2
	ldr	r0, [sp, #380]
	ldr	r1, [sp, #360]
	cmp	r0, r1
	bge	.LBB94_45
@ BB#19:                                @   in Loop: Header=BB94_18 Depth=1
	movw	r0, #0
	str	r0, [sp, #376]
.LBB94_20:                              @   Parent Loop BB94_18 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #376]
	ldr	r1, [sp, #360]
	cmp	r0, r1
	bge	.LBB94_43
@ BB#21:                                @   in Loop: Header=BB94_20 Depth=2
	ldr	r0, [sp, #376]
	ldr	r1, [sp, #380]
	cmp	r0, r1
	blt	.LBB94_23
@ BB#22:                                @   in Loop: Header=BB94_20 Depth=2
	vmov.f64	d16, #3.000000e+00
	sub	r0, r11, #624
	movw	r1, #3
	ldr	r2, [sp, #380]
	sub	r3, r11, #624
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	ldr	r2, [sp, #376]
	add	r2, r3, r2, lsl #3
	vldr	d18, [r2]
	vsub.f64	d17, d17, d18
	vmul.f64	d16, d17, d16
	vstr	d16, [sp, #344]
	str	r1, [sp, #232]          @ 4-byte Spill
	str	r0, [sp, #228]          @ 4-byte Spill
	b	.LBB94_24
.LBB94_23:                              @   in Loop: Header=BB94_20 Depth=2
	vmov.f64	d16, #1.500000e+00
	sub	r0, r11, #624
	movw	r1, #3
	ldr	r2, [sp, #380]
	sub	r3, r11, #624
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	ldr	r2, [sp, #376]
	add	r2, r3, r2, lsl #3
	vldr	d18, [r2]
	vsub.f64	d17, d17, d18
	vmul.f64	d16, d17, d16
	vstr	d16, [sp, #344]
	str	r1, [sp, #224]          @ 4-byte Spill
	str	r0, [sp, #220]          @ 4-byte Spill
.LBB94_24:                              @   in Loop: Header=BB94_20 Depth=2
	ldr	r0, [sp, #380]
	ldr	r1, [sp, #376]
	cmp	r0, r1
	blt	.LBB94_26
@ BB#25:                                @   in Loop: Header=BB94_20 Depth=2
	vmov.f64	d16, #3.000000e+00
	sub	r0, r11, #624
	movw	r1, #3
	ldr	r2, [sp, #380]
	sub	r3, r11, #624
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	ldr	r2, [sp, #376]
	add	r2, r3, r2, lsl #3
	vldr	d18, [r2]
	vsub.f64	d17, d17, d18
	vmul.f64	d16, d17, d16
	vstr	d16, [sp, #344]
	str	r1, [sp, #216]          @ 4-byte Spill
	str	r0, [sp, #212]          @ 4-byte Spill
	b	.LBB94_27
.LBB94_26:                              @   in Loop: Header=BB94_20 Depth=2
	vmov.f64	d16, #1.500000e+00
	sub	r0, r11, #624
	movw	r1, #3
	ldr	r2, [sp, #380]
	sub	r3, r11, #624
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	ldr	r2, [sp, #376]
	add	r2, r3, r2, lsl #3
	vldr	d18, [r2]
	vsub.f64	d17, d17, d18
	vmul.f64	d16, d17, d16
	vstr	d16, [sp, #344]
	str	r1, [sp, #208]          @ 4-byte Spill
	str	r0, [sp, #204]          @ 4-byte Spill
.LBB94_27:                              @   in Loop: Header=BB94_20 Depth=2
	vmov.f64	d16, #5.000000e-01
	vldr	d17, [sp, #344]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	blt	.LBB94_30
@ BB#28:                                @   in Loop: Header=BB94_20 Depth=2
	vmov.f64	d16, #2.500000e+00
	vldr	d17, [sp, #344]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	bhi	.LBB94_30
@ BB#29:                                @   in Loop: Header=BB94_20 Depth=2
	vmov.f64	d16, #8.000000e+00
	vmov.f64	d17, #2.000000e+00
	vmov.f64	d18, #5.000000e-01
	vldr	d19, [sp, #344]
	vsub.f64	d18, d19, d18
	vstr	d18, [sp, #320]
	vldr	d18, [sp, #320]
	vldr	d19, [sp, #320]
	vmul.f64	d18, d18, d19
	vldr	d19, [sp, #320]
	vmul.f64	d17, d17, d19
	vsub.f64	d17, d18, d17
	vmul.f64	d16, d16, d17
	vstr	d16, [sp, #336]
	b	.LBB94_31
.LBB94_30:                              @   in Loop: Header=BB94_20 Depth=2
	vldr	d16, .LCPI94_9
	vstr	d16, [sp, #336]
.LBB94_31:                              @   in Loop: Header=BB94_20 Depth=2
	vldr	d16, .LCPI94_10
	vldr	d17, .LCPI94_11
	vmov.f64	d18, #1.000000e+00
	vldr	d19, .LCPI94_12
	vmov.f64	d20, #7.500000e+00
	vldr	d21, .LCPI94_13
	vldr	d22, [sp, #344]
	vadd.f64	d21, d22, d21
	vstr	d21, [sp, #344]
	vldr	d21, [sp, #344]
	vmul.f64	d20, d20, d21
	vadd.f64	d19, d19, d20
	vldr	d20, [sp, #344]
	vldr	d21, [sp, #344]
	vmul.f64	d20, d20, d21
	vadd.f64	d18, d18, d20
	vmov	r0, r1, d18
	vstr	d16, [sp, #192]         @ 8-byte Spill
	vstr	d17, [sp, #184]         @ 8-byte Spill
	vstr	d19, [sp, #176]         @ 8-byte Spill
	bl	sqrt
	vmov	d16, r0, r1
	vldr	d17, [sp, #184]         @ 8-byte Reload
	vmul.f64	d16, d17, d16
	vldr	d18, [sp, #176]         @ 8-byte Reload
	vsub.f64	d16, d18, d16
	vstr	d16, [sp, #328]
	vldr	d16, [sp, #328]
	vldr	d18, [sp, #192]         @ 8-byte Reload
	vcmpe.f64	d16, d18
	vmrs	APSR_nzcv, fpscr
	bhi	.LBB94_40
@ BB#32:                                @   in Loop: Header=BB94_20 Depth=2
	vldr	d16, .LCPI94_9
	movw	r0, #3
	ldr	r1, [r11, #-64]
	ldr	r2, [sp, #380]
	add	r1, r1, r2, lsl #9
	ldr	r2, [sp, #376]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	str	r0, [sp, #172]          @ 4-byte Spill
	b	.LBB94_41
	.p2align	3
@ BB#33:
.LCPI94_8:
	.long	1602783267              @ double -0.23025850929940458
	.long	3217914140
	.p2align	3
@ BB#34:
.LCPI94_9:
	.long	0                       @ double 0
	.long	0
	.p2align	3
@ BB#35:
.LCPI94_10:
	.long	0                       @ double -60
	.long	3226337280
	.p2align	3
@ BB#36:
.LCPI94_11:
	.long	0                       @ double 17.5
	.long	1076985856
	.p2align	3
@ BB#37:
.LCPI94_12:
	.long	1627826965              @ double 15.811389
	.long	1076862830
	.p2align	3
@ BB#38:
.LCPI94_13:
	.long	412316860               @ double 0.47399999999999998
	.long	1071535620
	.p2align	3
@ BB#39:
.LCPI94_14:
	.long	1602783267              @ double 0.23025850929940458
	.long	1070430492
.LBB94_40:                              @   in Loop: Header=BB94_20 Depth=2
	movw	r0, #3
	vldr	d16, [sp, #336]
	vldr	d17, [sp, #328]
	vadd.f64	d16, d16, d17
	vldr	d17, .LCPI94_14
	vmul.f64	d16, d16, d17
	vmov	r1, r2, d16
	str	r0, [sp, #168]          @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	exp
	vmov	d16, r0, r1
	ldr	r0, [r11, #-64]
	ldr	r1, [sp, #380]
	add	r0, r0, r1, lsl #9
	ldr	r1, [sp, #376]
	add	r0, r0, r1, lsl #3
	vstr	d16, [r0]
.LBB94_41:                              @   in Loop: Header=BB94_20 Depth=2
	b	.LBB94_42
.LBB94_42:                              @   in Loop: Header=BB94_20 Depth=2
	ldr	r0, [sp, #376]
	add	r0, r0, #1
	str	r0, [sp, #376]
	b	.LBB94_20
.LBB94_43:                              @   in Loop: Header=BB94_18 Depth=1
	b	.LBB94_44
.LBB94_44:                              @   in Loop: Header=BB94_18 Depth=1
	ldr	r0, [sp, #380]
	add	r0, r0, #1
	str	r0, [sp, #380]
	b	.LBB94_18
.LBB94_45:
	movw	r0, #0
	str	r0, [sp, #364]
.LBB94_46:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB94_49 Depth 2
	ldr	r0, [sp, #364]
	cmp	r0, #6
	bge	.LBB94_58
@ BB#47:                                @   in Loop: Header=BB94_46 Depth=1
	ldr	r0, [sp, #388]
	add	r1, r0, #8
	str	r1, [sp, #388]
	vldr	d16, [r0]
	vstr	d16, [r11, #-120]
	ldr	r0, [sp, #388]
	add	r1, r0, #8
	str	r1, [sp, #388]
	vldr	d16, [r0]
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	str	r0, [sp, #392]
	ldr	r0, [sp, #392]
	add	r0, r0, #1
	str	r0, [sp, #392]
	vldr	d16, [r11, #-40]
	vldr	d17, [r11, #-120]
	ldr	r0, [sp, #356]
	vmov	s0, r0
	vcvt.f64.s32	d18, s0
	vdiv.f64	d17, d17, d18
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bne	.LBB94_55
@ BB#48:                                @   in Loop: Header=BB94_46 Depth=1
	movw	r0, #0
	ldr	r1, [sp, #392]
	str	r1, [sp, #396]
	str	r0, [sp, #380]
	str	r0, [sp, #368]
.LBB94_49:                              @   Parent Loop BB94_46 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #380]
	ldr	r1, [sp, #392]
	cmp	r0, r1
	bge	.LBB94_54
@ BB#50:                                @   in Loop: Header=BB94_49 Depth=2
	add	r0, sp, #400
	movw	r1, #3
	ldr	r2, [sp, #388]
	add	r3, r2, #8
	str	r3, [sp, #388]
	vldr	d16, [r2]
	vcvt.s32.f64	s0, d16
	vstr	s0, [sp, #376]
	ldr	r2, [sp, #388]
	add	r3, r2, #8
	str	r3, [sp, #388]
	vldr	d16, [r2]
	vcvt.s32.f64	s0, d16
	vmov	r2, s0
	ldr	r3, [r11, #-48]
	ldr	r12, [sp, #380]
	str	r2, [r3, r12, lsl #2]
	ldr	r2, [sp, #388]
	add	r3, r2, #8
	str	r3, [sp, #388]
	vldr	d16, [r2]
	ldr	r2, [r11, #-72]
	ldr	r3, [sp, #380]
	add	r2, r2, r3, lsl #3
	vstr	d16, [r2]
	ldr	r2, [sp, #388]
	add	r3, r2, #8
	str	r3, [sp, #388]
	add	r3, r2, #16
	str	r3, [sp, #388]
	vldr	d16, [r2, #8]
	ldr	r2, [r11, #-76]
	ldr	r3, [sp, #380]
	add	r2, r2, r3, lsl #3
	vstr	d16, [r2]
	ldr	r2, [sp, #388]
	add	r3, r2, #8
	str	r3, [sp, #388]
	vldr	d16, [r2]
	ldr	r2, [sp, #380]
	add	r3, sp, #400
	add	r2, r3, r2, lsl #3
	vstr	d16, [r2]
	ldr	r2, [sp, #376]
	ldr	r3, [sp, #380]
	cmp	r2, r3
	str	r0, [sp, #164]          @ 4-byte Spill
	str	r1, [sp, #160]          @ 4-byte Spill
	beq	.LBB94_52
@ BB#51:
	movw	r1, :lower16:.L.str.3.208
	movt	r1, :upper16:.L.str.3.208
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	mvn	r1, #0
	str	r0, [sp, #156]          @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB94_52:                              @   in Loop: Header=BB94_49 Depth=2
	mvn	r0, #0
	movw	r1, #2
	ldr	r2, [r11, #-48]
	ldr	r3, [sp, #380]
	add	r2, r2, r3, lsl #2
	ldr	r3, [r2]
	add	r0, r3, r0
	str	r0, [r2]
	str	r1, [sp, #152]          @ 4-byte Spill
@ BB#53:                                @   in Loop: Header=BB94_49 Depth=2
	ldr	r0, [sp, #380]
	add	r0, r0, #1
	str	r0, [sp, #380]
	b	.LBB94_49
.LBB94_54:                              @   in Loop: Header=BB94_46 Depth=1
	mvn	r0, #0
	movw	r1, #2
	ldr	r2, [r11, #-48]
	ldr	r3, [sp, #380]
	add	r2, r2, r3, lsl #2
	str	r0, [r2]
	str	r1, [sp, #148]          @ 4-byte Spill
	b	.LBB94_56
.LBB94_55:                              @   in Loop: Header=BB94_46 Depth=1
	movw	r0, #3
	ldr	r1, [sp, #392]
	add	r1, r1, r1, lsl #1
	lsl	r1, r1, #1
	ldr	r2, [sp, #388]
	add	r1, r2, r1, lsl #3
	str	r1, [sp, #388]
	str	r0, [sp, #144]          @ 4-byte Spill
.LBB94_56:                              @   in Loop: Header=BB94_46 Depth=1
	b	.LBB94_57
.LBB94_57:                              @   in Loop: Header=BB94_46 Depth=1
	ldr	r0, [sp, #364]
	add	r0, r0, #1
	str	r0, [sp, #364]
	b	.LBB94_46
.LBB94_58:
	movw	r0, #0
	ldr	r1, [sp, #396]
	str	r1, [sp, #360]
	str	r0, [sp, #380]
.LBB94_59:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB94_61 Depth 2
	ldr	r0, [sp, #380]
	ldr	r1, [sp, #360]
	cmp	r0, r1
	bge	.LBB94_79
@ BB#60:                                @   in Loop: Header=BB94_59 Depth=1
	movw	r0, #0
	str	r0, [sp, #376]
.LBB94_61:                              @   Parent Loop BB94_59 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #376]
	ldr	r1, [sp, #360]
	cmp	r0, r1
	bge	.LBB94_77
@ BB#62:                                @   in Loop: Header=BB94_61 Depth=2
	ldr	r0, [sp, #376]
	ldr	r1, [sp, #380]
	cmp	r0, r1
	blt	.LBB94_64
@ BB#63:                                @   in Loop: Header=BB94_61 Depth=2
	vmov.f64	d16, #3.000000e+00
	add	r0, sp, #400
	movw	r1, #3
	ldr	r2, [sp, #380]
	add	r3, sp, #400
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	ldr	r2, [sp, #376]
	add	r2, r3, r2, lsl #3
	vldr	d18, [r2]
	vsub.f64	d17, d17, d18
	vmul.f64	d16, d17, d16
	vstr	d16, [sp, #312]
	str	r1, [sp, #140]          @ 4-byte Spill
	str	r0, [sp, #136]          @ 4-byte Spill
	b	.LBB94_65
.LBB94_64:                              @   in Loop: Header=BB94_61 Depth=2
	vmov.f64	d16, #1.500000e+00
	add	r0, sp, #400
	movw	r1, #3
	ldr	r2, [sp, #380]
	add	r3, sp, #400
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	ldr	r2, [sp, #376]
	add	r2, r3, r2, lsl #3
	vldr	d18, [r2]
	vsub.f64	d17, d17, d18
	vmul.f64	d16, d17, d16
	vstr	d16, [sp, #312]
	str	r1, [sp, #132]          @ 4-byte Spill
	str	r0, [sp, #128]          @ 4-byte Spill
.LBB94_65:                              @   in Loop: Header=BB94_61 Depth=2
	ldr	r0, [sp, #380]
	ldr	r1, [sp, #376]
	cmp	r0, r1
	blt	.LBB94_67
@ BB#66:                                @   in Loop: Header=BB94_61 Depth=2
	vmov.f64	d16, #3.000000e+00
	add	r0, sp, #400
	movw	r1, #3
	ldr	r2, [sp, #380]
	add	r3, sp, #400
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	ldr	r2, [sp, #376]
	add	r2, r3, r2, lsl #3
	vldr	d18, [r2]
	vsub.f64	d17, d17, d18
	vmul.f64	d16, d17, d16
	vstr	d16, [sp, #312]
	str	r1, [sp, #124]          @ 4-byte Spill
	str	r0, [sp, #120]          @ 4-byte Spill
	b	.LBB94_68
.LBB94_67:                              @   in Loop: Header=BB94_61 Depth=2
	vmov.f64	d16, #1.500000e+00
	add	r0, sp, #400
	movw	r1, #3
	ldr	r2, [sp, #380]
	add	r3, sp, #400
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	ldr	r2, [sp, #376]
	add	r2, r3, r2, lsl #3
	vldr	d18, [r2]
	vsub.f64	d17, d17, d18
	vmul.f64	d16, d17, d16
	vstr	d16, [sp, #312]
	str	r1, [sp, #116]          @ 4-byte Spill
	str	r0, [sp, #112]          @ 4-byte Spill
.LBB94_68:                              @   in Loop: Header=BB94_61 Depth=2
	vmov.f64	d16, #5.000000e-01
	vldr	d17, [sp, #312]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	blt	.LBB94_71
@ BB#69:                                @   in Loop: Header=BB94_61 Depth=2
	vmov.f64	d16, #2.500000e+00
	vldr	d17, [sp, #312]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	bhi	.LBB94_71
@ BB#70:                                @   in Loop: Header=BB94_61 Depth=2
	vmov.f64	d16, #8.000000e+00
	vmov.f64	d17, #2.000000e+00
	vmov.f64	d18, #5.000000e-01
	vldr	d19, [sp, #312]
	vsub.f64	d18, d19, d18
	vstr	d18, [sp, #288]
	vldr	d18, [sp, #288]
	vldr	d19, [sp, #288]
	vmul.f64	d18, d18, d19
	vldr	d19, [sp, #288]
	vmul.f64	d17, d17, d19
	vsub.f64	d17, d18, d17
	vmul.f64	d16, d16, d17
	vstr	d16, [sp, #304]
	b	.LBB94_72
.LBB94_71:                              @   in Loop: Header=BB94_61 Depth=2
	vldr	d16, .LCPI94_15
	vstr	d16, [sp, #304]
.LBB94_72:                              @   in Loop: Header=BB94_61 Depth=2
	vldr	d16, .LCPI94_16
	vldr	d17, .LCPI94_17
	vmov.f64	d18, #1.000000e+00
	vldr	d19, .LCPI94_18
	vmov.f64	d20, #7.500000e+00
	vldr	d21, .LCPI94_19
	vldr	d22, [sp, #312]
	vadd.f64	d21, d22, d21
	vstr	d21, [sp, #312]
	vldr	d21, [sp, #312]
	vmul.f64	d20, d20, d21
	vadd.f64	d19, d19, d20
	vldr	d20, [sp, #312]
	vldr	d21, [sp, #312]
	vmul.f64	d20, d20, d21
	vadd.f64	d18, d18, d20
	vmov	r0, r1, d18
	vstr	d16, [sp, #104]         @ 8-byte Spill
	vstr	d17, [sp, #96]          @ 8-byte Spill
	vstr	d19, [sp, #88]          @ 8-byte Spill
	bl	sqrt
	vmov	d16, r0, r1
	vldr	d17, [sp, #96]          @ 8-byte Reload
	vmul.f64	d16, d17, d16
	vldr	d18, [sp, #88]          @ 8-byte Reload
	vsub.f64	d16, d18, d16
	vstr	d16, [sp, #296]
	vldr	d16, [sp, #296]
	vldr	d18, [sp, #104]         @ 8-byte Reload
	vcmpe.f64	d16, d18
	vmrs	APSR_nzcv, fpscr
	bhi	.LBB94_74
@ BB#73:                                @   in Loop: Header=BB94_61 Depth=2
	vldr	d16, .LCPI94_15
	movw	r0, #3
	ldr	r1, [r11, #-68]
	ldr	r2, [sp, #380]
	add	r1, r1, r2, lsl #9
	ldr	r2, [sp, #376]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	str	r0, [sp, #84]           @ 4-byte Spill
	b	.LBB94_75
.LBB94_74:                              @   in Loop: Header=BB94_61 Depth=2
	movw	r0, #3
	vldr	d16, [sp, #304]
	vldr	d17, [sp, #296]
	vadd.f64	d16, d16, d17
	vldr	d17, .LCPI94_20
	vmul.f64	d16, d16, d17
	vmov	r1, r2, d16
	str	r0, [sp, #80]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	exp
	vmov	d16, r0, r1
	ldr	r0, [r11, #-68]
	ldr	r1, [sp, #380]
	add	r0, r0, r1, lsl #9
	ldr	r1, [sp, #376]
	add	r0, r0, r1, lsl #3
	vstr	d16, [r0]
.LBB94_75:                              @   in Loop: Header=BB94_61 Depth=2
	b	.LBB94_76
.LBB94_76:                              @   in Loop: Header=BB94_61 Depth=2
	ldr	r0, [sp, #376]
	add	r0, r0, #1
	str	r0, [sp, #376]
	b	.LBB94_61
.LBB94_77:                              @   in Loop: Header=BB94_59 Depth=1
	b	.LBB94_78
.LBB94_78:                              @   in Loop: Header=BB94_59 Depth=1
	ldr	r0, [sp, #380]
	add	r0, r0, #1
	str	r0, [sp, #380]
	b	.LBB94_59
.LBB94_79:
	movw	r0, #0
	str	r0, [sp, #364]
.LBB94_80:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB94_83 Depth 2
	ldr	r0, [sp, #364]
	cmp	r0, #6
	bge	.LBB94_102
@ BB#81:                                @   in Loop: Header=BB94_80 Depth=1
	ldr	r0, [sp, #388]
	add	r1, r0, #8
	str	r1, [sp, #388]
	vldr	d16, [r0]
	vstr	d16, [r11, #-120]
	ldr	r0, [sp, #388]
	add	r1, r0, #8
	str	r1, [sp, #388]
	vldr	d16, [r0]
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	str	r0, [sp, #384]
	ldr	r0, [sp, #384]
	add	r0, r0, #1
	str	r0, [sp, #384]
	vldr	d16, [r11, #-40]
	vldr	d17, [r11, #-120]
	ldr	r0, [sp, #356]
	vmov	s0, r0
	vcvt.f64.s32	d18, s0
	vdiv.f64	d17, d17, d18
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bne	.LBB94_93
@ BB#82:                                @   in Loop: Header=BB94_80 Depth=1
	movw	r0, #0
	str	r0, [sp, #380]
.LBB94_83:                              @   Parent Loop BB94_80 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #380]
	ldr	r1, [sp, #384]
	cmp	r0, r1
	bge	.LBB94_92
@ BB#84:                                @   in Loop: Header=BB94_83 Depth=2
	movw	r0, #3
	ldr	r1, [sp, #388]
	add	r2, r1, #8
	str	r2, [sp, #388]
	vldr	d16, [r1]
	vcvt.s32.f64	s0, d16
	vstr	s0, [sp, #376]
	ldr	r1, [sp, #388]
	add	r2, r1, #8
	str	r2, [sp, #388]
	add	r2, r1, #16
	str	r2, [sp, #388]
	vldr	d16, [r1, #8]
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	ldr	r2, [r11, #-80]
	ldr	r3, [sp, #380]
	str	r1, [r2, r3, lsl #2]
	ldr	r1, [sp, #388]
	add	r2, r1, #8
	str	r2, [sp, #388]
	vldr	d16, [r1]
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	ldr	r2, [r11, #-84]
	ldr	r3, [sp, #380]
	str	r1, [r2, r3, lsl #2]
	ldr	r1, [sp, #388]
	add	r2, r1, #8
	str	r2, [sp, #388]
	vldr	d16, [r1]
	ldr	r1, [r11, #-88]
	ldr	r2, [sp, #380]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	ldr	r1, [sp, #388]
	add	r2, r1, #8
	str	r2, [sp, #388]
	vldr	d16, [r1]
	ldr	r1, [r11, #-92]
	ldr	r2, [sp, #380]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	ldr	r1, [sp, #376]
	ldr	r2, [sp, #380]
	cmp	r1, r2
	str	r0, [sp, #76]           @ 4-byte Spill
	beq	.LBB94_86
@ BB#85:
	movw	r1, :lower16:.L.str.4.209
	movt	r1, :upper16:.L.str.4.209
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	mvn	r1, #0
	str	r0, [sp, #72]           @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB94_86:                              @   in Loop: Header=BB94_83 Depth=2
	ldr	r0, [sp, #380]
	cmp	r0, #0
	beq	.LBB94_90
@ BB#87:                                @   in Loop: Header=BB94_83 Depth=2
	vldr	d16, .LCPI94_0
	movw	r0, #3
	ldr	r1, [r11, #-88]
	ldr	r2, [sp, #380]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vmov.f64	d18, #1.000000e+00
	vsub.f64	d17, d18, d17
	ldr	r1, [r11, #-92]
	sub	r2, r2, #1
	add	r1, r1, r2, lsl #3
	vldr	d18, [r1]
	vsub.f64	d17, d17, d18
	vabs.f64	d17, d17
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #68]           @ 4-byte Spill
	ble	.LBB94_89
@ BB#88:
	movw	r1, :lower16:.L.str.6.211
	movt	r1, :upper16:.L.str.6.211
	movw	r0, #3
	movw	r2, :lower16:stderr
	movt	r2, :upper16:stderr
	ldr	r2, [r2]
	movw	r3, :lower16:.L.str.5.210
	movt	r3, :upper16:.L.str.5.210
	str	r0, [sp, #64]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #60]           @ 4-byte Spill
	mov	r1, r3
	str	r2, [sp, #56]           @ 4-byte Spill
	bl	fprintf
	ldr	r1, [r11, #-88]
	ldr	r2, [sp, #380]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	ldr	r1, [r11, #-92]
	sub	r2, r2, #1
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	ldr	r1, [sp, #56]           @ 4-byte Reload
	str	r0, [sp, #52]           @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #60]           @ 4-byte Reload
	vmov	r2, r3, d16
	vstr	d17, [sp]
	bl	fprintf
	mvn	r1, #0
	str	r0, [sp, #48]           @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB94_89:                              @   in Loop: Header=BB94_83 Depth=2
	b	.LBB94_90
.LBB94_90:                              @   in Loop: Header=BB94_83 Depth=2
	b	.LBB94_91
.LBB94_91:                              @   in Loop: Header=BB94_83 Depth=2
	ldr	r0, [sp, #380]
	add	r0, r0, #1
	str	r0, [sp, #380]
	b	.LBB94_83
.LBB94_92:                              @   in Loop: Header=BB94_80 Depth=1
	b	.LBB94_94
.LBB94_93:                              @   in Loop: Header=BB94_80 Depth=1
	movw	r0, #3
	ldr	r1, [sp, #384]
	add	r1, r1, r1, lsl #1
	lsl	r1, r1, #1
	ldr	r2, [sp, #388]
	add	r1, r2, r1, lsl #3
	str	r1, [sp, #388]
	str	r0, [sp, #44]           @ 4-byte Spill
.LBB94_94:                              @   in Loop: Header=BB94_80 Depth=1
	b	.LBB94_95
.LBB94_95:                              @   in Loop: Header=BB94_80 Depth=1
	ldr	r0, [sp, #364]
	add	r0, r0, #1
	str	r0, [sp, #364]
	b	.LBB94_80
	.p2align	3
@ BB#96:
.LCPI94_15:
	.long	0                       @ double 0
	.long	0
	.p2align	3
@ BB#97:
.LCPI94_16:
	.long	0                       @ double -60
	.long	3226337280
	.p2align	3
@ BB#98:
.LCPI94_17:
	.long	0                       @ double 17.5
	.long	1076985856
	.p2align	3
@ BB#99:
.LCPI94_18:
	.long	1627826965              @ double 15.811389
	.long	1076862830
	.p2align	3
@ BB#100:
.LCPI94_19:
	.long	412316860               @ double 0.47399999999999998
	.long	1071535620
	.p2align	3
@ BB#101:
.LCPI94_20:
	.long	1602783267              @ double 0.23025850929940458
	.long	1070430492
.LBB94_102:
	movw	r0, #0
	str	r0, [sp, #364]
.LBB94_103:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB94_106 Depth 2
	ldr	r0, [sp, #364]
	cmp	r0, #6
	bge	.LBB94_119
@ BB#104:                               @   in Loop: Header=BB94_103 Depth=1
	ldr	r0, [sp, #388]
	add	r1, r0, #8
	str	r1, [sp, #388]
	vldr	d16, [r0]
	vstr	d16, [r11, #-120]
	ldr	r0, [sp, #388]
	add	r1, r0, #8
	str	r1, [sp, #388]
	vldr	d16, [r0]
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	str	r0, [sp, #384]
	ldr	r0, [sp, #384]
	add	r0, r0, #1
	str	r0, [sp, #384]
	vldr	d16, [r11, #-40]
	vldr	d17, [r11, #-120]
	ldr	r0, [sp, #356]
	vmov	s0, r0
	vcvt.f64.s32	d18, s0
	vdiv.f64	d17, d17, d18
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bne	.LBB94_116
@ BB#105:                               @   in Loop: Header=BB94_103 Depth=1
	movw	r0, #0
	str	r0, [sp, #380]
.LBB94_106:                             @   Parent Loop BB94_103 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #380]
	ldr	r1, [sp, #384]
	cmp	r0, r1
	bge	.LBB94_115
@ BB#107:                               @   in Loop: Header=BB94_106 Depth=2
	movw	r0, #3
	ldr	r1, [sp, #388]
	add	r2, r1, #8
	str	r2, [sp, #388]
	vldr	d16, [r1]
	vcvt.s32.f64	s0, d16
	vstr	s0, [sp, #376]
	ldr	r1, [sp, #388]
	add	r2, r1, #8
	str	r2, [sp, #388]
	add	r2, r1, #16
	str	r2, [sp, #388]
	vldr	d16, [r1, #8]
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	ldr	r2, [r11, #-96]
	ldr	r3, [sp, #380]
	str	r1, [r2, r3, lsl #2]
	ldr	r1, [sp, #388]
	add	r2, r1, #8
	str	r2, [sp, #388]
	vldr	d16, [r1]
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	ldr	r2, [r11, #-100]
	ldr	r3, [sp, #380]
	str	r1, [r2, r3, lsl #2]
	ldr	r1, [sp, #388]
	add	r2, r1, #8
	str	r2, [sp, #388]
	vldr	d16, [r1]
	ldr	r1, [r11, #-104]
	ldr	r2, [sp, #380]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	ldr	r1, [sp, #388]
	add	r2, r1, #8
	str	r2, [sp, #388]
	vldr	d16, [r1]
	ldr	r1, [r11, #-108]
	ldr	r2, [sp, #380]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	ldr	r1, [sp, #376]
	ldr	r2, [sp, #380]
	cmp	r1, r2
	str	r0, [sp, #40]           @ 4-byte Spill
	beq	.LBB94_109
@ BB#108:
	movw	r1, :lower16:.L.str.4.209
	movt	r1, :upper16:.L.str.4.209
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	mvn	r1, #0
	str	r0, [sp, #36]           @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB94_109:                             @   in Loop: Header=BB94_106 Depth=2
	ldr	r0, [sp, #380]
	cmp	r0, #0
	beq	.LBB94_113
@ BB#110:                               @   in Loop: Header=BB94_106 Depth=2
	vldr	d16, .LCPI94_0
	movw	r0, #3
	ldr	r1, [r11, #-104]
	ldr	r2, [sp, #380]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vmov.f64	d18, #1.000000e+00
	vsub.f64	d17, d18, d17
	ldr	r1, [r11, #-108]
	sub	r2, r2, #1
	add	r1, r1, r2, lsl #3
	vldr	d18, [r1]
	vsub.f64	d17, d17, d18
	vabs.f64	d17, d17
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #32]           @ 4-byte Spill
	ble	.LBB94_112
@ BB#111:
	movw	r1, :lower16:.L.str.6.211
	movt	r1, :upper16:.L.str.6.211
	movw	r0, #3
	movw	r2, :lower16:stderr
	movt	r2, :upper16:stderr
	ldr	r2, [r2]
	movw	r3, :lower16:.L.str.7.212
	movt	r3, :upper16:.L.str.7.212
	str	r0, [sp, #28]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #24]           @ 4-byte Spill
	mov	r1, r3
	str	r2, [sp, #20]           @ 4-byte Spill
	bl	fprintf
	ldr	r1, [r11, #-104]
	ldr	r2, [sp, #380]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	ldr	r1, [r11, #-108]
	sub	r2, r2, #1
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	ldr	r1, [sp, #20]           @ 4-byte Reload
	str	r0, [sp, #16]           @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #24]           @ 4-byte Reload
	vmov	r2, r3, d16
	vstr	d17, [sp]
	bl	fprintf
	mvn	r1, #0
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB94_112:                             @   in Loop: Header=BB94_106 Depth=2
	b	.LBB94_113
.LBB94_113:                             @   in Loop: Header=BB94_106 Depth=2
	b	.LBB94_114
.LBB94_114:                             @   in Loop: Header=BB94_106 Depth=2
	ldr	r0, [sp, #380]
	add	r0, r0, #1
	str	r0, [sp, #380]
	b	.LBB94_106
.LBB94_115:                             @   in Loop: Header=BB94_103 Depth=1
	b	.LBB94_117
.LBB94_116:                             @   in Loop: Header=BB94_103 Depth=1
	movw	r0, #3
	ldr	r1, [sp, #384]
	add	r1, r1, r1, lsl #1
	lsl	r1, r1, #1
	ldr	r2, [sp, #388]
	add	r1, r2, r1, lsl #3
	str	r1, [sp, #388]
	str	r0, [sp, #8]            @ 4-byte Spill
.LBB94_117:                             @   in Loop: Header=BB94_103 Depth=1
	b	.LBB94_118
.LBB94_118:                             @   in Loop: Header=BB94_103 Depth=1
	ldr	r0, [sp, #364]
	add	r0, r0, #1
	str	r0, [sp, #364]
	b	.LBB94_103
.LBB94_119:
	sub	sp, r11, #28
	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
	.p2align	3
@ BB#120:
.LCPI94_0:
	.long	1202590843              @ double 0.01
	.long	1065646817
.Lfunc_end94:
	.size	L3para_read, .Lfunc_end94-L3para_read
	.cantunwind
	.fnend

	.globl	iteration_loop
	.p2align	3
	.type	iteration_loop,%function
	.code	32                      @ @iteration_loop
iteration_loop:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
	add	r11, sp, #28
	sub	sp, sp, #868
	sub	sp, sp, #1024
	ldr	r12, [r11, #20]
	ldr	lr, [r11, #16]
	ldr	r4, [r11, #12]
	ldr	r5, [r11, #8]
	add	r6, sp, #168
	add	r7, sp, #164
	movw	r8, #2
	str	r0, [r11, #-36]
	str	r1, [r11, #-40]
	str	r2, [r11, #-44]
	str	r3, [r11, #-48]
	str	r5, [r11, #-52]
	str	r4, [r11, #-56]
	str	lr, [r11, #-60]
	str	r12, [r11, #-64]
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-56]
	ldr	r2, [r11, #-60]
	str	r7, [sp, #136]          @ 4-byte Spill
	str	r8, [sp, #132]          @ 4-byte Spill
	str	r6, [sp, #128]          @ 4-byte Spill
	bl	iteration_init
	ldr	r0, [r11, #-36]
	ldr	r1, [r0, #172]
	ldr	r0, [r0, #200]
	rsb	r1, r1, r1, lsl #4
	movw	r2, :lower16:bitrate_table
	movt	r2, :upper16:bitrate_table
	add	r1, r2, r1, lsl #2
	add	r0, r1, r0, lsl #2
	ldr	r0, [r0]
	str	r0, [sp, #148]
	ldr	r0, [r11, #-36]
	ldr	r1, [sp, #128]          @ 4-byte Reload
	ldr	r2, [sp, #136]          @ 4-byte Reload
	bl	getframebits
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-56]
	ldr	r2, [sp, #164]
	ldr	r3, [sp, #168]
	bl	ResvFrameBegin
	movw	r1, #0
	str	r1, [sp, #156]
	str	r0, [sp, #124]          @ 4-byte Spill
.LBB95_1:                               @ =>This Loop Header: Depth=1
                                        @     Child Loop BB95_7 Depth 2
                                        @       Child Loop BB95_15 Depth 3
	ldr	r0, [sp, #156]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB95_24
@ BB#2:                                 @   in Loop: Header=BB95_1 Depth=1
	movw	r0, :lower16:convert_mdct
	movt	r0, :upper16:convert_mdct
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LBB95_4
@ BB#3:                                 @   in Loop: Header=BB95_1 Depth=1
	movw	r0, #9216
	ldr	r1, [r11, #-48]
	ldr	r2, [sp, #156]
	mul	r2, r2, r0
	add	r1, r1, r2
	ldr	r2, [r11, #-48]
	ldr	r3, [sp, #156]
	mul	r0, r3, r0
	add	r0, r2, r0
	str	r0, [sp, #120]          @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #120]          @ 4-byte Reload
	bl	ms_convert
.LBB95_4:                               @   in Loop: Header=BB95_1 Depth=1
	add	r3, sp, #140
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-40]
	ldr	r2, [r11, #-56]
	ldr	r12, [sp, #164]
	ldr	lr, [sp, #156]
	str	r12, [sp]
	str	lr, [sp, #4]
	bl	on_pe
	movw	r0, :lower16:reduce_sidechannel
	movt	r0, :upper16:reduce_sidechannel
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LBB95_6
@ BB#5:                                 @   in Loop: Header=BB95_1 Depth=1
	movw	r0, #3
	add	r1, sp, #140
	ldr	r2, [r11, #-44]
	ldr	r3, [sp, #156]
	add	r2, r2, r3, lsl #3
	vldr	d16, [r2]
	ldr	r2, [sp, #164]
	str	r0, [sp, #116]          @ 4-byte Spill
	mov	r0, r1
	str	r2, [sp, #112]          @ 4-byte Spill
	vmov	r2, r3, d16
	ldr	r1, [sp, #112]          @ 4-byte Reload
	str	r1, [sp]
	bl	reduce_side
.LBB95_6:                               @   in Loop: Header=BB95_1 Depth=1
	movw	r0, #0
	str	r0, [sp, #160]
.LBB95_7:                               @   Parent Loop BB95_1 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB95_15 Depth 3
	ldr	r0, [sp, #160]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB95_22
@ BB#8:                                 @   in Loop: Header=BB95_7 Depth=2
	movw	r0, #4608
	movw	r1, #9216
	movw	r2, #112
	movw	r3, #224
	ldr	r12, [r11, #-56]
	add	r12, r12, #44
	ldr	lr, [sp, #156]
	mul	r3, lr, r3
	add	r3, r12, r3
	ldr	r12, [sp, #160]
	mul	r2, r12, r2
	add	r2, r3, r2
	str	r2, [sp, #172]
	ldr	r2, [r11, #-36]
	ldr	r3, [r11, #-48]
	ldr	r12, [sp, #156]
	mul	r1, r12, r1
	add	r1, r3, r1
	ldr	r3, [sp, #160]
	mul	r0, r3, r0
	add	r1, r1, r0
	ldr	r0, [sp, #172]
	str	r0, [sp, #108]          @ 4-byte Spill
	mov	r0, r2
	ldr	r2, [sp, #108]          @ 4-byte Reload
	bl	init_outer_loop
	cmp	r0, #0
	bne	.LBB95_10
@ BB#9:                                 @   in Loop: Header=BB95_7 Depth=2
	vldr	d16, .LCPI95_0
	movw	r0, #0
	movw	r1, #2304
	movw	r2, #4608
	movw	r3, #244
	movw	r12, #488
	ldr	lr, [r11, #-64]
	ldr	r4, [sp, #156]
	mul	r12, r4, r12
	add	r12, lr, r12
	ldr	lr, [sp, #160]
	mul	lr, lr, r3
	add	r12, r12, lr
	str	r0, [sp, #104]          @ 4-byte Spill
	mov	r0, r12
	ldr	r12, [sp, #104]         @ 4-byte Reload
	and	lr, r12, #255
	str	r1, [sp, #100]          @ 4-byte Spill
	mov	r1, lr
	str	r2, [sp, #96]           @ 4-byte Spill
	mov	r2, r3
	vstr	d16, [sp, #88]          @ 8-byte Spill
	bl	memset
	ldr	r0, [r11, #-60]
	ldr	r1, [sp, #156]
	ldr	r2, [sp, #96]           @ 4-byte Reload
	mul	r1, r1, r2
	add	r0, r0, r1
	ldr	r1, [sp, #160]
	ldr	r3, [sp, #100]          @ 4-byte Reload
	mul	r1, r1, r3
	add	r0, r0, r1
	ldr	r1, [sp, #104]          @ 4-byte Reload
	and	r1, r1, #255
	mov	r2, r3
	bl	memset
	vldr	d16, [sp, #88]          @ 8-byte Reload
	vstr	d16, [r11, #-744]
	vstr	d16, [r11, #-752]
	vstr	d16, [r11, #-760]
	vstr	d16, [r11, #-768]
	b	.LBB95_11
.LBB95_10:                              @   in Loop: Header=BB95_7 Depth=2
	sub	r0, r11, #736
	movw	r1, #244
	movw	r2, #488
	movw	r3, #2304
	movw	r12, #4608
	add	lr, sp, #176
	sub	r4, r11, #768
	add	r5, sp, #140
	movw	r6, #2
	ldr	r7, [r11, #-36]
	ldr	r8, [r11, #-48]
	ldr	r9, [sp, #156]
	add	r10, r9, r9, lsl #3
	add	r8, r8, r10, lsl #10
	ldr	r10, [sp, #160]
	str	r0, [sp, #84]           @ 4-byte Spill
	add	r0, r10, r10, lsl #3
	add	r0, r8, r0, lsl #9
	ldr	r8, [r11, #-52]
	str	r0, [sp, #80]           @ 4-byte Spill
	mov	r0, #1952
	mla	r0, r9, r0, r8
	mov	r8, #976
	mla	r0, r10, r8, r0
	ldr	r8, [sp, #172]
	add	r9, sp, #176
	str	r0, [sp, #76]           @ 4-byte Spill
	mov	r0, #488
	mla	r0, r10, r0, r9
	mov	r9, sp
	str	r0, [r9]
	mov	r0, r7
	ldr	r7, [sp, #80]           @ 4-byte Reload
	str	r1, [sp, #72]           @ 4-byte Spill
	mov	r1, r7
	ldr	r9, [sp, #76]           @ 4-byte Reload
	str	r2, [sp, #68]           @ 4-byte Spill
	mov	r2, r9
	str	r3, [sp, #64]           @ 4-byte Spill
	mov	r3, r8
	str	r6, [sp, #60]           @ 4-byte Spill
	str	r5, [sp, #56]           @ 4-byte Spill
	str	r12, [sp, #52]          @ 4-byte Spill
	str	lr, [sp, #48]           @ 4-byte Spill
	str	r4, [sp, #44]           @ 4-byte Spill
	bl	calc_xmin
	ldr	r1, [r11, #-36]
	ldr	r2, [r11, #-48]
	ldr	r3, [sp, #156]
	add	r3, r3, r3, lsl #3
	add	r2, r2, r3, lsl #10
	ldr	r3, [sp, #160]
	add	r12, r3, r3, lsl #3
	add	r2, r2, r12, lsl #9
	add	r12, sp, #140
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	ldr	r12, [sp, #160]
	ldr	lr, [sp, #68]           @ 4-byte Reload
	mul	r12, r12, lr
	ldr	r4, [sp, #48]           @ 4-byte Reload
	add	r12, r4, r12
	ldr	r5, [r11, #-60]
	ldr	r6, [sp, #156]
	ldr	r7, [sp, #52]           @ 4-byte Reload
	mul	r6, r6, r7
	add	r5, r5, r6
	ldr	r6, [sp, #160]
	ldr	r8, [sp, #64]           @ 4-byte Reload
	mul	r6, r6, r8
	add	r5, r5, r6
	ldr	r6, [r11, #-64]
	ldr	r9, [sp, #156]
	mul	r9, r9, lr
	add	r6, r6, r9
	ldr	r9, [sp, #160]
	ldr	r10, [sp, #72]          @ 4-byte Reload
	mul	r9, r9, r10
	add	r6, r6, r9
	ldr	r9, [sp, #172]
	ldr	lr, [sp, #160]
	str	r0, [sp, #40]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	mov	r2, r3
	ldr	r3, [sp, #44]           @ 4-byte Reload
	str	r12, [sp]
	str	r5, [sp, #4]
	str	r6, [sp, #8]
	str	r9, [sp, #12]
	ldr	r12, [sp, #84]          @ 4-byte Reload
	str	r12, [sp, #16]
	str	lr, [sp, #20]
	bl	outer_loop
.LBB95_11:                              @   in Loop: Header=BB95_7 Depth=2
	ldr	r0, [r11, #-36]
	ldr	r1, [sp, #156]
	ldr	r2, [sp, #160]
	ldr	r3, [r11, #-60]
	ldr	r12, [r11, #-56]
	ldr	lr, [r11, #-64]
	str	r12, [sp]
	str	lr, [sp, #4]
	bl	best_scalefac_store
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #256]
	cmp	r0, #1
	bne	.LBB95_14
@ BB#12:                                @   in Loop: Header=BB95_7 Depth=2
	ldr	r0, [sp, #172]
	ldr	r0, [r0, #24]
	cmp	r0, #0
	bne	.LBB95_14
@ BB#13:                                @   in Loop: Header=BB95_7 Depth=2
	movw	r0, #2304
	movw	r1, #4608
	ldr	r2, [sp, #156]
	ldr	r3, [sp, #160]
	ldr	r12, [sp, #172]
	ldr	lr, [r11, #-60]
	ldr	r4, [sp, #156]
	mul	r1, r4, r1
	add	r1, lr, r1
	ldr	lr, [sp, #160]
	mul	r0, lr, r0
	add	r0, r1, r0
	str	r0, [sp, #36]           @ 4-byte Spill
	mov	r0, r2
	mov	r1, r3
	mov	r2, r12
	ldr	r3, [sp, #36]           @ 4-byte Reload
	bl	best_huffman_divide
.LBB95_14:                              @   in Loop: Header=BB95_7 Depth=2
	ldr	r0, [r11, #-36]
	ldr	r1, [sp, #172]
	ldr	r2, [r11, #-56]
	ldr	r3, [sp, #164]
	bl	ResvAdjust
	movw	r0, #0
	str	r0, [sp, #152]
.LBB95_15:                              @   Parent Loop BB95_1 Depth=1
                                        @     Parent Loop BB95_7 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [sp, #152]
	cmp	r0, #576
	bge	.LBB95_20
@ BB#16:                                @   in Loop: Header=BB95_15 Depth=3
	movw	r0, #3
	ldr	r1, [r11, #-48]
	ldr	r2, [sp, #156]
	add	r2, r2, r2, lsl #3
	add	r1, r1, r2, lsl #10
	ldr	r2, [sp, #160]
	add	r2, r2, r2, lsl #3
	add	r1, r1, r2, lsl #9
	ldr	r2, [sp, #152]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #32]           @ 4-byte Spill
	bpl	.LBB95_18
@ BB#17:                                @   in Loop: Header=BB95_15 Depth=3
	mvn	r0, #0
	movw	r1, #2
	ldr	r2, [r11, #-60]
	ldr	r3, [sp, #156]
	add	r3, r3, r3, lsl #3
	add	r2, r2, r3, lsl #9
	ldr	r3, [sp, #160]
	add	r3, r3, r3, lsl #3
	add	r2, r2, r3, lsl #8
	ldr	r3, [sp, #152]
	add	r2, r2, r3, lsl #2
	ldr	r3, [r2]
	mul	r0, r3, r0
	str	r0, [r2]
	str	r1, [sp, #28]           @ 4-byte Spill
.LBB95_18:                              @   in Loop: Header=BB95_15 Depth=3
	b	.LBB95_19
.LBB95_19:                              @   in Loop: Header=BB95_15 Depth=3
	ldr	r0, [sp, #152]
	add	r0, r0, #1
	str	r0, [sp, #152]
	b	.LBB95_15
.LBB95_20:                              @   in Loop: Header=BB95_7 Depth=2
	b	.LBB95_21
.LBB95_21:                              @   in Loop: Header=BB95_7 Depth=2
	ldr	r0, [sp, #160]
	add	r0, r0, #1
	str	r0, [sp, #160]
	b	.LBB95_7
.LBB95_22:                              @   in Loop: Header=BB95_1 Depth=1
	b	.LBB95_23
.LBB95_23:                              @   in Loop: Header=BB95_1 Depth=1
	ldr	r0, [sp, #156]
	add	r0, r0, #1
	str	r0, [sp, #156]
	b	.LBB95_1
.LBB95_24:
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-56]
	ldr	r2, [sp, #164]
	bl	ResvFrameEnd
	sub	sp, r11, #28
	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
	.p2align	3
@ BB#25:
.LCPI95_0:
	.long	0                       @ double 0
	.long	0
.Lfunc_end95:
	.size	iteration_loop, .Lfunc_end95-iteration_loop
	.cantunwind
	.fnend

	.globl	init_outer_loop
	.p2align	3
	.type	init_outer_loop,%function
	.code	32                      @ @init_outer_loop
init_outer_loop:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #160
	movw	r3, #0
	str	r0, [r11, #-8]
	str	r1, [r11, #-12]
	str	r2, [r11, #-16]
	str	r3, [r11, #-20]
.LBB96_1:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-20]
	cmp	r0, #4
	bge	.LBB96_4
@ BB#2:                                 @   in Loop: Header=BB96_1 Depth=1
	movw	r0, #0
	movw	r1, #2
	ldr	r2, [r11, #-16]
	add	r2, r2, #96
	ldr	r3, [r11, #-20]
	add	r2, r2, r3, lsl #2
	str	r0, [r2]
	str	r1, [r11, #-68]         @ 4-byte Spill
@ BB#3:                                 @   in Loop: Header=BB96_1 Depth=1
	ldr	r0, [r11, #-20]
	add	r0, r0, #1
	str	r0, [r11, #-20]
	b	.LBB96_1
.LBB96_4:
	movw	r0, #0
	movw	r1, #210
	movw	r2, :lower16:nr_of_sfb_block
	movt	r2, :upper16:nr_of_sfb_block
	ldr	r3, [r11, #-16]
	str	r2, [r3, #92]
	ldr	r2, [r11, #-16]
	str	r0, [r2]
	ldr	r2, [r11, #-16]
	str	r0, [r2, #4]
	ldr	r2, [r11, #-16]
	str	r0, [r2, #8]
	ldr	r2, [r11, #-16]
	str	r0, [r2, #16]
	ldr	r2, [r11, #-16]
	str	r0, [r2, #32]
	ldr	r2, [r11, #-16]
	str	r0, [r2, #36]
	ldr	r2, [r11, #-16]
	str	r0, [r2, #40]
	ldr	r2, [r11, #-16]
	str	r0, [r2, #44]
	ldr	r2, [r11, #-16]
	str	r0, [r2, #48]
	ldr	r2, [r11, #-16]
	str	r0, [r2, #52]
	ldr	r2, [r11, #-16]
	str	r0, [r2, #56]
	ldr	r2, [r11, #-16]
	str	r0, [r2, #60]
	ldr	r2, [r11, #-16]
	str	r0, [r2, #76]
	ldr	r2, [r11, #-16]
	str	r0, [r2, #64]
	ldr	r2, [r11, #-16]
	str	r0, [r2, #68]
	ldr	r2, [r11, #-16]
	str	r1, [r2, #12]
	ldr	r1, [r11, #-16]
	str	r0, [r1, #72]
	ldr	r1, [r11, #-16]
	str	r0, [r1, #88]
	ldr	r0, [r11, #-8]
	ldr	r0, [r0, #80]
	cmp	r0, #0
	beq	.LBB96_44
@ BB#5:
	ldr	r0, [r11, #-16]
	ldr	r0, [r0, #24]
	cmp	r0, #2
	bne	.LBB96_43
@ BB#6:
	movw	r0, #0
	str	r0, [r11, #-28]
.LBB96_7:                               @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-28]
	cmp	r0, #3
	bge	.LBB96_10
@ BB#8:                                 @   in Loop: Header=BB96_7 Depth=1
	vldr	d16, .LCPI96_3
	sub	r0, r11, #56
	movw	r1, #3
	ldr	r2, [r11, #-28]
	sub	r3, r11, #56
	add	r2, r3, r2, lsl #3
	vstr	d16, [r2]
	str	r1, [r11, #-72]         @ 4-byte Spill
	str	r0, [r11, #-76]         @ 4-byte Spill
@ BB#9:                                 @   in Loop: Header=BB96_7 Depth=1
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB96_7
.LBB96_10:
	movw	r0, #0
	str	r0, [r11, #-20]
	str	r0, [r11, #-24]
.LBB96_11:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB96_13 Depth 2
	ldr	r0, [r11, #-24]
	cmp	r0, #192
	bge	.LBB96_18
@ BB#12:                                @   in Loop: Header=BB96_11 Depth=1
	movw	r0, #0
	str	r0, [r11, #-28]
.LBB96_13:                              @   Parent Loop BB96_11 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-28]
	cmp	r0, #3
	bge	.LBB96_16
@ BB#14:                                @   in Loop: Header=BB96_13 Depth=2
	sub	r0, r11, #56
	movw	r1, #3
	ldr	r2, [r11, #-12]
	ldr	r3, [r11, #-20]
	add	r2, r2, r3, lsl #3
	vldr	d16, [r2]
	vmul.f64	d16, d16, d16
	ldr	r2, [r11, #-28]
	sub	r3, r11, #56
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	vadd.f64	d16, d17, d16
	vstr	d16, [r2]
	ldr	r2, [r11, #-20]
	add	r2, r2, #1
	str	r2, [r11, #-20]
	str	r0, [sp, #80]           @ 4-byte Spill
	str	r1, [sp, #76]           @ 4-byte Spill
@ BB#15:                                @   in Loop: Header=BB96_13 Depth=2
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB96_13
.LBB96_16:                              @   in Loop: Header=BB96_11 Depth=1
	b	.LBB96_17
.LBB96_17:                              @   in Loop: Header=BB96_11 Depth=1
	ldr	r0, [r11, #-24]
	add	r0, r0, #1
	str	r0, [r11, #-24]
	b	.LBB96_11
.LBB96_18:
	movw	r0, #0
	vldr	d16, .LCPI96_1
	vstr	d16, [r11, #-64]
	str	r0, [r11, #-28]
.LBB96_19:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-28]
	cmp	r0, #3
	bge	.LBB96_25
@ BB#20:                                @   in Loop: Header=BB96_19 Depth=1
	sub	r0, r11, #56
	movw	r1, #3
	vldr	d16, [r11, #-64]
	ldr	r2, [r11, #-28]
	sub	r3, r11, #56
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #72]           @ 4-byte Spill
	str	r1, [sp, #68]           @ 4-byte Spill
	ble	.LBB96_22
@ BB#21:                                @   in Loop: Header=BB96_19 Depth=1
	vldr	d16, [r11, #-64]
	vstr	d16, [sp, #56]          @ 8-byte Spill
	b	.LBB96_23
.LBB96_22:                              @   in Loop: Header=BB96_19 Depth=1
	sub	r0, r11, #56
	movw	r1, #3
	ldr	r2, [r11, #-28]
	sub	r3, r11, #56
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	str	r0, [sp, #52]           @ 4-byte Spill
	str	r1, [sp, #48]           @ 4-byte Spill
	vstr	d16, [sp, #56]          @ 8-byte Spill
.LBB96_23:                              @   in Loop: Header=BB96_19 Depth=1
	vldr	d16, [sp, #56]          @ 8-byte Reload
	vstr	d16, [r11, #-64]
@ BB#24:                                @   in Loop: Header=BB96_19 Depth=1
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB96_19
.LBB96_25:
	movw	r0, #0
	str	r0, [r11, #-28]
.LBB96_26:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-28]
	cmp	r0, #3
	bge	.LBB96_32
@ BB#27:                                @   in Loop: Header=BB96_26 Depth=1
	vldr	d16, .LCPI96_1
	sub	r0, r11, #56
	movw	r1, #3
	ldr	r2, [r11, #-28]
	sub	r3, r11, #56
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	str	r1, [sp, #44]           @ 4-byte Spill
	str	r0, [sp, #40]           @ 4-byte Spill
	ble	.LBB96_29
@ BB#28:                                @   in Loop: Header=BB96_26 Depth=1
	sub	r0, r11, #56
	movw	r1, #3
	ldr	r2, [r11, #-28]
	sub	r3, r11, #56
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	str	r0, [sp, #36]           @ 4-byte Spill
	str	r1, [sp, #32]           @ 4-byte Spill
	vstr	d16, [sp, #24]          @ 8-byte Spill
	b	.LBB96_30
.LBB96_29:                              @   in Loop: Header=BB96_26 Depth=1
	vldr	d16, .LCPI96_1
	vstr	d16, [sp, #24]          @ 8-byte Spill
	b	.LBB96_30
.LBB96_30:                              @   in Loop: Header=BB96_26 Depth=1
	vldr	d16, [sp, #24]          @ 8-byte Reload
	sub	r0, r11, #56
	movw	r1, #3
	vldr	d17, [r11, #-64]
	vdiv.f64	d16, d16, d17
	ldr	r2, [r11, #-28]
	sub	r3, r11, #56
	add	r2, r3, r2, lsl #3
	vstr	d16, [r2]
	str	r1, [sp, #20]           @ 4-byte Spill
	str	r0, [sp, #16]           @ 4-byte Spill
@ BB#31:                                @   in Loop: Header=BB96_26 Depth=1
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB96_26
.LBB96_32:
	movw	r0, #0
	str	r0, [r11, #-28]
.LBB96_33:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-28]
	cmp	r0, #3
	bge	.LBB96_40
@ BB#34:                                @   in Loop: Header=BB96_33 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-28]
	sub	r2, r11, #56
	add	r1, r2, r1, lsl #3
	vldr	d16, [r1]
	vmov	r1, r2, d16
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	log
	vmov	d16, r0, r1
	vmov.f64	d17, #-5.000000e-01
	vmul.f64	d16, d16, d17
	vldr	d17, .LCPI96_2
	vdiv.f64	d16, d16, d17
	vmov.f64	d17, #5.000000e-01
	vadd.f64	d16, d16, d17
	ldr	r0, [r11, #-16]
	ldr	r1, [r11, #-28]
	add	r0, r0, r1, lsl #2
	vcvt.s32.f64	s0, d16
	vstr	s0, [r0, #44]
	ldr	r0, [r11, #-16]
	add	r0, r0, #44
	ldr	r1, [r11, #-28]
	add	r0, r0, r1, lsl #2
	ldr	r0, [r0]
	cmp	r0, #2
	ble	.LBB96_36
@ BB#35:                                @   in Loop: Header=BB96_33 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-16]
	add	r1, r1, #44
	ldr	r2, [r11, #-28]
	add	r1, r1, r2, lsl #2
	str	r0, [r1]
.LBB96_36:                              @   in Loop: Header=BB96_33 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-16]
	add	r1, r1, #44
	ldr	r2, [r11, #-28]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	cmp	r1, #0
	str	r0, [sp, #8]            @ 4-byte Spill
	bge	.LBB96_38
@ BB#37:                                @   in Loop: Header=BB96_33 Depth=1
	movw	r0, #0
	movw	r1, #2
	ldr	r2, [r11, #-16]
	add	r2, r2, #44
	ldr	r3, [r11, #-28]
	add	r2, r2, r3, lsl #2
	str	r0, [r2]
	str	r1, [sp, #4]            @ 4-byte Spill
.LBB96_38:                              @   in Loop: Header=BB96_33 Depth=1
	b	.LBB96_39
.LBB96_39:                              @   in Loop: Header=BB96_33 Depth=1
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB96_33
.LBB96_40:
	vldr	d16, .LCPI96_0
	vldr	d17, [r11, #-56]
	vldr	d18, [r11, #-48]
	vadd.f64	d17, d17, d18
	vldr	d18, [r11, #-40]
	vadd.f64	d17, d17, d18
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB96_42
@ BB#41:
	movw	r0, #1
	str	r0, [r11, #-4]
	b	.LBB96_51
.LBB96_42:
	movw	r0, #0
	str	r0, [r11, #-4]
	b	.LBB96_51
.LBB96_43:
	b	.LBB96_44
.LBB96_44:
	movw	r0, #0
	str	r0, [r11, #-20]
.LBB96_45:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-20]
	cmp	r0, #576
	bge	.LBB96_50
@ BB#46:                                @   in Loop: Header=BB96_45 Depth=1
	vldr	d16, .LCPI96_0
	movw	r0, #3
	ldr	r1, [r11, #-12]
	ldr	r2, [r11, #-20]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vabs.f64	d17, d17
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp]                @ 4-byte Spill
	bpl	.LBB96_48
@ BB#47:
	movw	r0, #1
	str	r0, [r11, #-4]
	b	.LBB96_51
.LBB96_48:                              @   in Loop: Header=BB96_45 Depth=1
	b	.LBB96_49
.LBB96_49:                              @   in Loop: Header=BB96_45 Depth=1
	ldr	r0, [r11, #-20]
	add	r0, r0, #1
	str	r0, [r11, #-20]
	b	.LBB96_45
.LBB96_50:
	movw	r0, #0
	str	r0, [r11, #-4]
.LBB96_51:
	ldr	r0, [r11, #-4]
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#52:
.LCPI96_0:
	.long	1322828606              @ double 1.0E-99
	.long	727809917
.LCPI96_1:
	.long	2167269905              @ double 9.9999999999999998E-13
	.long	1030854553
.LCPI96_2:
	.long	4277811695              @ double 0.69314718055994529
	.long	1072049730
.LCPI96_3:
	.long	0                       @ double 0
	.long	0
.Lfunc_end96:
	.size	init_outer_loop, .Lfunc_end96-init_outer_loop
	.cantunwind
	.fnend

	.globl	outer_loop
	.p2align	3
	.type	outer_loop,%function
	.code	32                      @ @outer_loop
outer_loop:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
	add	r11, sp, #28
	sub	sp, sp, #716
	sub	sp, sp, #8192
	add	r12, sp, #1504
	ldr	lr, [r11, #28]
	ldr	r4, [r11, #24]
	ldr	r5, [r11, #20]
	ldr	r6, [r11, #16]
	ldr	r7, [r11, #12]
	ldr	r8, [r11, #8]
	movw	r9, #0
	movw	r10, #1
	vldr	d16, .LCPI97_1
	str	r0, [sp, #140]          @ 4-byte Spill
	movw	r0, #100
	str	r0, [sp, #136]          @ 4-byte Spill
	ldr	r0, [sp, #140]          @ 4-byte Reload
	str	r0, [r11, #-36]
	str	r1, [r11, #-40]
	str	r2, [r11, #-44]
	str	r3, [r11, #-48]
	str	r8, [r11, #-52]
	str	r7, [r11, #-56]
	str	r6, [r11, #-60]
	str	r5, [r11, #-64]
	str	r4, [r11, #-68]
	str	lr, [r11, #-72]
	str	r9, [r11, #-2748]
	str	r9, [sp, #1560]
	ldr	r1, [sp, #136]          @ 4-byte Reload
	str	r1, [sp, #1532]
	vstr	d16, [r12, #16]
	vstr	d16, [r12, #8]
	vstr	d16, [r12]
	str	r10, [sp, #156]
	str	r10, [sp, #152]
	str	r9, [r11, #-2740]
	str	r12, [sp, #132]         @ 4-byte Spill
.LBB97_1:                               @ =>This Loop Header: Depth=1
                                        @     Child Loop BB97_4 Depth 2
	ldr	r0, [sp, #152]
	cmp	r0, #0
	beq	.LBB97_46
@ BB#2:                                 @   in Loop: Header=BB97_1 Depth=1
	movw	r0, #0
	str	r0, [sp, #148]
	ldr	r0, [r11, #-2740]
	add	r0, r0, #1
	str	r0, [r11, #-2740]
	ldr	r0, [sp, #156]
	cmp	r0, #0
	beq	.LBB97_8
@ BB#3:                                 @   in Loop: Header=BB97_1 Depth=1
	movw	r0, #0
	movw	r1, #0
	movw	r2, #244
	sub	r3, r11, #316
	str	r0, [sp, #156]
	str	r0, [sp, #128]          @ 4-byte Spill
	mov	r0, r3
	and	r1, r1, #255
	bl	memset
	ldr	r0, [sp, #128]          @ 4-byte Reload
	str	r0, [r11, #-2736]
.LBB97_4:                               @   Parent Loop BB97_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-2736]
	cmp	r0, #576
	bge	.LBB97_7
@ BB#5:                                 @   in Loop: Header=BB97_4 Depth=2
	add	r4, sp, #1024
	add	r0, r4, #552
	movw	r1, #3
	ldr	r2, [r11, #-40]
	ldr	r3, [r11, #-2736]
	add	r2, r2, r3, lsl #3
	vldr	d16, [r2]
	vabs.f64	d16, d16
	ldr	r2, [sp, #132]          @ 4-byte Reload
	vstr	d16, [r2, #64]
	vmov	r3, r12, d16
	str	r0, [sp, #124]          @ 4-byte Spill
	mov	r0, r3
	str	r1, [sp, #120]          @ 4-byte Spill
	mov	r1, r12
	bl	sqrt
	vmov	d16, r0, r1
	ldr	r0, [sp, #132]          @ 4-byte Reload
	vldr	d17, [r0, #64]
	vmul.f64	d16, d16, d17
	vmov	r0, r1, d16
	bl	sqrt
	vmov	d16, r0, r1
	ldr	r0, [r11, #-2736]
	add	lr, sp, #1024
	add	r1, lr, #552
	add	r0, r1, r0, lsl #3
	vstr	d16, [r0]
@ BB#6:                                 @   in Loop: Header=BB97_4 Depth=2
	ldr	r0, [r11, #-2736]
	add	r0, r0, #1
	str	r0, [r11, #-2736]
	b	.LBB97_4
.LBB97_7:                               @   in Loop: Header=BB97_1 Depth=1
	movw	r0, :lower16:outer_loop.OldValue
	movt	r0, :upper16:outer_loop.OldValue
	movw	r1, #2
	ldr	r2, [r11, #-36]
	ldr	r3, [r11, #-44]
	ldr	r12, [r11, #-72]
	movw	lr, :lower16:outer_loop.OldValue
	movt	lr, :upper16:outer_loop.OldValue
	ldr	r12, [lr, r12, lsl #2]
	ldr	r4, [r11, #-64]
	mov	r5, sp
	str	r4, [r5, #4]
	add	r6, sp, #1024
	add	r4, r6, #552
	str	r4, [r5]
	sub	r5, r11, #2048
	sub	r4, r5, #684
	str	r0, [sp, #116]          @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #112]          @ 4-byte Spill
	mov	r1, r3
	mov	r2, r12
	mov	r3, r4
	str	lr, [sp, #108]          @ 4-byte Spill
	bl	bin_search_StepSize2
	str	r0, [r11, #-2748]
	ldr	r0, [r11, #-64]
	ldr	r0, [r0, #12]
	ldr	r1, [r11, #-72]
	ldr	r2, [sp, #108]          @ 4-byte Reload
	add	r1, r2, r1, lsl #2
	str	r0, [r1]
.LBB97_8:                               @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [r11, #-44]
	ldr	r1, [r11, #-64]
	ldr	r1, [r1, #76]
	sub	r0, r0, r1
	str	r0, [r11, #-2752]
	ldr	r0, [r11, #-2752]
	cmp	r0, #0
	bge	.LBB97_12
@ BB#9:                                 @   in Loop: Header=BB97_1 Depth=1
	movw	r0, #1
	ldr	r1, [r11, #-2740]
	cmp	r1, #1
	str	r0, [sp, #104]          @ 4-byte Spill
	bne	.LBB97_11
@ BB#10:                                @   in Loop: Header=BB97_1 Depth=1
	movw	r0, :lower16:.L.str.5.215
	movt	r0, :upper16:.L.str.5.215
	movw	r1, :lower16:.L.str.1.216
	movt	r1, :upper16:.L.str.1.216
	movw	r2, #805
	movw	r3, :lower16:.L__func__.outer_loop
	movt	r3, :upper16:.L__func__.outer_loop
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #104]          @ 4-byte Spill
.LBB97_11:                              @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [sp, #104]          @ 4-byte Reload
	movw	r1, #0
	str	r1, [sp, #152]
	str	r0, [sp, #100]          @ 4-byte Spill
	b	.LBB97_28
.LBB97_12:                              @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [r11, #-2740]
	cmp	r0, #1
	bne	.LBB97_17
@ BB#13:                                @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [r11, #-2748]
	ldr	r1, [r11, #-2752]
	cmp	r0, r1
	ble	.LBB97_15
@ BB#14:                                @   in Loop: Header=BB97_1 Depth=1
	sub	r4, r11, #2048
	sub	r2, r4, #684
	add	r4, sp, #1024
	add	r1, r4, #552
	ldr	r0, [r11, #-64]
	ldr	r3, [r0, #12]
	add	r3, r3, #1
	str	r3, [r0, #12]
	ldr	r0, [r11, #-36]
	ldr	r3, [r11, #-2752]
	ldr	r12, [r11, #-64]
	str	r12, [sp]
	bl	inner_loop
	str	r0, [sp, #144]
	b	.LBB97_16
.LBB97_15:                              @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [r11, #-2748]
	str	r0, [sp, #144]
.LBB97_16:                              @   in Loop: Header=BB97_1 Depth=1
	b	.LBB97_18
.LBB97_17:                              @   in Loop: Header=BB97_1 Depth=1
	sub	r4, r11, #2048
	sub	r2, r4, #684
	add	r4, sp, #1024
	add	r1, r4, #552
	ldr	r0, [r11, #-36]
	ldr	r3, [r11, #-2752]
	ldr	r12, [r11, #-64]
	str	r12, [sp]
	bl	inner_loop
	str	r0, [sp, #144]
.LBB97_18:                              @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [sp, #144]
	ldr	r1, [r11, #-64]
	str	r0, [r1]
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #244]
	cmp	r0, #0
	bne	.LBB97_20
@ BB#19:                                @   in Loop: Header=BB97_1 Depth=1
	movw	r0, #0
	str	r0, [sp, #1560]
	b	.LBB97_21
.LBB97_20:                              @   in Loop: Header=BB97_1 Depth=1
	sub	r0, r11, #316
	add	r8, sp, #1024
	add	r1, r8, #520
	add	r2, sp, #1536
	add	r3, sp, #1552
	add	r12, sp, #160
	add	lr, sp, #832
	sub	r8, r11, #2048
	sub	r4, r8, #684
	ldr	r5, [r11, #-40]
	ldr	r6, [r11, #-64]
	ldr	r7, [r11, #-52]
	str	r0, [sp, #96]           @ 4-byte Spill
	mov	r0, r5
	str	r1, [sp, #92]           @ 4-byte Spill
	mov	r1, r4
	str	r2, [sp, #88]           @ 4-byte Spill
	mov	r2, r6
	str	r3, [sp, #84]           @ 4-byte Spill
	mov	r3, lr
	str	r12, [sp]
	str	r7, [sp, #4]
	ldr	r12, [sp, #96]          @ 4-byte Reload
	str	r12, [sp, #8]
	ldr	lr, [sp, #92]           @ 4-byte Reload
	str	lr, [sp, #12]
	ldr	r4, [sp, #88]           @ 4-byte Reload
	str	r4, [sp, #16]
	ldr	r5, [sp, #84]           @ 4-byte Reload
	str	r5, [sp, #20]
	bl	calc_noise1
	str	r0, [sp, #1560]
.LBB97_21:                              @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [r11, #-2740]
	cmp	r0, #1
	bne	.LBB97_24
@ BB#22:                                @   in Loop: Header=BB97_1 Depth=1
	movw	r0, #1
	str	r0, [sp, #1564]
	b	.LBB97_25
	.p2align	3
@ BB#23:
.LCPI97_1:
	.long	0                       @ double 0
	.long	0
.LBB97_24:                              @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #72]
	ldr	r1, [sp, #1532]
	ldr	r2, [sp, #132]          @ 4-byte Reload
	vldr	d16, [r2]
	vldr	d17, [r2, #8]
	vldr	d18, [r2, #16]
	ldr	r3, [sp, #1560]
	vldr	d19, [r2, #32]
	vldr	d20, [r2, #40]
	vldr	d21, [r2, #48]
	str	r3, [sp, #80]           @ 4-byte Spill
	vmov	r2, r3, d16
	vstr	d17, [sp]
	vstr	d18, [sp, #8]
	ldr	r12, [sp, #80]          @ 4-byte Reload
	str	r12, [sp, #16]
	vstr	d19, [sp, #24]
	vstr	d20, [sp, #32]
	vstr	d21, [sp, #40]
	bl	quant_compare
	str	r0, [sp, #1564]
.LBB97_25:                              @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [sp, #1564]
	cmp	r0, #0
	beq	.LBB97_27
@ BB#26:                                @   in Loop: Header=BB97_1 Depth=1
	movw	r2, #112
	sub	r0, r11, #428
	movw	r1, #2304
	sub	r6, r11, #2048
	sub	r3, r6, #684
	movw	r12, #244
	sub	lr, r11, #316
	ldr	r4, [sp, #1560]
	str	r4, [sp, #1532]
	ldr	r4, [sp, #132]          @ 4-byte Reload
	vldr	d16, [r4, #48]
	vstr	d16, [r4, #16]
	vldr	d16, [r4, #40]
	vstr	d16, [r4, #8]
	vldr	d16, [r4, #32]
	vstr	d16, [r4]
	ldr	r5, [r11, #-60]
	str	r0, [sp, #76]           @ 4-byte Spill
	mov	r0, r5
	str	r1, [sp, #72]           @ 4-byte Spill
	mov	r1, lr
	str	r2, [sp, #68]           @ 4-byte Spill
	mov	r2, r12
	str	r3, [sp, #64]           @ 4-byte Spill
	bl	memcpy
	ldr	r0, [r11, #-56]
	ldr	r1, [sp, #64]           @ 4-byte Reload
	ldr	r2, [sp, #72]           @ 4-byte Reload
	bl	memcpy
	ldr	r0, [sp, #76]           @ 4-byte Reload
	ldr	r1, [r11, #-64]
	ldr	r2, [sp, #68]           @ 4-byte Reload
	bl	memcpy
.LBB97_27:                              @   in Loop: Header=BB97_1 Depth=1
	b	.LBB97_28
.LBB97_28:                              @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #248]
	cmp	r0, #0
	bne	.LBB97_32
@ BB#29:                                @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [sp, #1560]
	cmp	r0, #0
	bne	.LBB97_31
@ BB#30:                                @   in Loop: Header=BB97_1 Depth=1
	movw	r0, #0
	str	r0, [sp, #152]
.LBB97_31:                              @   in Loop: Header=BB97_1 Depth=1
	b	.LBB97_32
.LBB97_32:                              @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [sp, #152]
	cmp	r0, #0
	beq	.LBB97_42
@ BB#33:                                @   in Loop: Header=BB97_1 Depth=1
	sub	r2, r11, #316
	add	r3, sp, #160
	add	r4, sp, #1024
	add	r0, r4, #552
	ldr	r1, [r11, #-64]
	bl	amp_scalefac_bands
	sub	r0, r11, #316
	ldr	r1, [r11, #-64]
	bl	loop_break
	str	r0, [r11, #-2744]
	cmp	r0, #0
	bne	.LBB97_41
@ BB#34:                                @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #172]
	cmp	r0, #1
	bne	.LBB97_36
@ BB#35:                                @   in Loop: Header=BB97_1 Depth=1
	sub	r0, r11, #316
	ldr	r1, [r11, #-64]
	bl	scale_bitcount
	str	r0, [r11, #-2744]
	b	.LBB97_37
.LBB97_36:                              @   in Loop: Header=BB97_1 Depth=1
	sub	r0, r11, #316
	ldr	r1, [r11, #-64]
	bl	scale_bitcount_lsf
	str	r0, [r11, #-2744]
.LBB97_37:                              @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [r11, #-2744]
	cmp	r0, #0
	beq	.LBB97_40
@ BB#38:                                @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [r11, #-64]
	ldr	r0, [r0, #68]
	cmp	r0, #0
	bne	.LBB97_40
@ BB#39:                                @   in Loop: Header=BB97_1 Depth=1
	movw	r0, #1
	str	r0, [sp, #148]
.LBB97_40:                              @   in Loop: Header=BB97_1 Depth=1
	b	.LBB97_41
.LBB97_41:                              @   in Loop: Header=BB97_1 Depth=1
	mvn	r0, #0
	ldr	r1, [r11, #-2744]
	cmp	r1, #0
	movw	r1, #0
	movne	r1, #1
	eor	r0, r1, r0
	and	r0, r0, #1
	str	r0, [sp, #152]
.LBB97_42:                              @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [sp, #148]
	cmp	r0, #0
	beq	.LBB97_45
@ BB#43:                                @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #76]
	cmp	r0, #0
	beq	.LBB97_45
@ BB#44:                                @   in Loop: Header=BB97_1 Depth=1
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-40]
	ldr	r2, [r11, #-64]
	bl	init_outer_loop
	movw	r1, #1
	str	r1, [sp, #156]
	str	r1, [sp, #152]
	ldr	r2, [r11, #-64]
	str	r1, [r2, #68]
	str	r0, [sp, #60]           @ 4-byte Spill
.LBB97_45:                              @   in Loop: Header=BB97_1 Depth=1
	b	.LBB97_1
.LBB97_46:
	movw	r0, #1
	movw	r2, #112
	sub	r1, r11, #428
	ldr	r3, [r11, #-64]
	str	r0, [sp, #56]           @ 4-byte Spill
	mov	r0, r3
	bl	memcpy
	ldr	r0, [r11, #-64]
	ldr	r0, [r0, #76]
	ldr	r1, [r11, #-64]
	ldr	r2, [r1]
	add	r0, r2, r0
	str	r0, [r1]
	ldr	r0, [r11, #-64]
	ldr	r0, [r0, #12]
	cmp	r0, #256
	ldr	r0, [sp, #56]           @ 4-byte Reload
	str	r0, [sp, #52]           @ 4-byte Spill
	blo	.LBB97_48
@ BB#47:
	movw	r0, :lower16:.L.str.6.217
	movt	r0, :upper16:.L.str.6.217
	movw	r1, :lower16:.L.str.1.216
	movt	r1, :upper16:.L.str.1.216
	movw	r2, #891
	movw	r3, :lower16:.L__func__.outer_loop
	movt	r3, :upper16:.L__func__.outer_loop
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #52]           @ 4-byte Spill
.LBB97_48:
	ldr	r0, [sp, #52]           @ 4-byte Reload
	ldr	r1, [sp, #1532]
	vmov	s0, r1
	vcvt.f64.s32	d16, s0
	ldr	r1, [r11, #-48]
	vstr	d16, [r1]
	ldr	r1, [sp, #132]          @ 4-byte Reload
	vldr	d16, [r1, #16]
	ldr	r2, [r11, #-48]
	vstr	d16, [r2, #8]
	vldr	d16, [r1, #8]
	ldr	r2, [r11, #-48]
	vstr	d16, [r2, #16]
	vldr	d16, [r1]
	ldr	r2, [r11, #-48]
	vstr	d16, [r2, #24]
	str	r0, [sp, #48]           @ 4-byte Spill
	sub	sp, r11, #28
	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
@ BB#49:
.Lfunc_end97:
	.size	outer_loop, .Lfunc_end97-outer_loop
	.cantunwind
	.fnend

	.globl	calc_noise1
	.p2align	3
	.type	calc_noise1,%function
	.code	32                      @ @calc_noise1
calc_noise1:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r7, r8, r10, r11, lr}
	add	r11, sp, #24
	sub	sp, sp, #280
	ldr	r12, [r11, #28]
	ldr	lr, [r11, #24]
	ldr	r4, [r11, #20]
	ldr	r5, [r11, #16]
	ldr	r6, [r11, #12]
	ldr	r7, [r11, #8]
	movw	r8, #0
	vldr	d16, .LCPI98_3
	vldr	d17, .LCPI98_4
	str	r0, [r11, #-28]
	str	r1, [r11, #-32]
	str	r2, [r11, #-36]
	str	r3, [r11, #-40]
	str	r7, [r11, #-44]
	str	r6, [r11, #-48]
	str	r5, [r11, #-52]
	str	r4, [r11, #-56]
	str	lr, [r11, #-60]
	str	r12, [r11, #-64]
	str	r8, [r11, #-84]
	str	r8, [r11, #-116]
	ldr	r0, [r11, #-56]
	vstr	d17, [r0]
	ldr	r0, [r11, #-60]
	vstr	d17, [r0]
	ldr	r0, [r11, #-64]
	vstr	d16, [r0]
	str	r8, [r11, #-88]
.LBB98_1:                               @ =>This Loop Header: Depth=1
                                        @     Child Loop BB98_9 Depth 2
	ldr	r0, [r11, #-88]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #80]
	cmp	r0, r1
	bhs	.LBB98_25
@ BB#2:                                 @   in Loop: Header=BB98_1 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-52]
	ldr	r2, [r11, #-88]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	str	r1, [r11, #-140]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #64]
	cmp	r1, #0
	str	r0, [sp, #132]          @ 4-byte Spill
	beq	.LBB98_4
@ BB#3:                                 @   in Loop: Header=BB98_1 Depth=1
	movw	r0, :lower16:pretab
	movt	r0, :upper16:pretab
	movw	r1, #2
	ldr	r2, [r11, #-88]
	movw	r3, :lower16:pretab
	movt	r3, :upper16:pretab
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	ldr	r3, [r11, #-140]
	add	r2, r3, r2
	str	r2, [r11, #-140]
	str	r0, [sp, #128]          @ 4-byte Spill
	str	r1, [sp, #124]          @ 4-byte Spill
.LBB98_4:                               @   in Loop: Header=BB98_1 Depth=1
	movw	r0, #1
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #12]
	ldr	r2, [r11, #-140]
	ldr	r3, [r11, #-36]
	ldr	r3, [r3, #68]
	add	r3, r3, #1
	lsl	r2, r2, r3
	sub	r1, r1, r2
	str	r1, [r11, #-140]
	ldr	r1, [r11, #-140]
	cmp	r1, #256
	str	r0, [sp, #120]          @ 4-byte Spill
	blt	.LBB98_6
@ BB#5:                                 @   in Loop: Header=BB98_1 Depth=1
	movw	r0, :lower16:.L.str.7.218
	movt	r0, :upper16:.L.str.7.218
	movw	r1, :lower16:.L.str.1.216
	movt	r1, :upper16:.L.str.1.216
	movw	r2, #945
	movw	r3, :lower16:.L__func__.calc_noise1
	movt	r3, :upper16:.L__func__.calc_noise1
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #120]          @ 4-byte Spill
.LBB98_6:                               @   in Loop: Header=BB98_1 Depth=1
	ldr	r0, [sp, #120]          @ 4-byte Reload
	movw	r1, #1
	ldr	r2, [r11, #-140]
	cmp	r2, #0
	str	r0, [sp, #116]          @ 4-byte Spill
	str	r1, [sp, #112]          @ 4-byte Spill
	bge	.LBB98_8
@ BB#7:                                 @   in Loop: Header=BB98_1 Depth=1
	movw	r0, :lower16:.L.str.8.219
	movt	r0, :upper16:.L.str.8.219
	movw	r1, :lower16:.L.str.1.216
	movt	r1, :upper16:.L.str.1.216
	movw	r2, #946
	movw	r3, :lower16:.L__func__.calc_noise1
	movt	r3, :upper16:.L__func__.calc_noise1
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #112]          @ 4-byte Spill
.LBB98_8:                               @   in Loop: Header=BB98_1 Depth=1
	ldr	r0, [sp, #112]          @ 4-byte Reload
	vldr	d16, .LCPI98_4
	movw	r1, :lower16:scalefac_band
	movt	r1, :upper16:scalefac_band
	movw	r2, #2
	ldr	r3, [r11, #-140]
	movw	r12, :lower16:pow20
	movt	r12, :upper16:pow20
	add	r3, r12, r3, lsl #3
	vldr	d17, [r3]
	vstr	d17, [r11, #-136]
	ldr	r3, [r11, #-88]
	movw	r12, :lower16:scalefac_band
	movt	r12, :upper16:scalefac_band
	ldr	r3, [r12, r3, lsl #2]
	str	r3, [r11, #-68]
	ldr	r3, [r11, #-88]
	add	r3, r3, #1
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	str	r3, [r11, #-72]
	ldr	r3, [r11, #-72]
	ldr	r12, [r11, #-68]
	sub	r3, r3, r12
	vmov	s0, r3
	vcvt.f64.s32	d17, s0
	vstr	d17, [r11, #-112]
	vstr	d16, [r11, #-96]
	ldr	r3, [r11, #-68]
	str	r3, [r11, #-76]
	str	r0, [sp, #108]          @ 4-byte Spill
	str	r2, [sp, #104]          @ 4-byte Spill
	str	r1, [sp, #100]          @ 4-byte Spill
.LBB98_9:                               @   Parent Loop BB98_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-76]
	ldr	r1, [r11, #-72]
	cmp	r0, r1
	bge	.LBB98_12
@ BB#10:                                @   in Loop: Header=BB98_9 Depth=2
	movw	r0, :lower16:pow43
	movt	r0, :upper16:pow43
	movw	r1, #3
	ldr	r2, [r11, #-28]
	ldr	r3, [r11, #-76]
	add	r2, r2, r3, lsl #3
	vldr	d16, [r2]
	vabs.f64	d16, d16
	ldr	r2, [r11, #-32]
	ldr	r2, [r2, r3, lsl #2]
	movw	r3, :lower16:pow43
	movt	r3, :upper16:pow43
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	vldr	d18, [r11, #-136]
	vmul.f64	d17, d17, d18
	vsub.f64	d16, d16, d17
	vstr	d16, [sp, #152]
	vldr	d16, [sp, #152]
	vldr	d17, [sp, #152]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-96]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-96]
	str	r0, [sp, #96]           @ 4-byte Spill
	str	r1, [sp, #92]           @ 4-byte Spill
@ BB#11:                                @   in Loop: Header=BB98_9 Depth=2
	ldr	r0, [r11, #-76]
	add	r0, r0, #1
	str	r0, [r11, #-76]
	b	.LBB98_9
.LBB98_12:                              @   in Loop: Header=BB98_1 Depth=1
	vldr	d16, .LCPI98_5
	movw	r0, #3
	vldr	d17, [r11, #-96]
	vldr	d18, [r11, #-112]
	vdiv.f64	d17, d17, d18
	ldr	r1, [r11, #-40]
	ldr	r2, [r11, #-88]
	add	r1, r1, r2, lsl #3
	vstr	d17, [r1]
	ldr	r1, [r11, #-40]
	ldr	r2, [r11, #-88]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	ldr	r1, [r11, #-48]
	add	r1, r1, r2, lsl #3
	vldr	d18, [r1]
	vdiv.f64	d17, d17, d18
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #88]           @ 4-byte Spill
	ble	.LBB98_14
@ BB#13:                                @   in Loop: Header=BB98_1 Depth=1
	vldr	d16, .LCPI98_5
	vstr	d16, [sp, #80]          @ 8-byte Spill
	b	.LBB98_15
.LBB98_14:                              @   in Loop: Header=BB98_1 Depth=1
	movw	r0, #3
	ldr	r1, [r11, #-40]
	ldr	r2, [r11, #-88]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	ldr	r1, [r11, #-48]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vdiv.f64	d16, d16, d17
	str	r0, [sp, #76]           @ 4-byte Spill
	vstr	d16, [sp, #80]          @ 8-byte Spill
.LBB98_15:                              @   in Loop: Header=BB98_1 Depth=1
	vldr	d16, [sp, #80]          @ 8-byte Reload
	movw	r0, #3
	vmov	r1, r2, d16
	str	r0, [sp, #72]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	log10
	vmov	d16, r0, r1
	vmov.f64	d17, #1.000000e+01
	vmul.f64	d16, d16, d17
	vstr	d16, [r11, #-128]
	ldr	r0, [r11, #-44]
	ldr	r1, [r11, #-88]
	add	r0, r0, r1, lsl #3
	vstr	d16, [r0]
	vldr	d16, [r11, #-128]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB98_17
@ BB#16:                                @   in Loop: Header=BB98_1 Depth=1
	ldr	r0, [r11, #-84]
	add	r0, r0, #1
	str	r0, [r11, #-84]
	vldr	d16, [r11, #-128]
	ldr	r0, [r11, #-56]
	vldr	d17, [r0]
	vadd.f64	d16, d17, d16
	vstr	d16, [r0]
.LBB98_17:                              @   in Loop: Header=BB98_1 Depth=1
	vldr	d16, [r11, #-128]
	ldr	r0, [r11, #-60]
	vldr	d17, [r0]
	vadd.f64	d16, d17, d16
	vstr	d16, [r0]
	ldr	r0, [r11, #-64]
	vldr	d16, [r0]
	vldr	d17, [r11, #-128]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	ble	.LBB98_19
@ BB#18:                                @   in Loop: Header=BB98_1 Depth=1
	ldr	r0, [r11, #-64]
	vldr	d16, [r0]
	vstr	d16, [sp, #64]          @ 8-byte Spill
	b	.LBB98_20
.LBB98_19:                              @   in Loop: Header=BB98_1 Depth=1
	vldr	d16, [r11, #-128]
	vstr	d16, [sp, #64]          @ 8-byte Spill
.LBB98_20:                              @   in Loop: Header=BB98_1 Depth=1
	vldr	d16, [sp, #64]          @ 8-byte Reload
	ldr	r0, [r11, #-64]
	vstr	d16, [r0]
	ldr	r0, [r11, #-116]
	add	r0, r0, #1
	str	r0, [r11, #-116]
@ BB#21:                                @   in Loop: Header=BB98_1 Depth=1
	ldr	r0, [r11, #-88]
	add	r0, r0, #1
	str	r0, [r11, #-88]
	b	.LBB98_1
	.p2align	3
@ BB#22:
.LCPI98_3:
	.long	0                       @ double -999
	.long	3230611456
	.p2align	3
@ BB#23:
.LCPI98_4:
	.long	0                       @ double 0
	.long	0
	.p2align	3
@ BB#24:
.LCPI98_5:
	.long	3539053052              @ double 0.001
	.long	1062232653
.LBB98_25:
	movw	r0, #0
	str	r0, [r11, #-80]
.LBB98_26:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB98_28 Depth 2
                                        @       Child Loop BB98_34 Depth 3
	ldr	r0, [r11, #-80]
	cmp	r0, #3
	bge	.LBB98_49
@ BB#27:                                @   in Loop: Header=BB98_26 Depth=1
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #84]
	str	r0, [r11, #-88]
.LBB98_28:                              @   Parent Loop BB98_26 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB98_34 Depth 3
	ldr	r0, [r11, #-88]
	cmp	r0, #12
	bhs	.LBB98_47
@ BB#29:                                @   in Loop: Header=BB98_28 Depth=2
	movw	r0, #1
	movw	r1, #3
	ldr	r2, [r11, #-52]
	ldr	r3, [r11, #-88]
	add	r3, r3, r3, lsl #1
	add	r2, r2, r3, lsl #2
	ldr	r3, [r11, #-80]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2, #88]
	ldr	r12, [r11, #-36]
	ldr	lr, [r12, #68]
	add	lr, lr, #1
	lsl	r2, r2, lr
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3, #44]
	lsl	r3, r3, #3
	add	r2, r2, r3
	str	r2, [sp, #148]
	ldr	r2, [r11, #-36]
	ldr	r2, [r2, #12]
	ldr	r3, [sp, #148]
	sub	r2, r2, r3
	str	r2, [sp, #148]
	ldr	r2, [sp, #148]
	cmp	r2, #256
	str	r1, [sp, #60]           @ 4-byte Spill
	str	r0, [sp, #56]           @ 4-byte Spill
	blt	.LBB98_31
@ BB#30:                                @   in Loop: Header=BB98_28 Depth=2
	movw	r0, :lower16:.L.str.7.218
	movt	r0, :upper16:.L.str.7.218
	movw	r1, :lower16:.L.str.1.216
	movt	r1, :upper16:.L.str.1.216
	movw	r2, #1000
	movw	r3, :lower16:.L__func__.calc_noise1
	movt	r3, :upper16:.L__func__.calc_noise1
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #56]           @ 4-byte Spill
.LBB98_31:                              @   in Loop: Header=BB98_28 Depth=2
	ldr	r0, [sp, #56]           @ 4-byte Reload
	movw	r1, #1
	ldr	r2, [sp, #148]
	cmp	r2, #0
	str	r0, [sp, #52]           @ 4-byte Spill
	str	r1, [sp, #48]           @ 4-byte Spill
	bge	.LBB98_33
@ BB#32:                                @   in Loop: Header=BB98_28 Depth=2
	movw	r0, :lower16:.L.str.8.219
	movt	r0, :upper16:.L.str.8.219
	movw	r1, :lower16:.L.str.1.216
	movt	r1, :upper16:.L.str.1.216
	movw	r2, #1001
	movw	r3, :lower16:.L__func__.calc_noise1
	movt	r3, :upper16:.L__func__.calc_noise1
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #48]           @ 4-byte Spill
.LBB98_33:                              @   in Loop: Header=BB98_28 Depth=2
	ldr	r0, [sp, #48]           @ 4-byte Reload
	vldr	d16, .LCPI98_1
	movw	r1, :lower16:scalefac_band
	movt	r1, :upper16:scalefac_band
	add	r1, r1, #92
	movw	r2, #2
	ldr	r3, [sp, #148]
	movw	r12, :lower16:pow20
	movt	r12, :upper16:pow20
	add	r3, r12, r3, lsl #3
	vldr	d17, [r3]
	vstr	d17, [r11, #-104]
	ldr	r3, [r11, #-88]
	movw	r12, :lower16:scalefac_band
	movt	r12, :upper16:scalefac_band
	add	r12, r12, #92
	ldr	r3, [r12, r3, lsl #2]
	str	r3, [r11, #-68]
	ldr	r3, [r11, #-88]
	add	r3, r3, #1
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	str	r3, [r11, #-72]
	ldr	r3, [r11, #-72]
	ldr	r12, [r11, #-68]
	sub	r3, r3, r12
	vmov	s0, r3
	vcvt.f64.s32	d17, s0
	vstr	d17, [r11, #-112]
	vstr	d16, [r11, #-96]
	ldr	r3, [r11, #-68]
	str	r3, [r11, #-76]
	str	r0, [sp, #44]           @ 4-byte Spill
	str	r2, [sp, #40]           @ 4-byte Spill
	str	r1, [sp, #36]           @ 4-byte Spill
.LBB98_34:                              @   Parent Loop BB98_26 Depth=1
                                        @     Parent Loop BB98_28 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-76]
	ldr	r1, [r11, #-72]
	cmp	r0, r1
	bge	.LBB98_37
@ BB#35:                                @   in Loop: Header=BB98_34 Depth=3
	movw	r0, :lower16:pow43
	movt	r0, :upper16:pow43
	movw	r1, #3
	ldr	r2, [r11, #-28]
	ldr	r3, [r11, #-76]
	add	r3, r3, r3, lsl #1
	ldr	r12, [r11, #-80]
	add	r3, r3, r12
	add	r2, r2, r3, lsl #3
	vldr	d16, [r2]
	vabs.f64	d16, d16
	ldr	r2, [r11, #-32]
	ldr	r2, [r2, r3, lsl #2]
	movw	r3, :lower16:pow43
	movt	r3, :upper16:pow43
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	vldr	d18, [r11, #-104]
	vmul.f64	d17, d17, d18
	vsub.f64	d16, d16, d17
	vstr	d16, [sp, #136]
	vldr	d16, [sp, #136]
	vldr	d17, [sp, #136]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-96]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-96]
	str	r0, [sp, #32]           @ 4-byte Spill
	str	r1, [sp, #28]           @ 4-byte Spill
@ BB#36:                                @   in Loop: Header=BB98_34 Depth=3
	ldr	r0, [r11, #-76]
	add	r0, r0, #1
	str	r0, [r11, #-76]
	b	.LBB98_34
.LBB98_37:                              @   in Loop: Header=BB98_28 Depth=2
	vldr	d16, .LCPI98_2
	movw	r0, #3
	vldr	d17, [r11, #-96]
	vldr	d18, [r11, #-112]
	vdiv.f64	d17, d17, d18
	ldr	r1, [r11, #-40]
	ldr	r2, [r11, #-80]
	mov	r3, #168
	mla	r1, r2, r3, r1
	ldr	r2, [r11, #-88]
	add	r1, r1, r2, lsl #3
	vstr	d17, [r1, #168]
	ldr	r1, [r11, #-40]
	ldr	r2, [r11, #-80]
	mla	r1, r2, r3, r1
	ldr	r3, [r11, #-88]
	add	r1, r1, r3, lsl #3
	vldr	d17, [r1, #168]
	ldr	r1, [r11, #-48]
	add	r3, r3, r3, lsl #1
	add	r1, r1, r3, lsl #3
	add	r1, r1, #176
	add	r1, r1, r2, lsl #3
	vldr	d18, [r1]
	vdiv.f64	d17, d17, d18
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #24]           @ 4-byte Spill
	ble	.LBB98_39
@ BB#38:                                @   in Loop: Header=BB98_28 Depth=2
	vldr	d16, .LCPI98_2
	vstr	d16, [sp, #16]          @ 8-byte Spill
	b	.LBB98_40
.LBB98_39:                              @   in Loop: Header=BB98_28 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-40]
	ldr	r2, [r11, #-80]
	mov	r3, #168
	mla	r1, r2, r3, r1
	ldr	r3, [r11, #-88]
	add	r1, r1, r3, lsl #3
	vldr	d16, [r1, #168]
	ldr	r1, [r11, #-48]
	add	r3, r3, r3, lsl #1
	add	r1, r1, r3, lsl #3
	add	r1, r1, #176
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vdiv.f64	d16, d16, d17
	str	r0, [sp, #12]           @ 4-byte Spill
	vstr	d16, [sp, #16]          @ 8-byte Spill
.LBB98_40:                              @   in Loop: Header=BB98_28 Depth=2
	vldr	d16, [sp, #16]          @ 8-byte Reload
	movw	r0, #3
	vmov	r1, r2, d16
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	log10
	vmov	d16, r0, r1
	vmov.f64	d17, #1.000000e+01
	vmul.f64	d16, d16, d17
	vstr	d16, [r11, #-128]
	ldr	r0, [r11, #-44]
	ldr	r1, [r11, #-80]
	mov	r2, #168
	mla	r0, r1, r2, r0
	add	r0, r0, #168
	ldr	r1, [r11, #-88]
	add	r0, r0, r1, lsl #3
	vstr	d16, [r0]
	vldr	d16, [r11, #-128]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB98_42
@ BB#41:                                @   in Loop: Header=BB98_28 Depth=2
	ldr	r0, [r11, #-84]
	add	r0, r0, #1
	str	r0, [r11, #-84]
	vldr	d16, [r11, #-128]
	ldr	r0, [r11, #-56]
	vldr	d17, [r0]
	vadd.f64	d16, d17, d16
	vstr	d16, [r0]
.LBB98_42:                              @   in Loop: Header=BB98_28 Depth=2
	vldr	d16, [r11, #-128]
	ldr	r0, [r11, #-60]
	vldr	d17, [r0]
	vadd.f64	d16, d17, d16
	vstr	d16, [r0]
	ldr	r0, [r11, #-64]
	vldr	d16, [r0]
	vldr	d17, [r11, #-128]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	ble	.LBB98_44
@ BB#43:                                @   in Loop: Header=BB98_28 Depth=2
	ldr	r0, [r11, #-64]
	vldr	d16, [r0]
	vstr	d16, [sp]               @ 8-byte Spill
	b	.LBB98_45
.LBB98_44:                              @   in Loop: Header=BB98_28 Depth=2
	vldr	d16, [r11, #-128]
	vstr	d16, [sp]               @ 8-byte Spill
.LBB98_45:                              @   in Loop: Header=BB98_28 Depth=2
	vldr	d16, [sp]               @ 8-byte Reload
	ldr	r0, [r11, #-64]
	vstr	d16, [r0]
	ldr	r0, [r11, #-116]
	add	r0, r0, #1
	str	r0, [r11, #-116]
@ BB#46:                                @   in Loop: Header=BB98_28 Depth=2
	ldr	r0, [r11, #-88]
	add	r0, r0, #1
	str	r0, [r11, #-88]
	b	.LBB98_28
.LBB98_47:                              @   in Loop: Header=BB98_26 Depth=1
	b	.LBB98_48
.LBB98_48:                              @   in Loop: Header=BB98_26 Depth=1
	ldr	r0, [r11, #-80]
	add	r0, r0, #1
	str	r0, [r11, #-80]
	b	.LBB98_26
.LBB98_49:
	ldr	r0, [r11, #-116]
	cmp	r0, #1
	ble	.LBB98_51
@ BB#50:
	ldr	r0, [r11, #-116]
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	ldr	r0, [r11, #-60]
	vldr	d17, [r0]
	vdiv.f64	d16, d17, d16
	vstr	d16, [r0]
.LBB98_51:
	ldr	r0, [r11, #-84]
	cmp	r0, #1
	ble	.LBB98_53
@ BB#52:
	ldr	r0, [r11, #-84]
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	ldr	r0, [r11, #-56]
	vldr	d17, [r0]
	vdiv.f64	d16, d17, d16
	vstr	d16, [r0]
.LBB98_53:
	ldr	r0, [r11, #-84]
	sub	sp, r11, #24
	pop	{r4, r5, r6, r7, r8, r10, r11, pc}
	.p2align	3
@ BB#54:
.LCPI98_1:
	.long	0                       @ double 0
	.long	0
.LCPI98_2:
	.long	3539053052              @ double 0.001
	.long	1062232653
.Lfunc_end98:
	.size	calc_noise1, .Lfunc_end98-calc_noise1
	.cantunwind
	.fnend

	.globl	quant_compare
	.p2align	3
	.type	quant_compare,%function
	.code	32                      @ @quant_compare
quant_compare:
	.fnstart
@ BB#0:
	sub	sp, sp, #112
	vmov	d16, r2, r3
	vldr	d17, [sp, #152]
	vldr	d18, [sp, #144]
	vldr	d19, [sp, #136]
	ldr	r2, [sp, #128]
	vldr	d20, [sp, #120]
	vldr	d21, [sp, #112]
	movw	r3, #0
	str	r0, [sp, #108]
	str	r1, [sp, #104]
	vstr	d16, [sp, #96]
	vstr	d21, [sp, #88]
	vstr	d20, [sp, #80]
	str	r2, [sp, #76]
	vstr	d19, [sp, #64]
	vstr	d18, [sp, #56]
	vstr	d17, [sp, #48]
	str	r3, [sp, #44]
	ldr	r0, [sp, #108]
	cmp	r0, #0
	bne	.LBB99_6
@ BB#1:
	movw	r0, #1
	ldr	r1, [sp, #76]
	ldr	r2, [sp, #104]
	cmp	r1, r2
	str	r0, [sp, #40]           @ 4-byte Spill
	blt	.LBB99_5
@ BB#2:
	movw	r0, #0
	ldr	r1, [sp, #76]
	ldr	r2, [sp, #104]
	cmp	r1, r2
	str	r0, [sp, #36]           @ 4-byte Spill
	bne	.LBB99_4
@ BB#3:
	vldr	d16, [sp, #56]
	vldr	d17, [sp, #88]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	movw	r0, #0
	movls	r0, #1
	str	r0, [sp, #36]           @ 4-byte Spill
.LBB99_4:
	ldr	r0, [sp, #36]           @ 4-byte Reload
	str	r0, [sp, #40]           @ 4-byte Spill
.LBB99_5:
	ldr	r0, [sp, #40]           @ 4-byte Reload
	and	r0, r0, #1
	str	r0, [sp, #44]
.LBB99_6:
	ldr	r0, [sp, #108]
	cmp	r0, #1
	bne	.LBB99_8
@ BB#7:
	vldr	d16, [sp, #48]
	vldr	d17, [sp, #80]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	movw	r0, #0
	movmi	r0, #1
	and	r0, r0, #1
	str	r0, [sp, #44]
.LBB99_8:
	ldr	r0, [sp, #108]
	cmp	r0, #2
	bne	.LBB99_10
@ BB#9:
	vldr	d16, [sp, #64]
	vldr	d17, [sp, #96]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	movw	r0, #0
	movmi	r0, #1
	and	r0, r0, #1
	str	r0, [sp, #44]
.LBB99_10:
	ldr	r0, [sp, #108]
	cmp	r0, #3
	bne	.LBB99_14
@ BB#11:
	movw	r0, #0
	vldr	d16, [sp, #64]
	vldr	d17, [sp, #96]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #32]           @ 4-byte Spill
	bpl	.LBB99_13
@ BB#12:
	vmov.f64	d16, #2.000000e+00
	vldr	d17, [sp, #48]
	vldr	d18, [sp, #80]
	vadd.f64	d16, d18, d16
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	movw	r0, #0
	movmi	r0, #1
	str	r0, [sp, #32]           @ 4-byte Spill
.LBB99_13:
	ldr	r0, [sp, #32]           @ 4-byte Reload
	and	r0, r0, #1
	str	r0, [sp, #44]
.LBB99_14:
	ldr	r0, [sp, #108]
	cmp	r0, #4
	bne	.LBB99_35
@ BB#15:
	vldr	d16, .LCPI99_0
	vldr	d17, [sp, #48]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	blt	.LBB99_17
@ BB#16:
	movw	r0, #1
	vmov.f64	d16, #2.000000e+00
	vldr	d17, [sp, #80]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #28]           @ 4-byte Spill
	bgt	.LBB99_34
.LBB99_17:
	vldr	d16, .LCPI99_0
	vldr	d17, [sp, #48]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	blt	.LBB99_21
@ BB#18:
	vldr	d16, [sp, #80]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB99_21
@ BB#19:
	vmov.f64	d16, #2.000000e+00
	vldr	d17, [sp, #80]
	vadd.f64	d16, d17, d16
	vldr	d17, [sp, #48]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	ble	.LBB99_21
@ BB#20:
	movw	r0, #1
	vldr	d16, [sp, #64]
	vldr	d17, [sp, #96]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #28]           @ 4-byte Spill
	bmi	.LBB99_34
.LBB99_21:
	vldr	d16, .LCPI99_0
	vldr	d17, [sp, #48]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	blt	.LBB99_25
@ BB#22:
	vldr	d16, [sp, #80]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB99_25
@ BB#23:
	vmov.f64	d16, #2.000000e+00
	vldr	d17, [sp, #80]
	vadd.f64	d16, d17, d16
	vldr	d17, [sp, #48]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	ble	.LBB99_25
@ BB#24:
	movw	r0, #1
	vldr	d16, [sp, #64]
	vldr	d17, [sp, #96]
	vldr	d18, [sp, #88]
	vadd.f64	d17, d17, d18
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #28]           @ 4-byte Spill
	bmi	.LBB99_34
.LBB99_25:
	vldr	d16, .LCPI99_0
	vldr	d17, [sp, #48]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB99_29
@ BB#26:
	vmov.f64	d16, #-5.000000e-01
	vldr	d17, [sp, #80]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	ble	.LBB99_29
@ BB#27:
	vmov.f64	d16, #1.000000e+00
	vldr	d17, [sp, #80]
	vadd.f64	d16, d17, d16
	vldr	d17, [sp, #48]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	ble	.LBB99_29
@ BB#28:
	movw	r0, #1
	vldr	d16, [sp, #64]
	vldr	d17, [sp, #56]
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #96]
	vldr	d18, [sp, #88]
	vadd.f64	d17, d17, d18
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #28]           @ 4-byte Spill
	bmi	.LBB99_34
.LBB99_29:
	movw	r0, #0
	vldr	d16, .LCPI99_0
	vldr	d17, [sp, #48]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #24]           @ 4-byte Spill
	bpl	.LBB99_33
@ BB#30:
	movw	r0, #0
	vmov.f64	d16, #-1.000000e+00
	vldr	d17, [sp, #80]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #24]           @ 4-byte Spill
	ble	.LBB99_33
@ BB#31:
	movw	r0, #0
	vmov.f64	d16, #1.500000e+00
	vldr	d17, [sp, #80]
	vadd.f64	d16, d17, d16
	vldr	d17, [sp, #48]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #24]           @ 4-byte Spill
	ble	.LBB99_33
@ BB#32:
	vldr	d16, [sp, #64]
	vldr	d17, [sp, #56]
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #56]
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #96]
	vldr	d18, [sp, #88]
	vadd.f64	d17, d17, d18
	vldr	d18, [sp, #88]
	vadd.f64	d17, d17, d18
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	movw	r0, #0
	movmi	r0, #1
	str	r0, [sp, #24]           @ 4-byte Spill
.LBB99_33:
	ldr	r0, [sp, #24]           @ 4-byte Reload
	str	r0, [sp, #28]           @ 4-byte Spill
.LBB99_34:
	ldr	r0, [sp, #28]           @ 4-byte Reload
	and	r0, r0, #1
	str	r0, [sp, #44]
.LBB99_35:
	ldr	r0, [sp, #108]
	cmp	r0, #5
	bne	.LBB99_41
@ BB#36:
	movw	r0, #1
	vldr	d16, [sp, #56]
	vldr	d17, [sp, #88]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #20]           @ 4-byte Spill
	bmi	.LBB99_40
@ BB#37:
	movw	r0, #0
	vldr	d16, [sp, #56]
	vldr	d17, [sp, #88]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #16]           @ 4-byte Spill
	bne	.LBB99_39
@ BB#38:
	vldr	d16, [sp, #64]
	vldr	d17, [sp, #96]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	movw	r0, #0
	movmi	r0, #1
	str	r0, [sp, #16]           @ 4-byte Spill
.LBB99_39:
	ldr	r0, [sp, #16]           @ 4-byte Reload
	str	r0, [sp, #20]           @ 4-byte Spill
.LBB99_40:
	ldr	r0, [sp, #20]           @ 4-byte Reload
	and	r0, r0, #1
	str	r0, [sp, #44]
.LBB99_41:
	ldr	r0, [sp, #108]
	cmp	r0, #6
	bne	.LBB99_51
@ BB#42:
	movw	r0, #1
	vldr	d16, [sp, #56]
	vldr	d17, [sp, #88]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #12]           @ 4-byte Spill
	bmi	.LBB99_50
@ BB#43:
	movw	r0, #0
	vldr	d16, [sp, #56]
	vldr	d17, [sp, #88]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #8]            @ 4-byte Spill
	bne	.LBB99_49
@ BB#44:
	movw	r0, #1
	vldr	d16, [sp, #48]
	vldr	d17, [sp, #80]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #4]            @ 4-byte Spill
	bmi	.LBB99_48
@ BB#45:
	movw	r0, #0
	vldr	d16, [sp, #48]
	vldr	d17, [sp, #80]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp]                @ 4-byte Spill
	bne	.LBB99_47
@ BB#46:
	vldr	d16, [sp, #64]
	vldr	d17, [sp, #96]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	movw	r0, #0
	movls	r0, #1
	str	r0, [sp]                @ 4-byte Spill
.LBB99_47:
	ldr	r0, [sp]                @ 4-byte Reload
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB99_48:
	ldr	r0, [sp, #4]            @ 4-byte Reload
	str	r0, [sp, #8]            @ 4-byte Spill
.LBB99_49:
	ldr	r0, [sp, #8]            @ 4-byte Reload
	str	r0, [sp, #12]           @ 4-byte Spill
.LBB99_50:
	ldr	r0, [sp, #12]           @ 4-byte Reload
	and	r0, r0, #1
	str	r0, [sp, #44]
.LBB99_51:
	ldr	r0, [sp, #44]
	add	sp, sp, #112
	bx	lr
	.p2align	3
@ BB#52:
.LCPI99_0:
	.long	0                       @ double 0
	.long	0
.Lfunc_end99:
	.size	quant_compare, .Lfunc_end99-quant_compare
	.cantunwind
	.fnend

	.globl	amp_scalefac_bands
	.p2align	3
	.type	amp_scalefac_bands,%function
	.code	32                      @ @amp_scalefac_bands
amp_scalefac_bands:
	.fnstart
@ BB#0:
	sub	sp, sp, #128
	str	r0, [sp, #124]
	str	r1, [sp, #120]
	str	r2, [sp, #116]
	str	r3, [sp, #112]
	ldr	r0, [sp, #120]
	ldr	r0, [r0, #68]
	cmp	r0, #0
	bne	.LBB100_2
@ BB#1:
	vldr	d16, .LCPI100_5
	vstr	d16, [sp, #80]
	b	.LBB100_3
.LBB100_2:
	vldr	d16, .LCPI100_0
	vstr	d16, [sp, #80]
.LBB100_3:
	movw	r0, #0
	vldr	d16, .LCPI100_2
	vstr	d16, [sp, #72]
	str	r0, [sp, #92]
.LBB100_4:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #92]
	ldr	r1, [sp, #120]
	ldr	r1, [r1, #80]
	cmp	r0, r1
	bhs	.LBB100_10
@ BB#5:                                 @   in Loop: Header=BB100_4 Depth=1
	movw	r0, #3
	ldr	r1, [sp, #112]
	ldr	r2, [sp, #92]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vldr	d17, [sp, #72]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #68]           @ 4-byte Spill
	ble	.LBB100_7
@ BB#6:                                 @   in Loop: Header=BB100_4 Depth=1
	movw	r0, #3
	ldr	r1, [sp, #112]
	ldr	r2, [sp, #92]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #64]           @ 4-byte Spill
	vstr	d16, [sp, #56]          @ 8-byte Spill
	b	.LBB100_8
.LBB100_7:                              @   in Loop: Header=BB100_4 Depth=1
	vldr	d16, [sp, #72]
	vstr	d16, [sp, #56]          @ 8-byte Spill
.LBB100_8:                              @   in Loop: Header=BB100_4 Depth=1
	vldr	d16, [sp, #56]          @ 8-byte Reload
	vstr	d16, [sp, #72]
@ BB#9:                                 @   in Loop: Header=BB100_4 Depth=1
	ldr	r0, [sp, #92]
	add	r0, r0, #1
	str	r0, [sp, #92]
	b	.LBB100_4
.LBB100_10:
	ldr	r0, [sp, #120]
	ldr	r0, [r0, #84]
	str	r0, [sp, #92]
.LBB100_11:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB100_13 Depth 2
	ldr	r0, [sp, #92]
	cmp	r0, #12
	bhs	.LBB100_21
@ BB#12:                                @   in Loop: Header=BB100_11 Depth=1
	movw	r0, #0
	str	r0, [sp, #96]
.LBB100_13:                             @   Parent Loop BB100_11 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #96]
	cmp	r0, #3
	bge	.LBB100_19
@ BB#14:                                @   in Loop: Header=BB100_13 Depth=2
	movw	r0, #3
	ldr	r1, [sp, #112]
	ldr	r2, [sp, #96]
	mov	r3, #168
	mla	r1, r2, r3, r1
	add	r1, r1, #168
	ldr	r2, [sp, #92]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vldr	d17, [sp, #72]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #52]           @ 4-byte Spill
	ble	.LBB100_16
@ BB#15:                                @   in Loop: Header=BB100_13 Depth=2
	movw	r0, #3
	ldr	r1, [sp, #112]
	ldr	r2, [sp, #96]
	mov	r3, #168
	mla	r1, r2, r3, r1
	add	r1, r1, #168
	ldr	r2, [sp, #92]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #48]           @ 4-byte Spill
	vstr	d16, [sp, #40]          @ 8-byte Spill
	b	.LBB100_17
.LBB100_16:                             @   in Loop: Header=BB100_13 Depth=2
	vldr	d16, [sp, #72]
	vstr	d16, [sp, #40]          @ 8-byte Spill
.LBB100_17:                             @   in Loop: Header=BB100_13 Depth=2
	vldr	d16, [sp, #40]          @ 8-byte Reload
	vstr	d16, [sp, #72]
@ BB#18:                                @   in Loop: Header=BB100_13 Depth=2
	ldr	r0, [sp, #96]
	add	r0, r0, #1
	str	r0, [sp, #96]
	b	.LBB100_13
.LBB100_19:                             @   in Loop: Header=BB100_11 Depth=1
	b	.LBB100_20
.LBB100_20:                             @   in Loop: Header=BB100_11 Depth=1
	ldr	r0, [sp, #92]
	add	r0, r0, #1
	str	r0, [sp, #92]
	b	.LBB100_11
.LBB100_21:
	vldr	d16, .LCPI100_3
	vldr	d17, [sp, #72]
	vmul.f64	d16, d17, d16
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB100_23
@ BB#22:
	vldr	d16, .LCPI100_3
	vldr	d17, [sp, #72]
	vmul.f64	d16, d17, d16
	vstr	d16, [sp, #32]          @ 8-byte Spill
	b	.LBB100_24
.LBB100_23:
	vldr	d16, .LCPI100_4
	vstr	d16, [sp, #32]          @ 8-byte Spill
	b	.LBB100_24
.LBB100_24:
	vldr	d16, [sp, #32]          @ 8-byte Reload
	movw	r0, #0
	vstr	d16, [sp, #72]
	str	r0, [sp, #92]
.LBB100_25:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB100_28 Depth 2
	ldr	r0, [sp, #92]
	ldr	r1, [sp, #120]
	ldr	r1, [r1, #80]
	cmp	r0, r1
	bhs	.LBB100_34
@ BB#26:                                @   in Loop: Header=BB100_25 Depth=1
	movw	r0, #3
	ldr	r1, [sp, #112]
	ldr	r2, [sp, #92]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vldr	d17, [sp, #72]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #28]           @ 4-byte Spill
	ble	.LBB100_32
@ BB#27:                                @   in Loop: Header=BB100_25 Depth=1
	movw	r0, :lower16:scalefac_band
	movt	r0, :upper16:scalefac_band
	movw	r1, #2
	ldr	r2, [sp, #116]
	ldr	r3, [sp, #92]
	ldr	r12, [r2, r3, lsl #2]
	add	r12, r12, #1
	str	r12, [r2, r3, lsl #2]
	ldr	r2, [sp, #92]
	movw	r3, :lower16:scalefac_band
	movt	r3, :upper16:scalefac_band
	ldr	r2, [r3, r2, lsl #2]
	str	r2, [sp, #108]
	ldr	r2, [sp, #92]
	add	r2, r2, #1
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	str	r2, [sp, #104]
	ldr	r2, [sp, #108]
	str	r2, [sp, #100]
	str	r0, [sp, #24]           @ 4-byte Spill
	str	r1, [sp, #20]           @ 4-byte Spill
.LBB100_28:                             @   Parent Loop BB100_25 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #100]
	ldr	r1, [sp, #104]
	cmp	r0, r1
	bge	.LBB100_31
@ BB#29:                                @   in Loop: Header=BB100_28 Depth=2
	movw	r0, #3
	vldr	d16, [sp, #80]
	ldr	r1, [sp, #124]
	ldr	r2, [sp, #100]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vmul.f64	d16, d17, d16
	vstr	d16, [r1]
	str	r0, [sp, #16]           @ 4-byte Spill
@ BB#30:                                @   in Loop: Header=BB100_28 Depth=2
	ldr	r0, [sp, #100]
	add	r0, r0, #1
	str	r0, [sp, #100]
	b	.LBB100_28
.LBB100_31:                             @   in Loop: Header=BB100_25 Depth=1
	b	.LBB100_32
.LBB100_32:                             @   in Loop: Header=BB100_25 Depth=1
	b	.LBB100_33
.LBB100_33:                             @   in Loop: Header=BB100_25 Depth=1
	ldr	r0, [sp, #92]
	add	r0, r0, #1
	str	r0, [sp, #92]
	b	.LBB100_25
.LBB100_34:
	movw	r0, #0
	str	r0, [sp, #96]
.LBB100_35:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB100_37 Depth 2
                                        @       Child Loop BB100_40 Depth 3
	ldr	r0, [sp, #96]
	cmp	r0, #3
	bge	.LBB100_48
@ BB#36:                                @   in Loop: Header=BB100_35 Depth=1
	ldr	r0, [sp, #120]
	ldr	r0, [r0, #84]
	str	r0, [sp, #92]
.LBB100_37:                             @   Parent Loop BB100_35 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB100_40 Depth 3
	ldr	r0, [sp, #92]
	cmp	r0, #12
	bhs	.LBB100_46
@ BB#38:                                @   in Loop: Header=BB100_37 Depth=2
	movw	r0, #3
	ldr	r1, [sp, #112]
	ldr	r2, [sp, #96]
	mov	r3, #168
	mla	r1, r2, r3, r1
	add	r1, r1, #168
	ldr	r2, [sp, #92]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vldr	d17, [sp, #72]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #12]           @ 4-byte Spill
	ble	.LBB100_44
@ BB#39:                                @   in Loop: Header=BB100_37 Depth=2
	movw	r0, :lower16:scalefac_band
	movt	r0, :upper16:scalefac_band
	add	r0, r0, #92
	movw	r1, #2
	ldr	r2, [sp, #116]
	ldr	r3, [sp, #92]
	add	r3, r3, r3, lsl #1
	add	r2, r2, r3, lsl #2
	ldr	r3, [sp, #96]
	add	r2, r2, r3, lsl #2
	ldr	r3, [r2, #88]
	add	r3, r3, #1
	str	r3, [r2, #88]
	ldr	r2, [sp, #92]
	movw	r3, :lower16:scalefac_band
	movt	r3, :upper16:scalefac_band
	add	r3, r3, #92
	ldr	r2, [r3, r2, lsl #2]
	str	r2, [sp, #108]
	ldr	r2, [sp, #92]
	add	r2, r2, #1
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	str	r2, [sp, #104]
	ldr	r2, [sp, #108]
	str	r2, [sp, #100]
	str	r0, [sp, #8]            @ 4-byte Spill
	str	r1, [sp, #4]            @ 4-byte Spill
.LBB100_40:                             @   Parent Loop BB100_35 Depth=1
                                        @     Parent Loop BB100_37 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [sp, #100]
	ldr	r1, [sp, #104]
	cmp	r0, r1
	bge	.LBB100_43
@ BB#41:                                @   in Loop: Header=BB100_40 Depth=3
	movw	r0, #3
	vldr	d16, [sp, #80]
	ldr	r1, [sp, #124]
	ldr	r2, [sp, #100]
	add	r2, r2, r2, lsl #1
	ldr	r3, [sp, #96]
	add	r2, r2, r3
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vmul.f64	d16, d17, d16
	vstr	d16, [r1]
	str	r0, [sp]                @ 4-byte Spill
@ BB#42:                                @   in Loop: Header=BB100_40 Depth=3
	ldr	r0, [sp, #100]
	add	r0, r0, #1
	str	r0, [sp, #100]
	b	.LBB100_40
.LBB100_43:                             @   in Loop: Header=BB100_37 Depth=2
	b	.LBB100_44
.LBB100_44:                             @   in Loop: Header=BB100_37 Depth=2
	b	.LBB100_45
.LBB100_45:                             @   in Loop: Header=BB100_37 Depth=2
	ldr	r0, [sp, #92]
	add	r0, r0, #1
	str	r0, [sp, #92]
	b	.LBB100_37
.LBB100_46:                             @   in Loop: Header=BB100_35 Depth=1
	b	.LBB100_47
.LBB100_47:                             @   in Loop: Header=BB100_35 Depth=1
	ldr	r0, [sp, #96]
	add	r0, r0, #1
	str	r0, [sp, #96]
	b	.LBB100_35
.LBB100_48:
	add	sp, sp, #128
	bx	lr
	.p2align	3
@ BB#49:
.LCPI100_5:
	.long	3577096743              @ double 1.2968395546510096
	.long	1073004506
	.p2align	3
@ BB#50:
.LCPI100_0:
	.long	2572866478              @ double 1.6817928305074292
	.long	1073408159
.LCPI100_2:
	.long	0                       @ double -900
	.long	3230408704
.LCPI100_3:
	.long	3435973837              @ double 1.05
	.long	1072745676
.LCPI100_4:
	.long	0                       @ double 0
	.long	0
.Lfunc_end100:
	.size	amp_scalefac_bands, .Lfunc_end100-amp_scalefac_bands
	.cantunwind
	.fnend

	.globl	set_masking_lower
	.p2align	3
	.type	set_masking_lower,%function
	.code	32                      @ @set_masking_lower
set_masking_lower:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	vmov.f64	d16, #1.000000e+01
	vmov.f32	s0, #1.000000e+01
	vmov.f32	s2, #4.000000e+00
	vmov.f32	s4, #1.000000e+00
	vldr	d17, .LCPI101_0
	mvn	r2, #5
	movw	r3, #1
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	ldr	r0, [r11, #-4]
	lsl	r0, r0, #1
	add	r0, r0, r2
	vmov	s6, r0
	vcvt.f32.s32	s6, s6
	vstr	s6, [sp, #12]
	ldr	r0, [r11, #-8]
	sub	r0, r0, #125
	vmov	s6, r0
	vcvt.f64.s32	d18, s6
	vdiv.f64	d17, d18, d17
	vcvt.f32.f64	s6, d17
	vstr	s6, [sp, #8]
	vldr	s6, [sp, #8]
	vsub.f32	s4, s6, s4
	vmul.f32	s2, s2, s4
	vstr	s2, [sp, #8]
	vldr	s2, [sp, #8]
	vldr	s4, [sp, #12]
	vadd.f32	s2, s4, s2
	vstr	s2, [sp, #12]
	vldr	s2, [sp, #12]
	vdiv.f32	s0, s2, s0
	vcvt.f64.f32	d17, s0
	vmov	r0, r1, d16
	str	r3, [sp, #4]            @ 4-byte Spill
	vmov	r2, r3, d17
	bl	pow
	vmov	d16, r0, r1
	movw	r0, :lower16:masking_lower
	movt	r0, :upper16:masking_lower
	vcvt.f32.f64	s0, d16
	vstr	s0, [r0]
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#1:
.LCPI101_0:
	.long	0                       @ double 2375
	.long	1084395008
.Lfunc_end101:
	.size	set_masking_lower, .Lfunc_end101-set_masking_lower
	.cantunwind
	.fnend

	.globl	VBR_iteration_loop
	.p2align	3
	.type	VBR_iteration_loop,%function
	.code	32                      @ @VBR_iteration_loop
VBR_iteration_loop:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
	add	r11, sp, #28
	sub	sp, sp, #500
	sub	sp, sp, #4096
	ldr	r12, [r11, #20]
	ldr	lr, [r11, #16]
	ldr	r4, [r11, #12]
	ldr	r5, [r11, #8]
	movw	r6, #0
	str	r0, [r11, #-36]
	str	r1, [r11, #-40]
	str	r2, [r11, #-44]
	str	r3, [r11, #-48]
	str	r5, [r11, #-52]
	str	r4, [r11, #-56]
	str	lr, [r11, #-60]
	str	r12, [r11, #-64]
	str	r6, [sp, #1292]
	str	r6, [sp, #524]
	str	r6, [sp, #512]
	str	r6, [sp, #420]
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-56]
	ldr	r2, [r11, #-60]
	bl	iteration_init
	movw	r0, #1
	ldr	r1, [r11, #-36]
	str	r0, [r1, #200]
.LBB102_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #200]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #192]
	cmp	r0, r1
	bgt	.LBB102_6
@ BB#2:                                 @   in Loop: Header=BB102_1 Depth=1
	add	r1, sp, #448
	add	r2, sp, #440
	ldr	r0, [r11, #-36]
	bl	getframebits
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #200]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #188]
	cmp	r0, r1
	bne	.LBB102_4
@ BB#3:                                 @   in Loop: Header=BB102_1 Depth=1
	ldr	r0, [sp, #440]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #184]
	bl	__divsi3
	str	r0, [sp, #512]
.LBB102_4:                              @   in Loop: Header=BB102_1 Depth=1
	add	r0, sp, #452
	movw	r1, #2
	ldr	r2, [r11, #-36]
	ldr	r3, [r11, #-56]
	ldr	r12, [sp, #440]
	ldr	lr, [sp, #448]
	str	r0, [sp, #396]          @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #392]          @ 4-byte Spill
	mov	r1, r3
	mov	r2, r12
	mov	r3, lr
	bl	ResvFrameBegin
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #200]
	add	r2, sp, #452
	add	r1, r2, r1, lsl #2
	str	r0, [r1]
@ BB#5:                                 @   in Loop: Header=BB102_1 Depth=1
	ldr	r0, [r11, #-36]
	ldr	r1, [r0, #200]
	add	r1, r1, #1
	str	r1, [r0, #200]
	b	.LBB102_1
.LBB102_6:
	movw	r0, #0
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #192]
	ldr	r2, [r11, #-36]
	str	r1, [r2, #200]
	str	r0, [sp, #424]
	str	r0, [sp, #428]
.LBB102_7:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB102_13 Depth 2
                                        @       Child Loop BB102_36 Depth 3
	ldr	r0, [sp, #428]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB102_63
@ BB#8:                                 @   in Loop: Header=BB102_7 Depth=1
	movw	r0, :lower16:reduce_sidechannel
	movt	r0, :upper16:reduce_sidechannel
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #184]
	str	r1, [sp, #416]
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LBB102_10
@ BB#9:                                 @   in Loop: Header=BB102_7 Depth=1
	movw	r0, #1
	str	r0, [sp, #416]
.LBB102_10:                             @   in Loop: Header=BB102_7 Depth=1
	movw	r0, :lower16:convert_mdct
	movt	r0, :upper16:convert_mdct
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LBB102_12
@ BB#11:                                @   in Loop: Header=BB102_7 Depth=1
	movw	r0, #9216
	ldr	r1, [r11, #-48]
	ldr	r2, [sp, #428]
	mul	r2, r2, r0
	add	r1, r1, r2
	ldr	r2, [r11, #-48]
	ldr	r3, [sp, #428]
	mul	r0, r3, r0
	add	r0, r2, r0
	str	r0, [sp, #388]          @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #388]          @ 4-byte Reload
	bl	ms_convert
.LBB102_12:                             @   in Loop: Header=BB102_7 Depth=1
	movw	r0, #0
	str	r0, [sp, #432]
.LBB102_13:                             @   Parent Loop BB102_7 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB102_36 Depth 3
	ldr	r0, [sp, #432]
	ldr	r1, [sp, #416]
	cmp	r0, r1
	bge	.LBB102_61
@ BB#14:                                @   in Loop: Header=BB102_13 Depth=2
	movw	r0, #125
	movw	r1, #112
	movw	r2, #224
	ldr	r3, [r11, #-56]
	add	r3, r3, #44
	ldr	r12, [sp, #428]
	mul	r2, r12, r2
	add	r2, r3, r2
	ldr	r3, [sp, #432]
	mul	r1, r3, r1
	add	r1, r2, r1
	str	r1, [sp, #1292]
	ldr	r1, [sp, #512]
	cmp	r0, r1
	ble	.LBB102_16
@ BB#15:                                @   in Loop: Header=BB102_13 Depth=2
	movw	r0, #125
	str	r0, [sp, #384]          @ 4-byte Spill
	b	.LBB102_17
.LBB102_16:                             @   in Loop: Header=BB102_13 Depth=2
	ldr	r0, [sp, #512]
	str	r0, [sp, #384]          @ 4-byte Spill
.LBB102_17:                             @   in Loop: Header=BB102_13 Depth=2
	ldr	r0, [sp, #384]          @ 4-byte Reload
	movw	r1, #4608
	movw	r2, #9216
	str	r0, [sp, #520]
	ldr	r0, [r11, #-36]
	ldr	r3, [r11, #-48]
	ldr	r12, [sp, #428]
	mul	r2, r12, r2
	add	r2, r3, r2
	ldr	r3, [sp, #432]
	mul	r1, r3, r1
	add	r1, r2, r1
	ldr	r2, [sp, #1292]
	bl	init_outer_loop
	cmp	r0, #0
	bne	.LBB102_19
@ BB#18:                                @   in Loop: Header=BB102_13 Depth=2
	movw	r0, #1
	movw	r1, #0
	movw	r2, #2
	ldr	r3, [r11, #-64]
	ldr	r12, [sp, #428]
	mov	lr, #488
	mla	r3, r12, lr, r3
	ldr	r12, [sp, #432]
	mov	lr, #244
	mla	r3, r12, lr, r3
	mov	r12, #0
	str	r0, [sp, #380]          @ 4-byte Spill
	mov	r0, r3
	str	r1, [sp, #376]          @ 4-byte Spill
	mov	r1, r12
	str	r2, [sp, #372]          @ 4-byte Spill
	mov	r2, lr
	str	r12, [sp, #368]         @ 4-byte Spill
	bl	memset
	ldr	r1, [r11, #-60]
	ldr	r2, [sp, #428]
	add	r2, r2, r2, lsl #3
	add	r1, r1, r2, lsl #9
	ldr	r2, [sp, #432]
	add	r2, r2, r2, lsl #3
	add	r1, r1, r2, lsl #8
	mov	r2, #2304
	str	r0, [sp, #364]          @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #368]          @ 4-byte Reload
	bl	memset
	ldr	r1, [sp, #428]
	add	lr, sp, #1024
	add	r2, lr, #252
	add	r1, r2, r1, lsl #3
	ldr	r2, [sp, #432]
	add	r1, r1, r2, lsl #2
	ldr	r2, [sp, #376]          @ 4-byte Reload
	str	r2, [r1]
	ldr	r1, [sp, #380]          @ 4-byte Reload
	str	r1, [sp, #424]
	str	r0, [sp, #360]          @ 4-byte Spill
	b	.LBB102_60
.LBB102_19:                             @   in Loop: Header=BB102_13 Depth=2
	movw	r1, #2500
	movw	r2, #112
	sub	r0, r11, #288
	ldr	r3, [sp, #1292]
	str	r1, [sp, #356]          @ 4-byte Spill
	mov	r1, r3
	bl	memcpy
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #88]
	ldr	r1, [sp, #356]          @ 4-byte Reload
	bl	set_masking_lower
	add	r0, sp, #1296
	movw	r1, #976
	movw	r2, #1952
	movw	r3, #4608
	movw	lr, #9216
	ldr	r12, [r11, #-36]
	ldr	r4, [r11, #-48]
	ldr	r5, [sp, #428]
	mul	lr, r5, lr
	add	lr, r4, lr
	ldr	r4, [sp, #432]
	mul	r3, r4, r3
	add	r3, lr, r3
	ldr	lr, [r11, #-52]
	ldr	r4, [sp, #428]
	mul	r2, r4, r2
	add	r2, lr, r2
	ldr	lr, [sp, #432]
	mul	r1, lr, r1
	add	r2, r2, r1
	ldr	r1, [sp, #1292]
	str	r0, [sp, #352]          @ 4-byte Spill
	mov	r0, r12
	str	r1, [sp, #348]          @ 4-byte Spill
	mov	r1, r3
	ldr	r3, [sp, #348]          @ 4-byte Reload
	ldr	r12, [sp, #352]         @ 4-byte Reload
	str	r12, [sp]
	bl	calc_xmin
	movw	r1, #0
	cmp	r1, r0
	bne	.LBB102_21
@ BB#20:                                @   in Loop: Header=BB102_13 Depth=2
	movw	r0, #125
	movw	r1, #1
	str	r1, [sp, #424]
	str	r0, [sp, #520]
.LBB102_21:                             @   in Loop: Header=BB102_13 Depth=2
	ldr	r0, [sp, #1292]
	ldr	r0, [r0, #24]
	cmp	r0, #2
	bne	.LBB102_29
@ BB#22:                                @   in Loop: Header=BB102_13 Depth=2
	vldr	d16, .LCPI102_3
	movw	r0, #3
	ldr	r1, [r11, #-40]
	ldr	r2, [sp, #428]
	add	r1, r1, r2, lsl #4
	ldr	r2, [sp, #432]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #344]          @ 4-byte Spill
	ble	.LBB102_24
@ BB#23:                                @   in Loop: Header=BB102_13 Depth=2
	vldr	d16, .LCPI102_3
	vstr	d16, [sp, #336]         @ 8-byte Spill
	b	.LBB102_25
.LBB102_24:                             @   in Loop: Header=BB102_13 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-40]
	ldr	r2, [sp, #428]
	add	r1, r1, r2, lsl #4
	ldr	r2, [sp, #432]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #332]          @ 4-byte Spill
	vstr	d16, [sp, #336]         @ 8-byte Spill
.LBB102_25:                             @   in Loop: Header=BB102_13 Depth=2
	vldr	d16, [sp, #336]         @ 8-byte Reload
	movw	r0, #1800
	ldr	r1, [sp, #520]
	vmov	s0, r1
	vcvt.f64.s32	d17, s0
	vadd.f64	d16, d17, d16
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	str	r1, [sp, #520]
	ldr	r1, [sp, #520]
	cmp	r1, r0
	bge	.LBB102_27
@ BB#26:                                @   in Loop: Header=BB102_13 Depth=2
	ldr	r0, [sp, #520]
	str	r0, [sp, #328]          @ 4-byte Spill
	b	.LBB102_28
.LBB102_27:                             @   in Loop: Header=BB102_13 Depth=2
	movw	r0, #1800
	str	r0, [sp, #328]          @ 4-byte Spill
	b	.LBB102_28
.LBB102_28:                             @   in Loop: Header=BB102_13 Depth=2
	ldr	r0, [sp, #328]          @ 4-byte Reload
	str	r0, [sp, #520]
.LBB102_29:                             @   in Loop: Header=BB102_13 Depth=2
	movw	r0, #2500
	add	r1, sp, #452
	movw	r2, #2
	ldr	r3, [r11, #-36]
	ldr	r3, [r3, #192]
	add	r12, sp, #452
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	ldr	r12, [r11, #-36]
	ldr	r12, [r12, #184]
	ldr	lr, [r11, #-36]
	ldr	lr, [lr, #180]
	mul	r12, r12, lr
	str	r0, [sp, #324]          @ 4-byte Spill
	mov	r0, r3
	str	r1, [sp, #320]          @ 4-byte Spill
	mov	r1, r12
	str	r2, [sp, #316]          @ 4-byte Spill
	bl	__divsi3
	add	r0, r0, #1200
	str	r0, [sp, #516]
	ldr	r0, [sp, #516]
	ldr	r1, [sp, #324]          @ 4-byte Reload
	cmp	r0, r1
	bge	.LBB102_31
@ BB#30:                                @   in Loop: Header=BB102_13 Depth=2
	ldr	r0, [sp, #516]
	str	r0, [sp, #312]          @ 4-byte Spill
	b	.LBB102_32
.LBB102_31:                             @   in Loop: Header=BB102_13 Depth=2
	movw	r0, #2500
	str	r0, [sp, #312]          @ 4-byte Spill
	b	.LBB102_32
.LBB102_32:                             @   in Loop: Header=BB102_13 Depth=2
	ldr	r0, [sp, #312]          @ 4-byte Reload
	str	r0, [sp, #516]
	ldr	r0, [sp, #516]
	ldr	r1, [sp, #520]
	cmp	r0, r1
	ble	.LBB102_34
@ BB#33:                                @   in Loop: Header=BB102_13 Depth=2
	ldr	r0, [sp, #516]
	str	r0, [sp, #308]          @ 4-byte Spill
	b	.LBB102_35
.LBB102_34:                             @   in Loop: Header=BB102_13 Depth=2
	ldr	r0, [sp, #520]
	str	r0, [sp, #308]          @ 4-byte Spill
.LBB102_35:                             @   in Loop: Header=BB102_13 Depth=2
	ldr	r0, [sp, #308]          @ 4-byte Reload
	movw	r1, #2
	movw	r2, #4
	str	r0, [sp, #516]
	ldr	r0, [sp, #516]
	ldr	r3, [sp, #520]
	sub	r0, r0, r3
	str	r1, [sp, #304]          @ 4-byte Spill
	mov	r1, r2
	bl	__divsi3
	str	r0, [sp, #528]
	ldr	r0, [sp, #516]
	ldr	r1, [sp, #520]
	add	r0, r0, r1
	ldr	r1, [sp, #304]          @ 4-byte Reload
	bl	__divsi3
	str	r0, [sp, #532]
	ldr	r0, [sp, #516]
	add	r0, r0, #1
	str	r0, [sp, #412]
.LBB102_36:                             @   Parent Loop BB102_7 Depth=1
                                        @     Parent Loop BB102_13 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	movw	r0, #1
	ldr	r1, [sp, #532]
	ldr	r2, [sp, #520]
	cmp	r1, r2
	str	r0, [sp, #300]          @ 4-byte Spill
	bge	.LBB102_38
@ BB#37:                                @   in Loop: Header=BB102_36 Depth=3
	movw	r0, :lower16:.L.str.222
	movt	r0, :upper16:.L.str.222
	movw	r1, :lower16:.L.str.1.216
	movt	r1, :upper16:.L.str.1.216
	movw	r2, #400
	movw	r3, :lower16:.L__func__.VBR_iteration_loop
	movt	r3, :upper16:.L__func__.VBR_iteration_loop
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #300]          @ 4-byte Spill
.LBB102_38:                             @   in Loop: Header=BB102_36 Depth=3
	ldr	r0, [sp, #300]          @ 4-byte Reload
	movw	r1, #1
	ldr	r2, [sp, #532]
	ldr	r3, [sp, #516]
	cmp	r2, r3
	str	r0, [sp, #296]          @ 4-byte Spill
	str	r1, [sp, #292]          @ 4-byte Spill
	ble	.LBB102_40
@ BB#39:                                @   in Loop: Header=BB102_36 Depth=3
	movw	r0, :lower16:.L.str.2.223
	movt	r0, :upper16:.L.str.2.223
	movw	r1, :lower16:.L.str.1.216
	movt	r1, :upper16:.L.str.1.216
	movw	r2, #401
	movw	r3, :lower16:.L__func__.VBR_iteration_loop
	movt	r3, :upper16:.L__func__.VBR_iteration_loop
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #292]          @ 4-byte Spill
.LBB102_40:                             @   in Loop: Header=BB102_36 Depth=3
	ldr	r0, [sp, #292]          @ 4-byte Reload
	ldr	r1, [sp, #532]
	ldr	r2, [sp, #412]
	cmp	r1, r2
	str	r0, [sp, #288]          @ 4-byte Spill
	blt	.LBB102_42
@ BB#41:                                @   in Loop: Header=BB102_36 Depth=3
	movw	r1, #2
	ldr	r0, [sp, #528]
	ldr	r2, [sp, #532]
	sub	r0, r2, r0
	str	r0, [sp, #532]
	ldr	r0, [sp, #528]
	bl	__divsi3
	str	r0, [sp, #528]
	b	.LBB102_54
.LBB102_42:                             @   in Loop: Header=BB102_36 Depth=3
	vldr	d16, .LCPI102_4
	add	lr, sp, #1024
	vstr	d16, [lr, #184]
	add	lr, sp, #1024
	vstr	d16, [lr, #192]
	add	lr, sp, #1024
	vstr	d16, [lr, #200]
	add	lr, sp, #1024
	vstr	d16, [lr, #208]
	add	lr, sp, #1024
	vldr	d17, [lr, #184]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	ble	.LBB102_44
@ BB#43:                                @   in Loop: Header=BB102_36 Depth=3
	vldr	d16, .LCPI102_4
	vstr	d16, [sp, #280]         @ 8-byte Spill
	b	.LBB102_45
.LBB102_44:                             @   in Loop: Header=BB102_36 Depth=3
	add	lr, sp, #1024
	vldr	d16, [lr, #184]
	vstr	d16, [sp, #280]         @ 8-byte Spill
.LBB102_45:                             @   in Loop: Header=BB102_36 Depth=3
	vldr	d16, [sp, #280]         @ 8-byte Reload
	vldr	d17, .LCPI102_4
	add	lr, sp, #1024
	vstr	d16, [lr, #184]
	add	lr, sp, #1024
	vldr	d16, [lr, #200]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	ble	.LBB102_49
@ BB#46:                                @   in Loop: Header=BB102_36 Depth=3
	vldr	d16, .LCPI102_4
	vstr	d16, [sp, #272]         @ 8-byte Spill
	b	.LBB102_50
	.p2align	3
@ BB#47:
.LCPI102_3:
	.long	0                       @ double 1100
	.long	1083256832
	.p2align	3
@ BB#48:
.LCPI102_4:
	.long	0                       @ double 0
	.long	0
.LBB102_49:                             @   in Loop: Header=BB102_36 Depth=3
	add	lr, sp, #1024
	vldr	d16, [lr, #200]
	vstr	d16, [sp, #272]         @ 8-byte Spill
.LBB102_50:                             @   in Loop: Header=BB102_36 Depth=3
	vldr	d16, [sp, #272]         @ 8-byte Reload
	movw	r2, #112
	sub	r0, r11, #288
	add	r6, sp, #1024
	vstr	d16, [r6, #200]
	ldr	r1, [sp, #1292]
	str	r0, [sp, #268]          @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #268]          @ 4-byte Reload
	bl	memcpy
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #88]
	ldr	r1, [sp, #532]
	bl	set_masking_lower
	add	r0, sp, #1296
	movw	r1, #976
	movw	r2, #1952
	movw	lr, #4608
	movw	r3, #9216
	ldr	r12, [r11, #-36]
	ldr	r4, [r11, #-48]
	ldr	r5, [sp, #428]
	mul	r3, r5, r3
	add	r3, r4, r3
	ldr	r4, [sp, #432]
	mul	lr, r4, lr
	add	r3, r3, lr
	ldr	lr, [r11, #-52]
	ldr	r4, [sp, #428]
	mul	r2, r4, r2
	add	r2, lr, r2
	ldr	lr, [sp, #432]
	mul	r1, lr, r1
	add	r2, r2, r1
	ldr	r1, [sp, #1292]
	str	r0, [sp, #264]          @ 4-byte Spill
	mov	r0, r12
	str	r1, [sp, #260]          @ 4-byte Spill
	mov	r1, r3
	ldr	r3, [sp, #260]          @ 4-byte Reload
	ldr	r12, [sp, #264]         @ 4-byte Reload
	str	r12, [sp]
	bl	calc_xmin
	add	r1, sp, #1296
	add	r2, sp, #536
	movw	r3, #244
	movw	r12, #488
	movw	lr, #2304
	movw	r4, #4608
	add	r10, sp, #1024
	add	r5, r10, #216
	movw	r6, #9216
	ldr	r7, [r11, #-36]
	ldr	r8, [r11, #-48]
	ldr	r9, [sp, #428]
	mul	r6, r9, r6
	add	r6, r8, r6
	ldr	r8, [sp, #432]
	mul	r8, r8, r4
	add	r6, r6, r8
	ldr	r8, [sp, #532]
	ldr	r9, [r11, #-60]
	ldr	r10, [sp, #428]
	mul	r4, r10, r4
	add	r4, r9, r4
	ldr	r9, [sp, #432]
	mul	lr, r9, lr
	add	lr, r4, lr
	ldr	r4, [r11, #-64]
	ldr	r9, [sp, #428]
	mul	r12, r9, r12
	add	r12, r4, r12
	ldr	r4, [sp, #432]
	mul	r3, r4, r3
	add	r3, r12, r3
	ldr	r12, [sp, #1292]
	ldr	r4, [sp, #432]
	str	r0, [sp, #256]          @ 4-byte Spill
	mov	r0, r7
	str	r1, [sp, #252]          @ 4-byte Spill
	mov	r1, r6
	str	r2, [sp, #248]          @ 4-byte Spill
	mov	r2, r8
	str	r3, [sp, #244]          @ 4-byte Spill
	mov	r3, r5
	ldr	r5, [sp, #252]          @ 4-byte Reload
	str	r5, [sp]
	str	lr, [sp, #4]
	ldr	lr, [sp, #244]          @ 4-byte Reload
	str	lr, [sp, #8]
	str	r12, [sp, #12]
	ldr	r12, [sp, #248]         @ 4-byte Reload
	str	r12, [sp, #16]
	str	r4, [sp, #20]
	bl	outer_loop
	add	lr, sp, #1024
	vldr	d16, [lr, #184]
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	add	r4, sp, #1024
	vldr	d16, [r4, #208]
	add	r4, sp, #1024
	vldr	d17, [r4, #200]
	add	r4, sp, #1024
	vldr	d18, [r4, #192]
	add	r4, sp, #1024
	vldr	d19, [r4, #216]
	vcvt.s32.f64	s0, d19
	vmov	r1, s0
	add	r4, sp, #1024
	vldr	d19, [r4, #240]
	add	r4, sp, #1024
	vldr	d20, [r4, #232]
	add	r4, sp, #1024
	vldr	d21, [r4, #224]
	vmov	r2, r3, d16
	vstr	d17, [sp]
	vstr	d18, [sp, #8]
	str	r1, [sp, #16]
	vstr	d19, [sp, #24]
	vstr	d20, [sp, #32]
	vstr	d21, [sp, #40]
	bl	VBR_compare
	str	r0, [sp, #408]
	ldr	r0, [sp, #408]
	cmp	r0, #0
	beq	.LBB102_52
@ BB#51:                                @   in Loop: Header=BB102_36 Depth=3
	movw	r2, #112
	sub	r0, r11, #176
	movw	r1, #2304
	movw	r3, #4608
	add	r8, sp, #1024
	add	r12, r8, #764
	movw	lr, #244
	movw	r4, #488
	sub	r5, r11, #532
	ldr	r6, [sp, #1292]
	ldr	r6, [r6]
	str	r6, [sp, #412]
	ldr	r6, [r11, #-64]
	ldr	r7, [sp, #428]
	mul	r4, r7, r4
	add	r4, r6, r4
	ldr	r6, [sp, #432]
	mul	r6, r6, lr
	add	r4, r4, r6
	str	r0, [sp, #240]          @ 4-byte Spill
	mov	r0, r5
	str	r1, [sp, #236]          @ 4-byte Spill
	mov	r1, r4
	str	r2, [sp, #232]          @ 4-byte Spill
	mov	r2, lr
	str	r12, [sp, #228]         @ 4-byte Spill
	str	r3, [sp, #224]          @ 4-byte Spill
	bl	memcpy
	ldr	r0, [sp, #228]          @ 4-byte Reload
	ldr	r1, [r11, #-60]
	ldr	r2, [sp, #428]
	ldr	r3, [sp, #224]          @ 4-byte Reload
	mul	r2, r2, r3
	add	r1, r1, r2
	ldr	r2, [sp, #432]
	ldr	r12, [sp, #236]         @ 4-byte Reload
	mul	r2, r2, r12
	add	r1, r1, r2
	mov	r2, r12
	bl	memcpy
	ldr	r0, [sp, #240]          @ 4-byte Reload
	ldr	r1, [sp, #1292]
	ldr	r2, [sp, #232]          @ 4-byte Reload
	bl	memcpy
	ldr	r0, [sp, #528]
	ldr	r1, [sp, #532]
	sub	r0, r1, r0
	str	r0, [sp, #532]
	b	.LBB102_53
.LBB102_52:                             @   in Loop: Header=BB102_36 Depth=3
	ldr	r0, [sp, #528]
	ldr	r1, [sp, #532]
	add	r0, r1, r0
	str	r0, [sp, #532]
.LBB102_53:                             @   in Loop: Header=BB102_36 Depth=3
	movw	r1, #2
	ldr	r0, [sp, #528]
	bl	__divsi3
	str	r0, [sp, #528]
.LBB102_54:                             @   in Loop: Header=BB102_36 Depth=3
	ldr	r0, [sp, #528]
	cmp	r0, #10
	bgt	.LBB102_36
@ BB#55:                                @   in Loop: Header=BB102_13 Depth=2
	ldr	r0, [sp, #412]
	ldr	r1, [sp, #516]
	cmp	r0, r1
	bgt	.LBB102_57
@ BB#56:                                @   in Loop: Header=BB102_13 Depth=2
	movw	r0, #2304
	add	r7, sp, #1024
	add	r1, r7, #764
	movw	r2, #4608
	movw	r3, #244
	sub	r12, r11, #532
	movw	lr, #488
	movw	r4, #112
	sub	r5, r11, #176
	ldr	r6, [sp, #1292]
	str	r0, [sp, #220]          @ 4-byte Spill
	mov	r0, r6
	str	r1, [sp, #216]          @ 4-byte Spill
	mov	r1, r5
	str	r2, [sp, #212]          @ 4-byte Spill
	mov	r2, r4
	str	r12, [sp, #208]         @ 4-byte Spill
	str	lr, [sp, #204]          @ 4-byte Spill
	str	r3, [sp, #200]          @ 4-byte Spill
	bl	memcpy
	ldr	r0, [r11, #-64]
	ldr	r1, [sp, #428]
	ldr	r2, [sp, #204]          @ 4-byte Reload
	mul	r1, r1, r2
	add	r0, r0, r1
	ldr	r1, [sp, #432]
	ldr	r3, [sp, #200]          @ 4-byte Reload
	mul	r1, r1, r3
	add	r0, r0, r1
	ldr	r1, [sp, #208]          @ 4-byte Reload
	mov	r2, r3
	bl	memcpy
	ldr	r0, [r11, #-60]
	ldr	r1, [sp, #428]
	ldr	r2, [sp, #212]          @ 4-byte Reload
	mul	r1, r1, r2
	add	r0, r0, r1
	ldr	r1, [sp, #432]
	ldr	r3, [sp, #220]          @ 4-byte Reload
	mul	r1, r1, r3
	add	r0, r0, r1
	ldr	r1, [sp, #216]          @ 4-byte Reload
	mov	r2, r3
	bl	memcpy
.LBB102_57:                             @   in Loop: Header=BB102_13 Depth=2
	movw	r0, #1
	ldr	r1, [sp, #1292]
	ldr	r1, [r1]
	ldr	r2, [sp, #516]
	cmp	r1, r2
	str	r0, [sp, #196]          @ 4-byte Spill
	ble	.LBB102_59
@ BB#58:                                @   in Loop: Header=BB102_13 Depth=2
	movw	r0, :lower16:.L.str.3.224
	movt	r0, :upper16:.L.str.3.224
	movw	r1, :lower16:.L.str.1.216
	movt	r1, :upper16:.L.str.1.216
	movw	r2, #497
	movw	r3, :lower16:.L__func__.VBR_iteration_loop
	movt	r3, :upper16:.L__func__.VBR_iteration_loop
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #196]          @ 4-byte Spill
.LBB102_59:                             @   in Loop: Header=BB102_13 Depth=2
	ldr	r0, [sp, #196]          @ 4-byte Reload
	movw	r1, #2
	ldr	r2, [sp, #1292]
	ldr	r2, [r2]
	ldr	r3, [sp, #428]
	add	r4, sp, #1024
	add	r12, r4, #252
	add	r3, r12, r3, lsl #3
	ldr	lr, [sp, #432]
	str	r2, [r3, lr, lsl #2]
	ldr	r2, [sp, #428]
	add	r2, r12, r2, lsl #3
	ldr	r3, [sp, #432]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2]
	ldr	r3, [sp, #524]
	add	r2, r3, r2
	str	r2, [sp, #524]
	str	r0, [sp, #192]          @ 4-byte Spill
	str	r1, [sp, #188]          @ 4-byte Spill
.LBB102_60:                             @   in Loop: Header=BB102_13 Depth=2
	ldr	r0, [sp, #432]
	add	r0, r0, #1
	str	r0, [sp, #432]
	b	.LBB102_13
.LBB102_61:                             @   in Loop: Header=BB102_7 Depth=1
	b	.LBB102_62
.LBB102_62:                             @   in Loop: Header=BB102_7 Depth=1
	ldr	r0, [sp, #428]
	add	r0, r0, #1
	str	r0, [sp, #428]
	b	.LBB102_7
.LBB102_63:
	movw	r0, :lower16:reduce_sidechannel
	movt	r0, :upper16:reduce_sidechannel
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LBB102_72
@ BB#64:
	movw	r0, #0
	str	r0, [sp, #428]
.LBB102_65:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #428]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB102_71
@ BB#66:                                @   in Loop: Header=BB102_65 Depth=1
	movw	r0, #125
	add	lr, sp, #1024
	add	r1, lr, #252
	movw	r2, #3
	ldr	r3, [r11, #-44]
	ldr	r12, [sp, #428]
	add	r3, r3, r12, lsl #3
	vldr	d16, [r3]
	vmov.f64	d17, #5.000000e-01
	vsub.f64	d16, d17, d16
	vldr	d18, .LCPI102_5
	vmul.f64	d16, d16, d18
	vdiv.f64	d16, d16, d17
	vstr	d16, [sp, #400]
	vmov.f64	d17, #1.000000e+00
	vsub.f64	d18, d17, d16
	vadd.f64	d16, d16, d17
	vdiv.f64	d16, d18, d16
	ldr	r3, [sp, #428]
	add	lr, sp, #1024
	add	r12, lr, #252
	add	r3, r12, r3, lsl #3
	vldr	s0, [r3]
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vstr	s0, [r3, #4]
	ldr	r3, [sp, #428]
	add	r3, r12, r3, lsl #3
	ldr	r3, [r3, #4]
	cmp	r0, r3
	str	r2, [sp, #184]          @ 4-byte Spill
	str	r1, [sp, #180]          @ 4-byte Spill
	ble	.LBB102_68
@ BB#67:                                @   in Loop: Header=BB102_65 Depth=1
	movw	r0, #125
	str	r0, [sp, #176]          @ 4-byte Spill
	b	.LBB102_69
.LBB102_68:                             @   in Loop: Header=BB102_65 Depth=1
	add	lr, sp, #1024
	add	r0, lr, #252
	movw	r1, #3
	ldr	r2, [sp, #428]
	add	lr, sp, #1024
	add	r3, lr, #252
	add	r2, r3, r2, lsl #3
	ldr	r2, [r2, #4]
	str	r0, [sp, #172]          @ 4-byte Spill
	str	r1, [sp, #168]          @ 4-byte Spill
	str	r2, [sp, #176]          @ 4-byte Spill
.LBB102_69:                             @   in Loop: Header=BB102_65 Depth=1
	ldr	r0, [sp, #176]          @ 4-byte Reload
	add	lr, sp, #1024
	add	r1, lr, #252
	movw	r2, #3
	ldr	r3, [sp, #428]
	add	lr, sp, #1024
	add	r12, lr, #252
	add	r3, r12, r3, lsl #3
	str	r0, [r3, #4]
	ldr	r0, [sp, #428]
	add	r0, r12, r0, lsl #3
	ldr	r0, [r0, #4]
	ldr	r3, [sp, #524]
	add	r0, r3, r0
	str	r0, [sp, #524]
	str	r2, [sp, #164]          @ 4-byte Spill
	str	r1, [sp, #160]          @ 4-byte Spill
@ BB#70:                                @   in Loop: Header=BB102_65 Depth=1
	ldr	r0, [sp, #428]
	add	r0, r0, #1
	str	r0, [sp, #428]
	b	.LBB102_65
.LBB102_71:
	b	.LBB102_72
.LBB102_72:
	ldr	r0, [sp, #424]
	cmp	r0, #0
	beq	.LBB102_74
@ BB#73:
	movw	r0, #1
	str	r0, [sp, #156]          @ 4-byte Spill
	b	.LBB102_75
.LBB102_74:
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #188]
	str	r0, [sp, #156]          @ 4-byte Spill
.LBB102_75:
	ldr	r0, [sp, #156]          @ 4-byte Reload
	ldr	r1, [r11, #-36]
	str	r0, [r1, #200]
.LBB102_76:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #200]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #192]
	cmp	r0, r1
	bge	.LBB102_81
@ BB#77:                                @   in Loop: Header=BB102_76 Depth=1
	add	r0, sp, #452
	movw	r1, #2
	ldr	r2, [sp, #524]
	ldr	r3, [r11, #-36]
	ldr	r3, [r3, #200]
	add	r12, sp, #452
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	cmp	r2, r3
	str	r0, [sp, #152]          @ 4-byte Spill
	str	r1, [sp, #148]          @ 4-byte Spill
	bgt	.LBB102_79
@ BB#78:
	b	.LBB102_81
.LBB102_79:                             @   in Loop: Header=BB102_76 Depth=1
	b	.LBB102_80
.LBB102_80:                             @   in Loop: Header=BB102_76 Depth=1
	ldr	r0, [r11, #-36]
	ldr	r1, [r0, #200]
	add	r1, r1, #1
	str	r1, [r0, #200]
	b	.LBB102_76
.LBB102_81:
	add	r1, sp, #448
	add	r2, sp, #440
	ldr	r0, [r11, #-36]
	bl	getframebits
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-56]
	ldr	r2, [sp, #440]
	ldr	r3, [sp, #448]
	bl	ResvFrameBegin
	str	r0, [sp, #444]
	ldr	r0, [sp, #524]
	ldr	r1, [sp, #444]
	cmp	r0, r1
	ble	.LBB102_101
@ BB#82:
	movw	r0, #0
	movw	r1, #1
	str	r1, [sp, #420]
	str	r0, [sp, #428]
.LBB102_83:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB102_85 Depth 2
	ldr	r0, [sp, #428]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB102_90
@ BB#84:                                @   in Loop: Header=BB102_83 Depth=1
	movw	r0, #0
	str	r0, [sp, #432]
.LBB102_85:                             @   Parent Loop BB102_83 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #432]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB102_88
@ BB#86:                                @   in Loop: Header=BB102_85 Depth=2
	movw	r0, #2
	ldr	r1, [sp, #428]
	add	r4, sp, #1024
	add	r2, r4, #252
	add	r1, r2, r1, lsl #3
	ldr	r2, [sp, #432]
	ldr	r2, [r1, r2, lsl #2]!
	ldr	r3, [r11, #-36]
	ldr	r3, [r3, #200]
	add	r12, sp, #452
	ldr	r3, [r12, r3, lsl #2]
	mul	r2, r2, r3
	ldr	r3, [sp, #524]
	str	r0, [sp, #144]          @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #140]          @ 4-byte Spill
	mov	r1, r3
	bl	__divsi3
	ldr	r1, [sp, #140]          @ 4-byte Reload
	str	r0, [r1]
@ BB#87:                                @   in Loop: Header=BB102_85 Depth=2
	ldr	r0, [sp, #432]
	add	r0, r0, #1
	str	r0, [sp, #432]
	b	.LBB102_85
.LBB102_88:                             @   in Loop: Header=BB102_83 Depth=1
	b	.LBB102_89
.LBB102_89:                             @   in Loop: Header=BB102_83 Depth=1
	ldr	r0, [sp, #428]
	add	r0, r0, #1
	str	r0, [sp, #428]
	b	.LBB102_83
.LBB102_90:
	movw	r0, #0
	str	r0, [sp, #524]
	str	r0, [sp, #428]
.LBB102_91:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB102_93 Depth 2
	ldr	r0, [sp, #428]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB102_100
@ BB#92:                                @   in Loop: Header=BB102_91 Depth=1
	movw	r0, #0
	str	r0, [sp, #432]
.LBB102_93:                             @   Parent Loop BB102_91 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #432]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB102_96
@ BB#94:                                @   in Loop: Header=BB102_93 Depth=2
	movw	r0, #2
	ldr	r1, [sp, #428]
	add	lr, sp, #1024
	add	r2, lr, #252
	add	r1, r2, r1, lsl #3
	ldr	r2, [sp, #432]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	ldr	r2, [sp, #524]
	add	r1, r2, r1
	str	r1, [sp, #524]
	str	r0, [sp, #136]          @ 4-byte Spill
@ BB#95:                                @   in Loop: Header=BB102_93 Depth=2
	ldr	r0, [sp, #432]
	add	r0, r0, #1
	str	r0, [sp, #432]
	b	.LBB102_93
.LBB102_96:                             @   in Loop: Header=BB102_91 Depth=1
	b	.LBB102_97
.LBB102_97:                             @   in Loop: Header=BB102_91 Depth=1
	ldr	r0, [sp, #428]
	add	r0, r0, #1
	str	r0, [sp, #428]
	b	.LBB102_91
	.p2align	3
@ BB#98:
.LCPI102_5:
	.long	1374389535              @ double 0.33000000000000002
	.long	1070931640
	.p2align	3
@ BB#99:
.LCPI102_6:
	.long	0                       @ double 0
	.long	0
.LBB102_100:
	b	.LBB102_101
.LBB102_101:
	movw	r0, #1
	ldr	r1, [sp, #524]
	ldr	r2, [sp, #444]
	cmp	r1, r2
	str	r0, [sp, #132]          @ 4-byte Spill
	ble	.LBB102_103
@ BB#102:
	movw	r0, :lower16:.L.str.4.225
	movt	r0, :upper16:.L.str.4.225
	movw	r1, :lower16:.L.str.1.216
	movt	r1, :upper16:.L.str.1.216
	movw	r2, #552
	movw	r3, :lower16:.L__func__.VBR_iteration_loop
	movt	r3, :upper16:.L__func__.VBR_iteration_loop
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #132]          @ 4-byte Spill
.LBB102_103:
	ldr	r0, [sp, #132]          @ 4-byte Reload
	movw	r1, #0
	str	r1, [sp, #428]
	str	r0, [sp, #128]          @ 4-byte Spill
.LBB102_104:                            @ =>This Loop Header: Depth=1
                                        @     Child Loop BB102_106 Depth 2
	ldr	r0, [sp, #428]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB102_118
@ BB#105:                               @   in Loop: Header=BB102_104 Depth=1
	movw	r0, #0
	str	r0, [sp, #432]
.LBB102_106:                            @   Parent Loop BB102_104 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #432]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB102_116
@ BB#107:                               @   in Loop: Header=BB102_106 Depth=2
	ldr	r0, [sp, #420]
	cmp	r0, #0
	bne	.LBB102_110
@ BB#108:                               @   in Loop: Header=BB102_106 Depth=2
	movw	r0, :lower16:reduce_sidechannel
	movt	r0, :upper16:reduce_sidechannel
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LBB102_114
@ BB#109:                               @   in Loop: Header=BB102_106 Depth=2
	ldr	r0, [sp, #432]
	cmp	r0, #1
	bne	.LBB102_114
.LBB102_110:                            @   in Loop: Header=BB102_106 Depth=2
	movw	r0, #4608
	movw	r1, #9216
	movw	r2, #112
	movw	r3, #224
	ldr	r12, [r11, #-56]
	add	r12, r12, #44
	ldr	lr, [sp, #428]
	mul	r3, lr, r3
	add	r3, r12, r3
	ldr	r12, [sp, #432]
	mul	r2, r12, r2
	add	r2, r3, r2
	str	r2, [sp, #1292]
	ldr	r2, [r11, #-36]
	ldr	r3, [r11, #-48]
	ldr	r12, [sp, #428]
	mul	r1, r12, r1
	add	r1, r3, r1
	ldr	r3, [sp, #432]
	mul	r0, r3, r0
	add	r1, r1, r0
	ldr	r0, [sp, #1292]
	str	r0, [sp, #124]          @ 4-byte Spill
	mov	r0, r2
	ldr	r2, [sp, #124]          @ 4-byte Reload
	bl	init_outer_loop
	cmp	r0, #0
	bne	.LBB102_112
@ BB#111:                               @   in Loop: Header=BB102_106 Depth=2
	vldr	d16, .LCPI102_6
	movw	r0, #0
	movw	r1, #2304
	movw	r2, #4608
	movw	r3, #244
	movw	r12, #488
	ldr	lr, [r11, #-64]
	ldr	r4, [sp, #428]
	mul	r12, r4, r12
	add	r12, lr, r12
	ldr	lr, [sp, #432]
	mul	lr, lr, r3
	add	r12, r12, lr
	str	r0, [sp, #120]          @ 4-byte Spill
	mov	r0, r12
	ldr	r12, [sp, #120]         @ 4-byte Reload
	and	lr, r12, #255
	str	r1, [sp, #116]          @ 4-byte Spill
	mov	r1, lr
	str	r2, [sp, #112]          @ 4-byte Spill
	mov	r2, r3
	vstr	d16, [sp, #104]         @ 8-byte Spill
	bl	memset
	ldr	r0, [r11, #-60]
	ldr	r1, [sp, #428]
	ldr	r2, [sp, #112]          @ 4-byte Reload
	mul	r1, r1, r2
	add	r0, r0, r1
	ldr	r1, [sp, #432]
	ldr	r3, [sp, #116]          @ 4-byte Reload
	mul	r1, r1, r3
	add	r0, r0, r1
	ldr	r1, [sp, #120]          @ 4-byte Reload
	and	r1, r1, #255
	mov	r2, r3
	bl	memset
	vldr	d16, [sp, #104]         @ 8-byte Reload
	add	lr, sp, #1024
	vstr	d16, [lr, #240]
	add	lr, sp, #1024
	vstr	d16, [lr, #232]
	add	lr, sp, #1024
	vstr	d16, [lr, #224]
	add	lr, sp, #1024
	vstr	d16, [lr, #216]
	b	.LBB102_113
.LBB102_112:                            @   in Loop: Header=BB102_106 Depth=2
	add	r0, sp, #1296
	add	r1, sp, #536
	movw	r2, #244
	movw	r3, #488
	movw	r12, #2304
	movw	lr, #4608
	add	r10, sp, #1024
	add	r4, r10, #216
	movw	r5, #2
	ldr	r6, [r11, #-36]
	ldr	r6, [r6, #88]
	ldr	r7, [sp, #428]
	add	r10, sp, #1024
	add	r8, r10, #252
	add	r7, r8, r7, lsl #3
	ldr	r9, [sp, #432]
	ldr	r7, [r7, r9, lsl #2]
	str	r0, [sp, #100]          @ 4-byte Spill
	mov	r0, r6
	str	r1, [sp, #96]           @ 4-byte Spill
	mov	r1, r7
	str	r8, [sp, #92]           @ 4-byte Spill
	str	r5, [sp, #88]           @ 4-byte Spill
	str	r2, [sp, #84]           @ 4-byte Spill
	str	r3, [sp, #80]           @ 4-byte Spill
	str	r12, [sp, #76]          @ 4-byte Spill
	str	lr, [sp, #72]           @ 4-byte Spill
	str	r4, [sp, #68]           @ 4-byte Spill
	bl	set_masking_lower
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-48]
	ldr	r2, [sp, #428]
	add	r3, r2, r2, lsl #3
	add	r1, r1, r3, lsl #10
	ldr	r3, [sp, #432]
	add	r12, r3, r3, lsl #3
	add	r1, r1, r12, lsl #9
	ldr	r12, [r11, #-52]
	mov	lr, #1952
	mla	r2, r2, lr, r12
	mov	r12, #976
	mla	r2, r3, r12, r2
	ldr	r3, [sp, #1292]
	mov	r12, sp
	add	lr, sp, #1296
	str	lr, [r12]
	bl	calc_xmin
	ldr	r1, [r11, #-36]
	ldr	r2, [r11, #-48]
	ldr	r3, [sp, #428]
	add	r12, r3, r3, lsl #3
	add	r2, r2, r12, lsl #10
	ldr	r12, [sp, #432]
	add	lr, r12, r12, lsl #3
	add	r2, r2, lr, lsl #9
	ldr	lr, [sp, #92]           @ 4-byte Reload
	add	r3, lr, r3, lsl #3
	add	r3, r3, r12, lsl #2
	ldr	r3, [r3]
	ldr	r12, [r11, #-60]
	ldr	r4, [sp, #428]
	ldr	r5, [sp, #72]           @ 4-byte Reload
	mul	r4, r4, r5
	add	r12, r12, r4
	ldr	r4, [sp, #432]
	ldr	r6, [sp, #76]           @ 4-byte Reload
	mul	r4, r4, r6
	add	r12, r12, r4
	ldr	r4, [r11, #-64]
	ldr	r7, [sp, #428]
	ldr	r8, [sp, #80]           @ 4-byte Reload
	mul	r7, r7, r8
	add	r4, r4, r7
	ldr	r7, [sp, #432]
	ldr	r9, [sp, #84]           @ 4-byte Reload
	mul	r7, r7, r9
	add	r4, r4, r7
	ldr	r7, [sp, #1292]
	ldr	r10, [sp, #432]
	str	r0, [sp, #64]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	mov	r2, r3
	ldr	r3, [sp, #68]           @ 4-byte Reload
	ldr	lr, [sp, #100]          @ 4-byte Reload
	str	lr, [sp]
	str	r12, [sp, #4]
	str	r4, [sp, #8]
	str	r7, [sp, #12]
	ldr	r12, [sp, #96]          @ 4-byte Reload
	str	r12, [sp, #16]
	str	r10, [sp, #20]
	bl	outer_loop
.LBB102_113:                            @   in Loop: Header=BB102_106 Depth=2
	b	.LBB102_114
.LBB102_114:                            @   in Loop: Header=BB102_106 Depth=2
	b	.LBB102_115
.LBB102_115:                            @   in Loop: Header=BB102_106 Depth=2
	ldr	r0, [sp, #432]
	add	r0, r0, #1
	str	r0, [sp, #432]
	b	.LBB102_106
.LBB102_116:                            @   in Loop: Header=BB102_104 Depth=1
	b	.LBB102_117
.LBB102_117:                            @   in Loop: Header=BB102_104 Depth=1
	ldr	r0, [sp, #428]
	add	r0, r0, #1
	str	r0, [sp, #428]
	b	.LBB102_104
.LBB102_118:
	movw	r0, #0
	str	r0, [sp, #428]
.LBB102_119:                            @ =>This Loop Header: Depth=1
                                        @     Child Loop BB102_121 Depth 2
	ldr	r0, [sp, #428]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB102_128
@ BB#120:                               @   in Loop: Header=BB102_119 Depth=1
	movw	r0, #0
	str	r0, [sp, #432]
.LBB102_121:                            @   Parent Loop BB102_119 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #432]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB102_126
@ BB#122:                               @   in Loop: Header=BB102_121 Depth=2
	movw	r0, #112
	movw	r1, #224
	ldr	r2, [r11, #-56]
	add	r2, r2, #44
	ldr	r3, [sp, #428]
	mul	r1, r3, r1
	add	r1, r2, r1
	ldr	r2, [sp, #432]
	mul	r0, r2, r0
	add	r0, r1, r0
	str	r0, [sp, #1292]
	ldr	r0, [r11, #-36]
	ldr	r1, [sp, #428]
	ldr	r2, [sp, #432]
	ldr	r3, [r11, #-60]
	ldr	r12, [r11, #-56]
	ldr	lr, [r11, #-64]
	str	r12, [sp]
	str	lr, [sp, #4]
	bl	best_scalefac_store
	ldr	r0, [sp, #1292]
	ldr	r0, [r0, #24]
	cmp	r0, #0
	bne	.LBB102_124
@ BB#123:                               @   in Loop: Header=BB102_121 Depth=2
	movw	r0, #2304
	movw	r1, #4608
	ldr	r2, [sp, #428]
	ldr	r3, [sp, #432]
	ldr	r12, [sp, #1292]
	ldr	lr, [r11, #-60]
	ldr	r4, [sp, #428]
	mul	r1, r4, r1
	add	r1, lr, r1
	ldr	lr, [sp, #432]
	mul	r0, lr, r0
	add	r0, r1, r0
	str	r0, [sp, #60]           @ 4-byte Spill
	mov	r0, r2
	mov	r1, r3
	mov	r2, r12
	ldr	r3, [sp, #60]           @ 4-byte Reload
	bl	best_huffman_divide
.LBB102_124:                            @   in Loop: Header=BB102_121 Depth=2
	ldr	r0, [r11, #-36]
	ldr	r1, [sp, #1292]
	ldr	r2, [r11, #-56]
	ldr	r3, [sp, #440]
	bl	ResvAdjust
@ BB#125:                               @   in Loop: Header=BB102_121 Depth=2
	ldr	r0, [sp, #432]
	add	r0, r0, #1
	str	r0, [sp, #432]
	b	.LBB102_121
.LBB102_126:                            @   in Loop: Header=BB102_119 Depth=1
	b	.LBB102_127
.LBB102_127:                            @   in Loop: Header=BB102_119 Depth=1
	ldr	r0, [sp, #428]
	add	r0, r0, #1
	str	r0, [sp, #428]
	b	.LBB102_119
.LBB102_128:
	movw	r0, #0
	str	r0, [sp, #428]
.LBB102_129:                            @ =>This Loop Header: Depth=1
                                        @     Child Loop BB102_131 Depth 2
                                        @       Child Loop BB102_133 Depth 3
	ldr	r0, [sp, #428]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB102_142
@ BB#130:                               @   in Loop: Header=BB102_129 Depth=1
	movw	r0, #0
	str	r0, [sp, #432]
.LBB102_131:                            @   Parent Loop BB102_129 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB102_133 Depth 3
	ldr	r0, [sp, #432]
	ldr	r1, [r11, #-36]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB102_140
@ BB#132:                               @   in Loop: Header=BB102_131 Depth=2
	movw	r0, #0
	str	r0, [sp, #436]
.LBB102_133:                            @   Parent Loop BB102_129 Depth=1
                                        @     Parent Loop BB102_131 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [sp, #436]
	cmp	r0, #576
	bge	.LBB102_138
@ BB#134:                               @   in Loop: Header=BB102_133 Depth=3
	movw	r0, #3
	ldr	r1, [r11, #-48]
	ldr	r2, [sp, #428]
	add	r2, r2, r2, lsl #3
	add	r1, r1, r2, lsl #10
	ldr	r2, [sp, #432]
	add	r2, r2, r2, lsl #3
	add	r1, r1, r2, lsl #9
	ldr	r2, [sp, #436]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #56]           @ 4-byte Spill
	bpl	.LBB102_136
@ BB#135:                               @   in Loop: Header=BB102_133 Depth=3
	mvn	r0, #0
	movw	r1, #2
	ldr	r2, [r11, #-60]
	ldr	r3, [sp, #428]
	add	r3, r3, r3, lsl #3
	add	r2, r2, r3, lsl #9
	ldr	r3, [sp, #432]
	add	r3, r3, r3, lsl #3
	add	r2, r2, r3, lsl #8
	ldr	r3, [sp, #436]
	add	r2, r2, r3, lsl #2
	ldr	r3, [r2]
	mul	r0, r3, r0
	str	r0, [r2]
	str	r1, [sp, #52]           @ 4-byte Spill
.LBB102_136:                            @   in Loop: Header=BB102_133 Depth=3
	b	.LBB102_137
.LBB102_137:                            @   in Loop: Header=BB102_133 Depth=3
	ldr	r0, [sp, #436]
	add	r0, r0, #1
	str	r0, [sp, #436]
	b	.LBB102_133
.LBB102_138:                            @   in Loop: Header=BB102_131 Depth=2
	b	.LBB102_139
.LBB102_139:                            @   in Loop: Header=BB102_131 Depth=2
	ldr	r0, [sp, #432]
	add	r0, r0, #1
	str	r0, [sp, #432]
	b	.LBB102_131
.LBB102_140:                            @   in Loop: Header=BB102_129 Depth=1
	b	.LBB102_141
.LBB102_141:                            @   in Loop: Header=BB102_129 Depth=1
	ldr	r0, [sp, #428]
	add	r0, r0, #1
	str	r0, [sp, #428]
	b	.LBB102_129
.LBB102_142:
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-56]
	ldr	r2, [sp, #440]
	bl	ResvFrameEnd
	sub	sp, r11, #28
	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
@ BB#143:
.Lfunc_end102:
	.size	VBR_iteration_loop, .Lfunc_end102-VBR_iteration_loop
	.cantunwind
	.fnend

	.globl	VBR_compare
	.p2align	2
	.type	VBR_compare,%function
	.code	32                      @ @VBR_compare
VBR_compare:
	.fnstart
@ BB#0:
	sub	sp, sp, #72
	vmov	d16, r2, r3
	vldr	d17, [sp, #112]
	vldr	d18, [sp, #104]
	vldr	d19, [sp, #96]
	ldr	r2, [sp, #88]
	vldr	d20, [sp, #80]
	vldr	d21, [sp, #72]
	movw	r3, #0
	movw	r1, #0
	str	r0, [sp, #68]
	vstr	d16, [sp, #56]
	vstr	d21, [sp, #48]
	vstr	d20, [sp, #40]
	str	r2, [sp, #36]
	vstr	d19, [sp, #24]
	vstr	d18, [sp, #16]
	vstr	d17, [sp, #8]
	str	r1, [sp, #4]
	ldr	r0, [sp, #36]
	ldr	r1, [sp, #68]
	cmp	r0, r1
	str	r3, [sp]                @ 4-byte Spill
	bgt	.LBB103_4
@ BB#1:
	movw	r0, #0
	vldr	d16, [sp, #16]
	vldr	d17, [sp, #48]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp]                @ 4-byte Spill
	bhi	.LBB103_4
@ BB#2:
	movw	r0, #0
	vldr	d16, [sp, #24]
	vldr	d17, [sp, #56]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp]                @ 4-byte Spill
	bhi	.LBB103_4
@ BB#3:
	vldr	d16, [sp, #8]
	vldr	d17, [sp, #40]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	movw	r0, #0
	movls	r0, #1
	str	r0, [sp]                @ 4-byte Spill
.LBB103_4:
	ldr	r0, [sp]                @ 4-byte Reload
	and	r0, r0, #1
	str	r0, [sp, #4]
	ldr	r0, [sp, #4]
	add	sp, sp, #72
	bx	lr
.Lfunc_end103:
	.size	VBR_compare, .Lfunc_end103-VBR_compare
	.cantunwind
	.fnend

	.globl	iteration_init
	.p2align	3
	.type	iteration_init,%function
	.code	32                      @ @iteration_init
iteration_init:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #120
	movw	r3, #0
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [r11, #-12]
	ldr	r0, [r11, #-8]
	str	r3, [r0, #8]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #156]
	cmp	r0, #0
	bne	.LBB104_26
@ BB#1:
	movw	r0, #0
	str	r0, [r11, #-28]
.LBB104_2:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-28]
	cmp	r0, #23
	bge	.LBB104_5
@ BB#3:                                 @   in Loop: Header=BB104_2 Depth=1
	movw	r0, :lower16:scalefac_band
	movt	r0, :upper16:scalefac_band
	movw	r1, #2
	ldr	r2, [r11, #-4]
	ldr	r3, [r2, #172]
	ldr	r2, [r2, #204]
	add	r3, r3, r3, lsl #1
	add	r2, r2, r3
	movw	r3, :lower16:sfBandIndex
	movt	r3, :upper16:sfBandIndex
	mov	r12, #148
	mla	r2, r2, r12, r3
	ldr	r3, [r11, #-28]
	ldr	r2, [r2, r3, lsl #2]
	movw	r12, :lower16:scalefac_band
	movt	r12, :upper16:scalefac_band
	add	r3, r12, r3, lsl #2
	str	r2, [r3]
	str	r0, [r11, #-32]         @ 4-byte Spill
	str	r1, [r11, #-36]         @ 4-byte Spill
@ BB#4:                                 @   in Loop: Header=BB104_2 Depth=1
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB104_2
.LBB104_5:
	movw	r0, #0
	str	r0, [r11, #-28]
.LBB104_6:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-28]
	cmp	r0, #14
	bge	.LBB104_9
@ BB#7:                                 @   in Loop: Header=BB104_6 Depth=1
	movw	r0, :lower16:scalefac_band
	movt	r0, :upper16:scalefac_band
	add	r0, r0, #92
	movw	r1, #2
	ldr	r2, [r11, #-4]
	ldr	r3, [r2, #172]
	ldr	r2, [r2, #204]
	add	r3, r3, r3, lsl #1
	add	r2, r2, r3
	movw	r3, :lower16:sfBandIndex
	movt	r3, :upper16:sfBandIndex
	mov	r12, #148
	mla	r2, r2, r12, r3
	ldr	r3, [r11, #-28]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2, #92]
	movw	r12, :lower16:scalefac_band
	movt	r12, :upper16:scalefac_band
	add	r3, r12, r3, lsl #2
	add	r3, r3, #92
	str	r2, [r3]
	str	r0, [r11, #-40]         @ 4-byte Spill
	str	r1, [r11, #-44]         @ 4-byte Spill
@ BB#8:                                 @   in Loop: Header=BB104_6 Depth=1
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB104_6
.LBB104_9:
	movw	r1, :lower16:ATH_l
	movt	r1, :upper16:ATH_l
	movw	r2, :lower16:ATH_s
	movt	r2, :upper16:ATH_s
	movw	r0, #0
	ldr	r3, [r11, #-8]
	str	r0, [r3]
	ldr	r0, [r11, #-4]
	bl	compute_ath
	movw	r0, #0
	str	r0, [r11, #-28]
.LBB104_10:                             @ =>This Inner Loop Header: Depth=1
	movw	r0, #8208
	ldr	r1, [r11, #-28]
	cmp	r1, r0
	bge	.LBB104_13
@ BB#11:                                @   in Loop: Header=BB104_10 Depth=1
	movw	r0, :lower16:pow43
	movt	r0, :upper16:pow43
	movw	r1, #3
	ldr	r2, [r11, #-28]
	vmov	s0, r2
	vcvt.f64.s32	d16, s0
	vldr	d17, .LCPI104_2
	vmov	r2, r3, d17
	vmov	r12, lr, d16
	str	r0, [r11, #-48]         @ 4-byte Spill
	mov	r0, r12
	str	r1, [r11, #-52]         @ 4-byte Spill
	mov	r1, lr
	bl	pow
	vmov	d16, r0, r1
	ldr	r0, [r11, #-28]
	movw	r1, :lower16:pow43
	movt	r1, :upper16:pow43
	add	r0, r1, r0, lsl #3
	vstr	d16, [r0]
@ BB#12:                                @   in Loop: Header=BB104_10 Depth=1
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB104_10
.LBB104_13:
	movw	r0, #0
	str	r0, [r11, #-28]
.LBB104_14:                             @ =>This Inner Loop Header: Depth=1
	movw	r0, #8207
	ldr	r1, [r11, #-28]
	cmp	r1, r0
	bge	.LBB104_17
@ BB#15:                                @   in Loop: Header=BB104_14 Depth=1
	movw	r0, :lower16:adj43
	movt	r0, :upper16:adj43
	movw	r1, #3
	ldr	r2, [r11, #-28]
	add	r3, r2, #1
	vmov	s0, r3
	vcvt.f64.s32	d16, s0
	movw	r12, :lower16:pow43
	movt	r12, :upper16:pow43
	add	r2, r12, r2, lsl #3
	vldr	d17, [r2]
	add	r2, r12, r3, lsl #3
	vldr	d18, [r2]
	vadd.f64	d17, d17, d18
	vmov.f64	d18, #5.000000e-01
	vmul.f64	d17, d17, d18
	vmov	r2, r3, d17
	vmov.f64	d17, #7.500000e-01
	vmov	r12, lr, d17
	str	r0, [r11, #-56]         @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #60]           @ 4-byte Spill
	mov	r1, r3
	mov	r2, r12
	mov	r3, lr
	vstr	d16, [sp, #48]          @ 8-byte Spill
	bl	pow
	vmov	d16, r0, r1
	vldr	d17, [sp, #48]          @ 8-byte Reload
	vsub.f64	d16, d17, d16
	ldr	r0, [r11, #-28]
	movw	r1, :lower16:adj43
	movt	r1, :upper16:adj43
	add	r0, r1, r0, lsl #3
	vstr	d16, [r0]
@ BB#16:                                @   in Loop: Header=BB104_14 Depth=1
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB104_14
.LBB104_17:
	movw	r0, #1
	vldr	d16, .LCPI104_0
	movw	r1, :lower16:adj43asm
	movt	r1, :upper16:adj43asm
	vmov.f64	d17, #5.000000e-01
	movw	r2, :lower16:adj43
	movt	r2, :upper16:adj43
	movw	r3, #3
	ldr	r12, [r11, #-28]
	movw	lr, :lower16:adj43
	movt	lr, :upper16:adj43
	add	r12, lr, r12, lsl #3
	vstr	d17, [r12]
	vstr	d16, [r1]
	str	r0, [r11, #-28]
	str	r3, [sp, #44]           @ 4-byte Spill
	str	r2, [sp, #40]           @ 4-byte Spill
.LBB104_18:                             @ =>This Inner Loop Header: Depth=1
	movw	r0, #8208
	ldr	r1, [r11, #-28]
	cmp	r1, r0
	bge	.LBB104_21
@ BB#19:                                @   in Loop: Header=BB104_18 Depth=1
	movw	r0, :lower16:adj43asm
	movt	r0, :upper16:adj43asm
	movw	r1, #3
	ldr	r2, [r11, #-28]
	vmov	s0, r2
	vcvt.f64.s32	d16, s0
	vmov.f64	d17, #5.000000e-01
	vsub.f64	d16, d16, d17
	movw	r3, :lower16:pow43
	movt	r3, :upper16:pow43
	add	r2, r3, r2, lsl #3
	vldr	d18, [r2]
	vldr	d19, [r2, #-8]
	vadd.f64	d18, d19, d18
	vmul.f64	d17, d18, d17
	vmov	r2, r3, d17
	vmov.f64	d17, #7.500000e-01
	vmov	r12, lr, d17
	str	r0, [sp, #36]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #32]           @ 4-byte Spill
	mov	r1, r3
	mov	r2, r12
	mov	r3, lr
	vstr	d16, [sp, #24]          @ 8-byte Spill
	bl	pow
	vmov	d16, r0, r1
	vldr	d17, [sp, #24]          @ 8-byte Reload
	vsub.f64	d16, d17, d16
	ldr	r0, [r11, #-28]
	movw	r1, :lower16:adj43asm
	movt	r1, :upper16:adj43asm
	add	r0, r1, r0, lsl #3
	vstr	d16, [r0]
@ BB#20:                                @   in Loop: Header=BB104_18 Depth=1
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB104_18
.LBB104_21:
	movw	r0, #0
	str	r0, [r11, #-28]
.LBB104_22:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-28]
	cmp	r0, #256
	bge	.LBB104_25
@ BB#23:                                @   in Loop: Header=BB104_22 Depth=1
	movw	r0, :lower16:pow20
	movt	r0, :upper16:pow20
	movw	r1, #3
	ldr	r2, [r11, #-28]
	sub	r2, r2, #210
	vmov	s0, r2
	vcvt.f64.s32	d16, s0
	vmov.f64	d17, #-1.875000e-01
	vmul.f64	d16, d16, d17
	vmov	r2, r3, d16
	vmov.f64	d16, #2.000000e+00
	vmov	r12, lr, d16
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, r12
	str	r1, [sp, #16]           @ 4-byte Spill
	mov	r1, lr
	str	lr, [sp, #12]           @ 4-byte Spill
	str	r12, [sp, #8]           @ 4-byte Spill
	bl	pow
	ldr	r2, [r11, #-28]
	movw	r3, :lower16:ipow20
	movt	r3, :upper16:ipow20
	str	r0, [r3, r2, lsl #3]!
	str	r1, [r3, #4]
	ldr	r0, [r11, #-28]
	sub	r0, r0, #210
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	vmov.f64	d17, #2.500000e-01
	vmul.f64	d16, d16, d17
	vmov	r2, r3, d16
	ldr	r0, [sp, #8]            @ 4-byte Reload
	ldr	r1, [sp, #12]           @ 4-byte Reload
	bl	pow
	vmov	d16, r0, r1
	ldr	r0, [r11, #-28]
	movw	r1, :lower16:pow20
	movt	r1, :upper16:pow20
	add	r0, r1, r0, lsl #3
	vstr	d16, [r0]
@ BB#24:                                @   in Loop: Header=BB104_22 Depth=1
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB104_22
.LBB104_25:
	b	.LBB104_26
.LBB104_26:
	movw	r0, #0
	movw	r1, :lower16:reduce_sidechannel
	movt	r1, :upper16:reduce_sidechannel
	movw	r2, :lower16:convert_mdct
	movt	r2, :upper16:convert_mdct
	str	r0, [r2]
	str	r0, [r1]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #208]
	cmp	r0, #2
	bne	.LBB104_28
@ BB#27:
	movw	r0, #1
	movw	r1, :lower16:reduce_sidechannel
	movt	r1, :upper16:reduce_sidechannel
	movw	r2, :lower16:convert_mdct
	movt	r2, :upper16:convert_mdct
	str	r0, [r2]
	str	r0, [r1]
.LBB104_28:
	movw	r0, #0
	str	r0, [r11, #-24]
.LBB104_29:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB104_31 Depth 2
	ldr	r0, [r11, #-24]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB104_40
@ BB#30:                                @   in Loop: Header=BB104_29 Depth=1
	movw	r0, #0
	str	r0, [r11, #-20]
.LBB104_31:                             @   Parent Loop BB104_29 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-20]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB104_37
@ BB#32:                                @   in Loop: Header=BB104_31 Depth=2
	movw	r0, #112
	movw	r1, #224
	ldr	r2, [r11, #-8]
	add	r2, r2, #44
	ldr	r3, [r11, #-24]
	mul	r1, r3, r1
	add	r1, r2, r1
	ldr	r2, [r11, #-20]
	mul	r0, r2, r0
	add	r0, r1, r0
	str	r0, [r11, #-16]
	ldr	r0, [r11, #-16]
	ldr	r0, [r0, #24]
	cmp	r0, #2
	bne	.LBB104_34
@ BB#33:                                @   in Loop: Header=BB104_31 Depth=2
	movw	r0, #0
	ldr	r1, [r11, #-16]
	str	r0, [r1, #80]
	ldr	r1, [r11, #-16]
	str	r0, [r1, #84]
	b	.LBB104_35
.LBB104_34:                             @   in Loop: Header=BB104_31 Depth=2
	movw	r0, #12
	movw	r1, #21
	ldr	r2, [r11, #-16]
	str	r1, [r2, #80]
	ldr	r1, [r11, #-16]
	str	r0, [r1, #84]
.LBB104_35:                             @   in Loop: Header=BB104_31 Depth=2
	b	.LBB104_36
.LBB104_36:                             @   in Loop: Header=BB104_31 Depth=2
	ldr	r0, [r11, #-20]
	add	r0, r0, #1
	str	r0, [r11, #-20]
	b	.LBB104_31
.LBB104_37:                             @   in Loop: Header=BB104_29 Depth=1
	b	.LBB104_38
.LBB104_38:                             @   in Loop: Header=BB104_29 Depth=1
	ldr	r0, [r11, #-24]
	add	r0, r0, #1
	str	r0, [r11, #-24]
	b	.LBB104_29
	.p2align	3
@ BB#39:
.LCPI104_2:
	.long	1431655765              @ double 1.3333333333333333
	.long	1073042773
.LBB104_40:
	movw	r0, #0
	str	r0, [r11, #-20]
.LBB104_41:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB104_43 Depth 2
	ldr	r0, [r11, #-20]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB104_48
@ BB#42:                                @   in Loop: Header=BB104_41 Depth=1
	movw	r0, #0
	str	r0, [r11, #-28]
.LBB104_43:                             @   Parent Loop BB104_41 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-28]
	cmp	r0, #4
	bge	.LBB104_46
@ BB#44:                                @   in Loop: Header=BB104_43 Depth=2
	movw	r0, #0
	movw	r1, #2
	ldr	r2, [r11, #-8]
	ldr	r3, [r11, #-20]
	add	r2, r2, r3, lsl #4
	add	r2, r2, #12
	ldr	r3, [r11, #-28]
	add	r2, r2, r3, lsl #2
	str	r0, [r2]
	str	r1, [sp, #4]            @ 4-byte Spill
@ BB#45:                                @   in Loop: Header=BB104_43 Depth=2
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB104_43
.LBB104_46:                             @   in Loop: Header=BB104_41 Depth=1
	b	.LBB104_47
.LBB104_47:                             @   in Loop: Header=BB104_41 Depth=1
	ldr	r0, [r11, #-20]
	add	r0, r0, #1
	str	r0, [r11, #-20]
	b	.LBB104_41
.LBB104_48:
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#49:
.LCPI104_0:
	.long	0                       @ double 0
	.long	0
.Lfunc_end104:
	.size	iteration_init, .Lfunc_end104-iteration_init
	.cantunwind
	.fnend

	.globl	compute_ath
	.p2align	3
	.type	compute_ath,%function
	.code	32                      @ @compute_ath
compute_ath:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #104
	movw	r3, #0
	vldr	d16, .LCPI105_0
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [r11, #-12]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #12]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d17, d16
	vstr	d16, [r11, #-48]
	str	r3, [r11, #-16]
.LBB105_1:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB105_3 Depth 2
	ldr	r0, [r11, #-16]
	cmp	r0, #21
	bge	.LBB105_11
@ BB#2:                                 @   in Loop: Header=BB105_1 Depth=1
	vldr	d16, .LCPI105_1
	movw	r0, #3
	ldr	r1, [r11, #-16]
	movw	r2, :lower16:scalefac_band
	movt	r2, :upper16:scalefac_band
	ldr	r1, [r2, r1, lsl #2]
	str	r1, [r11, #-24]
	ldr	r1, [r11, #-16]
	add	r1, r2, r1, lsl #2
	ldr	r1, [r1, #4]
	str	r1, [r11, #-28]
	ldr	r1, [r11, #-8]
	ldr	r2, [r11, #-16]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	ldr	r1, [r11, #-24]
	str	r1, [r11, #-20]
	str	r0, [sp, #52]           @ 4-byte Spill
.LBB105_3:                              @   Parent Loop BB105_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-20]
	ldr	r1, [r11, #-28]
	cmp	r0, r1
	bge	.LBB105_9
@ BB#4:                                 @   in Loop: Header=BB105_3 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-4]
	vldr	d16, [r11, #-48]
	vldr	s0, [r11, #-20]
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d16, d17
	vldr	d17, .LCPI105_3
	vdiv.f64	d16, d16, d17
	vmov	r2, r3, d16
	str	r0, [sp, #48]           @ 4-byte Spill
	mov	r0, r1
	bl	ATHformula
	str	r0, [r11, #-40]
	str	r1, [r11, #-36]
	ldr	r0, [r11, #-8]
	ldr	r1, [r11, #-16]
	add	r0, r0, r1, lsl #3
	vldr	d16, [r0]
	vldr	d17, [r11, #-40]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB105_6
@ BB#5:                                 @   in Loop: Header=BB105_3 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-8]
	ldr	r2, [r11, #-16]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #44]           @ 4-byte Spill
	vstr	d16, [sp, #32]          @ 8-byte Spill
	b	.LBB105_7
.LBB105_6:                              @   in Loop: Header=BB105_3 Depth=2
	vldr	d16, [r11, #-40]
	vstr	d16, [sp, #32]          @ 8-byte Spill
.LBB105_7:                              @   in Loop: Header=BB105_3 Depth=2
	vldr	d16, [sp, #32]          @ 8-byte Reload
	movw	r0, #3
	ldr	r1, [r11, #-8]
	ldr	r2, [r11, #-16]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	str	r0, [sp, #28]           @ 4-byte Spill
@ BB#8:                                 @   in Loop: Header=BB105_3 Depth=2
	ldr	r0, [r11, #-20]
	add	r0, r0, #1
	str	r0, [r11, #-20]
	b	.LBB105_3
.LBB105_9:                              @   in Loop: Header=BB105_1 Depth=1
	b	.LBB105_10
.LBB105_10:                             @   in Loop: Header=BB105_1 Depth=1
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB105_1
.LBB105_11:
	movw	r0, #0
	str	r0, [r11, #-16]
.LBB105_12:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB105_14 Depth 2
	ldr	r0, [r11, #-16]
	cmp	r0, #12
	bge	.LBB105_22
@ BB#13:                                @   in Loop: Header=BB105_12 Depth=1
	vldr	d16, .LCPI105_1
	movw	r0, #3
	ldr	r1, [r11, #-16]
	movw	r2, :lower16:scalefac_band
	movt	r2, :upper16:scalefac_band
	add	r2, r2, #92
	ldr	r1, [r2, r1, lsl #2]
	str	r1, [r11, #-24]
	ldr	r1, [r11, #-16]
	add	r1, r2, r1, lsl #2
	ldr	r1, [r1, #4]
	str	r1, [r11, #-28]
	ldr	r1, [r11, #-12]
	ldr	r2, [r11, #-16]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	ldr	r1, [r11, #-24]
	str	r1, [r11, #-20]
	str	r0, [sp, #24]           @ 4-byte Spill
.LBB105_14:                             @   Parent Loop BB105_12 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-20]
	ldr	r1, [r11, #-28]
	cmp	r0, r1
	bge	.LBB105_20
@ BB#15:                                @   in Loop: Header=BB105_14 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-4]
	vldr	d16, [r11, #-48]
	vldr	s0, [r11, #-20]
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d16, d17
	vldr	d17, .LCPI105_2
	vdiv.f64	d16, d16, d17
	vmov	r2, r3, d16
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, r1
	bl	ATHformula
	str	r0, [r11, #-40]
	str	r1, [r11, #-36]
	ldr	r0, [r11, #-12]
	ldr	r1, [r11, #-16]
	add	r0, r0, r1, lsl #3
	vldr	d16, [r0]
	vldr	d17, [r11, #-40]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB105_17
@ BB#16:                                @   in Loop: Header=BB105_14 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-12]
	ldr	r2, [r11, #-16]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	str	r0, [sp, #16]           @ 4-byte Spill
	vstr	d16, [sp, #8]           @ 8-byte Spill
	b	.LBB105_18
.LBB105_17:                             @   in Loop: Header=BB105_14 Depth=2
	vldr	d16, [r11, #-40]
	vstr	d16, [sp, #8]           @ 8-byte Spill
.LBB105_18:                             @   in Loop: Header=BB105_14 Depth=2
	vldr	d16, [sp, #8]           @ 8-byte Reload
	movw	r0, #3
	ldr	r1, [r11, #-12]
	ldr	r2, [r11, #-16]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	str	r0, [sp, #4]            @ 4-byte Spill
@ BB#19:                                @   in Loop: Header=BB105_14 Depth=2
	ldr	r0, [r11, #-20]
	add	r0, r0, #1
	str	r0, [r11, #-20]
	b	.LBB105_14
.LBB105_20:                             @   in Loop: Header=BB105_12 Depth=1
	b	.LBB105_21
.LBB105_21:                             @   in Loop: Header=BB105_12 Depth=1
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB105_12
.LBB105_22:
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#23:
.LCPI105_0:
	.long	0                       @ double 1000
	.long	1083129856
.LCPI105_1:
	.long	2726797102              @ double 9.9999999999999997E+98
	.long	1417495214
.LCPI105_2:
	.long	0                       @ double 384
	.long	1081606144
.LCPI105_3:
	.long	0                       @ double 1152
	.long	1083310080
.Lfunc_end105:
	.size	compute_ath, .Lfunc_end105-compute_ath
	.cantunwind
	.fnend

	.globl	ATHformula
	.p2align	3
	.type	ATHformula,%function
	.code	32                      @ @ATHformula
ATHformula:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #48
	vmov	d16, r2, r3
	vldr	d17, .LCPI106_0
	str	r0, [r11, #-4]
	vstr	d16, [r11, #-16]
	vldr	d16, [r11, #-16]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	ble	.LBB106_2
@ BB#1:
	vldr	d16, .LCPI106_0
	vstr	d16, [sp, #16]          @ 8-byte Spill
	b	.LBB106_3
.LBB106_2:
	vldr	d16, [r11, #-16]
	vstr	d16, [sp, #16]          @ 8-byte Spill
.LBB106_3:
	vldr	d16, [sp, #16]          @ 8-byte Reload
	vldr	d17, .LCPI106_5
	vstr	d16, [r11, #-16]
	vldr	d16, [r11, #-16]
	vmov	r0, r1, d16
	vmov	r2, r3, d17
	bl	pow
	vmov	d16, r0, r1
	vmov.f64	d17, #2.000000e+00
	vldr	d18, .LCPI106_3
	vldr	d19, .LCPI106_4
	vmul.f64	d16, d19, d16
	vldr	d19, [r11, #-16]
	vsub.f64	d18, d19, d18
	vmov	r0, r1, d18
	vmov	r2, r3, d17
	vstr	d16, [sp, #8]           @ 8-byte Spill
	bl	pow
	vmov	d16, r0, r1
	vldr	d17, .LCPI106_2
	vmul.f64	d16, d17, d16
	vmov	r0, r1, d16
	bl	exp
	vmov	d16, r0, r1
	vmov.f64	d17, #4.000000e+00
	vmov.f64	d18, #6.500000e+00
	vmul.f64	d16, d18, d16
	vldr	d18, [sp, #8]           @ 8-byte Reload
	vsub.f64	d16, d18, d16
	vldr	d18, [r11, #-16]
	vmov	r0, r1, d18
	vmov	r2, r3, d17
	vstr	d16, [sp]               @ 8-byte Spill
	bl	pow
	vmov	d16, r0, r1
	vldr	d17, .LCPI106_1
	vmul.f64	d16, d17, d16
	vldr	d17, [sp]               @ 8-byte Reload
	vadd.f64	d16, d17, d16
	vstr	d16, [sp, #24]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #136]
	cmp	r0, #0
	beq	.LBB106_5
@ BB#4:
	vldr	d16, .LCPI106_7
	vldr	d17, [sp, #24]
	vsub.f64	d16, d17, d16
	vstr	d16, [sp, #24]
	b	.LBB106_6
.LBB106_5:
	vldr	d16, .LCPI106_6
	vldr	d17, [sp, #24]
	vsub.f64	d16, d17, d16
	vstr	d16, [sp, #24]
.LBB106_6:
	vldr	d16, [sp, #24]
	vmov.f64	d17, #1.000000e+01
	vdiv.f64	d16, d16, d17
	vmov	r2, r3, d16
	vmov	r0, r1, d17
	bl	pow
	vmov	d16, r0, r1
	vstr	d16, [sp, #24]
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#7:
.LCPI106_0:
	.long	1202590843              @ double 0.02
	.long	1066695393
.LCPI106_1:
	.long	3539053052              @ double 0.001
	.long	1062232653
.LCPI106_2:
	.long	858993459               @ double -0.59999999999999998
	.long	3219338035
.LCPI106_3:
	.long	1717986918              @ double 3.2999999999999998
	.long	1074423398
.LCPI106_4:
	.long	1374389535              @ double 3.6400000000000001
	.long	1074601656
.LCPI106_5:
	.long	2576980378              @ double -0.80000000000000004
	.long	3219757465
.LCPI106_6:
	.long	0                       @ double 114
	.long	1079803904
.LCPI106_7:
	.long	0                       @ double 200
	.long	1080623104
.Lfunc_end106:
	.size	ATHformula, .Lfunc_end106-ATHformula
	.cantunwind
	.fnend

	.globl	ms_convert
	.p2align	3
	.type	ms_convert,%function
	.code	32                      @ @ms_convert
ms_convert:
	.fnstart
@ BB#0:
	sub	sp, sp, #40
	movw	r2, #0
	str	r0, [sp, #36]
	str	r1, [sp, #32]
	str	r2, [sp, #28]
.LBB107_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #28]
	cmp	r0, #576
	bge	.LBB107_4
@ BB#2:                                 @   in Loop: Header=BB107_1 Depth=1
	movw	r0, #3
	ldr	r1, [sp, #32]
	ldr	r2, [sp, #28]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vstr	d16, [sp, #16]
	ldr	r1, [sp, #32]
	ldr	r2, [sp, #28]
	add	r1, r1, r2, lsl #3
	add	r1, r1, #4608
	vldr	d16, [r1]
	vstr	d16, [sp, #8]
	vldr	d17, [sp, #16]
	vadd.f64	d16, d17, d16
	vldr	d17, .LCPI107_0
	vmul.f64	d16, d16, d17
	ldr	r1, [sp, #36]
	ldr	r2, [sp, #28]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	vldr	d16, [sp, #16]
	vldr	d18, [sp, #8]
	vsub.f64	d16, d16, d18
	vmul.f64	d16, d16, d17
	ldr	r1, [sp, #36]
	add	r1, r1, #4608
	ldr	r2, [sp, #28]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	str	r0, [sp, #4]            @ 4-byte Spill
@ BB#3:                                 @   in Loop: Header=BB107_1 Depth=1
	ldr	r0, [sp, #28]
	add	r0, r0, #1
	str	r0, [sp, #28]
	b	.LBB107_1
.LBB107_4:
	add	sp, sp, #40
	bx	lr
	.p2align	3
@ BB#5:
.LCPI107_0:
	.long	1719614413              @ double 0.70710678118654757
	.long	1072079006
.Lfunc_end107:
	.size	ms_convert, .Lfunc_end107-ms_convert
	.cantunwind
	.fnend

	.globl	on_pe
	.p2align	3
	.type	on_pe,%function
	.code	32                      @ @on_pe
on_pe:
	.fnstart
@ BB#0:
	push	{r4, r5, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #136
	ldr	r12, [r11, #12]
	ldr	lr, [r11, #8]
	sub	r4, r11, #44
	sub	r5, r11, #40
	str	r0, [r11, #-12]
	str	r1, [r11, #-16]
	str	r2, [r11, #-20]
	str	r3, [r11, #-24]
	str	lr, [r11, #-28]
	str	r12, [r11, #-32]
	ldr	r0, [r11, #-28]
	ldr	r3, [r11, #-32]
	mov	r1, r4
	mov	r2, r5
	bl	ResvMaxBits
	movw	r0, #0
	str	r0, [r11, #-60]
.LBB108_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-60]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB108_14
@ BB#2:                                 @   in Loop: Header=BB108_1 Depth=1
	sub	r0, r11, #56
	movw	r1, #2
	ldr	r2, [r11, #-20]
	ldr	r3, [r11, #-32]
	rsb	r3, r3, r3, lsl #3
	add	r2, r2, r3, lsl #5
	ldr	r3, [r11, #-60]
	rsb	r3, r3, r3, lsl #3
	add	r2, r2, r3, lsl #4
	add	r2, r2, #44
	str	r2, [r11, #-36]
	ldr	r2, [r11, #-44]
	ldr	r3, [r11, #-12]
	ldr	r3, [r3, #184]
	str	r0, [r11, #-64]         @ 4-byte Spill
	mov	r0, r2
	str	r1, [r11, #-68]         @ 4-byte Spill
	mov	r1, r3
	bl	__divsi3
	ldr	r1, [r11, #-24]
	ldr	r2, [r11, #-60]
	str	r0, [r1, r2, lsl #2]
	mov	r0, #0
	str	r0, [r11, #-48]
	ldr	r0, [r11, #-16]
	ldr	r1, [r11, #-32]
	add	r0, r0, r1, lsl #4
	ldr	r1, [r11, #-60]
	add	r0, r0, r1, lsl #3
	vldr	d16, [r0]
	vldr	d17, .LCPI108_0
	vadd.f64	d16, d16, d17
	vldr	d17, .LCPI108_1
	vdiv.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	sub	r2, r11, #56
	add	r1, r2, r1, lsl #2
	str	r0, [r1]
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #24]
	cmp	r0, #2
	bne	.LBB108_6
@ BB#3:                                 @   in Loop: Header=BB108_1 Depth=1
	sub	r0, r11, #56
	movw	r1, #2
	ldr	r2, [r11, #-60]
	sub	r3, r11, #56
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	cmp	r2, #500
	str	r0, [sp, #72]           @ 4-byte Spill
	str	r1, [sp, #68]           @ 4-byte Spill
	bge	.LBB108_5
@ BB#4:                                 @   in Loop: Header=BB108_1 Depth=1
	movw	r0, #500
	sub	r1, r11, #56
	movw	r2, #2
	ldr	r3, [r11, #-60]
	sub	r12, r11, #56
	add	r3, r12, r3, lsl #2
	str	r0, [r3]
	str	r2, [sp, #64]           @ 4-byte Spill
	str	r1, [sp, #60]           @ 4-byte Spill
.LBB108_5:                              @   in Loop: Header=BB108_1 Depth=1
	b	.LBB108_6
.LBB108_6:                              @   in Loop: Header=BB108_1 Depth=1
	sub	r0, r11, #56
	movw	r1, #2
	ldr	r2, [r11, #-60]
	sub	r3, r11, #56
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	cmp	r2, #0
	str	r0, [sp, #56]           @ 4-byte Spill
	str	r1, [sp, #52]           @ 4-byte Spill
	bge	.LBB108_8
@ BB#7:                                 @   in Loop: Header=BB108_1 Depth=1
	movw	r0, #0
	sub	r1, r11, #56
	movw	r2, #2
	ldr	r3, [r11, #-60]
	sub	r12, r11, #56
	add	r3, r12, r3, lsl #2
	str	r0, [r3]
	str	r2, [sp, #48]           @ 4-byte Spill
	str	r1, [sp, #44]           @ 4-byte Spill
.LBB108_8:                              @   in Loop: Header=BB108_1 Depth=1
	sub	r0, r11, #56
	movw	r1, #2
	ldr	r2, [r11, #-60]
	sub	r3, r11, #56
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	ldr	r3, [r11, #-48]
	add	r2, r3, r2
	str	r2, [r11, #-48]
	ldr	r2, [r11, #-48]
	ldr	r3, [r11, #-40]
	cmp	r2, r3
	str	r0, [sp, #40]           @ 4-byte Spill
	str	r1, [sp, #36]           @ 4-byte Spill
	ble	.LBB108_10
@ BB#9:                                 @   in Loop: Header=BB108_1 Depth=1
	sub	r0, r11, #56
	movw	r1, #2
	ldr	r2, [r11, #-40]
	ldr	r3, [r11, #-60]
	sub	r12, r11, #56
	add	lr, r12, r3, lsl #2
	ldr	r3, [r12, r3, lsl #2]
	mul	r2, r2, r3
	ldr	r3, [r11, #-48]
	str	r0, [sp, #32]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #28]           @ 4-byte Spill
	mov	r1, r3
	str	lr, [sp, #24]           @ 4-byte Spill
	bl	__divsi3
	ldr	r1, [sp, #24]           @ 4-byte Reload
	str	r0, [r1]
.LBB108_10:                             @   in Loop: Header=BB108_1 Depth=1
	movw	r0, #4095
	sub	r1, r11, #56
	movw	r2, #2
	ldr	r3, [r11, #-24]
	ldr	r12, [r11, #-60]
	ldr	r3, [r3, r12, lsl #2]
	sub	lr, r11, #56
	add	r12, lr, r12, lsl #2
	ldr	r12, [r12]
	add	r3, r3, r12
	cmp	r3, r0
	str	r2, [sp, #20]           @ 4-byte Spill
	str	r1, [sp, #16]           @ 4-byte Spill
	ble	.LBB108_12
@ BB#11:                                @   in Loop: Header=BB108_1 Depth=1
	sub	r0, r11, #56
	movw	r1, #2
	ldr	r2, [r11, #-24]
	ldr	r3, [r11, #-60]
	ldr	r2, [r2, r3, lsl #2]
	movw	r12, #4095
	sub	r2, r12, r2
	sub	r12, r11, #56
	add	r3, r12, r3, lsl #2
	str	r2, [r3]
	str	r0, [sp, #12]           @ 4-byte Spill
	str	r1, [sp, #8]            @ 4-byte Spill
.LBB108_12:                             @   in Loop: Header=BB108_1 Depth=1
	sub	r0, r11, #56
	movw	r1, #2
	ldr	r2, [r11, #-24]
	ldr	r3, [r11, #-60]
	ldr	r12, [r2, r3, lsl #2]
	sub	lr, r11, #56
	ldr	r4, [lr, r3, lsl #2]
	add	r12, r12, r4
	str	r12, [r2, r3, lsl #2]
	ldr	r2, [r11, #-60]
	add	r2, lr, r2, lsl #2
	ldr	r2, [r2]
	ldr	r3, [r11, #-40]
	sub	r2, r3, r2
	str	r2, [r11, #-40]
	str	r0, [sp, #4]            @ 4-byte Spill
	str	r1, [sp]                @ 4-byte Spill
@ BB#13:                                @   in Loop: Header=BB108_1 Depth=1
	ldr	r0, [r11, #-60]
	add	r0, r0, #1
	str	r0, [r11, #-60]
	b	.LBB108_1
.LBB108_14:
	sub	sp, r11, #8
	pop	{r4, r5, r11, pc}
	.p2align	3
@ BB#15:
.LCPI108_0:
	.long	0                       @ double -750
	.long	3230101504
.LCPI108_1:
	.long	3435973837              @ double 1.55
	.long	1073269964
.Lfunc_end108:
	.size	on_pe, .Lfunc_end108-on_pe
	.cantunwind
	.fnend

	.globl	reduce_side
	.p2align	3
	.type	reduce_side,%function
	.code	32                      @ @reduce_side
reduce_side:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #56
	vmov	d16, r2, r3
	ldr	r2, [r11, #8]
	vmov.f64	d17, #5.000000e-01
	vldr	d18, .LCPI109_0
	movw	r3, #2
	str	r0, [r11, #-4]
	vstr	d16, [r11, #-16]
	str	r2, [r11, #-20]
	str	r3, [sp, #28]
	vldr	d16, [r11, #-16]
	vsub.f64	d16, d17, d16
	vmul.f64	d16, d18, d16
	vdiv.f64	d16, d16, d17
	vcvt.f32.f64	s0, d16
	vstr	s0, [sp, #24]
	vldr	s0, [sp, #24]
	vcmpe.f32	s0, #0
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB109_2
@ BB#1:
	vldr	s0, .LCPI109_1
	vstr	s0, [sp, #24]
.LBB109_2:
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #4]
	cmp	r0, #125
	blt	.LBB109_7
@ BB#3:
	vldr	s0, .LCPI109_2
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #4]
	vmov	s2, r0
	vcvt.f32.s32	s2, s2
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #4]
	vmov	s4, r0
	vcvt.f32.s32	s4, s4
	vldr	s6, [sp, #24]
	vmul.f32	s4, s4, s6
	vsub.f32	s2, s2, s4
	vcmpe.f32	s2, s0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB109_5
@ BB#4:
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #4]
	vmov	s0, r0
	vcvt.f32.s32	s0, s0
	vldr	s2, [sp, #24]
	vmul.f32	s0, s0, s2
	ldr	r0, [r11, #-4]
	ldr	r1, [r0]
	vmov	s2, r1
	vcvt.f32.s32	s2, s2
	vadd.f32	s0, s2, s0
	vcvt.s32.f32	s0, s0
	vmov	r1, s0
	str	r1, [r0]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #4]
	vmov	s0, r0
	vcvt.f32.s32	s0, s0
	vldr	s2, [sp, #24]
	vmul.f32	s0, s0, s2
	ldr	r0, [r11, #-4]
	ldr	r1, [r0, #4]
	vmov	s2, r1
	vcvt.f32.s32	s2, s2
	vsub.f32	s0, s2, s0
	vcvt.s32.f32	s0, s0
	vmov	r1, s0
	str	r1, [r0, #4]
	b	.LBB109_6
.LBB109_5:
	movw	r0, #125
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #4]
	sub	r1, r1, #125
	ldr	r2, [r11, #-4]
	ldr	r3, [r2]
	add	r1, r3, r1
	str	r1, [r2]
	ldr	r1, [r11, #-4]
	str	r0, [r1, #4]
.LBB109_6:
	b	.LBB109_7
.LBB109_7:
	movw	r0, #0
	str	r0, [r11, #-24]
.LBB109_8:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-24]
	ldr	r1, [sp, #28]
	cmp	r0, r1
	bge	.LBB109_16
@ BB#9:                                 @   in Loop: Header=BB109_8 Depth=1
	movw	r0, #4095
	movw	r1, #2
	ldr	r2, [r11, #-20]
	str	r0, [sp, #16]           @ 4-byte Spill
	mov	r0, r2
	bl	__divsi3
	add	r0, r0, #1200
	ldr	r1, [sp, #16]           @ 4-byte Reload
	cmp	r1, r0
	bge	.LBB109_11
@ BB#10:                                @   in Loop: Header=BB109_8 Depth=1
	movw	r0, #4095
	str	r0, [sp, #12]           @ 4-byte Spill
	b	.LBB109_12
.LBB109_11:                             @   in Loop: Header=BB109_8 Depth=1
	movw	r1, #2
	ldr	r0, [r11, #-20]
	bl	__divsi3
	add	r0, r0, #1200
	str	r0, [sp, #12]           @ 4-byte Spill
.LBB109_12:                             @   in Loop: Header=BB109_8 Depth=1
	ldr	r0, [sp, #12]           @ 4-byte Reload
	movw	r1, #2
	str	r0, [sp, #20]
	ldr	r0, [r11, #-4]
	ldr	r2, [r11, #-24]
	add	r0, r0, r2, lsl #2
	ldr	r0, [r0]
	ldr	r2, [sp, #20]
	cmp	r0, r2
	str	r1, [sp, #8]            @ 4-byte Spill
	ble	.LBB109_14
@ BB#13:                                @   in Loop: Header=BB109_8 Depth=1
	movw	r0, #2
	ldr	r1, [sp, #20]
	ldr	r2, [r11, #-4]
	ldr	r3, [r11, #-24]
	add	r2, r2, r3, lsl #2
	str	r1, [r2]
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB109_14:                             @   in Loop: Header=BB109_8 Depth=1
	b	.LBB109_15
.LBB109_15:                             @   in Loop: Header=BB109_8 Depth=1
	ldr	r0, [r11, #-24]
	add	r0, r0, #1
	str	r0, [r11, #-24]
	b	.LBB109_8
.LBB109_16:
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#17:
.LCPI109_0:
	.long	1374389535              @ double 0.33000000000000002
	.long	1070931640
.LCPI109_1:
	.long	0                       @ float 0
.LCPI109_2:
	.long	1123680256              @ float 125
.Lfunc_end109:
	.size	reduce_side, .Lfunc_end109-reduce_side
	.cantunwind
	.fnend

	.globl	inner_loop
	.p2align	2
	.type	inner_loop,%function
	.code	32                      @ @inner_loop
inner_loop:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #32
	ldr	r12, [r11, #8]
	movw	lr, #1
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [r11, #-12]
	str	r3, [sp, #16]
	str	r12, [sp, #12]
	ldr	r0, [sp, #16]
	cmp	r0, #0
	str	lr, [sp, #4]            @ 4-byte Spill
	bge	.LBB110_2
@ BB#1:
	movw	r0, :lower16:.L.str.254
	movt	r0, :upper16:.L.str.254
	movw	r1, :lower16:.L.str.1.255
	movt	r1, :upper16:.L.str.1.255
	movw	r2, #431
	movw	r3, :lower16:.L__func__.inner_loop
	movt	r3, :upper16:.L__func__.inner_loop
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB110_2:
	ldr	r0, [sp, #4]            @ 4-byte Reload
	mvn	r1, #0
	ldr	r2, [sp, #12]
	ldr	r3, [r2, #12]
	add	r1, r3, r1
	str	r1, [r2, #12]
	str	r0, [sp]                @ 4-byte Spill
.LBB110_3:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #12]
	ldr	r1, [r0, #12]
	add	r1, r1, #1
	str	r1, [r0, #12]
	ldr	r0, [r11, #-4]
	ldr	r1, [r11, #-12]
	ldr	r2, [r11, #-8]
	ldr	r3, [sp, #12]
	bl	count_bits
	str	r0, [sp, #8]
@ BB#4:                                 @   in Loop: Header=BB110_3 Depth=1
	ldr	r0, [sp, #8]
	ldr	r1, [sp, #16]
	cmp	r0, r1
	bgt	.LBB110_3
@ BB#5:
	ldr	r0, [sp, #8]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end110:
	.size	inner_loop, .Lfunc_end110-inner_loop
	.cantunwind
	.fnend

	.globl	scale_bitcount
	.p2align	2
	.type	scale_bitcount,%function
	.code	32                      @ @scale_bitcount
scale_bitcount:
	.fnstart
@ BB#0:
	sub	sp, sp, #104
	movw	r2, #2
	movw	r3, #0
	str	r0, [sp, #100]
	str	r1, [sp, #96]
	str	r3, [sp, #80]
	str	r3, [sp, #76]
	str	r2, [sp, #72]
	ldr	r0, [sp, #96]
	ldr	r0, [r0, #24]
	cmp	r0, #2
	bne	.LBB111_18
@ BB#1:
	movw	r0, #0
	movw	r1, :lower16:scale_bitcount.slen1_tab
	movt	r1, :upper16:scale_bitcount.slen1_tab
	str	r1, [sp, #68]
	str	r0, [sp, #92]
.LBB111_2:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB111_4 Depth 2
                                        @     Child Loop BB111_10 Depth 2
	ldr	r0, [sp, #92]
	cmp	r0, #3
	bge	.LBB111_17
@ BB#3:                                 @   in Loop: Header=BB111_2 Depth=1
	movw	r0, #0
	str	r0, [sp, #84]
.LBB111_4:                              @   Parent Loop BB111_2 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #84]
	cmp	r0, #6
	bge	.LBB111_9
@ BB#5:                                 @   in Loop: Header=BB111_4 Depth=2
	movw	r0, #2
	ldr	r1, [sp, #100]
	ldr	r2, [sp, #84]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #2
	add	r1, r1, #88
	ldr	r2, [sp, #92]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	ldr	r2, [sp, #80]
	cmp	r1, r2
	str	r0, [sp, #64]           @ 4-byte Spill
	ble	.LBB111_7
@ BB#6:                                 @   in Loop: Header=BB111_4 Depth=2
	movw	r0, #2
	ldr	r1, [sp, #100]
	ldr	r2, [sp, #84]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #2
	add	r1, r1, #88
	ldr	r2, [sp, #92]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	str	r1, [sp, #80]
	str	r0, [sp, #60]           @ 4-byte Spill
.LBB111_7:                              @   in Loop: Header=BB111_4 Depth=2
	b	.LBB111_8
.LBB111_8:                              @   in Loop: Header=BB111_4 Depth=2
	ldr	r0, [sp, #84]
	add	r0, r0, #1
	str	r0, [sp, #84]
	b	.LBB111_4
.LBB111_9:                              @   in Loop: Header=BB111_2 Depth=1
	movw	r0, #6
	str	r0, [sp, #84]
.LBB111_10:                             @   Parent Loop BB111_2 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #84]
	cmp	r0, #12
	bge	.LBB111_15
@ BB#11:                                @   in Loop: Header=BB111_10 Depth=2
	movw	r0, #2
	ldr	r1, [sp, #100]
	ldr	r2, [sp, #84]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #2
	add	r1, r1, #88
	ldr	r2, [sp, #92]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	ldr	r2, [sp, #76]
	cmp	r1, r2
	str	r0, [sp, #56]           @ 4-byte Spill
	ble	.LBB111_13
@ BB#12:                                @   in Loop: Header=BB111_10 Depth=2
	movw	r0, #2
	ldr	r1, [sp, #100]
	ldr	r2, [sp, #84]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #2
	add	r1, r1, #88
	ldr	r2, [sp, #92]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	str	r1, [sp, #76]
	str	r0, [sp, #52]           @ 4-byte Spill
.LBB111_13:                             @   in Loop: Header=BB111_10 Depth=2
	b	.LBB111_14
.LBB111_14:                             @   in Loop: Header=BB111_10 Depth=2
	ldr	r0, [sp, #84]
	add	r0, r0, #1
	str	r0, [sp, #84]
	b	.LBB111_10
.LBB111_15:                             @   in Loop: Header=BB111_2 Depth=1
	b	.LBB111_16
.LBB111_16:                             @   in Loop: Header=BB111_2 Depth=1
	ldr	r0, [sp, #92]
	add	r0, r0, #1
	str	r0, [sp, #92]
	b	.LBB111_2
.LBB111_17:
	b	.LBB111_45
.LBB111_18:
	movw	r0, #0
	movw	r1, :lower16:scale_bitcount.slen2_tab
	movt	r1, :upper16:scale_bitcount.slen2_tab
	str	r1, [sp, #68]
	str	r0, [sp, #84]
.LBB111_19:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #84]
	cmp	r0, #11
	bge	.LBB111_24
@ BB#20:                                @   in Loop: Header=BB111_19 Depth=1
	movw	r0, #2
	ldr	r1, [sp, #100]
	ldr	r2, [sp, #84]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	ldr	r2, [sp, #80]
	cmp	r1, r2
	str	r0, [sp, #48]           @ 4-byte Spill
	ble	.LBB111_22
@ BB#21:                                @   in Loop: Header=BB111_19 Depth=1
	movw	r0, #2
	ldr	r1, [sp, #100]
	ldr	r2, [sp, #84]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	str	r1, [sp, #80]
	str	r0, [sp, #44]           @ 4-byte Spill
.LBB111_22:                             @   in Loop: Header=BB111_19 Depth=1
	b	.LBB111_23
.LBB111_23:                             @   in Loop: Header=BB111_19 Depth=1
	ldr	r0, [sp, #84]
	add	r0, r0, #1
	str	r0, [sp, #84]
	b	.LBB111_19
.LBB111_24:
	ldr	r0, [sp, #96]
	ldr	r0, [r0, #64]
	cmp	r0, #0
	bne	.LBB111_38
@ BB#25:
	movw	r0, #11
	str	r0, [sp, #84]
.LBB111_26:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #84]
	cmp	r0, #21
	bge	.LBB111_31
@ BB#27:                                @   in Loop: Header=BB111_26 Depth=1
	movw	r0, :lower16:pretab
	movt	r0, :upper16:pretab
	movw	r1, #2
	ldr	r2, [sp, #100]
	ldr	r3, [sp, #84]
	ldr	r2, [r2, r3, lsl #2]
	movw	r12, :lower16:pretab
	movt	r12, :upper16:pretab
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	cmp	r2, r3
	str	r0, [sp, #40]           @ 4-byte Spill
	str	r1, [sp, #36]           @ 4-byte Spill
	bge	.LBB111_29
@ BB#28:
	b	.LBB111_31
.LBB111_29:                             @   in Loop: Header=BB111_26 Depth=1
	b	.LBB111_30
.LBB111_30:                             @   in Loop: Header=BB111_26 Depth=1
	ldr	r0, [sp, #84]
	add	r0, r0, #1
	str	r0, [sp, #84]
	b	.LBB111_26
.LBB111_31:
	ldr	r0, [sp, #84]
	cmp	r0, #21
	bne	.LBB111_37
@ BB#32:
	movw	r0, #11
	movw	r1, #1
	ldr	r2, [sp, #96]
	str	r1, [r2, #64]
	str	r0, [sp, #84]
.LBB111_33:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #84]
	cmp	r0, #21
	bge	.LBB111_36
@ BB#34:                                @   in Loop: Header=BB111_33 Depth=1
	movw	r0, #2
	ldr	r1, [sp, #84]
	movw	r2, :lower16:pretab
	movt	r2, :upper16:pretab
	ldr	r2, [r2, r1, lsl #2]
	ldr	r3, [sp, #100]
	add	r1, r3, r1, lsl #2
	ldr	r3, [r1]
	sub	r2, r3, r2
	str	r2, [r1]
	str	r0, [sp, #32]           @ 4-byte Spill
@ BB#35:                                @   in Loop: Header=BB111_33 Depth=1
	ldr	r0, [sp, #84]
	add	r0, r0, #1
	str	r0, [sp, #84]
	b	.LBB111_33
.LBB111_36:
	b	.LBB111_37
.LBB111_37:
	b	.LBB111_38
.LBB111_38:
	movw	r0, #11
	str	r0, [sp, #84]
.LBB111_39:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #84]
	cmp	r0, #21
	bge	.LBB111_44
@ BB#40:                                @   in Loop: Header=BB111_39 Depth=1
	movw	r0, #2
	ldr	r1, [sp, #100]
	ldr	r2, [sp, #84]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	ldr	r2, [sp, #76]
	cmp	r1, r2
	str	r0, [sp, #28]           @ 4-byte Spill
	ble	.LBB111_42
@ BB#41:                                @   in Loop: Header=BB111_39 Depth=1
	movw	r0, #2
	ldr	r1, [sp, #100]
	ldr	r2, [sp, #84]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	str	r1, [sp, #76]
	str	r0, [sp, #24]           @ 4-byte Spill
.LBB111_42:                             @   in Loop: Header=BB111_39 Depth=1
	b	.LBB111_43
.LBB111_43:                             @   in Loop: Header=BB111_39 Depth=1
	ldr	r0, [sp, #84]
	add	r0, r0, #1
	str	r0, [sp, #84]
	b	.LBB111_39
.LBB111_44:
	b	.LBB111_45
.LBB111_45:
	movw	r0, #0
	ldr	r1, .LCPI111_0
	ldr	r2, [sp, #96]
	str	r1, [r2, #76]
	str	r0, [sp, #88]
.LBB111_46:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #88]
	cmp	r0, #16
	bge	.LBB111_53
@ BB#47:                                @   in Loop: Header=BB111_46 Depth=1
	movw	r0, :lower16:scale_bitcount.slen1
	movt	r0, :upper16:scale_bitcount.slen1
	movw	r1, #2
	ldr	r2, [sp, #80]
	ldr	r3, [sp, #88]
	movw	r12, :lower16:scale_bitcount.slen1
	movt	r12, :upper16:scale_bitcount.slen1
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	cmp	r2, r3
	str	r0, [sp, #20]           @ 4-byte Spill
	str	r1, [sp, #16]           @ 4-byte Spill
	bge	.LBB111_51
@ BB#48:                                @   in Loop: Header=BB111_46 Depth=1
	movw	r0, :lower16:scale_bitcount.slen2
	movt	r0, :upper16:scale_bitcount.slen2
	movw	r1, #2
	ldr	r2, [sp, #76]
	ldr	r3, [sp, #88]
	movw	r12, :lower16:scale_bitcount.slen2
	movt	r12, :upper16:scale_bitcount.slen2
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	cmp	r2, r3
	str	r0, [sp, #12]           @ 4-byte Spill
	str	r1, [sp, #8]            @ 4-byte Spill
	bge	.LBB111_51
@ BB#49:                                @   in Loop: Header=BB111_46 Depth=1
	movw	r0, #2
	ldr	r1, [sp, #96]
	ldr	r1, [r1, #76]
	ldr	r2, [sp, #68]
	ldr	r3, [sp, #88]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2]
	cmp	r1, r2
	str	r0, [sp, #4]            @ 4-byte Spill
	ble	.LBB111_51
@ BB#50:                                @   in Loop: Header=BB111_46 Depth=1
	movw	r0, #0
	movw	r1, #2
	ldr	r2, [sp, #68]
	ldr	r3, [sp, #88]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2]
	ldr	r3, [sp, #96]
	str	r2, [r3, #76]
	ldr	r2, [sp, #88]
	ldr	r3, [sp, #96]
	str	r2, [r3, #16]
	str	r0, [sp, #72]
	str	r1, [sp]                @ 4-byte Spill
.LBB111_51:                             @   in Loop: Header=BB111_46 Depth=1
	b	.LBB111_52
.LBB111_52:                             @   in Loop: Header=BB111_46 Depth=1
	ldr	r0, [sp, #88]
	add	r0, r0, #1
	str	r0, [sp, #88]
	b	.LBB111_46
.LBB111_53:
	ldr	r0, [sp, #72]
	add	sp, sp, #104
	bx	lr
	.p2align	2
@ BB#54:
.LCPI111_0:
	.long	100000                  @ 0x186a0
.Lfunc_end111:
	.size	scale_bitcount, .Lfunc_end111-scale_bitcount
	.cantunwind
	.fnend

	.globl	scale_bitcount_lsf
	.p2align	2
	.type	scale_bitcount_lsf,%function
	.code	32                      @ @scale_bitcount_lsf
scale_bitcount_lsf:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #184
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	ldr	r0, [r11, #-8]
	ldr	r0, [r0, #64]
	cmp	r0, #0
	beq	.LBB112_2
@ BB#1:
	movw	r0, #2
	str	r0, [r11, #-12]
	b	.LBB112_3
.LBB112_2:
	movw	r0, #0
	str	r0, [r11, #-12]
.LBB112_3:
	movw	r0, #0
	str	r0, [r11, #-36]
.LBB112_4:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-36]
	cmp	r0, #4
	bge	.LBB112_7
@ BB#5:                                 @   in Loop: Header=BB112_4 Depth=1
	movw	r0, #0
	sub	r1, r11, #56
	movw	r2, #2
	ldr	r3, [r11, #-36]
	sub	r12, r11, #56
	add	r3, r12, r3, lsl #2
	str	r0, [r3]
	str	r2, [r11, #-80]         @ 4-byte Spill
	str	r1, [r11, #-84]         @ 4-byte Spill
@ BB#6:                                 @   in Loop: Header=BB112_4 Depth=1
	ldr	r0, [r11, #-36]
	add	r0, r0, #1
	str	r0, [r11, #-36]
	b	.LBB112_4
.LBB112_7:
	ldr	r0, [r11, #-8]
	ldr	r0, [r0, #24]
	cmp	r0, #2
	bne	.LBB112_23
@ BB#8:
	movw	r0, #0
	movw	r1, #4
	mov	r2, #1
	str	r2, [r11, #-16]
	ldr	r2, [r11, #-12]
	add	r2, r2, r2, lsl #1
	movw	r3, :lower16:nr_of_sfb_block
	movt	r3, :upper16:nr_of_sfb_block
	add	r2, r3, r2, lsl #4
	add	r2, r2, #16
	str	r2, [r11, #-60]
	str	r0, [r11, #-40]
	str	r0, [r11, #-20]
	str	r1, [r11, #-88]         @ 4-byte Spill
.LBB112_9:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB112_11 Depth 2
                                        @       Child Loop BB112_13 Depth 3
	ldr	r0, [r11, #-20]
	cmp	r0, #4
	bge	.LBB112_22
@ BB#10:                                @   in Loop: Header=BB112_9 Depth=1
	movw	r0, #0
	movw	r1, #3
	movw	r2, #2
	ldr	r3, [r11, #-60]
	ldr	r12, [r11, #-20]
	add	r3, r3, r12, lsl #2
	ldr	r3, [r3]
	str	r0, [sp, #92]           @ 4-byte Spill
	mov	r0, r3
	str	r2, [sp, #88]           @ 4-byte Spill
	bl	__udivsi3
	str	r0, [r11, #-24]
	ldr	r0, [sp, #92]           @ 4-byte Reload
	str	r0, [r11, #-36]
.LBB112_11:                             @   Parent Loop BB112_9 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB112_13 Depth 3
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-24]
	cmp	r0, r1
	bge	.LBB112_20
@ BB#12:                                @   in Loop: Header=BB112_11 Depth=2
	movw	r0, #0
	str	r0, [r11, #-28]
.LBB112_13:                             @   Parent Loop BB112_9 Depth=1
                                        @     Parent Loop BB112_11 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-28]
	cmp	r0, #3
	bge	.LBB112_18
@ BB#14:                                @   in Loop: Header=BB112_13 Depth=3
	sub	r0, r11, #56
	movw	r1, #2
	ldr	r2, [r11, #-4]
	ldr	r3, [r11, #-40]
	add	r3, r3, r3, lsl #1
	add	r2, r2, r3, lsl #2
	ldr	r3, [r11, #-28]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2, #88]
	ldr	r3, [r11, #-20]
	sub	r12, r11, #56
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	cmp	r2, r3
	str	r0, [sp, #84]           @ 4-byte Spill
	str	r1, [sp, #80]           @ 4-byte Spill
	ble	.LBB112_16
@ BB#15:                                @   in Loop: Header=BB112_13 Depth=3
	sub	r0, r11, #56
	movw	r1, #2
	ldr	r2, [r11, #-4]
	ldr	r3, [r11, #-40]
	add	r3, r3, r3, lsl #1
	add	r2, r2, r3, lsl #2
	ldr	r3, [r11, #-28]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2, #88]
	ldr	r3, [r11, #-20]
	sub	r12, r11, #56
	add	r3, r12, r3, lsl #2
	str	r2, [r3]
	str	r0, [sp, #76]           @ 4-byte Spill
	str	r1, [sp, #72]           @ 4-byte Spill
.LBB112_16:                             @   in Loop: Header=BB112_13 Depth=3
	b	.LBB112_17
.LBB112_17:                             @   in Loop: Header=BB112_13 Depth=3
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB112_13
.LBB112_18:                             @   in Loop: Header=BB112_11 Depth=2
	b	.LBB112_19
.LBB112_19:                             @   in Loop: Header=BB112_11 Depth=2
	ldr	r0, [r11, #-36]
	add	r0, r0, #1
	str	r0, [r11, #-36]
	ldr	r0, [r11, #-40]
	add	r0, r0, #1
	str	r0, [r11, #-40]
	b	.LBB112_11
.LBB112_20:                             @   in Loop: Header=BB112_9 Depth=1
	b	.LBB112_21
.LBB112_21:                             @   in Loop: Header=BB112_9 Depth=1
	ldr	r0, [r11, #-20]
	add	r0, r0, #1
	str	r0, [r11, #-20]
	b	.LBB112_9
.LBB112_22:
	b	.LBB112_34
.LBB112_23:
	movw	r0, #0
	movw	r1, #4
	mov	r2, #0
	str	r2, [r11, #-16]
	ldr	r2, [r11, #-12]
	add	r2, r2, r2, lsl #1
	movw	r3, :lower16:nr_of_sfb_block
	movt	r3, :upper16:nr_of_sfb_block
	add	r2, r3, r2, lsl #4
	mov	r3, r2
	str	r2, [r11, #-60]
	str	r0, [r11, #-40]
	str	r0, [r11, #-20]
	str	r3, [sp, #68]           @ 4-byte Spill
	str	r1, [sp, #64]           @ 4-byte Spill
.LBB112_24:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB112_26 Depth 2
	ldr	r0, [r11, #-20]
	cmp	r0, #4
	bge	.LBB112_33
@ BB#25:                                @   in Loop: Header=BB112_24 Depth=1
	movw	r0, #0
	movw	r1, #2
	ldr	r2, [r11, #-60]
	ldr	r3, [r11, #-20]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2]
	str	r2, [r11, #-24]
	str	r0, [r11, #-36]
	str	r1, [sp, #60]           @ 4-byte Spill
.LBB112_26:                             @   Parent Loop BB112_24 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-24]
	cmp	r0, r1
	bge	.LBB112_31
@ BB#27:                                @   in Loop: Header=BB112_26 Depth=2
	sub	r0, r11, #56
	movw	r1, #2
	ldr	r2, [r11, #-4]
	ldr	r3, [r11, #-40]
	ldr	r2, [r2, r3, lsl #2]
	ldr	r3, [r11, #-20]
	sub	r12, r11, #56
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	cmp	r2, r3
	str	r0, [sp, #56]           @ 4-byte Spill
	str	r1, [sp, #52]           @ 4-byte Spill
	ble	.LBB112_29
@ BB#28:                                @   in Loop: Header=BB112_26 Depth=2
	sub	r0, r11, #56
	movw	r1, #2
	ldr	r2, [r11, #-4]
	ldr	r3, [r11, #-40]
	ldr	r2, [r2, r3, lsl #2]
	ldr	r3, [r11, #-20]
	sub	r12, r11, #56
	add	r3, r12, r3, lsl #2
	str	r2, [r3]
	str	r0, [sp, #48]           @ 4-byte Spill
	str	r1, [sp, #44]           @ 4-byte Spill
.LBB112_29:                             @   in Loop: Header=BB112_26 Depth=2
	b	.LBB112_30
.LBB112_30:                             @   in Loop: Header=BB112_26 Depth=2
	ldr	r0, [r11, #-36]
	add	r0, r0, #1
	str	r0, [r11, #-36]
	ldr	r0, [r11, #-40]
	add	r0, r0, #1
	str	r0, [r11, #-40]
	b	.LBB112_26
.LBB112_31:                             @   in Loop: Header=BB112_24 Depth=1
	b	.LBB112_32
.LBB112_32:                             @   in Loop: Header=BB112_24 Depth=1
	ldr	r0, [r11, #-20]
	add	r0, r0, #1
	str	r0, [r11, #-20]
	b	.LBB112_24
.LBB112_33:
	b	.LBB112_34
.LBB112_34:
	movw	r0, #0
	str	r0, [r11, #-32]
	str	r0, [r11, #-20]
.LBB112_35:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-20]
	cmp	r0, #4
	bge	.LBB112_40
@ BB#36:                                @   in Loop: Header=BB112_35 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-20]
	sub	r2, r11, #56
	ldr	r2, [r2, r1, lsl #2]
	ldr	r3, [r11, #-12]
	movw	r12, :lower16:max_range_sfac_tab
	movt	r12, :upper16:max_range_sfac_tab
	add	r3, r12, r3, lsl #4
	add	r1, r3, r1, lsl #2
	ldr	r1, [r1]
	cmp	r2, r1
	str	r0, [sp, #40]           @ 4-byte Spill
	ble	.LBB112_38
@ BB#37:                                @   in Loop: Header=BB112_35 Depth=1
	ldr	r0, [r11, #-32]
	add	r0, r0, #1
	str	r0, [r11, #-32]
.LBB112_38:                             @   in Loop: Header=BB112_35 Depth=1
	b	.LBB112_39
.LBB112_39:                             @   in Loop: Header=BB112_35 Depth=1
	ldr	r0, [r11, #-20]
	add	r0, r0, #1
	str	r0, [r11, #-20]
	b	.LBB112_35
.LBB112_40:
	ldr	r0, [r11, #-32]
	cmp	r0, #0
	bne	.LBB112_53
@ BB#41:
	movw	r0, #0
	movw	r1, #4
	ldr	r2, [r11, #-12]
	add	r2, r2, r2, lsl #1
	movw	r3, :lower16:nr_of_sfb_block
	movt	r3, :upper16:nr_of_sfb_block
	add	r2, r3, r2, lsl #4
	ldr	r3, [r11, #-16]
	add	r2, r2, r3, lsl #4
	ldr	r3, [r11, #-8]
	str	r2, [r3, #92]
	str	r0, [r11, #-20]
	str	r1, [sp, #36]           @ 4-byte Spill
.LBB112_42:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-20]
	cmp	r0, #4
	bge	.LBB112_45
@ BB#43:                                @   in Loop: Header=BB112_42 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-20]
	sub	r2, r11, #56
	ldr	r2, [r2, r1, lsl #2]
	movw	r3, :lower16:scale_bitcount_lsf.log2tab
	movt	r3, :upper16:scale_bitcount_lsf.log2tab
	ldr	r2, [r3, r2, lsl #2]
	ldr	r3, [r11, #-8]
	add	r3, r3, #96
	add	r1, r3, r1, lsl #2
	str	r2, [r1]
	str	r0, [sp, #32]           @ 4-byte Spill
@ BB#44:                                @   in Loop: Header=BB112_42 Depth=1
	ldr	r0, [r11, #-20]
	add	r0, r0, #1
	str	r0, [r11, #-20]
	b	.LBB112_42
.LBB112_45:
	ldr	r0, [r11, #-8]
	ldr	r0, [r0, #96]
	str	r0, [r11, #-64]
	ldr	r0, [r11, #-8]
	ldr	r0, [r0, #100]
	str	r0, [r11, #-68]
	ldr	r0, [r11, #-8]
	ldr	r0, [r0, #104]
	str	r0, [r11, #-72]
	ldr	r0, [r11, #-8]
	ldr	r0, [r0, #108]
	str	r0, [r11, #-76]
	ldr	r0, [r11, #-12]
	cmp	r0, #0
	str	r0, [sp, #28]           @ 4-byte Spill
	beq	.LBB112_48
	b	.LBB112_46
.LBB112_46:
	ldr	r0, [sp, #28]           @ 4-byte Reload
	cmp	r0, #1
	beq	.LBB112_49
	b	.LBB112_47
.LBB112_47:
	ldr	r0, [sp, #28]           @ 4-byte Reload
	cmp	r0, #2
	beq	.LBB112_50
	b	.LBB112_51
.LBB112_48:
	movw	r0, #2
	movw	r1, #4
	movw	r2, #5
	ldr	r3, [r11, #-64]
	mul	r2, r3, r2
	ldr	r3, [r11, #-68]
	add	r2, r2, r3
	lsl	r2, r2, #4
	ldr	r3, [r11, #-72]
	lsl	r3, r3, #2
	add	r2, r2, r3
	ldr	r3, [r11, #-76]
	add	r2, r2, r3
	ldr	r3, [r11, #-8]
	str	r2, [r3, #16]
	str	r0, [sp, #24]           @ 4-byte Spill
	str	r1, [sp, #20]           @ 4-byte Spill
	b	.LBB112_52
.LBB112_49:
	movw	r0, #2
	movw	r1, #5
	ldr	r2, [r11, #-64]
	mul	r1, r2, r1
	ldr	r2, [r11, #-68]
	add	r1, r1, r2
	lsl	r1, r1, #2
	add	r1, r1, #400
	ldr	r2, [r11, #-72]
	add	r1, r1, r2
	ldr	r2, [r11, #-8]
	str	r1, [r2, #16]
	str	r0, [sp, #16]           @ 4-byte Spill
	b	.LBB112_52
.LBB112_50:
	movw	r0, #3
	ldr	r1, [r11, #-64]
	mul	r0, r1, r0
	add	r0, r0, #500
	ldr	r1, [r11, #-68]
	add	r0, r0, r1
	ldr	r1, [r11, #-8]
	str	r0, [r1, #16]
	b	.LBB112_52
.LBB112_51:
	movw	r1, :lower16:.L.str.2.260
	movt	r1, :upper16:.L.str.2.260
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	movw	r1, #1
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB112_52:
	b	.LBB112_53
.LBB112_53:
	ldr	r0, [r11, #-32]
	cmp	r0, #0
	bne	.LBB112_61
@ BB#54:
	movw	r0, #1
	movw	r1, #0
	ldr	r2, [r11, #-8]
	ldr	r2, [r2, #92]
	cmp	r2, r1
	str	r0, [sp, #8]            @ 4-byte Spill
	bne	.LBB112_56
@ BB#55:
	movw	r0, :lower16:.L.str.3.261
	movt	r0, :upper16:.L.str.3.261
	movw	r1, :lower16:.L.str.1.255
	movt	r1, :upper16:.L.str.1.255
	movw	r2, #665
	movw	r3, :lower16:.L__func__.scale_bitcount_lsf
	movt	r3, :upper16:.L__func__.scale_bitcount_lsf
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #8]            @ 4-byte Spill
.LBB112_56:
	ldr	r0, [sp, #8]            @ 4-byte Reload
	movw	r1, #0
	ldr	r2, [r11, #-8]
	str	r1, [r2, #76]
	str	r1, [r11, #-20]
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB112_57:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-20]
	cmp	r0, #4
	bge	.LBB112_60
@ BB#58:                                @   in Loop: Header=BB112_57 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-8]
	ldr	r2, [r11, #-20]
	add	r3, r1, r2, lsl #2
	ldr	r3, [r3, #96]
	ldr	r1, [r1, #92]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	mul	r1, r3, r1
	ldr	r2, [r11, #-8]
	ldr	r3, [r2, #76]
	add	r1, r3, r1
	str	r1, [r2, #76]
	str	r0, [sp]                @ 4-byte Spill
@ BB#59:                                @   in Loop: Header=BB112_57 Depth=1
	ldr	r0, [r11, #-20]
	add	r0, r0, #1
	str	r0, [r11, #-20]
	b	.LBB112_57
.LBB112_60:
	b	.LBB112_61
.LBB112_61:
	ldr	r0, [r11, #-32]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end112:
	.size	scale_bitcount_lsf, .Lfunc_end112-scale_bitcount_lsf
	.cantunwind
	.fnend

	.globl	calc_xmin
	.p2align	3
	.type	calc_xmin,%function
	.code	32                      @ @calc_xmin
calc_xmin:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #192
	ldr	r12, [r11, #8]
	movw	lr, #0
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [r11, #-12]
	str	r3, [r11, #-16]
	str	r12, [r11, #-20]
	str	lr, [r11, #-44]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #132]
	cmp	r0, #0
	beq	.LBB113_14
@ BB#1:
	ldr	r0, [r11, #-16]
	ldr	r0, [r0, #84]
	str	r0, [r11, #-48]
.LBB113_2:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB113_4 Depth 2
	ldr	r0, [r11, #-48]
	cmp	r0, #12
	bhs	.LBB113_9
@ BB#3:                                 @   in Loop: Header=BB113_2 Depth=1
	movw	r0, #0
	str	r0, [r11, #-40]
.LBB113_4:                              @   Parent Loop BB113_2 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-40]
	cmp	r0, #3
	bge	.LBB113_7
@ BB#5:                                 @   in Loop: Header=BB113_4 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-48]
	movw	r2, :lower16:ATH_s
	movt	r2, :upper16:ATH_s
	add	r2, r2, r1, lsl #3
	vldr	d16, [r2]
	ldr	r2, [r11, #-20]
	add	r1, r1, r1, lsl #1
	add	r1, r2, r1, lsl #3
	add	r1, r1, #176
	ldr	r2, [r11, #-40]
	add	r1, r1, r2, lsl #3
	vstr	d16, [r1]
	str	r0, [r11, #-76]         @ 4-byte Spill
@ BB#6:                                 @   in Loop: Header=BB113_4 Depth=2
	ldr	r0, [r11, #-40]
	add	r0, r0, #1
	str	r0, [r11, #-40]
	b	.LBB113_4
.LBB113_7:                              @   in Loop: Header=BB113_2 Depth=1
	b	.LBB113_8
.LBB113_8:                              @   in Loop: Header=BB113_2 Depth=1
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB113_2
.LBB113_9:
	movw	r0, #0
	str	r0, [r11, #-48]
.LBB113_10:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-48]
	ldr	r1, [r11, #-16]
	ldr	r1, [r1, #80]
	cmp	r0, r1
	bhs	.LBB113_13
@ BB#11:                                @   in Loop: Header=BB113_10 Depth=1
	movw	r0, #3
	ldr	r1, [r11, #-48]
	movw	r2, :lower16:ATH_l
	movt	r2, :upper16:ATH_l
	add	r2, r2, r1, lsl #3
	vldr	d16, [r2]
	ldr	r2, [r11, #-20]
	add	r1, r2, r1, lsl #3
	vstr	d16, [r1]
	str	r0, [r11, #-80]         @ 4-byte Spill
@ BB#12:                                @   in Loop: Header=BB113_10 Depth=1
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB113_10
.LBB113_13:
	b	.LBB113_50
.LBB113_14:
	ldr	r0, [r11, #-16]
	ldr	r0, [r0, #84]
	str	r0, [r11, #-48]
.LBB113_15:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB113_17 Depth 2
                                        @       Child Loop BB113_19 Depth 3
	ldr	r0, [r11, #-48]
	cmp	r0, #12
	bhs	.LBB113_33
@ BB#16:                                @   in Loop: Header=BB113_15 Depth=1
	movw	r0, #0
	movw	r1, :lower16:scalefac_band
	movt	r1, :upper16:scalefac_band
	add	r1, r1, #92
	movw	r2, #2
	ldr	r3, [r11, #-48]
	movw	r12, :lower16:scalefac_band
	movt	r12, :upper16:scalefac_band
	add	r12, r12, #92
	ldr	r3, [r12, r3, lsl #2]
	str	r3, [r11, #-24]
	ldr	r3, [r11, #-48]
	add	r3, r3, #1
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	str	r3, [r11, #-28]
	ldr	r3, [r11, #-28]
	ldr	r12, [r11, #-24]
	sub	r3, r3, r12
	str	r3, [r11, #-32]
	str	r0, [r11, #-40]
	str	r2, [r11, #-84]         @ 4-byte Spill
	str	r1, [r11, #-88]         @ 4-byte Spill
.LBB113_17:                             @   Parent Loop BB113_15 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB113_19 Depth 3
	ldr	r0, [r11, #-40]
	cmp	r0, #3
	bge	.LBB113_31
@ BB#18:                                @   in Loop: Header=BB113_17 Depth=2
	vldr	d16, .LCPI113_1
	vstr	d16, [r11, #-56]
	ldr	r0, [r11, #-24]
	str	r0, [r11, #-36]
.LBB113_19:                             @   Parent Loop BB113_15 Depth=1
                                        @     Parent Loop BB113_17 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-28]
	cmp	r0, r1
	bge	.LBB113_22
@ BB#20:                                @   in Loop: Header=BB113_19 Depth=3
	movw	r0, #3
	ldr	r1, [r11, #-8]
	ldr	r2, [r11, #-36]
	add	r2, r2, r2, lsl #1
	ldr	r3, [r11, #-40]
	add	r2, r2, r3
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vstr	d16, [r11, #-72]
	vldr	d16, [r11, #-72]
	vldr	d17, [r11, #-72]
	vmul.f64	d16, d16, d17
	vstr	d16, [r11, #-72]
	vldr	d16, [r11, #-72]
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	str	r0, [r11, #-92]         @ 4-byte Spill
@ BB#21:                                @   in Loop: Header=BB113_19 Depth=3
	ldr	r0, [r11, #-36]
	add	r0, r0, #1
	str	r0, [r11, #-36]
	b	.LBB113_19
.LBB113_22:                             @   in Loop: Header=BB113_17 Depth=2
	movw	r0, #3
	vldr	s0, [r11, #-32]
	vcvt.f64.s32	d16, s0
	vldr	d17, [r11, #-56]
	vdiv.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [r11, #-12]
	ldr	r2, [r11, #-48]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #3
	add	r1, r1, #664
	ldr	r2, [r11, #-40]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vstr	d16, [r11, #-64]
	vldr	d16, [r11, #-64]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #96]           @ 4-byte Spill
	ble	.LBB113_24
@ BB#23:                                @   in Loop: Header=BB113_17 Depth=2
	movw	r0, :lower16:masking_lower
	movt	r0, :upper16:masking_lower
	movw	r1, #3
	vldr	d16, [r11, #-56]
	ldr	r2, [r11, #-12]
	ldr	r3, [r11, #-48]
	add	r3, r3, r3, lsl #1
	add	r2, r2, r3, lsl #3
	add	r2, r2, #176
	ldr	r3, [r11, #-40]
	add	r2, r2, r3, lsl #3
	vldr	d17, [r2]
	vmul.f64	d16, d16, d17
	vldr	s0, [r0]
	vcvt.f64.f32	d17, s0
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vdiv.f64	d16, d16, d17
	vstr	d16, [r11, #-64]
	str	r1, [sp, #92]           @ 4-byte Spill
.LBB113_24:                             @   in Loop: Header=BB113_17 Depth=2
	movw	r0, :lower16:ATH_s
	movt	r0, :upper16:ATH_s
	movw	r1, #3
	ldr	r2, [r11, #-48]
	movw	r3, :lower16:ATH_s
	movt	r3, :upper16:ATH_s
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [r11, #-64]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #88]           @ 4-byte Spill
	str	r1, [sp, #84]           @ 4-byte Spill
	ble	.LBB113_26
@ BB#25:                                @   in Loop: Header=BB113_17 Depth=2
	movw	r0, :lower16:ATH_s
	movt	r0, :upper16:ATH_s
	movw	r1, #3
	ldr	r2, [r11, #-48]
	movw	r3, :lower16:ATH_s
	movt	r3, :upper16:ATH_s
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	str	r0, [sp, #80]           @ 4-byte Spill
	str	r1, [sp, #76]           @ 4-byte Spill
	vstr	d16, [sp, #64]          @ 8-byte Spill
	b	.LBB113_27
.LBB113_26:                             @   in Loop: Header=BB113_17 Depth=2
	vldr	d16, [r11, #-64]
	vstr	d16, [sp, #64]          @ 8-byte Spill
.LBB113_27:                             @   in Loop: Header=BB113_17 Depth=2
	vldr	d16, [sp, #64]          @ 8-byte Reload
	movw	r0, :lower16:ATH_s
	movt	r0, :upper16:ATH_s
	movw	r1, #3
	ldr	r2, [r11, #-20]
	ldr	r3, [r11, #-48]
	add	r3, r3, r3, lsl #1
	add	r2, r2, r3, lsl #3
	ldr	r3, [r11, #-40]
	add	r2, r2, r3, lsl #3
	vstr	d16, [r2, #176]
	vldr	d16, [r11, #-56]
	ldr	r2, [r11, #-48]
	movw	r3, :lower16:ATH_s
	movt	r3, :upper16:ATH_s
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r1, [sp, #60]           @ 4-byte Spill
	str	r0, [sp, #56]           @ 4-byte Spill
	ble	.LBB113_29
@ BB#28:                                @   in Loop: Header=BB113_17 Depth=2
	ldr	r0, [r11, #-44]
	add	r0, r0, #1
	str	r0, [r11, #-44]
.LBB113_29:                             @   in Loop: Header=BB113_17 Depth=2
	b	.LBB113_30
.LBB113_30:                             @   in Loop: Header=BB113_17 Depth=2
	ldr	r0, [r11, #-40]
	add	r0, r0, #1
	str	r0, [r11, #-40]
	b	.LBB113_17
.LBB113_31:                             @   in Loop: Header=BB113_15 Depth=1
	b	.LBB113_32
.LBB113_32:                             @   in Loop: Header=BB113_15 Depth=1
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB113_15
.LBB113_33:
	movw	r0, #0
	str	r0, [r11, #-48]
.LBB113_34:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB113_36 Depth 2
	ldr	r0, [r11, #-48]
	ldr	r1, [r11, #-16]
	ldr	r1, [r1, #80]
	cmp	r0, r1
	bhs	.LBB113_49
@ BB#35:                                @   in Loop: Header=BB113_34 Depth=1
	vldr	d16, .LCPI113_0
	movw	r0, :lower16:scalefac_band
	movt	r0, :upper16:scalefac_band
	movw	r1, #2
	ldr	r2, [r11, #-48]
	movw	r3, :lower16:scalefac_band
	movt	r3, :upper16:scalefac_band
	ldr	r2, [r3, r2, lsl #2]
	str	r2, [r11, #-24]
	ldr	r2, [r11, #-48]
	add	r2, r2, #1
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	str	r2, [r11, #-28]
	ldr	r2, [r11, #-28]
	ldr	r3, [r11, #-24]
	sub	r2, r2, r3
	str	r2, [r11, #-32]
	vstr	d16, [r11, #-56]
	ldr	r2, [r11, #-24]
	str	r2, [r11, #-36]
	str	r1, [sp, #52]           @ 4-byte Spill
	str	r0, [sp, #48]           @ 4-byte Spill
.LBB113_36:                             @   Parent Loop BB113_34 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-28]
	cmp	r0, r1
	bge	.LBB113_39
@ BB#37:                                @   in Loop: Header=BB113_36 Depth=2
	movw	r0, #3
	ldr	r1, [r11, #-8]
	ldr	r2, [r11, #-36]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vldr	d17, [r1]
	vmul.f64	d16, d16, d17
	vstr	d16, [r11, #-72]
	vldr	d16, [r11, #-72]
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	str	r0, [sp, #44]           @ 4-byte Spill
@ BB#38:                                @   in Loop: Header=BB113_36 Depth=2
	ldr	r0, [r11, #-36]
	add	r0, r0, #1
	str	r0, [r11, #-36]
	b	.LBB113_36
.LBB113_39:                             @   in Loop: Header=BB113_34 Depth=1
	movw	r0, #3
	vldr	s0, [r11, #-32]
	vcvt.f64.s32	d16, s0
	vldr	d17, [r11, #-56]
	vdiv.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	ldr	r1, [r11, #-12]
	add	r1, r1, #488
	ldr	r2, [r11, #-48]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vstr	d16, [r11, #-64]
	vldr	d16, [r11, #-64]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #40]           @ 4-byte Spill
	ble	.LBB113_41
@ BB#40:                                @   in Loop: Header=BB113_34 Depth=1
	movw	r0, :lower16:masking_lower
	movt	r0, :upper16:masking_lower
	movw	r1, #3
	vldr	d16, [r11, #-56]
	ldr	r2, [r11, #-12]
	ldr	r3, [r11, #-48]
	add	r2, r2, r3, lsl #3
	vldr	d17, [r2]
	vmul.f64	d16, d16, d17
	vldr	s0, [r0]
	vcvt.f64.f32	d17, s0
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-64]
	vdiv.f64	d16, d16, d17
	vstr	d16, [r11, #-64]
	str	r1, [sp, #36]           @ 4-byte Spill
.LBB113_41:                             @   in Loop: Header=BB113_34 Depth=1
	movw	r0, :lower16:ATH_l
	movt	r0, :upper16:ATH_l
	movw	r1, #3
	ldr	r2, [r11, #-48]
	movw	r3, :lower16:ATH_l
	movt	r3, :upper16:ATH_l
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [r11, #-64]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #32]           @ 4-byte Spill
	str	r1, [sp, #28]           @ 4-byte Spill
	ble	.LBB113_44
@ BB#42:                                @   in Loop: Header=BB113_34 Depth=1
	movw	r0, :lower16:ATH_l
	movt	r0, :upper16:ATH_l
	movw	r1, #3
	ldr	r2, [r11, #-48]
	movw	r3, :lower16:ATH_l
	movt	r3, :upper16:ATH_l
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	str	r0, [sp, #24]           @ 4-byte Spill
	str	r1, [sp, #20]           @ 4-byte Spill
	vstr	d16, [sp, #8]           @ 8-byte Spill
	b	.LBB113_45
	.p2align	3
@ BB#43:
.LCPI113_1:
	.long	0                       @ double 0
	.long	0
.LBB113_44:                             @   in Loop: Header=BB113_34 Depth=1
	vldr	d16, [r11, #-64]
	vstr	d16, [sp, #8]           @ 8-byte Spill
.LBB113_45:                             @   in Loop: Header=BB113_34 Depth=1
	vldr	d16, [sp, #8]           @ 8-byte Reload
	movw	r0, :lower16:ATH_l
	movt	r0, :upper16:ATH_l
	movw	r1, #3
	ldr	r2, [r11, #-20]
	ldr	r3, [r11, #-48]
	add	r2, r2, r3, lsl #3
	vstr	d16, [r2]
	vldr	d16, [r11, #-56]
	ldr	r2, [r11, #-48]
	movw	r3, :lower16:ATH_l
	movt	r3, :upper16:ATH_l
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r1, [sp, #4]            @ 4-byte Spill
	str	r0, [sp]                @ 4-byte Spill
	ble	.LBB113_47
@ BB#46:                                @   in Loop: Header=BB113_34 Depth=1
	ldr	r0, [r11, #-44]
	add	r0, r0, #1
	str	r0, [r11, #-44]
.LBB113_47:                             @   in Loop: Header=BB113_34 Depth=1
	b	.LBB113_48
.LBB113_48:                             @   in Loop: Header=BB113_34 Depth=1
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB113_34
.LBB113_49:
	b	.LBB113_50
.LBB113_50:
	ldr	r0, [r11, #-44]
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#51:
.LCPI113_0:
	.long	0                       @ double 0
	.long	0
.Lfunc_end113:
	.size	calc_xmin, .Lfunc_end113-calc_xmin
	.cantunwind
	.fnend

	.globl	loop_break
	.p2align	2
	.type	loop_break,%function
	.code	32                      @ @loop_break
loop_break:
	.fnstart
@ BB#0:
	sub	sp, sp, #28
	movw	r2, #0
	str	r0, [sp, #20]
	str	r1, [sp, #16]
	str	r2, [sp, #8]
.LBB114_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #8]
	ldr	r1, [sp, #16]
	ldr	r1, [r1, #80]
	cmp	r0, r1
	bhs	.LBB114_6
@ BB#2:                                 @   in Loop: Header=BB114_1 Depth=1
	movw	r0, #2
	ldr	r1, [sp, #20]
	ldr	r2, [sp, #8]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	cmp	r1, #0
	str	r0, [sp, #4]            @ 4-byte Spill
	bne	.LBB114_4
@ BB#3:
	movw	r0, #0
	str	r0, [sp, #24]
	b	.LBB114_17
.LBB114_4:                              @   in Loop: Header=BB114_1 Depth=1
	b	.LBB114_5
.LBB114_5:                              @   in Loop: Header=BB114_1 Depth=1
	ldr	r0, [sp, #8]
	add	r0, r0, #1
	str	r0, [sp, #8]
	b	.LBB114_1
.LBB114_6:
	ldr	r0, [sp, #16]
	ldr	r0, [r0, #84]
	str	r0, [sp, #8]
.LBB114_7:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB114_9 Depth 2
	ldr	r0, [sp, #8]
	cmp	r0, #12
	bhs	.LBB114_16
@ BB#8:                                 @   in Loop: Header=BB114_7 Depth=1
	movw	r0, #0
	str	r0, [sp, #12]
.LBB114_9:                              @   Parent Loop BB114_7 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #12]
	cmp	r0, #3
	bge	.LBB114_14
@ BB#10:                                @   in Loop: Header=BB114_9 Depth=2
	movw	r0, #2
	ldr	r1, [sp, #20]
	ldr	r2, [sp, #8]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #2
	add	r1, r1, #88
	ldr	r2, [sp, #12]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	cmp	r1, #0
	str	r0, [sp]                @ 4-byte Spill
	bne	.LBB114_12
@ BB#11:
	movw	r0, #0
	str	r0, [sp, #24]
	b	.LBB114_17
.LBB114_12:                             @   in Loop: Header=BB114_9 Depth=2
	b	.LBB114_13
.LBB114_13:                             @   in Loop: Header=BB114_9 Depth=2
	ldr	r0, [sp, #12]
	add	r0, r0, #1
	str	r0, [sp, #12]
	b	.LBB114_9
.LBB114_14:                             @   in Loop: Header=BB114_7 Depth=1
	b	.LBB114_15
.LBB114_15:                             @   in Loop: Header=BB114_7 Depth=1
	ldr	r0, [sp, #8]
	add	r0, r0, #1
	str	r0, [sp, #8]
	b	.LBB114_7
.LBB114_16:
	movw	r0, #1
	str	r0, [sp, #24]
.LBB114_17:
	ldr	r0, [sp, #24]
	add	sp, sp, #28
	bx	lr
.Lfunc_end114:
	.size	loop_break, .Lfunc_end114-loop_break
	.cantunwind
	.fnend

	.globl	bin_search_StepSize2
	.p2align	2
	.type	bin_search_StepSize2,%function
	.code	32                      @ @bin_search_StepSize2
bin_search_StepSize2:
	.fnstart
@ BB#0:
	push	{r4, r10, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #56
	ldr	r12, [r11, #12]
	ldr	lr, [r11, #8]
	movw	r4, #0
	str	r0, [r11, #-12]
	str	r1, [r11, #-16]
	str	r2, [r11, #-20]
	str	r3, [r11, #-24]
	str	lr, [r11, #-28]
	str	r12, [sp, #32]
	str	r4, [sp, #24]
	ldr	r0, [r11, #-20]
	str	r0, [sp, #20]
	str	r4, [sp, #16]
.LBB115_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #20]
	ldr	r1, [sp, #32]
	str	r0, [r1, #12]
	ldr	r0, [r11, #-12]
	ldr	r1, [r11, #-24]
	ldr	r2, [r11, #-28]
	ldr	r3, [sp, #32]
	bl	count_bits
	movw	r1, :lower16:bin_search_StepSize2.CurrentStep
	movt	r1, :upper16:bin_search_StepSize2.CurrentStep
	str	r0, [sp, #28]
	ldr	r0, [r1]
	cmp	r0, #1
	bne	.LBB115_3
@ BB#2:
	b	.LBB115_23
.LBB115_3:                              @   in Loop: Header=BB115_1 Depth=1
	ldr	r0, [sp, #24]
	cmp	r0, #0
	beq	.LBB115_5
@ BB#4:                                 @   in Loop: Header=BB115_1 Depth=1
	movw	r0, :lower16:bin_search_StepSize2.CurrentStep
	movt	r0, :upper16:bin_search_StepSize2.CurrentStep
	movw	r1, #2
	ldr	r2, [r0]
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r2
	bl	__divsi3
	ldr	r1, [sp, #12]           @ 4-byte Reload
	str	r0, [r1]
.LBB115_5:                              @   in Loop: Header=BB115_1 Depth=1
	ldr	r0, [sp, #28]
	ldr	r1, [r11, #-16]
	cmp	r0, r1
	ble	.LBB115_12
@ BB#6:                                 @   in Loop: Header=BB115_1 Depth=1
	ldr	r0, [sp, #16]
	cmp	r0, #2
	bne	.LBB115_9
@ BB#7:                                 @   in Loop: Header=BB115_1 Depth=1
	ldr	r0, [sp, #24]
	cmp	r0, #0
	bne	.LBB115_9
@ BB#8:                                 @   in Loop: Header=BB115_1 Depth=1
	movw	r0, :lower16:bin_search_StepSize2.CurrentStep
	movt	r0, :upper16:bin_search_StepSize2.CurrentStep
	movw	r1, #2
	movw	r2, #1
	str	r2, [sp, #24]
	ldr	r2, [r0]
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r2
	bl	__divsi3
	ldr	r1, [sp, #8]            @ 4-byte Reload
	str	r0, [r1]
.LBB115_9:                              @   in Loop: Header=BB115_1 Depth=1
	movw	r0, :lower16:bin_search_StepSize2.CurrentStep
	movt	r0, :upper16:bin_search_StepSize2.CurrentStep
	movw	r1, #1
	str	r1, [sp, #16]
	ldr	r0, [r0]
	ldr	r1, [sp, #20]
	add	r0, r1, r0
	str	r0, [sp, #20]
	ldr	r0, [sp, #20]
	cmp	r0, #255
	ble	.LBB115_11
@ BB#10:
	b	.LBB115_23
.LBB115_11:                             @   in Loop: Header=BB115_1 Depth=1
	b	.LBB115_21
.LBB115_12:                             @   in Loop: Header=BB115_1 Depth=1
	ldr	r0, [sp, #28]
	ldr	r1, [r11, #-16]
	cmp	r0, r1
	bge	.LBB115_19
@ BB#13:                                @   in Loop: Header=BB115_1 Depth=1
	ldr	r0, [sp, #16]
	cmp	r0, #1
	bne	.LBB115_16
@ BB#14:                                @   in Loop: Header=BB115_1 Depth=1
	ldr	r0, [sp, #24]
	cmp	r0, #0
	bne	.LBB115_16
@ BB#15:                                @   in Loop: Header=BB115_1 Depth=1
	movw	r0, :lower16:bin_search_StepSize2.CurrentStep
	movt	r0, :upper16:bin_search_StepSize2.CurrentStep
	movw	r1, #2
	movw	r2, #1
	str	r2, [sp, #24]
	ldr	r2, [r0]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r2
	bl	__divsi3
	ldr	r1, [sp, #4]            @ 4-byte Reload
	str	r0, [r1]
.LBB115_16:                             @   in Loop: Header=BB115_1 Depth=1
	movw	r0, :lower16:bin_search_StepSize2.CurrentStep
	movt	r0, :upper16:bin_search_StepSize2.CurrentStep
	movw	r1, #2
	str	r1, [sp, #16]
	ldr	r0, [r0]
	ldr	r1, [sp, #20]
	sub	r0, r1, r0
	str	r0, [sp, #20]
	ldr	r0, [sp, #20]
	cmp	r0, #0
	bge	.LBB115_18
@ BB#17:
	b	.LBB115_23
.LBB115_18:                             @   in Loop: Header=BB115_1 Depth=1
	b	.LBB115_20
.LBB115_19:
	b	.LBB115_23
.LBB115_20:                             @   in Loop: Header=BB115_1 Depth=1
	b	.LBB115_21
.LBB115_21:                             @   in Loop: Header=BB115_1 Depth=1
	b	.LBB115_22
.LBB115_22:                             @   in Loop: Header=BB115_1 Depth=1
	b	.LBB115_1
.LBB115_23:
	ldr	r0, [r11, #-20]
	ldr	r1, [sp, #20]
	sub	r0, r0, r1
	bl	abs
	movw	r1, :lower16:bin_search_StepSize2.CurrentStep
	movt	r1, :upper16:bin_search_StepSize2.CurrentStep
	str	r0, [r1]
	ldr	r0, [r1]
	cmp	r0, #4
	blt	.LBB115_25
@ BB#24:
	movw	r0, #4
	movw	r1, :lower16:bin_search_StepSize2.CurrentStep
	movt	r1, :upper16:bin_search_StepSize2.CurrentStep
	str	r0, [r1]
	b	.LBB115_26
.LBB115_25:
	movw	r0, #2
	movw	r1, :lower16:bin_search_StepSize2.CurrentStep
	movt	r1, :upper16:bin_search_StepSize2.CurrentStep
	str	r0, [r1]
.LBB115_26:
	ldr	r0, [sp, #28]
	sub	sp, r11, #8
	pop	{r4, r10, r11, pc}
.Lfunc_end115:
	.size	bin_search_StepSize2, .Lfunc_end115-bin_search_StepSize2
	.cantunwind
	.fnend

	.globl	quantize_xrpow
	.p2align	2
	.type	quantize_xrpow,%function
	.code	32                      @ @quantize_xrpow
quantize_xrpow:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #144
	movw	r3, #72
	movw	r12, :lower16:ipow20
	movt	r12, :upper16:ipow20
	movw	lr, #3
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [r11, #-12]
	ldr	r0, [r2, #12]
	movw	r1, :lower16:ipow20
	movt	r1, :upper16:ipow20
	add	r0, r1, r0, lsl #3
	vldr	d16, [r0]
	vstr	d16, [r11, #-24]
	str	r3, [r11, #-28]
	str	r12, [sp, #12]          @ 4-byte Spill
	str	lr, [sp, #8]            @ 4-byte Spill
.LBB116_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-28]
	cmp	r0, #0
	ble	.LBB116_4
@ BB#2:                                 @   in Loop: Header=BB116_1 Depth=1
	movw	r0, :lower16:adj43
	movt	r0, :upper16:adj43
	movw	r1, #3
	ldr	r2, [r11, #-4]
	add	r3, r2, #8
	str	r3, [r11, #-4]
	vldr	d16, [r2]
	vldr	d17, [r11, #-24]
	vmul.f64	d16, d16, d17
	vstr	d16, [r11, #-40]
	ldr	r2, [r11, #-4]
	add	r3, r2, #8
	str	r3, [r11, #-4]
	vldr	d16, [r2]
	vldr	d17, [r11, #-24]
	vmul.f64	d16, d16, d17
	vstr	d16, [r11, #-48]
	vldr	d16, [r11, #-40]
	vcvt.s32.f64	s0, d16
	vstr	s0, [sp, #44]
	ldr	r2, [r11, #-4]
	add	r3, r2, #8
	str	r3, [r11, #-4]
	vldr	d16, [r2]
	vldr	d17, [r11, #-24]
	vmul.f64	d16, d16, d17
	vstr	d16, [r11, #-56]
	vldr	d16, [r11, #-48]
	vcvt.s32.f64	s0, d16
	vstr	s0, [sp, #40]
	ldr	r2, [r11, #-4]
	add	r3, r2, #8
	str	r3, [r11, #-4]
	vldr	d16, [r2]
	vldr	d17, [r11, #-24]
	vmul.f64	d16, d16, d17
	vstr	d16, [r11, #-64]
	vldr	d16, [r11, #-56]
	vcvt.s32.f64	s0, d16
	vstr	s0, [sp, #36]
	ldr	r2, [r11, #-4]
	add	r3, r2, #8
	str	r3, [r11, #-4]
	vldr	d16, [r2]
	vldr	d17, [r11, #-24]
	vmul.f64	d16, d16, d17
	vstr	d16, [sp, #72]
	vldr	d16, [r11, #-64]
	vcvt.s32.f64	s0, d16
	vstr	s0, [sp, #32]
	ldr	r2, [r11, #-4]
	add	r3, r2, #8
	str	r3, [r11, #-4]
	vldr	d16, [r2]
	vldr	d17, [r11, #-24]
	vmul.f64	d16, d16, d17
	vstr	d16, [sp, #64]
	vldr	d16, [sp, #72]
	vcvt.s32.f64	s0, d16
	vstr	s0, [sp, #28]
	ldr	r2, [r11, #-4]
	add	r3, r2, #8
	str	r3, [r11, #-4]
	vldr	d16, [r2]
	vldr	d17, [r11, #-24]
	vmul.f64	d16, d16, d17
	vstr	d16, [sp, #56]
	vldr	d16, [sp, #64]
	vcvt.s32.f64	s0, d16
	vstr	s0, [sp, #24]
	ldr	r2, [r11, #-4]
	add	r3, r2, #8
	str	r3, [r11, #-4]
	vldr	d16, [r2]
	vldr	d17, [r11, #-24]
	vmul.f64	d16, d16, d17
	vstr	d16, [sp, #48]
	vldr	d16, [sp, #56]
	vcvt.s32.f64	s0, d16
	vstr	s0, [sp, #20]
	ldr	r2, [sp, #44]
	movw	r3, :lower16:adj43
	movt	r3, :upper16:adj43
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [r11, #-40]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-40]
	vldr	d16, [sp, #48]
	vcvt.s32.f64	s0, d16
	vstr	s0, [sp, #16]
	ldr	r2, [sp, #40]
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [r11, #-48]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-48]
	vldr	d16, [r11, #-40]
	ldr	r2, [r11, #-8]
	add	r12, r2, #4
	str	r12, [r11, #-8]
	vcvt.s32.f64	s0, d16
	vstr	s0, [r2]
	ldr	r2, [sp, #36]
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [r11, #-56]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-56]
	vldr	d16, [r11, #-48]
	ldr	r2, [r11, #-8]
	add	r12, r2, #4
	str	r12, [r11, #-8]
	vcvt.s32.f64	s0, d16
	vstr	s0, [r2]
	ldr	r2, [sp, #32]
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [r11, #-64]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-64]
	vldr	d16, [r11, #-56]
	ldr	r2, [r11, #-8]
	add	r12, r2, #4
	str	r12, [r11, #-8]
	vcvt.s32.f64	s0, d16
	vstr	s0, [r2]
	ldr	r2, [sp, #28]
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [sp, #72]
	vadd.f64	d16, d17, d16
	vstr	d16, [sp, #72]
	vldr	d16, [r11, #-64]
	ldr	r2, [r11, #-8]
	add	r12, r2, #4
	str	r12, [r11, #-8]
	vcvt.s32.f64	s0, d16
	vstr	s0, [r2]
	ldr	r2, [sp, #24]
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [sp, #64]
	vadd.f64	d16, d17, d16
	vstr	d16, [sp, #64]
	vldr	d16, [sp, #72]
	ldr	r2, [r11, #-8]
	add	r12, r2, #4
	str	r12, [r11, #-8]
	vcvt.s32.f64	s0, d16
	vstr	s0, [r2]
	ldr	r2, [sp, #20]
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [sp, #56]
	vadd.f64	d16, d17, d16
	vstr	d16, [sp, #56]
	vldr	d16, [sp, #64]
	ldr	r2, [r11, #-8]
	add	r12, r2, #4
	str	r12, [r11, #-8]
	vcvt.s32.f64	s0, d16
	vstr	s0, [r2]
	ldr	r2, [sp, #16]
	add	r2, r3, r2, lsl #3
	vldr	d16, [r2]
	vldr	d17, [sp, #48]
	vadd.f64	d16, d17, d16
	vstr	d16, [sp, #48]
	vldr	d16, [sp, #56]
	vcvt.s32.f64	s0, d16
	vmov	r2, s0
	ldr	r3, [r11, #-8]
	add	r12, r3, #4
	str	r12, [r11, #-8]
	str	r2, [r3]
	vldr	d16, [sp, #48]
	vcvt.s32.f64	s0, d16
	vmov	r2, s0
	ldr	r3, [r11, #-8]
	add	r12, r3, #4
	str	r12, [r11, #-8]
	str	r2, [r3]
	str	r0, [sp, #4]            @ 4-byte Spill
	str	r1, [sp]                @ 4-byte Spill
@ BB#3:                                 @   in Loop: Header=BB116_1 Depth=1
	mvn	r0, #0
	ldr	r1, [r11, #-28]
	add	r0, r1, r0
	str	r0, [r11, #-28]
	b	.LBB116_1
.LBB116_4:
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end116:
	.size	quantize_xrpow, .Lfunc_end116-quantize_xrpow
	.cantunwind
	.fnend

	.globl	quantize_xrpow_ISO
	.p2align	3
	.type	quantize_xrpow_ISO,%function
	.code	32                      @ @quantize_xrpow_ISO
quantize_xrpow_ISO:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #48
	movw	r3, #576
	vldr	d16, .LCPI117_0
	movw	r12, :lower16:ipow20
	movt	r12, :upper16:ipow20
	movw	lr, #3
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [r11, #-12]
	ldr	r0, [r2, #12]
	movw	r1, :lower16:ipow20
	movt	r1, :upper16:ipow20
	add	r0, r1, r0, lsl #3
	vldr	d17, [r0]
	vstr	d17, [sp, #24]
	vldr	d17, [sp, #24]
	vdiv.f64	d16, d16, d17
	vstr	d16, [sp, #8]
	str	r3, [sp, #20]
	str	r12, [sp, #4]           @ 4-byte Spill
	str	lr, [sp]                @ 4-byte Spill
.LBB117_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #20]
	cmp	r0, #0
	ble	.LBB117_7
@ BB#2:                                 @   in Loop: Header=BB117_1 Depth=1
	vldr	d16, [sp, #8]
	ldr	r0, [r11, #-4]
	vldr	d17, [r0]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	ble	.LBB117_4
@ BB#3:                                 @   in Loop: Header=BB117_1 Depth=1
	movw	r0, #0
	ldr	r1, [r11, #-8]
	add	r2, r1, #4
	str	r2, [r11, #-8]
	str	r0, [r1]
	ldr	r0, [r11, #-4]
	add	r0, r0, #8
	str	r0, [r11, #-4]
	b	.LBB117_5
.LBB117_4:                              @   in Loop: Header=BB117_1 Depth=1
	vldr	d16, .LCPI117_1
	vldr	d17, [sp, #24]
	ldr	r0, [r11, #-4]
	add	r1, r0, #8
	str	r1, [r11, #-4]
	vldr	d18, [r0]
	vmul.f64	d17, d17, d18
	vadd.f64	d16, d17, d16
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	ldr	r1, [r11, #-8]
	add	r2, r1, #4
	str	r2, [r11, #-8]
	str	r0, [r1]
.LBB117_5:                              @   in Loop: Header=BB117_1 Depth=1
	b	.LBB117_6
.LBB117_6:                              @   in Loop: Header=BB117_1 Depth=1
	mvn	r0, #0
	ldr	r1, [sp, #20]
	add	r0, r1, r0
	str	r0, [sp, #20]
	b	.LBB117_1
.LBB117_7:
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#8:
.LCPI117_0:
	.long	2487645058              @ double 0.59460000000000002
	.long	1071843062
.LCPI117_1:
	.long	3614644476              @ double 0.40539999999999998
	.long	1071247890
.Lfunc_end117:
	.size	quantize_xrpow_ISO, .Lfunc_end117-quantize_xrpow_ISO
	.cantunwind
	.fnend

	.globl	ResvFrameBegin
	.p2align	2
	.type	ResvFrameBegin,%function
	.code	32                      @ @ResvFrameBegin
ResvFrameBegin:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #40
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [r11, #-12]
	str	r3, [r11, #-16]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #156]
	cmp	r0, #0
	bne	.LBB118_2
@ BB#1:
	movw	r0, #0
	movw	r1, :lower16:ResvSize
	movt	r1, :upper16:ResvSize
	str	r0, [r1]
.LBB118_2:
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #172]
	cmp	r0, #1
	bne	.LBB118_4
@ BB#3:
	movw	r0, #4088
	str	r0, [sp, #16]
	b	.LBB118_5
.LBB118_4:
	movw	r0, #2040
	str	r0, [sp, #16]
.LBB118_5:
	movw	r0, #1
	movw	r1, :lower16:ResvSize
	movt	r1, :upper16:ResvSize
	movw	r2, #3
	ldr	r3, [r11, #-8]
	ldr	r3, [r3]
	lsl	r3, r3, #3
	ldr	r1, [r1]
	cmp	r3, r1
	str	r2, [sp, #12]           @ 4-byte Spill
	str	r0, [sp, #8]            @ 4-byte Spill
	beq	.LBB118_7
@ BB#6:
	movw	r0, :lower16:.L.str.270
	movt	r0, :upper16:.L.str.270
	movw	r1, :lower16:.L.str.1.271
	movt	r1, :upper16:.L.str.1.271
	movw	r2, #68
	movw	r3, :lower16:.L__func__.ResvFrameBegin
	movt	r3, :upper16:.L__func__.ResvFrameBegin
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #8]            @ 4-byte Spill
.LBB118_7:
	ldr	r0, [sp, #8]            @ 4-byte Reload
	movw	r1, :lower16:ResvSize
	movt	r1, :upper16:ResvSize
	ldr	r2, [r11, #-12]
	ldr	r3, [r11, #-4]
	ldr	r3, [r3, #180]
	mul	r2, r2, r3
	ldr	r1, [r1]
	add	r1, r2, r1
	str	r1, [sp, #20]
	ldr	r1, [r11, #-16]
	cmp	r1, #7680
	str	r0, [sp, #4]            @ 4-byte Spill
	ble	.LBB118_9
@ BB#8:
	movw	r0, #0
	movw	r1, :lower16:ResvMax
	movt	r1, :upper16:ResvMax
	str	r0, [r1]
	b	.LBB118_10
.LBB118_9:
	movw	r0, :lower16:ResvMax
	movt	r0, :upper16:ResvMax
	movw	r1, #7680
	ldr	r2, [r11, #-16]
	sub	r1, r1, r2
	str	r1, [r0]
.LBB118_10:
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #68]
	cmp	r0, #0
	beq	.LBB118_12
@ BB#11:
	movw	r0, #0
	movw	r1, :lower16:ResvMax
	movt	r1, :upper16:ResvMax
	str	r0, [r1]
.LBB118_12:
	movw	r0, :lower16:ResvMax
	movt	r0, :upper16:ResvMax
	ldr	r0, [r0]
	ldr	r1, [sp, #16]
	cmp	r0, r1
	ble	.LBB118_14
@ BB#13:
	movw	r0, :lower16:ResvMax
	movt	r0, :upper16:ResvMax
	ldr	r1, [sp, #16]
	str	r1, [r0]
.LBB118_14:
	ldr	r0, [sp, #20]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end118:
	.size	ResvFrameBegin, .Lfunc_end118-ResvFrameBegin
	.cantunwind
	.fnend

	.globl	ResvMaxBits
	.p2align	3
	.type	ResvMaxBits,%function
	.code	32                      @ @ResvMaxBits
ResvMaxBits:
	.fnstart
@ BB#0:
	push	{r4, r5, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #40
	movw	r12, #10
	movw	lr, #9
	movw	r4, :lower16:ResvMax
	movt	r4, :upper16:ResvMax
	movw	r5, :lower16:ResvSize
	movt	r5, :upper16:ResvSize
	str	r0, [r11, #-12]
	str	r1, [r11, #-16]
	str	r2, [r11, #-20]
	str	r3, [sp, #24]
	ldr	r0, [r11, #-12]
	ldr	r1, [r11, #-16]
	str	r0, [r1]
	ldr	r0, [r5]
	ldr	r1, [r4]
	mul	r1, r1, lr
	str	r0, [sp, #16]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r12
	bl	__divsi3
	ldr	r1, [sp, #16]           @ 4-byte Reload
	cmp	r1, r0
	ble	.LBB119_2
@ BB#1:
	movw	r1, #10
	movw	r0, #9
	movw	r2, :lower16:ResvMax
	movt	r2, :upper16:ResvMax
	movw	r3, :lower16:ResvSize
	movt	r3, :upper16:ResvSize
	ldr	r3, [r3]
	ldr	r2, [r2]
	mul	r0, r2, r0
	str	r3, [sp, #12]           @ 4-byte Spill
	bl	__divsi3
	ldr	r1, [sp, #12]           @ 4-byte Reload
	sub	r0, r1, r0
	str	r0, [sp, #20]
	ldr	r0, [sp, #20]
	ldr	r1, [r11, #-16]
	ldr	r2, [r1]
	add	r0, r2, r0
	str	r0, [r1]
	b	.LBB119_3
.LBB119_2:
	vldr	d16, .LCPI119_0
	movw	r0, #0
	str	r0, [sp, #20]
	ldr	r0, [r11, #-12]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d17, d16
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	ldr	r1, [r11, #-16]
	ldr	r2, [r1]
	sub	r0, r2, r0
	str	r0, [r1]
.LBB119_3:
	movw	r1, #10
	movw	r0, #6
	movw	r2, :lower16:ResvMax
	movt	r2, :upper16:ResvMax
	movw	r3, :lower16:ResvSize
	movt	r3, :upper16:ResvSize
	ldr	r3, [r3]
	ldr	r2, [r2]
	mul	r0, r2, r0
	str	r3, [sp, #8]            @ 4-byte Spill
	bl	__divsi3
	ldr	r1, [sp, #8]            @ 4-byte Reload
	cmp	r1, r0
	bge	.LBB119_5
@ BB#4:
	movw	r0, :lower16:ResvSize
	movt	r0, :upper16:ResvSize
	ldr	r0, [r0]
	str	r0, [sp, #4]            @ 4-byte Spill
	b	.LBB119_6
.LBB119_5:
	movw	r1, #10
	movw	r0, #6
	movw	r2, :lower16:ResvMax
	movt	r2, :upper16:ResvMax
	ldr	r2, [r2]
	mul	r0, r2, r0
	bl	__divsi3
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB119_6:
	ldr	r0, [sp, #4]            @ 4-byte Reload
	ldr	r1, [r11, #-20]
	str	r0, [r1]
	ldr	r0, [sp, #20]
	ldr	r1, [r11, #-20]
	ldr	r2, [r1]
	sub	r0, r2, r0
	str	r0, [r1]
	ldr	r0, [r11, #-20]
	ldr	r0, [r0]
	cmp	r0, #0
	bge	.LBB119_8
@ BB#7:
	movw	r0, #0
	ldr	r1, [r11, #-20]
	str	r0, [r1]
.LBB119_8:
	sub	sp, r11, #8
	pop	{r4, r5, r11, pc}
	.p2align	3
@ BB#9:
.LCPI119_0:
	.long	1717986918              @ double 15.199999999999999
	.long	1076782694
.Lfunc_end119:
	.size	ResvMaxBits, .Lfunc_end119-ResvMaxBits
	.cantunwind
	.fnend

	.globl	ResvAdjust
	.p2align	2
	.type	ResvAdjust,%function
	.code	32                      @ @ResvAdjust
ResvAdjust:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	movw	r12, :lower16:ResvSize
	movt	r12, :upper16:ResvSize
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [sp, #12]
	str	r3, [sp, #8]
	ldr	r0, [sp, #8]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #184]
	str	r12, [sp, #4]           @ 4-byte Spill
	bl	__divsi3
	ldr	r1, [r11, #-8]
	ldr	r1, [r1]
	sub	r0, r0, r1
	ldr	r1, [sp, #4]            @ 4-byte Reload
	ldr	r2, [r1]
	add	r0, r2, r0
	str	r0, [r1]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end120:
	.size	ResvAdjust, .Lfunc_end120-ResvAdjust
	.cantunwind
	.fnend

	.globl	ResvFrameEnd
	.p2align	2
	.type	ResvFrameEnd,%function
	.code	32                      @ @ResvFrameEnd
ResvFrameEnd:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [sp, #12]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #184]
	cmp	r0, #2
	bne	.LBB121_3
@ BB#1:
	ldr	r0, [sp, #12]
	and	r0, r0, #1
	cmp	r0, #0
	beq	.LBB121_3
@ BB#2:
	movw	r0, :lower16:ResvSize
	movt	r0, :upper16:ResvSize
	ldr	r1, [r0]
	add	r1, r1, #1
	str	r1, [r0]
.LBB121_3:
	movw	r0, :lower16:ResvMax
	movt	r0, :upper16:ResvMax
	movw	r1, :lower16:ResvSize
	movt	r1, :upper16:ResvSize
	ldr	r1, [r1]
	ldr	r0, [r0]
	sub	r0, r1, r0
	str	r0, [sp, #4]
	ldr	r0, [sp, #4]
	cmp	r0, #0
	bge	.LBB121_5
@ BB#4:
	movw	r0, #0
	str	r0, [sp, #4]
.LBB121_5:
	movw	r1, #8
	movw	r0, :lower16:ResvSize
	movt	r0, :upper16:ResvSize
	ldr	r2, [sp, #4]
	ldr	r3, [r0]
	sub	r2, r3, r2
	str	r2, [r0]
	ldr	r2, [sp, #4]
	str	r2, [sp, #8]
	ldr	r0, [r0]
	bl	__modsi3
	str	r0, [sp, #4]
	cmp	r0, #0
	beq	.LBB121_7
@ BB#6:
	movw	r0, :lower16:ResvSize
	movt	r0, :upper16:ResvSize
	ldr	r1, [sp, #4]
	ldr	r2, [sp, #8]
	add	r1, r2, r1
	str	r1, [sp, #8]
	ldr	r1, [sp, #4]
	ldr	r2, [r0]
	sub	r1, r2, r1
	str	r1, [r0]
.LBB121_7:
	ldr	r0, [sp, #8]
	ldr	r1, [r11, #-8]
	str	r0, [r1, #8]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end121:
	.size	ResvFrameEnd, .Lfunc_end121-ResvFrameEnd
	.cantunwind
	.fnend

	.globl	initrtp
	.p2align	2
	.type	initrtp,%function
	.code	32                      @ @initrtp
initrtp:
	.fnstart
@ BB#0:
	push	{r4, r5, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #8
	mvn	r1, #8323072
	mvn	r2, #8388608
	mvn	r3, #251658240
	mvn	r12, #268435456
	mvn	lr, #536870912
	ldr	r4, .LCPI122_1
	str	r0, [sp, #4]
	ldr	r0, [sp, #4]
	ldr	r5, [r0]
	and	r4, r5, r4
	orr	r4, r4, #-2147483648
	str	r4, [r0]
	ldr	r0, [sp, #4]
	ldr	r4, [r0]
	and	lr, r4, lr
	str	lr, [r0]
	ldr	r0, [sp, #4]
	ldr	lr, [r0]
	and	r12, lr, r12
	str	r12, [r0]
	ldr	r0, [sp, #4]
	ldr	r12, [r0]
	and	r3, r12, r3
	str	r3, [r0]
	ldr	r0, [sp, #4]
	ldr	r3, [r0]
	and	r2, r3, r2
	str	r2, [r0]
	ldr	r0, [sp, #4]
	ldr	r2, [r0]
	and	r1, r2, r1
	orr	r1, r1, #917504
	str	r1, [r0]
	bl	rand
	ldr	r1, .LCPI122_0
	movw	r2, #65535
	and	r0, r0, r2
	ldr	r3, [sp, #4]
	ldr	r12, [r3]
	and	r0, r0, r2
	and	r1, r12, r1
	orr	r0, r1, r0
	str	r0, [r3]
	bl	rand
	ldr	r1, [sp, #4]
	str	r0, [r1, #4]
	bl	rand
	movw	r1, #0
	ldr	r2, [sp, #4]
	str	r0, [r2, #8]
	ldr	r0, [sp, #4]
	str	r1, [r0, #12]
	sub	sp, r11, #8
	pop	{r4, r5, r11, pc}
	.p2align	2
@ BB#1:
.LCPI122_0:
	.long	4294901760              @ 0xffff0000
.LCPI122_1:
	.long	1073741823              @ 0x3fffffff
.Lfunc_end122:
	.size	initrtp, .Lfunc_end122-initrtp
	.cantunwind
	.fnend

	.globl	sendrtp
	.p2align	2
	.type	sendrtp,%function
	.code	32                      @ @sendrtp
sendrtp:
	.fnstart
@ BB#0:
	push	{r4, r10, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #48
	ldr	r12, [r11, #8]
	str	r0, [r11, #-12]
	str	r1, [r11, #-16]
	str	r2, [r11, #-20]
	str	r3, [r11, #-24]
	str	r12, [r11, #-28]
	add	r0, r12, #23
	bfc	r0, #0, #3
	mov	r1, sp
	sub	r0, r1, r0
	mov	sp, r0
	str	r0, [r11, #-32]
	ldr	r0, [r11, #-20]
	str	r0, [r11, #-36]
	ldr	r0, [r11, #-32]
	str	r0, [r11, #-40]
	ldr	r0, [r11, #-36]
	ldr	r0, [r0]
	bl	htonl
	ldr	r1, [r11, #-40]
	str	r0, [r1]
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #4]
	bl	htonl
	ldr	r1, [r11, #-40]
	str	r0, [r1, #4]
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #8]
	bl	htonl
	ldr	r1, [r11, #-40]
	str	r0, [r1, #8]
	ldr	r0, [r11, #-36]
	ldr	r0, [r0, #12]
	bl	htonl
	movw	r3, #0
	movw	r1, #16
	ldr	r2, [r11, #-40]
	str	r0, [r2, #12]
	ldr	r0, [r11, #-32]
	add	r0, r0, #16
	ldr	r2, [r11, #-24]
	ldr	r12, [r11, #-28]
	str	r1, [r11, #-44]         @ 4-byte Spill
	mov	r1, r2
	mov	r2, r12
	str	r3, [r11, #-48]         @ 4-byte Spill
	bl	memmove
	ldr	r0, [r11, #-12]
	ldr	r1, [r11, #-32]
	ldr	r2, [r11, #-28]
	add	r2, r2, #16
	ldr	r3, [r11, #-16]
	sub	sp, sp, #8
	ldr	r12, [r11, #-48]        @ 4-byte Reload
	str	r3, [r11, #-52]         @ 4-byte Spill
	mov	r3, r12
	ldr	lr, [r11, #-52]         @ 4-byte Reload
	str	lr, [sp]
	ldr	r4, [r11, #-44]         @ 4-byte Reload
	str	r4, [sp, #4]
	bl	sendto
	add	sp, sp, #8
	sub	sp, r11, #8
	pop	{r4, r10, r11, pc}
.Lfunc_end123:
	.size	sendrtp, .Lfunc_end123-sendrtp
	.cantunwind
	.fnend

	.globl	makesocket
	.p2align	2
	.type	makesocket,%function
	.code	32                      @ @makesocket
makesocket:
	.fnstart
@ BB#0:
	push	{r4, r5, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #88
	movw	r12, #2
	movw	lr, #0
	movw	r4, #0
	movw	r5, #1
	str	r0, [r11, #-12]
	strh	r1, [r11, #-14]
	str	r2, [r11, #-20]
	str	r3, [r11, #-24]
	str	r5, [r11, #-32]
	ldr	r0, [r11, #-20]
	strb	r0, [sp, #47]
	strb	r4, [sp, #46]
	mov	r0, r12
	mov	r1, r12
	mov	r2, lr
	bl	socket
	str	r0, [sp, #36]
	ldr	r0, [sp, #36]
	cmp	r0, #0
	bge	.LBB124_2
@ BB#1:
	movw	r1, :lower16:.L.str.278
	movt	r1, :upper16:.L.str.278
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	movw	r1, #1
	str	r0, [sp, #32]           @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB124_2:
	ldr	r0, [r11, #-12]
	bl	inet_addr
	movw	lr, #2
	str	r0, [sp, #40]
	strh	lr, [sp, #48]
	ldr	r0, [r11, #-24]
	strh	lr, [r0]
	ldrh	r0, [r11, #-14]
	bl	htons
	movw	r1, #1
	movw	r2, #2
	movw	lr, #4
	sub	r3, r11, #32
	strh	r0, [sp, #50]
	ldr	r12, [r11, #-24]
	strh	r0, [r12, #2]
	ldr	r0, [sp, #40]
	ldr	r12, [r11, #-24]
	str	r0, [r12, #4]
	ldr	r0, [sp, #36]
	str	lr, [sp]
	bl	setsockopt
	str	r0, [r11, #-28]
	ldr	r0, [r11, #-28]
	cmp	r0, #0
	bge	.LBB124_4
@ BB#3:
	movw	r1, :lower16:.L.str.1.279
	movt	r1, :upper16:.L.str.1.279
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	movw	r1, #1
	str	r0, [sp, #28]           @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB124_4:
	ldr	r0, [sp, #40]
	bl	ntohl
	movw	lr, #28
	lsr	r0, r0, #28
	cmp	r0, #14
	str	lr, [sp, #24]           @ 4-byte Spill
	bne	.LBB124_10
@ BB#5:
	movw	r1, #0
	movw	r2, #33
	add	r3, sp, #47
	movw	r0, #1
	ldr	r12, [sp, #36]
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, r12
	ldr	r12, [sp, #20]          @ 4-byte Reload
	str	r12, [sp]
	bl	setsockopt
	str	r0, [r11, #-28]
	ldr	r0, [r11, #-28]
	cmp	r0, #0
	bge	.LBB124_7
@ BB#6:
	movw	r1, :lower16:.L.str.2.280
	movt	r1, :upper16:.L.str.2.280
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	movw	r1, #1
	str	r0, [sp, #16]           @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB124_7:
	movw	r1, #0
	movw	r2, #34
	add	r3, sp, #46
	movw	r0, #1
	movw	r12, #1
	strb	r12, [sp, #46]
	ldr	r12, [sp, #36]
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r12
	ldr	r12, [sp, #12]          @ 4-byte Reload
	str	r12, [sp]
	bl	setsockopt
	str	r0, [r11, #-28]
	ldr	r0, [r11, #-28]
	cmp	r0, #0
	bge	.LBB124_9
@ BB#8:
	movw	r1, :lower16:.L.str.3.281
	movt	r1, :upper16:.L.str.3.281
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	movw	r1, #1
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB124_9:
	b	.LBB124_10
.LBB124_10:
	ldr	r0, [sp, #36]
	sub	sp, r11, #8
	pop	{r4, r5, r11, pc}
.Lfunc_end124:
	.size	makesocket, .Lfunc_end124-makesocket
	.cantunwind
	.fnend

	.globl	count_bits
	.p2align	3
	.type	count_bits,%function
	.code	32                      @ @count_bits
count_bits:
	.fnstart
@ BB#0:
	push	{r4, r10, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #64
	movw	r12, #0
	vldr	d16, .LCPI125_0
	movw	lr, :lower16:ipow20
	movt	lr, :upper16:ipow20
	movw	r4, #3
	str	r0, [r11, #-16]
	str	r1, [r11, #-20]
	str	r2, [r11, #-24]
	str	r3, [r11, #-28]
	mov	r0, #0
	str	r0, [r11, #-32]
	ldr	r0, [r11, #-28]
	ldr	r0, [r0, #12]
	movw	r1, :lower16:ipow20
	movt	r1, :upper16:ipow20
	add	r0, r1, r0, lsl #3
	vldr	d17, [r0]
	vdiv.f64	d16, d16, d17
	vstr	d16, [sp, #24]
	str	r12, [sp, #36]
	str	r4, [sp, #20]           @ 4-byte Spill
	str	lr, [sp, #16]           @ 4-byte Spill
.LBB125_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #36]
	cmp	r0, #576
	bge	.LBB125_6
@ BB#2:                                 @   in Loop: Header=BB125_1 Depth=1
	movw	r0, #3
	ldr	r1, [r11, #-24]
	ldr	r2, [sp, #36]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	vldr	d17, [sp, #24]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #12]           @ 4-byte Spill
	ble	.LBB125_4
@ BB#3:
	ldr	r0, .LCPI125_1
	str	r0, [r11, #-12]
	b	.LBB125_13
.LBB125_4:                              @   in Loop: Header=BB125_1 Depth=1
	b	.LBB125_5
.LBB125_5:                              @   in Loop: Header=BB125_1 Depth=1
	ldr	r0, [sp, #36]
	add	r0, r0, #1
	str	r0, [sp, #36]
	b	.LBB125_1
.LBB125_6:
	ldr	r0, [r11, #-16]
	ldr	r0, [r0, #240]
	cmp	r0, #0
	beq	.LBB125_8
@ BB#7:
	ldr	r0, [r11, #-24]
	ldr	r1, [r11, #-20]
	ldr	r2, [r11, #-28]
	bl	quantize_xrpow
	b	.LBB125_9
.LBB125_8:
	ldr	r0, [r11, #-24]
	ldr	r1, [r11, #-20]
	ldr	r2, [r11, #-28]
	bl	quantize_xrpow_ISO
.LBB125_9:
	ldr	r0, [r11, #-28]
	ldr	r0, [r0, #24]
	cmp	r0, #2
	bne	.LBB125_11
@ BB#10:
	sub	r2, r11, #32
	ldr	r0, [r11, #-20]
	ldr	r1, [r11, #-20]
	add	r1, r1, #144
	bl	choose_table_short
	sub	r2, r11, #32
	ldr	r1, [r11, #-28]
	str	r0, [r1, #32]
	ldr	r0, [r11, #-20]
	add	r0, r0, #144
	ldr	r1, [r11, #-20]
	add	r1, r1, #2304
	bl	choose_table_short
	movw	r1, #288
	ldr	r2, [r11, #-28]
	str	r0, [r2, #36]
	ldr	r0, [r11, #-28]
	str	r1, [r0, #4]
	b	.LBB125_12
.LBB125_11:
	ldr	r0, [r11, #-20]
	ldr	r1, [r11, #-28]
	bl	count_bits_long
	movw	r1, #1
	movw	lr, #2
	movw	r2, #4
	str	r0, [r11, #-32]
	ldr	r0, [r11, #-28]
	ldr	r0, [r0, #8]
	ldr	r3, [r11, #-28]
	ldr	r3, [r3, #4]
	sub	r0, r0, r3
	str	r1, [sp, #8]            @ 4-byte Spill
	mov	r1, r2
	str	lr, [sp, #4]            @ 4-byte Spill
	bl	__udivsi3
	ldr	r1, [r11, #-28]
	str	r0, [r1, #8]
	ldr	r0, [r11, #-28]
	ldr	r1, [r0, #4]
	str	r0, [sp]                @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #4]            @ 4-byte Reload
	bl	__udivsi3
	ldr	r1, [sp]                @ 4-byte Reload
	str	r0, [r1, #4]
.LBB125_12:
	ldr	r0, [r11, #-32]
	str	r0, [r11, #-12]
.LBB125_13:
	ldr	r0, [r11, #-12]
	sub	sp, r11, #8
	pop	{r4, r10, r11, pc}
	.p2align	3
@ BB#14:
.LCPI125_0:
	.long	0                       @ double 8206
	.long	1086326528
.LCPI125_1:
	.long	100000                  @ 0x186a0
.Lfunc_end125:
	.size	count_bits, .Lfunc_end125-count_bits
	.cantunwind
	.fnend

	.p2align	2
	.type	choose_table_short,%function
	.code	32                      @ @choose_table_short
choose_table_short:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #64
	str	r0, [r11, #-8]
	str	r1, [r11, #-12]
	str	r2, [r11, #-16]
	ldr	r0, [r11, #-8]
	ldr	r1, [r11, #-12]
	bl	ix_max
	movw	r1, #8206
	str	r0, [r11, #-20]
	ldr	r0, [r11, #-20]
	cmp	r0, r1
	ble	.LBB126_2
@ BB#1:
	mvn	r0, #0
	ldr	r1, .LCPI126_0
	ldr	r2, [r11, #-16]
	str	r1, [r2]
	str	r0, [r11, #-4]
	b	.LBB126_33
.LBB126_2:
	ldr	r0, [r11, #-20]
	cmp	r0, #15
	bgt	.LBB126_19
@ BB#3:
	ldr	r0, [r11, #-20]
	cmp	r0, #0
	bne	.LBB126_5
@ BB#4:
	movw	r0, #0
	str	r0, [r11, #-4]
	b	.LBB126_33
.LBB126_5:
	ldr	r0, [r11, #-20]
	movw	r1, :lower16:huf_tbl_noESC
	movt	r1, :upper16:huf_tbl_noESC
	add	r0, r1, r0, lsl #2
	ldr	r0, [r0, #-4]
	str	r0, [r11, #-24]
	ldr	r1, [r11, #-8]
	ldr	r2, [r11, #-12]
	str	r0, [sp, #24]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	ldr	r2, [sp, #24]           @ 4-byte Reload
	bl	count_bit_short_noESC
	str	r0, [r11, #-28]
	ldr	r0, [r11, #-24]
	str	r0, [sp, #32]
	ldr	r0, [r11, #-24]
	sub	r0, r0, #2
	cmp	r0, #11
	str	r0, [sp, #20]           @ 4-byte Spill
	bhi	.LBB126_17
@ BB#6:
	ldr	r0, [sp, #20]           @ 4-byte Reload
	lsl	r1, r0, #2
	adr	r2, .LJTI126_0
	ldr	r1, [r1, r2]
	mov	pc, r1
@ BB#7:
	.p2align	2
.LJTI126_0:
	.long	.LBB126_11
	.long	.LBB126_17
	.long	.LBB126_17
	.long	.LBB126_11
	.long	.LBB126_17
	.long	.LBB126_8
	.long	.LBB126_17
	.long	.LBB126_17
	.long	.LBB126_8
	.long	.LBB126_17
	.long	.LBB126_17
	.long	.LBB126_14
.LBB126_8:
	ldr	r0, [sp, #32]
	add	r0, r0, #1
	str	r0, [sp, #32]
	ldr	r0, [sp, #32]
	bl	count_bit_noESC2
	str	r0, [sp, #28]
	ldr	r0, [r11, #-28]
	ldr	lr, [sp, #28]
	cmp	r0, lr
	ble	.LBB126_10
@ BB#9:
	ldr	r0, [sp, #28]
	str	r0, [r11, #-28]
	ldr	r0, [sp, #32]
	str	r0, [r11, #-24]
.LBB126_10:
	b	.LBB126_11
.LBB126_11:
	ldr	r0, [sp, #32]
	add	r0, r0, #1
	str	r0, [sp, #32]
	ldr	r0, [sp, #32]
	bl	count_bit_noESC2
	str	r0, [sp, #28]
	ldr	r0, [r11, #-28]
	ldr	lr, [sp, #28]
	cmp	r0, lr
	ble	.LBB126_13
@ BB#12:
	ldr	r0, [sp, #28]
	str	r0, [r11, #-28]
	ldr	r0, [sp, #32]
	str	r0, [r11, #-24]
.LBB126_13:
	b	.LBB126_18
.LBB126_14:
	ldr	r0, [sp, #32]
	add	r0, r0, #2
	str	r0, [sp, #32]
	ldr	r0, [sp, #32]
	bl	count_bit_noESC2
	str	r0, [sp, #28]
	ldr	r0, [r11, #-28]
	ldr	lr, [sp, #28]
	cmp	r0, lr
	ble	.LBB126_16
@ BB#15:
	ldr	r0, [sp, #28]
	str	r0, [r11, #-28]
	ldr	r0, [sp, #32]
	str	r0, [r11, #-24]
.LBB126_16:
	b	.LBB126_18
.LBB126_17:
	b	.LBB126_18
.LBB126_18:
	ldr	r0, [r11, #-28]
	ldr	r1, [r11, #-16]
	ldr	r2, [r1]
	add	r0, r2, r0
	str	r0, [r1]
	b	.LBB126_32
.LBB126_19:
	movw	r0, #24
	ldr	r1, [r11, #-20]
	sub	r1, r1, #15
	str	r1, [r11, #-20]
	str	r0, [sp, #32]
.LBB126_20:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #32]
	cmp	r0, #32
	bge	.LBB126_25
@ BB#21:                                @   in Loop: Header=BB126_20 Depth=1
	movw	r0, :lower16:ht
	movt	r0, :upper16:ht
	movw	r1, #4
	ldr	r2, [sp, #32]
	movw	r3, :lower16:ht
	movt	r3, :upper16:ht
	add	r2, r3, r2, lsl #4
	ldr	r2, [r2, #4]
	ldr	r3, [r11, #-20]
	cmp	r2, r3
	str	r0, [sp, #16]           @ 4-byte Spill
	str	r1, [sp, #12]           @ 4-byte Spill
	blt	.LBB126_23
@ BB#22:
	b	.LBB126_25
.LBB126_23:                             @   in Loop: Header=BB126_20 Depth=1
	b	.LBB126_24
.LBB126_24:                             @   in Loop: Header=BB126_20 Depth=1
	ldr	r0, [sp, #32]
	add	r0, r0, #1
	str	r0, [sp, #32]
	b	.LBB126_20
.LBB126_25:
	ldr	r0, [sp, #32]
	sub	r0, r0, #8
	str	r0, [r11, #-24]
.LBB126_26:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-24]
	cmp	r0, #24
	bge	.LBB126_31
@ BB#27:                                @   in Loop: Header=BB126_26 Depth=1
	movw	r0, :lower16:ht
	movt	r0, :upper16:ht
	movw	r1, #4
	ldr	r2, [r11, #-24]
	movw	r3, :lower16:ht
	movt	r3, :upper16:ht
	add	r2, r3, r2, lsl #4
	ldr	r2, [r2, #4]
	ldr	r3, [r11, #-20]
	cmp	r2, r3
	str	r0, [sp, #8]            @ 4-byte Spill
	str	r1, [sp, #4]            @ 4-byte Spill
	blt	.LBB126_29
@ BB#28:
	b	.LBB126_31
.LBB126_29:                             @   in Loop: Header=BB126_26 Depth=1
	b	.LBB126_30
.LBB126_30:                             @   in Loop: Header=BB126_26 Depth=1
	ldr	r0, [r11, #-24]
	add	r0, r0, #1
	str	r0, [r11, #-24]
	b	.LBB126_26
.LBB126_31:
	ldr	r0, [r11, #-8]
	ldr	r1, [r11, #-12]
	ldr	r2, [r11, #-24]
	ldr	r3, [sp, #32]
	ldr	r12, [r11, #-16]
	str	r12, [sp]
	bl	count_bit_short_ESC
	str	r0, [r11, #-24]
.LBB126_32:
	ldr	r0, [r11, #-24]
	str	r0, [r11, #-4]
.LBB126_33:
	ldr	r0, [r11, #-4]
	mov	sp, r11
	pop	{r11, pc}
	.p2align	2
@ BB#34:
.LCPI126_0:
	.long	100000                  @ 0x186a0
.Lfunc_end126:
	.size	choose_table_short, .Lfunc_end126-choose_table_short
	.cantunwind
	.fnend

	.p2align	2
	.type	count_bits_long,%function
	.code	32                      @ @count_bits_long
count_bits_long:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #120
	movw	r2, #576
	movw	r3, #0
	str	r0, [r11, #-8]
	str	r1, [r11, #-12]
	str	r3, [r11, #-28]
	str	r2, [r11, #-16]
.LBB127_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-16]
	cmp	r0, #1
	ble	.LBB127_6
@ BB#2:                                 @   in Loop: Header=BB127_1 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-8]
	ldr	r2, [r11, #-16]
	add	r3, r1, r2, lsl #2
	ldr	r3, [r3, #-4]
	sub	r2, r2, #2
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	orr	r1, r3, r1
	cmp	r1, #0
	str	r0, [r11, #-48]         @ 4-byte Spill
	beq	.LBB127_4
@ BB#3:
	b	.LBB127_6
.LBB127_4:                              @   in Loop: Header=BB127_1 Depth=1
	b	.LBB127_5
.LBB127_5:                              @   in Loop: Header=BB127_1 Depth=1
	ldr	r0, [r11, #-16]
	sub	r0, r0, #2
	str	r0, [r11, #-16]
	b	.LBB127_1
.LBB127_6:
	movw	r0, #0
	ldr	r1, [r11, #-16]
	ldr	r2, [r11, #-12]
	str	r1, [r2, #8]
	str	r0, [r11, #-20]
.LBB127_7:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-16]
	cmp	r0, #3
	ble	.LBB127_18
@ BB#8:                                 @   in Loop: Header=BB127_7 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-8]
	ldr	r2, [r11, #-16]
	add	r3, r1, r2, lsl #2
	ldr	r12, [r3, #-12]
	ldr	lr, [r3, #-8]
	ldr	r3, [r3, #-4]
	orr	r3, r3, lr
	orr	r3, r3, r12
	sub	r2, r2, #4
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	orr	r1, r3, r1
	cmp	r1, #1
	str	r0, [r11, #-52]         @ 4-byte Spill
	bls	.LBB127_10
@ BB#9:
	b	.LBB127_18
.LBB127_10:                             @   in Loop: Header=BB127_7 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-8]
	ldr	r2, [r11, #-16]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1, #-4]
	str	r1, [r11, #-36]
	str	r1, [r11, #-32]
	ldr	r1, [r11, #-36]
	ldr	r2, [r11, #-28]
	add	r1, r2, r1
	str	r1, [r11, #-28]
	ldr	r1, [r11, #-8]
	ldr	r2, [r11, #-16]
	sub	r2, r2, #2
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	str	r1, [r11, #-36]
	ldr	r1, [r11, #-36]
	cmp	r1, #0
	str	r0, [r11, #-56]         @ 4-byte Spill
	beq	.LBB127_12
@ BB#11:                                @   in Loop: Header=BB127_7 Depth=1
	ldr	r0, [r11, #-32]
	add	r0, r0, #2
	str	r0, [r11, #-32]
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
.LBB127_12:                             @   in Loop: Header=BB127_7 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-8]
	ldr	r2, [r11, #-16]
	sub	r2, r2, #3
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	str	r1, [r11, #-36]
	ldr	r1, [r11, #-36]
	cmp	r1, #0
	str	r0, [sp, #60]           @ 4-byte Spill
	beq	.LBB127_14
@ BB#13:                                @   in Loop: Header=BB127_7 Depth=1
	ldr	r0, [r11, #-32]
	add	r0, r0, #4
	str	r0, [r11, #-32]
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
.LBB127_14:                             @   in Loop: Header=BB127_7 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-8]
	ldr	r2, [r11, #-16]
	sub	r2, r2, #4
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	str	r1, [r11, #-36]
	ldr	r1, [r11, #-36]
	cmp	r1, #0
	str	r0, [sp, #56]           @ 4-byte Spill
	beq	.LBB127_16
@ BB#15:                                @   in Loop: Header=BB127_7 Depth=1
	ldr	r0, [r11, #-32]
	add	r0, r0, #8
	str	r0, [r11, #-32]
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
.LBB127_16:                             @   in Loop: Header=BB127_7 Depth=1
	movw	r0, :lower16:ht
	movt	r0, :upper16:ht
	ldr	r0, [r0, #524]
	ldr	r1, [r11, #-32]
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldr	r1, [r11, #-20]
	add	r0, r1, r0
	str	r0, [r11, #-20]
@ BB#17:                                @   in Loop: Header=BB127_7 Depth=1
	ldr	r0, [r11, #-16]
	sub	r0, r0, #4
	str	r0, [r11, #-16]
	b	.LBB127_7
.LBB127_18:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #8]
	ldr	r1, [r11, #-16]
	sub	r0, r0, r1
	str	r0, [r11, #-24]
	ldr	r0, [r11, #-20]
	ldr	r1, [r11, #-24]
	cmp	r0, r1
	bge	.LBB127_20
@ BB#19:
	movw	r0, #0
	ldr	r1, [r11, #-20]
	ldr	r2, [r11, #-28]
	add	r1, r2, r1
	str	r1, [r11, #-28]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #72]
	b	.LBB127_21
.LBB127_20:
	movw	r0, #1
	ldr	r1, [r11, #-24]
	ldr	r2, [r11, #-28]
	add	r1, r2, r1
	str	r1, [r11, #-28]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #72]
.LBB127_21:
	ldr	r0, [r11, #-28]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #88]
	ldr	r0, [r11, #-16]
	ldr	r1, [r11, #-12]
	str	r0, [r1, #4]
	ldr	r0, [r11, #-16]
	cmp	r0, #0
	bne	.LBB127_23
@ BB#22:
	ldr	r0, [r11, #-28]
	str	r0, [r11, #-4]
	b	.LBB127_38
.LBB127_23:
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #24]
	cmp	r0, #0
	bne	.LBB127_34
@ BB#24:
	movw	r0, #0
	str	r0, [r11, #-44]
.LBB127_25:                             @ =>This Inner Loop Header: Depth=1
	movw	r0, :lower16:scalefac_band
	movt	r0, :upper16:scalefac_band
	movw	r1, #2
	ldr	r2, [r11, #-44]
	add	r2, r2, #1
	str	r2, [r11, #-44]
	movw	r3, :lower16:scalefac_band
	movt	r3, :upper16:scalefac_band
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	ldr	r3, [r11, #-16]
	cmp	r2, r3
	str	r0, [sp, #52]           @ 4-byte Spill
	str	r1, [sp, #48]           @ 4-byte Spill
	bge	.LBB127_27
@ BB#26:                                @   in Loop: Header=BB127_25 Depth=1
	b	.LBB127_25
.LBB127_27:
	movw	r0, :lower16:subdv_table
	movt	r0, :upper16:subdv_table
	movw	r1, #3
	ldr	r2, [r11, #-44]
	movw	r3, :lower16:subdv_table
	movt	r3, :upper16:subdv_table
	add	r2, r3, r2, lsl #3
	ldr	r2, [r2]
	str	r2, [r11, #-40]
	str	r0, [sp, #44]           @ 4-byte Spill
	str	r1, [sp, #40]           @ 4-byte Spill
.LBB127_28:                             @ =>This Inner Loop Header: Depth=1
	movw	r0, :lower16:scalefac_band
	movt	r0, :upper16:scalefac_band
	movw	r1, #2
	ldr	r2, [r11, #-40]
	add	r2, r2, #1
	movw	r3, :lower16:scalefac_band
	movt	r3, :upper16:scalefac_band
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	ldr	r3, [r11, #-16]
	cmp	r2, r3
	str	r0, [sp, #36]           @ 4-byte Spill
	str	r1, [sp, #32]           @ 4-byte Spill
	ble	.LBB127_30
@ BB#29:                                @   in Loop: Header=BB127_28 Depth=1
	mvn	r0, #0
	ldr	r1, [r11, #-40]
	add	r0, r1, r0
	str	r0, [r11, #-40]
	b	.LBB127_28
.LBB127_30:
	movw	r0, :lower16:subdv_table
	movt	r0, :upper16:subdv_table
	movw	r1, #3
	ldr	r2, [r11, #-40]
	ldr	r3, [r11, #-12]
	str	r2, [r3, #56]
	ldr	r2, [r11, #-44]
	movw	r3, :lower16:subdv_table
	movt	r3, :upper16:subdv_table
	add	r2, r3, r2, lsl #3
	ldr	r2, [r2, #4]
	str	r2, [r11, #-40]
	str	r0, [sp, #28]           @ 4-byte Spill
	str	r1, [sp, #24]           @ 4-byte Spill
.LBB127_31:                             @ =>This Inner Loop Header: Depth=1
	movw	r0, :lower16:scalefac_band
	movt	r0, :upper16:scalefac_band
	movw	r1, #2
	ldr	r2, [r11, #-40]
	ldr	r3, [r11, #-12]
	ldr	r3, [r3, #56]
	add	r2, r2, r3
	add	r2, r2, #2
	movw	r3, :lower16:scalefac_band
	movt	r3, :upper16:scalefac_band
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	ldr	r3, [r11, #-16]
	cmp	r2, r3
	str	r0, [sp, #20]           @ 4-byte Spill
	str	r1, [sp, #16]           @ 4-byte Spill
	ble	.LBB127_33
@ BB#32:                                @   in Loop: Header=BB127_31 Depth=1
	mvn	r0, #0
	ldr	r1, [r11, #-40]
	add	r0, r1, r0
	str	r0, [r11, #-40]
	b	.LBB127_31
.LBB127_33:
	sub	r2, r11, #28
	movw	r0, #2
	ldr	r1, [r11, #-40]
	ldr	r3, [r11, #-12]
	str	r1, [r3, #60]
	ldr	r1, [r11, #-12]
	ldr	r1, [r1, #56]
	movw	r3, :lower16:scalefac_band
	movt	r3, :upper16:scalefac_band
	add	r1, r3, r1, lsl #2
	ldr	r1, [r1, #4]
	str	r1, [r11, #-20]
	ldr	r1, [r11, #-40]
	ldr	r12, [r11, #-12]
	ldr	r12, [r12, #56]
	add	r1, r1, r12
	add	r1, r3, r1, lsl #2
	ldr	r1, [r1, #8]
	str	r1, [r11, #-24]
	ldr	r3, [r11, #-8]
	add	r1, r3, r1, lsl #2
	ldr	r12, [r11, #-16]
	add	r3, r3, r12, lsl #2
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r3
	bl	choose_table
	ldr	r1, [r11, #-12]
	str	r0, [r1, #40]
	b	.LBB127_37
.LBB127_34:
	movw	r0, :lower16:scalefac_band
	movt	r0, :upper16:scalefac_band
	movw	r1, #13
	movw	r2, #7
	ldr	r3, [r11, #-12]
	str	r2, [r3, #56]
	ldr	r2, [r11, #-12]
	str	r1, [r2, #60]
	ldr	r0, [r0, #32]
	str	r0, [r11, #-20]
	ldr	r0, [r11, #-16]
	str	r0, [r11, #-24]
	ldr	r0, [r11, #-20]
	ldr	r1, [r11, #-24]
	cmp	r0, r1
	ble	.LBB127_36
@ BB#35:
	ldr	r0, [r11, #-24]
	str	r0, [r11, #-20]
.LBB127_36:
	b	.LBB127_37
.LBB127_37:
	sub	r2, r11, #28
	movw	r0, #2
	ldr	r1, [r11, #-8]
	ldr	r3, [r11, #-20]
	add	r3, r1, r3, lsl #2
	sub	r12, r11, #28
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r1
	mov	r1, r3
	str	r2, [sp, #4]            @ 4-byte Spill
	mov	r2, r12
	bl	choose_table
	ldr	r1, [r11, #-12]
	str	r0, [r1, #32]
	ldr	r0, [r11, #-8]
	ldr	r1, [r11, #-20]
	add	r1, r0, r1, lsl #2
	ldr	r2, [r11, #-24]
	add	r0, r0, r2, lsl #2
	str	r0, [sp]                @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp]                @ 4-byte Reload
	ldr	r2, [sp, #4]            @ 4-byte Reload
	bl	choose_table
	ldr	r1, [r11, #-12]
	str	r0, [r1, #36]
	ldr	r0, [r11, #-28]
	str	r0, [r11, #-4]
.LBB127_38:
	ldr	r0, [r11, #-4]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end127:
	.size	count_bits_long, .Lfunc_end127-count_bits_long
	.cantunwind
	.fnend

	.p2align	2
	.type	choose_table,%function
	.code	32                      @ @choose_table
choose_table:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #64
	str	r0, [r11, #-8]
	str	r1, [r11, #-12]
	str	r2, [r11, #-16]
	ldr	r0, [r11, #-8]
	ldr	r1, [r11, #-12]
	bl	ix_max
	movw	r1, #8206
	str	r0, [r11, #-20]
	ldr	r0, [r11, #-20]
	cmp	r0, r1
	ble	.LBB128_2
@ BB#1:
	mvn	r0, #0
	ldr	r1, .LCPI128_0
	ldr	r2, [r11, #-16]
	str	r1, [r2]
	str	r0, [r11, #-4]
	b	.LBB128_33
.LBB128_2:
	ldr	r0, [r11, #-20]
	cmp	r0, #15
	bgt	.LBB128_19
@ BB#3:
	ldr	r0, [r11, #-20]
	cmp	r0, #0
	bne	.LBB128_5
@ BB#4:
	movw	r0, #0
	str	r0, [r11, #-4]
	b	.LBB128_33
.LBB128_5:
	ldr	r0, [r11, #-20]
	movw	r1, :lower16:huf_tbl_noESC
	movt	r1, :upper16:huf_tbl_noESC
	add	r0, r1, r0, lsl #2
	ldr	r0, [r0, #-4]
	str	r0, [r11, #-24]
	ldr	r1, [r11, #-8]
	ldr	r2, [r11, #-12]
	str	r0, [sp, #24]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	ldr	r2, [sp, #24]           @ 4-byte Reload
	bl	count_bit_noESC
	str	r0, [r11, #-28]
	ldr	r0, [r11, #-24]
	str	r0, [sp, #32]
	ldr	r0, [r11, #-24]
	sub	r0, r0, #2
	cmp	r0, #11
	str	r0, [sp, #20]           @ 4-byte Spill
	bhi	.LBB128_17
@ BB#6:
	ldr	r0, [sp, #20]           @ 4-byte Reload
	lsl	r1, r0, #2
	adr	r2, .LJTI128_0
	ldr	r1, [r1, r2]
	mov	pc, r1
@ BB#7:
	.p2align	2
.LJTI128_0:
	.long	.LBB128_11
	.long	.LBB128_17
	.long	.LBB128_17
	.long	.LBB128_11
	.long	.LBB128_17
	.long	.LBB128_8
	.long	.LBB128_17
	.long	.LBB128_17
	.long	.LBB128_8
	.long	.LBB128_17
	.long	.LBB128_17
	.long	.LBB128_14
.LBB128_8:
	ldr	r0, [sp, #32]
	add	r0, r0, #1
	str	r0, [sp, #32]
	ldr	r0, [sp, #32]
	bl	count_bit_noESC2
	str	r0, [sp, #28]
	ldr	r0, [r11, #-28]
	ldr	lr, [sp, #28]
	cmp	r0, lr
	ble	.LBB128_10
@ BB#9:
	ldr	r0, [sp, #28]
	str	r0, [r11, #-28]
	ldr	r0, [sp, #32]
	str	r0, [r11, #-24]
.LBB128_10:
	b	.LBB128_11
.LBB128_11:
	ldr	r0, [sp, #32]
	add	r0, r0, #1
	str	r0, [sp, #32]
	ldr	r0, [sp, #32]
	bl	count_bit_noESC2
	str	r0, [sp, #28]
	ldr	r0, [r11, #-28]
	ldr	lr, [sp, #28]
	cmp	r0, lr
	ble	.LBB128_13
@ BB#12:
	ldr	r0, [sp, #28]
	str	r0, [r11, #-28]
	ldr	r0, [sp, #32]
	str	r0, [r11, #-24]
.LBB128_13:
	b	.LBB128_18
.LBB128_14:
	ldr	r0, [sp, #32]
	add	r0, r0, #2
	str	r0, [sp, #32]
	ldr	r0, [sp, #32]
	bl	count_bit_noESC2
	str	r0, [sp, #28]
	ldr	r0, [r11, #-28]
	ldr	lr, [sp, #28]
	cmp	r0, lr
	ble	.LBB128_16
@ BB#15:
	ldr	r0, [sp, #28]
	str	r0, [r11, #-28]
	ldr	r0, [sp, #32]
	str	r0, [r11, #-24]
.LBB128_16:
	b	.LBB128_18
.LBB128_17:
	b	.LBB128_18
.LBB128_18:
	ldr	r0, [r11, #-28]
	ldr	r1, [r11, #-16]
	ldr	r2, [r1]
	add	r0, r2, r0
	str	r0, [r1]
	b	.LBB128_32
.LBB128_19:
	movw	r0, #24
	ldr	r1, [r11, #-20]
	sub	r1, r1, #15
	str	r1, [r11, #-20]
	str	r0, [sp, #32]
.LBB128_20:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #32]
	cmp	r0, #32
	bge	.LBB128_25
@ BB#21:                                @   in Loop: Header=BB128_20 Depth=1
	movw	r0, :lower16:ht
	movt	r0, :upper16:ht
	movw	r1, #4
	ldr	r2, [sp, #32]
	movw	r3, :lower16:ht
	movt	r3, :upper16:ht
	add	r2, r3, r2, lsl #4
	ldr	r2, [r2, #4]
	ldr	r3, [r11, #-20]
	cmp	r2, r3
	str	r0, [sp, #16]           @ 4-byte Spill
	str	r1, [sp, #12]           @ 4-byte Spill
	blt	.LBB128_23
@ BB#22:
	b	.LBB128_25
.LBB128_23:                             @   in Loop: Header=BB128_20 Depth=1
	b	.LBB128_24
.LBB128_24:                             @   in Loop: Header=BB128_20 Depth=1
	ldr	r0, [sp, #32]
	add	r0, r0, #1
	str	r0, [sp, #32]
	b	.LBB128_20
.LBB128_25:
	ldr	r0, [sp, #32]
	sub	r0, r0, #8
	str	r0, [r11, #-24]
.LBB128_26:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-24]
	cmp	r0, #24
	bge	.LBB128_31
@ BB#27:                                @   in Loop: Header=BB128_26 Depth=1
	movw	r0, :lower16:ht
	movt	r0, :upper16:ht
	movw	r1, #4
	ldr	r2, [r11, #-24]
	movw	r3, :lower16:ht
	movt	r3, :upper16:ht
	add	r2, r3, r2, lsl #4
	ldr	r2, [r2, #4]
	ldr	r3, [r11, #-20]
	cmp	r2, r3
	str	r0, [sp, #8]            @ 4-byte Spill
	str	r1, [sp, #4]            @ 4-byte Spill
	blt	.LBB128_29
@ BB#28:
	b	.LBB128_31
.LBB128_29:                             @   in Loop: Header=BB128_26 Depth=1
	b	.LBB128_30
.LBB128_30:                             @   in Loop: Header=BB128_26 Depth=1
	ldr	r0, [r11, #-24]
	add	r0, r0, #1
	str	r0, [r11, #-24]
	b	.LBB128_26
.LBB128_31:
	ldr	r0, [r11, #-8]
	ldr	r1, [r11, #-12]
	ldr	r2, [r11, #-24]
	ldr	r3, [sp, #32]
	ldr	r12, [r11, #-16]
	str	r12, [sp]
	bl	count_bit_ESC
	str	r0, [r11, #-24]
.LBB128_32:
	ldr	r0, [r11, #-24]
	str	r0, [r11, #-4]
.LBB128_33:
	ldr	r0, [r11, #-4]
	mov	sp, r11
	pop	{r11, pc}
	.p2align	2
@ BB#34:
.LCPI128_0:
	.long	100000                  @ 0x186a0
.Lfunc_end128:
	.size	choose_table, .Lfunc_end128-choose_table
	.cantunwind
	.fnend

	.p2align	2
	.type	ix_max,%function
	.code	32                      @ @ix_max
ix_max:
	.fnstart
@ BB#0:
	sub	sp, sp, #16
	movw	r2, #0
	str	r0, [sp, #12]
	str	r1, [sp, #8]
	str	r2, [sp, #4]
.LBB129_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #12]
	ldr	r1, [sp, #8]
	cmp	r0, r1
	bhs	.LBB129_7
@ BB#2:                                 @   in Loop: Header=BB129_1 Depth=1
	ldr	r0, [sp, #12]
	add	r1, r0, #4
	str	r1, [sp, #12]
	ldr	r0, [r0]
	str	r0, [sp]
	ldr	r0, [sp, #4]
	ldr	r1, [sp]
	cmp	r0, r1
	bge	.LBB129_4
@ BB#3:                                 @   in Loop: Header=BB129_1 Depth=1
	ldr	r0, [sp]
	str	r0, [sp, #4]
.LBB129_4:                              @   in Loop: Header=BB129_1 Depth=1
	ldr	r0, [sp, #12]
	add	r1, r0, #4
	str	r1, [sp, #12]
	ldr	r0, [r0]
	str	r0, [sp]
	ldr	r0, [sp, #4]
	ldr	r1, [sp]
	cmp	r0, r1
	bge	.LBB129_6
@ BB#5:                                 @   in Loop: Header=BB129_1 Depth=1
	ldr	r0, [sp]
	str	r0, [sp, #4]
.LBB129_6:                              @   in Loop: Header=BB129_1 Depth=1
	b	.LBB129_1
.LBB129_7:
	ldr	r0, [sp, #4]
	add	sp, sp, #16
	bx	lr
.Lfunc_end129:
	.size	ix_max, .Lfunc_end129-ix_max
	.cantunwind
	.fnend

	.p2align	2
	.type	count_bit_noESC,%function
	.code	32                      @ @count_bit_noESC
count_bit_noESC:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #48
	movw	r3, :lower16:cb_esc_buf
	movt	r3, :upper16:cb_esc_buf
	movw	r12, :lower16:ht
	movt	r12, :upper16:ht
	movw	lr, #4
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [r11, #-12]
	mov	r0, #0
	str	r0, [r11, #-16]
	str	r0, [r11, #-20]
	ldr	r0, [r11, #-12]
	movw	r1, :lower16:ht
	movt	r1, :upper16:ht
	add	r0, r1, r0, lsl #4
	ldr	r0, [r0, #12]
	str	r0, [sp, #24]
	str	r3, [sp, #20]
	str	r12, [sp, #8]           @ 4-byte Spill
	str	lr, [sp, #4]            @ 4-byte Spill
.LBB130_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-4]
	add	r1, r0, #4
	str	r1, [r11, #-4]
	ldr	r0, [r0]
	str	r0, [sp, #16]
	ldr	r0, [r11, #-4]
	add	r1, r0, #4
	str	r1, [r11, #-4]
	ldr	r0, [r0]
	str	r0, [sp, #12]
	ldr	r0, [sp, #16]
	cmp	r0, #0
	beq	.LBB130_3
@ BB#2:                                 @   in Loop: Header=BB130_1 Depth=1
	movw	r0, #4
	ldr	r1, [r11, #-20]
	add	r1, r1, #1
	str	r1, [r11, #-20]
	ldr	r1, [sp, #16]
	lsl	r1, r1, #4
	str	r1, [sp, #16]
	str	r0, [sp]                @ 4-byte Spill
.LBB130_3:                              @   in Loop: Header=BB130_1 Depth=1
	ldr	r0, [sp, #12]
	cmp	r0, #0
	beq	.LBB130_5
@ BB#4:                                 @   in Loop: Header=BB130_1 Depth=1
	ldr	r0, [r11, #-20]
	add	r0, r0, #1
	str	r0, [r11, #-20]
	ldr	r0, [sp, #12]
	ldr	r1, [sp, #16]
	add	r0, r1, r0
	str	r0, [sp, #16]
.LBB130_5:                              @   in Loop: Header=BB130_1 Depth=1
	ldr	r0, [sp, #16]
	ldr	r1, [sp, #20]
	add	r2, r1, #4
	str	r2, [sp, #20]
	str	r0, [r1]
	ldr	r0, [sp, #24]
	ldr	r1, [sp, #16]
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldr	r1, [r11, #-16]
	add	r0, r1, r0
	str	r0, [r11, #-16]
@ BB#6:                                 @   in Loop: Header=BB130_1 Depth=1
	ldr	r0, [r11, #-4]
	ldr	r1, [r11, #-8]
	cmp	r0, r1
	blo	.LBB130_1
@ BB#7:
	movw	r0, :lower16:cb_esc_end
	movt	r0, :upper16:cb_esc_end
	movw	r1, :lower16:cb_esc_sign
	movt	r1, :upper16:cb_esc_sign
	ldr	r2, [r11, #-20]
	str	r2, [r1]
	ldr	r1, [sp, #20]
	str	r1, [r0]
	ldr	r0, [r11, #-16]
	ldr	r1, [r11, #-20]
	add	r0, r0, r1
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end130:
	.size	count_bit_noESC, .Lfunc_end130-count_bit_noESC
	.cantunwind
	.fnend

	.p2align	2
	.type	count_bit_noESC2,%function
	.code	32                      @ @count_bit_noESC2
count_bit_noESC2:
	.fnstart
@ BB#0:
	sub	sp, sp, #20
	movw	r1, :lower16:cb_esc_buf
	movt	r1, :upper16:cb_esc_buf
	movw	r2, :lower16:cb_esc_sign
	movt	r2, :upper16:cb_esc_sign
	str	r0, [sp, #16]
	ldr	r0, [r2]
	str	r0, [sp, #12]
	str	r1, [sp, #8]
.LBB131_1:                              @ =>This Inner Loop Header: Depth=1
	movw	r0, :lower16:ht
	movt	r0, :upper16:ht
	movw	r1, #4
	ldr	r2, [sp, #16]
	movw	r3, :lower16:ht
	movt	r3, :upper16:ht
	add	r2, r3, r2, lsl #4
	ldr	r2, [r2, #12]
	ldr	r3, [sp, #8]
	add	r12, r3, #4
	str	r12, [sp, #8]
	ldr	r3, [r3]
	add	r2, r2, r3
	ldrb	r2, [r2]
	ldr	r3, [sp, #12]
	add	r2, r3, r2
	str	r2, [sp, #12]
	str	r0, [sp, #4]            @ 4-byte Spill
	str	r1, [sp]                @ 4-byte Spill
@ BB#2:                                 @   in Loop: Header=BB131_1 Depth=1
	movw	r0, :lower16:cb_esc_end
	movt	r0, :upper16:cb_esc_end
	ldr	r1, [sp, #8]
	ldr	r0, [r0]
	cmp	r1, r0
	blo	.LBB131_1
@ BB#3:
	ldr	r0, [sp, #12]
	add	sp, sp, #20
	bx	lr
.Lfunc_end131:
	.size	count_bit_noESC2, .Lfunc_end131-count_bit_noESC2
	.cantunwind
	.fnend

	.p2align	2
	.type	count_bit_ESC,%function
	.code	32                      @ @count_bit_ESC
count_bit_ESC:
	.fnstart
@ BB#0:
	push	{r4, r5, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #60
	ldr	r12, [r11, #8]
	movw	lr, #0
	movw	r4, :lower16:ht
	movt	r4, :upper16:ht
	movw	r5, #4
	str	r0, [r11, #-12]
	str	r1, [r11, #-16]
	str	r2, [r11, #-20]
	str	r3, [r11, #-24]
	str	r12, [r11, #-28]
	ldr	r0, [r11, #-20]
	movw	r1, :lower16:ht
	movt	r1, :upper16:ht
	ldr	r0, [r1, r0, lsl #4]
	str	r0, [r11, #-32]
	ldr	r0, [r11, #-24]
	add	r0, r1, r0, lsl #4
	ldr	r0, [r0]
	str	r0, [sp, #32]
	str	lr, [sp, #28]
	str	lr, [sp, #24]
	str	lr, [sp, #20]
	str	r4, [sp, #8]            @ 4-byte Spill
	str	r5, [sp, #4]            @ 4-byte Spill
.LBB132_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-12]
	ldr	r1, [r11, #-16]
	cmp	r0, r1
	bhs	.LBB132_11
@ BB#2:                                 @   in Loop: Header=BB132_1 Depth=1
	ldr	r0, [r11, #-12]
	add	r1, r0, #4
	str	r1, [r11, #-12]
	ldr	r0, [r0]
	str	r0, [sp, #16]
	ldr	r0, [r11, #-12]
	add	r1, r0, #4
	str	r1, [r11, #-12]
	ldr	r0, [r0]
	str	r0, [sp, #12]
	ldr	r0, [sp, #16]
	cmp	r0, #0
	beq	.LBB132_6
@ BB#3:                                 @   in Loop: Header=BB132_1 Depth=1
	ldr	r0, [sp, #28]
	add	r0, r0, #1
	str	r0, [sp, #28]
	ldr	r0, [sp, #16]
	cmp	r0, #14
	ble	.LBB132_5
@ BB#4:                                 @   in Loop: Header=BB132_1 Depth=1
	movw	r0, #15
	str	r0, [sp, #16]
	ldr	r0, [r11, #-32]
	ldr	r1, [sp, #24]
	add	r0, r1, r0
	str	r0, [sp, #24]
	ldr	r0, [sp, #32]
	ldr	r1, [sp, #20]
	add	r0, r1, r0
	str	r0, [sp, #20]
.LBB132_5:                              @   in Loop: Header=BB132_1 Depth=1
	movw	r0, #4
	ldr	r1, [sp, #16]
	lsl	r1, r1, #4
	str	r1, [sp, #16]
	str	r0, [sp]                @ 4-byte Spill
.LBB132_6:                              @   in Loop: Header=BB132_1 Depth=1
	ldr	r0, [sp, #12]
	cmp	r0, #0
	beq	.LBB132_10
@ BB#7:                                 @   in Loop: Header=BB132_1 Depth=1
	ldr	r0, [sp, #28]
	add	r0, r0, #1
	str	r0, [sp, #28]
	ldr	r0, [sp, #12]
	cmp	r0, #14
	ble	.LBB132_9
@ BB#8:                                 @   in Loop: Header=BB132_1 Depth=1
	movw	r0, #15
	str	r0, [sp, #12]
	ldr	r0, [r11, #-32]
	ldr	r1, [sp, #24]
	add	r0, r1, r0
	str	r0, [sp, #24]
	ldr	r0, [sp, #32]
	ldr	r1, [sp, #20]
	add	r0, r1, r0
	str	r0, [sp, #20]
.LBB132_9:                              @   in Loop: Header=BB132_1 Depth=1
	ldr	r0, [sp, #12]
	ldr	r1, [sp, #16]
	add	r0, r1, r0
	str	r0, [sp, #16]
.LBB132_10:                             @   in Loop: Header=BB132_1 Depth=1
	movw	r0, :lower16:ht
	movt	r0, :upper16:ht
	ldr	r1, [r0, #268]
	ldr	r2, [sp, #16]
	add	r1, r1, r2
	ldrb	r1, [r1]
	ldr	r2, [sp, #24]
	add	r1, r2, r1
	str	r1, [sp, #24]
	ldr	r0, [r0, #396]
	ldr	r1, [sp, #16]
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldr	r1, [sp, #20]
	add	r0, r1, r0
	str	r0, [sp, #20]
	b	.LBB132_1
.LBB132_11:
	ldr	r0, [sp, #24]
	ldr	r1, [sp, #20]
	cmp	r0, r1
	ble	.LBB132_13
@ BB#12:
	ldr	r0, [sp, #20]
	str	r0, [sp, #24]
	ldr	r0, [r11, #-24]
	str	r0, [r11, #-20]
.LBB132_13:
	ldr	r0, [sp, #28]
	ldr	r1, [sp, #24]
	add	r0, r0, r1
	ldr	r1, [r11, #-28]
	ldr	r2, [r1]
	add	r0, r2, r0
	str	r0, [r1]
	ldr	r0, [r11, #-20]
	sub	sp, r11, #8
	pop	{r4, r5, r11, pc}
.Lfunc_end132:
	.size	count_bit_ESC, .Lfunc_end132-count_bit_ESC
	.cantunwind
	.fnend

	.p2align	2
	.type	count_bit_short_noESC,%function
	.code	32                      @ @count_bit_short_noESC
count_bit_short_noESC:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #52
	movw	r3, :lower16:cb_esc_buf
	movt	r3, :upper16:cb_esc_buf
	movw	r12, :lower16:ht
	movt	r12, :upper16:ht
	movw	lr, #4
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [r11, #-12]
	mov	r0, #0
	str	r0, [r11, #-16]
	str	r0, [r11, #-20]
	ldr	r0, [r11, #-12]
	movw	r1, :lower16:ht
	movt	r1, :upper16:ht
	add	r0, r1, r0, lsl #4
	ldr	r0, [r0, #12]
	str	r0, [r11, #-24]
	str	r3, [sp, #24]
	str	r12, [sp, #8]           @ 4-byte Spill
	str	lr, [sp, #4]            @ 4-byte Spill
.LBB133_1:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB133_2 Depth 2
	movw	r0, #0
	str	r0, [sp, #20]
.LBB133_2:                              @   Parent Loop BB133_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #20]
	cmp	r0, #3
	bge	.LBB133_9
@ BB#3:                                 @   in Loop: Header=BB133_2 Depth=2
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #12]
	str	r0, [sp, #16]
	ldr	r0, [r11, #-4]
	add	r1, r0, #4
	str	r1, [r11, #-4]
	ldr	r0, [r0]
	str	r0, [sp, #12]
	ldr	r0, [sp, #12]
	cmp	r0, #0
	beq	.LBB133_5
@ BB#4:                                 @   in Loop: Header=BB133_2 Depth=2
	movw	r0, #4
	ldr	r1, [r11, #-20]
	add	r1, r1, #1
	str	r1, [r11, #-20]
	ldr	r1, [sp, #12]
	lsl	r1, r1, #4
	str	r1, [sp, #12]
	str	r0, [sp]                @ 4-byte Spill
.LBB133_5:                              @   in Loop: Header=BB133_2 Depth=2
	ldr	r0, [sp, #16]
	cmp	r0, #0
	beq	.LBB133_7
@ BB#6:                                 @   in Loop: Header=BB133_2 Depth=2
	ldr	r0, [r11, #-20]
	add	r0, r0, #1
	str	r0, [r11, #-20]
	ldr	r0, [sp, #16]
	ldr	r1, [sp, #12]
	add	r0, r1, r0
	str	r0, [sp, #12]
.LBB133_7:                              @   in Loop: Header=BB133_2 Depth=2
	ldr	r0, [sp, #12]
	ldr	r1, [sp, #24]
	add	r2, r1, #4
	str	r2, [sp, #24]
	str	r0, [r1]
	ldr	r0, [r11, #-24]
	ldr	r1, [sp, #12]
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldr	r1, [r11, #-16]
	add	r0, r1, r0
	str	r0, [r11, #-16]
@ BB#8:                                 @   in Loop: Header=BB133_2 Depth=2
	ldr	r0, [sp, #20]
	add	r0, r0, #1
	str	r0, [sp, #20]
	b	.LBB133_2
.LBB133_9:                              @   in Loop: Header=BB133_1 Depth=1
	ldr	r0, [r11, #-4]
	add	r0, r0, #12
	str	r0, [r11, #-4]
@ BB#10:                                @   in Loop: Header=BB133_1 Depth=1
	ldr	r0, [r11, #-4]
	ldr	r1, [r11, #-8]
	cmp	r0, r1
	blo	.LBB133_1
@ BB#11:
	movw	r0, :lower16:cb_esc_end
	movt	r0, :upper16:cb_esc_end
	movw	r1, :lower16:cb_esc_sign
	movt	r1, :upper16:cb_esc_sign
	ldr	r2, [r11, #-20]
	str	r2, [r1]
	ldr	r1, [sp, #24]
	str	r1, [r0]
	ldr	r0, [r11, #-16]
	ldr	r1, [r11, #-20]
	add	r0, r0, r1
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end133:
	.size	count_bit_short_noESC, .Lfunc_end133-count_bit_short_noESC
	.cantunwind
	.fnend

	.p2align	2
	.type	count_bit_short_ESC,%function
	.code	32                      @ @count_bit_short_ESC
count_bit_short_ESC:
	.fnstart
@ BB#0:
	push	{r4, r5, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #64
	ldr	r12, [r11, #8]
	movw	lr, #0
	movw	r4, :lower16:ht
	movt	r4, :upper16:ht
	movw	r5, #4
	str	r0, [r11, #-12]
	str	r1, [r11, #-16]
	str	r2, [r11, #-20]
	str	r3, [r11, #-24]
	str	r12, [r11, #-28]
	ldr	r0, [r11, #-20]
	movw	r1, :lower16:ht
	movt	r1, :upper16:ht
	ldr	r0, [r1, r0, lsl #4]
	str	r0, [r11, #-32]
	ldr	r0, [r11, #-24]
	add	r0, r1, r0, lsl #4
	ldr	r0, [r0]
	str	r0, [sp, #36]
	str	lr, [sp, #32]
	str	lr, [sp, #28]
	str	lr, [sp, #24]
	str	r4, [sp, #8]            @ 4-byte Spill
	str	r5, [sp, #4]            @ 4-byte Spill
.LBB134_1:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB134_2 Depth 2
	movw	r0, #0
	str	r0, [sp, #20]
.LBB134_2:                              @   Parent Loop BB134_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #20]
	cmp	r0, #3
	bge	.LBB134_13
@ BB#3:                                 @   in Loop: Header=BB134_2 Depth=2
	ldr	r0, [r11, #-12]
	ldr	r0, [r0, #12]
	str	r0, [sp, #16]
	ldr	r0, [r11, #-12]
	add	r1, r0, #4
	str	r1, [r11, #-12]
	ldr	r0, [r0]
	str	r0, [sp, #12]
	ldr	r0, [sp, #12]
	cmp	r0, #0
	beq	.LBB134_7
@ BB#4:                                 @   in Loop: Header=BB134_2 Depth=2
	ldr	r0, [sp, #32]
	add	r0, r0, #1
	str	r0, [sp, #32]
	ldr	r0, [sp, #12]
	cmp	r0, #14
	ble	.LBB134_6
@ BB#5:                                 @   in Loop: Header=BB134_2 Depth=2
	movw	r0, #15
	str	r0, [sp, #12]
	ldr	r0, [r11, #-32]
	ldr	r1, [sp, #28]
	add	r0, r1, r0
	str	r0, [sp, #28]
	ldr	r0, [sp, #36]
	ldr	r1, [sp, #24]
	add	r0, r1, r0
	str	r0, [sp, #24]
.LBB134_6:                              @   in Loop: Header=BB134_2 Depth=2
	movw	r0, #4
	ldr	r1, [sp, #12]
	lsl	r1, r1, #4
	str	r1, [sp, #12]
	str	r0, [sp]                @ 4-byte Spill
.LBB134_7:                              @   in Loop: Header=BB134_2 Depth=2
	ldr	r0, [sp, #16]
	cmp	r0, #0
	beq	.LBB134_11
@ BB#8:                                 @   in Loop: Header=BB134_2 Depth=2
	ldr	r0, [sp, #32]
	add	r0, r0, #1
	str	r0, [sp, #32]
	ldr	r0, [sp, #16]
	cmp	r0, #14
	ble	.LBB134_10
@ BB#9:                                 @   in Loop: Header=BB134_2 Depth=2
	movw	r0, #15
	str	r0, [sp, #16]
	ldr	r0, [r11, #-32]
	ldr	r1, [sp, #28]
	add	r0, r1, r0
	str	r0, [sp, #28]
	ldr	r0, [sp, #36]
	ldr	r1, [sp, #24]
	add	r0, r1, r0
	str	r0, [sp, #24]
.LBB134_10:                             @   in Loop: Header=BB134_2 Depth=2
	ldr	r0, [sp, #16]
	ldr	r1, [sp, #12]
	add	r0, r1, r0
	str	r0, [sp, #12]
.LBB134_11:                             @   in Loop: Header=BB134_2 Depth=2
	movw	r0, :lower16:ht
	movt	r0, :upper16:ht
	ldr	r1, [r0, #268]
	ldr	r2, [sp, #12]
	add	r1, r1, r2
	ldrb	r1, [r1]
	ldr	r2, [sp, #28]
	add	r1, r2, r1
	str	r1, [sp, #28]
	ldr	r0, [r0, #396]
	ldr	r1, [sp, #12]
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldr	r1, [sp, #24]
	add	r0, r1, r0
	str	r0, [sp, #24]
@ BB#12:                                @   in Loop: Header=BB134_2 Depth=2
	ldr	r0, [sp, #20]
	add	r0, r0, #1
	str	r0, [sp, #20]
	b	.LBB134_2
.LBB134_13:                             @   in Loop: Header=BB134_1 Depth=1
	ldr	r0, [r11, #-12]
	add	r0, r0, #12
	str	r0, [r11, #-12]
@ BB#14:                                @   in Loop: Header=BB134_1 Depth=1
	ldr	r0, [r11, #-12]
	ldr	r1, [r11, #-16]
	cmp	r0, r1
	blo	.LBB134_1
@ BB#15:
	ldr	r0, [sp, #28]
	ldr	r1, [sp, #24]
	cmp	r0, r1
	ble	.LBB134_17
@ BB#16:
	ldr	r0, [sp, #24]
	str	r0, [sp, #28]
	ldr	r0, [r11, #-24]
	str	r0, [r11, #-20]
.LBB134_17:
	ldr	r0, [sp, #32]
	ldr	r1, [sp, #28]
	add	r0, r0, r1
	ldr	r1, [r11, #-28]
	ldr	r2, [r1]
	add	r0, r2, r0
	str	r0, [r1]
	ldr	r0, [r11, #-20]
	sub	sp, r11, #8
	pop	{r4, r5, r11, pc}
.Lfunc_end134:
	.size	count_bit_short_ESC, .Lfunc_end134-count_bit_short_ESC
	.cantunwind
	.fnend

	.globl	best_huffman_divide
	.p2align	2
	.type	best_huffman_divide,%function
	.code	32                      @ @best_huffman_divide
best_huffman_divide:
	.fnstart
@ BB#0:
	push	{r4, r10, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #432
	movw	r12, #2
	add	lr, sp, #76
	movw	r4, #1
	str	r0, [r11, #-12]
	str	r1, [r11, #-16]
	str	r2, [r11, #-20]
	str	r3, [r11, #-24]
	ldr	r1, [r11, #-20]
	add	r0, sp, #76
	mov	r2, #112
	str	r12, [sp, #72]          @ 4-byte Spill
	str	lr, [sp, #68]           @ 4-byte Spill
	str	r4, [sp, #64]           @ 4-byte Spill
	bl	memcpy
	ldr	r1, [sp, #80]
	lsl	r1, r1, #1
	str	r1, [r11, #-48]
	ldr	r1, [sp, #68]           @ 4-byte Reload
	str	r1, [r11, #-28]
	ldr	r2, [sp, #72]           @ 4-byte Reload
	str	r2, [r11, #-32]
	str	r0, [sp, #60]           @ 4-byte Spill
.LBB135_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-32]
	cmp	r0, #23
	bge	.LBB135_6
@ BB#2:                                 @   in Loop: Header=BB135_1 Depth=1
	movw	r0, :lower16:scalefac_band
	movt	r0, :upper16:scalefac_band
	movw	r1, #2
	ldr	r2, [r11, #-32]
	movw	r3, :lower16:scalefac_band
	movt	r3, :upper16:scalefac_band
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	str	r2, [r11, #-44]
	ldr	r2, [r11, #-44]
	ldr	r3, [r11, #-48]
	cmp	r2, r3
	str	r0, [sp, #56]           @ 4-byte Spill
	str	r1, [sp, #52]           @ 4-byte Spill
	ble	.LBB135_4
@ BB#3:
	b	.LBB135_6
.LBB135_4:                              @   in Loop: Header=BB135_1 Depth=1
	add	r0, sp, #188
	movw	r1, #2
	ldr	r2, [sp, #152]
	ldr	r3, [sp, #164]
	add	r2, r3, r2
	ldr	r3, [r11, #-32]
	sub	r12, r11, #152
	str	r2, [r12, r3, lsl #2]
	ldr	r2, [r11, #-24]
	ldr	r3, [r11, #-44]
	add	r3, r2, r3, lsl #2
	ldr	lr, [r11, #-48]
	add	r2, r2, lr, lsl #2
	ldr	lr, [r11, #-32]
	add	r12, r12, lr, lsl #2
	str	r0, [sp, #48]           @ 4-byte Spill
	mov	r0, r3
	str	r1, [sp, #44]           @ 4-byte Spill
	mov	r1, r2
	mov	r2, r12
	bl	choose_table
	ldr	r1, [r11, #-32]
	add	r2, sp, #188
	add	r1, r2, r1, lsl #2
	str	r0, [r1]
@ BB#5:                                 @   in Loop: Header=BB135_1 Depth=1
	ldr	r0, [r11, #-32]
	add	r0, r0, #1
	str	r0, [r11, #-32]
	b	.LBB135_1
.LBB135_6:
	b	.LBB135_7
.LBB135_7:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-32]
	cmp	r0, #24
	bgt	.LBB135_10
@ BB#8:                                 @   in Loop: Header=BB135_7 Depth=1
	ldr	r0, .LCPI135_0
	sub	r1, r11, #152
	movw	r2, #2
	ldr	r3, [r11, #-32]
	sub	r12, r11, #152
	add	r3, r12, r3, lsl #2
	str	r0, [r3]
	str	r2, [sp, #40]           @ 4-byte Spill
	str	r1, [sp, #36]           @ 4-byte Spill
@ BB#9:                                 @   in Loop: Header=BB135_7 Depth=1
	ldr	r0, [r11, #-32]
	add	r0, r0, #1
	str	r0, [r11, #-32]
	b	.LBB135_7
.LBB135_10:
	movw	r0, #0
	str	r0, [r11, #-32]
.LBB135_11:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB135_17 Depth 2
	ldr	r0, [r11, #-32]
	cmp	r0, #16
	bge	.LBB135_26
@ BB#12:                                @   in Loop: Header=BB135_11 Depth=1
	movw	r0, :lower16:scalefac_band
	movt	r0, :upper16:scalefac_band
	movw	r1, #2
	ldr	r2, [r11, #-32]
	add	r2, r2, #1
	movw	r3, :lower16:scalefac_band
	movt	r3, :upper16:scalefac_band
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	str	r2, [r11, #-40]
	ldr	r2, [r11, #-40]
	ldr	r3, [r11, #-48]
	cmp	r2, r3
	str	r0, [sp, #32]           @ 4-byte Spill
	str	r1, [sp, #28]           @ 4-byte Spill
	ble	.LBB135_14
@ BB#13:
	b	.LBB135_26
.LBB135_14:                             @   in Loop: Header=BB135_11 Depth=1
	sub	r2, r11, #52
	movw	r0, #2
	ldr	r1, [r11, #-32]
	str	r1, [sp, #132]
	mov	r1, #0
	str	r1, [r11, #-52]
	ldr	r1, [r11, #-24]
	mov	r3, r1
	ldr	r12, [r11, #-40]
	add	r1, r1, r12, lsl #2
	str	r0, [sp, #24]           @ 4-byte Spill
	mov	r0, r3
	bl	choose_table
	str	r0, [sp, #108]
	ldr	r0, [r11, #-20]
	ldr	r0, [r0]
	ldr	r1, [r11, #-52]
	cmp	r0, r1
	bge	.LBB135_16
@ BB#15:
	b	.LBB135_26
.LBB135_16:                             @   in Loop: Header=BB135_11 Depth=1
	movw	r0, #0
	str	r0, [r11, #-36]
.LBB135_17:                             @   Parent Loop BB135_11 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-36]
	cmp	r0, #8
	bge	.LBB135_24
@ BB#18:                                @   in Loop: Header=BB135_17 Depth=2
	sub	r0, r11, #152
	movw	r1, #2
	ldr	r2, [r11, #-52]
	ldr	r3, [r11, #-32]
	ldr	r12, [r11, #-36]
	add	r3, r3, r12
	add	r3, r3, #2
	sub	r12, r11, #152
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	add	r2, r2, r3
	ldr	r3, [r11, #-28]
	str	r2, [r3]
	ldr	r2, [r11, #-20]
	ldr	r2, [r2]
	ldr	r3, [r11, #-28]
	ldr	r3, [r3]
	cmp	r2, r3
	str	r0, [sp, #20]           @ 4-byte Spill
	str	r1, [sp, #16]           @ 4-byte Spill
	bge	.LBB135_20
@ BB#19:                                @   in Loop: Header=BB135_17 Depth=2
	b	.LBB135_23
.LBB135_20:                             @   in Loop: Header=BB135_17 Depth=2
	movw	r0, #2
	ldr	r1, [r11, #-32]
	ldr	r2, [r11, #-36]
	add	r1, r1, r2
	movw	r2, :lower16:scalefac_band
	movt	r2, :upper16:scalefac_band
	add	r1, r2, r1, lsl #2
	ldr	r1, [r1, #8]
	str	r1, [r11, #-44]
	ldr	r2, [r11, #-24]
	ldr	r3, [r11, #-40]
	add	r3, r2, r3, lsl #2
	add	r1, r2, r1, lsl #2
	ldr	r2, [r11, #-28]
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r3
	bl	choose_table
	str	r0, [sp, #112]
	ldr	r0, [r11, #-20]
	ldr	r0, [r0]
	ldr	r1, [r11, #-28]
	ldr	r1, [r1]
	cmp	r0, r1
	bge	.LBB135_22
@ BB#21:                                @   in Loop: Header=BB135_17 Depth=2
	b	.LBB135_23
.LBB135_22:                             @   in Loop: Header=BB135_17 Depth=2
	movw	r2, #112
	add	r0, sp, #76
	add	r1, sp, #188
	movw	r3, #2
	ldr	r12, [r11, #-36]
	str	r12, [sp, #136]
	ldr	r12, [r11, #-32]
	ldr	lr, [r11, #-36]
	add	r12, r12, lr
	add	r12, r12, #2
	add	lr, sp, #188
	add	r12, lr, r12, lsl #2
	ldr	r12, [r12]
	str	r12, [sp, #116]
	ldr	r12, [r11, #-20]
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r12
	ldr	r12, [sp, #8]           @ 4-byte Reload
	str	r1, [sp, #4]            @ 4-byte Spill
	mov	r1, r12
	str	r3, [sp]                @ 4-byte Spill
	bl	memcpy
.LBB135_23:                             @   in Loop: Header=BB135_17 Depth=2
	ldr	r0, [r11, #-36]
	add	r0, r0, #1
	str	r0, [r11, #-36]
	b	.LBB135_17
.LBB135_24:                             @   in Loop: Header=BB135_11 Depth=1
	b	.LBB135_25
.LBB135_25:                             @   in Loop: Header=BB135_11 Depth=1
	ldr	r0, [r11, #-32]
	add	r0, r0, #1
	str	r0, [r11, #-32]
	b	.LBB135_11
.LBB135_26:
	sub	sp, r11, #8
	pop	{r4, r10, r11, pc}
	.p2align	2
@ BB#27:
.LCPI135_0:
	.long	100000                  @ 0x186a0
.Lfunc_end135:
	.size	best_huffman_divide, .Lfunc_end135-best_huffman_divide
	.cantunwind
	.fnend

	.globl	best_scalefac_store
	.p2align	2
	.type	best_scalefac_store,%function
	.code	32                      @ @best_scalefac_store
best_scalefac_store:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r10, r11, lr}
	add	r11, sp, #16
	sub	sp, sp, #144
	ldr	r12, [r11, #12]
	ldr	lr, [r11, #8]
	movw	r4, #0
	movw	r5, #112
	movw	r6, #224
	str	r0, [r11, #-20]
	str	r1, [r11, #-24]
	str	r2, [r11, #-28]
	str	r3, [r11, #-32]
	str	lr, [r11, #-36]
	str	r12, [r11, #-40]
	ldr	r0, [r11, #-36]
	add	r0, r0, #44
	ldr	r1, [r11, #-24]
	mul	r1, r1, r6
	add	r0, r0, r1
	ldr	r1, [r11, #-28]
	mul	r1, r1, r5
	add	r0, r0, r1
	str	r0, [r11, #-44]
	str	r4, [r11, #-48]
.LBB136_1:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB136_4 Depth 2
	ldr	r0, [r11, #-48]
	ldr	r1, [r11, #-44]
	ldr	r1, [r1, #80]
	cmp	r0, r1
	bhs	.LBB136_14
@ BB#2:                                 @   in Loop: Header=BB136_1 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-40]
	ldr	r2, [r11, #-24]
	mov	r3, #488
	mla	r1, r2, r3, r1
	ldr	r2, [r11, #-28]
	mov	r3, #244
	mla	r1, r2, r3, r1
	mov	r2, r1
	ldr	r3, [r11, #-48]
	add	r1, r1, r3, lsl #2
	ldr	r1, [r1]
	cmp	r1, #0
	str	r0, [sp, #80]           @ 4-byte Spill
	str	r2, [sp, #76]           @ 4-byte Spill
	ble	.LBB136_12
@ BB#3:                                 @   in Loop: Header=BB136_1 Depth=1
	movw	r0, :lower16:scalefac_band
	movt	r0, :upper16:scalefac_band
	movw	r1, #2
	ldr	r2, [r11, #-48]
	movw	r3, :lower16:scalefac_band
	movt	r3, :upper16:scalefac_band
	ldr	r2, [r3, r2, lsl #2]
	str	r2, [r11, #-60]
	ldr	r2, [r11, #-48]
	add	r2, r2, #1
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	str	r2, [r11, #-64]
	ldr	r2, [r11, #-60]
	str	r2, [r11, #-56]
	str	r0, [sp, #72]           @ 4-byte Spill
	str	r1, [sp, #68]           @ 4-byte Spill
.LBB136_4:                              @   Parent Loop BB136_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-56]
	ldr	r1, [r11, #-64]
	cmp	r0, r1
	bge	.LBB136_9
@ BB#5:                                 @   in Loop: Header=BB136_4 Depth=2
	movw	r0, #2
	ldr	r1, [r11, #-32]
	ldr	r2, [r11, #-24]
	add	r2, r2, r2, lsl #3
	add	r1, r1, r2, lsl #9
	ldr	r2, [r11, #-28]
	add	r2, r2, r2, lsl #3
	add	r1, r1, r2, lsl #8
	ldr	r2, [r11, #-56]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	cmp	r1, #0
	str	r0, [sp, #64]           @ 4-byte Spill
	beq	.LBB136_7
@ BB#6:                                 @   in Loop: Header=BB136_1 Depth=1
	b	.LBB136_9
.LBB136_7:                              @   in Loop: Header=BB136_4 Depth=2
	b	.LBB136_8
.LBB136_8:                              @   in Loop: Header=BB136_4 Depth=2
	ldr	r0, [r11, #-56]
	add	r0, r0, #1
	str	r0, [r11, #-56]
	b	.LBB136_4
.LBB136_9:                              @   in Loop: Header=BB136_1 Depth=1
	ldr	r0, [r11, #-56]
	ldr	r1, [r11, #-64]
	cmp	r0, r1
	bne	.LBB136_11
@ BB#10:                                @   in Loop: Header=BB136_1 Depth=1
	movw	r0, #0
	movw	r1, #2
	ldr	r2, [r11, #-40]
	ldr	r3, [r11, #-24]
	mov	r12, #488
	mla	r2, r3, r12, r2
	ldr	r3, [r11, #-28]
	mov	r12, #244
	mla	r2, r3, r12, r2
	mov	r3, r2
	ldr	r12, [r11, #-48]
	add	r2, r2, r12, lsl #2
	str	r0, [r2]
	str	r3, [sp, #60]           @ 4-byte Spill
	str	r1, [sp, #56]           @ 4-byte Spill
.LBB136_11:                             @   in Loop: Header=BB136_1 Depth=1
	b	.LBB136_12
.LBB136_12:                             @   in Loop: Header=BB136_1 Depth=1
	b	.LBB136_13
.LBB136_13:                             @   in Loop: Header=BB136_1 Depth=1
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB136_1
.LBB136_14:
	movw	r0, #0
	str	r0, [r11, #-52]
.LBB136_15:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB136_17 Depth 2
                                        @       Child Loop BB136_20 Depth 3
	ldr	r0, [r11, #-52]
	cmp	r0, #3
	bge	.LBB136_32
@ BB#16:                                @   in Loop: Header=BB136_15 Depth=1
	ldr	r0, [r11, #-44]
	ldr	r0, [r0, #84]
	str	r0, [r11, #-48]
.LBB136_17:                             @   Parent Loop BB136_15 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB136_20 Depth 3
	ldr	r0, [r11, #-48]
	cmp	r0, #12
	bge	.LBB136_30
@ BB#18:                                @   in Loop: Header=BB136_17 Depth=2
	movw	r0, #2
	ldr	r1, [r11, #-40]
	ldr	r2, [r11, #-24]
	mov	r3, #488
	mla	r1, r2, r3, r1
	ldr	r2, [r11, #-28]
	mov	r3, #244
	mla	r1, r2, r3, r1
	ldr	r2, [r11, #-48]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #2
	add	r1, r1, #88
	ldr	r2, [r11, #-52]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	cmp	r1, #0
	str	r0, [sp, #52]           @ 4-byte Spill
	ble	.LBB136_28
@ BB#19:                                @   in Loop: Header=BB136_17 Depth=2
	movw	r0, :lower16:scalefac_band
	movt	r0, :upper16:scalefac_band
	add	r0, r0, #92
	movw	r1, #2
	ldr	r2, [r11, #-48]
	movw	r3, :lower16:scalefac_band
	movt	r3, :upper16:scalefac_band
	add	r3, r3, #92
	ldr	r2, [r3, r2, lsl #2]
	str	r2, [r11, #-60]
	ldr	r2, [r11, #-48]
	add	r2, r2, #1
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	str	r2, [r11, #-64]
	ldr	r2, [r11, #-60]
	str	r2, [r11, #-56]
	str	r0, [sp, #48]           @ 4-byte Spill
	str	r1, [sp, #44]           @ 4-byte Spill
.LBB136_20:                             @   Parent Loop BB136_15 Depth=1
                                        @     Parent Loop BB136_17 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-56]
	ldr	r1, [r11, #-64]
	cmp	r0, r1
	bge	.LBB136_25
@ BB#21:                                @   in Loop: Header=BB136_20 Depth=3
	movw	r0, #2
	ldr	r1, [r11, #-32]
	ldr	r2, [r11, #-24]
	add	r2, r2, r2, lsl #3
	add	r1, r1, r2, lsl #9
	ldr	r2, [r11, #-28]
	add	r2, r2, r2, lsl #3
	add	r1, r1, r2, lsl #8
	ldr	r2, [r11, #-56]
	add	r2, r2, r2, lsl #1
	ldr	r3, [r11, #-52]
	add	r2, r2, r3
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	cmp	r1, #0
	str	r0, [sp, #40]           @ 4-byte Spill
	beq	.LBB136_23
@ BB#22:                                @   in Loop: Header=BB136_17 Depth=2
	b	.LBB136_25
.LBB136_23:                             @   in Loop: Header=BB136_20 Depth=3
	b	.LBB136_24
.LBB136_24:                             @   in Loop: Header=BB136_20 Depth=3
	ldr	r0, [r11, #-56]
	add	r0, r0, #1
	str	r0, [r11, #-56]
	b	.LBB136_20
.LBB136_25:                             @   in Loop: Header=BB136_17 Depth=2
	ldr	r0, [r11, #-56]
	ldr	r1, [r11, #-64]
	cmp	r0, r1
	bne	.LBB136_27
@ BB#26:                                @   in Loop: Header=BB136_17 Depth=2
	movw	r0, #0
	movw	r1, #2
	ldr	r2, [r11, #-40]
	ldr	r3, [r11, #-24]
	mov	r12, #488
	mla	r2, r3, r12, r2
	ldr	r3, [r11, #-28]
	mov	r12, #244
	mla	r2, r3, r12, r2
	ldr	r3, [r11, #-48]
	add	r3, r3, r3, lsl #1
	add	r2, r2, r3, lsl #2
	add	r2, r2, #88
	ldr	r3, [r11, #-52]
	add	r2, r2, r3, lsl #2
	str	r0, [r2]
	str	r1, [sp, #36]           @ 4-byte Spill
.LBB136_27:                             @   in Loop: Header=BB136_17 Depth=2
	b	.LBB136_28
.LBB136_28:                             @   in Loop: Header=BB136_17 Depth=2
	b	.LBB136_29
.LBB136_29:                             @   in Loop: Header=BB136_17 Depth=2
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB136_17
.LBB136_30:                             @   in Loop: Header=BB136_15 Depth=1
	b	.LBB136_31
.LBB136_31:                             @   in Loop: Header=BB136_15 Depth=1
	ldr	r0, [r11, #-52]
	add	r0, r0, #1
	str	r0, [r11, #-52]
	b	.LBB136_15
.LBB136_32:
	ldr	r0, [r11, #-44]
	ldr	r0, [r0, #76]
	ldr	r1, [r11, #-44]
	ldr	r2, [r1]
	sub	r0, r2, r0
	str	r0, [r1]
	ldr	r0, [r11, #-44]
	ldr	r0, [r0, #68]
	cmp	r0, #0
	bne	.LBB136_65
@ BB#33:
	ldr	r0, [r11, #-44]
	ldr	r0, [r0, #64]
	cmp	r0, #0
	bne	.LBB136_65
@ BB#34:
	movw	r0, #0
	str	r0, [r11, #-76]
	str	r0, [r11, #-68]
.LBB136_35:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-68]
	ldr	r1, [r11, #-44]
	ldr	r1, [r1, #80]
	cmp	r0, r1
	bhs	.LBB136_38
@ BB#36:                                @   in Loop: Header=BB136_35 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-40]
	ldr	r2, [r11, #-24]
	mov	r3, #488
	mla	r1, r2, r3, r1
	ldr	r2, [r11, #-28]
	mov	r3, #244
	mla	r1, r2, r3, r1
	mov	r2, r1
	ldr	r3, [r11, #-68]
	add	r1, r1, r3, lsl #2
	ldr	r1, [r1]
	ldr	r3, [r11, #-76]
	orr	r1, r3, r1
	str	r1, [r11, #-76]
	str	r0, [sp, #32]           @ 4-byte Spill
	str	r2, [sp, #28]           @ 4-byte Spill
@ BB#37:                                @   in Loop: Header=BB136_35 Depth=1
	ldr	r0, [r11, #-68]
	add	r0, r0, #1
	str	r0, [r11, #-68]
	b	.LBB136_35
.LBB136_38:
	ldr	r0, [r11, #-44]
	ldr	r0, [r0, #84]
	str	r0, [r11, #-68]
.LBB136_39:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB136_41 Depth 2
	ldr	r0, [r11, #-68]
	cmp	r0, #12
	bhs	.LBB136_46
@ BB#40:                                @   in Loop: Header=BB136_39 Depth=1
	movw	r0, #0
	str	r0, [r11, #-72]
.LBB136_41:                             @   Parent Loop BB136_39 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-72]
	cmp	r0, #3
	bge	.LBB136_44
@ BB#42:                                @   in Loop: Header=BB136_41 Depth=2
	movw	r0, #2
	ldr	r1, [r11, #-40]
	ldr	r2, [r11, #-24]
	mov	r3, #488
	mla	r1, r2, r3, r1
	ldr	r2, [r11, #-28]
	mov	r3, #244
	mla	r1, r2, r3, r1
	ldr	r2, [r11, #-68]
	add	r2, r2, r2, lsl #1
	add	r1, r1, r2, lsl #2
	add	r1, r1, #88
	ldr	r2, [r11, #-72]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	ldr	r2, [r11, #-76]
	orr	r1, r2, r1
	str	r1, [r11, #-76]
	str	r0, [sp, #24]           @ 4-byte Spill
@ BB#43:                                @   in Loop: Header=BB136_41 Depth=2
	ldr	r0, [r11, #-72]
	add	r0, r0, #1
	str	r0, [r11, #-72]
	b	.LBB136_41
.LBB136_44:                             @   in Loop: Header=BB136_39 Depth=1
	b	.LBB136_45
.LBB136_45:                             @   in Loop: Header=BB136_39 Depth=1
	ldr	r0, [r11, #-68]
	add	r0, r0, #1
	str	r0, [r11, #-68]
	b	.LBB136_39
.LBB136_46:
	ldr	r0, [r11, #-76]
	and	r0, r0, #1
	cmp	r0, #0
	bne	.LBB136_64
@ BB#47:
	ldr	r0, [r11, #-76]
	cmp	r0, #0
	beq	.LBB136_64
@ BB#48:
	movw	r0, #0
	str	r0, [r11, #-68]
.LBB136_49:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-68]
	ldr	r1, [r11, #-44]
	ldr	r1, [r1, #80]
	cmp	r0, r1
	bhs	.LBB136_52
@ BB#50:                                @   in Loop: Header=BB136_49 Depth=1
	movw	r1, #2
	ldr	r0, [r11, #-40]
	ldr	r2, [r11, #-24]
	mov	r3, #488
	mla	r0, r2, r3, r0
	ldr	r2, [r11, #-28]
	mov	r3, #244
	mla	r0, r2, r3, r0
	mov	r2, r0
	ldr	r3, [r11, #-68]
	add	r0, r0, r3, lsl #2
	ldr	r3, [r0]
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, r3
	str	r2, [sp, #16]           @ 4-byte Spill
	bl	__divsi3
	ldr	r1, [sp, #20]           @ 4-byte Reload
	str	r0, [r1]
@ BB#51:                                @   in Loop: Header=BB136_49 Depth=1
	ldr	r0, [r11, #-68]
	add	r0, r0, #1
	str	r0, [r11, #-68]
	b	.LBB136_49
.LBB136_52:
	ldr	r0, [r11, #-44]
	ldr	r0, [r0, #84]
	str	r0, [r11, #-68]
.LBB136_53:                             @ =>This Loop Header: Depth=1
                                        @     Child Loop BB136_55 Depth 2
	ldr	r0, [r11, #-68]
	cmp	r0, #12
	bhs	.LBB136_60
@ BB#54:                                @   in Loop: Header=BB136_53 Depth=1
	movw	r0, #0
	str	r0, [r11, #-72]
.LBB136_55:                             @   Parent Loop BB136_53 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [r11, #-72]
	cmp	r0, #3
	bge	.LBB136_58
@ BB#56:                                @   in Loop: Header=BB136_55 Depth=2
	movw	r1, #2
	ldr	r0, [r11, #-40]
	ldr	r2, [r11, #-24]
	mov	r3, #488
	mla	r0, r2, r3, r0
	ldr	r2, [r11, #-28]
	mov	r3, #244
	mla	r0, r2, r3, r0
	ldr	r2, [r11, #-68]
	add	r2, r2, r2, lsl #1
	add	r0, r0, r2, lsl #2
	add	r0, r0, #88
	ldr	r2, [r11, #-72]
	add	r0, r0, r2, lsl #2
	ldr	r2, [r0]
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r2
	bl	__divsi3
	ldr	r1, [sp, #12]           @ 4-byte Reload
	str	r0, [r1]
@ BB#57:                                @   in Loop: Header=BB136_55 Depth=2
	ldr	r0, [r11, #-72]
	add	r0, r0, #1
	str	r0, [r11, #-72]
	b	.LBB136_55
.LBB136_58:                             @   in Loop: Header=BB136_53 Depth=1
	b	.LBB136_59
.LBB136_59:                             @   in Loop: Header=BB136_53 Depth=1
	ldr	r0, [r11, #-68]
	add	r0, r0, #1
	str	r0, [r11, #-68]
	b	.LBB136_53
.LBB136_60:
	ldr	r0, .LCPI136_0
	movw	r1, #1
	ldr	r2, [r11, #-44]
	str	r1, [r2, #68]
	ldr	r1, [r11, #-44]
	str	r0, [r1, #76]
	ldr	r0, [r11, #-20]
	ldr	r0, [r0, #180]
	cmp	r0, #2
	bne	.LBB136_62
@ BB#61:
	movw	r0, #244
	movw	r1, #488
	ldr	r2, [r11, #-40]
	ldr	r3, [r11, #-24]
	mul	r1, r3, r1
	add	r1, r2, r1
	ldr	r2, [r11, #-28]
	mul	r0, r2, r0
	add	r0, r1, r0
	ldr	r1, [r11, #-44]
	bl	scale_bitcount
	str	r0, [sp, #8]            @ 4-byte Spill
	b	.LBB136_63
.LBB136_62:
	movw	r0, #244
	movw	r1, #488
	ldr	r2, [r11, #-40]
	ldr	r3, [r11, #-24]
	mul	r1, r3, r1
	add	r1, r2, r1
	ldr	r2, [r11, #-28]
	mul	r0, r2, r0
	add	r0, r1, r0
	ldr	r1, [r11, #-44]
	bl	scale_bitcount_lsf
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB136_63:
	b	.LBB136_64
.LBB136_64:
	b	.LBB136_65
.LBB136_65:
	ldr	r0, [r11, #-20]
	ldr	r0, [r0, #180]
	cmp	r0, #2
	bne	.LBB136_72
@ BB#66:
	ldr	r0, [r11, #-24]
	cmp	r0, #1
	bne	.LBB136_72
@ BB#67:
	movw	r0, #112
	ldr	r1, [r11, #-36]
	add	r1, r1, #44
	ldr	r2, [r11, #-28]
	mul	r0, r2, r0
	add	r0, r1, r0
	ldr	r0, [r0, #24]
	cmp	r0, #2
	beq	.LBB136_72
@ BB#68:
	movw	r0, #112
	ldr	r1, [r11, #-36]
	add	r1, r1, #44
	add	r1, r1, #224
	ldr	r2, [r11, #-28]
	mul	r0, r2, r0
	add	r0, r1, r0
	ldr	r0, [r0, #24]
	cmp	r0, #2
	beq	.LBB136_72
@ BB#69:
	movw	r0, #112
	ldr	r1, [r11, #-36]
	add	r1, r1, #44
	ldr	r2, [r11, #-28]
	mul	r2, r2, r0
	add	r1, r1, r2
	ldr	r1, [r1, #68]
	ldr	r2, [r11, #-36]
	add	r2, r2, #44
	add	r2, r2, #224
	ldr	r3, [r11, #-28]
	mul	r0, r3, r0
	add	r0, r2, r0
	ldr	r0, [r0, #68]
	cmp	r1, r0
	bne	.LBB136_72
@ BB#70:
	movw	r0, #112
	ldr	r1, [r11, #-36]
	add	r1, r1, #44
	ldr	r2, [r11, #-28]
	mul	r2, r2, r0
	add	r1, r1, r2
	ldr	r1, [r1, #64]
	ldr	r2, [r11, #-36]
	add	r2, r2, #44
	add	r2, r2, #224
	ldr	r3, [r11, #-28]
	mul	r0, r3, r0
	add	r0, r2, r0
	ldr	r0, [r0, #64]
	cmp	r1, r0
	bne	.LBB136_72
@ BB#71:
	ldr	r0, [r11, #-28]
	ldr	r1, [r11, #-36]
	ldr	r2, [r11, #-40]
	bl	scfsi_calc
.LBB136_72:
	ldr	r0, [r11, #-44]
	ldr	r0, [r0, #76]
	ldr	r1, [r11, #-44]
	ldr	r2, [r1]
	add	r0, r2, r0
	str	r0, [r1]
	sub	sp, r11, #16
	pop	{r4, r5, r6, r10, r11, pc}
	.p2align	2
@ BB#73:
.LCPI136_0:
	.long	99999999                @ 0x5f5e0ff
.Lfunc_end136:
	.size	best_scalefac_store, .Lfunc_end136-best_scalefac_store
	.cantunwind
	.fnend

	.p2align	2
	.type	scfsi_calc,%function
	.code	32                      @ @scfsi_calc
scfsi_calc:
	.fnstart
@ BB#0:
	sub	sp, sp, #148
	movw	r3, #0
	movw	r12, #112
	str	r0, [sp, #144]
	str	r1, [sp, #140]
	str	r2, [sp, #136]
	ldr	r0, [sp, #140]
	add	r0, r0, #44
	add	r0, r0, #224
	ldr	r1, [sp, #144]
	mul	r1, r1, r12
	add	r0, r0, r1
	str	r0, [sp, #108]
	str	r3, [sp, #132]
.LBB137_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #132]
	cmp	r0, #4
	bge	.LBB137_4
@ BB#2:                                 @   in Loop: Header=BB137_1 Depth=1
	movw	r0, #0
	movw	r1, #2
	ldr	r2, [sp, #140]
	ldr	r3, [sp, #144]
	add	r2, r2, r3, lsl #4
	add	r2, r2, #12
	ldr	r3, [sp, #132]
	add	r2, r2, r3, lsl #2
	str	r0, [r2]
	str	r1, [sp, #100]          @ 4-byte Spill
@ BB#3:                                 @   in Loop: Header=BB137_1 Depth=1
	ldr	r0, [sp, #132]
	add	r0, r0, #1
	str	r0, [sp, #132]
	b	.LBB137_1
.LBB137_4:
	movw	r0, #0
	str	r0, [sp, #132]
.LBB137_5:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB137_7 Depth 2
                                        @     Child Loop BB137_14 Depth 2
	ldr	r0, [sp, #132]
	cmp	r0, #4
	bge	.LBB137_20
@ BB#6:                                 @   in Loop: Header=BB137_5 Depth=1
	movw	r0, :lower16:scfsi_calc.scfsi_band
	movt	r0, :upper16:scfsi_calc.scfsi_band
	movw	r1, #2
	ldr	r2, [sp, #132]
	movw	r3, :lower16:scfsi_calc.scfsi_band
	movt	r3, :upper16:scfsi_calc.scfsi_band
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	str	r2, [sp, #112]
	str	r0, [sp, #96]           @ 4-byte Spill
	str	r1, [sp, #92]           @ 4-byte Spill
.LBB137_7:                              @   Parent Loop BB137_5 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	movw	r0, :lower16:scfsi_calc.scfsi_band
	movt	r0, :upper16:scfsi_calc.scfsi_band
	movw	r1, #2
	ldr	r2, [sp, #112]
	ldr	r3, [sp, #132]
	add	r3, r3, #1
	movw	r12, :lower16:scfsi_calc.scfsi_band
	movt	r12, :upper16:scfsi_calc.scfsi_band
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	cmp	r2, r3
	str	r0, [sp, #88]           @ 4-byte Spill
	str	r1, [sp, #84]           @ 4-byte Spill
	bge	.LBB137_12
@ BB#8:                                 @   in Loop: Header=BB137_7 Depth=2
	movw	r0, #2
	ldr	r1, [sp, #136]
	ldr	r2, [sp, #144]
	mov	r3, #244
	mla	r1, r2, r3, r1
	ldr	r2, [sp, #112]
	ldr	r3, [r1, r2, lsl #2]
	add	r1, r1, #488
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	cmp	r3, r1
	str	r0, [sp, #80]           @ 4-byte Spill
	beq	.LBB137_10
@ BB#9:                                 @   in Loop: Header=BB137_5 Depth=1
	b	.LBB137_12
.LBB137_10:                             @   in Loop: Header=BB137_7 Depth=2
	b	.LBB137_11
.LBB137_11:                             @   in Loop: Header=BB137_7 Depth=2
	ldr	r0, [sp, #112]
	add	r0, r0, #1
	str	r0, [sp, #112]
	b	.LBB137_7
.LBB137_12:                             @   in Loop: Header=BB137_5 Depth=1
	movw	r0, :lower16:scfsi_calc.scfsi_band
	movt	r0, :upper16:scfsi_calc.scfsi_band
	movw	r1, #2
	ldr	r2, [sp, #112]
	ldr	r3, [sp, #132]
	add	r3, r3, #1
	movw	r12, :lower16:scfsi_calc.scfsi_band
	movt	r12, :upper16:scfsi_calc.scfsi_band
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	cmp	r2, r3
	str	r0, [sp, #76]           @ 4-byte Spill
	str	r1, [sp, #72]           @ 4-byte Spill
	bne	.LBB137_18
@ BB#13:                                @   in Loop: Header=BB137_5 Depth=1
	movw	r0, :lower16:scfsi_calc.scfsi_band
	movt	r0, :upper16:scfsi_calc.scfsi_band
	movw	r1, #2
	ldr	r2, [sp, #132]
	movw	r3, :lower16:scfsi_calc.scfsi_band
	movt	r3, :upper16:scfsi_calc.scfsi_band
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	str	r2, [sp, #112]
	str	r0, [sp, #68]           @ 4-byte Spill
	str	r1, [sp, #64]           @ 4-byte Spill
.LBB137_14:                             @   Parent Loop BB137_5 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	movw	r0, :lower16:scfsi_calc.scfsi_band
	movt	r0, :upper16:scfsi_calc.scfsi_band
	movw	r1, #2
	ldr	r2, [sp, #112]
	ldr	r3, [sp, #132]
	add	r3, r3, #1
	movw	r12, :lower16:scfsi_calc.scfsi_band
	movt	r12, :upper16:scfsi_calc.scfsi_band
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	cmp	r2, r3
	str	r0, [sp, #60]           @ 4-byte Spill
	str	r1, [sp, #56]           @ 4-byte Spill
	bge	.LBB137_17
@ BB#15:                                @   in Loop: Header=BB137_14 Depth=2
	mvn	r0, #0
	movw	r1, #2
	ldr	r2, [sp, #136]
	ldr	r3, [sp, #144]
	mov	r12, #244
	mla	r2, r3, r12, r2
	add	r2, r2, #488
	ldr	r3, [sp, #112]
	add	r2, r2, r3, lsl #2
	str	r0, [r2]
	str	r1, [sp, #52]           @ 4-byte Spill
@ BB#16:                                @   in Loop: Header=BB137_14 Depth=2
	ldr	r0, [sp, #112]
	add	r0, r0, #1
	str	r0, [sp, #112]
	b	.LBB137_14
.LBB137_17:                             @   in Loop: Header=BB137_5 Depth=1
	movw	r0, #1
	movw	r1, #2
	ldr	r2, [sp, #140]
	ldr	r3, [sp, #144]
	add	r2, r2, r3, lsl #4
	add	r2, r2, #12
	ldr	r3, [sp, #132]
	add	r2, r2, r3, lsl #2
	str	r0, [r2]
	str	r1, [sp, #48]           @ 4-byte Spill
.LBB137_18:                             @   in Loop: Header=BB137_5 Depth=1
	b	.LBB137_19
.LBB137_19:                             @   in Loop: Header=BB137_5 Depth=1
	ldr	r0, [sp, #132]
	add	r0, r0, #1
	str	r0, [sp, #132]
	b	.LBB137_5
.LBB137_20:
	movw	r0, #0
	str	r0, [sp, #120]
	str	r0, [sp, #128]
	str	r0, [sp, #112]
.LBB137_21:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #112]
	cmp	r0, #11
	bge	.LBB137_28
@ BB#22:                                @   in Loop: Header=BB137_21 Depth=1
	movw	r0, #2
	ldr	r1, [sp, #136]
	ldr	r2, [sp, #144]
	mov	r3, #244
	mla	r1, r2, r3, r1
	add	r1, r1, #488
	ldr	r2, [sp, #112]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	cmp	r1, #0
	str	r0, [sp, #44]           @ 4-byte Spill
	bge	.LBB137_24
@ BB#23:                                @   in Loop: Header=BB137_21 Depth=1
	b	.LBB137_27
.LBB137_24:                             @   in Loop: Header=BB137_21 Depth=1
	movw	r0, #2
	ldr	r1, [sp, #120]
	add	r1, r1, #1
	str	r1, [sp, #120]
	ldr	r1, [sp, #128]
	ldr	r2, [sp, #136]
	ldr	r3, [sp, #144]
	mov	r12, #244
	mla	r2, r3, r12, r2
	add	r2, r2, #488
	ldr	r3, [sp, #112]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2]
	cmp	r1, r2
	str	r0, [sp, #40]           @ 4-byte Spill
	bge	.LBB137_26
@ BB#25:                                @   in Loop: Header=BB137_21 Depth=1
	movw	r0, #2
	ldr	r1, [sp, #136]
	ldr	r2, [sp, #144]
	mov	r3, #244
	mla	r1, r2, r3, r1
	add	r1, r1, #488
	ldr	r2, [sp, #112]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	str	r1, [sp, #128]
	str	r0, [sp, #36]           @ 4-byte Spill
.LBB137_26:                             @   in Loop: Header=BB137_21 Depth=1
	b	.LBB137_27
.LBB137_27:                             @   in Loop: Header=BB137_21 Depth=1
	ldr	r0, [sp, #112]
	add	r0, r0, #1
	str	r0, [sp, #112]
	b	.LBB137_21
.LBB137_28:
	movw	r0, #0
	str	r0, [sp, #116]
	str	r0, [sp, #124]
.LBB137_29:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #112]
	cmp	r0, #21
	bge	.LBB137_36
@ BB#30:                                @   in Loop: Header=BB137_29 Depth=1
	movw	r0, #2
	ldr	r1, [sp, #136]
	ldr	r2, [sp, #144]
	mov	r3, #244
	mla	r1, r2, r3, r1
	add	r1, r1, #488
	ldr	r2, [sp, #112]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	cmp	r1, #0
	str	r0, [sp, #32]           @ 4-byte Spill
	bge	.LBB137_32
@ BB#31:                                @   in Loop: Header=BB137_29 Depth=1
	b	.LBB137_35
.LBB137_32:                             @   in Loop: Header=BB137_29 Depth=1
	movw	r0, #2
	ldr	r1, [sp, #116]
	add	r1, r1, #1
	str	r1, [sp, #116]
	ldr	r1, [sp, #124]
	ldr	r2, [sp, #136]
	ldr	r3, [sp, #144]
	mov	r12, #244
	mla	r2, r3, r12, r2
	add	r2, r2, #488
	ldr	r3, [sp, #112]
	add	r2, r2, r3, lsl #2
	ldr	r2, [r2]
	cmp	r1, r2
	str	r0, [sp, #28]           @ 4-byte Spill
	bge	.LBB137_34
@ BB#33:                                @   in Loop: Header=BB137_29 Depth=1
	movw	r0, #2
	ldr	r1, [sp, #136]
	ldr	r2, [sp, #144]
	mov	r3, #244
	mla	r1, r2, r3, r1
	add	r1, r1, #488
	ldr	r2, [sp, #112]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	str	r1, [sp, #124]
	str	r0, [sp, #24]           @ 4-byte Spill
.LBB137_34:                             @   in Loop: Header=BB137_29 Depth=1
	b	.LBB137_35
.LBB137_35:                             @   in Loop: Header=BB137_29 Depth=1
	ldr	r0, [sp, #112]
	add	r0, r0, #1
	str	r0, [sp, #112]
	b	.LBB137_29
.LBB137_36:
	movw	r0, #0
	str	r0, [sp, #132]
.LBB137_37:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #132]
	cmp	r0, #16
	bge	.LBB137_45
@ BB#38:                                @   in Loop: Header=BB137_37 Depth=1
	movw	r0, :lower16:scfsi_calc.slen1_n
	movt	r0, :upper16:scfsi_calc.slen1_n
	movw	r1, #2
	ldr	r2, [sp, #128]
	ldr	r3, [sp, #132]
	movw	r12, :lower16:scfsi_calc.slen1_n
	movt	r12, :upper16:scfsi_calc.slen1_n
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	cmp	r2, r3
	str	r0, [sp, #20]           @ 4-byte Spill
	str	r1, [sp, #16]           @ 4-byte Spill
	bge	.LBB137_43
@ BB#39:                                @   in Loop: Header=BB137_37 Depth=1
	movw	r0, :lower16:scfsi_calc.slen2_n
	movt	r0, :upper16:scfsi_calc.slen2_n
	movw	r1, #2
	ldr	r2, [sp, #124]
	ldr	r3, [sp, #132]
	movw	r12, :lower16:scfsi_calc.slen2_n
	movt	r12, :upper16:scfsi_calc.slen2_n
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	cmp	r2, r3
	str	r0, [sp, #12]           @ 4-byte Spill
	str	r1, [sp, #8]            @ 4-byte Spill
	bge	.LBB137_43
@ BB#40:                                @   in Loop: Header=BB137_37 Depth=1
	movw	r0, :lower16:scfsi_calc.slen2_tab
	movt	r0, :upper16:scfsi_calc.slen2_tab
	movw	r1, #2
	ldr	r2, [sp, #132]
	movw	r3, :lower16:scfsi_calc.slen1_tab
	movt	r3, :upper16:scfsi_calc.slen1_tab
	ldr	r3, [r3, r2, lsl #2]
	ldr	r12, [sp, #120]
	mul	r3, r3, r12
	movw	r12, :lower16:scfsi_calc.slen2_tab
	movt	r12, :upper16:scfsi_calc.slen2_tab
	add	r2, r12, r2, lsl #2
	ldr	r2, [r2]
	ldr	r12, [sp, #116]
	mul	r2, r2, r12
	add	r2, r3, r2
	str	r2, [sp, #104]
	ldr	r2, [sp, #108]
	ldr	r2, [r2, #76]
	ldr	r3, [sp, #104]
	cmp	r2, r3
	str	r0, [sp, #4]            @ 4-byte Spill
	str	r1, [sp]                @ 4-byte Spill
	ble	.LBB137_42
@ BB#41:                                @   in Loop: Header=BB137_37 Depth=1
	ldr	r0, [sp, #104]
	ldr	r1, [sp, #108]
	str	r0, [r1, #76]
	ldr	r0, [sp, #132]
	ldr	r1, [sp, #108]
	str	r0, [r1, #16]
.LBB137_42:                             @   in Loop: Header=BB137_37 Depth=1
	b	.LBB137_43
.LBB137_43:                             @   in Loop: Header=BB137_37 Depth=1
	b	.LBB137_44
.LBB137_44:                             @   in Loop: Header=BB137_37 Depth=1
	ldr	r0, [sp, #132]
	add	r0, r0, #1
	str	r0, [sp, #132]
	b	.LBB137_37
.LBB137_45:
	add	sp, sp, #148
	bx	lr
.Lfunc_end137:
	.size	scfsi_calc, .Lfunc_end137-scfsi_calc
	.cantunwind
	.fnend

	.globl	ts_real_time
	.p2align	2
	.type	ts_real_time,%function
	.code	32                      @ @ts_real_time
ts_real_time:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #16
	add	r1, sp, #8
	str	r0, [r11, #-4]
	mov	r0, r1
	bl	time
	ldr	r1, [r11, #-4]
	cmp	r1, #0
	str	r0, [sp, #4]            @ 4-byte Spill
	bne	.LBB138_2
@ BB#1:
	movw	r0, :lower16:ts_real_time.initial_time
	movt	r0, :upper16:ts_real_time.initial_time
	ldr	r1, [sp, #8]
	str	r1, [r0]
.LBB138_2:
	ldr	r0, [sp, #8]
	movw	r1, :lower16:ts_real_time.initial_time
	movt	r1, :upper16:ts_real_time.initial_time
	ldr	r1, [r1]
	bl	difftime
	vmov	d16, r0, r1
	vcvt.f32.f64	s0, d16
	vmov	r0, s0
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end138:
	.size	ts_real_time, .Lfunc_end138-ts_real_time
	.cantunwind
	.fnend

	.globl	ts_process_time
	.p2align	2
	.type	ts_process_time,%function
	.code	32                      @ @ts_process_time
ts_process_time:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #8
	str	r0, [sp, #4]
	bl	clock
	str	r0, [sp]
	ldr	r0, [sp, #4]
	cmp	r0, #0
	bne	.LBB139_2
@ BB#1:
	movw	r0, :lower16:ts_process_time.initial_time
	movt	r0, :upper16:ts_process_time.initial_time
	ldr	r1, [sp]
	str	r1, [r0]
.LBB139_2:
	ldr	r0, [sp]
	movw	r1, :lower16:ts_process_time.initial_time
	movt	r1, :upper16:ts_process_time.initial_time
	ldr	r1, [r1]
	sub	r0, r0, r1
	vmov	s0, r0
	vcvt.f32.s32	s0, s0
	vldr	s2, .LCPI139_0
	vdiv.f32	s0, s0, s2
	vmov	r0, s0
	mov	sp, r11
	pop	{r11, pc}
	.p2align	2
@ BB#3:
.LCPI139_0:
	.long	1232348160              @ float 1.0E+6
.Lfunc_end139:
	.size	ts_process_time, .Lfunc_end139-ts_process_time
	.cantunwind
	.fnend

	.globl	ts_calc_times
	.p2align	2
	.type	ts_calc_times,%function
	.code	32                      @ @ts_calc_times
ts_calc_times:
	.fnstart
@ BB#0:
	sub	sp, sp, #20
	ldr	r12, [sp, #20]
	str	r0, [sp, #16]
	str	r1, [sp, #12]
	str	r2, [sp, #8]
	str	r3, [sp, #4]
	str	r12, [sp]
	ldr	r0, [sp, #8]
	cmp	r0, #0
	ble	.LBB140_5
@ BB#1:
	ldr	r0, [sp, #16]
	vldr	s0, [r0]
	ldr	r0, [sp, #4]
	vmov	s2, r0
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	ldr	r0, [sp, #8]
	vmov	s2, r0
	vcvt.f32.s32	s2, s2
	vdiv.f32	s0, s0, s2
	ldr	r0, [sp, #16]
	vstr	s0, [r0, #4]
	ldr	r0, [sp, #12]
	vmov	s0, r0
	vcvt.f32.s32	s0, s0
	ldr	r0, [sp, #16]
	vldr	s2, [r0, #4]
	vmul.f32	s0, s0, s2
	vcmpe.f32	s0, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB140_3
@ BB#2:
	ldr	r0, [sp, #4]
	ldr	r1, [sp]
	mul	r0, r0, r1
	vmov	s0, r0
	vcvt.f32.s32	s0, s0
	ldr	r0, [sp, #12]
	vmov	s2, r0
	vcvt.f32.s32	s2, s2
	ldr	r0, [sp, #16]
	vldr	s4, [r0, #4]
	vmul.f32	s2, s2, s4
	vdiv.f32	s0, s0, s2
	ldr	r0, [sp, #16]
	vstr	s0, [r0, #8]
	b	.LBB140_4
.LBB140_3:
	vldr	s0, .LCPI140_0
	ldr	r0, [sp, #16]
	vstr	s0, [r0, #8]
.LBB140_4:
	ldr	r0, [sp, #16]
	vldr	s0, [r0, #4]
	ldr	r0, [sp, #16]
	vldr	s2, [r0]
	vsub.f32	s0, s0, s2
	ldr	r0, [sp, #16]
	vstr	s0, [r0, #12]
	b	.LBB140_6
.LBB140_5:
	vldr	s0, .LCPI140_0
	ldr	r0, [sp, #16]
	vstr	s0, [r0, #4]
	ldr	r0, [sp, #16]
	vstr	s0, [r0, #8]
	ldr	r0, [sp, #16]
	vstr	s0, [r0, #12]
.LBB140_6:
	add	sp, sp, #20
	bx	lr
	.p2align	2
@ BB#7:
.LCPI140_0:
	.long	0                       @ float 0
.Lfunc_end140:
	.size	ts_calc_times, .Lfunc_end140-ts_calc_times
	.cantunwind
	.fnend

	.globl	timestatus
	.p2align	3
	.type	timestatus,%function
	.code	32                      @ @timestatus
timestatus:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
	add	r11, sp, #28
	sub	sp, sp, #260
	str	r0, [r11, #-36]
	str	r1, [r11, #-40]
	str	r2, [r11, #-44]
	str	r3, [r11, #-48]
	ldr	r0, [r11, #-40]
	bl	ts_real_time
	vmov	s0, r0
	vstr	s0, [r11, #-64]
	ldr	r0, [r11, #-40]
	bl	ts_process_time
	vmov	s0, r0
	vstr	s0, [r11, #-80]
	ldr	r0, [r11, #-40]
	cmp	r0, #0
	bne	.LBB141_2
@ BB#1:
	movw	r1, :lower16:.L.str.294
	movt	r1, :upper16:.L.str.294
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	str	r0, [r11, #-88]         @ 4-byte Spill
	b	.LBB141_6
.LBB141_2:
	sub	r0, r11, #64
	ldr	r1, [r11, #-36]
	ldr	r2, [r11, #-40]
	ldr	r3, [r11, #-44]
	ldr	r12, [r11, #-48]
	str	r12, [sp]
	bl	ts_calc_times
	sub	r0, r11, #80
	ldr	r1, [r11, #-36]
	ldr	r2, [r11, #-40]
	ldr	r3, [r11, #-44]
	ldr	r12, [r11, #-48]
	str	r12, [sp]
	bl	ts_calc_times
	ldr	r0, [r11, #-44]
	cmp	r0, #1
	ble	.LBB141_4
@ BB#3:
	vldr	d16, .LCPI141_0
	ldr	r0, [r11, #-40]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d16, d17
	ldr	r0, [r11, #-44]
	sub	r0, r0, #1
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	str	r0, [r11, #-84]
	b	.LBB141_5
.LBB141_4:
	movw	r0, #100
	str	r0, [r11, #-84]
.LBB141_5:
	movw	r1, :lower16:.L.str.1.295
	movt	r1, :upper16:.L.str.1.295
	movw	r0, #60
	vmov.f64	d16, #5.000000e-01
	vldr	d17, .LCPI141_1
	movw	r2, #3600
	movw	r3, :lower16:stderr
	movt	r3, :upper16:stderr
	ldr	r3, [r3]
	ldr	r12, [r11, #-40]
	ldr	lr, [r11, #-44]
	sub	lr, lr, #1
	ldr	r4, [r11, #-84]
	vldr	s0, [r11, #-80]
	vcvt.f64.f32	d18, s0
	vadd.f64	d18, d18, d16
	vcvt.s32.f64	s0, d18
	vmov	r5, s0
	str	r0, [r11, #-92]         @ 4-byte Spill
	mov	r0, r5
	str	r1, [r11, #-96]         @ 4-byte Spill
	mov	r1, r2
	str	lr, [r11, #-100]        @ 4-byte Spill
	str	r4, [r11, #-104]        @ 4-byte Spill
	vstr	d16, [r11, #-112]       @ 8-byte Spill
	vstr	d17, [r11, #-120]       @ 8-byte Spill
	str	r2, [r11, #-124]        @ 4-byte Spill
	str	r3, [r11, #-128]        @ 4-byte Spill
	str	r12, [r11, #-132]       @ 4-byte Spill
	bl	__divsi3
	vldr	s0, [r11, #-80]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-112]       @ 8-byte Reload
	vadd.f64	d16, d16, d17
	vldr	d18, [r11, #-120]       @ 8-byte Reload
	vdiv.f64	d16, d16, d18
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	str	r0, [r11, #-136]        @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [r11, #-92]         @ 4-byte Reload
	bl	__modsi3
	vldr	s0, [r11, #-80]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-112]       @ 8-byte Reload
	vadd.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	str	r0, [r11, #-140]        @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [r11, #-92]         @ 4-byte Reload
	bl	__modsi3
	vldr	s0, [r11, #-76]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-112]       @ 8-byte Reload
	vadd.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	str	r0, [sp, #144]          @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [r11, #-124]        @ 4-byte Reload
	bl	__divsi3
	vldr	s0, [r11, #-76]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-112]       @ 8-byte Reload
	vadd.f64	d16, d16, d17
	vldr	d18, [r11, #-120]       @ 8-byte Reload
	vdiv.f64	d16, d16, d18
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	str	r0, [sp, #140]          @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [r11, #-92]         @ 4-byte Reload
	bl	__modsi3
	vldr	s0, [r11, #-76]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-112]       @ 8-byte Reload
	vadd.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	str	r0, [sp, #136]          @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [r11, #-92]         @ 4-byte Reload
	bl	__modsi3
	vldr	s0, [r11, #-64]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-112]       @ 8-byte Reload
	vadd.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	str	r0, [sp, #132]          @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [r11, #-124]        @ 4-byte Reload
	bl	__divsi3
	vldr	s0, [r11, #-64]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-112]       @ 8-byte Reload
	vadd.f64	d16, d16, d17
	vldr	d18, [r11, #-120]       @ 8-byte Reload
	vdiv.f64	d16, d16, d18
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	str	r0, [sp, #128]          @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [r11, #-92]         @ 4-byte Reload
	bl	__modsi3
	vldr	s0, [r11, #-64]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-112]       @ 8-byte Reload
	vadd.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	str	r0, [sp, #124]          @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [r11, #-92]         @ 4-byte Reload
	bl	__modsi3
	vldr	s0, [r11, #-60]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-112]       @ 8-byte Reload
	vadd.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	str	r0, [sp, #120]          @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [r11, #-124]        @ 4-byte Reload
	bl	__divsi3
	vldr	s0, [r11, #-60]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-112]       @ 8-byte Reload
	vadd.f64	d16, d16, d17
	vldr	d18, [r11, #-120]       @ 8-byte Reload
	vdiv.f64	d16, d16, d18
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	str	r0, [sp, #116]          @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [r11, #-92]         @ 4-byte Reload
	bl	__modsi3
	vldr	s0, [r11, #-60]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-112]       @ 8-byte Reload
	vadd.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	str	r0, [sp, #112]          @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [r11, #-92]         @ 4-byte Reload
	bl	__modsi3
	vldr	s0, [r11, #-72]
	vcvt.f64.f32	d16, s0
	vldr	s0, [r11, #-52]
	vcvt.f64.f32	d17, s0
	vldr	d18, [r11, #-112]       @ 8-byte Reload
	vadd.f64	d17, d17, d18
	vcvt.s32.f64	s0, d17
	vmov	r1, s0
	str	r0, [sp, #108]          @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [r11, #-124]        @ 4-byte Reload
	vstr	d16, [sp, #96]          @ 8-byte Spill
	bl	__divsi3
	vldr	s0, [r11, #-52]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-112]       @ 8-byte Reload
	vadd.f64	d16, d16, d17
	vldr	d18, [r11, #-120]       @ 8-byte Reload
	vdiv.f64	d16, d16, d18
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	str	r0, [sp, #92]           @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [r11, #-92]         @ 4-byte Reload
	bl	__modsi3
	vldr	s0, [r11, #-52]
	vcvt.f64.f32	d16, s0
	vldr	d17, [r11, #-112]       @ 8-byte Reload
	vadd.f64	d16, d16, d17
	vcvt.s32.f64	s0, d16
	vmov	r1, s0
	str	r0, [sp, #88]           @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [r11, #-92]         @ 4-byte Reload
	bl	__modsi3
	ldr	r1, [r11, #-128]        @ 4-byte Reload
	str	r0, [sp, #84]           @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [r11, #-96]         @ 4-byte Reload
	ldr	r2, [r11, #-132]        @ 4-byte Reload
	ldr	r3, [r11, #-100]        @ 4-byte Reload
	ldr	r12, [r11, #-104]       @ 4-byte Reload
	str	r12, [sp]
	ldr	lr, [r11, #-136]        @ 4-byte Reload
	str	lr, [sp, #4]
	ldr	r4, [r11, #-140]        @ 4-byte Reload
	str	r4, [sp, #8]
	ldr	r5, [sp, #144]          @ 4-byte Reload
	str	r5, [sp, #12]
	ldr	r6, [sp, #140]          @ 4-byte Reload
	str	r6, [sp, #16]
	ldr	r7, [sp, #136]          @ 4-byte Reload
	str	r7, [sp, #20]
	ldr	r8, [sp, #132]          @ 4-byte Reload
	str	r8, [sp, #24]
	ldr	r9, [sp, #128]          @ 4-byte Reload
	str	r9, [sp, #28]
	ldr	r10, [sp, #124]         @ 4-byte Reload
	str	r10, [sp, #32]
	ldr	r12, [sp, #120]         @ 4-byte Reload
	str	r12, [sp, #36]
	ldr	r12, [sp, #116]         @ 4-byte Reload
	str	r12, [sp, #40]
	ldr	r12, [sp, #112]         @ 4-byte Reload
	str	r12, [sp, #44]
	ldr	r12, [sp, #108]         @ 4-byte Reload
	str	r12, [sp, #48]
	vldr	d16, [sp, #96]          @ 8-byte Reload
	vstr	d16, [sp, #56]
	ldr	r12, [sp, #92]          @ 4-byte Reload
	str	r12, [sp, #64]
	ldr	r12, [sp, #88]          @ 4-byte Reload
	str	r12, [sp, #68]
	ldr	r12, [sp, #84]          @ 4-byte Reload
	str	r12, [sp, #72]
	bl	fprintf
	movw	r1, :lower16:stderr
	movt	r1, :upper16:stderr
	ldr	r1, [r1]
	str	r0, [sp, #80]           @ 4-byte Spill
	mov	r0, r1
	bl	fflush
	str	r0, [sp, #76]           @ 4-byte Spill
.LBB141_6:
	sub	sp, r11, #28
	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
	.p2align	3
@ BB#7:
.LCPI141_0:
	.long	0                       @ double 100
	.long	1079574528
.LCPI141_1:
	.long	0                       @ double 60
	.long	1078853632
.Lfunc_end141:
	.size	timestatus, .Lfunc_end141-timestatus
	.cantunwind
	.fnend

	.globl	getframebits
	.p2align	3
	.type	getframebits,%function
	.code	32                      @ @getframebits
getframebits:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #48
	movw	r3, #32
	movw	r12, #8
	movw	lr, #2
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [r11, #-12]
	ldr	r0, [r11, #-4]
	vldr	s0, [r0, #12]
	vcvt.f64.s32	d16, s0
	vldr	d17, .LCPI142_0
	vdiv.f64	d16, d16, d17
	vstr	d16, [sp, #16]
	ldr	r0, [r11, #-4]
	ldr	r1, [r0, #172]
	ldr	r0, [r0, #200]
	rsb	r1, r1, r1, lsl #4
	movw	r2, :lower16:bitrate_table
	movt	r2, :upper16:bitrate_table
	add	r1, r2, r1, lsl #2
	add	r0, r1, r0, lsl #2
	ldr	r0, [r0]
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	vstr	d16, [sp, #24]
	str	r12, [sp, #12]
	str	r3, [sp, #8]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #172]
	cmp	r0, #1
	str	lr, [sp, #4]            @ 4-byte Spill
	bne	.LBB142_5
@ BB#1:
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #184]
	cmp	r0, #1
	bne	.LBB142_3
@ BB#2:
	ldr	r0, [sp, #8]
	add	r0, r0, #136
	str	r0, [sp, #8]
	b	.LBB142_4
.LBB142_3:
	ldr	r0, [sp, #8]
	add	r0, r0, #256
	str	r0, [sp, #8]
.LBB142_4:
	b	.LBB142_9
.LBB142_5:
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #184]
	cmp	r0, #1
	bne	.LBB142_7
@ BB#6:
	ldr	r0, [sp, #8]
	add	r0, r0, #72
	str	r0, [sp, #8]
	b	.LBB142_8
.LBB142_7:
	ldr	r0, [sp, #8]
	add	r0, r0, #136
	str	r0, [sp, #8]
.LBB142_8:
	b	.LBB142_9
.LBB142_9:
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #56]
	cmp	r0, #0
	beq	.LBB142_11
@ BB#10:
	ldr	r0, [sp, #8]
	add	r0, r0, #16
	str	r0, [sp, #8]
.LBB142_11:
	movw	r0, #3
	ldr	r1, [r11, #-4]
	vldr	s0, [r1, #168]
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #16]
	vdiv.f64	d16, d16, d17
	vldr	d17, [sp, #24]
	vldr	s0, [sp, #12]
	vcvt.f64.s32	d18, s0
	vdiv.f64	d17, d17, d18
	vmul.f64	d16, d16, d17
	vldr	d17, .LCPI142_1
	vadd.f64	d16, d16, d17
	vmov	r1, r2, d16
	str	r0, [sp]                @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	floor
	vmov	d16, r0, r1
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	vcvt.s32.f64	s0, d16
	vstr	s0, [r11, #-16]
	lsl	r0, r0, #3
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #176]
	lsl	r1, r1, #3
	add	r0, r0, r1
	ldr	r1, [r11, #-8]
	str	r0, [r1]
	ldr	r0, [r11, #-8]
	ldr	r0, [r0]
	ldr	r1, [sp, #8]
	sub	r0, r0, r1
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #180]
	bl	__divsi3
	ldr	r1, [r11, #-12]
	str	r0, [r1]
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#12:
.LCPI142_0:
	.long	0                       @ double 1000
	.long	1083129856
.LCPI142_1:
	.long	3894859413              @ double 1.0000000000000001E-9
	.long	1041313291
.Lfunc_end142:
	.size	getframebits, .Lfunc_end142-getframebits
	.cantunwind
	.fnend

	.globl	display_bitrates
	.p2align	2
	.type	display_bitrates,%function
	.code	32                      @ @display_bitrates
display_bitrates:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #64
	movw	r1, :lower16:.L.str.302
	movt	r1, :upper16:.L.str.302
	movw	r2, #1
	str	r0, [r11, #-4]
	str	r2, [r11, #-12]
	ldr	r0, [r11, #-4]
	bl	fprintf
	movw	r1, :lower16:.L.str.1.303
	movt	r1, :upper16:.L.str.1.303
	ldr	r2, [r11, #-4]
	str	r0, [r11, #-16]         @ 4-byte Spill
	mov	r0, r2
	bl	fprintf
	movw	r1, :lower16:.L.str.2.304
	movt	r1, :upper16:.L.str.2.304
	ldr	r2, [r11, #-4]
	str	r0, [r11, #-20]         @ 4-byte Spill
	mov	r0, r2
	bl	fprintf
	movw	r1, #1
	str	r1, [r11, #-8]
	str	r0, [r11, #-24]         @ 4-byte Spill
.LBB143_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-8]
	cmp	r0, #15
	bge	.LBB143_4
@ BB#2:                                 @   in Loop: Header=BB143_1 Depth=1
	movw	r1, :lower16:.L.str.3.305
	movt	r1, :upper16:.L.str.3.305
	movw	r0, #2
	ldr	r2, [r11, #-4]
	ldr	r3, [r11, #-12]
	rsb	r3, r3, r3, lsl #4
	movw	r12, :lower16:bitrate_table
	movt	r12, :upper16:bitrate_table
	add	r3, r12, r3, lsl #2
	ldr	r12, [r11, #-8]
	add	r3, r3, r12, lsl #2
	ldr	r3, [r3]
	str	r0, [r11, #-28]         @ 4-byte Spill
	mov	r0, r2
	mov	r2, r3
	bl	fprintf
	str	r0, [sp, #32]           @ 4-byte Spill
@ BB#3:                                 @   in Loop: Header=BB143_1 Depth=1
	ldr	r0, [r11, #-8]
	add	r0, r0, #1
	str	r0, [r11, #-8]
	b	.LBB143_1
.LBB143_4:
	movw	r1, :lower16:.L.str.302
	movt	r1, :upper16:.L.str.302
	ldr	r0, [r11, #-4]
	bl	fprintf
	movw	r1, :lower16:.L.str.302
	movt	r1, :upper16:.L.str.302
	movw	lr, #0
	str	lr, [r11, #-12]
	ldr	lr, [r11, #-4]
	str	r0, [sp, #28]           @ 4-byte Spill
	mov	r0, lr
	bl	fprintf
	movw	r1, :lower16:.L.str.4.306
	movt	r1, :upper16:.L.str.4.306
	ldr	lr, [r11, #-4]
	str	r0, [sp, #24]           @ 4-byte Spill
	mov	r0, lr
	bl	fprintf
	movw	r1, :lower16:.L.str.2.304
	movt	r1, :upper16:.L.str.2.304
	ldr	lr, [r11, #-4]
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, lr
	bl	fprintf
	movw	r1, #1
	str	r1, [r11, #-8]
	str	r0, [sp, #16]           @ 4-byte Spill
.LBB143_5:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-8]
	cmp	r0, #15
	bge	.LBB143_8
@ BB#6:                                 @   in Loop: Header=BB143_5 Depth=1
	movw	r1, :lower16:.L.str.3.305
	movt	r1, :upper16:.L.str.3.305
	movw	r0, #2
	ldr	r2, [r11, #-4]
	ldr	r3, [r11, #-12]
	rsb	r3, r3, r3, lsl #4
	movw	r12, :lower16:bitrate_table
	movt	r12, :upper16:bitrate_table
	add	r3, r12, r3, lsl #2
	ldr	r12, [r11, #-8]
	add	r3, r3, r12, lsl #2
	ldr	r3, [r3]
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r2
	mov	r2, r3
	bl	fprintf
	str	r0, [sp, #8]            @ 4-byte Spill
@ BB#7:                                 @   in Loop: Header=BB143_5 Depth=1
	ldr	r0, [r11, #-8]
	add	r0, r0, #1
	str	r0, [r11, #-8]
	b	.LBB143_5
.LBB143_8:
	movw	r1, :lower16:.L.str.302
	movt	r1, :upper16:.L.str.302
	ldr	r0, [r11, #-4]
	bl	fprintf
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end143:
	.size	display_bitrates, .Lfunc_end143-display_bitrates
	.cantunwind
	.fnend

	.globl	BitrateIndex
	.p2align	2
	.type	BitrateIndex,%function
	.code	32                      @ @BitrateIndex
BitrateIndex:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #40
	movw	r3, #0
	str	r0, [r11, #-8]
	str	r1, [r11, #-12]
	str	r2, [r11, #-16]
	str	r3, [sp, #20]
	str	r3, [sp, #16]
.LBB144_1:                              @ =>This Inner Loop Header: Depth=1
	movw	r0, #0
	ldr	r1, [sp, #16]
	cmp	r1, #0
	str	r0, [sp, #12]           @ 4-byte Spill
	bne	.LBB144_3
@ BB#2:                                 @   in Loop: Header=BB144_1 Depth=1
	ldr	r0, [sp, #20]
	cmp	r0, #15
	movw	r0, #0
	movlt	r0, #1
	str	r0, [sp, #12]           @ 4-byte Spill
.LBB144_3:                              @   in Loop: Header=BB144_1 Depth=1
	ldr	r0, [sp, #12]           @ 4-byte Reload
	tst	r0, #1
	beq	.LBB144_8
@ BB#4:                                 @   in Loop: Header=BB144_1 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-12]
	rsb	r1, r1, r1, lsl #4
	movw	r2, :lower16:bitrate_table
	movt	r2, :upper16:bitrate_table
	add	r1, r2, r1, lsl #2
	ldr	r2, [sp, #20]
	add	r1, r1, r2, lsl #2
	ldr	r1, [r1]
	ldr	r2, [r11, #-8]
	cmp	r1, r2
	str	r0, [sp, #8]            @ 4-byte Spill
	bne	.LBB144_6
@ BB#5:                                 @   in Loop: Header=BB144_1 Depth=1
	movw	r0, #1
	str	r0, [sp, #16]
	b	.LBB144_7
.LBB144_6:                              @   in Loop: Header=BB144_1 Depth=1
	ldr	r0, [sp, #20]
	add	r0, r0, #1
	str	r0, [sp, #20]
.LBB144_7:                              @   in Loop: Header=BB144_1 Depth=1
	b	.LBB144_1
.LBB144_8:
	ldr	r0, [sp, #16]
	cmp	r0, #0
	beq	.LBB144_10
@ BB#9:
	ldr	r0, [sp, #20]
	str	r0, [r11, #-4]
	b	.LBB144_11
.LBB144_10:
	movw	r1, :lower16:.L.str.5.309
	movt	r1, :upper16:.L.str.5.309
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	ldr	r2, [r11, #-8]
	ldr	r3, [r11, #-16]
	bl	fprintf
	mvn	r1, #0
	str	r1, [r11, #-4]
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB144_11:
	ldr	r0, [r11, #-4]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end144:
	.size	BitrateIndex, .Lfunc_end144-BitrateIndex
	.cantunwind
	.fnend

	.globl	SmpFrqIndex
	.p2align	2
	.type	SmpFrqIndex,%function
	.code	32                      @ @SmpFrqIndex
SmpFrqIndex:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #16
	movw	r2, #44100
	movw	r3, #0
	str	r0, [sp, #8]
	str	r1, [sp, #4]
	ldr	r0, [sp, #4]
	str	r3, [r0]
	ldr	r0, [sp, #8]
	cmp	r0, r2
	bne	.LBB145_2
@ BB#1:
	movw	r0, #0
	movw	r1, #1
	ldr	r2, [sp, #4]
	str	r1, [r2]
	str	r0, [r11, #-4]
	b	.LBB145_13
.LBB145_2:
	movw	r0, #48000
	ldr	r1, [sp, #8]
	cmp	r1, r0
	bne	.LBB145_4
@ BB#3:
	movw	r0, #1
	ldr	r1, [sp, #4]
	str	r0, [r1]
	str	r0, [r11, #-4]
	b	.LBB145_13
.LBB145_4:
	ldr	r0, [sp, #8]
	cmp	r0, #32000
	bne	.LBB145_6
@ BB#5:
	movw	r0, #2
	movw	r1, #1
	ldr	r2, [sp, #4]
	str	r1, [r2]
	str	r0, [r11, #-4]
	b	.LBB145_13
.LBB145_6:
	movw	r0, #24000
	ldr	r1, [sp, #8]
	cmp	r1, r0
	bne	.LBB145_8
@ BB#7:
	movw	r0, #1
	movw	r1, #0
	ldr	r2, [sp, #4]
	str	r1, [r2]
	str	r0, [r11, #-4]
	b	.LBB145_13
.LBB145_8:
	movw	r0, #22050
	ldr	r1, [sp, #8]
	cmp	r1, r0
	bne	.LBB145_10
@ BB#9:
	movw	r0, #0
	ldr	r1, [sp, #4]
	str	r0, [r1]
	str	r0, [r11, #-4]
	b	.LBB145_13
.LBB145_10:
	ldr	r0, [sp, #8]
	cmp	r0, #16000
	bne	.LBB145_12
@ BB#11:
	movw	r0, #2
	movw	r1, #0
	ldr	r2, [sp, #4]
	str	r1, [r2]
	str	r0, [r11, #-4]
	b	.LBB145_13
.LBB145_12:
	movw	r1, :lower16:.L.str.6.312
	movt	r1, :upper16:.L.str.6.312
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	ldr	r2, [sp, #8]
	bl	fprintf
	mvn	r1, #0
	str	r1, [r11, #-4]
	str	r0, [sp]                @ 4-byte Spill
.LBB145_13:
	ldr	r0, [r11, #-4]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end145:
	.size	SmpFrqIndex, .Lfunc_end145-SmpFrqIndex
	.cantunwind
	.fnend

	.globl	mem_alloc
	.p2align	2
	.type	mem_alloc,%function
	.code	32                      @ @mem_alloc
mem_alloc:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	ldr	r0, [r11, #-4]
	bl	malloc
	movw	r1, #0
	str	r0, [sp, #12]
	ldr	r0, [sp, #12]
	cmp	r0, r1
	beq	.LBB146_2
@ BB#1:
	movw	r0, #0
	ldr	r1, [sp, #12]
	ldr	r2, [r11, #-4]
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #8]            @ 4-byte Reload
	and	r1, r1, #255
	bl	memset
	b	.LBB146_3
.LBB146_2:
	movw	r1, :lower16:.L.str.7.313
	movt	r1, :upper16:.L.str.7.313
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	ldr	r2, [r11, #-8]
	bl	fprintf
	movw	r1, #1
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB146_3:
	ldr	r0, [sp, #12]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end146:
	.size	mem_alloc, .Lfunc_end146-mem_alloc
	.cantunwind
	.fnend

	.globl	DetermineByteOrder
	.p2align	2
	.type	DetermineByteOrder,%function
	.code	32                      @ @DetermineByteOrder
DetermineByteOrder:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #24
	movw	r2, #4
	add	r0, sp, #8
	sub	r1, r11, #9
	ldr	r3, .LCPI147_0
	str	r3, [sp, #8]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #4]            @ 4-byte Reload
	bl	strncpy
	sub	r1, r11, #9
	movw	r2, #0
	strb	r2, [r11, #-5]
	movw	r2, :lower16:.L.str.8.314
	movt	r2, :upper16:.L.str.8.314
	str	r0, [sp]                @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	strcmp
	cmp	r0, #0
	bne	.LBB147_2
@ BB#1:
	movw	r0, #1
	str	r0, [r11, #-4]
	b	.LBB147_5
.LBB147_2:
	sub	r0, r11, #9
	movw	r1, :lower16:.L.str.9.315
	movt	r1, :upper16:.L.str.9.315
	bl	strcmp
	cmp	r0, #0
	bne	.LBB147_4
@ BB#3:
	movw	r0, #2
	str	r0, [r11, #-4]
	b	.LBB147_5
.LBB147_4:
	movw	r0, #0
	str	r0, [r11, #-4]
.LBB147_5:
	ldr	r0, [r11, #-4]
	mov	sp, r11
	pop	{r11, pc}
	.p2align	2
@ BB#6:
.LCPI147_0:
	.long	1094861636              @ 0x41424344
.Lfunc_end147:
	.size	DetermineByteOrder, .Lfunc_end147-DetermineByteOrder
	.cantunwind
	.fnend

	.globl	SwapBytesInWords
	.p2align	2
	.type	SwapBytesInWords,%function
	.code	32                      @ @SwapBytesInWords
SwapBytesInWords:
	.fnstart
@ BB#0:
	sub	sp, sp, #24
	movw	r2, #0
	add	r3, sp, #10
	str	r0, [sp, #20]
	str	r1, [sp, #16]
	str	r3, [sp]
	str	r2, [sp, #12]
.LBB148_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #12]
	ldr	r1, [sp, #16]
	cmp	r0, r1
	bge	.LBB148_4
@ BB#2:                                 @   in Loop: Header=BB148_1 Depth=1
	ldr	r0, [sp, #20]
	ldrh	r0, [r0]
	strh	r0, [sp, #10]
	ldr	r0, [sp, #20]
	add	r1, r0, #2
	str	r1, [sp, #20]
	str	r0, [sp, #4]
	ldr	r0, [sp]
	ldrb	r0, [r0, #1]
	ldr	r1, [sp, #4]
	strb	r0, [r1]
	ldr	r0, [sp]
	ldrb	r0, [r0]
	ldr	r1, [sp, #4]
	strb	r0, [r1, #1]
@ BB#3:                                 @   in Loop: Header=BB148_1 Depth=1
	ldr	r0, [sp, #12]
	add	r0, r0, #1
	str	r0, [sp, #12]
	b	.LBB148_1
.LBB148_4:
	add	sp, sp, #24
	bx	lr
.Lfunc_end148:
	.size	SwapBytesInWords, .Lfunc_end148-SwapBytesInWords
	.cantunwind
	.fnend

	.globl	empty_buffer
	.p2align	2
	.type	empty_buffer,%function
	.code	32                      @ @empty_buffer
empty_buffer:
	.fnstart
@ BB#0:
	sub	sp, sp, #8
	str	r0, [sp, #4]
	ldr	r0, [sp, #4]
	ldr	r0, [r0, #24]
	add	r0, r0, #1
	str	r0, [sp]
	ldr	r0, [sp, #4]
	ldr	r0, [r0, #16]
	ldr	r1, [sp]
	sub	r0, r0, r1
	cmp	r0, #0
	bgt	.LBB149_2
@ BB#1:
	b	.LBB149_3
.LBB149_2:
	movw	r0, #0
	movw	r1, #8
	ldr	r2, [sp, #4]
	ldr	r2, [r2, #16]
	sub	r2, r2, #1
	ldr	r3, [sp, #4]
	str	r2, [r3, #24]
	ldr	r2, [sp, #4]
	str	r1, [r2, #28]
	ldr	r1, [sp, #4]
	ldr	r1, [r1, #12]
	ldr	r2, [sp, #4]
	ldr	r2, [r2, #24]
	add	r1, r1, r2
	strb	r0, [r1]
.LBB149_3:
	add	sp, sp, #8
	bx	lr
.Lfunc_end149:
	.size	empty_buffer, .Lfunc_end149-empty_buffer
	.cantunwind
	.fnend

	.globl	copy_buffer
	.p2align	2
	.type	copy_buffer,%function
	.code	32                      @ @copy_buffer
copy_buffer:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #32
	movw	r3, #0
	str	r0, [r11, #-8]
	str	r1, [r11, #-12]
	str	r2, [sp, #16]
	str	r3, [sp, #8]
	ldr	r0, [r11, #-12]
	cmp	r0, #0
	beq	.LBB150_3
@ BB#1:
	ldr	r0, [sp, #16]
	ldr	r0, [r0, #16]
	sub	r0, r0, #1
	ldr	r1, [sp, #16]
	ldr	r1, [r1, #24]
	sub	r0, r0, r1
	ldr	r1, [r11, #-12]
	cmp	r0, r1
	ble	.LBB150_3
@ BB#2:
	mvn	r0, #0
	str	r0, [r11, #-4]
	b	.LBB150_10
.LBB150_3:
	ldr	r0, [sp, #16]
	ldr	r0, [r0, #16]
	sub	r0, r0, #1
	str	r0, [sp, #12]
.LBB150_4:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #12]
	ldr	r1, [sp, #16]
	ldr	r1, [r1, #24]
	cmp	r0, r1
	ble	.LBB150_7
@ BB#5:                                 @   in Loop: Header=BB150_4 Depth=1
	ldr	r0, [sp, #16]
	ldr	r0, [r0, #12]
	ldr	r1, [sp, #12]
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldr	r1, [r11, #-8]
	ldr	r2, [sp, #8]
	add	r3, r2, #1
	str	r3, [sp, #8]
	add	r1, r1, r2
	strb	r0, [r1]
@ BB#6:                                 @   in Loop: Header=BB150_4 Depth=1
	mvn	r0, #0
	ldr	r1, [sp, #12]
	add	r0, r1, r0
	str	r0, [sp, #12]
	b	.LBB150_4
.LBB150_7:
	movw	r0, #1
	ldr	r1, [sp, #8]
	ldr	r2, [sp, #16]
	ldr	r2, [r2, #16]
	sub	r2, r2, #1
	ldr	r3, [sp, #16]
	ldr	r3, [r3, #24]
	sub	r2, r2, r3
	cmp	r1, r2
	str	r0, [sp, #4]            @ 4-byte Spill
	beq	.LBB150_9
@ BB#8:
	movw	r0, :lower16:.L.str.10.318
	movt	r0, :upper16:.L.str.10.318
	movw	r1, :lower16:.L.str.11.319
	movt	r1, :upper16:.L.str.11.319
	movw	r2, #271
	movw	r3, :lower16:.L__func__.copy_buffer
	movt	r3, :upper16:.L__func__.copy_buffer
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB150_9:
	ldr	r0, [sp, #4]            @ 4-byte Reload
	ldr	r1, [sp, #16]
	str	r0, [sp]                @ 4-byte Spill
	mov	r0, r1
	bl	empty_buffer
	ldr	r0, [sp, #8]
	str	r0, [r11, #-4]
.LBB150_10:
	ldr	r0, [r11, #-4]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end150:
	.size	copy_buffer, .Lfunc_end150-copy_buffer
	.cantunwind
	.fnend

	.globl	init_bit_stream_w
	.p2align	2
	.type	init_bit_stream_w,%function
	.code	32                      @ @init_bit_stream_w
init_bit_stream_w:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #8
	movw	r1, #16384
	str	r0, [sp, #4]
	ldr	r0, [sp, #4]
	bl	alloc_buffer
	movw	r0, #0
	movw	r1, #8
	movw	lr, #16383
	ldr	r2, [sp, #4]
	str	lr, [r2, #24]
	ldr	r2, [sp, #4]
	str	r1, [r2, #28]
	ldr	r1, [sp, #4]
	str	r0, [r1, #20]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end151:
	.size	init_bit_stream_w, .Lfunc_end151-init_bit_stream_w
	.cantunwind
	.fnend

	.globl	alloc_buffer
	.p2align	2
	.type	alloc_buffer,%function
	.code	32                      @ @alloc_buffer
alloc_buffer:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #16
	movw	r2, :lower16:.L.str.12.322
	movt	r2, :upper16:.L.str.12.322
	movw	r3, #0
	str	r0, [r11, #-4]
	str	r1, [sp, #8]
	mov	r0, r1
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	str	r3, [sp]                @ 4-byte Spill
	bl	mem_alloc
	ldr	r1, [r11, #-4]
	str	r0, [r1, #12]
	ldr	r0, [sp, #8]
	ldr	r1, [r11, #-4]
	str	r0, [r1, #16]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end152:
	.size	alloc_buffer, .Lfunc_end152-alloc_buffer
	.cantunwind
	.fnend

	.globl	desalloc_buffer
	.p2align	2
	.type	desalloc_buffer,%function
	.code	32                      @ @desalloc_buffer
desalloc_buffer:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #8
	str	r0, [sp, #4]
	ldr	r0, [sp, #4]
	ldr	r0, [r0, #12]
	bl	free
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end153:
	.size	desalloc_buffer, .Lfunc_end153-desalloc_buffer
	.cantunwind
	.fnend

	.globl	putbits
	.p2align	2
	.type	putbits,%function
	.code	32                      @ @putbits
putbits:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #48
	str	r0, [r11, #-4]
	str	r1, [r11, #-8]
	str	r2, [r11, #-12]
	ldr	r0, [r11, #-12]
	str	r0, [r11, #-16]
	ldr	r0, [r11, #-12]
	cmp	r0, #32
	ble	.LBB154_2
@ BB#1:
	movw	r1, :lower16:.L.str.13.327
	movt	r1, :upper16:.L.str.13.327
	movw	r2, #32
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	str	r0, [sp, #20]           @ 4-byte Spill
.LBB154_2:
	ldr	r0, [r11, #-12]
	ldr	r1, [r11, #-4]
	ldr	r2, [r1, #20]
	add	r0, r2, r0
	str	r0, [r1, #20]
.LBB154_3:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-16]
	cmp	r0, #0
	ble	.LBB154_12
@ BB#4:                                 @   in Loop: Header=BB154_3 Depth=1
	ldr	r0, [r11, #-16]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #28]
	cmp	r0, r1
	bge	.LBB154_6
@ BB#5:                                 @   in Loop: Header=BB154_3 Depth=1
	ldr	r0, [r11, #-16]
	str	r0, [sp, #16]           @ 4-byte Spill
	b	.LBB154_7
.LBB154_6:                              @   in Loop: Header=BB154_3 Depth=1
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #28]
	str	r0, [sp, #16]           @ 4-byte Spill
.LBB154_7:                              @   in Loop: Header=BB154_3 Depth=1
	ldr	r0, [sp, #16]           @ 4-byte Reload
	movw	r1, :lower16:putmask
	movt	r1, :upper16:putmask
	movw	r2, #2
	str	r0, [r11, #-20]
	ldr	r3, [r11, #-8]
	ldr	r12, [r11, #-16]
	sub	r0, r12, r0
	lsr	r0, r3, r0
	str	r0, [sp, #24]
	ldr	r3, [r11, #-20]
	movw	r12, :lower16:putmask
	movt	r12, :upper16:putmask
	add	r3, r12, r3, lsl #2
	ldr	r3, [r3]
	and	r0, r0, r3
	ldr	r3, [r11, #-4]
	ldr	r3, [r3, #28]
	ldr	r12, [r11, #-20]
	sub	r3, r3, r12
	lsl	r0, r0, r3
	ldr	r3, [r11, #-4]
	ldr	r3, [r3, #12]
	ldr	r12, [r11, #-4]
	ldr	r12, [r12, #24]
	add	r3, r3, r12
	ldrb	r12, [r3]
	orr	r0, r12, r0
	strb	r0, [r3]
	ldr	r0, [r11, #-20]
	ldr	r3, [r11, #-4]
	ldr	r12, [r3, #28]
	sub	r0, r12, r0
	str	r0, [r3, #28]
	ldr	r0, [r11, #-4]
	ldr	r0, [r0, #28]
	cmp	r0, #0
	str	r2, [sp, #12]           @ 4-byte Spill
	str	r1, [sp, #8]            @ 4-byte Spill
	bne	.LBB154_11
@ BB#8:                                 @   in Loop: Header=BB154_3 Depth=1
	movw	r0, #1
	mvn	r1, #0
	movw	r2, #8
	ldr	r3, [r11, #-4]
	str	r2, [r3, #28]
	ldr	r2, [r11, #-4]
	ldr	r3, [r2, #24]
	add	r1, r3, r1
	str	r1, [r2, #24]
	ldr	r1, [r11, #-4]
	ldr	r1, [r1, #24]
	cmp	r1, #0
	str	r0, [sp, #4]            @ 4-byte Spill
	bge	.LBB154_10
@ BB#9:                                 @   in Loop: Header=BB154_3 Depth=1
	movw	r0, :lower16:.L.str.14.328
	movt	r0, :upper16:.L.str.14.328
	movw	r1, :lower16:.L.str.11.319
	movt	r1, :upper16:.L.str.11.319
	movw	r2, #329
	movw	r3, :lower16:.L__func__.putbits
	movt	r3, :upper16:.L__func__.putbits
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB154_10:                             @   in Loop: Header=BB154_3 Depth=1
	ldr	r0, [sp, #4]            @ 4-byte Reload
	movw	r1, #0
	ldr	r2, [r11, #-4]
	ldr	r2, [r2, #12]
	ldr	r3, [r11, #-4]
	ldr	r3, [r3, #24]
	add	r2, r2, r3
	strb	r1, [r2]
	str	r0, [sp]                @ 4-byte Spill
.LBB154_11:                             @   in Loop: Header=BB154_3 Depth=1
	ldr	r0, [r11, #-20]
	ldr	r1, [r11, #-16]
	sub	r0, r1, r0
	str	r0, [r11, #-16]
	b	.LBB154_3
.LBB154_12:
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end154:
	.size	putbits, .Lfunc_end154-putbits
	.cantunwind
	.fnend

	.globl	calc_sfb_ave_noise
	.p2align	3
	.type	calc_sfb_ave_noise,%function
	.code	32                      @ @calc_sfb_ave_noise
calc_sfb_ave_noise:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #104
	vldr	d16, [r11, #8]
	vmov.f64	d17, #7.500000e-01
	vldr	d18, .LCPI155_0
	str	r0, [r11, #-12]
	str	r1, [r11, #-16]
	str	r2, [r11, #-20]
	str	r3, [r11, #-24]
	vstr	d16, [r11, #-32]
	vstr	d18, [r11, #-48]
	vldr	d16, [r11, #-32]
	vmov	r0, r1, d16
	vmov	r2, r3, d17
	bl	pow
	vmov	d16, r0, r1
	movw	r0, #0
	vstr	d16, [sp, #48]
	str	r0, [r11, #-36]
.LBB155_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-36]
	ldr	r1, [r11, #-20]
	ldr	r2, [r11, #-24]
	mul	r1, r1, r2
	cmp	r0, r1
	bge	.LBB155_10
@ BB#2:                                 @   in Loop: Header=BB155_1 Depth=1
	movw	r0, #8206
	movw	r1, #3
	ldr	r2, [r11, #-16]
	ldr	r3, [r11, #-36]
	add	r2, r2, r3, lsl #3
	vldr	d16, [r2]
	vldr	d17, [sp, #48]
	vdiv.f64	d16, d16, d17
	vmov	r2, r3, d16
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #16]           @ 4-byte Spill
	mov	r1, r3
	bl	floor
	vmov	d16, r0, r1
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	str	r0, [sp, #44]
	ldr	r0, [sp, #44]
	ldr	r1, [sp, #20]           @ 4-byte Reload
	cmp	r0, r1
	ble	.LBB155_4
@ BB#3:
	vmov.f64	d16, #-1.000000e+00
	vstr	d16, [r11, #-8]
	b	.LBB155_11
.LBB155_4:                              @   in Loop: Header=BB155_1 Depth=1
	movw	r0, #8206
	movw	r1, :lower16:pow43
	movt	r1, :upper16:pow43
	movw	r2, #3
	ldr	r3, [r11, #-12]
	ldr	r12, [r11, #-36]
	add	r3, r3, r12, lsl #3
	vldr	d16, [r3]
	vabs.f64	d16, d16
	ldr	r3, [sp, #44]
	movw	r12, :lower16:pow43
	movt	r12, :upper16:pow43
	add	r3, r12, r3, lsl #3
	vldr	d17, [r3]
	vldr	d18, [r11, #-32]
	vmul.f64	d17, d17, d18
	vsub.f64	d16, d16, d17
	vstr	d16, [sp, #32]
	ldr	r3, [sp, #44]
	cmp	r3, r0
	str	r2, [sp, #12]           @ 4-byte Spill
	str	r1, [sp, #8]            @ 4-byte Spill
	bge	.LBB155_8
@ BB#5:                                 @   in Loop: Header=BB155_1 Depth=1
	movw	r0, :lower16:pow43
	movt	r0, :upper16:pow43
	movw	r1, #3
	ldr	r2, [r11, #-12]
	ldr	r3, [r11, #-36]
	add	r2, r2, r3, lsl #3
	vldr	d16, [r2]
	vabs.f64	d16, d16
	ldr	r2, [sp, #44]
	add	r2, r2, #1
	movw	r3, :lower16:pow43
	movt	r3, :upper16:pow43
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	vldr	d18, [r11, #-32]
	vmul.f64	d17, d17, d18
	vsub.f64	d16, d16, d17
	vstr	d16, [sp, #24]
	vldr	d16, [sp, #24]
	vabs.f64	d16, d16
	vldr	d17, [sp, #32]
	vabs.f64	d17, d17
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #4]            @ 4-byte Spill
	str	r1, [sp]                @ 4-byte Spill
	bpl	.LBB155_7
@ BB#6:                                 @   in Loop: Header=BB155_1 Depth=1
	vldr	d16, [sp, #24]
	vstr	d16, [sp, #32]
.LBB155_7:                              @   in Loop: Header=BB155_1 Depth=1
	b	.LBB155_8
.LBB155_8:                              @   in Loop: Header=BB155_1 Depth=1
	vldr	d16, [sp, #32]
	vldr	d17, [sp, #32]
	vmul.f64	d16, d16, d17
	vldr	d17, [r11, #-48]
	vadd.f64	d16, d17, d16
	vstr	d16, [r11, #-48]
@ BB#9:                                 @   in Loop: Header=BB155_1 Depth=1
	ldr	r0, [r11, #-20]
	ldr	r1, [r11, #-36]
	add	r0, r1, r0
	str	r0, [r11, #-36]
	b	.LBB155_1
.LBB155_10:
	vldr	d16, [r11, #-48]
	ldr	r0, [r11, #-24]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d16, d17
	vstr	d16, [r11, #-8]
.LBB155_11:
	vldr	d16, [r11, #-8]
	vmov	r0, r1, d16
	mov	sp, r11
	pop	{r11, pc}
	.p2align	3
@ BB#12:
.LCPI155_0:
	.long	0                       @ double 0
	.long	0
.Lfunc_end155:
	.size	calc_sfb_ave_noise, .Lfunc_end155-calc_sfb_ave_noise
	.cantunwind
	.fnend

	.globl	find_scalefac
	.p2align	3
	.type	find_scalefac,%function
	.code	32                      @ @find_scalefac
find_scalefac:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r10, r11, lr}
	add	r11, sp, #16
	sub	sp, sp, #128
	ldr	r12, [r11, #16]
	vldr	d16, [r11, #8]
	movw	lr, #0
	movw	r4, #10000
	vldr	d17, .LCPI156_0
	movw	r5, #128
	vldr	d18, .LCPI156_1
	mvn	r6, #81
	vldr	d19, .LCPI156_2
	str	r0, [r11, #-28]
	str	r1, [r11, #-32]
	str	r2, [r11, #-36]
	str	r3, [r11, #-40]
	vstr	d16, [r11, #-48]
	str	r12, [r11, #-52]
	vstr	d19, [sp, #64]
	str	r6, [sp, #44]
	vstr	d18, [sp, #48]
	str	r5, [sp, #36]
	vstr	d17, [sp, #56]
	str	r4, [sp, #40]
	str	lr, [sp, #32]
.LBB156_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [sp, #32]
	cmp	r0, #7
	bge	.LBB156_14
@ BB#2:                                 @   in Loop: Header=BB156_1 Depth=1
	vmov.f64	d16, #2.000000e+00
	movw	r1, #2
	vldr	d17, [sp, #48]
	vdiv.f64	d17, d17, d16
	vstr	d17, [sp, #48]
	ldr	r0, [sp, #36]
	vstr	d16, [sp, #24]          @ 8-byte Spill
	bl	__divsi3
	str	r0, [sp, #36]
	vldr	d16, [sp, #64]
	vldr	d17, [sp, #24]          @ 8-byte Reload
	vmov	r0, r1, d17
	vmov	r2, r3, d16
	bl	pow
	vmov	d16, r0, r1
	vstr	d16, [sp, #72]
	ldr	r0, [r11, #-28]
	ldr	r1, [r11, #-32]
	ldr	r2, [r11, #-36]
	ldr	r3, [r11, #-52]
	vldr	d16, [sp, #72]
	vstr	d16, [sp]
	bl	calc_sfb_ave_noise
	vmov	d16, r0, r1
	vstr	d16, [r11, #-64]
	vldr	d16, [r11, #-64]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB156_4
@ BB#3:                                 @   in Loop: Header=BB156_1 Depth=1
	vldr	d16, [sp, #48]
	vldr	d17, [sp, #64]
	vadd.f64	d16, d17, d16
	vstr	d16, [sp, #64]
	ldr	r0, [sp, #36]
	ldr	r1, [sp, #44]
	add	r0, r1, r0
	str	r0, [sp, #44]
	b	.LBB156_12
.LBB156_4:                              @   in Loop: Header=BB156_1 Depth=1
	vldr	d16, .LCPI156_0
	vldr	d17, [sp, #56]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	bne	.LBB156_6
@ BB#5:                                 @   in Loop: Header=BB156_1 Depth=1
	vldr	d16, [sp, #64]
	vstr	d16, [sp, #56]
.LBB156_6:                              @   in Loop: Header=BB156_1 Depth=1
	movw	r0, #10000
	ldr	r1, [sp, #40]
	cmp	r1, r0
	bne	.LBB156_8
@ BB#7:                                 @   in Loop: Header=BB156_1 Depth=1
	ldr	r0, [sp, #44]
	str	r0, [sp, #40]
.LBB156_8:                              @   in Loop: Header=BB156_1 Depth=1
	vldr	d16, [r11, #-64]
	vldr	d17, [r11, #-48]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	ble	.LBB156_10
@ BB#9:                                 @   in Loop: Header=BB156_1 Depth=1
	vldr	d16, [sp, #48]
	vldr	d17, [sp, #64]
	vsub.f64	d16, d17, d16
	vstr	d16, [sp, #64]
	ldr	r0, [sp, #36]
	ldr	r1, [sp, #44]
	sub	r0, r1, r0
	str	r0, [sp, #44]
	b	.LBB156_11
.LBB156_10:                             @   in Loop: Header=BB156_1 Depth=1
	vldr	d16, [sp, #64]
	vstr	d16, [sp, #56]
	ldr	r0, [sp, #44]
	str	r0, [sp, #40]
	vldr	d16, [sp, #48]
	vldr	d17, [sp, #64]
	vadd.f64	d16, d17, d16
	vstr	d16, [sp, #64]
	ldr	r0, [sp, #36]
	ldr	r1, [sp, #44]
	add	r0, r1, r0
	str	r0, [sp, #44]
.LBB156_11:                             @   in Loop: Header=BB156_1 Depth=1
	b	.LBB156_12
.LBB156_12:                             @   in Loop: Header=BB156_1 Depth=1
	b	.LBB156_13
.LBB156_13:                             @   in Loop: Header=BB156_1 Depth=1
	ldr	r0, [sp, #32]
	add	r0, r0, #1
	str	r0, [sp, #32]
	b	.LBB156_1
.LBB156_14:
	movw	r0, #1
	vldr	d16, .LCPI156_0
	vldr	d17, [sp, #56]
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #20]           @ 4-byte Spill
	bne	.LBB156_16
@ BB#15:
	movw	r0, :lower16:.L.str.329
	movt	r0, :upper16:.L.str.329
	movw	r1, :lower16:.L.str.1.330
	movt	r1, :upper16:.L.str.1.330
	movw	r2, #108
	movw	r3, :lower16:.L__func__.find_scalefac
	movt	r3, :upper16:.L__func__.find_scalefac
	bl	__assert_fail
	movw	r0, #0
	str	r0, [sp, #20]           @ 4-byte Spill
.LBB156_16:
	ldr	r0, [sp, #20]           @ 4-byte Reload
	vmov.f64	d16, #7.500000e-01
	vldr	d17, [sp, #56]
	vadd.f64	d16, d17, d16
	vstr	d16, [sp, #64]
	ldr	r1, [sp, #40]
	add	r1, r1, #3
	str	r1, [sp, #44]
	str	r0, [sp, #16]           @ 4-byte Spill
.LBB156_17:                             @ =>This Inner Loop Header: Depth=1
	vldr	d16, .LCPI156_3
	vldr	d17, [sp, #64]
	vldr	d18, [sp, #56]
	vadd.f64	d16, d18, d16
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	ble	.LBB156_27
@ BB#18:                                @   in Loop: Header=BB156_17 Depth=1
	vldr	d16, .LCPI156_3
	vmov.f64	d17, #2.000000e+00
	vldr	d18, [sp, #64]
	vldr	d19, [sp, #56]
	vldr	d20, [sp, #48]
	vmul.f64	d17, d17, d20
	vadd.f64	d17, d19, d17
	vsub.f64	d17, d18, d17
	vabs.f64	d17, d17
	vcmpe.f64	d17, d16
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB156_20
@ BB#19:                                @   in Loop: Header=BB156_17 Depth=1
	vmov.f64	d16, #2.500000e-01
	vldr	d17, [sp, #64]
	vsub.f64	d16, d17, d16
	vstr	d16, [sp, #64]
.LBB156_20:                             @   in Loop: Header=BB156_17 Depth=1
	movw	r0, #1
	ldr	r1, [sp, #44]
	ldr	r2, [sp, #40]
	ldr	r3, [sp, #36]
	lsl	r3, r3, #1
	add	r2, r2, r3
	cmp	r1, r2
	str	r0, [sp, #12]           @ 4-byte Spill
	bne	.LBB156_22
@ BB#21:                                @   in Loop: Header=BB156_17 Depth=1
	ldr	r0, [sp, #44]
	sub	r0, r0, #1
	str	r0, [sp, #44]
.LBB156_22:                             @   in Loop: Header=BB156_17 Depth=1
	vmov.f64	d16, #2.000000e+00
	vldr	d17, [sp, #64]
	vmov	r0, r1, d16
	vmov	r2, r3, d17
	bl	pow
	vmov	d16, r0, r1
	vstr	d16, [sp, #72]
	ldr	r0, [r11, #-28]
	ldr	r1, [r11, #-32]
	ldr	r2, [r11, #-36]
	ldr	r3, [r11, #-52]
	vldr	d16, [sp, #72]
	vstr	d16, [sp]
	bl	calc_sfb_ave_noise
	vmov	d16, r0, r1
	vstr	d16, [r11, #-64]
	vldr	d16, [r11, #-64]
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB156_26
@ BB#23:                                @   in Loop: Header=BB156_17 Depth=1
	vldr	d16, [r11, #-64]
	vldr	d17, [r11, #-48]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	bhi	.LBB156_25
@ BB#24:
	vldr	d16, [sp, #64]
	vstr	d16, [r11, #-24]
	b	.LBB156_28
.LBB156_25:                             @   in Loop: Header=BB156_17 Depth=1
	b	.LBB156_26
.LBB156_26:                             @   in Loop: Header=BB156_17 Depth=1
	vmov.f64	d16, #2.500000e-01
	vldr	d17, [sp, #64]
	vsub.f64	d16, d17, d16
	vstr	d16, [sp, #64]
	ldr	r0, [sp, #44]
	sub	r0, r0, #1
	str	r0, [sp, #44]
	b	.LBB156_17
.LBB156_27:
	vldr	d16, [sp, #56]
	vstr	d16, [r11, #-24]
.LBB156_28:
	vldr	d16, [r11, #-24]
	vmov	r0, r1, d16
	sub	sp, r11, #16
	pop	{r4, r5, r6, r10, r11, pc}
	.p2align	3
@ BB#29:
.LCPI156_0:
	.long	0                       @ double 1.0E+4
	.long	1086556160
.LCPI156_1:
	.long	0                       @ double 32
	.long	1077936128
.LCPI156_2:
	.long	0                       @ double -20.5
	.long	3224666112
.LCPI156_3:
	.long	1202590843              @ double 0.01
	.long	1065646817
.Lfunc_end156:
	.size	find_scalefac, .Lfunc_end156-find_scalefac
	.cantunwind
	.fnend

	.globl	compute_scalefacs_short
	.p2align	3
	.type	compute_scalefacs_short,%function
	.code	32                      @ @compute_scalefacs_short
compute_scalefacs_short:
	.fnstart
@ BB#0:
	push	{r4, r10, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #376
	movw	r3, #0
	vldr	d16, .LCPI157_0
	movw	r12, #288
	add	lr, sp, #56
	movw	r4, #2
	str	r0, [r11, #-12]
	str	r1, [r11, #-16]
	str	r2, [r11, #-20]
	ldr	r0, [r11, #-16]
	ldr	r0, [r0, #68]
	cmp	r0, #0
	movw	r0, #0
	moveq	r0, #1
	tst	r0, #1
	moveq	r4, #1
	str	r4, [sp, #44]
	ldr	r0, [r11, #-12]
	str	r0, [sp, #40]           @ 4-byte Spill
	mov	r0, lr
	ldr	r1, [sp, #40]           @ 4-byte Reload
	mov	r2, r12
	str	r3, [sp, #36]           @ 4-byte Spill
	vstr	d16, [sp, #24]          @ 8-byte Spill
	bl	memcpy
	vldr	d16, [sp, #24]          @ 8-byte Reload
	vstr	d16, [r11, #-40]
	ldr	r0, [sp, #36]           @ 4-byte Reload
	str	r0, [sp, #52]
.LBB157_1:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB157_3 Depth 2
	ldr	r0, [sp, #52]
	cmp	r0, #12
	bge	.LBB157_13
@ BB#2:                                 @   in Loop: Header=BB157_1 Depth=1
	movw	r0, #0
	str	r0, [sp, #48]
.LBB157_3:                              @   Parent Loop BB157_1 Depth=1
                                        @ =>  This Inner Loop Header: Depth=2
	ldr	r0, [sp, #48]
	cmp	r0, #3
	bge	.LBB157_11
@ BB#4:                                 @   in Loop: Header=BB157_3 Depth=2
	movw	r0, #2
	ldr	r1, [sp, #52]
	add	r1, r1, r1, lsl #1
	add	r2, sp, #56
	add	r2, r2, r1, lsl #3
	ldr	r3, [sp, #48]
	add	r2, r2, r3, lsl #3
	vldr	d16, [r2]
	vldr	s0, [sp, #44]
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d16, d17
	vmov.f64	d17, #7.500000e-01
	vsub.f64	d16, d17, d16
	vldr	d17, .LCPI157_1
	vadd.f64	d16, d16, d17
	vmov	r2, r12, d16
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #16]           @ 4-byte Spill
	mov	r1, r12
	str	r3, [sp, #12]           @ 4-byte Spill
	bl	floor
	vmov	d16, r0, r1
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	ldr	r1, [r11, #-20]
	ldr	r2, [sp, #16]           @ 4-byte Reload
	add	r1, r1, r2, lsl #2
	ldr	r3, [sp, #12]           @ 4-byte Reload
	add	r1, r1, r3, lsl #2
	str	r0, [r1]
	ldr	r0, [sp, #52]
	cmp	r0, #6
	bge	.LBB157_6
@ BB#5:                                 @   in Loop: Header=BB157_3 Depth=2
	vmov.f64	d16, #1.500000e+01
	ldr	r0, [sp, #44]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d16, d17
	vstr	d16, [r11, #-32]
	b	.LBB157_7
.LBB157_6:                              @   in Loop: Header=BB157_3 Depth=2
	vmov.f64	d16, #7.000000e+00
	ldr	r0, [sp, #44]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d16, d17
	vstr	d16, [r11, #-32]
.LBB157_7:                              @   in Loop: Header=BB157_3 Depth=2
	movw	r0, #3
	vldr	d16, [r11, #-32]
	ldr	r1, [sp, #52]
	add	r1, r1, r1, lsl #1
	add	r2, sp, #56
	add	r1, r2, r1, lsl #3
	ldr	r2, [sp, #48]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vadd.f64	d16, d16, d17
	vldr	d17, [r11, #-40]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #8]            @ 4-byte Spill
	ble	.LBB157_9
@ BB#8:                                 @   in Loop: Header=BB157_3 Depth=2
	movw	r0, #3
	vldr	d16, [r11, #-32]
	ldr	r1, [sp, #52]
	add	r1, r1, r1, lsl #1
	add	r2, sp, #56
	add	r1, r2, r1, lsl #3
	ldr	r2, [sp, #48]
	add	r1, r1, r2, lsl #3
	vldr	d17, [r1]
	vadd.f64	d16, d16, d17
	vstr	d16, [r11, #-40]
	str	r0, [sp, #4]            @ 4-byte Spill
.LBB157_9:                              @   in Loop: Header=BB157_3 Depth=2
	b	.LBB157_10
.LBB157_10:                             @   in Loop: Header=BB157_3 Depth=2
	ldr	r0, [sp, #48]
	add	r0, r0, #1
	str	r0, [sp, #48]
	b	.LBB157_3
.LBB157_11:                             @   in Loop: Header=BB157_1 Depth=1
	b	.LBB157_12
.LBB157_12:                             @   in Loop: Header=BB157_1 Depth=1
	ldr	r0, [sp, #52]
	add	r0, r0, #1
	str	r0, [sp, #52]
	b	.LBB157_1
.LBB157_13:
	vldr	d16, [r11, #-40]
	vmov	r0, r1, d16
	sub	sp, r11, #8
	pop	{r4, r10, r11, pc}
	.p2align	3
@ BB#14:
.LCPI157_0:
	.long	0                       @ double 0
	.long	0
.LCPI157_1:
	.long	3944497965              @ double 1.0E-4
	.long	1058682594
.Lfunc_end157:
	.size	compute_scalefacs_short, .Lfunc_end157-compute_scalefacs_short
	.cantunwind
	.fnend

	.globl	compute_scalefacs_long
	.p2align	3
	.type	compute_scalefacs_long,%function
	.code	32                      @ @compute_scalefacs_long
compute_scalefacs_long:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r7, r11, lr}
	add	r11, sp, #16
	sub	sp, sp, #272
	movw	r3, #11
	movw	r12, #0
	movw	lr, #168
	add	r4, sp, #88
	movw	r5, #2
	str	r0, [r11, #-20]
	str	r1, [r11, #-24]
	str	r2, [r11, #-28]
	ldr	r0, [r11, #-24]
	ldr	r0, [r0, #68]
	cmp	r0, #0
	movw	r0, #0
	moveq	r0, #1
	tst	r0, #1
	moveq	r5, #1
	str	r5, [sp, #68]
	ldr	r0, [r11, #-20]
	str	r0, [sp, #64]           @ 4-byte Spill
	mov	r0, r4
	ldr	r1, [sp, #64]           @ 4-byte Reload
	mov	r2, lr
	str	r3, [sp, #60]           @ 4-byte Spill
	str	r12, [sp, #56]          @ 4-byte Spill
	bl	memcpy
	ldr	r0, [r11, #-24]
	ldr	r1, [sp, #56]           @ 4-byte Reload
	str	r1, [r0, #64]
	ldr	r0, [sp, #60]           @ 4-byte Reload
	str	r0, [r11, #-32]
.LBB158_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-32]
	cmp	r0, #21
	bge	.LBB158_6
@ BB#2:                                 @   in Loop: Header=BB158_1 Depth=1
	movw	r0, :lower16:pretab
	movt	r0, :upper16:pretab
	movw	r1, #2
	ldr	r2, [r11, #-32]
	add	r3, sp, #88
	add	r3, r3, r2, lsl #3
	vldr	d16, [r3]
	movw	r3, :lower16:pretab
	movt	r3, :upper16:pretab
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	ldr	r3, [sp, #68]
	str	r0, [sp, #52]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #48]           @ 4-byte Spill
	mov	r1, r3
	vstr	d16, [sp, #40]          @ 8-byte Spill
	bl	__divsi3
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	vldr	d17, [sp, #40]          @ 8-byte Reload
	vadd.f64	d16, d17, d16
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB158_4
@ BB#3:
	b	.LBB158_6
.LBB158_4:                              @   in Loop: Header=BB158_1 Depth=1
	b	.LBB158_5
.LBB158_5:                              @   in Loop: Header=BB158_1 Depth=1
	ldr	r0, [r11, #-32]
	add	r0, r0, #1
	str	r0, [r11, #-32]
	b	.LBB158_1
.LBB158_6:
	ldr	r0, [r11, #-32]
	cmp	r0, #21
	bne	.LBB158_12
@ BB#7:
	movw	r0, #11
	movw	r1, #1
	ldr	r2, [r11, #-24]
	str	r1, [r2, #64]
	str	r0, [r11, #-32]
.LBB158_8:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-32]
	cmp	r0, #21
	bge	.LBB158_11
@ BB#9:                                 @   in Loop: Header=BB158_8 Depth=1
	add	r0, sp, #88
	movw	r1, #3
	ldr	r2, [r11, #-32]
	movw	r3, :lower16:pretab
	movt	r3, :upper16:pretab
	ldr	r3, [r3, r2, lsl #2]
	ldr	r12, [sp, #68]
	str	r0, [sp, #36]           @ 4-byte Spill
	mov	r0, r3
	str	r1, [sp, #32]           @ 4-byte Spill
	mov	r1, r12
	str	r2, [sp, #28]           @ 4-byte Spill
	bl	__divsi3
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	add	r0, sp, #88
	ldr	r1, [sp, #28]           @ 4-byte Reload
	add	r0, r0, r1, lsl #3
	vldr	d17, [r0]
	vadd.f64	d16, d17, d16
	vstr	d16, [r0]
@ BB#10:                                @   in Loop: Header=BB158_8 Depth=1
	ldr	r0, [r11, #-32]
	add	r0, r0, #1
	str	r0, [r11, #-32]
	b	.LBB158_8
.LBB158_11:
	b	.LBB158_12
.LBB158_12:
	movw	r0, #0
	vldr	d16, .LCPI158_0
	vstr	d16, [sp, #72]
	str	r0, [r11, #-32]
.LBB158_13:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-32]
	cmp	r0, #21
	bge	.LBB158_21
@ BB#14:                                @   in Loop: Header=BB158_13 Depth=1
	movw	r0, #2
	ldr	r1, [r11, #-32]
	add	r2, sp, #88
	add	r2, r2, r1, lsl #3
	vldr	d16, [r2]
	vldr	s0, [sp, #68]
	vcvt.f64.s32	d17, s0
	vmul.f64	d16, d16, d17
	vmov.f64	d17, #7.500000e-01
	vsub.f64	d16, d17, d16
	vldr	d17, .LCPI158_1
	vadd.f64	d16, d16, d17
	vmov	r2, r3, d16
	str	r0, [sp, #24]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #20]           @ 4-byte Spill
	mov	r1, r3
	bl	floor
	vmov	d16, r0, r1
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	ldr	r1, [r11, #-28]
	ldr	r2, [sp, #20]           @ 4-byte Reload
	add	r1, r1, r2, lsl #2
	str	r0, [r1]
	ldr	r0, [r11, #-32]
	cmp	r0, #11
	bge	.LBB158_16
@ BB#15:                                @   in Loop: Header=BB158_13 Depth=1
	vmov.f64	d16, #1.500000e+01
	ldr	r0, [sp, #68]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d16, d17
	vstr	d16, [sp, #80]
	b	.LBB158_17
.LBB158_16:                             @   in Loop: Header=BB158_13 Depth=1
	vmov.f64	d16, #7.000000e+00
	ldr	r0, [sp, #68]
	vmov	s0, r0
	vcvt.f64.s32	d17, s0
	vdiv.f64	d16, d16, d17
	vstr	d16, [sp, #80]
.LBB158_17:                             @   in Loop: Header=BB158_13 Depth=1
	add	r0, sp, #88
	movw	r1, #3
	vldr	d16, [sp, #80]
	ldr	r2, [r11, #-32]
	add	r3, sp, #88
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	vadd.f64	d16, d16, d17
	vldr	d17, [sp, #72]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	str	r0, [sp, #16]           @ 4-byte Spill
	str	r1, [sp, #12]           @ 4-byte Spill
	ble	.LBB158_19
@ BB#18:                                @   in Loop: Header=BB158_13 Depth=1
	add	r0, sp, #88
	movw	r1, #3
	vldr	d16, [sp, #80]
	ldr	r2, [r11, #-32]
	add	r3, sp, #88
	add	r2, r3, r2, lsl #3
	vldr	d17, [r2]
	vadd.f64	d16, d16, d17
	vstr	d16, [sp, #72]
	str	r0, [sp, #8]            @ 4-byte Spill
	str	r1, [sp, #4]            @ 4-byte Spill
.LBB158_19:                             @   in Loop: Header=BB158_13 Depth=1
	b	.LBB158_20
.LBB158_20:                             @   in Loop: Header=BB158_13 Depth=1
	ldr	r0, [r11, #-32]
	add	r0, r0, #1
	str	r0, [r11, #-32]
	b	.LBB158_13
.LBB158_21:
	vldr	d16, [sp, #72]
	vmov	r0, r1, d16
	sub	sp, r11, #16
	pop	{r4, r5, r6, r7, r11, pc}
	.p2align	3
@ BB#22:
.LCPI158_0:
	.long	0                       @ double 0
	.long	0
.LCPI158_1:
	.long	3944497965              @ double 1.0E-4
	.long	1058682594
.Lfunc_end158:
	.size	compute_scalefacs_long, .Lfunc_end158-compute_scalefacs_long
	.cantunwind
	.fnend

	.globl	VBR_iteration_loop_new
	.p2align	3
	.type	VBR_iteration_loop_new,%function
	.code	32                      @ @VBR_iteration_loop_new
VBR_iteration_loop_new:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r7, r8, r10, r11, lr}
	add	r11, sp, #24
	sub	sp, sp, #88
	sub	sp, sp, #7168
	sub	r10, r11, #2048
	sub	r12, r10, #504
	ldr	lr, [r11, #20]
	ldr	r4, [r11, #16]
	ldr	r5, [r11, #12]
	ldr	r6, [r11, #8]
	vmov.f64	d16, #1.000000e+01
	mvn	r7, #9
	movw	r8, #1
	str	r0, [r11, #-28]
	str	r1, [r11, #-32]
	str	r2, [r11, #-36]
	str	r3, [r11, #-40]
	str	r6, [r11, #-44]
	str	r5, [r11, #-48]
	str	r4, [r11, #-52]
	str	lr, [r11, #-56]
	ldr	r0, [r11, #-28]
	ldr	r1, [r11, #-48]
	ldr	r2, [r11, #-52]
	str	r12, [sp, #100]         @ 4-byte Spill
	str	r7, [sp, #96]           @ 4-byte Spill
	str	r8, [sp, #92]           @ 4-byte Spill
	vstr	d16, [sp, #80]          @ 8-byte Spill
	bl	iteration_init
	ldr	r0, [r11, #-28]
	ldr	r0, [r0, #88]
	lsl	r0, r0, #1
	ldr	r1, [sp, #96]           @ 4-byte Reload
	add	r0, r0, r1
	vmov	s0, r0
	vcvt.f64.s32	d16, s0
	ldr	r0, [sp, #100]          @ 4-byte Reload
	vstr	d16, [r0, #536]
	vldr	d16, [r0, #536]
	vldr	d17, [sp, #80]          @ 8-byte Reload
	vdiv.f64	d16, d16, d17
	vmov	r0, r1, d17
	vmov	r2, r3, d16
	bl	pow
	vmov	d16, r0, r1
	movw	r0, #0
	vmov.f32	s0, #1.000000e+00
	movw	r1, :lower16:masking_lower
	movt	r1, :upper16:masking_lower
	vcvt.f32.f64	s2, d16
	vstr	s2, [r1]
	vstr	s0, [r1]
	str	r0, [r11, #-2052]
.LBB159_1:                              @ =>This Loop Header: Depth=1
                                        @     Child Loop BB159_5 Depth 2
                                        @       Child Loop BB159_7 Depth 3
                                        @       Child Loop BB159_12 Depth 3
                                        @         Child Loop BB159_14 Depth 4
                                        @       Child Loop BB159_23 Depth 3
                                        @       Child Loop BB159_31 Depth 3
                                        @         Child Loop BB159_33 Depth 4
                                        @       Child Loop BB159_45 Depth 3
	ldr	r0, [r11, #-2052]
	ldr	r1, [r11, #-28]
	ldr	r1, [r1, #180]
	cmp	r0, r1
	bge	.LBB159_57
@ BB#2:                                 @   in Loop: Header=BB159_1 Depth=1
	movw	r0, :lower16:convert_mdct
	movt	r0, :upper16:convert_mdct
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.LBB159_4
@ BB#3:                                 @   in Loop: Header=BB159_1 Depth=1
	movw	r0, #9216
	ldr	r1, [r11, #-40]
	ldr	r2, [r11, #-2052]
	mul	r2, r2, r0
	add	r1, r1, r2
	ldr	r2, [r11, #-40]
	ldr	r3, [r11, #-2052]
	mul	r0, r3, r0
	add	r0, r2, r0
	str	r0, [sp, #76]           @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #76]           @ 4-byte Reload
	bl	ms_convert
.LBB159_4:                              @   in Loop: Header=BB159_1 Depth=1
	movw	r0, #0
	str	r0, [r11, #-2048]
.LBB159_5:                              @   Parent Loop BB159_1 Depth=1
                                        @ =>  This Loop Header: Depth=2
                                        @       Child Loop BB159_7 Depth 3
                                        @       Child Loop BB159_12 Depth 3
                                        @         Child Loop BB159_14 Depth 4
                                        @       Child Loop BB159_23 Depth 3
                                        @       Child Loop BB159_31 Depth 3
                                        @         Child Loop BB159_33 Depth 4
                                        @       Child Loop BB159_45 Depth 3
	ldr	r0, [r11, #-2048]
	ldr	r1, [r11, #-28]
	ldr	r1, [r1, #184]
	cmp	r0, r1
	bge	.LBB159_55
@ BB#6:                                 @   in Loop: Header=BB159_5 Depth=2
	movw	r0, #0
	movw	r1, #112
	movw	r2, #224
	ldr	r3, [r11, #-48]
	add	r3, r3, #44
	ldr	r12, [r11, #-2052]
	mul	r2, r12, r2
	add	r2, r3, r2
	ldr	r3, [r11, #-2048]
	mul	r1, r3, r1
	add	r1, r2, r1
	str	r1, [sp, #116]
	str	r0, [r11, #-2056]
	ldr	r1, [sp, #116]
	ldr	r1, [r1, #24]
	cmp	r1, #2
	movw	r1, #0
	moveq	r1, #1
	and	r1, r1, #1
	str	r1, [sp, #112]
	str	r0, [r11, #-2044]
.LBB159_7:                              @   Parent Loop BB159_1 Depth=1
                                        @     Parent Loop BB159_5 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-2044]
	cmp	r0, #576
	bge	.LBB159_10
@ BB#8:                                 @   in Loop: Header=BB159_7 Depth=3
	add	r0, sp, #120
	movw	r1, #3
	ldr	r2, [r11, #-40]
	ldr	r3, [r11, #-2052]
	add	r3, r3, r3, lsl #3
	add	r2, r2, r3, lsl #10
	ldr	r3, [r11, #-2048]
	add	r3, r3, r3, lsl #3
	add	r2, r2, r3, lsl #9
	ldr	r3, [r11, #-2044]
	add	r2, r2, r3, lsl #3
	vldr	d16, [r2]
	vabs.f64	d16, d16
	vstr	d16, [sp, #104]
	vmov	r2, r3, d16
	str	r0, [sp, #72]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #68]           @ 4-byte Spill
	mov	r1, r3
	bl	sqrt
	vmov	d16, r0, r1
	vldr	d17, [sp, #104]
	vmul.f64	d16, d16, d17
	vmov	r0, r1, d16
	bl	sqrt
	vmov	d16, r0, r1
	ldr	r0, [r11, #-2044]
	add	r1, sp, #120
	add	r0, r1, r0, lsl #3
	vstr	d16, [r0]
@ BB#9:                                 @   in Loop: Header=BB159_7 Depth=3
	ldr	r0, [r11, #-2044]
	add	r0, r0, #1
	str	r0, [r11, #-2044]
	b	.LBB159_7
.LBB159_10:                             @   in Loop: Header=BB159_5 Depth=2
	movw	r0, #488
	sub	r7, r11, #1024
	sub	r1, r7, #984
	movw	r2, #976
	movw	r3, #1952
	movw	r12, #4608
	movw	lr, #9216
	ldr	r4, [r11, #-28]
	ldr	r5, [r11, #-40]
	ldr	r6, [r11, #-2052]
	mul	lr, r6, lr
	add	lr, r5, lr
	ldr	r5, [r11, #-2048]
	mul	r12, r5, r12
	add	r12, lr, r12
	ldr	lr, [r11, #-44]
	ldr	r5, [r11, #-2052]
	mul	r3, r5, r3
	add	r3, lr, r3
	ldr	lr, [r11, #-2048]
	mul	lr, lr, r2
	add	r3, r3, lr
	ldr	lr, [sp, #116]
	ldr	r5, [r11, #-2052]
	mul	r2, r5, r2
	add	r1, r1, r2
	ldr	r2, [r11, #-2048]
	mul	r0, r2, r0
	add	r0, r1, r0
	str	r0, [sp, #64]           @ 4-byte Spill
	mov	r0, r4
	mov	r1, r12
	mov	r2, r3
	mov	r3, lr
	ldr	r12, [sp, #64]          @ 4-byte Reload
	str	r12, [sp]
	bl	calc_xmin
	vldr	d16, .LCPI159_2
	ldr	r1, [sp, #100]          @ 4-byte Reload
	vstr	d16, [r1]
	ldr	r2, [sp, #112]
	cmp	r2, #0
	str	r0, [sp, #60]           @ 4-byte Spill
	beq	.LBB159_22
@ BB#11:                                @   in Loop: Header=BB159_5 Depth=2
	movw	r0, #0
	str	r0, [r11, #-2040]
.LBB159_12:                             @   Parent Loop BB159_1 Depth=1
                                        @     Parent Loop BB159_5 Depth=2
                                        @ =>    This Loop Header: Depth=3
                                        @         Child Loop BB159_14 Depth 4
	ldr	r0, [r11, #-2040]
	cmp	r0, #12
	bge	.LBB159_21
@ BB#13:                                @   in Loop: Header=BB159_12 Depth=3
	movw	r0, #0
	str	r0, [r11, #-2044]
.LBB159_14:                             @   Parent Loop BB159_1 Depth=1
                                        @     Parent Loop BB159_5 Depth=2
                                        @       Parent Loop BB159_12 Depth=3
                                        @ =>      This Inner Loop Header: Depth=4
	ldr	r0, [r11, #-2044]
	cmp	r0, #3
	bge	.LBB159_19
@ BB#15:                                @   in Loop: Header=BB159_14 Depth=4
	movw	r0, #3
	ldr	r1, [r11, #-2040]
	movw	r2, :lower16:scalefac_band
	movt	r2, :upper16:scalefac_band
	add	r2, r2, #92
	ldr	r1, [r2, r1, lsl #2]
	str	r1, [r11, #-2028]
	ldr	r1, [r11, #-2040]
	add	r1, r2, r1, lsl #2
	ldr	r1, [r1, #4]
	str	r1, [r11, #-2032]
	ldr	r2, [r11, #-2028]
	sub	r1, r1, r2
	str	r1, [r11, #-2036]
	ldr	r2, [r11, #-40]
	ldr	r3, [r11, #-2052]
	add	r12, r3, r3, lsl #3
	add	r2, r2, r12, lsl #10
	ldr	r12, [r11, #-2048]
	add	lr, r12, r12, lsl #3
	add	r2, r2, lr, lsl #9
	ldr	lr, [r11, #-2028]
	add	lr, lr, lr, lsl #1
	ldr	r4, [r11, #-2044]
	add	lr, lr, r4
	add	r2, r2, lr, lsl #3
	add	r5, sp, #120
	add	lr, r5, lr, lsl #3
	ldr	r5, [r11, #-2040]
	movw	r6, :lower16:masking_lower
	movt	r6, :upper16:masking_lower
	vldr	s0, [r6]
	vcvt.f64.f32	d16, s0
	sub	r8, r11, #1024
	sub	r6, r8, #984
	mov	r7, #976
	mla	r3, r3, r7, r6
	mov	r6, #488
	mla	r3, r12, r6, r3
	add	r12, r5, r5, lsl #1
	add	r3, r3, r12, lsl #3
	add	r3, r3, r4, lsl #3
	vldr	d17, [r3, #176]
	vmul.f64	d16, d16, d17
	mov	r3, sp
	str	r1, [r3, #8]
	vstr	d16, [r3]
	mov	r1, #3
	str	r0, [sp, #56]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #52]           @ 4-byte Spill
	mov	r1, lr
	ldr	r2, [sp, #52]           @ 4-byte Reload
	mov	r3, r5
	bl	find_scalefac
	sub	r2, r11, #2544
	add	r2, r2, #176
	ldr	r3, [r11, #-2040]
	add	r3, r3, r3, lsl #1
	add	r3, r2, r3, lsl #3
	ldr	r12, [r11, #-2044]
	str	r0, [r3, r12, lsl #3]!
	orr	r0, r3, #4
	str	r1, [r0]
	ldr	r0, [r11, #-2040]
	add	r0, r0, r0, lsl #1
	add	r0, r2, r0, lsl #3
	ldr	r1, [r11, #-2044]
	add	r0, r0, r1, lsl #3
	vldr	d16, [r0]
	ldr	r0, [sp, #100]          @ 4-byte Reload
	vldr	d17, [r0]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	ble	.LBB159_17
@ BB#16:                                @   in Loop: Header=BB159_14 Depth=4
	movw	r0, #3
	ldr	r1, [r11, #-2040]
	add	r1, r1, r1, lsl #1
	sub	r2, r11, #2544
	add	r1, r2, r1, lsl #3
	add	r1, r1, #176
	ldr	r2, [r11, #-2044]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	ldr	r1, [sp, #100]          @ 4-byte Reload
	vstr	d16, [r1]
	str	r0, [sp, #48]           @ 4-byte Spill
.LBB159_17:                             @   in Loop: Header=BB159_14 Depth=4
	b	.LBB159_18
.LBB159_18:                             @   in Loop: Header=BB159_14 Depth=4
	ldr	r0, [r11, #-2044]
	add	r0, r0, #1
	str	r0, [r11, #-2044]
	b	.LBB159_14
.LBB159_19:                             @   in Loop: Header=BB159_12 Depth=3
	b	.LBB159_20
.LBB159_20:                             @   in Loop: Header=BB159_12 Depth=3
	ldr	r0, [r11, #-2040]
	add	r0, r0, #1
	str	r0, [r11, #-2040]
	b	.LBB159_12
.LBB159_21:                             @   in Loop: Header=BB159_5 Depth=2
	b	.LBB159_29
.LBB159_22:                             @   in Loop: Header=BB159_5 Depth=2
	movw	r0, #0
	str	r0, [r11, #-2040]
.LBB159_23:                             @   Parent Loop BB159_1 Depth=1
                                        @     Parent Loop BB159_5 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-2040]
	cmp	r0, #21
	bge	.LBB159_28
@ BB#24:                                @   in Loop: Header=BB159_23 Depth=3
	movw	r0, #3
	ldr	r1, [r11, #-2040]
	movw	r2, :lower16:scalefac_band
	movt	r2, :upper16:scalefac_band
	ldr	r1, [r2, r1, lsl #2]
	str	r1, [r11, #-2028]
	ldr	r1, [r11, #-2040]
	add	r1, r2, r1, lsl #2
	ldr	r1, [r1, #4]
	str	r1, [r11, #-2032]
	ldr	r2, [r11, #-2028]
	sub	r1, r1, r2
	str	r1, [r11, #-2036]
	ldr	r2, [r11, #-40]
	ldr	r3, [r11, #-2052]
	add	r12, r3, r3, lsl #3
	add	r2, r2, r12, lsl #10
	ldr	r12, [r11, #-2048]
	add	lr, r12, r12, lsl #3
	add	r2, r2, lr, lsl #9
	ldr	lr, [r11, #-2028]
	add	r2, r2, lr, lsl #3
	add	r4, sp, #120
	add	lr, r4, lr, lsl #3
	ldr	r4, [r11, #-2040]
	movw	r5, :lower16:masking_lower
	movt	r5, :upper16:masking_lower
	vldr	s0, [r5]
	vcvt.f64.f32	d16, s0
	sub	r7, r11, #1024
	sub	r5, r7, #984
	mov	r6, #976
	mla	r3, r3, r6, r5
	mov	r5, #488
	mla	r3, r12, r5, r3
	add	r3, r3, r4, lsl #3
	vldr	d17, [r3]
	vmul.f64	d16, d16, d17
	mov	r3, sp
	str	r1, [r3, #8]
	vstr	d16, [r3]
	mov	r1, #1
	str	r0, [sp, #44]           @ 4-byte Spill
	mov	r0, r2
	str	r1, [sp, #40]           @ 4-byte Spill
	mov	r1, lr
	ldr	r2, [sp, #40]           @ 4-byte Reload
	mov	r3, r4
	bl	find_scalefac
	ldr	r2, [r11, #-2040]
	sub	r3, r11, #2544
	add	r12, r3, r2, lsl #3
	str	r0, [r3, r2, lsl #3]
	str	r1, [r12, #4]
	ldr	r0, [r11, #-2040]
	add	r0, r3, r0, lsl #3
	vldr	d16, [r0]
	ldr	r0, [sp, #100]          @ 4-byte Reload
	vldr	d17, [r0]
	vcmpe.f64	d16, d17
	vmrs	APSR_nzcv, fpscr
	ble	.LBB159_26
@ BB#25:                                @   in Loop: Header=BB159_23 Depth=3
	movw	r0, #3
	sub	r1, r11, #2544
	ldr	r2, [r11, #-2040]
	add	r1, r1, r2, lsl #3
	vldr	d16, [r1]
	ldr	r1, [sp, #100]          @ 4-byte Reload
	vstr	d16, [r1]
	str	r0, [sp, #36]           @ 4-byte Spill
.LBB159_26:                             @   in Loop: Header=BB159_23 Depth=3
	b	.LBB159_27
.LBB159_27:                             @   in Loop: Header=BB159_23 Depth=3
	ldr	r0, [r11, #-2040]
	add	r0, r0, #1
	str	r0, [r11, #-2040]
	b	.LBB159_23
.LBB159_28:                             @   in Loop: Header=BB159_5 Depth=2
	b	.LBB159_29
.LBB159_29:                             @   in Loop: Header=BB159_5 Depth=2
	vmov.f64	d16, #5.000000e-01
	vldr	d17, .LCPI159_1
	vmov.f64	d18, #4.000000e+00
	ldr	r0, [sp, #100]          @ 4-byte Reload
	vldr	d19, [r0]
	vmul.f64	d18, d18, d19
	vadd.f64	d17, d18, d17
	vadd.f64	d16, d17, d16
	vmov	r0, r1, d16
	bl	floor
	vmov	d16, r0, r1
	vcvt.u32.f64	s0, d16
	vmov	r0, s0
	ldr	r1, [sp, #116]
	str	r0, [r1, #12]
	ldr	r0, [sp, #112]
	cmp	r0, #0
	beq	.LBB159_44
@ BB#30:                                @   in Loop: Header=BB159_5 Depth=2
	movw	r0, #0
	str	r0, [r11, #-2040]
.LBB159_31:                             @   Parent Loop BB159_1 Depth=1
                                        @     Parent Loop BB159_5 Depth=2
                                        @ =>    This Loop Header: Depth=3
                                        @         Child Loop BB159_33 Depth 4
	ldr	r0, [r11, #-2040]
	cmp	r0, #12
	bge	.LBB159_39
@ BB#32:                                @   in Loop: Header=BB159_31 Depth=3
	movw	r0, #0
	str	r0, [r11, #-2044]
.LBB159_33:                             @   Parent Loop BB159_1 Depth=1
                                        @     Parent Loop BB159_5 Depth=2
                                        @       Parent Loop BB159_31 Depth=3
                                        @ =>      This Inner Loop Header: Depth=4
	ldr	r0, [r11, #-2044]
	cmp	r0, #3
	bge	.LBB159_36
@ BB#34:                                @   in Loop: Header=BB159_33 Depth=4
	movw	r0, #3
	ldr	r1, [sp, #100]          @ 4-byte Reload
	vldr	d16, [r1]
	ldr	r2, [r11, #-2040]
	add	r2, r2, r2, lsl #1
	sub	r3, r11, #2544
	add	r2, r3, r2, lsl #3
	add	r2, r2, #176
	ldr	r3, [r11, #-2044]
	add	r2, r2, r3, lsl #3
	vldr	d17, [r2]
	vsub.f64	d16, d17, d16
	vstr	d16, [r2]
	str	r0, [sp, #32]           @ 4-byte Spill
@ BB#35:                                @   in Loop: Header=BB159_33 Depth=4
	ldr	r0, [r11, #-2044]
	add	r0, r0, #1
	str	r0, [r11, #-2044]
	b	.LBB159_33
.LBB159_36:                             @   in Loop: Header=BB159_31 Depth=3
	b	.LBB159_37
.LBB159_37:                             @   in Loop: Header=BB159_31 Depth=3
	ldr	r0, [r11, #-2040]
	add	r0, r0, #1
	str	r0, [r11, #-2040]
	b	.LBB159_31
	.p2align	3
@ BB#38:
.LCPI159_2:
	.long	0                       @ double 0
	.long	0
.LBB159_39:                             @   in Loop: Header=BB159_5 Depth=2
	movw	r0, #244
	movw	r1, #488
	sub	r2, r11, #2544
	movw	r3, #0
	ldr	r12, [sp, #116]
	str	r3, [r12, #68]
	add	r2, r2, #176
	ldr	r3, [sp, #116]
	ldr	r12, [r11, #-56]
	ldr	lr, [r11, #-2052]
	mul	r1, lr, r1
	add	r1, r12, r1
	ldr	r12, [r11, #-2048]
	mul	r0, r12, r0
	add	r0, r1, r0
	add	r0, r0, #88
	str	r0, [sp, #28]           @ 4-byte Spill
	mov	r0, r2
	mov	r1, r3
	ldr	r2, [sp, #28]           @ 4-byte Reload
	bl	compute_scalefacs_short
	vmov	d16, r0, r1
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB159_43
@ BB#40:                                @   in Loop: Header=BB159_5 Depth=2
	movw	r0, #244
	movw	r1, #488
	sub	r2, r11, #2544
	movw	r3, #1
	ldr	r12, [sp, #116]
	str	r3, [r12, #68]
	add	r2, r2, #176
	ldr	r3, [sp, #116]
	ldr	r12, [r11, #-56]
	ldr	lr, [r11, #-2052]
	mul	r1, lr, r1
	add	r1, r12, r1
	ldr	r12, [r11, #-2048]
	mul	r0, r12, r0
	add	r0, r1, r0
	add	r0, r0, #88
	str	r0, [sp, #24]           @ 4-byte Spill
	mov	r0, r2
	mov	r1, r3
	ldr	r2, [sp, #24]           @ 4-byte Reload
	bl	compute_scalefacs_short
	vmov	d16, r0, r1
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB159_42
@ BB#41:
	movw	r0, #32
	bl	exit
.LBB159_42:                             @   in Loop: Header=BB159_5 Depth=2
	b	.LBB159_43
.LBB159_43:                             @   in Loop: Header=BB159_5 Depth=2
	b	.LBB159_53
.LBB159_44:                             @   in Loop: Header=BB159_5 Depth=2
	movw	r0, #0
	str	r0, [r11, #-2040]
.LBB159_45:                             @   Parent Loop BB159_1 Depth=1
                                        @     Parent Loop BB159_5 Depth=2
                                        @ =>    This Inner Loop Header: Depth=3
	ldr	r0, [r11, #-2040]
	cmp	r0, #21
	bge	.LBB159_48
@ BB#46:                                @   in Loop: Header=BB159_45 Depth=3
	movw	r0, #3
	ldr	r1, [sp, #100]          @ 4-byte Reload
	vldr	d16, [r1]
	sub	r2, r11, #2544
	ldr	r3, [r11, #-2040]
	add	r2, r2, r3, lsl #3
	vldr	d17, [r2]
	vsub.f64	d16, d17, d16
	vstr	d16, [r2]
	str	r0, [sp, #20]           @ 4-byte Spill
@ BB#47:                                @   in Loop: Header=BB159_45 Depth=3
	ldr	r0, [r11, #-2040]
	add	r0, r0, #1
	str	r0, [r11, #-2040]
	b	.LBB159_45
.LBB159_48:                             @   in Loop: Header=BB159_5 Depth=2
	movw	r0, #244
	movw	r1, #488
	sub	r2, r11, #2544
	movw	r3, #0
	ldr	r12, [sp, #116]
	str	r3, [r12, #68]
	ldr	r3, [sp, #116]
	ldr	r12, [r11, #-56]
	ldr	lr, [r11, #-2052]
	mul	r1, lr, r1
	add	r1, r12, r1
	ldr	r12, [r11, #-2048]
	mul	r0, r12, r0
	add	r0, r1, r0
	str	r0, [sp, #16]           @ 4-byte Spill
	mov	r0, r2
	mov	r1, r3
	ldr	r2, [sp, #16]           @ 4-byte Reload
	bl	compute_scalefacs_long
	vmov	d16, r0, r1
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB159_52
@ BB#49:                                @   in Loop: Header=BB159_5 Depth=2
	movw	r0, #244
	movw	r1, #488
	sub	r2, r11, #2544
	movw	r3, #1
	ldr	r12, [sp, #116]
	str	r3, [r12, #68]
	ldr	r3, [sp, #116]
	ldr	r12, [r11, #-56]
	ldr	lr, [r11, #-2052]
	mul	r1, lr, r1
	add	r1, r12, r1
	ldr	r12, [r11, #-2048]
	mul	r0, r12, r0
	add	r0, r1, r0
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r2
	mov	r1, r3
	ldr	r2, [sp, #12]           @ 4-byte Reload
	bl	compute_scalefacs_long
	vmov	d16, r0, r1
	vcmpe.f64	d16, #0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB159_51
@ BB#50:
	movw	r0, #32
	bl	exit
.LBB159_51:                             @   in Loop: Header=BB159_5 Depth=2
	b	.LBB159_52
.LBB159_52:                             @   in Loop: Header=BB159_5 Depth=2
	b	.LBB159_53
.LBB159_53:                             @   in Loop: Header=BB159_5 Depth=2
	b	.LBB159_54
.LBB159_54:                             @   in Loop: Header=BB159_5 Depth=2
	ldr	r0, [r11, #-2048]
	add	r0, r0, #1
	str	r0, [r11, #-2048]
	b	.LBB159_5
.LBB159_55:                             @   in Loop: Header=BB159_1 Depth=1
	b	.LBB159_56
.LBB159_56:                             @   in Loop: Header=BB159_1 Depth=1
	ldr	r0, [r11, #-2052]
	add	r0, r0, #1
	str	r0, [r11, #-2052]
	b	.LBB159_1
.LBB159_57:
	sub	sp, r11, #24
	pop	{r4, r5, r6, r7, r8, r10, r11, pc}
	.p2align	3
@ BB#58:
.LCPI159_1:
	.long	0                       @ double 210
	.long	1080705024
.Lfunc_end159:
	.size	VBR_iteration_loop_new, .Lfunc_end159-VBR_iteration_loop_new
	.cantunwind
	.fnend

	.globl	AddVbrFrame
	.p2align	2
	.type	AddVbrFrame,%function
	.code	32                      @ @AddVbrFrame
AddVbrFrame:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #16
	movw	r1, #0
	movw	r2, :lower16:pVbrFrames
	movt	r2, :upper16:pVbrFrames
	str	r0, [r11, #-4]
	ldr	r0, [r2]
	cmp	r0, r1
	beq	.LBB160_2
@ BB#1:
	movw	r0, :lower16:nVbrFrameBufferSize
	movt	r0, :upper16:nVbrFrameBufferSize
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.LBB160_3
.LBB160_2:
	movw	r0, #2
	movw	r1, :lower16:nVbrFrameBufferSize
	movt	r1, :upper16:nVbrFrameBufferSize
	mov	r2, #100
	str	r2, [r1]
	mov	r1, #400
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r1
	bl	malloc
	movw	r1, :lower16:pVbrFrames
	movt	r1, :upper16:pVbrFrames
	str	r0, [r1]
.LBB160_3:
	movw	r0, :lower16:nVbrFrameBufferSize
	movt	r0, :upper16:nVbrFrameBufferSize
	movw	r1, :lower16:nVbrNumFrames
	movt	r1, :upper16:nVbrNumFrames
	ldr	r1, [r1]
	ldr	r0, [r0]
	cmp	r1, r0
	bne	.LBB160_5
@ BB#4:
	movw	r0, #2
	movw	r1, :lower16:nVbrFrameBufferSize
	movt	r1, :upper16:nVbrFrameBufferSize
	ldr	r2, [r1]
	lsl	r3, r2, #1
	str	r3, [r1]
	movw	r1, :lower16:pVbrFrames
	movt	r1, :upper16:pVbrFrames
	ldr	r1, [r1]
	lsl	r2, r2, #3
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	bl	realloc
	movw	r1, :lower16:pVbrFrames
	movt	r1, :upper16:pVbrFrames
	str	r0, [r1]
.LBB160_5:
	movw	r0, #2
	ldr	r1, [r11, #-4]
	movw	r2, :lower16:pVbrFrames
	movt	r2, :upper16:pVbrFrames
	ldr	r2, [r2]
	movw	r3, :lower16:nVbrNumFrames
	movt	r3, :upper16:nVbrNumFrames
	ldr	r12, [r3]
	add	lr, r12, #1
	str	lr, [r3]
	add	r2, r2, r12, lsl #2
	str	r1, [r2]
	str	r0, [sp]                @ 4-byte Spill
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end160:
	.size	AddVbrFrame, .Lfunc_end160-AddVbrFrame
	.cantunwind
	.fnend

	.globl	CreateI4
	.p2align	2
	.type	CreateI4,%function
	.code	32                      @ @CreateI4
CreateI4:
	.fnstart
@ BB#0:
	sub	sp, sp, #20
	movw	r2, #8
	movw	r3, #16
	movw	r12, #24
	str	r0, [sp, #16]
	str	r1, [sp, #12]
	ldr	r0, [sp, #12]
	asr	r0, r0, #24
	and	r0, r0, #255
	ldr	r1, [sp, #16]
	strb	r0, [r1]
	ldr	r0, [sp, #12]
	asr	r0, r0, #16
	and	r0, r0, #255
	ldr	r1, [sp, #16]
	strb	r0, [r1, #1]
	ldr	r0, [sp, #12]
	asr	r0, r0, #8
	and	r0, r0, #255
	ldr	r1, [sp, #16]
	strb	r0, [r1, #2]
	ldr	r0, [sp, #12]
	and	r0, r0, #255
	ldr	r1, [sp, #16]
	strb	r0, [r1, #3]
	str	r12, [sp, #8]           @ 4-byte Spill
	str	r3, [sp, #4]            @ 4-byte Spill
	str	r2, [sp]                @ 4-byte Spill
	add	sp, sp, #20
	bx	lr
.Lfunc_end161:
	.size	CreateI4, .Lfunc_end161-CreateI4
	.cantunwind
	.fnend

	.globl	CheckVbrTag
	.p2align	2
	.type	CheckVbrTag,%function
	.code	32                      @ @CheckVbrTag
CheckVbrTag:
	.fnstart
@ BB#0:
	sub	sp, sp, #32
	movw	r1, #6
	movw	r2, #2
	movw	r3, #3
	str	r0, [sp, #24]
	ldr	r0, [sp, #24]
	ldrb	r0, [r0, #1]
	asr	r0, r0, #3
	and	r0, r0, #1
	str	r0, [sp, #20]
	ldr	r0, [sp, #24]
	ldrb	r0, [r0, #2]
	asr	r0, r0, #2
	and	r0, r0, #3
	str	r0, [sp, #12]
	ldr	r0, [sp, #24]
	ldrb	r0, [r0, #3]
	asr	r0, r0, #6
	and	r0, r0, #3
	str	r0, [sp, #16]
	ldr	r0, [sp, #20]
	cmp	r0, #0
	str	r3, [sp, #8]            @ 4-byte Spill
	str	r1, [sp, #4]            @ 4-byte Spill
	str	r2, [sp]                @ 4-byte Spill
	beq	.LBB162_5
@ BB#1:
	ldr	r0, [sp, #16]
	cmp	r0, #3
	beq	.LBB162_3
@ BB#2:
	ldr	r0, [sp, #24]
	add	r0, r0, #36
	str	r0, [sp, #24]
	b	.LBB162_4
.LBB162_3:
	ldr	r0, [sp, #24]
	add	r0, r0, #21
	str	r0, [sp, #24]
.LBB162_4:
	b	.LBB162_9
.LBB162_5:
	ldr	r0, [sp, #16]
	cmp	r0, #3
	beq	.LBB162_7
@ BB#6:
	ldr	r0, [sp, #24]
	add	r0, r0, #21
	str	r0, [sp, #24]
	b	.LBB162_8
.LBB162_7:
	ldr	r0, [sp, #24]
	add	r0, r0, #13
	str	r0, [sp, #24]
.LBB162_8:
	b	.LBB162_9
.LBB162_9:
	movw	r0, :lower16:VBRTag
	movt	r0, :upper16:VBRTag
	ldr	r1, [sp, #24]
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	beq	.LBB162_11
@ BB#10:
	movw	r0, #0
	str	r0, [sp, #28]
	b	.LBB162_18
.LBB162_11:
	movw	r0, :lower16:VBRTag
	movt	r0, :upper16:VBRTag
	ldr	r1, [sp, #24]
	ldrb	r1, [r1, #1]
	ldrb	r0, [r0, #1]
	cmp	r1, r0
	beq	.LBB162_13
@ BB#12:
	movw	r0, #0
	str	r0, [sp, #28]
	b	.LBB162_18
.LBB162_13:
	movw	r0, :lower16:VBRTag
	movt	r0, :upper16:VBRTag
	ldr	r1, [sp, #24]
	ldrb	r1, [r1, #2]
	ldrb	r0, [r0, #2]
	cmp	r1, r0
	beq	.LBB162_15
@ BB#14:
	movw	r0, #0
	str	r0, [sp, #28]
	b	.LBB162_18
.LBB162_15:
	movw	r0, :lower16:VBRTag
	movt	r0, :upper16:VBRTag
	ldr	r1, [sp, #24]
	ldrb	r1, [r1, #3]
	ldrb	r0, [r0, #3]
	cmp	r1, r0
	beq	.LBB162_17
@ BB#16:
	movw	r0, #0
	str	r0, [sp, #28]
	b	.LBB162_18
.LBB162_17:
	movw	r0, #1
	str	r0, [sp, #28]
.LBB162_18:
	ldr	r0, [sp, #28]
	add	sp, sp, #32
	bx	lr
.Lfunc_end162:
	.size	CheckVbrTag, .Lfunc_end162-CheckVbrTag
	.cantunwind
	.fnend

	.globl	GetVbrTag
	.p2align	2
	.type	GetVbrTag,%function
	.code	32                      @ @GetVbrTag
GetVbrTag:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #56
	movw	r2, #6
	movw	r3, #2
	movw	r12, #3
	movw	lr, #0
	str	r0, [r11, #-8]
	str	r1, [r11, #-12]
	ldr	r0, [r11, #-8]
	str	lr, [r0, #8]
	ldr	r0, [r11, #-12]
	ldrb	r0, [r0, #1]
	asr	r0, r0, #3
	and	r0, r0, #1
	str	r0, [r11, #-24]
	ldr	r0, [r11, #-12]
	ldrb	r0, [r0, #2]
	asr	r0, r0, #2
	and	r0, r0, #3
	str	r0, [sp, #24]
	ldr	r0, [r11, #-12]
	ldrb	r0, [r0, #3]
	asr	r0, r0, #6
	and	r0, r0, #3
	str	r0, [sp, #28]
	ldr	r0, [r11, #-24]
	cmp	r0, #0
	str	r3, [sp, #20]           @ 4-byte Spill
	str	r12, [sp, #16]          @ 4-byte Spill
	str	r2, [sp, #12]           @ 4-byte Spill
	beq	.LBB163_5
@ BB#1:
	ldr	r0, [sp, #28]
	cmp	r0, #3
	beq	.LBB163_3
@ BB#2:
	ldr	r0, [r11, #-12]
	add	r0, r0, #36
	str	r0, [r11, #-12]
	b	.LBB163_4
.LBB163_3:
	ldr	r0, [r11, #-12]
	add	r0, r0, #21
	str	r0, [r11, #-12]
.LBB163_4:
	b	.LBB163_9
.LBB163_5:
	ldr	r0, [sp, #28]
	cmp	r0, #3
	beq	.LBB163_7
@ BB#6:
	ldr	r0, [r11, #-12]
	add	r0, r0, #21
	str	r0, [r11, #-12]
	b	.LBB163_8
.LBB163_7:
	ldr	r0, [r11, #-12]
	add	r0, r0, #13
	str	r0, [r11, #-12]
.LBB163_8:
	b	.LBB163_9
.LBB163_9:
	movw	r0, :lower16:VBRTag
	movt	r0, :upper16:VBRTag
	ldr	r1, [r11, #-12]
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	beq	.LBB163_11
@ BB#10:
	movw	r0, #0
	str	r0, [r11, #-4]
	b	.LBB163_34
.LBB163_11:
	movw	r0, :lower16:VBRTag
	movt	r0, :upper16:VBRTag
	ldr	r1, [r11, #-12]
	ldrb	r1, [r1, #1]
	ldrb	r0, [r0, #1]
	cmp	r1, r0
	beq	.LBB163_13
@ BB#12:
	movw	r0, #0
	str	r0, [r11, #-4]
	b	.LBB163_34
.LBB163_13:
	movw	r0, :lower16:VBRTag
	movt	r0, :upper16:VBRTag
	ldr	r1, [r11, #-12]
	ldrb	r1, [r1, #2]
	ldrb	r0, [r0, #2]
	cmp	r1, r0
	beq	.LBB163_15
@ BB#14:
	movw	r0, #0
	str	r0, [r11, #-4]
	b	.LBB163_34
.LBB163_15:
	movw	r0, :lower16:VBRTag
	movt	r0, :upper16:VBRTag
	ldr	r1, [r11, #-12]
	ldrb	r1, [r1, #3]
	ldrb	r0, [r0, #3]
	cmp	r1, r0
	beq	.LBB163_17
@ BB#16:
	movw	r0, #0
	str	r0, [r11, #-4]
	b	.LBB163_34
.LBB163_17:
	movw	r0, :lower16:GetVbrTag.sr_table
	movt	r0, :upper16:GetVbrTag.sr_table
	movw	r1, #2
	ldr	r2, [r11, #-12]
	add	r2, r2, #4
	str	r2, [r11, #-12]
	ldr	r2, [r11, #-24]
	ldr	r3, [r11, #-8]
	str	r2, [r3]
	ldr	r2, [sp, #24]
	movw	r3, :lower16:GetVbrTag.sr_table
	movt	r3, :upper16:GetVbrTag.sr_table
	add	r2, r3, r2, lsl #2
	ldr	r2, [r2]
	ldr	r3, [r11, #-8]
	str	r2, [r3, #4]
	ldr	r2, [r11, #-24]
	cmp	r2, #0
	str	r0, [sp, #8]            @ 4-byte Spill
	str	r1, [sp, #4]            @ 4-byte Spill
	bne	.LBB163_19
@ BB#18:
	movw	r0, #1
	ldr	r1, [r11, #-8]
	ldr	r2, [r1, #4]
	asr	r2, r2, #1
	str	r2, [r1, #4]
	str	r0, [sp]                @ 4-byte Spill
.LBB163_19:
	ldr	r0, [r11, #-12]
	bl	ExtractI4
	ldr	lr, [r11, #-8]
	str	r0, [lr, #8]
	str	r0, [r11, #-20]
	ldr	r0, [r11, #-12]
	add	r0, r0, #4
	str	r0, [r11, #-12]
	ldr	r0, [r11, #-20]
	and	r0, r0, #1
	cmp	r0, #0
	beq	.LBB163_21
@ BB#20:
	ldr	r0, [r11, #-12]
	bl	ExtractI4
	ldr	lr, [r11, #-8]
	str	r0, [lr, #12]
	ldr	r0, [r11, #-12]
	add	r0, r0, #4
	str	r0, [r11, #-12]
.LBB163_21:
	ldr	r0, [r11, #-20]
	and	r0, r0, #2
	cmp	r0, #0
	beq	.LBB163_23
@ BB#22:
	ldr	r0, [r11, #-12]
	bl	ExtractI4
	ldr	lr, [r11, #-8]
	str	r0, [lr, #16]
	ldr	r0, [r11, #-12]
	add	r0, r0, #4
	str	r0, [r11, #-12]
.LBB163_23:
	ldr	r0, [r11, #-20]
	and	r0, r0, #4
	cmp	r0, #0
	beq	.LBB163_31
@ BB#24:
	movw	r0, #0
	ldr	r1, [r11, #-8]
	add	r1, r1, #24
	cmp	r1, r0
	beq	.LBB163_30
@ BB#25:
	movw	r0, #0
	str	r0, [r11, #-16]
.LBB163_26:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-16]
	cmp	r0, #100
	bge	.LBB163_29
@ BB#27:                                @   in Loop: Header=BB163_26 Depth=1
	ldr	r0, [r11, #-12]
	ldr	r1, [r11, #-16]
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldr	r1, [r11, #-8]
	add	r1, r1, #24
	ldr	r2, [r11, #-16]
	add	r1, r1, r2
	strb	r0, [r1]
@ BB#28:                                @   in Loop: Header=BB163_26 Depth=1
	ldr	r0, [r11, #-16]
	add	r0, r0, #1
	str	r0, [r11, #-16]
	b	.LBB163_26
.LBB163_29:
	b	.LBB163_30
.LBB163_30:
	ldr	r0, [r11, #-12]
	add	r0, r0, #100
	str	r0, [r11, #-12]
.LBB163_31:
	mvn	r0, #0
	ldr	r1, [r11, #-8]
	str	r0, [r1, #20]
	ldr	r0, [r11, #-20]
	and	r0, r0, #8
	cmp	r0, #0
	beq	.LBB163_33
@ BB#32:
	ldr	r0, [r11, #-12]
	bl	ExtractI4
	ldr	lr, [r11, #-8]
	str	r0, [lr, #20]
	ldr	r0, [r11, #-12]
	add	r0, r0, #4
	str	r0, [r11, #-12]
.LBB163_33:
	movw	r0, #1
	str	r0, [r11, #-4]
.LBB163_34:
	ldr	r0, [r11, #-4]
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end163:
	.size	GetVbrTag, .Lfunc_end163-GetVbrTag
	.cantunwind
	.fnend

	.p2align	2
	.type	ExtractI4,%function
	.code	32                      @ @ExtractI4
ExtractI4:
	.fnstart
@ BB#0:
	sub	sp, sp, #12
	movw	r1, #8
	str	r0, [sp, #8]
	ldr	r0, [sp, #8]
	ldrb	r0, [r0]
	str	r0, [sp, #4]
	ldr	r0, [sp, #4]
	lsl	r0, r0, #8
	str	r0, [sp, #4]
	ldr	r0, [sp, #8]
	ldrb	r0, [r0, #1]
	ldr	r2, [sp, #4]
	orr	r0, r2, r0
	str	r0, [sp, #4]
	ldr	r0, [sp, #4]
	lsl	r0, r0, #8
	str	r0, [sp, #4]
	ldr	r0, [sp, #8]
	ldrb	r0, [r0, #2]
	ldr	r2, [sp, #4]
	orr	r0, r2, r0
	str	r0, [sp, #4]
	ldr	r0, [sp, #4]
	lsl	r0, r0, #8
	str	r0, [sp, #4]
	ldr	r0, [sp, #8]
	ldrb	r0, [r0, #3]
	ldr	r2, [sp, #4]
	orr	r0, r2, r0
	str	r0, [sp, #4]
	ldr	r0, [sp, #4]
	str	r1, [sp]                @ 4-byte Spill
	add	sp, sp, #12
	bx	lr
.Lfunc_end164:
	.size	ExtractI4, .Lfunc_end164-ExtractI4
	.cantunwind
	.fnend

	.globl	InitVbrTag
	.p2align	2
	.type	InitVbrTag,%function
	.code	32                      @ @InitVbrTag
InitVbrTag:
	.fnstart
@ BB#0:
	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
	add	r11, sp, #28
	sub	sp, sp, #84
	movw	r12, #0
	movw	lr, :lower16:pbtStreamBuffer
	movt	lr, :upper16:pbtStreamBuffer
	movw	r4, #0
	movw	r5, #216
	movw	r6, :lower16:g_Position
	movt	r6, :upper16:g_Position
	movw	r7, #400
	movw	r8, :lower16:nVbrFrameBufferSize
	movt	r8, :upper16:nVbrFrameBufferSize
	movw	r9, :lower16:nVbrNumFrames
	movt	r9, :upper16:nVbrNumFrames
	movw	r10, :lower16:pVbrFrames
	movt	r10, :upper16:pVbrFrames
	str	r0, [r11, #-32]
	str	r1, [r11, #-36]
	str	r2, [r11, #-40]
	str	r3, [r11, #-44]
	str	r12, [r10]
	str	r12, [r9]
	str	r12, [r8]
	mov	r0, r6
	and	r1, r4, #255
	mov	r2, r7
	str	r4, [sp, #56]           @ 4-byte Spill
	str	r5, [sp, #52]           @ 4-byte Spill
	str	lr, [sp, #48]           @ 4-byte Spill
	str	r12, [sp, #44]          @ 4-byte Spill
	bl	memset
	ldr	r0, [sp, #48]           @ 4-byte Reload
	ldr	r1, [sp, #56]           @ 4-byte Reload
	and	r1, r1, #255
	ldr	r2, [sp, #52]           @ 4-byte Reload
	bl	memset
	ldr	r0, [sp, #44]           @ 4-byte Reload
	str	r0, [r11, #-48]
.LBB165_1:                              @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-48]
	cmp	r0, #100
	bge	.LBB165_4
@ BB#2:                                 @   in Loop: Header=BB165_1 Depth=1
	mvn	r0, #0
	movw	r1, :lower16:g_Position
	movt	r1, :upper16:g_Position
	movw	r2, #2
	ldr	r3, [r11, #-48]
	movw	r12, :lower16:g_Position
	movt	r12, :upper16:g_Position
	add	r3, r12, r3, lsl #2
	str	r0, [r3]
	str	r2, [sp, #40]           @ 4-byte Spill
	str	r1, [sp, #36]           @ 4-byte Spill
@ BB#3:                                 @   in Loop: Header=BB165_1 Depth=1
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB165_1
.LBB165_4:
	ldr	r0, [r11, #-40]
	cmp	r0, #3
	bne	.LBB165_6
@ BB#5:
	movw	r0, :lower16:nZeroStreamSize
	movt	r0, :upper16:nZeroStreamSize
	movw	r1, :lower16:SizeOfEmptyFrame
	movt	r1, :upper16:SizeOfEmptyFrame
	movw	r2, #3
	ldr	r3, [r11, #-36]
	movw	r12, :lower16:SizeOfEmptyFrame
	movt	r12, :upper16:SizeOfEmptyFrame
	add	r3, r12, r3, lsl #3
	ldr	r3, [r3, #4]
	add	r3, r3, #4
	str	r3, [r0]
	str	r2, [sp, #32]           @ 4-byte Spill
	str	r1, [sp, #28]           @ 4-byte Spill
	b	.LBB165_7
.LBB165_6:
	movw	r0, :lower16:nZeroStreamSize
	movt	r0, :upper16:nZeroStreamSize
	movw	r1, :lower16:SizeOfEmptyFrame
	movt	r1, :upper16:SizeOfEmptyFrame
	movw	r2, #3
	ldr	r3, [r11, #-36]
	movw	r12, :lower16:SizeOfEmptyFrame
	movt	r12, :upper16:SizeOfEmptyFrame
	add	r3, r12, r3, lsl #3
	ldr	r3, [r3]
	add	r3, r3, #4
	str	r3, [r0]
	str	r2, [sp, #24]           @ 4-byte Spill
	str	r1, [sp, #20]           @ 4-byte Spill
.LBB165_7:
	ldr	r0, [r11, #-44]
	cmp	r0, #2
	ble	.LBB165_9
@ BB#8:
	movw	r1, :lower16:.L.str.335
	movt	r1, :upper16:.L.str.335
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	mvn	r1, #0
	str	r0, [sp, #16]           @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB165_9:
	movw	r0, :lower16:TotalFrameSize
	movt	r0, :upper16:TotalFrameSize
	movw	r1, :lower16:nZeroStreamSize
	movt	r1, :upper16:nZeroStreamSize
	movw	r2, :lower16:InitVbrTag.framesize
	movt	r2, :upper16:InitVbrTag.framesize
	movw	r3, #2
	ldr	r12, [r11, #-44]
	movw	lr, :lower16:InitVbrTag.framesize
	movt	lr, :upper16:InitVbrTag.framesize
	add	r12, lr, r12, lsl #2
	ldr	r12, [r12]
	str	r12, [r0]
	ldr	r1, [r1]
	add	r1, r1, #120
	str	r1, [r11, #-52]
	ldr	r1, [r11, #-52]
	add	r1, r1, #20
	str	r1, [r11, #-52]
	ldr	r0, [r0]
	ldr	r1, [r11, #-52]
	cmp	r0, r1
	str	r2, [sp, #12]           @ 4-byte Spill
	str	r3, [sp, #8]            @ 4-byte Spill
	bge	.LBB165_11
@ BB#10:
	movw	r1, :lower16:.L.str.1.336
	movt	r1, :upper16:.L.str.1.336
	movw	r0, :lower16:stderr
	movt	r0, :upper16:stderr
	ldr	r0, [r0]
	bl	fprintf
	mvn	r1, #0
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	bl	exit
.LBB165_11:
	movw	r0, #0
	str	r0, [r11, #-48]
.LBB165_12:                             @ =>This Inner Loop Header: Depth=1
	movw	r0, :lower16:TotalFrameSize
	movt	r0, :upper16:TotalFrameSize
	ldr	r1, [r11, #-48]
	ldr	r0, [r0]
	cmp	r1, r0
	bge	.LBB165_15
@ BB#13:                                @   in Loop: Header=BB165_12 Depth=1
	movw	r1, #0
	movw	r2, #8
	ldr	r0, [r11, #-32]
	bl	putbits
@ BB#14:                                @   in Loop: Header=BB165_12 Depth=1
	ldr	r0, [r11, #-48]
	add	r0, r0, #1
	str	r0, [r11, #-48]
	b	.LBB165_12
.LBB165_15:
	movw	r0, #0
	sub	sp, r11, #28
	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
.Lfunc_end165:
	.size	InitVbrTag, .Lfunc_end165-InitVbrTag
	.cantunwind
	.fnend

	.globl	PutVbrTag
	.p2align	3
	.type	PutVbrTag,%function
	.code	32                      @ @PutVbrTag
PutVbrTag:
	.fnstart
@ BB#0:
	push	{r4, r5, r11, lr}
	add	r11, sp, #8
	sub	sp, sp, #304
	movw	r3, :lower16:nVbrNumFrames
	movt	r3, :upper16:nVbrNumFrames
	str	r0, [r11, #-16]
	str	r1, [r11, #-20]
	str	r2, [r11, #-24]
	ldr	r0, [r3]
	cmp	r0, #0
	beq	.LBB166_2
@ BB#1:
	movw	r0, #0
	movw	r1, :lower16:pVbrFrames
	movt	r1, :upper16:pVbrFrames
	ldr	r1, [r1]
	cmp	r1, r0
	bne	.LBB166_3
.LBB166_2:
	mvn	r0, #0
	str	r0, [r11, #-12]
	b	.LBB166_19
.LBB166_3:
	movw	r1, :lower16:.L.str.2.339
	movt	r1, :upper16:.L.str.2.339
	ldr	r0, [r11, #-16]
	bl	fopen
	movw	r1, #0
	str	r0, [r11, #-144]
	ldr	r0, [r11, #-144]
	cmp	r0, r1
	bne	.LBB166_5
@ BB#4:
	mvn	r0, #0
	str	r0, [r11, #-12]
	b	.LBB166_19
.LBB166_5:
	movw	r1, #0
	movw	r2, #2
	movw	r0, :lower16:pbtStreamBuffer
	movt	r0, :upper16:pbtStreamBuffer
	movw	r3, #0
	movw	r12, #216
	and	r3, r3, #255
	str	r1, [sp, #76]           @ 4-byte Spill
	mov	r1, r3
	str	r2, [sp, #72]           @ 4-byte Spill
	mov	r2, r12
	bl	memset
	ldr	r0, [r11, #-144]
	ldr	r1, [sp, #76]           @ 4-byte Reload
	ldr	r2, [sp, #72]           @ 4-byte Reload
	bl	fseek
	ldr	r1, [r11, #-144]
	str	r0, [sp, #68]           @ 4-byte Spill
	mov	r0, r1
	bl	ftell
	str	r0, [r11, #-32]
	ldr	r0, [r11, #-32]
	cmp	r0, #0
	bne	.LBB166_7
@ BB#6:
	mvn	r0, #0
	str	r0, [r11, #-12]
	b	.LBB166_19
.LBB166_7:
	movw	r2, #0
	movw	r0, :lower16:TotalFrameSize
	movt	r0, :upper16:TotalFrameSize
	ldr	r1, [r11, #-144]
	ldr	r0, [r0]
	str	r0, [sp, #64]           @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #64]           @ 4-byte Reload
	bl	fseek
	movw	r1, :lower16:pbtStreamBuffer
	movt	r1, :upper16:pbtStreamBuffer
	movw	r2, #4
	movw	lr, #1
	ldr	r3, [r11, #-144]
	str	r0, [sp, #60]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	mov	r2, lr
	bl	fread
	movw	r1, #255
	movw	r2, :lower16:pbtStreamBuffer
	movt	r2, :upper16:pbtStreamBuffer
	strb	r1, [r2]
	ldr	r1, [r11, #-24]
	cmp	r1, #0
	str	r0, [sp, #56]           @ 4-byte Spill
	bne	.LBB166_9
@ BB#8:
	movw	r0, :lower16:pbtStreamBuffer
	movt	r0, :upper16:pbtStreamBuffer
	movw	r1, #251
	strb	r1, [r0, #1]
	ldrb	r1, [r0, #2]
	and	r1, r1, #12
	strb	r1, [r11, #-37]
	ldrb	r1, [r11, #-37]
	orr	r1, r1, #80
	strb	r1, [r0, #2]
	b	.LBB166_10
.LBB166_9:
	movw	r0, :lower16:pbtStreamBuffer
	movt	r0, :upper16:pbtStreamBuffer
	movw	r1, #243
	strb	r1, [r0, #1]
	ldrb	r1, [r0, #2]
	and	r1, r1, #12
	strb	r1, [r11, #-37]
	ldrb	r1, [r11, #-37]
	orr	r1, r1, #128
	strb	r1, [r0, #2]
.LBB166_10:
	movw	r0, #0
	ldr	r1, [r11, #-144]
	str	r0, [sp, #52]           @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #52]           @ 4-byte Reload
	ldr	r2, [sp, #52]           @ 4-byte Reload
	bl	fseek
	movw	r1, #1
	movw	r2, #0
	movw	lr, #100
	sub	r3, r11, #137
	str	r0, [sp, #48]           @ 4-byte Spill
	mov	r0, r3
	and	r2, r2, #255
	str	r1, [sp, #44]           @ 4-byte Spill
	mov	r1, r2
	mov	r2, lr
	bl	memset
	ldr	r0, [sp, #44]           @ 4-byte Reload
	str	r0, [r11, #-28]
.LBB166_11:                             @ =>This Inner Loop Header: Depth=1
	ldr	r0, [r11, #-28]
	cmp	r0, #100
	bge	.LBB166_16
@ BB#12:                                @   in Loop: Header=BB166_11 Depth=1
	vldr	s0, .LCPI166_0
	vldr	s2, .LCPI166_1
	movw	r0, #2
	vldr	s4, [r11, #-28]
	vcvt.f64.s32	d16, s4
	vldr	d17, .LCPI166_2
	vmul.f64	d16, d16, d17
	movw	r1, :lower16:nVbrNumFrames
	movt	r1, :upper16:nVbrNumFrames
	vldr	s4, [r1]
	vcvt.f64.s32	d17, s4
	vmul.f64	d16, d16, d17
	vmov	r1, r2, d16
	str	r0, [sp, #40]           @ 4-byte Spill
	mov	r0, r1
	mov	r1, r2
	vstr	s0, [sp, #36]           @ 4-byte Spill
	vstr	s2, [sp, #32]           @ 4-byte Spill
	bl	floor
	vmov	d16, r0, r1
	vcvt.s32.f64	s0, d16
	vmov	r0, s0
	vcvt.s32.f64	s0, d16
	vstr	s0, [sp, #84]
	movw	r1, :lower16:pVbrFrames
	movt	r1, :upper16:pVbrFrames
	ldr	r1, [r1]
	mov	r2, r0
	add	r0, r1, r0, lsl #2
	ldr	r0, [r0]
	vmov	s0, r0
	vcvt.f32.s32	s0, s0
	vldr	s2, [sp, #32]           @ 4-byte Reload
	vmul.f32	s0, s2, s0
	ldr	r0, [r11, #-32]
	vmov	s4, r0
	vcvt.f32.s32	s4, s4
	vdiv.f32	s0, s0, s4
	vstr	s0, [sp, #80]
	vldr	s0, [sp, #80]
	vldr	s4, [sp, #36]           @ 4-byte Reload
	vcmpe.f32	s0, s4
	vmrs	APSR_nzcv, fpscr
	str	r2, [sp, #28]           @ 4-byte Spill
	ble	.LBB166_14
@ BB#13:                                @   in Loop: Header=BB166_11 Depth=1
	vldr	s0, .LCPI166_0
	vstr	s0, [sp, #80]
.LBB166_14:                             @   in Loop: Header=BB166_11 Depth=1
	sub	r0, r11, #137
	vldr	s0, [sp, #80]
	vcvt.u32.f32	s0, s0
	vmov	r1, s0
	ldr	r2, [r11, #-28]
	add	r0, r0, r2
	strb	r1, [r0]
@ BB#15:                                @   in Loop: Header=BB166_11 Depth=1
	ldr	r0, [r11, #-28]
	add	r0, r0, #1
	str	r0, [r11, #-28]
	b	.LBB166_11
.LBB166_16:
	movw	r1, #15
	movw	r0, :lower16:pbtStreamBuffer
	movt	r0, :upper16:pbtStreamBuffer
	movw	r2, :lower16:VBRTag
	movt	r2, :upper16:VBRTag
	movw	r3, :lower16:nZeroStreamSize
	movt	r3, :upper16:nZeroStreamSize
	ldr	r3, [r3]
	str	r3, [r11, #-36]
	ldrb	r3, [r2]
	ldr	r12, [r11, #-36]
	add	lr, r12, #1
	str	lr, [r11, #-36]
	add	r12, r0, r12
	strb	r3, [r12]
	ldrb	r3, [r2, #1]
	ldr	r12, [r11, #-36]
	add	lr, r12, #1
	str	lr, [r11, #-36]
	add	r12, r0, r12
	strb	r3, [r12]
	ldrb	r3, [r2, #2]
	ldr	r12, [r11, #-36]
	add	lr, r12, #1
	str	lr, [r11, #-36]
	add	r12, r0, r12
	strb	r3, [r12]
	ldrb	r2, [r2, #3]
	ldr	r3, [r11, #-36]
	add	r12, r3, #1
	str	r12, [r11, #-36]
	add	r3, r0, r3
	strb	r2, [r3]
	ldr	r2, [r11, #-36]
	add	r0, r0, r2
	bl	CreateI4
	movw	r0, :lower16:nVbrNumFrames
	movt	r0, :upper16:nVbrNumFrames
	movw	r1, :lower16:pbtStreamBuffer
	movt	r1, :upper16:pbtStreamBuffer
	ldr	r2, [r11, #-36]
	add	r2, r2, #4
	str	r2, [r11, #-36]
	ldr	r2, [r11, #-36]
	add	r1, r1, r2
	ldr	r0, [r0]
	str	r0, [sp, #24]           @ 4-byte Spill
	mov	r0, r1
	ldr	r1, [sp, #24]           @ 4-byte Reload
	bl	CreateI4
	movw	r0, :lower16:pbtStreamBuffer
	movt	r0, :upper16:pbtStreamBuffer
	ldr	r1, [r11, #-36]
	add	r1, r1, #4
	str	r1, [r11, #-36]
	ldr	r1, [r11, #-36]
	add	r0, r0, r1
	ldr	r1, [r11, #-32]
	bl	CreateI4
	movw	r0, :lower16:pbtStreamBuffer
	movt	r0, :upper16:pbtStreamBuffer
	movw	r2, #100
	sub	r1, r11, #137
	ldr	r3, [r11, #-36]
	add	r3, r3, #4
	str	r3, [r11, #-36]
	ldr	r3, [r11, #-36]
	add	r3, r0, r3
	str	r0, [sp, #20]           @ 4-byte Spill
	mov	r0, r3
	bl	memcpy
	ldr	r0, [r11, #-36]
	add	r0, r0, #100
	str	r0, [r11, #-36]
	ldr	r0, [r11, #-36]
	ldr	r1, [sp, #20]           @ 4-byte Reload
	add	r0, r1, r0
	ldr	r1, [r11, #-20]
	bl	CreateI4
	add	r0, sp, #88
	ldr	r1, [r11, #-36]
	add	r1, r1, #4
	str	r1, [r11, #-36]
	str	r0, [sp, #16]           @ 4-byte Spill
	bl	get_lame_version
	movw	r1, :lower16:.L.str.3.340
	movt	r1, :upper16:.L.str.3.340
	ldr	r2, [sp, #16]           @ 4-byte Reload
	str	r0, [sp, #12]           @ 4-byte Spill
	mov	r0, r2
	ldr	r2, [sp, #12]           @ 4-byte Reload
	bl	sprintf
	movw	r2, #20
	add	r1, sp, #88
	movw	r3, :lower16:pbtStreamBuffer
	movt	r3, :upper16:pbtStreamBuffer
	ldr	r12, [r11, #-36]
	add	r3, r3, r12
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r3
	bl	strncpy
	movw	r1, :lower16:pbtStreamBuffer
	movt	r1, :upper16:pbtStreamBuffer
	movw	r2, #1
	movw	r3, :lower16:TotalFrameSize
	movt	r3, :upper16:TotalFrameSize
	ldr	r12, [r11, #-36]
	add	r12, r12, #20
	str	r12, [r11, #-36]
	ldr	r3, [r3]
	ldr	r12, [r11, #-144]
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	mov	r1, r3
	mov	r3, r12
	bl	fwrite
	cmp	r0, #1
	beq	.LBB166_18
@ BB#17:
	mvn	r0, #0
	str	r0, [r11, #-12]
	b	.LBB166_19
.LBB166_18:
	ldr	r0, [r11, #-144]
	bl	fclose
	movw	lr, :lower16:pVbrFrames
	movt	lr, :upper16:pVbrFrames
	ldr	lr, [lr]
	str	r0, [sp]                @ 4-byte Spill
	mov	r0, lr
	bl	free
	movw	r0, #0
	movw	lr, :lower16:pVbrFrames
	movt	lr, :upper16:pVbrFrames
	str	r0, [lr]
	str	r0, [r11, #-12]
.LBB166_19:
	ldr	r0, [r11, #-12]
	sub	sp, r11, #8
	pop	{r4, r5, r11, pc}
	.p2align	3
@ BB#20:
.LCPI166_2:
	.long	1202590843              @ double 0.01
	.long	1065646817
.LCPI166_0:
	.long	1132396544              @ float 255
.LCPI166_1:
	.long	1132462080              @ float 256
.Lfunc_end166:
	.size	PutVbrTag, .Lfunc_end166-PutVbrTag
	.cantunwind
	.fnend

	.globl	SeekPoint
	.p2align	2
	.type	SeekPoint,%function
	.code	32                      @ @SeekPoint
SeekPoint:
	.fnstart
@ BB#0:
	sub	sp, sp, #32
	vmov	s0, r2
	str	r0, [sp, #28]
	str	r1, [sp, #24]
	vstr	s0, [sp, #20]
	vldr	s0, [sp, #20]
	vcmpe.f32	s0, #0
	vmrs	APSR_nzcv, fpscr
	bpl	.LBB167_2
@ BB#1:
	vldr	s0, .LCPI167_0
	vstr	s0, [sp, #20]
.LBB167_2:
	vldr	s0, .LCPI167_1
	vldr	s2, [sp, #20]
	vcmpe.f32	s2, s0
	vmrs	APSR_nzcv, fpscr
	ble	.LBB167_4
@ BB#3:
	vldr	s0, .LCPI167_1
	vstr	s0, [sp, #20]
.LBB167_4:
	vldr	s0, [sp, #20]
	vcvt.s32.f32	s0, s0
	vmov	r0, s0
	str	r0, [sp, #16]
	ldr	r0, [sp, #16]
	cmp	r0, #99
	ble	.LBB167_6
@ BB#5:
	movw	r0, #99
	str	r0, [sp, #16]
.LBB167_6:
	ldr	r0, [sp, #28]
	ldr	r1, [sp, #16]
	add	r0, r0, r1
	ldrb	r0, [r0]
	vmov	s0, r0
	vcvt.f32.u32	s0, s0
	vstr	s0, [sp, #8]
	ldr	r0, [sp, #16]
	cmp	r0, #99
	bge	.LBB167_8
@ BB#7:
	ldr	r0, [sp, #28]
	ldr	r1, [sp, #16]
	add	r1, r1, #1
	add	r0, r0, r1
	ldrb	r0, [r0]
	vmov	s0, r0
	vcvt.f32.u32	s0, s0
	vstr	s0, [sp, #4]
	b	.LBB167_9
.LBB167_8:
	vldr	s0, .LCPI167_2
	vstr	s0, [sp, #4]
.LBB167_9:
	vldr	s0, .LCPI167_3
	vldr	s2, [sp, #8]
	vldr	s4, [sp, #4]
	vldr	s6, [sp, #8]
	vsub.f32	s4, s4, s6
	vldr	s6, [sp, #20]
	ldr	r0, [sp, #16]
	vmov	s8, r0
	vcvt.f32.s32	s8, s8
	vsub.f32	s6, s6, s8
	vmul.f32	s4, s4, s6
	vadd.f32	s2, s2, s4
	vstr	s2, [sp]
	vldr	s2, [sp]
	vmul.f32	s0, s0, s2
	ldr	r0, [sp, #24]
	vmov	s2, r0
	vcvt.f32.s32	s2, s2
	vmul.f32	s0, s0, s2
	vcvt.s32.f32	s0, s0
	vmov	r0, s0
	str	r0, [sp, #12]
	ldr	r0, [sp, #12]
	add	sp, sp, #32
	bx	lr
	.p2align	2
@ BB#10:
.LCPI167_0:
	.long	0                       @ float 0
.LCPI167_1:
	.long	1120403456              @ float 100
.LCPI167_2:
	.long	1132462080              @ float 256
.LCPI167_3:
	.long	998244352               @ float 0.00390625
.Lfunc_end167:
	.size	SeekPoint, .Lfunc_end167-SeekPoint
	.cantunwind
	.fnend

	.globl	lame_print_version
	.p2align	2
	.type	lame_print_version,%function
	.code	32                      @ @lame_print_version
lame_print_version:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #32
	str	r0, [r11, #-4]
	ldr	r0, [r11, #-4]
	str	r0, [r11, #-8]          @ 4-byte Spill
	bl	get_lame_version
	movw	r1, :lower16:.L.str.345
	movt	r1, :upper16:.L.str.345
	ldr	lr, [r11, #-8]          @ 4-byte Reload
	str	r0, [r11, #-12]         @ 4-byte Spill
	mov	r0, lr
	ldr	r2, [r11, #-12]         @ 4-byte Reload
	bl	fprintf
	ldr	r1, [r11, #-4]
	str	r0, [sp, #16]           @ 4-byte Spill
	str	r1, [sp, #12]           @ 4-byte Spill
	bl	get_psy_version
	movw	r1, :lower16:.L.str.1.346
	movt	r1, :upper16:.L.str.1.346
	ldr	r2, [sp, #12]           @ 4-byte Reload
	str	r0, [sp, #8]            @ 4-byte Spill
	mov	r0, r2
	ldr	r2, [sp, #8]            @ 4-byte Reload
	bl	fprintf
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end168:
	.size	lame_print_version, .Lfunc_end168-lame_print_version
	.cantunwind
	.fnend

	.globl	get_lame_version
	.p2align	2
	.type	get_lame_version,%function
	.code	32                      @ @get_lame_version
get_lame_version:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #8
	movw	r0, :lower16:lpszVersion
	movt	r0, :upper16:lpszVersion
	movw	r1, :lower16:.L.str.2.347
	movt	r1, :upper16:.L.str.2.347
	movw	r2, #3
	movw	r3, #70
	bl	sprintf
	movw	r1, :lower16:lpszVersion
	movt	r1, :upper16:lpszVersion
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end169:
	.size	get_lame_version, .Lfunc_end169-get_lame_version
	.cantunwind
	.fnend

	.globl	get_psy_version
	.p2align	2
	.type	get_psy_version,%function
	.code	32                      @ @get_psy_version
get_psy_version:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #8
	movw	r0, :lower16:lpszVersion
	movt	r0, :upper16:lpszVersion
	movw	r1, :lower16:.L.str.2.347
	movt	r1, :upper16:.L.str.2.347
	movw	r2, #0
	movw	r3, #77
	bl	sprintf
	movw	r1, :lower16:lpszVersion
	movt	r1, :upper16:lpszVersion
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end170:
	.size	get_psy_version, .Lfunc_end170-get_psy_version
	.cantunwind
	.fnend

	.globl	get_mp3x_version
	.p2align	2
	.type	get_mp3x_version,%function
	.code	32                      @ @get_mp3x_version
get_mp3x_version:
	.fnstart
@ BB#0:
	push	{r11, lr}
	mov	r11, sp
	sub	sp, sp, #8
	movw	r0, :lower16:lpszVersion
	movt	r0, :upper16:lpszVersion
	movw	r1, :lower16:.L.str.3.348
	movt	r1, :upper16:.L.str.3.348
	movw	r2, #0
	movw	r3, #82
	bl	sprintf
	movw	r1, :lower16:lpszVersion
	movt	r1, :upper16:lpszVersion
	str	r0, [sp, #4]            @ 4-byte Spill
	mov	r0, r1
	mov	sp, r11
	pop	{r11, pc}
.Lfunc_end171:
	.size	get_mp3x_version, .Lfunc_end171-get_mp3x_version
	.cantunwind
	.fnend

	.type	rv_tbl,%object          @ @rv_tbl
	.section	.rodata,"a",%progbits
	.p2align	1
rv_tbl:
	.short	0                       @ 0x0
	.short	128                     @ 0x80
	.short	64                      @ 0x40
	.short	192                     @ 0xc0
	.short	32                      @ 0x20
	.short	160                     @ 0xa0
	.short	96                      @ 0x60
	.short	224                     @ 0xe0
	.short	16                      @ 0x10
	.short	144                     @ 0x90
	.short	80                      @ 0x50
	.short	208                     @ 0xd0
	.short	48                      @ 0x30
	.short	176                     @ 0xb0
	.short	112                     @ 0x70
	.short	240                     @ 0xf0
	.short	8                       @ 0x8
	.short	136                     @ 0x88
	.short	72                      @ 0x48
	.short	200                     @ 0xc8
	.short	40                      @ 0x28
	.short	168                     @ 0xa8
	.short	104                     @ 0x68
	.short	232                     @ 0xe8
	.short	24                      @ 0x18
	.short	152                     @ 0x98
	.short	88                      @ 0x58
	.short	216                     @ 0xd8
	.short	56                      @ 0x38
	.short	184                     @ 0xb8
	.short	120                     @ 0x78
	.short	248                     @ 0xf8
	.short	4                       @ 0x4
	.short	132                     @ 0x84
	.short	68                      @ 0x44
	.short	196                     @ 0xc4
	.short	36                      @ 0x24
	.short	164                     @ 0xa4
	.short	100                     @ 0x64
	.short	228                     @ 0xe4
	.short	20                      @ 0x14
	.short	148                     @ 0x94
	.short	84                      @ 0x54
	.short	212                     @ 0xd4
	.short	52                      @ 0x34
	.short	180                     @ 0xb4
	.short	116                     @ 0x74
	.short	244                     @ 0xf4
	.short	12                      @ 0xc
	.short	140                     @ 0x8c
	.short	76                      @ 0x4c
	.short	204                     @ 0xcc
	.short	44                      @ 0x2c
	.short	172                     @ 0xac
	.short	108                     @ 0x6c
	.short	236                     @ 0xec
	.short	28                      @ 0x1c
	.short	156                     @ 0x9c
	.short	92                      @ 0x5c
	.short	220                     @ 0xdc
	.short	60                      @ 0x3c
	.short	188                     @ 0xbc
	.short	124                     @ 0x7c
	.short	252                     @ 0xfc
	.short	2                       @ 0x2
	.short	130                     @ 0x82
	.short	66                      @ 0x42
	.short	194                     @ 0xc2
	.short	34                      @ 0x22
	.short	162                     @ 0xa2
	.short	98                      @ 0x62
	.short	226                     @ 0xe2
	.short	18                      @ 0x12
	.short	146                     @ 0x92
	.short	82                      @ 0x52
	.short	210                     @ 0xd2
	.short	50                      @ 0x32
	.short	178                     @ 0xb2
	.short	114                     @ 0x72
	.short	242                     @ 0xf2
	.short	10                      @ 0xa
	.short	138                     @ 0x8a
	.short	74                      @ 0x4a
	.short	202                     @ 0xca
	.short	42                      @ 0x2a
	.short	170                     @ 0xaa
	.short	106                     @ 0x6a
	.short	234                     @ 0xea
	.short	26                      @ 0x1a
	.short	154                     @ 0x9a
	.short	90                      @ 0x5a
	.short	218                     @ 0xda
	.short	58                      @ 0x3a
	.short	186                     @ 0xba
	.short	122                     @ 0x7a
	.short	250                     @ 0xfa
	.short	6                       @ 0x6
	.short	134                     @ 0x86
	.short	70                      @ 0x46
	.short	198                     @ 0xc6
	.short	38                      @ 0x26
	.short	166                     @ 0xa6
	.short	102                     @ 0x66
	.short	230                     @ 0xe6
	.short	22                      @ 0x16
	.short	150                     @ 0x96
	.short	86                      @ 0x56
	.short	214                     @ 0xd6
	.short	54                      @ 0x36
	.short	182                     @ 0xb6
	.short	118                     @ 0x76
	.short	246                     @ 0xf6
	.short	14                      @ 0xe
	.short	142                     @ 0x8e
	.short	78                      @ 0x4e
	.short	206                     @ 0xce
	.short	46                      @ 0x2e
	.short	174                     @ 0xae
	.short	110                     @ 0x6e
	.short	238                     @ 0xee
	.short	30                      @ 0x1e
	.short	158                     @ 0x9e
	.short	94                      @ 0x5e
	.short	222                     @ 0xde
	.short	62                      @ 0x3e
	.short	190                     @ 0xbe
	.short	126                     @ 0x7e
	.short	254                     @ 0xfe
	.size	rv_tbl, 256

	.type	window_s,%object        @ @window_s
	.local	window_s
	.comm	window_s,512,4
	.type	costab,%object          @ @costab
	.local	costab
	.comm	costab,32,4
	.type	window,%object          @ @window
	.local	window
	.comm	window,2048,4
	.type	BitCount,%object        @ @BitCount
	.local	BitCount
	.comm	BitCount,4,4
	.type	ThisFrameSize,%object   @ @ThisFrameSize
	.local	ThisFrameSize
	.comm	ThisFrameSize,4,4
	.type	BitsRemaining,%object   @ @BitsRemaining
	.local	BitsRemaining
	.comm	BitsRemaining,4,4
	.type	.L.str,%object          @ @.str
	.section	.rodata.str1.1,"aMS",%progbits,1
.L.str:
	.asciz	"frameInfo->nGranules <= MAX_GRANULES"
	.size	.L.str, 37

	.type	.L.str.1,%object        @ @.str.1
.L.str.1:
	.asciz	"formatBitstream.c"
	.size	.L.str.1, 18

	.type	.L__func__.BF_BitstreamFrame,%object @ @__func__.BF_BitstreamFrame
.L__func__.BF_BitstreamFrame:
	.asciz	"BF_BitstreamFrame"
	.size	.L__func__.BF_BitstreamFrame, 18

	.type	.L.str.2,%object        @ @.str.2
.L.str.2:
	.asciz	"frameInfo->nChannels <= MAX_CHANNELS"
	.size	.L.str.2, 37

	.type	.L.str.3,%object        @ @.str.3
.L.str.3:
	.asciz	"(BitsRemaining % 8) == 0"
	.size	.L.str.3, 25

	.type	forwardFrameLength,%object @ @forwardFrameLength
	.local	forwardFrameLength
	.comm	forwardFrameLength,4,4
	.type	forwardSILength,%object @ @forwardSILength
	.local	forwardSILength
	.comm	forwardSILength,4,4
	.type	elements,%object        @ @elements
	.local	elements
	.comm	elements,4,4
	.type	side_queue_head,%object @ @side_queue_head
	.local	side_queue_head
	.comm	side_queue_head,4,4
	.type	.L.str.7,%object        @ @.str.7
.L.str.7:
	.asciz	"results"
	.size	.L.str.7, 8

	.type	.L__func__.writePartMainData,%object @ @__func__.writePartMainData
.L__func__.writePartMainData:
	.asciz	"writePartMainData"
	.size	.L__func__.writePartMainData, 18

	.type	.L.str.8,%object        @ @.str.8
.L.str.8:
	.asciz	"part"
	.size	.L.str.8, 5

	.type	.L.str.9,%object        @ @.str.9
.L.str.9:
	.asciz	"nbits <= 32"
	.size	.L.str.9, 12

	.type	.L__func__.WriteMainDataBits,%object @ @__func__.WriteMainDataBits
.L__func__.WriteMainDataBits:
	.asciz	"WriteMainDataBits"
	.size	.L__func__.WriteMainDataBits, 18

	.type	.L.str.10,%object       @ @.str.10
.L.str.10:
	.asciz	"BitCount <= ThisFrameSize"
	.size	.L.str.10, 26

	.type	.L.str.11,%object       @ @.str.11
.L.str.11:
	.asciz	"BitsRemaining >= 0"
	.size	.L.str.11, 19

	.type	.L.str.12,%object       @ @.str.12
.L.str.12:
	.asciz	"(BitCount + BitsRemaining) == ThisFrameSize"
	.size	.L.str.12, 44

	.type	side_queue_free,%object @ @side_queue_free
	.local	side_queue_free
	.comm	side_queue_free,4,4
	.type	.L.str.13,%object       @ @.str.13
.L.str.13:
	.asciz	"l"
	.size	.L.str.13, 2

	.type	.L__func__.get_side_info,%object @ @__func__.get_side_info
.L__func__.get_side_info:
	.asciz	"get_side_info"
	.size	.L__func__.get_side_info, 14

	.type	.L__func__.writePartSideInfo,%object @ @__func__.writePartSideInfo
.L__func__.writePartSideInfo:
	.asciz	"writePartSideInfo"
	.size	.L__func__.writePartSideInfo, 18

	.type	.L.str.14,%object       @ @.str.14
.L.str.14:
	.asciz	"cannot allocate side_info_link"
	.size	.L.str.14, 31

	.type	.L.str.4,%object        @ @.str.4
.L.str.4:
	.asciz	"newPH"
	.size	.L.str.4, 6

	.type	.L__func__.BF_newPartHolder,%object @ @__func__.BF_newPartHolder
.L__func__.BF_newPartHolder:
	.asciz	"BF_newPartHolder"
	.size	.L__func__.BF_newPartHolder, 17

	.type	.L.str.5,%object        @ @.str.5
.L.str.5:
	.asciz	"newPH->part"
	.size	.L.str.5, 12

	.type	.L.str.6,%object        @ @.str.6
.L.str.6:
	.asciz	"newPH->part->element"
	.size	.L.str.6, 21

	.type	genre_last,%object      @ @genre_last
	.data
	.globl	genre_last
	.p2align	2
genre_last:
	.long	147                     @ 0x93
	.size	genre_last, 4

	.type	genre_list,%object      @ @genre_list
	.globl	genre_list
	.p2align	2
genre_list:
	.long	.L.str.3.1
	.long	.L.str.4.2
	.long	.L.str.5.3
	.long	.L.str.6.4
	.long	.L.str.7.5
	.long	.L.str.8.6
	.long	.L.str.9.7
	.long	.L.str.10.8
	.long	.L.str.11.9
	.long	.L.str.12.10
	.long	.L.str.13.11
	.long	.L.str.14.12
	.long	.L.str.15
	.long	.L.str.16
	.long	.L.str.17
	.long	.L.str.18
	.long	.L.str.19
	.long	.L.str.20
	.long	.L.str.21
	.long	.L.str.22
	.long	.L.str.23
	.long	.L.str.24
	.long	.L.str.25
	.long	.L.str.26
	.long	.L.str.27
	.long	.L.str.28
	.long	.L.str.29
	.long	.L.str.30
	.long	.L.str.31
	.long	.L.str.32
	.long	.L.str.33
	.long	.L.str.34
	.long	.L.str.35
	.long	.L.str.36
	.long	.L.str.37
	.long	.L.str.38
	.long	.L.str.39
	.long	.L.str.40
	.long	.L.str.41
	.long	.L.str.42
	.long	.L.str.43
	.long	.L.str.44
	.long	.L.str.45
	.long	.L.str.46
	.long	.L.str.47
	.long	.L.str.48
	.long	.L.str.49
	.long	.L.str.50
	.long	.L.str.51
	.long	.L.str.52
	.long	.L.str.53
	.long	.L.str.54
	.long	.L.str.55
	.long	.L.str.56
	.long	.L.str.57
	.long	.L.str.58
	.long	.L.str.59
	.long	.L.str.60
	.long	.L.str.61
	.long	.L.str.62
	.long	.L.str.63
	.long	.L.str.64
	.long	.L.str.65
	.long	.L.str.66
	.long	.L.str.67
	.long	.L.str.68
	.long	.L.str.69
	.long	.L.str.70
	.long	.L.str.71
	.long	.L.str.72
	.long	.L.str.73
	.long	.L.str.74
	.long	.L.str.75
	.long	.L.str.76
	.long	.L.str.77
	.long	.L.str.78
	.long	.L.str.79
	.long	.L.str.80
	.long	.L.str.81
	.long	.L.str.82
	.long	.L.str.83
	.long	.L.str.84
	.long	.L.str.85
	.long	.L.str.86
	.long	.L.str.87
	.long	.L.str.88
	.long	.L.str.89
	.long	.L.str.90
	.long	.L.str.91
	.long	.L.str.92
	.long	.L.str.93
	.long	.L.str.94
	.long	.L.str.95
	.long	.L.str.96
	.long	.L.str.97
	.long	.L.str.98
	.long	.L.str.99
	.long	.L.str.100
	.long	.L.str.101
	.long	.L.str.102
	.long	.L.str.103
	.long	.L.str.104
	.long	.L.str.105
	.long	.L.str.106
	.long	.L.str.107
	.long	.L.str.108
	.long	.L.str.109
	.long	.L.str.110
	.long	.L.str.111
	.long	.L.str.112
	.long	.L.str.113
	.long	.L.str.114
	.long	.L.str.115
	.long	.L.str.116
	.long	.L.str.117
	.long	.L.str.118
	.long	.L.str.119
	.long	.L.str.120
	.long	.L.str.121
	.long	.L.str.122
	.long	.L.str.123
	.long	.L.str.124
	.long	.L.str.125
	.long	.L.str.126
	.long	.L.str.127
	.long	.L.str.128
	.long	.L.str.129
	.long	.L.str.130
	.long	.L.str.131
	.long	.L.str.132
	.long	.L.str.133
	.long	.L.str.134
	.long	.L.str.135
	.long	.L.str.136
	.long	.L.str.137
	.long	.L.str.138
	.long	.L.str.139
	.long	.L.str.140
	.long	.L.str.141
	.long	.L.str.142
	.long	.L.str.143
	.long	.L.str.144
	.long	.L.str.145
	.long	.L.str.146
	.long	.L.str.147
	.long	.L.str.148
	.long	.L.str.149
	.long	.L.str.150
	.size	genre_list, 592

	.type	.L.str.3.1,%object      @ @.str.3.1
	.section	.rodata.str1.1,"aMS",%progbits,1
.L.str.3.1:
	.asciz	"Blues"
	.size	.L.str.3.1, 6

	.type	.L.str.4.2,%object      @ @.str.4.2
.L.str.4.2:
	.asciz	"Classic Rock"
	.size	.L.str.4.2, 13

	.type	.L.str.5.3,%object      @ @.str.5.3
.L.str.5.3:
	.asciz	"Country"
	.size	.L.str.5.3, 8

	.type	.L.str.6.4,%object      @ @.str.6.4
.L.str.6.4:
	.asciz	"Dance"
	.size	.L.str.6.4, 6

	.type	.L.str.7.5,%object      @ @.str.7.5
.L.str.7.5:
	.asciz	"Disco"
	.size	.L.str.7.5, 6

	.type	.L.str.8.6,%object      @ @.str.8.6
.L.str.8.6:
	.asciz	"Funk"
	.size	.L.str.8.6, 5

	.type	.L.str.9.7,%object      @ @.str.9.7
.L.str.9.7:
	.asciz	"Grunge"
	.size	.L.str.9.7, 7

	.type	.L.str.10.8,%object     @ @.str.10.8
.L.str.10.8:
	.asciz	"Hip-Hop"
	.size	.L.str.10.8, 8

	.type	.L.str.11.9,%object     @ @.str.11.9
.L.str.11.9:
	.asciz	"Jazz"
	.size	.L.str.11.9, 5

	.type	.L.str.12.10,%object    @ @.str.12.10
.L.str.12.10:
	.asciz	"Metal"
	.size	.L.str.12.10, 6

	.type	.L.str.13.11,%object    @ @.str.13.11
.L.str.13.11:
	.asciz	"New Age"
	.size	.L.str.13.11, 8

	.type	.L.str.14.12,%object    @ @.str.14.12
.L.str.14.12:
	.asciz	"Oldies"
	.size	.L.str.14.12, 7

	.type	.L.str.15,%object       @ @.str.15
.L.str.15:
	.asciz	"Other"
	.size	.L.str.15, 6

	.type	.L.str.16,%object       @ @.str.16
.L.str.16:
	.asciz	"Pop"
	.size	.L.str.16, 4

	.type	.L.str.17,%object       @ @.str.17
.L.str.17:
	.asciz	"R&B"
	.size	.L.str.17, 4

	.type	.L.str.18,%object       @ @.str.18
.L.str.18:
	.asciz	"Rap"
	.size	.L.str.18, 4

	.type	.L.str.19,%object       @ @.str.19
.L.str.19:
	.asciz	"Reggae"
	.size	.L.str.19, 7

	.type	.L.str.20,%object       @ @.str.20
.L.str.20:
	.asciz	"Rock"
	.size	.L.str.20, 5

	.type	.L.str.21,%object       @ @.str.21
.L.str.21:
	.asciz	"Techno"
	.size	.L.str.21, 7

	.type	.L.str.22,%object       @ @.str.22
.L.str.22:
	.asciz	"Industrial"
	.size	.L.str.22, 11

	.type	.L.str.23,%object       @ @.str.23
.L.str.23:
	.asciz	"Alternative"
	.size	.L.str.23, 12

	.type	.L.str.24,%object       @ @.str.24
.L.str.24:
	.asciz	"Ska"
	.size	.L.str.24, 4

	.type	.L.str.25,%object       @ @.str.25
.L.str.25:
	.asciz	"Death Metal"
	.size	.L.str.25, 12

	.type	.L.str.26,%object       @ @.str.26
.L.str.26:
	.asciz	"Pranks"
	.size	.L.str.26, 7

	.type	.L.str.27,%object       @ @.str.27
.L.str.27:
	.asciz	"Soundtrack"
	.size	.L.str.27, 11

	.type	.L.str.28,%object       @ @.str.28
.L.str.28:
	.asciz	"Euro-Techno"
	.size	.L.str.28, 12

	.type	.L.str.29,%object       @ @.str.29
.L.str.29:
	.asciz	"Ambient"
	.size	.L.str.29, 8

	.type	.L.str.30,%object       @ @.str.30
.L.str.30:
	.asciz	"Trip-Hop"
	.size	.L.str.30, 9

	.type	.L.str.31,%object       @ @.str.31
.L.str.31:
	.asciz	"Vocal"
	.size	.L.str.31, 6

	.type	.L.str.32,%object       @ @.str.32
.L.str.32:
	.asciz	"Jazz+Funk"
	.size	.L.str.32, 10

	.type	.L.str.33,%object       @ @.str.33
.L.str.33:
	.asciz	"Fusion"
	.size	.L.str.33, 7

	.type	.L.str.34,%object       @ @.str.34
.L.str.34:
	.asciz	"Trance"
	.size	.L.str.34, 7

	.type	.L.str.35,%object       @ @.str.35
.L.str.35:
	.asciz	"Classical"
	.size	.L.str.35, 10

	.type	.L.str.36,%object       @ @.str.36
.L.str.36:
	.asciz	"Instrumental"
	.size	.L.str.36, 13

	.type	.L.str.37,%object       @ @.str.37
.L.str.37:
	.asciz	"Acid"
	.size	.L.str.37, 5

	.type	.L.str.38,%object       @ @.str.38
.L.str.38:
	.asciz	"House"
	.size	.L.str.38, 6

	.type	.L.str.39,%object       @ @.str.39
.L.str.39:
	.asciz	"Game"
	.size	.L.str.39, 5

	.type	.L.str.40,%object       @ @.str.40
.L.str.40:
	.asciz	"Sound Clip"
	.size	.L.str.40, 11

	.type	.L.str.41,%object       @ @.str.41
.L.str.41:
	.asciz	"Gospel"
	.size	.L.str.41, 7

	.type	.L.str.42,%object       @ @.str.42
.L.str.42:
	.asciz	"Noise"
	.size	.L.str.42, 6

	.type	.L.str.43,%object       @ @.str.43
.L.str.43:
	.asciz	"AlternRock"
	.size	.L.str.43, 11

	.type	.L.str.44,%object       @ @.str.44
.L.str.44:
	.asciz	"Bass"
	.size	.L.str.44, 5

	.type	.L.str.45,%object       @ @.str.45
.L.str.45:
	.asciz	"Soul"
	.size	.L.str.45, 5

	.type	.L.str.46,%object       @ @.str.46
.L.str.46:
	.asciz	"Punk"
	.size	.L.str.46, 5

	.type	.L.str.47,%object       @ @.str.47
.L.str.47:
	.asciz	"Space"
	.size	.L.str.47, 6

	.type	.L.str.48,%object       @ @.str.48
.L.str.48:
	.asciz	"Meditative"
	.size	.L.str.48, 11

	.type	.L.str.49,%object       @ @.str.49
.L.str.49:
	.asciz	"Instrumental Pop"
	.size	.L.str.49, 17

	.type	.L.str.50,%object       @ @.str.50
.L.str.50:
	.asciz	"Instrumental Rock"
	.size	.L.str.50, 18

	.type	.L.str.51,%object       @ @.str.51
.L.str.51:
	.asciz	"Ethnic"
	.size	.L.str.51, 7

	.type	.L.str.52,%object       @ @.str.52
.L.str.52:
	.asciz	"Gothic"
	.size	.L.str.52, 7

	.type	.L.str.53,%object       @ @.str.53
.L.str.53:
	.asciz	"Darkwave"
	.size	.L.str.53, 9

	.type	.L.str.54,%object       @ @.str.54
.L.str.54:
	.asciz	"Techno-Industrial"
	.size	.L.str.54, 18

	.type	.L.str.55,%object       @ @.str.55
.L.str.55:
	.asciz	"Electronic"
	.size	.L.str.55, 11

	.type	.L.str.56,%object       @ @.str.56
.L.str.56:
	.asciz	"Pop-Folk"
	.size	.L.str.56, 9

	.type	.L.str.57,%object       @ @.str.57
.L.str.57:
	.asciz	"Eurodance"
	.size	.L.str.57, 10

	.type	.L.str.58,%object       @ @.str.58
.L.str.58:
	.asciz	"Dream"
	.size	.L.str.58, 6

	.type	.L.str.59,%object       @ @.str.59
.L.str.59:
	.asciz	"Southern Rock"
	.size	.L.str.59, 14

	.type	.L.str.60,%object       @ @.str.60
.L.str.60:
	.asciz	"Comedy"
	.size	.L.str.60, 7

	.type	.L.str.61,%object       @ @.str.61
.L.str.61:
	.asciz	"Cult"
	.size	.L.str.61, 5

	.type	.L.str.62,%object       @ @.str.62
.L.str.62:
	.asciz	"Gangsta"
	.size	.L.str.62, 8

	.type	.L.str.63,%object       @ @.str.63
.L.str.63:
	.asciz	"Top 40"
	.size	.L.str.63, 7

	.type	.L.str.64,%object       @ @.str.64
.L.str.64:
	.asciz	"Christian Rap"
	.size	.L.str.64, 14

	.type	.L.str.65,%object       @ @.str.65
.L.str.65:
	.asciz	"Pop/Funk"
	.size	.L.str.65, 9

	.type	.L.str.66,%object       @ @.str.66
.L.str.66:
	.asciz	"Jungle"
	.size	.L.str.66, 7

	.type	.L.str.67,%object       @ @.str.67
.L.str.67:
	.asciz	"Native American"
	.size	.L.str.67, 16

	.type	.L.str.68,%object       @ @.str.68
.L.str.68:
	.asciz	"Cabaret"
	.size	.L.str.68, 8

	.type	.L.str.69,%object       @ @.str.69
.L.str.69:
	.asciz	"New Wave"
	.size	.L.str.69, 9

	.type	.L.str.70,%object       @ @.str.70
.L.str.70:
	.asciz	"Psychadelic"
	.size	.L.str.70, 12

	.type	.L.str.71,%object       @ @.str.71
.L.str.71:
	.asciz	"Rave"
	.size	.L.str.71, 5

	.type	.L.str.72,%object       @ @.str.72
.L.str.72:
	.asciz	"Showtunes"
	.size	.L.str.72, 10

	.type	.L.str.73,%object       @ @.str.73
.L.str.73:
	.asciz	"Trailer"
	.size	.L.str.73, 8

	.type	.L.str.74,%object       @ @.str.74
.L.str.74:
	.asciz	"Lo-Fi"
	.size	.L.str.74, 6

	.type	.L.str.75,%object       @ @.str.75
.L.str.75:
	.asciz	"Tribal"
	.size	.L.str.75, 7

	.type	.L.str.76,%object       @ @.str.76
.L.str.76:
	.asciz	"Acid Punk"
	.size	.L.str.76, 10

	.type	.L.str.77,%object       @ @.str.77
.L.str.77:
	.asciz	"Acid Jazz"
	.size	.L.str.77, 10

	.type	.L.str.78,%object       @ @.str.78
.L.str.78:
	.asciz	"Polka"
	.size	.L.str.78, 6

	.type	.L.str.79,%object       @ @.str.79
.L.str.79:
	.asciz	"Retro"
	.size	.L.str.79, 6

	.type	.L.str.80,%object       @ @.str.80
.L.str.80:
	.asciz	"Musical"
	.size	.L.str.80, 8

	.type	.L.str.81,%object       @ @.str.81
.L.str.81:
	.asciz	"Rock & Roll"
	.size	.L.str.81, 12

	.type	.L.str.82,%object       @ @.str.82
.L.str.82:
	.asciz	"Hard Rock"
	.size	.L.str.82, 10

	.type	.L.str.83,%object       @ @.str.83
.L.str.83:
	.asciz	"Folk"
	.size	.L.str.83, 5

	.type	.L.str.84,%object       @ @.str.84
.L.str.84:
	.asciz	"Folk/Rock"
	.size	.L.str.84, 10

	.type	.L.str.85,%object       @ @.str.85
.L.str.85:
	.asciz	"National Folk"
	.size	.L.str.85, 14

	.type	.L.str.86,%object       @ @.str.86
.L.str.86:
	.asciz	"Swing"
	.size	.L.str.86, 6

	.type	.L.str.87,%object       @ @.str.87
.L.str.87:
	.asciz	"Fast-Fusion"
	.size	.L.str.87, 12

	.type	.L.str.88,%object       @ @.str.88
.L.str.88:
	.asciz	"Bebob"
	.size	.L.str.88, 6

	.type	.L.str.89,%object       @ @.str.89
.L.str.89:
	.asciz	"Latin"
	.size	.L.str.89, 6

	.type	.L.str.90,%object       @ @.str.90
.L.str.90:
	.asciz	"Revival"
	.size	.L.str.90, 8

	.type	.L.str.91,%object       @ @.str.91
.L.str.91:
	.asciz	"Celtic"
	.size	.L.str.91, 7

	.type	.L.str.92,%object       @ @.str.92
.L.str.92:
	.asciz	"Bluegrass"
	.size	.L.str.92, 10

	.type	.L.str.93,%object       @ @.str.93
.L.str.93:
	.asciz	"Avantgarde"
	.size	.L.str.93, 11

	.type	.L.str.94,%object       @ @.str.94
.L.str.94:
	.asciz	"Gothic Rock"
	.size	.L.str.94, 12

	.type	.L.str.95,%object       @ @.str.95
.L.str.95:
	.asciz	"Progressive Rock"
	.size	.L.str.95, 17

	.type	.L.str.96,%object       @ @.str.96
.L.str.96:
	.asciz	"Psychedelic Rock"
	.size	.L.str.96, 17

	.type	.L.str.97,%object       @ @.str.97
.L.str.97:
	.asciz	"Symphonic Rock"
	.size	.L.str.97, 15

	.type	.L.str.98,%object       @ @.str.98
.L.str.98:
	.asciz	"Slow Rock"
	.size	.L.str.98, 10

	.type	.L.str.99,%object       @ @.str.99
.L.str.99:
	.asciz	"Big Band"
	.size	.L.str.99, 9

	.type	.L.str.100,%object      @ @.str.100
.L.str.100:
	.asciz	"Chorus"
	.size	.L.str.100, 7

	.type	.L.str.101,%object      @ @.str.101
.L.str.101:
	.asciz	"Easy Listening"
	.size	.L.str.101, 15

	.type	.L.str.102,%object      @ @.str.102
.L.str.102:
	.asciz	"Acoustic"
	.size	.L.str.102, 9

	.type	.L.str.103,%object      @ @.str.103
.L.str.103:
	.asciz	"Humour"
	.size	.L.str.103, 7

	.type	.L.str.104,%object      @ @.str.104
.L.str.104:
	.asciz	"Speech"
	.size	.L.str.104, 7

	.type	.L.str.105,%object      @ @.str.105
.L.str.105:
	.asciz	"Chanson"
	.size	.L.str.105, 8

	.type	.L.str.106,%object      @ @.str.106
.L.str.106:
	.asciz	"Opera"
	.size	.L.str.106, 6

	.type	.L.str.107,%object      @ @.str.107
.L.str.107:
	.asciz	"Chamber Music"
	.size	.L.str.107, 14

	.type	.L.str.108,%object      @ @.str.108
.L.str.108:
	.asciz	"Sonata"
	.size	.L.str.108, 7

	.type	.L.str.109,%object      @ @.str.109
.L.str.109:
	.asciz	"Symphony"
	.size	.L.str.109, 9

	.type	.L.str.110,%object      @ @.str.110
.L.str.110:
	.asciz	"Booty Bass"
	.size	.L.str.110, 11

	.type	.L.str.111,%object      @ @.str.111
.L.str.111:
	.asciz	"Primus"
	.size	.L.str.111, 7

	.type	.L.str.112,%object      @ @.str.112
.L.str.112:
	.asciz	"Porn Groove"
	.size	.L.str.112, 12

	.type	.L.str.113,%object      @ @.str.113
.L.str.113:
	.asciz	"Satire"
	.size	.L.str.113, 7

	.type	.L.str.114,%object      @ @.str.114
.L.str.114:
	.asciz	"Slow Jam"
	.size	.L.str.114, 9

	.type	.L.str.115,%object      @ @.str.115
.L.str.115:
	.asciz	"Club"
	.size	.L.str.115, 5

	.type	.L.str.116,%object      @ @.str.116
.L.str.116:
	.asciz	"Tango"
	.size	.L.str.116, 6

	.type	.L.str.117,%object      @ @.str.117
.L.str.117:
	.asciz	"Samba"
	.size	.L.str.117, 6

	.type	.L.str.118,%object      @ @.str.118
.L.str.118:
	.asciz	"Folklore"
	.size	.L.str.118, 9

	.type	.L.str.119,%object      @ @.str.119
.L.str.119:
	.asciz	"Ballad"
	.size	.L.str.119, 7

	.type	.L.str.120,%object      @ @.str.120
.L.str.120:
	.asciz	"Power Ballad"
	.size	.L.str.120, 13

	.type	.L.str.121,%object      @ @.str.121
.L.str.121:
	.asciz	"Rhythmic Soul"
	.size	.L.str.121, 14

	.type	.L.str.122,%object      @ @.str.122
.L.str.122:
	.asciz	"Freestyle"
	.size	.L.str.122, 10

	.type	.L.str.123,%object      @ @.str.123
.L.str.123:
	.asciz	"Duet"
	.size	.L.str.123, 5

	.type	.L.str.124,%object      @ @.str.124
.L.str.124:
	.asciz	"Punk Rock"
	.size	.L.str.124, 10

	.type	.L.str.125,%object      @ @.str.125
.L.str.125:
	.asciz	"Drum Solo"
	.size	.L.str.125, 10

	.type	.L.str.126,%object      @ @.str.126
.L.str.126:
	.asciz	"A capella"
	.size	.L.str.126, 10

	.type	.L.str.127,%object      @ @.str.127
.L.str.127:
	.asciz	"Euro-House"
	.size	.L.str.127, 11

	.type	.L.str.128,%object      @ @.str.128
.L.str.128:
	.asciz	"Dance Hall"
	.size	.L.str.128, 11

	.type	.L.str.129,%object      @ @.str.129
.L.str.129:
	.asciz	"Goa"
	.size	.L.str.129, 4

	.type	.L.str.130,%object      @ @.str.130
.L.str.130:
	.asciz	"Drum & Bass"
	.size	.L.str.130, 12

	.type	.L.str.131,%object      @ @.str.131
.L.str.131:
	.asciz	"Club House"
	.size	.L.str.131, 11

	.type	.L.str.132,%object      @ @.str.132
.L.str.132:
	.asciz	"Hardcore"
	.size	.L.str.132, 9

	.type	.L.str.133,%object      @ @.str.133
.L.str.133:
	.asciz	"Terror"
	.size	.L.str.133, 7

	.type	.L.str.134,%object      @ @.str.134
.L.str.134:
	.asciz	"Indie"
	.size	.L.str.134, 6

	.type	.L.str.135,%object      @ @.str.135
.L.str.135:
	.asciz	"BritPop"
	.size	.L.str.135, 8

	.type	.L.str.136,%object      @ @.str.136
.L.str.136:
	.asciz	"NegerPunk"
	.size	.L.str.136, 10

	.type	.L.str.137,%object      @ @.str.137
.L.str.137:
	.asciz	"Polsk Punk"
	.size	.L.str.137, 11

	.type	.L.str.138,%object      @ @.str.138
.L.str.138:
	.asciz	"Beat"
	.size	.L.str.138, 5

	.type	.L.str.139,%object      @ @.str.139
.L.str.139:
	.asciz	"Christian Gangsta"
	.size	.L.str.139, 18

	.type	.L.str.140,%object      @ @.str.140
.L.str.140:
	.asciz	"Heavy Metal"
	.size	.L.str.140, 12

	.type	.L.str.141,%object      @ @.str.141
.L.str.141:
	.asciz	"Black Metal"
	.size	.L.str.141, 12

	.type	.L.str.142,%object      @ @.str.142
.L.str.142:
	.asciz	"Crossover"
	.size	.L.str.142, 10

	.type	.L.str.143,%object      @ @.str.143
.L.str.143:
	.asciz	"Contemporary C"
	.size	.L.str.143, 15

	.type	.L.str.144,%object      @ @.str.144
.L.str.144:
	.asciz	"Christian Rock"
	.size	.L.str.144, 15

	.type	.L.str.145,%object      @ @.str.145
.L.str.145:
	.asciz	"Merengue"
	.size	.L.str.145, 9

	.type	.L.str.146,%object      @ @.str.146
.L.str.146:
	.asciz	"Salsa"
	.size	.L.str.146, 6

	.type	.L.str.147,%object      @ @.str.147
.L.str.147:
	.asciz	"Thrash Metal"
	.size	.L.str.147, 13

	.type	.L.str.148,%object      @ @.str.148
.L.str.148:
	.asciz	"Anime"
	.size	.L.str.148, 6

	.type	.L.str.149,%object      @ @.str.149
.L.str.149:
	.asciz	"JPop"
	.size	.L.str.149, 5

	.type	.L.str.150,%object      @ @.str.150
.L.str.150:
	.asciz	"SynthPop"
	.size	.L.str.150, 9

	.type	id3tag,%object          @ @id3tag
	.comm	id3tag,268,4
	.type	.L.str.151,%object      @ @.str.151
.L.str.151:
	.zero	1
	.size	.L.str.151, 1

	.type	.L.str.1.152,%object    @ @.str.1.152
.L.str.1.152:
	.asciz	"TAG"
	.size	.L.str.1.152, 4

	.type	.L.str.2.153,%object    @ @.str.2.153
.L.str.2.153:
	.asciz	"rb+"
	.size	.L.str.2.153, 4

	.type	frameData,%object       @ @frameData
	.bss
	.globl	frameData
	.p2align	2
frameData:
	.long	0
	.size	frameData, 4

	.type	frameResults,%object    @ @frameResults
	.globl	frameResults
	.p2align	2
frameResults:
	.long	0
	.size	frameResults, 4

	.type	PartHoldersInitialized,%object @ @PartHoldersInitialized
	.globl	PartHoldersInitialized
	.p2align	2
PartHoldersInitialized:
	.long	0                       @ 0x0
	.size	PartHoldersInitialized, 4

	.type	headerPH,%object        @ @headerPH
	.comm	headerPH,4,4
	.type	frameSIPH,%object       @ @frameSIPH
	.comm	frameSIPH,4,4
	.type	channelSIPH,%object     @ @channelSIPH
	.comm	channelSIPH,8,4
	.type	spectrumSIPH,%object    @ @spectrumSIPH
	.comm	spectrumSIPH,16,4
	.type	scaleFactorsPH,%object  @ @scaleFactorsPH
	.comm	scaleFactorsPH,16,4
	.type	codedDataPH,%object     @ @codedDataPH
	.comm	codedDataPH,16,4
	.type	userSpectrumPH,%object  @ @userSpectrumPH
	.comm	userSpectrumPH,16,4
	.type	userFrameDataPH,%object @ @userFrameDataPH
	.comm	userFrameDataPH,4,4
	.type	bs,%object              @ @bs
	.local	bs
	.comm	bs,4,4
	.type	.L.str.156,%object      @ @.str.156
	.section	.rodata.str1.1,"aMS",%progbits,1
.L.str.156:
	.asciz	"frameData"
	.size	.L.str.156, 10

	.type	.L.str.1.157,%object    @ @.str.1.157
.L.str.1.157:
	.asciz	"l3bitstream.c"
	.size	.L.str.1.157, 14

	.type	.L__func__.III_format_bitstream,%object @ @__func__.III_format_bitstream
.L__func__.III_format_bitstream:
	.asciz	"III_format_bitstream"
	.size	.L__func__.III_format_bitstream, 21

	.type	.L.str.2.158,%object    @ @.str.2.158
.L.str.2.158:
	.asciz	"frameResults"
	.size	.L.str.2.158, 13

	.type	slen1_tab,%object       @ @slen1_tab
	.data
	.p2align	2
slen1_tab:
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	3                       @ 0x3
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	2                       @ 0x2
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	3                       @ 0x3
	.long	3                       @ 0x3
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.size	slen1_tab, 64

	.type	slen2_tab,%object       @ @slen2_tab
	.p2align	2
slen2_tab:
	.long	0                       @ 0x0
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	0                       @ 0x0
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.size	slen2_tab, 64

	.type	.L.str.7.159,%object    @ @.str.7.159
	.section	.rodata.str1.1,"aMS",%progbits,1
.L.str.7.159:
	.asciz	"gi->sfb_partition_table"
	.size	.L.str.7.159, 24

	.type	.L__func__.encodeMainData,%object @ @__func__.encodeMainData
.L__func__.encodeMainData:
	.asciz	"encodeMainData"
	.size	.L__func__.encodeMainData, 15

	.type	.L.str.8.160,%object    @ @.str.8.160
.L.str.8.160:
	.asciz	"tableindex < 32"
	.size	.L.str.8.160, 16

	.type	.L__func__.Huffmancodebits,%object @ @__func__.Huffmancodebits
.L__func__.Huffmancodebits:
	.asciz	"Huffmancodebits"
	.size	.L__func__.Huffmancodebits, 16

	.type	.L.str.9.161,%object    @ @.str.9.161
.L.str.9.161:
	.asciz	"scalefac_index < 23"
	.size	.L.str.9.161, 20

	.type	.L.str.10.162,%object   @ @.str.10.162
.L.str.10.162:
	.asciz	"(gi->count1table_select < 2)"
	.size	.L.str.10.162, 29

	.type	.L.str.11.163,%object   @ @.str.11.163
.L.str.11.163:
	.asciz	"count1End <= 576"
	.size	.L.str.11.163, 17

	.type	.L.str.12.164,%object   @ @.str.12.164
.L.str.12.164:
	.asciz	"opps - adding stuffing bits = %i.\n"
	.size	.L.str.12.164, 35

	.type	.L.str.13.165,%object   @ @.str.13.165
.L.str.13.165:
	.asciz	"this should not happen...\n"
	.size	.L.str.13.165, 27

	.type	.L.str.14.166,%object   @ @.str.14.166
.L.str.14.166:
	.asciz	"bitsWritten == (int)(gi->part2_3_length - gi->part2_length)"
	.size	.L.str.14.166, 60

	.type	.L.str.3.167,%object    @ @.str.3.167
.L.str.3.167:
	.asciz	"linbitsx <= h->linmax"
	.size	.L.str.3.167, 22

	.type	.L__func__.HuffmanCode,%object @ @__func__.HuffmanCode
.L__func__.HuffmanCode:
	.asciz	"HuffmanCode"
	.size	.L__func__.HuffmanCode, 12

	.type	.L.str.4.168,%object    @ @.str.4.168
.L.str.4.168:
	.asciz	"linbitsy <= h->linmax"
	.size	.L.str.4.168, 22

	.type	.L.str.5.169,%object    @ @.str.5.169
.L.str.5.169:
	.asciz	"*cbits <= 32"
	.size	.L.str.5.169, 13

	.type	.L.str.6.170,%object    @ @.str.6.170
.L.str.6.170:
	.asciz	"*xbits <= 32"
	.size	.L.str.6.170, 13

	.type	crc,%object             @ @crc
	.local	crc
	.comm	crc,4,4
	.type	.L.str.15.171,%object   @ @.str.15.171
.L.str.15.171:
	.asciz	"gi->block_type == NORM_TYPE"
	.size	.L.str.15.171, 28

	.type	.L__func__.encodeSideInfo,%object @ @__func__.encodeSideInfo
.L__func__.encodeSideInfo:
	.asciz	"encodeSideInfo"
	.size	.L__func__.encodeSideInfo, 15

	.type	bs.172,%object          @ @bs.172
	.local	bs.172
	.comm	bs.172,32,4
	.type	l3_side,%object         @ @l3_side
	.local	l3_side
	.comm	l3_side,492,4
	.type	.L.str.173,%object      @ @.str.173
.L.str.173:
	.asciz	"Warning: highpass filter disabled.  highpass frequency to small\n"
	.size	.L.str.173, 65

	.type	.L.str.5.174,%object    @ @.str.5.174
.L.str.5.174:
	.asciz	"Autoconverting from stereo to mono. Setting encoding to mono mode.\n"
	.size	.L.str.5.174, 68

	.type	.L.str.6.175,%object    @ @.str.6.175
.L.str.6.175:
	.asciz	"Resampling:  input=%ikHz  output=%ikHz\n"
	.size	.L.str.6.175, 40

	.type	.L.str.7.176,%object    @ @.str.7.176
.L.str.7.176:
	.asciz	"Using polyphase highpass filter, transition band: %.0f Hz -  %.0f Hz\n"
	.size	.L.str.7.176, 70

	.type	.L.str.8.177,%object    @ @.str.8.177
.L.str.8.177:
	.asciz	"Using polyphase lowpass filter,  transition band:  %.0f Hz - %.0f Hz\n"
	.size	.L.str.8.177, 70

	.type	.L.str.9.178,%object    @ @.str.9.178
.L.str.9.178:
	.asciz	"Analyzing %s \n"
	.size	.L.str.9.178, 15

	.type	.L.str.11.179,%object   @ @.str.11.179
.L.str.11.179:
	.asciz	"-"
	.size	.L.str.11.179, 2

	.type	.L.str.12.180,%object   @ @.str.12.180
.L.str.12.180:
	.asciz	"stdin"
	.size	.L.str.12.180, 6

	.type	.L.str.13.181,%object   @ @.str.13.181
.L.str.13.181:
	.asciz	"stdout"
	.size	.L.str.13.181, 7

	.type	.L.str.10.182,%object   @ @.str.10.182
.L.str.10.182:
	.asciz	"Encoding %s to %s\n"
	.size	.L.str.10.182, 19

	.type	lame_print_config.mode_names,%object @ @lame_print_config.mode_names
	.data
	.p2align	2
lame_print_config.mode_names:
	.long	.L.str.1.185
	.long	.L.str.2.186
	.long	.L.str.3.187
	.long	.L.str.4.188
	.size	lame_print_config.mode_names, 16

	.type	.L.str.14.183,%object   @ @.str.14.183
	.section	.rodata.str1.1,"aMS",%progbits,1
.L.str.14.183:
	.asciz	"Encoding as %.1fkHz VBR(q=%i) %s MPEG%i LayerIII  qval=%i\n"
	.size	.L.str.14.183, 59

	.type	.L.str.15.184,%object   @ @.str.15.184
.L.str.15.184:
	.asciz	"Encoding as %.1f kHz %d kbps %s MPEG%i LayerIII (%4.1fx)  qval=%i\n"
	.size	.L.str.15.184, 67

	.type	.L.str.1.185,%object    @ @.str.1.185
.L.str.1.185:
	.asciz	"stereo"
	.size	.L.str.1.185, 7

	.type	.L.str.2.186,%object    @ @.str.2.186
.L.str.2.186:
	.asciz	"j-stereo"
	.size	.L.str.2.186, 9

	.type	.L.str.3.187,%object    @ @.str.3.187
.L.str.3.187:
	.asciz	"dual-ch"
	.size	.L.str.3.187, 8

	.type	.L.str.4.188,%object    @ @.str.4.188
.L.str.4.188:
	.asciz	"single-ch"
	.size	.L.str.4.188, 10

	.type	lame_encode_frame.sentBits,%object @ @lame_encode_frame.sentBits
	.local	lame_encode_frame.sentBits
	.comm	lame_encode_frame.sentBits,4,4
	.type	lame_encode_frame.bitsPerSlot,%object @ @lame_encode_frame.bitsPerSlot
	.local	lame_encode_frame.bitsPerSlot
	.comm	lame_encode_frame.bitsPerSlot,4,4
	.type	lame_encode_frame.frac_SpF,%object @ @lame_encode_frame.frac_SpF
	.local	lame_encode_frame.frac_SpF
	.comm	lame_encode_frame.frac_SpF,8,8
	.type	lame_encode_frame.slot_lag,%object @ @lame_encode_frame.slot_lag
	.local	lame_encode_frame.slot_lag
	.comm	lame_encode_frame.slot_lag,8,8
	.type	.L.str.16.189,%object   @ @.str.16.189
.L.str.16.189:
	.asciz	"mf_size>=(BLKSIZE+gfp->framesize-FFTOFFSET)"
	.size	.L.str.16.189, 44

	.type	.L.str.17.190,%object   @ @.str.17.190
.L.str.17.190:
	.asciz	"lame.c"
	.size	.L.str.17.190, 7

	.type	.L__func__.lame_encode_frame,%object @ @__func__.lame_encode_frame
.L__func__.lame_encode_frame:
	.asciz	"lame_encode_frame"
	.size	.L__func__.lame_encode_frame, 18

	.type	lame_encode_frame.ms_ratio,%object @ @lame_encode_frame.ms_ratio
	.local	lame_encode_frame.ms_ratio
	.comm	lame_encode_frame.ms_ratio,16,8
	.type	lame_encode_frame.ms_ener_ratio,%object @ @lame_encode_frame.ms_ener_ratio
	.local	lame_encode_frame.ms_ener_ratio
	.comm	lame_encode_frame.ms_ener_ratio,16,8
	.type	lame_encode_frame.frameBits,%object @ @lame_encode_frame.frameBits
	.local	lame_encode_frame.frameBits
	.comm	lame_encode_frame.frameBits,4,4
	.type	.L.str.18.191,%object   @ @.str.18.191
.L.str.18.191:
	.asciz	"Sent %ld bits = %ld slots plus %ld\n"
	.size	.L.str.18.191, 36

	.type	fill_buffer_resample.init,%object @ @fill_buffer_resample.init
	.local	fill_buffer_resample.init
	.comm	fill_buffer_resample.init,8,4
	.type	fill_buffer_resample.itime,%object @ @fill_buffer_resample.itime
	.local	fill_buffer_resample.itime
	.comm	fill_buffer_resample.itime,16,8
	.type	fill_buffer_resample.inbuf_old,%object @ @fill_buffer_resample.inbuf_old
	.local	fill_buffer_resample.inbuf_old
	.comm	fill_buffer_resample.inbuf_old,20,2
	.type	.L.str.19.192,%object   @ @.str.19.192
.L.str.19.192:
	.asciz	"MFSIZE>=mf_needed"
	.size	.L.str.19.192, 18

	.type	.L__func__.lame_encode_buffer,%object @ @__func__.lame_encode_buffer
.L__func__.lame_encode_buffer:
	.asciz	"lame_encode_buffer"
	.size	.L__func__.lame_encode_buffer, 19

	.type	lame_encode_buffer.frame_buffered,%object @ @lame_encode_buffer.frame_buffered
	.local	lame_encode_buffer.frame_buffered
	.comm	lame_encode_buffer.frame_buffered,4,4
	.type	mfbuf,%object           @ @mfbuf
	.local	mfbuf
	.comm	mfbuf,12224,2
	.type	mf_samples_to_encode,%object @ @mf_samples_to_encode
	.local	mf_samples_to_encode
	.comm	mf_samples_to_encode,4,4
	.type	mf_size,%object         @ @mf_size
	.local	mf_size
	.comm	mf_size,4,4
	.type	.L.str.20.193,%object   @ @.str.20.193
.L.str.20.193:
	.asciz	"mf_size<=MFSIZE"
	.size	.L.str.20.193, 16

	.type	.L.str.21.194,%object   @ @.str.21.194
.L.str.21.194:
	.asciz	"nsamples==0"
	.size	.L.str.21.194, 12

	.type	.L__func__.lame_encode_buffer_interleaved,%object @ @__func__.lame_encode_buffer_interleaved
.L__func__.lame_encode_buffer_interleaved:
	.asciz	"lame_encode_buffer_interleaved"
	.size	.L__func__.lame_encode_buffer_interleaved, 31

	.type	lame_encode_buffer_interleaved.frame_buffered,%object @ @lame_encode_buffer_interleaved.frame_buffered
	.local	lame_encode_buffer_interleaved.frame_buffered
	.comm	lame_encode_buffer_interleaved.frame_buffered,4,4
	.type	.L.str.22.195,%object   @ @.str.22.195
.L.str.22.195:
	.asciz	"\n"
	.size	.L.str.22.195, 2

	.type	.L.str.196,%object      @ @.str.196
.L.str.196:
	.asciz	"-"
	.size	.L.str.196, 2

	.type	.L.str.1.197,%object    @ @.str.1.197
.L.str.1.197:
	.asciz	"wb"
	.size	.L.str.1.197, 3

	.type	.L.str.2.198,%object    @ @.str.2.198
.L.str.2.198:
	.asciz	"Could not create \"%s\".\n"
	.size	.L.str.2.198, 24

	.type	.L.str.3.199,%object    @ @.str.3.199
.L.str.3.199:
	.asciz	"mp3 buffer is not big enough... \n"
	.size	.L.str.3.199, 34

	.type	.L.str.4.200,%object    @ @.str.4.200
.L.str.4.200:
	.asciz	"Error writing mp3 output"
	.size	.L.str.4.200, 25

	.type	mdct_sub48.init,%object @ @mdct_sub48.init
	.local	mdct_sub48.init
	.comm	mdct_sub48.init,4,4
	.type	sb_sample,%object       @ @sb_sample
	.local	sb_sample
	.comm	sb_sample,18432,8
	.type	win,%object             @ @win
	.local	win
	.comm	win,1152,8
	.type	ca,%object              @ @ca
	.local	ca
	.comm	ca,64,8
	.type	cs,%object              @ @cs
	.local	cs
	.comm	cs,64,8
	.type	cos_l,%object           @ @cos_l
	.local	cos_l
	.comm	cos_l,1952,8
	.type	all,%object             @ @all
	.section	.rodata,"a",%progbits
	.p2align	2
all:
	.long	0                       @ 0x0
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	5                       @ 0x5
	.long	6                       @ 0x6
	.long	8                       @ 0x8
	.long	9                       @ 0x9
	.long	11                      @ 0xb
	.long	12                      @ 0xc
	.long	14                      @ 0xe
	.long	15                      @ 0xf
	.long	17                      @ 0x11
	.size	all, 48

	.type	cos_s,%object           @ @cos_s
	.local	cos_s
	.comm	cos_s,288,8
	.type	enwindow,%object        @ @enwindow
	.data
	.p2align	3
enwindow:
	.long	46513740                @ double 0.035780907000000001
	.long	1067602400
	.long	4230439158              @ double 0.017876148000000001
	.long	1066552863
	.long	3192711287              @ double 0.0031347269999999999
	.long	1063890431
	.long	285415626               @ double 0.0024571419999999998
	.long	1063526656
	.long	1608570118              @ double 9.7131699999999997E-4
	.long	1062196223
	.long	3454364268              @ double 2.1886799999999999E-4
	.long	1059893245
	.long	2549244097              @ double 1.01566E-4
	.long	1058709498
	.long	3644755702              @ double 1.3828E-5
	.long	1055719385
	.long	4270760448              @ double 0.035758972
	.long	1067601663
	.long	3634064051              @ double 0.0034017560000000001
	.long	1064033791
	.long	4030380818              @ double 9.8371500000000002E-4
	.long	1062215167
	.long	3373299475              @ double 9.9182E-5
	.long	1058668541
	.long	398995178               @ double -4.7700000000000005E-7
	.long	3198157158
	.long	2497720982              @ double 1.0395099999999999E-4
	.long	1058750472
	.long	1376634737              @ double 9.5367399999999994E-4
	.long	1062158335
	.long	863002279               @ double 0.0028414730000000002
	.long	1063732992
	.long	623396705               @ double 1.2398000000000001E-5
	.long	1055522848
	.long	2461898894              @ double 1.9121200000000001E-4
	.long	1059655682
	.long	3572139556              @ double 0.0022830960000000001
	.long	1063433215
	.long	4203206454              @ double 0.016994476000000001
	.long	1066493695
	.long	4163799957              @ double 0.018756866000000001
	.long	1066611967
	.long	918171374               @ double 0.002630711
	.long	1063619840
	.long	3936249428              @ double 2.4747799999999998E-4
	.long	1060124669
	.long	2620888275              @ double 1.4782E-5
	.long	1055850502
	.long	4249649825              @ double 0.035694122000000002
	.long	1067599487
	.long	256705179               @ double 0.0036430360000000001
	.long	1064163328
	.long	2961901806              @ double 9.9182099999999994E-4
	.long	1062223871
	.long	771685639               @ double 9.6321000000000002E-5
	.long	1058619390
	.long	398995178               @ double -4.7700000000000005E-7
	.long	3198157158
	.long	2542963687              @ double 1.05858E-4
	.long	1058783234
	.long	3069988197              @ double 9.3078599999999996E-4
	.long	1062109183
	.long	247697980               @ double 0.0025215150000000002
	.long	1063561216
	.long	1647264131              @ double 1.1443999999999999E-5
	.long	1055391731
	.long	3253272388              @ double 1.6546200000000001E-4
	.long	1059434491
	.long	3314871427              @ double 0.002110004
	.long	1063340287
	.long	4175973750              @ double 0.016112804000000001
	.long	1066434527
	.long	50102546                @ double 0.019634247000000001
	.long	1066670848
	.long	799951884               @ double 0.0028033260000000001
	.long	1063712512
	.long	1415700386              @ double 2.7704200000000002E-4
	.long	1060251646
	.long	1491414955              @ double 1.6688999999999999E-5
	.long	1056014315
	.long	4278149166              @ double 0.035586356999999999
	.long	1067595871
	.long	3639693550              @ double 0.0038585659999999999
	.long	1064279039
	.long	3607042453              @ double 9.9515900000000002E-4
	.long	1062227455
	.long	2465039099              @ double 9.3460000000000003E-5
	.long	1058570238
	.long	398995178               @ double -4.7700000000000005E-7
	.long	3198157158
	.long	3457504473              @ double 1.0728799999999999E-4
	.long	1058807801
	.long	2393663202              @ double 9.0265300000000001E-4
	.long	1062048768
	.long	3652641399              @ double 0.0021748539999999999
	.long	1063375103
	.long	2920872430              @ double 1.0013999999999999E-5
	.long	1055195193
	.long	3996262972              @ double 1.4019E-4
	.long	1059217406
	.long	2571214539              @ double 0.0019373890000000001
	.long	1063239167
	.long	176907023               @ double 0.015233517
	.long	1066349248
	.long	50243283                @ double 0.020506858999999999
	.long	1066729408
	.long	3474749214              @ double 0.0029740330000000001
	.long	1063804159
	.long	607985950               @ double 3.0756000000000002E-4
	.long	1060382720
	.long	3944739857              @ double 1.8119999999999999E-5
	.long	1056112652
	.long	37823200                @ double 0.0354352
	.long	1067590800
	.long	4124956410              @ double 0.0040493009999999999
	.long	1064343039
	.long	2105091977              @ double 9.9420499999999996E-4
	.long	1062226431
	.long	4158392559              @ double 9.0599000000000005E-5
	.long	1058521086
	.long	398995178               @ double -4.7700000000000005E-7
	.long	3198157158
	.long	1718908309              @ double 1.08242E-4
	.long	1058824191
	.long	1507239127              @ double 8.6879700000000003E-4
	.long	1061976063
	.long	3790564138              @ double 0.0018005370000000001
	.long	1063092223
	.long	3944739857              @ double 9.0599999999999997E-6
	.long	1055064076
	.long	1803113308              @ double 1.16348E-4
	.long	1058963451
	.long	1516587175              @ double 0.0017666820000000001
	.long	1063055872
	.long	283726777               @ double 0.014358521000000001
	.long	1066231808
	.long	4217772784              @ double 0.021372318000000001
	.long	1066787487
	.long	4213339553              @ double 0.0031418800000000001
	.long	1063894271
	.long	246231231               @ double 3.39031E-4
	.long	1060517887
	.long	3307935708              @ double 1.9550000000000001E-5
	.long	1056210921
	.long	44895259                @ double 0.035242081000000001
	.long	1067584320
	.long	3743276342              @ double 0.0042152400000000003
	.long	1064387583
	.long	3818711635              @ double 9.8943699999999991E-4
	.long	1062221311
	.long	2426076805              @ double 8.7261000000000004E-5
	.long	1058463740
	.long	398995178               @ double -4.7700000000000005E-7
	.long	3198157158
	.long	849610227               @ double 1.08719E-4
	.long	1058832386
	.long	1677590861              @ double 8.2921999999999997E-4
	.long	1061891072
	.long	4021373619              @ double 0.0013995170000000001
	.long	1062661631
	.long	673639988               @ double 8.106E-6
	.long	1054932960
	.long	1595741017              @ double 9.3937000000000005E-5
	.long	1058578433
	.long	2832423317              @ double 0.001597881
	.long	1062874623
	.long	4082594426              @ double 0.013489246
	.long	1066115135
	.long	56506102                @ double 0.022228718000000001
	.long	1066844960
	.long	709879891               @ double 0.0033068659999999999
	.long	1063982848
	.long	1597311119              @ double 3.7145599999999999E-4
	.long	1060657151
	.long	2284068281              @ double 2.1458E-5
	.long	1056342038
	.long	4398047                 @ double 0.035007000000000003
	.long	1067576432
	.long	243475855               @ double 0.0043578150000000001
	.long	1064425856
	.long	4136215409              @ double 9.8085399999999997E-4
	.long	1062212095
	.long	693761051               @ double 8.3923000000000003E-5
	.long	1058406394
	.long	398995178               @ double -4.7700000000000005E-7
	.long	3198157158
	.long	849610227               @ double 1.08719E-4
	.long	1058832386
	.long	1637843516              @ double 7.8392000000000002E-4
	.long	1061793791
	.long	1608570118              @ double 9.7131699999999997E-4
	.long	1062196223
	.long	2371147403              @ double 7.6290000000000001E-6
	.long	1054867347
	.long	2302909512              @ double 7.2955999999999997E-5
	.long	1058217982
	.long	815151533               @ double 0.0014324190000000001
	.long	1062696960
	.long	217017207               @ double 0.012627602
	.long	1065999488
	.long	4270338236              @ double 0.023074150000000002
	.long	1066901695
	.long	52354346                @ double 0.0034670830000000001
	.long	1064068864
	.long	1657324663              @ double 4.0435800000000001E-4
	.long	1060798464
	.long	2465039099              @ double 2.3365000000000001E-5
	.long	1056473086
	.long	4234766835              @ double 0.034730433999999998
	.long	1067567151
	.long	4204613828              @ double 0.0044770239999999996
	.long	1064457855
	.long	3322189776              @ double 9.6893299999999995E-4
	.long	1062191103
	.long	3256412593              @ double 8.0585000000000002E-5
	.long	1058349047
	.long	398995178               @ double -9.540000000000001E-7
	.long	3199205734
	.long	1718908309              @ double 1.08242E-4
	.long	1058824191
	.long	3945938325              @ double 7.3194500000000001E-4
	.long	1061682175
	.long	1796936251              @ double 5.1593799999999997E-4
	.long	1061218304
	.long	3894496574              @ double 6.6760000000000001E-6
	.long	1054605388
	.long	2542963687              @ double 5.2929000000000001E-5
	.long	1057734658
	.long	2670293730              @ double 0.0012698169999999999
	.long	1062522367
	.long	124130465               @ double 0.011775017
	.long	1065885056
	.long	115052897               @ double 0.023907185000000001
	.long	1066957600
	.long	251638629               @ double 0.0036225319999999999
	.long	1064152320
	.long	2163297924              @ double 4.3821300000000001E-4
	.long	1060943870
	.long	2646009917              @ double 2.5272000000000001E-5
	.long	1056604134
	.long	18682902                @ double 0.034412861000000003
	.long	1067556496
	.long	4270197498              @ double 0.004573822
	.long	1064483839
	.long	2878585213              @ double 9.5415099999999997E-4
	.long	1062159359
	.long	3165927184              @ double 7.6771000000000001E-5
	.long	1058283523
	.long	398995178               @ double -9.540000000000001E-7
	.long	3199205734
	.long	804367523               @ double 1.0681200000000001E-4
	.long	1058799624
	.long	2382404203              @ double 6.7424800000000001E-4
	.long	1061558272
	.long	3036479481              @ double 3.3379E-5
	.long	1057062925
	.long	623396705               @ double 6.1990000000000003E-6
	.long	1054474272
	.long	2309189923              @ double 3.4332000000000003E-5
	.long	1057095670
	.long	1943303239              @ double 0.001111031
	.long	1062351872
	.long	4179421818              @ double 0.010933399
	.long	1065772095
	.long	4247609131              @ double 0.024725436999999999
	.long	1067012511
	.long	181269885               @ double 0.003771782
	.long	1064232448
	.long	2645079730              @ double 4.7254600000000001E-4
	.long	1061091329
	.long	2439917457              @ double 2.7657E-5
	.long	1056768030
	.long	23221686                @ double 0.034055710000000003
	.long	1067544512
	.long	3957760274              @ double 0.0046491620000000001
	.long	1064504063
	.long	276186326               @ double 9.3555500000000002E-4
	.long	1062119425
	.long	1433611430              @ double 7.3433E-5
	.long	1058226177
	.long	398995178               @ double -9.540000000000001E-7
	.long	3199205734
	.long	3412261769              @ double 1.05381E-4
	.long	1058775039
	.long	4035225266              @ double 6.1035199999999999E-4
	.long	1061421056
	.long	3958767427              @ double -4.7588300000000002E-4
	.long	3208589309
	.long	2671131558              @ double 5.2449999999999998E-6
	.long	1054212038
	.long	2309189923              @ double 1.7166000000000001E-5
	.long	1056047094
	.long	1164965555              @ double 9.56535E-4
	.long	1062164479
	.long	262193941               @ double 0.010103703
	.long	1065660736
	.long	4171821994              @ double 0.025527000000000001
	.long	1067066303
	.long	4027847543              @ double 0.0039143559999999999
	.long	1064306815
	.long	2431943799              @ double 5.0735500000000002E-4
	.long	1061199872
	.long	3438663242              @ double 3.0040999999999999E-5
	.long	1056931857
	.long	351844                  @ double 0.033659935000000002
	.long	1067531232
	.long	125256365               @ double 0.0047030450000000003
	.long	1064518528
	.long	255920127               @ double 9.1505099999999995E-4
	.long	1062075393
	.long	3996262972              @ double 7.0094999999999999E-5
	.long	1058168830
	.long	398995178               @ double -9.540000000000001E-7
	.long	3199205734
	.long	810647933               @ double 1.0252E-4
	.long	1058725888
	.long	1605533267              @ double 5.3930299999999998E-4
	.long	1061268480
	.long	2221059668              @ double -0.0010118480000000001
	.long	3209729023
	.long	3694998985              @ double 4.7679999999999999E-6
	.long	1054080921
	.long	398995178               @ double 9.540000000000001E-7
	.long	1051722086
	.long	4239457352              @ double 8.06808E-4
	.long	1061842942
	.long	4198421379              @ double 0.009287834
	.long	1065551231
	.long	82049956                @ double 0.026310921000000001
	.long	1067118912
	.long	3937212601              @ double 0.0040488240000000003
	.long	1064342911
	.long	1393864085              @ double 5.4216400000000004E-4
	.long	1061274624
	.long	2218704514              @ double 3.2425000000000002E-5
	.long	1057030146
	.long	4245040672              @ double 0.033225536
	.long	1067516655
	.long	4102719887              @ double 0.0047373770000000001
	.long	1064527743
	.long	4108852963              @ double 8.9168500000000002E-4
	.long	1062025214
	.long	3133245300              @ double 6.6279999999999996E-5
	.long	1058103289
	.long	598492766               @ double -1.4309999999999999E-6
	.long	3199730201
	.long	3373299475              @ double 9.9182E-5
	.long	1058668541
	.long	3493326562              @ double 4.6253199999999998E-4
	.long	1061048319
	.long	1742893056              @ double -0.001573563
	.long	3210332160
	.long	4194480729              @ double 4.2919999999999997E-6
	.long	1053950079
	.long	3644755702              @ double -1.3828E-5
	.long	3203203033
	.long	225179981               @ double 6.6184999999999996E-4
	.long	1061531648
	.long	242772167               @ double 0.0084872249999999992
	.long	1065443776
	.long	4246412863              @ double 0.027073860000000002
	.long	1067170111
	.long	3925953602              @ double 0.0041747090000000004
	.long	1064376703
	.long	355784371               @ double 5.7697300000000005E-4
	.long	1061349376
	.long	570593758               @ double 3.4808999999999998E-5
	.long	1057112060
	.long	4284693459              @ double 0.032754897999999998
	.long	1067500863
	.long	4158170457              @ double 0.0047521589999999997
	.long	1064531711
	.long	3220858785              @ double 8.6641300000000001E-4
	.long	1061970943
	.long	2173461809              @ double 6.2942999999999997E-5
	.long	1058045960
	.long	598492766               @ double -1.4309999999999999E-6
	.long	3199730201
	.long	2510281803              @ double 9.5366999999999997E-5
	.long	1058603000
	.long	1172402652              @ double 3.7860900000000002E-4
	.long	1060687873
	.long	373235819               @ double -0.0021615029999999999
	.long	3210851584
	.long	923380860               @ double 3.8149999999999999E-6
	.long	1053818963
	.long	1622142490              @ double -2.7180000000000001E-5
	.long	3204218899
	.long	2875548362              @ double 5.2213699999999999E-4
	.long	1061231616
	.long	3959730599              @ double 0.0077033040000000002
	.long	1065323903
	.long	14566330                @ double 0.027815342
	.long	1067219872
	.long	288793326               @ double 0.0042905809999999999
	.long	1064407808
	.long	3612671952              @ double 6.1178199999999995E-4
	.long	1061424127
	.long	1478854134              @ double 3.7669999999999997E-5
	.long	1057210363
	.long	4270162314              @ double 0.032248020000000002
	.long	1067483855
	.long	3996885296              @ double 0.0047488210000000003
	.long	1064530815
	.long	4046484265              @ double 8.3875699999999997E-4
	.long	1061911552
	.long	882292111               @ double 5.9605000000000003E-5
	.long	1057964044
	.long	2895533085              @ double -1.9069999999999999E-6
	.long	3200253568
	.long	732723345               @ double 9.0122000000000002E-5
	.long	1058512892
	.long	4017314222              @ double 2.8848600000000002E-4
	.long	1060300797
	.long	953637221               @ double -0.002774239
	.long	3211180544
	.long	3894496574              @ double 3.3380000000000001E-6
	.long	1053556812
	.long	1569339543              @ double -3.9576999999999997E-5
	.long	3204759535
	.long	348347274               @ double 3.88145E-4
	.long	1060728830
	.long	25895698                @ double 0.0069370270000000001
	.long	1065118208
	.long	36732484                @ double 0.028532981999999998
	.long	1067268032
	.long	275001052               @ double 0.0043959619999999998
	.long	1064436096
	.long	2574592238              @ double 6.4659099999999996E-4
	.long	1061498879
	.long	2387114511              @ double 4.0531000000000002E-5
	.long	1057308666
	.long	351844                  @ double 0.031706810000000002
	.long	1067465696
	.long	3994352021              @ double 0.0047283170000000001
	.long	1064525311
	.long	4027788169              @ double 8.0966899999999994E-4
	.long	1061849086
	.long	3451224063              @ double 5.5789999999999999E-5
	.long	1057832961
	.long	2895533085              @ double -1.9069999999999999E-6
	.long	3200253568
	.long	4119430265              @ double 8.4400000000000005E-5
	.long	1058414588
	.long	4174733500              @ double 1.9168899999999999E-4
	.long	1059659779
	.long	4226287402              @ double -0.0034112930000000001
	.long	3211522559
	.long	3894496574              @ double 3.3380000000000001E-6
	.long	1053556812
	.long	4191074442              @ double -5.0544999999999998E-5
	.long	3205136392
	.long	3955730575              @ double 2.5987599999999998E-4
	.long	1060177918
	.long	3933553426              @ double 0.0061893460000000001
	.long	1064917503
	.long	118430596               @ double 0.029224872999999998
	.long	1067314464
	.long	367043370               @ double 0.0044898990000000003
	.long	1064461312
	.long	34562049                @ double 6.8092300000000005E-4
	.long	1061572607
	.long	3295374887              @ double 4.3392000000000001E-5
	.long	1057406969
	.long	4277938060              @ double 0.031132698
	.long	1067442495
	.long	43347146                @ double 0.0046911239999999996
	.long	1064515328
	.long	770115536               @ double 7.7915199999999997E-4
	.long	1061783552
	.long	2542963687              @ double 5.2929000000000001E-5
	.long	1057734658
	.long	3694998985              @ double -2.384E-6
	.long	3200515993
	.long	654798757               @ double 7.7724000000000003E-5
	.long	1058299896
	.long	687480640               @ double 8.8214999999999995E-5
	.long	1058480130
	.long	3913287228              @ double -0.0040721890000000004
	.long	3211832831
	.long	1647264131              @ double 2.8609999999999998E-6
	.long	1053294579
	.long	155002552               @ double -6.0557999999999999E-5
	.long	3205480437
	.long	547972406               @ double 1.37329E-4
	.long	1059192831
	.long	406731341               @ double 0.0054621699999999997
	.long	1064722304
	.long	4172525681              @ double 0.02989006
	.long	1067359103
	.long	4108912336              @ double 0.0045704839999999997
	.long	1064482943
	.long	3714002944              @ double 7.1430199999999999E-4
	.long	1061644287
	.long	4203635263              @ double 4.6252999999999999E-5
	.long	1057505272
	.long	4286030465              @ double 0.030526637999999998
	.long	1067401823
	.long	4251338675              @ double 0.0046381950000000003
	.long	1064501119
	.long	1596526068              @ double 7.4720400000000001E-4
	.long	1061714944
	.long	3373299475              @ double 4.9591E-5
	.long	1057619965
	.long	399975942               @ double 0.0047564510000000001
	.long	1064532864
	.long	2284068281              @ double 2.1458E-5
	.long	1056342038
	.long	570593758               @ double -6.9617999999999997E-5
	.long	3205644284
	.long	3694998985              @ double 2.384E-6
	.long	1053032345
	.size	enwindow, 2048

	.type	mm,%object              @ @mm
	.local	mm
	.comm	mm,3968,8
	.type	mdct_init48.c,%object   @ @mdct_init48.c
	.section	.rodata,"a",%progbits
	.p2align	3
mdct_init48.c:
	.long	858993459               @ double -0.59999999999999998
	.long	3219338035
	.long	1374389535              @ double -0.53500000000000003
	.long	3219201720
	.long	1374389535              @ double -0.33000000000000002
	.long	3218415288
	.long	2061584302              @ double -0.185
	.long	3217534484
	.long	2233382994              @ double -0.095000000000000001
	.long	3216527851
	.long	3058016715              @ double -0.041000000000000002
	.long	3215261171
	.long	3167967878              @ double -0.014200000000000001
	.long	3213694179
	.long	1608035756              @ double -0.0037000000000000002
	.long	3211677558
	.size	mdct_init48.c, 64

	.type	mdct_init48.d3,%object  @ @mdct_init48.d3
	.p2align	2
mdct_init48.d3:
	.long	1                       @ 0x1
	.long	7                       @ 0x7
	.long	10                      @ 0xa
	.long	16                      @ 0x10
	.size	mdct_init48.d3, 16

	.type	mdct_init48.d9,%object  @ @mdct_init48.d9
	.p2align	2
mdct_init48.d9:
	.long	4                       @ 0x4
	.long	13                      @ 0xd
	.size	mdct_init48.d9, 8

	.type	L3psycho_anal.blocktype_old,%object @ @L3psycho_anal.blocktype_old
	.local	L3psycho_anal.blocktype_old
	.comm	L3psycho_anal.blocktype_old,8,4
	.type	.L.str.205,%object      @ @.str.205
	.section	.rodata.str1.1,"aMS",%progbits,1
.L.str.205:
	.asciz	"error, invalid sampling frequency: %d Hz\n"
	.size	.L.str.205, 42

	.type	L3psycho_anal.rx_sav,%object @ @L3psycho_anal.rx_sav
	.local	L3psycho_anal.rx_sav
	.comm	L3psycho_anal.rx_sav,16416,4
	.type	L3psycho_anal.ax_sav,%object @ @L3psycho_anal.ax_sav
	.local	L3psycho_anal.ax_sav
	.comm	L3psycho_anal.ax_sav,16416,4
	.type	L3psycho_anal.bx_sav,%object @ @L3psycho_anal.bx_sav
	.local	L3psycho_anal.bx_sav
	.comm	L3psycho_anal.bx_sav,16416,4
	.type	L3psycho_anal.en,%object @ @L3psycho_anal.en
	.local	L3psycho_anal.en
	.comm	L3psycho_anal.en,1952,8
	.type	L3psycho_anal.thm,%object @ @L3psycho_anal.thm
	.local	L3psycho_anal.thm
	.comm	L3psycho_anal.thm,1952,8
	.type	L3psycho_anal.cw_lower_index,%object @ @L3psycho_anal.cw_lower_index
	.local	L3psycho_anal.cw_lower_index
	.comm	L3psycho_anal.cw_lower_index,4,4
	.type	L3psycho_anal.cw_upper_index,%object @ @L3psycho_anal.cw_upper_index
	.local	L3psycho_anal.cw_upper_index
	.comm	L3psycho_anal.cw_upper_index,4,4
	.type	L3psycho_anal.cw,%object @ @L3psycho_anal.cw
	.local	L3psycho_anal.cw
	.comm	L3psycho_anal.cw,2052,4
	.type	L3psycho_anal.mld_s,%object @ @L3psycho_anal.mld_s
	.local	L3psycho_anal.mld_s
	.comm	L3psycho_anal.mld_s,96,8
	.type	L3psycho_anal.mld_l,%object @ @L3psycho_anal.mld_l
	.local	L3psycho_anal.mld_l
	.comm	L3psycho_anal.mld_l,168,8
	.type	L3psycho_anal.partition_l,%object @ @L3psycho_anal.partition_l
	.local	L3psycho_anal.partition_l
	.comm	L3psycho_anal.partition_l,2052,4
	.type	L3psycho_anal.numlines_l,%object @ @L3psycho_anal.numlines_l
	.local	L3psycho_anal.numlines_l
	.comm	L3psycho_anal.numlines_l,252,4
	.type	L3psycho_anal.numlines_s,%object @ @L3psycho_anal.numlines_s
	.local	L3psycho_anal.numlines_s
	.comm	L3psycho_anal.numlines_s,252,4
	.type	L3psycho_anal.minval,%object @ @L3psycho_anal.minval
	.local	L3psycho_anal.minval
	.comm	L3psycho_anal.minval,504,8
	.type	L3psycho_anal.qthr_l,%object @ @L3psycho_anal.qthr_l
	.local	L3psycho_anal.qthr_l
	.comm	L3psycho_anal.qthr_l,504,8
	.type	L3psycho_anal.s3_l,%object @ @L3psycho_anal.s3_l
	.local	L3psycho_anal.s3_l
	.comm	L3psycho_anal.s3_l,32768,8
	.type	L3psycho_anal.s3_s,%object @ @L3psycho_anal.s3_s
	.local	L3psycho_anal.s3_s
	.comm	L3psycho_anal.s3_s,32768,8
	.type	L3psycho_anal.qthr_s,%object @ @L3psycho_anal.qthr_s
	.local	L3psycho_anal.qthr_s
	.comm	L3psycho_anal.qthr_s,504,8
	.type	L3psycho_anal.bu_l,%object @ @L3psycho_anal.bu_l
	.local	L3psycho_anal.bu_l
	.comm	L3psycho_anal.bu_l,84,4
	.type	L3psycho_anal.bo_l,%object @ @L3psycho_anal.bo_l
	.local	L3psycho_anal.bo_l
	.comm	L3psycho_anal.bo_l,84,4
	.type	L3psycho_anal.w1_l,%object @ @L3psycho_anal.w1_l
	.local	L3psycho_anal.w1_l
	.comm	L3psycho_anal.w1_l,168,8
	.type	L3psycho_anal.w2_l,%object @ @L3psycho_anal.w2_l
	.local	L3psycho_anal.w2_l
	.comm	L3psycho_anal.w2_l,168,8
	.type	L3psycho_anal.bu_s,%object @ @L3psycho_anal.bu_s
	.local	L3psycho_anal.bu_s
	.comm	L3psycho_anal.bu_s,48,4
	.type	L3psycho_anal.bo_s,%object @ @L3psycho_anal.bo_s
	.local	L3psycho_anal.bo_s
	.comm	L3psycho_anal.bo_s,48,4
	.type	L3psycho_anal.w1_s,%object @ @L3psycho_anal.w1_s
	.local	L3psycho_anal.w1_s
	.comm	L3psycho_anal.w1_s,96,8
	.type	L3psycho_anal.w2_s,%object @ @L3psycho_anal.w2_s
	.local	L3psycho_anal.w2_s
	.comm	L3psycho_anal.w2_s,96,8
	.type	L3psycho_anal.npart_l_orig,%object @ @L3psycho_anal.npart_l_orig
	.local	L3psycho_anal.npart_l_orig
	.comm	L3psycho_anal.npart_l_orig,4,4
	.type	L3psycho_anal.npart_s_orig,%object @ @L3psycho_anal.npart_s_orig
	.local	L3psycho_anal.npart_s_orig
	.comm	L3psycho_anal.npart_s_orig,4,4
	.type	L3psycho_anal.npart_l,%object @ @L3psycho_anal.npart_l
	.local	L3psycho_anal.npart_l
	.comm	L3psycho_anal.npart_l,4,4
	.type	L3psycho_anal.npart_s,%object @ @L3psycho_anal.npart_s
	.local	L3psycho_anal.npart_s
	.comm	L3psycho_anal.npart_s,4,4
	.type	L3psycho_anal.s3ind,%object @ @L3psycho_anal.s3ind
	.local	L3psycho_anal.s3ind
	.comm	L3psycho_anal.s3ind,504,4
	.type	L3psycho_anal.s3ind_s,%object @ @L3psycho_anal.s3ind_s
	.local	L3psycho_anal.s3ind_s
	.comm	L3psycho_anal.s3ind_s,504,4
	.type	L3psycho_anal.wsamp_S,%object @ @L3psycho_anal.wsamp_S
	.local	L3psycho_anal.wsamp_S
	.comm	L3psycho_anal.wsamp_S,6144,4
	.type	L3psycho_anal.wsamp_L,%object @ @L3psycho_anal.wsamp_L
	.local	L3psycho_anal.wsamp_L
	.comm	L3psycho_anal.wsamp_L,8192,4
	.type	L3psycho_anal.pe,%object @ @L3psycho_anal.pe
	.local	L3psycho_anal.pe
	.comm	L3psycho_anal.pe,32,8
	.type	L3psycho_anal.energy,%object @ @L3psycho_anal.energy
	.local	L3psycho_anal.energy
	.comm	L3psycho_anal.energy,2052,4
	.type	L3psycho_anal.energy_s,%object @ @L3psycho_anal.energy_s
	.local	L3psycho_anal.energy_s
	.comm	L3psycho_anal.energy_s,1548,4
	.type	L3psycho_anal.eb,%object @ @L3psycho_anal.eb
	.local	L3psycho_anal.eb
	.comm	L3psycho_anal.eb,504,8
	.type	L3psycho_anal.cb,%object @ @L3psycho_anal.cb
	.local	L3psycho_anal.cb
	.comm	L3psycho_anal.cb,504,8
	.type	L3psycho_anal.nb_1,%object @ @L3psycho_anal.nb_1
	.local	L3psycho_anal.nb_1
	.comm	L3psycho_anal.nb_1,2016,8
	.type	L3psycho_anal.nb_2,%object @ @L3psycho_anal.nb_2
	.local	L3psycho_anal.nb_2
	.comm	L3psycho_anal.nb_2,2016,8
	.type	L3psycho_anal.thr,%object @ @L3psycho_anal.thr
	.local	L3psycho_anal.thr
	.comm	L3psycho_anal.thr,504,8
	.type	.L.str.1.206,%object    @ @.str.1.206
.L.str.1.206:
	.asciz	"Error in block selecting\n"
	.size	.L.str.1.206, 26

	.type	L3psycho_anal.ms_ratio_s_old,%object @ @L3psycho_anal.ms_ratio_s_old
	.local	L3psycho_anal.ms_ratio_s_old
	.comm	L3psycho_anal.ms_ratio_s_old,8,8
	.type	L3psycho_anal.ms_ratio_l_old,%object @ @L3psycho_anal.ms_ratio_l_old
	.local	L3psycho_anal.ms_ratio_l_old
	.comm	L3psycho_anal.ms_ratio_l_old,8,8
	.type	L3psycho_anal.ms_ener_ratio_old,%object @ @L3psycho_anal.ms_ener_ratio_old
	.data
	.p2align	3
L3psycho_anal.ms_ener_ratio_old:
	.long	0                       @ double 0.25
	.long	1070596096
	.size	L3psycho_anal.ms_ener_ratio_old, 8

	.type	.L.str.2.207,%object    @ @.str.2.207
	.section	.rodata.str1.1,"aMS",%progbits,1
.L.str.2.207:
	.asciz	"1. please check \"psy_data\""
	.size	.L.str.2.207, 27

	.type	.L.str.3.208,%object    @ @.str.3.208
.L.str.3.208:
	.asciz	"3. please check \"psy_data\""
	.size	.L.str.3.208, 27

	.type	.L.str.4.209,%object    @ @.str.4.209
.L.str.4.209:
	.asciz	"30:please check \"psy_data\"\n"
	.size	.L.str.4.209, 28

	.type	.L.str.5.210,%object    @ @.str.5.210
.L.str.5.210:
	.asciz	"31l: please check \"psy_data.\"\n"
	.size	.L.str.5.210, 31

	.type	.L.str.6.211,%object    @ @.str.6.211
.L.str.6.211:
	.asciz	"w1,w2: %f %f \n"
	.size	.L.str.6.211, 15

	.type	.L.str.7.212,%object    @ @.str.7.212
.L.str.7.212:
	.asciz	"31s: please check \"psy_data.\"\n"
	.size	.L.str.7.212, 31

	.type	outer_loop.OldValue,%object @ @outer_loop.OldValue
	.data
	.p2align	2
outer_loop.OldValue:
	.long	180                     @ 0xb4
	.long	180                     @ 0xb4
	.size	outer_loop.OldValue, 8

	.type	.L.str.5.215,%object    @ @.str.5.215
	.section	.rodata.str1.1,"aMS",%progbits,1
.L.str.5.215:
	.asciz	"iteration != 1"
	.size	.L.str.5.215, 15

	.type	.L.str.1.216,%object    @ @.str.1.216
.L.str.1.216:
	.asciz	"quantize.c"
	.size	.L.str.1.216, 11

	.type	.L__func__.outer_loop,%object @ @__func__.outer_loop
.L__func__.outer_loop:
	.asciz	"outer_loop"
	.size	.L__func__.outer_loop, 11

	.type	.L.str.6.217,%object    @ @.str.6.217
.L.str.6.217:
	.asciz	"cod_info->global_gain < 256"
	.size	.L.str.6.217, 28

	.type	.L.str.7.218,%object    @ @.str.7.218
.L.str.7.218:
	.asciz	"s<Q_MAX"
	.size	.L.str.7.218, 8

	.type	.L__func__.calc_noise1,%object @ @__func__.calc_noise1
.L__func__.calc_noise1:
	.asciz	"calc_noise1"
	.size	.L__func__.calc_noise1, 12

	.type	.L.str.8.219,%object    @ @.str.8.219
.L.str.8.219:
	.asciz	"s>=0"
	.size	.L.str.8.219, 5

	.type	.L.str.222,%object      @ @.str.222
.L.str.222:
	.asciz	"this_bits>=min_bits"
	.size	.L.str.222, 20

	.type	.L__func__.VBR_iteration_loop,%object @ @__func__.VBR_iteration_loop
.L__func__.VBR_iteration_loop:
	.asciz	"VBR_iteration_loop"
	.size	.L__func__.VBR_iteration_loop, 19

	.type	.L.str.2.223,%object    @ @.str.2.223
.L.str.2.223:
	.asciz	"this_bits<=max_bits"
	.size	.L.str.2.223, 20

	.type	.L.str.3.224,%object    @ @.str.3.224
.L.str.3.224:
	.asciz	"(int)cod_info->part2_3_length <= max_bits"
	.size	.L.str.3.224, 42

	.type	.L.str.4.225,%object    @ @.str.4.225
.L.str.4.225:
	.asciz	"used_bits <= bits"
	.size	.L.str.4.225, 18

	.type	masking_lower,%object   @ @masking_lower
	.data
	.globl	masking_lower
	.p2align	2
masking_lower:
	.long	1065353216              @ float 1
	.size	masking_lower, 4

	.type	nr_of_sfb_block,%object @ @nr_of_sfb_block
	.globl	nr_of_sfb_block
	.p2align	2
nr_of_sfb_block:
	.long	6                       @ 0x6
	.long	5                       @ 0x5
	.long	5                       @ 0x5
	.long	5                       @ 0x5
	.long	9                       @ 0x9
	.long	9                       @ 0x9
	.long	9                       @ 0x9
	.long	9                       @ 0x9
	.long	6                       @ 0x6
	.long	9                       @ 0x9
	.long	9                       @ 0x9
	.long	9                       @ 0x9
	.long	6                       @ 0x6
	.long	5                       @ 0x5
	.long	7                       @ 0x7
	.long	3                       @ 0x3
	.long	9                       @ 0x9
	.long	9                       @ 0x9
	.long	12                      @ 0xc
	.long	6                       @ 0x6
	.long	6                       @ 0x6
	.long	9                       @ 0x9
	.long	12                      @ 0xc
	.long	6                       @ 0x6
	.long	11                      @ 0xb
	.long	10                      @ 0xa
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	18                      @ 0x12
	.long	18                      @ 0x12
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	15                      @ 0xf
	.long	18                      @ 0x12
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	7                       @ 0x7
	.long	7                       @ 0x7
	.long	7                       @ 0x7
	.long	0                       @ 0x0
	.long	12                      @ 0xc
	.long	12                      @ 0xc
	.long	12                      @ 0xc
	.long	0                       @ 0x0
	.long	6                       @ 0x6
	.long	15                      @ 0xf
	.long	12                      @ 0xc
	.long	0                       @ 0x0
	.long	6                       @ 0x6
	.long	6                       @ 0x6
	.long	6                       @ 0x6
	.long	3                       @ 0x3
	.long	12                      @ 0xc
	.long	9                       @ 0x9
	.long	9                       @ 0x9
	.long	6                       @ 0x6
	.long	6                       @ 0x6
	.long	12                      @ 0xc
	.long	9                       @ 0x9
	.long	6                       @ 0x6
	.long	8                       @ 0x8
	.long	8                       @ 0x8
	.long	5                       @ 0x5
	.long	0                       @ 0x0
	.long	15                      @ 0xf
	.long	12                      @ 0xc
	.long	9                       @ 0x9
	.long	0                       @ 0x0
	.long	6                       @ 0x6
	.long	18                      @ 0x12
	.long	9                       @ 0x9
	.long	0                       @ 0x0
	.size	nr_of_sfb_block, 288

	.type	pretab,%object          @ @pretab
	.globl	pretab
	.p2align	2
pretab:
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	3                       @ 0x3
	.long	3                       @ 0x3
	.long	2                       @ 0x2
	.size	pretab, 84

	.type	sfBandIndex,%object     @ @sfBandIndex
	.globl	sfBandIndex
	.p2align	2
sfBandIndex:
	.long	0                       @ 0x0
	.long	6                       @ 0x6
	.long	12                      @ 0xc
	.long	18                      @ 0x12
	.long	24                      @ 0x18
	.long	30                      @ 0x1e
	.long	36                      @ 0x24
	.long	44                      @ 0x2c
	.long	54                      @ 0x36
	.long	66                      @ 0x42
	.long	80                      @ 0x50
	.long	96                      @ 0x60
	.long	116                     @ 0x74
	.long	140                     @ 0x8c
	.long	168                     @ 0xa8
	.long	200                     @ 0xc8
	.long	238                     @ 0xee
	.long	284                     @ 0x11c
	.long	336                     @ 0x150
	.long	396                     @ 0x18c
	.long	464                     @ 0x1d0
	.long	522                     @ 0x20a
	.long	576                     @ 0x240
	.long	0                       @ 0x0
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	12                      @ 0xc
	.long	18                      @ 0x12
	.long	24                      @ 0x18
	.long	32                      @ 0x20
	.long	42                      @ 0x2a
	.long	56                      @ 0x38
	.long	74                      @ 0x4a
	.long	100                     @ 0x64
	.long	132                     @ 0x84
	.long	174                     @ 0xae
	.long	192                     @ 0xc0
	.long	0                       @ 0x0
	.long	6                       @ 0x6
	.long	12                      @ 0xc
	.long	18                      @ 0x12
	.long	24                      @ 0x18
	.long	30                      @ 0x1e
	.long	36                      @ 0x24
	.long	44                      @ 0x2c
	.long	54                      @ 0x36
	.long	66                      @ 0x42
	.long	80                      @ 0x50
	.long	96                      @ 0x60
	.long	114                     @ 0x72
	.long	136                     @ 0x88
	.long	162                     @ 0xa2
	.long	194                     @ 0xc2
	.long	232                     @ 0xe8
	.long	278                     @ 0x116
	.long	332                     @ 0x14c
	.long	394                     @ 0x18a
	.long	464                     @ 0x1d0
	.long	540                     @ 0x21c
	.long	576                     @ 0x240
	.long	0                       @ 0x0
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	12                      @ 0xc
	.long	18                      @ 0x12
	.long	26                      @ 0x1a
	.long	36                      @ 0x24
	.long	48                      @ 0x30
	.long	62                      @ 0x3e
	.long	80                      @ 0x50
	.long	104                     @ 0x68
	.long	136                     @ 0x88
	.long	180                     @ 0xb4
	.long	192                     @ 0xc0
	.long	0                       @ 0x0
	.long	6                       @ 0x6
	.long	12                      @ 0xc
	.long	18                      @ 0x12
	.long	24                      @ 0x18
	.long	30                      @ 0x1e
	.long	36                      @ 0x24
	.long	44                      @ 0x2c
	.long	54                      @ 0x36
	.long	66                      @ 0x42
	.long	80                      @ 0x50
	.long	96                      @ 0x60
	.long	116                     @ 0x74
	.long	140                     @ 0x8c
	.long	168                     @ 0xa8
	.long	200                     @ 0xc8
	.long	238                     @ 0xee
	.long	284                     @ 0x11c
	.long	336                     @ 0x150
	.long	396                     @ 0x18c
	.long	464                     @ 0x1d0
	.long	522                     @ 0x20a
	.long	576                     @ 0x240
	.long	0                       @ 0x0
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	12                      @ 0xc
	.long	18                      @ 0x12
	.long	26                      @ 0x1a
	.long	36                      @ 0x24
	.long	48                      @ 0x30
	.long	62                      @ 0x3e
	.long	80                      @ 0x50
	.long	104                     @ 0x68
	.long	134                     @ 0x86
	.long	174                     @ 0xae
	.long	192                     @ 0xc0
	.long	0                       @ 0x0
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	12                      @ 0xc
	.long	16                      @ 0x10
	.long	20                      @ 0x14
	.long	24                      @ 0x18
	.long	30                      @ 0x1e
	.long	36                      @ 0x24
	.long	44                      @ 0x2c
	.long	52                      @ 0x34
	.long	62                      @ 0x3e
	.long	74                      @ 0x4a
	.long	90                      @ 0x5a
	.long	110                     @ 0x6e
	.long	134                     @ 0x86
	.long	162                     @ 0xa2
	.long	196                     @ 0xc4
	.long	238                     @ 0xee
	.long	288                     @ 0x120
	.long	342                     @ 0x156
	.long	418                     @ 0x1a2
	.long	576                     @ 0x240
	.long	0                       @ 0x0
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	12                      @ 0xc
	.long	16                      @ 0x10
	.long	22                      @ 0x16
	.long	30                      @ 0x1e
	.long	40                      @ 0x28
	.long	52                      @ 0x34
	.long	66                      @ 0x42
	.long	84                      @ 0x54
	.long	106                     @ 0x6a
	.long	136                     @ 0x88
	.long	192                     @ 0xc0
	.long	0                       @ 0x0
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	12                      @ 0xc
	.long	16                      @ 0x10
	.long	20                      @ 0x14
	.long	24                      @ 0x18
	.long	30                      @ 0x1e
	.long	36                      @ 0x24
	.long	42                      @ 0x2a
	.long	50                      @ 0x32
	.long	60                      @ 0x3c
	.long	72                      @ 0x48
	.long	88                      @ 0x58
	.long	106                     @ 0x6a
	.long	128                     @ 0x80
	.long	156                     @ 0x9c
	.long	190                     @ 0xbe
	.long	230                     @ 0xe6
	.long	276                     @ 0x114
	.long	330                     @ 0x14a
	.long	384                     @ 0x180
	.long	576                     @ 0x240
	.long	0                       @ 0x0
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	12                      @ 0xc
	.long	16                      @ 0x10
	.long	22                      @ 0x16
	.long	28                      @ 0x1c
	.long	38                      @ 0x26
	.long	50                      @ 0x32
	.long	64                      @ 0x40
	.long	80                      @ 0x50
	.long	100                     @ 0x64
	.long	126                     @ 0x7e
	.long	192                     @ 0xc0
	.long	0                       @ 0x0
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	12                      @ 0xc
	.long	16                      @ 0x10
	.long	20                      @ 0x14
	.long	24                      @ 0x18
	.long	30                      @ 0x1e
	.long	36                      @ 0x24
	.long	44                      @ 0x2c
	.long	54                      @ 0x36
	.long	66                      @ 0x42
	.long	82                      @ 0x52
	.long	102                     @ 0x66
	.long	126                     @ 0x7e
	.long	156                     @ 0x9c
	.long	194                     @ 0xc2
	.long	240                     @ 0xf0
	.long	296                     @ 0x128
	.long	364                     @ 0x16c
	.long	448                     @ 0x1c0
	.long	550                     @ 0x226
	.long	576                     @ 0x240
	.long	0                       @ 0x0
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	12                      @ 0xc
	.long	16                      @ 0x10
	.long	22                      @ 0x16
	.long	30                      @ 0x1e
	.long	42                      @ 0x2a
	.long	58                      @ 0x3a
	.long	78                      @ 0x4e
	.long	104                     @ 0x68
	.long	138                     @ 0x8a
	.long	180                     @ 0xb4
	.long	192                     @ 0xc0
	.size	sfBandIndex, 888

	.type	scalefac_band,%object   @ @scalefac_band
	.comm	scalefac_band,148,4
	.type	pow43,%object           @ @pow43
	.comm	pow43,65664,8
	.type	ipow20,%object          @ @ipow20
	.comm	ipow20,2048,8
	.type	pow20,%object           @ @pow20
	.comm	pow20,2048,8
	.type	convert_mdct,%object    @ @convert_mdct
	.comm	convert_mdct,4,4
	.type	reduce_sidechannel,%object @ @reduce_sidechannel
	.comm	reduce_sidechannel,4,4
	.type	ATH_mdct_long,%object   @ @ATH_mdct_long
	.comm	ATH_mdct_long,4608,8
	.type	ATH_mdct_short,%object  @ @ATH_mdct_short
	.comm	ATH_mdct_short,1536,8
	.type	ATH_l,%object           @ @ATH_l
	.local	ATH_l
	.comm	ATH_l,168,8
	.type	ATH_s,%object           @ @ATH_s
	.local	ATH_s
	.comm	ATH_s,168,8
	.type	adj43,%object           @ @adj43
	.local	adj43
	.comm	adj43,65664,8
	.type	adj43asm,%object        @ @adj43asm
	.local	adj43asm
	.comm	adj43asm,65664,8
	.type	.L.str.254,%object      @ @.str.254
	.section	.rodata.str1.1,"aMS",%progbits,1
.L.str.254:
	.asciz	"max_bits >= 0"
	.size	.L.str.254, 14

	.type	.L.str.1.255,%object    @ @.str.1.255
.L.str.1.255:
	.asciz	"quantize-pvt.c"
	.size	.L.str.1.255, 15

	.type	.L__func__.inner_loop,%object @ @__func__.inner_loop
.L__func__.inner_loop:
	.asciz	"inner_loop"
	.size	.L__func__.inner_loop, 11

	.type	scale_bitcount.slen1_tab,%object @ @scale_bitcount.slen1_tab
	.data
	.p2align	2
scale_bitcount.slen1_tab:
	.long	0                       @ 0x0
	.long	18                      @ 0x12
	.long	36                      @ 0x24
	.long	54                      @ 0x36
	.long	54                      @ 0x36
	.long	36                      @ 0x24
	.long	54                      @ 0x36
	.long	72                      @ 0x48
	.long	54                      @ 0x36
	.long	72                      @ 0x48
	.long	90                      @ 0x5a
	.long	72                      @ 0x48
	.long	90                      @ 0x5a
	.long	108                     @ 0x6c
	.long	108                     @ 0x6c
	.long	126                     @ 0x7e
	.size	scale_bitcount.slen1_tab, 64

	.type	scale_bitcount.slen2_tab,%object @ @scale_bitcount.slen2_tab
	.p2align	2
scale_bitcount.slen2_tab:
	.long	0                       @ 0x0
	.long	10                      @ 0xa
	.long	20                      @ 0x14
	.long	30                      @ 0x1e
	.long	33                      @ 0x21
	.long	21                      @ 0x15
	.long	31                      @ 0x1f
	.long	41                      @ 0x29
	.long	32                      @ 0x20
	.long	42                      @ 0x2a
	.long	52                      @ 0x34
	.long	43                      @ 0x2b
	.long	53                      @ 0x35
	.long	63                      @ 0x3f
	.long	64                      @ 0x40
	.long	74                      @ 0x4a
	.size	scale_bitcount.slen2_tab, 64

	.type	scale_bitcount.slen1,%object @ @scale_bitcount.slen1
	.p2align	2
scale_bitcount.slen1:
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	8                       @ 0x8
	.long	2                       @ 0x2
	.long	2                       @ 0x2
	.long	2                       @ 0x2
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	8                       @ 0x8
	.long	8                       @ 0x8
	.long	16                      @ 0x10
	.long	16                      @ 0x10
	.size	scale_bitcount.slen1, 64

	.type	scale_bitcount.slen2,%object @ @scale_bitcount.slen2
	.p2align	2
scale_bitcount.slen2:
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	2                       @ 0x2
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	2                       @ 0x2
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.size	scale_bitcount.slen2, 64

	.type	max_range_sfac_tab,%object @ @max_range_sfac_tab
	.p2align	2
max_range_sfac_tab:
	.long	15                      @ 0xf
	.long	15                      @ 0xf
	.long	7                       @ 0x7
	.long	7                       @ 0x7
	.long	15                      @ 0xf
	.long	15                      @ 0xf
	.long	7                       @ 0x7
	.long	0                       @ 0x0
	.long	7                       @ 0x7
	.long	3                       @ 0x3
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	15                      @ 0xf
	.long	31                      @ 0x1f
	.long	31                      @ 0x1f
	.long	0                       @ 0x0
	.long	7                       @ 0x7
	.long	7                       @ 0x7
	.long	7                       @ 0x7
	.long	0                       @ 0x0
	.long	3                       @ 0x3
	.long	3                       @ 0x3
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.size	max_range_sfac_tab, 96

	.type	scale_bitcount_lsf.log2tab,%object @ @scale_bitcount_lsf.log2tab
	.p2align	2
scale_bitcount_lsf.log2tab:
	.long	0                       @ 0x0
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	3                       @ 0x3
	.long	3                       @ 0x3
	.long	3                       @ 0x3
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.size	scale_bitcount_lsf.log2tab, 64

	.type	.L.str.2.260,%object    @ @.str.2.260
	.section	.rodata.str1.1,"aMS",%progbits,1
.L.str.2.260:
	.asciz	"intensity stereo not implemented yet\n"
	.size	.L.str.2.260, 38

	.type	.L.str.3.261,%object    @ @.str.3.261
.L.str.3.261:
	.asciz	"cod_info->sfb_partition_table"
	.size	.L.str.3.261, 30

	.type	.L__func__.scale_bitcount_lsf,%object @ @__func__.scale_bitcount_lsf
.L__func__.scale_bitcount_lsf:
	.asciz	"scale_bitcount_lsf"
	.size	.L__func__.scale_bitcount_lsf, 19

	.type	bin_search_StepSize2.CurrentStep,%object @ @bin_search_StepSize2.CurrentStep
	.data
	.p2align	2
bin_search_StepSize2.CurrentStep:
	.long	4                       @ 0x4
	.size	bin_search_StepSize2.CurrentStep, 4

	.type	ResvSize,%object        @ @ResvSize
	.local	ResvSize
	.comm	ResvSize,4,4
	.type	.L.str.270,%object      @ @.str.270
	.section	.rodata.str1.1,"aMS",%progbits,1
.L.str.270:
	.asciz	"(l3_side->main_data_begin * 8) == ResvSize"
	.size	.L.str.270, 43

	.type	.L.str.1.271,%object    @ @.str.1.271
.L.str.1.271:
	.asciz	"reservoir.c"
	.size	.L.str.1.271, 12

	.type	.L__func__.ResvFrameBegin,%object @ @__func__.ResvFrameBegin
.L__func__.ResvFrameBegin:
	.asciz	"ResvFrameBegin"
	.size	.L__func__.ResvFrameBegin, 15

	.type	ResvMax,%object         @ @ResvMax
	.local	ResvMax
	.comm	ResvMax,4,4
	.type	.L.str.278,%object      @ @.str.278
.L.str.278:
	.asciz	"socket() failed.\n"
	.size	.L.str.278, 18

	.type	.L.str.1.279,%object    @ @.str.1.279
.L.str.1.279:
	.asciz	"setsockopt SO_REUSEADDR failed\n"
	.size	.L.str.1.279, 32

	.type	.L.str.2.280,%object    @ @.str.2.280
.L.str.2.280:
	.asciz	"setsockopt IP_MULTICAST_TTL failed.  multicast in kernel?\n"
	.size	.L.str.2.280, 59

	.type	.L.str.3.281,%object    @ @.str.3.281
.L.str.3.281:
	.asciz	"setsockopt IP_MULTICAST_LOOP failed.  multicast in kernel?\n"
	.size	.L.str.3.281, 60

	.type	hs,%object              @ @hs
	.data
	.globl	hs
	.p2align	2
hs:
	.long	32                      @ 0x20
	.size	hs, 4

	.type	ht,%object              @ @ht
	.globl	ht
	.p2align	2
ht:
	.zero	16
	.long	2                       @ 0x2
	.long	0                       @ 0x0
	.long	t1HB
	.long	t1l
	.long	3                       @ 0x3
	.long	0                       @ 0x0
	.long	t2HB
	.long	t2l
	.long	3                       @ 0x3
	.long	0                       @ 0x0
	.long	t3HB
	.long	t3l
	.zero	16
	.long	4                       @ 0x4
	.long	0                       @ 0x0
	.long	t5HB
	.long	t5l
	.long	4                       @ 0x4
	.long	0                       @ 0x0
	.long	t6HB
	.long	t6l
	.long	6                       @ 0x6
	.long	0                       @ 0x0
	.long	t7HB
	.long	t7l
	.long	6                       @ 0x6
	.long	0                       @ 0x0
	.long	t8HB
	.long	t8l
	.long	6                       @ 0x6
	.long	0                       @ 0x0
	.long	t9HB
	.long	t9l
	.long	8                       @ 0x8
	.long	0                       @ 0x0
	.long	t10HB
	.long	t10l
	.long	8                       @ 0x8
	.long	0                       @ 0x0
	.long	t11HB
	.long	t11l
	.long	8                       @ 0x8
	.long	0                       @ 0x0
	.long	t12HB
	.long	t12l
	.long	16                      @ 0x10
	.long	0                       @ 0x0
	.long	t13HB
	.long	t13l
	.zero	16
	.long	16                      @ 0x10
	.long	0                       @ 0x0
	.long	t15HB
	.long	t15l
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	t16HB
	.long	t16l
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	t16HB
	.long	t16l
	.long	3                       @ 0x3
	.long	7                       @ 0x7
	.long	t16HB
	.long	t16l
	.long	4                       @ 0x4
	.long	15                      @ 0xf
	.long	t16HB
	.long	t16l
	.long	6                       @ 0x6
	.long	63                      @ 0x3f
	.long	t16HB
	.long	t16l
	.long	8                       @ 0x8
	.long	255                     @ 0xff
	.long	t16HB
	.long	t16l
	.long	10                      @ 0xa
	.long	1023                    @ 0x3ff
	.long	t16HB
	.long	t16l
	.long	13                      @ 0xd
	.long	8191                    @ 0x1fff
	.long	t16HB
	.long	t16l
	.long	4                       @ 0x4
	.long	15                      @ 0xf
	.long	t24HB
	.long	t24l
	.long	5                       @ 0x5
	.long	31                      @ 0x1f
	.long	t24HB
	.long	t24l
	.long	6                       @ 0x6
	.long	63                      @ 0x3f
	.long	t24HB
	.long	t24l
	.long	7                       @ 0x7
	.long	127                     @ 0x7f
	.long	t24HB
	.long	t24l
	.long	8                       @ 0x8
	.long	255                     @ 0xff
	.long	t24HB
	.long	t24l
	.long	9                       @ 0x9
	.long	511                     @ 0x1ff
	.long	t24HB
	.long	t24l
	.long	11                      @ 0xb
	.long	2047                    @ 0x7ff
	.long	t24HB
	.long	t24l
	.long	13                      @ 0xd
	.long	8191                    @ 0x1fff
	.long	t24HB
	.long	t24l
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	t32HB
	.long	t32l
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	t33HB
	.long	t33l
	.size	ht, 544

	.type	t1HB,%object            @ @t1HB
	.p2align	2
t1HB:
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.size	t1HB, 72

	.type	t1l,%object             @ @t1l
t1l:
	.ascii	"\001\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\003"
	.size	t1l, 18

	.type	t2HB,%object            @ @t2HB
	.p2align	2
t2HB:
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	3                       @ 0x3
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	3                       @ 0x3
	.long	2                       @ 0x2
	.long	0                       @ 0x0
	.size	t2HB, 140

	.type	t2l,%object             @ @t2l
t2l:
	.ascii	"\001\003\006\000\000\000\000\000\000\000\000\000\000\000\000\000\003\003\005\000\000\000\000\000\000\000\000\000\000\000\000\000\005\005\006"
	.size	t2l, 35

	.type	t3HB,%object            @ @t3HB
	.p2align	2
t3HB:
	.long	3                       @ 0x3
	.long	2                       @ 0x2
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	3                       @ 0x3
	.long	2                       @ 0x2
	.long	0                       @ 0x0
	.size	t3HB, 140

	.type	t3l,%object             @ @t3l
t3l:
	.ascii	"\002\002\006\000\000\000\000\000\000\000\000\000\000\000\000\000\003\002\005\000\000\000\000\000\000\000\000\000\000\000\000\000\005\005\006"
	.size	t3l, 35

	.type	t5HB,%object            @ @t5HB
	.p2align	2
t5HB:
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	6                       @ 0x6
	.long	5                       @ 0x5
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	3                       @ 0x3
	.long	1                       @ 0x1
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	7                       @ 0x7
	.long	5                       @ 0x5
	.long	7                       @ 0x7
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	6                       @ 0x6
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.size	t5HB, 208

	.type	t5l,%object             @ @t5l
t5l:
	.ascii	"\001\003\006\007\000\000\000\000\000\000\000\000\000\000\000\000\003\003\006\007\000\000\000\000\000\000\000\000\000\000\000\000\006\006\007\b\000\000\000\000\000\000\000\000\000\000\000\000\007\006\007\b"
	.size	t5l, 52

	.type	t6HB,%object            @ @t6HB
	.p2align	2
t6HB:
	.long	7                       @ 0x7
	.long	3                       @ 0x3
	.long	5                       @ 0x5
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	6                       @ 0x6
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	2                       @ 0x2
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	5                       @ 0x5
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	3                       @ 0x3
	.long	3                       @ 0x3
	.long	2                       @ 0x2
	.long	0                       @ 0x0
	.size	t6HB, 208

	.type	t6l,%object             @ @t6l
t6l:
	.ascii	"\003\003\005\007\000\000\000\000\000\000\000\000\000\000\000\000\003\002\004\005\000\000\000\000\000\000\000\000\000\000\000\000\004\004\005\006\000\000\000\000\000\000\000\000\000\000\000\000\006\005\006\007"
	.size	t6l, 52

	.type	t7HB,%object            @ @t7HB
	.p2align	2
t7HB:
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	10                      @ 0xa
	.long	19                      @ 0x13
	.long	16                      @ 0x10
	.long	10                      @ 0xa
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	3                       @ 0x3
	.long	3                       @ 0x3
	.long	7                       @ 0x7
	.long	10                      @ 0xa
	.long	5                       @ 0x5
	.long	3                       @ 0x3
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	11                      @ 0xb
	.long	4                       @ 0x4
	.long	13                      @ 0xd
	.long	17                      @ 0x11
	.long	8                       @ 0x8
	.long	4                       @ 0x4
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	12                      @ 0xc
	.long	11                      @ 0xb
	.long	18                      @ 0x12
	.long	15                      @ 0xf
	.long	11                      @ 0xb
	.long	2                       @ 0x2
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	7                       @ 0x7
	.long	6                       @ 0x6
	.long	9                       @ 0x9
	.long	14                      @ 0xe
	.long	3                       @ 0x3
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	6                       @ 0x6
	.long	4                       @ 0x4
	.long	5                       @ 0x5
	.long	3                       @ 0x3
	.long	2                       @ 0x2
	.long	0                       @ 0x0
	.size	t7HB, 344

	.type	t7l,%object             @ @t7l
t7l:
	.ascii	"\001\003\006\b\b\t\000\000\000\000\000\000\000\000\000\000\003\004\006\007\007\b\000\000\000\000\000\000\000\000\000\000\006\005\007\b\b\t\000\000\000\000\000\000\000\000\000\000\007\007\b\t\t\t\000\000\000\000\000\000\000\000\000\000\007\007\b\t\t\n\000\000\000\000\000\000\000\000\000\000\b\b\t\n\n\n"
	.size	t7l, 86

	.type	t8HB,%object            @ @t8HB
	.p2align	2
t8HB:
	.long	3                       @ 0x3
	.long	4                       @ 0x4
	.long	6                       @ 0x6
	.long	18                      @ 0x12
	.long	12                      @ 0xc
	.long	5                       @ 0x5
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	5                       @ 0x5
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	16                      @ 0x10
	.long	9                       @ 0x9
	.long	3                       @ 0x3
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	7                       @ 0x7
	.long	3                       @ 0x3
	.long	5                       @ 0x5
	.long	14                      @ 0xe
	.long	7                       @ 0x7
	.long	3                       @ 0x3
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	19                      @ 0x13
	.long	17                      @ 0x11
	.long	15                      @ 0xf
	.long	13                      @ 0xd
	.long	10                      @ 0xa
	.long	4                       @ 0x4
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	13                      @ 0xd
	.long	5                       @ 0x5
	.long	8                       @ 0x8
	.long	11                      @ 0xb
	.long	5                       @ 0x5
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	12                      @ 0xc
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.size	t8HB, 344

	.type	t8l,%object             @ @t8l
t8l:
	.ascii	"\002\003\006\b\b\t\000\000\000\000\000\000\000\000\000\000\003\002\004\b\b\b\000\000\000\000\000\000\000\000\000\000\006\004\006\b\b\t\000\000\000\000\000\000\000\000\000\000\b\b\b\t\t\n\000\000\000\000\000\000\000\000\000\000\b\007\b\t\n\n\000\000\000\000\000\000\000\000\000\000\t\b\t\t\013\013"
	.size	t8l, 86

	.type	t9HB,%object            @ @t9HB
	.p2align	2
t9HB:
	.long	7                       @ 0x7
	.long	5                       @ 0x5
	.long	9                       @ 0x9
	.long	14                      @ 0xe
	.long	15                      @ 0xf
	.long	7                       @ 0x7
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	6                       @ 0x6
	.long	4                       @ 0x4
	.long	5                       @ 0x5
	.long	5                       @ 0x5
	.long	6                       @ 0x6
	.long	7                       @ 0x7
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	7                       @ 0x7
	.long	6                       @ 0x6
	.long	8                       @ 0x8
	.long	8                       @ 0x8
	.long	8                       @ 0x8
	.long	5                       @ 0x5
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	15                      @ 0xf
	.long	6                       @ 0x6
	.long	9                       @ 0x9
	.long	10                      @ 0xa
	.long	5                       @ 0x5
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	11                      @ 0xb
	.long	7                       @ 0x7
	.long	9                       @ 0x9
	.long	6                       @ 0x6
	.long	4                       @ 0x4
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	14                      @ 0xe
	.long	4                       @ 0x4
	.long	6                       @ 0x6
	.long	2                       @ 0x2
	.long	6                       @ 0x6
	.long	0                       @ 0x0
	.size	t9HB, 344

	.type	t9l,%object             @ @t9l
t9l:
	.ascii	"\003\003\005\006\b\t\000\000\000\000\000\000\000\000\000\000\003\003\004\005\006\b\000\000\000\000\000\000\000\000\000\000\004\004\005\006\007\b\000\000\000\000\000\000\000\000\000\000\006\005\006\007\007\b\000\000\000\000\000\000\000\000\000\000\007\006\007\007\b\t\000\000\000\000\000\000\000\000\000\000\b\007\b\b\t\t"
	.size	t9l, 86

	.type	t10HB,%object           @ @t10HB
	.p2align	2
t10HB:
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	10                      @ 0xa
	.long	23                      @ 0x17
	.long	35                      @ 0x23
	.long	30                      @ 0x1e
	.long	12                      @ 0xc
	.long	17                      @ 0x11
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	3                       @ 0x3
	.long	3                       @ 0x3
	.long	8                       @ 0x8
	.long	12                      @ 0xc
	.long	18                      @ 0x12
	.long	21                      @ 0x15
	.long	12                      @ 0xc
	.long	7                       @ 0x7
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	11                      @ 0xb
	.long	9                       @ 0x9
	.long	15                      @ 0xf
	.long	21                      @ 0x15
	.long	32                      @ 0x20
	.long	40                      @ 0x28
	.long	19                      @ 0x13
	.long	6                       @ 0x6
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	14                      @ 0xe
	.long	13                      @ 0xd
	.long	22                      @ 0x16
	.long	34                      @ 0x22
	.long	46                      @ 0x2e
	.long	23                      @ 0x17
	.long	18                      @ 0x12
	.long	7                       @ 0x7
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	20                      @ 0x14
	.long	19                      @ 0x13
	.long	33                      @ 0x21
	.long	47                      @ 0x2f
	.long	27                      @ 0x1b
	.long	22                      @ 0x16
	.long	9                       @ 0x9
	.long	3                       @ 0x3
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	31                      @ 0x1f
	.long	22                      @ 0x16
	.long	41                      @ 0x29
	.long	26                      @ 0x1a
	.long	21                      @ 0x15
	.long	20                      @ 0x14
	.long	5                       @ 0x5
	.long	3                       @ 0x3
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	14                      @ 0xe
	.long	13                      @ 0xd
	.long	10                      @ 0xa
	.long	11                      @ 0xb
	.long	16                      @ 0x10
	.long	6                       @ 0x6
	.long	5                       @ 0x5
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	9                       @ 0x9
	.long	8                       @ 0x8
	.long	7                       @ 0x7
	.long	8                       @ 0x8
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.long	2                       @ 0x2
	.long	0                       @ 0x0
	.size	t10HB, 480

	.type	t10l,%object            @ @t10l
t10l:
	.ascii	"\001\003\006\b\t\t\t\n\000\000\000\000\000\000\000\000\003\004\006\007\b\t\b\b\000\000\000\000\000\000\000\000\006\006\007\b\t\n\t\t\000\000\000\000\000\000\000\000\007\007\b\t\n\n\t\n\000\000\000\000\000\000\000\000\b\b\t\n\n\n\n\n\000\000\000\000\000\000\000\000\t\t\n\n\013\013\n\013\000\000\000\000\000\000\000\000\b\b\t\n\n\n\013\013\000\000\000\000\000\000\000\000\t\b\t\n\n\013\013\013"
	.size	t10l, 120

	.type	t11HB,%object           @ @t11HB
	.p2align	2
t11HB:
	.long	3                       @ 0x3
	.long	4                       @ 0x4
	.long	10                      @ 0xa
	.long	24                      @ 0x18
	.long	34                      @ 0x22
	.long	33                      @ 0x21
	.long	21                      @ 0x15
	.long	15                      @ 0xf
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	5                       @ 0x5
	.long	3                       @ 0x3
	.long	4                       @ 0x4
	.long	10                      @ 0xa
	.long	32                      @ 0x20
	.long	17                      @ 0x11
	.long	11                      @ 0xb
	.long	10                      @ 0xa
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	11                      @ 0xb
	.long	7                       @ 0x7
	.long	13                      @ 0xd
	.long	18                      @ 0x12
	.long	30                      @ 0x1e
	.long	31                      @ 0x1f
	.long	20                      @ 0x14
	.long	5                       @ 0x5
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	25                      @ 0x19
	.long	11                      @ 0xb
	.long	19                      @ 0x13
	.long	59                      @ 0x3b
	.long	27                      @ 0x1b
	.long	18                      @ 0x12
	.long	12                      @ 0xc
	.long	5                       @ 0x5
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	35                      @ 0x23
	.long	33                      @ 0x21
	.long	31                      @ 0x1f
	.long	58                      @ 0x3a
	.long	30                      @ 0x1e
	.long	16                      @ 0x10
	.long	7                       @ 0x7
	.long	5                       @ 0x5
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	28                      @ 0x1c
	.long	26                      @ 0x1a
	.long	32                      @ 0x20
	.long	19                      @ 0x13
	.long	17                      @ 0x11
	.long	15                      @ 0xf
	.long	8                       @ 0x8
	.long	14                      @ 0xe
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	14                      @ 0xe
	.long	12                      @ 0xc
	.long	9                       @ 0x9
	.long	13                      @ 0xd
	.long	14                      @ 0xe
	.long	9                       @ 0x9
	.long	4                       @ 0x4
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	11                      @ 0xb
	.long	4                       @ 0x4
	.long	6                       @ 0x6
	.long	6                       @ 0x6
	.long	6                       @ 0x6
	.long	3                       @ 0x3
	.long	2                       @ 0x2
	.long	0                       @ 0x0
	.size	t11HB, 480

	.type	t11l,%object            @ @t11l
t11l:
	.ascii	"\002\003\005\007\b\t\b\t\000\000\000\000\000\000\000\000\003\003\004\006\b\b\007\b\000\000\000\000\000\000\000\000\005\005\006\007\b\t\b\b\000\000\000\000\000\000\000\000\007\006\007\t\b\n\b\t\000\000\000\000\000\000\000\000\b\b\b\t\t\n\t\n\000\000\000\000\000\000\000\000\b\b\t\n\n\013\n\013\000\000\000\000\000\000\000\000\b\007\007\b\t\n\n\n\000\000\000\000\000\000\000\000\b\007\b\t\n\n\n\n"
	.size	t11l, 120

	.type	t12HB,%object           @ @t12HB
	.p2align	2
t12HB:
	.long	9                       @ 0x9
	.long	6                       @ 0x6
	.long	16                      @ 0x10
	.long	33                      @ 0x21
	.long	41                      @ 0x29
	.long	39                      @ 0x27
	.long	38                      @ 0x26
	.long	26                      @ 0x1a
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	7                       @ 0x7
	.long	5                       @ 0x5
	.long	6                       @ 0x6
	.long	9                       @ 0x9
	.long	23                      @ 0x17
	.long	16                      @ 0x10
	.long	26                      @ 0x1a
	.long	11                      @ 0xb
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	17                      @ 0x11
	.long	7                       @ 0x7
	.long	11                      @ 0xb
	.long	14                      @ 0xe
	.long	21                      @ 0x15
	.long	30                      @ 0x1e
	.long	10                      @ 0xa
	.long	7                       @ 0x7
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	17                      @ 0x11
	.long	10                      @ 0xa
	.long	15                      @ 0xf
	.long	12                      @ 0xc
	.long	18                      @ 0x12
	.long	28                      @ 0x1c
	.long	14                      @ 0xe
	.long	5                       @ 0x5
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	32                      @ 0x20
	.long	13                      @ 0xd
	.long	22                      @ 0x16
	.long	19                      @ 0x13
	.long	18                      @ 0x12
	.long	16                      @ 0x10
	.long	9                       @ 0x9
	.long	5                       @ 0x5
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	40                      @ 0x28
	.long	17                      @ 0x11
	.long	31                      @ 0x1f
	.long	29                      @ 0x1d
	.long	17                      @ 0x11
	.long	13                      @ 0xd
	.long	4                       @ 0x4
	.long	2                       @ 0x2
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	27                      @ 0x1b
	.long	12                      @ 0xc
	.long	11                      @ 0xb
	.long	15                      @ 0xf
	.long	10                      @ 0xa
	.long	7                       @ 0x7
	.long	4                       @ 0x4
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	27                      @ 0x1b
	.long	12                      @ 0xc
	.long	8                       @ 0x8
	.long	12                      @ 0xc
	.long	6                       @ 0x6
	.long	3                       @ 0x3
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.size	t12HB, 480

	.type	t12l,%object            @ @t12l
t12l:
	.ascii	"\004\003\005\007\b\t\t\t\000\000\000\000\000\000\000\000\003\003\004\005\007\007\b\b\000\000\000\000\000\000\000\000\005\004\005\006\007\b\007\b\000\000\000\000\000\000\000\000\006\005\006\006\007\b\b\b\000\000\000\000\000\000\000\000\007\006\007\007\b\b\b\t\000\000\000\000\000\000\000\000\b\007\b\b\b\t\b\t\000\000\000\000\000\000\000\000\b\007\007\b\b\t\t\n\000\000\000\000\000\000\000\000\t\b\b\t\t\t\t\n"
	.size	t12l, 120

	.type	t13HB,%object           @ @t13HB
	.p2align	2
t13HB:
	.long	1                       @ 0x1
	.long	5                       @ 0x5
	.long	14                      @ 0xe
	.long	21                      @ 0x15
	.long	34                      @ 0x22
	.long	51                      @ 0x33
	.long	46                      @ 0x2e
	.long	71                      @ 0x47
	.long	42                      @ 0x2a
	.long	52                      @ 0x34
	.long	68                      @ 0x44
	.long	52                      @ 0x34
	.long	67                      @ 0x43
	.long	44                      @ 0x2c
	.long	43                      @ 0x2b
	.long	19                      @ 0x13
	.long	3                       @ 0x3
	.long	4                       @ 0x4
	.long	12                      @ 0xc
	.long	19                      @ 0x13
	.long	31                      @ 0x1f
	.long	26                      @ 0x1a
	.long	44                      @ 0x2c
	.long	33                      @ 0x21
	.long	31                      @ 0x1f
	.long	24                      @ 0x18
	.long	32                      @ 0x20
	.long	24                      @ 0x18
	.long	31                      @ 0x1f
	.long	35                      @ 0x23
	.long	22                      @ 0x16
	.long	14                      @ 0xe
	.long	15                      @ 0xf
	.long	13                      @ 0xd
	.long	23                      @ 0x17
	.long	36                      @ 0x24
	.long	59                      @ 0x3b
	.long	49                      @ 0x31
	.long	77                      @ 0x4d
	.long	65                      @ 0x41
	.long	29                      @ 0x1d
	.long	40                      @ 0x28
	.long	30                      @ 0x1e
	.long	40                      @ 0x28
	.long	27                      @ 0x1b
	.long	33                      @ 0x21
	.long	42                      @ 0x2a
	.long	16                      @ 0x10
	.long	22                      @ 0x16
	.long	20                      @ 0x14
	.long	37                      @ 0x25
	.long	61                      @ 0x3d
	.long	56                      @ 0x38
	.long	79                      @ 0x4f
	.long	73                      @ 0x49
	.long	64                      @ 0x40
	.long	43                      @ 0x2b
	.long	76                      @ 0x4c
	.long	56                      @ 0x38
	.long	37                      @ 0x25
	.long	26                      @ 0x1a
	.long	31                      @ 0x1f
	.long	25                      @ 0x19
	.long	14                      @ 0xe
	.long	35                      @ 0x23
	.long	16                      @ 0x10
	.long	60                      @ 0x3c
	.long	57                      @ 0x39
	.long	97                      @ 0x61
	.long	75                      @ 0x4b
	.long	114                     @ 0x72
	.long	91                      @ 0x5b
	.long	54                      @ 0x36
	.long	73                      @ 0x49
	.long	55                      @ 0x37
	.long	41                      @ 0x29
	.long	48                      @ 0x30
	.long	53                      @ 0x35
	.long	23                      @ 0x17
	.long	24                      @ 0x18
	.long	58                      @ 0x3a
	.long	27                      @ 0x1b
	.long	50                      @ 0x32
	.long	96                      @ 0x60
	.long	76                      @ 0x4c
	.long	70                      @ 0x46
	.long	93                      @ 0x5d
	.long	84                      @ 0x54
	.long	77                      @ 0x4d
	.long	58                      @ 0x3a
	.long	79                      @ 0x4f
	.long	29                      @ 0x1d
	.long	74                      @ 0x4a
	.long	49                      @ 0x31
	.long	41                      @ 0x29
	.long	17                      @ 0x11
	.long	47                      @ 0x2f
	.long	45                      @ 0x2d
	.long	78                      @ 0x4e
	.long	74                      @ 0x4a
	.long	115                     @ 0x73
	.long	94                      @ 0x5e
	.long	90                      @ 0x5a
	.long	79                      @ 0x4f
	.long	69                      @ 0x45
	.long	83                      @ 0x53
	.long	71                      @ 0x47
	.long	50                      @ 0x32
	.long	59                      @ 0x3b
	.long	38                      @ 0x26
	.long	36                      @ 0x24
	.long	15                      @ 0xf
	.long	72                      @ 0x48
	.long	34                      @ 0x22
	.long	56                      @ 0x38
	.long	95                      @ 0x5f
	.long	92                      @ 0x5c
	.long	85                      @ 0x55
	.long	91                      @ 0x5b
	.long	90                      @ 0x5a
	.long	86                      @ 0x56
	.long	73                      @ 0x49
	.long	77                      @ 0x4d
	.long	65                      @ 0x41
	.long	51                      @ 0x33
	.long	44                      @ 0x2c
	.long	43                      @ 0x2b
	.long	42                      @ 0x2a
	.long	43                      @ 0x2b
	.long	20                      @ 0x14
	.long	30                      @ 0x1e
	.long	44                      @ 0x2c
	.long	55                      @ 0x37
	.long	78                      @ 0x4e
	.long	72                      @ 0x48
	.long	87                      @ 0x57
	.long	78                      @ 0x4e
	.long	61                      @ 0x3d
	.long	46                      @ 0x2e
	.long	54                      @ 0x36
	.long	37                      @ 0x25
	.long	30                      @ 0x1e
	.long	20                      @ 0x14
	.long	16                      @ 0x10
	.long	53                      @ 0x35
	.long	25                      @ 0x19
	.long	41                      @ 0x29
	.long	37                      @ 0x25
	.long	44                      @ 0x2c
	.long	59                      @ 0x3b
	.long	54                      @ 0x36
	.long	81                      @ 0x51
	.long	66                      @ 0x42
	.long	76                      @ 0x4c
	.long	57                      @ 0x39
	.long	54                      @ 0x36
	.long	37                      @ 0x25
	.long	18                      @ 0x12
	.long	39                      @ 0x27
	.long	11                      @ 0xb
	.long	35                      @ 0x23
	.long	33                      @ 0x21
	.long	31                      @ 0x1f
	.long	57                      @ 0x39
	.long	42                      @ 0x2a
	.long	82                      @ 0x52
	.long	72                      @ 0x48
	.long	80                      @ 0x50
	.long	47                      @ 0x2f
	.long	58                      @ 0x3a
	.long	55                      @ 0x37
	.long	21                      @ 0x15
	.long	22                      @ 0x16
	.long	26                      @ 0x1a
	.long	38                      @ 0x26
	.long	22                      @ 0x16
	.long	53                      @ 0x35
	.long	25                      @ 0x19
	.long	23                      @ 0x17
	.long	38                      @ 0x26
	.long	70                      @ 0x46
	.long	60                      @ 0x3c
	.long	51                      @ 0x33
	.long	36                      @ 0x24
	.long	55                      @ 0x37
	.long	26                      @ 0x1a
	.long	34                      @ 0x22
	.long	23                      @ 0x17
	.long	27                      @ 0x1b
	.long	14                      @ 0xe
	.long	9                       @ 0x9
	.long	7                       @ 0x7
	.long	34                      @ 0x22
	.long	32                      @ 0x20
	.long	28                      @ 0x1c
	.long	39                      @ 0x27
	.long	49                      @ 0x31
	.long	75                      @ 0x4b
	.long	30                      @ 0x1e
	.long	52                      @ 0x34
	.long	48                      @ 0x30
	.long	40                      @ 0x28
	.long	52                      @ 0x34
	.long	28                      @ 0x1c
	.long	18                      @ 0x12
	.long	17                      @ 0x11
	.long	9                       @ 0x9
	.long	5                       @ 0x5
	.long	45                      @ 0x2d
	.long	21                      @ 0x15
	.long	34                      @ 0x22
	.long	64                      @ 0x40
	.long	56                      @ 0x38
	.long	50                      @ 0x32
	.long	49                      @ 0x31
	.long	45                      @ 0x2d
	.long	31                      @ 0x1f
	.long	19                      @ 0x13
	.long	12                      @ 0xc
	.long	15                      @ 0xf
	.long	10                      @ 0xa
	.long	7                       @ 0x7
	.long	6                       @ 0x6
	.long	3                       @ 0x3
	.long	48                      @ 0x30
	.long	23                      @ 0x17
	.long	20                      @ 0x14
	.long	39                      @ 0x27
	.long	36                      @ 0x24
	.long	35                      @ 0x23
	.long	53                      @ 0x35
	.long	21                      @ 0x15
	.long	16                      @ 0x10
	.long	23                      @ 0x17
	.long	13                      @ 0xd
	.long	10                      @ 0xa
	.long	6                       @ 0x6
	.long	1                       @ 0x1
	.long	4                       @ 0x4
	.long	2                       @ 0x2
	.long	16                      @ 0x10
	.long	15                      @ 0xf
	.long	17                      @ 0x11
	.long	27                      @ 0x1b
	.long	25                      @ 0x19
	.long	20                      @ 0x14
	.long	29                      @ 0x1d
	.long	11                      @ 0xb
	.long	17                      @ 0x11
	.long	12                      @ 0xc
	.long	16                      @ 0x10
	.long	8                       @ 0x8
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.long	1                       @ 0x1
	.size	t13HB, 1024

	.type	t13l,%object            @ @t13l
t13l:
	.ascii	"\001\004\006\007\b\t\t\n\t\n\013\013\f\f\r\r\003\004\006\007\b\b\t\t\t\t\n\n\013\f\f\f\006\006\007\b\t\t\n\n\t\n\n\013\013\f\r\r\007\007\b\t\t\n\n\n\n\013\013\013\013\f\r\r\b\007\t\t\n\n\013\013\n\013\013\f\f\r\r\016\t\b\t\n\n\n\013\013\013\013\f\013\r\r\016\016\t\t\n\n\013\013\013\013\013\f\f\f\r\r\016\016\n\t\n\013\013\013\f\f\f\f\r\r\r\016\020\020\t\b\t\n\n\013\013\f\f\f\f\r\r\016\017\017\n\t\n\n\013\013\013\r\f\r\r\016\016\016\020\017\n\n\n\013\013\f\f\r\f\r\016\r\016\017\020\021\013\n\n\013\f\f\f\f\r\r\r\016\017\017\017\020\013\013\013\f\f\r\f\r\016\016\017\017\017\020\020\020\f\013\f\r\r\r\016\016\016\016\016\017\020\017\020\020\r\f\f\r\r\r\017\016\016\021\017\017\017\021\020\020\f\f\r\016\016\016\017\016\017\017\020\020\023\022\023\020"
	.size	t13l, 256

	.type	t15HB,%object           @ @t15HB
	.p2align	2
t15HB:
	.long	7                       @ 0x7
	.long	12                      @ 0xc
	.long	18                      @ 0x12
	.long	53                      @ 0x35
	.long	47                      @ 0x2f
	.long	76                      @ 0x4c
	.long	124                     @ 0x7c
	.long	108                     @ 0x6c
	.long	89                      @ 0x59
	.long	123                     @ 0x7b
	.long	108                     @ 0x6c
	.long	119                     @ 0x77
	.long	107                     @ 0x6b
	.long	81                      @ 0x51
	.long	122                     @ 0x7a
	.long	63                      @ 0x3f
	.long	13                      @ 0xd
	.long	5                       @ 0x5
	.long	16                      @ 0x10
	.long	27                      @ 0x1b
	.long	46                      @ 0x2e
	.long	36                      @ 0x24
	.long	61                      @ 0x3d
	.long	51                      @ 0x33
	.long	42                      @ 0x2a
	.long	70                      @ 0x46
	.long	52                      @ 0x34
	.long	83                      @ 0x53
	.long	65                      @ 0x41
	.long	41                      @ 0x29
	.long	59                      @ 0x3b
	.long	36                      @ 0x24
	.long	19                      @ 0x13
	.long	17                      @ 0x11
	.long	15                      @ 0xf
	.long	24                      @ 0x18
	.long	41                      @ 0x29
	.long	34                      @ 0x22
	.long	59                      @ 0x3b
	.long	48                      @ 0x30
	.long	40                      @ 0x28
	.long	64                      @ 0x40
	.long	50                      @ 0x32
	.long	78                      @ 0x4e
	.long	62                      @ 0x3e
	.long	80                      @ 0x50
	.long	56                      @ 0x38
	.long	33                      @ 0x21
	.long	29                      @ 0x1d
	.long	28                      @ 0x1c
	.long	25                      @ 0x19
	.long	43                      @ 0x2b
	.long	39                      @ 0x27
	.long	63                      @ 0x3f
	.long	55                      @ 0x37
	.long	93                      @ 0x5d
	.long	76                      @ 0x4c
	.long	59                      @ 0x3b
	.long	93                      @ 0x5d
	.long	72                      @ 0x48
	.long	54                      @ 0x36
	.long	75                      @ 0x4b
	.long	50                      @ 0x32
	.long	29                      @ 0x1d
	.long	52                      @ 0x34
	.long	22                      @ 0x16
	.long	42                      @ 0x2a
	.long	40                      @ 0x28
	.long	67                      @ 0x43
	.long	57                      @ 0x39
	.long	95                      @ 0x5f
	.long	79                      @ 0x4f
	.long	72                      @ 0x48
	.long	57                      @ 0x39
	.long	89                      @ 0x59
	.long	69                      @ 0x45
	.long	49                      @ 0x31
	.long	66                      @ 0x42
	.long	46                      @ 0x2e
	.long	27                      @ 0x1b
	.long	77                      @ 0x4d
	.long	37                      @ 0x25
	.long	35                      @ 0x23
	.long	66                      @ 0x42
	.long	58                      @ 0x3a
	.long	52                      @ 0x34
	.long	91                      @ 0x5b
	.long	74                      @ 0x4a
	.long	62                      @ 0x3e
	.long	48                      @ 0x30
	.long	79                      @ 0x4f
	.long	63                      @ 0x3f
	.long	90                      @ 0x5a
	.long	62                      @ 0x3e
	.long	40                      @ 0x28
	.long	38                      @ 0x26
	.long	125                     @ 0x7d
	.long	32                      @ 0x20
	.long	60                      @ 0x3c
	.long	56                      @ 0x38
	.long	50                      @ 0x32
	.long	92                      @ 0x5c
	.long	78                      @ 0x4e
	.long	65                      @ 0x41
	.long	55                      @ 0x37
	.long	87                      @ 0x57
	.long	71                      @ 0x47
	.long	51                      @ 0x33
	.long	73                      @ 0x49
	.long	51                      @ 0x33
	.long	70                      @ 0x46
	.long	30                      @ 0x1e
	.long	109                     @ 0x6d
	.long	53                      @ 0x35
	.long	49                      @ 0x31
	.long	94                      @ 0x5e
	.long	88                      @ 0x58
	.long	75                      @ 0x4b
	.long	66                      @ 0x42
	.long	122                     @ 0x7a
	.long	91                      @ 0x5b
	.long	73                      @ 0x49
	.long	56                      @ 0x38
	.long	42                      @ 0x2a
	.long	64                      @ 0x40
	.long	44                      @ 0x2c
	.long	21                      @ 0x15
	.long	25                      @ 0x19
	.long	90                      @ 0x5a
	.long	43                      @ 0x2b
	.long	41                      @ 0x29
	.long	77                      @ 0x4d
	.long	73                      @ 0x49
	.long	63                      @ 0x3f
	.long	56                      @ 0x38
	.long	92                      @ 0x5c
	.long	77                      @ 0x4d
	.long	66                      @ 0x42
	.long	47                      @ 0x2f
	.long	67                      @ 0x43
	.long	48                      @ 0x30
	.long	53                      @ 0x35
	.long	36                      @ 0x24
	.long	20                      @ 0x14
	.long	71                      @ 0x47
	.long	34                      @ 0x22
	.long	67                      @ 0x43
	.long	60                      @ 0x3c
	.long	58                      @ 0x3a
	.long	49                      @ 0x31
	.long	88                      @ 0x58
	.long	76                      @ 0x4c
	.long	67                      @ 0x43
	.long	106                     @ 0x6a
	.long	71                      @ 0x47
	.long	54                      @ 0x36
	.long	38                      @ 0x26
	.long	39                      @ 0x27
	.long	23                      @ 0x17
	.long	15                      @ 0xf
	.long	109                     @ 0x6d
	.long	53                      @ 0x35
	.long	51                      @ 0x33
	.long	47                      @ 0x2f
	.long	90                      @ 0x5a
	.long	82                      @ 0x52
	.long	58                      @ 0x3a
	.long	57                      @ 0x39
	.long	48                      @ 0x30
	.long	72                      @ 0x48
	.long	57                      @ 0x39
	.long	41                      @ 0x29
	.long	23                      @ 0x17
	.long	27                      @ 0x1b
	.long	62                      @ 0x3e
	.long	9                       @ 0x9
	.long	86                      @ 0x56
	.long	42                      @ 0x2a
	.long	40                      @ 0x28
	.long	37                      @ 0x25
	.long	70                      @ 0x46
	.long	64                      @ 0x40
	.long	52                      @ 0x34
	.long	43                      @ 0x2b
	.long	70                      @ 0x46
	.long	55                      @ 0x37
	.long	42                      @ 0x2a
	.long	25                      @ 0x19
	.long	29                      @ 0x1d
	.long	18                      @ 0x12
	.long	11                      @ 0xb
	.long	11                      @ 0xb
	.long	118                     @ 0x76
	.long	68                      @ 0x44
	.long	30                      @ 0x1e
	.long	55                      @ 0x37
	.long	50                      @ 0x32
	.long	46                      @ 0x2e
	.long	74                      @ 0x4a
	.long	65                      @ 0x41
	.long	49                      @ 0x31
	.long	39                      @ 0x27
	.long	24                      @ 0x18
	.long	16                      @ 0x10
	.long	22                      @ 0x16
	.long	13                      @ 0xd
	.long	14                      @ 0xe
	.long	7                       @ 0x7
	.long	91                      @ 0x5b
	.long	44                      @ 0x2c
	.long	39                      @ 0x27
	.long	38                      @ 0x26
	.long	34                      @ 0x22
	.long	63                      @ 0x3f
	.long	52                      @ 0x34
	.long	45                      @ 0x2d
	.long	31                      @ 0x1f
	.long	52                      @ 0x34
	.long	28                      @ 0x1c
	.long	19                      @ 0x13
	.long	14                      @ 0xe
	.long	8                       @ 0x8
	.long	9                       @ 0x9
	.long	3                       @ 0x3
	.long	123                     @ 0x7b
	.long	60                      @ 0x3c
	.long	58                      @ 0x3a
	.long	53                      @ 0x35
	.long	47                      @ 0x2f
	.long	43                      @ 0x2b
	.long	32                      @ 0x20
	.long	22                      @ 0x16
	.long	37                      @ 0x25
	.long	24                      @ 0x18
	.long	17                      @ 0x11
	.long	12                      @ 0xc
	.long	15                      @ 0xf
	.long	10                      @ 0xa
	.long	2                       @ 0x2
	.long	1                       @ 0x1
	.long	71                      @ 0x47
	.long	37                      @ 0x25
	.long	34                      @ 0x22
	.long	30                      @ 0x1e
	.long	28                      @ 0x1c
	.long	20                      @ 0x14
	.long	17                      @ 0x11
	.long	26                      @ 0x1a
	.long	21                      @ 0x15
	.long	16                      @ 0x10
	.long	10                      @ 0xa
	.long	6                       @ 0x6
	.long	8                       @ 0x8
	.long	6                       @ 0x6
	.long	2                       @ 0x2
	.long	0                       @ 0x0
	.size	t15HB, 1024

	.type	t15l,%object            @ @t15l
t15l:
	.ascii	"\003\004\005\007\007\b\t\t\t\n\n\013\013\013\f\r\004\003\005\006\007\007\b\b\b\t\t\n\n\n\013\013\005\005\005\006\007\007\b\b\b\t\t\n\n\013\013\013\006\006\006\007\007\b\b\t\t\t\n\n\n\013\013\013\007\006\007\007\b\b\t\t\t\t\n\n\n\013\013\013\b\007\007\b\b\b\t\t\t\t\n\n\013\013\013\f\t\007\b\b\b\t\t\t\t\n\n\n\013\013\f\f\t\b\b\t\t\t\t\n\n\n\n\n\013\013\013\f\t\b\b\t\t\t\t\n\n\n\n\013\013\f\f\f\t\b\t\t\t\t\n\n\n\013\013\013\013\f\f\f\n\t\t\t\n\n\n\n\n\013\013\013\013\f\r\f\n\t\t\t\n\n\n\n\013\013\013\013\f\f\f\r\013\n\t\n\n\n\013\013\013\013\013\013\f\f\r\r\013\n\n\n\n\013\013\013\013\f\f\f\f\f\r\r\f\013\013\013\013\013\013\013\f\f\f\f\r\r\f\r\f\013\013\013\013\013\013\f\f\f\f\f\r\r\r\r"
	.size	t15l, 256

	.type	t16HB,%object           @ @t16HB
	.p2align	2
t16HB:
	.long	1                       @ 0x1
	.long	5                       @ 0x5
	.long	14                      @ 0xe
	.long	44                      @ 0x2c
	.long	74                      @ 0x4a
	.long	63                      @ 0x3f
	.long	110                     @ 0x6e
	.long	93                      @ 0x5d
	.long	172                     @ 0xac
	.long	149                     @ 0x95
	.long	138                     @ 0x8a
	.long	242                     @ 0xf2
	.long	225                     @ 0xe1
	.long	195                     @ 0xc3
	.long	376                     @ 0x178
	.long	17                      @ 0x11
	.long	3                       @ 0x3
	.long	4                       @ 0x4
	.long	12                      @ 0xc
	.long	20                      @ 0x14
	.long	35                      @ 0x23
	.long	62                      @ 0x3e
	.long	53                      @ 0x35
	.long	47                      @ 0x2f
	.long	83                      @ 0x53
	.long	75                      @ 0x4b
	.long	68                      @ 0x44
	.long	119                     @ 0x77
	.long	201                     @ 0xc9
	.long	107                     @ 0x6b
	.long	207                     @ 0xcf
	.long	9                       @ 0x9
	.long	15                      @ 0xf
	.long	13                      @ 0xd
	.long	23                      @ 0x17
	.long	38                      @ 0x26
	.long	67                      @ 0x43
	.long	58                      @ 0x3a
	.long	103                     @ 0x67
	.long	90                      @ 0x5a
	.long	161                     @ 0xa1
	.long	72                      @ 0x48
	.long	127                     @ 0x7f
	.long	117                     @ 0x75
	.long	110                     @ 0x6e
	.long	209                     @ 0xd1
	.long	206                     @ 0xce
	.long	16                      @ 0x10
	.long	45                      @ 0x2d
	.long	21                      @ 0x15
	.long	39                      @ 0x27
	.long	69                      @ 0x45
	.long	64                      @ 0x40
	.long	114                     @ 0x72
	.long	99                      @ 0x63
	.long	87                      @ 0x57
	.long	158                     @ 0x9e
	.long	140                     @ 0x8c
	.long	252                     @ 0xfc
	.long	212                     @ 0xd4
	.long	199                     @ 0xc7
	.long	387                     @ 0x183
	.long	365                     @ 0x16d
	.long	26                      @ 0x1a
	.long	75                      @ 0x4b
	.long	36                      @ 0x24
	.long	68                      @ 0x44
	.long	65                      @ 0x41
	.long	115                     @ 0x73
	.long	101                     @ 0x65
	.long	179                     @ 0xb3
	.long	164                     @ 0xa4
	.long	155                     @ 0x9b
	.long	264                     @ 0x108
	.long	246                     @ 0xf6
	.long	226                     @ 0xe2
	.long	395                     @ 0x18b
	.long	382                     @ 0x17e
	.long	362                     @ 0x16a
	.long	9                       @ 0x9
	.long	66                      @ 0x42
	.long	30                      @ 0x1e
	.long	59                      @ 0x3b
	.long	56                      @ 0x38
	.long	102                     @ 0x66
	.long	185                     @ 0xb9
	.long	173                     @ 0xad
	.long	265                     @ 0x109
	.long	142                     @ 0x8e
	.long	253                     @ 0xfd
	.long	232                     @ 0xe8
	.long	400                     @ 0x190
	.long	388                     @ 0x184
	.long	378                     @ 0x17a
	.long	445                     @ 0x1bd
	.long	16                      @ 0x10
	.long	111                     @ 0x6f
	.long	54                      @ 0x36
	.long	52                      @ 0x34
	.long	100                     @ 0x64
	.long	184                     @ 0xb8
	.long	178                     @ 0xb2
	.long	160                     @ 0xa0
	.long	133                     @ 0x85
	.long	257                     @ 0x101
	.long	244                     @ 0xf4
	.long	228                     @ 0xe4
	.long	217                     @ 0xd9
	.long	385                     @ 0x181
	.long	366                     @ 0x16e
	.long	715                     @ 0x2cb
	.long	10                      @ 0xa
	.long	98                      @ 0x62
	.long	48                      @ 0x30
	.long	91                      @ 0x5b
	.long	88                      @ 0x58
	.long	165                     @ 0xa5
	.long	157                     @ 0x9d
	.long	148                     @ 0x94
	.long	261                     @ 0x105
	.long	248                     @ 0xf8
	.long	407                     @ 0x197
	.long	397                     @ 0x18d
	.long	372                     @ 0x174
	.long	380                     @ 0x17c
	.long	889                     @ 0x379
	.long	884                     @ 0x374
	.long	8                       @ 0x8
	.long	85                      @ 0x55
	.long	84                      @ 0x54
	.long	81                      @ 0x51
	.long	159                     @ 0x9f
	.long	156                     @ 0x9c
	.long	143                     @ 0x8f
	.long	260                     @ 0x104
	.long	249                     @ 0xf9
	.long	427                     @ 0x1ab
	.long	401                     @ 0x191
	.long	392                     @ 0x188
	.long	383                     @ 0x17f
	.long	727                     @ 0x2d7
	.long	713                     @ 0x2c9
	.long	708                     @ 0x2c4
	.long	7                       @ 0x7
	.long	154                     @ 0x9a
	.long	76                      @ 0x4c
	.long	73                      @ 0x49
	.long	141                     @ 0x8d
	.long	131                     @ 0x83
	.long	256                     @ 0x100
	.long	245                     @ 0xf5
	.long	426                     @ 0x1aa
	.long	406                     @ 0x196
	.long	394                     @ 0x18a
	.long	384                     @ 0x180
	.long	735                     @ 0x2df
	.long	359                     @ 0x167
	.long	710                     @ 0x2c6
	.long	352                     @ 0x160
	.long	11                      @ 0xb
	.long	139                     @ 0x8b
	.long	129                     @ 0x81
	.long	67                      @ 0x43
	.long	125                     @ 0x7d
	.long	247                     @ 0xf7
	.long	233                     @ 0xe9
	.long	229                     @ 0xe5
	.long	219                     @ 0xdb
	.long	393                     @ 0x189
	.long	743                     @ 0x2e7
	.long	737                     @ 0x2e1
	.long	720                     @ 0x2d0
	.long	885                     @ 0x375
	.long	882                     @ 0x372
	.long	439                     @ 0x1b7
	.long	4                       @ 0x4
	.long	243                     @ 0xf3
	.long	120                     @ 0x78
	.long	118                     @ 0x76
	.long	115                     @ 0x73
	.long	227                     @ 0xe3
	.long	223                     @ 0xdf
	.long	396                     @ 0x18c
	.long	746                     @ 0x2ea
	.long	742                     @ 0x2e6
	.long	736                     @ 0x2e0
	.long	721                     @ 0x2d1
	.long	712                     @ 0x2c8
	.long	706                     @ 0x2c2
	.long	223                     @ 0xdf
	.long	436                     @ 0x1b4
	.long	6                       @ 0x6
	.long	202                     @ 0xca
	.long	224                     @ 0xe0
	.long	222                     @ 0xde
	.long	218                     @ 0xda
	.long	216                     @ 0xd8
	.long	389                     @ 0x185
	.long	386                     @ 0x182
	.long	381                     @ 0x17d
	.long	364                     @ 0x16c
	.long	888                     @ 0x378
	.long	443                     @ 0x1bb
	.long	707                     @ 0x2c3
	.long	440                     @ 0x1b8
	.long	437                     @ 0x1b5
	.long	1728                    @ 0x6c0
	.long	4                       @ 0x4
	.long	747                     @ 0x2eb
	.long	211                     @ 0xd3
	.long	210                     @ 0xd2
	.long	208                     @ 0xd0
	.long	370                     @ 0x172
	.long	379                     @ 0x17b
	.long	734                     @ 0x2de
	.long	723                     @ 0x2d3
	.long	714                     @ 0x2ca
	.long	1735                    @ 0x6c7
	.long	883                     @ 0x373
	.long	877                     @ 0x36d
	.long	876                     @ 0x36c
	.long	3459                    @ 0xd83
	.long	865                     @ 0x361
	.long	2                       @ 0x2
	.long	377                     @ 0x179
	.long	369                     @ 0x171
	.long	102                     @ 0x66
	.long	187                     @ 0xbb
	.long	726                     @ 0x2d6
	.long	722                     @ 0x2d2
	.long	358                     @ 0x166
	.long	711                     @ 0x2c7
	.long	709                     @ 0x2c5
	.long	866                     @ 0x362
	.long	1734                    @ 0x6c6
	.long	871                     @ 0x367
	.long	3458                    @ 0xd82
	.long	870                     @ 0x366
	.long	434                     @ 0x1b2
	.long	0                       @ 0x0
	.long	12                      @ 0xc
	.long	10                      @ 0xa
	.long	7                       @ 0x7
	.long	11                      @ 0xb
	.long	10                      @ 0xa
	.long	17                      @ 0x11
	.long	11                      @ 0xb
	.long	9                       @ 0x9
	.long	13                      @ 0xd
	.long	12                      @ 0xc
	.long	10                      @ 0xa
	.long	7                       @ 0x7
	.long	5                       @ 0x5
	.long	3                       @ 0x3
	.long	1                       @ 0x1
	.long	3                       @ 0x3
	.size	t16HB, 1024

	.type	t16l,%object            @ @t16l
t16l:
	.ascii	"\001\004\006\b\t\t\n\n\013\013\013\f\f\f\r\t\003\004\006\007\b\t\t\t\n\n\n\013\f\013\f\b\006\006\007\b\t\t\n\n\013\n\013\013\013\f\f\t\b\007\b\t\t\n\n\n\013\013\f\f\f\r\r\n\t\b\t\t\n\n\013\013\013\f\f\f\r\r\r\t\t\b\t\t\n\013\013\f\013\f\f\r\r\r\016\n\n\t\t\n\013\013\013\013\f\f\f\f\r\r\016\n\n\t\n\n\013\013\013\f\f\r\r\r\r\017\017\n\n\n\n\013\013\013\f\f\r\r\r\r\016\016\016\n\013\n\n\013\013\f\f\r\r\r\r\016\r\016\r\013\013\013\n\013\f\f\f\f\r\016\016\016\017\017\016\n\f\013\013\013\f\f\r\016\016\016\016\016\016\r\016\013\f\f\f\f\f\r\r\r\r\017\016\016\016\016\020\013\016\f\f\f\r\r\016\016\016\020\017\017\017\021\017\013\r\r\013\f\016\016\r\016\016\017\020\017\021\017\016\013\t\b\b\t\t\n\n\n\013\013\013\013\013\013\013\b"
	.size	t16l, 256

	.type	t24HB,%object           @ @t24HB
	.p2align	2
t24HB:
	.long	15                      @ 0xf
	.long	13                      @ 0xd
	.long	46                      @ 0x2e
	.long	80                      @ 0x50
	.long	146                     @ 0x92
	.long	262                     @ 0x106
	.long	248                     @ 0xf8
	.long	434                     @ 0x1b2
	.long	426                     @ 0x1aa
	.long	669                     @ 0x29d
	.long	653                     @ 0x28d
	.long	649                     @ 0x289
	.long	621                     @ 0x26d
	.long	517                     @ 0x205
	.long	1032                    @ 0x408
	.long	88                      @ 0x58
	.long	14                      @ 0xe
	.long	12                      @ 0xc
	.long	21                      @ 0x15
	.long	38                      @ 0x26
	.long	71                      @ 0x47
	.long	130                     @ 0x82
	.long	122                     @ 0x7a
	.long	216                     @ 0xd8
	.long	209                     @ 0xd1
	.long	198                     @ 0xc6
	.long	327                     @ 0x147
	.long	345                     @ 0x159
	.long	319                     @ 0x13f
	.long	297                     @ 0x129
	.long	279                     @ 0x117
	.long	42                      @ 0x2a
	.long	47                      @ 0x2f
	.long	22                      @ 0x16
	.long	41                      @ 0x29
	.long	74                      @ 0x4a
	.long	68                      @ 0x44
	.long	128                     @ 0x80
	.long	120                     @ 0x78
	.long	221                     @ 0xdd
	.long	207                     @ 0xcf
	.long	194                     @ 0xc2
	.long	182                     @ 0xb6
	.long	340                     @ 0x154
	.long	315                     @ 0x13b
	.long	295                     @ 0x127
	.long	541                     @ 0x21d
	.long	18                      @ 0x12
	.long	81                      @ 0x51
	.long	39                      @ 0x27
	.long	75                      @ 0x4b
	.long	70                      @ 0x46
	.long	134                     @ 0x86
	.long	125                     @ 0x7d
	.long	116                     @ 0x74
	.long	220                     @ 0xdc
	.long	204                     @ 0xcc
	.long	190                     @ 0xbe
	.long	178                     @ 0xb2
	.long	325                     @ 0x145
	.long	311                     @ 0x137
	.long	293                     @ 0x125
	.long	271                     @ 0x10f
	.long	16                      @ 0x10
	.long	147                     @ 0x93
	.long	72                      @ 0x48
	.long	69                      @ 0x45
	.long	135                     @ 0x87
	.long	127                     @ 0x7f
	.long	118                     @ 0x76
	.long	112                     @ 0x70
	.long	210                     @ 0xd2
	.long	200                     @ 0xc8
	.long	188                     @ 0xbc
	.long	352                     @ 0x160
	.long	323                     @ 0x143
	.long	306                     @ 0x132
	.long	285                     @ 0x11d
	.long	540                     @ 0x21c
	.long	14                      @ 0xe
	.long	263                     @ 0x107
	.long	66                      @ 0x42
	.long	129                     @ 0x81
	.long	126                     @ 0x7e
	.long	119                     @ 0x77
	.long	114                     @ 0x72
	.long	214                     @ 0xd6
	.long	202                     @ 0xca
	.long	192                     @ 0xc0
	.long	180                     @ 0xb4
	.long	341                     @ 0x155
	.long	317                     @ 0x13d
	.long	301                     @ 0x12d
	.long	281                     @ 0x119
	.long	262                     @ 0x106
	.long	12                      @ 0xc
	.long	249                     @ 0xf9
	.long	123                     @ 0x7b
	.long	121                     @ 0x79
	.long	117                     @ 0x75
	.long	113                     @ 0x71
	.long	215                     @ 0xd7
	.long	206                     @ 0xce
	.long	195                     @ 0xc3
	.long	185                     @ 0xb9
	.long	347                     @ 0x15b
	.long	330                     @ 0x14a
	.long	308                     @ 0x134
	.long	291                     @ 0x123
	.long	272                     @ 0x110
	.long	520                     @ 0x208
	.long	10                      @ 0xa
	.long	435                     @ 0x1b3
	.long	115                     @ 0x73
	.long	111                     @ 0x6f
	.long	109                     @ 0x6d
	.long	211                     @ 0xd3
	.long	203                     @ 0xcb
	.long	196                     @ 0xc4
	.long	187                     @ 0xbb
	.long	353                     @ 0x161
	.long	332                     @ 0x14c
	.long	313                     @ 0x139
	.long	298                     @ 0x12a
	.long	283                     @ 0x11b
	.long	531                     @ 0x213
	.long	381                     @ 0x17d
	.long	17                      @ 0x11
	.long	427                     @ 0x1ab
	.long	212                     @ 0xd4
	.long	208                     @ 0xd0
	.long	205                     @ 0xcd
	.long	201                     @ 0xc9
	.long	193                     @ 0xc1
	.long	186                     @ 0xba
	.long	177                     @ 0xb1
	.long	169                     @ 0xa9
	.long	320                     @ 0x140
	.long	303                     @ 0x12f
	.long	286                     @ 0x11e
	.long	268                     @ 0x10c
	.long	514                     @ 0x202
	.long	377                     @ 0x179
	.long	16                      @ 0x10
	.long	335                     @ 0x14f
	.long	199                     @ 0xc7
	.long	197                     @ 0xc5
	.long	191                     @ 0xbf
	.long	189                     @ 0xbd
	.long	181                     @ 0xb5
	.long	174                     @ 0xae
	.long	333                     @ 0x14d
	.long	321                     @ 0x141
	.long	305                     @ 0x131
	.long	289                     @ 0x121
	.long	275                     @ 0x113
	.long	521                     @ 0x209
	.long	379                     @ 0x17b
	.long	371                     @ 0x173
	.long	11                      @ 0xb
	.long	668                     @ 0x29c
	.long	184                     @ 0xb8
	.long	183                     @ 0xb7
	.long	179                     @ 0xb3
	.long	175                     @ 0xaf
	.long	344                     @ 0x158
	.long	331                     @ 0x14b
	.long	314                     @ 0x13a
	.long	304                     @ 0x130
	.long	290                     @ 0x122
	.long	277                     @ 0x115
	.long	530                     @ 0x212
	.long	383                     @ 0x17f
	.long	373                     @ 0x175
	.long	366                     @ 0x16e
	.long	10                      @ 0xa
	.long	652                     @ 0x28c
	.long	346                     @ 0x15a
	.long	171                     @ 0xab
	.long	168                     @ 0xa8
	.long	164                     @ 0xa4
	.long	318                     @ 0x13e
	.long	309                     @ 0x135
	.long	299                     @ 0x12b
	.long	287                     @ 0x11f
	.long	276                     @ 0x114
	.long	263                     @ 0x107
	.long	513                     @ 0x201
	.long	375                     @ 0x177
	.long	368                     @ 0x170
	.long	362                     @ 0x16a
	.long	6                       @ 0x6
	.long	648                     @ 0x288
	.long	322                     @ 0x142
	.long	316                     @ 0x13c
	.long	312                     @ 0x138
	.long	307                     @ 0x133
	.long	302                     @ 0x12e
	.long	292                     @ 0x124
	.long	284                     @ 0x11c
	.long	269                     @ 0x10d
	.long	261                     @ 0x105
	.long	512                     @ 0x200
	.long	376                     @ 0x178
	.long	370                     @ 0x172
	.long	364                     @ 0x16c
	.long	359                     @ 0x167
	.long	4                       @ 0x4
	.long	620                     @ 0x26c
	.long	300                     @ 0x12c
	.long	296                     @ 0x128
	.long	294                     @ 0x126
	.long	288                     @ 0x120
	.long	282                     @ 0x11a
	.long	273                     @ 0x111
	.long	266                     @ 0x10a
	.long	515                     @ 0x203
	.long	380                     @ 0x17c
	.long	374                     @ 0x176
	.long	369                     @ 0x171
	.long	365                     @ 0x16d
	.long	361                     @ 0x169
	.long	357                     @ 0x165
	.long	2                       @ 0x2
	.long	1033                    @ 0x409
	.long	280                     @ 0x118
	.long	278                     @ 0x116
	.long	274                     @ 0x112
	.long	267                     @ 0x10b
	.long	264                     @ 0x108
	.long	259                     @ 0x103
	.long	382                     @ 0x17e
	.long	378                     @ 0x17a
	.long	372                     @ 0x174
	.long	367                     @ 0x16f
	.long	363                     @ 0x16b
	.long	360                     @ 0x168
	.long	358                     @ 0x166
	.long	356                     @ 0x164
	.long	0                       @ 0x0
	.long	43                      @ 0x2b
	.long	20                      @ 0x14
	.long	19                      @ 0x13
	.long	17                      @ 0x11
	.long	15                      @ 0xf
	.long	13                      @ 0xd
	.long	11                      @ 0xb
	.long	9                       @ 0x9
	.long	7                       @ 0x7
	.long	6                       @ 0x6
	.long	4                       @ 0x4
	.long	7                       @ 0x7
	.long	5                       @ 0x5
	.long	3                       @ 0x3
	.long	1                       @ 0x1
	.long	3                       @ 0x3
	.size	t24HB, 1024

	.type	t24l,%object            @ @t24l
t24l:
	.ascii	"\004\004\006\007\b\t\t\n\n\013\013\013\013\013\f\t\004\004\005\006\007\b\b\t\t\t\n\n\n\n\n\b\006\005\006\007\007\b\b\t\t\t\t\n\n\n\013\007\007\006\007\007\b\b\b\t\t\t\t\n\n\n\n\007\b\007\007\b\b\b\b\t\t\t\n\n\n\n\013\007\t\007\b\b\b\b\t\t\t\t\n\n\n\n\n\007\t\b\b\b\b\t\t\t\t\n\n\n\n\n\013\007\n\b\b\b\t\t\t\t\n\n\n\n\n\013\013\b\n\t\t\t\t\t\t\t\t\n\n\n\n\013\013\b\n\t\t\t\t\t\t\n\n\n\n\n\013\013\013\b\013\t\t\t\t\n\n\n\n\n\n\013\013\013\013\b\013\n\t\t\t\n\n\n\n\n\n\013\013\013\013\b\013\n\n\n\n\n\n\n\n\n\013\013\013\013\013\b\013\n\n\n\n\n\n\n\013\013\013\013\013\013\013\b\f\n\n\n\n\n\n\013\013\013\013\013\013\013\013\b\b\007\007\007\007\007\007\007\007\007\007\b\b\b\b\004"
	.size	t24l, 256

	.type	t32HB,%object           @ @t32HB
	.p2align	2
t32HB:
	.long	1                       @ 0x1
	.long	5                       @ 0x5
	.long	4                       @ 0x4
	.long	5                       @ 0x5
	.long	6                       @ 0x6
	.long	5                       @ 0x5
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.long	7                       @ 0x7
	.long	3                       @ 0x3
	.long	6                       @ 0x6
	.long	0                       @ 0x0
	.long	7                       @ 0x7
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	1                       @ 0x1
	.size	t32HB, 64

	.type	t32l,%object            @ @t32l
t32l:
	.ascii	"\001\004\004\005\004\006\005\006\004\005\005\006\005\006\006\006"
	.size	t32l, 16

	.type	t33HB,%object           @ @t33HB
	.p2align	2
t33HB:
	.long	15                      @ 0xf
	.long	14                      @ 0xe
	.long	13                      @ 0xd
	.long	12                      @ 0xc
	.long	11                      @ 0xb
	.long	10                      @ 0xa
	.long	9                       @ 0x9
	.long	8                       @ 0x8
	.long	7                       @ 0x7
	.long	6                       @ 0x6
	.long	5                       @ 0x5
	.long	4                       @ 0x4
	.long	3                       @ 0x3
	.long	2                       @ 0x2
	.long	1                       @ 0x1
	.long	0                       @ 0x0
	.size	t33HB, 64

	.type	t33l,%object            @ @t33l
t33l:
	.zero	16,4
	.size	t33l, 16

	.type	psy_data,%object        @ @psy_data
	.globl	psy_data
	.p2align	3
psy_data:
	.long	0                       @ double 48000
	.long	1088909312
	.long	0                       @ double 61
	.long	1078886400
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 24.5
	.long	1077444608
	.long	2611340116              @ double 4.532
	.long	1074929860
	.long	1889785610              @ double 0.96999999999999997
	.long	1072630333
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 24.5
	.long	1077444608
	.long	2611340116              @ double 4.532
	.long	1074929860
	.long	3264175145              @ double 0.755
	.long	1072179445
	.long	2473901162              @ double 0.46899999999999997
	.long	1071514648
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 24.5
	.long	1077444608
	.long	2611340116              @ double 4.532
	.long	1074929860
	.long	755914244               @ double 0.73799999999999999
	.long	1072143794
	.long	2473901162              @ double 0.93799999999999994
	.long	1072563224
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 24.5
	.long	1077444608
	.long	1752346657              @ double 0.90400000000000003
	.long	1072491921
	.long	4123168604              @ double 0.72999999999999998
	.long	1072127016
	.long	3676492005              @ double 1.4059999999999999
	.long	1073118969
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 24.5
	.long	1077444608
	.long	1752346657              @ double 0.90400000000000003
	.long	1072491921
	.long	206158430               @ double 0.72399999999999998
	.long	1072114434
	.long	0                       @ double 1.875
	.long	1073610752
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 20
	.long	1077149696
	.long	1889785610              @ double 0.089999999999999996
	.long	1068960317
	.long	3848290697              @ double 0.72299999999999998
	.long	1072112336
	.long	309237645               @ double 2.3439999999999999
	.long	1073922179
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 20
	.long	1077149696
	.long	1889785610              @ double 0.089999999999999996
	.long	1068960317
	.long	3848290697              @ double 0.72299999999999998
	.long	1072112336
	.long	618475291               @ double 2.8130000000000002
	.long	1074168070
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 20
	.long	1077149696
	.long	240518169               @ double 0.029000000000000001
	.long	1067299373
	.long	3848290697              @ double 0.72299999999999998
	.long	1072112336
	.long	3985729651              @ double 3.2810000000000001
	.long	1074413436
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 20
	.long	1077149696
	.long	240518169               @ double 0.029000000000000001
	.long	1067299373
	.long	584115552               @ double 0.71799999999999997
	.long	1072101851
	.long	0                       @ double 3.75
	.long	1074659328
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 20
	.long	1077149696
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	3779571220              @ double 0.68999999999999995
	.long	1072043130
	.long	2817498546              @ double 4.1989999999999998
	.long	1074842566
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 20
	.long	1077149696
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	1374389535              @ double 0.66000000000000003
	.long	1071980216
	.long	0                       @ double 4.625
	.long	1074954240
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 18
	.long	1077018624
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	1855425872              @ double 0.64100000000000001
	.long	1071940370
	.long	3298534883              @ double 5.0469999999999997
	.long	1075064864
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 18
	.long	1077018624
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	858993459               @ double 0.59999999999999998
	.long	1071854387
	.long	309237645               @ double 5.4379999999999997
	.long	1075167363
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 18
	.long	1077018624
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	3298534883              @ double 0.58399999999999996
	.long	1071820832
	.long	996432413               @ double 5.8280000000000003
	.long	1075269599
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 12
	.long	1076363264
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	3710851744              @ double 0.53200000000000003
	.long	1071711780
	.long	309237645               @ double 6.1879999999999997
	.long	1075363971
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 12
	.long	1076363264
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	2680059593              @ double 0.53700000000000003
	.long	1071722266
	.long	721554506               @ double 6.5220000000000002
	.long	1075451527
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 6
	.long	1075314688
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	1133871366              @ double 0.85699999999999998
	.long	1072393355
	.long	240518169               @ double 7.1740000000000004
	.long	1075622445
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 6
	.long	1075314688
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	1786706395              @ double 0.85799999999999998
	.long	1072395452
	.long	1477468750              @ double 7.8010000000000002
	.long	1075786809
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	2817498546              @ double 0.85299999999999998
	.long	1072384966
	.long	4054449127              @ double 8.4019999999999992
	.long	1075891666
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	1065151889              @ double 0.82399999999999995
	.long	1072324149
	.long	2370821947              @ double 8.9659999999999993
	.long	1075965591
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	1099511628              @ double 0.77800000000000002
	.long	1072227680
	.long	3642132267              @ double 9.4839999999999999
	.long	1076033486
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	2061584302              @ double 0.73999999999999999
	.long	1072147988
	.long	2370821947              @ double 9.9659999999999993
	.long	1076096663
	.long	0                       @ double 22
	.long	1077280768
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	3298534883              @ double 0.70899999999999996
	.long	1072082976
	.long	2886218023              @ double 10.426
	.long	1076156956
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	3229815407              @ double 0.67600000000000005
	.long	1072013770
	.long	1511828488              @ double 10.866
	.long	1076214628
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	274877907               @ double 0.63200000000000001
	.long	1071921496
	.long	377957122               @ double 11.279
	.long	1076268761
	.long	0                       @ double 25
	.long	1077477376
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	4226247819              @ double 0.59199999999999997
	.long	1071837609
	.long	721554506               @ double 11.669
	.long	1076319879
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	240518169               @ double 0.55300000000000005
	.long	1071755821
	.long	103079215               @ double 12.042
	.long	1076368769
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	2233382994              @ double 0.51000000000000001
	.long	1071665643
	.long	3401614098              @ double 12.385999999999999
	.long	1076413857
	.long	0                       @ double 28
	.long	1077673984
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	4191888081              @ double 0.51300000000000001
	.long	1071671934
	.long	3917010174              @ double 12.721
	.long	1076457766
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	1786706395              @ double 0.60799999999999998
	.long	1071871164
	.long	1202590843              @ double 13.115
	.long	1076509409
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	1271310320              @ double 0.67300000000000004
	.long	1072007479
	.long	1992864825              @ double 13.561999999999999
	.long	1076567998
	.long	0                       @ double 31
	.long	1077870592
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	3539053052              @ double 0.63700000000000001
	.long	1071931981
	.long	3642132267              @ double 13.984
	.long	1076623310
	.long	0                       @ double 32
	.long	1077936128
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	309237645               @ double 0.58599999999999997
	.long	1071825027
	.long	3058016715              @ double 14.371
	.long	1076674035
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	3401614098              @ double 0.57099999999999995
	.long	1071793569
	.long	1511828488              @ double 14.741
	.long	1076722532
	.long	0                       @ double 34
	.long	1078001664
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.035999999999999997
	.long	1067609751
	.long	2714419331              @ double 0.61599999999999999
	.long	1071887941
	.long	343597384               @ double 15.140000000000001
	.long	1076774830
	.long	0                       @ double 35
	.long	1078034432
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.035999999999999997
	.long	1067609751
	.long	1202590843              @ double 0.64000000000000001
	.long	1071938273
	.long	2302102471              @ double 15.563000000000001
	.long	1076830273
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.035999999999999997
	.long	1067609751
	.long	3848290697              @ double 0.59799999999999998
	.long	1071850192
	.long	1133871366              @ double 15.962
	.long	1076882571
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.035999999999999997
	.long	1067609751
	.long	3332894622              @ double 0.53800000000000003
	.long	1071724363
	.long	2851858285              @ double 16.324000000000002
	.long	1076908785
	.long	0                       @ double 38
	.long	1078132736
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.035999999999999997
	.long	1067609751
	.long	3539053052              @ double 0.51200000000000001
	.long	1071669837
	.long	1889785610              @ double 16.664999999999999
	.long	1076931133
	.long	0                       @ double 39
	.long	1078165504
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.044999999999999998
	.long	1067911741
	.long	1099511628              @ double 0.52800000000000002
	.long	1071703392
	.long	3092376453              @ double 17.02
	.long	1076954398
	.long	0                       @ double 40
	.long	1078198272
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.044999999999999998
	.long	1067911741
	.long	2508260901              @ double 0.51700000000000002
	.long	1071680323
	.long	3985729651              @ double 17.373000000000001
	.long	1076977532
	.long	0                       @ double 41
	.long	1078231040
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.044999999999999998
	.long	1067911741
	.long	3745211482              @ double 0.49299999999999999
	.long	1071615311
	.long	2095944040              @ double 17.707999999999998
	.long	1076999487
	.long	0                       @ double 42
	.long	1078263808
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.053999999999999999
	.long	1068213731
	.long	2989297238              @ double 0.499
	.long	1071640477
	.long	515396076               @ double 18.045000000000002
	.long	1077021573
	.long	0                       @ double 43
	.long	1078296576
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 0
	.long	0
	.long	2611340116              @ double 0.063
	.long	1068507332
	.long	3435973837              @ double 0.52500000000000002
	.long	1071697100
	.long	1408749273              @ double 18.398
	.long	1077044707
	.long	0                       @ double 44
	.long	1078329344
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 0
	.long	0
	.long	2611340116              @ double 0.063
	.long	1068507332
	.long	996432413               @ double 0.54100000000000004
	.long	1071730655
	.long	1855425872              @ double 18.762
	.long	1077068562
	.long	0                       @ double 45
	.long	1078362112
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.071999999999999995
	.long	1068658327
	.long	1099511628              @ double 0.52800000000000002
	.long	1071703392
	.long	1374389535              @ double 19.120000000000001
	.long	1077092024
	.long	0                       @ double 46
	.long	1078394880
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.071999999999999995
	.long	1068658327
	.long	2233382994              @ double 0.51000000000000001
	.long	1071665643
	.long	3332894622              @ double 19.466000000000001
	.long	1077114699
	.long	0                       @ double 47
	.long	1078427648
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.071999999999999995
	.long	1068658327
	.long	3917010174              @ double 0.50600000000000001
	.long	1071657254
	.long	2370821947              @ double 19.806999999999999
	.long	1077137047
	.long	0                       @ double 48
	.long	1078460416
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.17999999999999999
	.long	1070008893
	.long	3435973837              @ double 0.52500000000000002
	.long	1071697100
	.long	962072674               @ double 20.158999999999999
	.long	1077160116
	.long	0                       @ double 49
	.long	1078493184
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.17999999999999999
	.long	1070008893
	.long	2027224564              @ double 0.53600000000000003
	.long	1071720169
	.long	3401614098              @ double 20.521999999999998
	.long	1077183905
	.long	0                       @ double 50
	.long	1078525952
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.17999999999999999
	.long	1070008893
	.long	3161095930              @ double 0.51800000000000002
	.long	1071682420
	.long	1992864825              @ double 20.873999999999999
	.long	1077206974
	.long	0                       @ double 51
	.long	1078558720
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 0
	.long	0
	.long	377957122               @ double 0.372
	.long	1071107801
	.long	652835029               @ double 0.501
	.long	1071646769
	.long	3023656976              @ double 21.213999999999999
	.long	1077229256
	.long	0                       @ double 52
	.long	1078591488
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 0
	.long	0
	.long	377957122               @ double 0.372
	.long	1071107801
	.long	377957122               @ double 0.497
	.long	1071632089
	.long	1752346657              @ double 21.553000000000001
	.long	1077251473
	.long	0                       @ double 53
	.long	1078624256
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 0
	.long	0
	.long	2576980378              @ double 0.40000000000000002
	.long	1071225241
	.long	377957122               @ double 0.497
	.long	1071632089
	.long	481036337               @ double 21.891999999999999
	.long	1077273690
	.long	0                       @ double 54
	.long	1078657024
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 0
	.long	0
	.long	652835029               @ double 1.627
	.long	1073350705
	.long	2061584302              @ double 0.495
	.long	1071623700
	.long	3504693314              @ double 22.231000000000002
	.long	1077295906
	.long	0                       @ double 55
	.long	1078689792
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 0
	.long	0
	.long	652835029               @ double 1.627
	.long	1073350705
	.long	755914244               @ double 0.49399999999999999
	.long	1071619506
	.long	4226247819              @ double 22.568999999999999
	.long	1077318057
	.long	0                       @ double 56
	.long	1078722560
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 0
	.long	0
	.long	1752346657              @ double 1.8080000000000001
	.long	1073540497
	.long	377957122               @ double 0.497
	.long	1071632089
	.long	962072674               @ double 22.908999999999999
	.long	1077340340
	.long	0                       @ double 57
	.long	1078755328
	.long	0                       @ double 25
	.long	1077477376
	.long	0                       @ double 0
	.long	0
	.long	1511828488              @ double 22.606999999999999
	.long	1077320548
	.long	755914244               @ double 0.49399999999999999
	.long	1071619506
	.long	3985729651              @ double 23.248000000000001
	.long	1077362556
	.long	0                       @ double 58
	.long	1078788096
	.long	0                       @ double 25
	.long	1077477376
	.long	0                       @ double 0
	.long	0
	.long	1511828488              @ double 22.606999999999999
	.long	1077320548
	.long	206158430               @ double 0.48699999999999999
	.long	1071590146
	.long	2095944040              @ double 23.582999999999998
	.long	1077384511
	.long	0                       @ double 59
	.long	1078820864
	.long	0                       @ double 35
	.long	1078034432
	.long	0                       @ double 0
	.long	0
	.long	1717986918              @ double 31.649999999999999
	.long	1077913190
	.long	3573412790              @ double 0.48299999999999998
	.long	1071573368
	.long	1889785610              @ double 23.914999999999999
	.long	1077406269
	.long	0                       @ double 60
	.long	1078853632
	.long	0                       @ double 67
	.long	1079033856
	.long	0                       @ double 0
	.long	0
	.long	2645699854              @ double 605.86699999999996
	.long	1082322671
	.long	2267742732              @ double 0.48199999999999998
	.long	1071569174
	.long	3676492005              @ double 24.245999999999999
	.long	1077427961
	.long	0                       @ double 61
	.long	1078886400
	.long	0                       @ double 67
	.long	1079033856
	.long	0                       @ double 0
	.long	0
	.long	2645699854              @ double 605.86699999999996
	.long	1082322671
	.long	2783138808              @ double 0.52400000000000002
	.long	1071695003
	.long	3161095930              @ double 24.576000000000001
	.long	1077449588
	.long	0                       @ double 44100
	.long	1088784512
	.long	0                       @ double 62
	.long	1078919168
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 24.5
	.long	1077444608
	.long	2611340116              @ double 4.532
	.long	1074929860
	.long	2370821947              @ double 0.95099999999999996
	.long	1072590487
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 24.5
	.long	1077444608
	.long	2611340116              @ double 4.532
	.long	1074929860
	.long	1717986918              @ double 0.69999999999999996
	.long	1072064102
	.long	103079215               @ double 0.43099999999999999
	.long	1071355265
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 24.5
	.long	1077444608
	.long	2611340116              @ double 4.532
	.long	1074929860
	.long	2199023256              @ double 0.68100000000000005
	.long	1072024256
	.long	3745211482              @ double 0.86099999999999999
	.long	1072401743
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 24.5
	.long	1077444608
	.long	1752346657              @ double 0.90400000000000003
	.long	1072491921
	.long	2576980378              @ double 0.67500000000000004
	.long	1072011673
	.long	824633721               @ double 1.292
	.long	1072999432
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 24.5
	.long	1077444608
	.long	1752346657              @ double 0.90400000000000003
	.long	1072491921
	.long	1649267442              @ double 0.66700000000000004
	.long	1071994896
	.long	1924145349              @ double 1.7230000000000001
	.long	1073451368
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 20
	.long	1077149696
	.long	1889785610              @ double 0.089999999999999996
	.long	1068960317
	.long	343597384               @ double 0.66500000000000004
	.long	1071990702
	.long	274877907               @ double 2.153
	.long	1073822040
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 20
	.long	1077149696
	.long	1889785610              @ double 0.089999999999999996
	.long	1068960317
	.long	3985729651              @ double 0.66400000000000003
	.long	1071988604
	.long	824633721               @ double 2.5840000000000001
	.long	1074048008
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 20
	.long	1077149696
	.long	240518169               @ double 0.029000000000000001
	.long	1067299373
	.long	3985729651              @ double 0.66400000000000003
	.long	1071988604
	.long	1374389535              @ double 3.0150000000000001
	.long	1074273976
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 20
	.long	1077149696
	.long	240518169               @ double 0.029000000000000001
	.long	1067299373
	.long	3985729651              @ double 0.66400000000000003
	.long	1071988604
	.long	687194767               @ double 3.4449999999999998
	.long	1074499420
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 20
	.long	1077149696
	.long	240518169               @ double 0.029000000000000001
	.long	1067299373
	.long	2405181686              @ double 0.65500000000000003
	.long	1071969730
	.long	1236950581              @ double 3.8759999999999999
	.long	1074725388
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 20
	.long	1077149696
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	2714419331              @ double 0.61599999999999999
	.long	1071887941
	.long	755914244               @ double 4.2789999999999999
	.long	1074863538
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 20
	.long	1077149696
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	3195455668              @ double 0.59699999999999998
	.long	1071848095
	.long	2061584302              @ double 4.6699999999999999
	.long	1074966036
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 18
	.long	1077018624
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	3676492005              @ double 0.57799999999999996
	.long	1071808249
	.long	893353198               @ double 5.0570000000000004
	.long	1075067486
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 18
	.long	1077018624
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	996432413               @ double 0.54100000000000004
	.long	1071730655
	.long	3882650436              @ double 5.4160000000000004
	.long	1075161595
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 18
	.long	1077018624
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	1717986918              @ double 0.57499999999999996
	.long	1071801958
	.long	1958505087              @ double 5.774
	.long	1075255443
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 12
	.long	1076363264
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	481036337               @ double 0.85599999999999998
	.long	1072391258
	.long	3298534883              @ double 6.4219999999999997
	.long	1075425312
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 6
	.long	1075314688
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	2542620639              @ double 0.84599999999999997
	.long	1072370286
	.long	3195455668              @ double 7.0259999999999998
	.long	1075583647
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 6
	.long	1075314688
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	2920577761              @ double 0.83999999999999997
	.long	1072357703
	.long	2989297238              @ double 7.609
	.long	1075736477
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	4054449127              @ double 0.82199999999999995
	.long	1072319954
	.long	412316860               @ double 8.1679999999999992
	.long	1075860996
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	2576980378              @ double 0.80000000000000004
	.long	1072273817
	.long	515396076               @ double 8.7100000000000008
	.long	1075932037
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	1958505087              @ double 0.753
	.long	1072175251
	.long	3882650436              @ double 9.2070000000000007
	.long	1075997179
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	34359738                @ double 0.70399999999999996
	.long	1072072491
	.long	2851858285              @ double 9.6620000000000008
	.long	1076056817
	.long	0                       @ double 22
	.long	1077280768
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	1924145349              @ double 0.67400000000000004
	.long	1072009576
	.long	549755814               @ double 10.099
	.long	1076114096
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	1202590843              @ double 0.64000000000000001
	.long	1071938273
	.long	343597384               @ double 10.515000000000001
	.long	1076168622
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	2439541424              @ double 0.60899999999999999
	.long	1071873261
	.long	103079215               @ double 10.917
	.long	1076221313
	.long	0                       @ double 25
	.long	1077477376
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	137438953               @ double 0.56599999999999995
	.long	1071783084
	.long	412316860               @ double 11.292999999999999
	.long	1076270596
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	1374389535              @ double 0.53500000000000003
	.long	1071718072
	.long	4054449127              @ double 11.651999999999999
	.long	1076317650
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	3058016715              @ double 0.53100000000000003
	.long	1071709683
	.long	3367254360              @ double 11.997
	.long	1076362870
	.long	0                       @ double 28
	.long	1077673984
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	2061584302              @ double 0.61499999999999999
	.long	1071885844
	.long	1580547965              @ double 12.394
	.long	1076414906
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	1168231105              @ double 0.68600000000000005
	.long	1072034742
	.long	858993459               @ double 12.85
	.long	1076474675
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	3435973837              @ double 0.65000000000000002
	.long	1071959244
	.long	4054449127              @ double 13.276999999999999
	.long	1076530642
	.long	0                       @ double 31
	.long	1077870592
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	103079215               @ double 0.61199999999999999
	.long	1071879553
	.long	137438953               @ double 13.680999999999999
	.long	1076583596
	.long	0                       @ double 32
	.long	1077936128
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	790273982               @ double 0.56699999999999995
	.long	1071785181
	.long	1992864825              @ double 14.061999999999999
	.long	1076633534
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	171798692               @ double 0.52000000000000002
	.long	1071686615
	.long	2542620639              @ double 14.411
	.long	1076679278
	.long	0                       @ double 34
	.long	1078001664
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	4191888081              @ double 0.51300000000000001
	.long	1071671934
	.long	309237645               @ double 14.750999999999999
	.long	1076723843
	.long	0                       @ double 35
	.long	1078034432
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.035999999999999997
	.long	1067609751
	.long	2851858285              @ double 0.55700000000000005
	.long	1071764209
	.long	2439541424              @ double 15.119
	.long	1076772077
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.035999999999999997
	.long	1067609751
	.long	3298534883              @ double 0.58399999999999996
	.long	1071820832
	.long	2473901162              @ double 15.507999999999999
	.long	1076823064
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.035999999999999997
	.long	1067609751
	.long	2748779069              @ double 0.56999999999999995
	.long	1071791472
	.long	2473901162              @ double 15.882999999999999
	.long	1076872216
	.long	0                       @ double 38
	.long	1078132736
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.044999999999999998
	.long	1067911741
	.long	34359738                @ double 0.57899999999999996
	.long	1071810347
	.long	4157528343              @ double 16.263000000000002
	.long	1076904787
	.long	0                       @ double 39
	.long	1078165504
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.044999999999999998
	.long	1067911741
	.long	3951369912              @ double 0.58499999999999996
	.long	1071822929
	.long	2336462209              @ double 16.654
	.long	1076930412
	.long	0                       @ double 40
	.long	1078198272
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.044999999999999998
	.long	1067911741
	.long	1271310320              @ double 0.54800000000000004
	.long	1071745335
	.long	3092376453              @ double 17.02
	.long	1076954398
	.long	0                       @ double 41
	.long	1078231040
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.053999999999999999
	.long	1068213731
	.long	2027224564              @ double 0.53600000000000003
	.long	1071720169
	.long	1992864825              @ double 17.373999999999999
	.long	1076977598
	.long	0                       @ double 42
	.long	1078263808
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.053999999999999999
	.long	1068213731
	.long	2576980378              @ double 0.55000000000000004
	.long	1071749529
	.long	3367254360              @ double 17.744
	.long	1077001846
	.long	0                       @ double 43
	.long	1078296576
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 0
	.long	0
	.long	2611340116              @ double 0.063
	.long	1068507332
	.long	3710851744              @ double 0.53200000000000003
	.long	1071711780
	.long	3195455668              @ double 18.103999999999999
	.long	1077025439
	.long	0                       @ double 44
	.long	1078329344
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 0
	.long	0
	.long	2611340116              @ double 0.063
	.long	1068507332
	.long	2611340116              @ double 0.504
	.long	1071653060
	.long	2542620639              @ double 18.446999999999999
	.long	1077047918
	.long	0                       @ double 45
	.long	1078362112
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 0
	.long	0
	.long	2611340116              @ double 0.063
	.long	1068507332
	.long	3367254360              @ double 0.496
	.long	1071627894
	.long	652835029               @ double 18.782
	.long	1077069873
	.long	0                       @ double 46
	.long	1078394880
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 0
	.long	0
	.long	2130303779              @ double 0.081000000000000003
	.long	1068809322
	.long	2508260901              @ double 0.51700000000000002
	.long	1071680323
	.long	2920577761              @ double 19.129999999999999
	.long	1077092679
	.long	0                       @ double 47
	.long	1078427648
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 0
	.long	0
	.long	2130303779              @ double 0.081000000000000003
	.long	1068809322
	.long	446676599               @ double 0.52700000000000002
	.long	1071701295
	.long	137438953               @ double 19.486999999999998
	.long	1077116076
	.long	0                       @ double 48
	.long	1078460416
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 0
	.long	0
	.long	2130303779              @ double 0.081000000000000003
	.long	1068809322
	.long	1855425872              @ double 0.51600000000000001
	.long	1071678226
	.long	721554506               @ double 19.838000000000001
	.long	1077139079
	.long	0                       @ double 49
	.long	1078493184
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.17999999999999999
	.long	1070008893
	.long	377957122               @ double 0.497
	.long	1071632089
	.long	4054449127              @ double 20.178999999999998
	.long	1077161426
	.long	0                       @ double 50
	.long	1078525952
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.17999999999999999
	.long	1070008893
	.long	2817498546              @ double 0.48899999999999999
	.long	1071598534
	.long	1546188227              @ double 20.510000000000002
	.long	1077183119
	.long	0                       @ double 51
	.long	1078558720
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 0
	.long	0
	.long	1649267442              @ double 0.19800000000000001
	.long	1070159888
	.long	1305670058              @ double 0.502
	.long	1071648866
	.long	2886218023              @ double 20.852
	.long	1077205532
	.long	0                       @ double 52
	.long	1078591488
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 0
	.long	0
	.long	2576980378              @ double 0.40000000000000002
	.long	1071225241
	.long	652835029               @ double 0.501
	.long	1071646769
	.long	240518169               @ double 21.196000000000002
	.long	1077228077
	.long	0                       @ double 53
	.long	1078624256
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 0
	.long	0
	.long	2576980378              @ double 0.40000000000000002
	.long	1071225241
	.long	1133871366              @ double 0.49099999999999999
	.long	1071606923
	.long	2645699854              @ double 21.530999999999999
	.long	1077250031
	.long	0                       @ double 54
	.long	1078657024
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 0
	.long	0
	.long	1786706395              @ double 0.42899999999999999
	.long	1071346876
	.long	377957122               @ double 0.497
	.long	1071632089
	.long	1374389535              @ double 21.870000000000001
	.long	1077272248
	.long	0                       @ double 55
	.long	1078689792
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 0
	.long	0
	.long	1752346657              @ double 1.8080000000000001
	.long	1073540497
	.long	2611340116              @ double 0.504
	.long	1071653060
	.long	3023656976              @ double 22.213999999999999
	.long	1077294792
	.long	0                       @ double 56
	.long	1078722560
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 0
	.long	0
	.long	1752346657              @ double 1.8080000000000001
	.long	1073540497
	.long	2611340116              @ double 0.504
	.long	1071653060
	.long	377957122               @ double 22.558
	.long	1077317337
	.long	0                       @ double 57
	.long	1078755328
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 0
	.long	0
	.long	1065151889              @ double 1.8979999999999999
	.long	1073634869
	.long	2061584302              @ double 0.495
	.long	1071623700
	.long	1408749273              @ double 22.898
	.long	1077339619
	.long	0                       @ double 58
	.long	1078788096
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 0
	.long	0
	.long	4191888081              @ double 24.416
	.long	1077439102
	.long	3195455668              @ double 0.48599999999999999
	.long	1071585951
	.long	1511828488              @ double 23.231999999999999
	.long	1077361508
	.long	0                       @ double 59
	.long	1078820864
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 0
	.long	0
	.long	4191888081              @ double 24.416
	.long	1077439102
	.long	584115552               @ double 0.48399999999999999
	.long	1071577563
	.long	1305670058              @ double 23.564
	.long	1077383266
	.long	0                       @ double 60
	.long	1078853632
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 0
	.long	0
	.long	2027224564              @ double 32.554000000000002
	.long	1077954281
	.long	3573412790              @ double 0.48299999999999998
	.long	1071573368
	.long	3401614098              @ double 23.896999999999998
	.long	1077405089
	.long	0                       @ double 61
	.long	1078886400
	.long	0                       @ double 73
	.long	1079132160
	.long	0                       @ double 0
	.long	0
	.long	4088808866              @ double 660.12400000000002
	.long	1082433789
	.long	1717986918              @ double 0.47499999999999998
	.long	1071539814
	.long	3195455668              @ double 24.228999999999999
	.long	1077426847
	.long	0                       @ double 62
	.long	1078919168
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 0
	.long	0
	.long	3607772529              @ double 162.77000000000001
	.long	1080318115
	.long	1202590843              @ double 0.51500000000000001
	.long	1071676129
	.long	3917010174              @ double 24.442
	.long	1077440806
	.long	0                       @ double 32000
	.long	1088372736
	.long	0                       @ double 58
	.long	1078788096
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 24.5
	.long	1077444608
	.long	2611340116              @ double 4.532
	.long	1074929860
	.long	2336462209              @ double 0.99699999999999999
	.long	1072686956
	.long	652835029               @ double 0.313
	.long	1070860337
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 24.5
	.long	1077444608
	.long	2611340116              @ double 4.532
	.long	1074929860
	.long	3161095930              @ double 0.89300000000000002
	.long	1072468852
	.long	2473901162              @ double 0.93799999999999994
	.long	1072563224
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 24.5
	.long	1077444608
	.long	4226247819              @ double 1.8089999999999999
	.long	1073541545
	.long	3917010174              @ double 0.88100000000000001
	.long	1072443686
	.long	1236950581              @ double 1.5629999999999999
	.long	1073283596
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 20
	.long	1077149696
	.long	206158430               @ double 0.18099999999999999
	.long	1070017282
	.long	2989297238              @ double 0.873
	.long	1072426909
	.long	618475291               @ double 2.1880000000000002
	.long	1073840390
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 20
	.long	1077149696
	.long	206158430               @ double 0.18099999999999999
	.long	1070017282
	.long	2336462209              @ double 0.872
	.long	1072424812
	.long	618475291               @ double 2.8130000000000002
	.long	1074168070
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 20
	.long	1077149696
	.long	2680059593              @ double 0.057000000000000002
	.long	1068314394
	.long	1683627180              @ double 0.87099999999999999
	.long	1072422715
	.long	618475291               @ double 3.4380000000000002
	.long	1074495750
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 20
	.long	1077149696
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	3092376453              @ double 0.85999999999999999
	.long	1072399646
	.long	2061584302              @ double 4.0449999999999999
	.long	1074802196
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 20
	.long	1077149696
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	2267742732              @ double 0.83899999999999996
	.long	1072355606
	.long	0                       @ double 4.625
	.long	1074954240
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 18
	.long	1077018624
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	1821066134              @ double 0.81200000000000006
	.long	1072298983
	.long	3917010174              @ double 5.173
	.long	1075097894
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 18
	.long	1077018624
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	721554506               @ double 0.78400000000000003
	.long	1072240263
	.long	2199023256              @ double 5.6980000000000004
	.long	1075235520
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 12
	.long	1076363264
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	2714419331              @ double 0.74099999999999999
	.long	1072150085
	.long	2748779069              @ double 6.1849999999999996
	.long	1075363184
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 12
	.long	1076363264
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	4054449127              @ double 0.69699999999999995
	.long	1072057810
	.long	1271310320              @ double 6.6340000000000003
	.long	1075480887
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 6
	.long	1075314688
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	1924145349              @ double 0.67400000000000004
	.long	1072009576
	.long	343597384               @ double 7.0700000000000003
	.long	1075595182
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 6
	.long	1075314688
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	4088808866              @ double 0.65100000000000002
	.long	1071961341
	.long	3642132267              @ double 7.4919999999999999
	.long	1075705806
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 6
	.long	1075314688
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	927712936               @ double 0.63300000000000001
	.long	1071923593
	.long	1374389535              @ double 7.9050000000000002
	.long	1075814072
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	3745211482              @ double 0.61099999999999999
	.long	1071877455
	.long	4123168604              @ double 8.3049999999999997
	.long	1075878952
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	2267742732              @ double 0.58899999999999997
	.long	1071831318
	.long	171798692               @ double 8.6950000000000002
	.long	1075930071
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	1717986918              @ double 0.57499999999999996
	.long	1071801958
	.long	2611340116              @ double 9.064
	.long	1075978436
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	1752346657              @ double 0.65400000000000003
	.long	1071967633
	.long	3642132267              @ double 9.4839999999999999
	.long	1076033486
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	206158430               @ double 0.72399999999999998
	.long	1072114434
	.long	2370821947              @ double 9.9659999999999993
	.long	1076096663
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	2370821947              @ double 0.70099999999999996
	.long	1072066199
	.long	2886218023              @ double 10.426
	.long	1076156956
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	1271310320              @ double 0.67300000000000004
	.long	1072007479
	.long	1511828488              @ double 10.866
	.long	1076214628
	.long	0                       @ double 22
	.long	1077280768
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	3917010174              @ double 0.63100000000000001
	.long	1071919398
	.long	377957122               @ double 11.279
	.long	1076268761
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	4226247819              @ double 0.59199999999999997
	.long	1071837609
	.long	721554506               @ double 11.669
	.long	1076319879
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	240518169               @ double 0.55300000000000005
	.long	1071755821
	.long	103079215               @ double 12.042
	.long	1076368769
	.long	0                       @ double 25
	.long	1077477376
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	2233382994              @ double 0.51000000000000001
	.long	1071665643
	.long	3401614098              @ double 12.385999999999999
	.long	1076413857
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	3917010174              @ double 0.50600000000000001
	.long	1071657254
	.long	3917010174              @ double 12.721
	.long	1076457766
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.035999999999999997
	.long	1067609751
	.long	1821066134              @ double 0.56200000000000006
	.long	1071774695
	.long	2370821947              @ double 13.090999999999999
	.long	1076506263
	.long	0                       @ double 28
	.long	1077673984
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.035999999999999997
	.long	1067609751
	.long	3848290697              @ double 0.59799999999999998
	.long	1071850192
	.long	584115552               @ double 13.488
	.long	1076558299
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.035999999999999997
	.long	1067609751
	.long	2267742732              @ double 0.58899999999999997
	.long	1071831318
	.long	3676492005              @ double 13.872999999999999
	.long	1076608761
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.044999999999999998
	.long	1067911741
	.long	1133871366              @ double 0.60699999999999998
	.long	1071869067
	.long	1271310320              @ double 14.268000000000001
	.long	1076660535
	.long	0                       @ double 31
	.long	1077870592
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.044999999999999998
	.long	1067911741
	.long	1030792151              @ double 0.62
	.long	1071896330
	.long	3813930959              @ double 14.679
	.long	1076714405
	.long	0                       @ double 32
	.long	1077936128
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.044999999999999998
	.long	1067911741
	.long	687194767               @ double 0.57999999999999996
	.long	1071812444
	.long	3539053052              @ double 15.067
	.long	1076765261
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.044999999999999998
	.long	1067911741
	.long	3710851744              @ double 0.53200000000000003
	.long	1071711780
	.long	2267742732              @ double 15.423999999999999
	.long	1076812054
	.long	0                       @ double 34
	.long	1078001664
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.044999999999999998
	.long	1067911741
	.long	2508260901              @ double 0.51700000000000002
	.long	1071680323
	.long	2199023256              @ double 15.771000000000001
	.long	1076857536
	.long	0                       @ double 35
	.long	1078034432
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.053999999999999999
	.long	1068213731
	.long	2508260901              @ double 0.51700000000000002
	.long	1071680323
	.long	1374389535              @ double 16.120000000000001
	.long	1076895416
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.053999999999999999
	.long	1068213731
	.long	1580547965              @ double 0.50900000000000001
	.long	1071663546
	.long	3332894622              @ double 16.466000000000001
	.long	1076918091
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 0
	.long	0
	.long	1408749273              @ double 0.053999999999999999
	.long	1068213731
	.long	3917010174              @ double 0.50600000000000001
	.long	1071657254
	.long	2370821947              @ double 16.806999999999999
	.long	1076940439
	.long	0                       @ double 38
	.long	1078132736
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.071999999999999995
	.long	1068658327
	.long	1477468750              @ double 0.52200000000000002
	.long	1071690809
	.long	2954937500              @ double 17.158000000000001
	.long	1076963442
	.long	0                       @ double 39
	.long	1078165504
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.071999999999999995
	.long	1068658327
	.long	3058016715              @ double 0.53100000000000003
	.long	1071709683
	.long	2783138808              @ double 17.518000000000001
	.long	1076987035
	.long	0                       @ double 40
	.long	1078198272
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.071999999999999995
	.long	1068658327
	.long	3813930959              @ double 0.51900000000000002
	.long	1071684517
	.long	3367254360              @ double 17.869
	.long	1077010038
	.long	0                       @ double 41
	.long	1078231040
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.089999999999999996
	.long	1068960317
	.long	3539053052              @ double 0.51200000000000001
	.long	1071669837
	.long	1030792151              @ double 18.215
	.long	1077032714
	.long	0                       @ double 42
	.long	1078263808
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.089999999999999996
	.long	1068960317
	.long	1580547965              @ double 0.50900000000000001
	.long	1071663546
	.long	3298534883              @ double 18.562999999999999
	.long	1077055520
	.long	0                       @ double 43
	.long	1078296576
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 0
	.long	0
	.long	1889785610              @ double 0.089999999999999996
	.long	1068960317
	.long	1683627180              @ double 0.498
	.long	1071636283
	.long	2027224564              @ double 18.902000000000001
	.long	1077077737
	.long	0                       @ double 44
	.long	1078329344
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 0
	.long	0
	.long	2336462209              @ double 0.109
	.long	1069279084
	.long	755914244               @ double 0.49399999999999999
	.long	1071619506
	.long	446676599               @ double 19.239000000000001
	.long	1077099823
	.long	0                       @ double 45
	.long	1078362112
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 0
	.long	0
	.long	2336462209              @ double 0.109
	.long	1069279084
	.long	652835029               @ double 0.501
	.long	1071646769
	.long	3779571220              @ double 19.579999999999998
	.long	1077122170
	.long	0                       @ double 46
	.long	1078394880
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 0
	.long	0
	.long	2095944040              @ double 0.11799999999999999
	.long	1069430079
	.long	927712936               @ double 0.50800000000000001
	.long	1071661449
	.long	3435973837              @ double 19.925000000000001
	.long	1077144780
	.long	0                       @ double 47
	.long	1078427648
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 0
	.long	0
	.long	2611340116              @ double 0.252
	.long	1070604484
	.long	1305670058              @ double 0.502
	.long	1071648866
	.long	790273982               @ double 20.268999999999998
	.long	1077167325
	.long	0                       @ double 48
	.long	1078460416
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 0
	.long	0
	.long	2611340116              @ double 0.252
	.long	1070604484
	.long	3745211482              @ double 0.49299999999999999
	.long	1071615311
	.long	3504693314              @ double 20.606000000000002
	.long	1077189410
	.long	0                       @ double 49
	.long	1078493184
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 0
	.long	0
	.long	2370821947              @ double 0.28799999999999998
	.long	1070755479
	.long	377957122               @ double 0.497
	.long	1071632089
	.long	4226247819              @ double 20.943999999999999
	.long	1077211561
	.long	0                       @ double 50
	.long	1078525952
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 0
	.long	0
	.long	4054449127              @ double 0.57199999999999995
	.long	1071795666
	.long	3917010174              @ double 0.50600000000000001
	.long	1071657254
	.long	1580547965              @ double 21.288
	.long	1077234106
	.long	0                       @ double 51
	.long	1078558720
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 0
	.long	0
	.long	4054449127              @ double 0.57199999999999995
	.long	1071795666
	.long	2233382994              @ double 0.51000000000000001
	.long	1071665643
	.long	1546188227              @ double 21.635000000000002
	.long	1077256847
	.long	0                       @ double 52
	.long	1078591488
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 0
	.long	0
	.long	68719477                @ double 0.65800000000000003
	.long	1071976022
	.long	2611340116              @ double 0.504
	.long	1071653060
	.long	1202590843              @ double 21.98
	.long	1077279457
	.long	0                       @ double 53
	.long	1078624256
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 0
	.long	0
	.long	34359738                @ double 2.4409999999999998
	.long	1073973035
	.long	3367254360              @ double 0.496
	.long	1071627894
	.long	4226247819              @ double 22.318999999999999
	.long	1077301673
	.long	0                       @ double 54
	.long	1078657024
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 0
	.long	0
	.long	34359738                @ double 2.4409999999999998
	.long	1073973035
	.long	3745211482              @ double 0.49299999999999999
	.long	1071615311
	.long	2645699854              @ double 22.655999999999999
	.long	1077323759
	.long	0                       @ double 55
	.long	1078689792
	.long	0                       @ double 32
	.long	1077936128
	.long	0                       @ double 0
	.long	0
	.long	790273982               @ double 2.8929999999999998
	.long	1074210013
	.long	4123168604              @ double 0.48999999999999999
	.long	1071602728
	.long	1065151889              @ double 22.992999999999999
	.long	1077345845
	.long	0                       @ double 56
	.long	1078722560
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 0
	.long	0
	.long	3195455668              @ double 33.457999999999998
	.long	1077983903
	.long	2267742732              @ double 0.48199999999999998
	.long	1071569174
	.long	3161095930              @ double 23.326000000000001
	.long	1077367668
	.long	0                       @ double 57
	.long	1078755328
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 0
	.long	0
	.long	3195455668              @ double 33.457999999999998
	.long	1077983903
	.long	996432413               @ double 0.45800000000000002
	.long	1071468511
	.long	2645699854              @ double 23.655999999999999
	.long	1077389295
	.long	0                       @ double 58
	.long	1078788096
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 0
	.long	0
	.long	1168231105              @ double 10.851000000000001
	.long	1076212662
	.long	0                       @ double 0.5
	.long	1071644672
	.long	996432413               @ double 23.937000000000001
	.long	1077407711
	.long	0                       @ double 24000
	.long	1087860736
	.long	0                       @ double 59
	.long	1078820864
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 15
	.long	1076756480
	.long	1602428246              @ double 17.825017899999999
	.long	1077007156
	.long	2683830918              @ double 0.69737416500000005
	.long	1072058595
	.long	4288697881              @ double 0.23687446100000001
	.long	1070485990
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 15
	.long	1076756480
	.long	1602428246              @ double 17.825017899999999
	.long	1077007156
	.long	1617003372              @ double 0.45502480899999997
	.long	1071456032
	.long	2681719855              @ double 0.71016102999999997
	.long	1072085411
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 15
	.long	1076756480
	.long	2698993183              @ double 1.78250182
	.long	1073513760
	.long	1614206215              @ double 0.43144044300000001
	.long	1071357112
	.long	1624264547              @ double 1.1819328099999999
	.long	1072884018
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 15
	.long	1076756480
	.long	2698993183              @ double 1.78250182
	.long	1073513760
	.long	2675936424              @ double 0.42391624999999999
	.long	1071325553
	.long	2676178317              @ double 1.6510273200000001
	.long	1073375899
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 13
	.long	1076494336
	.long	14559733                @ double 0.178250194
	.long	1069994215
	.long	1607930203              @ double 0.41820678100000003
	.long	1071301606
	.long	543994373               @ double 2.11632562
	.long	1073802812
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 13
	.long	1076494336
	.long	14559733                @ double 0.178250194
	.long	1069994215
	.long	2144377528              @ double 0.41158545000000002
	.long	1071273834
	.long	1063359685              @ double 2.5767674399999998
	.long	1074044216
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 13
	.long	1076494336
	.long	3224299377              @ double 0.056367658100000002
	.long	1068293176
	.long	1068767084              @ double 0.40540915700000002
	.long	1071247929
	.long	3212036304              @ double 3.0313639600000002
	.long	1074282555
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 13
	.long	1076494336
	.long	3224299377              @ double 0.056367658100000002
	.long	1068293176
	.long	1613669653              @ double 0.39969548599999999
	.long	1071223964
	.long	2673891332              @ double 3.4792091799999998
	.long	1074517355
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 13
	.long	1076494336
	.long	3224299377              @ double 0.056367658100000002
	.long	1068293176
	.long	3228940195              @ double 0.39375323099999998
	.long	1071199040
	.long	1081963422              @ double 3.9194874799999999
	.long	1074748188
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 12
	.long	1076363264
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	4288240484              @ double 0.38735747300000001
	.long	1071172214
	.long	1073365241              @ double 4.3514795299999998
	.long	1074882538
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 12
	.long	1076363264
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	535879977               @ double 0.38045456999999999
	.long	1071143262
	.long	1614885713              @ double 4.7745642699999999
	.long	1074993447
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 10
	.long	1076101120
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	2141213133              @ double 0.37305390799999999
	.long	1071112221
	.long	3216599277              @ double 5.1882200200000002
	.long	1075101884
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 10
	.long	1076101120
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	3681165                 @ double 0.365188122
	.long	1071079230
	.long	4292559366              @ double 5.5920219400000004
	.long	1075207738
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 10
	.long	1076101120
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	3214767490              @ double 0.35689777099999997
	.long	1071044457
	.long	2685502175              @ double 5.9856400499999998
	.long	1075310923
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 9
	.long	1075970048
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	1614514078              @ double 0.34870061299999999
	.long	1071010076
	.long	4289876557              @ double 6.3688316299999999
	.long	1075411374
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 9
	.long	1075970048
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	2898313                 @ double 0.34026002900000002
	.long	1070974674
	.long	2145246142              @ double 6.7414379100000001
	.long	1075509051
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 6
	.long	1075314688
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	1608068741              @ double 0.332341045
	.long	1070941459
	.long	4293614897              @ double 7.1033744800000003
	.long	1075603930
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 6
	.long	1075314688
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	2681117323              @ double 0.33046284300000001
	.long	1070933581
	.long	4475012                 @ double 7.4546241799999997
	.long	1075696009
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 6
	.long	1075314688
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	3223060007              @ double 0.34556835899999999
	.long	1070996938
	.long	1074695650              @ double 7.7952318199999997
	.long	1075785297
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	1072978213              @ double 0.37785965199999999
	.long	1071132378
	.long	3221887928              @ double 8.2045574200000004
	.long	1075865787
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	395824                  @ double 0.39668941499999999
	.long	1071211356
	.long	1074695650              @ double 8.6764011399999994
	.long	1075927633
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	2688679764              @ double 0.39123788500000001
	.long	1071188490
	.long	4294087687              @ double 9.1256103500000005
	.long	1075986511
	.long	0                       @ double 22
	.long	1077280768
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	3228364051              @ double 0.37761276999999999
	.long	1071131342
	.long	1612499773              @ double 9.5529813800000002
	.long	1076042528
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	3758704689              @ double 0.36283680800000001
	.long	1071069367
	.long	3219117158              @ double 9.9594097099999992
	.long	1076095799
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	2692624812              @ double 0.34901061700000002
	.long	1071011376
	.long	2148500696              @ double 10.3458519
	.long	1076146451
	.long	0                       @ double 25
	.long	1077477376
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	3752112017              @ double 0.339673489
	.long	1070972213
	.long	2711780503              @ double 10.7132998
	.long	1076194613
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	2146411624              @ double 0.34384572499999999
	.long	1070989713
	.long	3225692238              @ double 11.0627575
	.long	1076240417
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	2140625994              @ double 0.355822682
	.long	1071039948
	.long	2175108878              @ double 11.447506000000001
	.long	1076290847
	.long	0                       @ double 28
	.long	1077673984
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	2144192810              @ double 0.35810434800000002
	.long	1071049518
	.long	2126950268              @ double 11.862758599999999
	.long	1076345275
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	3764200048              @ double 0.34745428
	.long	1071004848
	.long	2145092210              @ double 12.2520256
	.long	1076396297
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	2156008162              @ double 0.33492791700000002
	.long	1070952309
	.long	2142783236              @ double 12.6173973
	.long	1076444187
	.long	0                       @ double 31
	.long	1077870592
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	2692193803              @ double 0.331643254
	.long	1070938532
	.long	2162244592              @ double 12.960826900000001
	.long	1076489201
	.long	0                       @ double 32
	.long	1077936128
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	2139592453              @ double 0.333368897
	.long	1070945770
	.long	1631290427              @ double 13.321925200000001
	.long	1076536531
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	3218417869              @ double 0.332313001
	.long	1070941341
	.long	3201887811              @ double 13.6976833
	.long	1076585782
	.long	0                       @ double 34
	.long	1078001664
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	1065481743              @ double 0.33144170000000001
	.long	1070937687
	.long	2163564006              @ double 14.047802000000001
	.long	1076631673
	.long	0                       @ double 35
	.long	1078034432
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 0
	.long	0
	.long	530588687               @ double 0.053475055799999997
	.long	1068196117
	.long	545461121               @ double 0.33094719099999997
	.long	1070935613
	.long	3194356157              @ double 14.405302000000001
	.long	1076678531
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 0
	.long	0
	.long	530588687               @ double 0.053475055799999997
	.long	1068196117
	.long	2151278063              @ double 0.33247768900000002
	.long	1070942032
	.long	1073233300              @ double 14.7684803
	.long	1076726134
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 0
	.long	0
	.long	1608666875              @ double 0.062387566999999998
	.long	1068495171
	.long	3754049357              @ double 0.33264753200000002
	.long	1070942744
	.long	2140969042              @ double 15.131595600000001
	.long	1076773728
	.long	0                       @ double 38
	.long	1078132736
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 0
	.long	0
	.long	1608666875              @ double 0.062387566999999998
	.long	1068495171
	.long	2686456551              @ double 0.33084145199999998
	.long	1070935169
	.long	3747630408              @ double 15.494048100000001
	.long	1076821235
	.long	0                       @ double 39
	.long	1078165504
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 0
	.long	0
	.long	3224243082              @ double 0.071300074500000005
	.long	1068646584
	.long	1615582803              @ double 0.32776984599999998
	.long	1070922286
	.long	4291723737              @ double 15.851615900000001
	.long	1076868102
	.long	0                       @ double 40
	.long	1078198272
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 0
	.long	0
	.long	3224243082              @ double 0.071300074500000005
	.long	1068646584
	.long	2681057949              @ double 0.32457271199999999
	.long	1070908876
	.long	2150094988              @ double 16.204628
	.long	1076900962
	.long	0                       @ double 41
	.long	1078231040
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 0
	.long	0
	.long	3756076416              @ double 0.080212585599999997
	.long	1068796111
	.long	2152588680              @ double 0.32382500199999997
	.long	1070905740
	.long	3215906585              @ double 16.550228100000002
	.long	1076923611
	.long	0                       @ double 42
	.long	1078263808
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 0
	.long	0
	.long	148214                  @ double 0.089125096799999997
	.long	1068945639
	.long	1601638797              @ double 0.321414798
	.long	1070895631
	.long	2679289935              @ double 16.906747800000002
	.long	1076946976
	.long	0                       @ double 43
	.long	1078296576
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 0
	.long	0
	.long	148214                  @ double 0.089125096799999997
	.long	1068945639
	.long	2681722054              @ double 0.31818929299999998
	.long	1070882102
	.long	4282432863              @ double 17.253723099999998
	.long	1076969715
	.long	0                       @ double 44
	.long	1078329344
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 0
	.long	0
	.long	4293722649              @ double 0.098037600500000002
	.long	1069095165
	.long	3750691448              @ double 0.315934151
	.long	1070872643
	.long	2153448499              @ double 17.590110800000001
	.long	1076991761
	.long	0                       @ double 45
	.long	1078362112
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 0
	.long	0
	.long	559411725               @ double 0.106950112
	.long	1069244693
	.long	532667204               @ double 0.31563928699999999
	.long	1070871407
	.long	2678410325              @ double 17.931405999999999
	.long	1077014128
	.long	0                       @ double 46
	.long	1078394880
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 0
	.long	0
	.long	1084039300              @ double 0.115862623
	.long	1069394220
	.long	537815118               @ double 0.31656983500000002
	.long	1070875310
	.long	537496259               @ double 18.275072099999999
	.long	1077036651
	.long	0                       @ double 47
	.long	1078427648
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 0
	.long	0
	.long	1608666875              @ double 0.124775134
	.long	1069543747
	.long	3754832209              @ double 0.31656000000000001
	.long	1070875268
	.long	1074167885              @ double 18.619159700000001
	.long	1077059201
	.long	0                       @ double 48
	.long	1078460416
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 0
	.long	0
	.long	1066647225              @ double 0.13368764499999999
	.long	1069620397
	.long	538197748               @ double 0.31546595700000002
	.long	1070870680
	.long	545522694               @ double 18.9621754
	.long	1077081681
	.long	0                       @ double 49
	.long	1078493184
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 0
	.long	0
	.long	3224243082              @ double 0.14260014900000001
	.long	1069695160
	.long	2153331950              @ double 0.31357634099999998
	.long	1070862754
	.long	3744166946              @ double 19.3029613
	.long	1077104014
	.long	0                       @ double 50
	.long	1078525952
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 0
	.long	0
	.long	1086871642              @ double 0.151512653
	.long	1069769924
	.long	4293718251              @ double 0.31163597100000001
	.long	1070854615
	.long	2160705275              @ double 19.640586899999999
	.long	1077126141
	.long	0                       @ double 51
	.long	1078558720
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 0
	.long	0
	.long	3748870657              @ double 0.16042517100000001
	.long	1069844687
	.long	1612244686              @ double 0.31106671699999999
	.long	1070852228
	.long	3230530089              @ double 19.974269899999999
	.long	1077148009
	.long	0                       @ double 52
	.long	1078591488
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 0
	.long	0
	.long	3762018617              @ double 0.35565587900000001
	.long	1071039248
	.long	2688013460              @ double 0.31146565100000001
	.long	1070853901
	.long	2146906404              @ double 20.311592099999999
	.long	1077170116
	.long	0                       @ double 53
	.long	1078624256
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 0
	.long	0
	.long	1608227071              @ double 0.37343868600000002
	.long	1071113835
	.long	4286632998              @ double 0.31187200500000001
	.long	1070855605
	.long	2140694164              @ double 20.650779700000001
	.long	1077192345
	.long	0                       @ double 54
	.long	1078657024
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 0
	.long	0
	.long	1073193717              @ double 0.40900427099999997
	.long	1071263008
	.long	2155511182              @ double 0.31101596399999998
	.long	1070852015
	.long	2137230702              @ double 20.9890823
	.long	1077214516
	.long	0                       @ double 55
	.long	1078689792
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 0
	.long	0
	.long	2686639070              @ double 0.67641192699999997
	.long	1072014634
	.long	543292885               @ double 0.30920770800000003
	.long	1070844431
	.long	3220139704              @ double 21.325115199999999
	.long	1077236538
	.long	0                       @ double 56
	.long	1078722560
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 0
	.long	0
	.long	532607831               @ double 0.73277956200000005
	.long	1072132846
	.long	3219040193              @ double 0.30811280000000002
	.long	1070839838
	.long	3210683904              @ double 21.656597099999999
	.long	1077258262
	.long	0                       @ double 57
	.long	1078755328
	.long	0                       @ double 28
	.long	1077673984
	.long	0                       @ double 0
	.long	0
	.long	2682551086              @ double 0.78914719799999999
	.long	1072251057
	.long	3763546938              @ double 0.310006589
	.long	1070847781
	.long	3231079845              @ double 21.9881554
	.long	1077279991
	.long	0                       @ double 58
	.long	1078788096
	.long	0                       @ double 31
	.long	1077870592
	.long	0                       @ double 0
	.long	0
	.long	3218677354              @ double 2.7628779400000001
	.long	1074141791
	.long	3222204587              @ double 0.32711309199999999
	.long	1070919531
	.long	1074167885              @ double 22.322284700000001
	.long	1077301889
	.long	0                       @ double 59
	.long	1078820864
	.long	0                       @ double 34
	.long	1078001664
	.long	0                       @ double 0
	.long	0
	.long	1606287532              @ double 3.0302531699999999
	.long	1074281973
	.long	3750893758              @ double 0.41608235199999999
	.long	1071292695
	.long	3208210003              @ double 22.6605186
	.long	1077324055
	.long	0                       @ double 22050
	.long	1087735936
	.long	0                       @ double 59
	.long	1078820864
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 15
	.long	1076756480
	.long	1602428246              @ double 17.825017899999999
	.long	1077007156
	.long	2683980451              @ double 0.65868359799999998
	.long	1071977455
	.long	3750240648              @ double 0.21763764299999999
	.long	1070324620
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 15
	.long	1076756480
	.long	1602428246              @ double 17.825017899999999
	.long	1077007156
	.long	3227598791              @ double 0.43255490099999999
	.long	1071361786
	.long	3223741704              @ double 0.65256345299999996
	.long	1071964620
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 15
	.long	1076756480
	.long	2698993183              @ double 1.78250182
	.long	1073513760
	.long	2150317089              @ double 0.40511357799999997
	.long	1071246689
	.long	11291984                @ double 1.0863313699999999
	.long	1072783773
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 15
	.long	1076756480
	.long	2698993183              @ double 1.78250182
	.long	1073513760
	.long	3750113105              @ double 0.397231787
	.long	1071213630
	.long	1058356908              @ double 1.5180351700000001
	.long	1073236447
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 15
	.long	1076756480
	.long	2698993183              @ double 1.78250182
	.long	1073513760
	.long	528594613               @ double 0.39208868099999999
	.long	1071192059
	.long	3210002207              @ double 1.94679713
	.long	1073686036
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 13
	.long	1076494336
	.long	14559733                @ double 0.178250194
	.long	1069994215
	.long	2687630830              @ double 0.38678827900000001
	.long	1071169827
	.long	4145159                 @ double 2.3717784900000001
	.long	1073936743
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 13
	.long	1076494336
	.long	14559733                @ double 0.178250194
	.long	1069994215
	.long	3228216717              @ double 0.38057464400000002
	.long	1071143765
	.long	4285038706              @ double 2.79218864
	.long	1074157158
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 13
	.long	1076494336
	.long	3224299377              @ double 0.056367658100000002
	.long	1068293176
	.long	1067636786              @ double 0.37530976500000002
	.long	1071121683
	.long	7289762                 @ double 3.20729256
	.long	1074374793
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 13
	.long	1076494336
	.long	3224299377              @ double 0.056367658100000002
	.long	1068293176
	.long	7274369                 @ double 0.370087624
	.long	1071099780
	.long	3211508538              @ double 3.61641645
	.long	1074589291
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 12
	.long	1076363264
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	1604928536              @ double 0.36456856100000001
	.long	1071076631
	.long	3224559741              @ double 4.01895428
	.long	1074795368
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 12
	.long	1076363264
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	1613790599              @ double 0.35895952599999997
	.long	1071053105
	.long	3759285231              @ double 4.4143672
	.long	1074899023
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 12
	.long	1076363264
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	1617667477              @ double 0.35293826499999997
	.long	1071027850
	.long	4291261942              @ double 4.8021888700000002
	.long	1075000688
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 10
	.long	1076101120
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	2145257137              @ double 0.3465029
	.long	1071000858
	.long	1075542274              @ double 5.1820230499999997
	.long	1075100260
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 10
	.long	1076101120
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	538441839               @ double 0.33968093999999999
	.long	1070972245
	.long	3753611751              @ double 5.55354261
	.long	1075197651
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 10
	.long	1076101120
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	9002801                 @ double 0.33257150699999999
	.long	1070942426
	.long	2147357204              @ double 5.9164867399999999
	.long	1075292795
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 9
	.long	1075970048
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	3217153431              @ double 0.32601565100000002
	.long	1070914928
	.long	3224922580              @ double 6.2706594500000001
	.long	1075385639
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 9
	.long	1075970048
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	3759410575              @ double 0.32544204599999998
	.long	1070912522
	.long	2149897076              @ double 6.61592293
	.long	1075476148
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 9
	.long	1075970048
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	4294037109              @ double 0.34131503099999999
	.long	1070979098
	.long	1076509845              @ double 6.9521951700000004
	.long	1075564300
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 6
	.long	1075314688
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	3217843924              @ double 0.374984443
	.long	1071120318
	.long	934585                  @ double 7.3584404000000001
	.long	1075670795
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 6
	.long	1075314688
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	2687666014              @ double 0.39613810199999999
	.long	1071209043
	.long	2681433982              @ double 7.8290924999999998
	.long	1075794173
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	533581998               @ double 0.39271906000000001
	.long	1071194703
	.long	1075982079              @ double 8.2797565500000001
	.long	1075875644
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	1068932010              @ double 0.38075500699999998
	.long	1071144522
	.long	857619                  @ double 8.7108306899999999
	.long	1075932146
	.long	0                       @ double 22
	.long	1077280768
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	3752824501              @ double 0.36738631100000002
	.long	1071088449
	.long	4294208633              @ double 9.12284088
	.long	1075986148
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	4288203100              @ double 0.35435199699999997
	.long	1071033779
	.long	3755865750              @ double 9.5164098700000004
	.long	1076037734
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	8659754                 @ double 0.34150838900000002
	.long	1070979910
	.long	1073629124              @ double 9.8922290799999998
	.long	1076086994
	.long	0                       @ double 25
	.long	1077477376
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	534619937               @ double 0.33357790100000001
	.long	1070946647
	.long	564269367               @ double 10.251038599999999
	.long	1076134024
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	3754537540              @ double 0.33810874800000001
	.long	1070965650
	.long	2695342804              @ double 10.593602199999999
	.long	1076178924
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	2610241                 @ double 0.35074448600000002
	.long	1071018649
	.long	3239875938              @ double 10.9723492
	.long	1076228567
	.long	0                       @ double 28
	.long	1077673984
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	1617368410              @ double 0.35451945699999998
	.long	1071034482
	.long	3761704157              @ double 11.382720000000001
	.long	1076282355
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	1070818772              @ double 0.34527403099999998
	.long	1070995704
	.long	510943053               @ double 11.768998099999999
	.long	1076332986
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	2690128920              @ double 0.33382883699999999
	.long	1070947699
	.long	3781825219              @ double 12.132918399999999
	.long	1076380685
	.long	0                       @ double 31
	.long	1077870592
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	539284065               @ double 0.33143666399999999
	.long	1070937666
	.long	1055806041              @ double 12.476129500000001
	.long	1076425671
	.long	0                       @ double 32
	.long	1077936128
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	1616631738              @ double 0.33417257700000003
	.long	1070949141
	.long	1085712757              @ double 12.8381901
	.long	1076473127
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	3229263452              @ double 0.33402484700000001
	.long	1070948521
	.long	559486492               @ double 13.2160273
	.long	1076522651
	.long	0                       @ double 34
	.long	1078001664
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	1605682801              @ double 0.33392629000000001
	.long	1070948108
	.long	1058060039              @ double 13.569047899999999
	.long	1076568922
	.long	0                       @ double 35
	.long	1078034432
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 0
	.long	0
	.long	530588687               @ double 0.053475055799999997
	.long	1068196117
	.long	4294162453              @ double 0.33421850199999997
	.long	1070949333
	.long	3206395809              @ double 13.9303951
	.long	1076616284
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 0
	.long	0
	.long	530588687               @ double 0.053475055799999997
	.long	1068196117
	.long	2997269                 @ double 0.33640503900000002
	.long	1070958505
	.long	3233663697              @ double 14.298192999999999
	.long	1076664492
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 0
	.long	0
	.long	1608666875              @ double 0.062387566999999998
	.long	1068495171
	.long	2679648375              @ double 0.33708038899999998
	.long	1070961337
	.long	3202052738              @ double 14.666563
	.long	1076712775
	.long	0                       @ double 38
	.long	1078132736
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 0
	.long	0
	.long	1608666875              @ double 0.062387566999999998
	.long	1068495171
	.long	1070583477              @ double 0.33560353500000001
	.long	1070955143
	.long	24244231                @ double 15.034690899999999
	.long	1076761027
	.long	0                       @ double 39
	.long	1078165504
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 0
	.long	0
	.long	3224243082              @ double 0.071300074500000005
	.long	1068646584
	.long	2692202599              @ double 0.33251586599999999
	.long	1070942192
	.long	3758130744              @ double 15.398139
	.long	1076808664
	.long	0                       @ double 40
	.long	1078198272
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 0
	.long	0
	.long	3224243082              @ double 0.071300074500000005
	.long	1068646584
	.long	536313185               @ double 0.32772758600000002
	.long	1070922109
	.long	2121672613              @ double 15.757045700000001
	.long	1076855707
	.long	0                       @ double 41
	.long	1078231040
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 0
	.long	0
	.long	3756076416              @ double 0.080212585599999997
	.long	1068796111
	.long	2678436714              @ double 0.32234683600000003
	.long	1070899540
	.long	1603747660              @ double 16.108343099999999
	.long	1076894652
	.long	0                       @ double 42
	.long	1078263808
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 0
	.long	0
	.long	3756076416              @ double 0.080212585599999997
	.long	1068796111
	.long	3749251088              @ double 0.31757518600000001
	.long	1070879526
	.long	523037681               @ double 16.452852199999999
	.long	1076917230
	.long	0                       @ double 43
	.long	1078296576
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 0
	.long	0
	.long	148214                  @ double 0.089125096799999997
	.long	1068945639
	.long	1606903259              @ double 0.31632933000000002
	.long	1070874301
	.long	1622329407              @ double 16.788610500000001
	.long	1076939234
	.long	0                       @ double 44
	.long	1078329344
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 0
	.long	0
	.long	4293722649              @ double 0.098037600500000002
	.long	1069095165
	.long	2676400418              @ double 0.317602783
	.long	1070879642
	.long	3229815407              @ double 17.132000000000001
	.long	1076961738
	.long	0                       @ double 45
	.long	1078362112
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 0
	.long	0
	.long	559411725               @ double 0.106950112
	.long	1069244693
	.long	1603829024              @ double 0.31994518599999999
	.long	1070889467
	.long	1069879789              @ double 17.479602799999999
	.long	1076984519
	.long	0                       @ double 46
	.long	1078394880
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 0
	.long	0
	.long	1084039300              @ double 0.115862623
	.long	1069394220
	.long	2681473565              @ double 0.32088175400000002
	.long	1070893395
	.long	8686142                 @ double 17.8287659
	.long	1077007402
	.long	0                       @ double 47
	.long	1078427648
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 0
	.long	0
	.long	1608666875              @ double 0.124775134
	.long	1069543747
	.long	3216682840              @ double 0.32034653400000002
	.long	1070891150
	.long	525126753               @ double 18.177492099999998
	.long	1077030256
	.long	0                       @ double 48
	.long	1078460416
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 0
	.long	0
	.long	1066647225              @ double 0.13368764499999999
	.long	1069620397
	.long	2151355028              @ double 0.31862866899999998
	.long	1070883945
	.long	2687811150              @ double 18.524316800000001
	.long	1077052985
	.long	0                       @ double 49
	.long	1078493184
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 0
	.long	0
	.long	3224243082              @ double 0.14260014900000001
	.long	1069695160
	.long	2155739881              @ double 0.31612575100000001
	.long	1070873447
	.long	2684567590              @ double 18.868173599999999
	.long	1077075520
	.long	0                       @ double 50
	.long	1078525952
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 0
	.long	0
	.long	1086871642              @ double 0.151512653
	.long	1069769924
	.long	3756103244              @ double 0.31374618399999998
	.long	1070863466
	.long	1601053857              @ double 19.208272900000001
	.long	1077097809
	.long	0                       @ double 51
	.long	1078558720
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 0
	.long	0
	.long	3748870657              @ double 0.16042517100000001
	.long	1069844687
	.long	3225487729              @ double 0.31297177100000001
	.long	1070860218
	.long	3211948343              @ double 19.544002500000001
	.long	1077119811
	.long	0                       @ double 52
	.long	1078591488
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 0
	.long	0
	.long	14559733                @ double 0.178250194
	.long	1069994215
	.long	4285997480              @ double 0.31327891299999999
	.long	1070861506
	.long	2670933646              @ double 19.883188199999999
	.long	1077142040
	.long	0                       @ double 53
	.long	1078624256
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 0
	.long	0
	.long	1608227071              @ double 0.37343868600000002
	.long	1071113835
	.long	1601896083              @ double 0.31373557400000002
	.long	1070863422
	.long	1079720418              @ double 20.224246999999998
	.long	1077164392
	.long	0                       @ double 54
	.long	1078657024
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 0
	.long	0
	.long	1073193717              @ double 0.40900427099999997
	.long	1071263008
	.long	1607343063              @ double 0.31308492999999998
	.long	1070860693
	.long	2147181282              @ double 20.564628599999999
	.long	1077186699
	.long	0                       @ double 55
	.long	1078689792
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 0
	.long	0
	.long	2691951910              @ double 0.42678704899999997
	.long	1071337594
	.long	3759428167              @ double 0.31156226999999997
	.long	1070854306
	.long	1067625791              @ double 20.903141000000002
	.long	1077208884
	.long	0                       @ double 56
	.long	1078722560
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 0
	.long	0
	.long	532607831               @ double 0.73277956200000005
	.long	1072132846
	.long	3755577678              @ double 0.31043574200000001
	.long	1070849581
	.long	1070044716              @ double 21.237674699999999
	.long	1077230808
	.long	0                       @ double 57
	.long	1078755328
	.long	0                       @ double 28
	.long	1077673984
	.long	0                       @ double 0
	.long	0
	.long	2682551086              @ double 0.78914719799999999
	.long	1072251057
	.long	528942059               @ double 0.31132248000000001
	.long	1070853301
	.long	5057753                 @ double 21.573059099999998
	.long	1077252788
	.long	0                       @ double 58
	.long	1078788096
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 0
	.long	0
	.long	1077959001              @ double 0.84551489400000002
	.long	1072369269
	.long	7630611                 @ double 0.32730341000000002
	.long	1070920330
	.long	1084778172              @ double 21.9066811
	.long	1077274652
	.long	0                       @ double 59
	.long	1078820864
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 0
	.long	0
	.long	546963054               @ double 2.9411280199999998
	.long	1074235246
	.long	8274925                 @ double 0.41465973900000003
	.long	1071286729
	.long	3229650480              @ double 22.241115600000001
	.long	1077296569
	.long	0                       @ double 16000
	.long	1087324160
	.long	0                       @ double 55
	.long	1078689792
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 15
	.long	1076756480
	.long	2671043597              @ double 26.737527799999999
	.long	1077591246
	.long	2683830918              @ double 0.69737416500000005
	.long	1072058595
	.long	4288697881              @ double 0.23687446100000001
	.long	1070485990
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 15
	.long	1076756480
	.long	2671043597              @ double 26.737527799999999
	.long	1077591246
	.long	1617003372              @ double 0.45502480899999997
	.long	1071456032
	.long	2681719855              @ double 0.71016102999999997
	.long	1072085411
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 15
	.long	1076756480
	.long	2136834878              @ double 2.6737527800000001
	.long	1074095064
	.long	1614206215              @ double 0.43144044300000001
	.long	1071357112
	.long	1624264547              @ double 1.1819328099999999
	.long	1072884018
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 15
	.long	1076756480
	.long	2136834878              @ double 2.6737527800000001
	.long	1074095064
	.long	2675936424              @ double 0.42391624999999999
	.long	1071325553
	.long	2676178317              @ double 1.6510273200000001
	.long	1073375899
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 13
	.long	1076494336
	.long	1066647225              @ double 0.26737528999999999
	.long	1070668973
	.long	1607930203              @ double 0.41820678100000003
	.long	1071301606
	.long	543994373               @ double 2.11632562
	.long	1073802812
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 13
	.long	1076494336
	.long	1066647225              @ double 0.26737528999999999
	.long	1070668973
	.long	2144377528              @ double 0.41158545000000002
	.long	1071273834
	.long	1063359685              @ double 2.5767674399999998
	.long	1074044216
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 13
	.long	1076494336
	.long	2681234751              @ double 0.084551490800000004
	.long	1068868906
	.long	1068767084              @ double 0.40540915700000002
	.long	1071247929
	.long	3212036304              @ double 3.0313639600000002
	.long	1074282555
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 13
	.long	1076494336
	.long	2681234751              @ double 0.084551490800000004
	.long	1068868906
	.long	1613669653              @ double 0.39969548599999999
	.long	1071223964
	.long	2673891332              @ double 3.4792091799999998
	.long	1074517355
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 13
	.long	1076494336
	.long	2681234751              @ double 0.084551490800000004
	.long	1068868906
	.long	3228940195              @ double 0.39375323099999998
	.long	1071199040
	.long	1081963422              @ double 3.9194874799999999
	.long	1074748188
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 12
	.long	1076363264
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	4288240484              @ double 0.38735747300000001
	.long	1071172214
	.long	1073365241              @ double 4.3514795299999998
	.long	1074882538
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 12
	.long	1076363264
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	535879977               @ double 0.38045456999999999
	.long	1071143262
	.long	1614885713              @ double 4.7745642699999999
	.long	1074993447
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 10
	.long	1076101120
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	2141213133              @ double 0.37305390799999999
	.long	1071112221
	.long	3216599277              @ double 5.1882200200000002
	.long	1075101884
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 10
	.long	1076101120
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	3681165                 @ double 0.365188122
	.long	1071079230
	.long	4292559366              @ double 5.5920219400000004
	.long	1075207738
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 10
	.long	1076101120
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	2692349934              @ double 0.35689774200000002
	.long	1071044457
	.long	2685502175              @ double 5.9856400499999998
	.long	1075310923
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 9
	.long	1075970048
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	5365617                 @ double 0.34869957000000001
	.long	1071010072
	.long	4289876557              @ double 6.3688316299999999
	.long	1075411374
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 9
	.long	1075970048
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	1617874186              @ double 0.34024152200000002
	.long	1070974596
	.long	2145246142              @ double 6.7414379100000001
	.long	1075509051
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 6
	.long	1075314688
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	538030622               @ double 0.33208945400000001
	.long	1070940404
	.long	4293614897              @ double 7.1033744800000003
	.long	1075603930
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 6
	.long	1075314688
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	1076160200              @ double 0.32829266800000001
	.long	1070924479
	.long	4475012                 @ double 7.4546241799999997
	.long	1075696009
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 6
	.long	1075314688
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	2487095                 @ double 0.33657479299999998
	.long	1070959217
	.long	1074695650              @ double 7.7952318199999997
	.long	1075785297
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 3
	.long	1074266112
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	1071227791              @ double 0.35460048900000002
	.long	1071034822
	.long	1074101914              @ double 8.1782779699999999
	.long	1075862343
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 3
	.long	1074266112
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	3218248544              @ double 0.36434334499999999
	.long	1071075686
	.long	2686194868              @ double 8.5999498400000007
	.long	1075917612
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 3
	.long	1074266112
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	1604108300              @ double 0.359369367
	.long	1071054824
	.long	2684259727              @ double 9.0036363599999998
	.long	1075970524
	.long	0                       @ double 22
	.long	1077280768
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 3
	.long	1074266112
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	2689403243              @ double 0.34777584700000003
	.long	1071006197
	.long	1610410701              @ double 9.3898801800000004
	.long	1076021150
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 3
	.long	1074266112
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	2151368223              @ double 0.33556258700000002
	.long	1070954971
	.long	4293537931              @ double 9.7592926000000002
	.long	1076069569
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	2150317089              @ double 0.32698857799999997
	.long	1070919009
	.long	1047119899              @ double 10.112527800000001
	.long	1076115869
	.long	0                       @ double 25
	.long	1077477376
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	4290890307              @ double 0.32796621300000001
	.long	1070923109
	.long	1065976523              @ double 10.4502735
	.long	1076160138
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	545102681               @ double 0.33445075200000002
	.long	1070950308
	.long	3737514901              @ double 10.811614000000001
	.long	1076207499
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	3219018202              @ double 0.33522814499999998
	.long	1070953568
	.long	3776107759              @ double 11.1935263
	.long	1076257557
	.long	0                       @ double 28
	.long	1077673984
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	1066526279              @ double 0.329595625
	.long	1070929944
	.long	2695837585              @ double 11.554928800000001
	.long	1076304927
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	3216766403              @ double 0.32668322300000002
	.long	1070917728
	.long	2137560556              @ double 11.897144300000001
	.long	1076349782
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 0
	.long	0
	.long	530588687               @ double 0.053475055799999997
	.long	1068196117
	.long	4289836975              @ double 0.32698655100000001
	.long	1070919000
	.long	2145092210              @ double 12.2520256
	.long	1076396297
	.long	0                       @ double 31
	.long	1077870592
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 0
	.long	0
	.long	530588687               @ double 0.053475055799999997
	.long	1068196117
	.long	2682441135              @ double 0.32507219900000001
	.long	1070910971
	.long	2142783236              @ double 12.6173973
	.long	1076444187
	.long	0                       @ double 32
	.long	1077936128
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 0
	.long	0
	.long	530588687               @ double 0.053475055799999997
	.long	1068196117
	.long	542512231               @ double 0.32356026799999998
	.long	1070904630
	.long	2162244592              @ double 12.960826900000001
	.long	1076489201
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 0
	.long	0
	.long	1608666875              @ double 0.062387566999999998
	.long	1068495171
	.long	532913495               @ double 0.32249429800000001
	.long	1070900159
	.long	3784354096              @ double 13.3093863
	.long	1076534887
	.long	0                       @ double 34
	.long	1078001664
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 0
	.long	0
	.long	1608666875              @ double 0.062387566999999998
	.long	1068495171
	.long	1613018742              @ double 0.32340344799999998
	.long	1070903972
	.long	1589838838              @ double 13.6617231
	.long	1076581069
	.long	0                       @ double 35
	.long	1078034432
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 0
	.long	0
	.long	3224243082              @ double 0.071300074500000005
	.long	1068646584
	.long	3226024290              @ double 0.32323235299999997
	.long	1070903254
	.long	517155294               @ double 14.0134668
	.long	1076627173
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 0
	.long	0
	.long	3224243082              @ double 0.071300074500000005
	.long	1068646584
	.long	531143281               @ double 0.322662383
	.long	1070900864
	.long	1618536092              @ double 14.363978400000001
	.long	1076673115
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 0
	.long	0
	.long	3756076416              @ double 0.080212585599999997
	.long	1068796111
	.long	4291717140              @ double 0.32405424100000002
	.long	1070906701
	.long	1924145                 @ double 14.709846499999999
	.long	1076718449
	.long	0                       @ double 38
	.long	1078132736
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 0
	.long	0
	.long	148214                  @ double 0.089125096799999997
	.long	1068945639
	.long	3753462217              @ double 0.32322880599999998
	.long	1070903239
	.long	2706667774              @ double 15.0686541
	.long	1076765478
	.long	0                       @ double 39
	.long	1078165504
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 0
	.long	0
	.long	148214                  @ double 0.089125096799999997
	.long	1068945639
	.long	3224168315              @ double 0.32075184600000001
	.long	1070892850
	.long	3208594832              @ double 15.4191036
	.long	1076811412
	.long	0                       @ double 40
	.long	1078198272
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 0
	.long	0
	.long	4293722649              @ double 0.098037600500000002
	.long	1069095165
	.long	8017639                 @ double 0.31882333800000001
	.long	1070884762
	.long	3200898251              @ double 15.7594051
	.long	1076856016
	.long	0                       @ double 41
	.long	1078231040
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 0
	.long	0
	.long	559411725               @ double 0.106950112
	.long	1069244693
	.long	3228042994              @ double 0.31841868200000001
	.long	1070883064
	.long	1063227744              @ double 16.104557
	.long	1076894404
	.long	0                       @ double 42
	.long	1078263808
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 0
	.long	0
	.long	1084039300              @ double 0.115862623
	.long	1069394220
	.long	1081222351              @ double 0.31876212399999998
	.long	1070884505
	.long	4290569249              @ double 16.451415999999998
	.long	1076917135
	.long	0                       @ double 43
	.long	1078296576
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 0
	.long	0
	.long	1608666875              @ double 0.124775134
	.long	1069543747
	.long	2686010150              @ double 0.31780639300000002
	.long	1070880496
	.long	2159495813              @ double 16.797538800000002
	.long	1076939819
	.long	0                       @ double 44
	.long	1078329344
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 0
	.long	0
	.long	1066647225              @ double 0.13368764499999999
	.long	1069620397
	.long	3755177456              @ double 0.31565377100000003
	.long	1070871467
	.long	1063282720              @ double 17.141101800000001
	.long	1076962335
	.long	0                       @ double 45
	.long	1078362112
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 0
	.long	0
	.long	3224243082              @ double 0.14260014900000001
	.long	1069695160
	.long	5029166                 @ double 0.31336903599999999
	.long	1070861885
	.long	3224757653              @ double 17.4808159
	.long	1076984598
	.long	0                       @ double 46
	.long	1078394880
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 0
	.long	0
	.long	1086871642              @ double 0.151512653
	.long	1069769924
	.long	535431376               @ double 0.31251385799999998
	.long	1070858298
	.long	2686051931              @ double 17.8158207
	.long	1077006553
	.long	0                       @ double 47
	.long	1078427648
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 0
	.long	0
	.long	1611499217              @ double 0.16933767499999999
	.long	1069919451
	.long	3761369905              @ double 0.312785119
	.long	1070859435
	.long	2676101351              @ double 18.154336900000001
	.long	1077028738
	.long	0                       @ double 48
	.long	1078460416
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 0
	.long	0
	.long	14559733                @ double 0.178250194
	.long	1069994215
	.long	535539129               @ double 0.31343773000000003
	.long	1070862173
	.long	3353510                 @ double 18.494857799999998
	.long	1077051055
	.long	0                       @ double 49
	.long	1078493184
	.long	0                       @ double 22
	.long	1077280768
	.long	0                       @ double 0
	.long	0
	.long	4293722649              @ double 0.196075201
	.long	1070143741
	.long	2145177972              @ double 0.31325876699999999
	.long	1070861422
	.long	2135306557              @ double 18.835014300000001
	.long	1077073347
	.long	0                       @ double 50
	.long	1078525952
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 0
	.long	0
	.long	2696783165              @ double 0.20498772000000001
	.long	1070218505
	.long	1612633913              @ double 0.31257042299999999
	.long	1070858535
	.long	3769840543              @ double 19.174070400000002
	.long	1077095567
	.long	0                       @ double 51
	.long	1078558720
	.long	0                       @ double 25
	.long	1077477376
	.long	0                       @ double 0
	.long	0
	.long	2680978784              @ double 0.22281272699999999
	.long	1070368032
	.long	1068855045              @ double 0.31257277700000002
	.long	1070858545
	.long	3210464002              @ double 19.5104179
	.long	1077117610
	.long	0                       @ double 52
	.long	1078591488
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 0
	.long	0
	.long	3205606360              @ double 0.24063774900000001
	.long	1070517559
	.long	3756430899              @ double 0.31304785600000001
	.long	1070860537
	.long	1614852728              @ double 19.849767700000001
	.long	1077139850
	.long	0                       @ double 53
	.long	1078624256
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 0
	.long	0
	.long	2151746455              @ double 0.51570105600000005
	.long	1071677599
	.long	535259853               @ double 0.31502917400000002
	.long	1070868848
	.long	6597070                 @ double 20.190063500000001
	.long	1077162152
	.long	0                       @ double 54
	.long	1078657024
	.long	0                       @ double 31
	.long	1077870592
	.long	0                       @ double 0
	.long	0
	.long	3761497448              @ double 0.55126661099999996
	.long	1071752185
	.long	4292649525              @ double 0.33061361299999997
	.long	1070934213
	.long	4283917204              @ double 20.529495199999999
	.long	1077184396
	.long	0                       @ double 55
	.long	1078689792
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 0
	.long	0
	.long	1607705902              @ double 0.58683222499999999
	.long	1071826772
	.long	3228792861              @ double 0.41819948000000001
	.long	1071301575
	.long	4289524713              @ double 20.866439799999998
	.long	1077206478
	.long	0                       @ double 48000
	.long	1088909312
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	2611340116              @ double 4.532
	.long	1074929860
	.long	0                       @ double 1
	.long	1072693248
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 1
	.long	1072693248
	.long	1752346657              @ double 0.90400000000000003
	.long	1072491921
	.long	1408749273              @ double 0.98899999999999999
	.long	1072670179
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	0                       @ double 1.875
	.long	1073610752
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 1
	.long	1072693248
	.long	240518169               @ double 0.029000000000000001
	.long	1067299373
	.long	1408749273              @ double 0.98899999999999999
	.long	1072670179
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	0                       @ double 3.75
	.long	1074659328
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	481036337               @ double 0.98099999999999998
	.long	1072653402
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	309237645               @ double 5.4379999999999997
	.long	1075167363
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	3092376453              @ double 0.98499999999999998
	.long	1072661790
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	1752346657              @ double 6.8570000000000002
	.long	1075539345
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	2439541424              @ double 0.98399999999999999
	.long	1072659693
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	3642132267              @ double 8.109
	.long	1075853262
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	4123168604              @ double 0.97999999999999998
	.long	1072651304
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	274877907               @ double 9.2370000000000001
	.long	1076001112
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	584115552               @ double 0.96799999999999997
	.long	1072626139
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	2336462209              @ double 10.202
	.long	1076127596
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	34359738                @ double 0.95399999999999996
	.long	1072596779
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	4191888081              @ double 11.083
	.long	1076243070
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	893353198               @ double 0.92900000000000005
	.long	1072544350
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	1202590843              @ double 11.865
	.long	1076345569
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	3058016715              @ double 0.90600000000000003
	.long	1072496115
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	3813930959              @ double 12.554
	.long	1076435877
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	927712936               @ double 0.88300000000000001
	.long	1072447881
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	171798692               @ double 13.195
	.long	1076519895
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	1236950581              @ double 0.84399999999999997
	.long	1072366092
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	996432413               @ double 13.781000000000001
	.long	1076596703
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	1649267442              @ double 0.79200000000000004
	.long	1072257040
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	1065151889              @ double 14.308999999999999
	.long	1076665909
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	2336462209              @ double 0.747
	.long	1072162668
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	3504693314              @ double 14.803000000000001
	.long	1076730658
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	3126736191              @ double 0.68899999999999995
	.long	1072041033
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	0                       @ double 15.25
	.long	1076789248
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	3813930959              @ double 0.64400000000000002
	.long	1071946661
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	103079215               @ double 15.667
	.long	1076843905
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	4226247819              @ double 0.59199999999999997
	.long	1071837609
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	1924145349              @ double 16.068000000000001
	.long	1076892008
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	240518169               @ double 0.55300000000000005
	.long	1071755821
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	962072674               @ double 16.408999999999999
	.long	1076914356
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	858993459               @ double 0.84999999999999998
	.long	1072378675
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	515396076               @ double 17.045000000000002
	.long	1076956037
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	1168231105              @ double 0.81100000000000005
	.long	1072296886
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	1511828488              @ double 17.606999999999999
	.long	1076992868
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	3745211482              @ double 0.73599999999999999
	.long	1072139599
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	4260607558              @ double 18.097000000000001
	.long	1077024980
	.long	0                       @ double 22
	.long	1077280768
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	343597384               @ double 0.66500000000000004
	.long	1071990702
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	34359738                @ double 18.527999999999999
	.long	1077053227
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	3092376453              @ double 0.60999999999999999
	.long	1071875358
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	68719477                @ double 18.931000000000001
	.long	1077079638
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	2954937500              @ double 0.54400000000000004
	.long	1071736946
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	515396076               @ double 19.295000000000002
	.long	1077103493
	.long	0                       @ double 25
	.long	1077477376
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	1099511628              @ double 0.52800000000000002
	.long	1071703392
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	3848290697              @ double 19.635999999999999
	.long	1077125840
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 3
	.long	1074266112
	.long	1408749273              @ double 0.053999999999999999
	.long	1068213731
	.long	1683627180              @ double 0.621
	.long	1071898427
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	1580547965              @ double 20.038
	.long	1077152186
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 3
	.long	1074266112
	.long	1408749273              @ double 0.053999999999999999
	.long	1068213731
	.long	1271310320              @ double 0.67300000000000004
	.long	1072007479
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	2130303779              @ double 20.486000000000001
	.long	1077181546
	.long	0                       @ double 28
	.long	1077673984
	.long	0                       @ double 3
	.long	1074266112
	.long	1408749273              @ double 0.053999999999999999
	.long	1068213731
	.long	2233382994              @ double 0.63500000000000001
	.long	1071927787
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	1717986918              @ double 20.899999999999999
	.long	1077208678
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 4
	.long	1074790400
	.long	2680059593              @ double 0.114
	.long	1069362970
	.long	652835029               @ double 0.626
	.long	1071908913
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	68719477                @ double 21.306000000000001
	.long	1077235286
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 4
	.long	1074790400
	.long	2680059593              @ double 0.114
	.long	1069362970
	.long	2886218023              @ double 0.63600000000000001
	.long	1071929884
	.long	3779571220              @ double -6.0199999999999996
	.long	3222803578
	.long	4260607558              @ double 21.722000000000001
	.long	1077262548
	.long	0                       @ double 31
	.long	1077870592
	.long	0                       @ double 5
	.long	1075052544
	.long	1752346657              @ double 0.45200000000000001
	.long	1071443345
	.long	2061584302              @ double 0.61499999999999999
	.long	1071885844
	.long	3779571220              @ double -6.0199999999999996
	.long	3222803578
	.long	2611340116              @ double 22.128
	.long	1077289156
	.long	0                       @ double 32
	.long	1077936128
	.long	0                       @ double 5
	.long	1075052544
	.long	1752346657              @ double 0.45200000000000001
	.long	1071443345
	.long	34359738                @ double 0.57899999999999996
	.long	1071810347
	.long	3779571220              @ double -6.0199999999999996
	.long	3222803578
	.long	4157528343              @ double 22.513000000000002
	.long	1077314387
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 5
	.long	1075052544
	.long	1752346657              @ double 0.45200000000000001
	.long	1071443345
	.long	3229815407              @ double 0.55100000000000005
	.long	1071751626
	.long	3779571220              @ double -6.0199999999999996
	.long	3222803578
	.long	309237645               @ double 22.876999999999999
	.long	1077338243
	.long	0                       @ double 34
	.long	1078001664
	.long	0                       @ double 7
	.long	1075576832
	.long	2233382994              @ double 6.3300000000000001
	.long	1075401195
	.long	3882650436              @ double 0.55200000000000005
	.long	1071753723
	.long	4191888081              @ double -5.2290000000000001
	.long	3222596222
	.long	755914244               @ double 23.241
	.long	1077362098
	.long	0                       @ double 35
	.long	1078034432
	.long	0                       @ double 7
	.long	1075576832
	.long	2233382994              @ double 6.3300000000000001
	.long	1075401195
	.long	4157528343              @ double 0.55900000000000005
	.long	1071768403
	.long	4191888081              @ double -5.2290000000000001
	.long	3222596222
	.long	755914244               @ double 23.616
	.long	1077386674
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 11
	.long	1076232192
	.long	790273982               @ double 9.9469999999999992
	.long	1076094173
	.long	1099511628              @ double 0.52800000000000002
	.long	1071703392
	.long	4191888081              @ double -5.2290000000000001
	.long	3222596222
	.long	274877907               @ double 23.974
	.long	1077410136
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 17
	.long	1076953088
	.long	2508260901              @ double 153.727
	.long	1080244035
	.long	2645699854              @ double 0.47899999999999998
	.long	1071556591
	.long	4191888081              @ double -5.2290000000000001
	.long	3222596222
	.long	3298534883              @ double 24.312999999999999
	.long	1077432352
	.long	0                       @ double 44100
	.long	1088784512
	.long	0                       @ double 38
	.long	1078132736
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	2611340116              @ double 4.532
	.long	1074929860
	.long	0                       @ double 1
	.long	1072693248
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 1
	.long	1072693248
	.long	1752346657              @ double 0.90400000000000003
	.long	1072491921
	.long	1786706395              @ double 0.98299999999999998
	.long	1072657596
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	1924145349              @ double 1.7230000000000001
	.long	1073451368
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 1
	.long	1072693248
	.long	240518169               @ double 0.029000000000000001
	.long	1067299373
	.long	1786706395              @ double 0.98299999999999998
	.long	1072657596
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	687194767               @ double 3.4449999999999998
	.long	1074499420
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	1133871366              @ double 0.98199999999999998
	.long	1072655499
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	893353198               @ double 5.0570000000000004
	.long	1075067486
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	3092376453              @ double 0.98499999999999998
	.long	1072661790
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	3298534883              @ double 6.4219999999999997
	.long	1075425312
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	1786706395              @ double 0.98299999999999998
	.long	1072657596
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	2989297238              @ double 7.609
	.long	1075736477
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	2817498546              @ double 0.97799999999999998
	.long	1072647110
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	515396076               @ double 8.7100000000000008
	.long	1075932037
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	4226247819              @ double 0.96699999999999997
	.long	1072624041
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	2851858285              @ double 9.6620000000000008
	.long	1076056817
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	412316860               @ double 0.94799999999999995
	.long	1072584196
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	343597384               @ double 10.515000000000001
	.long	1076168622
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	1546188227              @ double 0.93000000000000005
	.long	1072546447
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	412316860               @ double 11.292999999999999
	.long	1076270596
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	3985729651              @ double 0.91400000000000003
	.long	1072512892
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	2783138808              @ double 12.009
	.long	1076364443
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	1030792151              @ double 0.87
	.long	1072420618
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	0                       @ double 12.625
	.long	1076445184
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	1889785610              @ double 0.84499999999999997
	.long	1072368189
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	515396076               @ double 13.210000000000001
	.long	1076521861
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	2576980378              @ double 0.80000000000000004
	.long	1072273817
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	3676492005              @ double 13.747999999999999
	.long	1076592377
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	3642132267              @ double 0.749
	.long	1072166862
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	1511828488              @ double 14.241
	.long	1076656996
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	2370821947              @ double 0.70099999999999996
	.long	1072066199
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	171798692               @ double 14.695
	.long	1076716503
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	1099511628              @ double 0.65300000000000002
	.long	1071965536
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	0                       @ double 15.125
	.long	1076772864
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	2920577761              @ double 0.58999999999999997
	.long	1071833415
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	2473901162              @ double 15.507999999999999
	.long	1076823064
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	2714419331              @ double 0.61599999999999999
	.long	1071887941
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	652835029               @ double 15.891
	.long	1076873265
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	3092376453              @ double 0.85999999999999999
	.long	1072399646
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	3573412790              @ double 16.536999999999999
	.long	1076922744
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	412316860               @ double 0.82299999999999995
	.long	1072322052
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	137438953               @ double 17.111999999999998
	.long	1076960428
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	3539053052              @ double 0.76200000000000001
	.long	1072194125
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	3676492005              @ double 17.620999999999999
	.long	1076993785
	.long	0                       @ double 22
	.long	1077280768
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	2473901162              @ double 0.68799999999999994
	.long	1072038936
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	549755814               @ double 18.073
	.long	1077023408
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	103079215               @ double 0.61199999999999999
	.long	1071879553
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	3951369912              @ double 18.469999999999999
	.long	1077049425
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	1236950581              @ double 0.59399999999999997
	.long	1071841804
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	274877907               @ double 18.849
	.long	1077074264
	.long	0                       @ double 25
	.long	1077477376
	.long	0                       @ double 3
	.long	1074266112
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	68719477                @ double 0.65800000000000003
	.long	1071976022
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	1099511628              @ double 19.271000000000001
	.long	1077101920
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 3
	.long	1074266112
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	1340029796              @ double 0.70599999999999996
	.long	1072076685
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	755914244               @ double 19.741
	.long	1077132722
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 3
	.long	1074266112
	.long	1408749273              @ double 0.053999999999999999
	.long	1068213731
	.long	1374389535              @ double 0.66000000000000003
	.long	1071980216
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	3745211482              @ double 20.177
	.long	1077161295
	.long	0                       @ double 28
	.long	1077673984
	.long	0                       @ double 3
	.long	1074266112
	.long	1408749273              @ double 0.053999999999999999
	.long	1068213731
	.long	481036337               @ double 0.60599999999999998
	.long	1071866970
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	3161095930              @ double 20.576000000000001
	.long	1077187444
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 3
	.long	1074266112
	.long	1408749273              @ double 0.053999999999999999
	.long	1068213731
	.long	3779571220              @ double 0.56499999999999995
	.long	1071780986
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	858993459               @ double 20.949999999999999
	.long	1077211955
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 4
	.long	1074790400
	.long	2680059593              @ double 0.114
	.long	1069362970
	.long	515396076               @ double 0.56000000000000005
	.long	1071770501
	.long	3779571220              @ double -6.0199999999999996
	.long	3222803578
	.long	1614907703              @ double 21.315999999999999
	.long	1077235941
	.long	0                       @ double 31
	.long	1077870592
	.long	0                       @ double 4
	.long	1074790400
	.long	2680059593              @ double 0.114
	.long	1069362970
	.long	34359738                @ double 0.57899999999999996
	.long	1071810347
	.long	3779571220              @ double -6.0199999999999996
	.long	3222803578
	.long	2851858285              @ double 21.699000000000002
	.long	1077261041
	.long	0                       @ double 32
	.long	1077936128
	.long	0                       @ double 5
	.long	1075052544
	.long	1752346657              @ double 0.45200000000000001
	.long	1071443345
	.long	790273982               @ double 0.56699999999999995
	.long	1071785181
	.long	3779571220              @ double -6.0199999999999996
	.long	3222803578
	.long	3470333575              @ double 22.077999999999999
	.long	1077285879
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 5
	.long	1075052544
	.long	1752346657              @ double 0.45200000000000001
	.long	1071443345
	.long	721554506               @ double 0.53400000000000003
	.long	1071715975
	.long	3779571220              @ double -6.0199999999999996
	.long	3222803578
	.long	3298534883              @ double 22.437999999999999
	.long	1077309472
	.long	0                       @ double 34
	.long	1078001664
	.long	0                       @ double 5
	.long	1075052544
	.long	1752346657              @ double 0.45200000000000001
	.long	1071443345
	.long	549755814               @ double 0.51400000000000001
	.long	1071674032
	.long	4191888081              @ double -5.2290000000000001
	.long	3222596222
	.long	652835029               @ double 22.782
	.long	1077332017
	.long	0                       @ double 35
	.long	1078034432
	.long	0                       @ double 7
	.long	1075576832
	.long	2233382994              @ double 6.3300000000000001
	.long	1075401195
	.long	171798692               @ double 0.52000000000000002
	.long	1071686615
	.long	4191888081              @ double -5.2290000000000001
	.long	3222596222
	.long	1236950581              @ double 23.132999999999999
	.long	1077355020
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 7
	.long	1075576832
	.long	2233382994              @ double 6.3300000000000001
	.long	1075401195
	.long	3161095930              @ double 0.51800000000000002
	.long	1071682420
	.long	4191888081              @ double -5.2290000000000001
	.long	3222596222
	.long	1821066134              @ double 23.484000000000002
	.long	1077378023
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 7
	.long	1075576832
	.long	2233382994              @ double 6.3300000000000001
	.long	1075401195
	.long	274877907               @ double 0.50700000000000001
	.long	1071659352
	.long	4191888081              @ double -5.2290000000000001
	.long	3222596222
	.long	3470333575              @ double 23.827999999999999
	.long	1077400567
	.long	0                       @ double 38
	.long	1078132736
	.long	0                       @ double 19
	.long	1077084160
	.long	412316860               @ double 171.81299999999999
	.long	1080392196
	.long	3813930959              @ double 0.44700000000000001
	.long	1071422373
	.long	2130303779              @ double -4.5590000000000002
	.long	3222420586
	.long	3126736191              @ double 24.172999999999998
	.long	1077423177
	.long	0                       @ double 32000
	.long	1088372736
	.long	0                       @ double 41
	.long	1078231040
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	2611340116              @ double 4.532
	.long	1074929860
	.long	0                       @ double 1
	.long	1072693248
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 1
	.long	1072693248
	.long	1752346657              @ double 0.90400000000000003
	.long	1072491921
	.long	3092376453              @ double 0.98499999999999998
	.long	1072661790
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	0                       @ double 1.25
	.long	1072955392
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 1
	.long	1072693248
	.long	1889785610              @ double 0.089999999999999996
	.long	1068960317
	.long	1786706395              @ double 0.98299999999999998
	.long	1072657596
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	0                       @ double 2.5
	.long	1074003968
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 1
	.long	1072693248
	.long	240518169               @ double 0.029000000000000001
	.long	1067299373
	.long	1786706395              @ double 0.98299999999999998
	.long	1072657596
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	0                       @ double 3.75
	.long	1074659328
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	481036337               @ double 0.98099999999999998
	.long	1072653402
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	3848290697              @ double 4.9089999999999998
	.long	1075028688
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	858993459               @ double 0.97499999999999997
	.long	1072640819
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	4088808866              @ double 5.9580000000000002
	.long	1075303677
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	3298534883              @ double 0.95899999999999996
	.long	1072607264
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	1752346657              @ double 6.8570000000000002
	.long	1075539345
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	2095944040              @ double 0.94399999999999995
	.long	1072575807
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	3435973837              @ double 7.7000000000000001
	.long	1075760332
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	3504693314              @ double 0.93300000000000005
	.long	1072552738
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	0                       @ double 8.5
	.long	1075904512
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	3607772529              @ double 0.92000000000000004
	.long	1072525475
	.long	1202590843              @ double -8.2400000000000002
	.long	3223354081
	.long	274877907               @ double 9.2370000000000001
	.long	1076001112
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	2508260901              @ double 0.89200000000000002
	.long	1072466755
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	1889785610              @ double 9.8949999999999996
	.long	1076087357
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	755914244               @ double 0.86299999999999998
	.long	1072405938
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	0                       @ double 10.5
	.long	1076166656
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	2267742732              @ double 0.83899999999999996
	.long	1072355606
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	4191888081              @ double 11.083
	.long	1076243070
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	2027224564              @ double 0.78600000000000003
	.long	1072244457
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	2095944040              @ double 11.603999999999999
	.long	1076311359
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	3264175145              @ double 0.755
	.long	1072179445
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	3023656976              @ double 12.106999999999999
	.long	1076377288
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	412316860               @ double 0.69799999999999995
	.long	1072059908
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	3813930959              @ double 12.554
	.long	1076435877
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	1271310320              @ double 0.67300000000000004
	.long	1072007479
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	4123168604              @ double 0.60499999999999998
	.long	1071864872
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	652835029               @ double 13.391
	.long	1076545585
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 1
	.long	1072693248
	.long	2370821947              @ double 0.0089999999999999993
	.long	1065512599
	.long	2611340116              @ double 0.629
	.long	1071915204
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	996432413               @ double 13.781000000000001
	.long	1076596703
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	927712936               @ double 0.88300000000000001
	.long	1072447881
	.long	1580547965              @ double -7.4470000000000001
	.long	3223177658
	.long	549755814               @ double 14.474
	.long	1076687536
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	1786706395              @ double 0.85799999999999998
	.long	1072395452
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	3917010174              @ double 15.096
	.long	1076769062
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	34359738                @ double 0.82899999999999996
	.long	1072334635
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	103079215               @ double 15.667
	.long	1076843905
	.long	0                       @ double 22
	.long	1077280768
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	2508260901              @ double 0.76700000000000002
	.long	1072204611
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	3745211482              @ double 16.177
	.long	1076899151
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	687194767               @ double 0.70499999999999996
	.long	1072074588
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	3848290697              @ double 16.635999999999999
	.long	1076929232
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	3539053052              @ double 0.63700000000000001
	.long	1071931981
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	2370821947              @ double 17.056999999999999
	.long	1076956823
	.long	0                       @ double 25
	.long	1077477376
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	3126736191              @ double 0.56399999999999995
	.long	1071778889
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	4054449127              @ double 17.428999999999998
	.long	1076981202
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 2
	.long	1073741824
	.long	2370821947              @ double 0.017999999999999999
	.long	1066561175
	.long	2576980378              @ double 0.55000000000000004
	.long	1071749529
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	1271310320              @ double 17.786000000000001
	.long	1077004599
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 3
	.long	1074266112
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	2817498546              @ double 0.60299999999999998
	.long	1071860678
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	3745211482              @ double 18.177
	.long	1077030223
	.long	0                       @ double 28
	.long	1077673984
	.long	0                       @ double 3
	.long	1074266112
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	2233382994              @ double 0.63500000000000001
	.long	1071927787
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	4260607558              @ double 18.597000000000001
	.long	1077057748
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 3
	.long	1074266112
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	4226247819              @ double 0.59199999999999997
	.long	1071837609
	.long	2405181686              @ double -6.9900000000000002
	.long	3223057858
	.long	3367254360              @ double 18.994
	.long	1077083766
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 3
	.long	1074266112
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	68719477                @ double 0.53300000000000003
	.long	1071713878
	.long	3779571220              @ double -6.0199999999999996
	.long	3222803578
	.long	2886218023              @ double 19.352
	.long	1077107228
	.long	0                       @ double 31
	.long	1077870592
	.long	0                       @ double 3
	.long	1074266112
	.long	1408749273              @ double 0.027
	.long	1067165155
	.long	3161095930              @ double 0.51800000000000002
	.long	1071682420
	.long	3779571220              @ double -6.0199999999999996
	.long	3222803578
	.long	1924145349              @ double 19.693000000000001
	.long	1077129576
	.long	0                       @ double 32
	.long	1077936128
	.long	0                       @ double 4
	.long	1074790400
	.long	2370821947              @ double 0.071999999999999995
	.long	1068658327
	.long	1443109011              @ double 0.56799999999999995
	.long	1071787278
	.long	3779571220              @ double -6.0199999999999996
	.long	3222803578
	.long	1614907703              @ double 20.065999999999999
	.long	1077154021
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 4
	.long	1074790400
	.long	2370821947              @ double 0.071999999999999995
	.long	1068658327
	.long	1236950581              @ double 0.59399999999999997
	.long	1071841804
	.long	3779571220              @ double -6.0199999999999996
	.long	3222803578
	.long	2714419331              @ double 20.462
	.long	1077179973
	.long	0                       @ double 34
	.long	1078001664
	.long	0                       @ double 4
	.long	1074790400
	.long	2370821947              @ double 0.071999999999999995
	.long	1068658327
	.long	1443109011              @ double 0.56799999999999995
	.long	1071787278
	.long	4191888081              @ double -5.2290000000000001
	.long	3222596222
	.long	3332894622              @ double 20.841000000000001
	.long	1077204811
	.long	0                       @ double 35
	.long	1078034432
	.long	0                       @ double 5
	.long	1075052544
	.long	4054449127              @ double 0.14299999999999999
	.long	1069698514
	.long	2027224564              @ double 0.53600000000000003
	.long	1071720169
	.long	4191888081              @ double -5.2290000000000001
	.long	3222596222
	.long	3161095930              @ double 21.201000000000001
	.long	1077228404
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 5
	.long	1075052544
	.long	4054449127              @ double 0.14299999999999999
	.long	1069698514
	.long	1477468750              @ double 0.52200000000000002
	.long	1071690809
	.long	4191888081              @ double -5.2290000000000001
	.long	3222596222
	.long	1133871366              @ double 21.548999999999999
	.long	1077251211
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 6
	.long	1075314688
	.long	2473901162              @ double 0.17199999999999999
	.long	1069941784
	.long	1649267442              @ double 0.54200000000000004
	.long	1071732752
	.long	4191888081              @ double -5.2290000000000001
	.long	3222596222
	.long	1271310320              @ double 21.911000000000001
	.long	1077274935
	.long	0                       @ double 38
	.long	1078132736
	.long	0                       @ double 7
	.long	1075576832
	.long	927712936               @ double 0.63300000000000001
	.long	1071923593
	.long	3985729651              @ double 0.53900000000000003
	.long	1071726460
	.long	2130303779              @ double -4.5590000000000002
	.long	3222420586
	.long	1717986918              @ double 22.274999999999999
	.long	1077298790
	.long	0                       @ double 39
	.long	1078165504
	.long	0                       @ double 7
	.long	1075576832
	.long	927712936               @ double 0.63300000000000001
	.long	1071923593
	.long	3813930959              @ double 0.51900000000000002
	.long	1071684517
	.long	2130303779              @ double -4.5590000000000002
	.long	3222420586
	.long	0                       @ double 22.625
	.long	1077321728
	.long	0                       @ double 40
	.long	1078198272
	.long	0                       @ double 8
	.long	1075838976
	.long	3848290697              @ double 0.72299999999999998
	.long	1072112336
	.long	549755814               @ double 0.51400000000000001
	.long	1071674032
	.long	1030792151              @ double -3.98
	.long	3222263562
	.long	1958505087              @ double 22.971
	.long	1077344403
	.long	0                       @ double 41
	.long	1078231040
	.long	0                       @ double 10
	.long	1076101120
	.long	412316860               @ double 9.0429999999999992
	.long	1075975684
	.long	3161095930              @ double 0.51800000000000002
	.long	1071682420
	.long	1030792151              @ double -3.98
	.long	3222263562
	.long	240518169               @ double 23.321000000000002
	.long	1077367341
	.long	0                       @ double 24000
	.long	1087860736
	.long	0                       @ double 44
	.long	1078329344
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	1608057746              @ double 8.9125089600000003
	.long	1075958580
	.long	1077571973              @ double 0.97185003800000002
	.long	1072634213
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 1
	.long	1072693248
	.long	1608057746              @ double 8.9125089600000003
	.long	1075958580
	.long	2143869553              @ double 0.87472796399999997
	.long	1072430533
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	3219090770              @ double 0.94657313799999998
	.long	1072581203
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 1
	.long	1072693248
	.long	2680978784              @ double 0.89125090799999995
	.long	1072465184
	.long	4294703413              @ double 0.85779952999999998
	.long	1072395031
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	1619932471              @ double 1.8847621699999999
	.long	1073620988
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 1
	.long	1072693248
	.long	148214                  @ double 0.089125096799999997
	.long	1068945639
	.long	2150948209              @ double 0.83974385299999998
	.long	1072357166
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	1600998881              @ double 2.8056456999999999
	.long	1074164214
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 1
	.long	1072693248
	.long	3209887858              @ double 0.028183829000000001
	.long	1067244600
	.long	2683841913              @ double 0.82260257000000003
	.long	1072321218
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	547226937               @ double 3.7013361499999999
	.long	1074633814
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	536924513               @ double 0.80018573999999998
	.long	1072274207
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	1068164551              @ double 4.5653200099999998
	.long	1074938595
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	3222263961              @ double 0.77147519600000003
	.long	1072213996
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	3753677722              @ double 5.3926310500000003
	.long	1075155469
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	3760378146              @ double 0.73738998200000005
	.long	1072142514
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	539563341               @ double 6.1798672699999999
	.long	1075361839
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	1613696041              @ double 0.70111101899999995
	.long	1072066432
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	534010807               @ double 6.9250798199999997
	.long	1075557192
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	1073794051              @ double 0.65977633000000002
	.long	1071979747
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	1074838587              @ double 7.6275796900000001
	.long	1075741348
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	4292682511              @ double 0.61503744100000002
	.long	1071885922
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	3755788784              @ double 8.2877035100000001
	.long	1075876685
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	1611738911              @ double 0.56865805400000002
	.long	1071788658
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	1072661554              @ double 8.9065723400000003
	.long	1075957802
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	958774                  @ double 0.52226066599999998
	.long	1071691356
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	539684287               @ double 9.4858713199999993
	.long	1076033732
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	1077422439              @ double 0.47890311499999999
	.long	1071556185
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	25233792                @ double 10.0276566
	.long	1076104745
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	3759856977              @ double 0.43808648
	.long	1071384987
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	2169446393              @ double 10.5341988
	.long	1076171138
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	5792227                 @ double 0.41250562699999999
	.long	1071277694
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	4291723737              @ double 11.007865900000001
	.long	1076233222
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	6025324                 @ double 0.39070797000000002
	.long	1071186268
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	1060314038              @ double 11.4510288
	.long	1076291309
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	2691122879              @ double 0.37188711800000002
	.long	1071107327
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	3763628302              @ double 11.866004
	.long	1076345700
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	538329689               @ double 0.367617637
	.long	1071089420
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	2148885525              @ double 12.255008699999999
	.long	1076396688
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	2152340191              @ double 0.42222058800000001
	.long	1071318441
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	2169446393              @ double 12.6201363
	.long	1076444546
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	3241360                 @ double 0.56499004399999997
	.long	1071780966
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	1057840137              @ double 13.2772083
	.long	1076530670
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	3754280254              @ double 0.519700944
	.long	1071685987
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	3746860750              @ double 13.871047000000001
	.long	1076608505
	.long	0                       @ double 22
	.long	1077280768
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	540139485               @ double 0.45536068099999999
	.long	1071457441
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	2137670507              @ double 14.4024391
	.long	1076678156
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	1603307856              @ double 0.40886792500000002
	.long	1071262436
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	2166917516              @ double 14.8811684
	.long	1076740904
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	2152146677              @ double 0.38153874900000001
	.long	1071147809
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	1066581255              @ double 15.315332400000001
	.long	1076797811
	.long	0                       @ double 25
	.long	1077477376
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	2684037626              @ double 0.36235752700000001
	.long	1071067357
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	4285896325              @ double 15.7116165
	.long	1076849752
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	2679248153              @ double 0.36573591799999999
	.long	1071081527
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	2672363011              @ double 16.075540499999999
	.long	1076892502
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	3756206598              @ double 0.38063999999999998
	.long	1071144039
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	1081974417              @ double 16.488208799999999
	.long	1076919547
	.long	0                       @ double 28
	.long	1077673984
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	1614289778              @ double 0.37918338200000001
	.long	1071137930
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	3767421617              @ double 16.9410992
	.long	1076949227
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	4289093705              @ double 0.36067271200000001
	.long	1071060290
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	4289854567              @ double 17.3513336
	.long	1076976112
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	4293227869              @ double 0.34306597700000002
	.long	1070986442
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	526446167               @ double 17.726442299999999
	.long	1077000696
	.long	0                       @ double 31
	.long	1077870592
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	2142644697              @ double 0.33929026099999998
	.long	1070970606
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	3234873160              @ double 18.0722466
	.long	1077023358
	.long	0                       @ double 32
	.long	1077936128
	.long	0                       @ double 4
	.long	1074790400
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	1081860068              @ double 0.34296399399999999
	.long	1070986015
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	8246337                 @ double 18.442657499999999
	.long	1077047634
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 4
	.long	1074790400
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	4246314                 @ double 0.34312844300000001
	.long	1070986705
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	3219425022              @ double 18.834407800000001
	.long	1077073307
	.long	0                       @ double 34
	.long	1078001664
	.long	0                       @ double 4
	.long	1074790400
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	1610863700              @ double 0.34398850800000003
	.long	1070990312
	.long	0                       @ double 0.25
	.long	1070596096
	.long	2139374750              @ double 19.195579500000001
	.long	1077096977
	.long	0                       @ double 35
	.long	1078034432
	.long	0                       @ double 5
	.long	1075052544
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	1079113488              @ double 0.343928397
	.long	1070990060
	.long	0                       @ double 0.25
	.long	1070596096
	.long	4281333352              @ double 19.569702100000001
	.long	1077121495
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 5
	.long	1075052544
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	1603927980              @ double 0.33952769599999999
	.long	1070971602
	.long	0                       @ double 0.25
	.long	1070596096
	.long	2690175100              @ double 19.955118200000001
	.long	1077146754
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 5
	.long	1075052544
	.long	3758415737              @ double 0.088913969699999998
	.long	1068942096
	.long	2679446065              @ double 0.33654156299999999
	.long	1070959077
	.long	533410474               @ double 0.280000001
	.long	1070721925
	.long	2146906404              @ double 20.311592099999999
	.long	1077170116
	.long	0                       @ double 38
	.long	1078132736
	.long	0                       @ double 6
	.long	1075314688
	.long	2673937512              @ double 0.106696762
	.long	1069240442
	.long	3223937417              @ double 0.33495515599999998
	.long	1070952423
	.long	533410474               @ double 0.280000001
	.long	1070721925
	.long	2142068553              @ double 20.673774699999999
	.long	1077193852
	.long	0                       @ double 39
	.long	1078165504
	.long	0                       @ double 6
	.long	1075314688
	.long	2695646270              @ double 0.16910298200000001
	.long	1069917482
	.long	4290967273              @ double 0.33560156800000002
	.long	1070955134
	.long	1075166241              @ double 0.30000001199999998
	.long	1070805811
	.long	4287600568              @ double 21.0404968
	.long	1077217885
	.long	0                       @ double 40
	.long	1078198272
	.long	0                       @ double 7
	.long	1075576832
	.long	2700565485              @ double 0.19728680000000001
	.long	1070153905
	.long	1605533267              @ double 0.33471688599999999
	.long	1070951424
	.long	1075166241              @ double 0.30000001199999998
	.long	1070805811
	.long	4289854567              @ double 21.4060211
	.long	1077241840
	.long	0                       @ double 41
	.long	1078231040
	.long	0                       @ double 7
	.long	1075576832
	.long	2700565485              @ double 0.19728680000000001
	.long	1070153905
	.long	3221797768              @ double 0.33167666200000001
	.long	1070938672
	.long	1075166241              @ double 0.30000001199999998
	.long	1070805811
	.long	1087087146              @ double 21.769687699999999
	.long	1077265674
	.long	0                       @ double 42
	.long	1078263808
	.long	0                       @ double 8
	.long	1075838976
	.long	4291512630              @ double 0.71300077399999995
	.long	1072091366
	.long	2691670435              @ double 0.32855096499999997
	.long	1070925562
	.long	2685066769              @ double 0.40000000600000002
	.long	1071225241
	.long	3748015237              @ double 22.126722300000001
	.long	1077289072
	.long	0                       @ double 43
	.long	1078296576
	.long	0                       @ double 8
	.long	1075838976
	.long	4291512630              @ double 0.71300077399999995
	.long	1072091366
	.long	3763428191              @ double 0.33924195200000001
	.long	1070970403
	.long	2685066769              @ double 0.40000000600000002
	.long	1071225241
	.long	3222283752              @ double 22.4769249
	.long	1077312023
	.long	0                       @ double 44
	.long	1078329344
	.long	0                       @ double 9
	.long	1075970048
	.long	3756461685              @ double 0.80212587099999999
	.long	1072278275
	.long	1825189                 @ double 0.42520761499999998
	.long	1071330970
	.long	2685066769              @ double 0.40000000600000002
	.long	1071225241
	.long	1085382903              @ double 22.816486399999999
	.long	1077334277
	.long	0                       @ double 22050
	.long	1087735936
	.long	0                       @ double 44
	.long	1078329344
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	1608057746              @ double 8.9125089600000003
	.long	1075958580
	.long	3758566150              @ double 0.95404571299999996
	.long	1072596874
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 1
	.long	1072693248
	.long	1608057746              @ double 8.9125089600000003
	.long	1075958580
	.long	1512928                 @ double 0.833381653
	.long	1072343824
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	538604567               @ double 0.869851649
	.long	1072420307
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 1
	.long	1072693248
	.long	2680978784              @ double 0.89125090799999995
	.long	1072465184
	.long	2681396599              @ double 0.81594592300000002
	.long	1072307258
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	3749807441              @ double 1.7332590800000001
	.long	1073462125
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 1
	.long	1072693248
	.long	148214                  @ double 0.089125096799999997
	.long	1068945639
	.long	4292847438              @ double 0.79424476600000005
	.long	1072261747
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	1068373458              @ double 2.5832219099999998
	.long	1074047600
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 1
	.long	1072693248
	.long	3209887858              @ double 0.028183829000000001
	.long	1067244600
	.long	2686040936              @ double 0.776486695
	.long	1072224506
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	539860209               @ double 3.4134294999999999
	.long	1074482868
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	3758775058              @ double 0.75526040800000005
	.long	1072179991
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	2685634117              @ double 4.2185044300000003
	.long	1074847679
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	2688706152              @ double 0.73107081699999998
	.long	1072129262
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	4290019494              @ double 4.9941482500000003
	.long	1075051009
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	2685565947              @ double 0.70177584900000001
	.long	1072067826
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	538309898               @ double 5.7371869100000001
	.long	1075245793
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	3217784550              @ double 0.66787612399999996
	.long	1071996733
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	2153008694              @ double 6.4455318500000001
	.long	1075431481
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	2147766222              @ double 0.63028407099999995
	.long	1071917897
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	4289942528              @ double 7.1180763200000001
	.long	1075607784
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	3759458954              @ double 0.59017032400000002
	.long	1071833772
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	1611686134              @ double 7.7545561799999998
	.long	1075774634
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	4360663                 @ double 0.54878854799999999
	.long	1071746989
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	3756756354              @ double 8.3553914999999996
	.long	1075885557
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	1613528916              @ double 0.50779551300000003
	.long	1071661020
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	2686480741              @ double 8.9215288200000007
	.long	1075959762
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	2683109638              @ double 0.469515711
	.long	1071516811
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	1071430101              @ double 9.4543018300000003
	.long	1076029594
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	3752021857              @ double 0.43229171599999999
	.long	1071360682
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	2146279683              @ double 9.9553031900000004
	.long	1076095261
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	530164716               @ double 0.41113117300000002
	.long	1071271929
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	5607509                 @ double 10.426284799999999
	.long	1076156994
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	2684009038              @ double 0.39077153799999997
	.long	1071186534
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	2161474933              @ double 10.869075799999999
	.long	1076215031
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	1082225106              @ double 0.373318017
	.long	1071113329
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	3754007575              @ double 11.2855215
	.long	1076269615
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	4292845239              @ double 0.36956048000000002
	.long	1071097568
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	546842108               @ double 11.6774378
	.long	1076320985
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	2678201418              @ double 0.42595759
	.long	1071334115
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	1095718313              @ double 12.046579400000001
	.long	1076369369
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	537364318               @ double 0.57690006500000002
	.long	1071805943
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	1093519289              @ double 12.714120899999999
	.long	1076456865
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	2681546132              @ double 0.53311473099999995
	.long	1071714118
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	2158341325              @ double 13.319736499999999
	.long	1076536244
	.long	0                       @ double 22
	.long	1077280768
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	2679373497              @ double 0.46996751399999998
	.long	1071518706
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	1607980780              @ double 13.8634901
	.long	1076607515
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	529025622               @ double 0.41726854400000002
	.long	1071297671
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	3219095168              @ double 14.3544445
	.long	1076671865
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	3749462194              @ double 0.389299124
	.long	1071180358
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	2126950268              @ double 14.800258599999999
	.long	1076730299
	.long	0                       @ double 25
	.long	1077477376
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	3216992902              @ double 0.362824857
	.long	1071069317
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	3240700572              @ double 15.207372700000001
	.long	1076783660
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	444203                  @ double 0.34680128100000002
	.long	1071002110
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	3739219144              @ double 15.5811834
	.long	1076832656
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	4286184397              @ double 0.34940004299999999
	.long	1071013009
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	1055256285              @ double 15.926218
	.long	1076877881
	.long	0                       @ double 28
	.long	1077673984
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	2686003553              @ double 0.36402693400000002
	.long	1071074359
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	1062458086              @ double 16.3194923
	.long	1076908490
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	1069428990              @ double 0.36560446000000002
	.long	1071080976
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	1078071151              @ double 16.752903
	.long	1076936894
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	529749100               @ double 0.35427525599999998
	.long	1071033458
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	543873427               @ double 17.147081400000001
	.long	1076962727
	.long	0                       @ double 31
	.long	1077870592
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	6040717                 @ double 0.35121941600000001
	.long	1071020641
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	4290514274              @ double 17.5086212
	.long	1076986420
	.long	0                       @ double 32
	.long	1077936128
	.long	0                       @ double 4
	.long	1074790400
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	3219092969              @ double 0.35436409699999999
	.long	1071033830
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	3683364                 @ double 17.8938141
	.long	1077011665
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 4
	.long	1074790400
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	1614929694              @ double 0.34891590500000003
	.long	1071010979
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	537991039               @ double 18.299287799999998
	.long	1077038238
	.long	0                       @ double 34
	.long	1078001664
	.long	0                       @ double 4
	.long	1074790400
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	4287798480              @ double 0.33764934499999999
	.long	1070963723
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	3231684576              @ double 18.671398199999999
	.long	1077062624
	.long	0                       @ double 35
	.long	1078034432
	.long	0                       @ double 4
	.long	1074790400
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	1604207256              @ double 0.33207687699999999
	.long	1070940351
	.long	0                       @ double 0.25
	.long	1070596096
	.long	1616007215              @ double 19.015646
	.long	1077085185
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 5
	.long	1075052544
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	3766808090              @ double 0.33079311300000003
	.long	1070934966
	.long	0                       @ double 0.25
	.long	1070596096
	.long	1061963306              @ double 19.373401600000001
	.long	1077108631
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 5
	.long	1075052544
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	535090528               @ double 0.32752826800000001
	.long	1070921273
	.long	0                       @ double 0.25
	.long	1070596096
	.long	3227561408              @ double 19.743038200000001
	.long	1077132855
	.long	0                       @ double 38
	.long	1078132736
	.long	0                       @ double 5
	.long	1075052544
	.long	3758415737              @ double 0.088913969699999998
	.long	1068942096
	.long	3749488582              @ double 0.32551070999999998
	.long	1070912810
	.long	533410474               @ double 0.280000001
	.long	1070721925
	.long	2150809671              @ double 20.085960400000001
	.long	1077155329
	.long	0                       @ double 39
	.long	1078165504
	.long	0                       @ double 6
	.long	1075314688
	.long	2673937512              @ double 0.106696762
	.long	1069240442
	.long	3214105584              @ double 0.32443684299999997
	.long	1070908306
	.long	533410474               @ double 0.280000001
	.long	1070721925
	.long	3760549669              @ double 20.435499199999999
	.long	1077178236
	.long	0                       @ double 40
	.long	1078198272
	.long	0                       @ double 6
	.long	1075314688
	.long	2673937512              @ double 0.106696762
	.long	1069240442
	.long	1070996893              @ double 0.32583504899999999
	.long	1070914171
	.long	533410474               @ double 0.280000001
	.long	1070721925
	.long	10885165                @ double 20.7905579
	.long	1077201506
	.long	0                       @ double 41
	.long	1078231040
	.long	0                       @ double 7
	.long	1075576832
	.long	2700565485              @ double 0.19728680000000001
	.long	1070153905
	.long	2153026286              @ double 0.32622182399999999
	.long	1070915793
	.long	1075166241              @ double 0.30000001199999998
	.long	1070805811
	.long	2159056008              @ double 21.1458054
	.long	1077224787
	.long	0                       @ double 42
	.long	1078263808
	.long	0                       @ double 7
	.long	1075576832
	.long	2700565485              @ double 0.19728680000000001
	.long	1070153905
	.long	2151684882              @ double 0.325960994
	.long	1070914699
	.long	1075166241              @ double 0.30000001199999998
	.long	1070805811
	.long	2034097                 @ double 21.500595100000002
	.long	1077248039
	.long	0                       @ double 43
	.long	1078296576
	.long	0                       @ double 8
	.long	1075838976
	.long	3209887858              @ double 0.225470632
	.long	1070390328
	.long	1611325494              @ double 0.33901938799999998
	.long	1070969470
	.long	1075166241              @ double 0.30000001199999998
	.long	1070805811
	.long	1067240962              @ double 21.850452400000002
	.long	1077270967
	.long	0                       @ double 44
	.long	1078329344
	.long	0                       @ double 8
	.long	1075838976
	.long	4291512630              @ double 0.71300077399999995
	.long	1072091366
	.long	542076825               @ double 0.42685034900000002
	.long	1071337860
	.long	2685066769              @ double 0.40000000600000002
	.long	1071225241
	.long	2145696942              @ double 22.195106500000001
	.long	1077293554
	.long	0                       @ double 16000
	.long	1087324160
	.long	0                       @ double 45
	.long	1078362112
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	1608057746              @ double 8.9125089600000003
	.long	1075958580
	.long	2150726108              @ double 0.83473944700000002
	.long	1072346671
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 1
	.long	1072693248
	.long	1608057746              @ double 8.9125089600000003
	.long	1075958580
	.long	1076103025              @ double 0.62375700499999998
	.long	1071904209
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	1612715277              @ double 0.63151854299999999
	.long	1071920486
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 1
	.long	1072693248
	.long	2680978784              @ double 0.89125090799999995
	.long	1072465184
	.long	1612114944              @ double 0.60420388000000003
	.long	1071863203
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	3201667909              @ double 1.2606914
	.long	1072966602
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 1
	.long	1072693248
	.long	2680978784              @ double 0.89125090799999995
	.long	1072465184
	.long	4291158588              @ double 0.59197425800000003
	.long	1071837555
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	1619932471              @ double 1.8847621699999999
	.long	1073620988
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 1
	.long	1072693248
	.long	148214                  @ double 0.089125096799999997
	.long	1068945639
	.long	3761864685              @ double 0.57530158799999997
	.long	1071802590
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	532218603               @ double 2.5011198499999998
	.long	1074004555
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 1
	.long	1072693248
	.long	3209887858              @ double 0.028183829000000001
	.long	1067244600
	.long	3761785520              @ double 0.56154769699999996
	.long	1071773746
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	3754887184              @ double 3.1073605999999998
	.long	1074322399
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 1
	.long	1072693248
	.long	3209887858              @ double 0.028183829000000001
	.long	1067244600
	.long	1607897217              @ double 0.54666584699999998
	.long	1071742537
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	547226937               @ double 3.7013361499999999
	.long	1074633814
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	1069890785              @ double 0.52986443000000005
	.long	1071707302
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	2679476852              @ double 4.2811875300000004
	.long	1074864111
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	1613447552              @ double 0.51118344100000002
	.long	1071668125
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	1613478338              @ double 4.8453650499999998
	.long	1075012007
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	2676217899              @ double 0.490902334
	.long	1071606513
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	3753677722              @ double 5.3926310500000003
	.long	1075155469
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	1606595395              @ double 0.46938165999999998
	.long	1071516249
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	2678773164              @ double 5.9220566699999999
	.long	1075294255
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	3224909386              @ double 0.44700378200000002
	.long	1071422389
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	3122613                 @ double 6.43299866
	.long	1075428196
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	2691690227              @ double 0.42817059200000002
	.long	1071343397
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	534010807               @ double 6.9250798199999997
	.long	1075557192
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	2681708860              @ double 0.41453662499999999
	.long	1071286212
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	1607332068              @ double 7.3981566399999998
	.long	1075681206
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	2690412594              @ double 0.40103307399999999
	.long	1071229574
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	537639196               @ double 7.8522877700000002
	.long	1075800254
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	541663408               @ double 0.38779070999999998
	.long	1071174032
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	3755788784              @ double 8.2877035100000001
	.long	1075876685
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	1065972125              @ double 0.374230444
	.long	1071117156
	.long	1075166241              @ double 0.15000000599999999
	.long	1069757235
	.long	3760604645              @ double 8.7047720000000002
	.long	1075931351
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	3762245116              @ double 0.36054751299999999
	.long	1071059765
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	747668                  @ double 9.1039733900000001
	.long	1075983676
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	1603602525              @ double 0.34825667700000001
	.long	1071008214
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	539684287               @ double 9.4858713199999993
	.long	1076033732
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	1385385                 @ double 0.35032701500000002
	.long	1071016898
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	1611422251              @ double 9.8510923399999992
	.long	1076081602
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 1
	.long	1072693248
	.long	3222801930              @ double 0.0089125093100000004
	.long	1065500856
	.long	1831786                 @ double 0.40633082399999998
	.long	1071251795
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	1056080918              @ double 10.200303999999999
	.long	1076127374
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	1069402601              @ double 0.55409824799999996
	.long	1071758124
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	1069824814              @ double 10.846529
	.long	1076212076
	.long	0                       @ double 22
	.long	1077280768
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	2681728651              @ double 0.52831250399999996
	.long	1071704047
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	1078840809              @ double 11.4447651
	.long	1076290488
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	529052010               @ double 0.476527005
	.long	1071546219
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	2140034457              @ double 11.9928398
	.long	1076362325
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	3222554232              @ double 0.42820566900000001
	.long	1071343544
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	2160540349              @ double 12.495945000000001
	.long	1076428268
	.long	0                       @ double 25
	.long	1077477376
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	3213964847              @ double 0.402271926
	.long	1071234770
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	1050418434              @ double 12.958871800000001
	.long	1076488945
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	1609119874              @ double 0.378024429
	.long	1071133069
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	3242624717              @ double 13.3859692
	.long	1076544925
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	1066878123              @ double 0.36254698000000002
	.long	1071068152
	.long	2141987189              @ double 0.18000000699999999
	.long	1070008893
	.long	2162244592              @ double 13.781139400000001
	.long	1076596721
	.long	0                       @ double 28
	.long	1077673984
	.long	0                       @ double 2
	.long	1073741824
	.long	3217037322              @ double 0.017825018599999999
	.long	1066549432
	.long	2682894134              @ double 0.36805859200000002
	.long	1071091269
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	1611939022              @ double 14.1478529
	.long	1076644787
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	1071445494              @ double 0.385963261
	.long	1071166367
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	3215081951              @ double 14.5674343
	.long	1076699782
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	3221876933              @ double 0.38640517000000002
	.long	1071168220
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	3247572519              @ double 15.030485199999999
	.long	1076760475
	.long	0                       @ double 31
	.long	1077870592
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	3751175233              @ double 0.36783406099999999
	.long	1071090327
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	1057400332              @ double 15.451341599999999
	.long	1076815638
	.long	0                       @ double 32
	.long	1077936128
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	3220955542              @ double 0.34968656300000001
	.long	1071014211
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	2142948163              @ double 15.836277000000001
	.long	1076866092
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 3
	.long	1074266112
	.long	530588687               @ double 0.026737527899999999
	.long	1067147541
	.long	1064956176              @ double 0.34570938299999998
	.long	1070997530
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	2672582914              @ double 16.190469700000001
	.long	1076900034
	.long	0                       @ double 34
	.long	1078001664
	.long	0                       @ double 4
	.long	1074790400
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	539970160               @ double 0.34871914999999998
	.long	1071010154
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	2134646850              @ double 16.568351700000001
	.long	1076924799
	.long	0                       @ double 35
	.long	1078034432
	.long	0                       @ double 4
	.long	1074790400
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	1601700370              @ double 0.34705433200000002
	.long	1071003171
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	2145751917              @ double 16.966026299999999
	.long	1076950861
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 4
	.long	1074790400
	.long	3217037322              @ double 0.035650037199999998
	.long	1067598008
	.long	1072857267              @ double 0.34632998700000001
	.long	1071000133
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	1087636902              @ double 17.330448199999999
	.long	1076974744
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 5
	.long	1075052544
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	2147561713              @ double 0.34465849399999998
	.long	1070993122
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	2153998254              @ double 17.705558799999999
	.long	1076999327
	.long	0                       @ double 38
	.long	1078132736
	.long	0                       @ double 5
	.long	1075052544
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	1080065665              @ double 0.33877927099999999
	.long	1070968463
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	5882387                 @ double 18.089981099999999
	.long	1077024521
	.long	0                       @ double 39
	.long	1078165504
	.long	0                       @ double 5
	.long	1075052544
	.long	148214                  @ double 0.044562548399999999
	.long	1067897063
	.long	4293342218              @ double 0.33487868300000001
	.long	1070952102
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	2133437387              @ double 18.4440536
	.long	1077047725
	.long	0                       @ double 40
	.long	1078198272
	.long	0                       @ double 6
	.long	1075314688
	.long	530588687               @ double 0.053475055799999997
	.long	1068196117
	.long	3213934061              @ double 0.33281153400000002
	.long	1070943432
	.long	2685066769              @ double 0.20000000300000001
	.long	1070176665
	.long	3216016536              @ double 18.803005200000001
	.long	1077071249
	.long	0                       @ double 41
	.long	1078231040
	.long	0                       @ double 6
	.long	1075314688
	.long	530588687               @ double 0.053475055799999997
	.long	1068196117
	.long	7025879                 @ double 0.33371758499999998
	.long	1070947233
	.long	0                       @ double 0.25
	.long	1070596096
	.long	2149050452              @ double 19.1665268
	.long	1077095073
	.long	0                       @ double 42
	.long	1078263808
	.long	0                       @ double 7
	.long	1075576832
	.long	1608666875              @ double 0.062387566999999998
	.long	1068495171
	.long	2155447411              @ double 0.33398640200000002
	.long	1070948360
	.long	0                       @ double 0.25
	.long	1070596096
	.long	3747740359              @ double 19.529935800000001
	.long	1077118889
	.long	0                       @ double 43
	.long	1078296576
	.long	0                       @ double 7
	.long	1075576832
	.long	1608666875              @ double 0.062387566999999998
	.long	1068495171
	.long	3215246878              @ double 0.33414262500000003
	.long	1070949015
	.long	0                       @ double 0.25
	.long	1070596096
	.long	3210628929              @ double 19.893489800000001
	.long	1077142715
	.long	0                       @ double 44
	.long	1078329344
	.long	0                       @ double 8
	.long	1075838976
	.long	519103629               @ double 0.14226235400000001
	.long	1069692327
	.long	3219941792              @ double 0.34677427999999999
	.long	1071001996
	.long	533410474               @ double 0.280000001
	.long	1070721925
	.long	12204579                @ double 20.2535706
	.long	1077166314
	.long	0                       @ double 45
	.long	1078362112
	.long	0                       @ double 8
	.long	1075838976
	.long	519103629               @ double 0.14226235400000001
	.long	1069692327
	.long	3766374882              @ double 0.436254472
	.long	1071377303
	.long	533410474               @ double 0.280000001
	.long	1070721925
	.long	1073673105              @ double 20.610569000000002
	.long	1077189710
	.long	0                       @ double 48000
	.long	1088909312
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 1
	.long	1072693248
	.long	824633721               @ double 0.056000000000000001
	.long	1068280840
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 7
	.long	1075576832
	.long	2095944040              @ double 0.94399999999999995
	.long	1072575807
	.long	3745211482              @ double 0.61099999999999999
	.long	1071877455
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 11
	.long	1076232192
	.long	1099511628              @ double 0.38900000000000001
	.long	1071179104
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 14
	.long	1076625408
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	3195455668              @ double 0.72199999999999998
	.long	1072110239
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 17
	.long	1076953088
	.long	2199023256              @ double 0.27800000000000002
	.long	1070713536
	.long	549755814               @ double 0.63900000000000001
	.long	1071936176
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 19
	.long	1077084160
	.long	3195455668              @ double 0.36099999999999999
	.long	1071061663
	.long	3298534883              @ double 0.41699999999999998
	.long	1071296544
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 22
	.long	1077280768
	.long	2645699854              @ double 0.58299999999999996
	.long	1071818735
	.long	3985729651              @ double 0.083000000000000004
	.long	1068842876
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 22
	.long	1077280768
	.long	0                       @ double 24
	.long	1077411840
	.long	1649267442              @ double 0.91700000000000004
	.long	1072519184
	.long	0                       @ double 0.75
	.long	1072168960
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 0.25
	.long	1070596096
	.long	3298534883              @ double 0.41699999999999998
	.long	1071296544
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 30
	.long	1077805056
	.long	2645699854              @ double 0.58299999999999996
	.long	1071818735
	.long	2130303779              @ double 0.64800000000000002
	.long	1071955050
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 33
	.long	1077968896
	.long	34359738                @ double 0.35199999999999998
	.long	1071023915
	.long	3745211482              @ double 0.61099999999999999
	.long	1071877455
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 36
	.long	1078067200
	.long	1099511628              @ double 0.38900000000000001
	.long	1071179104
	.long	0                       @ double 0.625
	.long	1071906816
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 40
	.long	1078198272
	.long	0                       @ double 0.375
	.long	1071120384
	.long	2370821947              @ double 0.14399999999999999
	.long	1069706903
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 40
	.long	1078198272
	.long	0                       @ double 43
	.long	1078296576
	.long	481036337               @ double 0.85599999999999998
	.long	1072391258
	.long	1099511628              @ double 0.38900000000000001
	.long	1071179104
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 43
	.long	1078296576
	.long	0                       @ double 46
	.long	1078394880
	.long	3745211482              @ double 0.61099999999999999
	.long	1071877455
	.long	1202590843              @ double 0.16
	.long	1069841121
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 46
	.long	1078394880
	.long	0                       @ double 49
	.long	1078493184
	.long	2920577761              @ double 0.83999999999999997
	.long	1072357703
	.long	4020089389              @ double 0.217
	.long	1070319271
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 49
	.long	1078493184
	.long	0                       @ double 52
	.long	1078591488
	.long	68719477                @ double 0.78300000000000003
	.long	1072238166
	.long	3745211482              @ double 0.184
	.long	1070042447
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 52
	.long	1078591488
	.long	0                       @ double 54
	.long	1078657024
	.long	137438953               @ double 0.81599999999999995
	.long	1072307372
	.long	2886218023              @ double 0.88600000000000001
	.long	1072454172
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 54
	.long	1078657024
	.long	0                       @ double 57
	.long	1078755328
	.long	2680059593              @ double 0.114
	.long	1069362970
	.long	652835029               @ double 0.313
	.long	1070860337
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 57
	.long	1078755328
	.long	0                       @ double 59
	.long	1078820864
	.long	1821066134              @ double 0.68700000000000006
	.long	1072036839
	.long	1752346657              @ double 0.45200000000000001
	.long	1071443345
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 59
	.long	1078820864
	.long	0                       @ double 60
	.long	1078853632
	.long	1271310320              @ double 0.54800000000000004
	.long	1071745335
	.long	68719477                @ double 0.90800000000000003
	.long	1072500310
	.long	0                       @ double 44100
	.long	1088784512
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 1
	.long	1072693248
	.long	824633721               @ double 0.056000000000000001
	.long	1068280840
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 7
	.long	1075576832
	.long	2095944040              @ double 0.94399999999999995
	.long	1072575807
	.long	3745211482              @ double 0.61099999999999999
	.long	1071877455
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 11
	.long	1076232192
	.long	1099511628              @ double 0.38900000000000001
	.long	1071179104
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 14
	.long	1076625408
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	3195455668              @ double 0.72199999999999998
	.long	1072110239
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 17
	.long	1076953088
	.long	2199023256              @ double 0.27800000000000002
	.long	1070713536
	.long	2199023256              @ double 0.13900000000000001
	.long	1069664960
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 18
	.long	1077018624
	.long	3745211482              @ double 0.86099999999999999
	.long	1072401743
	.long	1649267442              @ double 0.91700000000000004
	.long	1072519184
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 21
	.long	1077215232
	.long	3985729651              @ double 0.083000000000000004
	.long	1068842876
	.long	2645699854              @ double 0.58299999999999996
	.long	1071818735
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 24
	.long	1077411840
	.long	3298534883              @ double 0.41699999999999998
	.long	1071296544
	.long	0                       @ double 0.25
	.long	1070596096
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 0.75
	.long	1072168960
	.long	1546188227              @ double 0.80500000000000005
	.long	1072284303
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 30
	.long	1077805056
	.long	4088808866              @ double 0.19400000000000001
	.long	1070126333
	.long	1065151889              @ double 0.57399999999999995
	.long	1071799861
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 33
	.long	1077968896
	.long	2164663517              @ double 0.42599999999999999
	.long	1071334293
	.long	2680059593              @ double 0.53700000000000003
	.long	1071722266
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 36
	.long	1078067200
	.long	3229815407              @ double 0.46300000000000002
	.long	1071489482
	.long	2095944040              @ double 0.81899999999999995
	.long	1072313663
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 40
	.long	1078198272
	.long	1889785610              @ double 0.17999999999999999
	.long	1070008893
	.long	2576980378              @ double 0.10000000000000001
	.long	1069128089
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 40
	.long	1078198272
	.long	0                       @ double 43
	.long	1078296576
	.long	3435973837              @ double 0.90000000000000002
	.long	1072483532
	.long	1168231105              @ double 0.46800000000000003
	.long	1071510454
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 43
	.long	1078296576
	.long	0                       @ double 46
	.long	1078394880
	.long	3710851744              @ double 0.53200000000000003
	.long	1071711780
	.long	2989297238              @ double 0.623
	.long	1071902621
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 46
	.long	1078394880
	.long	0                       @ double 49
	.long	1078493184
	.long	1305670058              @ double 0.376
	.long	1071124578
	.long	3435973837              @ double 0.45000000000000001
	.long	1071434956
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 49
	.long	1078493184
	.long	0                       @ double 52
	.long	1078591488
	.long	2576980378              @ double 0.55000000000000004
	.long	1071749529
	.long	3882650436              @ double 0.55200000000000005
	.long	1071753723
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 52
	.long	1078591488
	.long	0                       @ double 55
	.long	1078689792
	.long	824633721               @ double 0.44800000000000001
	.long	1071426568
	.long	2199023256              @ double 0.40300000000000002
	.long	1071237824
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 55
	.long	1078689792
	.long	0                       @ double 57
	.long	1078755328
	.long	3195455668              @ double 0.59699999999999998
	.long	1071848095
	.long	3161095930              @ double 0.64300000000000002
	.long	1071944564
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 57
	.long	1078755328
	.long	0                       @ double 59
	.long	1078820864
	.long	2267742732              @ double 0.35699999999999998
	.long	1071044886
	.long	3195455668              @ double 0.72199999999999998
	.long	1072110239
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 59
	.long	1078820864
	.long	0                       @ double 61
	.long	1078886400
	.long	2199023256              @ double 0.27800000000000002
	.long	1070713536
	.long	3951369912              @ double 0.95999999999999996
	.long	1072609361
	.long	0                       @ double 32000
	.long	1088372736
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 1
	.long	1072693248
	.long	1099511628              @ double 0.52800000000000002
	.long	1071703392
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 4
	.long	1074790400
	.long	2095944040              @ double 0.47199999999999998
	.long	1071527231
	.long	3092376453              @ double 0.30499999999999999
	.long	1070826782
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 6
	.long	1075314688
	.long	2095944040              @ double 0.69399999999999995
	.long	1072051519
	.long	3985729651              @ double 0.083000000000000004
	.long	1068842876
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 7
	.long	1075576832
	.long	1649267442              @ double 0.91700000000000004
	.long	1072519184
	.long	3745211482              @ double 0.86099999999999999
	.long	1072401743
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 9
	.long	1075970048
	.long	2199023256              @ double 0.13900000000000001
	.long	1069664960
	.long	549755814               @ double 0.63900000000000001
	.long	1071936176
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 11
	.long	1076232192
	.long	3195455668              @ double 0.36099999999999999
	.long	1071061663
	.long	3298534883              @ double 0.41699999999999998
	.long	1071296544
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 14
	.long	1076625408
	.long	2645699854              @ double 0.58299999999999996
	.long	1071818735
	.long	3985729651              @ double 0.083000000000000004
	.long	1068842876
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 16
	.long	1076887552
	.long	1649267442              @ double 0.91700000000000004
	.long	1072519184
	.long	0                       @ double 0.75
	.long	1072168960
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 0.25
	.long	1070596096
	.long	1030792151              @ double 0.87
	.long	1072420618
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 22
	.long	1077280768
	.long	171798692               @ double 0.13
	.long	1069589463
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 22
	.long	1077280768
	.long	0                       @ double 26
	.long	1077542912
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	1099511628              @ double 0.38900000000000001
	.long	1071179104
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 30
	.long	1077805056
	.long	3745211482              @ double 0.61099999999999999
	.long	1071877455
	.long	1340029796              @ double 0.47799999999999998
	.long	1071552397
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 34
	.long	1078001664
	.long	1477468750              @ double 0.52200000000000002
	.long	1071690809
	.long	1099511628              @ double 0.033000000000000002
	.long	1067509088
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 34
	.long	1078001664
	.long	0                       @ double 37
	.long	1078099968
	.long	4226247819              @ double 0.96699999999999997
	.long	1072624041
	.long	1649267442              @ double 0.91700000000000004
	.long	1072519184
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 41
	.long	1078231040
	.long	3985729651              @ double 0.083000000000000004
	.long	1068842876
	.long	3367254360              @ double 0.61699999999999999
	.long	1071890038
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 41
	.long	1078231040
	.long	0                       @ double 44
	.long	1078329344
	.long	1855425872              @ double 0.38300000000000001
	.long	1071153938
	.long	1030792151              @ double 0.99499999999999999
	.long	1072682762
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 44
	.long	1078329344
	.long	0                       @ double 48
	.long	1078460416
	.long	1202590843              @ double 0.0050000000000000001
	.long	1064598241
	.long	1271310320              @ double 0.27400000000000002
	.long	1070696759
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 48
	.long	1078460416
	.long	0                       @ double 51
	.long	1078558720
	.long	1511828488              @ double 0.72599999999999998
	.long	1072118628
	.long	3951369912              @ double 0.47999999999999998
	.long	1071560785
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 51
	.long	1078558720
	.long	0                       @ double 54
	.long	1078657024
	.long	3813930959              @ double 0.51900000000000002
	.long	1071684517
	.long	1477468750              @ double 0.26100000000000001
	.long	1070642233
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 54
	.long	1078657024
	.long	0                       @ double 56
	.long	1078722560
	.long	1408749273              @ double 0.73899999999999999
	.long	1072145891
	.long	1580547965              @ double 0.88400000000000001
	.long	1072449978
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 56
	.long	1078722560
	.long	0                       @ double 58
	.long	1078788096
	.long	240518169               @ double 0.11600000000000001
	.long	1069396525
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 24000
	.long	1087860736
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 1
	.long	1072693248
	.long	2146226906              @ double 0.91666674599999998
	.long	1072518485
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 6
	.long	1075314688
	.long	2848175                 @ double 0.083333253900000001
	.long	1068848468
	.long	4292453812              @ double 0.58333349199999995
	.long	1071819434
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 9
	.long	1075970048
	.long	5026967                 @ double 0.41666650799999999
	.long	1071295146
	.long	0                       @ double 0.25
	.long	1070596096
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 0.75
	.long	1072168960
	.long	3980232                 @ double 0.91666698499999999
	.long	1072518486
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 14
	.long	1076625408
	.long	4291948477              @ double 0.083333015400000002
	.long	1068848463
	.long	4293920561              @ double 0.58333396900000001
	.long	1071819435
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 17
	.long	1076953088
	.long	2093470                 @ double 0.41666603099999999
	.long	1071295144
	.long	0                       @ double 0.25
	.long	1070596096
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 0.75
	.long	1072168960
	.long	2234208                 @ double 0.53703689600000004
	.long	1071722344
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 23
	.long	1077346304
	.long	4290498881              @ double 0.46296310400000001
	.long	1071489327
	.long	0                       @ double 0.5
	.long	1071644672
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 0.5
	.long	1071644672
	.long	3023217                 @ double 0.055555999299999999
	.long	1068265942
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 30
	.long	1077805056
	.long	2686867769              @ double 0.94444400100000003
	.long	1072576738
	.long	4286171203              @ double 0.402778625
	.long	1071236895
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 33
	.long	1077968896
	.long	4398047                 @ double 0.59722137500000005
	.long	1071848560
	.long	2682427941              @ double 0.76666718700000003
	.long	1072203913
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 36
	.long	1078067200
	.long	2695622080              @ double 0.23333282799999999
	.long	1070456281
	.long	1608099527              @ double 0.80555599899999997
	.long	1072285469
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 39
	.long	1078165504
	.long	2697968438              @ double 0.194444016
	.long	1070130058
	.long	2143803583              @ double 0.76984190900000005
	.long	1072210571
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 39
	.long	1078165504
	.long	0                       @ double 42
	.long	1078263808
	.long	1059555375              @ double 0.23015811999999999
	.long	1070429650
	.long	3753697513              @ double 0.61111110400000002
	.long	1071877688
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 42
	.long	1078263808
	.long	0                       @ double 45
	.long	1078362112
	.long	1082539566              @ double 0.38888889599999998
	.long	1071178638
	.long	3219244702              @ double 0.44949477900000001
	.long	1071432837
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 45
	.long	1078362112
	.long	0                       @ double 48
	.long	1078460416
	.long	537861297               @ double 0.55050522099999999
	.long	1071750589
	.long	2133241674              @ double 0.194444954
	.long	1070130066
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 48
	.long	1078460416
	.long	0                       @ double 50
	.long	1078525952
	.long	1614173230              @ double 0.80555504600000005
	.long	1072285467
	.long	4291615985              @ double 0.91319465600000005
	.long	1072511203
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 50
	.long	1078525952
	.long	0                       @ double 53
	.long	1078624256
	.long	4292954750              @ double 0.086805343600000001
	.long	1068906719
	.long	2684187159              @ double 0.58055573699999996
	.long	1071813609
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 53
	.long	1078624256
	.long	0                       @ double 56
	.long	1078722560
	.long	3221560273              @ double 0.41944426299999998
	.long	1071306796
	.long	4259219974              @ double 0.113426208
	.long	1069353343
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 56
	.long	1078722560
	.long	0                       @ double 58
	.long	1078788096
	.long	4468415                 @ double 0.88657379199999997
	.long	1072455376
	.long	1072784699              @ double 0.53373062599999999
	.long	1071715410
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 58
	.long	1078788096
	.long	0                       @ double 60
	.long	1078853632
	.long	1608965942              @ double 0.46626934399999997
	.long	1071503195
	.long	536020715               @ double 0.69117647400000004
	.long	1072045598
	.long	0                       @ double 22050
	.long	1087735936
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 1
	.long	1072693248
	.long	2146226906              @ double 0.91666674599999998
	.long	1072518485
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 6
	.long	1075314688
	.long	2848175                 @ double 0.083333253900000001
	.long	1068848468
	.long	4292453812              @ double 0.58333349199999995
	.long	1071819434
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 9
	.long	1075970048
	.long	5026967                 @ double 0.41666650799999999
	.long	1071295146
	.long	0                       @ double 0.25
	.long	1070596096
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 0.75
	.long	1072168960
	.long	3980232                 @ double 0.91666698499999999
	.long	1072518486
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 14
	.long	1076625408
	.long	4291948477              @ double 0.083333015400000002
	.long	1068848463
	.long	4293920561              @ double 0.58333396900000001
	.long	1071819435
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 17
	.long	1076953088
	.long	2093470                 @ double 0.41666603099999999
	.long	1071295144
	.long	0                       @ double 0.25
	.long	1070596096
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 0.75
	.long	1072168960
	.long	2137149338              @ double 0.20370358199999999
	.long	1070207733
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 23
	.long	1077346304
	.long	2686938137              @ double 0.79629641799999995
	.long	1072266050
	.long	2164241305              @ double 0.16666668700000001
	.long	1069897045
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 26
	.long	1077542912
	.long	2680165146              @ double 0.83333331300000002
	.long	1072343722
	.long	3222901677              @ double 0.72222268599999995
	.long	1072110706
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 30
	.long	1077805056
	.long	2684563192              @ double 0.27777734399999998
	.long	1070712602
	.long	4277375110              @ double 0.152778625
	.long	1069780543
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 33
	.long	1077968896
	.long	4398047                 @ double 0.84722137500000005
	.long	1072372848
	.long	1072527413              @ double 0.56666719899999995
	.long	1071784483
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 36
	.long	1078067200
	.long	2690344424              @ double 0.43333283099999997
	.long	1071365049
	.long	2680235515              @ double 0.93518573000000005
	.long	1072557322
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 40
	.long	1078198272
	.long	2685006515              @ double 0.064814247199999994
	.long	1068537770
	.long	4273188170              @ double 0.118056297
	.long	1069431023
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 40
	.long	1078198272
	.long	0                       @ double 43
	.long	1078296576
	.long	2722391                 @ double 0.88194370300000002
	.long	1072445666
	.long	288072                  @ double 0.092593729499999999
	.long	1069003833
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 43
	.long	1078296576
	.long	0                       @ double 45
	.long	1078362112
	.long	3762563975              @ double 0.90740627100000004
	.long	1072499064
	.long	3216922533              @ double 0.93434417199999997
	.long	1072555557
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 45
	.long	1078362112
	.long	0                       @ double 48
	.long	1078460416
	.long	2146045707              @ double 0.065655797700000004
	.long	1068551889
	.long	537799724               @ double 0.57539802799999995
	.long	1071802793
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 48
	.long	1078460416
	.long	0                       @ double 51
	.long	1078558720
	.long	3219367847              @ double 0.42460197199999999
	.long	1071328429
	.long	13556978                @ double 0.23202693499999999
	.long	1070445327
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 51
	.long	1078558720
	.long	0                       @ double 53
	.long	1078624256
	.long	1070352579              @ double 0.76797306499999995
	.long	1072206652
	.long	1613630071              @ double 0.75833433900000002
	.long	1072186438
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 53
	.long	1078624256
	.long	0                       @ double 56
	.long	1078722560
	.long	1594982354              @ double 0.24166564600000001
	.long	1070526182
	.long	2158380908              @ double 0.18750125200000001
	.long	1070071818
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 56
	.long	1078722560
	.long	0                       @ double 58
	.long	1078788096
	.long	1607888421              @ double 0.81249874799999999
	.long	1072300029
	.long	2147574907              @ double 0.53373169899999995
	.long	1071715412
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 58
	.long	1078788096
	.long	0                       @ double 60
	.long	1078853632
	.long	3754352822              @ double 0.46626827100000001
	.long	1071503190
	.long	3219515182              @ double 0.25757759800000002
	.long	1070627878
	.long	0                       @ double 16000
	.long	1087324160
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 1
	.long	1072693248
	.long	2688334517              @ double 0.94444447799999998
	.long	1072576739
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 4
	.long	1074790400
	.long	1608391558              @ double 0.055555503800000003
	.long	1068265925
	.long	4293291640              @ double 0.72222232799999997
	.long	1072110705
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 6
	.long	1075314688
	.long	3351311                 @ double 0.27777767199999998
	.long	1070712604
	.long	0                       @ double 0.5
	.long	1071644672
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 0.5
	.long	1071644672
	.long	1076674771              @ double 0.27777796999999999
	.long	1070712605
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 10
	.long	1076101120
	.long	1609146262              @ double 0.72222202999999996
	.long	1072110705
	.long	3023217                 @ double 0.055555999299999999
	.long	1068265942
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 11
	.long	1076232192
	.long	2686867769              @ double 0.94444400100000003
	.long	1072576738
	.long	2680165146              @ double 0.83333331300000002
	.long	1072343722
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 14
	.long	1076625408
	.long	1623809349              @ double 0.16666667199999999
	.long	1069897045
	.long	2137149338              @ double 0.20370358199999999
	.long	1070207733
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 17
	.long	1076953088
	.long	2686938137              @ double 0.79629641799999995
	.long	1072266050
	.long	2164241305              @ double 0.16666668700000001
	.long	1069897045
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 20
	.long	1077149696
	.long	2680165146              @ double 0.83333331300000002
	.long	1072343722
	.long	4253911532              @ double 0.54166698000000002
	.long	1071732053
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 23
	.long	1077346304
	.long	4287006832              @ double 0.45833301500000001
	.long	1071469907
	.long	4290569249              @ double 0.65277862499999995
	.long	1071965071
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 27
	.long	1077608448
	.long	8796093                 @ double 0.347221375
	.long	1071003872
	.long	2134079502              @ double 0.16666716300000001
	.long	1069897049
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 30
	.long	1077805056
	.long	2687705597              @ double 0.83333283700000005
	.long	1072343721
	.long	1071647804              @ double 0.72222292399999999
	.long	1072110707
	.long	0                       @ double 12
	.long	1076363264
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 34
	.long	1078001664
	.long	2692103643              @ double 0.277777106
	.long	1070712601
	.long	4286171203              @ double 0.277778625
	.long	1070712607
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 34
	.long	1078001664
	.long	0                       @ double 37
	.long	1078099968
	.long	4398047                 @ double 0.72222137500000005
	.long	1072110704
	.long	4292873826              @ double 0.60416793800000002
	.long	1071863127
	.long	0                       @ double 14
	.long	1076625408
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 40
	.long	1078198272
	.long	4186940                 @ double 0.39583206199999998
	.long	1071207760
	.long	1070768195              @ double 0.62777864900000002
	.long	1071912643
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 40
	.long	1078198272
	.long	0                       @ double 43
	.long	1078296576
	.long	2675848463              @ double 0.37222137999999999
	.long	1071108729
	.long	2679940845              @ double 0.54273635099999995
	.long	1071734296
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 43
	.long	1078296576
	.long	0                       @ double 46
	.long	1078394880
	.long	3230052901              @ double 0.45726364899999999
	.long	1071465422
	.long	4286171203              @ double 0.371528625
	.long	1071105823
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 46
	.long	1078394880
	.long	0                       @ double 49
	.long	1078493184
	.long	4398047                 @ double 0.62847137500000005
	.long	1071914096
	.long	2877378                 @ double 0.0083343386700000001
	.long	1065423256
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 49
	.long	1078493184
	.long	0                       @ double 51
	.long	1078558720
	.long	2681337225              @ double 0.99166566099999997
	.long	1072675769
	.long	3218503631              @ double 0.500001311
	.long	1071644674
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 51
	.long	1078558720
	.long	0                       @ double 53
	.long	1078624256
	.long	1612495375              @ double 0.49999865900000001
	.long	1071644666
	.long	1611560790              @ double 0.88683289300000001
	.long	1072455919
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 53
	.long	1078624256
	.long	0                       @ double 55
	.long	1078689792
	.long	3206518954              @ double 0.113167092
	.long	1069348996
	.long	1609060500              @ double 0.62903422099999995
	.long	1071915276
	.long	0                       @ double 48000
	.long	1088909312
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 1
	.long	1072693248
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 5
	.long	1075052544
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 8
	.long	1075838976
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	0                       @ double 0.5
	.long	1071644672
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 0.5
	.long	1071644672
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 15
	.long	1076756480
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 19
	.long	1077084160
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	2645699854              @ double 0.58299999999999996
	.long	1071818735
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 19
	.long	1077084160
	.long	0                       @ double 22
	.long	1077280768
	.long	3298534883              @ double 0.41699999999999998
	.long	1071296544
	.long	1649267442              @ double 0.91700000000000004
	.long	1072519184
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 22
	.long	1077280768
	.long	0                       @ double 26
	.long	1077542912
	.long	3985729651              @ double 0.083000000000000004
	.long	1068842876
	.long	2095944040              @ double 0.94399999999999995
	.long	1072575807
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 26
	.long	1077542912
	.long	0                       @ double 30
	.long	1077805056
	.long	3264175145              @ double 0.055
	.long	1068247285
	.long	618475291               @ double 0.042000000000000003
	.long	1067811078
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 32
	.long	1077936128
	.long	2645699854              @ double 0.95799999999999996
	.long	1072605167
	.long	790273982               @ double 0.56699999999999995
	.long	1071785181
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 32
	.long	1077936128
	.long	0                       @ double 35
	.long	1078034432
	.long	2714419331              @ double 0.433
	.long	1071363653
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 35
	.long	1078034432
	.long	0                       @ double 37
	.long	1078099968
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	4020089389              @ double 0.61799999999999999
	.long	1071892135
	.long	0                       @ double 44100
	.long	1088784512
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 1
	.long	1072693248
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 5
	.long	1075052544
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 8
	.long	1075838976
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	0                       @ double 0.5
	.long	1071644672
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 0.5
	.long	1071644672
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 15
	.long	1076756480
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 20
	.long	1077149696
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	0                       @ double 0.25
	.long	1070596096
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 0.75
	.long	1072168960
	.long	2645699854              @ double 0.58299999999999996
	.long	1071818735
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 27
	.long	1077608448
	.long	3298534883              @ double 0.41699999999999998
	.long	1071296544
	.long	3264175145              @ double 0.055
	.long	1068247285
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 30
	.long	1077805056
	.long	2095944040              @ double 0.94399999999999995
	.long	1072575807
	.long	0                       @ double 0.375
	.long	1071120384
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 0.625
	.long	1071906816
	.long	858993459               @ double 0.29999999999999999
	.long	1070805811
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 36
	.long	1078067200
	.long	1717986918              @ double 0.69999999999999996
	.long	1072064102
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 36
	.long	1078067200
	.long	0                       @ double 38
	.long	1078132736
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 32000
	.long	1088372736
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 1
	.long	1072693248
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 5
	.long	1075052544
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 8
	.long	1075838976
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	0                       @ double 0.5
	.long	1071644672
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 0.5
	.long	1071644672
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 15
	.long	1076756480
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	2302102471              @ double 0.16700000000000001
	.long	1069899841
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 15
	.long	1076756480
	.long	0                       @ double 20
	.long	1077149696
	.long	2645699854              @ double 0.83299999999999996
	.long	1072343023
	.long	0                       @ double 0.25
	.long	1070596096
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 20
	.long	1077149696
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 0.75
	.long	1072168960
	.long	0                       @ double 0.25
	.long	1070596096
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 0.75
	.long	1072168960
	.long	3264175145              @ double 0.055
	.long	1068247285
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 33
	.long	1077968896
	.long	2095944040              @ double 0.94399999999999995
	.long	1072575807
	.long	0                       @ double 0.375
	.long	1071120384
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 0.625
	.long	1071906816
	.long	2095944040              @ double 0.47199999999999998
	.long	1071527231
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 40
	.long	1078198272
	.long	1099511628              @ double 0.52800000000000002
	.long	1071703392
	.long	1821066134              @ double 0.93700000000000006
	.long	1072561127
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 40
	.long	1078198272
	.long	0                       @ double 41
	.long	1078231040
	.long	3367254360              @ double 0.062
	.long	1068482166
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 24000
	.long	1087860736
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 1
	.long	1072693248
	.long	4289940329              @ double 0.166666746
	.long	1069897045
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 6
	.long	1075314688
	.long	2148740390              @ double 0.83333325400000002
	.long	1072343722
	.long	4292453812              @ double 0.83333349199999995
	.long	1072343722
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 9
	.long	1075970048
	.long	10053934                @ double 0.16666650799999999
	.long	1069897044
	.long	0                       @ double 0.5
	.long	1071644672
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 0.5
	.long	1071644672
	.long	0                       @ double 0.5
	.long	1071644672
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 0.5
	.long	1071644672
	.long	4293920561              @ double 0.83333396900000001
	.long	1072343723
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 23
	.long	1077346304
	.long	4186940                 @ double 0.16666603099999999
	.long	1069897040
	.long	0                       @ double 0.25
	.long	1070596096
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 0.75
	.long	1072168960
	.long	0                       @ double 0.25
	.long	1070596096
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 0.75
	.long	1072168960
	.long	3225206254              @ double 0.61111199900000002
	.long	1071877690
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 30
	.long	1077805056
	.long	0                       @ double 34
	.long	1078001664
	.long	2679954040              @ double 0.38888803100000002
	.long	1071178634
	.long	4290780356              @ double 0.20833396900000001
	.long	1070246575
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 34
	.long	1078001664
	.long	0                       @ double 37
	.long	1078099968
	.long	1046735                 @ double 0.79166603099999999
	.long	1072256340
	.long	2682427941              @ double 0.76666718700000003
	.long	1072203913
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 41
	.long	1078231040
	.long	2695622080              @ double 0.23333282799999999
	.long	1070456281
	.long	1065184875              @ double 0.45238167000000001
	.long	1071444946
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 41
	.long	1078231040
	.long	0                       @ double 45
	.long	1078362112
	.long	3762374859              @ double 0.54761833000000004
	.long	1071744534
	.long	4286171203              @ double 0.277778625
	.long	1070712607
	.long	0                       @ double 22050
	.long	1087735936
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 1
	.long	1072693248
	.long	4289940329              @ double 0.166666746
	.long	1069897045
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 6
	.long	1075314688
	.long	2148740390              @ double 0.83333325400000002
	.long	1072343722
	.long	4292453812              @ double 0.83333349199999995
	.long	1072343722
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 9
	.long	1075970048
	.long	10053934                @ double 0.16666650799999999
	.long	1069897044
	.long	0                       @ double 0.5
	.long	1071644672
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 0.5
	.long	1071644672
	.long	0                       @ double 0.5
	.long	1071644672
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 0.5
	.long	1071644672
	.long	0                       @ double 0.5
	.long	1071644672
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 17
	.long	1076953088
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 0.5
	.long	1071644672
	.long	3980232                 @ double 0.91666698499999999
	.long	1072518486
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 21
	.long	1077215232
	.long	0                       @ double 25
	.long	1077477376
	.long	4291948477              @ double 0.083333015400000002
	.long	1068848463
	.long	0                       @ double 0.25
	.long	1070596096
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 25
	.long	1077477376
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 0.75
	.long	1072168960
	.long	3225206254              @ double 0.61111199900000002
	.long	1071877690
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 29
	.long	1077739520
	.long	0                       @ double 33
	.long	1077968896
	.long	2679954040              @ double 0.38888803100000002
	.long	1071178634
	.long	4292873826              @ double 0.45833396900000001
	.long	1071469911
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 33
	.long	1077968896
	.long	0                       @ double 37
	.long	1078099968
	.long	1046735                 @ double 0.54166603099999999
	.long	1071732052
	.long	1613630071              @ double 0.63333433900000002
	.long	1071924294
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 37
	.long	1078099968
	.long	0                       @ double 41
	.long	1078231040
	.long	1067707154              @ double 0.36666566099999998
	.long	1071085427
	.long	1072276725              @ double 0.58333456500000003
	.long	1071819437
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 41
	.long	1078231040
	.long	0                       @ double 45
	.long	1078362112
	.long	1609981891              @ double 0.41666540499999999
	.long	1071295141
	.long	5866994                 @ double 0.437500954
	.long	1071382532
	.long	0                       @ double 16000
	.long	1087324160
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 1
	.long	1072693248
	.long	4289940329              @ double 0.166666746
	.long	1069897045
	.long	0                       @ double 1
	.long	1072693248
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 6
	.long	1075314688
	.long	2148740390              @ double 0.83333325400000002
	.long	1072343722
	.long	4292453812              @ double 0.83333349199999995
	.long	1072343722
	.long	0                       @ double 2
	.long	1073741824
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 9
	.long	1075970048
	.long	10053934                @ double 0.16666650799999999
	.long	1069897044
	.long	0                       @ double 0.5
	.long	1071644672
	.long	0                       @ double 3
	.long	1074266112
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 0.5
	.long	1071644672
	.long	0                       @ double 0.5
	.long	1071644672
	.long	0                       @ double 4
	.long	1074790400
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 13
	.long	1076494336
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 0.5
	.long	1071644672
	.long	4293920561              @ double 0.83333396900000001
	.long	1072343723
	.long	0                       @ double 5
	.long	1075052544
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 18
	.long	1077018624
	.long	0                       @ double 23
	.long	1077346304
	.long	4186940                 @ double 0.16666603099999999
	.long	1069897040
	.long	0                       @ double 0.75
	.long	1072168960
	.long	0                       @ double 6
	.long	1075314688
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 23
	.long	1077346304
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 0.25
	.long	1070596096
	.long	0                       @ double 0.75
	.long	1072168960
	.long	0                       @ double 7
	.long	1075576832
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 27
	.long	1077608448
	.long	0                       @ double 31
	.long	1077870592
	.long	0                       @ double 0.25
	.long	1070596096
	.long	3225206254              @ double 0.61111199900000002
	.long	1071877690
	.long	0                       @ double 8
	.long	1075838976
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 31
	.long	1077870592
	.long	0                       @ double 35
	.long	1078034432
	.long	2679954040              @ double 0.38888803100000002
	.long	1071178634
	.long	4292873826              @ double 0.45833396900000001
	.long	1071469911
	.long	0                       @ double 9
	.long	1075970048
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 35
	.long	1078034432
	.long	0                       @ double 39
	.long	1078165504
	.long	1046735                 @ double 0.54166603099999999
	.long	1071732052
	.long	2134079502              @ double 0.16666716300000001
	.long	1069897049
	.long	0                       @ double 10
	.long	1076101120
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 39
	.long	1078165504
	.long	0                       @ double 42
	.long	1078263808
	.long	2687705597              @ double 0.83333283700000005
	.long	1072343721
	.long	1608099527              @ double 0.80555599899999997
	.long	1072285469
	.long	0                       @ double 11
	.long	1076232192
	.long	0                       @ double 0
	.long	0
	.long	0                       @ double 42
	.long	1078263808
	.long	0                       @ double 46
	.long	1078394880
	.long	2697968438              @ double 0.194444016
	.long	1070130058
	.long	0                       @ double 0.4375
	.long	1071382528
	.size	psy_data, 39408

	.type	subdv_table,%object     @ @subdv_table
	.globl	subdv_table
	.p2align	2
subdv_table:
	.zero	8
	.zero	8
	.zero	8
	.zero	8
	.zero	8
	.long	0                       @ 0x0
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	2                       @ 0x2
	.long	2                       @ 0x2
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	3                       @ 0x3
	.long	4                       @ 0x4
	.long	3                       @ 0x3
	.long	4                       @ 0x4
	.long	3                       @ 0x3
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.long	5                       @ 0x5
	.long	4                       @ 0x4
	.long	5                       @ 0x5
	.long	4                       @ 0x4
	.long	6                       @ 0x6
	.long	5                       @ 0x5
	.long	6                       @ 0x6
	.long	5                       @ 0x5
	.long	6                       @ 0x6
	.long	5                       @ 0x5
	.long	7                       @ 0x7
	.long	6                       @ 0x6
	.long	7                       @ 0x7
	.long	6                       @ 0x6
	.long	7                       @ 0x7
	.size	subdv_table, 184

	.type	huf_tbl_noESC,%object   @ @huf_tbl_noESC
	.section	.rodata,"a",%progbits
	.p2align	2
huf_tbl_noESC:
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	5                       @ 0x5
	.long	7                       @ 0x7
	.long	7                       @ 0x7
	.long	10                      @ 0xa
	.long	10                      @ 0xa
	.long	13                      @ 0xd
	.long	13                      @ 0xd
	.long	13                      @ 0xd
	.long	13                      @ 0xd
	.long	13                      @ 0xd
	.long	13                      @ 0xd
	.long	13                      @ 0xd
	.long	13                      @ 0xd
	.size	huf_tbl_noESC, 60

	.type	cb_esc_sign,%object     @ @cb_esc_sign
	.local	cb_esc_sign
	.comm	cb_esc_sign,4,4
	.type	cb_esc_buf,%object      @ @cb_esc_buf
	.local	cb_esc_buf
	.comm	cb_esc_buf,1152,4
	.type	cb_esc_end,%object      @ @cb_esc_end
	.local	cb_esc_end
	.comm	cb_esc_end,4,4
	.type	scfsi_calc.scfsi_band,%object @ @scfsi_calc.scfsi_band
	.p2align	2
scfsi_calc.scfsi_band:
	.long	0                       @ 0x0
	.long	6                       @ 0x6
	.long	11                      @ 0xb
	.long	16                      @ 0x10
	.long	21                      @ 0x15
	.size	scfsi_calc.scfsi_band, 20

	.type	scfsi_calc.slen1_n,%object @ @scfsi_calc.slen1_n
	.p2align	2
scfsi_calc.slen1_n:
	.long	0                       @ 0x0
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	8                       @ 0x8
	.long	2                       @ 0x2
	.long	2                       @ 0x2
	.long	2                       @ 0x2
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	8                       @ 0x8
	.long	8                       @ 0x8
	.long	16                      @ 0x10
	.long	16                      @ 0x10
	.size	scfsi_calc.slen1_n, 64

	.type	scfsi_calc.slen2_n,%object @ @scfsi_calc.slen2_n
	.p2align	2
scfsi_calc.slen2_n:
	.long	0                       @ 0x0
	.long	2                       @ 0x2
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	2                       @ 0x2
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	2                       @ 0x2
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.long	4                       @ 0x4
	.long	8                       @ 0x8
	.size	scfsi_calc.slen2_n, 64

	.type	scfsi_calc.slen1_tab,%object @ @scfsi_calc.slen1_tab
	.p2align	2
scfsi_calc.slen1_tab:
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	0                       @ 0x0
	.long	3                       @ 0x3
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	2                       @ 0x2
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	3                       @ 0x3
	.long	3                       @ 0x3
	.long	4                       @ 0x4
	.long	4                       @ 0x4
	.size	scfsi_calc.slen1_tab, 64

	.type	scfsi_calc.slen2_tab,%object @ @scfsi_calc.slen2_tab
	.p2align	2
scfsi_calc.slen2_tab:
	.long	0                       @ 0x0
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	0                       @ 0x0
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	1                       @ 0x1
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.long	2                       @ 0x2
	.long	3                       @ 0x3
	.size	scfsi_calc.slen2_tab, 64

	.type	ts_real_time.initial_time,%object @ @ts_real_time.initial_time
	.local	ts_real_time.initial_time
	.comm	ts_real_time.initial_time,4,4
	.type	ts_process_time.initial_time,%object @ @ts_process_time.initial_time
	.local	ts_process_time.initial_time
	.comm	ts_process_time.initial_time,4,4
	.type	.L.str.294,%object      @ @.str.294
	.section	.rodata.str1.1,"aMS",%progbits,1
.L.str.294:
	.asciz	"    Frame          |  CPU/estimated  |  time/estimated | play/CPU |   ETA\n"
	.size	.L.str.294, 75

	.type	.L.str.1.295,%object    @ @.str.1.295
.L.str.1.295:
	.asciz	"\r%6ld/%6ld(%3d%%)|%2d:%02d:%02d/%2d:%02d:%02d|%2d:%02d:%02d/%2d:%02d:%02d|%10.4f|%2d:%02d:%02d "
	.size	.L.str.1.295, 96

	.type	s_freq_table,%object    @ @s_freq_table
	.data
	.globl	s_freq_table
	.p2align	3
s_freq_table:
	.long	3435973837              @ double 22.050000000000001
	.long	1077284044
	.long	0                       @ double 24
	.long	1077411840
	.long	0                       @ double 16
	.long	1076887552
	.long	0                       @ double 0
	.long	0
	.long	3435973837              @ double 44.100000000000001
	.long	1078332620
	.long	0                       @ double 48
	.long	1078460416
	.long	0                       @ double 32
	.long	1077936128
	.long	0                       @ double 0
	.long	0
	.size	s_freq_table, 64

	.type	bitrate_table,%object   @ @bitrate_table
	.globl	bitrate_table
	.p2align	2
bitrate_table:
	.long	0                       @ 0x0
	.long	8                       @ 0x8
	.long	16                      @ 0x10
	.long	24                      @ 0x18
	.long	32                      @ 0x20
	.long	40                      @ 0x28
	.long	48                      @ 0x30
	.long	56                      @ 0x38
	.long	64                      @ 0x40
	.long	80                      @ 0x50
	.long	96                      @ 0x60
	.long	112                     @ 0x70
	.long	128                     @ 0x80
	.long	144                     @ 0x90
	.long	160                     @ 0xa0
	.long	0                       @ 0x0
	.long	32                      @ 0x20
	.long	40                      @ 0x28
	.long	48                      @ 0x30
	.long	56                      @ 0x38
	.long	64                      @ 0x40
	.long	80                      @ 0x50
	.long	96                      @ 0x60
	.long	112                     @ 0x70
	.long	128                     @ 0x80
	.long	160                     @ 0xa0
	.long	192                     @ 0xc0
	.long	224                     @ 0xe0
	.long	256                     @ 0x100
	.long	320                     @ 0x140
	.size	bitrate_table, 120

	.type	NativeByteOrder,%object @ @NativeByteOrder
	.bss
	.globl	NativeByteOrder
	.p2align	2
NativeByteOrder:
	.long	0                       @ 0x0
	.size	NativeByteOrder, 4

	.type	putmask,%object         @ @putmask
	.data
	.globl	putmask
	.p2align	2
putmask:
	.long	0                       @ 0x0
	.long	1                       @ 0x1
	.long	3                       @ 0x3
	.long	7                       @ 0x7
	.long	15                      @ 0xf
	.long	31                      @ 0x1f
	.long	63                      @ 0x3f
	.long	127                     @ 0x7f
	.long	255                     @ 0xff
	.size	putmask, 36

	.type	.L.str.302,%object      @ @.str.302
	.section	.rodata.str1.1,"aMS",%progbits,1
.L.str.302:
	.asciz	"\n"
	.size	.L.str.302, 2

	.type	.L.str.1.303,%object    @ @.str.1.303
.L.str.1.303:
	.asciz	"MPEG1 samplerates(kHz): 32 44.1 48 \n"
	.size	.L.str.1.303, 37

	.type	.L.str.2.304,%object    @ @.str.2.304
.L.str.2.304:
	.asciz	"bitrates(kbs): "
	.size	.L.str.2.304, 16

	.type	.L.str.3.305,%object    @ @.str.3.305
.L.str.3.305:
	.asciz	"%i "
	.size	.L.str.3.305, 4

	.type	.L.str.4.306,%object    @ @.str.4.306
.L.str.4.306:
	.asciz	"MPEG2 samplerates(kHz): 16 22.05 24 \n"
	.size	.L.str.4.306, 38

	.type	.L.str.5.309,%object    @ @.str.5.309
.L.str.5.309:
	.asciz	"Bitrate %dkbs not legal for %iHz output sampling.\n"
	.size	.L.str.5.309, 51

	.type	.L.str.6.312,%object    @ @.str.6.312
.L.str.6.312:
	.asciz	"SmpFrqIndex: %ldHz is not a legal sample rate\n"
	.size	.L.str.6.312, 47

	.type	.L.str.7.313,%object    @ @.str.7.313
.L.str.7.313:
	.asciz	"Unable to allocate %s\n"
	.size	.L.str.7.313, 23

	.type	.L.str.8.314,%object    @ @.str.8.314
.L.str.8.314:
	.asciz	"ABCD"
	.size	.L.str.8.314, 5

	.type	.L.str.9.315,%object    @ @.str.9.315
.L.str.9.315:
	.asciz	"DCBA"
	.size	.L.str.9.315, 5

	.type	.L.str.10.318,%object   @ @.str.10.318
.L.str.10.318:
	.asciz	"j == (bs->buf_size-1 - bs->buf_byte_idx)"
	.size	.L.str.10.318, 41

	.type	.L.str.11.319,%object   @ @.str.11.319
.L.str.11.319:
	.asciz	"util.c"
	.size	.L.str.11.319, 7

	.type	.L__func__.copy_buffer,%object @ @__func__.copy_buffer
.L__func__.copy_buffer:
	.asciz	"copy_buffer"
	.size	.L__func__.copy_buffer, 12

	.type	.L.str.12.322,%object   @ @.str.12.322
.L.str.12.322:
	.asciz	"buffer"
	.size	.L.str.12.322, 7

	.type	.L.str.13.327,%object   @ @.str.13.327
.L.str.13.327:
	.asciz	"Cannot read or write more than %d bits at a time.\n"
	.size	.L.str.13.327, 51

	.type	.L.str.14.328,%object   @ @.str.14.328
.L.str.14.328:
	.asciz	"bs->buf_byte_idx >= 0"
	.size	.L.str.14.328, 22

	.type	.L__func__.putbits,%object @ @__func__.putbits
.L__func__.putbits:
	.asciz	"putbits"
	.size	.L__func__.putbits, 8

	.type	.L.str.329,%object      @ @.str.329
.L.str.329:
	.asciz	"sf_ok!=10000"
	.size	.L.str.329, 13

	.type	.L.str.1.330,%object    @ @.str.1.330
.L.str.1.330:
	.asciz	"vbrquantize.c"
	.size	.L.str.1.330, 14

	.type	.L__func__.find_scalefac,%object @ @__func__.find_scalefac
.L__func__.find_scalefac:
	.asciz	"find_scalefac"
	.size	.L__func__.find_scalefac, 14

	.type	SizeOfEmptyFrame,%object @ @SizeOfEmptyFrame
	.data
	.globl	SizeOfEmptyFrame
	.p2align	2
SizeOfEmptyFrame:
	.long	32                      @ 0x20
	.long	17                      @ 0x11
	.long	17                      @ 0x11
	.long	9                       @ 0x9
	.size	SizeOfEmptyFrame, 16

	.type	pVbrFrames,%object      @ @pVbrFrames
	.bss
	.globl	pVbrFrames
	.p2align	2
pVbrFrames:
	.long	0
	.size	pVbrFrames, 4

	.type	nVbrNumFrames,%object   @ @nVbrNumFrames
	.globl	nVbrNumFrames
	.p2align	2
nVbrNumFrames:
	.long	0                       @ 0x0
	.size	nVbrNumFrames, 4

	.type	nVbrFrameBufferSize,%object @ @nVbrFrameBufferSize
	.globl	nVbrFrameBufferSize
	.p2align	2
nVbrFrameBufferSize:
	.long	0                       @ 0x0
	.size	nVbrFrameBufferSize, 4

	.type	VBRTag,%object          @ @VBRTag
	.data
VBRTag:
	.asciz	"Xing"
	.size	VBRTag, 5

	.type	GetVbrTag.sr_table,%object @ @GetVbrTag.sr_table
	.p2align	2
GetVbrTag.sr_table:
	.long	44100                   @ 0xac44
	.long	48000                   @ 0xbb80
	.long	32000                   @ 0x7d00
	.long	99999                   @ 0x1869f
	.size	GetVbrTag.sr_table, 16

	.type	g_Position,%object      @ @g_Position
	.local	g_Position
	.comm	g_Position,400,4
	.type	pbtStreamBuffer,%object @ @pbtStreamBuffer
	.local	pbtStreamBuffer
	.comm	pbtStreamBuffer,216,1
	.type	nZeroStreamSize,%object @ @nZeroStreamSize
	.local	nZeroStreamSize
	.comm	nZeroStreamSize,4,4
	.type	.L.str.335,%object      @ @.str.335
	.section	.rodata.str1.1,"aMS",%progbits,1
.L.str.335:
	.asciz	"illegal sampling frequency index\n"
	.size	.L.str.335, 34

	.type	InitVbrTag.framesize,%object @ @InitVbrTag.framesize
	.section	.rodata,"a",%progbits
	.p2align	2
InitVbrTag.framesize:
	.long	208                     @ 0xd0
	.long	192                     @ 0xc0
	.long	288                     @ 0x120
	.size	InitVbrTag.framesize, 12

	.type	TotalFrameSize,%object  @ @TotalFrameSize
	.local	TotalFrameSize
	.comm	TotalFrameSize,4,4
	.type	.L.str.1.336,%object    @ @.str.1.336
	.section	.rodata.str1.1,"aMS",%progbits,1
.L.str.1.336:
	.asciz	"Xing VBR header problem...use -t\n"
	.size	.L.str.1.336, 34

	.type	.L.str.2.339,%object    @ @.str.2.339
.L.str.2.339:
	.asciz	"rb+"
	.size	.L.str.2.339, 4

	.type	.L.str.3.340,%object    @ @.str.3.340
.L.str.3.340:
	.asciz	"LAME%s"
	.size	.L.str.3.340, 7

	.type	.L.str.345,%object      @ @.str.345
.L.str.345:
	.asciz	"LAME version %s (www.sulaco.org/mp3) \n"
	.size	.L.str.345, 39

	.type	.L.str.1.346,%object    @ @.str.1.346
.L.str.1.346:
	.asciz	"GPSYCHO: GPL psycho-acoustic and noise shaping model version %s. \n"
	.size	.L.str.1.346, 67

	.type	lpszVersion,%object     @ @lpszVersion
	.local	lpszVersion
	.comm	lpszVersion,80,1
	.type	.L.str.2.347,%object    @ @.str.2.347
.L.str.2.347:
	.asciz	"%d.%02d"
	.size	.L.str.2.347, 8

	.type	.L.str.3.348,%object    @ @.str.3.348
.L.str.3.348:
	.asciz	"%d:%02d"
	.size	.L.str.3.348, 8


	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.ident	"clang version 4.0.0 (trunk)"
	.section	".note.GNU-stack","",%progbits

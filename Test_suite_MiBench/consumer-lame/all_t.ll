; ModuleID = 'all_t.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64"
target triple = "armv7-ellcc-linux"

%struct.side_info_link = type { %struct.side_info_link*, %struct.MYSideInfo }
%struct.MYSideInfo = type { i32, i32, i32, i32, %struct.BF_PartHolder*, %struct.BF_PartHolder*, [2 x %struct.BF_PartHolder*], [2 x [2 x %struct.BF_PartHolder*]] }
%struct.BF_PartHolder = type { i32, %struct.BF_BitstreamPart* }
%struct.BF_BitstreamPart = type { i32, %struct.BF_BitstreamElement* }
%struct.BF_BitstreamElement = type { i32, i16 }
%struct._IO_FILE = type opaque
%struct.ID3TAGDATA = type { i32, i32, [31 x i8], [31 x i8], [31 x i8], [5 x i8], [31 x i8], [128 x i8], [1 x i8], i8 }
%struct.BF_FrameData = type { i32, i32, i32, %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart*, [2 x %struct.BF_BitstreamPart*], [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]], %struct.BF_BitstreamPart* }
%struct.BF_FrameResults = type { i32, i32, i32 }
%struct.bit_stream_struc = type { i8*, i32, %struct._IO_FILE*, i8*, i32, i32, i32, i32 }
%struct.III_side_info_t = type { i32, i32, i32, [2 x [4 x i32]], [2 x %struct.anon] }
%struct.anon = type { [2 x %struct.gr_info_ss] }
%struct.gr_info_ss = type { %struct.gr_info }
%struct.gr_info = type { i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, [4 x i32] }
%struct.III_psy_xmin = type { [22 x double], [13 x [3 x double]] }
%struct.scalefac_struct = type { [23 x i32], [14 x i32] }
%struct.huffcodetab = type { i32, i32, i32*, i8* }
%struct.anon.55 = type { i32, i32 }
%struct.lame_global_flags = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.III_scalefac_t = type { [22 x i32], [13 x [3 x i32]] }
%struct.III_psy_ratio = type { %struct.III_psy_xmin, %struct.III_psy_xmin }
%struct.rtpheader = type { %struct.rtpbits, i32, i32, i32 }
%struct.rtpbits = type { i32 }
%struct.sockaddr_in = type { i16, i16, %struct.rtpbits, [8 x i8] }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.ts_times = type { float, float, float, float }
%struct.VBRTAGDATA = type { i32, i32, i32, i32, i32, i32, [100 x i8] }

@rv_tbl = internal constant [128 x i16] [i16 0, i16 128, i16 64, i16 192, i16 32, i16 160, i16 96, i16 224, i16 16, i16 144, i16 80, i16 208, i16 48, i16 176, i16 112, i16 240, i16 8, i16 136, i16 72, i16 200, i16 40, i16 168, i16 104, i16 232, i16 24, i16 152, i16 88, i16 216, i16 56, i16 184, i16 120, i16 248, i16 4, i16 132, i16 68, i16 196, i16 36, i16 164, i16 100, i16 228, i16 20, i16 148, i16 84, i16 212, i16 52, i16 180, i16 116, i16 244, i16 12, i16 140, i16 76, i16 204, i16 44, i16 172, i16 108, i16 236, i16 28, i16 156, i16 92, i16 220, i16 60, i16 188, i16 124, i16 252, i16 2, i16 130, i16 66, i16 194, i16 34, i16 162, i16 98, i16 226, i16 18, i16 146, i16 82, i16 210, i16 50, i16 178, i16 114, i16 242, i16 10, i16 138, i16 74, i16 202, i16 42, i16 170, i16 106, i16 234, i16 26, i16 154, i16 90, i16 218, i16 58, i16 186, i16 122, i16 250, i16 6, i16 134, i16 70, i16 198, i16 38, i16 166, i16 102, i16 230, i16 22, i16 150, i16 86, i16 214, i16 54, i16 182, i16 118, i16 246, i16 14, i16 142, i16 78, i16 206, i16 46, i16 174, i16 110, i16 238, i16 30, i16 158, i16 94, i16 222, i16 62, i16 190, i16 126, i16 254], align 2
@window_s = internal global [128 x float] zeroinitializer, align 4
@costab = internal global [8 x float] zeroinitializer, align 4
@window = internal global [512 x float] zeroinitializer, align 4
@BitCount = internal global i32 0, align 4
@ThisFrameSize = internal global i32 0, align 4
@BitsRemaining = internal global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c"frameInfo->nGranules <= MAX_GRANULES\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"formatBitstream.c\00", align 1
@__func__.BF_BitstreamFrame = private unnamed_addr constant [18 x i8] c"BF_BitstreamFrame\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"frameInfo->nChannels <= MAX_CHANNELS\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"(BitsRemaining % 8) == 0\00", align 1
@forwardFrameLength = internal global i32 0, align 4
@forwardSILength = internal global i32 0, align 4
@elements = internal global i32 0, align 4
@side_queue_head = internal global %struct.side_info_link* null, align 4
@.str.7 = private unnamed_addr constant [8 x i8] c"results\00", align 1
@__func__.writePartMainData = private unnamed_addr constant [18 x i8] c"writePartMainData\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"part\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"nbits <= 32\00", align 1
@__func__.WriteMainDataBits = private unnamed_addr constant [18 x i8] c"WriteMainDataBits\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"BitCount <= ThisFrameSize\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"BitsRemaining >= 0\00", align 1
@.str.12 = private unnamed_addr constant [44 x i8] c"(BitCount + BitsRemaining) == ThisFrameSize\00", align 1
@side_queue_free = internal global %struct.side_info_link* null, align 4
@.str.13 = private unnamed_addr constant [2 x i8] c"l\00", align 1
@__func__.get_side_info = private unnamed_addr constant [14 x i8] c"get_side_info\00", align 1
@__func__.writePartSideInfo = private unnamed_addr constant [18 x i8] c"writePartSideInfo\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.14 = private unnamed_addr constant [31 x i8] c"cannot allocate side_info_link\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"newPH\00", align 1
@__func__.BF_newPartHolder = private unnamed_addr constant [17 x i8] c"BF_newPartHolder\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"newPH->part\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"newPH->part->element\00", align 1
@genre_last = global i32 147, align 4
@genre_list = global [148 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.1, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6.4, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.6, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.7, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10.8, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11.9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12.10, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13.11, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.80, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.82, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.83, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.85, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.90, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.91, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.92, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.93, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.94, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.102, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.103, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.104, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.106, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.108, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.110, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.114, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.116, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.120, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.122, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.124, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.128, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.131, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.133, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.134, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.135, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.138, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.140, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.141, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.142, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.144, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.146, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.148, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.149, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.150, i32 0, i32 0)], align 4
@.str.3.1 = private unnamed_addr constant [6 x i8] c"Blues\00", align 1
@.str.4.2 = private unnamed_addr constant [13 x i8] c"Classic Rock\00", align 1
@.str.5.3 = private unnamed_addr constant [8 x i8] c"Country\00", align 1
@.str.6.4 = private unnamed_addr constant [6 x i8] c"Dance\00", align 1
@.str.7.5 = private unnamed_addr constant [6 x i8] c"Disco\00", align 1
@.str.8.6 = private unnamed_addr constant [5 x i8] c"Funk\00", align 1
@.str.9.7 = private unnamed_addr constant [7 x i8] c"Grunge\00", align 1
@.str.10.8 = private unnamed_addr constant [8 x i8] c"Hip-Hop\00", align 1
@.str.11.9 = private unnamed_addr constant [5 x i8] c"Jazz\00", align 1
@.str.12.10 = private unnamed_addr constant [6 x i8] c"Metal\00", align 1
@.str.13.11 = private unnamed_addr constant [8 x i8] c"New Age\00", align 1
@.str.14.12 = private unnamed_addr constant [7 x i8] c"Oldies\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"Other\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"Pop\00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"R&B\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"Rap\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"Reggae\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"Rock\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"Techno\00", align 1
@.str.22 = private unnamed_addr constant [11 x i8] c"Industrial\00", align 1
@.str.23 = private unnamed_addr constant [12 x i8] c"Alternative\00", align 1
@.str.24 = private unnamed_addr constant [4 x i8] c"Ska\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"Death Metal\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"Pranks\00", align 1
@.str.27 = private unnamed_addr constant [11 x i8] c"Soundtrack\00", align 1
@.str.28 = private unnamed_addr constant [12 x i8] c"Euro-Techno\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"Ambient\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"Trip-Hop\00", align 1
@.str.31 = private unnamed_addr constant [6 x i8] c"Vocal\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"Jazz+Funk\00", align 1
@.str.33 = private unnamed_addr constant [7 x i8] c"Fusion\00", align 1
@.str.34 = private unnamed_addr constant [7 x i8] c"Trance\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"Classical\00", align 1
@.str.36 = private unnamed_addr constant [13 x i8] c"Instrumental\00", align 1
@.str.37 = private unnamed_addr constant [5 x i8] c"Acid\00", align 1
@.str.38 = private unnamed_addr constant [6 x i8] c"House\00", align 1
@.str.39 = private unnamed_addr constant [5 x i8] c"Game\00", align 1
@.str.40 = private unnamed_addr constant [11 x i8] c"Sound Clip\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"Gospel\00", align 1
@.str.42 = private unnamed_addr constant [6 x i8] c"Noise\00", align 1
@.str.43 = private unnamed_addr constant [11 x i8] c"AlternRock\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"Bass\00", align 1
@.str.45 = private unnamed_addr constant [5 x i8] c"Soul\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"Punk\00", align 1
@.str.47 = private unnamed_addr constant [6 x i8] c"Space\00", align 1
@.str.48 = private unnamed_addr constant [11 x i8] c"Meditative\00", align 1
@.str.49 = private unnamed_addr constant [17 x i8] c"Instrumental Pop\00", align 1
@.str.50 = private unnamed_addr constant [18 x i8] c"Instrumental Rock\00", align 1
@.str.51 = private unnamed_addr constant [7 x i8] c"Ethnic\00", align 1
@.str.52 = private unnamed_addr constant [7 x i8] c"Gothic\00", align 1
@.str.53 = private unnamed_addr constant [9 x i8] c"Darkwave\00", align 1
@.str.54 = private unnamed_addr constant [18 x i8] c"Techno-Industrial\00", align 1
@.str.55 = private unnamed_addr constant [11 x i8] c"Electronic\00", align 1
@.str.56 = private unnamed_addr constant [9 x i8] c"Pop-Folk\00", align 1
@.str.57 = private unnamed_addr constant [10 x i8] c"Eurodance\00", align 1
@.str.58 = private unnamed_addr constant [6 x i8] c"Dream\00", align 1
@.str.59 = private unnamed_addr constant [14 x i8] c"Southern Rock\00", align 1
@.str.60 = private unnamed_addr constant [7 x i8] c"Comedy\00", align 1
@.str.61 = private unnamed_addr constant [5 x i8] c"Cult\00", align 1
@.str.62 = private unnamed_addr constant [8 x i8] c"Gangsta\00", align 1
@.str.63 = private unnamed_addr constant [7 x i8] c"Top 40\00", align 1
@.str.64 = private unnamed_addr constant [14 x i8] c"Christian Rap\00", align 1
@.str.65 = private unnamed_addr constant [9 x i8] c"Pop/Funk\00", align 1
@.str.66 = private unnamed_addr constant [7 x i8] c"Jungle\00", align 1
@.str.67 = private unnamed_addr constant [16 x i8] c"Native American\00", align 1
@.str.68 = private unnamed_addr constant [8 x i8] c"Cabaret\00", align 1
@.str.69 = private unnamed_addr constant [9 x i8] c"New Wave\00", align 1
@.str.70 = private unnamed_addr constant [12 x i8] c"Psychadelic\00", align 1
@.str.71 = private unnamed_addr constant [5 x i8] c"Rave\00", align 1
@.str.72 = private unnamed_addr constant [10 x i8] c"Showtunes\00", align 1
@.str.73 = private unnamed_addr constant [8 x i8] c"Trailer\00", align 1
@.str.74 = private unnamed_addr constant [6 x i8] c"Lo-Fi\00", align 1
@.str.75 = private unnamed_addr constant [7 x i8] c"Tribal\00", align 1
@.str.76 = private unnamed_addr constant [10 x i8] c"Acid Punk\00", align 1
@.str.77 = private unnamed_addr constant [10 x i8] c"Acid Jazz\00", align 1
@.str.78 = private unnamed_addr constant [6 x i8] c"Polka\00", align 1
@.str.79 = private unnamed_addr constant [6 x i8] c"Retro\00", align 1
@.str.80 = private unnamed_addr constant [8 x i8] c"Musical\00", align 1
@.str.81 = private unnamed_addr constant [12 x i8] c"Rock & Roll\00", align 1
@.str.82 = private unnamed_addr constant [10 x i8] c"Hard Rock\00", align 1
@.str.83 = private unnamed_addr constant [5 x i8] c"Folk\00", align 1
@.str.84 = private unnamed_addr constant [10 x i8] c"Folk/Rock\00", align 1
@.str.85 = private unnamed_addr constant [14 x i8] c"National Folk\00", align 1
@.str.86 = private unnamed_addr constant [6 x i8] c"Swing\00", align 1
@.str.87 = private unnamed_addr constant [12 x i8] c"Fast-Fusion\00", align 1
@.str.88 = private unnamed_addr constant [6 x i8] c"Bebob\00", align 1
@.str.89 = private unnamed_addr constant [6 x i8] c"Latin\00", align 1
@.str.90 = private unnamed_addr constant [8 x i8] c"Revival\00", align 1
@.str.91 = private unnamed_addr constant [7 x i8] c"Celtic\00", align 1
@.str.92 = private unnamed_addr constant [10 x i8] c"Bluegrass\00", align 1
@.str.93 = private unnamed_addr constant [11 x i8] c"Avantgarde\00", align 1
@.str.94 = private unnamed_addr constant [12 x i8] c"Gothic Rock\00", align 1
@.str.95 = private unnamed_addr constant [17 x i8] c"Progressive Rock\00", align 1
@.str.96 = private unnamed_addr constant [17 x i8] c"Psychedelic Rock\00", align 1
@.str.97 = private unnamed_addr constant [15 x i8] c"Symphonic Rock\00", align 1
@.str.98 = private unnamed_addr constant [10 x i8] c"Slow Rock\00", align 1
@.str.99 = private unnamed_addr constant [9 x i8] c"Big Band\00", align 1
@.str.100 = private unnamed_addr constant [7 x i8] c"Chorus\00", align 1
@.str.101 = private unnamed_addr constant [15 x i8] c"Easy Listening\00", align 1
@.str.102 = private unnamed_addr constant [9 x i8] c"Acoustic\00", align 1
@.str.103 = private unnamed_addr constant [7 x i8] c"Humour\00", align 1
@.str.104 = private unnamed_addr constant [7 x i8] c"Speech\00", align 1
@.str.105 = private unnamed_addr constant [8 x i8] c"Chanson\00", align 1
@.str.106 = private unnamed_addr constant [6 x i8] c"Opera\00", align 1
@.str.107 = private unnamed_addr constant [14 x i8] c"Chamber Music\00", align 1
@.str.108 = private unnamed_addr constant [7 x i8] c"Sonata\00", align 1
@.str.109 = private unnamed_addr constant [9 x i8] c"Symphony\00", align 1
@.str.110 = private unnamed_addr constant [11 x i8] c"Booty Bass\00", align 1
@.str.111 = private unnamed_addr constant [7 x i8] c"Primus\00", align 1
@.str.112 = private unnamed_addr constant [12 x i8] c"Porn Groove\00", align 1
@.str.113 = private unnamed_addr constant [7 x i8] c"Satire\00", align 1
@.str.114 = private unnamed_addr constant [9 x i8] c"Slow Jam\00", align 1
@.str.115 = private unnamed_addr constant [5 x i8] c"Club\00", align 1
@.str.116 = private unnamed_addr constant [6 x i8] c"Tango\00", align 1
@.str.117 = private unnamed_addr constant [6 x i8] c"Samba\00", align 1
@.str.118 = private unnamed_addr constant [9 x i8] c"Folklore\00", align 1
@.str.119 = private unnamed_addr constant [7 x i8] c"Ballad\00", align 1
@.str.120 = private unnamed_addr constant [13 x i8] c"Power Ballad\00", align 1
@.str.121 = private unnamed_addr constant [14 x i8] c"Rhythmic Soul\00", align 1
@.str.122 = private unnamed_addr constant [10 x i8] c"Freestyle\00", align 1
@.str.123 = private unnamed_addr constant [5 x i8] c"Duet\00", align 1
@.str.124 = private unnamed_addr constant [10 x i8] c"Punk Rock\00", align 1
@.str.125 = private unnamed_addr constant [10 x i8] c"Drum Solo\00", align 1
@.str.126 = private unnamed_addr constant [10 x i8] c"A capella\00", align 1
@.str.127 = private unnamed_addr constant [11 x i8] c"Euro-House\00", align 1
@.str.128 = private unnamed_addr constant [11 x i8] c"Dance Hall\00", align 1
@.str.129 = private unnamed_addr constant [4 x i8] c"Goa\00", align 1
@.str.130 = private unnamed_addr constant [12 x i8] c"Drum & Bass\00", align 1
@.str.131 = private unnamed_addr constant [11 x i8] c"Club House\00", align 1
@.str.132 = private unnamed_addr constant [9 x i8] c"Hardcore\00", align 1
@.str.133 = private unnamed_addr constant [7 x i8] c"Terror\00", align 1
@.str.134 = private unnamed_addr constant [6 x i8] c"Indie\00", align 1
@.str.135 = private unnamed_addr constant [8 x i8] c"BritPop\00", align 1
@.str.136 = private unnamed_addr constant [10 x i8] c"NegerPunk\00", align 1
@.str.137 = private unnamed_addr constant [11 x i8] c"Polsk Punk\00", align 1
@.str.138 = private unnamed_addr constant [5 x i8] c"Beat\00", align 1
@.str.139 = private unnamed_addr constant [18 x i8] c"Christian Gangsta\00", align 1
@.str.140 = private unnamed_addr constant [12 x i8] c"Heavy Metal\00", align 1
@.str.141 = private unnamed_addr constant [12 x i8] c"Black Metal\00", align 1
@.str.142 = private unnamed_addr constant [10 x i8] c"Crossover\00", align 1
@.str.143 = private unnamed_addr constant [15 x i8] c"Contemporary C\00", align 1
@.str.144 = private unnamed_addr constant [15 x i8] c"Christian Rock\00", align 1
@.str.145 = private unnamed_addr constant [9 x i8] c"Merengue\00", align 1
@.str.146 = private unnamed_addr constant [6 x i8] c"Salsa\00", align 1
@.str.147 = private unnamed_addr constant [13 x i8] c"Thrash Metal\00", align 1
@.str.148 = private unnamed_addr constant [6 x i8] c"Anime\00", align 1
@.str.149 = private unnamed_addr constant [5 x i8] c"JPop\00", align 1
@.str.150 = private unnamed_addr constant [9 x i8] c"SynthPop\00", align 1
@id3tag = common global %struct.ID3TAGDATA zeroinitializer, align 4
@.str.151 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.152 = private unnamed_addr constant [4 x i8] c"TAG\00", align 1
@.str.2.153 = private unnamed_addr constant [4 x i8] c"rb+\00", align 1
@frameData = global %struct.BF_FrameData* null, align 4
@frameResults = global %struct.BF_FrameResults* null, align 4
@PartHoldersInitialized = global i32 0, align 4
@headerPH = common global %struct.BF_PartHolder* null, align 4
@frameSIPH = common global %struct.BF_PartHolder* null, align 4
@channelSIPH = common global [2 x %struct.BF_PartHolder*] zeroinitializer, align 4
@spectrumSIPH = common global [2 x [2 x %struct.BF_PartHolder*]] zeroinitializer, align 4
@scaleFactorsPH = common global [2 x [2 x %struct.BF_PartHolder*]] zeroinitializer, align 4
@codedDataPH = common global [2 x [2 x %struct.BF_PartHolder*]] zeroinitializer, align 4
@userSpectrumPH = common global [2 x [2 x %struct.BF_PartHolder*]] zeroinitializer, align 4
@userFrameDataPH = common global %struct.BF_PartHolder* null, align 4
@bs = internal global %struct.bit_stream_struc* null, align 4
@.str.156 = private unnamed_addr constant [10 x i8] c"frameData\00", align 1
@.str.1.157 = private unnamed_addr constant [14 x i8] c"l3bitstream.c\00", align 1
@__func__.III_format_bitstream = private unnamed_addr constant [21 x i8] c"III_format_bitstream\00", align 1
@.str.2.158 = private unnamed_addr constant [13 x i8] c"frameResults\00", align 1
@slen1_tab = internal global [16 x i32] [i32 0, i32 0, i32 0, i32 0, i32 3, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 4, i32 4], align 4
@slen2_tab = internal global [16 x i32] [i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 2, i32 3], align 4
@.str.7.159 = private unnamed_addr constant [24 x i8] c"gi->sfb_partition_table\00", align 1
@__func__.encodeMainData = private unnamed_addr constant [15 x i8] c"encodeMainData\00", align 1
@.str.8.160 = private unnamed_addr constant [16 x i8] c"tableindex < 32\00", align 1
@__func__.Huffmancodebits = private unnamed_addr constant [16 x i8] c"Huffmancodebits\00", align 1
@.str.9.161 = private unnamed_addr constant [20 x i8] c"scalefac_index < 23\00", align 1
@.str.10.162 = private unnamed_addr constant [29 x i8] c"(gi->count1table_select < 2)\00", align 1
@.str.11.163 = private unnamed_addr constant [17 x i8] c"count1End <= 576\00", align 1
@.str.12.164 = private unnamed_addr constant [35 x i8] c"opps - adding stuffing bits = %i.\0A\00", align 1
@.str.13.165 = private unnamed_addr constant [27 x i8] c"this should not happen...\0A\00", align 1
@.str.14.166 = private unnamed_addr constant [60 x i8] c"bitsWritten == (int)(gi->part2_3_length - gi->part2_length)\00", align 1
@.str.3.167 = private unnamed_addr constant [22 x i8] c"linbitsx <= h->linmax\00", align 1
@__func__.HuffmanCode = private unnamed_addr constant [12 x i8] c"HuffmanCode\00", align 1
@.str.4.168 = private unnamed_addr constant [22 x i8] c"linbitsy <= h->linmax\00", align 1
@.str.5.169 = private unnamed_addr constant [13 x i8] c"*cbits <= 32\00", align 1
@.str.6.170 = private unnamed_addr constant [13 x i8] c"*xbits <= 32\00", align 1
@crc = internal global i32 0, align 4
@.str.15.171 = private unnamed_addr constant [28 x i8] c"gi->block_type == NORM_TYPE\00", align 1
@__func__.encodeSideInfo = private unnamed_addr constant [15 x i8] c"encodeSideInfo\00", align 1
@bs.172 = internal global %struct.bit_stream_struc zeroinitializer, align 4
@l3_side = internal global %struct.III_side_info_t zeroinitializer, align 4
@.str.173 = private unnamed_addr constant [65 x i8] c"Warning: highpass filter disabled.  highpass frequency to small\0A\00", align 1
@.str.5.174 = private unnamed_addr constant [68 x i8] c"Autoconverting from stereo to mono. Setting encoding to mono mode.\0A\00", align 1
@.str.6.175 = private unnamed_addr constant [40 x i8] c"Resampling:  input=%ikHz  output=%ikHz\0A\00", align 1
@.str.7.176 = private unnamed_addr constant [70 x i8] c"Using polyphase highpass filter, transition band: %.0f Hz -  %.0f Hz\0A\00", align 1
@.str.8.177 = private unnamed_addr constant [70 x i8] c"Using polyphase lowpass filter,  transition band:  %.0f Hz - %.0f Hz\0A\00", align 1
@.str.9.178 = private unnamed_addr constant [15 x i8] c"Analyzing %s \0A\00", align 1
@.str.11.179 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.12.180 = private unnamed_addr constant [6 x i8] c"stdin\00", align 1
@.str.13.181 = private unnamed_addr constant [7 x i8] c"stdout\00", align 1
@.str.10.182 = private unnamed_addr constant [19 x i8] c"Encoding %s to %s\0A\00", align 1
@lame_print_config.mode_names = internal global [4 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.185, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2.186, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.187, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4.188, i32 0, i32 0)], align 4
@.str.14.183 = private unnamed_addr constant [59 x i8] c"Encoding as %.1fkHz VBR(q=%i) %s MPEG%i LayerIII  qval=%i\0A\00", align 1
@.str.15.184 = private unnamed_addr constant [67 x i8] c"Encoding as %.1f kHz %d kbps %s MPEG%i LayerIII (%4.1fx)  qval=%i\0A\00", align 1
@.str.1.185 = private unnamed_addr constant [7 x i8] c"stereo\00", align 1
@.str.2.186 = private unnamed_addr constant [9 x i8] c"j-stereo\00", align 1
@.str.3.187 = private unnamed_addr constant [8 x i8] c"dual-ch\00", align 1
@.str.4.188 = private unnamed_addr constant [10 x i8] c"single-ch\00", align 1
@lame_encode_frame.sentBits = internal global i32 0, align 4
@lame_encode_frame.bitsPerSlot = internal global i32 0, align 4
@lame_encode_frame.frac_SpF = internal global double 0.000000e+00, align 8
@lame_encode_frame.slot_lag = internal global double 0.000000e+00, align 8
@.str.16.189 = private unnamed_addr constant [44 x i8] c"mf_size>=(BLKSIZE+gfp->framesize-FFTOFFSET)\00", align 1
@.str.17.190 = private unnamed_addr constant [7 x i8] c"lame.c\00", align 1
@__func__.lame_encode_frame = private unnamed_addr constant [18 x i8] c"lame_encode_frame\00", align 1
@lame_encode_frame.ms_ratio = internal global [2 x double] zeroinitializer, align 8
@lame_encode_frame.ms_ener_ratio = internal global [2 x double] zeroinitializer, align 8
@lame_encode_frame.frameBits = internal global i32 0, align 4
@.str.18.191 = private unnamed_addr constant [36 x i8] c"Sent %ld bits = %ld slots plus %ld\0A\00", align 1
@fill_buffer_resample.init = internal global [2 x i32] zeroinitializer, align 4
@fill_buffer_resample.itime = internal global [2 x double] zeroinitializer, align 8
@fill_buffer_resample.inbuf_old = internal global [2 x [5 x i16]] zeroinitializer, align 2
@.str.19.192 = private unnamed_addr constant [18 x i8] c"MFSIZE>=mf_needed\00", align 1
@__func__.lame_encode_buffer = private unnamed_addr constant [19 x i8] c"lame_encode_buffer\00", align 1
@lame_encode_buffer.frame_buffered = internal global i32 0, align 4
@mfbuf = internal global [2 x [3056 x i16]] zeroinitializer, align 2
@mf_samples_to_encode = internal global i32 0, align 4
@mf_size = internal global i32 0, align 4
@.str.20.193 = private unnamed_addr constant [16 x i8] c"mf_size<=MFSIZE\00", align 1
@.str.21.194 = private unnamed_addr constant [12 x i8] c"nsamples==0\00", align 1
@__func__.lame_encode_buffer_interleaved = private unnamed_addr constant [31 x i8] c"lame_encode_buffer_interleaved\00", align 1
@lame_encode_buffer_interleaved.frame_buffered = internal global i32 0, align 4
@.str.22.195 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.196 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.1.197 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.2.198 = private unnamed_addr constant [24 x i8] c"Could not create \22%s\22.\0A\00", align 1
@.str.3.199 = private unnamed_addr constant [34 x i8] c"mp3 buffer is not big enough... \0A\00", align 1
@.str.4.200 = private unnamed_addr constant [25 x i8] c"Error writing mp3 output\00", align 1
@mdct_sub48.init = internal global i32 0, align 4
@sb_sample = internal global [2 x [2 x [18 x [32 x double]]]] zeroinitializer, align 8
@win = internal global [4 x [36 x double]] zeroinitializer, align 8
@ca = internal global [8 x double] zeroinitializer, align 8
@cs = internal global [8 x double] zeroinitializer, align 8
@cos_l = internal global [244 x double] zeroinitializer, align 8
@all = internal constant [12 x i32] [i32 0, i32 2, i32 3, i32 5, i32 6, i32 8, i32 9, i32 11, i32 12, i32 14, i32 15, i32 17], align 4
@cos_s = internal global [6 x [6 x double]] zeroinitializer, align 8
@enwindow = internal global [256 x double] [double 0x3FA251E002C5BE4C, double 0x3F924E1FFC2760F6, double 3.134727e-03, double 2.457142e-03, double 9.713170e-04, double 2.188680e-04, double 1.015660e-04, double 1.382800e-05, double 0x3FA24EFFFE8EA200, double 3.401756e-03, double 9.837150e-04, double 9.918200e-05, double -4.770000e-07, double 1.039510e-04, double 9.536740e-04, double 2.841473e-03, double 1.239800e-05, double 1.912120e-04, double 2.283096e-03, double 0x3F9166FFFA87D736, double 0x3F9334FFF82E8B95, double 2.630711e-03, double 2.474780e-04, double 1.478200e-05, double 0x3FA2467FFD4C82A1, double 3.643036e-03, double 9.918210e-04, double 9.632100e-05, double -4.770000e-07, double 1.058580e-04, double 9.307860e-04, double 2.521515e-03, double 1.144400e-05, double 1.654620e-04, double 2.110004e-03, double 0x3F907FDFF8E84D76, double 0x3F941B0002FC8112, double 2.803326e-03, double 2.770420e-04, double 1.668900e-05, double 0x3FA2385FFEFF602E, double 3.858566e-03, double 9.951590e-04, double 9.346000e-05, double -4.770000e-07, double 1.072880e-04, double 9.026530e-04, double 2.174854e-03, double 1.001400e-05, double 1.401900e-04, double 1.937389e-03, double 0x3F8F32C00A8B630F, double 0x3F94FFC002FEA6D3, double 2.974033e-03, double 3.075600e-04, double 1.812000e-05, double 3.543520e-02, double 4.049301e-03, double 9.942050e-04, double 9.059900e-05, double -4.770000e-07, double 1.082420e-04, double 8.687970e-04, double 1.800537e-03, double 9.060000e-06, double 1.163480e-04, double 1.766682e-03, double 0x3F8D680010E953B9, double 0x3F95E29FFB661AF0, double 3.141880e-03, double 3.390310e-04, double 1.955000e-05, double 0x3FA20B4002AD0C1B, double 4.215240e-03, double 9.894370e-04, double 8.726100e-05, double -4.770000e-07, double 1.087190e-04, double 8.292200e-04, double 1.399517e-03, double 8.106000e-06, double 9.393700e-05, double 1.597881e-03, double 0x3F8BA03FF357727A, double 0x3F96C320035E36F6, double 3.306866e-03, double 3.714560e-04, double 2.145800e-05, double 3.500700e-02, double 4.357815e-03, double 9.808540e-04, double 8.392300e-05, double -4.770000e-07, double 1.087190e-04, double 7.839200e-04, double 9.713170e-04, double 7.629000e-06, double 7.295600e-05, double 1.432419e-03, double 0x3F89DC800CEF6B77, double 2.307415e-02, double 3.467083e-03, double 4.043580e-04, double 2.336500e-05, double 0x3FA1C82FFC6969F3, double 4.477024e-03, double 9.689330e-04, double 8.058500e-05, double -9.540000e-07, double 1.082420e-04, double 7.319450e-04, double 5.159380e-04, double 6.676000e-06, double 5.292900e-05, double 1.269817e-03, double 0x3F881D80076614A1, double 0x3F987B2006DB9161, double 3.622532e-03, double 4.382130e-04, double 2.527200e-05, double 0x3FA19E90011D1416, double 4.573822e-03, double 9.541510e-04, double 7.677100e-05, double -9.540000e-07, double 1.068120e-04, double 6.742480e-04, double 3.337900e-05, double 6.199000e-06, double 3.433200e-05, double 1.111031e-03, double 0x3F86643FF91CEA7A, double 0x3F99519FFD2D5F2B, double 3.771782e-03, double 4.725460e-04, double 2.765700e-05, double 3.405571e-02, double 4.649162e-03, double 9.355550e-04, double 7.343300e-05, double -9.540000e-07, double 1.053810e-04, double 6.103520e-04, double -4.758830e-04, double 5.245000e-06, double 1.716600e-05, double 9.565350e-04, double 0x3F84B1400FA0C315, double 2.552700e-02, double 3.914356e-03, double 5.073550e-04, double 3.004100e-05, double 0x3FA13BE000055E64, double 4.703045e-03, double 9.150510e-04, double 7.009500e-05, double -9.540000e-07, double 1.025200e-04, double 5.393030e-04, double -1.011848e-03, double 4.768000e-06, double 9.540000e-07, double 8.068080e-04, double 9.287834e-03, double 0x3F9AF14004E3FBA4, double 4.048824e-03, double 5.421640e-04, double 3.242500e-05, double 0x3FA102EFFD062E20, double 4.737377e-03, double 8.916850e-04, double 6.628000e-05, double -1.431000e-06, double 9.918200e-05, double 4.625320e-04, double -1.573563e-03, double 4.292000e-06, double -1.382800e-05, double 6.618500e-04, double 8.487225e-03, double 2.707386e-02, double 4.174709e-03, double 5.769730e-04, double 3.480900e-05, double 0x3FA0C53FFF633BD3, double 4.752159e-03, double 8.664130e-04, double 6.294300e-05, double -1.431000e-06, double 9.536700e-05, double 3.786090e-04, double -2.161503e-03, double 3.815000e-06, double -2.718000e-05, double 5.221370e-04, double 7.703304e-03, double 0x3F9C7BA000DE43BA, double 4.290581e-03, double 6.117820e-04, double 3.767000e-05, double 3.224802e-02, double 4.748821e-03, double 8.387570e-04, double 5.960500e-05, double -1.907000e-06, double 9.012200e-05, double 2.884860e-04, double -2.774239e-03, double 3.338000e-06, double -3.957700e-05, double 3.881450e-04, double 6.937027e-03, double 0x3F9D37C002307E44, double 4.395962e-03, double 6.465910e-04, double 4.053100e-05, double 3.170681e-02, double 4.728317e-03, double 8.096690e-04, double 5.579000e-05, double -1.907000e-06, double 8.440000e-05, double 1.916890e-04, double -3.411293e-03, double 3.338000e-06, double -5.054500e-05, double 2.598760e-04, double 6.189346e-03, double 0x3F9DED20070F1B84, double 4.489899e-03, double 6.809230e-04, double 4.339200e-05, double 0x3F9FE13FFEFC278C, double 4.691124e-03, double 7.791520e-04, double 5.292900e-05, double -2.384000e-06, double 7.772400e-05, double 8.821500e-05, double -4.072189e-03, double 2.861000e-06, double -6.055800e-05, double 1.373290e-04, double 5.462170e-03, double 2.989006e-02, double 4.570484e-03, double 7.143020e-04, double 4.625300e-05, double 0x3F9F425FFF77A281, double 4.638195e-03, double 7.472040e-04, double 4.959100e-05, double 4.756451e-03, double 2.145800e-05, double -6.961800e-05, double 2.384000e-06], align 8
@mm = internal global [16 x [31 x double]] zeroinitializer, align 8
@mdct_init48.c = internal constant [8 x double] [double -6.000000e-01, double -5.350000e-01, double -3.300000e-01, double -1.850000e-01, double -9.500000e-02, double -4.100000e-02, double -1.420000e-02, double -3.700000e-03], align 8
@mdct_init48.d3 = internal constant [4 x i32] [i32 1, i32 7, i32 10, i32 16], align 4
@mdct_init48.d9 = internal constant [2 x i32] [i32 4, i32 13], align 4
@L3psycho_anal.blocktype_old = internal global [2 x i32] zeroinitializer, align 4
@.str.205 = private unnamed_addr constant [42 x i8] c"error, invalid sampling frequency: %d Hz\0A\00", align 1
@L3psycho_anal.rx_sav = internal global [4 x [2 x [513 x float]]] zeroinitializer, align 4
@L3psycho_anal.ax_sav = internal global [4 x [2 x [513 x float]]] zeroinitializer, align 4
@L3psycho_anal.bx_sav = internal global [4 x [2 x [513 x float]]] zeroinitializer, align 4
@L3psycho_anal.en = internal global [4 x %struct.III_psy_xmin] zeroinitializer, align 8
@L3psycho_anal.thm = internal global [4 x %struct.III_psy_xmin] zeroinitializer, align 8
@L3psycho_anal.cw_lower_index = internal global i32 0, align 4
@L3psycho_anal.cw_upper_index = internal global i32 0, align 4
@L3psycho_anal.cw = internal global [513 x float] zeroinitializer, align 4
@L3psycho_anal.mld_s = internal global [12 x double] zeroinitializer, align 8
@L3psycho_anal.mld_l = internal global [21 x double] zeroinitializer, align 8
@L3psycho_anal.partition_l = internal global [513 x i32] zeroinitializer, align 4
@L3psycho_anal.numlines_l = internal global [63 x i32] zeroinitializer, align 4
@L3psycho_anal.numlines_s = internal global [63 x i32] zeroinitializer, align 4
@L3psycho_anal.minval = internal global [63 x double] zeroinitializer, align 8
@L3psycho_anal.qthr_l = internal global [63 x double] zeroinitializer, align 8
@L3psycho_anal.s3_l = internal global [64 x [64 x double]] zeroinitializer, align 8
@L3psycho_anal.s3_s = internal global [64 x [64 x double]] zeroinitializer, align 8
@L3psycho_anal.qthr_s = internal global [63 x double] zeroinitializer, align 8
@L3psycho_anal.bu_l = internal global [21 x i32] zeroinitializer, align 4
@L3psycho_anal.bo_l = internal global [21 x i32] zeroinitializer, align 4
@L3psycho_anal.w1_l = internal global [21 x double] zeroinitializer, align 8
@L3psycho_anal.w2_l = internal global [21 x double] zeroinitializer, align 8
@L3psycho_anal.bu_s = internal global [12 x i32] zeroinitializer, align 4
@L3psycho_anal.bo_s = internal global [12 x i32] zeroinitializer, align 4
@L3psycho_anal.w1_s = internal global [12 x double] zeroinitializer, align 8
@L3psycho_anal.w2_s = internal global [12 x double] zeroinitializer, align 8
@L3psycho_anal.npart_l_orig = internal global i32 0, align 4
@L3psycho_anal.npart_s_orig = internal global i32 0, align 4
@L3psycho_anal.npart_l = internal global i32 0, align 4
@L3psycho_anal.npart_s = internal global i32 0, align 4
@L3psycho_anal.s3ind = internal global [63 x [2 x i32]] zeroinitializer, align 4
@L3psycho_anal.s3ind_s = internal global [63 x [2 x i32]] zeroinitializer, align 4
@L3psycho_anal.wsamp_S = internal global [2 x [3 x [256 x float]]] zeroinitializer, align 4
@L3psycho_anal.wsamp_L = internal global [2 x [1024 x float]] zeroinitializer, align 4
@L3psycho_anal.pe = internal global [4 x double] zeroinitializer, align 8
@L3psycho_anal.energy = internal global [513 x float] zeroinitializer, align 4
@L3psycho_anal.energy_s = internal global [3 x [129 x float]] zeroinitializer, align 4
@L3psycho_anal.eb = internal global [63 x double] zeroinitializer, align 8
@L3psycho_anal.cb = internal global [63 x double] zeroinitializer, align 8
@L3psycho_anal.nb_1 = internal global [4 x [63 x double]] zeroinitializer, align 8
@L3psycho_anal.nb_2 = internal global [4 x [63 x double]] zeroinitializer, align 8
@L3psycho_anal.thr = internal global [63 x double] zeroinitializer, align 8
@.str.1.206 = private unnamed_addr constant [26 x i8] c"Error in block selecting\0A\00", align 1
@L3psycho_anal.ms_ratio_s_old = internal global double 0.000000e+00, align 8
@L3psycho_anal.ms_ratio_l_old = internal global double 0.000000e+00, align 8
@L3psycho_anal.ms_ener_ratio_old = internal global double 2.500000e-01, align 8
@.str.2.207 = private unnamed_addr constant [27 x i8] c"1. please check \22psy_data\22\00", align 1
@.str.3.208 = private unnamed_addr constant [27 x i8] c"3. please check \22psy_data\22\00", align 1
@.str.4.209 = private unnamed_addr constant [28 x i8] c"30:please check \22psy_data\22\0A\00", align 1
@.str.5.210 = private unnamed_addr constant [31 x i8] c"31l: please check \22psy_data.\22\0A\00", align 1
@.str.6.211 = private unnamed_addr constant [15 x i8] c"w1,w2: %f %f \0A\00", align 1
@.str.7.212 = private unnamed_addr constant [31 x i8] c"31s: please check \22psy_data.\22\0A\00", align 1
@outer_loop.OldValue = internal global [2 x i32] [i32 180, i32 180], align 4
@.str.5.215 = private unnamed_addr constant [15 x i8] c"iteration != 1\00", align 1
@.str.1.216 = private unnamed_addr constant [11 x i8] c"quantize.c\00", align 1
@__func__.outer_loop = private unnamed_addr constant [11 x i8] c"outer_loop\00", align 1
@.str.6.217 = private unnamed_addr constant [28 x i8] c"cod_info->global_gain < 256\00", align 1
@.str.7.218 = private unnamed_addr constant [8 x i8] c"s<Q_MAX\00", align 1
@__func__.calc_noise1 = private unnamed_addr constant [12 x i8] c"calc_noise1\00", align 1
@.str.8.219 = private unnamed_addr constant [5 x i8] c"s>=0\00", align 1
@.str.222 = private unnamed_addr constant [20 x i8] c"this_bits>=min_bits\00", align 1
@__func__.VBR_iteration_loop = private unnamed_addr constant [19 x i8] c"VBR_iteration_loop\00", align 1
@.str.2.223 = private unnamed_addr constant [20 x i8] c"this_bits<=max_bits\00", align 1
@.str.3.224 = private unnamed_addr constant [42 x i8] c"(int)cod_info->part2_3_length <= max_bits\00", align 1
@.str.4.225 = private unnamed_addr constant [18 x i8] c"used_bits <= bits\00", align 1
@masking_lower = global float 1.000000e+00, align 4
@nr_of_sfb_block = global [6 x [3 x [4 x i32]]] [[3 x [4 x i32]] [[4 x i32] [i32 6, i32 5, i32 5, i32 5], [4 x i32] [i32 9, i32 9, i32 9, i32 9], [4 x i32] [i32 6, i32 9, i32 9, i32 9]], [3 x [4 x i32]] [[4 x i32] [i32 6, i32 5, i32 7, i32 3], [4 x i32] [i32 9, i32 9, i32 12, i32 6], [4 x i32] [i32 6, i32 9, i32 12, i32 6]], [3 x [4 x i32]] [[4 x i32] [i32 11, i32 10, i32 0, i32 0], [4 x i32] [i32 18, i32 18, i32 0, i32 0], [4 x i32] [i32 15, i32 18, i32 0, i32 0]], [3 x [4 x i32]] [[4 x i32] [i32 7, i32 7, i32 7, i32 0], [4 x i32] [i32 12, i32 12, i32 12, i32 0], [4 x i32] [i32 6, i32 15, i32 12, i32 0]], [3 x [4 x i32]] [[4 x i32] [i32 6, i32 6, i32 6, i32 3], [4 x i32] [i32 12, i32 9, i32 9, i32 6], [4 x i32] [i32 6, i32 12, i32 9, i32 6]], [3 x [4 x i32]] [[4 x i32] [i32 8, i32 8, i32 5, i32 0], [4 x i32] [i32 15, i32 12, i32 9, i32 0], [4 x i32] [i32 6, i32 18, i32 9, i32 0]]], align 4
@pretab = global [21 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 3, i32 2], align 4
@sfBandIndex = global [6 x %struct.scalefac_struct] [%struct.scalefac_struct { [23 x i32] [i32 0, i32 6, i32 12, i32 18, i32 24, i32 30, i32 36, i32 44, i32 54, i32 66, i32 80, i32 96, i32 116, i32 140, i32 168, i32 200, i32 238, i32 284, i32 336, i32 396, i32 464, i32 522, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 18, i32 24, i32 32, i32 42, i32 56, i32 74, i32 100, i32 132, i32 174, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 6, i32 12, i32 18, i32 24, i32 30, i32 36, i32 44, i32 54, i32 66, i32 80, i32 96, i32 114, i32 136, i32 162, i32 194, i32 232, i32 278, i32 332, i32 394, i32 464, i32 540, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 18, i32 26, i32 36, i32 48, i32 62, i32 80, i32 104, i32 136, i32 180, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 6, i32 12, i32 18, i32 24, i32 30, i32 36, i32 44, i32 54, i32 66, i32 80, i32 96, i32 116, i32 140, i32 168, i32 200, i32 238, i32 284, i32 336, i32 396, i32 464, i32 522, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 18, i32 26, i32 36, i32 48, i32 62, i32 80, i32 104, i32 134, i32 174, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 30, i32 36, i32 44, i32 52, i32 62, i32 74, i32 90, i32 110, i32 134, i32 162, i32 196, i32 238, i32 288, i32 342, i32 418, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 22, i32 30, i32 40, i32 52, i32 66, i32 84, i32 106, i32 136, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 30, i32 36, i32 42, i32 50, i32 60, i32 72, i32 88, i32 106, i32 128, i32 156, i32 190, i32 230, i32 276, i32 330, i32 384, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 22, i32 28, i32 38, i32 50, i32 64, i32 80, i32 100, i32 126, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 30, i32 36, i32 44, i32 54, i32 66, i32 82, i32 102, i32 126, i32 156, i32 194, i32 240, i32 296, i32 364, i32 448, i32 550, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 22, i32 30, i32 42, i32 58, i32 78, i32 104, i32 138, i32 180, i32 192] }], align 4
@scalefac_band = common global %struct.scalefac_struct zeroinitializer, align 4
@pow43 = common global [8208 x double] zeroinitializer, align 8
@ipow20 = common global [256 x double] zeroinitializer, align 8
@pow20 = common global [256 x double] zeroinitializer, align 8
@convert_mdct = common global i32 0, align 4
@reduce_sidechannel = common global i32 0, align 4
@ATH_mdct_long = common global [576 x double] zeroinitializer, align 8
@ATH_mdct_short = common global [192 x double] zeroinitializer, align 8
@ATH_l = internal global [21 x double] zeroinitializer, align 8
@ATH_s = internal global [21 x double] zeroinitializer, align 8
@adj43 = internal global [8208 x double] zeroinitializer, align 8
@adj43asm = internal global [8208 x double] zeroinitializer, align 8
@.str.254 = private unnamed_addr constant [14 x i8] c"max_bits >= 0\00", align 1
@.str.1.255 = private unnamed_addr constant [15 x i8] c"quantize-pvt.c\00", align 1
@__func__.inner_loop = private unnamed_addr constant [11 x i8] c"inner_loop\00", align 1
@scale_bitcount.slen1_tab = internal global [16 x i32] [i32 0, i32 18, i32 36, i32 54, i32 54, i32 36, i32 54, i32 72, i32 54, i32 72, i32 90, i32 72, i32 90, i32 108, i32 108, i32 126], align 4
@scale_bitcount.slen2_tab = internal global [16 x i32] [i32 0, i32 10, i32 20, i32 30, i32 33, i32 21, i32 31, i32 41, i32 32, i32 42, i32 52, i32 43, i32 53, i32 63, i32 64, i32 74], align 4
@scale_bitcount.slen1 = internal global [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 8, i32 2, i32 2, i32 2, i32 4, i32 4, i32 4, i32 8, i32 8, i32 8, i32 16, i32 16], align 4
@scale_bitcount.slen2 = internal global [16 x i32] [i32 1, i32 2, i32 4, i32 8, i32 1, i32 2, i32 4, i32 8, i32 2, i32 4, i32 8, i32 2, i32 4, i32 8, i32 4, i32 8], align 4
@max_range_sfac_tab = internal global [6 x [4 x i32]] [[4 x i32] [i32 15, i32 15, i32 7, i32 7], [4 x i32] [i32 15, i32 15, i32 7, i32 0], [4 x i32] [i32 7, i32 3, i32 0, i32 0], [4 x i32] [i32 15, i32 31, i32 31, i32 0], [4 x i32] [i32 7, i32 7, i32 7, i32 0], [4 x i32] [i32 3, i32 3, i32 0, i32 0]], align 4
@scale_bitcount_lsf.log2tab = internal global [16 x i32] [i32 0, i32 1, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4], align 4
@.str.2.260 = private unnamed_addr constant [38 x i8] c"intensity stereo not implemented yet\0A\00", align 1
@.str.3.261 = private unnamed_addr constant [30 x i8] c"cod_info->sfb_partition_table\00", align 1
@__func__.scale_bitcount_lsf = private unnamed_addr constant [19 x i8] c"scale_bitcount_lsf\00", align 1
@bin_search_StepSize2.CurrentStep = internal global i32 4, align 4
@ResvSize = internal global i32 0, align 4
@.str.270 = private unnamed_addr constant [43 x i8] c"(l3_side->main_data_begin * 8) == ResvSize\00", align 1
@.str.1.271 = private unnamed_addr constant [12 x i8] c"reservoir.c\00", align 1
@__func__.ResvFrameBegin = private unnamed_addr constant [15 x i8] c"ResvFrameBegin\00", align 1
@ResvMax = internal global i32 0, align 4
@.str.278 = private unnamed_addr constant [18 x i8] c"socket() failed.\0A\00", align 1
@.str.1.279 = private unnamed_addr constant [32 x i8] c"setsockopt SO_REUSEADDR failed\0A\00", align 1
@.str.2.280 = private unnamed_addr constant [59 x i8] c"setsockopt IP_MULTICAST_TTL failed.  multicast in kernel?\0A\00", align 1
@.str.3.281 = private unnamed_addr constant [60 x i8] c"setsockopt IP_MULTICAST_LOOP failed.  multicast in kernel?\0A\00", align 1
@hs = global i32 32, align 4
@ht = global [34 x %struct.huffcodetab] [%struct.huffcodetab zeroinitializer, %struct.huffcodetab { i32 2, i32 0, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @t1HB, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @t1l, i32 0, i32 0) }, %struct.huffcodetab { i32 3, i32 0, i32* getelementptr inbounds ([35 x i32], [35 x i32]* @t2HB, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @t2l, i32 0, i32 0) }, %struct.huffcodetab { i32 3, i32 0, i32* getelementptr inbounds ([35 x i32], [35 x i32]* @t3HB, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @t3l, i32 0, i32 0) }, %struct.huffcodetab zeroinitializer, %struct.huffcodetab { i32 4, i32 0, i32* getelementptr inbounds ([52 x i32], [52 x i32]* @t5HB, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @t5l, i32 0, i32 0) }, %struct.huffcodetab { i32 4, i32 0, i32* getelementptr inbounds ([52 x i32], [52 x i32]* @t6HB, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @t6l, i32 0, i32 0) }, %struct.huffcodetab { i32 6, i32 0, i32* getelementptr inbounds ([86 x i32], [86 x i32]* @t7HB, i32 0, i32 0), i8* getelementptr inbounds ([86 x i8], [86 x i8]* @t7l, i32 0, i32 0) }, %struct.huffcodetab { i32 6, i32 0, i32* getelementptr inbounds ([86 x i32], [86 x i32]* @t8HB, i32 0, i32 0), i8* getelementptr inbounds ([86 x i8], [86 x i8]* @t8l, i32 0, i32 0) }, %struct.huffcodetab { i32 6, i32 0, i32* getelementptr inbounds ([86 x i32], [86 x i32]* @t9HB, i32 0, i32 0), i8* getelementptr inbounds ([86 x i8], [86 x i8]* @t9l, i32 0, i32 0) }, %struct.huffcodetab { i32 8, i32 0, i32* getelementptr inbounds ([120 x i32], [120 x i32]* @t10HB, i32 0, i32 0), i8* getelementptr inbounds ([120 x i8], [120 x i8]* @t10l, i32 0, i32 0) }, %struct.huffcodetab { i32 8, i32 0, i32* getelementptr inbounds ([120 x i32], [120 x i32]* @t11HB, i32 0, i32 0), i8* getelementptr inbounds ([120 x i8], [120 x i8]* @t11l, i32 0, i32 0) }, %struct.huffcodetab { i32 8, i32 0, i32* getelementptr inbounds ([120 x i32], [120 x i32]* @t12HB, i32 0, i32 0), i8* getelementptr inbounds ([120 x i8], [120 x i8]* @t12l, i32 0, i32 0) }, %struct.huffcodetab { i32 16, i32 0, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t13HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t13l, i32 0, i32 0) }, %struct.huffcodetab zeroinitializer, %struct.huffcodetab { i32 16, i32 0, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t15HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t15l, i32 0, i32 0) }, %struct.huffcodetab { i32 1, i32 1, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 2, i32 3, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 3, i32 7, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 4, i32 15, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 6, i32 63, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 8, i32 255, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 10, i32 1023, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 13, i32 8191, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 4, i32 15, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 5, i32 31, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 6, i32 63, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 7, i32 127, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 8, i32 255, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 9, i32 511, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 11, i32 2047, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 13, i32 8191, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 0, i32 0, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @t32HB, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @t32l, i32 0, i32 0) }, %struct.huffcodetab { i32 0, i32 0, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @t33HB, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @t33l, i32 0, i32 0) }], align 4
@t1HB = internal global [18 x i32] [i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0], align 4
@t1l = internal global [18 x i8] c"\01\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\03", align 1
@t2HB = internal global [35 x i32] [i32 1, i32 2, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 2, i32 0], align 4
@t2l = internal global [35 x i8] c"\01\03\06\00\00\00\00\00\00\00\00\00\00\00\00\00\03\03\05\00\00\00\00\00\00\00\00\00\00\00\00\00\05\05\06", align 1
@t3HB = internal global [35 x i32] [i32 3, i32 2, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 2, i32 0], align 4
@t3l = internal global [35 x i8] c"\02\02\06\00\00\00\00\00\00\00\00\00\00\00\00\00\03\02\05\00\00\00\00\00\00\00\00\00\00\00\00\00\05\05\06", align 1
@t5HB = internal global [52 x i32] [i32 1, i32 2, i32 6, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 1, i32 4, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 5, i32 7, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i32 1, i32 1, i32 0], align 4
@t5l = internal global [52 x i8] c"\01\03\06\07\00\00\00\00\00\00\00\00\00\00\00\00\03\03\06\07\00\00\00\00\00\00\00\00\00\00\00\00\06\06\07\08\00\00\00\00\00\00\00\00\00\00\00\00\07\06\07\08", align 1
@t6HB = internal global [52 x i32] [i32 7, i32 3, i32 5, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i32 2, i32 3, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 4, i32 4, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 3, i32 2, i32 0], align 4
@t6l = internal global [52 x i8] c"\03\03\05\07\00\00\00\00\00\00\00\00\00\00\00\00\03\02\04\05\00\00\00\00\00\00\00\00\00\00\00\00\04\04\05\06\00\00\00\00\00\00\00\00\00\00\00\00\06\05\06\07", align 1
@t7HB = internal global [86 x i32] [i32 1, i32 2, i32 10, i32 19, i32 16, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 3, i32 7, i32 10, i32 5, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 11, i32 4, i32 13, i32 17, i32 8, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 12, i32 11, i32 18, i32 15, i32 11, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 6, i32 9, i32 14, i32 3, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i32 4, i32 5, i32 3, i32 2, i32 0], align 4
@t7l = internal global [86 x i8] c"\01\03\06\08\08\09\00\00\00\00\00\00\00\00\00\00\03\04\06\07\07\08\00\00\00\00\00\00\00\00\00\00\06\05\07\08\08\09\00\00\00\00\00\00\00\00\00\00\07\07\08\09\09\09\00\00\00\00\00\00\00\00\00\00\07\07\08\09\09\0A\00\00\00\00\00\00\00\00\00\00\08\08\09\0A\0A\0A", align 1
@t8HB = internal global [86 x i32] [i32 3, i32 4, i32 6, i32 18, i32 12, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 1, i32 2, i32 16, i32 9, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 3, i32 5, i32 14, i32 7, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 19, i32 17, i32 15, i32 13, i32 10, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 13, i32 5, i32 8, i32 11, i32 5, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 12, i32 4, i32 4, i32 1, i32 1, i32 0], align 4
@t8l = internal global [86 x i8] c"\02\03\06\08\08\09\00\00\00\00\00\00\00\00\00\00\03\02\04\08\08\08\00\00\00\00\00\00\00\00\00\00\06\04\06\08\08\09\00\00\00\00\00\00\00\00\00\00\08\08\08\09\09\0A\00\00\00\00\00\00\00\00\00\00\08\07\08\09\0A\0A\00\00\00\00\00\00\00\00\00\00\09\08\09\09\0B\0B", align 1
@t9HB = internal global [86 x i32] [i32 7, i32 5, i32 9, i32 14, i32 15, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i32 4, i32 5, i32 5, i32 6, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 6, i32 8, i32 8, i32 8, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 15, i32 6, i32 9, i32 10, i32 5, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 11, i32 7, i32 9, i32 6, i32 4, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 14, i32 4, i32 6, i32 2, i32 6, i32 0], align 4
@t9l = internal global [86 x i8] c"\03\03\05\06\08\09\00\00\00\00\00\00\00\00\00\00\03\03\04\05\06\08\00\00\00\00\00\00\00\00\00\00\04\04\05\06\07\08\00\00\00\00\00\00\00\00\00\00\06\05\06\07\07\08\00\00\00\00\00\00\00\00\00\00\07\06\07\07\08\09\00\00\00\00\00\00\00\00\00\00\08\07\08\08\09\09", align 1
@t10HB = internal global [120 x i32] [i32 1, i32 2, i32 10, i32 23, i32 35, i32 30, i32 12, i32 17, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 3, i32 8, i32 12, i32 18, i32 21, i32 12, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 11, i32 9, i32 15, i32 21, i32 32, i32 40, i32 19, i32 6, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 14, i32 13, i32 22, i32 34, i32 46, i32 23, i32 18, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 19, i32 33, i32 47, i32 27, i32 22, i32 9, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 31, i32 22, i32 41, i32 26, i32 21, i32 20, i32 5, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 14, i32 13, i32 10, i32 11, i32 16, i32 6, i32 5, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 9, i32 8, i32 7, i32 8, i32 4, i32 4, i32 2, i32 0], align 4
@t10l = internal global [120 x i8] c"\01\03\06\08\09\09\09\0A\00\00\00\00\00\00\00\00\03\04\06\07\08\09\08\08\00\00\00\00\00\00\00\00\06\06\07\08\09\0A\09\09\00\00\00\00\00\00\00\00\07\07\08\09\0A\0A\09\0A\00\00\00\00\00\00\00\00\08\08\09\0A\0A\0A\0A\0A\00\00\00\00\00\00\00\00\09\09\0A\0A\0B\0B\0A\0B\00\00\00\00\00\00\00\00\08\08\09\0A\0A\0A\0B\0B\00\00\00\00\00\00\00\00\09\08\09\0A\0A\0B\0B\0B", align 1
@t11HB = internal global [120 x i32] [i32 3, i32 4, i32 10, i32 24, i32 34, i32 33, i32 21, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 3, i32 4, i32 10, i32 32, i32 17, i32 11, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 11, i32 7, i32 13, i32 18, i32 30, i32 31, i32 20, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 25, i32 11, i32 19, i32 59, i32 27, i32 18, i32 12, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 35, i32 33, i32 31, i32 58, i32 30, i32 16, i32 7, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 28, i32 26, i32 32, i32 19, i32 17, i32 15, i32 8, i32 14, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 14, i32 12, i32 9, i32 13, i32 14, i32 9, i32 4, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 11, i32 4, i32 6, i32 6, i32 6, i32 3, i32 2, i32 0], align 4
@t11l = internal global [120 x i8] c"\02\03\05\07\08\09\08\09\00\00\00\00\00\00\00\00\03\03\04\06\08\08\07\08\00\00\00\00\00\00\00\00\05\05\06\07\08\09\08\08\00\00\00\00\00\00\00\00\07\06\07\09\08\0A\08\09\00\00\00\00\00\00\00\00\08\08\08\09\09\0A\09\0A\00\00\00\00\00\00\00\00\08\08\09\0A\0A\0B\0A\0B\00\00\00\00\00\00\00\00\08\07\07\08\09\0A\0A\0A\00\00\00\00\00\00\00\00\08\07\08\09\0A\0A\0A\0A", align 1
@t12HB = internal global [120 x i32] [i32 9, i32 6, i32 16, i32 33, i32 41, i32 39, i32 38, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 5, i32 6, i32 9, i32 23, i32 16, i32 26, i32 11, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 17, i32 7, i32 11, i32 14, i32 21, i32 30, i32 10, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 17, i32 10, i32 15, i32 12, i32 18, i32 28, i32 14, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32, i32 13, i32 22, i32 19, i32 18, i32 16, i32 9, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 40, i32 17, i32 31, i32 29, i32 17, i32 13, i32 4, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 27, i32 12, i32 11, i32 15, i32 10, i32 7, i32 4, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 27, i32 12, i32 8, i32 12, i32 6, i32 3, i32 1, i32 0], align 4
@t12l = internal global [120 x i8] c"\04\03\05\07\08\09\09\09\00\00\00\00\00\00\00\00\03\03\04\05\07\07\08\08\00\00\00\00\00\00\00\00\05\04\05\06\07\08\07\08\00\00\00\00\00\00\00\00\06\05\06\06\07\08\08\08\00\00\00\00\00\00\00\00\07\06\07\07\08\08\08\09\00\00\00\00\00\00\00\00\08\07\08\08\08\09\08\09\00\00\00\00\00\00\00\00\08\07\07\08\08\09\09\0A\00\00\00\00\00\00\00\00\09\08\08\09\09\09\09\0A", align 1
@t13HB = internal global [256 x i32] [i32 1, i32 5, i32 14, i32 21, i32 34, i32 51, i32 46, i32 71, i32 42, i32 52, i32 68, i32 52, i32 67, i32 44, i32 43, i32 19, i32 3, i32 4, i32 12, i32 19, i32 31, i32 26, i32 44, i32 33, i32 31, i32 24, i32 32, i32 24, i32 31, i32 35, i32 22, i32 14, i32 15, i32 13, i32 23, i32 36, i32 59, i32 49, i32 77, i32 65, i32 29, i32 40, i32 30, i32 40, i32 27, i32 33, i32 42, i32 16, i32 22, i32 20, i32 37, i32 61, i32 56, i32 79, i32 73, i32 64, i32 43, i32 76, i32 56, i32 37, i32 26, i32 31, i32 25, i32 14, i32 35, i32 16, i32 60, i32 57, i32 97, i32 75, i32 114, i32 91, i32 54, i32 73, i32 55, i32 41, i32 48, i32 53, i32 23, i32 24, i32 58, i32 27, i32 50, i32 96, i32 76, i32 70, i32 93, i32 84, i32 77, i32 58, i32 79, i32 29, i32 74, i32 49, i32 41, i32 17, i32 47, i32 45, i32 78, i32 74, i32 115, i32 94, i32 90, i32 79, i32 69, i32 83, i32 71, i32 50, i32 59, i32 38, i32 36, i32 15, i32 72, i32 34, i32 56, i32 95, i32 92, i32 85, i32 91, i32 90, i32 86, i32 73, i32 77, i32 65, i32 51, i32 44, i32 43, i32 42, i32 43, i32 20, i32 30, i32 44, i32 55, i32 78, i32 72, i32 87, i32 78, i32 61, i32 46, i32 54, i32 37, i32 30, i32 20, i32 16, i32 53, i32 25, i32 41, i32 37, i32 44, i32 59, i32 54, i32 81, i32 66, i32 76, i32 57, i32 54, i32 37, i32 18, i32 39, i32 11, i32 35, i32 33, i32 31, i32 57, i32 42, i32 82, i32 72, i32 80, i32 47, i32 58, i32 55, i32 21, i32 22, i32 26, i32 38, i32 22, i32 53, i32 25, i32 23, i32 38, i32 70, i32 60, i32 51, i32 36, i32 55, i32 26, i32 34, i32 23, i32 27, i32 14, i32 9, i32 7, i32 34, i32 32, i32 28, i32 39, i32 49, i32 75, i32 30, i32 52, i32 48, i32 40, i32 52, i32 28, i32 18, i32 17, i32 9, i32 5, i32 45, i32 21, i32 34, i32 64, i32 56, i32 50, i32 49, i32 45, i32 31, i32 19, i32 12, i32 15, i32 10, i32 7, i32 6, i32 3, i32 48, i32 23, i32 20, i32 39, i32 36, i32 35, i32 53, i32 21, i32 16, i32 23, i32 13, i32 10, i32 6, i32 1, i32 4, i32 2, i32 16, i32 15, i32 17, i32 27, i32 25, i32 20, i32 29, i32 11, i32 17, i32 12, i32 16, i32 8, i32 1, i32 1, i32 0, i32 1], align 4
@t13l = internal global [256 x i8] c"\01\04\06\07\08\09\09\0A\09\0A\0B\0B\0C\0C\0D\0D\03\04\06\07\08\08\09\09\09\09\0A\0A\0B\0C\0C\0C\06\06\07\08\09\09\0A\0A\09\0A\0A\0B\0B\0C\0D\0D\07\07\08\09\09\0A\0A\0A\0A\0B\0B\0B\0B\0C\0D\0D\08\07\09\09\0A\0A\0B\0B\0A\0B\0B\0C\0C\0D\0D\0E\09\08\09\0A\0A\0A\0B\0B\0B\0B\0C\0B\0D\0D\0E\0E\09\09\0A\0A\0B\0B\0B\0B\0B\0C\0C\0C\0D\0D\0E\0E\0A\09\0A\0B\0B\0B\0C\0C\0C\0C\0D\0D\0D\0E\10\10\09\08\09\0A\0A\0B\0B\0C\0C\0C\0C\0D\0D\0E\0F\0F\0A\09\0A\0A\0B\0B\0B\0D\0C\0D\0D\0E\0E\0E\10\0F\0A\0A\0A\0B\0B\0C\0C\0D\0C\0D\0E\0D\0E\0F\10\11\0B\0A\0A\0B\0C\0C\0C\0C\0D\0D\0D\0E\0F\0F\0F\10\0B\0B\0B\0C\0C\0D\0C\0D\0E\0E\0F\0F\0F\10\10\10\0C\0B\0C\0D\0D\0D\0E\0E\0E\0E\0E\0F\10\0F\10\10\0D\0C\0C\0D\0D\0D\0F\0E\0E\11\0F\0F\0F\11\10\10\0C\0C\0D\0E\0E\0E\0F\0E\0F\0F\10\10\13\12\13\10", align 1
@t15HB = internal global [256 x i32] [i32 7, i32 12, i32 18, i32 53, i32 47, i32 76, i32 124, i32 108, i32 89, i32 123, i32 108, i32 119, i32 107, i32 81, i32 122, i32 63, i32 13, i32 5, i32 16, i32 27, i32 46, i32 36, i32 61, i32 51, i32 42, i32 70, i32 52, i32 83, i32 65, i32 41, i32 59, i32 36, i32 19, i32 17, i32 15, i32 24, i32 41, i32 34, i32 59, i32 48, i32 40, i32 64, i32 50, i32 78, i32 62, i32 80, i32 56, i32 33, i32 29, i32 28, i32 25, i32 43, i32 39, i32 63, i32 55, i32 93, i32 76, i32 59, i32 93, i32 72, i32 54, i32 75, i32 50, i32 29, i32 52, i32 22, i32 42, i32 40, i32 67, i32 57, i32 95, i32 79, i32 72, i32 57, i32 89, i32 69, i32 49, i32 66, i32 46, i32 27, i32 77, i32 37, i32 35, i32 66, i32 58, i32 52, i32 91, i32 74, i32 62, i32 48, i32 79, i32 63, i32 90, i32 62, i32 40, i32 38, i32 125, i32 32, i32 60, i32 56, i32 50, i32 92, i32 78, i32 65, i32 55, i32 87, i32 71, i32 51, i32 73, i32 51, i32 70, i32 30, i32 109, i32 53, i32 49, i32 94, i32 88, i32 75, i32 66, i32 122, i32 91, i32 73, i32 56, i32 42, i32 64, i32 44, i32 21, i32 25, i32 90, i32 43, i32 41, i32 77, i32 73, i32 63, i32 56, i32 92, i32 77, i32 66, i32 47, i32 67, i32 48, i32 53, i32 36, i32 20, i32 71, i32 34, i32 67, i32 60, i32 58, i32 49, i32 88, i32 76, i32 67, i32 106, i32 71, i32 54, i32 38, i32 39, i32 23, i32 15, i32 109, i32 53, i32 51, i32 47, i32 90, i32 82, i32 58, i32 57, i32 48, i32 72, i32 57, i32 41, i32 23, i32 27, i32 62, i32 9, i32 86, i32 42, i32 40, i32 37, i32 70, i32 64, i32 52, i32 43, i32 70, i32 55, i32 42, i32 25, i32 29, i32 18, i32 11, i32 11, i32 118, i32 68, i32 30, i32 55, i32 50, i32 46, i32 74, i32 65, i32 49, i32 39, i32 24, i32 16, i32 22, i32 13, i32 14, i32 7, i32 91, i32 44, i32 39, i32 38, i32 34, i32 63, i32 52, i32 45, i32 31, i32 52, i32 28, i32 19, i32 14, i32 8, i32 9, i32 3, i32 123, i32 60, i32 58, i32 53, i32 47, i32 43, i32 32, i32 22, i32 37, i32 24, i32 17, i32 12, i32 15, i32 10, i32 2, i32 1, i32 71, i32 37, i32 34, i32 30, i32 28, i32 20, i32 17, i32 26, i32 21, i32 16, i32 10, i32 6, i32 8, i32 6, i32 2, i32 0], align 4
@t15l = internal global [256 x i8] calign 1
@t16HB = internal global [256 x i32] [i32 1, i32 5, i32 14, i32 44, i32 74, i32 63, i32 110, i32 93, i32 172, i32 149, i32 138, i32 242, i32 225, i32 195, i32 376, i32 17, i32 3, i32 4, i32 12, i32 20, i32 35, i32 62, i32 53, i32 47, i32 83, i32 75, i32 68, i32 119, i32 201, i32 107, i32 207, i32 9, i32 15, i32 13, i32 23, i32 38, i32 67, i32 58, i32 103, i32 90, i32 161, i32 72, i32 127, i32 117, i32 110, i32 209, i32 206, i32 16, i32 45, i32 21, i32 39, i32 69, i32 64, i32 114, i32 99, i32 87, i32 158, i32 140, i32 252, i32 212, i32 199, i32 387, i32 365, i32 26, i32 75, i32 36, i32 68, i32 65, i32 115, i32 101, i32 179, i32 164, i32 155, i32 264, i32 246, i32 226, i32 395, i32 382, i32 362, i32 9, i32 66, i32 30, i32 59, i32 56, i32 102, i32 185, i32 173, i32 265, i32 142, i32 253, i32 232, i32 400, i32 388, i32 378, i32 445, i32 16, i32 111, i32 54, i32 52, i32 100, i32 184, i32 178, i32 160, i32 133, i32 257, i32 244, i32 228, i32 217, i32 385, i32 366, i32 715, i32 10, i32 98, i32 48, i32 91, i32 88, i32 165, i32 157, i32 148, i32 261, i32 248, i32 407, i32 397, i32 372, i32 380, i32 889, i32 884, i32 8, i32 85, i32 84, i32 81, i32 159, i32 156, i32 143, i32 260, i32 249, i32 427, i32 401, i32 392, i32 383, i32 727, i32 713, i32 708, i32 7, i32 154, i32 76, i32 73, i32 141, i32 131, i32 256, i32 245, i32 426, i32 406, i32 394, i32 384, i32 735, i32 359, i32 710, i32 352, i32 11, i32 139, i32 129, i32 67, i32 125, i32 247, i32 233, i32 229, i32 219, i32 393, i32 743, i32 737, i32 720, i32 885, i32 882, i32 439, i32 4, i32 243, i32 120, i32 118, i32 115, i32 227, i32 223, i32 396, i32 746, i32 742, i32 736, i32 721, i32 712, i32 706, i32 223, i32 436, i32 6, i32 202, i32 224, i32 222, i32 218, i32 216, i32 389, i32 386, i32 381, i32 364, i32 888, i32 443, i32 707, i32 440, i32 437, i32 1728, i32 4, i32 747, i32 211, i32 210, i32 208, i32 370, i32 379, i32 734, i32 723, i32 714, i32 1735, i32 883, i32 877, i32 876, i32 3459, i32 865, i32 2, i32 377, i32 369, i32 102, i32 187, i32 726, i32 722, i32 358, i32 711, i32 709, i32 866, i32 1734, i32 871, i32 3458, i32 870, i32 434, i32 0, i32 12, i32 10, i32 7, i32 11, i32 10, i32 17, i32 11, i32 9, i32 13, i32 12, i32 10, i32 7, i32 5, i32 3, i32 1, i32 3], align 4
@t16l = internal global [256 x i8] c"\01\04\06\08\09\09\0A\0A\0B\0B\0B\0C\0C\0C\0D\09\03\04\06\07\08\09\09\09\0A\0A\0A\0B\0C\0B\0C\08\06\06\07\08\09\09\0A\0A\0B\0A\0B\0B\0B\0C\0C\09\08\07\08\09\09\0A\0A\0A\0B\0B\0C\0C\0C\0D\0D\0A\09\08\09\09\0A\0A\0B\0B\0B\0C\0C\0C\0D\0D\0D\09\09\08\09\09\0A\0B\0B\0C\0B\0C\0C\0D\0D\0D\0E\0A\0A\09\09\0A\0B\0B\0B\0B\0C\0C\0C\0C\0D\0D\0E\0A\0A\09\0A\0A\0B\0B\0B\0C\0C\0D\0D\0D\0D\0F\0F\0A\0A\0A\0A\0B\0B\0B\0C\0C\0D\0D\0D\0D\0E\0E\0E\0A\0B\0A\0A\0B\0B\0C\0C\0D\0D\0D\0D\0E\0D\0E\0D\0B\0B\0B\0A\0B\0C\0C\0C\0C\0D\0E\0E\0E\0F\0F\0E\0A\0C\0B\0B\0B\0C\0C\0D\0E\0E\0E\0E\0E\0E\0D\0E\0B\0C\0C\0C\0C\0C\0D\0D\0D\0D\0F\0E\0E\0E\0E\10\0B\0E\0C\0C\0C\0D\0D\0E\0E\0E\10\0F\0F\0F\11\0F\0B\0D\0D\0B\0C\0E\0E\0D\0E\0E\0F\10\0F\11\0F\0E\0B\09\08\08\09\09\0A\0A\0A\0B\0B\0B\0B\0B\0B\0B\08", align 1
@t24HB = internal global [256 x i32] [i32 15, i32 13, i32 46, i32 80, i32 146, i32 262, i32 248, i32 434, i32 426, i32 669, i32 653, i32 649, i32 621, i32 517, i32 1032, i32 88, i32 14, i32 12, i32 21, i32 38, i32 71, i32 130, i32 122, i32 216, i32 209, i32 198, i32 327, i32 345, i32 319, i32 297, i32 279, i32 42, i32 47, i32 22, i32 41, i32 74, i32 68, i32 128, i32 120, i32 221, i32 207, i32 194, i32 182, i32 340, i32 315, i32 295, i32 541, i32 18, i32 81, i32 39, i32 75, i32 70, i32 134, i32 125, i32 116, i32 220, i32 204, i32 190, i32 178, i32 325, i32 311, i32 293, i32 271, i32 16, i32 147, i32 72, i32 69, i32 135, i32 127, i32 118, i32 112, i32 210, i32 200, i32 188, i32 352, i32 323, i32 306, i32 285, i32 540, i32 14, i32 263, i32 66, i32 129, i32 126, i32 119, i32 114, i32 214, i32 202, i32 192, i32 180, i32 341, i32 317, i32 301, i32 281, i32 262, i32 12, i32 249, i32 123, i32 121, i32 117, i32 113, i32 215, i32 206, i32 195, i32 185, i32 347, i32 330, i32 308, i32 291, i32 272, i32 520, i32 10, i32 435, i32 115, i32 111, i32 109, i32 211, i32 203, i32 196, i32 187, i32 353, i32 332, i32 313, i32 298, i32 283, i32 531, i32 381, i32 17, i32 427, i32 212, i32 208, i32 205, i32 201, i32 193, i32 186, i32 177, i32 169, i32 320, i32 303, i32 286, i32 268, i32 514, i32 377, i32 16, i32 335, i32 199, i32 197, i32 191, i32 189, i32 181, i32 174, i32 333, i32 321, i32 305, i32 289, i32 275, i32 521, i32 379, i32 371, i32 11, i32 668, i32 184, i32 183, i32 179, i32 175, i32 344, i32 331, i32 314, i32 304, i32 290, i32 277, i32 530, i32 383, i32 373, i32 366, i32 10, i32 652, i32 346, i32 171, i32 168, i32 164, i32 318, i32 309, i32 299, i32 287, i32 276, i32 263, i32 513, i32 375, i32 368, i32 362, i32 6, i32 648, i32 322, i32 316, i32 312, i32 307, i32 302, i32 292, i32 284, i32 269, i32 261, i32 512, i32 376, i32 370, i32 364, i32 359, i32 4, i32 620, i32 300, i32 296, i32 294, i32 288, i32 282, i32 273, i32 266, i32 515, i32 380, i32 374, i32 369, i32 365, i32 361, i32 357, i32 2, i32 1033, i32 280, i32 278, i32 274, i32 267, i32 264, i32 259, i32 382, i32 378, i32 372, i32 367, i32 363, i32 360, i32 358, i32 356, i32 0, i32 43, i32 20, i32 19, i32 17, i32 15, i32 13, i32 11, i32 9, i32 7, i32 6, i32 4, i32 7, i32 5, i32 3, i32 1, i32 3], align 4
@t24l = internal global [256 x i8] calign 1
@t32HB = internal global [16 x i32] [i32 1, i32 5, i32 4, i32 5, i32 6, i32 5, i32 4, i32 4, i32 7, i32 3, i32 6, i32 0, i32 7, i32 2, i32 3, i32 1], align 4
@t32l = internal global [16 x i8] c"\01\04\04\05\04\06\05\06\04\05\05\06\05\06\06\06", align 1
@t33HB = internal global [16 x i32] [i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0], align 4
@t33l = internal global [16 x i8] c"\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04", align 1
@psy_data = global [4926 x double] [double 4.800000e+04, double 6.100000e+01, double 0.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 9.700000e-01, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 7.550000e-01, double 4.690000e-01, double 2.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 7.380000e-01, double 9.380000e-01, double 3.000000e+00, double 1.000000e+00, double 2.450000e+01, double 9.040000e-01, double 7.300000e-01, double 1.406000e+00, double 4.000000e+00, double 1.000000e+00, double 2.450000e+01, double 9.040000e-01, double 7.240000e-01, double 1.875000e+00, double 5.000000e+00, double 1.000000e+00, double 2.000000e+01, double 9.000000e-02, double 7.230000e-01, double 2.344000e+00, double 6.000000e+00, double 1.000000e+00, double 2.000000e+01, double 9.000000e-02, double 7.230000e-01, double 2.813000e+00, double 7.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 7.230000e-01, double 3.281000e+00, double 8.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 7.180000e-01, double 3.750000e+00, double 9.000000e+00, double 1.000000e+00, double 2.000000e+01, double 9.000000e-03, double 6.900000e-01, double 4.199000e+00, double 1.000000e+01, double 1.000000e+00, double 2.000000e+01, double 9.000000e-03, double 6.600000e-01, double 4.625000e+00, double 1.100000e+01, double 1.000000e+00, double 1.800000e+01, double 9.000000e-03, double 6.410000e-01, double 5.047000e+00, double 1.200000e+01, double 1.000000e+00, double 1.800000e+01, double 9.000000e-03, double 6.000000e-01, double 5.438000e+00, double 1.300000e+01, double 1.000000e+00, double 1.800000e+01, double 9.000000e-03, double 5.840000e-01, double 5.828000e+00, double 1.400000e+01, double 1.000000e+00, double 1.200000e+01, double 9.000000e-03, double 5.320000e-01, double 6.188000e+00, double 1.500000e+01, double 1.000000e+00, double 1.200000e+01, double 9.000000e-03, double 5.370000e-01, double 6.522000e+00, double 1.600000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 8.570000e-01, double 7.174000e+00, double 1.700000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 8.580000e-01, double 7.801000e+00, double 1.800000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 8.530000e-01, double 8.402000e+00, double 1.900000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 8.240000e-01, double 8.966000e+00, double 2.000000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 7.780000e-01, double 9.484000e+00, double 2.100000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 7.400000e-01, double 9.966000e+00, double 2.200000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 7.090000e-01, double 1.042600e+01, double 2.300000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.760000e-01, double 1.086600e+01, double 2.400000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.320000e-01, double 1.127900e+01, double 2.500000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.920000e-01, double 1.166900e+01, double 2.600000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.530000e-01, double 1.204200e+01, double 2.700000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.100000e-01, double 1.238600e+01, double 2.800000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.130000e-01, double 1.272100e+01, double 2.900000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.080000e-01, double 1.311500e+01, double 3.000000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.730000e-01, double 1.356200e+01, double 3.100000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.370000e-01, double 1.398400e+01, double 3.200000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.860000e-01, double 1.437100e+01, double 3.300000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.710000e-01, double 1.474100e+01, double 3.400000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 6.160000e-01, double 1.514000e+01, double 3.500000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 6.400000e-01, double 1.556300e+01, double 3.600000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.980000e-01, double 1.596200e+01, double 3.700000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.380000e-01, double 1.632400e+01, double 3.800000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.120000e-01, double 1.666500e+01, double 3.900000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.280000e-01, double 1.702000e+01, double 4.000000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.170000e-01, double 1.737300e+01, double 4.100000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 4.930000e-01, double 1.770800e+01, double 4.200000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 4.990000e-01, double 1.804500e+01, double 4.300000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 5.250000e-01, double 1.839800e+01, double 4.400000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 5.410000e-01, double 1.876200e+01, double 4.500000e+01, double 8.000000e+00, double 0.000000e+00, double 7.200000e-02, double 5.280000e-01, double 1.912000e+01, double 4.600000e+01, double 8.000000e+00, double 0.000000e+00, double 7.200000e-02, double 5.100000e-01, double 1.946600e+01, double 4.700000e+01, double 8.000000e+00, double 0.000000e+00, double 7.200000e-02, double 5.060000e-01, double 1.980700e+01, double 4.800000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 5.250000e-01, double 2.015900e+01, double 4.900000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 5.360000e-01, double 2.052200e+01, double 5.000000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 5.180000e-01, double 2.087400e+01, double 5.100000e+01, double 1.300000e+01, double 0.000000e+00, double 3.720000e-01, double 5.010000e-01, double 2.121400e+01, double 5.200000e+01, double 1.300000e+01, double 0.000000e+00, double 3.720000e-01, double 4.970000e-01, double 2.155300e+01, double 5.300000e+01, double 1.400000e+01, double 0.000000e+00, double 4.000000e-01, double 4.970000e-01, double 2.189200e+01, double 5.400000e+01, double 1.800000e+01, double 0.000000e+00, double 1.627000e+00, double 4.950000e-01, double 2.223100e+01, double 5.500000e+01, double 1.800000e+01, double 0.000000e+00, double 1.627000e+00, double 4.940000e-01, double 2.256900e+01, double 5.600000e+01, double 2.000000e+01, double 0.000000e+00, double 1.808000e+00, double 4.970000e-01, double 2.290900e+01, double 5.700000e+01, double 2.500000e+01, double 0.000000e+00, double 2.260700e+01, double 4.940000e-01, double 2.324800e+01, double 5.800000e+01, double 2.500000e+01, double 0.000000e+00, double 2.260700e+01, double 4.870000e-01, double 2.358300e+01, double 5.900000e+01, double 3.500000e+01, double 0.000000e+00, double 3.165000e+01, double 4.830000e-01, double 2.391500e+01, double 6.000000e+01, double 6.700000e+01, double 0.000000e+00, double 6.058670e+02, double 4.820000e-01, double 2.424600e+01, double 6.100000e+01, double 6.700000e+01, double 0.000000e+00, double 6.058670e+02, double 5.240000e-01, double 2.457600e+01, double 4.410000e+04, double 6.200000e+01, double 0.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 9.510000e-01, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 7.000000e-01, double 4.310000e-01, double 2.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 6.810000e-01, double 8.610000e-01, double 3.000000e+00, double 1.000000e+00, double 2.450000e+01, double 9.040000e-01, double 6.750000e-01, double 1.292000e+00, double 4.000000e+00, double 1.000000e+00, double 2.450000e+01, double 9.040000e-01, double 6.670000e-01, double 1.723000e+00, double 5.000000e+00, double 1.000000e+00, double 2.000000e+01, double 9.000000e-02, double 6.650000e-01, double 2.153000e+00, double 6.000000e+00, double 1.000000e+00, double 2.000000e+01, double 9.000000e-02, double 6.640000e-01, double 2.584000e+00, double 7.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 6.640000e-01, double 3.015000e+00, double 8.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 6.640000e-01, double 3.445000e+00, double 9.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 6.550000e-01, double 3.876000e+00, double 1.000000e+01, double 1.000000e+00, double 2.000000e+01, double 9.000000e-03, double 6.160000e-01, double 4.279000e+00, double 1.100000e+01, double 1.000000e+00, double 2.000000e+01, double 9.000000e-03, double 5.970000e-01, double 4.670000e+00, double 1.200000e+01, double 1.000000e+00, double 1.800000e+01, double 9.000000e-03, double 5.780000e-01, double 5.057000e+00, double 1.300000e+01, double 1.000000e+00, double 1.800000e+01, double 9.000000e-03, double 5.410000e-01, double 5.416000e+00, double 1.400000e+01, double 1.000000e+00, double 1.800000e+01, double 9.000000e-03, double 5.750000e-01, double 5.774000e+00, double 1.500000e+01, double 2.000000e+00, double 1.200000e+01, double 1.800000e-02, double 8.560000e-01, double 6.422000e+00, double 1.600000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 8.460000e-01, double 7.026000e+00, double 1.700000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 8.400000e-01, double 7.609000e+00, double 1.800000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 8.220000e-01, double 8.168000e+00, double 1.900000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 8.000000e-01, double 8.710000e+00, double 2.000000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 7.530000e-01, double 9.207000e+00, double 2.100000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 7.040000e-01, double 9.662000e+00, double 2.200000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.740000e-01, double 1.009900e+01, double 2.300000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.400000e-01, double 1.051500e+01, double 2.400000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.090000e-01, double 1.091700e+01, double 2.500000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.660000e-01, double 1.129300e+01, double 2.600000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.350000e-01, double 1.165200e+01, double 2.700000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.310000e-01, double 1.199700e+01, double 2.800000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.150000e-01, double 1.239400e+01, double 2.900000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.860000e-01, double 1.285000e+01, double 3.000000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.500000e-01, double 1.327700e+01, double 3.100000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.120000e-01, double 1.368100e+01, double 3.200000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.670000e-01, double 1.406200e+01, double 3.300000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.200000e-01, double 1.441100e+01, double 3.400000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.130000e-01, double 1.475100e+01, double 3.500000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.570000e-01, double 1.511900e+01, double 3.600000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.840000e-01, double 1.550800e+01, double 3.700000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.700000e-01, double 1.588300e+01, double 3.800000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.790000e-01, double 1.626300e+01, double 3.900000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.850000e-01, double 1.665400e+01, double 4.000000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.480000e-01, double 1.702000e+01, double 4.100000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.360000e-01, double 1.737400e+01, double 4.200000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.500000e-01, double 1.774400e+01, double 4.300000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 5.320000e-01, double 1.810400e+01, double 4.400000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 5.040000e-01, double 1.844700e+01, double 4.500000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 4.960000e-01, double 1.878200e+01, double 4.600000e+01, double 9.000000e+00, double 0.000000e+00, double 8.100000e-02, double 5.170000e-01, double 1.913000e+01, double 4.700000e+01, double 9.000000e+00, double 0.000000e+00, double 8.100000e-02, double 5.270000e-01, double 1.948700e+01, double 4.800000e+01, double 9.000000e+00, double 0.000000e+00, double 8.100000e-02, double 5.160000e-01, double 1.983800e+01, double 4.900000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 4.970000e-01, double 2.017900e+01, double 5.000000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 4.890000e-01, double 2.051000e+01, double 5.100000e+01, double 1.100000e+01, double 0.000000e+00, double 1.980000e-01, double 5.020000e-01, double 2.085200e+01, double 5.200000e+01, double 1.400000e+01, double 0.000000e+00, double 4.000000e-01, double 5.010000e-01, double 2.119600e+01, double 5.300000e+01, double 1.400000e+01, double 0.000000e+00, double 4.000000e-01, double 4.910000e-01, double 2.153100e+01, double 5.400000e+01, double 1.500000e+01, double 0.000000e+00, double 4.290000e-01, double 4.970000e-01, double 2.187000e+01, double 5.500000e+01, double 2.000000e+01, double 0.000000e+00, double 1.808000e+00, double 5.040000e-01, double 2.221400e+01, double 5.600000e+01, double 2.000000e+01, double 0.000000e+00, double 1.808000e+00, double 5.040000e-01, double 2.255800e+01, double 5.700000e+01, double 2.100000e+01, double 0.000000e+00, double 1.898000e+00, double 4.950000e-01, double 2.289800e+01, double 5.800000e+01, double 2.700000e+01, double 0.000000e+00, double 2.441600e+01, double 4.860000e-01, double 2.323200e+01, double 5.900000e+01, double 2.700000e+01, double 0.000000e+00, double 2.441600e+01, double 4.840000e-01, double 2.356400e+01, double 6.000000e+01, double 3.600000e+01, double 0.000000e+00, double 3.255400e+01, double 4.830000e-01, double 2.389700e+01, double 6.100000e+01, double 7.300000e+01, double 0.000000e+00, double 6.601240e+02, double 4.750000e-01, double 2.422900e+01, double 6.200000e+01, double 1.800000e+01, double 0.000000e+00, double 1.627700e+02, double 5.150000e-01, double 2.444200e+01, double 3.200000e+04, double 5.800000e+01, double 0.000000e+00, double 2.000000e+00, double 2.450000e+01, double 4.532000e+00, double 9.970000e-01, double 3.130000e-01, double 1.000000e+00, double 2.000000e+00, double 2.450000e+01, double 4.532000e+00, double 8.930000e-01, double 9.380000e-01, double 2.000000e+00, double 2.000000e+00, double 2.450000e+01, double 1.809000e+00, double 8.810000e-01, double 1.563000e+00, double 3.000000e+00, double 2.000000e+00, double 2.000000e+01, double 1.810000e-01, double 8.730000e-01, double 2.188000e+00, double 4.000000e+00, double 2.000000e+00, double 2.000000e+01, double 1.810000e-01, double 8.720000e-01, double 2.813000e+00, double 5.000000e+00, double 2.000000e+00, double 2.000000e+01, double 5.700000e-02, double 8.710000e-01, double 3.438000e+00, double 6.000000e+00, double 2.000000e+00, double 2.000000e+01, double 1.800000e-02, double 8.600000e-01, double 4.045000e+00, double 7.000000e+00, double 2.000000e+00, double 2.000000e+01, double 1.800000e-02, double 8.390000e-01, double 4.625000e+00, double 8.000000e+00, double 2.000000e+00, double 1.800000e+01, double 1.800000e-02, double 8.120000e-01, double 5.173000e+00, double 9.000000e+00, double 2.000000e+00, double 1.800000e+01, double 1.800000e-02, double 7.840000e-01, double 5.698000e+00, double 1.000000e+01, double 2.000000e+00, double 1.200000e+01, double 1.800000e-02, double 7.410000e-01, double 6.185000e+00, double 1.100000e+01, double 2.000000e+00, double 1.200000e+01, double 1.800000e-02, double 6.970000e-01, double 6.634000e+00, double 1.200000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 6.740000e-01, double 7.070000e+00, double 1.300000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 6.510000e-01, double 7.492000e+00, double 1.400000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 6.330000e-01, double 7.905000e+00, double 1.500000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 6.110000e-01, double 8.305000e+00, double 1.600000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 5.890000e-01, double 8.695000e+00, double 1.700000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 5.750000e-01, double 9.064000e+00, double 1.800000e+01, double 3.000000e+00, double 3.000000e+00, double 2.700000e-02, double 6.540000e-01, double 9.484000e+00, double 1.900000e+01, double 3.000000e+00, double 3.000000e+00, double 2.700000e-02, double 7.240000e-01, double 9.966000e+00, double 2.000000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 7.010000e-01, double 1.042600e+01, double 2.100000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.730000e-01, double 1.086600e+01, double 2.200000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.310000e-01, double 1.127900e+01, double 2.300000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.920000e-01, double 1.166900e+01, double 2.400000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.530000e-01, double 1.204200e+01, double 2.500000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.100000e-01, double 1.238600e+01, double 2.600000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.060000e-01, double 1.272100e+01, double 2.700000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.620000e-01, double 1.309100e+01, double 2.800000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.980000e-01, double 1.348800e+01, double 2.900000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.890000e-01, double 1.387300e+01, double 3.000000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 6.070000e-01, double 1.426800e+01, double 3.100000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 6.200000e-01, double 1.467900e+01, double 3.200000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.800000e-01, double 1.506700e+01, double 3.300000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.320000e-01, double 1.542400e+01, double 3.400000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.170000e-01, double 1.577100e+01, double 3.500000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.170000e-01, double 1.612000e+01, double 3.600000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.090000e-01, double 1.646600e+01, double 3.700000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.060000e-01, double 1.680700e+01, double 3.800000e+01, double 8.000000e+00, double 0.000000e+00, double 7.200000e-02, double 5.220000e-01, double 1.715800e+01, double 3.900000e+01, double 8.000000e+00, double 0.000000e+00, double 7.200000e-02, double 5.310000e-01, double 1.751800e+01, double 4.000000e+01, double 8.000000e+00, double 0.000000e+00, double 7.200000e-02, double 5.190000e-01, double 1.786900e+01, double 4.100000e+01, double 1.000000e+01, double 0.000000e+00, double 9.000000e-02, double 5.120000e-01, double 1.821500e+01, double 4.200000e+01, double 1.000000e+01, double 0.000000e+00, double 9.000000e-02, double 5.090000e-01, double 1.856300e+01, double 4.300000e+01, double 1.000000e+01, double 0.000000e+00, double 9.000000e-02, double 4.980000e-01, double 1.890200e+01, double 4.400000e+01, double 1.200000e+01, double 0.000000e+00, double 1.090000e-01, double 4.940000e-01, double 1.923900e+01, double 4.500000e+01, double 1.200000e+01, double 0.000000e+00, double 1.090000e-01, double 5.010000e-01, double 1.958000e+01, double 4.600000e+01, double 1.300000e+01, double 0.000000e+00, double 1.180000e-01, double 5.080000e-01, double 1.992500e+01, double 4.700000e+01, double 1.400000e+01, double 0.000000e+00, double 2.520000e-01, double 5.020000e-01, double 2.026900e+01, double 4.800000e+01, double 1.400000e+01, double 0.000000e+00, double 2.520000e-01, double 4.930000e-01, double 2.060600e+01, double 4.900000e+01, double 1.600000e+01, double 0.000000e+00, double 2.880000e-01, double 4.970000e-01, double 2.094400e+01, double 5.000000e+01, double 2.000000e+01, double 0.000000e+00, double 5.720000e-01, double 5.060000e-01, double 2.128800e+01, double 5.100000e+01, double 2.000000e+01, double 0.000000e+00, double 5.720000e-01, double 5.100000e-01, double 2.163500e+01, double 5.200000e+01, double 2.300000e+01, double 0.000000e+00, double 6.580000e-01, double 5.040000e-01, double 2.198000e+01, double 5.300000e+01, double 2.700000e+01, double 0.000000e+00, double 2.441000e+00, double 4.960000e-01, double 2.231900e+01, double 5.400000e+01, double 2.700000e+01, double 0.000000e+00, double 2.441000e+00, double 4.930000e-01, double 2.265600e+01, double 5.500000e+01, double 3.200000e+01, double 0.000000e+00, double 2.893000e+00, double 4.900000e-01, double 2.299300e+01, double 5.600000e+01, double 3.700000e+01, double 0.000000e+00, double 3.345800e+01, double 4.820000e-01, double 2.332600e+01, double 5.700000e+01, double 3.700000e+01, double 0.000000e+00, double 3.345800e+01, double 4.580000e-01, double 2.365600e+01, double 5.800000e+01, double 1.200000e+01, double 0.000000e+00, double 1.085100e+01, double 5.000000e-01, double 2.393700e+01, double 2.400000e+04, double 5.900000e+01, double 0.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x4031D3345F831D56, double 0x3FE650E39FF80286, double 0x3FCE51E6FFA05619, double 1.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x4031D3345F831D56, double 0x3FDD1F206061836C, double 0x3FE6B9A39FD7CC2F, double 2.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FDB9CB86036D507, double 0x3FF2E93260D04F63, double 3.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FDB21719F7F8CA8, double 0x3FFA6A9B9F833D8D, double 4.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FC6D0E700DE29F5, double 0x3FDAC3E65FD7115B, double 0x4000EE3C206CB205, double 5.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FC6D0E700DE29F5, double 0x3FDA576A7FD09AB8, double 0x40049D383F6194C5, double 6.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD9F2393FB4176C, double 0x4008403BBF73C8D0, double 7.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD9949C602EA515, double 0x400BD56B9F605804, double 8.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD93340C075B7A3, double 0x400F5B1C407D739E, double 9.000000e+00, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD8CA76FF995B64, double 0x401167EA3FFA40F9, double 1.000000e+01, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD8595E1FF0E129, double 0x4013192760413351, double 1.100000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD7E01D7FA051CD, double 0x4014C0BCBFB968ED, double 1.200000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD75F3E00382B8D, double 0x40165E3AFFDB4206, double 1.300000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD6D769BF9D7582, double 0x4017F14BA01182DF, double 1.400000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD6511C603B879E, double 0x401979AEFFB2524D, double 1.500000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD5C6D2002C3989, double 0x401AF73B7FDDDBBE, double 1.600000e+01, double 2.000000e+00, double 6.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD545135FD92E85, double 0x401C69DAFFEB5D31, double 1.700000e+01, double 2.000000e+00, double 6.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD5264D9FCE9A8B, double 0x401DD18900444884, double 1.800000e+01, double 2.000000e+00, double 6.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD61DCAC01BFE27, double 0x401F2E51400E8DE2, double 1.900000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD82EDA3FF45925, double 0x402068BBC00A1BB8, double 2.000000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD9635C00060A30, double 0x40215A51400E8DE2, double 2.100000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD90A0AA041FF54, double 0x4022404FFFF29407, double 2.200000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD82ACEC06CED13, double 0x40231B20601CCB3D, double 2.300000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD738B7E0094831, double 0x4023EB37BFDFD466, double 2.400000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD65630A07E31AC, double 0x4024B113800F84D8, double 2.500000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5BD35DFA4AF91, double 0x40256D35A1A27C97, double 2.600000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD601917FEFA468, double 0x40262021C044284E, double 2.700000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6C5CC7F975C4A, double 0x4026E51F81A5870E, double 2.800000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6EB2E7FCDC92A, double 0x4027B9BB7EC6AF7C, double 2.900000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD63CB0E05D2270, double 0x402881097FDB8272, double 3.000000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD56F75808212E2, double 0x40293C1B7FB84704, double 3.100000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD539A4A0779E0B, double 0x4029EBF180E13BF0, double 3.200000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD555EA7F879705, double 0x402AA4D3613B843B, double 3.300000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD5449DBFD528CD, double 0x402B6536BED8EE43, double 3.400000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 3.314417e-01, double 0x402C187980F55DE6, double 3.500000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD52E3D20831381, double 0x402CCF83BE6601BD, double 3.600000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD547508039E5EF, double 0x402D89763FF83D94, double 3.700000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD54A18DFC23F4D, double 0x402E43607F9C9852, double 3.800000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD52C81A02012E7, double 0x402EFCF3DF604D48, double 3.900000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4FA2E604BD653, double 0x402FB406FFCE81D9, double 4.000000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4C5CC9FCDB29D, double 0x403034628027D88C, double 4.100000e+01, double 9.000000e+00, double 0.000000e+00, double 0x3FB488CFDFE12D80, double 0x3FD4B98C804DE588, double 0x40308CDBBFAED719, double 4.200000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD4920F5F77118D, double 0x4030E8209FB2B84F, double 4.300000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD45D369FD7D4C6, double 0x403140F3FF40BD5F, double 4.400000e+01, double 1.100000e+01, double 0.000000e+00, double 0x3FB918FDFFED0219, double 0x3FD43843DF8F0278, double 0x40319711805B0433, double 4.500000e+01, double 1.200000e+01, double 0.000000e+00, double 0x3FBB61152157F20D, double 0x3FD4336F1FBFDB44, double 0x4031EE709FA54C55, double 4.600000e+01, double 1.300000e+01, double 0.000000e+00, double 0x3FBDA92C409D2084, double 0x3FD442AE200E684E, double 0x4032466B20098AC3, double 4.700000e+01, double 1.400000e+01, double 0.000000e+00, double 0x3FBFF1435FE24EFB, double 3.165600e-01, double 0x40329E814006804D, double 4.800000e+01, double 1.500000e+01, double 0.000000e+00, double 0x3FC11CAD3F93BEB9, double 0x3FD4309820143EF4, double 0x4032F65120840406, double 4.900000e+01, double 1.600000e+01, double 0.000000e+00, double 0x3FC240B8C02E0B8A, double 0x3FD411A280593CEE, double 0x40334D8EDF2B7422, double 5.000000e+01, double 1.700000e+01, double 0.000000e+00, double 0x3FC364C440C8585A, double 0x3FD3F1D7FFECF0EB, double 0x4033A3FD80C9BEFB, double 5.100000e+01, double 1.800000e+01, double 0.000000e+00, double 0x3FC488CFDF733A01, double 0x3FD3E8846018E6CE, double 0x4033F969C08DFA29, double 5.200000e+01, double 2.000000e+01, double 0.000000e+00, double 0x3FD6C310E03BD939, double 0x3FD3EF0DA037D494, double 0x40344FC47FF73124, double 5.300000e+01, double 2.100000e+01, double 0.000000e+00, double 0x3FD7E66B5FDB98FF, double 0x3FD3F5B5FF80D426, double 0x4034A6997F986694, double 5.400000e+01, double 2.300000e+01, double 0.000000e+00, double 0x3FDA2D203FF7A2F5, double 0x3FD3E7AF807A7D8E, double 0x4034FD347F638D6E, double 5.500000e+01, double 2.400000e+01, double 0.000000e+00, double 0x3FE5A52AA022DBDE, double 0x3FD3CA0F2061FDD5, double 0x4035533ABFEF6EB8, double 5.600000e+01, double 2.600000e+01, double 0.000000e+00, double 0x3FE772EE1FBEF357, double 3.081128e-01, double 0x4035A816BF5F2600, double 5.700000e+01, double 2.800000e+01, double 0.000000e+00, double 0x3FE940B19FE47B2E, double 0x3FD3D725E0532B3A, double 0x4035FCF7C0965DA5, double 5.800000e+01, double 3.100000e+01, double 0.000000e+00, double 0x40061A5FBFD91E6A, double 0x3FD4EF6BC00EF0AB, double 0x403652814006804D, double 5.900000e+01, double 3.400000e+01, double 0.000000e+00, double 0x40083DF55FBE00AC, double 0x3FDAA117DF9218BE, double 0x4036A917BF396653, double 2.205000e+04, double 5.900000e+01, double 0.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x4031D3345F831D56, double 0x3FE513EF9FFA4AA3, double 0x3FCBDB8CDF882188, double 1.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x4031D3345F831D56, double 0x3FDBAEFAC0613FC7, double 0x3FE4E1CCC0266508, double 2.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FD9ED61802B3C21, double 0x3FF1619D00AC4D50, double 3.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FD96C3EDF862F51, double 0x3FF849DF3F153EAC, double 4.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FD917FB1F81B6B5, double 0x3FFF2614BF54BF1F, double 5.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FC6D0E700DE29F5, double 0x3FD8C123A031FDEE, double 0x4002F967003F4007, double 6.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FC6D0E700DE29F5, double 0x3FD85B55C06AAD8D, double 0x40065666FF688072, double 7.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD805133FA2D832, double 0x4009A889006F3BA2, double 8.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD7AF84006EFF81, double 0x400CEE6BBF6BBB3A, double 9.000000e+00, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD755175FA94418, double 0x40101368C032E07D, double 1.000000e+01, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD6F93160307D87, double 0x4011A84FE01223EF, double 1.100000e+01, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD6968A606BA595, double 0x40133570FFC775F6, double 1.200000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 3.465029e-01, double 0x4014BA64401B7902, double 1.300000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD5BD552017F86F, double 0x401636D3DFBB91E7, double 1.400000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD548DA00895F31, double 0x4017AA7B7FFE1214, double 1.500000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD4DD70BFC1DD97, double 0x40191527C03869D4, double 1.600000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD4D40AE0140D8F, double 0x401A76B48024D374, double 1.700000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD5D81AFFF1CE75, double 0x401BCF0C402A3C95, double 1.800000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD7FFBEBFCC66D4, double 0x401D6F0B000E42B9, double 1.900000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD95A53A032875E, double 0x401F50FD9FD36F7E, double 2.000000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD9224F1FCDD0AE, double 0x40208F3C40222EFF, double 2.100000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD85E4A3FB69BAA, double 0x40216BF2000D1613, double 2.200000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD78341DFAF8EB5, double 0x40223EE4FFF46C79, double 2.300000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD6ADB3FF98C95C, double 0x40230866DFDDF696, double 2.400000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5DB460084232A, double 0x4023C8D23FFE47C4, double 2.500000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD559571FDDA721, double 0x4024808821A21137, double 2.600000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5A392DFC9B244, double 0x40252FECA0A7AAD4, double 2.700000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD672990027D441, double 0x4025F1D7C11C9562, double 2.800000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6B0726067155A, double 1.138272e+01, double 2.900000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD618F83FD365D4, double 0x402789BA1E745F4D, double 3.000000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD55D73A0581C18, double 0x4028440DE16A12C3, double 3.100000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD536422024D261, double 0x4028F3C73EEE5259, double 3.200000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD56315605BD7BA, double 0x4029AD2740B6A975, double 3.300000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD560A9C07AA65C, double 0x402A6E9B2159161C, double 3.400000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD55F0C5FB4C671, double 0x402B235A3F10B707, double 3.500000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD563D5FFF3B815, double 0x402BDC5CBF1DB7A1, double 3.600000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD587A9002DBC15, double 0x402C98ACC0BDCAD1, double 3.700000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD592B99FB83077, double 0x402D5547BEDB7282, double 3.800000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD57A873FCFCEB5, double 0x402E11C30171F007, double 3.900000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD547F0A077C067, double 0x402ECBD8E0008638, double 4.000000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4F97D1FF77D61, double 0x402F839B7E7627A5, double 4.100000e+01, double 9.000000e+00, double 0.000000e+00, double 0x3FB488CFDFE12D80, double 0x3FD4A1549FA5B36A, double 0x40301BBC5F973F4C, double 4.200000e+01, double 9.000000e+00, double 0.000000e+00, double 0x3FB488CFDFE12D80, double 0x3FD45326DF790810, double 0x403073EE1F2CEBF1, double 4.300000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD43EBD5FC765DB, double 0x4030C9E260B2C83F, double 4.400000e+01, double 1.100000e+01, double 0.000000e+00, double 0x3FB918FDFFED0219, double 0x3FD4539A9F86A122, double 1.713200e+01, double 4.500000e+01, double 1.200000e+01, double 0.000000e+00, double 0x3FBB61152157F20D, double 0x3FD479FB5F987D20, double 0x40317AC73FC511ED, double 4.600000e+01, double 1.300000e+01, double 0.000000e+00, double 0x3FBDA92C409D2084, double 0x3FD489539FD40A1D, double 0x4031D42A00848A3E, double 4.700000e+01, double 1.400000e+01, double 0.000000e+00, double 0x3FBFF1435FE24EFB, double 0x3FD4808EBFBAAF58, double 0x40322D701F4CCC61, double 4.800000e+01, double 1.500000e+01, double 0.000000e+00, double 0x3FC11CAD3F93BEB9, double 0x3FD46469803B1294, double 0x40328639A034BE4E, double 4.900000e+01, double 1.600000e+01, double 0.000000e+00, double 0x3FC240B8C02E0B8A, double 0x3FD43B67807DFAE9, double 0x4032DE40A0034026, double 5.000000e+01, double 1.700000e+01, double 0.000000e+00, double 0x3FC364C440C8585A, double 0x3FD4146ADFE1964C, double 0x403335515F6E24A1, double 5.100000e+01, double 1.800000e+01, double 0.000000e+00, double 0x3FC488CFDF733A01, double 0x3FD407BAC0410971, double 0x40338B43BF727137, double 5.200000e+01, double 2.000000e+01, double 0.000000e+00, double 0x3FC6D0E700DE29F5, double 0x3FD40CC2FF7721A8, double 0x4033E2189F33368E, double 5.300000e+01, double 2.100000e+01, double 0.000000e+00, double 0x3FD7E66B5FDB98FF, double 0x3FD4143E5F7AFE93, double 0x40343968405B39E2, double 5.400000e+01, double 2.300000e+01, double 0.000000e+00, double 0x3FDA2D203FF7A2F5, double 0x3FD409955FCE1BD7, double 0x4034908B7FFB62E2, double 5.500000e+01, double 2.400000e+01, double 0.000000e+00, double 0x3FDB507AA073ED26, double 0x3FD3F0A2E0145247, double 0x4034E7343FA2AD3F, double 5.600000e+01, double 2.600000e+01, double 0.000000e+00, double 0x3FE772EE1FBEF357, double 0x3FD3DE2DDFD9914E, double 0x40353CD83FC7962C, double 5.700000e+01, double 2.800000e+01, double 0.000000e+00, double 0x3FE940B19FE47B2E, double 0x3FD3ECB51F8703EB, double 0x403592B4004D2CD9, double 5.800000e+01, double 3.000000e+01, double 0.000000e+00, double 0x3FEB0E7540405959, double 0x3FD4F28A00746F13, double 0x4035E81C40A866BC, double 5.900000e+01, double 3.300000e+01, double 0.000000e+00, double 0x4007876E2099FE6E, double 0x3FDA89C9007E43ED, double 0x40363DB9C0808E30, double 1.600000e+04, double 5.500000e+01, double 0.000000e+00, double 3.000000e+00, double 1.500000e+01, double 0x403ABCCE9F34E40D, double 0x3FE650E39FF80286, double 0x3FCE51E6FFA05619, double 1.000000e+00, double 3.000000e+00, double 1.500000e+01, double 0x403ABCCE9F34E40D, double 0x3FDD1F206061836C, double 0x3FE6B9A39FD7CC2F, double 2.000000e+00, double 3.000000e+00, double 1.500000e+01, double 0x400563D87F5D833E, double 0x3FDB9CB86036D507, double 0x3FF2E93260D04F63, double 3.000000e+00, double 3.000000e+00, double 1.500000e+01, double 0x400563D87F5D833E, double 0x3FDB21719F7F8CA8, double 0x3FFA6A9B9F833D8D, double 4.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FD11CAD3F93BEB9, double 0x3FDAC3E65FD7115B, double 0x4000EE3C206CB205, double 5.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FD11CAD3F93BEB9, double 0x3FDA576A7FD09AB8, double 0x40049D383F6194C5, double 6.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FB5A52A9FD0653F, double 0x3FD9F2393FB4176C, double 0x4008403BBF73C8D0, double 7.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FB5A52A9FD0653F, double 0x3FD9949C602EA515, double 0x400BD56B9F605804, double 8.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FB5A52A9FD0653F, double 0x3FD93340C075B7A3, double 0x400F5B1C407D739E, double 9.000000e+00, double 3.000000e+00, double 1.200000e+01, double 0x3F9B61151FA0240F, double 0x3FD8CA76FF995B64, double 0x401167EA3FFA40F9, double 1.000000e+01, double 3.000000e+00, double 1.200000e+01, double 0x3F9B61151FA0240F, double 0x3FD8595E1FF0E129, double 0x4013192760413351, double 1.100000e+01, double 3.000000e+00, double 1.000000e+01, double 0x3F9B61151FA0240F, double 0x3FD7E01D7FA051CD, double 0x4014C0BCBFB968ED, double 1.200000e+01, double 3.000000e+00, double 1.000000e+01, double 0x3F9B61151FA0240F, double 0x3FD75F3E00382B8D, double 0x40165E3AFFDB4206, double 1.300000e+01, double 3.000000e+00, double 1.000000e+01, double 0x3F9B61151FA0240F, double 0x3FD6D769A079FFEE, double 0x4017F14BA01182DF, double 1.400000e+01, double 3.000000e+00, double 9.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD651180051DF71, double 0x401979AEFFB2524D, double 1.500000e+01, double 3.000000e+00, double 9.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5C684606ECD0A, double 0x401AF73B7FDDDBBE, double 1.600000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD540F42011B21E, double 0x401C69DAFFEB5D31, double 1.700000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD502BF4024E6C8, double 0x401DD18900444884, double 1.800000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD58A710025F337, double 0x401F2E51400E8DE2, double 1.900000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6B1C63FD9A38F, double 0x40205B4740057E9A, double 2.000000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD75166BFD29360, double 0x4021332CA01C14B4, double 2.100000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6FFE85F9CC00C, double 0x402201DC9FFE8D8F, double 2.200000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD641F5A04D096B, double 0x4022C79E5FFCEACD, double 2.300000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD579DB803B461F, double 0x402384C1FFEA308B, double 2.400000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD4ED61802B3C21, double 0x4024399D3E69C81B, double 2.500000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD4FD65FFC1CA43, double 0x4024E68A3F8982CB, double 2.600000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD567A4207D9B59, double 0x40259F8BDEC5F395, double 2.700000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD57460BFDE51DA, double 0x40266315E112D4EF, double 2.800000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD518183F91E647, double 0x40271C1FA0AF3791, double 2.900000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD4E860BFBBF5C3, double 0x4027CB567F6895EC, double 3.000000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD4ED58FFB1B7AF, double 0x402881097FDB8272, double 3.100000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD4CDFB9FE2CDAF, double 0x40293C1B7FB84704, double 3.200000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD4B53620561467, double 0x4029EBF180E13BF0, double 3.300000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD4A3BF1FC39D57, double 0x402A9E67E190A930, double 3.400000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD4B2A46024B676, double 0x402B52CD5EC303F6, double 3.500000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4AFD6C0493962, double 0x402C06E51ED329DE, double 3.600000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4A6801FA89A71, double 0x402CBA5B6078E69C, double 3.700000e+01, double 9.000000e+00, double 0.000000e+00, double 0x3FB488CFDFE12D80, double 0x3FD4BD4DFFCE6814, double 0x402D6B71001D5C31, double 3.800000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD4AFC7DFB949C9, double 0x402E2326A15478FE, double 3.900000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD48732C02CE77B, double 0x402ED694BF3F4590, double 4.000000e+01, double 1.100000e+01, double 0.000000e+00, double 0x3FB918FDFFED0219, double 0x3FD4679A007A56E7, double 0x402F84D0BEC9D4CB, double 4.100000e+01, double 1.200000e+01, double 0.000000e+00, double 0x3FBB61152157F20D, double 0x3FD460F8C06806F2, double 0x40301AC43F5F9160, double 4.200000e+01, double 1.300000e+01, double 0.000000e+00, double 0x3FBDA92C409D2084, double 0x3FD46699407224CF, double 0x4030738FFFBCE421, double 4.300000e+01, double 1.400000e+01, double 0.000000e+00, double 0x3FBFF1435FE24EFB, double 0x3FD456F0A0194326, double 0x4030CC2B80B74A85, double 4.400000e+01, double 1.500000e+01, double 0.000000e+00, double 0x3FC11CAD3F93BEB9, double 0x3FD433ABDFD375F0, double 0x4031241F3F606820, double 4.500000e+01, double 1.600000e+01, double 0.000000e+00, double 0x3FC240B8C02E0B8A, double 0x3FD40E3D004CBD2E, double 0x40317B16C035E595, double 4.600000e+01, double 1.700000e+01, double 0.000000e+00, double 0x3FC364C440C8585A, double 0x3FD4003A1FEA08D0, double 0x4031D0D9A019E65B, double 4.700000e+01, double 1.900000e+01, double 0.000000e+00, double 0x3FC5ACDB600D86D1, double 0x3FD404ABE031F331, double 0x403227829F8210E7, double 4.800000e+01, double 2.000000e+01, double 0.000000e+00, double 0x3FC6D0E700DE29F5, double 0x3FD40F5D1FEBADB9, double 0x40327EAF00332BA6, double 4.900000e+01, double 2.200000e+01, double 0.000000e+00, double 0x3FC918FDFFED0219, double 0x3FD40C6E7FDCD174, double 0x4032D5C37F46313D, double 5.000000e+01, double 2.300000e+01, double 0.000000e+00, double 0x3FCA3D09A0BDA53D, double 0x3FD40127601ED739, double 0x40332C8FE0B3339F, double 5.100000e+01, double 2.500000e+01, double 0.000000e+00, double 0x3FCC85209FCC7D60, double 0x3FD401313FB56F05, double 0x403382AABF5BCB02, double 5.200000e+01, double 2.700000e+01, double 0.000000e+00, double 0x3FCECD37BF11ABD8, double 0x3FD408F9DFE69633, double 0x4033D98A6040B278, double 5.300000e+01, double 2.900000e+01, double 0.000000e+00, double 0x3FE0809F80410B97, double 0x3FD429701FE76ACD, double 0x403430A80064A9CE, double 5.400000e+01, double 3.100000e+01, double 0.000000e+00, double 0x3FE1A3F9E033E568, double 0x3FD528C5FFDCA235, double 0x4034878CFF576394, double 5.500000e+01, double 3.300000e+01, double 0.000000e+00, double 0x3FE2C7545FD3A52E, double 0x3FDAC3C7C073781D, double 0x4034DDCEFFACF3E9, double 4.800000e+04, double 3.700000e+01, double 0.000000e+00, double 1.000000e+00, double 4.532000e+00, double 1.000000e+00, double -8.240000e+00, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 9.040000e-01, double 9.890000e-01, double -8.240000e+00, double 1.875000e+00, double 2.000000e+00, double 1.000000e+00, double 2.900000e-02, double 9.890000e-01, double -8.240000e+00, double 3.750000e+00, double 3.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.810000e-01, double -8.240000e+00, double 5.438000e+00, double 4.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.850000e-01, double -8.240000e+00, double 6.857000e+00, double 5.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.840000e-01, double -8.240000e+00, double 8.109000e+00, double 6.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.800000e-01, double -8.240000e+00, double 9.237000e+00, double 7.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.680000e-01, double -8.240000e+00, double 1.020200e+01, double 8.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.540000e-01, double -8.240000e+00, double 1.108300e+01, double 9.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.290000e-01, double -8.240000e+00, double 1.186500e+01, double 1.000000e+01, double 1.000000e+00, double 9.000000e-03, double 9.060000e-01, double -7.447000e+00, double 1.255400e+01, double 1.100000e+01, double 1.000000e+00, double 9.000000e-03, double 8.830000e-01, double -7.447000e+00, double 1.319500e+01, double 1.200000e+01, double 1.000000e+00, double 9.000000e-03, double 8.440000e-01, double -7.447000e+00, double 1.378100e+01, double 1.300000e+01, double 1.000000e+00, double 9.000000e-03, double 7.920000e-01, double -7.447000e+00, double 1.430900e+01, double 1.400000e+01, double 1.000000e+00, double 9.000000e-03, double 7.470000e-01, double -7.447000e+00, double 1.480300e+01, double 1.500000e+01, double 1.000000e+00, double 9.000000e-03, double 6.890000e-01, double -7.447000e+00, double 1.525000e+01, double 1.600000e+01, double 1.000000e+00, double 9.000000e-03, double 6.440000e-01, double -7.447000e+00, double 1.566700e+01, double 1.700000e+01, double 1.000000e+00, double 9.000000e-03, double 5.920000e-01, double -7.447000e+00, double 1.606800e+01, double 1.800000e+01, double 1.000000e+00, double 9.000000e-03, double 5.530000e-01, double -7.447000e+00, double 1.640900e+01, double 1.900000e+01, double 2.000000e+00, double 1.800000e-02, double 8.500000e-01, double -7.447000e+00, double 1.704500e+01, double 2.000000e+01, double 2.000000e+00, double 1.800000e-02, double 8.110000e-01, double -6.990000e+00, double 1.760700e+01, double 2.100000e+01, double 2.000000e+00, double 1.800000e-02, double 7.360000e-01, double -6.990000e+00, double 1.809700e+01, double 2.200000e+01, double 2.000000e+00, double 1.800000e-02, double 6.650000e-01, double -6.990000e+00, double 1.852800e+01, double 2.300000e+01, double 2.000000e+00, double 1.800000e-02, double 6.100000e-01, double -6.990000e+00, double 1.893100e+01, double 2.400000e+01, double 2.000000e+00, double 1.800000e-02, double 5.440000e-01, double -6.990000e+00, double 1.929500e+01, double 2.500000e+01, double 2.000000e+00, double 1.800000e-02, double 5.280000e-01, double -6.990000e+00, double 1.963600e+01, double 2.600000e+01, double 3.000000e+00, double 5.400000e-02, double 6.210000e-01, double -6.990000e+00, double 2.003800e+01, double 2.700000e+01, double 3.000000e+00, double 5.400000e-02, double 6.730000e-01, double -6.990000e+00, double 2.048600e+01, double 2.800000e+01, double 3.000000e+00, double 5.400000e-02, double 6.350000e-01, double -6.990000e+00, double 2.090000e+01, double 2.900000e+01, double 4.000000e+00, double 1.140000e-01, double 6.260000e-01, double -6.990000e+00, double 2.130600e+01, double 3.000000e+01, double 4.000000e+00, double 1.140000e-01, double 6.360000e-01, double -6.020000e+00, double 2.172200e+01, double 3.100000e+01, double 5.000000e+00, double 4.520000e-01, double 6.150000e-01, double -6.020000e+00, double 2.212800e+01, double 3.200000e+01, double 5.000000e+00, double 4.520000e-01, double 5.790000e-01, double -6.020000e+00, double 2.251300e+01, double 3.300000e+01, double 5.000000e+00, double 4.520000e-01, double 5.510000e-01, double -6.020000e+00, double 2.287700e+01, double 3.400000e+01, double 7.000000e+00, double 6.330000e+00, double 5.520000e-01, double -5.229000e+00, double 2.324100e+01, double 3.500000e+01, double 7.000000e+00, double 6.330000e+00, double 5.590000e-01, double -5.229000e+00, double 2.361600e+01, double 3.600000e+01, double 1.100000e+01, double 9.947000e+00, double 5.280000e-01, double -5.229000e+00, double 2.397400e+01, double 3.700000e+01, double 1.700000e+01, double 1.537270e+02, double 4.790000e-01, double -5.229000e+00, double 2.431300e+01, double 4.410000e+04, double 3.800000e+01, double 0.000000e+00, double 1.000000e+00, double 4.532000e+00, double 1.000000e+00, double -8.240000e+00, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 9.040000e-01, double 9.830000e-01, double -8.240000e+00, double 1.723000e+00, double 2.000000e+00, double 1.000000e+00, double 2.900000e-02, double 9.830000e-01, double -8.240000e+00, double 3.445000e+00, double 3.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.820000e-01, double -8.240000e+00, double 5.057000e+00, double 4.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.850000e-01, double -8.240000e+00, double 6.422000e+00, double 5.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.830000e-01, double -8.240000e+00, double 7.609000e+00, double 6.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.780000e-01, double -8.240000e+00, double 8.710000e+00, double 7.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.670000e-01, double -8.240000e+00, double 9.662000e+00, double 8.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.480000e-01, double -8.240000e+00, double 1.051500e+01, double 9.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.300000e-01, double -8.240000e+00, double 1.129300e+01, double 1.000000e+01, double 1.000000e+00, double 9.000000e-03, double 9.140000e-01, double -7.447000e+00, double 1.200900e+01, double 1.100000e+01, double 1.000000e+00, double 9.000000e-03, double 8.700000e-01, double -7.447000e+00, double 1.262500e+01, double 1.200000e+01, double 1.000000e+00, double 9.000000e-03, double 8.450000e-01, double -7.447000e+00, double 1.321000e+01, double 1.300000e+01, double 1.000000e+00, double 9.000000e-03, double 8.000000e-01, double -7.447000e+00, double 1.374800e+01, double 1.400000e+01, double 1.000000e+00, double 9.000000e-03, double 7.490000e-01, double -7.447000e+00, double 1.424100e+01, double 1.500000e+01, double 1.000000e+00, double 9.000000e-03, double 7.010000e-01, double -7.447000e+00, double 1.469500e+01, double 1.600000e+01, double 1.000000e+00, double 9.000000e-03, double 6.530000e-01, double -7.447000e+00, double 1.512500e+01, double 1.700000e+01, double 1.000000e+00, double 9.000000e-03, double 5.900000e-01, double -7.447000e+00, double 1.550800e+01, double 1.800000e+01, double 1.000000e+00, double 9.000000e-03, double 6.160000e-01, double -7.447000e+00, double 1.589100e+01, double 1.900000e+01, double 2.000000e+00, double 1.800000e-02, double 8.600000e-01, double -7.447000e+00, double 1.653700e+01, double 2.000000e+01, double 2.000000e+00, double 1.800000e-02, double 8.230000e-01, double -6.990000e+00, double 1.711200e+01, double 2.100000e+01, double 2.000000e+00, double 1.800000e-02, double 7.620000e-01, double -6.990000e+00, double 1.762100e+01, double 2.200000e+01, double 2.000000e+00, double 1.800000e-02, double 6.880000e-01, double -6.990000e+00, double 1.807300e+01, double 2.300000e+01, double 2.000000e+00, double 1.800000e-02, double 6.120000e-01, double -6.990000e+00, double 1.847000e+01, double 2.400000e+01, double 2.000000e+00, double 1.800000e-02, double 5.940000e-01, double -6.990000e+00, double 1.884900e+01, double 2.500000e+01, double 3.000000e+00, double 2.700000e-02, double 6.580000e-01, double -6.990000e+00, double 1.927100e+01, double 2.600000e+01, double 3.000000e+00, double 2.700000e-02, double 7.060000e-01, double -6.990000e+00, double 1.974100e+01, double 2.700000e+01, double 3.000000e+00, double 5.400000e-02, double 6.600000e-01, double -6.990000e+00, double 2.017700e+01, double 2.800000e+01, double 3.000000e+00, double 5.400000e-02, double 6.060000e-01, double -6.990000e+00, double 2.057600e+01, double 2.900000e+01, double 3.000000e+00, double 5.400000e-02, double 5.650000e-01, double -6.990000e+00, double 2.095000e+01, double 3.000000e+01, double 4.000000e+00, double 1.140000e-01, double 5.600000e-01, double -6.020000e+00, double 2.131600e+01, double 3.100000e+01, double 4.000000e+00, double 1.140000e-01, double 5.790000e-01, double -6.020000e+00, double 2.169900e+01, double 3.200000e+01, double 5.000000e+00, double 4.520000e-01, double 5.670000e-01, double -6.020000e+00, double 2.207800e+01, double 3.300000e+01, double 5.000000e+00, double 4.520000e-01, double 5.340000e-01, double -6.020000e+00, double 2.243800e+01, double 3.400000e+01, double 5.000000e+00, double 4.520000e-01, double 5.140000e-01, double -5.229000e+00, double 2.278200e+01, double 3.500000e+01, double 7.000000e+00, double 6.330000e+00, double 5.200000e-01, double -5.229000e+00, double 2.313300e+01, double 3.600000e+01, double 7.000000e+00, double 6.330000e+00, double 5.180000e-01, double -5.229000e+00, double 2.348400e+01, double 3.700000e+01, double 7.000000e+00, double 6.330000e+00, double 5.070000e-01, double -5.229000e+00, double 2.382800e+01, double 3.800000e+01, double 1.900000e+01, double 1.718130e+02, double 4.470000e-01, double -4.559000e+00, double 2.417300e+01, double 3.200000e+04, double 4.100000e+01, double 0.000000e+00, double 1.000000e+00, double 4.532000e+00, double 1.000000e+00, double -8.240000e+00, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 9.040000e-01, double 9.850000e-01, double -8.240000e+00, double 1.250000e+00, double 2.000000e+00, double 1.000000e+00, double 9.000000e-02, double 9.830000e-01, double -8.240000e+00, double 2.500000e+00, double 3.000000e+00, double 1.000000e+00, double 2.900000e-02, double 9.830000e-01, double -8.240000e+00, double 3.750000e+00, double 4.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.810000e-01, double -8.240000e+00, double 4.909000e+00, double 5.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.750000e-01, double -8.240000e+00, double 5.958000e+00, double 6.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.590000e-01, double -8.240000e+00, double 6.857000e+00, double 7.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.440000e-01, double -8.240000e+00, double 7.700000e+00, double 8.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.330000e-01, double -8.240000e+00, double 8.500000e+00, double 9.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.200000e-01, double -8.240000e+00, double 9.237000e+00, double 1.000000e+01, double 1.000000e+00, double 9.000000e-03, double 8.920000e-01, double -7.447000e+00, double 9.895000e+00, double 1.100000e+01, double 1.000000e+00, double 9.000000e-03, double 8.630000e-01, double -7.447000e+00, double 1.050000e+01, double 1.200000e+01, double 1.000000e+00, double 9.000000e-03, double 8.390000e-01, double -7.447000e+00, double 1.108300e+01, double 1.300000e+01, double 1.000000e+00, double 9.000000e-03, double 7.860000e-01, double -7.447000e+00, double 1.160400e+01, double 1.400000e+01, double 1.000000e+00, double 9.000000e-03, double 7.550000e-01, double -7.447000e+00, double 1.210700e+01, double 1.500000e+01, double 1.000000e+00, double 9.000000e-03, double 6.980000e-01, double -7.447000e+00, double 1.255400e+01, double 1.600000e+01, double 1.000000e+00, double 9.000000e-03, double 6.730000e-01, double -7.447000e+00, double 1.300000e+01, double 1.700000e+01, double 1.000000e+00, double 9.000000e-03, double 6.050000e-01, double -7.447000e+00, double 1.339100e+01, double 1.800000e+01, double 1.000000e+00, double 9.000000e-03, double 6.290000e-01, double -7.447000e+00, double 1.378100e+01, double 1.900000e+01, double 2.000000e+00, double 1.800000e-02, double 8.830000e-01, double -7.447000e+00, double 1.447400e+01, double 2.000000e+01, double 2.000000e+00, double 1.800000e-02, double 8.580000e-01, double -6.990000e+00, double 1.509600e+01, double 2.100000e+01, double 2.000000e+00, double 1.800000e-02, double 8.290000e-01, double -6.990000e+00, double 1.566700e+01, double 2.200000e+01, double 2.000000e+00, double 1.800000e-02, double 7.670000e-01, double -6.990000e+00, double 1.617700e+01, double 2.300000e+01, double 2.000000e+00, double 1.800000e-02, double 7.050000e-01, double -6.990000e+00, double 1.663600e+01, double 2.400000e+01, double 2.000000e+00, double 1.800000e-02, double 6.370000e-01, double -6.990000e+00, double 1.705700e+01, double 2.500000e+01, double 2.000000e+00, double 1.800000e-02, double 5.640000e-01, double -6.990000e+00, double 1.742900e+01, double 2.600000e+01, double 2.000000e+00, double 1.800000e-02, double 5.500000e-01, double -6.990000e+00, double 1.778600e+01, double 2.700000e+01, double 3.000000e+00, double 2.700000e-02, double 6.030000e-01, double -6.990000e+00, double 1.817700e+01, double 2.800000e+01, double 3.000000e+00, double 2.700000e-02, double 6.350000e-01, double -6.990000e+00, double 1.859700e+01, double 2.900000e+01, double 3.000000e+00, double 2.700000e-02, double 5.920000e-01, double -6.990000e+00, double 1.899400e+01, double 3.000000e+01, double 3.000000e+00, double 2.700000e-02, double 5.330000e-01, double -6.020000e+00, double 1.935200e+01, double 3.100000e+01, double 3.000000e+00, double 2.700000e-02, double 5.180000e-01, double -6.020000e+00, double 1.969300e+01, double 3.200000e+01, double 4.000000e+00, double 7.200000e-02, double 5.680000e-01, double -6.020000e+00, double 2.006600e+01, double 3.300000e+01, double 4.000000e+00, double 7.200000e-02, double 5.940000e-01, double -6.020000e+00, double 2.046200e+01, double 3.400000e+01, double 4.000000e+00, double 7.200000e-02, double 5.680000e-01, double -5.229000e+00, double 2.084100e+01, double 3.500000e+01, double 5.000000e+00, double 1.430000e-01, double 5.360000e-01, double -5.229000e+00, double 2.120100e+01, double 3.600000e+01, double 5.000000e+00, double 1.430000e-01, double 5.220000e-01, double -5.229000e+00, double 2.154900e+01, double 3.700000e+01, double 6.000000e+00, double 1.720000e-01, double 5.420000e-01, double -5.229000e+00, double 2.191100e+01, double 3.800000e+01, double 7.000000e+00, double 6.330000e-01, double 5.390000e-01, double -4.559000e+00, double 2.227500e+01, double 3.900000e+01, double 7.000000e+00, double 6.330000e-01, double 5.190000e-01, double -4.559000e+00, double 2.262500e+01, double 4.000000e+01, double 8.000000e+00, double 7.230000e-01, double 5.140000e-01, double -3.980000e+00, double 2.297100e+01, double 4.100000e+01, double 1.000000e+01, double 9.043000e+00, double 5.180000e-01, double -3.980000e+00, double 2.332100e+01, double 2.400000e+04, double 4.400000e+01, double 0.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEF1965403A7185, double 0x3FC333334015BC21, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEBFDC57FC8DA71, double 0x3FC333334015BC21, double 0x3FEE4A53BFDF6D52, double 2.000000e+00, double 1.000000e+00, double 0x3FEC85209FCC7D60, double 0x3FEB7317FFFBF935, double 0x3FC333334015BC21, double 0x3FFE27FC608E3537, double 3.000000e+00, double 1.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FEADF2E8034DD71, double 0x3FC333334015BC21, double 0x400671F65F6D4DE1, double 4.000000e+00, double 1.000000e+00, double 0x3F9CDC38BF530072, double 0x3FEA52C29FF82D79, double 0x3FC333334015BC21, double 0x400D9C56209E0539, double 5.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE99B1F2000D161, double 0x3FC333334015BC21, double 0x401242E33FAAE5C7, double 6.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE8AFECC00FD899, double 0x3FC333334015BC21, double 0x4015920DDFBC939A, double 7.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE798B2E022D122, double 0x3FC333334015BC21, double 0x4018B82F2029154D, double 8.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE66F80602F0C29, double 0x3FC333334015BC21, double 0x401BB3481FD45BB7, double 9.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE51CE34000CC03, double 0x3FC333334015BC21, double 0x401E82A44010BC3B, double 1.000000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE3AE62FFDD230F, double 0x3FC333334015BC21, double 0x4020934DDFDCC9F0, double 1.100000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE2327260112F1F, double 0x3FC333334015BC21, double 0x4021D02A3FEF8432, double 1.200000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE0B65C000EA136, double 0x3FC70A3D7FAC2175, double 0x4022F8C4202AEDBF, double 1.300000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDEA65940382967, double 0x3FC70A3D7FAC2175, double 0x40240E2901810980, double 1.400000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDC099BE01ADD51, double 0x3FC70A3D7FAC2175, double 0x40251182814F1FF9, double 1.500000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDA667E005861E3, double 0x3FC70A3D7FAC2175, double 0x40260406FFCE81D9, double 1.600000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD9015C005BF06C, double 0x3FC70A3D7FAC2175, double 0x4026E6ED3F331BB6, double 1.700000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7CCFFA06746BF, double 0x3FC70A3D7FAC2175, double 0x4027BB64E054690E, double 1.800000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7870C20164259, double 0x3FC70A3D7FAC2175, double 0x4028829080156415, double 1.900000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDB05A9804A1ADF, double 0x3FC70A3D7FAC2175, double 0x40293D82814F1FF9, double 2.000000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE2146600317590, double 0x3FC70A3D7FAC2175, double 0x402A8DEE3F0D5C09, double 2.100000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE0A163DFC5C53E, double 0x3FC70A3D7FAC2175, double 0x402BBDF9DF548ECE, double 2.200000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDD24A12031DFDD, double 0x3FC99999A00ADE11, double 0x402CCE0C7F6A436B, double 2.300000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDA2AE45F908950, double 0x3FC99999A00ADE11, double 0x402DC3288128898C, double 2.400000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD86B21804726F5, double 0x3FC99999A00ADE11, double 0x402EA1733F92BD07, double 2.500000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD730DD9FFB29FA, double 0x3FC99999A00ADE11, double 0x402F6C58FF759685, double 2.600000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD768379FB21519, double 0x3FC99999A00ADE11, double 0x403013569F490603, double 2.700000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 3.806400e-01, double 0x3FC99999A00ADE11, double 0x40307CFB407D9E91, double 2.800000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD8448A60381B72, double 0x3FC99999A00ADE11, double 0x4030F0EBE08E4AB1, double 2.900000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD71542FFA66049, double 0x3FC99999A00ADE11, double 0x403159F0FFB1FC67, double 3.000000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5F4CAFFE5755D, double 0x3FC99999A00ADE11, double 0x4031B9F81F60EE57, double 3.100000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5B6EE7FB629D9, double 0x3FC99999A00ADE11, double 0x4032127EC0D03F48, double 3.200000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD5F31F407BDFE4, double 0x3FC99999A00ADE11, double 0x40327152007DD441, double 3.300000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD5F5D10040CB2A, double 0x3FC99999A00ADE11, double 0x4032D59BBFE486FE, double 3.400000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD603E86003D454, double 2.500000e-01, double 0x403332117F84449E, double 3.500000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD602EC4051F710, double 2.500000e-01, double 0x403391D7FF2FF668, double 3.600000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD5BAD25F99FFAC, double 2.500000e-01, double 0x4033F482A058D07C, double 3.700000e+01, double 5.000000e+00, double 0x3FB6C310E004DF79, double 0x3FD589E59FB51A31, double 0x3FD1EB851FCB32AA, double 0x40344FC47FF73124, double 3.800000e+01, double 6.000000e+00, double 0x3FBB507A9F610C68, double 0x3FD56FE7C0296189, double 0x3FD1EB851FCB32AA, double 0x4034AC7C7FAD5F49, double 3.900000e+01, double 6.000000e+00, double 0x3FC5A52AA0AC4C3E, double 0x3FD57A7EFFC2F6E9, double 0x3FD333334015BC21, double 0x40350A5DFF8F97B8, double 4.000000e+01, double 7.000000e+00, double 1.972868e-01, double 0x3FD56C005FB27E53, double 0x3FD333334015BC21, double 0x403567F0FFB1FC67, double 4.100000e+01, double 7.000000e+00, double 1.972868e-01, double 0x3FD53A30C008BB88, double 0x3FD333334015BC21, double 0x4035C50A40CBA22A, double 4.200000e+01, double 8.000000e+00, double 0x3FE6D0E6FFCB4936, double 0x3FD506FAA06FA1A3, double 0x3FD99999A00ADE11, double 0x40362070DF662C85, double 4.300000e+01, double 8.000000e+00, double 0x3FE6D0E6FFCB4936, double 0x3FD5B623E0515B5F, double 0x3FD99999A00ADE11, double 0x40367A17C01025E8, double 4.400000e+01, double 9.000000e+00, double 0x3FE9AB03DFE70E75, double 0x3FDB369A001BD9A5, double 0x3FD99999A00ADE11, double 0x4036D10540B1A0F7, double 2.205000e+04, double 4.400000e+01, double 0.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEE878AE0072B06, double 0x3FC333334015BC21, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEAAB10001715E0, double 0x3FC333334015BC21, double 0x3FEBD5D3201A7417, double 2.000000e+00, double 1.000000e+00, double 0x3FEC85209FCC7D60, double 0x3FEA1C3A9FD2DD77, double 0x3FC333334015BC21, double 0x3FFBBB6DDF818551, double 3.000000e+00, double 1.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FE96A73FFDFA74E, double 0x3FC333334015BC21, double 0x4004AA703FAE15D2, double 4.000000e+00, double 1.000000e+00, double 0x3F9CDC38BF530072, double 0x3FE8D8FAA019BB68, double 0x3FC333334015BC21, double 0x400B4EB4202D9CF1, double 5.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE82B17E00A5B12, double 0x3FC333334015BC21, double 0x4010DFBFA0138645, double 6.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE764EEA0426668, double 0x3FC333334015BC21, double 0x4013FA01FFB480A6, double 7.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE674F2A0127BFB, double 0x3FC333334015BC21, double 0x4016F2E12015F50A, double 8.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE55F3DBFCB7EE6, double 0x3FC333334015BC21, double 0x4019C83980544E36, double 9.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE42B4980044FCE, double 0x3FC333334015BC21, double 0x401C78E8FFB35400, double 1.000000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE2E2ACE014CA8A, double 0x3FC333334015BC21, double 0x401F04AA601060F6, double 1.100000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE18FAD004289D7, double 0x3FC333334015BC21, double 0x4020B5F5DFEB8D82, double 1.200000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE03FDC602C7F54, double 0x3FC333334015BC21, double 0x4021D7D2A0207165, double 1.300000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDE0C8B9FED0106, double 0x3FC70A3D7FAC2175, double 0x4022E89A3FDCB9D5, double 1.400000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDBAAAADFA34F61, double 0x3FC70A3D7FAC2175, double 0x4023E91D7FEDA103, double 1.500000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDA4FF91F99ABEC, double 0x3FC70A3D7FAC2175, double 0x4024DA4200559055, double 1.600000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD902669FFABA4E, double 0x3FC70A3D7FAC2175, double 0x4025BCF780D57D75, double 1.700000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7E471408171D2, double 0x3FC70A3D7FAC2175, double 0x4026922FDFC19C17, double 1.800000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7A6E0FFDF9EB7, double 0x3FC70A3D7FAC2175, double 0x40275AD9209825FC, double 1.900000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDB42E39FA21C4A, double 0x3FC70A3D7FAC2175, double 0x402817D9414F55A9, double 2.000000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE275F72007875E, double 0x3FC70A3D7FAC2175, double 0x40296DA1412DC7B9, double 2.100000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE10F469FD52594, double 0x3FC70A3D7FAC2175, double 0x402AA3B480A5ACCD, double 2.200000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDE13F29FB3FEB9, double 0x3FC70A3D7FAC2175, double 0x402BBA1B5FD7D6EC, double 2.300000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDAB4871F884A56, double 0x3FC99999A00ADE11, double 0x402CB579BFDF7E80, double 2.400000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD8EA46DF7C40B2, double 0x3FC99999A00ADE11, double 0x402D99BB7EC6AF7C, double 2.500000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD73885BFBF6A86, double 0x3FC99999A00ADE11, double 0x402E6A2CC1292A9C, double 2.600000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD631FE0006C72B, double 0x3FC99999A00ADE11, double 0x402F2990DEDFF4C8, double 2.700000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD65C91FF79FBCD, double 0x3FC99999A00ADE11, double 0x402FDA393EE5EEDD, double 2.800000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD74C37A0192961, double 0x3FC99999A00ADE11, double 0x403051CA3F53D2E6, double 2.900000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD766103FBE30FE, double 0x3FC99999A00ADE11, double 0x4030C0BE40420F6F, double 3.000000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD6AC721F93546C, double 0x3FC99999A00ADE11, double 0x403125A7206AD993, double 3.100000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD67A61005C2C8D, double 0x3FC99999A00ADE11, double 0x40318234FFBC0D62, double 3.200000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6ADE6BFDF75E9, double 0x3FC99999A00ADE11, double 0x4031E4D100383424, double 3.300000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD654A36041DF1E, double 0x3FC99999A00ADE11, double 0x40324C9E2011177F, double 3.400000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD59C0BFF929CD0, double 0x3FC99999A00ADE11, double 0x4032ABE0C09F97E0, double 3.500000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD540BF5F9E4298, double 2.500000e-01, double 0x403304016052502F, double 3.600000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD52BB6E084EE1A, double 2.500000e-01, double 0x40335F973F4C462A, double 3.700000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD4F6391FE4D560, double 2.500000e-01, double 0x4033BE37C060ADC0, double 3.800000e+01, double 5.000000e+00, double 0x3FB6C310E004DF79, double 0x3FD4D52ADF7CA7C6, double 0x3FD1EB851FCB32AA, double 0x403416018032C047, double 3.900000e+01, double 6.000000e+00, double 0x3FBB507A9F610C68, double 0x3FD4C392BF935BF0, double 0x3FD1EB851FCB32AA, double 0x40346F7CE0256F25, double 4.000000e+01, double 6.000000e+00, double 0x3FBB507A9F610C68, double 0x3FD4DA7B3FD61D9D, double 0x3FD1EB851FCB32AA, double 0x4034CA6200A6182D, double 4.100000e+01, double 7.000000e+00, double 1.972868e-01, double 0x3FD4E0D1805492EE, double 0x3FD333334015BC21, double 0x4035255380B09488, double 4.200000e+01, double 7.000000e+00, double 1.972868e-01, double 0x3FD4DC8B80401B12, double 0x3FD333334015BC21, double 0x40358027001F09B1, double 4.300000e+01, double 8.000000e+00, double 0x3FCCDC38BF530072, double 0x3FD5B27E600AE036, double 0x3FD333334015BC21, double 0x4035D9B73F9CCE02, double 4.400000e+01, double 8.000000e+00, double 0x3FE6D0E6FFCB4936, double 0x3FDB5184204F6F99, double 0x3FD99999A00ADE11, double 0x403631F27FE4BCAE, double 1.600000e+04, double 4.500000e+01, double 0.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEAB62F803179DC, double 0x3FC333334015BC21, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FE3F5D140240771, double 0x3FC333334015BC21, double 0x3FE435666020150D, double 2.000000e+00, double 1.000000e+00, double 0x3FEC85209FCC7D60, double 0x3FE355A36016EC00, double 0x3FC333334015BC21, double 0x3FF42BCABED59345, double 3.000000e+00, double 1.000000e+00, double 0x3FEC85209FCC7D60, double 0x3FE2F173FFC5E23C, double 0x3FC333334015BC21, double 0x3FFE27FC608E3537, double 4.000000e+00, double 1.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FE268DEE0397FED, double 0x3FC333334015BC21, double 0x4004024B1FB902EB, double 5.000000e+00, double 1.000000e+00, double 0x3F9CDC38BF530072, double 0x3FE1F832E0384AB0, double 0x3FC333334015BC21, double 0x4008DBDFDFCF0810, double 6.000000e+00, double 1.000000e+00, double 0x3F9CDC38BF530072, double 0x3FE17E495FD69081, double 0x3FC333334015BC21, double 0x400D9C56209E0539, double 7.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE0F4A63FC53CE1, double 0x3FC333334015BC21, double 0x40111FEF9FB59274, double 8.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE05B9D602B4180, double 0x3FC333334015BC21, double 0x401361A7602BB9C2, double 9.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDF6AF19F83D82B, double 0x3FC333334015BC21, double 0x4015920DDFBC939A, double 1.000000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDE0A595FC2B343, double 0x3FC333334015BC21, double 0x4017B02F9FAAD5AC, double 1.100000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDC9BB5C038364A, double 0x3FC333334015BC21, double 0x4019BB64002FA5B5, double 1.200000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDB6725A06FEEF3, double 0x3FC333334015BC21, double 0x401BB3481FD45BB7, double 1.300000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDA87C49FD7A13C, double 0x3FC333334015BC21, double 0x401D97B65FCDF0E4, double 1.400000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD9AA86A05C7032, double 0x3FC333334015BC21, double 0x401F68BE200BB91C, double 1.500000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD8D190204920B0, double 0x3FC333334015BC21, double 0x4020934DDFDCC9F0, double 1.600000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7F3643F89719D, double 0x3FC333334015BC21, double 8.704772e+00, double 1.700000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD71335E03F4DFC, double 0x3FC70A3D7FAC2175, double 0x4022353C000B6894, double 1.800000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD649D65F95085D, double 0x3FC70A3D7FAC2175, double 0x4022F8C4202AEDBF, double 1.900000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD66BC2001523A9, double 0x3FC70A3D7FAC2175, double 0x4023B3C2600C5A2B, double 2.000000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDA0153001BF36A, double 0x3FC70A3D7FAC2175, double 0x4024668E3EF28416, double 2.100000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE1BB2C3FBDC9E9, double 0x3FC70A3D7FAC2175, double 0x4025B16C3FC43B2E, double 2.200000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE0E7EF9FD7EE8B, double 0x3FC70A3D7FAC2175, double 0x4026E3B8404DCDE9, double 2.300000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDE7F6B1F88B16A, double 0x3FC70A3D7FAC2175, double 0x4027FC557F8E5599, double 2.400000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDB67B8C0144678, double 0x3FC70A3D7FAC2175, double 0x4028FDEC80C73ABD, double 2.500000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD9BED2BF91362F, double 0x3FC70A3D7FAC2175, double 0x4029EAF13E9C1D02, double 2.600000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD8318D5FE93882, double 0x3FC70A3D7FAC2175, double 0x402AC59DC14686CD, double 2.700000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD733F83F9744AB, double 0x3FC70A3D7FAC2175, double 0x402B8FF180E13BF0, double 2.800000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD78E459FE9B736, double 0x3FC99999A00ADE11, double 0x402C4BB360143CCE, double 2.900000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD8B39F3FDCF5F6, double 0x3FC99999A00ADE11, double 0x402D2286BFA241DF, double 3.000000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD8BADCC009F0C5, double 0x3FC99999A00ADE11, double 0x402E0F9BC1920627, double 3.100000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD78A97DF966441, double 0x3FC99999A00ADE11, double 0x402EE7163F06A60C, double 3.200000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD66143BFFBE196, double 0x3FC99999A00ADE11, double 0x402FAC2C7FBACB43, double 3.300000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD6201A3F79F110, double 0x3FC99999A00ADE11, double 0x403030C29F4C6102, double 3.400000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6516A202F4A70, double 0x3FC99999A00ADE11, double 0x4030917F7F3C2042, double 3.500000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD636235F780212, double 0x3FC99999A00ADE11, double 0x4030F74D7FE5936D, double 3.600000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD62A453FF280B3, double 0x3FC99999A00ADE11, double 0x4031549840D405A6, double 3.700000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD60EE2800130F1, double 0x3FC99999A00ADE11, double 0x4031B49F806367AE, double 3.800000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD5AE8F40607E81, double 0x3FC99999A00ADE11, double 0x403217090059C213, double 3.900000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD56EA6FFE7340A, double 0x3FC99999A00ADE11, double 0x403271AD7F29ABCB, double 4.000000e+01, double 6.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD54CC8BF90BDED, double 0x3FC99999A00ADE11, double 0x4032CD91BFB08498, double 4.100000e+01, double 6.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD55BA1006B34D7, double 2.500000e-01, double 0x40332AA18017E854, double 4.200000e+01, double 7.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD5600880798473, double 2.500000e-01, double 0x403387A9DF61FAC7, double 4.300000e+01, double 7.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD56297BFA4C61E, double 2.500000e-01, double 0x4033E4BBBF5E4F41, double 4.400000e+01, double 8.000000e+00, double 0x3FC235A71EF0E48D, double 0x3FD6318CBFEC69A0, double 0x3FD1EB851FCB32AA, double 0x403440EA00BA3A23, double 4.500000e+01, double 8.000000e+00, double 0x3FC235A71EF0E48D, double 0x3FDBEB97E07E51E2, double 0x3FD1EB851FCB32AA, double 0x40349C4E3FFEF391, double 4.800000e+04, double 2.000000e+01, double 0.000000e+00, double 3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 5.600000e-02, double 1.000000e+00, double 3.000000e+00, double 4.000000e+00, double 7.000000e+00, double 9.440000e-01, double 6.110000e-01, double 2.000000e+00, double 4.000000e+00, double 7.000000e+00, double 1.100000e+01, double 3.890000e-01, double 1.670000e-01, double 3.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 8.330000e-01, double 7.220000e-01, double 4.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 2.780000e-01, double 6.390000e-01, double 5.000000e+00, double 2.000000e+00, double 1.700000e+01, double 1.900000e+01, double 3.610000e-01, double 4.170000e-01, double 6.000000e+00, double 3.000000e+00, double 1.900000e+01, double 2.200000e+01, double 5.830000e-01, double 8.300000e-02, double 7.000000e+00, double 2.000000e+00, double 2.200000e+01, double 2.400000e+01, double 9.170000e-01, double 7.500000e-01, double 8.000000e+00, double 3.000000e+00, double 2.400000e+01, double 2.700000e+01, double 2.500000e-01, double 4.170000e-01, double 9.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 5.830000e-01, double 6.480000e-01, double 1.000000e+01, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 3.520000e-01, double 6.110000e-01, double 1.100000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 3.890000e-01, double 6.250000e-01, double 1.200000e+01, double 4.000000e+00, double 3.600000e+01, double 4.000000e+01, double 3.750000e-01, double 1.440000e-01, double 1.300000e+01, double 3.000000e+00, double 4.000000e+01, double 4.300000e+01, double 8.560000e-01, double 3.890000e-01, double 1.400000e+01, double 3.000000e+00, double 4.300000e+01, double 4.600000e+01, double 6.110000e-01, double 1.600000e-01, double 1.500000e+01, double 3.000000e+00, double 4.600000e+01, double 4.900000e+01, double 8.400000e-01, double 2.170000e-01, double 1.600000e+01, double 3.000000e+00, double 4.900000e+01, double 5.200000e+01, double 7.830000e-01, double 1.840000e-01, double 1.700000e+01, double 2.000000e+00, double 5.200000e+01, double 5.400000e+01, double 8.160000e-01, double 8.860000e-01, double 1.800000e+01, double 3.000000e+00, double 5.400000e+01, double 5.700000e+01, double 1.140000e-01, double 3.130000e-01, double 1.900000e+01, double 2.000000e+00, double 5.700000e+01, double 5.900000e+01, double 6.870000e-01, double 4.520000e-01, double 2.000000e+01, double 1.000000e+00, double 5.900000e+01, double 6.000000e+01, double 5.480000e-01, double 9.080000e-01, double 4.410000e+04, double 2.000000e+01, double 0.000000e+00, double 3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 5.600000e-02, double 1.000000e+00, double 3.000000e+00, double 4.000000e+00, double 7.000000e+00, double 9.440000e-01, double 6.110000e-01, double 2.000000e+00, double 4.000000e+00, double 7.000000e+00, double 1.100000e+01, double 3.890000e-01, double 1.670000e-01, double 3.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 8.330000e-01, double 7.220000e-01, double 4.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 2.780000e-01, double 1.390000e-01, double 5.000000e+00, double 1.000000e+00, double 1.700000e+01, double 1.800000e+01, double 8.610000e-01, double 9.170000e-01, double 6.000000e+00, double 3.000000e+00, double 1.800000e+01, double 2.100000e+01, double 8.300000e-02, double 5.830000e-01, double 7.000000e+00, double 3.000000e+00, double 2.100000e+01, double 2.400000e+01, double 4.170000e-01, double 2.500000e-01, double 8.000000e+00, double 3.000000e+00, double 2.400000e+01, double 2.700000e+01, double 7.500000e-01, double 8.050000e-01, double 9.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 1.940000e-01, double 5.740000e-01, double 1.000000e+01, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 4.260000e-01, double 5.370000e-01, double 1.100000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 4.630000e-01, double 8.190000e-01, double 1.200000e+01, double 4.000000e+00, double 3.600000e+01, double 4.000000e+01, double 1.800000e-01, double 1.000000e-01, double 1.300000e+01, double 3.000000e+00, double 4.000000e+01, double 4.300000e+01, double 9.000000e-01, double 4.680000e-01, double 1.400000e+01, double 3.000000e+00, double 4.300000e+01, double 4.600000e+01, double 5.320000e-01, double 6.230000e-01, double 1.500000e+01, double 3.000000e+00, double 4.600000e+01, double 4.900000e+01, double 3.760000e-01, double 4.500000e-01, double 1.600000e+01, double 3.000000e+00, double 4.900000e+01, double 5.200000e+01, double 5.500000e-01, double 5.520000e-01, double 1.700000e+01, double 3.000000e+00, double 5.200000e+01, double 5.500000e+01, double 4.480000e-01, double 4.030000e-01, double 1.800000e+01, double 2.000000e+00, double 5.500000e+01, double 5.700000e+01, double 5.970000e-01, double 6.430000e-01, double 1.900000e+01, double 2.000000e+00, double 5.700000e+01, double 5.900000e+01, double 3.570000e-01, double 7.220000e-01, double 2.000000e+01, double 2.000000e+00, double 5.900000e+01, double 6.100000e+01, double 2.780000e-01, double 9.600000e-01, double 3.200000e+04, double 2.000000e+01, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 5.280000e-01, double 1.000000e+00, double 2.000000e+00, double 2.000000e+00, double 4.000000e+00, double 4.720000e-01, double 3.050000e-01, double 2.000000e+00, double 2.000000e+00, double 4.000000e+00, double 6.000000e+00, double 6.940000e-01, double 8.300000e-02, double 3.000000e+00, double 1.000000e+00, double 6.000000e+00, double 7.000000e+00, double 9.170000e-01, double 8.610000e-01, double 4.000000e+00, double 2.000000e+00, double 7.000000e+00, double 9.000000e+00, double 1.390000e-01, double 6.390000e-01, double 5.000000e+00, double 2.000000e+00, double 9.000000e+00, double 1.100000e+01, double 3.610000e-01, double 4.170000e-01, double 6.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 5.830000e-01, double 8.300000e-02, double 7.000000e+00, double 2.000000e+00, double 1.400000e+01, double 1.600000e+01, double 9.170000e-01, double 7.500000e-01, double 8.000000e+00, double 3.000000e+00, double 1.600000e+01, double 1.900000e+01, double 2.500000e-01, double 8.700000e-01, double 9.000000e+00, double 3.000000e+00, double 1.900000e+01, double 2.200000e+01, double 1.300000e-01, double 8.330000e-01, double 1.000000e+01, double 4.000000e+00, double 2.200000e+01, double 2.600000e+01, double 1.670000e-01, double 3.890000e-01, double 1.100000e+01, double 4.000000e+00, double 2.600000e+01, double 3.000000e+01, double 6.110000e-01, double 4.780000e-01, double 1.200000e+01, double 4.000000e+00, double 3.000000e+01, double 3.400000e+01, double 5.220000e-01, double 3.300000e-02, double 1.300000e+01, double 3.000000e+00, double 3.400000e+01, double 3.700000e+01, double 9.670000e-01, double 9.170000e-01, double 1.400000e+01, double 4.000000e+00, double 3.700000e+01, double 4.100000e+01, double 8.300000e-02, double 6.170000e-01, double 1.500000e+01, double 3.000000e+00, double 4.100000e+01, double 4.400000e+01, double 3.830000e-01, double 9.950000e-01, double 1.600000e+01, double 4.000000e+00, double 4.400000e+01, double 4.800000e+01, double 5.000000e-03, double 2.740000e-01, double 1.700000e+01, double 3.000000e+00, double 4.800000e+01, double 5.100000e+01, double 7.260000e-01, double 4.800000e-01, double 1.800000e+01, double 3.000000e+00, double 5.100000e+01, double 5.400000e+01, double 5.190000e-01, double 2.610000e-01, double 1.900000e+01, double 2.000000e+00, double 5.400000e+01, double 5.600000e+01, double 7.390000e-01, double 8.840000e-01, double 2.000000e+01, double 2.000000e+00, double 5.600000e+01, double 5.800000e+01, double 1.160000e-01, double 1.000000e+00, double 2.400000e+04, double 2.000000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 3.000000e+00, double 1.000000e+00, double 0x3FED55557FECD2DA, double 1.000000e+00, double 3.000000e+00, double 3.000000e+00, double 6.000000e+00, double 0x3FB55554002B75AF, double 0x3FE2AAAAFFD9A5B4, double 2.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FDAAAAA004CB497, double 2.500000e-01, double 3.000000e+00, double 2.000000e+00, double 9.000000e+00, double 1.100000e+01, double 7.500000e-01, double 0x3FED5556003CBBC8, double 4.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 0x3FB5554FFFD1EFBD, double 0x3FE2AAABFFF00731, double 5.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 0x3FDAAAA8001FF19E, double 2.500000e-01, double 6.000000e+00, double 3.000000e+00, double 1.700000e+01, double 2.000000e+01, double 7.500000e-01, double 0x3FE12F6800221760, double 7.000000e+00, double 3.000000e+00, double 2.000000e+01, double 2.300000e+01, double 0x3FDDA12FFFBBD141, double 5.000000e-01, double 8.000000e+00, double 4.000000e+00, double 2.300000e+01, double 2.700000e+01, double 5.000000e-01, double 0x3FAC71D6002E2171, double 9.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 0x3FEE38E2A0265939, double 0x3FD9C71FFF79C843, double 1.000000e+01, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 0x3FE31C7000431BDF, double 0x3FE888899FE29A25, double 1.100000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 0x3FCDDDD9A0ABEDC0, double 0x3FE9C71D5FD9A6C7, double 1.200000e+01, double 3.000000e+00, double 3.600000e+01, double 3.900000e+01, double 0x3FC8E38AA0CFBB36, double 0x3FE8A28B7FC7D8BF, double 1.300000e+01, double 3.000000e+00, double 3.900000e+01, double 4.200000e+01, double 0x3FCD75D23F27882F, double 0x3FE38E38DFBCE0E9, double 1.400000e+01, double 3.000000e+00, double 4.200000e+01, double 4.500000e+01, double 0x3FD8E38E40863E2E, double 0x3FDCC485BFE1C69E, double 1.500000e+01, double 3.000000e+00, double 4.500000e+01, double 4.800000e+01, double 0x3FE19DBD200F1CB1, double 0x3FC8E3927F26AF4A, double 1.600000e+01, double 2.000000e+00, double 4.800000e+01, double 5.000000e+01, double 0x3FE9C71B6036542E, double 0x3FED38E3FFCCDCF1, double 1.700000e+01, double 3.000000e+00, double 5.000000e+01, double 5.300000e+01, double 0x3FB638DFFFE14A7E, double 0x3FE293E99FFD7217, double 1.800000e+01, double 3.000000e+00, double 5.300000e+01, double 5.600000e+01, double 0x3FDAD82CC0051BD1, double 0x3FBD097FFDDE8A06, double 1.900000e+01, double 2.000000e+00, double 5.600000e+01, double 5.800000e+01, double 0x3FEC5ED000442EBF, double 0x3FE114523FF1653B, double 2.000000e+01, double 2.000000e+00, double 5.800000e+01, double 6.000000e+01, double 0x3FDDD75B5FE6DF36, double 0x3FE61E1E1FF306EB, double 2.205000e+04, double 2.000000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 3.000000e+00, double 1.000000e+00, double 0x3FED55557FECD2DA, double 1.000000e+00, double 3.000000e+00, double 3.000000e+00, double 6.000000e+00, double 0x3FB55554002B75AF, double 0x3FE2AAAAFFD9A5B4, double 2.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FDAAAAA004CB497, double 2.500000e-01, double 3.000000e+00, double 2.000000e+00, double 9.000000e+00, double 1.100000e+01, double 7.500000e-01, double 0x3FED5556003CBBC8, double 4.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 0x3FB5554FFFD1EFBD, double 0x3FE2AAABFFF00731, double 5.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 0x3FDAAAA8001FF19E, double 2.500000e-01, double 6.000000e+00, double 3.000000e+00, double 1.700000e+01, double 2.000000e+01, double 7.500000e-01, double 0x3FCA12F57F624F9A, double 7.000000e+00, double 3.000000e+00, double 2.000000e+01, double 2.300000e+01, double 0x3FE97B42A0276C19, double 0x3FC5555580FFB399, double 8.000000e+00, double 3.000000e+00, double 2.300000e+01, double 2.600000e+01, double 0x3FEAAAAA9FC0131A, double 0x3FE71C72C01993AD, double 9.000000e+00, double 4.000000e+00, double 2.600000e+01, double 3.000000e+01, double 0x3FD1C71AA0032EF8, double 0x3FC38E3FFEF39086, double 1.000000e+01, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 0x3FEB1C7000431BDF, double 0x3FE222233FED7835, double 1.100000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 0x3FDBBBB9A05B65E8, double 0x3FEDED0A9FC125FB, double 1.200000e+01, double 4.000000e+00, double 3.600000e+01, double 4.000000e+01, double 0x3FB097AAA009F2B3, double 0x3FBE38EFFEB3AD4A, double 1.300000e+01, double 3.000000e+00, double 4.000000e+01, double 4.300000e+01, double 0x3FEC38E200298A57, double 0x3FB7B43900046548, double 1.400000e+01, double 2.000000e+00, double 4.300000e+01, double 4.500000e+01, double 0x3FED0978E0442B87, double 0x3FEDE625BFBE57A5, double 1.500000e+01, double 3.000000e+00, double 4.500000e+01, double 4.800000e+01, double 0x3FB0CED17FEA0F0B, double 0x3FE269A9200E2C2C, double 1.600000e+01, double 3.000000e+00, double 4.800000e+01, double 5.100000e+01, double 0x3FDB2CADBFE3A7A7, double 0x3FCDB30F00CEDCF2, double 1.700000e+01, double 2.000000e+00, double 5.100000e+01, double 5.300000e+01, double 0x3FE8933C3FCC48C3, double 0x3FE84446602E0A77, double 1.800000e+01, double 3.000000e+00, double 5.300000e+01, double 5.600000e+01, double 0x3FCEEEE65F117FD2, double 0x3FC8000A80A6476C, double 1.900000e+01, double 2.000000e+00, double 5.600000e+01, double 5.800000e+01, double 0x3FE9FFFD5FD66E25, double 0x3FE114548001647B, double 2.000000e+01, double 2.000000e+00, double 5.800000e+01, double 6.000000e+01, double 0x3FDDD756DFC6E0B6, double 0x3FD07C26BFE5E72E, double 1.600000e+04, double 2.000000e+01, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 0x3FEE38E3A03CBAB5, double 1.000000e+00, double 2.000000e+00, double 2.000000e+00, double 4.000000e+00, double 0x3FAC71C55FDE1B86, double 0x3FE71C71FFE66E78, double 2.000000e+00, double 2.000000e+00, double 4.000000e+00, double 6.000000e+00, double 0x3FD1C71C0033230F, double 5.000000e-01, double 3.000000e+00, double 2.000000e+00, double 6.000000e+00, double 8.000000e+00, double 5.000000e-01, double 0x3FD1C71D402CC0D3, double 4.000000e+00, double 2.000000e+00, double 8.000000e+00, double 1.000000e+01, double 0x3FE71C715FE99F96, double 0x3FAC71D6002E2171, double 5.000000e+00, double 1.000000e+00, double 1.000000e+01, double 1.100000e+01, double 0x3FEE38E2A0265939, double 0x3FEAAAAA9FC0131A, double 6.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 0x3FC5555560C95D45, double 0x3FCA12F57F624F9A, double 7.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 0x3FE97B42A0276C19, double 0x3FC5555580FFB399, double 8.000000e+00, double 3.000000e+00, double 1.700000e+01, double 2.000000e+01, double 0x3FEAAAAA9FC0131A, double 0x3FE15555FD8D89EC, double 9.000000e+00, double 3.000000e+00, double 2.000000e+01, double 2.300000e+01, double 0x3FDD5553FF868870, double 0x3FE4E38FFFBCE421, double 1.000000e+01, double 4.000000e+00, double 2.300000e+01, double 2.700000e+01, double 0x3FD638E0008637BD, double 0x3FC555597F33780E, double 1.100000e+01, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 0x3FEAAAA9A03321FD, double 0x3FE71C733FE00C3C, double 1.200000e+01, double 4.000000e+00, double 3.000000e+01, double 3.400000e+01, double 0x3FD1C719A0763DDB, double 0x3FD1C71FFF79C843, double 1.300000e+01, double 3.000000e+00, double 3.400000e+01, double 3.700000e+01, double 0x3FE71C7000431BDF, double 0x3FE35557FFE00E62, double 1.400000e+01, double 3.000000e+00, double 3.700000e+01, double 4.000000e+01, double 0x3FD95550003FE33C, double 0x3FE416C33FD2A043, double 1.500000e+01, double 3.000000e+00, double 4.000000e+01, double 4.300000e+01, double 0x3FD7D2799F7E350F, double 0x3FE15E189FBCA6ED, double 1.600000e+01, double 3.000000e+00, double 4.300000e+01, double 4.600000e+01, double 0x3FDD43CEC086B225, double 0x3FD7C71FFF79C843, double 1.700000e+01, double 3.000000e+00, double 4.600000e+01, double 4.900000e+01, double 0x3FE41C7000431BDF, double 0x3F811198002BE7C2, double 1.800000e+01, double 2.000000e+00, double 4.900000e+01, double 5.100000e+01, double 0x3FEFBBB99FD1F589, double 0x3FE00002BFD677CF, double 1.900000e+01, double 2.000000e+00, double 5.100000e+01, double 5.300000e+01, double 0x3FDFFFFA601CBA0F, double 0x3FEC60EF600E7756, double 2.000000e+01, double 2.000000e+00, double 5.300000e+01, double 5.500000e+01, double 0x3FBCF884BF1F98AA, double 0x3FE4210C5FE85094, double 4.800000e+04, double 1.100000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 1.670000e-01, double 1.000000e+00, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.330000e-01, double 8.330000e-01, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.000000e+00, double 1.670000e-01, double 5.000000e-01, double 3.000000e+00, double 3.000000e+00, double 8.000000e+00, double 1.100000e+01, double 5.000000e-01, double 1.670000e-01, double 4.000000e+00, double 4.000000e+00, double 1.100000e+01, double 1.500000e+01, double 8.330000e-01, double 1.670000e-01, double 5.000000e+00, double 4.000000e+00, double 1.500000e+01, double 1.900000e+01, double 8.330000e-01, double 5.830000e-01, double 6.000000e+00, double 3.000000e+00, double 1.900000e+01, double 2.200000e+01, double 4.170000e-01, double 9.170000e-01, double 7.000000e+00, double 4.000000e+00, double 2.200000e+01, double 2.600000e+01, double 8.300000e-02, double 9.440000e-01, double 8.000000e+00, double 4.000000e+00, double 2.600000e+01, double 3.000000e+01, double 5.500000e-02, double 4.200000e-02, double 9.000000e+00, double 2.000000e+00, double 3.000000e+01, double 3.200000e+01, double 9.580000e-01, double 5.670000e-01, double 1.000000e+01, double 3.000000e+00, double 3.200000e+01, double 3.500000e+01, double 4.330000e-01, double 1.670000e-01, double 1.100000e+01, double 2.000000e+00, double 3.500000e+01, double 3.700000e+01, double 8.330000e-01, double 6.180000e-01, double 4.410000e+04, double 1.100000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 1.670000e-01, double 1.000000e+00, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.330000e-01, double 8.330000e-01, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.000000e+00, double 1.670000e-01, double 5.000000e-01, double 3.000000e+00, double 3.000000e+00, double 8.000000e+00, double 1.100000e+01, double 5.000000e-01, double 1.670000e-01, double 4.000000e+00, double 4.000000e+00, double 1.100000e+01, double 1.500000e+01, double 8.330000e-01, double 1.670000e-01, double 5.000000e+00, double 5.000000e+00, double 1.500000e+01, double 2.000000e+01, double 8.330000e-01, double 2.500000e-01, double 6.000000e+00, double 3.000000e+00, double 2.000000e+01, double 2.300000e+01, double 7.500000e-01, double 5.830000e-01, double 7.000000e+00, double 4.000000e+00, double 2.300000e+01, double 2.700000e+01, double 4.170000e-01, double 5.500000e-02, double 8.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 9.440000e-01, double 3.750000e-01, double 9.000000e+00, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 6.250000e-01, double 3.000000e-01, double 1.000000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 7.000000e-01, double 1.670000e-01, double 1.100000e+01, double 2.000000e+00, double 3.600000e+01, double 3.800000e+01, double 8.330000e-01, double 1.000000e+00, double 3.200000e+04, double 1.100000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 1.670000e-01, double 1.000000e+00, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.330000e-01, double 8.330000e-01, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.000000e+00, double 1.670000e-01, double 5.000000e-01, double 3.000000e+00, double 3.000000e+00, double 8.000000e+00, double 1.100000e+01, double 5.000000e-01, double 1.670000e-01, double 4.000000e+00, double 4.000000e+00, double 1.100000e+01, double 1.500000e+01, double 8.330000e-01, double 1.670000e-01, double 5.000000e+00, double 5.000000e+00, double 1.500000e+01, double 2.000000e+01, double 8.330000e-01, double 2.500000e-01, double 6.000000e+00, double 4.000000e+00, double 2.000000e+01, double 2.400000e+01, double 7.500000e-01, double 2.500000e-01, double 7.000000e+00, double 5.000000e+00, double 2.400000e+01, double 2.900000e+01, double 7.500000e-01, double 5.500000e-02, double 8.000000e+00, double 4.000000e+00, double 2.900000e+01, double 3.300000e+01, double 9.440000e-01, double 3.750000e-01, double 9.000000e+00, double 4.000000e+00, double 3.300000e+01, double 3.700000e+01, double 6.250000e-01, double 4.720000e-01, double 1.000000e+01, double 3.000000e+00, double 3.700000e+01, double 4.000000e+01, double 5.280000e-01, double 9.370000e-01, double 1.100000e+01, double 1.000000e+00, double 4.000000e+01, double 4.100000e+01, double 6.200000e-02, double 1.000000e+00, double 2.400000e+04, double 1.100000e+01, double 0.000000e+00, double 3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3FC55555FFB34B69, double 1.000000e+00, double 2.000000e+00, double 4.000000e+00, double 6.000000e+00, double 0x3FEAAAAA80132D26, double 0x3FEAAAAAFFD9A5B4, double 2.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FC555540099692E, double 5.000000e-01, double 3.000000e+00, double 4.000000e+00, double 9.000000e+00, double 1.300000e+01, double 5.000000e-01, double 5.000000e-01, double 4.000000e+00, double 5.000000e+00, double 1.300000e+01, double 1.800000e+01, double 5.000000e-01, double 0x3FEAAAABFFF00731, double 5.000000e+00, double 5.000000e+00, double 1.800000e+01, double 2.300000e+01, double 0x3FC55550003FE33C, double 2.500000e-01, double 6.000000e+00, double 4.000000e+00, double 2.300000e+01, double 2.700000e+01, double 7.500000e-01, double 2.500000e-01, double 7.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 7.500000e-01, double 0x3FE38E3AC03CBDEE, double 8.000000e+00, double 4.000000e+00, double 3.000000e+01, double 3.400000e+01, double 0x3FD8E38A9FBCDA78, double 0x3FCAAAAFFFC01CC4, double 9.000000e+00, double 3.000000e+00, double 3.400000e+01, double 3.700000e+01, double 0x3FE95554000FF8CF, double 0x3FE888899FE29A25, double 1.000000e+01, double 4.000000e+00, double 3.700000e+01, double 4.100000e+01, double 0x3FCDDDD9A0ABEDC0, double 0x3FDCF3D23F7D6E6B, double 1.100000e+01, double 4.000000e+00, double 4.100000e+01, double 4.500000e+01, double 0x3FE18616E04148CB, double 0x3FD1C71FFF79C843, double 2.205000e+04, double 1.100000e+01, double 0.000000e+00, double 3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3FC55555FFB34B69, double 1.000000e+00, double 2.000000e+00, double 4.000000e+00, double 6.000000e+00, double 0x3FEAAAAA80132D26, double 0x3FEAAAAAFFD9A5B4, double 2.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FC555540099692E, double 5.000000e-01, double 3.000000e+00, double 4.000000e+00, double 9.000000e+00, double 1.300000e+01, double 5.000000e-01, double 5.000000e-01, double 4.000000e+00, double 4.000000e+00, double 1.300000e+01, double 1.700000e+01, double 5.000000e-01, double 5.000000e-01, double 5.000000e+00, double 4.000000e+00, double 1.700000e+01, double 2.100000e+01, double 5.000000e-01, double 0x3FED5556003CBBC8, double 6.000000e+00, double 4.000000e+00, double 2.100000e+01, double 2.500000e+01, double 0x3FB5554FFFD1EFBD, double 2.500000e-01, double 7.000000e+00, double 4.000000e+00, double 2.500000e+01, double 2.900000e+01, double 7.500000e-01, double 0x3FE38E3AC03CBDEE, double 8.000000e+00, double 4.000000e+00, double 2.900000e+01, double 3.300000e+01, double 0x3FD8E38A9FBCDA78, double 0x3FDD5557FFE00E62, double 9.000000e+00, double 4.000000e+00, double 3.300000e+01, double 3.700000e+01, double 0x3FE15554000FF8CF, double 0x3FE44446602E0A77, double 1.000000e+01, double 4.000000e+00, double 3.700000e+01, double 4.100000e+01, double 0x3FD777733FA3EB12, double 0x3FE2AAAD3FE9A4F5, double 1.100000e+01, double 4.000000e+00, double 4.100000e+01, double 4.500000e+01, double 0x3FDAAAA55FF65FC3, double 0x3FDC0004005985F2, double 1.600000e+04, double 1.100000e+01, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3FC55555FFB34B69, double 1.000000e+00, double 0.000000e+00, double 4.000000e+00, double 6.000000e+00, double 0x3FEAAAAA80132D26, double 0x3FEAAAAAFFD9A5B4, double 2.000000e+00, double 0.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FC555540099692E, double 5.000000e-01, double 3.000000e+00, double 0.000000e+00, double 9.000000e+00, double 1.300000e+01, double 5.000000e-01, double 5.000000e-01, double 4.000000e+00, double 0.000000e+00, double 1.300000e+01, double 1.800000e+01, double 5.000000e-01, double 0x3FEAAAABFFF00731, double 5.000000e+00, double 0.000000e+00, double 1.800000e+01, double 2.300000e+01, double 0x3FC55550003FE33C, double 7.500000e-01, double 6.000000e+00, double 0.000000e+00, double 2.300000e+01, double 2.700000e+01, double 2.500000e-01, double 7.500000e-01, double 7.000000e+00, double 0.000000e+00, double 2.700000e+01, double 3.100000e+01, double 2.500000e-01, double 0x3FE38E3AC03CBDEE, double 8.000000e+00, double 0.000000e+00, double 3.100000e+01, double 3.500000e+01, double 0x3FD8E38A9FBCDA78, double 0x3FDD5557FFE00E62, double 9.000000e+00, double 0.000000e+00, double 3.500000e+01, double 3.900000e+01, double 0x3FE15554000FF8CF, double 0x3FC555597F33780E, double 1.000000e+01, double 0.000000e+00, double 3.900000e+01, double 4.200000e+01, double 0x3FEAAAA9A03321FD, double 0x3FE9C71D5FD9A6C7, double 1.100000e+01, double 0.000000e+00, double 4.200000e+01, double 4.600000e+01, double 0x3FC8E38AA0CFBB36, double 4.375000e-01], align 8
@subdv_table = global [23 x %struct.anon.55] [%struct.anon.55 zeroinitializer, %struct.anon.55 zeroinitializer, %struct.anon.55 zeroinitializer, %struct.anon.55 zeroinitializer, %struct.anon.55 zeroinitializer, %struct.anon.55 { i32 0, i32 1 }, %struct.anon.55 { i32 1, i32 1 }, %struct.anon.55 { i32 1, i32 1 }, %struct.anon.55 { i32 1, i32 2 }, %struct.anon.55 { i32 2, i32 2 }, %struct.anon.55 { i32 2, i32 3 }, %struct.anon.55 { i32 2, i32 3 }, %struct.anon.55 { i32 3, i32 4 }, %struct.anon.55 { i32 3, i32 4 }, %struct.anon.55 { i32 3, i32 4 }, %struct.anon.55 { i32 4, i32 5 }, %struct.anon.55 { i32 4, i32 5 }, %struct.anon.55 { i32 4, i32 6 }, %struct.anon.55 { i32 5, i32 6 }, %struct.anon.55 { i32 5, i32 6 }, %struct.anon.55 { i32 5, i32 7 }, %struct.anon.55 { i32 6, i32 7 }, %struct.anon.55 { i32 6, i32 7 }], align 4
@huf_tbl_noESC = internal constant [15 x i32] [i32 1, i32 2, i32 5, i32 7, i32 7, i32 10, i32 10, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13], align 4
@cb_esc_sign = internal global i32 0, align 4
@cb_esc_buf = internal global [288 x i32] zeroinitializer, align 4
@cb_esc_end = internal global i32* null, align 4
@scfsi_calc.scfsi_band = internal constant [5 x i32] [i32 0, i32 6, i32 11, i32 16, i32 21], align 4
@scfsi_calc.slen1_n = internal constant [16 x i32] [i32 0, i32 1, i32 1, i32 1, i32 8, i32 2, i32 2, i32 2, i32 4, i32 4, i32 4, i32 8, i32 8, i32 8, i32 16, i32 16], align 4
@scfsi_calc.slen2_n = internal constant [16 x i32] [i32 0, i32 2, i32 4, i32 8, i32 1, i32 2, i32 4, i32 8, i32 2, i32 4, i32 8, i32 2, i32 4, i32 8, i32 4, i32 8], align 4
@scfsi_calc.slen1_tab = internal constant [16 x i32] [i32 0, i32 0, i32 0, i32 0, i32 3, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 4, i32 4], align 4
@scfsi_calc.slen2_tab = internal constant [16 x i32] [i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 2, i32 3], align 4
@ts_real_time.initial_time = internal global i32 0, align 4
@ts_process_time.initial_time = internal global i32 0, align 4
@.str.294 = private unnamed_addr constant [75 x i8] c"    Frame          |  CPU/estimated  |  time/estimated | play/CPU |   ETA\0A\00", align 1
@.str.1.295 = private unnamed_addr constant [96 x i8] c"\0D%6ld/%6ld(%3d%%)|%2d:%02d:%02d/%2d:%02d:%02d|%2d:%02d:%02d/%2d:%02d:%02d|%10.4f|%2d:%02d:%02d \00", align 1
@s_freq_table = global [2 x [4 x double]] [[4 x double] [double 2.205000e+01, double 2.400000e+01, double 1.600000e+01, double 0.000000e+00], [4 x double] [double 4.410000e+01, double 4.800000e+01, double 3.200000e+01, double 0.000000e+00]], align 8
@bitrate_table = global [2 x [15 x i32]] [[15 x i32] [i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 144, i32 160], [15 x i32] [i32 0, i32 32, i32 40, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 160, i32 192, i32 224, i32 256, i32 320]], align 4
@NativeByteOrder = global i32 0, align 4
@putmask = global [9 x i32] [i32 0, i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127, i32 255], align 4
@.str.302 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1.303 = private unnamed_addr constant [37 x i8] c"MPEG1 samplerates(kHz): 32 44.1 48 \0A\00", align 1
@.str.2.304 = private unnamed_addr constant [16 x i8] c"bitrates(kbs): \00", align 1
@.str.3.305 = private unnamed_addr constant [4 x i8] c"%i \00", align 1
@.str.4.306 = private unnamed_addr constant [38 x i8] c"MPEG2 samplerates(kHz): 16 22.05 24 \0A\00", align 1
@.str.5.309 = private unnamed_addr constant [51 x i8] c"Bitrate %dkbs not legal for %iHz output sampling.\0A\00", align 1
@.str.6.312 = private unnamed_addr constant [47 x i8] c"SmpFrqIndex: %ldHz is not a legal sample rate\0A\00", align 1
@.str.7.313 = private unnamed_addr constant [23 x i8] c"Unable to allocate %s\0A\00", align 1
@.str.8.314 = private unnamed_addr constant [5 x i8] c"ABCD\00", align 1
@.str.9.315 = private unnamed_addr constant [5 x i8] c"DCBA\00", align 1
@.str.10.318 = private unnamed_addr constant [41 x i8] c"j == (bs->buf_size-1 - bs->buf_byte_idx)\00", align 1
@.str.11.319 = private unnamed_addr constant [7 x i8] c"util.c\00", align 1
@__func__.copy_buffer = private unnamed_addr constant [12 x i8] c"copy_buffer\00", align 1
@.str.12.322 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@.str.13.327 = private unnamed_addr constant [51 x i8] c"Cannot read or write more than %d bits at a time.\0A\00", align 1
@.str.14.328 = private unnamed_addr constant [22 x i8] c"bs->buf_byte_idx >= 0\00", align 1
@__func__.putbits = private unnamed_addr constant [8 x i8] c"putbits\00", align 1
@.str.329 = private unnamed_addr constant [13 x i8] c"sf_ok!=10000\00", align 1
@.str.1.330 = private unnamed_addr constant [14 x i8] c"vbrquantize.c\00", align 1
@__func__.find_scalefac = private unnamed_addr constant [14 x i8] c"find_scalefac\00", align 1
@SizeOfEmptyFrame = global [2 x [2 x i32]] [[2 x i32] [i32 32, i32 17], [2 x i32] [i32 17, i32 9]], align 4
@pVbrFrames = global i32* null, align 4
@nVbrNumFrames = global i32 0, align 4
@nVbrFrameBufferSize = global i32 0, align 4
@VBRTag = internal global [5 x i8] c"Xing\00", align 1
@GetVbrTag.sr_table = internal global [4 x i32] [i32 44100, i32 48000, i32 32000, i32 99999], align 4
@g_Position = internal global [100 x i32] zeroinitializer, align 4
@pbtStreamBuffer = internal global [216 x i8] zeroinitializer, align 1
@nZeroStreamSize = internal global i32 0, align 4
@.str.335 = private unnamed_addr constant [34 x i8] c"illegal sampling frequency index\0A\00", align 1
@InitVbrTag.framesize = internal constant [3 x i32] [i32 208, i32 192, i32 288], align 4
@TotalFrameSize = internal global i32 0, align 4
@.str.1.336 = private unnamed_addr constant [34 x i8] c"Xing VBR header problem...use -t\0A\00", align 1
@.str.2.339 = private unnamed_addr constant [4 x i8] c"rb+\00", align 1
@.str.3.340 = private unnamed_addr constant [7 x i8] c"LAME%s\00", align 1
@.str.345 = private unnamed_addr constant [39 x i8] c"LAME version %s (www.sulaco.org/mp3) \0A\00", align 1
@.str.1.346 = private unnamed_addr constant [67 x i8] c"GPSYCHO: GPL psycho-acoustic and noise shaping model version %s. \0A\00", align 1
@lpszVersion = internal global [80 x i8] zeroinitializer, align 1
@.str.2.347 = private unnamed_addr constant [8 x i8] c"%d.%02d\00", align 1
@.str.3.348 = private unnamed_addr constant [8 x i8] c"%d:%02d\00", align 1

; Function Attrs: nounwind
define arm_aapcscc void @fft_short([256 x float]*, i32, i16**) #0 {
  %allocaVec = alloca <4 x i16>, align 16
  %Recovery = alloca i16, align 2
  %allocaVec322 = alloca <4 x i16>, align 16
  %Recovery1 = alloca i16, align 2
  %allocaVec323 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec324 = alloca <4 x i32>, align 16
  %CastInst2 = alloca i32, align 4
  %CastInstVec3 = alloca <4 x i32>, align 16
  %allocaVec325 = alloca <4 x i32>, align 16
  %CastInst4 = alloca i32, align 4
  %CastInstVec5 = alloca <4 x i32>, align 16
  %allocaVec326 = alloca <4 x i32>, align 16
  %CastInst6 = alloca i32, align 4
  %CastInstVec7 = alloca <4 x i32>, align 16
  %allocaVec327 = alloca <4 x float>, align 16
  %CastInst8 = alloca float, align 4
  %CastInstVec9 = alloca <4 x float>, align 16
  %allocaVec328 = alloca <4 x i32>, align 16
  %CastInst10 = alloca i32, align 4
  %CastInstVec11 = alloca <4 x i32>, align 16
  %allocaVec329 = alloca <4 x i32>, align 16
  %CastInst12 = alloca i32, align 4
  %CastInstVec13 = alloca <4 x i32>, align 16
  %allocaVec330 = alloca <4 x i32>, align 16
  %CastInst14 = alloca i32, align 4
  %CastInstVec15 = alloca <4 x i32>, align 16
  %allocaVec331 = alloca <4 x float>, align 16
  %CastInst16 = alloca float, align 4
  %CastInstVec17 = alloca <4 x float>, align 16
  %allocaVec332 = alloca <4 x i32>, align 16
  %CastInst18 = alloca i32, align 4
  %CastInstVec19 = alloca <4 x i32>, align 16
  %allocaVec333 = alloca <4 x i32>, align 16
  %CastInst20 = alloca i32, align 4
  %CastInstVec21 = alloca <4 x i32>, align 16
  %allocaVec334 = alloca <4 x i32>, align 16
  %CastInst22 = alloca i32, align 4
  %CastInstVec23 = alloca <4 x i32>, align 16
  %allocaVec335 = alloca <4 x float>, align 16
  %CastInst24 = alloca float, align 4
  %CastInstVec25 = alloca <4 x float>, align 16
  %allocaVec336 = alloca <4 x i32>, align 16
  %CastInst26 = alloca i32, align 4
  %CastInstVec27 = alloca <4 x i32>, align 16
  %allocaVec337 = alloca <4 x i32>, align 16
  %CastInst28 = alloca i32, align 4
  %CastInstVec29 = alloca <4 x i32>, align 16
  %allocaVec338 = alloca <4 x i32>, align 16
  %CastInst30 = alloca i32, align 4
  %CastInstVec31 = alloca <4 x i32>, align 16
  %allocaVec339 = alloca <4 x float>, align 16
  %CastInst32 = alloca float, align 4
  %CastInstVec33 = alloca <4 x float>, align 16
  %allocaVec340 = alloca <4 x i32>, align 16
  %CastInst34 = alloca i32, align 4
  %CastInstVec35 = alloca <4 x i32>, align 16
  %allocaVec341 = alloca <4 x i32>, align 16
  %CastInst36 = alloca i32, align 4
  %CastInstVec37 = alloca <4 x i32>, align 16
  %allocaVec342 = alloca <4 x i32>, align 16
  %CastInst38 = alloca i32, align 4
  %CastInstVec39 = alloca <4 x i32>, align 16
  %allocaVec343 = alloca <4 x float>, align 16
  %CastInst40 = alloca float, align 4
  %CastInstVec41 = alloca <4 x float>, align 16
  %allocaVec344 = alloca <4 x i32>, align 16
  %CastInst42 = alloca i32, align 4
  %CastInstVec43 = alloca <4 x i32>, align 16
  %allocaVec345 = alloca <4 x i32>, align 16
  %CastInst44 = alloca i32, align 4
  %CastInstVec45 = alloca <4 x i32>, align 16
  %allocaVec346 = alloca <4 x i32>, align 16
  %CastInst46 = alloca i32, align 4
  %CastInstVec47 = alloca <4 x i32>, align 16
  %allocaVec347 = alloca <4 x float>, align 16
  %CastInst48 = alloca float, align 4
  %CastInstVec49 = alloca <4 x float>, align 16
  %allocaVec348 = alloca <4 x i32>, align 16
  %CastInst50 = alloca i32, align 4
  %CastInstVec51 = alloca <4 x i32>, align 16
  %allocaVec349 = alloca <4 x i32>, align 16
  %CastInst52 = alloca i32, align 4
  %CastInstVec53 = alloca <4 x i32>, align 16
  %allocaVec350 = alloca <4 x i32>, align 16
  %CastInst54 = alloca i32, align 4
  %CastInstVec55 = alloca <4 x i32>, align 16
  %allocaVec351 = alloca <4 x float>, align 16
  %CastInst56 = alloca float, align 4
  %CastInstVec57 = alloca <4 x float>, align 16
  %allocaVec352 = alloca <4 x i32>, align 16
  %CastInst58 = alloca i32, align 4
  %CastInstVec59 = alloca <4 x i32>, align 16
  %allocaVec353 = alloca <4 x i32>, align 16
  %CastInst60 = alloca i32, align 4
  %CastInstVec61 = alloca <4 x i32>, align 16
  %allocaVec354 = alloca <4 x i32>, align 16
  %CastInst62 = alloca i32, align 4
  %CastInstVec63 = alloca <4 x i32>, align 16
  %allocaVec355 = alloca <4 x float>, align 16
  %CastInst64 = alloca float, align 4
  %CastInstVec65 = alloca <4 x float>, align 16
  %allocaVec356 = alloca <4 x i32>, align 16
  %CastInst66 = alloca i32, align 4
  %CastInstVec67 = alloca <4 x i32>, align 16
  %allocaVec357 = alloca <4 x i32>, align 16
  %CastInst68 = alloca i32, align 4
  %CastInstVec69 = alloca <4 x i32>, align 16
  %allocaVec358 = alloca <4 x i32>, align 16
  %CastInst70 = alloca i32, align 4
  %CastInstVec71 = alloca <4 x i32>, align 16
  %allocaVec359 = alloca <4 x i32>, align 16
  %CastInst72 = alloca i32, align 4
  %CastInstVec73 = alloca <4 x i32>, align 16
  %allocaVec360 = alloca <4 x i32>, align 16
  %CastInst74 = alloca i32, align 4
  %CastInstVec75 = alloca <4 x i32>, align 16
  %allocaVec361 = alloca <4 x i32>, align 16
  %CastInst76 = alloca i32, align 4
  %CastInstVec77 = alloca <4 x i32>, align 16
  %allocaVec362 = alloca <4 x i32>, align 16
  %CastInst78 = alloca i32, align 4
  %CastInstVec79 = alloca <4 x i32>, align 16
  %allocaVec363 = alloca <4 x float>, align 16
  %CastInst80 = alloca float, align 4
  %CastInstVec81 = alloca <4 x float>, align 16
  %allocaVec364 = alloca <4 x i32>, align 16
  %CastInst82 = alloca i32, align 4
  %CastInstVec83 = alloca <4 x i32>, align 16
  %allocaVec365 = alloca <4 x i32>, align 16
  %CastInst84 = alloca i32, align 4
  %CastInstVec85 = alloca <4 x i32>, align 16
  %allocaVec366 = alloca <4 x i32>, align 16
  %CastInst86 = alloca i32, align 4
  %CastInstVec87 = alloca <4 x i32>, align 16
  %allocaVec367 = alloca <4 x i32>, align 16
  %CastInst88 = alloca i32, align 4
  %CastInstVec89 = alloca <4 x i32>, align 16
  %allocaVec368 = alloca <4 x i32>, align 16
  %CastInst90 = alloca i32, align 4
  %CastInstVec91 = alloca <4 x i32>, align 16
  %allocaVec369 = alloca <4 x i32>, align 16
  %CastInst92 = alloca i32, align 4
  %CastInstVec93 = alloca <4 x i32>, align 16
  %allocaVec370 = alloca <4 x i32>, align 16
  %CastInst94 = alloca i32, align 4
  %CastInstVec95 = alloca <4 x i32>, align 16
  %allocaVec371 = alloca <4 x float>, align 16
  %CastInst96 = alloca float, align 4
  %CastInstVec97 = alloca <4 x float>, align 16
  %allocaVec372 = alloca <4 x i32>, align 16
  %CastInst98 = alloca i32, align 4
  %CastInstVec99 = alloca <4 x i32>, align 16
  %allocaVec373 = alloca <4 x i32>, align 16
  %CastInst100 = alloca i32, align 4
  %CastInstVec101 = alloca <4 x i32>, align 16
  %allocaVec374 = alloca <4 x i32>, align 16
  %CastInst102 = alloca i32, align 4
  %CastInstVec103 = alloca <4 x i32>, align 16
  %allocaVec375 = alloca <4 x i32>, align 16
  %CastInst104 = alloca i32, align 4
  %CastInstVec105 = alloca <4 x i32>, align 16
  %allocaVec376 = alloca <4 x i32>, align 16
  %CastInst106 = alloca i32, align 4
  %CastInstVec107 = alloca <4 x i32>, align 16
  %allocaVec377 = alloca <4 x i32>, align 16
  %CastInst108 = alloca i32, align 4
  %CastInstVec109 = alloca <4 x i32>, align 16
  %allocaVec378 = alloca <4 x i32>, align 16
  %CastInst110 = alloca i32, align 4
  %CastInstVec111 = alloca <4 x i32>, align 16
  %allocaVec379 = alloca <4 x float>, align 16
  %CastInst112 = alloca float, align 4
  %CastInstVec113 = alloca <4 x float>, align 16
  %allocaVec380 = alloca <4 x i32>, align 16
  %CastInst114 = alloca i32, align 4
  %CastInstVec115 = alloca <4 x i32>, align 16
  %allocaVec381 = alloca <4 x i32>, align 16
  %CastInst116 = alloca i32, align 4
  %CastInstVec117 = alloca <4 x i32>, align 16
  %allocaVec382 = alloca <4 x i32>, align 16
  %CastInst118 = alloca i32, align 4
  %CastInstVec119 = alloca <4 x i32>, align 16
  %allocaVec383 = alloca <4 x i32>, align 16
  %CastInst120 = alloca i32, align 4
  %CastInstVec121 = alloca <4 x i32>, align 16
  %allocaVec384 = alloca <4 x i32>, align 16
  %CastInst122 = alloca i32, align 4
  %CastInstVec123 = alloca <4 x i32>, align 16
  %allocaVec385 = alloca <4 x i32>, align 16
  %CastInst124 = alloca i32, align 4
  %CastInstVec125 = alloca <4 x i32>, align 16
  %allocaVec386 = alloca <4 x i32>, align 16
  %CastInst126 = alloca i32, align 4
  %CastInstVec127 = alloca <4 x i32>, align 16
  %allocaVec387 = alloca <4 x float>, align 16
  %CastInst128 = alloca float, align 4
  %CastInstVec129 = alloca <4 x float>, align 16
  %allocaVec388 = alloca <4 x i32>, align 16
  %CastInst130 = alloca i32, align 4
  %CastInstVec131 = alloca <4 x i32>, align 16
  %allocaVec389 = alloca <4 x i32>, align 16
  %CastInst132 = alloca i32, align 4
  %CastInstVec133 = alloca <4 x i32>, align 16
  %allocaVec390 = alloca <4 x i32>, align 16
  %CastInst134 = alloca i32, align 4
  %CastInstVec135 = alloca <4 x i32>, align 16
  %allocaVec391 = alloca <4 x i32>, align 16
  %CastInst136 = alloca i32, align 4
  %CastInstVec137 = alloca <4 x i32>, align 16
  %allocaVec392 = alloca <4 x i32>, align 16
  %CastInst138 = alloca i32, align 4
  %CastInstVec139 = alloca <4 x i32>, align 16
  %allocaVec393 = alloca <4 x i32>, align 16
  %CastInst140 = alloca i32, align 4
  %CastInstVec141 = alloca <4 x i32>, align 16
  %allocaVec394 = alloca <4 x i32>, align 16
  %CastInst142 = alloca i32, align 4
  %CastInstVec143 = alloca <4 x i32>, align 16
  %allocaVec395 = alloca <4 x float>, align 16
  %CastInst144 = alloca float, align 4
  %CastInstVec145 = alloca <4 x float>, align 16
  %allocaVec396 = alloca <4 x i32>, align 16
  %CastInst146 = alloca i32, align 4
  %CastInstVec147 = alloca <4 x i32>, align 16
  %allocaVec397 = alloca <4 x i32>, align 16
  %CastInst148 = alloca i32, align 4
  %CastInstVec149 = alloca <4 x i32>, align 16
  %allocaVec398 = alloca <4 x i32>, align 16
  %CastInst150 = alloca i32, align 4
  %CastInstVec151 = alloca <4 x i32>, align 16
  %allocaVec399 = alloca <4 x i32>, align 16
  %CastInst152 = alloca i32, align 4
  %CastInstVec153 = alloca <4 x i32>, align 16
  %allocaVec400 = alloca <4 x i32>, align 16
  %CastInst154 = alloca i32, align 4
  %CastInstVec155 = alloca <4 x i32>, align 16
  %allocaVec401 = alloca <4 x i32>, align 16
  %CastInst156 = alloca i32, align 4
  %CastInstVec157 = alloca <4 x i32>, align 16
  %allocaVec402 = alloca <4 x i32>, align 16
  %CastInst158 = alloca i32, align 4
  %CastInstVec159 = alloca <4 x i32>, align 16
  %allocaVec403 = alloca <4 x float>, align 16
  %CastInst160 = alloca float, align 4
  %CastInstVec161 = alloca <4 x float>, align 16
  %allocaVec404 = alloca <4 x i32>, align 16
  %CastInst162 = alloca i32, align 4
  %CastInstVec163 = alloca <4 x i32>, align 16
  %allocaVec405 = alloca <4 x i32>, align 16
  %CastInst164 = alloca i32, align 4
  %CastInstVec165 = alloca <4 x i32>, align 16
  %allocaVec406 = alloca <4 x i32>, align 16
  %CastInst166 = alloca i32, align 4
  %CastInstVec167 = alloca <4 x i32>, align 16
  %allocaVec407 = alloca <4 x i32>, align 16
  %CastInst168 = alloca i32, align 4
  %CastInstVec169 = alloca <4 x i32>, align 16
  %allocaVec408 = alloca <4 x i32>, align 16
  %CastInst170 = alloca i32, align 4
  %CastInstVec171 = alloca <4 x i32>, align 16
  %allocaVec409 = alloca <4 x i32>, align 16
  %CastInst172 = alloca i32, align 4
  %CastInstVec173 = alloca <4 x i32>, align 16
  %allocaVec410 = alloca <4 x i32>, align 16
  %CastInst174 = alloca i32, align 4
  %CastInstVec175 = alloca <4 x i32>, align 16
  %allocaVec411 = alloca <4 x float>, align 16
  %CastInst176 = alloca float, align 4
  %CastInstVec177 = alloca <4 x float>, align 16
  %allocaVec412 = alloca <4 x i32>, align 16
  %CastInst178 = alloca i32, align 4
  %CastInstVec179 = alloca <4 x i32>, align 16
  %allocaVec413 = alloca <4 x i32>, align 16
  %CastInst180 = alloca i32, align 4
  %CastInstVec181 = alloca <4 x i32>, align 16
  %allocaVec414 = alloca <4 x i32>, align 16
  %CastInst182 = alloca i32, align 4
  %CastInstVec183 = alloca <4 x i32>, align 16
  %allocaVec415 = alloca <4 x i32>, align 16
  %CastInst184 = alloca i32, align 4
  %CastInstVec185 = alloca <4 x i32>, align 16
  %allocaVec416 = alloca <4 x i32>, align 16
  %CastInst186 = alloca i32, align 4
  %CastInstVec187 = alloca <4 x i32>, align 16
  %allocaVec417 = alloca <4 x i32>, align 16
  %CastInst188 = alloca i32, align 4
  %CastInstVec189 = alloca <4 x i32>, align 16
  %allocaVec418 = alloca <4 x i32>, align 16
  %CastInst190 = alloca i32, align 4
  %CastInstVec191 = alloca <4 x i32>, align 16
  %allocaVec419 = alloca <4 x float>, align 16
  %CastInst192 = alloca float, align 4
  %CastInstVec193 = alloca <4 x float>, align 16
  %allocaVec420 = alloca <4 x i32>, align 16
  %CastInst194 = alloca i32, align 4
  %CastInstVec195 = alloca <4 x i32>, align 16
  %allocaVec421 = alloca <4 x i32>, align 16
  %CastInst196 = alloca i32, align 4
  %CastInstVec197 = alloca <4 x i32>, align 16
  %allocaVec422 = alloca <4 x i32>, align 16
  %CastInst198 = alloca i32, align 4
  %CastInstVec199 = alloca <4 x i32>, align 16
  %allocaVec423 = alloca <4 x i32>, align 16
  %CastInst200 = alloca i32, align 4
  %CastInstVec201 = alloca <4 x i32>, align 16
  %allocaVec424 = alloca <4 x i32>, align 16
  %CastInst202 = alloca i32, align 4
  %CastInstVec203 = alloca <4 x i32>, align 16
  %allocaVec425 = alloca <4 x i32>, align 16
  %CastInst204 = alloca i32, align 4
  %CastInstVec205 = alloca <4 x i32>, align 16
  %allocaVec426 = alloca <4 x i32>, align 16
  %CastInst206 = alloca i32, align 4
  %CastInstVec207 = alloca <4 x i32>, align 16
  %allocaVec427 = alloca <4 x float>, align 16
  %CastInst208 = alloca float, align 4
  %CastInstVec209 = alloca <4 x float>, align 16
  %allocaVec428 = alloca <4 x i32>, align 16
  %CastInst210 = alloca i32, align 4
  %CastInstVec211 = alloca <4 x i32>, align 16
  %allocaVec429 = alloca <4 x i32>, align 16
  %CastInst212 = alloca i32, align 4
  %CastInstVec213 = alloca <4 x i32>, align 16
  %allocaVec430 = alloca <4 x i32>, align 16
  %CastInst214 = alloca i32, align 4
  %CastInstVec215 = alloca <4 x i32>, align 16
  %allocaVec431 = alloca <4 x i32>, align 16
  %CastInst216 = alloca i32, align 4
  %CastInstVec217 = alloca <4 x i32>, align 16
  %allocaVec432 = alloca <4 x i32>, align 16
  %CastInst218 = alloca i32, align 4
  %CastInstVec219 = alloca <4 x i32>, align 16
  %allocaVec433 = alloca <4 x i32>, align 16
  %CastInst220 = alloca i32, align 4
  %CastInstVec221 = alloca <4 x i32>, align 16
  %allocaVec434 = alloca <4 x i32>, align 16
  %CastInst222 = alloca i32, align 4
  %CastInstVec223 = alloca <4 x i32>, align 16
  %allocaVec435 = alloca <4 x float>, align 16
  %CastInst224 = alloca float, align 4
  %CastInstVec225 = alloca <4 x float>, align 16
  %allocaVec436 = alloca <4 x i32>, align 16
  %CastInst226 = alloca i32, align 4
  %CastInstVec227 = alloca <4 x i32>, align 16
  %allocaVec437 = alloca <4 x i32>, align 16
  %CastInst228 = alloca i32, align 4
  %CastInstVec229 = alloca <4 x i32>, align 16
  %allocaVec438 = alloca <4 x i32>, align 16
  %CastInst230 = alloca i32, align 4
  %CastInstVec231 = alloca <4 x i32>, align 16
  %allocaVec439 = alloca <4 x i32>, align 16
  %CastInst232 = alloca i32, align 4
  %CastInstVec233 = alloca <4 x i32>, align 16
  %allocaVec440 = alloca <4 x i32>, align 16
  %CastInst234 = alloca i32, align 4
  %CastInstVec235 = alloca <4 x i32>, align 16
  %allocaVec441 = alloca <4 x i32>, align 16
  %CastInst236 = alloca i32, align 4
  %CastInstVec237 = alloca <4 x i32>, align 16
  %allocaVec442 = alloca <4 x i32>, align 16
  %CastInst238 = alloca i32, align 4
  %CastInstVec239 = alloca <4 x i32>, align 16
  %allocaVec443 = alloca <4 x float>, align 16
  %CastInst240 = alloca float, align 4
  %CastInstVec241 = alloca <4 x float>, align 16
  %allocaVec444 = alloca <4 x i32>, align 16
  %CastInst242 = alloca i32, align 4
  %CastInstVec243 = alloca <4 x i32>, align 16
  %allocaVec445 = alloca <4 x i32>, align 16
  %CastInst244 = alloca i32, align 4
  %CastInstVec245 = alloca <4 x i32>, align 16
  %allocaVec446 = alloca <4 x i32>, align 16
  %CastInst246 = alloca i32, align 4
  %CastInstVec247 = alloca <4 x i32>, align 16
  %allocaVec447 = alloca <4 x i32>, align 16
  %CastInst248 = alloca i32, align 4
  %CastInstVec249 = alloca <4 x i32>, align 16
  %allocaVec448 = alloca <4 x i32>, align 16
  %CastInst250 = alloca i32, align 4
  %CastInstVec251 = alloca <4 x i32>, align 16
  %allocaVec449 = alloca <4 x i32>, align 16
  %CastInst252 = alloca i32, align 4
  %CastInstVec253 = alloca <4 x i32>, align 16
  %allocaVec450 = alloca <4 x i32>, align 16
  %CastInst254 = alloca i32, align 4
  %CastInstVec255 = alloca <4 x i32>, align 16
  %allocaVec451 = alloca <4 x float>, align 16
  %CastInst256 = alloca float, align 4
  %CastInstVec257 = alloca <4 x float>, align 16
  %allocaVec452 = alloca <4 x i32>, align 16
  %CastInst258 = alloca i32, align 4
  %CastInstVec259 = alloca <4 x i32>, align 16
  %allocaVec453 = alloca <4 x i32>, align 16
  %CastInst260 = alloca i32, align 4
  %CastInstVec261 = alloca <4 x i32>, align 16
  %allocaVec454 = alloca <4 x i32>, align 16
  %CastInst262 = alloca i32, align 4
  %CastInstVec263 = alloca <4 x i32>, align 16
  %allocaVec455 = alloca <4 x i32>, align 16
  %CastInst264 = alloca i32, align 4
  %CastInstVec265 = alloca <4 x i32>, align 16
  %allocaVec456 = alloca <4 x i32>, align 16
  %CastInst266 = alloca i32, align 4
  %CastInstVec267 = alloca <4 x i32>, align 16
  %allocaVec457 = alloca <4 x i32>, align 16
  %CastInst268 = alloca i32, align 4
  %CastInstVec269 = alloca <4 x i32>, align 16
  %allocaVec458 = alloca <4 x i32>, align 16
  %CastInst270 = alloca i32, align 4
  %CastInstVec271 = alloca <4 x i32>, align 16
  %allocaVec459 = alloca <4 x float>, align 16
  %CastInst272 = alloca float, align 4
  %CastInstVec273 = alloca <4 x float>, align 16
  %allocaVec460 = alloca <4 x i32>, align 16
  %CastInst274 = alloca i32, align 4
  %CastInstVec275 = alloca <4 x i32>, align 16
  %allocaVec461 = alloca <4 x i32>, align 16
  %CastInst276 = alloca i32, align 4
  %CastInstVec277 = alloca <4 x i32>, align 16
  %allocaVec462 = alloca <4 x i32>, align 16
  %CastInst278 = alloca i32, align 4
  %CastInstVec279 = alloca <4 x i32>, align 16
  %allocaVec463 = alloca <4 x i32>, align 16
  %CastInst280 = alloca i32, align 4
  %CastInstVec281 = alloca <4 x i32>, align 16
  %allocaVec464 = alloca <4 x i32>, align 16
  %CastInst282 = alloca i32, align 4
  %CastInstVec283 = alloca <4 x i32>, align 16
  %allocaVec465 = alloca <4 x i32>, align 16
  %CastInst284 = alloca i32, align 4
  %CastInstVec285 = alloca <4 x i32>, align 16
  %allocaVec466 = alloca <4 x i32>, align 16
  %CastInst286 = alloca i32, align 4
  %CastInstVec287 = alloca <4 x i32>, align 16
  %allocaVec467 = alloca <4 x float>, align 16
  %CastInst288 = alloca float, align 4
  %CastInstVec289 = alloca <4 x float>, align 16
  %allocaVec468 = alloca <4 x i32>, align 16
  %CastInst290 = alloca i32, align 4
  %CastInstVec291 = alloca <4 x i32>, align 16
  %allocaVec469 = alloca <4 x i32>, align 16
  %CastInst292 = alloca i32, align 4
  %CastInstVec293 = alloca <4 x i32>, align 16
  %allocaVec470 = alloca <4 x i32>, align 16
  %CastInst294 = alloca i32, align 4
  %CastInstVec295 = alloca <4 x i32>, align 16
  %allocaVec471 = alloca <4 x i32>, align 16
  %CastInst296 = alloca i32, align 4
  %CastInstVec297 = alloca <4 x i32>, align 16
  %allocaVec472 = alloca <4 x i32>, align 16
  %CastInst298 = alloca i32, align 4
  %CastInstVec299 = alloca <4 x i32>, align 16
  %allocaVec473 = alloca <4 x i32>, align 16
  %CastInst300 = alloca i32, align 4
  %CastInstVec301 = alloca <4 x i32>, align 16
  %allocaVec474 = alloca <4 x i32>, align 16
  %CastInst302 = alloca i32, align 4
  %CastInstVec303 = alloca <4 x i32>, align 16
  %allocaVec475 = alloca <4 x float>, align 16
  %CastInst304 = alloca float, align 4
  %CastInstVec305 = alloca <4 x float>, align 16
  %allocaVec476 = alloca <4 x i32>, align 16
  %CastInst306 = alloca i32, align 4
  %CastInstVec307 = alloca <4 x i32>, align 16
  %allocaVec477 = alloca <4 x i32>, align 16
  %CastInst308 = alloca i32, align 4
  %CastInstVec309 = alloca <4 x i32>, align 16
  %allocaVec478 = alloca <4 x i32>, align 16
  %CastInst310 = alloca i32, align 4
  %CastInstVec311 = alloca <4 x i32>, align 16
  %allocaVec479 = alloca <4 x i32>, align 16
  %CastInst312 = alloca i32, align 4
  %CastInstVec313 = alloca <4 x i32>, align 16
  %allocaVec480 = alloca <4 x i32>, align 16
  %CastInst314 = alloca i32, align 4
  %CastInstVec315 = alloca <4 x i32>, align 16
  %allocaVec481 = alloca <4 x i32>, align 16
  %CastInst316 = alloca i32, align 4
  %CastInstVec317 = alloca <4 x i32>, align 16
  %allocaVec482 = alloca <4 x i32>, align 16
  %CastInst318 = alloca i32, align 4
  %CastInstVec319 = alloca <4 x i32>, align 16
  %allocaVec483 = alloca <4 x float>, align 16
  %CastInst320 = alloca float, align 4
  %CastInstVec321 = alloca <4 x float>, align 16
  %4 = alloca [256 x float]*, align 4
  %allocaVec484 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %6 = alloca i16**, align 4
  %allocaVec485 = alloca <4 x i16>, align 16
  %7 = alloca i16, align 2
  %allocaVec486 = alloca <4 x i16>, align 16
  %8 = alloca i16, align 2
  %allocaVec487 = alloca <4 x i16>, align 16
  %9 = alloca i16, align 2
  %10 = alloca float*, align 4
  %allocaVec488 = alloca <4 x i16>, align 16
  %11 = alloca i16, align 2
  %allocaVec489 = alloca <4 x float>, align 16
  %12 = alloca float, align 4
  %allocaVec490 = alloca <4 x float>, align 16
  %13 = alloca float, align 4
  %allocaVec491 = alloca <4 x float>, align 16
  %14 = alloca float, align 4
  %allocaVec492 = alloca <4 x float>, align 16
  %15 = alloca float, align 4
  %allocaVec493 = alloca <4 x float>, align 16
  %16 = alloca float, align 4
  %allocaVec494 = alloca <4 x float>, align 16
  %17 = alloca float, align 4
  %allocaVec495 = alloca <4 x float>, align 16
  %18 = alloca float, align 4
  %allocaVec496 = alloca <4 x float>, align 16
  %19 = alloca float, align 4
  %allocaVec497 = alloca <4 x float>, align 16
  %20 = alloca float, align 4
  %allocaVec498 = alloca <4 x float>, align 16
  %21 = alloca float, align 4
  %allocaVec499 = alloca <4 x float>, align 16
  %22 = alloca float, align 4
  %allocaVec500 = alloca <4 x float>, align 16
  %23 = alloca float, align 4
  %allocaVec501 = alloca <4 x float>, align 16
  %24 = alloca float, align 4
  %allocaVec502 = alloca <4 x float>, align 16
  %25 = alloca float, align 4
  %allocaVec503 = alloca <4 x float>, align 16
  %26 = alloca float, align 4
  store [256 x float]* %0, [256 x float]** %4, align 4
  store i32 %1, i32* %5, align 4
  store i16** %2, i16*** %6, align 4
  store <4 x i16> zeroinitializer, <4 x i16>* %allocaVec487
  store i16 0, i16* %9, align 2
  br label %27

; <label>:27:                                     ; preds = %993, %3
  %28 = load i16, i16* %9, align 2
  %29 = sext i16 %28 to i32
  %30 = icmp slt i32 %29, 3
  br i1 %30, label %31, label %994

; <label>:31:                                     ; preds = %27
  %32 = load [256 x float]*, [256 x float]** %4, align 4
  %33 = load i16, i16* %9, align 2
  %34 = sext i16 %33 to i32
  %35 = getelementptr inbounds [256 x float], [256 x float]* %32, i32 %34
  %36 = getelementptr inbounds [256 x float], [256 x float]* %35, i32 0, i32 128
  store float* %36, float** %10, align 4
  %37 = load i16, i16* %9, align 2
  %38 = sext i16 %37 to i32
  store i32 %38, i32* %CastInst
  %39 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %39, i32 0
  %insertCast504 = insertelement <4 x i32> %insertCast, i32 %39, i32 1
  %insertCast505 = insertelement <4 x i32> %insertCast504, i32 %39, i32 2
  %insertCast506 = insertelement <4 x i32> %insertCast505, i32 %39, i32 3
  store <4 x i32> %insertCast506, <4 x i32>* %CastInstVec, align 4
  %40 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop = add <4 x i32> %40, <i32 1, i32 1, i32 1, i32 1>
  %41 = add nsw i32 %38, 1
  %Vop507 = mul <4 x i32> <i32 192, i32 192, i32 192, i32 192>, %Vop
  %42 = mul nsw i32 192, %41
  %43 = trunc i32 %42 to i16
  store i16 %43, i16* %11, align 2
  store <4 x i16> <i16 31, i16 31, i16 31, i16 31>, <4 x i16>* %allocaVec486
  store i16 31, i16* %8, align 2
  %44 = load i32, i32* %5, align 4
  %45 = icmp slt i32 %44, 2
  br i1 %45, label %46, label %286

; <label>:46:                                     ; preds = %31
  br label %47

; <label>:47:                                     ; preds = %279, %46
  %48 = load i16, i16* %8, align 2
  %49 = sext i16 %48 to i32
  store i32 %49, i32* %CastInst2
  %50 = load i32, i32* %CastInst2, align 4
  %insertCast508 = insertelement <4 x i32> undef, i32 %50, i32 0
  %insertCast509 = insertelement <4 x i32> %insertCast508, i32 %50, i32 1
  %insertCast510 = insertelement <4 x i32> %insertCast509, i32 %50, i32 2
  %insertCast511 = insertelement <4 x i32> %insertCast510, i32 %50, i32 3
  store <4 x i32> %insertCast511, <4 x i32>* %CastInstVec3, align 4
  %51 = load <4 x i32>, <4 x i32>* %CastInstVec3, align 4
  %Vop512 = shl <4 x i32> %51, <i32 2, i32 2, i32 2, i32 2>
  %52 = shl i32 %49, 2
  %53 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i32 0, i32 %52
  %54 = load i16, i16* %53, align 2
  store i16 %54, i16* %7, align 2
  %55 = load i16, i16* %7, align 2
  %56 = sext i16 %55 to i32
  %57 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %56
  %58 = load float, float* %57, align 4
  %59 = load i16**, i16*** %6, align 4
  %60 = load i32, i32* %5, align 4
  %61 = getelementptr inbounds i16*, i16** %59, i32 %60
  %62 = load i16*, i16** %61, align 4
  %63 = load i16, i16* %7, align 2
  %64 = sext i16 %63 to i32
  %65 = load i16, i16* %11, align 2
  %66 = sext i16 %65 to i32
  %67 = add nsw i32 %64, %66
  %68 = getelementptr inbounds i16, i16* %62, i32 %67
  %69 = load i16, i16* %68, align 2
  %70 = sext i16 %69 to i32
  %71 = sitofp i32 %70 to float
  %72 = fmul float %58, %71
  store float %72, float* %12, align 4
  %73 = load i16, i16* %7, align 2
  %74 = sext i16 %73 to i32
  %75 = sub nsw i32 127, %74
  %76 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %75
  %77 = load float, float* %76, align 4
  %78 = load i16**, i16*** %6, align 4
  %79 = load i32, i32* %5, align 4
  %80 = getelementptr inbounds i16*, i16** %78, i32 %79
  %81 = load i16*, i16** %80, align 4
  %82 = load i16, i16* %7, align 2
  %83 = sext i16 %82 to i32
  %84 = load i16, i16* %11, align 2
  %85 = sext i16 %84 to i32
  %86 = add nsw i32 %83, %85
  %87 = add nsw i32 %86, 128
  %88 = getelementptr inbounds i16, i16* %81, i32 %87
  %89 = load i16, i16* %88, align 2
  %90 = sext i16 %89 to i32
  %91 = sitofp i32 %90 to float
  %92 = fmul float %77, %91
  store float %92, float* %16, align 4
  %93 = load float, float* %12, align 4
  %94 = load float, float* %16, align 4
  %95 = fsub float %93, %94
  store float %95, float* %13, align 4
  %96 = load float, float* %12, align 4
  %97 = load float, float* %16, align 4
  %98 = fadd float %96, %97
  store float %98, float* %12, align 4
  %99 = load i16, i16* %7, align 2
  %100 = sext i16 %99 to i32
  %101 = add nsw i32 %100, 64
  %102 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %101
  %103 = load float, float* %102, align 4
  %104 = load i16**, i16*** %6, align 4
  %105 = load i32, i32* %5, align 4
  %106 = getelementptr inbounds i16*, i16** %104, i32 %105
  %107 = load i16*, i16** %106, align 4
  %108 = load i16, i16* %7, align 2
  %109 = sext i16 %108 to i32
  %110 = load i16, i16* %11, align 2
  %111 = sext i16 %110 to i32
  %112 = add nsw i32 %109, %111
  %113 = add nsw i32 %112, 64
  %114 = getelementptr inbounds i16, i16* %107, i32 %113
  %115 = load i16, i16* %114, align 2
  %116 = sext i16 %115 to i32
  %117 = sitofp i32 %116 to float
  %118 = fmul float %103, %117
  store float %118, float* %14, align 4
  %119 = load i16, i16* %7, align 2
  %120 = sext i16 %119 to i32
  %121 = sub nsw i32 63, %120
  %122 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %121
  %123 = load float, float* %122, align 4
  %124 = load i16**, i16*** %6, align 4
  %125 = load i32, i32* %5, align 4
  %126 = getelementptr inbounds i16*, i16** %124, i32 %125
  %127 = load i16*, i16** %126, align 4
  %128 = load i16, i16* %7, align 2
  %129 = sext i16 %128 to i32
  %130 = load i16, i16* %11, align 2
  %131 = sext i16 %130 to i32
  %132 = add nsw i32 %129, %131
  %133 = add nsw i32 %132, 192
  %134 = getelementptr inbounds i16, i16* %127, i32 %133
  %135 = load i16, i16* %134, align 2
  %136 = sext i16 %135 to i32
  %137 = sitofp i32 %136 to float
  %138 = fmul float %123, %137
  store float %138, float* %16, align 4
  %139 = load float, float* %14, align 4
  %140 = load float, float* %16, align 4
  %141 = fsub float %139, %140
  store float %141, float* %15, align 4
  %142 = load float, float* %14, align 4
  %143 = load float, float* %16, align 4
  %144 = fadd float %142, %143
  store float %144, float* %14, align 4
  %145 = load float*, float** %10, align 4
  %146 = getelementptr inbounds float, float* %145, i32 -4
  store float* %146, float** %10, align 4
  %147 = load float, float* %12, align 4
  %148 = load float, float* %14, align 4
  %149 = fadd float %147, %148
  %150 = load float*, float** %10, align 4
  %151 = getelementptr inbounds float, float* %150, i32 0
  store float %149, float* %151, align 4
  %152 = load float, float* %12, align 4
  %153 = load float, float* %14, align 4
  %154 = fsub float %152, %153
  %155 = load float*, float** %10, align 4
  %156 = getelementptr inbounds float, float* %155, i32 2
  store float %154, float* %156, align 4
  %157 = load float, float* %13, align 4
  %158 = load float, float* %15, align 4
  %159 = fadd float %157, %158
  %160 = load float*, float** %10, align 4
  %161 = getelementptr inbounds float, float* %160, i32 1
  store float %159, float* %161, align 4
  %162 = load float, float* %13, align 4
  %163 = load float, float* %15, align 4
  %164 = fsub float %162, %163
  %165 = load float*, float** %10, align 4
  %166 = getelementptr inbounds float, float* %165, i32 3
  store float %164, float* %166, align 4
  %167 = load i16, i16* %7, align 2
  %168 = sext i16 %167 to i32
  %169 = add nsw i32 %168, 1
  %170 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %169
  %171 = load float, float* %170, align 4
  %172 = load i16**, i16*** %6, align 4
  %173 = load i32, i32* %5, align 4
  %174 = getelementptr inbounds i16*, i16** %172, i32 %173
  %175 = load i16*, i16** %174, align 4
  %176 = load i16, i16* %7, align 2
  %177 = sext i16 %176 to i32
  %178 = load i16, i16* %11, align 2
  %179 = sext i16 %178 to i32
  %180 = add nsw i32 %177, %179
  %181 = add nsw i32 %180, 1
  %182 = getelementptr inbounds i16, i16* %175, i32 %181
  %183 = load i16, i16* %182, align 2
  %184 = sext i16 %183 to i32
  %185 = sitofp i32 %184 to float
  %186 = fmul float %171, %185
  store float %186, float* %12, align 4
  %187 = load i16, i16* %7, align 2
  %188 = sext i16 %187 to i32
  %189 = sub nsw i32 126, %188
  %190 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %189
  %191 = load float, float* %190, align 4
  %192 = load i16**, i16*** %6, align 4
  %193 = load i32, i32* %5, align 4
  %194 = getelementptr inbounds i16*, i16** %192, i32 %193
  %195 = load i16*, i16** %194, align 4
  %196 = load i16, i16* %7, align 2
  %197 = sext i16 %196 to i32
  %198 = load i16, i16* %11, align 2
  %199 = sext i16 %198 to i32
  %200 = add nsw i32 %197, %199
  %201 = add nsw i32 %200, 129
  %202 = getelementptr inbounds i16, i16* %195, i32 %201
  %203 = load i16, i16* %202, align 2
  %204 = sext i16 %203 to i32
  %205 = sitofp i32 %204 to float
  %206 = fmul float %191, %205
  store float %206, float* %16, align 4
  %207 = load float, float* %12, align 4
  %208 = load float, float* %16, align 4
  %209 = fsub float %207, %208
  store float %209, float* %13, align 4
  %210 = load float, float* %12, align 4
  %211 = load float, float* %16, align 4
  %212 = fadd float %210, %211
  store float %212, float* %12, align 4
  %213 = load i16, i16* %7, align 2
  %214 = sext i16 %213 to i32
  %215 = add nsw i32 %214, 65
  %216 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %215
  %217 = load float, float* %216, align 4
  %218 = load i16**, i16*** %6, align 4
  %219 = load i32, i32* %5, align 4
  %220 = getelementptr inbounds i16*, i16** %218, i32 %219
  %221 = load i16*, i16** %220, align 4
  %222 = load i16, i16* %7, align 2
  %223 = sext i16 %222 to i32
  %224 = load i16, i16* %11, align 2
  %225 = sext i16 %224 to i32
  %226 = add nsw i32 %223, %225
  %227 = add nsw i32 %226, 65
  %228 = getelementptr inbounds i16, i16* %221, i32 %227
  %229 = load i16, i16* %228, align 2
  %230 = sext i16 %229 to i32
  %231 = sitofp i32 %230 to float
  %232 = fmul float %217, %231
  store float %232, float* %14, align 4
  %233 = load i16, i16* %7, align 2
  %234 = sext i16 %233 to i32
  %235 = sub nsw i32 62, %234
  %236 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %235
  %237 = load float, float* %236, align 4
  %238 = load i16**, i16*** %6, align 4
  %239 = load i32, i32* %5, align 4
  %240 = getelementptr inbounds i16*, i16** %238, i32 %239
  %241 = load i16*, i16** %240, align 4
  %242 = load i16, i16* %7, align 2
  %243 = sext i16 %242 to i32
  %244 = load i16, i16* %11, align 2
  %245 = sext i16 %244 to i32
  %246 = add nsw i32 %243, %245
  %247 = add nsw i32 %246, 193
  %248 = getelementptr inbounds i16, i16* %241, i32 %247
  %249 = load i16, i16* %248, align 2
  %250 = sext i16 %249 to i32
  %251 = sitofp i32 %250 to float
  %252 = fmul float %237, %251
  store float %252, float* %16, align 4
  %253 = load float, float* %14, align 4
  %254 = load float, float* %16, align 4
  %255 = fsub float %253, %254
  store float %255, float* %15, align 4
  %256 = load float, float* %14, align 4
  %257 = load float, float* %16, align 4
  %258 = fadd float %256, %257
  store float %258, float* %14, align 4
  %259 = load float, float* %12, align 4
  %260 = load float, float* %14, align 4
  %261 = fadd float %259, %260
  %262 = load float*, float** %10, align 4
  %263 = getelementptr inbounds float, float* %262, i32 128
  store float %261, float* %263, align 4
  %264 = load float, float* %12, align 4
  %265 = load float, float* %14, align 4
  %266 = fsub float %264, %265
  %267 = load float*, float** %10, align 4
  %268 = getelementptr inbounds float, float* %267, i32 130
  store float %266, float* %268, align 4
  %269 = load float, float* %13, align 4
  %270 = load float, float* %15, align 4
  %271 = fadd float %269, %270
  %272 = load float*, float** %10, align 4
  %273 = getelementptr inbounds float, float* %272, i32 129
  store float %271, float* %273, align 4
  %274 = load float, float* %13, align 4
  %275 = load float, float* %15, align 4
  %276 = fsub float %274, %275
  %277 = load float*, float** %10, align 4
  %278 = getelementptr inbounds float, float* %277, i32 131
  store float %276, float* %278, align 4
  br label %279

; <label>:279:                                    ; preds = %47
  %280 = load i16, i16* %8, align 2
  %insertElmt = insertelement <4 x i16> undef, i16 %280, i32 0
  %insertElmt513 = insertelement <4 x i16> %insertElmt, i16 %280, i32 1
  %insertElmt514 = insertelement <4 x i16> %insertElmt513, i16 %280, i32 2
  %insertElmt515 = insertelement <4 x i16> %insertElmt514, i16 %280, i32 3
  store <4 x i16> %insertElmt515, <4 x i16>* %allocaVec486, align 16
  %281 = load <4 x i16>, <4 x i16>* %allocaVec486, align 16
  %Vop516 = add <4 x i16> %281, <i16 -1, i16 -1, i16 -1, i16 -1>
  store <4 x i16> %Vop516, <4 x i16>* %allocaVec486
  %282 = add i16 %280, -1
  store i16 %282, i16* %8, align 2
  %283 = sext i16 %282 to i32
  %284 = icmp sge i32 %283, 0
  br i1 %284, label %47, label %285

; <label>:285:                                    ; preds = %279
  br label %982

; <label>:286:                                    ; preds = %31
  %287 = load i32, i32* %5, align 4
  %288 = icmp eq i32 %287, 2
  br i1 %288, label %289, label %632

; <label>:289:                                    ; preds = %286
  br label %290

; <label>:290:                                    ; preds = %625, %289
  %291 = load i16, i16* %8, align 2
  %292 = sext i16 %291 to i32
  store i32 %292, i32* %CastInst66
  %293 = load i32, i32* %CastInst66, align 4
  %insertCast517 = insertelement <4 x i32> undef, i32 %293, i32 0
  %insertCast518 = insertelement <4 x i32> %insertCast517, i32 %293, i32 1
  %insertCast519 = insertelement <4 x i32> %insertCast518, i32 %293, i32 2
  %insertCast520 = insertelement <4 x i32> %insertCast519, i32 %293, i32 3
  store <4 x i32> %insertCast520, <4 x i32>* %CastInstVec67, align 4
  %294 = load <4 x i32>, <4 x i32>* %CastInstVec67, align 4
  %Vop521 = shl <4 x i32> %294, <i32 2, i32 2, i32 2, i32 2>
  %295 = shl i32 %292, 2
  %296 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i32 0, i32 %295
  %297 = load i16, i16* %296, align 2
  store i16 %297, i16* %7, align 2
  %298 = load i16, i16* %7, align 2
  %299 = sext i16 %298 to i32
  %300 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %299
  %301 = load float, float* %300, align 4
  %302 = load i16**, i16*** %6, align 4
  %303 = getelementptr inbounds i16*, i16** %302, i32 0
  %304 = load i16*, i16** %303, align 4
  %305 = load i16, i16* %7, align 2
  %306 = sext i16 %305 to i32
  %307 = load i16, i16* %11, align 2
  %308 = sext i16 %307 to i32
  %309 = add nsw i32 %306, %308
  %310 = getelementptr inbounds i16, i16* %304, i32 %309
  %311 = load i16, i16* %310, align 2
  %312 = sext i16 %311 to i32
  %313 = load i16**, i16*** %6, align 4
  %314 = getelementptr inbounds i16*, i16** %313, i32 1
  %315 = load i16*, i16** %314, align 4
  %316 = load i16, i16* %7, align 2
  %317 = sext i16 %316 to i32
  %318 = load i16, i16* %11, align 2
  %319 = sext i16 %318 to i32
  %320 = add nsw i32 %317, %319
  %321 = getelementptr inbounds i16, i16* %315, i32 %320
  %322 = load i16, i16* %321, align 2
  %323 = sext i16 %322 to i32
  %324 = add nsw i32 %312, %323
  %325 = sitofp i32 %324 to float
  %326 = fmul float 0x3FE6A09E60000000, %325
  %327 = fmul float %301, %326
  store float %327, float* %17, align 4
  %328 = load i16, i16* %7, align 2
  %329 = sext i16 %328 to i32
  %330 = sub nsw i32 127, %329
  %331 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %330
  %332 = load float, float* %331, align 4
  %333 = load i16**, i16*** %6, align 4
  %334 = getelementptr inbounds i16*, i16** %333, i32 0
  %335 = load i16*, i16** %334, align 4
  %336 = load i16, i16* %7, align 2
  %337 = sext i16 %336 to i32
  %338 = load i16, i16* %11, align 2
  %339 = sext i16 %338 to i32
  %340 = add nsw i32 %337, %339
  %341 = add nsw i32 %340, 128
  %342 = getelementptr inbounds i16, i16* %335, i32 %341
  %343 = load i16, i16* %342, align 2
  %344 = sext i16 %343 to i32
  %345 = load i16**, i16*** %6, align 4
  %346 = getelementptr inbounds i16*, i16** %345, i32 1
  %347 = load i16*, i16** %346, align 4
  %348 = load i16, i16* %7, align 2
  %349 = sext i16 %348 to i32
  %350 = load i16, i16* %11, align 2
  %351 = sext i16 %350 to i32
  %352 = add nsw i32 %349, %351
  %353 = add nsw i32 %352, 128
  %354 = getelementptr inbounds i16, i16* %347, i32 %353
  %355 = load i16, i16* %354, align 2
  %356 = sext i16 %355 to i32
  %357 = add nsw i32 %344, %356
  %358 = sitofp i32 %357 to float
  %359 = fmul float 0x3FE6A09E60000000, %358
  %360 = fmul float %332, %359
  store float %360, float* %21, align 4
  %361 = load float, float* %17, align 4
  %362 = load float, float* %21, align 4
  %363 = fsub float %361, %362
  store float %363, float* %18, align 4
  %364 = load float, float* %17, align 4
  %365 = load float, float* %21, align 4
  %366 = fadd float %364, %365
  store float %366, float* %17, align 4
  %367 = load i16, i16* %7, align 2
  %368 = sext i16 %367 to i32
  %369 = add nsw i32 %368, 64
  %370 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %369
  %371 = load float, float* %370, align 4
  %372 = load i16**, i16*** %6, align 4
  %373 = getelementptr inbounds i16*, i16** %372, i32 0
  %374 = load i16*, i16** %373, align 4
  %375 = load i16, i16* %7, align 2
  %376 = sext i16 %375 to i32
  %377 = load i16, i16* %11, align 2
  %378 = sext i16 %377 to i32
  %379 = add nsw i32 %376, %378
  %380 = add nsw i32 %379, 64
  %381 = getelementptr inbounds i16, i16* %374, i32 %380
  %382 = load i16, i16* %381, align 2
  %383 = sext i16 %382 to i32
  %384 = load i16**, i16*** %6, align 4
  %385 = getelementptr inbounds i16*, i16** %384, i32 1
  %386 = load i16*, i16** %385, align 4
  %387 = load i16, i16* %7, align 2
  %388 = sext i16 %387 to i32
  %389 = load i16, i16* %11, align 2
  %390 = sext i16 %389 to i32
  %391 = add nsw i32 %388, %390
  %392 = add nsw i32 %391, 64
  %393 = getelementptr inbounds i16, i16* %386, i32 %392
  %394 = load i16, i16* %393, align 2
  %395 = sext i16 %394 to i32
  %396 = add nsw i32 %383, %395
  %397 = sitofp i32 %396 to float
  %398 = fmul float 0x3FE6A09E60000000, %397
  %399 = fmul float %371, %398
  store float %399, float* %19, align 4
  %400 = load i16, i16* %7, align 2
  %401 = sext i16 %400 to i32
  %402 = sub nsw i32 63, %401
  %403 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %402
  %404 = load float, float* %403, align 4
  %405 = load i16**, i16*** %6, align 4
  %406 = getelementptr inbounds i16*, i16** %405, i32 0
  %407 = load i16*, i16** %406, align 4
  %408 = load i16, i16* %7, align 2
  %409 = sext i16 %408 to i32
  %410 = load i16, i16* %11, align 2
  %411 = sext i16 %410 to i32
  %412 = add nsw i32 %409, %411
  %413 = add nsw i32 %412, 192
  %414 = getelementptr inbounds i16, i16* %407, i32 %413
  %415 = load i16, i16* %414, align 2
  %416 = sext i16 %415 to i32
  %417 = load i16**, i16*** %6, align 4
  %418 = getelementptr inbounds i16*, i16** %417, i32 1
  %419 = load i16*, i16** %418, align 4
  %420 = load i16, i16* %7, align 2
  %421 = sext i16 %420 to i32
  %422 = load i16, i16* %11, align 2
  %423 = sext i16 %422 to i32
  %424 = add nsw i32 %421, %423
  %425 = add nsw i32 %424, 192
  %426 = getelementptr inbounds i16, i16* %419, i32 %425
  %427 = load i16, i16* %426, align 2
  %428 = sext i16 %427 to i32
  %429 = add nsw i32 %416, %428
  %430 = sitofp i32 %429 to float
  %431 = fmul float 0x3FE6A09E60000000, %430
  %432 = fmul float %404, %431
  store float %432, float* %21, align 4
  %433 = load float, float* %19, align 4
  %434 = load float, float* %21, align 4
  %435 = fsub float %433, %434
  store float %435, float* %20, align 4
  %436 = load float, float* %19, align 4
  %437 = load float, float* %21, align 4
  %438 = fadd float %436, %437
  store float %438, float* %19, align 4
  %439 = load float*, float** %10, align 4
  %440 = getelementptr inbounds float, float* %439, i32 -4
  store float* %440, float** %10, align 4
  %441 = load float, float* %17, align 4
  %442 = load float, float* %19, align 4
  %443 = fadd float %441, %442
  %444 = load float*, float** %10, align 4
  %445 = getelementptr inbounds float, float* %444, i32 0
  store float %443, float* %445, align 4
  %446 = load float, float* %17, align 4
  %447 = load float, float* %19, align 4
  %448 = fsub float %446, %447
  %449 = load float*, float** %10, align 4
  %450 = getelementptr inbounds float, float* %449, i32 2
  store float %448, float* %450, align 4
  %451 = load float, float* %18, align 4
  %452 = load float, float* %20, align 4
  %453 = fadd float %451, %452
  %454 = load float*, float** %10, align 4
  %455 = getelementptr inbounds float, float* %454, i32 1
  store float %453, float* %455, align 4
  %456 = load float, float* %18, align 4
  %457 = load float, float* %20, align 4
  %458 = fsub float %456, %457
  %459 = load float*, float** %10, align 4
  %460 = getelementptr inbounds float, float* %459, i32 3
  store float %458, float* %460, align 4
  %461 = load i16, i16* %7, align 2
  %462 = sext i16 %461 to i32
  %463 = add nsw i32 %462, 1
  %464 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %463
  %465 = load float, float* %464, align 4
  %466 = load i16**, i16*** %6, align 4
  %467 = getelementptr inbounds i16*, i16** %466, i32 0
  %468 = load i16*, i16** %467, align 4
  %469 = load i16, i16* %7, align 2
  %470 = sext i16 %469 to i32
  %471 = load i16, i16* %11, align 2
  %472 = sext i16 %471 to i32
  %473 = add nsw i32 %470, %472
  %474 = add nsw i32 %473, 1
  %475 = getelementptr inbounds i16, i16* %468, i32 %474
  %476 = load i16, i16* %475, align 2
  %477 = sext i16 %476 to i32
  %478 = load i16**, i16*** %6, align 4
  %479 = getelementptr inbounds i16*, i16** %478, i32 1
  %480 = load i16*, i16** %479, align 4
  %481 = load i16, i16* %7, align 2
  %482 = sext i16 %481 to i32
  %483 = load i16, i16* %11, align 2
  %484 = sext i16 %483 to i32
  %485 = add nsw i32 %482, %484
  %486 = add nsw i32 %485, 1
  %487 = getelementptr inbounds i16, i16* %480, i32 %486
  %488 = load i16, i16* %487, align 2
  %489 = sext i16 %488 to i32
  %490 = add nsw i32 %477, %489
  %491 = sitofp i32 %490 to float
  %492 = fmul float 0x3FE6A09E60000000, %491
  %493 = fmul float %465, %492
  store float %493, float* %17, align 4
  %494 = load i16, i16* %7, align 2
  %495 = sext i16 %494 to i32
  %496 = sub nsw i32 126, %495
  %497 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %496
  %498 = load float, float* %497, align 4
  %499 = load i16**, i16*** %6, align 4
  %500 = getelementptr inbounds i16*, i16** %499, i32 0
  %501 = load i16*, i16** %500, align 4
  %502 = load i16, i16* %7, align 2
  %503 = sext i16 %502 to i32
  %504 = load i16, i16* %11, align 2
  %505 = sext i16 %504 to i32
  %506 = add nsw i32 %503, %505
  %507 = add nsw i32 %506, 129
  %508 = getelementptr inbounds i16, i16* %501, i32 %507
  %509 = load i16, i16* %508, align 2
  %510 = sext i16 %509 to i32
  %511 = load i16**, i16*** %6, align 4
  %512 = getelementptr inbounds i16*, i16** %511, i32 1
  %513 = load i16*, i16** %512, align 4
  %514 = load i16, i16* %7, align 2
  %515 = sext i16 %514 to i32
  %516 = load i16, i16* %11, align 2
  %517 = sext i16 %516 to i32
  %518 = add nsw i32 %515, %517
  %519 = add nsw i32 %518, 129
  %520 = getelementptr inbounds i16, i16* %513, i32 %519
  %521 = load i16, i16* %520, align 2
  %522 = sext i16 %521 to i32
  %523 = add nsw i32 %510, %522
  %524 = sitofp i32 %523 to float
  %525 = fmul float 0x3FE6A09E60000000, %524
  %526 = fmul float %498, %525
  store float %526, float* %21, align 4
  %527 = load float, float* %17, align 4
  %528 = load float, float* %21, align 4
  %529 = fsub float %527, %528
  store float %529, float* %18, align 4
  %530 = load float, float* %17, align 4
  %531 = load float, float* %21, align 4
  %532 = fadd float %530, %531
  store float %532, float* %17, align 4
  %533 = load i16, i16* %7, align 2
  %534 = sext i16 %533 to i32
  %535 = add nsw i32 %534, 65
  %536 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %535
  %537 = load float, float* %536, align 4
  %538 = load i16**, i16*** %6, align 4
  %539 = getelementptr inbounds i16*, i16** %538, i32 0
  %540 = load i16*, i16** %539, align 4
  %541 = load i16, i16* %7, align 2
  %542 = sext i16 %541 to i32
  %543 = load i16, i16* %11, align 2
  %544 = sext i16 %543 to i32
  %545 = add nsw i32 %542, %544
  %546 = add nsw i32 %545, 65
  %547 = getelementptr inbounds i16, i16* %540, i32 %546
  %548 = load i16, i16* %547, align 2
  %549 = sext i16 %548 to i32
  %550 = load i16**, i16*** %6, align 4
  %551 = getelementptr inbounds i16*, i16** %550, i32 1
  %552 = load i16*, i16** %551, align 4
  %553 = load i16, i16* %7, align 2
  %554 = sext i16 %553 to i32
  %555 = load i16, i16* %11, align 2
  %556 = sext i16 %555 to i32
  %557 = add nsw i32 %554, %556
  %558 = add nsw i32 %557, 65
  %559 = getelementptr inbounds i16, i16* %552, i32 %558
  %560 = load i16, i16* %559, align 2
  %561 = sext i16 %560 to i32
  %562 = add nsw i32 %549, %561
  %563 = sitofp i32 %562 to float
  %564 = fmul float 0x3FE6A09E60000000, %563
  %565 = fmul float %537, %564
  store float %565, float* %19, align 4
  %566 = load i16, i16* %7, align 2
  %567 = sext i16 %566 to i32
  %568 = sub nsw i32 62, %567
  %569 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %568
  %570 = load float, float* %569, align 4
  %571 = load i16**, i16*** %6, align 4
  %572 = getelementptr inbounds i16*, i16** %571, i32 0
  %573 = load i16*, i16** %572, align 4
  %574 = load i16, i16* %7, align 2
  %575 = sext i16 %574 to i32
  %576 = load i16, i16* %11, align 2
  %577 = sext i16 %576 to i32
  %578 = add nsw i32 %575, %577
  %579 = add nsw i32 %578, 193
  %580 = getelementptr inbounds i16, i16* %573, i32 %579
  %581 = load i16, i16* %580, align 2
  %582 = sext i16 %581 to i32
  %583 = load i16**, i16*** %6, align 4
  %584 = getelementptr inbounds i16*, i16** %583, i32 1
  %585 = load i16*, i16** %584, align 4
  %586 = load i16, i16* %7, align 2
  %587 = sext i16 %586 to i32
  %588 = load i16, i16* %11, align 2
  %589 = sext i16 %588 to i32
  %590 = add nsw i32 %587, %589
  %591 = add nsw i32 %590, 193
  %592 = getelementptr inbounds i16, i16* %585, i32 %591
  %593 = load i16, i16* %592, align 2
  %594 = sext i16 %593 to i32
  %595 = add nsw i32 %582, %594
  %596 = sitofp i32 %595 to float
  %597 = fmul float 0x3FE6A09E60000000, %596
  %598 = fmul float %570, %597
  store float %598, float* %21, align 4
  %599 = load float, float* %19, align 4
  %600 = load float, float* %21, align 4
  %601 = fsub float %599, %600
  store float %601, float* %20, align 4
  %602 = load float, float* %19, align 4
  %603 = load float, float* %21, align 4
  %604 = fadd float %602, %603
  store float %604, float* %19, align 4
  %605 = load float, float* %17, align 4
  %606 = load float, float* %19, align 4
  %607 = fadd float %605, %606
  %608 = load float*, float** %10, align 4
  %609 = getelementptr inbounds float, float* %608, i32 128
  store float %607, float* %609, align 4
  %610 = load float, float* %17, align 4
  %611 = load float, float* %19, align 4
  %612 = fsub float %610, %611
  %613 = load float*, float** %10, align 4
  %614 = getelementptr inbounds float, float* %613, i32 130
  store float %612, float* %614, align 4
  %615 = load float, float* %18, align 4
  %616 = load float, float* %20, align 4
  %617 = fadd float %615, %616
  %618 = load float*, float** %10, align 4
  %619 = getelementptr inbounds float, float* %618, i32 129
  store float %617, float* %619, align 4
  %620 = load float, float* %18, align 4
  %621 = load float, float* %20, align 4
  %622 = fsub float %620, %621
  %623 = load float*, float** %10, align 4
  %624 = getelementptr inbounds float, float* %623, i32 131
  store float %622, float* %624, align 4
  br label %625

; <label>:625:                                    ; preds = %290
  %626 = load i16, i16* %8, align 2
  %627 = load <4 x i16>, <4 x i16>* %allocaVec486, align 16
  %Vop522 = add <4 x i16> %627, <i16 -1, i16 -1, i16 -1, i16 -1>
  store <4 x i16> %Vop522, <4 x i16>* %allocaVec486
  %628 = add i16 %626, -1
  store i16 %628, i16* %8, align 2
  %629 = sext i16 %628 to i32
  %630 = icmp sge i32 %629, 0
  br i1 %630, label %290, label %631

; <label>:631:                                    ; preds = %625
  br label %981

; <label>:632:                                    ; preds = %286
  br label %633

; <label>:633:                                    ; preds = %977, %632
  %634 = load i16, i16* %8, align 2
  %635 = sext i16 %634 to i32
  store i32 %635, i32* %CastInst194
  %636 = load i32, i32* %CastInst194, align 4
  %insertCast523 = insertelement <4 x i32> undef, i32 %636, i32 0
  %insertCast524 = insertelement <4 x i32> %insertCast523, i32 %636, i32 1
  %insertCast525 = insertelement <4 x i32> %insertCast524, i32 %636, i32 2
  %insertCast526 = insertelement <4 x i32> %insertCast525, i32 %636, i32 3
  store <4 x i32> %insertCast526, <4 x i32>* %CastInstVec195, align 4
  %637 = load <4 x i32>, <4 x i32>* %CastInstVec195, align 4
  %Vop527 = shl <4 x i32> %637, <i32 2, i32 2, i32 2, i32 2>
  %638 = shl i32 %635, 2
  %639 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i32 0, i32 %638
  %640 = load i16, i16* %639, align 2
  store i16 %640, i16* %7, align 2
  %641 = load i16, i16* %7, align 2
  %642 = sext i16 %641 to i32
  %643 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %642
  %644 = load float, float* %643, align 4
  %645 = load i16**, i16*** %6, align 4
  %646 = getelementptr inbounds i16*, i16** %645, i32 0
  %647 = load i16*, i16** %646, align 4
  %648 = load i16, i16* %7, align 2
  %649 = sext i16 %648 to i32
  %650 = load i16, i16* %11, align 2
  %651 = sext i16 %650 to i32
  %652 = add nsw i32 %649, %651
  %653 = getelementptr inbounds i16, i16* %647, i32 %652
  %654 = load i16, i16* %653, align 2
  %655 = sext i16 %654 to i32
  %656 = load i16**, i16*** %6, align 4
  %657 = getelementptr inbounds i16*, i16** %656, i32 1
  %658 = load i16*, i16** %657, align 4
  %659 = load i16, i16* %7, align 2
  %660 = sext i16 %659 to i32
  %661 = load i16, i16* %11, align 2
  %662 = sext i16 %661 to i32
  %663 = add nsw i32 %660, %662
  %664 = getelementptr inbounds i16, i16* %658, i32 %663
  %665 = load i16, i16* %664, align 2
  %666 = sext i16 %665 to i32
  %667 = sub nsw i32 %655, %666
  %668 = sitofp i32 %667 to float
  %669 = fmul float 0x3FE6A09E60000000, %668
  %670 = fmul float %644, %669
  store float %670, float* %22, align 4
  %671 = load i16, i16* %7, align 2
  %672 = sext i16 %671 to i32
  %673 = sub nsw i32 127, %672
  %674 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %673
  %675 = load float, float* %674, align 4
  %676 = load i16**, i16*** %6, align 4
  %677 = getelementptr inbounds i16*, i16** %676, i32 0
  %678 = load i16*, i16** %677, align 4
  %679 = load i16, i16* %7, align 2
  %680 = sext i16 %679 to i32
  %681 = load i16, i16* %11, align 2
  %682 = sext i16 %681 to i32
  %683 = add nsw i32 %680, %682
  %684 = add nsw i32 %683, 128
  %685 = getelementptr inbounds i16, i16* %678, i32 %684
  %686 = load i16, i16* %685, align 2
  %687 = sext i16 %686 to i32
  %688 = load i16**, i16*** %6, align 4
  %689 = getelementptr inbounds i16*, i16** %688, i32 1
  %690 = load i16*, i16** %689, align 4
  %691 = load i16, i16* %7, align 2
  %692 = sext i16 %691 to i32
  %693 = load i16, i16* %11, align 2
  %694 = sext i16 %693 to i32
  %695 = add nsw i32 %692, %694
  %696 = add nsw i32 %695, 128
  %697 = getelementptr inbounds i16, i16* %690, i32 %696
  %698 = load i16, i16* %697, align 2
  %699 = sext i16 %698 to i32
  %700 = sub nsw i32 %687, %699
  %701 = sitofp i32 %700 to float
  %702 = fmul float 0x3FE6A09E60000000, %701
  %703 = fmul float %675, %702
  store float %703, float* %26, align 4
  %704 = load float, float* %22, align 4
  %705 = load float, float* %26, align 4
  %706 = fsub float %704, %705
  store float %706, float* %23, align 4
  %707 = load float, float* %22, align 4
  %708 = load float, float* %26, align 4
  %709 = fadd float %707, %708
  store float %709, float* %22, align 4
  %710 = load i16, i16* %7, align 2
  %711 = sext i16 %710 to i32
  %712 = add nsw i32 %711, 64
  %713 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %712
  %714 = load float, float* %713, align 4
  %715 = load i16**, i16*** %6, align 4
  %716 = getelementptr inbounds i16*, i16** %715, i32 0
  %717 = load i16*, i16** %716, align 4
  %718 = load i16, i16* %7, align 2
  %719 = sext i16 %718 to i32
  %720 = load i16, i16* %11, align 2
  %721 = sext i16 %720 to i32
  %722 = add nsw i32 %719, %721
  %723 = add nsw i32 %722, 64
  %724 = getelementptr inbounds i16, i16* %717, i32 %723
  %725 = load i16, i16* %724, align 2
  %726 = sext i16 %725 to i32
  %727 = load i16**, i16*** %6, align 4
  %728 = getelementptr inbounds i16*, i16** %727, i32 1
  %729 = load i16*, i16** %728, align 4
  %730 = load i16, i16* %7, align 2
  %731 = sext i16 %730 to i32
  %732 = load i16, i16* %11, align 2
  %733 = sext i16 %732 to i32
  %734 = add nsw i32 %731, %733
  %735 = add nsw i32 %734, 64
  %736 = getelementptr inbounds i16, i16* %729, i32 %735
  %737 = load i16, i16* %736, align 2
  %738 = sext i16 %737 to i32
  %739 = sub nsw i32 %726, %738
  %740 = sitofp i32 %739 to float
  %741 = fmul float 0x3FE6A09E60000000, %740
  %742 = fmul float %714, %741
  store float %742, float* %24, align 4
  %743 = load i16, i16* %7, align 2
  %744 = sext i16 %743 to i32
  %745 = sub nsw i32 63, %744
  %746 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %745
  %747 = load float, float* %746, align 4
  %748 = load i16**, i16*** %6, align 4
  %749 = getelementptr inbounds i16*, i16** %748, i32 0
  %750 = load i16*, i16** %749, align 4
  %751 = load i16, i16* %7, align 2
  %752 = sext i16 %751 to i32
  %753 = load i16, i16* %11, align 2
  %754 = sext i16 %753 to i32
  %755 = add nsw i32 %752, %754
  %756 = add nsw i32 %755, 192
  %757 = getelementptr inbounds i16, i16* %750, i32 %756
  %758 = load i16, i16* %757, align 2
  %759 = sext i16 %758 to i32
  %760 = load i16**, i16*** %6, align 4
  %761 = getelementptr inbounds i16*, i16** %760, i32 1
  %762 = load i16*, i16** %761, align 4
  %763 = load i16, i16* %7, align 2
  %764 = sext i16 %763 to i32
  %765 = load i16, i16* %11, align 2
  %766 = sext i16 %765 to i32
  %767 = add nsw i32 %764, %766
  %768 = add nsw i32 %767, 192
  %769 = getelementptr inbounds i16, i16* %762, i32 %768
  %770 = load i16, i16* %769, align 2
  %771 = sext i16 %770 to i32
  %772 = sub nsw i32 %759, %771
  %773 = sitofp i32 %772 to float
  %774 = fmul float 0x3FE6A09E60000000, %773
  %775 = fmul float %747, %774
  store float %775, float* %26, align 4
  %776 = load float, float* %24, align 4
  %777 = load float, float* %26, align 4
  %778 = fsub float %776, %777
  store float %778, float* %25, align 4
  %779 = load float, float* %24, align 4
  %780 = load float, float* %26, align 4
  %781 = fadd float %779, %780
  store float %781, float* %24, align 4
  %782 = load float*, float** %10, align 4
  %783 = getelementptr inbounds float, float* %782, i32 -4
  store float* %783, float** %10, align 4
  %784 = load float, float* %22, align 4
  %785 = load float, float* %24, align 4
  %786 = fadd float %784, %785
  %787 = load float*, float** %10, align 4
  %788 = getelementptr inbounds float, float* %787, i32 0
  store float %786, float* %788, align 4
  %789 = load float, float* %22, align 4
  %790 = load float, float* %24, align 4
  %791 = fsub float %789, %790
  %792 = load float*, float** %10, align 4
  %793 = getelementptr inbounds float, float* %792, i32 2
  store float %791, float* %793, align 4
  %794 = load float, float* %23, align 4
  %795 = load float, float* %25, align 4
  %796 = fadd float %794, %795
  %797 = load float*, float** %10, align 4
  %798 = getelementptr inbounds float, float* %797, i32 1
  store float %796, float* %798, align 4
  %799 = load float, float* %23, align 4
  %800 = load float, float* %25, align 4
  %801 = fsub float %799, %800
  %802 = load float*, float** %10, align 4
  %803 = getelementptr inbounds float, float* %802, i32 3
  store float %801, float* %803, align 4
  %804 = load i16, i16* %7, align 2
  %805 = sext i16 %804 to i32
  %806 = add nsw i32 %805, 1
  %807 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %806
  %808 = load float, float* %807, align 4
  %809 = load i16**, i16*** %6, align 4
  %810 = getelementptr inbounds i16*, i16** %809, i32 0
  %811 = load i16*, i16** %810, align 4
  %812 = load i16, i16* %7, align 2
  %813 = sext i16 %812 to i32
  %814 = load i16, i16* %11, align 2
  %815 = sext i16 %814 to i32
  %816 = add nsw i32 %813, %815
  %817 = add nsw i32 %816, 1
  %818 = getelementptr inbounds i16, i16* %811, i32 %817
  %819 = load i16, i16* %818, align 2
  %820 = sext i16 %819 to i32
  %821 = load i16**, i16*** %6, align 4
  %822 = getelementptr inbounds i16*, i16** %821, i32 1
  %823 = load i16*, i16** %822, align 4
  %824 = load i16, i16* %7, align 2
  %825 = sext i16 %824 to i32
  %826 = load i16, i16* %11, align 2
  %827 = sext i16 %826 to i32
  %828 = add nsw i32 %825, %827
  %829 = add nsw i32 %828, 1
  %830 = getelementptr inbounds i16, i16* %823, i32 %829
  %831 = load i16, i16* %830, align 2
  %832 = sext i16 %831 to i32
  %833 = sub nsw i32 %820, %832
  %834 = sitofp i32 %833 to float
  %835 = fmul float 0x3FE6A09E60000000, %834
  %836 = fmul float %808, %835
  store float %836, float* %22, align 4
  %837 = load i16, i16* %7, align 2
  %838 = sext i16 %837 to i32
  %839 = sub nsw i32 126, %838
  %840 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %839
  %841 = load float, float* %840, align 4
  %842 = load i16**, i16*** %6, align 4
  %843 = getelementptr inbounds i16*, i16** %842, i32 0
  %844 = load i16*, i16** %843, align 4
  %845 = load i16, i16* %7, align 2
  %846 = sext i16 %845 to i32
  %847 = load i16, i16* %11, align 2
  %848 = sext i16 %847 to i32
  %849 = add nsw i32 %846, %848
  %850 = add nsw i32 %849, 129
  %851 = getelementptr inbounds i16, i16* %844, i32 %850
  %852 = load i16, i16* %851, align 2
  %853 = sext i16 %852 to i32
  %854 = load i16**, i16*** %6, align 4
  %855 = getelementptr inbounds i16*, i16** %854, i32 1
  %856 = load i16*, i16** %855, align 4
  %857 = load i16, i16* %7, align 2
  %858 = sext i16 %857 to i32
  %859 = load i16, i16* %11, align 2
  %860 = sext i16 %859 to i32
  %861 = add nsw i32 %858, %860
  %862 = add nsw i32 %861, 129
  %863 = getelementptr inbounds i16, i16* %856, i32 %862
  %864 = load i16, i16* %863, align 2
  %865 = sext i16 %864 to i32
  %866 = sub nsw i32 %853, %865
  %867 = sitofp i32 %866 to float
  %868 = fmul float 0x3FE6A09E60000000, %867
  %869 = fmul float %841, %868
  store float %869, float* %26, align 4
  %870 = load float, float* %22, align 4
  %871 = load float, float* %26, align 4
  %872 = fsub float %870, %871
  store float %872, float* %23, align 4
  %873 = load float, float* %22, align 4
  %874 = load float, float* %26, align 4
  %875 = fadd float %873, %874
  store float %875, float* %22, align 4
  %876 = load i16, i16* %7, align 2
  %877 = sext i16 %876 to i32
  %878 = add nsw i32 %877, 65
  %879 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %878
  %880 = load float, float* %879, align 4
  %881 = load i16**, i16*** %6, align 4
  %882 = getelementptr inbounds i16*, i16** %881, i32 0
  %883 = load i16*, i16** %882, align 4
  %884 = load i16, i16* %7, align 2
  %885 = sext i16 %884 to i32
  %886 = load i16, i16* %11, align 2
  %887 = sext i16 %886 to i32
  %888 = add nsw i32 %885, %887
  %889 = add nsw i32 %888, 65
  %890 = getelementptr inbounds i16, i16* %883, i32 %889
  %891 = load i16, i16* %890, align 2
  %892 = sext i16 %891 to i32
  %893 = load i16**, i16*** %6, align 4
  %894 = getelementptr inbounds i16*, i16** %893, i32 1
  %895 = load i16*, i16** %894, align 4
  %896 = load i16, i16* %7, align 2
  %897 = sext i16 %896 to i32
  %898 = load i16, i16* %11, align 2
  %899 = sext i16 %898 to i32
  %900 = add nsw i32 %897, %899
  %901 = add nsw i32 %900, 65
  %902 = getelementptr inbounds i16, i16* %895, i32 %901
  %903 = load i16, i16* %902, align 2
  %904 = sext i16 %903 to i32
  %905 = sub nsw i32 %892, %904
  %906 = sitofp i32 %905 to float
  %907 = fmul float 0x3FE6A09E60000000, %906
  %908 = fmul float %880, %907
  store float %908, float* %24, align 4
  %909 = load i16, i16* %7, align 2
  %910 = sext i16 %909 to i32
  %911 = sub nsw i32 62, %910
  %912 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %911
  %913 = load float, float* %912, align 4
  %914 = load i16**, i16*** %6, align 4
  %915 = getelementptr inbounds i16*, i16** %914, i32 0
  %916 = load i16*, i16** %915, align 4
  %917 = load i16, i16* %7, align 2
  %918 = sext i16 %917 to i32
  %919 = load i16, i16* %11, align 2
  %920 = sext i16 %919 to i32
  %921 = add nsw i32 %918, %920
  %922 = add nsw i32 %921, 193
  %923 = getelementptr inbounds i16, i16* %916, i32 %922
  %924 = load i16, i16* %923, align 2
  %925 = sext i16 %924 to i32
  %926 = load i16**, i16*** %6, align 4
  %927 = getelementptr inbounds i16*, i16** %926, i32 1
  %928 = load i16*, i16** %927, align 4
  %929 = load i16, i16* %7, align 2
  %930 = sext i16 %929 to i32
  %931 = load i16, i16* %11, align 2
  %932 = sext i16 %931 to i32
  %933 = add nsw i32 %930, %932
  %934 = add nsw i32 %933, 193
  %935 = getelementptr inbounds i16, i16* %928, i32 %934
  %936 = load i16, i16* %935, align 2
  %937 = sext i16 %936 to i32
  %938 = sub nsw i32 %925, %937
  %939 = sitofp i32 %938 to float
  %940 = fmul float 0x3FE6A09E60000000, %939
  %941 = fmul float %913, %940
  store float %941, float* %26, align 4
  %942 = load float, float* %24, align 4
  %943 = load float, float* %26, align 4
  %944 = fsub float %942, %943
  store float %944, float* %25, align 4
  %945 = load float, float* %24, align 4
  %946 = load float, float* %26, align 4
  %947 = fadd float %945, %946
  store float %947, float* %24, align 4
  %948 = load float, float* %22, align 4
  %949 = load float, float* %24, align 4
  %950 = fadd float %948, %949
  %951 = load float*, float** %10, align 4
  %952 = getelementptr inbounds float, float* %951, i32 128
  store float %950, float* %952, align 4
  %953 = load float, float* %22, align 4
  %954 = load float, float* %24, align 4
  %955 = fsub float %953, %954
  %956 = load float*, float** %10, align 4
  %957 = getelementptr inbounds float, float* %956, i32 130
  store float %955, float* %957, align 4
  %958 = load float, float* %23, align 4
  %959 = load float, float* %25, align 4
  %960 = fadd float %958, %959
  %961 = load float*, float** %10, align 4
  %962 = getelementptr inbounds float, float* %961, i32 129
  store float %960, float* %962, align 4
  %963 = load float, float* %23, align 4
  %964 = load float, float* %25, align 4
  %965 = fsub float %963, %964
  %966 = load float*, float** %10, align 4
  %967 = getelementptr inbounds float, float* %966, i32 131
  store float %965, float* %967, align 4
  br label %968

; <label>:968:                                    ; preds = %633
  %969 = load i16, i16* %8, align 2
  %970 = load <4 x i16>, <4 x i16>* %allocaVec486, align 16
  %Vop528 = add <4 x i16> %970, <i16 -1, i16 -1, i16 -1, i16 -1>
  store <4 x i16> %Vop528, <4 x i16>* %allocaVec486
  %971 = load <4 x i16>, <4 x i16>* %allocaVec486, align 4
  %extractE = extractelement <4 x i16> %971, i64 0
  %extractE529 = extractelement <4 x i16> %971, i64 1
  %extractE530 = extractelement <4 x i16> %971, i64 2
  %sum = add i16 %extractE, %extractE529
  %sum531 = add i16 %sum, %extractE530
  %972 = add i16 %969, -1
  %Fmul = mul i16 %972, 3
  store i16 %972, i16* %Recovery
  %Fcmp = icmp ne i16 %sum531, %Fmul
  br i1 %Fcmp, label %973, label %977

; <label>:973:                                    ; preds = %968
  %remThree = sdiv i16 %sum531, %extractE
  %FcmpThree = icmp ne i16 %remThree, 3
  br i1 %FcmpThree, label %974, label %975

; <label>:974:                                    ; preds = %973
  store i16 %972, i16* %Recovery, align 2
  br label %976

; <label>:975:                                    ; preds = %973
  store i16 %extractE, i16* %Recovery, align 2
  br label %976

; <label>:976:                                    ; preds = %975, %974
  br label %977

; <label>:977:                                    ; preds = %968, %976
  %ReplaceInst = load i16, i16* %Recovery, align 2
  store i16 %ReplaceInst, i16* %8, align 2
  %978 = sext i16 %972 to i32
  %979 = icmp sge i32 %978, 0
  br i1 %979, label %633, label %980

; <label>:980:                                    ; preds = %977
  br label %981

; <label>:981:                                    ; preds = %980, %631
  br label %982

; <label>:982:                                    ; preds = %981, %285
  %983 = load float*, float** %10, align 4
  call arm_aapcscc void @fht(float* %983, i16 signext 256)
  br label %984

; <label>:984:                                    ; preds = %982
  %985 = load i16, i16* %9, align 2
  %insertElmt532 = insertelement <4 x i16> undef, i16 %985, i32 0
  %insertElmt533 = insertelement <4 x i16> %insertElmt532, i16 %985, i32 1
  %insertElmt534 = insertelement <4 x i16> %insertElmt533, i16 %985, i32 2
  %insertElmt535 = insertelement <4 x i16> %insertElmt534, i16 %985, i32 3
  store <4 x i16> %insertElmt535, <4 x i16>* %allocaVec487, align 16
  %986 = load <4 x i16>, <4 x i16>* %allocaVec487, align 16
  %Vop536 = add <4 x i16> %986, <i16 1, i16 1, i16 1, i16 1>
  store <4 x i16> %Vop536, <4 x i16>* %allocaVec487
  %987 = load <4 x i16>, <4 x i16>* %allocaVec487, align 4
  %extractE538 = extractelement <4 x i16> %987, i64 0
  %extractE539 = extractelement <4 x i16> %987, i64 1
  %extractE540 = extractelement <4 x i16> %987, i64 2
  %sum541 = add i16 %extractE538, %extractE539
  %sum542 = add i16 %sum541, %extractE540
  %988 = add i16 %985, 1
  %Fmul537 = mul i16 %988, 3
  store i16 %988, i16* %Recovery1
  %Fcmp543 = icmp ne i16 %sum542, %Fmul537
  br i1 %Fcmp543, label %989, label %993

; <label>:989:                                    ; preds = %984
  %remThree544 = sdiv i16 %sum542, %extractE538
  %FcmpThree545 = icmp ne i16 %remThree544, 3
  br i1 %FcmpThree545, label %990, label %991

; <label>:990:                                    ; preds = %989
  store i16 %988, i16* %Recovery1, align 2
  br label %992

; <label>:991:                                    ; preds = %989
  store i16 %extractE538, i16* %Recovery1, align 2
  br label %992

; <label>:992:                                    ; preds = %991, %990
  br label %993

; <label>:993:                                    ; preds = %984, %992
  %ReplaceInst546 = load i16, i16* %Recovery1, align 2
  store i16 %ReplaceInst546, i16* %9, align 2
  br label %27

; <label>:994:                                    ; preds = %27
  ret void
}

; Function Attrs: inlinehint nounwind
define internal arm_aapcscc void @fht(float*, i16 signext) #1 {
  %allocaVec = alloca <4 x float>, align 16
  %Recovery = alloca float, align 4
  %allocaVec17 = alloca <4 x float>, align 16
  %Recovery1 = alloca float, align 4
  %allocaVec18 = alloca <4 x i16>, align 16
  %Recovery2 = alloca i16, align 2
  %allocaVec19 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec20 = alloca <4 x i32>, align 16
  %CastInst3 = alloca i32, align 4
  %CastInstVec4 = alloca <4 x i32>, align 16
  %allocaVec21 = alloca <4 x i32>, align 16
  %CastInst5 = alloca i32, align 4
  %CastInstVec6 = alloca <4 x i32>, align 16
  %allocaVec22 = alloca <4 x i32>, align 16
  %CastInst7 = alloca i32, align 4
  %CastInstVec8 = alloca <4 x i32>, align 16
  %allocaVec23 = alloca <4 x i32>, align 16
  %CastInst9 = alloca i32, align 4
  %CastInstVec10 = alloca <4 x i32>, align 16
  %allocaVec24 = alloca <2 x double>, align 16
  %CastInst11 = alloca double, align 4
  %CastInstVec12 = alloca <2 x double>, align 16
  %allocaVec25 = alloca <2 x double>, align 16
  %CastInst13 = alloca double, align 4
  %CastInstVec14 = alloca <2 x double>, align 16
  %allocaVec26 = alloca <4 x i32>, align 16
  %CastInst15 = alloca i32, align 4
  %CastInstVec16 = alloca <4 x i32>, align 16
  %3 = alloca float*, align 4
  %allocaVec27 = alloca <4 x i16>, align 16
  %4 = alloca i16, align 2
  %allocaVec28 = alloca <4 x i16>, align 16
  %5 = alloca i16, align 2
  %6 = alloca float*, align 4
  %7 = alloca float*, align 4
  %8 = alloca float*, align 4
  %9 = alloca float*, align 4
  %allocaVec29 = alloca <4 x float>, align 16
  %10 = alloca float, align 4
  %allocaVec30 = alloca <4 x float>, align 16
  %11 = alloca float, align 4
  %allocaVec31 = alloca <4 x i16>, align 16
  %12 = alloca i16, align 2
  %allocaVec32 = alloca <4 x i16>, align 16
  %13 = alloca i16, align 2
  %allocaVec33 = alloca <4 x i16>, align 16
  %14 = alloca i16, align 2
  %allocaVec34 = alloca <4 x i16>, align 16
  %15 = alloca i16, align 2
  %allocaVec35 = alloca <4 x i16>, align 16
  %16 = alloca i16, align 2
  %allocaVec36 = alloca <4 x float>, align 16
  %17 = alloca float, align 4
  %allocaVec37 = alloca <4 x float>, align 16
  %18 = alloca float, align 4
  %allocaVec38 = alloca <4 x float>, align 16
  %19 = alloca float, align 4
  %allocaVec39 = alloca <4 x float>, align 16
  %20 = alloca float, align 4
  %allocaVec40 = alloca <4 x float>, align 16
  %21 = alloca float, align 4
  %allocaVec41 = alloca <4 x float>, align 16
  %22 = alloca float, align 4
  %allocaVec42 = alloca <4 x float>, align 16
  %23 = alloca float, align 4
  %allocaVec43 = alloca <4 x float>, align 16
  %24 = alloca float, align 4
  %allocaVec44 = alloca <4 x float>, align 16
  %25 = alloca float, align 4
  %allocaVec45 = alloca <4 x float>, align 16
  %26 = alloca float, align 4
  %allocaVec46 = alloca <4 x float>, align 16
  %27 = alloca float, align 4
  %allocaVec47 = alloca <4 x float>, align 16
  %28 = alloca float, align 4
  %allocaVec48 = alloca <4 x float>, align 16
  %29 = alloca float, align 4
  %allocaVec49 = alloca <4 x float>, align 16
  %30 = alloca float, align 4
  %allocaVec50 = alloca <4 x float>, align 16
  %31 = alloca float, align 4
  %allocaVec51 = alloca <4 x float>, align 16
  %32 = alloca float, align 4
  store float* %0, float** %3, align 4
  store i16 %1, i16* %4, align 2
  %33 = load float*, float** %3, align 4
  %34 = load i16, i16* %4, align 2
  %35 = sext i16 %34 to i32
  %36 = getelementptr inbounds float, float* %33, i32 %35
  store float* %36, float** %7, align 4
  store float* getelementptr inbounds ([8 x float], [8 x float]* @costab, i32 0, i32 0), float** %9, align 4
  store <4 x i16> <i16 4, i16 4, i16 4, i16 4>, <4 x i16>* %allocaVec28
  store i16 4, i16* %5, align 2
  br label %37

; <label>:37:                                     ; preds = %490, %2
  %38 = load i16, i16* %5, align 2
  %39 = sext i16 %38 to i32
  store i32 %39, i32* %CastInst
  %40 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %40, i32 0
  %insertCast52 = insertelement <4 x i32> %insertCast, i32 %40, i32 1
  %insertCast53 = insertelement <4 x i32> %insertCast52, i32 %40, i32 2
  %insertCast54 = insertelement <4 x i32> %insertCast53, i32 %40, i32 3
  store <4 x i32> %insertCast54, <4 x i32>* %CastInstVec, align 4
  %41 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop = ashr <4 x i32> %41, <i32 1, i32 1, i32 1, i32 1>
  %42 = ashr i32 %39, 1
  %43 = trunc i32 %42 to i16
  store i16 %43, i16* %16, align 2
  %44 = load i16, i16* %5, align 2
  store i16 %44, i16* %13, align 2
  %45 = load i16, i16* %5, align 2
  %46 = sext i16 %45 to i32
  store i32 %46, i32* %CastInst3
  %47 = load i32, i32* %CastInst3, align 4
  %insertCast55 = insertelement <4 x i32> undef, i32 %47, i32 0
  %insertCast56 = insertelement <4 x i32> %insertCast55, i32 %47, i32 1
  %insertCast57 = insertelement <4 x i32> %insertCast56, i32 %47, i32 2
  %insertCast58 = insertelement <4 x i32> %insertCast57, i32 %47, i32 3
  store <4 x i32> %insertCast58, <4 x i32>* %CastInstVec4, align 4
  %48 = load <4 x i32>, <4 x i32>* %CastInstVec4, align 4
  %Vop59 = shl <4 x i32> %48, <i32 1, i32 1, i32 1, i32 1>
  %49 = shl i32 %46, 1
  %50 = trunc i32 %49 to i16
  store i16 %50, i16* %14, align 2
  %51 = load i16, i16* %14, align 2
  %52 = sext i16 %51 to i32
  %53 = load i16, i16* %13, align 2
  %54 = sext i16 %53 to i32
  store i32 %52, i32* %CastInst5
  %55 = load i32, i32* %CastInst5, align 4
  %insertCast60 = insertelement <4 x i32> undef, i32 %55, i32 0
  %insertCast61 = insertelement <4 x i32> %insertCast60, i32 %55, i32 1
  %insertCast62 = insertelement <4 x i32> %insertCast61, i32 %55, i32 2
  %insertCast63 = insertelement <4 x i32> %insertCast62, i32 %55, i32 3
  store <4 x i32> %insertCast63, <4 x i32>* %CastInstVec6, align 4
  %56 = load <4 x i32>, <4 x i32>* %CastInstVec6, align 4
  store i32 %54, i32* %CastInst7
  %57 = load i32, i32* %CastInst7, align 4
  %insertCast64 = insertelement <4 x i32> undef, i32 %57, i32 0
  %insertCast65 = insertelement <4 x i32> %insertCast64, i32 %57, i32 1
  %insertCast66 = insertelement <4 x i32> %insertCast65, i32 %57, i32 2
  %insertCast67 = insertelement <4 x i32> %insertCast66, i32 %57, i32 3
  store <4 x i32> %insertCast67, <4 x i32>* %CastInstVec8, align 4
  %58 = load <4 x i32>, <4 x i32>* %CastInstVec8, align 4
  %Vop68 = add <4 x i32> %56, %58
  %59 = add nsw i32 %52, %54
  %60 = trunc i32 %59 to i16
  store i16 %60, i16* %15, align 2
  %61 = load i16, i16* %14, align 2
  %62 = sext i16 %61 to i32
  store i32 %62, i32* %CastInst9
  %63 = load i32, i32* %CastInst9, align 4
  %insertCast69 = insertelement <4 x i32> undef, i32 %63, i32 0
  %insertCast70 = insertelement <4 x i32> %insertCast69, i32 %63, i32 1
  %insertCast71 = insertelement <4 x i32> %insertCast70, i32 %63, i32 2
  %insertCast72 = insertelement <4 x i32> %insertCast71, i32 %63, i32 3
  store <4 x i32> %insertCast72, <4 x i32>* %CastInstVec10, align 4
  %64 = load <4 x i32>, <4 x i32>* %CastInstVec10, align 4
  %Vop73 = shl <4 x i32> %64, <i32 1, i32 1, i32 1, i32 1>
  %65 = shl i32 %62, 1
  %66 = trunc i32 %65 to i16
  store i16 %66, i16* %5, align 2
  %67 = load float*, float** %3, align 4
  store float* %67, float** %6, align 4
  %68 = load float*, float** %6, align 4
  %69 = load i16, i16* %16, align 2
  %70 = sext i16 %69 to i32
  %71 = getelementptr inbounds float, float* %68, i32 %70
  store float* %71, float** %8, align 4
  br label %72

; <label>:72:                                     ; preds = %207, %37
  %73 = load float*, float** %6, align 4
  %74 = getelementptr inbounds float, float* %73, i32 0
  %75 = load float, float* %74, align 4
  %76 = load float*, float** %6, align 4
  %77 = load i16, i16* %13, align 2
  %78 = sext i16 %77 to i32
  %79 = getelementptr inbounds float, float* %76, i32 %78
  %80 = load float, float* %79, align 4
  %81 = fsub float %75, %80
  store float %81, float* %18, align 4
  %82 = load float*, float** %6, align 4
  %83 = getelementptr inbounds float, float* %82, i32 0
  %84 = load float, float* %83, align 4
  %85 = load float*, float** %6, align 4
  %86 = load i16, i16* %13, align 2
  %87 = sext i16 %86 to i32
  %88 = getelementptr inbounds float, float* %85, i32 %87
  %89 = load float, float* %88, align 4
  %90 = fadd float %84, %89
  store float %90, float* %17, align 4
  %91 = load float*, float** %6, align 4
  %92 = load i16, i16* %14, align 2
  %93 = sext i16 %92 to i32
  %94 = getelementptr inbounds float, float* %91, i32 %93
  %95 = load float, float* %94, align 4
  %96 = load float*, float** %6, align 4
  %97 = load i16, i16* %15, align 2
  %98 = sext i16 %97 to i32
  %99 = getelementptr inbounds float, float* %96, i32 %98
  %100 = load float, float* %99, align 4
  %101 = fsub float %95, %100
  store float %101, float* %20, align 4
  %102 = load float*, float** %6, align 4
  %103 = load i16, i16* %14, align 2
  %104 = sext i16 %103 to i32
  %105 = getelementptr inbounds float, float* %102, i32 %104
  %106 = load float, float* %105, align 4
  %107 = load float*, float** %6, align 4
  %108 = load i16, i16* %15, align 2
  %109 = sext i16 %108 to i32
  %110 = getelementptr inbounds float, float* %107, i32 %109
  %111 = load float, float* %110, align 4
  %112 = fadd float %106, %111
  store float %112, float* %19, align 4
  %113 = load float, float* %17, align 4
  %114 = load float, float* %19, align 4
  %115 = fsub float %113, %114
  %116 = load float*, float** %6, align 4
  %117 = load i16, i16* %14, align 2
  %118 = sext i16 %117 to i32
  %119 = getelementptr inbounds float, float* %116, i32 %118
  store float %115, float* %119, align 4
  %120 = load float, float* %17, align 4
  %121 = load float, float* %19, align 4
  %122 = fadd float %120, %121
  %123 = load float*, float** %6, align 4
  %124 = getelementptr inbounds float, float* %123, i32 0
  store float %122, float* %124, align 4
  %125 = load float, float* %18, align 4
  %126 = load float, float* %20, align 4
  %127 = fsub float %125, %126
  %128 = load float*, float** %6, align 4
  %129 = load i16, i16* %15, align 2
  %130 = sext i16 %129 to i32
  %131 = getelementptr inbounds float, float* %128, i32 %130
  store float %127, float* %131, align 4
  %132 = load float, float* %18, align 4
  %133 = load float, float* %20, align 4
  %134 = fadd float %132, %133
  %135 = load float*, float** %6, align 4
  %136 = load i16, i16* %13, align 2
  %137 = sext i16 %136 to i32
  %138 = getelementptr inbounds float, float* %135, i32 %137
  store float %134, float* %138, align 4
  %139 = load float*, float** %8, align 4
  %140 = getelementptr inbounds float, float* %139, i32 0
  %141 = load float, float* %140, align 4
  %142 = load float*, float** %8, align 4
  %143 = load i16, i16* %13, align 2
  %144 = sext i16 %143 to i32
  %145 = getelementptr inbounds float, float* %142, i32 %144
  %146 = load float, float* %145, align 4
  %147 = fsub float %141, %146
  store float %147, float* %18, align 4
  %148 = load float*, float** %8, align 4
  %149 = getelementptr inbounds float, float* %148, i32 0
  %150 = load float, float* %149, align 4
  %151 = load float*, float** %8, align 4
  %152 = load i16, i16* %13, align 2
  %153 = sext i16 %152 to i32
  %154 = getelementptr inbounds float, float* %151, i32 %153
  %155 = load float, float* %154, align 4
  %156 = fadd float %150, %155
  store float %156, float* %17, align 4
  %157 = load float*, float** %8, align 4
  %158 = load i16, i16* %15, align 2
  %159 = sext i16 %158 to i32
  %160 = getelementptr inbounds float, float* %157, i32 %159
  %161 = load float, float* %160, align 4
  %162 = fpext float %161 to double
  %163 = fmul double 0x3FF6A09E667F3BCD, %162
  %164 = fptrunc double %163 to float
  store float %164, float* %20, align 4
  %165 = load float*, float** %8, align 4
  %166 = load i16, i16* %14, align 2
  %167 = sext i16 %166 to i32
  %168 = getelementptr inbounds float, float* %165, i32 %167
  %169 = load float, float* %168, align 4
  %170 = fpext float %169 to double
  %171 = fmul double 0x3FF6A09E667F3BCD, %170
  %172 = fptrunc double %171 to float
  store float %172, float* %19, align 4
  %173 = load float, float* %17, align 4
  %174 = load float, float* %19, align 4
  %175 = fsub float %173, %174
  %176 = load float*, float** %8, align 4
  %177 = load i16, i16* %14, align 2
  %178 = sext i16 %177 to i32
  %179 = getelementptr inbounds float, float* %176, i32 %178
  store float %175, float* %179, align 4
  %180 = load float, float* %17, align 4
  %181 = load float, float* %19, align 4
  %182 = fadd float %180, %181
  %183 = load float*, float** %8, align 4
  %184 = getelementptr inbounds float, float* %183, i32 0
  store float %182, float* %184, align 4
  %185 = load float, float* %18, align 4
  %186 = load float, float* %20, align 4
  %187 = fsub float %185, %186
  %188 = load float*, float** %8, align 4
  %189 = load i16, i16* %15, align 2
  %190 = sext i16 %189 to i32
  %191 = getelementptr inbounds float, float* %188, i32 %190
  store float %187, float* %191, align 4
  %192 = load float, float* %18, align 4
  %193 = load float, float* %20, align 4
  %194 = fadd float %192, %193
  %195 = load float*, float** %8, align 4
  %196 = load i16, i16* %13, align 2
  %197 = sext i16 %196 to i32
  %198 = getelementptr inbounds float, float* %195, i32 %197
  store float %194, float* %198, align 4
  %199 = load i16, i16* %5, align 2
  %200 = sext i16 %199 to i32
  %201 = load float*, float** %8, align 4
  %202 = getelementptr inbounds float, float* %201, i32 %200
  store float* %202, float** %8, align 4
  %203 = load i16, i16* %5, align 2
  %204 = sext i16 %203 to i32
  %205 = load float*, float** %6, align 4
  %206 = getelementptr inbounds float, float* %205, i32 %204
  store float* %206, float** %6, align 4
  br label %207

; <label>:207:                                    ; preds = %72
  %208 = load float*, float** %6, align 4
  %209 = load float*, float** %7, align 4
  %210 = icmp ult float* %208, %209
  br i1 %210, label %72, label %211

; <label>:211:                                    ; preds = %207
  %212 = load float*, float** %9, align 4
  %213 = getelementptr inbounds float, float* %212, i32 0
  %214 = load float, float* %213, align 4
  store float %214, float* %11, align 4
  %215 = load float*, float** %9, align 4
  %216 = getelementptr inbounds float, float* %215, i32 1
  %217 = load float, float* %216, align 4
  store float %217, float* %10, align 4
  store <4 x i16> <i16 1, i16 1, i16 1, i16 1>, <4 x i16>* %allocaVec31
  store i16 1, i16* %12, align 2
  br label %218

; <label>:218:                                    ; preds = %486, %211
  %219 = load i16, i16* %12, align 2
  %220 = sext i16 %219 to i32
  %221 = load i16, i16* %16, align 2
  %222 = sext i16 %221 to i32
  %223 = icmp slt i32 %220, %222
  br i1 %223, label %224, label %487

; <label>:224:                                    ; preds = %218
  %225 = load float, float* %10, align 4
  %insertElmt = insertelement <4 x float> undef, float %225, i32 0
  %insertElmt74 = insertelement <4 x float> %insertElmt, float %225, i32 1
  %insertElmt75 = insertelement <4 x float> %insertElmt74, float %225, i32 2
  %insertElmt76 = insertelement <4 x float> %insertElmt75, float %225, i32 3
  store <4 x float> %insertElmt76, <4 x float>* %allocaVec29, align 16
  %226 = load <4 x float>, <4 x float>* %allocaVec29, align 16
  %Vop77 = fmul <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %226
  %227 = fmul float 2.000000e+00, %225
  %228 = load float, float* %10, align 4
  %insertElmt78 = insertelement <4 x float> undef, float %228, i32 0
  %insertElmt79 = insertelement <4 x float> %insertElmt78, float %228, i32 1
  %insertElmt80 = insertelement <4 x float> %insertElmt79, float %228, i32 2
  %insertElmt81 = insertelement <4 x float> %insertElmt80, float %228, i32 3
  store <4 x float> %insertElmt81, <4 x float>* %allocaVec29, align 16
  %229 = load <4 x float>, <4 x float>* %allocaVec29, align 16
  %Vop82 = fmul <4 x float> %Vop77, %229
  %230 = fmul float %227, %228
  %Vop83 = fsub <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %Vop82
  store <4 x float> %Vop83, <4 x float>* %allocaVec40
  %231 = fsub float 1.000000e+00, %230
  store float %231, float* %21, align 4
  %232 = load float, float* %10, align 4
  %insertElmt84 = insertelement <4 x float> undef, float %232, i32 0
  %insertElmt85 = insertelement <4 x float> %insertElmt84, float %232, i32 1
  %insertElmt86 = insertelement <4 x float> %insertElmt85, float %232, i32 2
  %insertElmt87 = insertelement <4 x float> %insertElmt86, float %232, i32 3
  store <4 x float> %insertElmt87, <4 x float>* %allocaVec29, align 16
  %233 = load <4 x float>, <4 x float>* %allocaVec29, align 16
  %Vop88 = fmul <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %233
  %234 = fmul float 2.000000e+00, %232
  %235 = load float, float* %11, align 4
  %insertElmt89 = insertelement <4 x float> undef, float %235, i32 0
  %insertElmt90 = insertelement <4 x float> %insertElmt89, float %235, i32 1
  %insertElmt91 = insertelement <4 x float> %insertElmt90, float %235, i32 2
  %insertElmt92 = insertelement <4 x float> %insertElmt91, float %235, i32 3
  store <4 x float> %insertElmt92, <4 x float>* %allocaVec30, align 16
  %236 = load <4 x float>, <4 x float>* %allocaVec30, align 16
  %Vop93 = fmul <4 x float> %Vop88, %236
  store <4 x float> %Vop93, <4 x float>* %allocaVec41
  %237 = fmul float %234, %235
  store float %237, float* %22, align 4
  %238 = load float*, float** %3, align 4
  %239 = load i16, i16* %12, align 2
  %240 = sext i16 %239 to i32
  %241 = getelementptr inbounds float, float* %238, i32 %240
  store float* %241, float** %6, align 4
  %242 = load float*, float** %3, align 4
  %243 = load i16, i16* %13, align 2
  %244 = sext i16 %243 to i32
  %245 = getelementptr inbounds float, float* %242, i32 %244
  %246 = load i16, i16* %12, align 2
  %247 = sext i16 %246 to i32
  store i32 %247, i32* %CastInst15
  %248 = load i32, i32* %CastInst15, align 4
  %insertCast94 = insertelement <4 x i32> undef, i32 %248, i32 0
  %insertCast95 = insertelement <4 x i32> %insertCast94, i32 %248, i32 1
  %insertCast96 = insertelement <4 x i32> %insertCast95, i32 %248, i32 2
  %insertCast97 = insertelement <4 x i32> %insertCast96, i32 %248, i32 3
  store <4 x i32> %insertCast97, <4 x i32>* %CastInstVec16, align 4
  %249 = load <4 x i32>, <4 x i32>* %CastInstVec16, align 4
  %Vop98 = sub <4 x i32> zeroinitializer, %249
  %250 = sub i32 0, %247
  %251 = getelementptr inbounds float, float* %245, i32 %250
  store float* %251, float** %8, align 4
  br label %252

; <label>:252:                                    ; preds = %449, %224
  %253 = load float, float* %22, align 4
  %254 = load float*, float** %6, align 4
  %255 = load i16, i16* %13, align 2
  %256 = sext i16 %255 to i32
  %257 = getelementptr inbounds float, float* %254, i32 %256
  %258 = load float, float* %257, align 4
  %259 = fmul float %253, %258
  %260 = load float, float* %21, align 4
  %261 = load float*, float** %8, align 4
  %262 = load i16, i16* %13, align 2
  %263 = sext i16 %262 to i32
  %264 = getelementptr inbounds float, float* %261, i32 %263
  %265 = load float, float* %264, align 4
  %266 = fmul float %260, %265
  %267 = fsub float %259, %266
  store float %267, float* %24, align 4
  %268 = load float, float* %21, align 4
  %269 = load float*, float** %6, align 4
  %270 = load i16, i16* %13, align 2
  %271 = sext i16 %270 to i32
  %272 = getelementptr inbounds float, float* %269, i32 %271
  %273 = load float, float* %272, align 4
  %274 = fmul float %268, %273
  %275 = load float, float* %22, align 4
  %276 = load float*, float** %8, align 4
  %277 = load i16, i16* %13, align 2
  %278 = sext i16 %277 to i32
  %279 = getelementptr inbounds float, float* %276, i32 %278
  %280 = load float, float* %279, align 4
  %281 = fmul float %275, %280
  %282 = fadd float %274, %281
  store float %282, float* %23, align 4
  %283 = load float*, float** %6, align 4
  %284 = getelementptr inbounds float, float* %283, i32 0
  %285 = load float, float* %284, align 4
  %286 = load float, float* %23, align 4
  %287 = fsub float %285, %286
  store float %287, float* %27, align 4
  %288 = load float*, float** %6, align 4
  %289 = getelementptr inbounds float, float* %288, i32 0
  %290 = load float, float* %289, align 4
  %291 = load float, float* %23, align 4
  %292 = fadd float %290, %291
  store float %292, float* %26, align 4
  %293 = load float*, float** %8, align 4
  %294 = getelementptr inbounds float, float* %293, i32 0
  %295 = load float, float* %294, align 4
  %296 = load float, float* %24, align 4
  %297 = fsub float %295, %296
  store float %297, float* %28, align 4
  %298 = load float*, float** %8, align 4
  %299 = getelementptr inbounds float, float* %298, i32 0
  %300 = load float, float* %299, align 4
  %301 = load float, float* %24, align 4
  %302 = fadd float %300, %301
  store float %302, float* %25, align 4
  %303 = load float, float* %22, align 4
  %304 = load float*, float** %6, align 4
  %305 = load i16, i16* %15, align 2
  %306 = sext i16 %305 to i32
  %307 = getelementptr inbounds float, float* %304, i32 %306
  %308 = load float, float* %307, align 4
  %309 = fmul float %303, %308
  %310 = load float, float* %21, align 4
  %311 = load float*, float** %8, align 4
  %312 = load i16, i16* %15, align 2
  %313 = sext i16 %312 to i32
  %314 = getelementptr inbounds float, float* %311, i32 %313
  %315 = load float, float* %314, align 4
  %316 = fmul float %310, %315
  %317 = fsub float %309, %316
  store float %317, float* %24, align 4
  %318 = load float, float* %21, align 4
  %319 = load float*, float** %6, align 4
  %320 = load i16, i16* %15, align 2
  %321 = sext i16 %320 to i32
  %322 = getelementptr inbounds float, float* %319, i32 %321
  %323 = load float, float* %322, align 4
  %324 = fmul float %318, %323
  %325 = load float, float* %22, align 4
  %326 = load float*, float** %8, align 4
  %327 = load i16, i16* %15, align 2
  %328 = sext i16 %327 to i32
  %329 = getelementptr inbounds float, float* %326, i32 %328
  %330 = load float, float* %329, align 4
  %331 = fmul float %325, %330
  %332 = fadd float %324, %331
  store float %332, float* %23, align 4
  %333 = load float*, float** %6, align 4
  %334 = load i16, i16* %14, align 2
  %335 = sext i16 %334 to i32
  %336 = getelementptr inbounds float, float* %333, i32 %335
  %337 = load float, float* %336, align 4
  %338 = load float, float* %23, align 4
  %339 = fsub float %337, %338
  store float %339, float* %31, align 4
  %340 = load float*, float** %6, align 4
  %341 = load i16, i16* %14, align 2
  %342 = sext i16 %341 to i32
  %343 = getelementptr inbounds float, float* %340, i32 %342
  %344 = load float, float* %343, align 4
  %345 = load float, float* %23, align 4
  %346 = fadd float %344, %345
  store float %346, float* %29, align 4
  %347 = load float*, float** %8, align 4
  %348 = load i16, i16* %14, align 2
  %349 = sext i16 %348 to i32
  %350 = getelementptr inbounds float, float* %347, i32 %349
  %351 = load float, float* %350, align 4
  %352 = load float, float* %24, align 4
  %353 = fsub float %351, %352
  store float %353, float* %32, align 4
  %354 = load float*, float** %8, align 4
  %355 = load i16, i16* %14, align 2
  %356 = sext i16 %355 to i32
  %357 = getelementptr inbounds float, float* %354, i32 %356
  %358 = load float, float* %357, align 4
  %359 = load float, float* %24, align 4
  %360 = fadd float %358, %359
  store float %360, float* %30, align 4
  %361 = load float, float* %10, align 4
  %362 = load float, float* %29, align 4
  %363 = fmul float %361, %362
  %364 = load float, float* %11, align 4
  %365 = load float, float* %32, align 4
  %366 = fmul float %364, %365
  %367 = fsub float %363, %366
  store float %367, float* %24, align 4
  %368 = load float, float* %11, align 4
  %369 = load float, float* %29, align 4
  %370 = fmul float %368, %369
  %371 = load float, float* %10, align 4
  %372 = load float, float* %32, align 4
  %373 = fmul float %371, %372
  %374 = fadd float %370, %373
  store float %374, float* %23, align 4
  %375 = load float, float* %26, align 4
  %376 = load float, float* %23, align 4
  %377 = fsub float %375, %376
  %378 = load float*, float** %6, align 4
  %379 = load i16, i16* %14, align 2
  %380 = sext i16 %379 to i32
  %381 = getelementptr inbounds float, float* %378, i32 %380
  store float %377, float* %381, align 4
  %382 = load float, float* %26, align 4
  %383 = load float, float* %23, align 4
  %384 = fadd float %382, %383
  %385 = load float*, float** %6, align 4
  %386 = getelementptr inbounds float, float* %385, i32 0
  store float %384, float* %386, align 4
  %387 = load float, float* %28, align 4
  %388 = load float, float* %24, align 4
  %389 = fsub float %387, %388
  %390 = load float*, float** %8, align 4
  %391 = load i16, i16* %15, align 2
  %392 = sext i16 %391 to i32
  %393 = getelementptr inbounds float, float* %390, i32 %392
  store float %389, float* %393, align 4
  %394 = load float, float* %28, align 4
  %395 = load float, float* %24, align 4
  %396 = fadd float %394, %395
  %397 = load float*, float** %8, align 4
  %398 = load i16, i16* %13, align 2
  %399 = sext i16 %398 to i32
  %400 = getelementptr inbounds float, float* %397, i32 %399
  store float %396, float* %400, align 4
  %401 = load float, float* %11, align 4
  %402 = load float, float* %30, align 4
  %403 = fmul float %401, %402
  %404 = load float, float* %10, align 4
  %405 = load float, float* %31, align 4
  %406 = fmul float %404, %405
  %407 = fsub float %403, %406
  store float %407, float* %24, align 4
  %408 = load float, float* %10, align 4
  %409 = load float, float* %30, align 4
  %410 = fmul float %408, %409
  %411 = load float, float* %11, align 4
  %412 = load float, float* %31, align 4
  %413 = fmul float %411, %412
  %414 = fadd float %410, %413
  store float %414, float* %23, align 4
  %415 = load float, float* %25, align 4
  %416 = load float, float* %23, align 4
  %417 = fsub float %415, %416
  %418 = load float*, float** %8, align 4
  %419 = load i16, i16* %14, align 2
  %420 = sext i16 %419 to i32
  %421 = getelementptr inbounds float, float* %418, i32 %420
  store float %417, float* %421, align 4
  %422 = load float, float* %25, align 4
  %423 = load float, float* %23, align 4
  %424 = fadd float %422, %423
  %425 = load float*, float** %8, align 4
  %426 = getelementptr inbounds float, float* %425, i32 0
  store float %424, float* %426, align 4
  %427 = load float, float* %27, align 4
  %428 = load float, float* %24, align 4
  %429 = fsub float %427, %428
  %430 = load float*, float** %6, align 4
  %431 = load i16, i16* %15, align 2
  %432 = sext i16 %431 to i32
  %433 = getelementptr inbounds float, float* %430, i32 %432
  store float %429, float* %433, align 4
  %434 = load float, float* %27, align 4
  %435 = load float, float* %24, align 4
  %436 = fadd float %434, %435
  %437 = load float*, float** %6, align 4
  %438 = load i16, i16* %13, align 2
  %439 = sext i16 %438 to i32
  %440 = getelementptr inbounds float, float* %437, i32 %439
  store float %436, float* %440, align 4
  %441 = load i16, i16* %5, align 2
  %442 = sext i16 %441 to i32
  %443 = load float*, float** %8, align 4
  %444 = getelementptr inbounds float, float* %443, i32 %442
  store float* %444, float** %8, align 4
  %445 = load i16, i16* %5, align 2
  %446 = sext i16 %445 to i32
  %447 = load float*, float** %6, align 4
  %448 = getelementptr inbounds float, float* %447, i32 %446
  store float* %448, float** %6, align 4
  br label %449

; <label>:449:                                    ; preds = %252
  %450 = load float*, float** %6, align 4
  %451 = load float*, float** %7, align 4
  %452 = icmp ult float* %450, %451
  br i1 %452, label %252, label %453

; <label>:453:                                    ; preds = %449
  %454 = load float, float* %11, align 4
  store float %454, float* %21, align 4
  %455 = load float, float* %21, align 4
  %456 = load float*, float** %9, align 4
  %457 = getelementptr inbounds float, float* %456, i32 0
  %458 = load float, float* %457, align 4
  %459 = fmul float %455, %458
  %460 = load float, float* %10, align 4
  %461 = load float*, float** %9, align 4
  %462 = getelementptr inbounds float, float* %461, i32 1
  %463 = load float, float* %462, align 4
  %464 = fmul float %460, %463
  %465 = fsub float %459, %464
  store float %465, float* %11, align 4
  %466 = load float, float* %21, align 4
  %467 = load float*, float** %9, align 4
  %468 = getelementptr inbounds float, float* %467, i32 1
  %469 = load float, float* %468, align 4
  %470 = fmul float %466, %469
  %471 = load float, float* %10, align 4
  %472 = load float*, float** %9, align 4
  %473 = getelementptr inbounds float, float* %472, i32 0
  %474 = load float, float* %473, align 4
  %475 = fmul float %471, %474
  %476 = fadd float %470, %475
  store float %476, float* %10, align 4
  br label %477

; <label>:477:                                    ; preds = %453
  %478 = load i16, i16* %12, align 2
  %insertElmt99 = insertelement <4 x i16> undef, i16 %478, i32 0
  %insertElmt100 = insertelement <4 x i16> %insertElmt99, i16 %478, i32 1
  %insertElmt101 = insertelement <4 x i16> %insertElmt100, i16 %478, i32 2
  %insertElmt102 = insertelement <4 x i16> %insertElmt101, i16 %478, i32 3
  store <4 x i16> %insertElmt102, <4 x i16>* %allocaVec31, align 16
  %479 = load <4 x i16>, <4 x i16>* %allocaVec31, align 16
  %Vop103 = add <4 x i16> %479, <i16 1, i16 1, i16 1, i16 1>
  store <4 x i16> %Vop103, <4 x i16>* %allocaVec31
  %480 = load <4 x i16>, <4 x i16>* %allocaVec31, align 4
  %extractE = extractelement <4 x i16> %480, i64 0
  %extractE104 = extractelement <4 x i16> %480, i64 1
  %extractE105 = extractelement <4 x i16> %480, i64 2
  %sum = add i16 %extractE, %extractE104
  %sum106 = add i16 %sum, %extractE105
  %481 = add i16 %478, 1
  %Fmul = mul i16 %481, 3
  store i16 %481, i16* %Recovery2
  %Fcmp = icmp ne i16 %sum106, %Fmul
  br i1 %Fcmp, label %482, label %486

; <label>:482:                                    ; preds = %477
  %remThree = sdiv i16 %sum106, %extractE
  %FcmpThree = icmp ne i16 %remThree, 3
  br i1 %FcmpThree, label %483, label %484

; <label>:483:                                    ; preds = %482
  store i16 %481, i16* %Recovery2, align 2
  br label %485

; <label>:484:                                    ; preds = %482
  store i16 %extractE, i16* %Recovery2, align 2
  br label %485

; <label>:485:                                    ; preds = %484, %483
  br label %486

; <label>:486:                                    ; preds = %477, %485
  %ReplaceInst = load i16, i16* %Recovery2, align 2
  store i16 %ReplaceInst, i16* %12, align 2
  br label %218

; <label>:487:                                    ; preds = %218
  %488 = load float*, float** %9, align 4
  %489 = getelementptr inbounds float, float* %488, i32 2
  store float* %489, float** %9, align 4
  br label %490

; <label>:490:                                    ; preds = %487
  %491 = load i16, i16* %5, align 2
  %492 = sext i16 %491 to i32
  %493 = load i16, i16* %4, align 2
  %494 = sext i16 %493 to i32
  %495 = icmp slt i32 %492, %494
  br i1 %495, label %37, label %496

; <label>:496:                                    ; preds = %490
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @fft_long(float*, i32, i16**) #0 {
  %allocaVec = alloca <4 x i16>, align 16
  %Recovery = alloca i16, align 2
  %allocaVec223 = alloca <4 x float>, align 16
  %CastInst = alloca float, align 4
  %CastInstVec = alloca <4 x float>, align 16
  %allocaVec224 = alloca <4 x i32>, align 16
  %CastInst1 = alloca i32, align 4
  %CastInstVec2 = alloca <4 x i32>, align 16
  %allocaVec225 = alloca <4 x i32>, align 16
  %CastInst3 = alloca i32, align 4
  %CastInstVec4 = alloca <4 x i32>, align 16
  %allocaVec226 = alloca <4 x float>, align 16
  %CastInst5 = alloca float, align 4
  %CastInstVec6 = alloca <4 x float>, align 16
  %allocaVec227 = alloca <4 x i32>, align 16
  %CastInst7 = alloca i32, align 4
  %CastInstVec8 = alloca <4 x i32>, align 16
  %allocaVec228 = alloca <4 x i32>, align 16
  %CastInst9 = alloca i32, align 4
  %CastInstVec10 = alloca <4 x i32>, align 16
  %allocaVec229 = alloca <4 x float>, align 16
  %CastInst11 = alloca float, align 4
  %CastInstVec12 = alloca <4 x float>, align 16
  %allocaVec230 = alloca <4 x i32>, align 16
  %CastInst13 = alloca i32, align 4
  %CastInstVec14 = alloca <4 x i32>, align 16
  %allocaVec231 = alloca <4 x i32>, align 16
  %CastInst15 = alloca i32, align 4
  %CastInstVec16 = alloca <4 x i32>, align 16
  %allocaVec232 = alloca <4 x float>, align 16
  %CastInst17 = alloca float, align 4
  %CastInstVec18 = alloca <4 x float>, align 16
  %allocaVec233 = alloca <4 x i32>, align 16
  %CastInst19 = alloca i32, align 4
  %CastInstVec20 = alloca <4 x i32>, align 16
  %allocaVec234 = alloca <4 x i32>, align 16
  %CastInst21 = alloca i32, align 4
  %CastInstVec22 = alloca <4 x i32>, align 16
  %allocaVec235 = alloca <4 x float>, align 16
  %CastInst23 = alloca float, align 4
  %CastInstVec24 = alloca <4 x float>, align 16
  %allocaVec236 = alloca <4 x i32>, align 16
  %CastInst25 = alloca i32, align 4
  %CastInstVec26 = alloca <4 x i32>, align 16
  %allocaVec237 = alloca <4 x i32>, align 16
  %CastInst27 = alloca i32, align 4
  %CastInstVec28 = alloca <4 x i32>, align 16
  %allocaVec238 = alloca <4 x float>, align 16
  %CastInst29 = alloca float, align 4
  %CastInstVec30 = alloca <4 x float>, align 16
  %allocaVec239 = alloca <4 x i32>, align 16
  %CastInst31 = alloca i32, align 4
  %CastInstVec32 = alloca <4 x i32>, align 16
  %allocaVec240 = alloca <4 x i32>, align 16
  %CastInst33 = alloca i32, align 4
  %CastInstVec34 = alloca <4 x i32>, align 16
  %allocaVec241 = alloca <4 x float>, align 16
  %CastInst35 = alloca float, align 4
  %CastInstVec36 = alloca <4 x float>, align 16
  %allocaVec242 = alloca <4 x i32>, align 16
  %CastInst37 = alloca i32, align 4
  %CastInstVec38 = alloca <4 x i32>, align 16
  %allocaVec243 = alloca <4 x i32>, align 16
  %CastInst39 = alloca i32, align 4
  %CastInstVec40 = alloca <4 x i32>, align 16
  %allocaVec244 = alloca <4 x float>, align 16
  %CastInst41 = alloca float, align 4
  %CastInstVec42 = alloca <4 x float>, align 16
  %allocaVec245 = alloca <4 x i32>, align 16
  %CastInst43 = alloca i32, align 4
  %CastInstVec44 = alloca <4 x i32>, align 16
  %allocaVec246 = alloca <4 x i32>, align 16
  %CastInst45 = alloca i32, align 4
  %CastInstVec46 = alloca <4 x i32>, align 16
  %allocaVec247 = alloca <4 x float>, align 16
  %CastInst47 = alloca float, align 4
  %CastInstVec48 = alloca <4 x float>, align 16
  %allocaVec248 = alloca <4 x i32>, align 16
  %CastInst49 = alloca i32, align 4
  %CastInstVec50 = alloca <4 x i32>, align 16
  %allocaVec249 = alloca <4 x i32>, align 16
  %CastInst51 = alloca i32, align 4
  %CastInstVec52 = alloca <4 x i32>, align 16
  %allocaVec250 = alloca <4 x i32>, align 16
  %CastInst53 = alloca i32, align 4
  %CastInstVec54 = alloca <4 x i32>, align 16
  %allocaVec251 = alloca <4 x i32>, align 16
  %CastInst55 = alloca i32, align 4
  %CastInstVec56 = alloca <4 x i32>, align 16
  %allocaVec252 = alloca <4 x i32>, align 16
  %CastInst57 = alloca i32, align 4
  %CastInstVec58 = alloca <4 x i32>, align 16
  %allocaVec253 = alloca <4 x float>, align 16
  %CastInst59 = alloca float, align 4
  %CastInstVec60 = alloca <4 x float>, align 16
  %allocaVec254 = alloca <4 x i32>, align 16
  %CastInst61 = alloca i32, align 4
  %CastInstVec62 = alloca <4 x i32>, align 16
  %allocaVec255 = alloca <4 x i32>, align 16
  %CastInst63 = alloca i32, align 4
  %CastInstVec64 = alloca <4 x i32>, align 16
  %allocaVec256 = alloca <4 x i32>, align 16
  %CastInst65 = alloca i32, align 4
  %CastInstVec66 = alloca <4 x i32>, align 16
  %allocaVec257 = alloca <4 x i32>, align 16
  %CastInst67 = alloca i32, align 4
  %CastInstVec68 = alloca <4 x i32>, align 16
  %allocaVec258 = alloca <4 x i32>, align 16
  %CastInst69 = alloca i32, align 4
  %CastInstVec70 = alloca <4 x i32>, align 16
  %allocaVec259 = alloca <4 x float>, align 16
  %CastInst71 = alloca float, align 4
  %CastInstVec72 = alloca <4 x float>, align 16
  %allocaVec260 = alloca <4 x i32>, align 16
  %CastInst73 = alloca i32, align 4
  %CastInstVec74 = alloca <4 x i32>, align 16
  %allocaVec261 = alloca <4 x i32>, align 16
  %CastInst75 = alloca i32, align 4
  %CastInstVec76 = alloca <4 x i32>, align 16
  %allocaVec262 = alloca <4 x i32>, align 16
  %CastInst77 = alloca i32, align 4
  %CastInstVec78 = alloca <4 x i32>, align 16
  %allocaVec263 = alloca <4 x i32>, align 16
  %CastInst79 = alloca i32, align 4
  %CastInstVec80 = alloca <4 x i32>, align 16
  %allocaVec264 = alloca <4 x i32>, align 16
  %CastInst81 = alloca i32, align 4
  %CastInstVec82 = alloca <4 x i32>, align 16
  %allocaVec265 = alloca <4 x float>, align 16
  %CastInst83 = alloca float, align 4
  %CastInstVec84 = alloca <4 x float>, align 16
  %allocaVec266 = alloca <4 x i32>, align 16
  %CastInst85 = alloca i32, align 4
  %CastInstVec86 = alloca <4 x i32>, align 16
  %allocaVec267 = alloca <4 x i32>, align 16
  %CastInst87 = alloca i32, align 4
  %CastInstVec88 = alloca <4 x i32>, align 16
  %allocaVec268 = alloca <4 x i32>, align 16
  %CastInst89 = alloca i32, align 4
  %CastInstVec90 = alloca <4 x i32>, align 16
  %allocaVec269 = alloca <4 x i32>, align 16
  %CastInst91 = alloca i32, align 4
  %CastInstVec92 = alloca <4 x i32>, align 16
  %allocaVec270 = alloca <4 x i32>, align 16
  %CastInst93 = alloca i32, align 4
  %CastInstVec94 = alloca <4 x i32>, align 16
  %allocaVec271 = alloca <4 x float>, align 16
  %CastInst95 = alloca float, align 4
  %CastInstVec96 = alloca <4 x float>, align 16
  %allocaVec272 = alloca <4 x i32>, align 16
  %CastInst97 = alloca i32, align 4
  %CastInstVec98 = alloca <4 x i32>, align 16
  %allocaVec273 = alloca <4 x i32>, align 16
  %CastInst99 = alloca i32, align 4
  %CastInstVec100 = alloca <4 x i32>, align 16
  %allocaVec274 = alloca <4 x i32>, align 16
  %CastInst101 = alloca i32, align 4
  %CastInstVec102 = alloca <4 x i32>, align 16
  %allocaVec275 = alloca <4 x i32>, align 16
  %CastInst103 = alloca i32, align 4
  %CastInstVec104 = alloca <4 x i32>, align 16
  %allocaVec276 = alloca <4 x i32>, align 16
  %CastInst105 = alloca i32, align 4
  %CastInstVec106 = alloca <4 x i32>, align 16
  %allocaVec277 = alloca <4 x float>, align 16
  %CastInst107 = alloca float, align 4
  %CastInstVec108 = alloca <4 x float>, align 16
  %allocaVec278 = alloca <4 x i32>, align 16
  %CastInst109 = alloca i32, align 4
  %CastInstVec110 = alloca <4 x i32>, align 16
  %allocaVec279 = alloca <4 x i32>, align 16
  %CastInst111 = alloca i32, align 4
  %CastInstVec112 = alloca <4 x i32>, align 16
  %allocaVec280 = alloca <4 x i32>, align 16
  %CastInst113 = alloca i32, align 4
  %CastInstVec114 = alloca <4 x i32>, align 16
  %allocaVec281 = alloca <4 x i32>, align 16
  %CastInst115 = alloca i32, align 4
  %CastInstVec116 = alloca <4 x i32>, align 16
  %allocaVec282 = alloca <4 x i32>, align 16
  %CastInst117 = alloca i32, align 4
  %CastInstVec118 = alloca <4 x i32>, align 16
  %allocaVec283 = alloca <4 x float>, align 16
  %CastInst119 = alloca float, align 4
  %CastInstVec120 = alloca <4 x float>, align 16
  %allocaVec284 = alloca <4 x i32>, align 16
  %CastInst121 = alloca i32, align 4
  %CastInstVec122 = alloca <4 x i32>, align 16
  %allocaVec285 = alloca <4 x i32>, align 16
  %CastInst123 = alloca i32, align 4
  %CastInstVec124 = alloca <4 x i32>, align 16
  %allocaVec286 = alloca <4 x i32>, align 16
  %CastInst125 = alloca i32, align 4
  %CastInstVec126 = alloca <4 x i32>, align 16
  %allocaVec287 = alloca <4 x i32>, align 16
  %CastInst127 = alloca i32, align 4
  %CastInstVec128 = alloca <4 x i32>, align 16
  %allocaVec288 = alloca <4 x i32>, align 16
  %CastInst129 = alloca i32, align 4
  %CastInstVec130 = alloca <4 x i32>, align 16
  %allocaVec289 = alloca <4 x float>, align 16
  %CastInst131 = alloca float, align 4
  %CastInstVec132 = alloca <4 x float>, align 16
  %allocaVec290 = alloca <4 x i32>, align 16
  %CastInst133 = alloca i32, align 4
  %CastInstVec134 = alloca <4 x i32>, align 16
  %allocaVec291 = alloca <4 x i32>, align 16
  %CastInst135 = alloca i32, align 4
  %CastInstVec136 = alloca <4 x i32>, align 16
  %allocaVec292 = alloca <4 x float>, align 16
  %CastInst137 = alloca float, align 4
  %CastInstVec138 = alloca <4 x float>, align 16
  %allocaVec293 = alloca <4 x i32>, align 16
  %CastInst139 = alloca i32, align 4
  %CastInstVec140 = alloca <4 x i32>, align 16
  %allocaVec294 = alloca <4 x i32>, align 16
  %CastInst141 = alloca i32, align 4
  %CastInstVec142 = alloca <4 x i32>, align 16
  %allocaVec295 = alloca <4 x i32>, align 16
  %CastInst143 = alloca i32, align 4
  %CastInstVec144 = alloca <4 x i32>, align 16
  %allocaVec296 = alloca <4 x i32>, align 16
  %CastInst145 = alloca i32, align 4
  %CastInstVec146 = alloca <4 x i32>, align 16
  %allocaVec297 = alloca <4 x i32>, align 16
  %CastInst147 = alloca i32, align 4
  %CastInstVec148 = alloca <4 x i32>, align 16
  %allocaVec298 = alloca <4 x float>, align 16
  %CastInst149 = alloca float, align 4
  %CastInstVec150 = alloca <4 x float>, align 16
  %allocaVec299 = alloca <4 x i32>, align 16
  %CastInst151 = alloca i32, align 4
  %CastInstVec152 = alloca <4 x i32>, align 16
  %allocaVec300 = alloca <4 x i32>, align 16
  %CastInst153 = alloca i32, align 4
  %CastInstVec154 = alloca <4 x i32>, align 16
  %allocaVec301 = alloca <4 x i32>, align 16
  %CastInst155 = alloca i32, align 4
  %CastInstVec156 = alloca <4 x i32>, align 16
  %allocaVec302 = alloca <4 x i32>, align 16
  %CastInst157 = alloca i32, align 4
  %CastInstVec158 = alloca <4 x i32>, align 16
  %allocaVec303 = alloca <4 x i32>, align 16
  %CastInst159 = alloca i32, align 4
  %CastInstVec160 = alloca <4 x i32>, align 16
  %allocaVec304 = alloca <4 x float>, align 16
  %CastInst161 = alloca float, align 4
  %CastInstVec162 = alloca <4 x float>, align 16
  %allocaVec305 = alloca <4 x i32>, align 16
  %CastInst163 = alloca i32, align 4
  %CastInstVec164 = alloca <4 x i32>, align 16
  %allocaVec306 = alloca <4 x i32>, align 16
  %CastInst165 = alloca i32, align 4
  %CastInstVec166 = alloca <4 x i32>, align 16
  %allocaVec307 = alloca <4 x i32>, align 16
  %CastInst167 = alloca i32, align 4
  %CastInstVec168 = alloca <4 x i32>, align 16
  %allocaVec308 = alloca <4 x i32>, align 16
  %CastInst169 = alloca i32, align 4
  %CastInstVec170 = alloca <4 x i32>, align 16
  %allocaVec309 = alloca <4 x i32>, align 16
  %CastInst171 = alloca i32, align 4
  %CastInstVec172 = alloca <4 x i32>, align 16
  %allocaVec310 = alloca <4 x float>, align 16
  %CastInst173 = alloca float, align 4
  %CastInstVec174 = alloca <4 x float>, align 16
  %allocaVec311 = alloca <4 x i32>, align 16
  %CastInst175 = alloca i32, align 4
  %CastInstVec176 = alloca <4 x i32>, align 16
  %allocaVec312 = alloca <4 x i32>, align 16
  %CastInst177 = alloca i32, align 4
  %CastInstVec178 = alloca <4 x i32>, align 16
  %allocaVec313 = alloca <4 x i32>, align 16
  %CastInst179 = alloca i32, align 4
  %CastInstVec180 = alloca <4 x i32>, align 16
  %allocaVec314 = alloca <4 x i32>, align 16
  %CastInst181 = alloca i32, align 4
  %CastInstVec182 = alloca <4 x i32>, align 16
  %allocaVec315 = alloca <4 x i32>, align 16
  %CastInst183 = alloca i32, align 4
  %CastInstVec184 = alloca <4 x i32>, align 16
  %allocaVec316 = alloca <4 x float>, align 16
  %CastInst185 = alloca float, align 4
  %CastInstVec186 = alloca <4 x float>, align 16
  %allocaVec317 = alloca <4 x i32>, align 16
  %CastInst187 = alloca i32, align 4
  %CastInstVec188 = alloca <4 x i32>, align 16
  %allocaVec318 = alloca <4 x i32>, align 16
  %CastInst189 = alloca i32, align 4
  %CastInstVec190 = alloca <4 x i32>, align 16
  %allocaVec319 = alloca <4 x i32>, align 16
  %CastInst191 = alloca i32, align 4
  %CastInstVec192 = alloca <4 x i32>, align 16
  %allocaVec320 = alloca <4 x i32>, align 16
  %CastInst193 = alloca i32, align 4
  %CastInstVec194 = alloca <4 x i32>, align 16
  %allocaVec321 = alloca <4 x i32>, align 16
  %CastInst195 = alloca i32, align 4
  %CastInstVec196 = alloca <4 x i32>, align 16
  %allocaVec322 = alloca <4 x float>, align 16
  %CastInst197 = alloca float, align 4
  %CastInstVec198 = alloca <4 x float>, align 16
  %allocaVec323 = alloca <4 x i32>, align 16
  %CastInst199 = alloca i32, align 4
  %CastInstVec200 = alloca <4 x i32>, align 16
  %allocaVec324 = alloca <4 x i32>, align 16
  %CastInst201 = alloca i32, align 4
  %CastInstVec202 = alloca <4 x i32>, align 16
  %allocaVec325 = alloca <4 x i32>, align 16
  %CastInst203 = alloca i32, align 4
  %CastInstVec204 = alloca <4 x i32>, align 16
  %allocaVec326 = alloca <4 x i32>, align 16
  %CastInst205 = alloca i32, align 4
  %CastInstVec206 = alloca <4 x i32>, align 16
  %allocaVec327 = alloca <4 x i32>, align 16
  %CastInst207 = alloca i32, align 4
  %CastInstVec208 = alloca <4 x i32>, align 16
  %allocaVec328 = alloca <4 x float>, align 16
  %CastInst209 = alloca float, align 4
  %CastInstVec210 = alloca <4 x float>, align 16
  %allocaVec329 = alloca <4 x i32>, align 16
  %CastInst211 = alloca i32, align 4
  %CastInstVec212 = alloca <4 x i32>, align 16
  %allocaVec330 = alloca <4 x i32>, align 16
  %CastInst213 = alloca i32, align 4
  %CastInstVec214 = alloca <4 x i32>, align 16
  %allocaVec331 = alloca <4 x i32>, align 16
  %CastInst215 = alloca i32, align 4
  %CastInstVec216 = alloca <4 x i32>, align 16
  %allocaVec332 = alloca <4 x i32>, align 16
  %CastInst217 = alloca i32, align 4
  %CastInstVec218 = alloca <4 x i32>, align 16
  %allocaVec333 = alloca <4 x i32>, align 16
  %CastInst219 = alloca i32, align 4
  %CastInstVec220 = alloca <4 x i32>, align 16
  %allocaVec334 = alloca <4 x float>, align 16
  %CastInst221 = alloca float, align 4
  %CastInstVec222 = alloca <4 x float>, align 16
  %4 = alloca float*, align 4
  %allocaVec335 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %6 = alloca i16**, align 4
  %allocaVec336 = alloca <4 x i16>, align 16
  %7 = alloca i16, align 2
  %allocaVec337 = alloca <4 x i16>, align 16
  %8 = alloca i16, align 2
  %allocaVec338 = alloca <4 x float>, align 16
  %9 = alloca float, align 4
  %allocaVec339 = alloca <4 x float>, align 16
  %10 = alloca float, align 4
  %allocaVec340 = alloca <4 x float>, align 16
  %11 = alloca float, align 4
  %allocaVec341 = alloca <4 x float>, align 16
  %12 = alloca float, align 4
  %allocaVec342 = alloca <4 x float>, align 16
  %13 = alloca float, align 4
  %allocaVec343 = alloca <4 x float>, align 16
  %14 = alloca float, align 4
  %allocaVec344 = alloca <4 x float>, align 16
  %15 = alloca float, align 4
  %allocaVec345 = alloca <4 x float>, align 16
  %16 = alloca float, align 4
  %allocaVec346 = alloca <4 x float>, align 16
  %17 = alloca float, align 4
  %allocaVec347 = alloca <4 x float>, align 16
  %18 = alloca float, align 4
  %allocaVec348 = alloca <4 x float>, align 16
  %19 = alloca float, align 4
  %allocaVec349 = alloca <4 x float>, align 16
  %20 = alloca float, align 4
  %allocaVec350 = alloca <4 x float>, align 16
  %21 = alloca float, align 4
  %allocaVec351 = alloca <4 x float>, align 16
  %22 = alloca float, align 4
  %allocaVec352 = alloca <4 x float>, align 16
  %23 = alloca float, align 4
  store float* %0, float** %4, align 4
  store i32 %1, i32* %5, align 4
  store i16** %2, i16*** %6, align 4
  store <4 x i16> <i16 127, i16 127, i16 127, i16 127>, <4 x i16>* %allocaVec337
  store i16 127, i16* %8, align 2
  %24 = load float*, float** %4, align 4
  %25 = getelementptr inbounds float, float* %24, i32 512
  store float* %25, float** %4, align 4
  %26 = load i32, i32* %5, align 4
  %27 = icmp slt i32 %26, 2
  br i1 %27, label %28, label %241

; <label>:28:                                     ; preds = %3
  br label %29

; <label>:29:                                     ; preds = %234, %28
  %30 = load i16, i16* %8, align 2
  %31 = sext i16 %30 to i32
  %32 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i32 0, i32 %31
  %33 = load i16, i16* %32, align 2
  store i16 %33, i16* %7, align 2
  %34 = load i16, i16* %7, align 2
  %35 = sext i16 %34 to i32
  %36 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %35
  %37 = load float, float* %36, align 4
  %38 = load i16**, i16*** %6, align 4
  %39 = load i32, i32* %5, align 4
  %40 = getelementptr inbounds i16*, i16** %38, i32 %39
  %41 = load i16*, i16** %40, align 4
  %42 = load i16, i16* %7, align 2
  %43 = sext i16 %42 to i32
  %44 = getelementptr inbounds i16, i16* %41, i32 %43
  %45 = load i16, i16* %44, align 2
  %46 = sext i16 %45 to i32
  %47 = sitofp i32 %46 to float
  %48 = fmul float %37, %47
  store float %48, float* %9, align 4
  %49 = load i16, i16* %7, align 2
  %50 = sext i16 %49 to i32
  %51 = sub nsw i32 511, %50
  %52 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %51
  %53 = load float, float* %52, align 4
  %54 = load i16**, i16*** %6, align 4
  %55 = load i32, i32* %5, align 4
  %56 = getelementptr inbounds i16*, i16** %54, i32 %55
  %57 = load i16*, i16** %56, align 4
  %58 = load i16, i16* %7, align 2
  %59 = sext i16 %58 to i32
  %60 = add nsw i32 %59, 512
  %61 = getelementptr inbounds i16, i16* %57, i32 %60
  %62 = load i16, i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = sitofp i32 %63 to float
  %65 = fmul float %53, %64
  store float %65, float* %13, align 4
  %66 = load float, float* %9, align 4
  %67 = load float, float* %13, align 4
  %68 = fsub float %66, %67
  store float %68, float* %10, align 4
  %69 = load float, float* %9, align 4
  %70 = load float, float* %13, align 4
  %71 = fadd float %69, %70
  store float %71, float* %9, align 4
  %72 = load i16, i16* %7, align 2
  %73 = sext i16 %72 to i32
  %74 = add nsw i32 %73, 256
  %75 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %74
  %76 = load float, float* %75, align 4
  %77 = load i16**, i16*** %6, align 4
  %78 = load i32, i32* %5, align 4
  %79 = getelementptr inbounds i16*, i16** %77, i32 %78
  %80 = load i16*, i16** %79, align 4
  %81 = load i16, i16* %7, align 2
  %82 = sext i16 %81 to i32
  %83 = add nsw i32 %82, 256
  %84 = getelementptr inbounds i16, i16* %80, i32 %83
  %85 = load i16, i16* %84, align 2
  %86 = sext i16 %85 to i32
  %87 = sitofp i32 %86 to float
  %88 = fmul float %76, %87
  store float %88, float* %11, align 4
  %89 = load i16, i16* %7, align 2
  %90 = sext i16 %89 to i32
  %91 = sub nsw i32 255, %90
  %92 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %91
  %93 = load float, float* %92, align 4
  %94 = load i16**, i16*** %6, align 4
  %95 = load i32, i32* %5, align 4
  %96 = getelementptr inbounds i16*, i16** %94, i32 %95
  %97 = load i16*, i16** %96, align 4
  %98 = load i16, i16* %7, align 2
  %99 = sext i16 %98 to i32
  %100 = add nsw i32 %99, 768
  %101 = getelementptr inbounds i16, i16* %97, i32 %100
  %102 = load i16, i16* %101, align 2
  %103 = sext i16 %102 to i32
  %104 = sitofp i32 %103 to float
  %105 = fmul float %93, %104
  store float %105, float* %13, align 4
  %106 = load float, float* %11, align 4
  %107 = load float, float* %13, align 4
  %108 = fsub float %106, %107
  store float %108, float* %12, align 4
  %109 = load float, float* %11, align 4
  %110 = load float, float* %13, align 4
  %111 = fadd float %109, %110
  store float %111, float* %11, align 4
  %112 = load float*, float** %4, align 4
  %113 = getelementptr inbounds float, float* %112, i32 -4
  store float* %113, float** %4, align 4
  %114 = load float, float* %9, align 4
  %115 = load float, float* %11, align 4
  %116 = fadd float %114, %115
  %117 = load float*, float** %4, align 4
  %118 = getelementptr inbounds float, float* %117, i32 0
  store float %116, float* %118, align 4
  %119 = load float, float* %9, align 4
  %120 = load float, float* %11, align 4
  %121 = fsub float %119, %120
  %122 = load float*, float** %4, align 4
  %123 = getelementptr inbounds float, float* %122, i32 2
  store float %121, float* %123, align 4
  %124 = load float, float* %10, align 4
  %125 = load float, float* %12, align 4
  %126 = fadd float %124, %125
  %127 = load float*, float** %4, align 4
  %128 = getelementptr inbounds float, float* %127, i32 1
  store float %126, float* %128, align 4
  %129 = load float, float* %10, align 4
  %130 = load float, float* %12, align 4
  %131 = fsub float %129, %130
  %132 = load float*, float** %4, align 4
  %133 = getelementptr inbounds float, float* %132, i32 3
  store float %131, float* %133, align 4
  %134 = load i16, i16* %7, align 2
  %135 = sext i16 %134 to i32
  %136 = add nsw i32 %135, 1
  %137 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %136
  %138 = load float, float* %137, align 4
  %139 = load i16**, i16*** %6, align 4
  %140 = load i32, i32* %5, align 4
  %141 = getelementptr inbounds i16*, i16** %139, i32 %140
  %142 = load i16*, i16** %141, align 4
  %143 = load i16, i16* %7, align 2
  %144 = sext i16 %143 to i32
  %145 = add nsw i32 %144, 1
  %146 = getelementptr inbounds i16, i16* %142, i32 %145
  %147 = load i16, i16* %146, align 2
  %148 = sext i16 %147 to i32
  %149 = sitofp i32 %148 to float
  %150 = fmul float %138, %149
  store float %150, float* %9, align 4
  %151 = load i16, i16* %7, align 2
  %152 = sext i16 %151 to i32
  %153 = sub nsw i32 510, %152
  %154 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %153
  %155 = load float, float* %154, align 4
  %156 = load i16**, i16*** %6, align 4
  %157 = load i32, i32* %5, align 4
  %158 = getelementptr inbounds i16*, i16** %156, i32 %157
  %159 = load i16*, i16** %158, align 4
  %160 = load i16, i16* %7, align 2
  %161 = sext i16 %160 to i32
  %162 = add nsw i32 %161, 513
  %163 = getelementptr inbounds i16, i16* %159, i32 %162
  %164 = load i16, i16* %163, align 2
  %165 = sext i16 %164 to i32
  %166 = sitofp i32 %165 to float
  %167 = fmul float %155, %166
  store float %167, float* %13, align 4
  %168 = load float, float* %9, align 4
  %169 = load float, float* %13, align 4
  %170 = fsub float %168, %169
  store float %170, float* %10, align 4
  %171 = load float, float* %9, align 4
  %172 = load float, float* %13, align 4
  %173 = fadd float %171, %172
  store float %173, float* %9, align 4
  %174 = load i16, i16* %7, align 2
  %175 = sext i16 %174 to i32
  %176 = add nsw i32 %175, 257
  %177 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %176
  %178 = load float, float* %177, align 4
  %179 = load i16**, i16*** %6, align 4
  %180 = load i32, i32* %5, align 4
  %181 = getelementptr inbounds i16*, i16** %179, i32 %180
  %182 = load i16*, i16** %181, align 4
  %183 = load i16, i16* %7, align 2
  %184 = sext i16 %183 to i32
  %185 = add nsw i32 %184, 257
  %186 = getelementptr inbounds i16, i16* %182, i32 %185
  %187 = load i16, i16* %186, align 2
  %188 = sext i16 %187 to i32
  %189 = sitofp i32 %188 to float
  %190 = fmul float %178, %189
  store float %190, float* %11, align 4
  %191 = load i16, i16* %7, align 2
  %192 = sext i16 %191 to i32
  %193 = sub nsw i32 254, %192
  %194 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %193
  %195 = load float, float* %194, align 4
  %196 = load i16**, i16*** %6, align 4
  %197 = load i32, i32* %5, align 4
  %198 = getelementptr inbounds i16*, i16** %196, i32 %197
  %199 = load i16*, i16** %198, align 4
  %200 = load i16, i16* %7, align 2
  %201 = sext i16 %200 to i32
  %202 = add nsw i32 %201, 769
  %203 = getelementptr inbounds i16, i16* %199, i32 %202
  %204 = load i16, i16* %203, align 2
  %205 = sext i16 %204 to i32
  %206 = sitofp i32 %205 to float
  %207 = fmul float %195, %206
  store float %207, float* %13, align 4
  %208 = load float, float* %11, align 4
  %209 = load float, float* %13, align 4
  %210 = fsub float %208, %209
  store float %210, float* %12, align 4
  %211 = load float, float* %11, align 4
  %212 = load float, float* %13, align 4
  %213 = fadd float %211, %212
  store float %213, float* %11, align 4
  %214 = load float, float* %9, align 4
  %215 = load float, float* %11, align 4
  %216 = fadd float %214, %215
  %217 = load float*, float** %4, align 4
  %218 = getelementptr inbounds float, float* %217, i32 512
  store float %216, float* %218, align 4
  %219 = load float, float* %9, align 4
  %220 = load float, float* %11, align 4
  %221 = fsub float %219, %220
  %222 = load float*, float** %4, align 4
  %223 = getelementptr inbounds float, float* %222, i32 514
  store float %221, float* %223, align 4
  %224 = load float, float* %10, align 4
  %225 = load float, float* %12, align 4
  %226 = fadd float %224, %225
  %227 = load float*, float** %4, align 4
  %228 = getelementptr inbounds float, float* %227, i32 513
  store float %226, float* %228, align 4
  %229 = load float, float* %10, align 4
  %230 = load float, float* %12, align 4
  %231 = fsub float %229, %230
  %232 = load float*, float** %4, align 4
  %233 = getelementptr inbounds float, float* %232, i32 515
  store float %231, float* %233, align 4
  br label %234

; <label>:234:                                    ; preds = %29
  %235 = load i16, i16* %8, align 2
  %insertElmt = insertelement <4 x i16> undef, i16 %235, i32 0
  %insertElmt353 = insertelement <4 x i16> %insertElmt, i16 %235, i32 1
  %insertElmt354 = insertelement <4 x i16> %insertElmt353, i16 %235, i32 2
  %insertElmt355 = insertelement <4 x i16> %insertElmt354, i16 %235, i32 3
  store <4 x i16> %insertElmt355, <4 x i16>* %allocaVec337, align 16
  %236 = load <4 x i16>, <4 x i16>* %allocaVec337, align 16
  %Vop = add <4 x i16> %236, <i16 -1, i16 -1, i16 -1, i16 -1>
  store <4 x i16> %Vop, <4 x i16>* %allocaVec337
  %237 = add i16 %235, -1
  store i16 %237, i16* %8, align 2
  %238 = sext i16 %237 to i32
  %239 = icmp sge i32 %238, 0
  br i1 %239, label %29, label %240

; <label>:240:                                    ; preds = %234
  br label %835

; <label>:241:                                    ; preds = %3
  %242 = load i32, i32* %5, align 4
  %243 = icmp eq i32 %242, 2
  br i1 %243, label %244, label %536

; <label>:244:                                    ; preds = %241
  br label %245

; <label>:245:                                    ; preds = %529, %244
  %246 = load i16, i16* %8, align 2
  %247 = sext i16 %246 to i32
  %248 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i32 0, i32 %247
  %249 = load i16, i16* %248, align 2
  store i16 %249, i16* %7, align 2
  %250 = load i16, i16* %7, align 2
  %251 = sext i16 %250 to i32
  %252 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %251
  %253 = load float, float* %252, align 4
  %254 = load i16**, i16*** %6, align 4
  %255 = getelementptr inbounds i16*, i16** %254, i32 0
  %256 = load i16*, i16** %255, align 4
  %257 = load i16, i16* %7, align 2
  %258 = sext i16 %257 to i32
  %259 = getelementptr inbounds i16, i16* %256, i32 %258
  %260 = load i16, i16* %259, align 2
  %261 = sext i16 %260 to i32
  %262 = load i16**, i16*** %6, align 4
  %263 = getelementptr inbounds i16*, i16** %262, i32 1
  %264 = load i16*, i16** %263, align 4
  %265 = load i16, i16* %7, align 2
  %266 = sext i16 %265 to i32
  %267 = getelementptr inbounds i16, i16* %264, i32 %266
  %268 = load i16, i16* %267, align 2
  %269 = sext i16 %268 to i32
  %270 = add nsw i32 %261, %269
  %271 = sitofp i32 %270 to float
  %272 = fmul float 0x3FE6A09E60000000, %271
  %273 = fmul float %253, %272
  store float %273, float* %14, align 4
  %274 = load i16, i16* %7, align 2
  %275 = sext i16 %274 to i32
  %276 = sub nsw i32 511, %275
  %277 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %276
  %278 = load float, float* %277, align 4
  %279 = load i16**, i16*** %6, align 4
  %280 = getelementptr inbounds i16*, i16** %279, i32 0
  %281 = load i16*, i16** %280, align 4
  %282 = load i16, i16* %7, align 2
  %283 = sext i16 %282 to i32
  %284 = add nsw i32 %283, 512
  %285 = getelementptr inbounds i16, i16* %281, i32 %284
  %286 = load i16, i16* %285, align 2
  %287 = sext i16 %286 to i32
  %288 = load i16**, i16*** %6, align 4
  %289 = getelementptr inbounds i16*, i16** %288, i32 1
  %290 = load i16*, i16** %289, align 4
  %291 = load i16, i16* %7, align 2
  %292 = sext i16 %291 to i32
  %293 = add nsw i32 %292, 512
  %294 = getelementptr inbounds i16, i16* %290, i32 %293
  %295 = load i16, i16* %294, align 2
  %296 = sext i16 %295 to i32
  %297 = add nsw i32 %287, %296
  %298 = sitofp i32 %297 to float
  %299 = fmul float 0x3FE6A09E60000000, %298
  %300 = fmul float %278, %299
  store float %300, float* %18, align 4
  %301 = load float, float* %14, align 4
  %302 = load float, float* %18, align 4
  %303 = fsub float %301, %302
  store float %303, float* %15, align 4
  %304 = load float, float* %14, align 4
  %305 = load float, float* %18, align 4
  %306 = fadd float %304, %305
  store float %306, float* %14, align 4
  %307 = load i16, i16* %7, align 2
  %308 = sext i16 %307 to i32
  %309 = add nsw i32 %308, 256
  %310 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %309
  %311 = load float, float* %310, align 4
  %312 = load i16**, i16*** %6, align 4
  %313 = getelementptr inbounds i16*, i16** %312, i32 0
  %314 = load i16*, i16** %313, align 4
  %315 = load i16, i16* %7, align 2
  %316 = sext i16 %315 to i32
  %317 = add nsw i32 %316, 256
  %318 = getelementptr inbounds i16, i16* %314, i32 %317
  %319 = load i16, i16* %318, align 2
  %320 = sext i16 %319 to i32
  %321 = load i16**, i16*** %6, align 4
  %322 = getelementptr inbounds i16*, i16** %321, i32 1
  %323 = load i16*, i16** %322, align 4
  %324 = load i16, i16* %7, align 2
  %325 = sext i16 %324 to i32
  %326 = add nsw i32 %325, 256
  %327 = getelementptr inbounds i16, i16* %323, i32 %326
  %328 = load i16, i16* %327, align 2
  %329 = sext i16 %328 to i32
  %330 = add nsw i32 %320, %329
  %331 = sitofp i32 %330 to float
  %332 = fmul float 0x3FE6A09E60000000, %331
  %333 = fmul float %311, %332
  store float %333, float* %16, align 4
  %334 = load i16, i16* %7, align 2
  %335 = sext i16 %334 to i32
  %336 = sub nsw i32 255, %335
  %337 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %336
  %338 = load float, float* %337, align 4
  %339 = load i16**, i16*** %6, align 4
  %340 = getelementptr inbounds i16*, i16** %339, i32 0
  %341 = load i16*, i16** %340, align 4
  %342 = load i16, i16* %7, align 2
  %343 = sext i16 %342 to i32
  %344 = add nsw i32 %343, 768
  %345 = getelementptr inbounds i16, i16* %341, i32 %344
  %346 = load i16, i16* %345, align 2
  %347 = sext i16 %346 to i32
  %348 = load i16**, i16*** %6, align 4
  %349 = getelementptr inbounds i16*, i16** %348, i32 1
  %350 = load i16*, i16** %349, align 4
  %351 = load i16, i16* %7, align 2
  %352 = sext i16 %351 to i32
  %353 = add nsw i32 %352, 768
  %354 = getelementptr inbounds i16, i16* %350, i32 %353
  %355 = load i16, i16* %354, align 2
  %356 = sext i16 %355 to i32
  %357 = add nsw i32 %347, %356
  %358 = sitofp i32 %357 to float
  %359 = fmul float 0x3FE6A09E60000000, %358
  %360 = fmul float %338, %359
  store float %360, float* %18, align 4
  %361 = load float, float* %16, align 4
  %362 = load float, float* %18, align 4
  %363 = fsub float %361, %362
  store float %363, float* %17, align 4
  %364 = load float, float* %16, align 4
  %365 = load float, float* %18, align 4
  %366 = fadd float %364, %365
  store float %366, float* %16, align 4
  %367 = load float*, float** %4, align 4
  %368 = getelementptr inbounds float, float* %367, i32 -4
  store float* %368, float** %4, align 4
  %369 = load float, float* %14, align 4
  %370 = load float, float* %16, align 4
  %371 = fadd float %369, %370
  %372 = load float*, float** %4, align 4
  %373 = getelementptr inbounds float, float* %372, i32 0
  store float %371, float* %373, align 4
  %374 = load float, float* %14, align 4
  %375 = load float, float* %16, align 4
  %376 = fsub float %374, %375
  %377 = load float*, float** %4, align 4
  %378 = getelementptr inbounds float, float* %377, i32 2
  store float %376, float* %378, align 4
  %379 = load float, float* %15, align 4
  %380 = load float, float* %17, align 4
  %381 = fadd float %379, %380
  %382 = load float*, float** %4, align 4
  %383 = getelementptr inbounds float, float* %382, i32 1
  store float %381, float* %383, align 4
  %384 = load float, float* %15, align 4
  %385 = load float, float* %17, align 4
  %386 = fsub float %384, %385
  %387 = load float*, float** %4, align 4
  %388 = getelementptr inbounds float, float* %387, i32 3
  store float %386, float* %388, align 4
  %389 = load i16, i16* %7, align 2
  %390 = sext i16 %389 to i32
  %391 = add nsw i32 %390, 1
  %392 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %391
  %393 = load float, float* %392, align 4
  %394 = load i16**, i16*** %6, align 4
  %395 = getelementptr inbounds i16*, i16** %394, i32 0
  %396 = load i16*, i16** %395, align 4
  %397 = load i16, i16* %7, align 2
  %398 = sext i16 %397 to i32
  %399 = add nsw i32 %398, 1
  %400 = getelementptr inbounds i16, i16* %396, i32 %399
  %401 = load i16, i16* %400, align 2
  %402 = sext i16 %401 to i32
  %403 = load i16**, i16*** %6, align 4
  %404 = getelementptr inbounds i16*, i16** %403, i32 1
  %405 = load i16*, i16** %404, align 4
  %406 = load i16, i16* %7, align 2
  %407 = sext i16 %406 to i32
  %408 = add nsw i32 %407, 1
  %409 = getelementptr inbounds i16, i16* %405, i32 %408
  %410 = load i16, i16* %409, align 2
  %411 = sext i16 %410 to i32
  %412 = add nsw i32 %402, %411
  %413 = sitofp i32 %412 to float
  %414 = fmul float 0x3FE6A09E60000000, %413
  %415 = fmul float %393, %414
  store float %415, float* %14, align 4
  %416 = load i16, i16* %7, align 2
  %417 = sext i16 %416 to i32
  %418 = sub nsw i32 510, %417
  %419 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %418
  %420 = load float, float* %419, align 4
  %421 = load i16**, i16*** %6, align 4
  %422 = getelementptr inbounds i16*, i16** %421, i32 0
  %423 = load i16*, i16** %422, align 4
  %424 = load i16, i16* %7, align 2
  %425 = sext i16 %424 to i32
  %426 = add nsw i32 %425, 513
  %427 = getelementptr inbounds i16, i16* %423, i32 %426
  %428 = load i16, i16* %427, align 2
  %429 = sext i16 %428 to i32
  %430 = load i16**, i16*** %6, align 4
  %431 = getelementptr inbounds i16*, i16** %430, i32 1
  %432 = load i16*, i16** %431, align 4
  %433 = load i16, i16* %7, align 2
  %434 = sext i16 %433 to i32
  %435 = add nsw i32 %434, 513
  %436 = getelementptr inbounds i16, i16* %432, i32 %435
  %437 = load i16, i16* %436, align 2
  %438 = sext i16 %437 to i32
  %439 = add nsw i32 %429, %438
  %440 = sitofp i32 %439 to float
  %441 = fmul float 0x3FE6A09E60000000, %440
  %442 = fmul float %420, %441
  store float %442, float* %18, align 4
  %443 = load float, float* %14, align 4
  %444 = load float, float* %18, align 4
  %445 = fsub float %443, %444
  store float %445, float* %15, align 4
  %446 = load float, float* %14, align 4
  %447 = load float, float* %18, align 4
  %448 = fadd float %446, %447
  store float %448, float* %14, align 4
  %449 = load i16, i16* %7, align 2
  %450 = sext i16 %449 to i32
  %451 = add nsw i32 %450, 257
  %452 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %451
  %453 = load float, float* %452, align 4
  %454 = load i16**, i16*** %6, align 4
  %455 = getelementptr inbounds i16*, i16** %454, i32 0
  %456 = load i16*, i16** %455, align 4
  %457 = load i16, i16* %7, align 2
  %458 = sext i16 %457 to i32
  %459 = add nsw i32 %458, 257
  %460 = getelementptr inbounds i16, i16* %456, i32 %459
  %461 = load i16, i16* %460, align 2
  %462 = sext i16 %461 to i32
  %463 = load i16**, i16*** %6, align 4
  %464 = getelementptr inbounds i16*, i16** %463, i32 1
  %465 = load i16*, i16** %464, align 4
  %466 = load i16, i16* %7, align 2
  %467 = sext i16 %466 to i32
  %468 = add nsw i32 %467, 257
  %469 = getelementptr inbounds i16, i16* %465, i32 %468
  %470 = load i16, i16* %469, align 2
  %471 = sext i16 %470 to i32
  %472 = add nsw i32 %462, %471
  %473 = sitofp i32 %472 to float
  %474 = fmul float 0x3FE6A09E60000000, %473
  %475 = fmul float %453, %474
  store float %475, float* %16, align 4
  %476 = load i16, i16* %7, align 2
  %477 = sext i16 %476 to i32
  %478 = sub nsw i32 254, %477
  %479 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %478
  %480 = load float, float* %479, align 4
  %481 = load i16**, i16*** %6, align 4
  %482 = getelementptr inbounds i16*, i16** %481, i32 0
  %483 = load i16*, i16** %482, align 4
  %484 = load i16, i16* %7, align 2
  %485 = sext i16 %484 to i32
  %486 = add nsw i32 %485, 769
  %487 = getelementptr inbounds i16, i16* %483, i32 %486
  %488 = load i16, i16* %487, align 2
  %489 = sext i16 %488 to i32
  %490 = load i16**, i16*** %6, align 4
  %491 = getelementptr inbounds i16*, i16** %490, i32 1
  %492 = load i16*, i16** %491, align 4
  %493 = load i16, i16* %7, align 2
  %494 = sext i16 %493 to i32
  %495 = add nsw i32 %494, 769
  %496 = getelementptr inbounds i16, i16* %492, i32 %495
  %497 = load i16, i16* %496, align 2
  %498 = sext i16 %497 to i32
  %499 = add nsw i32 %489, %498
  %500 = sitofp i32 %499 to float
  %501 = fmul float 0x3FE6A09E60000000, %500
  %502 = fmul float %480, %501
  store float %502, float* %18, align 4
  %503 = load float, float* %16, align 4
  %504 = load float, float* %18, align 4
  %505 = fsub float %503, %504
  store float %505, float* %17, align 4
  %506 = load float, float* %16, align 4
  %507 = load float, float* %18, align 4
  %508 = fadd float %506, %507
  store float %508, float* %16, align 4
  %509 = load float, float* %14, align 4
  %510 = load float, float* %16, align 4
  %511 = fadd float %509, %510
  %512 = load float*, float** %4, align 4
  %513 = getelementptr inbounds float, float* %512, i32 512
  store float %511, float* %513, align 4
  %514 = load float, float* %14, align 4
  %515 = load float, float* %16, align 4
  %516 = fsub float %514, %515
  %517 = load float*, float** %4, align 4
  %518 = getelementptr inbounds float, float* %517, i32 514
  store float %516, float* %518, align 4
  %519 = load float, float* %15, align 4
  %520 = load float, float* %17, align 4
  %521 = fadd float %519, %520
  %522 = load float*, float** %4, align 4
  %523 = getelementptr inbounds float, float* %522, i32 513
  store float %521, float* %523, align 4
  %524 = load float, float* %15, align 4
  %525 = load float, float* %17, align 4
  %526 = fsub float %524, %525
  %527 = load float*, float** %4, align 4
  %528 = getelementptr inbounds float, float* %527, i32 515
  store float %526, float* %528, align 4
  br label %529

; <label>:529:                                    ; preds = %245
  %530 = load i16, i16* %8, align 2
  %531 = load <4 x i16>, <4 x i16>* %allocaVec337, align 16
  %Vop356 = add <4 x i16> %531, <i16 -1, i16 -1, i16 -1, i16 -1>
  store <4 x i16> %Vop356, <4 x i16>* %allocaVec337
  %532 = add i16 %530, -1
  store i16 %532, i16* %8, align 2
  %533 = sext i16 %532 to i32
  %534 = icmp sge i32 %533, 0
  br i1 %534, label %245, label %535

; <label>:535:                                    ; preds = %529
  br label %834

; <label>:536:                                    ; preds = %241
  br label %537

; <label>:537:                                    ; preds = %830, %536
  %538 = load i16, i16* %8, align 2
  %539 = sext i16 %538 to i32
  %540 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i32 0, i32 %539
  %541 = load i16, i16* %540, align 2
  store i16 %541, i16* %7, align 2
  %542 = load i16, i16* %7, align 2
  %543 = sext i16 %542 to i32
  %544 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %543
  %545 = load float, float* %544, align 4
  %546 = load i16**, i16*** %6, align 4
  %547 = getelementptr inbounds i16*, i16** %546, i32 0
  %548 = load i16*, i16** %547, align 4
  %549 = load i16, i16* %7, align 2
  %550 = sext i16 %549 to i32
  %551 = getelementptr inbounds i16, i16* %548, i32 %550
  %552 = load i16, i16* %551, align 2
  %553 = sext i16 %552 to i32
  %554 = load i16**, i16*** %6, align 4
  %555 = getelementptr inbounds i16*, i16** %554, i32 1
  %556 = load i16*, i16** %555, align 4
  %557 = load i16, i16* %7, align 2
  %558 = sext i16 %557 to i32
  %559 = getelementptr inbounds i16, i16* %556, i32 %558
  %560 = load i16, i16* %559, align 2
  %561 = sext i16 %560 to i32
  %562 = sub nsw i32 %553, %561
  %563 = sitofp i32 %562 to float
  %564 = fmul float 0x3FE6A09E60000000, %563
  %565 = fmul float %545, %564
  store float %565, float* %19, align 4
  %566 = load i16, i16* %7, align 2
  %567 = sext i16 %566 to i32
  %568 = sub nsw i32 511, %567
  %569 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %568
  %570 = load float, float* %569, align 4
  %571 = load i16**, i16*** %6, align 4
  %572 = getelementptr inbounds i16*, i16** %571, i32 0
  %573 = load i16*, i16** %572, align 4
  %574 = load i16, i16* %7, align 2
  %575 = sext i16 %574 to i32
  %576 = add nsw i32 %575, 512
  %577 = getelementptr inbounds i16, i16* %573, i32 %576
  %578 = load i16, i16* %577, align 2
  %579 = sext i16 %578 to i32
  %580 = load i16**, i16*** %6, align 4
  %581 = getelementptr inbounds i16*, i16** %580, i32 1
  %582 = load i16*, i16** %581, align 4
  %583 = load i16, i16* %7, align 2
  %584 = sext i16 %583 to i32
  %585 = add nsw i32 %584, 512
  %586 = getelementptr inbounds i16, i16* %582, i32 %585
  %587 = load i16, i16* %586, align 2
  %588 = sext i16 %587 to i32
  %589 = sub nsw i32 %579, %588
  %590 = sitofp i32 %589 to float
  %591 = fmul float 0x3FE6A09E60000000, %590
  %592 = fmul float %570, %591
  store float %592, float* %23, align 4
  %593 = load float, float* %19, align 4
  %594 = load float, float* %23, align 4
  %595 = fsub float %593, %594
  store float %595, float* %20, align 4
  %596 = load float, float* %19, align 4
  %597 = load float, float* %23, align 4
  %598 = fadd float %596, %597
  store float %598, float* %19, align 4
  %599 = load i16, i16* %7, align 2
  %600 = sext i16 %599 to i32
  %601 = add nsw i32 %600, 256
  %602 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %601
  %603 = load float, float* %602, align 4
  %604 = load i16**, i16*** %6, align 4
  %605 = getelementptr inbounds i16*, i16** %604, i32 0
  %606 = load i16*, i16** %605, align 4
  %607 = load i16, i16* %7, align 2
  %608 = sext i16 %607 to i32
  %609 = add nsw i32 %608, 256
  %610 = getelementptr inbounds i16, i16* %606, i32 %609
  %611 = load i16, i16* %610, align 2
  %612 = sext i16 %611 to i32
  %613 = load i16**, i16*** %6, align 4
  %614 = getelementptr inbounds i16*, i16** %613, i32 1
  %615 = load i16*, i16** %614, align 4
  %616 = load i16, i16* %7, align 2
  %617 = sext i16 %616 to i32
  %618 = add nsw i32 %617, 256
  %619 = getelementptr inbounds i16, i16* %615, i32 %618
  %620 = load i16, i16* %619, align 2
  %621 = sext i16 %620 to i32
  %622 = sub nsw i32 %612, %621
  %623 = sitofp i32 %622 to float
  %624 = fmul float 0x3FE6A09E60000000, %623
  %625 = fmul float %603, %624
  store float %625, float* %21, align 4
  %626 = load i16, i16* %7, align 2
  %627 = sext i16 %626 to i32
  %628 = sub nsw i32 255, %627
  %629 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %628
  %630 = load float, float* %629, align 4
  %631 = load i16**, i16*** %6, align 4
  %632 = getelementptr inbounds i16*, i16** %631, i32 0
  %633 = load i16*, i16** %632, align 4
  %634 = load i16, i16* %7, align 2
  %635 = sext i16 %634 to i32
  %636 = add nsw i32 %635, 768
  %637 = getelementptr inbounds i16, i16* %633, i32 %636
  %638 = load i16, i16* %637, align 2
  %639 = sext i16 %638 to i32
  %640 = load i16**, i16*** %6, align 4
  %641 = getelementptr inbounds i16*, i16** %640, i32 1
  %642 = load i16*, i16** %641, align 4
  %643 = load i16, i16* %7, align 2
  %644 = sext i16 %643 to i32
  %645 = add nsw i32 %644, 768
  %646 = getelementptr inbounds i16, i16* %642, i32 %645
  %647 = load i16, i16* %646, align 2
  %648 = sext i16 %647 to i32
  %649 = sub nsw i32 %639, %648
  %650 = sitofp i32 %649 to float
  %651 = fmul float 0x3FE6A09E60000000, %650
  %652 = fmul float %630, %651
  store float %652, float* %23, align 4
  %653 = load float, float* %21, align 4
  %654 = load float, float* %23, align 4
  %655 = fsub float %653, %654
  store float %655, float* %22, align 4
  %656 = load float, float* %21, align 4
  %657 = load float, float* %23, align 4
  %658 = fadd float %656, %657
  store float %658, float* %21, align 4
  %659 = load float*, float** %4, align 4
  %660 = getelementptr inbounds float, float* %659, i32 -4
  store float* %660, float** %4, align 4
  %661 = load float, float* %19, align 4
  %662 = load float, float* %21, align 4
  %663 = fadd float %661, %662
  %664 = load float*, float** %4, align 4
  %665 = getelementptr inbounds float, float* %664, i32 0
  store float %663, float* %665, align 4
  %666 = load float, float* %19, align 4
  %667 = load float, float* %21, align 4
  %668 = fsub float %666, %667
  %669 = load float*, float** %4, align 4
  %670 = getelementptr inbounds float, float* %669, i32 2
  store float %668, float* %670, align 4
  %671 = load float, float* %20, align 4
  %672 = load float, float* %22, align 4
  %673 = fadd float %671, %672
  %674 = load float*, float** %4, align 4
  %675 = getelementptr inbounds float, float* %674, i32 1
  store float %673, float* %675, align 4
  %676 = load float, float* %20, align 4
  %677 = load float, float* %22, align 4
  %678 = fsub float %676, %677
  %679 = load float*, float** %4, align 4
  %680 = getelementptr inbounds float, float* %679, i32 3
  store float %678, float* %680, align 4
  %681 = load i16, i16* %7, align 2
  %682 = sext i16 %681 to i32
  %683 = add nsw i32 %682, 1
  %684 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %683
  %685 = load float, float* %684, align 4
  %686 = load i16**, i16*** %6, align 4
  %687 = getelementptr inbounds i16*, i16** %686, i32 0
  %688 = load i16*, i16** %687, align 4
  %689 = load i16, i16* %7, align 2
  %690 = sext i16 %689 to i32
  %691 = add nsw i32 %690, 1
  %692 = getelementptr inbounds i16, i16* %688, i32 %691
  %693 = load i16, i16* %692, align 2
  %694 = sext i16 %693 to i32
  %695 = load i16**, i16*** %6, align 4
  %696 = getelementptr inbounds i16*, i16** %695, i32 1
  %697 = load i16*, i16** %696, align 4
  %698 = load i16, i16* %7, align 2
  %699 = sext i16 %698 to i32
  %700 = add nsw i32 %699, 1
  %701 = getelementptr inbounds i16, i16* %697, i32 %700
  %702 = load i16, i16* %701, align 2
  %703 = sext i16 %702 to i32
  %704 = sub nsw i32 %694, %703
  %705 = sitofp i32 %704 to float
  %706 = fmul float 0x3FE6A09E60000000, %705
  %707 = fmul float %685, %706
  store float %707, float* %19, align 4
  %708 = load i16, i16* %7, align 2
  %709 = sext i16 %708 to i32
  %710 = sub nsw i32 510, %709
  %711 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %710
  %712 = load float, float* %711, align 4
  %713 = load i16**, i16*** %6, align 4
  %714 = getelementptr inbounds i16*, i16** %713, i32 0
  %715 = load i16*, i16** %714, align 4
  %716 = load i16, i16* %7, align 2
  %717 = sext i16 %716 to i32
  %718 = add nsw i32 %717, 513
  %719 = getelementptr inbounds i16, i16* %715, i32 %718
  %720 = load i16, i16* %719, align 2
  %721 = sext i16 %720 to i32
  %722 = load i16**, i16*** %6, align 4
  %723 = getelementptr inbounds i16*, i16** %722, i32 1
  %724 = load i16*, i16** %723, align 4
  %725 = load i16, i16* %7, align 2
  %726 = sext i16 %725 to i32
  %727 = add nsw i32 %726, 513
  %728 = getelementptr inbounds i16, i16* %724, i32 %727
  %729 = load i16, i16* %728, align 2
  %730 = sext i16 %729 to i32
  %731 = sub nsw i32 %721, %730
  %732 = sitofp i32 %731 to float
  %733 = fmul float 0x3FE6A09E60000000, %732
  %734 = fmul float %712, %733
  store float %734, float* %23, align 4
  %735 = load float, float* %19, align 4
  %736 = load float, float* %23, align 4
  %737 = fsub float %735, %736
  store float %737, float* %20, align 4
  %738 = load float, float* %19, align 4
  %739 = load float, float* %23, align 4
  %740 = fadd float %738, %739
  store float %740, float* %19, align 4
  %741 = load i16, i16* %7, align 2
  %742 = sext i16 %741 to i32
  %743 = add nsw i32 %742, 257
  %744 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %743
  %745 = load float, float* %744, align 4
  %746 = load i16**, i16*** %6, align 4
  %747 = getelementptr inbounds i16*, i16** %746, i32 0
  %748 = load i16*, i16** %747, align 4
  %749 = load i16, i16* %7, align 2
  %750 = sext i16 %749 to i32
  %751 = add nsw i32 %750, 257
  %752 = getelementptr inbounds i16, i16* %748, i32 %751
  %753 = load i16, i16* %752, align 2
  %754 = sext i16 %753 to i32
  %755 = load i16**, i16*** %6, align 4
  %756 = getelementptr inbounds i16*, i16** %755, i32 1
  %757 = load i16*, i16** %756, align 4
  %758 = load i16, i16* %7, align 2
  %759 = sext i16 %758 to i32
  %760 = add nsw i32 %759, 257
  %761 = getelementptr inbounds i16, i16* %757, i32 %760
  %762 = load i16, i16* %761, align 2
  %763 = sext i16 %762 to i32
  %764 = sub nsw i32 %754, %763
  %765 = sitofp i32 %764 to float
  %766 = fmul float 0x3FE6A09E60000000, %765
  %767 = fmul float %745, %766
  store float %767, float* %21, align 4
  %768 = load i16, i16* %7, align 2
  %769 = sext i16 %768 to i32
  %770 = sub nsw i32 254, %769
  %771 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %770
  %772 = load float, float* %771, align 4
  %773 = load i16**, i16*** %6, align 4
  %774 = getelementptr inbounds i16*, i16** %773, i32 0
  %775 = load i16*, i16** %774, align 4
  %776 = load i16, i16* %7, align 2
  %777 = sext i16 %776 to i32
  %778 = add nsw i32 %777, 769
  %779 = getelementptr inbounds i16, i16* %775, i32 %778
  %780 = load i16, i16* %779, align 2
  %781 = sext i16 %780 to i32
  %782 = load i16**, i16*** %6, align 4
  %783 = getelementptr inbounds i16*, i16** %782, i32 1
  %784 = load i16*, i16** %783, align 4
  %785 = load i16, i16* %7, align 2
  %786 = sext i16 %785 to i32
  %787 = add nsw i32 %786, 769
  %788 = getelementptr inbounds i16, i16* %784, i32 %787
  %789 = load i16, i16* %788, align 2
  %790 = sext i16 %789 to i32
  %791 = sub nsw i32 %781, %790
  %792 = sitofp i32 %791 to float
  %793 = fmul float 0x3FE6A09E60000000, %792
  %794 = fmul float %772, %793
  store float %794, float* %23, align 4
  %795 = load float, float* %21, align 4
  %796 = load float, float* %23, align 4
  %797 = fsub float %795, %796
  store float %797, float* %22, align 4
  %798 = load float, float* %21, align 4
  %799 = load float, float* %23, align 4
  %800 = fadd float %798, %799
  store float %800, float* %21, align 4
  %801 = load float, float* %19, align 4
  %802 = load float, float* %21, align 4
  %803 = fadd float %801, %802
  %804 = load float*, float** %4, align 4
  %805 = getelementptr inbounds float, float* %804, i32 512
  store float %803, float* %805, align 4
  %806 = load float, float* %19, align 4
  %807 = load float, float* %21, align 4
  %808 = fsub float %806, %807
  %809 = load float*, float** %4, align 4
  %810 = getelementptr inbounds float, float* %809, i32 514
  store float %808, float* %810, align 4
  %811 = load float, float* %20, align 4
  %812 = load float, float* %22, align 4
  %813 = fadd float %811, %812
  %814 = load float*, float** %4, align 4
  %815 = getelementptr inbounds float, float* %814, i32 513
  store float %813, float* %815, align 4
  %816 = load float, float* %20, align 4
  %817 = load float, float* %22, align 4
  %818 = fsub float %816, %817
  %819 = load float*, float** %4, align 4
  %820 = getelementptr inbounds float, float* %819, i32 515
  store float %818, float* %820, align 4
  br label %821

; <label>:821:                                    ; preds = %537
  %822 = load i16, i16* %8, align 2
  %823 = load <4 x i16>, <4 x i16>* %allocaVec337, align 16
  %Vop357 = add <4 x i16> %823, <i16 -1, i16 -1, i16 -1, i16 -1>
  store <4 x i16> %Vop357, <4 x i16>* %allocaVec337
  %824 = load <4 x i16>, <4 x i16>* %allocaVec337, align 4
  %extractE = extractelement <4 x i16> %824, i64 0
  %extractE358 = extractelement <4 x i16> %824, i64 1
  %extractE359 = extractelement <4 x i16> %824, i64 2
  %sum = add i16 %extractE, %extractE358
  %sum360 = add i16 %sum, %extractE359
  %825 = add i16 %822, -1
  %Fmul = mul i16 %825, 3
  store i16 %825, i16* %Recovery
  %Fcmp = icmp ne i16 %sum360, %Fmul
  br i1 %Fcmp, label %826, label %830

; <label>:826:                                    ; preds = %821
  %remThree = sdiv i16 %sum360, %extractE
  %FcmpThree = icmp ne i16 %remThree, 3
  br i1 %FcmpThree, label %827, label %828

; <label>:827:                                    ; preds = %826
  store i16 %825, i16* %Recovery, align 2
  br label %829

; <label>:828:                                    ; preds = %826
  store i16 %extractE, i16* %Recovery, align 2
  br label %829

; <label>:829:                                    ; preds = %828, %827
  br label %830

; <label>:830:                                    ; preds = %821, %829
  %ReplaceInst = load i16, i16* %Recovery, align 2
  store i16 %ReplaceInst, i16* %8, align 2
  %831 = sext i16 %825 to i32
  %832 = icmp sge i32 %831, 0
  br i1 %832, label %537, label %833

; <label>:833:                                    ; preds = %830
  br label %834

; <label>:834:                                    ; preds = %833, %535
  br label %835

; <label>:835:                                    ; preds = %834, %240
  %836 = load float*, float** %4, align 4
  call arm_aapcscc void @fht(float* %836, i16 signext 1024)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @init_fft() #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec7 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec8 = alloca <2 x double>, align 16
  %CastInst1 = alloca double, align 4
  %CastInstVec2 = alloca <2 x double>, align 16
  %allocaVec9 = alloca <2 x double>, align 16
  %CastInst3 = alloca double, align 4
  %CastInstVec4 = alloca <2 x double>, align 16
  %allocaVec10 = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %allocaVec11 = alloca <2 x double>, align 16
  %CallInst5 = alloca double, align 4
  %CallInstVec6 = alloca <2 x double>, align 16
  %allocaVec12 = alloca <4 x i32>, align 16
  %1 = alloca i32, align 4
  %allocaVec13 = alloca <4 x float>, align 16
  %2 = alloca float, align 4
  store <4 x float> <float 0x3FD921FB60000000, float 0x3FD921FB60000000, float 0x3FD921FB60000000, float 0x3FD921FB60000000>, <4 x float>* %allocaVec13
  store float 0x3FD921FB60000000, float* %2, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec12
  store i32 0, i32* %1, align 4
  br label %3

; <label>:3:                                      ; preds = %30, %0
  %4 = load i32, i32* %1, align 4
  %5 = icmp slt i32 %4, 4
  br i1 %5, label %6, label %34

; <label>:6:                                      ; preds = %3
  %7 = load float, float* %2, align 4
  %8 = fpext float %7 to double
  %9 = call arm_aapcscc double @cos(double %8) #7
  %10 = fptrunc double %9 to float
  %11 = load i32, i32* %1, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %11, i32 0
  %insertElmt14 = insertelement <4 x i32> %insertElmt, i32 %11, i32 1
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %11, i32 2
  %insertElmt16 = insertelement <4 x i32> %insertElmt15, i32 %11, i32 3
  store <4 x i32> %insertElmt16, <4 x i32>* %allocaVec12, align 16
  %12 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop = mul <4 x i32> %12, <i32 2, i32 2, i32 2, i32 2>
  %13 = mul nsw i32 %11, 2
  %14 = getelementptr inbounds [8 x float], [8 x float]* @costab, i32 0, i32 %13
  store float %10, float* %14, align 4
  %15 = load float, float* %2, align 4
  %16 = fpext float %15 to double
  %17 = call arm_aapcscc double @sin(double %16) #7
  %18 = fptrunc double %17 to float
  %19 = load i32, i32* %1, align 4
  %insertElmt17 = insertelement <4 x i32> undef, i32 %19, i32 0
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %19, i32 1
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %19, i32 2
  %insertElmt20 = insertelement <4 x i32> %insertElmt19, i32 %19, i32 3
  store <4 x i32> %insertElmt20, <4 x i32>* %allocaVec12, align 16
  %20 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop21 = mul <4 x i32> %20, <i32 2, i32 2, i32 2, i32 2>
  %21 = mul nsw i32 %19, 2
  %Vop22 = add <4 x i32> %Vop21, <i32 1, i32 1, i32 1, i32 1>
  %22 = add nsw i32 %21, 1
  %23 = getelementptr inbounds [8 x float], [8 x float]* @costab, i32 0, i32 %22
  store float %18, float* %23, align 4
  %24 = load float, float* %2, align 4
  %25 = fpext float %24 to double
  store double %25, double* %CastInst
  %26 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %26, i32 0
  %insertCast23 = insertelement <2 x double> %insertCast, double %26, i32 1
  store <2 x double> %insertCast23, <2 x double>* %CastInstVec, align 4
  %27 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %Vop24 = fmul <2 x double> %27, <double 2.500000e-01, double 2.500000e-01>
  %28 = fmul double %25, 2.500000e-01
  %29 = fptrunc double %28 to float
  store float %29, float* %2, align 4
  br label %30

; <label>:30:                                     ; preds = %6
  %31 = load i32, i32* %1, align 4
  %insertElmt25 = insertelement <4 x i32> undef, i32 %31, i32 0
  %insertElmt26 = insertelement <4 x i32> %insertElmt25, i32 %31, i32 1
  %insertElmt27 = insertelement <4 x i32> %insertElmt26, i32 %31, i32 2
  %insertElmt28 = insertelement <4 x i32> %insertElmt27, i32 %31, i32 3
  store <4 x i32> %insertElmt28, <4 x i32>* %allocaVec12, align 16
  %32 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop29 = add <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop29, <4 x i32>* %allocaVec12
  %33 = add nsw i32 %31, 1
  store i32 %33, i32* %1, align 4
  br label %3

; <label>:34:                                     ; preds = %3
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec12
  store i32 0, i32* %1, align 4
  br label %35

; <label>:35:                                     ; preds = %54, %34
  %36 = load i32, i32* %1, align 4
  %37 = icmp slt i32 %36, 512
  br i1 %37, label %38, label %58

; <label>:38:                                     ; preds = %35
  %39 = load i32, i32* %1, align 4
  %40 = sitofp i32 %39 to double
  store double %40, double* %CastInst1
  %41 = load double, double* %CastInst1, align 4
  %insertCast30 = insertelement <2 x double> undef, double %41, i32 0
  %insertCast31 = insertelement <2 x double> %insertCast30, double %41, i32 1
  store <2 x double> %insertCast31, <2 x double>* %CastInstVec2, align 4
  %42 = load <2 x double>, <2 x double>* %CastInstVec2, align 4
  %Vop32 = fadd <2 x double> %42, <double 5.000000e-01, double 5.000000e-01>
  %43 = fadd double %40, 5.000000e-01
  %Vop33 = fmul <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, %Vop32
  %44 = fmul double 0x401921FB54442D18, %43
  %Vop34 = fdiv <2 x double> %Vop33, <double 1.024000e+03, double 1.024000e+03>
  %45 = fdiv double %44, 1.024000e+03
  %46 = call arm_aapcscc double @cos(double %45) #7
  store double %46, double* %CallInst
  %47 = load double, double* %CallInst, align 4
  %insertCall = insertelement <2 x double> undef, double %47, i32 0
  %insertCall35 = insertelement <2 x double> %insertCall, double %47, i32 1
  store <2 x double> %insertCall35, <2 x double>* %CallInstVec, align 4
  %48 = load <2 x double>, <2 x double>* %CallInstVec, align 4
  %Vop36 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %48
  %49 = fsub double 1.000000e+00, %46
  %Vop37 = fmul <2 x double> <double 5.000000e-01, double 5.000000e-01>, %Vop36
  %50 = fmul double 5.000000e-01, %49
  %51 = fptrunc double %50 to float
  %52 = load i32, i32* %1, align 4
  %53 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %52
  store float %51, float* %53, align 4
  br label %54

; <label>:54:                                     ; preds = %38
  %55 = load i32, i32* %1, align 4
  %56 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop38 = add <4 x i32> %56, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop38, <4 x i32>* %allocaVec12
  %57 = add nsw i32 %55, 1
  store i32 %57, i32* %1, align 4
  br label %35

; <label>:58:                                     ; preds = %35
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec12
  store i32 0, i32* %1, align 4
  br label %59

; <label>:59:                                     ; preds = %87, %58
  %60 = load i32, i32* %1, align 4
  %61 = icmp slt i32 %60, 128
  br i1 %61, label %62, label %88

; <label>:62:                                     ; preds = %59
  %63 = load i32, i32* %1, align 4
  %64 = sitofp i32 %63 to double
  store double %64, double* %CastInst3
  %65 = load double, double* %CastInst3, align 4
  %insertCast39 = insertelement <2 x double> undef, double %65, i32 0
  %insertCast40 = insertelement <2 x double> %insertCast39, double %65, i32 1
  store <2 x double> %insertCast40, <2 x double>* %CastInstVec4, align 4
  %66 = load <2 x double>, <2 x double>* %CastInstVec4, align 4
  %Vop41 = fadd <2 x double> %66, <double 5.000000e-01, double 5.000000e-01>
  %67 = fadd double %64, 5.000000e-01
  %Vop42 = fmul <2 x double> <double 0x401921FB54442D18, double 0x401921FB54442D18>, %Vop41
  %68 = fmul double 0x401921FB54442D18, %67
  %Vop43 = fdiv <2 x double> %Vop42, <double 2.560000e+02, double 2.560000e+02>
  %69 = fdiv double %68, 2.560000e+02
  %70 = call arm_aapcscc double @cos(double %69) #7
  store double %70, double* %CallInst5
  %71 = load double, double* %CallInst5, align 4
  %insertCall44 = insertelement <2 x double> undef, double %71, i32 0
  %insertCall45 = insertelement <2 x double> %insertCall44, double %71, i32 1
  store <2 x double> %insertCall45, <2 x double>* %CallInstVec6, align 4
  %72 = load <2 x double>, <2 x double>* %CallInstVec6, align 4
  %Vop46 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %72
  %73 = fsub double 1.000000e+00, %70
  %Vop47 = fmul <2 x double> <double 5.000000e-01, double 5.000000e-01>, %Vop46
  %74 = fmul double 5.000000e-01, %73
  %75 = fptrunc double %74 to float
  %76 = load i32, i32* %1, align 4
  %77 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %76
  store float %75, float* %77, align 4
  br label %78

; <label>:78:                                     ; preds = %62
  %79 = load i32, i32* %1, align 4
  %80 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop48 = add <4 x i32> %80, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop48, <4 x i32>* %allocaVec12
  %81 = load <4 x i32>, <4 x i32>* %allocaVec12, align 4
  %extractE = extractelement <4 x i32> %81, i64 0
  %extractE49 = extractelement <4 x i32> %81, i64 1
  %extractE50 = extractelement <4 x i32> %81, i64 2
  %sum = add i32 %extractE, %extractE49
  %sum51 = add i32 %sum, %extractE50
  %82 = add nsw i32 %79, 1
  %Fmul = mul i32 %82, 3
  store i32 %82, i32* %Recovery
  %Fcmp = icmp ne i32 %sum51, %Fmul
  br i1 %Fcmp, label %83, label %87

; <label>:83:                                     ; preds = %78
  %remThree = sdiv i32 %sum51, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %84, label %85

; <label>:84:                                     ; preds = %83
  store i32 %82, i32* %Recovery, align 4
  br label %86

; <label>:85:                                     ; preds = %83
  store i32 %extractE, i32* %Recovery, align 4
  br label %86

; <label>:86:                                     ; preds = %85, %84
  br label %87

; <label>:87:                                     ; preds = %78, %86
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %1, align 4
  br label %59

; <label>:88:                                     ; preds = %59
  ret void
}

; Function Attrs: nounwind
declare arm_aapcscc double @cos(double) #2

; Function Attrs: nounwind
declare arm_aapcscc double @sin(double) #2

; Function Attrs: nounwind
define arm_aapcscc void @InitFormatBitStream() #0 {
  store i32 0, i32* @BitCount, align 4
  store i32 0, i32* @ThisFrameSize, align 4
  store i32 0, i32* @BitsRemaining, align 4
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @BF_BitstreamFrame(%struct.BF_FrameData*, %struct.BF_FrameResults*) #0 {
  %3 = alloca %struct.BF_FrameData*, align 4
  %4 = alloca %struct.BF_FrameResults*, align 4
  store %struct.BF_FrameData* %0, %struct.BF_FrameData** %3, align 4
  store %struct.BF_FrameResults* %1, %struct.BF_FrameResults** %4, align 4
  %5 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %6 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %5, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp sle i32 %7, 2
  br i1 %8, label %10, label %9

; <label>:9:                                      ; preds = %2
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 59, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.BF_BitstreamFrame, i32 0, i32 0))
  br label %10

; <label>:10:                                     ; preds = %9, %2
  %11 = phi i1 [ true, %2 ], [ false, %9 ]
  %12 = zext i1 %11 to i32
  %13 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %14 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %13, i32 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp sle i32 %15, 2
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %10
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 60, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.BF_BitstreamFrame, i32 0, i32 0))
  br label %18

; <label>:18:                                     ; preds = %17, %10
  %19 = phi i1 [ true, %10 ], [ false, %17 ]
  %20 = zext i1 %19 to i32
  %21 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %22 = call arm_aapcscc i32 @store_side_info(%struct.BF_FrameData* %21)
  %23 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %24 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %23, i32 0, i32 0
  store i32 %22, i32* %24, align 4
  %25 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %26 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %27 = call arm_aapcscc i32 @main_data(%struct.BF_FrameData* %25, %struct.BF_FrameResults* %26)
  %28 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %29 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %28, i32 0, i32 1
  store i32 %27, i32* %29, align 4
  %30 = load i32, i32* @BitsRemaining, align 4
  %31 = srem i32 %30, 8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %34, label %33

; <label>:33:                                     ; preds = %18
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 74, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.BF_BitstreamFrame, i32 0, i32 0))
  br label %34

; <label>:34:                                     ; preds = %33, %18
  %35 = phi i1 [ true, %18 ], [ false, %33 ]
  %36 = zext i1 %35 to i32
  %37 = call arm_aapcscc i32 @side_queue_elements(i32* @forwardFrameLength, i32* @forwardSILength)
  store i32 %37, i32* @elements, align 4
  %38 = load i32, i32* @BitsRemaining, align 4
  %39 = sdiv i32 %38, 8
  %40 = load i32, i32* @forwardFrameLength, align 4
  %41 = sdiv i32 %40, 8
  %42 = add nsw i32 %39, %41
  %43 = load i32, i32* @forwardSILength, align 4
  %44 = sdiv i32 %43, 8
  %45 = sub nsw i32 %42, %44
  %46 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %47 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %46, i32 0, i32 2
  store i32 %45, i32* %47, align 4
  ret void
}

declare arm_aapcscc void @__assert_fail(i8*, i8*, i32, i8*) #3

; Function Attrs: nounwind
define internal arm_aapcscc i32 @store_side_info(%struct.BF_FrameData*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %CallInst = alloca i32, align 4
  %CallInstVec = alloca <4 x i32>, align 16
  %allocaVec12 = alloca <4 x i32>, align 16
  %CallInst3 = alloca i32, align 4
  %CallInstVec4 = alloca <4 x i32>, align 16
  %allocaVec13 = alloca <4 x i32>, align 16
  %CallInst5 = alloca i32, align 4
  %CallInstVec6 = alloca <4 x i32>, align 16
  %allocaVec14 = alloca <4 x i32>, align 16
  %CallInst7 = alloca i32, align 4
  %CallInstVec8 = alloca <4 x i32>, align 16
  %2 = alloca %struct.BF_FrameData*, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %5 = alloca %struct.side_info_link*, align 4
  %6 = alloca %struct.side_info_link*, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  store %struct.BF_FrameData* %0, %struct.BF_FrameData** %2, align 4
  %8 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_free, align 4
  store %struct.side_info_link* %8, %struct.side_info_link** %6, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec17
  store i32 0, i32* %7, align 4
  %9 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %10 = icmp eq %struct.side_info_link* %9, null
  br i1 %10, label %11, label %106

; <label>:11:                                     ; preds = %1
  %12 = call arm_aapcscc i8* @calloc(i32 1, i32 52)
  %13 = bitcast i8* %12 to %struct.side_info_link*
  store %struct.side_info_link* %13, %struct.side_info_link** %5, align 4
  %14 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %15 = icmp eq %struct.side_info_link* %14, null
  br i1 %15, label %16, label %19

; <label>:16:                                     ; preds = %11
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %18 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.14, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:19:                                     ; preds = %11
  %20 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %21 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %20, i32 0, i32 0
  store %struct.side_info_link* null, %struct.side_info_link** %21, align 4
  %22 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %23 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %22, i32 0, i32 3
  %24 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %23, align 4
  %25 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 %26)
  %28 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %29 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %28, i32 0, i32 1
  %30 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %29, i32 0, i32 4
  store %struct.BF_PartHolder* %27, %struct.BF_PartHolder** %30, align 4
  %31 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %32 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %31, i32 0, i32 4
  %33 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %32, align 4
  %34 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %33, i32 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 %35)
  %37 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %38 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %37, i32 0, i32 1
  %39 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %38, i32 0, i32 5
  store %struct.BF_PartHolder* %36, %struct.BF_PartHolder** %39, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %3, align 4
  br label %40

; <label>:40:                                     ; preds = %60, %19
  %41 = load i32, i32* %3, align 4
  %42 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %43 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %42, i32 0, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = icmp slt i32 %41, %44
  br i1 %45, label %46, label %64

; <label>:46:                                     ; preds = %40
  %47 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %48 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %47, i32 0, i32 5
  %49 = load i32, i32* %3, align 4
  %50 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %48, i32 0, i32 %49
  %51 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %50, align 4
  %52 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %51, i32 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 %53)
  %55 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %56 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %55, i32 0, i32 1
  %57 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %56, i32 0, i32 6
  %58 = load i32, i32* %3, align 4
  %59 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %57, i32 0, i32 %58
  store %struct.BF_PartHolder* %54, %struct.BF_PartHolder** %59, align 4
  br label %60

; <label>:60:                                     ; preds = %46
  %61 = load i32, i32* %3, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %61, i32 0
  %insertElmt18 = insertelement <4 x i32> %insertElmt, i32 %61, i32 1
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %61, i32 2
  %insertElmt20 = insertelement <4 x i32> %insertElmt19, i32 %61, i32 3
  store <4 x i32> %insertElmt20, <4 x i32>* %allocaVec15, align 16
  %62 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop = add <4 x i32> %62, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec15
  %63 = add nsw i32 %61, 1
  store i32 %63, i32* %3, align 4
  br label %40

; <label>:64:                                     ; preds = %40
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %4, align 4
  br label %65

; <label>:65:                                     ; preds = %101, %64
  %66 = load i32, i32* %4, align 4
  %67 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %68 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %67, i32 0, i32 1
  %69 = load i32, i32* %68, align 4
  %70 = icmp slt i32 %66, %69
  br i1 %70, label %71, label %105

; <label>:71:                                     ; preds = %65
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %3, align 4
  br label %72

; <label>:72:                                     ; preds = %96, %71
  %73 = load i32, i32* %3, align 4
  %74 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %75 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %74, i32 0, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = icmp slt i32 %73, %76
  br i1 %77, label %78, label %100

; <label>:78:                                     ; preds = %72
  %79 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %80 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %79, i32 0, i32 6
  %81 = load i32, i32* %4, align 4
  %82 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %80, i32 0, i32 %81
  %83 = load i32, i32* %3, align 4
  %84 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %82, i32 0, i32 %83
  %85 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %84, align 4
  %86 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %85, i32 0, i32 0
  %87 = load i32, i32* %86, align 4
  %88 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 %87)
  %89 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %90 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %89, i32 0, i32 1
  %91 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %90, i32 0, i32 7
  %92 = load i32, i32* %4, align 4
  %93 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* %91, i32 0, i32 %92
  %94 = load i32, i32* %3, align 4
  %95 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %93, i32 0, i32 %94
  store %struct.BF_PartHolder* %88, %struct.BF_PartHolder** %95, align 4
  br label %96

; <label>:96:                                     ; preds = %78
  %97 = load i32, i32* %3, align 4
  %98 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop21 = add <4 x i32> %98, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop21, <4 x i32>* %allocaVec15
  %99 = add nsw i32 %97, 1
  store i32 %99, i32* %3, align 4
  br label %72

; <label>:100:                                    ; preds = %72
  br label %101

; <label>:101:                                    ; preds = %100
  %102 = load i32, i32* %4, align 4
  %insertElmt22 = insertelement <4 x i32> undef, i32 %102, i32 0
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %102, i32 1
  %insertElmt24 = insertelement <4 x i32> %insertElmt23, i32 %102, i32 2
  %insertElmt25 = insertelement <4 x i32> %insertElmt24, i32 %102, i32 3
  store <4 x i32> %insertElmt25, <4 x i32>* %allocaVec16, align 16
  %103 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop26 = add <4 x i32> %103, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop26, <4 x i32>* %allocaVec16
  %104 = add nsw i32 %102, 1
  store i32 %104, i32* %4, align 4
  br label %65

; <label>:105:                                    ; preds = %65
  br label %113

; <label>:106:                                    ; preds = %1
  %107 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %108 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %107, i32 0, i32 0
  %109 = load %struct.side_info_link*, %struct.side_info_link** %108, align 4
  store %struct.side_info_link* %109, %struct.side_info_link** @side_queue_free, align 4
  %110 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %111 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %110, i32 0, i32 0
  store %struct.side_info_link* null, %struct.side_info_link** %111, align 4
  %112 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  store %struct.side_info_link* %112, %struct.side_info_link** %5, align 4
  br label %113

; <label>:113:                                    ; preds = %106, %105
  %114 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %115 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %114, i32 0, i32 0
  %116 = load i32, i32* %115, align 4
  %117 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %118 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %117, i32 0, i32 1
  %119 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %118, i32 0, i32 0
  store i32 %116, i32* %119, align 4
  %120 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %121 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %120, i32 0, i32 1
  %122 = load i32, i32* %121, align 4
  %123 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %124 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %123, i32 0, i32 1
  %125 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %124, i32 0, i32 2
  store i32 %122, i32* %125, align 4
  %126 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %127 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %126, i32 0, i32 2
  %128 = load i32, i32* %127, align 4
  %129 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %130 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %129, i32 0, i32 1
  %131 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %130, i32 0, i32 3
  store i32 %128, i32* %131, align 4
  %132 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %133 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %132, i32 0, i32 1
  %134 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %133, i32 0, i32 4
  %135 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %134, align 4
  %136 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %137 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %136, i32 0, i32 3
  %138 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %137, align 4
  %139 = call arm_aapcscc %struct.BF_PartHolder* @BF_LoadHolderFromBitstreamPart(%struct.BF_PartHolder* %135, %struct.BF_BitstreamPart* %138)
  %140 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %141 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %140, i32 0, i32 1
  %142 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %141, i32 0, i32 4
  store %struct.BF_PartHolder* %139, %struct.BF_PartHolder** %142, align 4
  %143 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %144 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %143, i32 0, i32 1
  %145 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %144, i32 0, i32 5
  %146 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %145, align 4
  %147 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %148 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %147, i32 0, i32 4
  %149 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %148, align 4
  %150 = call arm_aapcscc %struct.BF_PartHolder* @BF_LoadHolderFromBitstreamPart(%struct.BF_PartHolder* %146, %struct.BF_BitstreamPart* %149)
  %151 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %152 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %151, i32 0, i32 1
  %153 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %152, i32 0, i32 5
  store %struct.BF_PartHolder* %150, %struct.BF_PartHolder** %153, align 4
  %154 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %155 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %154, i32 0, i32 3
  %156 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %155, align 4
  %157 = call arm_aapcscc i32 @BF_PartLength(%struct.BF_BitstreamPart* %156)
  %158 = load i32, i32* %7, align 4
  %insertElmt27 = insertelement <4 x i32> undef, i32 %158, i32 0
  %insertElmt28 = insertelement <4 x i32> %insertElmt27, i32 %158, i32 1
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %158, i32 2
  %insertElmt30 = insertelement <4 x i32> %insertElmt29, i32 %158, i32 3
  store <4 x i32> %insertElmt30, <4 x i32>* %allocaVec17, align 16
  %159 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  store i32 %157, i32* %CallInst
  %160 = load i32, i32* %CallInst, align 4
  %insertCall = insertelement <4 x i32> undef, i32 %160, i32 0
  %insertCall31 = insertelement <4 x i32> %insertCall, i32 %160, i32 1
  %insertCall32 = insertelement <4 x i32> %insertCall31, i32 %160, i32 2
  %insertCall33 = insertelement <4 x i32> %insertCall32, i32 %160, i32 3
  store <4 x i32> %insertCall33, <4 x i32>* %CallInstVec, align 4
  %161 = load <4 x i32>, <4 x i32>* %CallInstVec, align 4
  %Vop34 = add <4 x i32> %159, %161
  store <4 x i32> %Vop34, <4 x i32>* %allocaVec17
  %162 = add nsw i32 %158, %157
  store i32 %162, i32* %7, align 4
  %163 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %164 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %163, i32 0, i32 4
  %165 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %164, align 4
  %166 = call arm_aapcscc i32 @BF_PartLength(%struct.BF_BitstreamPart* %165)
  %167 = load i32, i32* %7, align 4
  %168 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  store i32 %166, i32* %CallInst3
  %169 = load i32, i32* %CallInst3, align 4
  %insertCall35 = insertelement <4 x i32> undef, i32 %169, i32 0
  %insertCall36 = insertelement <4 x i32> %insertCall35, i32 %169, i32 1
  %insertCall37 = insertelement <4 x i32> %insertCall36, i32 %169, i32 2
  %insertCall38 = insertelement <4 x i32> %insertCall37, i32 %169, i32 3
  store <4 x i32> %insertCall38, <4 x i32>* %CallInstVec4, align 4
  %170 = load <4 x i32>, <4 x i32>* %CallInstVec4, align 4
  %Vop39 = add <4 x i32> %168, %170
  store <4 x i32> %Vop39, <4 x i32>* %allocaVec17
  %171 = add nsw i32 %167, %166
  store i32 %171, i32* %7, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %3, align 4
  br label %172

; <label>:172:                                    ; preds = %207, %113
  %173 = load i32, i32* %3, align 4
  %174 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %175 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %174, i32 0, i32 2
  %176 = load i32, i32* %175, align 4
  %177 = icmp slt i32 %173, %176
  br i1 %177, label %178, label %211

; <label>:178:                                    ; preds = %172
  %179 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %180 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %179, i32 0, i32 1
  %181 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %180, i32 0, i32 6
  %182 = load i32, i32* %3, align 4
  %183 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %181, i32 0, i32 %182
  %184 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %183, align 4
  %185 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %186 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %185, i32 0, i32 5
  %187 = load i32, i32* %3, align 4
  %188 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %186, i32 0, i32 %187
  %189 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %188, align 4
  %190 = call arm_aapcscc %struct.BF_PartHolder* @BF_LoadHolderFromBitstreamPart(%struct.BF_PartHolder* %184, %struct.BF_BitstreamPart* %189)
  %191 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %192 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %191, i32 0, i32 1
  %193 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %192, i32 0, i32 6
  %194 = load i32, i32* %3, align 4
  %195 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %193, i32 0, i32 %194
  store %struct.BF_PartHolder* %190, %struct.BF_PartHolder** %195, align 4
  %196 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %197 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %196, i32 0, i32 5
  %198 = load i32, i32* %3, align 4
  %199 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %197, i32 0, i32 %198
  %200 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %199, align 4
  %201 = call arm_aapcscc i32 @BF_PartLength(%struct.BF_BitstreamPart* %200)
  %202 = load i32, i32* %7, align 4
  %203 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  store i32 %201, i32* %CallInst5
  %204 = load i32, i32* %CallInst5, align 4
  %insertCall40 = insertelement <4 x i32> undef, i32 %204, i32 0
  %insertCall41 = insertelement <4 x i32> %insertCall40, i32 %204, i32 1
  %insertCall42 = insertelement <4 x i32> %insertCall41, i32 %204, i32 2
  %insertCall43 = insertelement <4 x i32> %insertCall42, i32 %204, i32 3
  store <4 x i32> %insertCall43, <4 x i32>* %CallInstVec6, align 4
  %205 = load <4 x i32>, <4 x i32>* %CallInstVec6, align 4
  %Vop44 = add <4 x i32> %203, %205
  store <4 x i32> %Vop44, <4 x i32>* %allocaVec17
  %206 = add nsw i32 %202, %201
  store i32 %206, i32* %7, align 4
  br label %207

; <label>:207:                                    ; preds = %178
  %208 = load i32, i32* %3, align 4
  %209 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop45 = add <4 x i32> %209, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop45, <4 x i32>* %allocaVec15
  %210 = add nsw i32 %208, 1
  store i32 %210, i32* %3, align 4
  br label %172

; <label>:211:                                    ; preds = %172
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %4, align 4
  br label %212

; <label>:212:                                    ; preds = %288, %211
  %213 = load i32, i32* %4, align 4
  %214 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %215 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %214, i32 0, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp slt i32 %213, %216
  br i1 %217, label %218, label %289

; <label>:218:                                    ; preds = %212
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %3, align 4
  br label %219

; <label>:219:                                    ; preds = %277, %218
  %220 = load i32, i32* %3, align 4
  %221 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %222 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %221, i32 0, i32 2
  %223 = load i32, i32* %222, align 4
  %224 = icmp slt i32 %220, %223
  br i1 %224, label %225, label %278

; <label>:225:                                    ; preds = %219
  %226 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %227 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %226, i32 0, i32 1
  %228 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %227, i32 0, i32 7
  %229 = load i32, i32* %4, align 4
  %230 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* %228, i32 0, i32 %229
  %231 = load i32, i32* %3, align 4
  %232 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %230, i32 0, i32 %231
  %233 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %232, align 4
  %234 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %235 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %234, i32 0, i32 6
  %236 = load i32, i32* %4, align 4
  %237 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %235, i32 0, i32 %236
  %238 = load i32, i32* %3, align 4
  %239 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %237, i32 0, i32 %238
  %240 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %239, align 4
  %241 = call arm_aapcscc %struct.BF_PartHolder* @BF_LoadHolderFromBitstreamPart(%struct.BF_PartHolder* %233, %struct.BF_BitstreamPart* %240)
  %242 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %243 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %242, i32 0, i32 1
  %244 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %243, i32 0, i32 7
  %245 = load i32, i32* %4, align 4
  %246 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* %244, i32 0, i32 %245
  %247 = load i32, i32* %3, align 4
  %248 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %246, i32 0, i32 %247
  store %struct.BF_PartHolder* %241, %struct.BF_PartHolder** %248, align 4
  %249 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %250 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %249, i32 0, i32 6
  %251 = load i32, i32* %4, align 4
  %252 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %250, i32 0, i32 %251
  %253 = load i32, i32* %3, align 4
  %254 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %252, i32 0, i32 %253
  %255 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %254, align 4
  %256 = call arm_aapcscc i32 @BF_PartLength(%struct.BF_BitstreamPart* %255)
  %257 = load i32, i32* %7, align 4
  %258 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  store i32 %256, i32* %CallInst7
  %259 = load i32, i32* %CallInst7, align 4
  %insertCall46 = insertelement <4 x i32> undef, i32 %259, i32 0
  %insertCall47 = insertelement <4 x i32> %insertCall46, i32 %259, i32 1
  %insertCall48 = insertelement <4 x i32> %insertCall47, i32 %259, i32 2
  %insertCall49 = insertelement <4 x i32> %insertCall48, i32 %259, i32 3
  store <4 x i32> %insertCall49, <4 x i32>* %CallInstVec8, align 4
  %260 = load <4 x i32>, <4 x i32>* %CallInstVec8, align 4
  %Vop50 = add <4 x i32> %258, %260
  store <4 x i32> %Vop50, <4 x i32>* %allocaVec17
  %261 = load <4 x i32>, <4 x i32>* %allocaVec17, align 4
  %extractE = extractelement <4 x i32> %261, i64 0
  %extractE51 = extractelement <4 x i32> %261, i64 1
  %extractE52 = extractelement <4 x i32> %261, i64 2
  %sum = add i32 %extractE, %extractE51
  %sum53 = add i32 %sum, %extractE52
  %262 = add nsw i32 %257, %256
  %Fmul = mul i32 %262, 3
  store i32 %262, i32* %Recovery
  %Fcmp = icmp ne i32 %sum53, %Fmul
  br i1 %Fcmp, label %263, label %267

; <label>:263:                                    ; preds = %225
  %remThree = sdiv i32 %sum53, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %264, label %265

; <label>:264:                                    ; preds = %263
  store i32 %262, i32* %Recovery, align 4
  br label %266

; <label>:265:                                    ; preds = %263
  store i32 %extractE, i32* %Recovery, align 4
  br label %266

; <label>:266:                                    ; preds = %265, %264
  br label %267

; <label>:267:                                    ; preds = %225, %266
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %7, align 4
  br label %268

; <label>:268:                                    ; preds = %267
  %269 = load i32, i32* %3, align 4
  %270 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop54 = add <4 x i32> %270, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop54, <4 x i32>* %allocaVec15
  %271 = load <4 x i32>, <4 x i32>* %allocaVec15, align 4
  %extractE56 = extractelement <4 x i32> %271, i64 0
  %extractE57 = extractelement <4 x i32> %271, i64 1
  %extractE58 = extractelement <4 x i32> %271, i64 2
  %sum59 = add i32 %extractE56, %extractE57
  %sum60 = add i32 %sum59, %extractE58
  %272 = add nsw i32 %269, 1
  %Fmul55 = mul i32 %272, 3
  store i32 %272, i32* %Recovery1
  %Fcmp61 = icmp ne i32 %sum60, %Fmul55
  br i1 %Fcmp61, label %273, label %277

; <label>:273:                                    ; preds = %268
  %remThree70 = sdiv i32 %sum60, %extractE56
  %FcmpThree71 = icmp ne i32 %remThree70, 3
  br i1 %FcmpThree71, label %274, label %275

; <label>:274:                                    ; preds = %273
  store i32 %272, i32* %Recovery1, align 4
  br label %276

; <label>:275:                                    ; preds = %273
  store i32 %extractE56, i32* %Recovery1, align 4
  br label %276

; <label>:276:                                    ; preds = %275, %274
  br label %277

; <label>:277:                                    ; preds = %268, %276
  %ReplaceInst74 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst74, i32* %3, align 4
  br label %219

; <label>:278:                                    ; preds = %219
  br label %279

; <label>:279:                                    ; preds = %278
  %280 = load i32, i32* %4, align 4
  %281 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop62 = add <4 x i32> %281, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop62, <4 x i32>* %allocaVec16
  %282 = load <4 x i32>, <4 x i32>* %allocaVec16, align 4
  %extractE64 = extractelement <4 x i32> %282, i64 0
  %extractE65 = extractelement <4 x i32> %282, i64 1
  %extractE66 = extractelement <4 x i32> %282, i64 2
  %sum67 = add i32 %extractE64, %extractE65
  %sum68 = add i32 %sum67, %extractE66
  %283 = add nsw i32 %280, 1
  %Fmul63 = mul i32 %283, 3
  store i32 %283, i32* %Recovery2
  %Fcmp69 = icmp ne i32 %sum68, %Fmul63
  br i1 %Fcmp69, label %284, label %288

; <label>:284:                                    ; preds = %279
  %remThree72 = sdiv i32 %sum68, %extractE64
  %FcmpThree73 = icmp ne i32 %remThree72, 3
  br i1 %FcmpThree73, label %285, label %286

; <label>:285:                                    ; preds = %284
  store i32 %283, i32* %Recovery2, align 4
  br label %287

; <label>:286:                                    ; preds = %284
  store i32 %extractE64, i32* %Recovery2, align 4
  br label %287

; <label>:287:                                    ; preds = %286, %285
  br label %288

; <label>:288:                                    ; preds = %279, %287
  %ReplaceInst75 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst75, i32* %4, align 4
  br label %212

; <label>:289:                                    ; preds = %212
  %290 = load i32, i32* %7, align 4
  %291 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %292 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %291, i32 0, i32 1
  %293 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %292, i32 0, i32 1
  store i32 %290, i32* %293, align 4
  %294 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_head, align 4
  store %struct.side_info_link* %294, %struct.side_info_link** %6, align 4
  %295 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %296 = icmp eq %struct.side_info_link* %295, null
  br i1 %296, label %297, label %299

; <label>:297:                                    ; preds = %289
  %298 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  store %struct.side_info_link* %298, %struct.side_info_link** @side_queue_head, align 4
  br label %313

; <label>:299:                                    ; preds = %289
  br label %300

; <label>:300:                                    ; preds = %305, %299
  %301 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %302 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %301, i32 0, i32 0
  %303 = load %struct.side_info_link*, %struct.side_info_link** %302, align 4
  %304 = icmp ne %struct.side_info_link* %303, null
  br i1 %304, label %305, label %309

; <label>:305:                                    ; preds = %300
  %306 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %307 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %306, i32 0, i32 0
  %308 = load %struct.side_info_link*, %struct.side_info_link** %307, align 4
  store %struct.side_info_link* %308, %struct.side_info_link** %6, align 4
  br label %300

; <label>:309:                                    ; preds = %300
  %310 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %311 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %312 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %311, i32 0, i32 0
  store %struct.side_info_link* %310, %struct.side_info_link** %312, align 4
  br label %313

; <label>:313:                                    ; preds = %309, %297
  %314 = load i32, i32* %7, align 4
  ret i32 %314
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @main_data(%struct.BF_FrameData*, %struct.BF_FrameResults*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %CallInst = alloca i32, align 4
  %CallInstVec = alloca <4 x i32>, align 16
  %allocaVec12 = alloca <4 x i32>, align 16
  %CallInst3 = alloca i32, align 4
  %CallInstVec4 = alloca <4 x i32>, align 16
  %allocaVec13 = alloca <4 x i32>, align 16
  %CallInst5 = alloca i32, align 4
  %CallInstVec6 = alloca <4 x i32>, align 16
  %allocaVec14 = alloca <4 x i32>, align 16
  %CallInst7 = alloca i32, align 4
  %CallInstVec8 = alloca <4 x i32>, align 16
  %3 = alloca %struct.BF_FrameData*, align 4
  %4 = alloca %struct.BF_FrameResults*, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %8 = alloca i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, align 4
  store %struct.BF_FrameData* %0, %struct.BF_FrameData** %3, align 4
  store %struct.BF_FrameResults* %1, %struct.BF_FrameResults** %4, align 4
  store i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)* @writePartMainData, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %8, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec17
  store i32 0, i32* %7, align 4
  %9 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %10 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %9, i32 0, i32 1
  store i32 0, i32* %10, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %5, align 4
  br label %11

; <label>:11:                                     ; preds = %90, %2
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %14 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %13, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %12, %15
  br i1 %16, label %17, label %91

; <label>:17:                                     ; preds = %11
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %6, align 4
  br label %18

; <label>:18:                                     ; preds = %79, %17
  %19 = load i32, i32* %6, align 4
  %20 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %21 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %20, i32 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %19, %22
  br i1 %23, label %24, label %80

; <label>:24:                                     ; preds = %18
  %25 = load i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %8, align 4
  %26 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %27 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %26, i32 0, i32 7
  %28 = load i32, i32* %5, align 4
  %29 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %27, i32 0, i32 %28
  %30 = load i32, i32* %6, align 4
  %31 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %29, i32 0, i32 %30
  %32 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %31, align 4
  %33 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %34 = call arm_aapcscc i32 %25(%struct.BF_BitstreamPart* %32, %struct.BF_FrameResults* %33)
  %35 = load i32, i32* %7, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %35, i32 0
  %insertElmt18 = insertelement <4 x i32> %insertElmt, i32 %35, i32 1
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %35, i32 2
  %insertElmt20 = insertelement <4 x i32> %insertElmt19, i32 %35, i32 3
  store <4 x i32> %insertElmt20, <4 x i32>* %allocaVec17, align 16
  %36 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  store i32 %34, i32* %CallInst
  %37 = load i32, i32* %CallInst, align 4
  %insertCall = insertelement <4 x i32> undef, i32 %37, i32 0
  %insertCall21 = insertelement <4 x i32> %insertCall, i32 %37, i32 1
  %insertCall22 = insertelement <4 x i32> %insertCall21, i32 %37, i32 2
  %insertCall23 = insertelement <4 x i32> %insertCall22, i32 %37, i32 3
  store <4 x i32> %insertCall23, <4 x i32>* %CallInstVec, align 4
  %38 = load <4 x i32>, <4 x i32>* %CallInstVec, align 4
  %Vop = add <4 x i32> %36, %38
  store <4 x i32> %Vop, <4 x i32>* %allocaVec17
  %39 = add nsw i32 %35, %34
  store i32 %39, i32* %7, align 4
  %40 = load i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %8, align 4
  %41 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %42 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %41, i32 0, i32 8
  %43 = load i32, i32* %5, align 4
  %44 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %42, i32 0, i32 %43
  %45 = load i32, i32* %6, align 4
  %46 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %44, i32 0, i32 %45
  %47 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %46, align 4
  %48 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %49 = call arm_aapcscc i32 %40(%struct.BF_BitstreamPart* %47, %struct.BF_FrameResults* %48)
  %50 = load i32, i32* %7, align 4
  %51 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  store i32 %49, i32* %CallInst3
  %52 = load i32, i32* %CallInst3, align 4
  %insertCall24 = insertelement <4 x i32> undef, i32 %52, i32 0
  %insertCall25 = insertelement <4 x i32> %insertCall24, i32 %52, i32 1
  %insertCall26 = insertelement <4 x i32> %insertCall25, i32 %52, i32 2
  %insertCall27 = insertelement <4 x i32> %insertCall26, i32 %52, i32 3
  store <4 x i32> %insertCall27, <4 x i32>* %CallInstVec4, align 4
  %53 = load <4 x i32>, <4 x i32>* %CallInstVec4, align 4
  %Vop28 = add <4 x i32> %51, %53
  store <4 x i32> %Vop28, <4 x i32>* %allocaVec17
  %54 = add nsw i32 %50, %49
  store i32 %54, i32* %7, align 4
  %55 = load i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %8, align 4
  %56 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %57 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %56, i32 0, i32 9
  %58 = load i32, i32* %5, align 4
  %59 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %57, i32 0, i32 %58
  %60 = load i32, i32* %6, align 4
  %61 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %59, i32 0, i32 %60
  %62 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %61, align 4
  %63 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %64 = call arm_aapcscc i32 %55(%struct.BF_BitstreamPart* %62, %struct.BF_FrameResults* %63)
  %65 = load i32, i32* %7, align 4
  %66 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  store i32 %64, i32* %CallInst5
  %67 = load i32, i32* %CallInst5, align 4
  %insertCall29 = insertelement <4 x i32> undef, i32 %67, i32 0
  %insertCall30 = insertelement <4 x i32> %insertCall29, i32 %67, i32 1
  %insertCall31 = insertelement <4 x i32> %insertCall30, i32 %67, i32 2
  %insertCall32 = insertelement <4 x i32> %insertCall31, i32 %67, i32 3
  store <4 x i32> %insertCall32, <4 x i32>* %CallInstVec6, align 4
  %68 = load <4 x i32>, <4 x i32>* %CallInstVec6, align 4
  %Vop33 = add <4 x i32> %66, %68
  store <4 x i32> %Vop33, <4 x i32>* %allocaVec17
  %69 = add nsw i32 %65, %64
  store i32 %69, i32* %7, align 4
  br label %70

; <label>:70:                                     ; preds = %24
  %71 = load i32, i32* %6, align 4
  %insertElmt34 = insertelement <4 x i32> undef, i32 %71, i32 0
  %insertElmt35 = insertelement <4 x i32> %insertElmt34, i32 %71, i32 1
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %71, i32 2
  %insertElmt37 = insertelement <4 x i32> %insertElmt36, i32 %71, i32 3
  store <4 x i32> %insertElmt37, <4 x i32>* %allocaVec16, align 16
  %72 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop38 = add <4 x i32> %72, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop38, <4 x i32>* %allocaVec16
  %73 = load <4 x i32>, <4 x i32>* %allocaVec16, align 4
  %extractE = extractelement <4 x i32> %73, i64 0
  %extractE39 = extractelement <4 x i32> %73, i64 1
  %extractE40 = extractelement <4 x i32> %73, i64 2
  %sum = add i32 %extractE, %extractE39
  %sum41 = add i32 %sum, %extractE40
  %74 = add nsw i32 %71, 1
  %Fmul = mul i32 %74, 3
  store i32 %74, i32* %Recovery
  %Fcmp = icmp ne i32 %sum41, %Fmul
  br i1 %Fcmp, label %75, label %79

; <label>:75:                                     ; preds = %70
  %remThree = sdiv i32 %sum41, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %76, label %77

; <label>:76:                                     ; preds = %75
  store i32 %74, i32* %Recovery, align 4
  br label %78

; <label>:77:                                     ; preds = %75
  store i32 %extractE, i32* %Recovery, align 4
  br label %78

; <label>:78:                                     ; preds = %77, %76
  br label %79

; <label>:79:                                     ; preds = %70, %78
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %6, align 4
  br label %18

; <label>:80:                                     ; preds = %18
  br label %81

; <label>:81:                                     ; preds = %80
  %82 = load i32, i32* %5, align 4
  %insertElmt42 = insertelement <4 x i32> undef, i32 %82, i32 0
  %insertElmt43 = insertelement <4 x i32> %insertElmt42, i32 %82, i32 1
  %insertElmt44 = insertelement <4 x i32> %insertElmt43, i32 %82, i32 2
  %insertElmt45 = insertelement <4 x i32> %insertElmt44, i32 %82, i32 3
  store <4 x i32> %insertElmt45, <4 x i32>* %allocaVec15, align 16
  %83 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop46 = add <4 x i32> %83, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop46, <4 x i32>* %allocaVec15
  %84 = load <4 x i32>, <4 x i32>* %allocaVec15, align 4
  %extractE48 = extractelement <4 x i32> %84, i64 0
  %extractE49 = extractelement <4 x i32> %84, i64 1
  %extractE50 = extractelement <4 x i32> %84, i64 2
  %sum51 = add i32 %extractE48, %extractE49
  %sum52 = add i32 %sum51, %extractE50
  %85 = add nsw i32 %82, 1
  %Fmul47 = mul i32 %85, 3
  store i32 %85, i32* %Recovery1
  %Fcmp53 = icmp ne i32 %sum52, %Fmul47
  br i1 %Fcmp53, label %86, label %90

; <label>:86:                                     ; preds = %81
  %remThree66 = sdiv i32 %sum52, %extractE48
  %FcmpThree67 = icmp ne i32 %remThree66, 3
  br i1 %FcmpThree67, label %87, label %88

; <label>:87:                                     ; preds = %86
  store i32 %85, i32* %Recovery1, align 4
  br label %89

; <label>:88:                                     ; preds = %86
  store i32 %extractE48, i32* %Recovery1, align 4
  br label %89

; <label>:89:                                     ; preds = %88, %87
  br label %90

; <label>:90:                                     ; preds = %81, %89
  %ReplaceInst70 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst70, i32* %5, align 4
  br label %11

; <label>:91:                                     ; preds = %11
  %92 = load i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %8, align 4
  %93 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %94 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %93, i32 0, i32 10
  %95 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %94, align 4
  %96 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %97 = call arm_aapcscc i32 %92(%struct.BF_BitstreamPart* %95, %struct.BF_FrameResults* %96)
  %98 = load i32, i32* %7, align 4
  %99 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  store i32 %97, i32* %CallInst7
  %100 = load i32, i32* %CallInst7, align 4
  %insertCall54 = insertelement <4 x i32> undef, i32 %100, i32 0
  %insertCall55 = insertelement <4 x i32> %insertCall54, i32 %100, i32 1
  %insertCall56 = insertelement <4 x i32> %insertCall55, i32 %100, i32 2
  %insertCall57 = insertelement <4 x i32> %insertCall56, i32 %100, i32 3
  store <4 x i32> %insertCall57, <4 x i32>* %CallInstVec8, align 4
  %101 = load <4 x i32>, <4 x i32>* %CallInstVec8, align 4
  %Vop58 = add <4 x i32> %99, %101
  store <4 x i32> %Vop58, <4 x i32>* %allocaVec17
  %102 = load <4 x i32>, <4 x i32>* %allocaVec17, align 4
  %extractE60 = extractelement <4 x i32> %102, i64 0
  %extractE61 = extractelement <4 x i32> %102, i64 1
  %extractE62 = extractelement <4 x i32> %102, i64 2
  %sum63 = add i32 %extractE60, %extractE61
  %sum64 = add i32 %sum63, %extractE62
  %103 = add nsw i32 %98, %97
  %Fmul59 = mul i32 %103, 3
  store i32 %103, i32* %Recovery2
  %Fcmp65 = icmp ne i32 %sum64, %Fmul59
  br i1 %Fcmp65, label %104, label %108

; <label>:104:                                    ; preds = %91
  %remThree68 = sdiv i32 %sum64, %extractE60
  %FcmpThree69 = icmp ne i32 %remThree68, 3
  br i1 %FcmpThree69, label %105, label %106

; <label>:105:                                    ; preds = %104
  store i32 %103, i32* %Recovery2, align 4
  br label %107

; <label>:106:                                    ; preds = %104
  store i32 %extractE60, i32* %Recovery2, align 4
  br label %107

; <label>:107:                                    ; preds = %106, %105
  br label %108

; <label>:108:                                    ; preds = %91, %107
  %ReplaceInst71 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst71, i32* %7, align 4
  %109 = load i32, i32* %7, align 4
  ret i32 %109
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @side_queue_elements(i32*, i32*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %3 = alloca i32*, align 4
  %4 = alloca i32*, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %6 = alloca %struct.side_info_link*, align 4
  store i32* %0, i32** %3, align 4
  store i32* %1, i32** %4, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec5
  store i32 0, i32* %5, align 4
  %7 = load i32*, i32** %3, align 4
  store i32 0, i32* %7, align 4
  %8 = load i32*, i32** %4, align 4
  store i32 0, i32* %8, align 4
  %9 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_head, align 4
  store %struct.side_info_link* %9, %struct.side_info_link** %6, align 4
  br label %10

; <label>:10:                                     ; preds = %37, %2
  %11 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %12 = icmp ne %struct.side_info_link* %11, null
  br i1 %12, label %13, label %41

; <label>:13:                                     ; preds = %10
  %14 = load i32, i32* %5, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %14, i32 0
  %insertElmt6 = insertelement <4 x i32> %insertElmt, i32 %14, i32 1
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %14, i32 2
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %14, i32 3
  store <4 x i32> %insertElmt8, <4 x i32>* %allocaVec5, align 16
  %15 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop = add <4 x i32> %15, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec5
  %16 = load <4 x i32>, <4 x i32>* %allocaVec5, align 4
  %extractE = extractelement <4 x i32> %16, i64 0
  %extractE9 = extractelement <4 x i32> %16, i64 1
  %extractE10 = extractelement <4 x i32> %16, i64 2
  %sum = add i32 %extractE, %extractE9
  %sum11 = add i32 %sum, %extractE10
  %17 = add nsw i32 %14, 1
  %Fmul = mul i32 %17, 3
  store i32 %17, i32* %Recovery
  %Fcmp = icmp ne i32 %sum11, %Fmul
  br i1 %Fcmp, label %18, label %22

; <label>:18:                                     ; preds = %13
  %remThree = sdiv i32 %sum11, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %19, label %20

; <label>:19:                                     ; preds = %18
  store i32 %17, i32* %Recovery, align 4
  br label %21

; <label>:20:                                     ; preds = %18
  store i32 %extractE, i32* %Recovery, align 4
  br label %21

; <label>:21:                                     ; preds = %20, %19
  br label %22

; <label>:22:                                     ; preds = %13, %21
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %5, align 4
  %23 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %24 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = load i32*, i32** %3, align 4
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 %28, %26
  store i32 %29, i32* %27, align 4
  %30 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %31 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %30, i32 0, i32 1
  %32 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %31, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = load i32*, i32** %4, align 4
  %35 = load i32, i32* %34, align 4
  %36 = add nsw i32 %35, %33
  store i32 %36, i32* %34, align 4
  br label %37

; <label>:37:                                     ; preds = %22
  %38 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %39 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %38, i32 0, i32 0
  %40 = load %struct.side_info_link*, %struct.side_info_link** %39, align 4
  store %struct.side_info_link* %40, %struct.side_info_link** %6, align 4
  br label %10

; <label>:41:                                     ; preds = %10
  %42 = load i32, i32* %5, align 4
  ret i32 %42
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @writePartMainData(%struct.BF_BitstreamPart*, %struct.BF_FrameResults*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %3 = alloca %struct.BF_BitstreamPart*, align 4
  %4 = alloca %struct.BF_FrameResults*, align 4
  %5 = alloca %struct.BF_BitstreamElement*, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  store %struct.BF_BitstreamPart* %0, %struct.BF_BitstreamPart** %3, align 4
  store %struct.BF_FrameResults* %1, %struct.BF_FrameResults** %4, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec5
  store i32 0, i32* %7, align 4
  %8 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %9 = icmp ne %struct.BF_FrameResults* %8, null
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %2
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.writePartMainData, i32 0, i32 0))
  br label %11

; <label>:11:                                     ; preds = %10, %2
  %12 = phi i1 [ true, %2 ], [ false, %10 ]
  %13 = zext i1 %12 to i32
  %14 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %3, align 4
  %15 = icmp ne %struct.BF_BitstreamPart* %14, null
  br i1 %15, label %17, label %16

; <label>:16:                                     ; preds = %11
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.writePartMainData, i32 0, i32 0))
  br label %17

; <label>:17:                                     ; preds = %16, %11
  %18 = phi i1 [ true, %11 ], [ false, %16 ]
  %19 = zext i1 %18 to i32
  %20 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %3, align 4
  %21 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %20, i32 0, i32 1
  %22 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %21, align 4
  store %struct.BF_BitstreamElement* %22, %struct.BF_BitstreamElement** %5, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec4
  store i32 0, i32* %6, align 4
  br label %23

; <label>:23:                                     ; preds = %62, %17
  %24 = load i32, i32* %6, align 4
  %25 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %3, align 4
  %26 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %25, i32 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = icmp ult i32 %24, %27
  br i1 %28, label %29, label %65

; <label>:29:                                     ; preds = %23
  %30 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %31 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %30, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %34 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %33, i32 0, i32 1
  %35 = load i16, i16* %34, align 4
  %36 = zext i16 %35 to i32
  %37 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  call arm_aapcscc void @WriteMainDataBits(i32 %32, i32 %36, %struct.BF_FrameResults* %37)
  %38 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %39 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %38, i32 0, i32 1
  %40 = load i16, i16* %39, align 4
  %41 = zext i16 %40 to i32
  %42 = load i32, i32* %7, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %42, i32 0
  %insertElmt6 = insertelement <4 x i32> %insertElmt, i32 %42, i32 1
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %42, i32 2
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %42, i32 3
  store <4 x i32> %insertElmt8, <4 x i32>* %allocaVec5, align 16
  %43 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  store i32 %41, i32* %CastInst
  %44 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %44, i32 0
  %insertCast9 = insertelement <4 x i32> %insertCast, i32 %44, i32 1
  %insertCast10 = insertelement <4 x i32> %insertCast9, i32 %44, i32 2
  %insertCast11 = insertelement <4 x i32> %insertCast10, i32 %44, i32 3
  store <4 x i32> %insertCast11, <4 x i32>* %CastInstVec, align 4
  %45 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop = add <4 x i32> %43, %45
  store <4 x i32> %Vop, <4 x i32>* %allocaVec5
  %46 = load <4 x i32>, <4 x i32>* %allocaVec5, align 4
  %extractE = extractelement <4 x i32> %46, i64 0
  %extractE12 = extractelement <4 x i32> %46, i64 1
  %extractE13 = extractelement <4 x i32> %46, i64 2
  %sum = add i32 %extractE, %extractE12
  %sum14 = add i32 %sum, %extractE13
  %47 = add nsw i32 %42, %41
  %Fmul = mul i32 %47, 3
  store i32 %47, i32* %Recovery
  %Fcmp = icmp ne i32 %sum14, %Fmul
  br i1 %Fcmp, label %48, label %52

; <label>:48:                                     ; preds = %29
  %remThree = sdiv i32 %sum14, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %49, label %50

; <label>:49:                                     ; preds = %48
  store i32 %47, i32* %Recovery, align 4
  br label %51

; <label>:50:                                     ; preds = %48
  store i32 %extractE, i32* %Recovery, align 4
  br label %51

; <label>:51:                                     ; preds = %50, %49
  br label %52

; <label>:52:                                     ; preds = %29, %51
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %7, align 4
  br label %53

; <label>:53:                                     ; preds = %52
  %54 = load i32, i32* %6, align 4
  %insertElmt15 = insertelement <4 x i32> undef, i32 %54, i32 0
  %insertElmt16 = insertelement <4 x i32> %insertElmt15, i32 %54, i32 1
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %54, i32 2
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %54, i32 3
  store <4 x i32> %insertElmt18, <4 x i32>* %allocaVec4, align 16
  %55 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop19 = add <4 x i32> %55, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop19, <4 x i32>* %allocaVec4
  %56 = load <4 x i32>, <4 x i32>* %allocaVec4, align 4
  %extractE21 = extractelement <4 x i32> %56, i64 0
  %extractE22 = extractelement <4 x i32> %56, i64 1
  %extractE23 = extractelement <4 x i32> %56, i64 2
  %sum24 = add i32 %extractE21, %extractE22
  %sum25 = add i32 %sum24, %extractE23
  %57 = add i32 %54, 1
  %Fmul20 = mul i32 %57, 3
  store i32 %57, i32* %Recovery1
  %Fcmp26 = icmp ne i32 %sum25, %Fmul20
  br i1 %Fcmp26, label %58, label %62

; <label>:58:                                     ; preds = %53
  %remThree27 = sdiv i32 %sum25, %extractE21
  %FcmpThree28 = icmp ne i32 %remThree27, 3
  br i1 %FcmpThree28, label %59, label %60

; <label>:59:                                     ; preds = %58
  store i32 %57, i32* %Recovery1, align 4
  br label %61

; <label>:60:                                     ; preds = %58
  store i32 %extractE21, i32* %Recovery1, align 4
  br label %61

; <label>:61:                                     ; preds = %60, %59
  br label %62

; <label>:62:                                     ; preds = %53, %61
  %ReplaceInst29 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst29, i32* %6, align 4
  %63 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %64 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %63, i32 1
  store %struct.BF_BitstreamElement* %64, %struct.BF_BitstreamElement** %5, align 4
  br label %23

; <label>:65:                                     ; preds = %23
  %66 = load i32, i32* %7, align 4
  ret i32 %66
}

; Function Attrs: nounwind
define internal arm_aapcscc void @WriteMainDataBits(i32, i32, %struct.BF_FrameResults*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %6 = alloca %struct.BF_FrameResults*, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.BF_FrameResults* %2, %struct.BF_FrameResults** %6, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp ule i32 %8, 32
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %3
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 217, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.WriteMainDataBits, i32 0, i32 0))
  br label %11

; <label>:11:                                     ; preds = %10, %3
  %12 = phi i1 [ true, %3 ], [ false, %10 ]
  %13 = zext i1 %12 to i32
  %14 = load i32, i32* %5, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %11
  br label %79

; <label>:17:                                     ; preds = %11
  %18 = load i32, i32* @BitCount, align 4
  %19 = load i32, i32* @ThisFrameSize, align 4
  %20 = icmp eq i32 %18, %19
  br i1 %20, label %21, label %26

; <label>:21:                                     ; preds = %17
  %22 = call arm_aapcscc i32 @write_side_info()
  store i32 %22, i32* @BitCount, align 4
  %23 = load i32, i32* @ThisFrameSize, align 4
  %24 = load i32, i32* @BitCount, align 4
  %25 = sub nsw i32 %23, %24
  store i32 %25, i32* @BitsRemaining, align 4
  br label %26

; <label>:26:                                     ; preds = %21, %17
  %27 = load i32, i32* %5, align 4
  %28 = load i32, i32* @BitsRemaining, align 4
  %29 = icmp ugt i32 %27, %28
  br i1 %29, label %30, label %47

; <label>:30:                                     ; preds = %26
  %31 = load i32, i32* %4, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %31, i32 0
  %insertElmt4 = insertelement <4 x i32> %insertElmt, i32 %31, i32 1
  %insertElmt5 = insertelement <4 x i32> %insertElmt4, i32 %31, i32 2
  %insertElmt6 = insertelement <4 x i32> %insertElmt5, i32 %31, i32 3
  store <4 x i32> %insertElmt6, <4 x i32>* %allocaVec1, align 16
  %32 = load i32, i32* %5, align 4
  %insertElmt7 = insertelement <4 x i32> undef, i32 %32, i32 0
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %32, i32 1
  %insertElmt9 = insertelement <4 x i32> %insertElmt8, i32 %32, i32 2
  %insertElmt10 = insertelement <4 x i32> %insertElmt9, i32 %32, i32 3
  store <4 x i32> %insertElmt10, <4 x i32>* %allocaVec2, align 16
  %33 = load i32, i32* @BitsRemaining, align 4
  %34 = sub i32 %32, %33
  %35 = lshr i32 %31, %34
  store i32 %35, i32* %7, align 4
  %36 = load i32, i32* @BitsRemaining, align 4
  %37 = load i32, i32* %5, align 4
  %38 = sub i32 %37, %36
  store i32 %38, i32* %5, align 4
  %39 = load i32, i32* %7, align 4
  %40 = load i32, i32* @BitsRemaining, align 4
  call arm_aapcscc void @putMyBits(i32 %39, i32 %40)
  %41 = call arm_aapcscc i32 @write_side_info()
  store i32 %41, i32* @BitCount, align 4
  %42 = load i32, i32* @ThisFrameSize, align 4
  %43 = load i32, i32* @BitCount, align 4
  %44 = sub nsw i32 %42, %43
  store i32 %44, i32* @BitsRemaining, align 4
  %45 = load i32, i32* %4, align 4
  %46 = load i32, i32* %5, align 4
  call arm_aapcscc void @putMyBits(i32 %45, i32 %46)
  br label %50

; <label>:47:                                     ; preds = %26
  %48 = load i32, i32* %4, align 4
  %49 = load i32, i32* %5, align 4
  call arm_aapcscc void @putMyBits(i32 %48, i32 %49)
  br label %50

; <label>:50:                                     ; preds = %47, %30
  %51 = load i32, i32* %5, align 4
  %insertElmt11 = insertelement <4 x i32> undef, i32 %51, i32 0
  %insertElmt12 = insertelement <4 x i32> %insertElmt11, i32 %51, i32 1
  %insertElmt13 = insertelement <4 x i32> %insertElmt12, i32 %51, i32 2
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %51, i32 3
  store <4 x i32> %insertElmt14, <4 x i32>* %allocaVec2, align 16
  %52 = load i32, i32* @BitCount, align 4
  %53 = add i32 %52, %51
  store i32 %53, i32* @BitCount, align 4
  %54 = load i32, i32* %5, align 4
  %55 = load i32, i32* @BitsRemaining, align 4
  %56 = sub i32 %55, %54
  store i32 %56, i32* @BitsRemaining, align 4
  %57 = load i32, i32* @BitCount, align 4
  %58 = load i32, i32* @ThisFrameSize, align 4
  %59 = icmp sle i32 %57, %58
  br i1 %59, label %61, label %60

; <label>:60:                                     ; preds = %50
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 238, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.WriteMainDataBits, i32 0, i32 0))
  br label %61

; <label>:61:                                     ; preds = %60, %50
  %62 = phi i1 [ true, %50 ], [ false, %60 ]
  %63 = zext i1 %62 to i32
  %64 = load i32, i32* @BitsRemaining, align 4
  %65 = icmp sge i32 %64, 0
  br i1 %65, label %67, label %66

; <label>:66:                                     ; preds = %61
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 239, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.WriteMainDataBits, i32 0, i32 0))
  br label %67

; <label>:67:                                     ; preds = %66, %61
  %68 = phi i1 [ true, %61 ], [ false, %66 ]
  %69 = zext i1 %68 to i32
  %70 = load i32, i32* @BitCount, align 4
  %71 = load i32, i32* @BitsRemaining, align 4
  %72 = add nsw i32 %70, %71
  %73 = load i32, i32* @ThisFrameSize, align 4
  %74 = icmp eq i32 %72, %73
  br i1 %74, label %76, label %75

; <label>:75:                                     ; preds = %67
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 240, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.WriteMainDataBits, i32 0, i32 0))
  br label %76

; <label>:76:                                     ; preds = %75, %67
  %77 = phi i1 [ true, %67 ], [ false, %75 ]
  %78 = zext i1 %77 to i32
  br label %79

; <label>:79:                                     ; preds = %76, %16
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @write_side_info() #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %CallInst = alloca i32, align 4
  %CallInstVec = alloca <4 x i32>, align 16
  %allocaVec12 = alloca <4 x i32>, align 16
  %CallInst3 = alloca i32, align 4
  %CallInstVec4 = alloca <4 x i32>, align 16
  %allocaVec13 = alloca <4 x i32>, align 16
  %CallInst5 = alloca i32, align 4
  %CallInstVec6 = alloca <4 x i32>, align 16
  %allocaVec14 = alloca <4 x i32>, align 16
  %CallInst7 = alloca i32, align 4
  %CallInstVec8 = alloca <4 x i32>, align 16
  %1 = alloca %struct.MYSideInfo*, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %2 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %5 = alloca i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, align 4
  store i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)* @writePartSideInfo, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %5, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %2, align 4
  %6 = call arm_aapcscc %struct.MYSideInfo* @get_side_info()
  store %struct.MYSideInfo* %6, %struct.MYSideInfo** %1, align 4
  %7 = load %struct.MYSideInfo*, %struct.MYSideInfo** %1, align 4
  %8 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %7, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* @ThisFrameSize, align 4
  %10 = load i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %5, align 4
  %11 = load %struct.MYSideInfo*, %struct.MYSideInfo** %1, align 4
  %12 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %11, i32 0, i32 4
  %13 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %12, align 4
  %14 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %13, i32 0, i32 1
  %15 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %14, align 4
  %16 = call arm_aapcscc i32 %10(%struct.BF_BitstreamPart* %15, %struct.BF_FrameResults* null)
  %17 = load i32, i32* %2, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %17, i32 0
  %insertElmt18 = insertelement <4 x i32> %insertElmt, i32 %17, i32 1
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %17, i32 2
  %insertElmt20 = insertelement <4 x i32> %insertElmt19, i32 %17, i32 3
  store <4 x i32> %insertElmt20, <4 x i32>* %allocaVec15, align 16
  %18 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  store i32 %16, i32* %CallInst
  %19 = load i32, i32* %CallInst, align 4
  %insertCall = insertelement <4 x i32> undef, i32 %19, i32 0
  %insertCall21 = insertelement <4 x i32> %insertCall, i32 %19, i32 1
  %insertCall22 = insertelement <4 x i32> %insertCall21, i32 %19, i32 2
  %insertCall23 = insertelement <4 x i32> %insertCall22, i32 %19, i32 3
  store <4 x i32> %insertCall23, <4 x i32>* %CallInstVec, align 4
  %20 = load <4 x i32>, <4 x i32>* %CallInstVec, align 4
  %Vop = add <4 x i32> %18, %20
  store <4 x i32> %Vop, <4 x i32>* %allocaVec15
  %21 = add nsw i32 %17, %16
  store i32 %21, i32* %2, align 4
  %22 = load i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %5, align 4
  %23 = load %struct.MYSideInfo*, %struct.MYSideInfo** %1, align 4
  %24 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %23, i32 0, i32 5
  %25 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %24, align 4
  %26 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %25, i32 0, i32 1
  %27 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %26, align 4
  %28 = call arm_aapcscc i32 %22(%struct.BF_BitstreamPart* %27, %struct.BF_FrameResults* null)
  %29 = load i32, i32* %2, align 4
  %30 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  store i32 %28, i32* %CallInst3
  %31 = load i32, i32* %CallInst3, align 4
  %insertCall24 = insertelement <4 x i32> undef, i32 %31, i32 0
  %insertCall25 = insertelement <4 x i32> %insertCall24, i32 %31, i32 1
  %insertCall26 = insertelement <4 x i32> %insertCall25, i32 %31, i32 2
  %insertCall27 = insertelement <4 x i32> %insertCall26, i32 %31, i32 3
  store <4 x i32> %insertCall27, <4 x i32>* %CallInstVec4, align 4
  %32 = load <4 x i32>, <4 x i32>* %CallInstVec4, align 4
  %Vop28 = add <4 x i32> %30, %32
  store <4 x i32> %Vop28, <4 x i32>* %allocaVec15
  %33 = add nsw i32 %29, %28
  store i32 %33, i32* %2, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %3, align 4
  br label %34

; <label>:34:                                     ; preds = %55, %0
  %35 = load i32, i32* %3, align 4
  %36 = load %struct.MYSideInfo*, %struct.MYSideInfo** %1, align 4
  %37 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %36, i32 0, i32 3
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %35, %38
  br i1 %39, label %40, label %59

; <label>:40:                                     ; preds = %34
  %41 = load i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %5, align 4
  %42 = load %struct.MYSideInfo*, %struct.MYSideInfo** %1, align 4
  %43 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %42, i32 0, i32 6
  %44 = load i32, i32* %3, align 4
  %45 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %43, i32 0, i32 %44
  %46 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %45, align 4
  %47 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %46, i32 0, i32 1
  %48 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %47, align 4
  %49 = call arm_aapcscc i32 %41(%struct.BF_BitstreamPart* %48, %struct.BF_FrameResults* null)
  %50 = load i32, i32* %2, align 4
  %51 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  store i32 %49, i32* %CallInst5
  %52 = load i32, i32* %CallInst5, align 4
  %insertCall29 = insertelement <4 x i32> undef, i32 %52, i32 0
  %insertCall30 = insertelement <4 x i32> %insertCall29, i32 %52, i32 1
  %insertCall31 = insertelement <4 x i32> %insertCall30, i32 %52, i32 2
  %insertCall32 = insertelement <4 x i32> %insertCall31, i32 %52, i32 3
  store <4 x i32> %insertCall32, <4 x i32>* %CallInstVec6, align 4
  %53 = load <4 x i32>, <4 x i32>* %CallInstVec6, align 4
  %Vop33 = add <4 x i32> %51, %53
  store <4 x i32> %Vop33, <4 x i32>* %allocaVec15
  %54 = add nsw i32 %50, %49
  store i32 %54, i32* %2, align 4
  br label %55

; <label>:55:                                     ; preds = %40
  %56 = load i32, i32* %3, align 4
  %insertElmt34 = insertelement <4 x i32> undef, i32 %56, i32 0
  %insertElmt35 = insertelement <4 x i32> %insertElmt34, i32 %56, i32 1
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %56, i32 2
  %insertElmt37 = insertelement <4 x i32> %insertElmt36, i32 %56, i32 3
  store <4 x i32> %insertElmt37, <4 x i32>* %allocaVec16, align 16
  %57 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop38 = add <4 x i32> %57, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop38, <4 x i32>* %allocaVec16
  %58 = add nsw i32 %56, 1
  store i32 %58, i32* %3, align 4
  br label %34

; <label>:59:                                     ; preds = %34
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec17
  store i32 0, i32* %4, align 4
  br label %60

; <label>:60:                                     ; preds = %116, %59
  %61 = load i32, i32* %4, align 4
  %62 = load %struct.MYSideInfo*, %struct.MYSideInfo** %1, align 4
  %63 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %62, i32 0, i32 2
  %64 = load i32, i32* %63, align 4
  %65 = icmp slt i32 %61, %64
  br i1 %65, label %66, label %117

; <label>:66:                                     ; preds = %60
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %3, align 4
  br label %67

; <label>:67:                                     ; preds = %105, %66
  %68 = load i32, i32* %3, align 4
  %69 = load %struct.MYSideInfo*, %struct.MYSideInfo** %1, align 4
  %70 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %69, i32 0, i32 3
  %71 = load i32, i32* %70, align 4
  %72 = icmp slt i32 %68, %71
  br i1 %72, label %73, label %106

; <label>:73:                                     ; preds = %67
  %74 = load i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %5, align 4
  %75 = load %struct.MYSideInfo*, %struct.MYSideInfo** %1, align 4
  %76 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %75, i32 0, i32 7
  %77 = load i32, i32* %4, align 4
  %78 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* %76, i32 0, i32 %77
  %79 = load i32, i32* %3, align 4
  %80 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %78, i32 0, i32 %79
  %81 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %80, align 4
  %82 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %81, i32 0, i32 1
  %83 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %82, align 4
  %84 = call arm_aapcscc i32 %74(%struct.BF_BitstreamPart* %83, %struct.BF_FrameResults* null)
  %85 = load i32, i32* %2, align 4
  %86 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  store i32 %84, i32* %CallInst7
  %87 = load i32, i32* %CallInst7, align 4
  %insertCall39 = insertelement <4 x i32> undef, i32 %87, i32 0
  %insertCall40 = insertelement <4 x i32> %insertCall39, i32 %87, i32 1
  %insertCall41 = insertelement <4 x i32> %insertCall40, i32 %87, i32 2
  %insertCall42 = insertelement <4 x i32> %insertCall41, i32 %87, i32 3
  store <4 x i32> %insertCall42, <4 x i32>* %CallInstVec8, align 4
  %88 = load <4 x i32>, <4 x i32>* %CallInstVec8, align 4
  %Vop43 = add <4 x i32> %86, %88
  store <4 x i32> %Vop43, <4 x i32>* %allocaVec15
  %89 = load <4 x i32>, <4 x i32>* %allocaVec15, align 4
  %extractE = extractelement <4 x i32> %89, i64 0
  %extractE44 = extractelement <4 x i32> %89, i64 1
  %extractE45 = extractelement <4 x i32> %89, i64 2
  %sum = add i32 %extractE, %extractE44
  %sum46 = add i32 %sum, %extractE45
  %90 = add nsw i32 %85, %84
  %Fmul = mul i32 %90, 3
  store i32 %90, i32* %Recovery
  %Fcmp = icmp ne i32 %sum46, %Fmul
  br i1 %Fcmp, label %91, label %95

; <label>:91:                                     ; preds = %73
  %remThree = sdiv i32 %sum46, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %92, label %93

; <label>:92:                                     ; preds = %91
  store i32 %90, i32* %Recovery, align 4
  br label %94

; <label>:93:                                     ; preds = %91
  store i32 %extractE, i32* %Recovery, align 4
  br label %94

; <label>:94:                                     ; preds = %93, %92
  br label %95

; <label>:95:                                     ; preds = %73, %94
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %2, align 4
  br label %96

; <label>:96:                                     ; preds = %95
  %97 = load i32, i32* %3, align 4
  %98 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop47 = add <4 x i32> %98, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop47, <4 x i32>* %allocaVec16
  %99 = load <4 x i32>, <4 x i32>* %allocaVec16, align 4
  %extractE49 = extractelement <4 x i32> %99, i64 0
  %extractE50 = extractelement <4 x i32> %99, i64 1
  %extractE51 = extractelement <4 x i32> %99, i64 2
  %sum52 = add i32 %extractE49, %extractE50
  %sum53 = add i32 %sum52, %extractE51
  %100 = add nsw i32 %97, 1
  %Fmul48 = mul i32 %100, 3
  store i32 %100, i32* %Recovery1
  %Fcmp54 = icmp ne i32 %sum53, %Fmul48
  br i1 %Fcmp54, label %101, label %105

; <label>:101:                                    ; preds = %96
  %remThree67 = sdiv i32 %sum53, %extractE49
  %FcmpThree68 = icmp ne i32 %remThree67, 3
  br i1 %FcmpThree68, label %102, label %103

; <label>:102:                                    ; preds = %101
  store i32 %100, i32* %Recovery1, align 4
  br label %104

; <label>:103:                                    ; preds = %101
  store i32 %extractE49, i32* %Recovery1, align 4
  br label %104

; <label>:104:                                    ; preds = %103, %102
  br label %105

; <label>:105:                                    ; preds = %96, %104
  %ReplaceInst71 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst71, i32* %3, align 4
  br label %67

; <label>:106:                                    ; preds = %67
  br label %107

; <label>:107:                                    ; preds = %106
  %108 = load i32, i32* %4, align 4
  %insertElmt55 = insertelement <4 x i32> undef, i32 %108, i32 0
  %insertElmt56 = insertelement <4 x i32> %insertElmt55, i32 %108, i32 1
  %insertElmt57 = insertelement <4 x i32> %insertElmt56, i32 %108, i32 2
  %insertElmt58 = insertelement <4 x i32> %insertElmt57, i32 %108, i32 3
  store <4 x i32> %insertElmt58, <4 x i32>* %allocaVec17, align 16
  %109 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop59 = add <4 x i32> %109, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop59, <4 x i32>* %allocaVec17
  %110 = load <4 x i32>, <4 x i32>* %allocaVec17, align 4
  %extractE61 = extractelement <4 x i32> %110, i64 0
  %extractE62 = extractelement <4 x i32> %110, i64 1
  %extractE63 = extractelement <4 x i32> %110, i64 2
  %sum64 = add i32 %extractE61, %extractE62
  %sum65 = add i32 %sum64, %extractE63
  %111 = add nsw i32 %108, 1
  %Fmul60 = mul i32 %111, 3
  store i32 %111, i32* %Recovery2
  %Fcmp66 = icmp ne i32 %sum65, %Fmul60
  br i1 %Fcmp66, label %112, label %116

; <label>:112:                                    ; preds = %107
  %remThree69 = sdiv i32 %sum65, %extractE61
  %FcmpThree70 = icmp ne i32 %remThree69, 3
  br i1 %FcmpThree70, label %113, label %114

; <label>:113:                                    ; preds = %112
  store i32 %111, i32* %Recovery2, align 4
  br label %115

; <label>:114:                                    ; preds = %112
  store i32 %extractE61, i32* %Recovery2, align 4
  br label %115

; <label>:115:                                    ; preds = %114, %113
  br label %116

; <label>:116:                                    ; preds = %107, %115
  %ReplaceInst72 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst72, i32* %4, align 4
  br label %60

; <label>:117:                                    ; preds = %60
  %118 = load i32, i32* %2, align 4
  ret i32 %118
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @writePartSideInfo(%struct.BF_BitstreamPart*, %struct.BF_FrameResults*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %3 = alloca %struct.BF_BitstreamPart*, align 4
  %4 = alloca %struct.BF_FrameResults*, align 4
  %5 = alloca %struct.BF_BitstreamElement*, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  store %struct.BF_BitstreamPart* %0, %struct.BF_BitstreamPart** %3, align 4
  store %struct.BF_FrameResults* %1, %struct.BF_FrameResults** %4, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec5
  store i32 0, i32* %7, align 4
  %8 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %3, align 4
  %9 = icmp ne %struct.BF_BitstreamPart* %8, null
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %2
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 176, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.writePartSideInfo, i32 0, i32 0))
  br label %11

; <label>:11:                                     ; preds = %10, %2
  %12 = phi i1 [ true, %2 ], [ false, %10 ]
  %13 = zext i1 %12 to i32
  %14 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %3, align 4
  %15 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %14, i32 0, i32 1
  %16 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %15, align 4
  store %struct.BF_BitstreamElement* %16, %struct.BF_BitstreamElement** %5, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec4
  store i32 0, i32* %6, align 4
  br label %17

; <label>:17:                                     ; preds = %55, %11
  %18 = load i32, i32* %6, align 4
  %19 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %3, align 4
  %20 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %19, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp ult i32 %18, %21
  br i1 %22, label %23, label %58

; <label>:23:                                     ; preds = %17
  %24 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %25 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %28 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %27, i32 0, i32 1
  %29 = load i16, i16* %28, align 4
  %30 = zext i16 %29 to i32
  call arm_aapcscc void @putMyBits(i32 %26, i32 %30)
  %31 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %32 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %31, i32 0, i32 1
  %33 = load i16, i16* %32, align 4
  %34 = zext i16 %33 to i32
  %35 = load i32, i32* %7, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %35, i32 0
  %insertElmt6 = insertelement <4 x i32> %insertElmt, i32 %35, i32 1
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %35, i32 2
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %35, i32 3
  store <4 x i32> %insertElmt8, <4 x i32>* %allocaVec5, align 16
  %36 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  store i32 %34, i32* %CastInst
  %37 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %37, i32 0
  %insertCast9 = insertelement <4 x i32> %insertCast, i32 %37, i32 1
  %insertCast10 = insertelement <4 x i32> %insertCast9, i32 %37, i32 2
  %insertCast11 = insertelement <4 x i32> %insertCast10, i32 %37, i32 3
  store <4 x i32> %insertCast11, <4 x i32>* %CastInstVec, align 4
  %38 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop = add <4 x i32> %36, %38
  store <4 x i32> %Vop, <4 x i32>* %allocaVec5
  %39 = load <4 x i32>, <4 x i32>* %allocaVec5, align 4
  %extractE = extractelement <4 x i32> %39, i64 0
  %extractE12 = extractelement <4 x i32> %39, i64 1
  %extractE13 = extractelement <4 x i32> %39, i64 2
  %sum = add i32 %extractE, %extractE12
  %sum14 = add i32 %sum, %extractE13
  %40 = add nsw i32 %35, %34
  %Fmul = mul i32 %40, 3
  store i32 %40, i32* %Recovery
  %Fcmp = icmp ne i32 %sum14, %Fmul
  br i1 %Fcmp, label %41, label %45

; <label>:41:                                     ; preds = %23
  %remThree = sdiv i32 %sum14, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %42, label %43

; <label>:42:                                     ; preds = %41
  store i32 %40, i32* %Recovery, align 4
  br label %44

; <label>:43:                                     ; preds = %41
  store i32 %extractE, i32* %Recovery, align 4
  br label %44

; <label>:44:                                     ; preds = %43, %42
  br label %45

; <label>:45:                                     ; preds = %23, %44
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %7, align 4
  br label %46

; <label>:46:                                     ; preds = %45
  %47 = load i32, i32* %6, align 4
  %insertElmt15 = insertelement <4 x i32> undef, i32 %47, i32 0
  %insertElmt16 = insertelement <4 x i32> %insertElmt15, i32 %47, i32 1
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %47, i32 2
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %47, i32 3
  store <4 x i32> %insertElmt18, <4 x i32>* %allocaVec4, align 16
  %48 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop19 = add <4 x i32> %48, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop19, <4 x i32>* %allocaVec4
  %49 = load <4 x i32>, <4 x i32>* %allocaVec4, align 4
  %extractE21 = extractelement <4 x i32> %49, i64 0
  %extractE22 = extractelement <4 x i32> %49, i64 1
  %extractE23 = extractelement <4 x i32> %49, i64 2
  %sum24 = add i32 %extractE21, %extractE22
  %sum25 = add i32 %sum24, %extractE23
  %50 = add i32 %47, 1
  %Fmul20 = mul i32 %50, 3
  store i32 %50, i32* %Recovery1
  %Fcmp26 = icmp ne i32 %sum25, %Fmul20
  br i1 %Fcmp26, label %51, label %55

; <label>:51:                                     ; preds = %46
  %remThree27 = sdiv i32 %sum25, %extractE21
  %FcmpThree28 = icmp ne i32 %remThree27, 3
  br i1 %FcmpThree28, label %52, label %53

; <label>:52:                                     ; preds = %51
  store i32 %50, i32* %Recovery1, align 4
  br label %54

; <label>:53:                                     ; preds = %51
  store i32 %extractE21, i32* %Recovery1, align 4
  br label %54

; <label>:54:                                     ; preds = %53, %52
  br label %55

; <label>:55:                                     ; preds = %46, %54
  %ReplaceInst29 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst29, i32* %6, align 4
  %56 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %57 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %56, i32 1
  store %struct.BF_BitstreamElement* %57, %struct.BF_BitstreamElement** %5, align 4
  br label %17

; <label>:58:                                     ; preds = %17
  %59 = load i32, i32* %7, align 4
  ret i32 %59
}

; Function Attrs: nounwind
define internal arm_aapcscc %struct.MYSideInfo* @get_side_info() #0 {
  %1 = alloca %struct.side_info_link*, align 4
  %2 = alloca %struct.side_info_link*, align 4
  %3 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_free, align 4
  store %struct.side_info_link* %3, %struct.side_info_link** %1, align 4
  %4 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_head, align 4
  store %struct.side_info_link* %4, %struct.side_info_link** %2, align 4
  %5 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %6 = icmp ne %struct.side_info_link* %5, null
  br i1 %6, label %8, label %7

; <label>:7:                                      ; preds = %0
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 384, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__.get_side_info, i32 0, i32 0))
  br label %8

; <label>:8:                                      ; preds = %7, %0
  %9 = phi i1 [ true, %0 ], [ false, %7 ]
  %10 = zext i1 %9 to i32
  %11 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %12 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %11, i32 0, i32 0
  %13 = load %struct.side_info_link*, %struct.side_info_link** %12, align 4
  store %struct.side_info_link* %13, %struct.side_info_link** @side_queue_head, align 4
  %14 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  store %struct.side_info_link* %14, %struct.side_info_link** @side_queue_free, align 4
  %15 = load %struct.side_info_link*, %struct.side_info_link** %1, align 4
  %16 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %17 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %16, i32 0, i32 0
  store %struct.side_info_link* %15, %struct.side_info_link** %17, align 4
  %18 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %19 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %18, i32 0, i32 1
  ret %struct.MYSideInfo* %19
}

declare arm_aapcscc i8* @calloc(i32, i32) #3

declare arm_aapcscc i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: noreturn
declare arm_aapcscc void @exit(i32) #4

; Function Attrs: nounwind
define arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %2 = alloca i32, align 4
  %3 = alloca %struct.BF_PartHolder*, align 4
  store i32 %0, i32* %2, align 4
  %4 = call arm_aapcscc i8* @calloc(i32 1, i32 8)
  %5 = bitcast i8* %4 to %struct.BF_PartHolder*
  store %struct.BF_PartHolder* %5, %struct.BF_PartHolder** %3, align 4
  %6 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %7 = icmp ne %struct.BF_PartHolder* %6, null
  br i1 %7, label %9, label %8

; <label>:8:                                      ; preds = %1
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 443, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__func__.BF_newPartHolder, i32 0, i32 0))
  br label %9

; <label>:9:                                      ; preds = %8, %1
  %10 = phi i1 [ true, %1 ], [ false, %8 ]
  %11 = zext i1 %10 to i32
  %12 = load i32, i32* %2, align 4
  %13 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %14 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %13, i32 0, i32 0
  store i32 %12, i32* %14, align 4
  %15 = call arm_aapcscc i8* @calloc(i32 1, i32 8)
  %16 = bitcast i8* %15 to %struct.BF_BitstreamPart*
  %17 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %18 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %17, i32 0, i32 1
  store %struct.BF_BitstreamPart* %16, %struct.BF_BitstreamPart** %18, align 4
  %19 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %20 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %19, i32 0, i32 1
  %21 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %20, align 4
  %22 = icmp ne %struct.BF_BitstreamPart* %21, null
  br i1 %22, label %24, label %23

; <label>:23:                                     ; preds = %9
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 446, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__func__.BF_newPartHolder, i32 0, i32 0))
  br label %24

; <label>:24:                                     ; preds = %23, %9
  %25 = phi i1 [ true, %9 ], [ false, %23 ]
  %26 = zext i1 %25 to i32
  %27 = load i32, i32* %2, align 4
  %28 = call arm_aapcscc i8* @calloc(i32 %27, i32 8)
  %29 = bitcast i8* %28 to %struct.BF_BitstreamElement*
  %30 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %31 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %30, i32 0, i32 1
  %32 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %31, align 4
  %33 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %32, i32 0, i32 1
  store %struct.BF_BitstreamElement* %29, %struct.BF_BitstreamElement** %33, align 4
  %34 = load i32, i32* %2, align 4
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %47

; <label>:36:                                     ; preds = %24
  %37 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %38 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %37, i32 0, i32 1
  %39 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %38, align 4
  %40 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %39, i32 0, i32 1
  %41 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %40, align 4
  %42 = icmp ne %struct.BF_BitstreamElement* %41, null
  br i1 %42, label %44, label %43

; <label>:43:                                     ; preds = %36
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 448, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__func__.BF_newPartHolder, i32 0, i32 0))
  br label %44

; <label>:44:                                     ; preds = %43, %36
  %45 = phi i1 [ true, %36 ], [ false, %43 ]
  %46 = zext i1 %45 to i32
  br label %47

; <label>:47:                                     ; preds = %44, %24
  %48 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %49 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %48, i32 0, i32 1
  %50 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %49, align 4
  %51 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %50, i32 0, i32 0
  store i32 0, i32* %51, align 4
  %52 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  ret %struct.BF_PartHolder* %52
}

; Function Attrs: nounwind
define arm_aapcscc %struct.BF_PartHolder* @BF_LoadHolderFromBitstreamPart(%struct.BF_PartHolder*, %struct.BF_BitstreamPart*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %3 = alloca %struct.BF_PartHolder*, align 4
  %4 = alloca %struct.BF_BitstreamPart*, align 4
  %5 = alloca %struct.BF_BitstreamElement*, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  store %struct.BF_PartHolder* %0, %struct.BF_PartHolder** %3, align 4
  store %struct.BF_BitstreamPart* %1, %struct.BF_BitstreamPart** %4, align 4
  %7 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %8 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %7, i32 0, i32 1
  %9 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %8, align 4
  %10 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %9, i32 0, i32 0
  store i32 0, i32* %10, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec1
  store i32 0, i32* %6, align 4
  br label %11

; <label>:11:                                     ; preds = %35, %2
  %12 = load i32, i32* %6, align 4
  %13 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %4, align 4
  %14 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %13, i32 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp ult i32 %12, %15
  br i1 %16, label %17, label %36

; <label>:17:                                     ; preds = %11
  %18 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %4, align 4
  %19 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %18, i32 0, i32 1
  %20 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %19, align 4
  %21 = load i32, i32* %6, align 4
  %22 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %20, i32 %21
  store %struct.BF_BitstreamElement* %22, %struct.BF_BitstreamElement** %5, align 4
  %23 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %24 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %25 = call arm_aapcscc %struct.BF_PartHolder* @BF_addElement(%struct.BF_PartHolder* %23, %struct.BF_BitstreamElement* %24)
  store %struct.BF_PartHolder* %25, %struct.BF_PartHolder** %3, align 4
  br label %26

; <label>:26:                                     ; preds = %17
  %27 = load i32, i32* %6, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %27, i32 0
  %insertElmt2 = insertelement <4 x i32> %insertElmt, i32 %27, i32 1
  %insertElmt3 = insertelement <4 x i32> %insertElmt2, i32 %27, i32 2
  %insertElmt4 = insertelement <4 x i32> %insertElmt3, i32 %27, i32 3
  store <4 x i32> %insertElmt4, <4 x i32>* %allocaVec1, align 16
  %28 = load <4 x i32>, <4 x i32>* %allocaVec1, align 16
  %Vop = add <4 x i32> %28, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec1
  %29 = load <4 x i32>, <4 x i32>* %allocaVec1, align 4
  %extractE = extractelement <4 x i32> %29, i64 0
  %extractE5 = extractelement <4 x i32> %29, i64 1
  %extractE6 = extractelement <4 x i32> %29, i64 2
  %sum = add i32 %extractE, %extractE5
  %sum7 = add i32 %sum, %extractE6
  %30 = add i32 %27, 1
  %Fmul = mul i32 %30, 3
  store i32 %30, i32* %Recovery
  %Fcmp = icmp ne i32 %sum7, %Fmul
  br i1 %Fcmp, label %31, label %35

; <label>:31:                                     ; preds = %26
  %remThree = sdiv i32 %sum7, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %32, label %33

; <label>:32:                                     ; preds = %31
  store i32 %30, i32* %Recovery, align 4
  br label %34

; <label>:33:                                     ; preds = %31
  store i32 %extractE, i32* %Recovery, align 4
  br label %34

; <label>:34:                                     ; preds = %33, %32
  br label %35

; <label>:35:                                     ; preds = %26, %34
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %6, align 4
  br label %11

; <label>:36:                                     ; preds = %11
  %37 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  ret %struct.BF_PartHolder* %37
}

; Function Attrs: nounwind
define arm_aapcscc i32 @BF_PartLength(%struct.BF_BitstreamPart*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %2 = alloca %struct.BF_BitstreamPart*, align 4
  %3 = alloca %struct.BF_BitstreamElement*, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  store %struct.BF_BitstreamPart* %0, %struct.BF_BitstreamPart** %2, align 4
  %6 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2, align 4
  %7 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %6, i32 0, i32 1
  %8 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %7, align 4
  store %struct.BF_BitstreamElement* %8, %struct.BF_BitstreamElement** %3, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec5
  store i32 0, i32* %5, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec4
  store i32 0, i32* %4, align 4
  br label %9

; <label>:9:                                      ; preds = %40, %1
  %10 = load i32, i32* %4, align 4
  %11 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2, align 4
  %12 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %11, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %10, %13
  br i1 %14, label %15, label %43

; <label>:15:                                     ; preds = %9
  %16 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %3, align 4
  %17 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %16, i32 0, i32 1
  %18 = load i16, i16* %17, align 4
  %19 = zext i16 %18 to i32
  %20 = load i32, i32* %5, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %20, i32 0
  %insertElmt6 = insertelement <4 x i32> %insertElmt, i32 %20, i32 1
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %20, i32 2
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %20, i32 3
  store <4 x i32> %insertElmt8, <4 x i32>* %allocaVec5, align 16
  %21 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  store i32 %19, i32* %CastInst
  %22 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %22, i32 0
  %insertCast9 = insertelement <4 x i32> %insertCast, i32 %22, i32 1
  %insertCast10 = insertelement <4 x i32> %insertCast9, i32 %22, i32 2
  %insertCast11 = insertelement <4 x i32> %insertCast10, i32 %22, i32 3
  store <4 x i32> %insertCast11, <4 x i32>* %CastInstVec, align 4
  %23 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop = add <4 x i32> %21, %23
  store <4 x i32> %Vop, <4 x i32>* %allocaVec5
  %24 = load <4 x i32>, <4 x i32>* %allocaVec5, align 4
  %extractE = extractelement <4 x i32> %24, i64 0
  %extractE12 = extractelement <4 x i32> %24, i64 1
  %extractE13 = extractelement <4 x i32> %24, i64 2
  %sum = add i32 %extractE, %extractE12
  %sum14 = add i32 %sum, %extractE13
  %25 = add nsw i32 %20, %19
  %Fmul = mul i32 %25, 3
  store i32 %25, i32* %Recovery
  %Fcmp = icmp ne i32 %sum14, %Fmul
  br i1 %Fcmp, label %26, label %30

; <label>:26:                                     ; preds = %15
  %remThree = sdiv i32 %sum14, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %27, label %28

; <label>:27:                                     ; preds = %26
  store i32 %25, i32* %Recovery, align 4
  br label %29

; <label>:28:                                     ; preds = %26
  store i32 %extractE, i32* %Recovery, align 4
  br label %29

; <label>:29:                                     ; preds = %28, %27
  br label %30

; <label>:30:                                     ; preds = %15, %29
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %5, align 4
  br label %31

; <label>:31:                                     ; preds = %30
  %32 = load i32, i32* %4, align 4
  %insertElmt15 = insertelement <4 x i32> undef, i32 %32, i32 0
  %insertElmt16 = insertelement <4 x i32> %insertElmt15, i32 %32, i32 1
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %32, i32 2
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %32, i32 3
  store <4 x i32> %insertElmt18, <4 x i32>* %allocaVec4, align 16
  %33 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop19 = add <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop19, <4 x i32>* %allocaVec4
  %34 = load <4 x i32>, <4 x i32>* %allocaVec4, align 4
  %extractE21 = extractelement <4 x i32> %34, i64 0
  %extractE22 = extractelement <4 x i32> %34, i64 1
  %extractE23 = extractelement <4 x i32> %34, i64 2
  %sum24 = add i32 %extractE21, %extractE22
  %sum25 = add i32 %sum24, %extractE23
  %35 = add i32 %32, 1
  %Fmul20 = mul i32 %35, 3
  store i32 %35, i32* %Recovery1
  %Fcmp26 = icmp ne i32 %sum25, %Fmul20
  br i1 %Fcmp26, label %36, label %40

; <label>:36:                                     ; preds = %31
  %remThree27 = sdiv i32 %sum25, %extractE21
  %FcmpThree28 = icmp ne i32 %remThree27, 3
  br i1 %FcmpThree28, label %37, label %38

; <label>:37:                                     ; preds = %36
  store i32 %35, i32* %Recovery1, align 4
  br label %39

; <label>:38:                                     ; preds = %36
  store i32 %extractE21, i32* %Recovery1, align 4
  br label %39

; <label>:39:                                     ; preds = %38, %37
  br label %40

; <label>:40:                                     ; preds = %31, %39
  %ReplaceInst29 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst29, i32* %4, align 4
  %41 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %3, align 4
  %42 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %41, i32 1
  store %struct.BF_BitstreamElement* %42, %struct.BF_BitstreamElement** %3, align 4
  br label %9

; <label>:43:                                     ; preds = %9
  %44 = load i32, i32* %5, align 4
  ret i32 %44
}

; Function Attrs: nounwind
define arm_aapcscc %struct.BF_PartHolder* @BF_addElement(%struct.BF_PartHolder*, %struct.BF_BitstreamElement*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %3 = alloca %struct.BF_PartHolder*, align 4
  %4 = alloca %struct.BF_BitstreamElement*, align 4
  %5 = alloca %struct.BF_PartHolder*, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  store %struct.BF_PartHolder* %0, %struct.BF_PartHolder** %3, align 4
  store %struct.BF_BitstreamElement* %1, %struct.BF_BitstreamElement** %4, align 4
  %8 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  store %struct.BF_PartHolder* %8, %struct.BF_PartHolder** %5, align 4
  %9 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %10 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %9, i32 0, i32 1
  %11 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %10, align 4
  %12 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %11, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, 1
  store i32 %14, i32* %6, align 4
  store i32 8, i32* %7, align 4
  %15 = load i32, i32* %6, align 4
  %16 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %17 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %16, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %15, %18
  br i1 %19, label %20, label %28

; <label>:20:                                     ; preds = %2
  %21 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %22 = load i32, i32* %6, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %22, i32 0
  %insertElmt3 = insertelement <4 x i32> %insertElmt, i32 %22, i32 1
  %insertElmt4 = insertelement <4 x i32> %insertElmt3, i32 %22, i32 2
  %insertElmt5 = insertelement <4 x i32> %insertElmt4, i32 %22, i32 3
  store <4 x i32> %insertElmt5, <4 x i32>* %allocaVec1, align 16
  %23 = load i32, i32* %7, align 4
  %insertElmt6 = insertelement <4 x i32> undef, i32 %23, i32 0
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %23, i32 1
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %23, i32 2
  %insertElmt9 = insertelement <4 x i32> %insertElmt8, i32 %23, i32 3
  store <4 x i32> %insertElmt9, <4 x i32>* %allocaVec2, align 16
  %24 = load <4 x i32>, <4 x i32>* %allocaVec1, align 16
  %25 = load <4 x i32>, <4 x i32>* %allocaVec2, align 16
  %Vop = add <4 x i32> %24, %25
  %26 = add nsw i32 %22, %23
  %27 = call arm_aapcscc %struct.BF_PartHolder* @BF_resizePartHolder(%struct.BF_PartHolder* %21, i32 %26)
  store %struct.BF_PartHolder* %27, %struct.BF_PartHolder** %5, align 4
  br label %28

; <label>:28:                                     ; preds = %20, %2
  %29 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %5, align 4
  %30 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %29, i32 0, i32 1
  %31 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %30, align 4
  %32 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %31, i32 0, i32 1
  %33 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %32, align 4
  %34 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %5, align 4
  %35 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %34, i32 0, i32 1
  %36 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %35, align 4
  %37 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %36, i32 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = add i32 %38, 1
  store i32 %39, i32* %37, align 4
  %40 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %33, i32 %38
  %41 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %4, align 4
  %42 = bitcast %struct.BF_BitstreamElement* %40 to i8*
  %43 = bitcast %struct.BF_BitstreamElement* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %42, i8* %43, i32 8, i32 4, i1 false)
  %44 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %5, align 4
  ret %struct.BF_PartHolder* %44
}

; Function Attrs: nounwind
define arm_aapcscc %struct.BF_PartHolder* @BF_resizePartHolder(%struct.BF_PartHolder*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %3 = alloca %struct.BF_PartHolder*, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %7 = alloca %struct.BF_PartHolder*, align 4
  store %struct.BF_PartHolder* %0, %struct.BF_PartHolder** %3, align 4
  store i32 %1, i32* %4, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 %8)
  store %struct.BF_PartHolder* %9, %struct.BF_PartHolder** %7, align 4
  %10 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %11 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %10, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = load i32, i32* %4, align 4
  %14 = icmp sgt i32 %12, %13
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %2
  %16 = load i32, i32* %4, align 4
  br label %21

; <label>:17:                                     ; preds = %2
  %18 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %19 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %18, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  br label %21

; <label>:21:                                     ; preds = %17, %15
  %22 = phi i32 [ %16, %15 ], [ %20, %17 ]
  store i32 %22, i32* %5, align 4
  %23 = load i32, i32* %5, align 4
  %24 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %7, align 4
  %25 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %24, i32 0, i32 1
  %26 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %25, align 4
  %27 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %26, i32 0, i32 0
  store i32 %23, i32* %27, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec3
  store i32 0, i32* %6, align 4
  br label %28

; <label>:28:                                     ; preds = %58, %21
  %29 = load i32, i32* %6, align 4
  %30 = load i32, i32* %5, align 4
  %31 = icmp slt i32 %29, %30
  br i1 %31, label %32, label %59

; <label>:32:                                     ; preds = %28
  %33 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %7, align 4
  %34 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %33, i32 0, i32 1
  %35 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %34, align 4
  %36 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %35, i32 0, i32 1
  %37 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %36, align 4
  %38 = load i32, i32* %6, align 4
  %39 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %37, i32 %38
  %40 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %41 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %40, i32 0, i32 1
  %42 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %41, align 4
  %43 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %42, i32 0, i32 1
  %44 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %43, align 4
  %45 = load i32, i32* %6, align 4
  %46 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %44, i32 %45
  %47 = bitcast %struct.BF_BitstreamElement* %39 to i8*
  %48 = bitcast %struct.BF_BitstreamElement* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %47, i8* %48, i32 8, i32 4, i1 false)
  br label %49

; <label>:49:                                     ; preds = %32
  %50 = load i32, i32* %6, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %50, i32 0
  %insertElmt4 = insertelement <4 x i32> %insertElmt, i32 %50, i32 1
  %insertElmt5 = insertelement <4 x i32> %insertElmt4, i32 %50, i32 2
  %insertElmt6 = insertelement <4 x i32> %insertElmt5, i32 %50, i32 3
  store <4 x i32> %insertElmt6, <4 x i32>* %allocaVec3, align 16
  %51 = load <4 x i32>, <4 x i32>* %allocaVec3, align 16
  %Vop = add <4 x i32> %51, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec3
  %52 = load <4 x i32>, <4 x i32>* %allocaVec3, align 4
  %extractE = extractelement <4 x i32> %52, i64 0
  %extractE7 = extractelement <4 x i32> %52, i64 1
  %extractE8 = extractelement <4 x i32> %52, i64 2
  %sum = add i32 %extractE, %extractE7
  %sum9 = add i32 %sum, %extractE8
  %53 = add nsw i32 %50, 1
  %Fmul = mul i32 %53, 3
  store i32 %53, i32* %Recovery
  %Fcmp = icmp ne i32 %sum9, %Fmul
  br i1 %Fcmp, label %54, label %58

; <label>:54:                                     ; preds = %49
  %remThree = sdiv i32 %sum9, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %55, label %56

; <label>:55:                                     ; preds = %54
  store i32 %53, i32* %Recovery, align 4
  br label %57

; <label>:56:                                     ; preds = %54
  store i32 %extractE, i32* %Recovery, align 4
  br label %57

; <label>:57:                                     ; preds = %56, %55
  br label %58

; <label>:58:                                     ; preds = %49, %57
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %6, align 4
  br label %28

; <label>:59:                                     ; preds = %28
  %60 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %61 = call arm_aapcscc %struct.BF_PartHolder* @BF_freePartHolder(%struct.BF_PartHolder* %60)
  %62 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %7, align 4
  ret %struct.BF_PartHolder* %62
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #5

; Function Attrs: nounwind
define arm_aapcscc %struct.BF_PartHolder* @BF_freePartHolder(%struct.BF_PartHolder*) #0 {
  %2 = alloca %struct.BF_PartHolder*, align 4
  store %struct.BF_PartHolder* %0, %struct.BF_PartHolder** %2, align 4
  %3 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2, align 4
  %4 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %3, i32 0, i32 1
  %5 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %4, align 4
  %6 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %5, i32 0, i32 1
  %7 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %6, align 4
  %8 = bitcast %struct.BF_BitstreamElement* %7 to i8*
  call arm_aapcscc void @free(i8* %8)
  %9 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2, align 4
  %10 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %9, i32 0, i32 1
  %11 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %10, align 4
  %12 = bitcast %struct.BF_BitstreamPart* %11 to i8*
  call arm_aapcscc void @free(i8* %12)
  %13 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2, align 4
  %14 = bitcast %struct.BF_PartHolder* %13 to i8*
  call arm_aapcscc void @free(i8* %14)
  ret %struct.BF_PartHolder* null
}

declare arm_aapcscc void @free(i8*) #3

; Function Attrs: nounwind
define arm_aapcscc void @BF_FlushBitstream(%struct.BF_FrameData*, %struct.BF_FrameResults*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %3 = alloca %struct.BF_FrameData*, align 4
  %4 = alloca %struct.BF_FrameResults*, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  store %struct.BF_FrameData* %0, %struct.BF_FrameData** %3, align 4
  store %struct.BF_FrameResults* %1, %struct.BF_FrameResults** %4, align 4
  %7 = load i32, i32* @elements, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %33

; <label>:9:                                      ; preds = %2
  %10 = load i32, i32* @forwardFrameLength, align 4
  %11 = load i32, i32* @forwardSILength, align 4
  %12 = sub nsw i32 %10, %11
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  %14 = sdiv i32 %13, 32
  store i32 %14, i32* %6, align 4
  br label %15

; <label>:15:                                     ; preds = %26, %9
  %16 = load i32, i32* %6, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %16, i32 0
  %insertElmt3 = insertelement <4 x i32> %insertElmt, i32 %16, i32 1
  %insertElmt4 = insertelement <4 x i32> %insertElmt3, i32 %16, i32 2
  %insertElmt5 = insertelement <4 x i32> %insertElmt4, i32 %16, i32 3
  store <4 x i32> %insertElmt5, <4 x i32>* %allocaVec2, align 16
  %17 = load <4 x i32>, <4 x i32>* %allocaVec2, align 16
  %Vop = add <4 x i32> %17, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec2
  %18 = load <4 x i32>, <4 x i32>* %allocaVec2, align 4
  %extractE = extractelement <4 x i32> %18, i64 0
  %extractE6 = extractelement <4 x i32> %18, i64 1
  %extractE7 = extractelement <4 x i32> %18, i64 2
  %sum = add i32 %extractE, %extractE6
  %sum8 = add i32 %sum, %extractE7
  %19 = add nsw i32 %16, -1
  %Fmul = mul i32 %19, 3
  store i32 %19, i32* %Recovery
  %Fcmp = icmp ne i32 %sum8, %Fmul
  br i1 %Fcmp, label %20, label %24

; <label>:20:                                     ; preds = %15
  %remThree = sdiv i32 %sum8, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %21, label %22

; <label>:21:                                     ; preds = %20
  store i32 %19, i32* %Recovery, align 4
  br label %23

; <label>:22:                                     ; preds = %20
  store i32 %extractE, i32* %Recovery, align 4
  br label %23

; <label>:23:                                     ; preds = %22, %21
  br label %24

; <label>:24:                                     ; preds = %15, %23
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %6, align 4
  %25 = icmp ne i32 %16, 0
  br i1 %25, label %26, label %28

; <label>:26:                                     ; preds = %24
  %27 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  call arm_aapcscc void @WriteMainDataBits(i32 0, i32 32, %struct.BF_FrameResults* %27)
  br label %15

; <label>:28:                                     ; preds = %24
  %29 = load i32, i32* %5, align 4
  %insertElmt9 = insertelement <4 x i32> undef, i32 %29, i32 0
  %insertElmt10 = insertelement <4 x i32> %insertElmt9, i32 %29, i32 1
  %insertElmt11 = insertelement <4 x i32> %insertElmt10, i32 %29, i32 2
  %insertElmt12 = insertelement <4 x i32> %insertElmt11, i32 %29, i32 3
  store <4 x i32> %insertElmt12, <4 x i32>* %allocaVec1, align 16
  %30 = load <4 x i32>, <4 x i32>* %allocaVec1, align 16
  %Vop13 = srem <4 x i32> %30, <i32 32, i32 32, i32 32, i32 32>
  %31 = srem i32 %29, 32
  %32 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  call arm_aapcscc void @WriteMainDataBits(i32 0, i32 %31, %struct.BF_FrameResults* %32)
  br label %33

; <label>:33:                                     ; preds = %28, %2
  %34 = load i32, i32* @forwardFrameLength, align 4
  %35 = load i32, i32* @forwardSILength, align 4
  %36 = sub nsw i32 %34, %35
  %37 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %38 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %37, i32 0, i32 1
  store i32 %36, i32* %38, align 4
  %39 = load i32, i32* @forwardSILength, align 4
  %40 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %41 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %40, i32 0, i32 0
  store i32 %39, i32* %41, align 4
  %42 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %43 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %42, i32 0, i32 2
  store i32 0, i32* %43, align 4
  call arm_aapcscc void @free_side_queues()
  store i32 0, i32* @BitCount, align 4
  store i32 0, i32* @ThisFrameSize, align 4
  store i32 0, i32* @BitsRemaining, align 4
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @free_side_queues() #0 {
  %1 = alloca %struct.side_info_link*, align 4
  %2 = alloca %struct.side_info_link*, align 4
  %3 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_head, align 4
  store %struct.side_info_link* %3, %struct.side_info_link** %1, align 4
  br label %4

; <label>:4:                                      ; preds = %12, %0
  %5 = load %struct.side_info_link*, %struct.side_info_link** %1, align 4
  %6 = icmp ne %struct.side_info_link* %5, null
  br i1 %6, label %7, label %14

; <label>:7:                                      ; preds = %4
  %8 = load %struct.side_info_link*, %struct.side_info_link** %1, align 4
  %9 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %8, i32 0, i32 0
  %10 = load %struct.side_info_link*, %struct.side_info_link** %9, align 4
  store %struct.side_info_link* %10, %struct.side_info_link** %2, align 4
  %11 = load %struct.side_info_link*, %struct.side_info_link** %1, align 4
  call arm_aapcscc void @free_side_info_link(%struct.side_info_link* %11)
  br label %12

; <label>:12:                                     ; preds = %7
  %13 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  store %struct.side_info_link* %13, %struct.side_info_link** %1, align 4
  br label %4

; <label>:14:                                     ; preds = %4
  store %struct.side_info_link* null, %struct.side_info_link** @side_queue_head, align 4
  %15 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_free, align 4
  store %struct.side_info_link* %15, %struct.side_info_link** %1, align 4
  br label %16

; <label>:16:                                     ; preds = %24, %14
  %17 = load %struct.side_info_link*, %struct.side_info_link** %1, align 4
  %18 = icmp ne %struct.side_info_link* %17, null
  br i1 %18, label %19, label %26

; <label>:19:                                     ; preds = %16
  %20 = load %struct.side_info_link*, %struct.side_info_link** %1, align 4
  %21 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %20, i32 0, i32 0
  %22 = load %struct.side_info_link*, %struct.side_info_link** %21, align 4
  store %struct.side_info_link* %22, %struct.side_info_link** %2, align 4
  %23 = load %struct.side_info_link*, %struct.side_info_link** %1, align 4
  call arm_aapcscc void @free_side_info_link(%struct.side_info_link* %23)
  br label %24

; <label>:24:                                     ; preds = %19
  %25 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  store %struct.side_info_link* %25, %struct.side_info_link** %1, align 4
  br label %16

; <label>:26:                                     ; preds = %16
  store %struct.side_info_link* null, %struct.side_info_link** @side_queue_free, align 4
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @free_side_info_link(%struct.side_info_link*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %2 = alloca %struct.side_info_link*, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  store %struct.side_info_link* %0, %struct.side_info_link** %2, align 4
  %5 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %6 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %5, i32 0, i32 1
  %7 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %6, i32 0, i32 4
  %8 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %7, align 4
  %9 = call arm_aapcscc %struct.BF_PartHolder* @BF_freePartHolder(%struct.BF_PartHolder* %8)
  %10 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %11 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %11, i32 0, i32 4
  store %struct.BF_PartHolder* %9, %struct.BF_PartHolder** %12, align 4
  %13 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %14 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %14, i32 0, i32 5
  %16 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %15, align 4
  %17 = call arm_aapcscc %struct.BF_PartHolder* @BF_freePartHolder(%struct.BF_PartHolder* %16)
  %18 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %19 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %19, i32 0, i32 5
  store %struct.BF_PartHolder* %17, %struct.BF_PartHolder** %20, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec4
  store i32 0, i32* %4, align 4
  br label %21

; <label>:21:                                     ; preds = %41, %1
  %22 = load i32, i32* %4, align 4
  %23 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %24 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %24, i32 0, i32 3
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %22, %26
  br i1 %27, label %28, label %45

; <label>:28:                                     ; preds = %21
  %29 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %30 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %29, i32 0, i32 1
  %31 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %30, i32 0, i32 6
  %32 = load i32, i32* %4, align 4
  %33 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %31, i32 0, i32 %32
  %34 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %33, align 4
  %35 = call arm_aapcscc %struct.BF_PartHolder* @BF_freePartHolder(%struct.BF_PartHolder* %34)
  %36 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %37 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %36, i32 0, i32 1
  %38 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %37, i32 0, i32 6
  %39 = load i32, i32* %4, align 4
  %40 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %38, i32 0, i32 %39
  store %struct.BF_PartHolder* %35, %struct.BF_PartHolder** %40, align 4
  br label %41

; <label>:41:                                     ; preds = %28
  %42 = load i32, i32* %4, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %42, i32 0
  %insertElmt5 = insertelement <4 x i32> %insertElmt, i32 %42, i32 1
  %insertElmt6 = insertelement <4 x i32> %insertElmt5, i32 %42, i32 2
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %42, i32 3
  store <4 x i32> %insertElmt7, <4 x i32>* %allocaVec4, align 16
  %43 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop = add <4 x i32> %43, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec4
  %44 = add nsw i32 %42, 1
  store i32 %44, i32* %4, align 4
  br label %21

; <label>:45:                                     ; preds = %21
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec3
  store i32 0, i32* %3, align 4
  br label %46

; <label>:46:                                     ; preds = %98, %45
  %47 = load i32, i32* %3, align 4
  %48 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %49 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %48, i32 0, i32 1
  %50 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %49, i32 0, i32 2
  %51 = load i32, i32* %50, align 4
  %52 = icmp slt i32 %47, %51
  br i1 %52, label %53, label %99

; <label>:53:                                     ; preds = %46
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec4
  store i32 0, i32* %4, align 4
  br label %54

; <label>:54:                                     ; preds = %87, %53
  %55 = load i32, i32* %4, align 4
  %56 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %57 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %56, i32 0, i32 1
  %58 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %57, i32 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = icmp slt i32 %55, %59
  br i1 %60, label %61, label %88

; <label>:61:                                     ; preds = %54
  %62 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %63 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %62, i32 0, i32 1
  %64 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %63, i32 0, i32 7
  %65 = load i32, i32* %3, align 4
  %66 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* %64, i32 0, i32 %65
  %67 = load i32, i32* %4, align 4
  %68 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %66, i32 0, i32 %67
  %69 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %68, align 4
  %70 = call arm_aapcscc %struct.BF_PartHolder* @BF_freePartHolder(%struct.BF_PartHolder* %69)
  %71 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %72 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %71, i32 0, i32 1
  %73 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %72, i32 0, i32 7
  %74 = load i32, i32* %3, align 4
  %75 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* %73, i32 0, i32 %74
  %76 = load i32, i32* %4, align 4
  %77 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %75, i32 0, i32 %76
  store %struct.BF_PartHolder* %70, %struct.BF_PartHolder** %77, align 4
  br label %78

; <label>:78:                                     ; preds = %61
  %79 = load i32, i32* %4, align 4
  %80 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop8 = add <4 x i32> %80, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop8, <4 x i32>* %allocaVec4
  %81 = load <4 x i32>, <4 x i32>* %allocaVec4, align 4
  %extractE = extractelement <4 x i32> %81, i64 0
  %extractE9 = extractelement <4 x i32> %81, i64 1
  %extractE10 = extractelement <4 x i32> %81, i64 2
  %sum = add i32 %extractE, %extractE9
  %sum11 = add i32 %sum, %extractE10
  %82 = add nsw i32 %79, 1
  %Fmul = mul i32 %82, 3
  store i32 %82, i32* %Recovery
  %Fcmp = icmp ne i32 %sum11, %Fmul
  br i1 %Fcmp, label %83, label %87

; <label>:83:                                     ; preds = %78
  %remThree = sdiv i32 %sum11, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %84, label %85

; <label>:84:                                     ; preds = %83
  store i32 %82, i32* %Recovery, align 4
  br label %86

; <label>:85:                                     ; preds = %83
  store i32 %extractE, i32* %Recovery, align 4
  br label %86

; <label>:86:                                     ; preds = %85, %84
  br label %87

; <label>:87:                                     ; preds = %78, %86
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %4, align 4
  br label %54

; <label>:88:                                     ; preds = %54
  br label %89

; <label>:89:                                     ; preds = %88
  %90 = load i32, i32* %3, align 4
  %insertElmt12 = insertelement <4 x i32> undef, i32 %90, i32 0
  %insertElmt13 = insertelement <4 x i32> %insertElmt12, i32 %90, i32 1
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %90, i32 2
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %90, i32 3
  store <4 x i32> %insertElmt15, <4 x i32>* %allocaVec3, align 16
  %91 = load <4 x i32>, <4 x i32>* %allocaVec3, align 16
  %Vop16 = add <4 x i32> %91, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop16, <4 x i32>* %allocaVec3
  %92 = load <4 x i32>, <4 x i32>* %allocaVec3, align 4
  %extractE18 = extractelement <4 x i32> %92, i64 0
  %extractE19 = extractelement <4 x i32> %92, i64 1
  %extractE20 = extractelement <4 x i32> %92, i64 2
  %sum21 = add i32 %extractE18, %extractE19
  %sum22 = add i32 %sum21, %extractE20
  %93 = add nsw i32 %90, 1
  %Fmul17 = mul i32 %93, 3
  store i32 %93, i32* %Recovery1
  %Fcmp23 = icmp ne i32 %sum22, %Fmul17
  br i1 %Fcmp23, label %94, label %98

; <label>:94:                                     ; preds = %89
  %remThree24 = sdiv i32 %sum22, %extractE18
  %FcmpThree25 = icmp ne i32 %remThree24, 3
  br i1 %FcmpThree25, label %95, label %96

; <label>:95:                                     ; preds = %94
  store i32 %93, i32* %Recovery1, align 4
  br label %97

; <label>:96:                                     ; preds = %94
  store i32 %extractE18, i32* %Recovery1, align 4
  br label %97

; <label>:97:                                     ; preds = %96, %95
  br label %98

; <label>:98:                                     ; preds = %89, %97
  %ReplaceInst26 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst26, i32* %3, align 4
  br label %46

; <label>:99:                                     ; preds = %46
  %100 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %101 = bitcast %struct.side_info_link* %100 to i8*
  call arm_aapcscc void @free(i8* %101)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc %struct.BF_PartHolder* @BF_NewHolderFromBitstreamPart(%struct.BF_BitstreamPart*) #0 {
  %2 = alloca %struct.BF_BitstreamPart*, align 4
  %3 = alloca %struct.BF_PartHolder*, align 4
  store %struct.BF_BitstreamPart* %0, %struct.BF_BitstreamPart** %2, align 4
  %4 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2, align 4
  %5 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %4, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 %6)
  store %struct.BF_PartHolder* %7, %struct.BF_PartHolder** %3, align 4
  %8 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %9 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2, align 4
  %10 = call arm_aapcscc %struct.BF_PartHolder* @BF_LoadHolderFromBitstreamPart(%struct.BF_PartHolder* %8, %struct.BF_BitstreamPart* %9)
  ret %struct.BF_PartHolder* %10
}

; Function Attrs: nounwind
define arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder*, i32, i32) #0 {
  %4 = alloca %struct.BF_PartHolder*, align 4
  %5 = alloca %struct.BF_PartHolder*, align 4
  %allocaVec = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %8 = alloca %struct.BF_BitstreamElement, align 4
  store %struct.BF_PartHolder* %0, %struct.BF_PartHolder** %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  %9 = load i32, i32* %6, align 4
  %10 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %8, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = load i32, i32* %7, align 4
  %12 = trunc i32 %11 to i16
  %13 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %8, i32 0, i32 1
  store i16 %12, i16* %13, align 4
  %14 = load i32, i32* %7, align 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %19

; <label>:16:                                     ; preds = %3
  %17 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %5, align 4
  %18 = call arm_aapcscc %struct.BF_PartHolder* @BF_addElement(%struct.BF_PartHolder* %17, %struct.BF_BitstreamElement* %8)
  store %struct.BF_PartHolder* %18, %struct.BF_PartHolder** %4, align 4
  br label %21

; <label>:19:                                     ; preds = %3
  %20 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %5, align 4
  store %struct.BF_PartHolder* %20, %struct.BF_PartHolder** %4, align 4
  br label %21

; <label>:21:                                     ; preds = %19, %16
  %22 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %4, align 4
  ret %struct.BF_PartHolder* %22
}

; Function Attrs: nounwind
define arm_aapcscc void @id3_inittag(%struct.ID3TAGDATA*) #0 {
  %2 = alloca %struct.ID3TAGDATA*, align 4
  store %struct.ID3TAGDATA* %0, %struct.ID3TAGDATA** %2, align 4
  %3 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %4 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %3, i32 0, i32 2
  %5 = getelementptr inbounds [31 x i8], [31 x i8]* %4, i32 0, i32 0
  %6 = call arm_aapcscc i8* @strcpy(i8* %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.151, i32 0, i32 0))
  %7 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %8 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %7, i32 0, i32 3
  %9 = getelementptr inbounds [31 x i8], [31 x i8]* %8, i32 0, i32 0
  %10 = call arm_aapcscc i8* @strcpy(i8* %9, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.151, i32 0, i32 0))
  %11 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %12 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %11, i32 0, i32 4
  %13 = getelementptr inbounds [31 x i8], [31 x i8]* %12, i32 0, i32 0
  %14 = call arm_aapcscc i8* @strcpy(i8* %13, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.151, i32 0, i32 0))
  %15 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %16 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %15, i32 0, i32 5
  %17 = getelementptr inbounds [5 x i8], [5 x i8]* %16, i32 0, i32 0
  %18 = call arm_aapcscc i8* @strcpy(i8* %17, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.151, i32 0, i32 0))
  %19 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %20 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %19, i32 0, i32 6
  %21 = getelementptr inbounds [31 x i8], [31 x i8]* %20, i32 0, i32 0
  %22 = call arm_aapcscc i8* @strcpy(i8* %21, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.151, i32 0, i32 0))
  %23 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %24 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %23, i32 0, i32 8
  %25 = getelementptr inbounds [1 x i8], [1 x i8]* %24, i32 0, i32 0
  store i8 -1, i8* %25, align 1
  %26 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %27 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %26, i32 0, i32 9
  store i8 0, i8* %27, align 2
  %28 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %29 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %28, i32 0, i32 1
  store i32 0, i32* %29, align 4
  ret void
}

declare arm_aapcscc i8* @strcpy(i8*, i8*) #3

; Function Attrs: nounwind
define arm_aapcscc void @id3_buildtag(%struct.ID3TAGDATA*) #0 {
  %2 = alloca %struct.ID3TAGDATA*, align 4
  store %struct.ID3TAGDATA* %0, %struct.ID3TAGDATA** %2, align 4
  %3 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %4 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %3, i32 0, i32 7
  %5 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i32 0, i32 0
  %6 = call arm_aapcscc i8* @strcpy(i8* %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1.152, i32 0, i32 0))
  %7 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %8 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %7, i32 0, i32 2
  %9 = getelementptr inbounds [31 x i8], [31 x i8]* %8, i32 0, i32 0
  call arm_aapcscc void @id3_pad(i8* %9, i32 30)
  %10 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %11 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %10, i32 0, i32 7
  %12 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i32 0, i32 0
  %13 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %14 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %13, i32 0, i32 2
  %15 = getelementptr inbounds [31 x i8], [31 x i8]* %14, i32 0, i32 0
  %16 = call arm_aapcscc i8* @strncat(i8* %12, i8* %15, i32 30)
  %17 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %18 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %17, i32 0, i32 3
  %19 = getelementptr inbounds [31 x i8], [31 x i8]* %18, i32 0, i32 0
  call arm_aapcscc void @id3_pad(i8* %19, i32 30)
  %20 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %21 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %20, i32 0, i32 7
  %22 = getelementptr inbounds [128 x i8], [128 x i8]* %21, i32 0, i32 0
  %23 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %24 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %23, i32 0, i32 3
  %25 = getelementptr inbounds [31 x i8], [31 x i8]* %24, i32 0, i32 0
  %26 = call arm_aapcscc i8* @strncat(i8* %22, i8* %25, i32 30)
  %27 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %28 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %27, i32 0, i32 4
  %29 = getelementptr inbounds [31 x i8], [31 x i8]* %28, i32 0, i32 0
  call arm_aapcscc void @id3_pad(i8* %29, i32 30)
  %30 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %31 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %30, i32 0, i32 7
  %32 = getelementptr inbounds [128 x i8], [128 x i8]* %31, i32 0, i32 0
  %33 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %34 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %33, i32 0, i32 4
  %35 = getelementptr inbounds [31 x i8], [31 x i8]* %34, i32 0, i32 0
  %36 = call arm_aapcscc i8* @strncat(i8* %32, i8* %35, i32 30)
  %37 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %38 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %37, i32 0, i32 5
  %39 = getelementptr inbounds [5 x i8], [5 x i8]* %38, i32 0, i32 0
  call arm_aapcscc void @id3_pad(i8* %39, i32 4)
  %40 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %41 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %40, i32 0, i32 7
  %42 = getelementptr inbounds [128 x i8], [128 x i8]* %41, i32 0, i32 0
  %43 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %44 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %43, i32 0, i32 5
  %45 = getelementptr inbounds [5 x i8], [5 x i8]* %44, i32 0, i32 0
  %46 = call arm_aapcscc i8* @strncat(i8* %42, i8* %45, i32 4)
  %47 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %48 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %47, i32 0, i32 6
  %49 = getelementptr inbounds [31 x i8], [31 x i8]* %48, i32 0, i32 0
  call arm_aapcscc void @id3_pad(i8* %49, i32 30)
  %50 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %51 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %50, i32 0, i32 7
  %52 = getelementptr inbounds [128 x i8], [128 x i8]* %51, i32 0, i32 0
  %53 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %54 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %53, i32 0, i32 6
  %55 = getelementptr inbounds [31 x i8], [31 x i8]* %54, i32 0, i32 0
  %56 = call arm_aapcscc i8* @strncat(i8* %52, i8* %55, i32 30)
  %57 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %58 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %57, i32 0, i32 8
  %59 = getelementptr inbounds [1 x i8], [1 x i8]* %58, i32 0, i32 0
  call arm_aapcscc void @id3_pad(i8* %59, i32 1)
  %60 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %61 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %60, i32 0, i32 7
  %62 = getelementptr inbounds [128 x i8], [128 x i8]* %61, i32 0, i32 0
  %63 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %64 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %63, i32 0, i32 8
  %65 = getelementptr inbounds [1 x i8], [1 x i8]* %64, i32 0, i32 0
  %66 = call arm_aapcscc i8* @strncat(i8* %62, i8* %65, i32 1)
  %67 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %68 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %67, i32 0, i32 9
  %69 = load i8, i8* %68, align 2
  %70 = zext i8 %69 to i32
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %72, label %82

; <label>:72:                                     ; preds = %1
  %73 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %74 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %73, i32 0, i32 7
  %75 = getelementptr inbounds [128 x i8], [128 x i8]* %74, i32 0, i32 125
  store i8 0, i8* %75, align 1
  %76 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %77 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %76, i32 0, i32 9
  %78 = load i8, i8* %77, align 2
  %79 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %80 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %79, i32 0, i32 7
  %81 = getelementptr inbounds [128 x i8], [128 x i8]* %80, i32 0, i32 126
  store i8 %78, i8* %81, align 1
  br label %82

; <label>:82:                                     ; preds = %72, %1
  %83 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %84 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %83, i32 0, i32 1
  store i32 1, i32* %84, align 4
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @id3_pad(i8*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %3 = alloca i8*, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  store i8* %0, i8** %3, align 4
  store i32 %1, i32* %4, align 4
  %6 = load i8*, i8** %3, align 4
  %7 = call arm_aapcscc i32 @strlen(i8* %6)
  store i32 %7, i32* %5, align 4
  br label %8

; <label>:8:                                      ; preds = %24, %2
  %9 = load i32, i32* %5, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp slt i32 %9, %10
  br i1 %11, label %12, label %25

; <label>:12:                                     ; preds = %8
  %13 = load i8*, i8** %3, align 4
  %14 = load i32, i32* %5, align 4
  %15 = getelementptr inbounds i8, i8* %13, i32 %14
  store i8 32, i8* %15, align 1
  %16 = load i32, i32* %5, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %16, i32 0
  %insertElmt3 = insertelement <4 x i32> %insertElmt, i32 %16, i32 1
  %insertElmt4 = insertelement <4 x i32> %insertElmt3, i32 %16, i32 2
  %insertElmt5 = insertelement <4 x i32> %insertElmt4, i32 %16, i32 3
  store <4 x i32> %insertElmt5, <4 x i32>* %allocaVec2, align 16
  %17 = load <4 x i32>, <4 x i32>* %allocaVec2, align 16
  %Vop = add <4 x i32> %17, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec2
  %18 = load <4 x i32>, <4 x i32>* %allocaVec2, align 4
  %extractE = extractelement <4 x i32> %18, i64 0
  %extractE6 = extractelement <4 x i32> %18, i64 1
  %extractE7 = extractelement <4 x i32> %18, i64 2
  %sum = add i32 %extractE, %extractE6
  %sum8 = add i32 %sum, %extractE7
  %19 = add nsw i32 %16, 1
  %Fmul = mul i32 %19, 3
  store i32 %19, i32* %Recovery
  %Fcmp = icmp ne i32 %sum8, %Fmul
  br i1 %Fcmp, label %20, label %24

; <label>:20:                                     ; preds = %12
  %remThree = sdiv i32 %sum8, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %21, label %22

; <label>:21:                                     ; preds = %20
  store i32 %19, i32* %Recovery, align 4
  br label %23

; <label>:22:                                     ; preds = %20
  store i32 %extractE, i32* %Recovery, align 4
  br label %23

; <label>:23:                                     ; preds = %22, %21
  br label %24

; <label>:24:                                     ; preds = %12, %23
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %5, align 4
  br label %8

; <label>:25:                                     ; preds = %8
  %26 = load i8*, i8** %3, align 4
  %27 = load i32, i32* %5, align 4
  %28 = getelementptr inbounds i8, i8* %26, i32 %27
  store i8 0, i8* %28, align 1
  ret void
}

declare arm_aapcscc i8* @strncat(i8*, i8*, i32) #3

declare arm_aapcscc i32 @strlen(i8*) #3

; Function Attrs: nounwind
define arm_aapcscc i32 @id3_writetag(i8*, %struct.ID3TAGDATA*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 4
  %5 = alloca %struct.ID3TAGDATA*, align 4
  %6 = alloca %struct._IO_FILE*, align 4
  store i8* %0, i8** %4, align 4
  store %struct.ID3TAGDATA* %1, %struct.ID3TAGDATA** %5, align 4
  %7 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %5, align 4
  %8 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %7, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %12, label %11

; <label>:11:                                     ; preds = %2
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec
  store i32 -1, i32* %3, align 4
  br label %28

; <label>:12:                                     ; preds = %2
  %13 = load i8*, i8** %4, align 4
  %14 = call arm_aapcscc %struct._IO_FILE* @fopen(i8* %13, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.153, i32 0, i32 0))
  store %struct._IO_FILE* %14, %struct._IO_FILE** %6, align 4
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 4
  %16 = icmp ne %struct._IO_FILE* %15, null
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %12
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec
  store i32 -1, i32* %3, align 4
  br label %28

; <label>:18:                                     ; preds = %12
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 4
  %20 = call arm_aapcscc i32 @fseek(%struct._IO_FILE* %19, i32 0, i32 2)
  %21 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %5, align 4
  %22 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %21, i32 0, i32 7
  %23 = getelementptr inbounds [128 x i8], [128 x i8]* %22, i32 0, i32 0
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 4
  %25 = call arm_aapcscc i32 @fwrite(i8* %23, i32 1, i32 128, %struct._IO_FILE* %24)
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 4
  %27 = call arm_aapcscc i32 @fclose(%struct._IO_FILE* %26)
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec
  store i32 0, i32* %3, align 4
  br label %28

; <label>:28:                                     ; preds = %18, %17, %11
  %29 = load i32, i32* %3, align 4
  ret i32 %29
}

declare arm_aapcscc %struct._IO_FILE* @fopen(i8*, i8*) #3

declare arm_aapcscc i32 @fseek(%struct._IO_FILE*, i32, i32) #3

declare arm_aapcscc i32 @fwrite(i8*, i32, i32, %struct._IO_FILE*) #3

declare arm_aapcscc i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
define arm_aapcscc double @ConvertFromIeeeSingle(i8*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec10 = alloca <2 x double>, align 16
  %Recovery2 = alloca double, align 8
  %allocaVec11 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec12 = alloca <4 x i32>, align 16
  %CastInst3 = alloca i32, align 4
  %CastInstVec4 = alloca <4 x i32>, align 16
  %allocaVec13 = alloca <4 x i32>, align 16
  %CastInst5 = alloca i32, align 4
  %CastInstVec6 = alloca <4 x i32>, align 16
  %allocaVec14 = alloca <4 x i32>, align 16
  %CastInst7 = alloca i32, align 4
  %CastInstVec8 = alloca <4 x i32>, align 16
  %allocaVec15 = alloca <2 x double>, align 16
  %2 = alloca double, align 8
  %3 = alloca i8*, align 4
  %allocaVec16 = alloca <2 x double>, align 16
  %4 = alloca double, align 8
  %allocaVec17 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec18 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec19 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  store i8* %0, i8** %3, align 4
  %8 = load i8*, i8** %3, align 4
  %9 = getelementptr inbounds i8, i8* %8, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  store i32 %11, i32* %CastInst
  %12 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %12, i32 0
  %insertCast20 = insertelement <4 x i32> %insertCast, i32 %12, i32 1
  %insertCast21 = insertelement <4 x i32> %insertCast20, i32 %12, i32 2
  %insertCast22 = insertelement <4 x i32> %insertCast21, i32 %12, i32 3
  store <4 x i32> %insertCast22, <4 x i32>* %CastInstVec, align 4
  %13 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %14 = and i32 %11, 255
  %Vop23 = shl <4 x i32> %Vop, <i32 24, i32 24, i32 24, i32 24>
  %15 = shl i32 %14, 24
  %16 = load i8*, i8** %3, align 4
  %17 = getelementptr inbounds i8, i8* %16, i32 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  store i32 %19, i32* %CastInst3
  %20 = load i32, i32* %CastInst3, align 4
  %insertCast24 = insertelement <4 x i32> undef, i32 %20, i32 0
  %insertCast25 = insertelement <4 x i32> %insertCast24, i32 %20, i32 1
  %insertCast26 = insertelement <4 x i32> %insertCast25, i32 %20, i32 2
  %insertCast27 = insertelement <4 x i32> %insertCast26, i32 %20, i32 3
  store <4 x i32> %insertCast27, <4 x i32>* %CastInstVec4, align 4
  %21 = load <4 x i32>, <4 x i32>* %CastInstVec4, align 4
  %Vop28 = and <4 x i32> %21, <i32 255, i32 255, i32 255, i32 255>
  %22 = and i32 %19, 255
  %Vop29 = shl <4 x i32> %Vop28, <i32 16, i32 16, i32 16, i32 16>
  %23 = shl i32 %22, 16
  %Vop30 = or <4 x i32> %Vop23, %Vop29
  %24 = or i32 %15, %23
  %25 = load i8*, i8** %3, align 4
  %26 = getelementptr inbounds i8, i8* %25, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  store i32 %28, i32* %CastInst5
  %29 = load i32, i32* %CastInst5, align 4
  %insertCast31 = insertelement <4 x i32> undef, i32 %29, i32 0
  %insertCast32 = insertelement <4 x i32> %insertCast31, i32 %29, i32 1
  %insertCast33 = insertelement <4 x i32> %insertCast32, i32 %29, i32 2
  %insertCast34 = insertelement <4 x i32> %insertCast33, i32 %29, i32 3
  store <4 x i32> %insertCast34, <4 x i32>* %CastInstVec6, align 4
  %30 = load <4 x i32>, <4 x i32>* %CastInstVec6, align 4
  %Vop35 = and <4 x i32> %30, <i32 255, i32 255, i32 255, i32 255>
  %31 = and i32 %28, 255
  %Vop36 = shl <4 x i32> %Vop35, <i32 8, i32 8, i32 8, i32 8>
  %32 = shl i32 %31, 8
  %Vop37 = or <4 x i32> %Vop30, %Vop36
  %33 = or i32 %24, %32
  %34 = load i8*, i8** %3, align 4
  %35 = getelementptr inbounds i8, i8* %34, i32 3
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  store i32 %37, i32* %CastInst7
  %38 = load i32, i32* %CastInst7, align 4
  %insertCast38 = insertelement <4 x i32> undef, i32 %38, i32 0
  %insertCast39 = insertelement <4 x i32> %insertCast38, i32 %38, i32 1
  %insertCast40 = insertelement <4 x i32> %insertCast39, i32 %38, i32 2
  %insertCast41 = insertelement <4 x i32> %insertCast40, i32 %38, i32 3
  store <4 x i32> %insertCast41, <4 x i32>* %CastInstVec8, align 4
  %39 = load <4 x i32>, <4 x i32>* %CastInstVec8, align 4
  %Vop42 = and <4 x i32> %39, <i32 255, i32 255, i32 255, i32 255>
  %40 = and i32 %37, 255
  %Vop43 = or <4 x i32> %Vop37, %Vop42
  store <4 x i32> %Vop43, <4 x i32>* %allocaVec19
  %41 = or i32 %33, %40
  store i32 %41, i32* %7, align 4
  %42 = load i32, i32* %7, align 4
  %43 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop44 = and <4 x i32> %43, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %44 = and i32 %42, 2147483647
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %47

; <label>:46:                                     ; preds = %1
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec16
  store double 0.000000e+00, double* %4, align 8
  br label %96

; <label>:47:                                     ; preds = %1
  %48 = load i32, i32* %7, align 4
  %49 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop45 = and <4 x i32> %49, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %50 = and i32 %48, 2139095040
  %Vop46 = ashr <4 x i32> %Vop45, <i32 23, i32 23, i32 23, i32 23>
  store <4 x i32> %Vop46, <4 x i32>* %allocaVec18
  %51 = ashr i32 %50, 23
  store i32 %51, i32* %6, align 4
  %52 = load i32, i32* %6, align 4
  %53 = icmp eq i32 %52, 255
  br i1 %53, label %54, label %55

; <label>:54:                                     ; preds = %47
  store <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double>* %allocaVec16
  store double 0x7FF0000000000000, double* %4, align 8
  br label %95

; <label>:55:                                     ; preds = %47
  %56 = load i32, i32* %6, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %76

; <label>:58:                                     ; preds = %55
  %59 = load i32, i32* %7, align 4
  %60 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop47 = and <4 x i32> %60, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  store <4 x i32> %Vop47, <4 x i32>* %allocaVec17
  %61 = load <4 x i32>, <4 x i32>* %allocaVec17, align 4
  %extractE = extractelement <4 x i32> %61, i64 0
  %extractE48 = extractelement <4 x i32> %61, i64 1
  %extractE49 = extractelement <4 x i32> %61, i64 2
  %sum = add i32 %extractE, %extractE48
  %sum50 = add i32 %sum, %extractE49
  %62 = and i32 %59, 8388607
  %Fmul = mul i32 %62, 3
  store i32 %62, i32* %Recovery
  %Fcmp = icmp ne i32 %sum50, %Fmul
  br i1 %Fcmp, label %63, label %67

; <label>:63:                                     ; preds = %58
  %remThree = sdiv i32 %sum50, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %64, label %65

; <label>:64:                                     ; preds = %63
  store i32 %62, i32* %Recovery, align 4
  br label %66

; <label>:65:                                     ; preds = %63
  store i32 %extractE, i32* %Recovery, align 4
  br label %66

; <label>:66:                                     ; preds = %65, %64
  br label %67

; <label>:67:                                     ; preds = %58, %66
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %5, align 4
  %68 = load i32, i32* %5, align 4
  %69 = sitofp i32 %68 to double
  %70 = load i32, i32* %6, align 4
  %71 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop51 = sub <4 x i32> %71, <i32 127, i32 127, i32 127, i32 127>
  %72 = sub nsw i32 %70, 127
  %Vop52 = sub <4 x i32> %Vop51, <i32 23, i32 23, i32 23, i32 23>
  %73 = sub nsw i32 %72, 23
  %Vop53 = add <4 x i32> %Vop52, <i32 1, i32 1, i32 1, i32 1>
  %74 = add nsw i32 %73, 1
  %75 = call arm_aapcscc double @ldexp(double %69, i32 %74) #7
  store double %75, double* %4, align 8
  br label %94

; <label>:76:                                     ; preds = %55
  %77 = load i32, i32* %7, align 4
  %78 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop54 = and <4 x i32> %78, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %79 = and i32 %77, 8388607
  %Vop55 = add <4 x i32> %Vop54, <i32 8388608, i32 8388608, i32 8388608, i32 8388608>
  store <4 x i32> %Vop55, <4 x i32>* %allocaVec17
  %80 = load <4 x i32>, <4 x i32>* %allocaVec17, align 4
  %extractE57 = extractelement <4 x i32> %80, i64 0
  %extractE58 = extractelement <4 x i32> %80, i64 1
  %extractE59 = extractelement <4 x i32> %80, i64 2
  %sum60 = add i32 %extractE57, %extractE58
  %sum61 = add i32 %sum60, %extractE59
  %81 = add nsw i32 %79, 8388608
  %Fmul56 = mul i32 %81, 3
  store i32 %81, i32* %Recovery1
  %Fcmp62 = icmp ne i32 %sum61, %Fmul56
  br i1 %Fcmp62, label %82, label %86

; <label>:82:                                     ; preds = %76
  %remThree74 = sdiv i32 %sum61, %extractE57
  %FcmpThree75 = icmp ne i32 %remThree74, 3
  br i1 %FcmpThree75, label %83, label %84

; <label>:83:                                     ; preds = %82
  store i32 %81, i32* %Recovery1, align 4
  br label %85

; <label>:84:                                     ; preds = %82
  store i32 %extractE57, i32* %Recovery1, align 4
  br label %85

; <label>:85:                                     ; preds = %84, %83
  br label %86

; <label>:86:                                     ; preds = %76, %85
  %ReplaceInst78 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst78, i32* %5, align 4
  %87 = load i32, i32* %5, align 4
  %88 = sitofp i32 %87 to double
  %89 = load i32, i32* %6, align 4
  %90 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop63 = sub <4 x i32> %90, <i32 127, i32 127, i32 127, i32 127>
  %91 = sub nsw i32 %89, 127
  %Vop64 = sub <4 x i32> %Vop63, <i32 23, i32 23, i32 23, i32 23>
  %92 = sub nsw i32 %91, 23
  %93 = call arm_aapcscc double @ldexp(double %88, i32 %92) #7
  store double %93, double* %4, align 8
  br label %94

; <label>:94:                                     ; preds = %86, %67
  br label %95

; <label>:95:                                     ; preds = %94, %54
  br label %96

; <label>:96:                                     ; preds = %95, %46
  %97 = load i32, i32* %7, align 4
  %98 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop65 = and <4 x i32> %98, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %99 = and i32 %97, -2147483648
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %101, label %111

; <label>:101:                                    ; preds = %96
  %102 = load double, double* %4, align 8
  %insertElmt = insertelement <2 x double> undef, double %102, i32 0
  %insertElmt66 = insertelement <2 x double> %insertElmt, double %102, i32 1
  store <2 x double> %insertElmt66, <2 x double>* %allocaVec16, align 16
  %103 = load <2 x double>, <2 x double>* %allocaVec16, align 16
  %Vop67 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %103
  store <2 x double> %Vop67, <2 x double>* %allocaVec15
  %104 = load <2 x double>, <2 x double>* %allocaVec15, align 4
  %extractE69 = extractelement <2 x double> %104, i64 0
  %extractE70 = extractelement <2 x double> %104, i64 1
  %sum71 = fadd double %extractE69, %extractE70
  %sum72 = fadd double %sum71, %extractE70
  %105 = fsub double -0.000000e+00, %102
  %Fmul68 = fmul double %105, 3.000000e+00
  store double %105, double* %Recovery2
  %Fcmp73 = fcmp une double %sum72, %Fmul68
  br i1 %Fcmp73, label %106, label %110

; <label>:106:                                    ; preds = %101
  %remThree76 = fdiv double %sum72, %extractE69
  %FcmpThree77 = fcmp une double %remThree76, 3.000000e+00
  br i1 %FcmpThree77, label %107, label %108

; <label>:107:                                    ; preds = %106
  store double %105, double* %Recovery2, align 8
  br label %109

; <label>:108:                                    ; preds = %106
  store double %extractE69, double* %Recovery2, align 8
  br label %109

; <label>:109:                                    ; preds = %108, %107
  br label %110

; <label>:110:                                    ; preds = %101, %109
  %ReplaceInst79 = load double, double* %Recovery2, align 8
  store double %ReplaceInst79, double* %2, align 8
  br label %113

; <label>:111:                                    ; preds = %96
  %112 = load double, double* %4, align 8
  store double %112, double* %2, align 8
  br label %113

; <label>:113:                                    ; preds = %111, %110
  %114 = load double, double* %2, align 8
  ret double %114
}

; Function Attrs: nounwind
declare arm_aapcscc double @ldexp(double, i32) #2

; Function Attrs: nounwind
define arm_aapcscc void @ConvertToIeeeSingle(double, i8*) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %Recovery = alloca double, align 8
  %allocaVec1 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec2 = alloca <2 x double>, align 16
  %3 = alloca double, align 8
  %4 = alloca i8*, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec5 = alloca <2 x double>, align 16
  %7 = alloca double, align 8
  %allocaVec6 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  store double %0, double* %3, align 8
  store i8* %1, i8** %4, align 4
  %11 = load double, double* %3, align 8
  %12 = fcmp olt double %11, 0.000000e+00
  br i1 %12, label %13, label %23

; <label>:13:                                     ; preds = %2
  store <4 x i32> <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>, <4 x i32>* %allocaVec3
  store i32 -2147483648, i32* %5, align 4
  %14 = load double, double* %3, align 8
  %insertElmt = insertelement <2 x double> undef, double %14, i32 0
  %insertElmt9 = insertelement <2 x double> %insertElmt, double %14, i32 1
  store <2 x double> %insertElmt9, <2 x double>* %allocaVec2, align 16
  %15 = load <2 x double>, <2 x double>* %allocaVec2, align 16
  %Vop = fmul <2 x double> %15, <double -1.000000e+00, double -1.000000e+00>
  store <2 x double> %Vop, <2 x double>* %allocaVec2
  %16 = load <2 x double>, <2 x double>* %allocaVec2, align 4
  %extractE = extractelement <2 x double> %16, i64 0
  %extractE10 = extractelement <2 x double> %16, i64 1
  %sum = fadd double %extractE, %extractE10
  %sum11 = fadd double %sum, %extractE10
  %17 = fmul double %14, -1.000000e+00
  %Fmul = fmul double %17, 3.000000e+00
  store double %17, double* %Recovery
  %Fcmp = fcmp une double %sum11, %Fmul
  br i1 %Fcmp, label %18, label %22

; <label>:18:                                     ; preds = %13
  %remThree = fdiv double %sum11, %extractE
  %FcmpThree = fcmp une double %remThree, 3.000000e+00
  br i1 %FcmpThree, label %19, label %20

; <label>:19:                                     ; preds = %18
  store double %17, double* %Recovery, align 8
  br label %21

; <label>:20:                                     ; preds = %18
  store double %extractE, double* %Recovery, align 8
  br label %21

; <label>:21:                                     ; preds = %20, %19
  br label %22

; <label>:22:                                     ; preds = %13, %21
  %ReplaceInst = load double, double* %Recovery, align 8
  store double %ReplaceInst, double* %3, align 8
  br label %24

; <label>:23:                                     ; preds = %2
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec3
  store i32 0, i32* %5, align 4
  br label %24

; <label>:24:                                     ; preds = %23, %22
  %25 = load double, double* %3, align 8
  %26 = fcmp oeq double %25, 0.000000e+00
  br i1 %26, label %27, label %28

; <label>:27:                                     ; preds = %24
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec4
  store i32 0, i32* %6, align 4
  br label %90

; <label>:28:                                     ; preds = %24
  %29 = load double, double* %3, align 8
  %30 = call arm_aapcscc double @frexp(double %29, i32* %8) #7
  store double %30, double* %7, align 8
  %31 = load i32, i32* %8, align 4
  %32 = icmp sgt i32 %31, 129
  br i1 %32, label %36, label %33

; <label>:33:                                     ; preds = %28
  %34 = load double, double* %7, align 8
  %35 = fcmp olt double %34, 1.000000e+00
  br i1 %35, label %40, label %36

; <label>:36:                                     ; preds = %33, %28
  %37 = load i32, i32* %5, align 4
  %insertElmt12 = insertelement <4 x i32> undef, i32 %37, i32 0
  %insertElmt13 = insertelement <4 x i32> %insertElmt12, i32 %37, i32 1
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %37, i32 2
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %37, i32 3
  store <4 x i32> %insertElmt15, <4 x i32>* %allocaVec3, align 16
  %38 = load <4 x i32>, <4 x i32>* %allocaVec3, align 16
  %Vop16 = or <4 x i32> %38, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  store <4 x i32> %Vop16, <4 x i32>* %allocaVec4
  %39 = or i32 %37, 2139095040
  store i32 %39, i32* %6, align 4
  br label %89

; <label>:40:                                     ; preds = %33
  %41 = load i32, i32* %8, align 4
  %42 = icmp slt i32 %41, -125
  br i1 %42, label %43, label %68

; <label>:43:                                     ; preds = %40
  %44 = load i32, i32* %8, align 4
  %insertElmt17 = insertelement <4 x i32> undef, i32 %44, i32 0
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %44, i32 1
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %44, i32 2
  %insertElmt20 = insertelement <4 x i32> %insertElmt19, i32 %44, i32 3
  store <4 x i32> %insertElmt20, <4 x i32>* %allocaVec6, align 16
  %45 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop21 = add <4 x i32> <i32 149, i32 149, i32 149, i32 149>, %45
  store <4 x i32> %Vop21, <4 x i32>* %allocaVec8
  %46 = add nsw i32 149, %44
  store i32 %46, i32* %10, align 4
  %47 = load i32, i32* %10, align 4
  %48 = icmp slt i32 %47, 0
  br i1 %48, label %49, label %51

; <label>:49:                                     ; preds = %43
  %50 = load i32, i32* %5, align 4
  store i32 %50, i32* %6, align 4
  br label %67

; <label>:51:                                     ; preds = %43
  %52 = load double, double* %7, align 8
  %insertElmt22 = insertelement <2 x double> undef, double %52, i32 0
  %insertElmt23 = insertelement <2 x double> %insertElmt22, double %52, i32 1
  store <2 x double> %insertElmt23, <2 x double>* %allocaVec5, align 16
  %53 = load i32, i32* %10, align 4
  %54 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %Vop24 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %54
  %55 = shl i32 1, %53
  %56 = sitofp i32 %55 to double
  %57 = load <2 x double>, <2 x double>* %allocaVec5, align 16
  store double %56, double* %CastInst
  %58 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %58, i32 0
  %insertCast25 = insertelement <2 x double> %insertCast, double %58, i32 1
  store <2 x double> %insertCast25, <2 x double>* %CastInstVec, align 4
  %59 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %Vop26 = fmul <2 x double> %57, %59
  %60 = fmul double %52, %56
  %61 = fptosi double %60 to i32
  store i32 %61, i32* %9, align 4
  %62 = load i32, i32* %5, align 4
  %insertElmt27 = insertelement <4 x i32> undef, i32 %62, i32 0
  %insertElmt28 = insertelement <4 x i32> %insertElmt27, i32 %62, i32 1
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %62, i32 2
  %insertElmt30 = insertelement <4 x i32> %insertElmt29, i32 %62, i32 3
  store <4 x i32> %insertElmt30, <4 x i32>* %allocaVec3, align 16
  %63 = load i32, i32* %9, align 4
  %insertElmt31 = insertelement <4 x i32> undef, i32 %63, i32 0
  %insertElmt32 = insertelement <4 x i32> %insertElmt31, i32 %63, i32 1
  %insertElmt33 = insertelement <4 x i32> %insertElmt32, i32 %63, i32 2
  %insertElmt34 = insertelement <4 x i32> %insertElmt33, i32 %63, i32 3
  store <4 x i32> %insertElmt34, <4 x i32>* %allocaVec7, align 16
  %64 = load <4 x i32>, <4 x i32>* %allocaVec3, align 16
  %65 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop35 = or <4 x i32> %64, %65
  store <4 x i32> %Vop35, <4 x i32>* %allocaVec4
  %66 = or i32 %62, %63
  store i32 %66, i32* %6, align 4
  br label %67

; <label>:67:                                     ; preds = %51, %49
  br label %88

; <label>:68:                                     ; preds = %40
  %69 = load double, double* %7, align 8
  %insertElmt36 = insertelement <2 x double> undef, double %69, i32 0
  %insertElmt37 = insertelement <2 x double> %insertElmt36, double %69, i32 1
  store <2 x double> %insertElmt37, <2 x double>* %allocaVec5, align 16
  %70 = load <2 x double>, <2 x double>* %allocaVec5, align 16
  %Vop38 = fmul <2 x double> %70, <double 0x4170000000000000, double 0x4170000000000000>
  %71 = fmul double %69, 0x4170000000000000
  %72 = call arm_aapcscc double @floor(double %71) #9
  %73 = fptosi double %72 to i32
  store i32 %73, i32* %9, align 4
  %74 = load i32, i32* %9, align 4
  %insertElmt39 = insertelement <4 x i32> undef, i32 %74, i32 0
  %insertElmt40 = insertelement <4 x i32> %insertElmt39, i32 %74, i32 1
  %insertElmt41 = insertelement <4 x i32> %insertElmt40, i32 %74, i32 2
  %insertElmt42 = insertelement <4 x i32> %insertElmt41, i32 %74, i32 3
  store <4 x i32> %insertElmt42, <4 x i32>* %allocaVec7, align 16
  %75 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop43 = sub <4 x i32> %75, <i32 8388608, i32 8388608, i32 8388608, i32 8388608>
  store <4 x i32> %Vop43, <4 x i32>* %allocaVec7
  %76 = sub nsw i32 %74, 8388608
  store i32 %76, i32* %9, align 4
  %77 = load i32, i32* %5, align 4
  %insertElmt44 = insertelement <4 x i32> undef, i32 %77, i32 0
  %insertElmt45 = insertelement <4 x i32> %insertElmt44, i32 %77, i32 1
  %insertElmt46 = insertelement <4 x i32> %insertElmt45, i32 %77, i32 2
  %insertElmt47 = insertelement <4 x i32> %insertElmt46, i32 %77, i32 3
  store <4 x i32> %insertElmt47, <4 x i32>* %allocaVec3, align 16
  %78 = load i32, i32* %8, align 4
  %insertElmt48 = insertelement <4 x i32> undef, i32 %78, i32 0
  %insertElmt49 = insertelement <4 x i32> %insertElmt48, i32 %78, i32 1
  %insertElmt50 = insertelement <4 x i32> %insertElmt49, i32 %78, i32 2
  %insertElmt51 = insertelement <4 x i32> %insertElmt50, i32 %78, i32 3
  store <4 x i32> %insertElmt51, <4 x i32>* %allocaVec6, align 16
  %79 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop52 = add <4 x i32> %79, <i32 127, i32 127, i32 127, i32 127>
  %80 = add nsw i32 %78, 127
  %Vop53 = sub <4 x i32> %Vop52, <i32 1, i32 1, i32 1, i32 1>
  %81 = sub nsw i32 %80, 1
  %Vop54 = shl <4 x i32> %Vop53, <i32 23, i32 23, i32 23, i32 23>
  %82 = shl i32 %81, 23
  %83 = load <4 x i32>, <4 x i32>* %allocaVec3, align 16
  %Vop55 = or <4 x i32> %83, %Vop54
  %84 = or i32 %77, %82
  %85 = load i32, i32* %9, align 4
  %86 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop56 = or <4 x i32> %Vop55, %86
  store <4 x i32> %Vop56, <4 x i32>* %allocaVec4
  %87 = or i32 %84, %85
  store i32 %87, i32* %6, align 4
  br label %88

; <label>:88:                                     ; preds = %68, %67
  br label %89

; <label>:89:                                     ; preds = %88, %36
  br label %90

; <label>:90:                                     ; preds = %89, %27
  %91 = load i32, i32* %6, align 4
  %92 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop57 = ashr <4 x i32> %92, <i32 24, i32 24, i32 24, i32 24>
  %93 = ashr i32 %91, 24
  %94 = trunc i32 %93 to i8
  %95 = load i8*, i8** %4, align 4
  %96 = getelementptr inbounds i8, i8* %95, i32 0
  store i8 %94, i8* %96, align 1
  %97 = load i32, i32* %6, align 4
  %98 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop58 = ashr <4 x i32> %98, <i32 16, i32 16, i32 16, i32 16>
  %99 = ashr i32 %97, 16
  %100 = trunc i32 %99 to i8
  %101 = load i8*, i8** %4, align 4
  %102 = getelementptr inbounds i8, i8* %101, i32 1
  store i8 %100, i8* %102, align 1
  %103 = load i32, i32* %6, align 4
  %104 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop59 = ashr <4 x i32> %104, <i32 8, i32 8, i32 8, i32 8>
  %105 = ashr i32 %103, 8
  %106 = trunc i32 %105 to i8
  %107 = load i8*, i8** %4, align 4
  %108 = getelementptr inbounds i8, i8* %107, i32 2
  store i8 %106, i8* %108, align 1
  %109 = load i32, i32* %6, align 4
  %110 = trunc i32 %109 to i8
  %111 = load i8*, i8** %4, align 4
  %112 = getelementptr inbounds i8, i8* %111, i32 3
  store i8 %110, i8* %112, align 1
  ret void
}

; Function Attrs: nounwind
declare arm_aapcscc double @frexp(double, i32*) #2

; Function Attrs: nounwind readnone
declare arm_aapcscc double @floor(double) #6

; Function Attrs: nounwind
define arm_aapcscc double @ConvertFromIeeeDouble(i8*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec23 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec24 = alloca <2 x double>, align 16
  %Recovery2 = alloca double, align 8
  %allocaVec25 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec26 = alloca <4 x i32>, align 16
  %CastInst3 = alloca i32, align 4
  %CastInstVec4 = alloca <4 x i32>, align 16
  %allocaVec27 = alloca <4 x i32>, align 16
  %CastInst5 = alloca i32, align 4
  %CastInstVec6 = alloca <4 x i32>, align 16
  %allocaVec28 = alloca <4 x i32>, align 16
  %CastInst7 = alloca i32, align 4
  %CastInstVec8 = alloca <4 x i32>, align 16
  %allocaVec29 = alloca <4 x i32>, align 16
  %CastInst9 = alloca i32, align 4
  %CastInstVec10 = alloca <4 x i32>, align 16
  %allocaVec30 = alloca <4 x i32>, align 16
  %CastInst11 = alloca i32, align 4
  %CastInstVec12 = alloca <4 x i32>, align 16
  %allocaVec31 = alloca <4 x i32>, align 16
  %CastInst13 = alloca i32, align 4
  %CastInstVec14 = alloca <4 x i32>, align 16
  %allocaVec32 = alloca <4 x i32>, align 16
  %CastInst15 = alloca i32, align 4
  %CastInstVec16 = alloca <4 x i32>, align 16
  %allocaVec33 = alloca <2 x double>, align 16
  %CastInst17 = alloca double, align 4
  %CastInstVec18 = alloca <2 x double>, align 16
  %allocaVec34 = alloca <2 x double>, align 16
  %CastInst19 = alloca double, align 4
  %CastInstVec20 = alloca <2 x double>, align 16
  %allocaVec35 = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %allocaVec36 = alloca <2 x double>, align 16
  %CallInst21 = alloca double, align 4
  %CallInstVec22 = alloca <2 x double>, align 16
  %allocaVec37 = alloca <2 x double>, align 16
  %2 = alloca double, align 8
  %3 = alloca i8*, align 4
  %allocaVec38 = alloca <2 x double>, align 16
  %4 = alloca double, align 8
  %allocaVec39 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec40 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec41 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec42 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  store i8* %0, i8** %3, align 4
  %9 = load i8*, i8** %3, align 4
  %10 = getelementptr inbounds i8, i8* %9, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  store i32 %12, i32* %CastInst
  %13 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %13, i32 0
  %insertCast43 = insertelement <4 x i32> %insertCast, i32 %13, i32 1
  %insertCast44 = insertelement <4 x i32> %insertCast43, i32 %13, i32 2
  %insertCast45 = insertelement <4 x i32> %insertCast44, i32 %13, i32 3
  store <4 x i32> %insertCast45, <4 x i32>* %CastInstVec, align 4
  %14 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop = and <4 x i32> %14, <i32 255, i32 255, i32 255, i32 255>
  %15 = and i32 %12, 255
  %Vop46 = shl <4 x i32> %Vop, <i32 24, i32 24, i32 24, i32 24>
  %16 = shl i32 %15, 24
  %17 = load i8*, i8** %3, align 4
  %18 = getelementptr inbounds i8, i8* %17, i32 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  store i32 %20, i32* %CastInst3
  %21 = load i32, i32* %CastInst3, align 4
  %insertCast47 = insertelement <4 x i32> undef, i32 %21, i32 0
  %insertCast48 = insertelement <4 x i32> %insertCast47, i32 %21, i32 1
  %insertCast49 = insertelement <4 x i32> %insertCast48, i32 %21, i32 2
  %insertCast50 = insertelement <4 x i32> %insertCast49, i32 %21, i32 3
  store <4 x i32> %insertCast50, <4 x i32>* %CastInstVec4, align 4
  %22 = load <4 x i32>, <4 x i32>* %CastInstVec4, align 4
  %Vop51 = and <4 x i32> %22, <i32 255, i32 255, i32 255, i32 255>
  %23 = and i32 %20, 255
  %Vop52 = shl <4 x i32> %Vop51, <i32 16, i32 16, i32 16, i32 16>
  %24 = shl i32 %23, 16
  %Vop53 = or <4 x i32> %Vop46, %Vop52
  %25 = or i32 %16, %24
  %26 = load i8*, i8** %3, align 4
  %27 = getelementptr inbounds i8, i8* %26, i32 2
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  store i32 %29, i32* %CastInst5
  %30 = load i32, i32* %CastInst5, align 4
  %insertCast54 = insertelement <4 x i32> undef, i32 %30, i32 0
  %insertCast55 = insertelement <4 x i32> %insertCast54, i32 %30, i32 1
  %insertCast56 = insertelement <4 x i32> %insertCast55, i32 %30, i32 2
  %insertCast57 = insertelement <4 x i32> %insertCast56, i32 %30, i32 3
  store <4 x i32> %insertCast57, <4 x i32>* %CastInstVec6, align 4
  %31 = load <4 x i32>, <4 x i32>* %CastInstVec6, align 4
  %Vop58 = and <4 x i32> %31, <i32 255, i32 255, i32 255, i32 255>
  %32 = and i32 %29, 255
  %Vop59 = shl <4 x i32> %Vop58, <i32 8, i32 8, i32 8, i32 8>
  %33 = shl i32 %32, 8
  %Vop60 = or <4 x i32> %Vop53, %Vop59
  %34 = or i32 %25, %33
  %35 = load i8*, i8** %3, align 4
  %36 = getelementptr inbounds i8, i8* %35, i32 3
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  store i32 %38, i32* %CastInst7
  %39 = load i32, i32* %CastInst7, align 4
  %insertCast61 = insertelement <4 x i32> undef, i32 %39, i32 0
  %insertCast62 = insertelement <4 x i32> %insertCast61, i32 %39, i32 1
  %insertCast63 = insertelement <4 x i32> %insertCast62, i32 %39, i32 2
  %insertCast64 = insertelement <4 x i32> %insertCast63, i32 %39, i32 3
  store <4 x i32> %insertCast64, <4 x i32>* %CastInstVec8, align 4
  %40 = load <4 x i32>, <4 x i32>* %CastInstVec8, align 4
  %Vop65 = and <4 x i32> %40, <i32 255, i32 255, i32 255, i32 255>
  %41 = and i32 %38, 255
  %Vop66 = or <4 x i32> %Vop60, %Vop65
  store <4 x i32> %Vop66, <4 x i32>* %allocaVec41
  %42 = or i32 %34, %41
  store i32 %42, i32* %7, align 4
  %43 = load i8*, i8** %3, align 4
  %44 = getelementptr inbounds i8, i8* %43, i32 4
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  store i32 %46, i32* %CastInst9
  %47 = load i32, i32* %CastInst9, align 4
  %insertCast67 = insertelement <4 x i32> undef, i32 %47, i32 0
  %insertCast68 = insertelement <4 x i32> %insertCast67, i32 %47, i32 1
  %insertCast69 = insertelement <4 x i32> %insertCast68, i32 %47, i32 2
  %insertCast70 = insertelement <4 x i32> %insertCast69, i32 %47, i32 3
  store <4 x i32> %insertCast70, <4 x i32>* %CastInstVec10, align 4
  %48 = load <4 x i32>, <4 x i32>* %CastInstVec10, align 4
  %Vop71 = and <4 x i32> %48, <i32 255, i32 255, i32 255, i32 255>
  %49 = and i32 %46, 255
  %Vop72 = shl <4 x i32> %Vop71, <i32 24, i32 24, i32 24, i32 24>
  %50 = shl i32 %49, 24
  %51 = load i8*, i8** %3, align 4
  %52 = getelementptr inbounds i8, i8* %51, i32 5
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  store i32 %54, i32* %CastInst11
  %55 = load i32, i32* %CastInst11, align 4
  %insertCast73 = insertelement <4 x i32> undef, i32 %55, i32 0
  %insertCast74 = insertelement <4 x i32> %insertCast73, i32 %55, i32 1
  %insertCast75 = insertelement <4 x i32> %insertCast74, i32 %55, i32 2
  %insertCast76 = insertelement <4 x i32> %insertCast75, i32 %55, i32 3
  store <4 x i32> %insertCast76, <4 x i32>* %CastInstVec12, align 4
  %56 = load <4 x i32>, <4 x i32>* %CastInstVec12, align 4
  %Vop77 = and <4 x i32> %56, <i32 255, i32 255, i32 255, i32 255>
  %57 = and i32 %54, 255
  %Vop78 = shl <4 x i32> %Vop77, <i32 16, i32 16, i32 16, i32 16>
  %58 = shl i32 %57, 16
  %Vop79 = or <4 x i32> %Vop72, %Vop78
  %59 = or i32 %50, %58
  %60 = load i8*, i8** %3, align 4
  %61 = getelementptr inbounds i8, i8* %60, i32 6
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  store i32 %63, i32* %CastInst13
  %64 = load i32, i32* %CastInst13, align 4
  %insertCast80 = insertelement <4 x i32> undef, i32 %64, i32 0
  %insertCast81 = insertelement <4 x i32> %insertCast80, i32 %64, i32 1
  %insertCast82 = insertelement <4 x i32> %insertCast81, i32 %64, i32 2
  %insertCast83 = insertelement <4 x i32> %insertCast82, i32 %64, i32 3
  store <4 x i32> %insertCast83, <4 x i32>* %CastInstVec14, align 4
  %65 = load <4 x i32>, <4 x i32>* %CastInstVec14, align 4
  %Vop84 = and <4 x i32> %65, <i32 255, i32 255, i32 255, i32 255>
  %66 = and i32 %63, 255
  %Vop85 = shl <4 x i32> %Vop84, <i32 8, i32 8, i32 8, i32 8>
  %67 = shl i32 %66, 8
  %Vop86 = or <4 x i32> %Vop79, %Vop85
  %68 = or i32 %59, %67
  %69 = load i8*, i8** %3, align 4
  %70 = getelementptr inbounds i8, i8* %69, i32 7
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  store i32 %72, i32* %CastInst15
  %73 = load i32, i32* %CastInst15, align 4
  %insertCast87 = insertelement <4 x i32> undef, i32 %73, i32 0
  %insertCast88 = insertelement <4 x i32> %insertCast87, i32 %73, i32 1
  %insertCast89 = insertelement <4 x i32> %insertCast88, i32 %73, i32 2
  %insertCast90 = insertelement <4 x i32> %insertCast89, i32 %73, i32 3
  store <4 x i32> %insertCast90, <4 x i32>* %CastInstVec16, align 4
  %74 = load <4 x i32>, <4 x i32>* %CastInstVec16, align 4
  %Vop91 = and <4 x i32> %74, <i32 255, i32 255, i32 255, i32 255>
  %75 = and i32 %72, 255
  %Vop92 = or <4 x i32> %Vop86, %Vop91
  store <4 x i32> %Vop92, <4 x i32>* %allocaVec42
  %76 = or i32 %68, %75
  store i32 %76, i32* %8, align 4
  %77 = load i32, i32* %7, align 4
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %83

; <label>:79:                                     ; preds = %1
  %80 = load i32, i32* %8, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %83

; <label>:82:                                     ; preds = %79
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec38
  store double 0.000000e+00, double* %4, align 8
  br label %171

; <label>:83:                                     ; preds = %79, %1
  %84 = load i32, i32* %7, align 4
  %85 = load <4 x i32>, <4 x i32>* %allocaVec41, align 16
  %Vop93 = and <4 x i32> %85, <i32 2146435072, i32 2146435072, i32 2146435072, i32 2146435072>
  %86 = and i32 %84, 2146435072
  %Vop94 = lshr <4 x i32> %Vop93, <i32 20, i32 20, i32 20, i32 20>
  store <4 x i32> %Vop94, <4 x i32>* %allocaVec40
  %87 = lshr i32 %86, 20
  store i32 %87, i32* %6, align 4
  %88 = load i32, i32* %6, align 4
  %89 = icmp eq i32 %88, 2047
  br i1 %89, label %90, label %91

; <label>:90:                                     ; preds = %83
  store <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double>* %allocaVec38
  store double 0x7FF0000000000000, double* %4, align 8
  br label %170

; <label>:91:                                     ; preds = %83
  %92 = load i32, i32* %6, align 4
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %132

; <label>:94:                                     ; preds = %91
  %95 = load i32, i32* %7, align 4
  %96 = load <4 x i32>, <4 x i32>* %allocaVec41, align 16
  %Vop95 = and <4 x i32> %96, <i32 1048575, i32 1048575, i32 1048575, i32 1048575>
  store <4 x i32> %Vop95, <4 x i32>* %allocaVec39
  %97 = load <4 x i32>, <4 x i32>* %allocaVec39, align 4
  %extractE = extractelement <4 x i32> %97, i64 0
  %extractE96 = extractelement <4 x i32> %97, i64 1
  %extractE97 = extractelement <4 x i32> %97, i64 2
  %sum = add i32 %extractE, %extractE96
  %sum98 = add i32 %sum, %extractE97
  %98 = and i32 %95, 1048575
  %Fmul = mul i32 %98, 3
  store i32 %98, i32* %Recovery
  %Fcmp = icmp ne i32 %sum98, %Fmul
  br i1 %Fcmp, label %99, label %103

; <label>:99:                                     ; preds = %94
  %remThree = sdiv i32 %sum98, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %100, label %101

; <label>:100:                                    ; preds = %99
  store i32 %98, i32* %Recovery, align 4
  br label %102

; <label>:101:                                    ; preds = %99
  store i32 %extractE, i32* %Recovery, align 4
  br label %102

; <label>:102:                                    ; preds = %101, %100
  br label %103

; <label>:103:                                    ; preds = %94, %102
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %5, align 4
  %104 = load i32, i32* %5, align 4
  %105 = sitofp i32 %104 to double
  %106 = load i32, i32* %6, align 4
  %107 = load <4 x i32>, <4 x i32>* %allocaVec40, align 16
  %Vop99 = sub <4 x i32> %107, <i32 1023, i32 1023, i32 1023, i32 1023>
  %108 = sub nsw i32 %106, 1023
  %Vop100 = sub <4 x i32> %Vop99, <i32 20, i32 20, i32 20, i32 20>
  %109 = sub nsw i32 %108, 20
  %Vop101 = add <4 x i32> %Vop100, <i32 1, i32 1, i32 1, i32 1>
  %110 = add nsw i32 %109, 1
  %111 = call arm_aapcscc double @ldexp(double %105, i32 %110) #7
  store double %111, double* %4, align 8
  %112 = load i32, i32* %8, align 4
  %113 = load <4 x i32>, <4 x i32>* %allocaVec42, align 16
  %Vop102 = sub <4 x i32> %113, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %114 = sub i32 %112, 2147483647
  %Vop103 = sub <4 x i32> %Vop102, <i32 1, i32 1, i32 1, i32 1>
  %115 = sub i32 %114, 1
  %116 = sitofp i32 %115 to double
  store double %116, double* %CastInst17
  %117 = load double, double* %CastInst17, align 4
  %insertCast104 = insertelement <2 x double> undef, double %117, i32 0
  %insertCast105 = insertelement <2 x double> %insertCast104, double %117, i32 1
  store <2 x double> %insertCast105, <2 x double>* %CastInstVec18, align 4
  %118 = load <2 x double>, <2 x double>* %CastInstVec18, align 4
  %Vop106 = fadd <2 x double> %118, <double 0x41E0000000000000, double 0x41E0000000000000>
  %119 = fadd double %116, 0x41E0000000000000
  %120 = load i32, i32* %6, align 4
  %121 = load <4 x i32>, <4 x i32>* %allocaVec40, align 16
  %Vop107 = sub <4 x i32> %121, <i32 1023, i32 1023, i32 1023, i32 1023>
  %122 = sub nsw i32 %120, 1023
  %Vop108 = sub <4 x i32> %Vop107, <i32 20, i32 20, i32 20, i32 20>
  %123 = sub nsw i32 %122, 20
  %Vop109 = add <4 x i32> %Vop108, <i32 1, i32 1, i32 1, i32 1>
  %124 = add nsw i32 %123, 1
  %Vop110 = sub <4 x i32> %Vop109, <i32 32, i32 32, i32 32, i32 32>
  %125 = sub nsw i32 %124, 32
  %126 = call arm_aapcscc double @ldexp(double %119, i32 %125) #7
  %127 = load double, double* %4, align 8
  %insertElmt = insertelement <2 x double> undef, double %127, i32 0
  %insertElmt111 = insertelement <2 x double> %insertElmt, double %127, i32 1
  store <2 x double> %insertElmt111, <2 x double>* %allocaVec38, align 16
  %128 = load <2 x double>, <2 x double>* %allocaVec38, align 16
  store double %126, double* %CallInst
  %129 = load double, double* %CallInst, align 4
  %insertCall = insertelement <2 x double> undef, double %129, i32 0
  %insertCall112 = insertelement <2 x double> %insertCall, double %129, i32 1
  store <2 x double> %insertCall112, <2 x double>* %CallInstVec, align 4
  %130 = load <2 x double>, <2 x double>* %CallInstVec, align 4
  %Vop113 = fadd <2 x double> %128, %130
  store <2 x double> %Vop113, <2 x double>* %allocaVec38
  %131 = fadd double %127, %126
  store double %131, double* %4, align 8
  br label %169

; <label>:132:                                    ; preds = %91
  %133 = load i32, i32* %7, align 4
  %134 = load <4 x i32>, <4 x i32>* %allocaVec41, align 16
  %Vop114 = and <4 x i32> %134, <i32 1048575, i32 1048575, i32 1048575, i32 1048575>
  %135 = and i32 %133, 1048575
  %Vop115 = add <4 x i32> %Vop114, <i32 1048576, i32 1048576, i32 1048576, i32 1048576>
  store <4 x i32> %Vop115, <4 x i32>* %allocaVec39
  %136 = load <4 x i32>, <4 x i32>* %allocaVec39, align 4
  %extractE117 = extractelement <4 x i32> %136, i64 0
  %extractE118 = extractelement <4 x i32> %136, i64 1
  %extractE119 = extractelement <4 x i32> %136, i64 2
  %sum120 = add i32 %extractE117, %extractE118
  %sum121 = add i32 %sum120, %extractE119
  %137 = add i32 %135, 1048576
  %Fmul116 = mul i32 %137, 3
  store i32 %137, i32* %Recovery1
  %Fcmp122 = icmp ne i32 %sum121, %Fmul116
  br i1 %Fcmp122, label %138, label %142

; <label>:138:                                    ; preds = %132
  %remThree144 = sdiv i32 %sum121, %extractE117
  %FcmpThree145 = icmp ne i32 %remThree144, 3
  br i1 %FcmpThree145, label %139, label %140

; <label>:139:                                    ; preds = %138
  store i32 %137, i32* %Recovery1, align 4
  br label %141

; <label>:140:                                    ; preds = %138
  store i32 %extractE117, i32* %Recovery1, align 4
  br label %141

; <label>:141:                                    ; preds = %140, %139
  br label %142

; <label>:142:                                    ; preds = %132, %141
  %ReplaceInst148 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst148, i32* %5, align 4
  %143 = load i32, i32* %5, align 4
  %144 = sitofp i32 %143 to double
  %145 = load i32, i32* %6, align 4
  %146 = load <4 x i32>, <4 x i32>* %allocaVec40, align 16
  %Vop123 = sub <4 x i32> %146, <i32 1023, i32 1023, i32 1023, i32 1023>
  %147 = sub nsw i32 %145, 1023
  %Vop124 = sub <4 x i32> %Vop123, <i32 20, i32 20, i32 20, i32 20>
  %148 = sub nsw i32 %147, 20
  %149 = call arm_aapcscc double @ldexp(double %144, i32 %148) #7
  store double %149, double* %4, align 8
  %150 = load i32, i32* %8, align 4
  %151 = load <4 x i32>, <4 x i32>* %allocaVec42, align 16
  %Vop125 = sub <4 x i32> %151, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %152 = sub i32 %150, 2147483647
  %Vop126 = sub <4 x i32> %Vop125, <i32 1, i32 1, i32 1, i32 1>
  %153 = sub i32 %152, 1
  %154 = sitofp i32 %153 to double
  store double %154, double* %CastInst19
  %155 = load double, double* %CastInst19, align 4
  %insertCast127 = insertelement <2 x double> undef, double %155, i32 0
  %insertCast128 = insertelement <2 x double> %insertCast127, double %155, i32 1
  store <2 x double> %insertCast128, <2 x double>* %CastInstVec20, align 4
  %156 = load <2 x double>, <2 x double>* %CastInstVec20, align 4
  %Vop129 = fadd <2 x double> %156, <double 0x41E0000000000000, double 0x41E0000000000000>
  %157 = fadd double %154, 0x41E0000000000000
  %158 = load i32, i32* %6, align 4
  %159 = load <4 x i32>, <4 x i32>* %allocaVec40, align 16
  %Vop130 = sub <4 x i32> %159, <i32 1023, i32 1023, i32 1023, i32 1023>
  %160 = sub nsw i32 %158, 1023
  %Vop131 = sub <4 x i32> %Vop130, <i32 20, i32 20, i32 20, i32 20>
  %161 = sub nsw i32 %160, 20
  %Vop132 = sub <4 x i32> %Vop131, <i32 32, i32 32, i32 32, i32 32>
  %162 = sub nsw i32 %161, 32
  %163 = call arm_aapcscc double @ldexp(double %157, i32 %162) #7
  %164 = load double, double* %4, align 8
  %165 = load <2 x double>, <2 x double>* %allocaVec38, align 16
  store double %163, double* %CallInst21
  %166 = load double, double* %CallInst21, align 4
  %insertCall133 = insertelement <2 x double> undef, double %166, i32 0
  %insertCall134 = insertelement <2 x double> %insertCall133, double %166, i32 1
  store <2 x double> %insertCall134, <2 x double>* %CallInstVec22, align 4
  %167 = load <2 x double>, <2 x double>* %CallInstVec22, align 4
  %Vop135 = fadd <2 x double> %165, %167
  store <2 x double> %Vop135, <2 x double>* %allocaVec38
  %168 = fadd double %164, %163
  store double %168, double* %4, align 8
  br label %169

; <label>:169:                                    ; preds = %142, %103
  br label %170

; <label>:170:                                    ; preds = %169, %90
  br label %171

; <label>:171:                                    ; preds = %170, %82
  %172 = load i32, i32* %7, align 4
  %173 = load <4 x i32>, <4 x i32>* %allocaVec41, align 16
  %Vop136 = and <4 x i32> %173, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %174 = and i32 %172, -2147483648
  %175 = icmp ne i32 %174, 0
  br i1 %175, label %176, label %186

; <label>:176:                                    ; preds = %171
  %177 = load double, double* %4, align 8
  %178 = load <2 x double>, <2 x double>* %allocaVec38, align 16
  %Vop137 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %178
  store <2 x double> %Vop137, <2 x double>* %allocaVec37
  %179 = load <2 x double>, <2 x double>* %allocaVec37, align 4
  %extractE139 = extractelement <2 x double> %179, i64 0
  %extractE140 = extractelement <2 x double> %179, i64 1
  %sum141 = fadd double %extractE139, %extractE140
  %sum142 = fadd double %sum141, %extractE140
  %180 = fsub double -0.000000e+00, %177
  %Fmul138 = fmul double %180, 3.000000e+00
  store double %180, double* %Recovery2
  %Fcmp143 = fcmp une double %sum142, %Fmul138
  br i1 %Fcmp143, label %181, label %185

; <label>:181:                                    ; preds = %176
  %remThree146 = fdiv double %sum142, %extractE139
  %FcmpThree147 = fcmp une double %remThree146, 3.000000e+00
  br i1 %FcmpThree147, label %182, label %183

; <label>:182:                                    ; preds = %181
  store double %180, double* %Recovery2, align 8
  br label %184

; <label>:183:                                    ; preds = %181
  store double %extractE139, double* %Recovery2, align 8
  br label %184

; <label>:184:                                    ; preds = %183, %182
  br label %185

; <label>:185:                                    ; preds = %176, %184
  %ReplaceInst149 = load double, double* %Recovery2, align 8
  store double %ReplaceInst149, double* %2, align 8
  br label %188

; <label>:186:                                    ; preds = %171
  %187 = load double, double* %4, align 8
  store double %187, double* %2, align 8
  br label %188

; <label>:188:                                    ; preds = %186, %185
  %189 = load double, double* %2, align 8
  ret double %189
}

; Function Attrs: nounwind
define arm_aapcscc void @ConvertToIeeeDouble(double, i8*) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %Recovery = alloca double, align 8
  %allocaVec14 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec16 = alloca <2 x double>, align 16
  %CastInst2 = alloca double, align 4
  %CastInstVec3 = alloca <2 x double>, align 16
  %allocaVec17 = alloca <4 x i32>, align 16
  %CastInst4 = alloca i32, align 4
  %CastInstVec5 = alloca <4 x i32>, align 16
  %allocaVec18 = alloca <2 x double>, align 16
  %CastInst6 = alloca double, align 4
  %CastInstVec7 = alloca <2 x double>, align 16
  %allocaVec19 = alloca <4 x i32>, align 16
  %CastInst8 = alloca i32, align 4
  %CastInstVec9 = alloca <4 x i32>, align 16
  %allocaVec20 = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %allocaVec21 = alloca <2 x double>, align 16
  %CallInst10 = alloca double, align 4
  %CallInstVec11 = alloca <2 x double>, align 16
  %allocaVec22 = alloca <2 x double>, align 16
  %CallInst12 = alloca double, align 4
  %CallInstVec13 = alloca <2 x double>, align 16
  %allocaVec23 = alloca <2 x double>, align 16
  %3 = alloca double, align 8
  %4 = alloca i8*, align 4
  %allocaVec24 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec25 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec26 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec27 = alloca <2 x double>, align 16
  %8 = alloca double, align 8
  %allocaVec28 = alloca <2 x double>, align 16
  %9 = alloca double, align 8
  %allocaVec29 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec30 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec31 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  store double %0, double* %3, align 8
  store i8* %1, i8** %4, align 4
  %13 = load double, double* %3, align 8
  %14 = fcmp olt double %13, 0.000000e+00
  br i1 %14, label %15, label %25

; <label>:15:                                     ; preds = %2
  store <4 x i32> <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>, <4 x i32>* %allocaVec24
  store i32 -2147483648, i32* %5, align 4
  %16 = load double, double* %3, align 8
  %insertElmt = insertelement <2 x double> undef, double %16, i32 0
  %insertElmt32 = insertelement <2 x double> %insertElmt, double %16, i32 1
  store <2 x double> %insertElmt32, <2 x double>* %allocaVec23, align 16
  %17 = load <2 x double>, <2 x double>* %allocaVec23, align 16
  %Vop = fmul <2 x double> %17, <double -1.000000e+00, double -1.000000e+00>
  store <2 x double> %Vop, <2 x double>* %allocaVec23
  %18 = load <2 x double>, <2 x double>* %allocaVec23, align 4
  %extractE = extractelement <2 x double> %18, i64 0
  %extractE33 = extractelement <2 x double> %18, i64 1
  %sum = fadd double %extractE, %extractE33
  %sum34 = fadd double %sum, %extractE33
  %19 = fmul double %16, -1.000000e+00
  %Fmul = fmul double %19, 3.000000e+00
  store double %19, double* %Recovery
  %Fcmp = fcmp une double %sum34, %Fmul
  br i1 %Fcmp, label %20, label %24

; <label>:20:                                     ; preds = %15
  %remThree = fdiv double %sum34, %extractE
  %FcmpThree = fcmp une double %remThree, 3.000000e+00
  br i1 %FcmpThree, label %21, label %22

; <label>:21:                                     ; preds = %20
  store double %19, double* %Recovery, align 8
  br label %23

; <label>:22:                                     ; preds = %20
  store double %extractE, double* %Recovery, align 8
  br label %23

; <label>:23:                                     ; preds = %22, %21
  br label %24

; <label>:24:                                     ; preds = %15, %23
  %ReplaceInst = load double, double* %Recovery, align 8
  store double %ReplaceInst, double* %3, align 8
  br label %26

; <label>:25:                                     ; preds = %2
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec24
  store i32 0, i32* %5, align 4
  br label %26

; <label>:26:                                     ; preds = %25, %24
  %27 = load double, double* %3, align 8
  %28 = fcmp oeq double %27, 0.000000e+00
  br i1 %28, label %29, label %30

; <label>:29:                                     ; preds = %26
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec25
  store i32 0, i32* %6, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec26
  store i32 0, i32* %7, align 4
  br label %151

; <label>:30:                                     ; preds = %26
  %31 = load double, double* %3, align 8
  %32 = call arm_aapcscc double @frexp(double %31, i32* %10) #7
  store double %32, double* %8, align 8
  %33 = load i32, i32* %10, align 4
  %34 = icmp sgt i32 %33, 1025
  br i1 %34, label %38, label %35

; <label>:35:                                     ; preds = %30
  %36 = load double, double* %8, align 8
  %37 = fcmp olt double %36, 1.000000e+00
  br i1 %37, label %42, label %38

; <label>:38:                                     ; preds = %35, %30
  %39 = load i32, i32* %5, align 4
  %insertElmt35 = insertelement <4 x i32> undef, i32 %39, i32 0
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %39, i32 1
  %insertElmt37 = insertelement <4 x i32> %insertElmt36, i32 %39, i32 2
  %insertElmt38 = insertelement <4 x i32> %insertElmt37, i32 %39, i32 3
  store <4 x i32> %insertElmt38, <4 x i32>* %allocaVec24, align 16
  %40 = load <4 x i32>, <4 x i32>* %allocaVec24, align 16
  %Vop39 = or <4 x i32> %40, <i32 2146435072, i32 2146435072, i32 2146435072, i32 2146435072>
  store <4 x i32> %Vop39, <4 x i32>* %allocaVec25
  %41 = or i32 %39, 2146435072
  store i32 %41, i32* %6, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec26
  store i32 0, i32* %7, align 4
  br label %150

; <label>:42:                                     ; preds = %35
  %43 = load i32, i32* %10, align 4
  %44 = icmp slt i32 %43, -1021
  br i1 %44, label %45, label %109

; <label>:45:                                     ; preds = %42
  %46 = load i32, i32* %10, align 4
  %insertElmt40 = insertelement <4 x i32> undef, i32 %46, i32 0
  %insertElmt41 = insertelement <4 x i32> %insertElmt40, i32 %46, i32 1
  %insertElmt42 = insertelement <4 x i32> %insertElmt41, i32 %46, i32 2
  %insertElmt43 = insertelement <4 x i32> %insertElmt42, i32 %46, i32 3
  store <4 x i32> %insertElmt43, <4 x i32>* %allocaVec29, align 16
  %47 = load <4 x i32>, <4 x i32>* %allocaVec29, align 16
  %Vop44 = add <4 x i32> <i32 1042, i32 1042, i32 1042, i32 1042>, %47
  store <4 x i32> %Vop44, <4 x i32>* %allocaVec31
  %48 = add nsw i32 1042, %46
  store i32 %48, i32* %12, align 4
  %49 = load i32, i32* %12, align 4
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %79

; <label>:51:                                     ; preds = %45
  %52 = load i32, i32* %5, align 4
  store i32 %52, i32* %6, align 4
  %53 = load i32, i32* %12, align 4
  %54 = load <4 x i32>, <4 x i32>* %allocaVec31, align 16
  %Vop45 = add <4 x i32> %54, <i32 32, i32 32, i32 32, i32 32>
  store <4 x i32> %Vop45, <4 x i32>* %allocaVec31
  %55 = load <4 x i32>, <4 x i32>* %allocaVec31, align 4
  %extractE47 = extractelement <4 x i32> %55, i64 0
  %extractE48 = extractelement <4 x i32> %55, i64 1
  %extractE49 = extractelement <4 x i32> %55, i64 2
  %sum50 = add i32 %extractE47, %extractE48
  %sum51 = add i32 %sum50, %extractE49
  %56 = add nsw i32 %53, 32
  %Fmul46 = mul i32 %56, 3
  store i32 %56, i32* %Recovery1
  %Fcmp52 = icmp ne i32 %sum51, %Fmul46
  br i1 %Fcmp52, label %57, label %61

; <label>:57:                                     ; preds = %51
  %remThree122 = sdiv i32 %sum51, %extractE47
  %FcmpThree123 = icmp ne i32 %remThree122, 3
  br i1 %FcmpThree123, label %58, label %59

; <label>:58:                                     ; preds = %57
  store i32 %56, i32* %Recovery1, align 4
  br label %60

; <label>:59:                                     ; preds = %57
  store i32 %extractE47, i32* %Recovery1, align 4
  br label %60

; <label>:60:                                     ; preds = %59, %58
  br label %61

; <label>:61:                                     ; preds = %51, %60
  %ReplaceInst124 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst124, i32* %12, align 4
  %62 = load i32, i32* %12, align 4
  %63 = icmp slt i32 %62, 0
  br i1 %63, label %64, label %65

; <label>:64:                                     ; preds = %61
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec26
  store i32 0, i32* %7, align 4
  br label %78

; <label>:65:                                     ; preds = %61
  %66 = load double, double* %8, align 8
  %67 = load i32, i32* %12, align 4
  %68 = call arm_aapcscc double @ldexp(double %66, i32 %67) #7
  %69 = call arm_aapcscc double @floor(double %68) #9
  store double %69, double* %CallInst
  %70 = load double, double* %CallInst, align 4
  %insertCall = insertelement <2 x double> undef, double %70, i32 0
  %insertCall53 = insertelement <2 x double> %insertCall, double %70, i32 1
  store <2 x double> %insertCall53, <2 x double>* %CallInstVec, align 4
  %71 = load <2 x double>, <2 x double>* %CallInstVec, align 4
  %Vop54 = fsub <2 x double> %71, <double 0x41E0000000000000, double 0x41E0000000000000>
  %72 = fsub double %69, 0x41E0000000000000
  %73 = fptosi double %72 to i32
  store i32 %73, i32* %CastInst
  %74 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %74, i32 0
  %insertCast55 = insertelement <4 x i32> %insertCast, i32 %74, i32 1
  %insertCast56 = insertelement <4 x i32> %insertCast55, i32 %74, i32 2
  %insertCast57 = insertelement <4 x i32> %insertCast56, i32 %74, i32 3
  store <4 x i32> %insertCast57, <4 x i32>* %CastInstVec, align 4
  %75 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop58 = add <4 x i32> %75, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %76 = add nsw i32 %73, 2147483647
  %Vop59 = add <4 x i32> %Vop58, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop59, <4 x i32>* %allocaVec26
  %77 = add nsw i32 %76, 1
  store i32 %77, i32* %7, align 4
  br label %78

; <label>:78:                                     ; preds = %65, %64
  br label %108

; <label>:79:                                     ; preds = %45
  %80 = load double, double* %8, align 8
  %81 = load i32, i32* %12, align 4
  %82 = call arm_aapcscc double @ldexp(double %80, i32 %81) #7
  store double %82, double* %9, align 8
  %83 = load double, double* %9, align 8
  %84 = call arm_aapcscc double @floor(double %83) #9
  %85 = fptosi double %84 to i32
  store i32 %85, i32* %11, align 4
  %86 = load i32, i32* %5, align 4
  %insertElmt60 = insertelement <4 x i32> undef, i32 %86, i32 0
  %insertElmt61 = insertelement <4 x i32> %insertElmt60, i32 %86, i32 1
  %insertElmt62 = insertelement <4 x i32> %insertElmt61, i32 %86, i32 2
  %insertElmt63 = insertelement <4 x i32> %insertElmt62, i32 %86, i32 3
  store <4 x i32> %insertElmt63, <4 x i32>* %allocaVec24, align 16
  %87 = load i32, i32* %11, align 4
  %insertElmt64 = insertelement <4 x i32> undef, i32 %87, i32 0
  %insertElmt65 = insertelement <4 x i32> %insertElmt64, i32 %87, i32 1
  %insertElmt66 = insertelement <4 x i32> %insertElmt65, i32 %87, i32 2
  %insertElmt67 = insertelement <4 x i32> %insertElmt66, i32 %87, i32 3
  store <4 x i32> %insertElmt67, <4 x i32>* %allocaVec30, align 16
  %88 = load <4 x i32>, <4 x i32>* %allocaVec24, align 16
  %89 = load <4 x i32>, <4 x i32>* %allocaVec30, align 16
  %Vop68 = or <4 x i32> %88, %89
  store <4 x i32> %Vop68, <4 x i32>* %allocaVec25
  %90 = or i32 %86, %87
  store i32 %90, i32* %6, align 4
  %91 = load double, double* %9, align 8
  %insertElmt69 = insertelement <2 x double> undef, double %91, i32 0
  %insertElmt70 = insertelement <2 x double> %insertElmt69, double %91, i32 1
  store <2 x double> %insertElmt70, <2 x double>* %allocaVec28, align 16
  %92 = load i32, i32* %11, align 4
  %93 = sitofp i32 %92 to double
  %94 = load <2 x double>, <2 x double>* %allocaVec28, align 16
  store double %93, double* %CastInst2
  %95 = load double, double* %CastInst2, align 4
  %insertCast71 = insertelement <2 x double> undef, double %95, i32 0
  %insertCast72 = insertelement <2 x double> %insertCast71, double %95, i32 1
  store <2 x double> %insertCast72, <2 x double>* %CastInstVec3, align 4
  %96 = load <2 x double>, <2 x double>* %CastInstVec3, align 4
  %Vop73 = fsub <2 x double> %94, %96
  %97 = fsub double %91, %93
  %98 = call arm_aapcscc double @ldexp(double %97, i32 32) #7
  %99 = call arm_aapcscc double @floor(double %98) #9
  store double %99, double* %CallInst10
  %100 = load double, double* %CallInst10, align 4
  %insertCall74 = insertelement <2 x double> undef, double %100, i32 0
  %insertCall75 = insertelement <2 x double> %insertCall74, double %100, i32 1
  store <2 x double> %insertCall75, <2 x double>* %CallInstVec11, align 4
  %101 = load <2 x double>, <2 x double>* %CallInstVec11, align 4
  %Vop76 = fsub <2 x double> %101, <double 0x41E0000000000000, double 0x41E0000000000000>
  %102 = fsub double %99, 0x41E0000000000000
  %103 = fptosi double %102 to i32
  store i32 %103, i32* %CastInst4
  %104 = load i32, i32* %CastInst4, align 4
  %insertCast77 = insertelement <4 x i32> undef, i32 %104, i32 0
  %insertCast78 = insertelement <4 x i32> %insertCast77, i32 %104, i32 1
  %insertCast79 = insertelement <4 x i32> %insertCast78, i32 %104, i32 2
  %insertCast80 = insertelement <4 x i32> %insertCast79, i32 %104, i32 3
  store <4 x i32> %insertCast80, <4 x i32>* %CastInstVec5, align 4
  %105 = load <4 x i32>, <4 x i32>* %CastInstVec5, align 4
  %Vop81 = add <4 x i32> %105, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %106 = add nsw i32 %103, 2147483647
  %Vop82 = add <4 x i32> %Vop81, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop82, <4 x i32>* %allocaVec26
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %7, align 4
  br label %108

; <label>:108:                                    ; preds = %79, %78
  br label %149

; <label>:109:                                    ; preds = %42
  %110 = load double, double* %8, align 8
  %111 = call arm_aapcscc double @ldexp(double %110, i32 21) #7
  store double %111, double* %9, align 8
  %112 = load double, double* %9, align 8
  %113 = call arm_aapcscc double @floor(double %112) #9
  %114 = fptosi double %113 to i32
  store i32 %114, i32* %11, align 4
  %115 = load i32, i32* %11, align 4
  %insertElmt83 = insertelement <4 x i32> undef, i32 %115, i32 0
  %insertElmt84 = insertelement <4 x i32> %insertElmt83, i32 %115, i32 1
  %insertElmt85 = insertelement <4 x i32> %insertElmt84, i32 %115, i32 2
  %insertElmt86 = insertelement <4 x i32> %insertElmt85, i32 %115, i32 3
  store <4 x i32> %insertElmt86, <4 x i32>* %allocaVec30, align 16
  %116 = load <4 x i32>, <4 x i32>* %allocaVec30, align 16
  %Vop87 = sub <4 x i32> %116, <i32 1048576, i32 1048576, i32 1048576, i32 1048576>
  store <4 x i32> %Vop87, <4 x i32>* %allocaVec30
  %117 = sub nsw i32 %115, 1048576
  store i32 %117, i32* %11, align 4
  %118 = load double, double* %9, align 8
  %insertElmt88 = insertelement <2 x double> undef, double %118, i32 0
  %insertElmt89 = insertelement <2 x double> %insertElmt88, double %118, i32 1
  store <2 x double> %insertElmt89, <2 x double>* %allocaVec28, align 16
  %119 = load <2 x double>, <2 x double>* %allocaVec28, align 16
  %Vop90 = fsub <2 x double> %119, <double 1.048576e+06, double 1.048576e+06>
  store <2 x double> %Vop90, <2 x double>* %allocaVec28
  %120 = fsub double %118, 1.048576e+06
  store double %120, double* %9, align 8
  %121 = load i32, i32* %5, align 4
  %insertElmt91 = insertelement <4 x i32> undef, i32 %121, i32 0
  %insertElmt92 = insertelement <4 x i32> %insertElmt91, i32 %121, i32 1
  %insertElmt93 = insertelement <4 x i32> %insertElmt92, i32 %121, i32 2
  %insertElmt94 = insertelement <4 x i32> %insertElmt93, i32 %121, i32 3
  store <4 x i32> %insertElmt94, <4 x i32>* %allocaVec24, align 16
  %122 = load i32, i32* %10, align 4
  %insertElmt95 = insertelement <4 x i32> undef, i32 %122, i32 0
  %insertElmt96 = insertelement <4 x i32> %insertElmt95, i32 %122, i32 1
  %insertElmt97 = insertelement <4 x i32> %insertElmt96, i32 %122, i32 2
  %insertElmt98 = insertelement <4 x i32> %insertElmt97, i32 %122, i32 3
  store <4 x i32> %insertElmt98, <4 x i32>* %allocaVec29, align 16
  %123 = load <4 x i32>, <4 x i32>* %allocaVec29, align 16
  %Vop99 = add <4 x i32> %123, <i32 1023, i32 1023, i32 1023, i32 1023>
  %124 = add nsw i32 %122, 1023
  %Vop100 = sub <4 x i32> %Vop99, <i32 1, i32 1, i32 1, i32 1>
  %125 = sub nsw i32 %124, 1
  %Vop101 = shl <4 x i32> %Vop100, <i32 20, i32 20, i32 20, i32 20>
  %126 = shl i32 %125, 20
  %127 = load <4 x i32>, <4 x i32>* %allocaVec24, align 16
  %Vop102 = or <4 x i32> %127, %Vop101
  %128 = or i32 %121, %126
  %129 = load i32, i32* %11, align 4
  %130 = load <4 x i32>, <4 x i32>* %allocaVec30, align 16
  %Vop103 = or <4 x i32> %Vop102, %130
  store <4 x i32> %Vop103, <4 x i32>* %allocaVec25
  %131 = or i32 %128, %129
  store i32 %131, i32* %6, align 4
  %132 = load double, double* %9, align 8
  %133 = load i32, i32* %11, align 4
  %134 = sitofp i32 %133 to double
  %135 = load <2 x double>, <2 x double>* %allocaVec28, align 16
  store double %134, double* %CastInst6
  %136 = load double, double* %CastInst6, align 4
  %insertCast104 = insertelement <2 x double> undef, double %136, i32 0
  %insertCast105 = insertelement <2 x double> %insertCast104, double %136, i32 1
  store <2 x double> %insertCast105, <2 x double>* %CastInstVec7, align 4
  %137 = load <2 x double>, <2 x double>* %CastInstVec7, align 4
  %Vop106 = fsub <2 x double> %135, %137
  %138 = fsub double %132, %134
  %139 = call arm_aapcscc double @ldexp(double %138, i32 32) #7
  %140 = call arm_aapcscc double @floor(double %139) #9
  store double %140, double* %CallInst12
  %141 = load double, double* %CallInst12, align 4
  %insertCall107 = insertelement <2 x double> undef, double %141, i32 0
  %insertCall108 = insertelement <2 x double> %insertCall107, double %141, i32 1
  store <2 x double> %insertCall108, <2 x double>* %CallInstVec13, align 4
  %142 = load <2 x double>, <2 x double>* %CallInstVec13, align 4
  %Vop109 = fsub <2 x double> %142, <double 0x41E0000000000000, double 0x41E0000000000000>
  %143 = fsub double %140, 0x41E0000000000000
  %144 = fptosi double %143 to i32
  store i32 %144, i32* %CastInst8
  %145 = load i32, i32* %CastInst8, align 4
  %insertCast110 = insertelement <4 x i32> undef, i32 %145, i32 0
  %insertCast111 = insertelement <4 x i32> %insertCast110, i32 %145, i32 1
  %insertCast112 = insertelement <4 x i32> %insertCast111, i32 %145, i32 2
  %insertCast113 = insertelement <4 x i32> %insertCast112, i32 %145, i32 3
  store <4 x i32> %insertCast113, <4 x i32>* %CastInstVec9, align 4
  %146 = load <4 x i32>, <4 x i32>* %CastInstVec9, align 4
  %Vop114 = add <4 x i32> %146, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %147 = add nsw i32 %144, 2147483647
  %Vop115 = add <4 x i32> %Vop114, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop115, <4 x i32>* %allocaVec26
  %148 = add nsw i32 %147, 1
  store i32 %148, i32* %7, align 4
  br label %149

; <label>:149:                                    ; preds = %109, %108
  br label %150

; <label>:150:                                    ; preds = %149, %38
  br label %151

; <label>:151:                                    ; preds = %150, %29
  %152 = load i32, i32* %6, align 4
  %153 = load <4 x i32>, <4 x i32>* %allocaVec25, align 16
  %Vop116 = ashr <4 x i32> %153, <i32 24, i32 24, i32 24, i32 24>
  %154 = ashr i32 %152, 24
  %155 = trunc i32 %154 to i8
  %156 = load i8*, i8** %4, align 4
  %157 = getelementptr inbounds i8, i8* %156, i32 0
  store i8 %155, i8* %157, align 1
  %158 = load i32, i32* %6, align 4
  %159 = load <4 x i32>, <4 x i32>* %allocaVec25, align 16
  %Vop117 = ashr <4 x i32> %159, <i32 16, i32 16, i32 16, i32 16>
  %160 = ashr i32 %158, 16
  %161 = trunc i32 %160 to i8
  %162 = load i8*, i8** %4, align 4
  %163 = getelementptr inbounds i8, i8* %162, i32 1
  store i8 %161, i8* %163, align 1
  %164 = load i32, i32* %6, align 4
  %165 = load <4 x i32>, <4 x i32>* %allocaVec25, align 16
  %Vop118 = ashr <4 x i32> %165, <i32 8, i32 8, i32 8, i32 8>
  %166 = ashr i32 %164, 8
  %167 = trunc i32 %166 to i8
  %168 = load i8*, i8** %4, align 4
  %169 = getelementptr inbounds i8, i8* %168, i32 2
  store i8 %167, i8* %169, align 1
  %170 = load i32, i32* %6, align 4
  %171 = trunc i32 %170 to i8
  %172 = load i8*, i8** %4, align 4
  %173 = getelementptr inbounds i8, i8* %172, i32 3
  store i8 %171, i8* %173, align 1
  %174 = load i32, i32* %7, align 4
  %175 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop119 = ashr <4 x i32> %175, <i32 24, i32 24, i32 24, i32 24>
  %176 = ashr i32 %174, 24
  %177 = trunc i32 %176 to i8
  %178 = load i8*, i8** %4, align 4
  %179 = getelementptr inbounds i8, i8* %178, i32 4
  store i8 %177, i8* %179, align 1
  %180 = load i32, i32* %7, align 4
  %181 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop120 = ashr <4 x i32> %181, <i32 16, i32 16, i32 16, i32 16>
  %182 = ashr i32 %180, 16
  %183 = trunc i32 %182 to i8
  %184 = load i8*, i8** %4, align 4
  %185 = getelementptr inbounds i8, i8* %184, i32 5
  store i8 %183, i8* %185, align 1
  %186 = load i32, i32* %7, align 4
  %187 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop121 = ashr <4 x i32> %187, <i32 8, i32 8, i32 8, i32 8>
  %188 = ashr i32 %186, 8
  %189 = trunc i32 %188 to i8
  %190 = load i8*, i8** %4, align 4
  %191 = getelementptr inbounds i8, i8* %190, i32 6
  store i8 %189, i8* %191, align 1
  %192 = load i32, i32* %7, align 4
  %193 = trunc i32 %192 to i8
  %194 = load i8*, i8** %4, align 4
  %195 = getelementptr inbounds i8, i8* %194, i32 7
  store i8 %193, i8* %195, align 1
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc double @ConvertFromIeeeExtended(i8*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec26 = alloca <2 x double>, align 16
  %Recovery1 = alloca double, align 8
  %allocaVec27 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec28 = alloca <4 x i32>, align 16
  %CastInst2 = alloca i32, align 4
  %CastInstVec3 = alloca <4 x i32>, align 16
  %allocaVec29 = alloca <4 x i32>, align 16
  %CastInst4 = alloca i32, align 4
  %CastInstVec5 = alloca <4 x i32>, align 16
  %allocaVec30 = alloca <4 x i32>, align 16
  %CastInst6 = alloca i32, align 4
  %CastInstVec7 = alloca <4 x i32>, align 16
  %allocaVec31 = alloca <4 x i32>, align 16
  %CastInst8 = alloca i32, align 4
  %CastInstVec9 = alloca <4 x i32>, align 16
  %allocaVec32 = alloca <4 x i32>, align 16
  %CastInst10 = alloca i32, align 4
  %CastInstVec11 = alloca <4 x i32>, align 16
  %allocaVec33 = alloca <4 x i32>, align 16
  %CastInst12 = alloca i32, align 4
  %CastInstVec13 = alloca <4 x i32>, align 16
  %allocaVec34 = alloca <4 x i32>, align 16
  %CastInst14 = alloca i32, align 4
  %CastInstVec15 = alloca <4 x i32>, align 16
  %allocaVec35 = alloca <4 x i32>, align 16
  %CastInst16 = alloca i32, align 4
  %CastInstVec17 = alloca <4 x i32>, align 16
  %allocaVec36 = alloca <4 x i32>, align 16
  %CastInst18 = alloca i32, align 4
  %CastInstVec19 = alloca <4 x i32>, align 16
  %allocaVec37 = alloca <2 x double>, align 16
  %CastInst20 = alloca double, align 4
  %CastInstVec21 = alloca <2 x double>, align 16
  %allocaVec38 = alloca <2 x double>, align 16
  %CastInst22 = alloca double, align 4
  %CastInstVec23 = alloca <2 x double>, align 16
  %allocaVec39 = alloca <4 x i32>, align 16
  %CastInst24 = alloca i32, align 4
  %CastInstVec25 = alloca <4 x i32>, align 16
  %allocaVec40 = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %allocaVec41 = alloca <2 x double>, align 16
  %2 = alloca double, align 8
  %3 = alloca i8*, align 4
  %allocaVec42 = alloca <2 x double>, align 16
  %4 = alloca double, align 8
  %allocaVec43 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec44 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec45 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  store i8* %0, i8** %3, align 4
  %8 = load i8*, i8** %3, align 4
  %9 = getelementptr inbounds i8, i8* %8, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  store i32 %11, i32* %CastInst
  %12 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %12, i32 0
  %insertCast46 = insertelement <4 x i32> %insertCast, i32 %12, i32 1
  %insertCast47 = insertelement <4 x i32> %insertCast46, i32 %12, i32 2
  %insertCast48 = insertelement <4 x i32> %insertCast47, i32 %12, i32 3
  store <4 x i32> %insertCast48, <4 x i32>* %CastInstVec, align 4
  %13 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop = and <4 x i32> %13, <i32 127, i32 127, i32 127, i32 127>
  %14 = and i32 %11, 127
  %Vop49 = shl <4 x i32> %Vop, <i32 8, i32 8, i32 8, i32 8>
  %15 = shl i32 %14, 8
  %16 = load i8*, i8** %3, align 4
  %17 = getelementptr inbounds i8, i8* %16, i32 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  store i32 %19, i32* %CastInst2
  %20 = load i32, i32* %CastInst2, align 4
  %insertCast50 = insertelement <4 x i32> undef, i32 %20, i32 0
  %insertCast51 = insertelement <4 x i32> %insertCast50, i32 %20, i32 1
  %insertCast52 = insertelement <4 x i32> %insertCast51, i32 %20, i32 2
  %insertCast53 = insertelement <4 x i32> %insertCast52, i32 %20, i32 3
  store <4 x i32> %insertCast53, <4 x i32>* %CastInstVec3, align 4
  %21 = load <4 x i32>, <4 x i32>* %CastInstVec3, align 4
  %Vop54 = and <4 x i32> %21, <i32 255, i32 255, i32 255, i32 255>
  %22 = and i32 %19, 255
  %Vop55 = or <4 x i32> %Vop49, %Vop54
  store <4 x i32> %Vop55, <4 x i32>* %allocaVec43
  %23 = or i32 %15, %22
  store i32 %23, i32* %5, align 4
  %24 = load i8*, i8** %3, align 4
  %25 = getelementptr inbounds i8, i8* %24, i32 2
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  store i32 %27, i32* %CastInst4
  %28 = load i32, i32* %CastInst4, align 4
  %insertCast56 = insertelement <4 x i32> undef, i32 %28, i32 0
  %insertCast57 = insertelement <4 x i32> %insertCast56, i32 %28, i32 1
  %insertCast58 = insertelement <4 x i32> %insertCast57, i32 %28, i32 2
  %insertCast59 = insertelement <4 x i32> %insertCast58, i32 %28, i32 3
  store <4 x i32> %insertCast59, <4 x i32>* %CastInstVec5, align 4
  %29 = load <4 x i32>, <4 x i32>* %CastInstVec5, align 4
  %Vop60 = and <4 x i32> %29, <i32 255, i32 255, i32 255, i32 255>
  %30 = and i32 %27, 255
  %Vop61 = shl <4 x i32> %Vop60, <i32 24, i32 24, i32 24, i32 24>
  %31 = shl i32 %30, 24
  %32 = load i8*, i8** %3, align 4
  %33 = getelementptr inbounds i8, i8* %32, i32 3
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  store i32 %35, i32* %CastInst6
  %36 = load i32, i32* %CastInst6, align 4
  %insertCast62 = insertelement <4 x i32> undef, i32 %36, i32 0
  %insertCast63 = insertelement <4 x i32> %insertCast62, i32 %36, i32 1
  %insertCast64 = insertelement <4 x i32> %insertCast63, i32 %36, i32 2
  %insertCast65 = insertelement <4 x i32> %insertCast64, i32 %36, i32 3
  store <4 x i32> %insertCast65, <4 x i32>* %CastInstVec7, align 4
  %37 = load <4 x i32>, <4 x i32>* %CastInstVec7, align 4
  %Vop66 = and <4 x i32> %37, <i32 255, i32 255, i32 255, i32 255>
  %38 = and i32 %35, 255
  %Vop67 = shl <4 x i32> %Vop66, <i32 16, i32 16, i32 16, i32 16>
  %39 = shl i32 %38, 16
  %Vop68 = or <4 x i32> %Vop61, %Vop67
  %40 = or i32 %31, %39
  %41 = load i8*, i8** %3, align 4
  %42 = getelementptr inbounds i8, i8* %41, i32 4
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  store i32 %44, i32* %CastInst8
  %45 = load i32, i32* %CastInst8, align 4
  %insertCast69 = insertelement <4 x i32> undef, i32 %45, i32 0
  %insertCast70 = insertelement <4 x i32> %insertCast69, i32 %45, i32 1
  %insertCast71 = insertelement <4 x i32> %insertCast70, i32 %45, i32 2
  %insertCast72 = insertelement <4 x i32> %insertCast71, i32 %45, i32 3
  store <4 x i32> %insertCast72, <4 x i32>* %CastInstVec9, align 4
  %46 = load <4 x i32>, <4 x i32>* %CastInstVec9, align 4
  %Vop73 = and <4 x i32> %46, <i32 255, i32 255, i32 255, i32 255>
  %47 = and i32 %44, 255
  %Vop74 = shl <4 x i32> %Vop73, <i32 8, i32 8, i32 8, i32 8>
  %48 = shl i32 %47, 8
  %Vop75 = or <4 x i32> %Vop68, %Vop74
  %49 = or i32 %40, %48
  %50 = load i8*, i8** %3, align 4
  %51 = getelementptr inbounds i8, i8* %50, i32 5
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  store i32 %53, i32* %CastInst10
  %54 = load i32, i32* %CastInst10, align 4
  %insertCast76 = insertelement <4 x i32> undef, i32 %54, i32 0
  %insertCast77 = insertelement <4 x i32> %insertCast76, i32 %54, i32 1
  %insertCast78 = insertelement <4 x i32> %insertCast77, i32 %54, i32 2
  %insertCast79 = insertelement <4 x i32> %insertCast78, i32 %54, i32 3
  store <4 x i32> %insertCast79, <4 x i32>* %CastInstVec11, align 4
  %55 = load <4 x i32>, <4 x i32>* %CastInstVec11, align 4
  %Vop80 = and <4 x i32> %55, <i32 255, i32 255, i32 255, i32 255>
  %56 = and i32 %53, 255
  %Vop81 = or <4 x i32> %Vop75, %Vop80
  store <4 x i32> %Vop81, <4 x i32>* %allocaVec44
  %57 = or i32 %49, %56
  store i32 %57, i32* %6, align 4
  %58 = load i8*, i8** %3, align 4
  %59 = getelementptr inbounds i8, i8* %58, i32 6
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  store i32 %61, i32* %CastInst12
  %62 = load i32, i32* %CastInst12, align 4
  %insertCast82 = insertelement <4 x i32> undef, i32 %62, i32 0
  %insertCast83 = insertelement <4 x i32> %insertCast82, i32 %62, i32 1
  %insertCast84 = insertelement <4 x i32> %insertCast83, i32 %62, i32 2
  %insertCast85 = insertelement <4 x i32> %insertCast84, i32 %62, i32 3
  store <4 x i32> %insertCast85, <4 x i32>* %CastInstVec13, align 4
  %63 = load <4 x i32>, <4 x i32>* %CastInstVec13, align 4
  %Vop86 = and <4 x i32> %63, <i32 255, i32 255, i32 255, i32 255>
  %64 = and i32 %61, 255
  %Vop87 = shl <4 x i32> %Vop86, <i32 24, i32 24, i32 24, i32 24>
  %65 = shl i32 %64, 24
  %66 = load i8*, i8** %3, align 4
  %67 = getelementptr inbounds i8, i8* %66, i32 7
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  store i32 %69, i32* %CastInst14
  %70 = load i32, i32* %CastInst14, align 4
  %insertCast88 = insertelement <4 x i32> undef, i32 %70, i32 0
  %insertCast89 = insertelement <4 x i32> %insertCast88, i32 %70, i32 1
  %insertCast90 = insertelement <4 x i32> %insertCast89, i32 %70, i32 2
  %insertCast91 = insertelement <4 x i32> %insertCast90, i32 %70, i32 3
  store <4 x i32> %insertCast91, <4 x i32>* %CastInstVec15, align 4
  %71 = load <4 x i32>, <4 x i32>* %CastInstVec15, align 4
  %Vop92 = and <4 x i32> %71, <i32 255, i32 255, i32 255, i32 255>
  %72 = and i32 %69, 255
  %Vop93 = shl <4 x i32> %Vop92, <i32 16, i32 16, i32 16, i32 16>
  %73 = shl i32 %72, 16
  %Vop94 = or <4 x i32> %Vop87, %Vop93
  %74 = or i32 %65, %73
  %75 = load i8*, i8** %3, align 4
  %76 = getelementptr inbounds i8, i8* %75, i32 8
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  store i32 %78, i32* %CastInst16
  %79 = load i32, i32* %CastInst16, align 4
  %insertCast95 = insertelement <4 x i32> undef, i32 %79, i32 0
  %insertCast96 = insertelement <4 x i32> %insertCast95, i32 %79, i32 1
  %insertCast97 = insertelement <4 x i32> %insertCast96, i32 %79, i32 2
  %insertCast98 = insertelement <4 x i32> %insertCast97, i32 %79, i32 3
  store <4 x i32> %insertCast98, <4 x i32>* %CastInstVec17, align 4
  %80 = load <4 x i32>, <4 x i32>* %CastInstVec17, align 4
  %Vop99 = and <4 x i32> %80, <i32 255, i32 255, i32 255, i32 255>
  %81 = and i32 %78, 255
  %Vop100 = shl <4 x i32> %Vop99, <i32 8, i32 8, i32 8, i32 8>
  %82 = shl i32 %81, 8
  %Vop101 = or <4 x i32> %Vop94, %Vop100
  %83 = or i32 %74, %82
  %84 = load i8*, i8** %3, align 4
  %85 = getelementptr inbounds i8, i8* %84, i32 9
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  store i32 %87, i32* %CastInst18
  %88 = load i32, i32* %CastInst18, align 4
  %insertCast102 = insertelement <4 x i32> undef, i32 %88, i32 0
  %insertCast103 = insertelement <4 x i32> %insertCast102, i32 %88, i32 1
  %insertCast104 = insertelement <4 x i32> %insertCast103, i32 %88, i32 2
  %insertCast105 = insertelement <4 x i32> %insertCast104, i32 %88, i32 3
  store <4 x i32> %insertCast105, <4 x i32>* %CastInstVec19, align 4
  %89 = load <4 x i32>, <4 x i32>* %CastInstVec19, align 4
  %Vop106 = and <4 x i32> %89, <i32 255, i32 255, i32 255, i32 255>
  %90 = and i32 %87, 255
  %Vop107 = or <4 x i32> %Vop101, %Vop106
  store <4 x i32> %Vop107, <4 x i32>* %allocaVec45
  %91 = or i32 %83, %90
  store i32 %91, i32* %7, align 4
  %92 = load i32, i32* %5, align 4
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %101

; <label>:94:                                     ; preds = %1
  %95 = load i32, i32* %6, align 4
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %101

; <label>:97:                                     ; preds = %94
  %98 = load i32, i32* %7, align 4
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %101

; <label>:100:                                    ; preds = %97
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec42
  store double 0.000000e+00, double* %4, align 8
  br label %145

; <label>:101:                                    ; preds = %97, %94, %1
  %102 = load i32, i32* %5, align 4
  %103 = icmp eq i32 %102, 32767
  br i1 %103, label %104, label %105

; <label>:104:                                    ; preds = %101
  store <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double>* %allocaVec42
  store double 0x7FF0000000000000, double* %4, align 8
  br label %144

; <label>:105:                                    ; preds = %101
  %106 = load i32, i32* %5, align 4
  %107 = load <4 x i32>, <4 x i32>* %allocaVec43, align 16
  %Vop108 = sub <4 x i32> %107, <i32 16383, i32 16383, i32 16383, i32 16383>
  store <4 x i32> %Vop108, <4 x i32>* %allocaVec43
  %108 = sub nsw i32 %106, 16383
  store i32 %108, i32* %5, align 4
  %109 = load i32, i32* %6, align 4
  %110 = load <4 x i32>, <4 x i32>* %allocaVec44, align 16
  %Vop109 = sub <4 x i32> %110, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %111 = sub i32 %109, 2147483647
  %Vop110 = sub <4 x i32> %Vop109, <i32 1, i32 1, i32 1, i32 1>
  %112 = sub i32 %111, 1
  %113 = sitofp i32 %112 to double
  store double %113, double* %CastInst20
  %114 = load double, double* %CastInst20, align 4
  %insertCast111 = insertelement <2 x double> undef, double %114, i32 0
  %insertCast112 = insertelement <2 x double> %insertCast111, double %114, i32 1
  store <2 x double> %insertCast112, <2 x double>* %CastInstVec21, align 4
  %115 = load <2 x double>, <2 x double>* %CastInstVec21, align 4
  %Vop113 = fadd <2 x double> %115, <double 0x41E0000000000000, double 0x41E0000000000000>
  %116 = fadd double %113, 0x41E0000000000000
  %117 = load i32, i32* %5, align 4
  %118 = load <4 x i32>, <4 x i32>* %allocaVec43, align 16
  %Vop114 = sub <4 x i32> %118, <i32 31, i32 31, i32 31, i32 31>
  store <4 x i32> %Vop114, <4 x i32>* %allocaVec43
  %119 = sub nsw i32 %117, 31
  store i32 %119, i32* %5, align 4
  %120 = call arm_aapcscc double @ldexp(double %116, i32 %119) #7
  store double %120, double* %4, align 8
  %121 = load i32, i32* %7, align 4
  %122 = load <4 x i32>, <4 x i32>* %allocaVec45, align 16
  %Vop115 = sub <4 x i32> %122, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %123 = sub i32 %121, 2147483647
  %Vop116 = sub <4 x i32> %Vop115, <i32 1, i32 1, i32 1, i32 1>
  %124 = sub i32 %123, 1
  %125 = sitofp i32 %124 to double
  store double %125, double* %CastInst22
  %126 = load double, double* %CastInst22, align 4
  %insertCast117 = insertelement <2 x double> undef, double %126, i32 0
  %insertCast118 = insertelement <2 x double> %insertCast117, double %126, i32 1
  store <2 x double> %insertCast118, <2 x double>* %CastInstVec23, align 4
  %127 = load <2 x double>, <2 x double>* %CastInstVec23, align 4
  %Vop119 = fadd <2 x double> %127, <double 0x41E0000000000000, double 0x41E0000000000000>
  %128 = fadd double %125, 0x41E0000000000000
  %129 = load i32, i32* %5, align 4
  %130 = load <4 x i32>, <4 x i32>* %allocaVec43, align 16
  %Vop120 = sub <4 x i32> %130, <i32 32, i32 32, i32 32, i32 32>
  store <4 x i32> %Vop120, <4 x i32>* %allocaVec43
  %131 = load <4 x i32>, <4 x i32>* %allocaVec43, align 4
  %extractE = extractelement <4 x i32> %131, i64 0
  %extractE121 = extractelement <4 x i32> %131, i64 1
  %extractE122 = extractelement <4 x i32> %131, i64 2
  %sum = add i32 %extractE, %extractE121
  %sum123 = add i32 %sum, %extractE122
  %132 = sub nsw i32 %129, 32
  %Fmul = mul i32 %132, 3
  store i32 %132, i32* %Recovery
  %Fcmp = icmp ne i32 %sum123, %Fmul
  br i1 %Fcmp, label %133, label %137

; <label>:133:                                    ; preds = %105
  %remThree = sdiv i32 %sum123, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %134, label %135

; <label>:134:                                    ; preds = %133
  store i32 %132, i32* %Recovery, align 4
  br label %136

; <label>:135:                                    ; preds = %133
  store i32 %extractE, i32* %Recovery, align 4
  br label %136

; <label>:136:                                    ; preds = %135, %134
  br label %137

; <label>:137:                                    ; preds = %105, %136
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %5, align 4
  %138 = call arm_aapcscc double @ldexp(double %128, i32 %132) #7
  %139 = load double, double* %4, align 8
  %insertElmt = insertelement <2 x double> undef, double %139, i32 0
  %insertElmt124 = insertelement <2 x double> %insertElmt, double %139, i32 1
  store <2 x double> %insertElmt124, <2 x double>* %allocaVec42, align 16
  %140 = load <2 x double>, <2 x double>* %allocaVec42, align 16
  store double %138, double* %CallInst
  %141 = load double, double* %CallInst, align 4
  %insertCall = insertelement <2 x double> undef, double %141, i32 0
  %insertCall125 = insertelement <2 x double> %insertCall, double %141, i32 1
  store <2 x double> %insertCall125, <2 x double>* %CallInstVec, align 4
  %142 = load <2 x double>, <2 x double>* %CallInstVec, align 4
  %Vop126 = fadd <2 x double> %140, %142
  store <2 x double> %Vop126, <2 x double>* %allocaVec42
  %143 = fadd double %139, %138
  store double %143, double* %4, align 8
  br label %144

; <label>:144:                                    ; preds = %137, %104
  br label %145

; <label>:145:                                    ; preds = %144, %100
  %146 = load i8*, i8** %3, align 4
  %147 = getelementptr inbounds i8, i8* %146, i32 0
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  store i32 %149, i32* %CastInst24
  %150 = load i32, i32* %CastInst24, align 4
  %insertCast127 = insertelement <4 x i32> undef, i32 %150, i32 0
  %insertCast128 = insertelement <4 x i32> %insertCast127, i32 %150, i32 1
  %insertCast129 = insertelement <4 x i32> %insertCast128, i32 %150, i32 2
  %insertCast130 = insertelement <4 x i32> %insertCast129, i32 %150, i32 3
  store <4 x i32> %insertCast130, <4 x i32>* %CastInstVec25, align 4
  %151 = load <4 x i32>, <4 x i32>* %CastInstVec25, align 4
  %Vop131 = and <4 x i32> %151, <i32 128, i32 128, i32 128, i32 128>
  %152 = and i32 %149, 128
  %153 = icmp ne i32 %152, 0
  br i1 %153, label %154, label %164

; <label>:154:                                    ; preds = %145
  %155 = load double, double* %4, align 8
  %156 = load <2 x double>, <2 x double>* %allocaVec42, align 16
  %Vop132 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %156
  store <2 x double> %Vop132, <2 x double>* %allocaVec41
  %157 = load <2 x double>, <2 x double>* %allocaVec41, align 4
  %extractE134 = extractelement <2 x double> %157, i64 0
  %extractE135 = extractelement <2 x double> %157, i64 1
  %sum136 = fadd double %extractE134, %extractE135
  %sum137 = fadd double %sum136, %extractE135
  %158 = fsub double -0.000000e+00, %155
  %Fmul133 = fmul double %158, 3.000000e+00
  store double %158, double* %Recovery1
  %Fcmp138 = fcmp une double %sum137, %Fmul133
  br i1 %Fcmp138, label %159, label %163

; <label>:159:                                    ; preds = %154
  %remThree139 = fdiv double %sum137, %extractE134
  %FcmpThree140 = fcmp une double %remThree139, 3.000000e+00
  br i1 %FcmpThree140, label %160, label %161

; <label>:160:                                    ; preds = %159
  store double %158, double* %Recovery1, align 8
  br label %162

; <label>:161:                                    ; preds = %159
  store double %extractE134, double* %Recovery1, align 8
  br label %162

; <label>:162:                                    ; preds = %161, %160
  br label %163

; <label>:163:                                    ; preds = %154, %162
  %ReplaceInst141 = load double, double* %Recovery1, align 8
  store double %ReplaceInst141, double* %2, align 8
  br label %166

; <label>:164:                                    ; preds = %145
  %165 = load double, double* %4, align 8
  store double %165, double* %2, align 8
  br label %166

; <label>:166:                                    ; preds = %164, %163
  %167 = load double, double* %2, align 8
  ret double %167
}

; Function Attrs: nounwind
define arm_aapcscc void @ConvertToIeeeExtended(double, i8*) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %Recovery = alloca double, align 8
  %allocaVec3 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec4 = alloca <4 x i32>, align 16
  %CastInst1 = alloca i32, align 4
  %CastInstVec2 = alloca <4 x i32>, align 16
  %allocaVec5 = alloca <2 x double>, align 16
  %3 = alloca double, align 8
  %4 = alloca i8*, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec8 = alloca <2 x double>, align 16
  %7 = alloca double, align 8
  %allocaVec9 = alloca <2 x double>, align 16
  %8 = alloca double, align 8
  %allocaVec10 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  store double %0, double* %3, align 8
  store i8* %1, i8** %4, align 4
  %11 = load double, double* %3, align 8
  %12 = fcmp olt double %11, 0.000000e+00
  br i1 %12, label %13, label %23

; <label>:13:                                     ; preds = %2
  store <4 x i32> <i32 32768, i32 32768, i32 32768, i32 32768>, <4 x i32>* %allocaVec6
  store i32 32768, i32* %5, align 4
  %14 = load double, double* %3, align 8
  %insertElmt = insertelement <2 x double> undef, double %14, i32 0
  %insertElmt12 = insertelement <2 x double> %insertElmt, double %14, i32 1
  store <2 x double> %insertElmt12, <2 x double>* %allocaVec5, align 16
  %15 = load <2 x double>, <2 x double>* %allocaVec5, align 16
  %Vop = fmul <2 x double> %15, <double -1.000000e+00, double -1.000000e+00>
  store <2 x double> %Vop, <2 x double>* %allocaVec5
  %16 = load <2 x double>, <2 x double>* %allocaVec5, align 4
  %extractE = extractelement <2 x double> %16, i64 0
  %extractE13 = extractelement <2 x double> %16, i64 1
  %sum = fadd double %extractE, %extractE13
  %sum14 = fadd double %sum, %extractE13
  %17 = fmul double %14, -1.000000e+00
  %Fmul = fmul double %17, 3.000000e+00
  store double %17, double* %Recovery
  %Fcmp = fcmp une double %sum14, %Fmul
  br i1 %Fcmp, label %18, label %22

; <label>:18:                                     ; preds = %13
  %remThree = fdiv double %sum14, %extractE
  %FcmpThree = fcmp une double %remThree, 3.000000e+00
  br i1 %FcmpThree, label %19, label %20

; <label>:19:                                     ; preds = %18
  store double %17, double* %Recovery, align 8
  br label %21

; <label>:20:                                     ; preds = %18
  store double %extractE, double* %Recovery, align 8
  br label %21

; <label>:21:                                     ; preds = %20, %19
  br label %22

; <label>:22:                                     ; preds = %13, %21
  %ReplaceInst = load double, double* %Recovery, align 8
  store double %ReplaceInst, double* %3, align 8
  br label %24

; <label>:23:                                     ; preds = %2
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec6
  store i32 0, i32* %5, align 4
  br label %24

; <label>:24:                                     ; preds = %23, %22
  %25 = load double, double* %3, align 8
  %26 = fcmp oeq double %25, 0.000000e+00
  br i1 %26, label %27, label %28

; <label>:27:                                     ; preds = %24
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec7
  store i32 0, i32* %6, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec10
  store i32 0, i32* %9, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec11
  store i32 0, i32* %10, align 4
  br label %85

; <label>:28:                                     ; preds = %24
  %29 = load double, double* %3, align 8
  %30 = call arm_aapcscc double @frexp(double %29, i32* %6) #7
  store double %30, double* %7, align 8
  %31 = load i32, i32* %6, align 4
  %32 = icmp sgt i32 %31, 16384
  br i1 %32, label %36, label %33

; <label>:33:                                     ; preds = %28
  %34 = load double, double* %7, align 8
  %35 = fcmp olt double %34, 1.000000e+00
  br i1 %35, label %40, label %36

; <label>:36:                                     ; preds = %33, %28
  %37 = load i32, i32* %5, align 4
  %insertElmt15 = insertelement <4 x i32> undef, i32 %37, i32 0
  %insertElmt16 = insertelement <4 x i32> %insertElmt15, i32 %37, i32 1
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %37, i32 2
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %37, i32 3
  store <4 x i32> %insertElmt18, <4 x i32>* %allocaVec6, align 16
  %38 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop19 = or <4 x i32> %38, <i32 32767, i32 32767, i32 32767, i32 32767>
  store <4 x i32> %Vop19, <4 x i32>* %allocaVec7
  %39 = or i32 %37, 32767
  store i32 %39, i32* %6, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec10
  store i32 0, i32* %9, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec11
  store i32 0, i32* %10, align 4
  br label %84

; <label>:40:                                     ; preds = %33
  %41 = load i32, i32* %6, align 4
  %42 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop20 = add <4 x i32> %42, <i32 16382, i32 16382, i32 16382, i32 16382>
  store <4 x i32> %Vop20, <4 x i32>* %allocaVec7
  %43 = add nsw i32 %41, 16382
  store i32 %43, i32* %6, align 4
  %44 = load i32, i32* %6, align 4
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %46, label %50

; <label>:46:                                     ; preds = %40
  %47 = load double, double* %7, align 8
  %48 = load i32, i32* %6, align 4
  %49 = call arm_aapcscc double @ldexp(double %47, i32 %48) #7
  store double %49, double* %7, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec7
  store i32 0, i32* %6, align 4
  br label %50

; <label>:50:                                     ; preds = %46, %40
  %51 = load i32, i32* %5, align 4
  %insertElmt21 = insertelement <4 x i32> undef, i32 %51, i32 0
  %insertElmt22 = insertelement <4 x i32> %insertElmt21, i32 %51, i32 1
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %51, i32 2
  %insertElmt24 = insertelement <4 x i32> %insertElmt23, i32 %51, i32 3
  store <4 x i32> %insertElmt24, <4 x i32>* %allocaVec6, align 16
  %52 = load i32, i32* %6, align 4
  %53 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %54 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop25 = or <4 x i32> %53, %54
  store <4 x i32> %Vop25, <4 x i32>* %allocaVec7
  %55 = or i32 %52, %51
  store i32 %55, i32* %6, align 4
  %56 = load double, double* %7, align 8
  %57 = call arm_aapcscc double @ldexp(double %56, i32 32) #7
  store double %57, double* %7, align 8
  %58 = load double, double* %7, align 8
  %59 = call arm_aapcscc double @floor(double %58) #9
  store double %59, double* %8, align 8
  %60 = load double, double* %8, align 8
  %insertElmt26 = insertelement <2 x double> undef, double %60, i32 0
  %insertElmt27 = insertelement <2 x double> %insertElmt26, double %60, i32 1
  store <2 x double> %insertElmt27, <2 x double>* %allocaVec9, align 16
  %61 = load <2 x double>, <2 x double>* %allocaVec9, align 16
  %Vop28 = fsub <2 x double> %61, <double 0x41E0000000000000, double 0x41E0000000000000>
  %62 = fsub double %60, 0x41E0000000000000
  %63 = fptosi double %62 to i32
  store i32 %63, i32* %CastInst
  %64 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %64, i32 0
  %insertCast29 = insertelement <4 x i32> %insertCast, i32 %64, i32 1
  %insertCast30 = insertelement <4 x i32> %insertCast29, i32 %64, i32 2
  %insertCast31 = insertelement <4 x i32> %insertCast30, i32 %64, i32 3
  store <4 x i32> %insertCast31, <4 x i32>* %CastInstVec, align 4
  %65 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop32 = add <4 x i32> %65, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %66 = add nsw i32 %63, 2147483647
  %Vop33 = add <4 x i32> %Vop32, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop33, <4 x i32>* %allocaVec10
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %9, align 4
  %68 = load double, double* %7, align 8
  %insertElmt34 = insertelement <2 x double> undef, double %68, i32 0
  %insertElmt35 = insertelement <2 x double> %insertElmt34, double %68, i32 1
  store <2 x double> %insertElmt35, <2 x double>* %allocaVec8, align 16
  %69 = load double, double* %8, align 8
  %insertElmt36 = insertelement <2 x double> undef, double %69, i32 0
  %insertElmt37 = insertelement <2 x double> %insertElmt36, double %69, i32 1
  store <2 x double> %insertElmt37, <2 x double>* %allocaVec9, align 16
  %70 = load <2 x double>, <2 x double>* %allocaVec8, align 16
  %71 = load <2 x double>, <2 x double>* %allocaVec9, align 16
  %Vop38 = fsub <2 x double> %70, %71
  %72 = fsub double %68, %69
  %73 = call arm_aapcscc double @ldexp(double %72, i32 32) #7
  store double %73, double* %7, align 8
  %74 = load double, double* %7, align 8
  %75 = call arm_aapcscc double @floor(double %74) #9
  store double %75, double* %8, align 8
  %76 = load double, double* %8, align 8
  %insertElmt39 = insertelement <2 x double> undef, double %76, i32 0
  %insertElmt40 = insertelement <2 x double> %insertElmt39, double %76, i32 1
  store <2 x double> %insertElmt40, <2 x double>* %allocaVec9, align 16
  %77 = load <2 x double>, <2 x double>* %allocaVec9, align 16
  %Vop41 = fsub <2 x double> %77, <double 0x41E0000000000000, double 0x41E0000000000000>
  %78 = fsub double %76, 0x41E0000000000000
  %79 = fptosi double %78 to i32
  store i32 %79, i32* %CastInst1
  %80 = load i32, i32* %CastInst1, align 4
  %insertCast42 = insertelement <4 x i32> undef, i32 %80, i32 0
  %insertCast43 = insertelement <4 x i32> %insertCast42, i32 %80, i32 1
  %insertCast44 = insertelement <4 x i32> %insertCast43, i32 %80, i32 2
  %insertCast45 = insertelement <4 x i32> %insertCast44, i32 %80, i32 3
  store <4 x i32> %insertCast45, <4 x i32>* %CastInstVec2, align 4
  %81 = load <4 x i32>, <4 x i32>* %CastInstVec2, align 4
  %Vop46 = add <4 x i32> %81, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %82 = add nsw i32 %79, 2147483647
  %Vop47 = add <4 x i32> %Vop46, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop47, <4 x i32>* %allocaVec11
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %10, align 4
  br label %84

; <label>:84:                                     ; preds = %50, %36
  br label %85

; <label>:85:                                     ; preds = %84, %27
  %86 = load i32, i32* %6, align 4
  %87 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop48 = ashr <4 x i32> %87, <i32 8, i32 8, i32 8, i32 8>
  %88 = ashr i32 %86, 8
  %89 = trunc i32 %88 to i8
  %90 = load i8*, i8** %4, align 4
  %91 = getelementptr inbounds i8, i8* %90, i32 0
  store i8 %89, i8* %91, align 1
  %92 = load i32, i32* %6, align 4
  %93 = trunc i32 %92 to i8
  %94 = load i8*, i8** %4, align 4
  %95 = getelementptr inbounds i8, i8* %94, i32 1
  store i8 %93, i8* %95, align 1
  %96 = load i32, i32* %9, align 4
  %97 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop49 = lshr <4 x i32> %97, <i32 24, i32 24, i32 24, i32 24>
  %98 = lshr i32 %96, 24
  %99 = trunc i32 %98 to i8
  %100 = load i8*, i8** %4, align 4
  %101 = getelementptr inbounds i8, i8* %100, i32 2
  store i8 %99, i8* %101, align 1
  %102 = load i32, i32* %9, align 4
  %103 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop50 = lshr <4 x i32> %103, <i32 16, i32 16, i32 16, i32 16>
  %104 = lshr i32 %102, 16
  %105 = trunc i32 %104 to i8
  %106 = load i8*, i8** %4, align 4
  %107 = getelementptr inbounds i8, i8* %106, i32 3
  store i8 %105, i8* %107, align 1
  %108 = load i32, i32* %9, align 4
  %109 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop51 = lshr <4 x i32> %109, <i32 8, i32 8, i32 8, i32 8>
  %110 = lshr i32 %108, 8
  %111 = trunc i32 %110 to i8
  %112 = load i8*, i8** %4, align 4
  %113 = getelementptr inbounds i8, i8* %112, i32 4
  store i8 %111, i8* %113, align 1
  %114 = load i32, i32* %9, align 4
  %115 = trunc i32 %114 to i8
  %116 = load i8*, i8** %4, align 4
  %117 = getelementptr inbounds i8, i8* %116, i32 5
  store i8 %115, i8* %117, align 1
  %118 = load i32, i32* %10, align 4
  %119 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop52 = lshr <4 x i32> %119, <i32 24, i32 24, i32 24, i32 24>
  %120 = lshr i32 %118, 24
  %121 = trunc i32 %120 to i8
  %122 = load i8*, i8** %4, align 4
  %123 = getelementptr inbounds i8, i8* %122, i32 6
  store i8 %121, i8* %123, align 1
  %124 = load i32, i32* %10, align 4
  %125 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop53 = lshr <4 x i32> %125, <i32 16, i32 16, i32 16, i32 16>
  %126 = lshr i32 %124, 16
  %127 = trunc i32 %126 to i8
  %128 = load i8*, i8** %4, align 4
  %129 = getelementptr inbounds i8, i8* %128, i32 7
  store i8 %127, i8* %129, align 1
  %130 = load i32, i32* %10, align 4
  %131 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop54 = lshr <4 x i32> %131, <i32 8, i32 8, i32 8, i32 8>
  %132 = lshr i32 %130, 8
  %133 = trunc i32 %132 to i8
  %134 = load i8*, i8** %4, align 4
  %135 = getelementptr inbounds i8, i8* %134, i32 8
  store i8 %133, i8* %135, align 1
  %136 = load i32, i32* %10, align 4
  %137 = trunc i32 %136 to i8
  %138 = load i8*, i8** %4, align 4
  %139 = getelementptr inbounds i8, i8* %138, i32 9
  store i8 %137, i8* %139, align 1
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @putMyBits(i32, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** @bs, align 4
  %6 = load i32, i32* %3, align 4
  %7 = load i32, i32* %4, align 4
  call arm_aapcscc void @putbits(%struct.bit_stream_struc* %5, i32 %6, i32 %7)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @III_format_bitstream(%struct.lame_global_flags*, i32, [2 x [576 x i32]]*, %struct.III_side_info_t*, [2 x %struct.III_scalefac_t]*, %struct.bit_stream_struc*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %7 = alloca %struct.lame_global_flags*, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %9 = alloca [2 x [576 x i32]]*, align 4
  %10 = alloca %struct.III_side_info_t*, align 4
  %11 = alloca [2 x %struct.III_scalefac_t]*, align 4
  %12 = alloca %struct.bit_stream_struc*, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %7, align 4
  store i32 %1, i32* %8, align 4
  store [2 x [576 x i32]]* %2, [2 x [576 x i32]]** %9, align 4
  store %struct.III_side_info_t* %3, %struct.III_side_info_t** %10, align 4
  store [2 x %struct.III_scalefac_t]* %4, [2 x %struct.III_scalefac_t]** %11, align 4
  store %struct.bit_stream_struc* %5, %struct.bit_stream_struc** %12, align 4
  %15 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %12, align 4
  store %struct.bit_stream_struc* %15, %struct.bit_stream_struc** @bs, align 4
  %16 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %17 = icmp eq %struct.BF_FrameData* %16, null
  br i1 %17, label %18, label %27

; <label>:18:                                     ; preds = %6
  %19 = call arm_aapcscc i8* @calloc(i32 1, i32 96)
  %20 = bitcast i8* %19 to %struct.BF_FrameData*
  store %struct.BF_FrameData* %20, %struct.BF_FrameData** @frameData, align 4
  %21 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %22 = icmp ne %struct.BF_FrameData* %21, null
  br i1 %22, label %24, label %23

; <label>:23:                                     ; preds = %18
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.156, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 73, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__func__.III_format_bitstream, i32 0, i32 0))
  br label %24

; <label>:24:                                     ; preds = %23, %18
  %25 = phi i1 [ true, %18 ], [ false, %23 ]
  %26 = zext i1 %25 to i32
  br label %27

; <label>:27:                                     ; preds = %24, %6
  %28 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** @frameResults, align 4
  %29 = icmp eq %struct.BF_FrameResults* %28, null
  br i1 %29, label %30, label %39

; <label>:30:                                     ; preds = %27
  %31 = call arm_aapcscc i8* @calloc(i32 1, i32 12)
  %32 = bitcast i8* %31 to %struct.BF_FrameResults*
  store %struct.BF_FrameResults* %32, %struct.BF_FrameResults** @frameResults, align 4
  %33 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** @frameResults, align 4
  %34 = icmp ne %struct.BF_FrameResults* %33, null
  br i1 %34, label %36, label %35

; <label>:35:                                     ; preds = %30
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.158, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 78, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__func__.III_format_bitstream, i32 0, i32 0))
  br label %36

; <label>:36:                                     ; preds = %35, %30
  %37 = phi i1 [ true, %30 ], [ false, %35 ]
  %38 = zext i1 %37 to i32
  br label %39

; <label>:39:                                     ; preds = %36, %27
  %40 = load i32, i32* @PartHoldersInitialized, align 4
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %96, label %42

; <label>:42:                                     ; preds = %39
  %43 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 14)
  store %struct.BF_PartHolder* %43, %struct.BF_PartHolder** @headerPH, align 4
  %44 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 12)
  store %struct.BF_PartHolder* %44, %struct.BF_PartHolder** @frameSIPH, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec5
  store i32 0, i32* %14, align 4
  br label %45

; <label>:45:                                     ; preds = %52, %42
  %46 = load i32, i32* %14, align 4
  %47 = icmp slt i32 %46, 2
  br i1 %47, label %48, label %56

; <label>:48:                                     ; preds = %45
  %49 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 8)
  %50 = load i32, i32* %14, align 4
  %51 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i32 0, i32 %50
  store %struct.BF_PartHolder* %49, %struct.BF_PartHolder** %51, align 4
  br label %52

; <label>:52:                                     ; preds = %48
  %53 = load i32, i32* %14, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %53, i32 0
  %insertElmt6 = insertelement <4 x i32> %insertElmt, i32 %53, i32 1
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %53, i32 2
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %53, i32 3
  store <4 x i32> %insertElmt8, <4 x i32>* %allocaVec5, align 16
  %54 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop = add <4 x i32> %54, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec5
  %55 = add nsw i32 %53, 1
  store i32 %55, i32* %14, align 4
  br label %45

; <label>:56:                                     ; preds = %45
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec4
  store i32 0, i32* %13, align 4
  br label %57

; <label>:57:                                     ; preds = %90, %56
  %58 = load i32, i32* %13, align 4
  %59 = icmp slt i32 %58, 2
  br i1 %59, label %60, label %94

; <label>:60:                                     ; preds = %57
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec5
  store i32 0, i32* %14, align 4
  br label %61

; <label>:61:                                     ; preds = %85, %60
  %62 = load i32, i32* %14, align 4
  %63 = icmp slt i32 %62, 2
  br i1 %63, label %64, label %89

; <label>:64:                                     ; preds = %61
  %65 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 32)
  %66 = load i32, i32* %13, align 4
  %67 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i32 0, i32 %66
  %68 = load i32, i32* %14, align 4
  %69 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %67, i32 0, i32 %68
  store %struct.BF_PartHolder* %65, %struct.BF_PartHolder** %69, align 4
  %70 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 64)
  %71 = load i32, i32* %13, align 4
  %72 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i32 0, i32 %71
  %73 = load i32, i32* %14, align 4
  %74 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %72, i32 0, i32 %73
  store %struct.BF_PartHolder* %70, %struct.BF_PartHolder** %74, align 4
  %75 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 576)
  %76 = load i32, i32* %13, align 4
  %77 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i32 0, i32 %76
  %78 = load i32, i32* %14, align 4
  %79 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %77, i32 0, i32 %78
  store %struct.BF_PartHolder* %75, %struct.BF_PartHolder** %79, align 4
  %80 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 4)
  %81 = load i32, i32* %13, align 4
  %82 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @userSpectrumPH, i32 0, i32 %81
  %83 = load i32, i32* %14, align 4
  %84 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %82, i32 0, i32 %83
  store %struct.BF_PartHolder* %80, %struct.BF_PartHolder** %84, align 4
  br label %85

; <label>:85:                                     ; preds = %64
  %86 = load i32, i32* %14, align 4
  %87 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop9 = add <4 x i32> %87, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop9, <4 x i32>* %allocaVec5
  %88 = add nsw i32 %86, 1
  store i32 %88, i32* %14, align 4
  br label %61

; <label>:89:                                     ; preds = %61
  br label %90

; <label>:90:                                     ; preds = %89
  %91 = load i32, i32* %13, align 4
  %insertElmt10 = insertelement <4 x i32> undef, i32 %91, i32 0
  %insertElmt11 = insertelement <4 x i32> %insertElmt10, i32 %91, i32 1
  %insertElmt12 = insertelement <4 x i32> %insertElmt11, i32 %91, i32 2
  %insertElmt13 = insertelement <4 x i32> %insertElmt12, i32 %91, i32 3
  store <4 x i32> %insertElmt13, <4 x i32>* %allocaVec4, align 16
  %92 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop14 = add <4 x i32> %92, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop14, <4 x i32>* %allocaVec4
  %93 = add nsw i32 %91, 1
  store i32 %93, i32* %13, align 4
  br label %57

; <label>:94:                                     ; preds = %57
  %95 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 8)
  store %struct.BF_PartHolder* %95, %struct.BF_PartHolder** @userFrameDataPH, align 4
  store i32 1, i32* @PartHoldersInitialized, align 4
  br label %96

; <label>:96:                                     ; preds = %94, %39
  %97 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %98 = load %struct.III_side_info_t*, %struct.III_side_info_t** %10, align 4
  %99 = call arm_aapcscc i32 @encodeSideInfo(%struct.lame_global_flags* %97, %struct.III_side_info_t* %98)
  %100 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %101 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %9, align 4
  %102 = load %struct.III_side_info_t*, %struct.III_side_info_t** %10, align 4
  %103 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %11, align 4
  call arm_aapcscc void @encodeMainData(%struct.lame_global_flags* %100, [2 x [576 x i32]]* %101, %struct.III_side_info_t* %102, [2 x %struct.III_scalefac_t]* %103)
  %104 = load %struct.III_side_info_t*, %struct.III_side_info_t** %10, align 4
  %105 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %104, i32 0, i32 2
  %106 = load i32, i32* %105, align 4
  call arm_aapcscc void @drain_into_ancillary_data(i32 %106)
  %107 = load i32, i32* %8, align 4
  %108 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %109 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %108, i32 0, i32 0
  store i32 %107, i32* %109, align 4
  %110 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %111 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %110, i32 0, i32 45
  %112 = load i32, i32* %111, align 4
  %113 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %114 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %113, i32 0, i32 1
  store i32 %112, i32* %114, align 4
  %115 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %116 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %115, i32 0, i32 46
  %117 = load i32, i32* %116, align 4
  %118 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %119 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %118, i32 0, i32 2
  store i32 %117, i32* %119, align 4
  %120 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %121 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %120, i32 0, i32 1
  %122 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %121, align 4
  %123 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %124 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %123, i32 0, i32 3
  store %struct.BF_BitstreamPart* %122, %struct.BF_BitstreamPart** %124, align 4
  %125 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 4
  %126 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %125, i32 0, i32 1
  %127 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %126, align 4
  %128 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %129 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %128, i32 0, i32 4
  store %struct.BF_BitstreamPart* %127, %struct.BF_BitstreamPart** %129, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec5
  store i32 0, i32* %14, align 4
  br label %130

; <label>:130:                                    ; preds = %146, %96
  %131 = load i32, i32* %14, align 4
  %132 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %133 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %132, i32 0, i32 46
  %134 = load i32, i32* %133, align 4
  %135 = icmp slt i32 %131, %134
  br i1 %135, label %136, label %150

; <label>:136:                                    ; preds = %130
  %137 = load i32, i32* %14, align 4
  %138 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i32 0, i32 %137
  %139 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %138, align 4
  %140 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %139, i32 0, i32 1
  %141 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %140, align 4
  %142 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %143 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %142, i32 0, i32 5
  %144 = load i32, i32* %14, align 4
  %145 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %143, i32 0, i32 %144
  store %struct.BF_BitstreamPart* %141, %struct.BF_BitstreamPart** %145, align 4
  br label %146

; <label>:146:                                    ; preds = %136
  %147 = load i32, i32* %14, align 4
  %148 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop15 = add <4 x i32> %148, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop15, <4 x i32>* %allocaVec5
  %149 = add nsw i32 %147, 1
  store i32 %149, i32* %14, align 4
  br label %130

; <label>:150:                                    ; preds = %130
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec4
  store i32 0, i32* %13, align 4
  br label %151

; <label>:151:                                    ; preds = %237, %150
  %152 = load i32, i32* %13, align 4
  %153 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %154 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %153, i32 0, i32 45
  %155 = load i32, i32* %154, align 4
  %156 = icmp slt i32 %152, %155
  br i1 %156, label %157, label %238

; <label>:157:                                    ; preds = %151
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec5
  store i32 0, i32* %14, align 4
  br label %158

; <label>:158:                                    ; preds = %226, %157
  %159 = load i32, i32* %14, align 4
  %160 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %161 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %160, i32 0, i32 46
  %162 = load i32, i32* %161, align 4
  %163 = icmp slt i32 %159, %162
  br i1 %163, label %164, label %227

; <label>:164:                                    ; preds = %158
  %165 = load i32, i32* %13, align 4
  %166 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i32 0, i32 %165
  %167 = load i32, i32* %14, align 4
  %168 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %166, i32 0, i32 %167
  %169 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %168, align 4
  %170 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %169, i32 0, i32 1
  %171 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %170, align 4
  %172 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %173 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %172, i32 0, i32 6
  %174 = load i32, i32* %13, align 4
  %175 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %173, i32 0, i32 %174
  %176 = load i32, i32* %14, align 4
  %177 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %175, i32 0, i32 %176
  store %struct.BF_BitstreamPart* %171, %struct.BF_BitstreamPart** %177, align 4
  %178 = load i32, i32* %13, align 4
  %179 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i32 0, i32 %178
  %180 = load i32, i32* %14, align 4
  %181 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %179, i32 0, i32 %180
  %182 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %181, align 4
  %183 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %182, i32 0, i32 1
  %184 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %183, align 4
  %185 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %186 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %185, i32 0, i32 7
  %187 = load i32, i32* %13, align 4
  %188 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %186, i32 0, i32 %187
  %189 = load i32, i32* %14, align 4
  %190 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %188, i32 0, i32 %189
  store %struct.BF_BitstreamPart* %184, %struct.BF_BitstreamPart** %190, align 4
  %191 = load i32, i32* %13, align 4
  %192 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i32 0, i32 %191
  %193 = load i32, i32* %14, align 4
  %194 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %192, i32 0, i32 %193
  %195 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %194, align 4
  %196 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %195, i32 0, i32 1
  %197 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %196, align 4
  %198 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %199 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %198, i32 0, i32 8
  %200 = load i32, i32* %13, align 4
  %201 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %199, i32 0, i32 %200
  %202 = load i32, i32* %14, align 4
  %203 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %201, i32 0, i32 %202
  store %struct.BF_BitstreamPart* %197, %struct.BF_BitstreamPart** %203, align 4
  %204 = load i32, i32* %13, align 4
  %205 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @userSpectrumPH, i32 0, i32 %204
  %206 = load i32, i32* %14, align 4
  %207 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %205, i32 0, i32 %206
  %208 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %207, align 4
  %209 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %208, i32 0, i32 1
  %210 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %209, align 4
  %211 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %212 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %211, i32 0, i32 9
  %213 = load i32, i32* %13, align 4
  %214 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %212, i32 0, i32 %213
  %215 = load i32, i32* %14, align 4
  %216 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %214, i32 0, i32 %215
  store %struct.BF_BitstreamPart* %210, %struct.BF_BitstreamPart** %216, align 4
  br label %217

; <label>:217:                                    ; preds = %164
  %218 = load i32, i32* %14, align 4
  %219 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop16 = add <4 x i32> %219, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop16, <4 x i32>* %allocaVec5
  %220 = load <4 x i32>, <4 x i32>* %allocaVec5, align 4
  %extractE = extractelement <4 x i32> %220, i64 0
  %extractE17 = extractelement <4 x i32> %220, i64 1
  %extractE18 = extractelement <4 x i32> %220, i64 2
  %sum = add i32 %extractE, %extractE17
  %sum19 = add i32 %sum, %extractE18
  %221 = add nsw i32 %218, 1
  %Fmul = mul i32 %221, 3
  store i32 %221, i32* %Recovery
  %Fcmp = icmp ne i32 %sum19, %Fmul
  br i1 %Fcmp, label %222, label %226

; <label>:222:                                    ; preds = %217
  %remThree = sdiv i32 %sum19, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %223, label %224

; <label>:223:                                    ; preds = %222
  store i32 %221, i32* %Recovery, align 4
  br label %225

; <label>:224:                                    ; preds = %222
  store i32 %extractE, i32* %Recovery, align 4
  br label %225

; <label>:225:                                    ; preds = %224, %223
  br label %226

; <label>:226:                                    ; preds = %217, %225
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %14, align 4
  br label %158

; <label>:227:                                    ; preds = %158
  br label %228

; <label>:228:                                    ; preds = %227
  %229 = load i32, i32* %13, align 4
  %230 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop20 = add <4 x i32> %230, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop20, <4 x i32>* %allocaVec4
  %231 = load <4 x i32>, <4 x i32>* %allocaVec4, align 4
  %extractE22 = extractelement <4 x i32> %231, i64 0
  %extractE23 = extractelement <4 x i32> %231, i64 1
  %extractE24 = extractelement <4 x i32> %231, i64 2
  %sum25 = add i32 %extractE22, %extractE23
  %sum26 = add i32 %sum25, %extractE24
  %232 = add nsw i32 %229, 1
  %Fmul21 = mul i32 %232, 3
  store i32 %232, i32* %Recovery1
  %Fcmp27 = icmp ne i32 %sum26, %Fmul21
  br i1 %Fcmp27, label %233, label %237

; <label>:233:                                    ; preds = %228
  %remThree28 = sdiv i32 %sum26, %extractE22
  %FcmpThree29 = icmp ne i32 %remThree28, 3
  br i1 %FcmpThree29, label %234, label %235

; <label>:234:                                    ; preds = %233
  store i32 %232, i32* %Recovery1, align 4
  br label %236

; <label>:235:                                    ; preds = %233
  store i32 %extractE22, i32* %Recovery1, align 4
  br label %236

; <label>:236:                                    ; preds = %235, %234
  br label %237

; <label>:237:                                    ; preds = %228, %236
  %ReplaceInst30 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst30, i32* %13, align 4
  br label %151

; <label>:238:                                    ; preds = %151
  %239 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @userFrameDataPH, align 4
  %240 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %239, i32 0, i32 1
  %241 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %240, align 4
  %242 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %243 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %242, i32 0, i32 10
  store %struct.BF_BitstreamPart* %241, %struct.BF_BitstreamPart** %243, align 4
  %244 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %245 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** @frameResults, align 4
  call arm_aapcscc void @BF_BitstreamFrame(%struct.BF_FrameData* %244, %struct.BF_FrameResults* %245)
  %246 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** @frameResults, align 4
  %247 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %246, i32 0, i32 2
  %248 = load i32, i32* %247, align 4
  %249 = load %struct.III_side_info_t*, %struct.III_side_info_t** %10, align 4
  %250 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %249, i32 0, i32 0
  store i32 %248, i32* %250, align 4
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @encodeSideInfo(%struct.lame_global_flags*, %struct.III_side_info_t*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %Recovery5 = alloca i32, align 4
  %3 = alloca %struct.lame_global_flags*, align 4
  %4 = alloca %struct.III_side_info_t*, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec14 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %11 = alloca %struct.BF_PartHolder**, align 4
  %12 = alloca %struct.BF_PartHolder**, align 4
  %13 = alloca %struct.gr_info*, align 4
  %14 = alloca %struct.BF_PartHolder**, align 4
  %15 = alloca %struct.gr_info*, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %3, align 4
  store %struct.III_side_info_t* %1, %struct.III_side_info_t** %4, align 4
  store i32 65535, i32* @crc, align 4
  %16 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %17 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %16, i32 0, i32 1
  %18 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %17, align 4
  %19 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %18, i32 0, i32 0
  store i32 0, i32* %19, align 4
  %20 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %21 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %20, i32 4095, i32 12)
  store %struct.BF_PartHolder* %21, %struct.BF_PartHolder** @headerPH, align 4
  %22 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %23 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %24 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %23, i32 0, i32 43
  %25 = load i32, i32* %24, align 4
  %26 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %22, i32 %25, i32 1)
  store %struct.BF_PartHolder* %26, %struct.BF_PartHolder** @headerPH, align 4
  %27 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %28 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %27, i32 1, i32 2)
  store %struct.BF_PartHolder* %28, %struct.BF_PartHolder** @headerPH, align 4
  %29 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %30 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %31 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %30, i32 0, i32 14
  %32 = load i32, i32* %31, align 4
  %33 = icmp ne i32 %32, 0
  %34 = xor i1 %33, true
  %35 = zext i1 %34 to i32
  %36 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %29, i32 %35, i32 1)
  store %struct.BF_PartHolder* %36, %struct.BF_PartHolder** @headerPH, align 4
  %37 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %38 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %39 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %38, i32 0, i32 50
  %40 = load i32, i32* %39, align 4
  %41 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %37, i32 %40, i32 4)
  store %struct.BF_PartHolder* %41, %struct.BF_PartHolder** @headerPH, align 4
  %42 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %43 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %44 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %43, i32 0, i32 51
  %45 = load i32, i32* %44, align 4
  %46 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %42, i32 %45, i32 2)
  store %struct.BF_PartHolder* %46, %struct.BF_PartHolder** @headerPH, align 4
  %47 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %48 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %49 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %48, i32 0, i32 44
  %50 = load i32, i32* %49, align 4
  %51 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %47, i32 %50, i32 1)
  store %struct.BF_PartHolder* %51, %struct.BF_PartHolder** @headerPH, align 4
  %52 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %53 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %54 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %53, i32 0, i32 16
  %55 = load i32, i32* %54, align 4
  %56 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %52, i32 %55, i32 1)
  store %struct.BF_PartHolder* %56, %struct.BF_PartHolder** @headerPH, align 4
  %57 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %58 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %59 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %58, i32 0, i32 8
  %60 = load i32, i32* %59, align 4
  %61 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %57, i32 %60, i32 2)
  store %struct.BF_PartHolder* %61, %struct.BF_PartHolder** @headerPH, align 4
  %62 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %63 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %64 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %63, i32 0, i32 52
  %65 = load i32, i32* %64, align 4
  %66 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %62, i32 %65, i32 2)
  store %struct.BF_PartHolder* %66, %struct.BF_PartHolder** @headerPH, align 4
  %67 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %68 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %69 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %68, i32 0, i32 12
  %70 = load i32, i32* %69, align 4
  %71 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %67, i32 %70, i32 1)
  store %struct.BF_PartHolder* %71, %struct.BF_PartHolder** @headerPH, align 4
  %72 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %73 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %74 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %73, i32 0, i32 13
  %75 = load i32, i32* %74, align 4
  %76 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %72, i32 %75, i32 1)
  store %struct.BF_PartHolder* %76, %struct.BF_PartHolder** @headerPH, align 4
  %77 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %78 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %79 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %78, i32 0, i32 38
  %80 = load i32, i32* %79, align 4
  %81 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %77, i32 %80, i32 2)
  store %struct.BF_PartHolder* %81, %struct.BF_PartHolder** @headerPH, align 4
  store <4 x i32> <i32 32, i32 32, i32 32, i32 32>, <4 x i32>* %allocaVec16
  store i32 32, i32* %10, align 4
  %82 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 4
  %83 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %82, i32 0, i32 1
  %84 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %83, align 4
  %85 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %84, i32 0, i32 0
  store i32 0, i32* %85, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec12
  store i32 0, i32* %6, align 4
  br label %86

; <label>:86:                                     ; preds = %99, %2
  %87 = load i32, i32* %6, align 4
  %88 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %89 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %88, i32 0, i32 46
  %90 = load i32, i32* %89, align 4
  %91 = icmp slt i32 %87, %90
  br i1 %91, label %92, label %103

; <label>:92:                                     ; preds = %86
  %93 = load i32, i32* %6, align 4
  %94 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i32 0, i32 %93
  %95 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %94, align 4
  %96 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %95, i32 0, i32 1
  %97 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %96, align 4
  %98 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %97, i32 0, i32 0
  store i32 0, i32* %98, align 4
  br label %99

; <label>:99:                                     ; preds = %92
  %100 = load i32, i32* %6, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %100, i32 0
  %insertElmt17 = insertelement <4 x i32> %insertElmt, i32 %100, i32 1
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %100, i32 2
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %100, i32 3
  store <4 x i32> %insertElmt19, <4 x i32>* %allocaVec12, align 16
  %101 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop = add <4 x i32> %101, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec12
  %102 = add nsw i32 %100, 1
  store i32 %102, i32* %6, align 4
  br label %86

; <label>:103:                                    ; preds = %86
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec11
  store i32 0, i32* %5, align 4
  br label %104

; <label>:104:                                    ; preds = %131, %103
  %105 = load i32, i32* %5, align 4
  %106 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %107 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %106, i32 0, i32 45
  %108 = load i32, i32* %107, align 4
  %109 = icmp slt i32 %105, %108
  br i1 %109, label %110, label %135

; <label>:110:                                    ; preds = %104
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec12
  store i32 0, i32* %6, align 4
  br label %111

; <label>:111:                                    ; preds = %126, %110
  %112 = load i32, i32* %6, align 4
  %113 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %114 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %113, i32 0, i32 46
  %115 = load i32, i32* %114, align 4
  %116 = icmp slt i32 %112, %115
  br i1 %116, label %117, label %130

; <label>:117:                                    ; preds = %111
  %118 = load i32, i32* %5, align 4
  %119 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i32 0, i32 %118
  %120 = load i32, i32* %6, align 4
  %121 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %119, i32 0, i32 %120
  %122 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %121, align 4
  %123 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %122, i32 0, i32 1
  %124 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %123, align 4
  %125 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %124, i32 0, i32 0
  store i32 0, i32* %125, align 4
  br label %126

; <label>:126:                                    ; preds = %117
  %127 = load i32, i32* %6, align 4
  %128 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop20 = add <4 x i32> %128, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop20, <4 x i32>* %allocaVec12
  %129 = add nsw i32 %127, 1
  store i32 %129, i32* %6, align 4
  br label %111

; <label>:130:                                    ; preds = %111
  br label %131

; <label>:131:                                    ; preds = %130
  %132 = load i32, i32* %5, align 4
  %insertElmt21 = insertelement <4 x i32> undef, i32 %132, i32 0
  %insertElmt22 = insertelement <4 x i32> %insertElmt21, i32 %132, i32 1
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %132, i32 2
  %insertElmt24 = insertelement <4 x i32> %insertElmt23, i32 %132, i32 3
  store <4 x i32> %insertElmt24, <4 x i32>* %allocaVec11, align 16
  %133 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop25 = add <4 x i32> %133, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop25, <4 x i32>* %allocaVec11
  %134 = add nsw i32 %132, 1
  store i32 %134, i32* %5, align 4
  br label %104

; <label>:135:                                    ; preds = %104
  %136 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %137 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %136, i32 0, i32 43
  %138 = load i32, i32* %137, align 4
  %139 = icmp eq i32 %138, 1
  br i1 %139, label %140, label %408

; <label>:140:                                    ; preds = %135
  %141 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 4
  %142 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %143 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %142, i32 0, i32 0
  %144 = load i32, i32* %143, align 4
  %145 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %141, i32 %144, i32 9)
  store %struct.BF_PartHolder* %145, %struct.BF_PartHolder** @frameSIPH, align 4
  %146 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %147 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %146, i32 0, i32 46
  %148 = load i32, i32* %147, align 4
  %149 = icmp eq i32 %148, 2
  br i1 %149, label %150, label %156

; <label>:150:                                    ; preds = %140
  %151 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 4
  %152 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %153 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %152, i32 0, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %151, i32 %154, i32 3)
  store %struct.BF_PartHolder* %155, %struct.BF_PartHolder** @frameSIPH, align 4
  br label %162

; <label>:156:                                    ; preds = %140
  %157 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 4
  %158 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %159 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %158, i32 0, i32 1
  %160 = load i32, i32* %159, align 4
  %161 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %157, i32 %160, i32 5)
  store %struct.BF_PartHolder* %161, %struct.BF_PartHolder** @frameSIPH, align 4
  br label %162

; <label>:162:                                    ; preds = %156, %150
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec12
  store i32 0, i32* %6, align 4
  br label %163

; <label>:163:                                    ; preds = %198, %162
  %164 = load i32, i32* %6, align 4
  %165 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %166 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %165, i32 0, i32 46
  %167 = load i32, i32* %166, align 4
  %168 = icmp slt i32 %164, %167
  br i1 %168, label %169, label %202

; <label>:169:                                    ; preds = %163
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec13
  store i32 0, i32* %7, align 4
  br label %170

; <label>:170:                                    ; preds = %196, %169
  %171 = load i32, i32* %7, align 4
  %172 = icmp slt i32 %171, 4
  br i1 %172, label %173, label %197

; <label>:173:                                    ; preds = %170
  %174 = load i32, i32* %6, align 4
  %175 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i32 0, i32 %174
  store %struct.BF_PartHolder** %175, %struct.BF_PartHolder*** %11, align 4
  %176 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %11, align 4
  %177 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %176, align 4
  %178 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %179 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %178, i32 0, i32 3
  %180 = load i32, i32* %6, align 4
  %181 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %179, i32 0, i32 %180
  %182 = load i32, i32* %7, align 4
  %183 = getelementptr inbounds [4 x i32], [4 x i32]* %181, i32 0, i32 %182
  %184 = load i32, i32* %183, align 4
  %185 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %177, i32 %184, i32 1)
  %186 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %11, align 4
  store %struct.BF_PartHolder* %185, %struct.BF_PartHolder** %186, align 4
  br label %187

; <label>:187:                                    ; preds = %173
  %188 = load i32, i32* %7, align 4
  %insertElmt26 = insertelement <4 x i32> undef, i32 %188, i32 0
  %insertElmt27 = insertelement <4 x i32> %insertElmt26, i32 %188, i32 1
  %insertElmt28 = insertelement <4 x i32> %insertElmt27, i32 %188, i32 2
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %188, i32 3
  store <4 x i32> %insertElmt29, <4 x i32>* %allocaVec13, align 16
  %189 = load <4 x i32>, <4 x i32>* %allocaVec13, align 16
  %Vop30 = add <4 x i32> %189, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop30, <4 x i32>* %allocaVec13
  %190 = load <4 x i32>, <4 x i32>* %allocaVec13, align 4
  %extractE = extractelement <4 x i32> %190, i64 0
  %extractE31 = extractelement <4 x i32> %190, i64 1
  %extractE32 = extractelement <4 x i32> %190, i64 2
  %sum = add i32 %extractE, %extractE31
  %sum33 = add i32 %sum, %extractE32
  %191 = add nsw i32 %188, 1
  %Fmul = mul i32 %191, 3
  store i32 %191, i32* %Recovery
  %Fcmp = icmp ne i32 %sum33, %Fmul
  br i1 %Fcmp, label %192, label %196

; <label>:192:                                    ; preds = %187
  %remThree = sdiv i32 %sum33, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %193, label %194

; <label>:193:                                    ; preds = %192
  store i32 %191, i32* %Recovery, align 4
  br label %195

; <label>:194:                                    ; preds = %192
  store i32 %extractE, i32* %Recovery, align 4
  br label %195

; <label>:195:                                    ; preds = %194, %193
  br label %196

; <label>:196:                                    ; preds = %187, %195
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %7, align 4
  br label %170

; <label>:197:                                    ; preds = %170
  br label %198

; <label>:198:                                    ; preds = %197
  %199 = load i32, i32* %6, align 4
  %200 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop34 = add <4 x i32> %200, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop34, <4 x i32>* %allocaVec12
  %201 = add nsw i32 %199, 1
  store i32 %201, i32* %6, align 4
  br label %163

; <label>:202:                                    ; preds = %163
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec11
  store i32 0, i32* %5, align 4
  br label %203

; <label>:203:                                    ; preds = %393, %202
  %204 = load i32, i32* %5, align 4
  %205 = icmp slt i32 %204, 2
  br i1 %205, label %206, label %394

; <label>:206:                                    ; preds = %203
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec12
  store i32 0, i32* %6, align 4
  br label %207

; <label>:207:                                    ; preds = %379, %206
  %208 = load i32, i32* %6, align 4
  %209 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %210 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %209, i32 0, i32 46
  %211 = load i32, i32* %210, align 4
  %212 = icmp slt i32 %208, %211
  br i1 %212, label %213, label %383

; <label>:213:                                    ; preds = %207
  %214 = load i32, i32* %5, align 4
  %215 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i32 0, i32 %214
  %216 = load i32, i32* %6, align 4
  %217 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %215, i32 0, i32 %216
  store %struct.BF_PartHolder** %217, %struct.BF_PartHolder*** %12, align 4
  %218 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %219 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %218, i32 0, i32 4
  %220 = load i32, i32* %5, align 4
  %221 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %219, i32 0, i32 %220
  %222 = getelementptr inbounds %struct.anon, %struct.anon* %221, i32 0, i32 0
  %223 = load i32, i32* %6, align 4
  %224 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %222, i32 0, i32 %223
  %225 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %224, i32 0, i32 0
  store %struct.gr_info* %225, %struct.gr_info** %13, align 4
  %226 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %227 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %226, align 4
  %228 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %229 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %228, i32 0, i32 0
  %230 = load i32, i32* %229, align 4
  %231 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %227, i32 %230, i32 12)
  %232 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %231, %struct.BF_PartHolder** %232, align 4
  %233 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %234 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %233, align 4
  %235 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %236 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %235, i32 0, i32 1
  %237 = load i32, i32* %236, align 4
  %238 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %234, i32 %237, i32 9)
  %239 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %238, %struct.BF_PartHolder** %239, align 4
  %240 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %241 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %240, align 4
  %242 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %243 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %242, i32 0, i32 3
  %244 = load i32, i32* %243, align 4
  %245 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %241, i32 %244, i32 8)
  %246 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %245, %struct.BF_PartHolder** %246, align 4
  %247 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %248 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %247, align 4
  %249 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %250 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %249, i32 0, i32 4
  %251 = load i32, i32* %250, align 4
  %252 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %248, i32 %251, i32 4)
  %253 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %252, %struct.BF_PartHolder** %253, align 4
  %254 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %255 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %254, align 4
  %256 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %257 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %256, i32 0, i32 5
  %258 = load i32, i32* %257, align 4
  %259 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %255, i32 %258, i32 1)
  %260 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %259, %struct.BF_PartHolder** %260, align 4
  %261 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %262 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %261, i32 0, i32 5
  %263 = load i32, i32* %262, align 4
  %264 = icmp ne i32 %263, 0
  br i1 %264, label %265, label %316

; <label>:265:                                    ; preds = %213
  %266 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %267 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %266, align 4
  %268 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %269 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %268, i32 0, i32 6
  %270 = load i32, i32* %269, align 4
  %271 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %267, i32 %270, i32 2)
  %272 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %271, %struct.BF_PartHolder** %272, align 4
  %273 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %274 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %273, align 4
  %275 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %276 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %275, i32 0, i32 7
  %277 = load i32, i32* %276, align 4
  %278 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %274, i32 %277, i32 1)
  %279 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %278, %struct.BF_PartHolder** %279, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec14
  store i32 0, i32* %8, align 4
  br label %280

; <label>:280:                                    ; preds = %293, %265
  %281 = load i32, i32* %8, align 4
  %282 = icmp slt i32 %281, 2
  br i1 %282, label %283, label %297

; <label>:283:                                    ; preds = %280
  %284 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %285 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %284, align 4
  %286 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %287 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %286, i32 0, i32 8
  %288 = load i32, i32* %8, align 4
  %289 = getelementptr inbounds [3 x i32], [3 x i32]* %287, i32 0, i32 %288
  %290 = load i32, i32* %289, align 4
  %291 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %285, i32 %290, i32 5)
  %292 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %291, %struct.BF_PartHolder** %292, align 4
  br label %293

; <label>:293:                                    ; preds = %283
  %294 = load i32, i32* %8, align 4
  %insertElmt35 = insertelement <4 x i32> undef, i32 %294, i32 0
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %294, i32 1
  %insertElmt37 = insertelement <4 x i32> %insertElmt36, i32 %294, i32 2
  %insertElmt38 = insertelement <4 x i32> %insertElmt37, i32 %294, i32 3
  store <4 x i32> %insertElmt38, <4 x i32>* %allocaVec14, align 16
  %295 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %Vop39 = add <4 x i32> %295, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop39, <4 x i32>* %allocaVec14
  %296 = add nsw i32 %294, 1
  store i32 %296, i32* %8, align 4
  br label %280

; <label>:297:                                    ; preds = %280
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %9, align 4
  br label %298

; <label>:298:                                    ; preds = %311, %297
  %299 = load i32, i32* %9, align 4
  %300 = icmp slt i32 %299, 3
  br i1 %300, label %301, label %315

; <label>:301:                                    ; preds = %298
  %302 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %303 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %302, align 4
  %304 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %305 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %304, i32 0, i32 9
  %306 = load i32, i32* %9, align 4
  %307 = getelementptr inbounds [3 x i32], [3 x i32]* %305, i32 0, i32 %306
  %308 = load i32, i32* %307, align 4
  %309 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %303, i32 %308, i32 3)
  %310 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %309, %struct.BF_PartHolder** %310, align 4
  br label %311

; <label>:311:                                    ; preds = %301
  %312 = load i32, i32* %9, align 4
  %insertElmt40 = insertelement <4 x i32> undef, i32 %312, i32 0
  %insertElmt41 = insertelement <4 x i32> %insertElmt40, i32 %312, i32 1
  %insertElmt42 = insertelement <4 x i32> %insertElmt41, i32 %312, i32 2
  %insertElmt43 = insertelement <4 x i32> %insertElmt42, i32 %312, i32 3
  store <4 x i32> %insertElmt43, <4 x i32>* %allocaVec15, align 16
  %313 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop44 = add <4 x i32> %313, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop44, <4 x i32>* %allocaVec15
  %314 = add nsw i32 %312, 1
  store i32 %314, i32* %9, align 4
  br label %298

; <label>:315:                                    ; preds = %298
  br label %357

; <label>:316:                                    ; preds = %213
  %317 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %318 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %317, i32 0, i32 6
  %319 = load i32, i32* %318, align 4
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %322, label %321

; <label>:321:                                    ; preds = %316
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.171, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 380, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__.encodeSideInfo, i32 0, i32 0))
  br label %322

; <label>:322:                                    ; preds = %321, %316
  %323 = phi i1 [ true, %316 ], [ false, %321 ]
  %324 = zext i1 %323 to i32
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec14
  store i32 0, i32* %8, align 4
  br label %325

; <label>:325:                                    ; preds = %338, %322
  %326 = load i32, i32* %8, align 4
  %327 = icmp slt i32 %326, 3
  br i1 %327, label %328, label %342

; <label>:328:                                    ; preds = %325
  %329 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %330 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %329, align 4
  %331 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %332 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %331, i32 0, i32 8
  %333 = load i32, i32* %8, align 4
  %334 = getelementptr inbounds [3 x i32], [3 x i32]* %332, i32 0, i32 %333
  %335 = load i32, i32* %334, align 4
  %336 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %330, i32 %335, i32 5)
  %337 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %336, %struct.BF_PartHolder** %337, align 4
  br label %338

; <label>:338:                                    ; preds = %328
  %339 = load i32, i32* %8, align 4
  %340 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %Vop45 = add <4 x i32> %340, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop45, <4 x i32>* %allocaVec14
  %341 = add nsw i32 %339, 1
  store i32 %341, i32* %8, align 4
  br label %325

; <label>:342:                                    ; preds = %325
  %343 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %344 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %343, align 4
  %345 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %346 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %345, i32 0, i32 10
  %347 = load i32, i32* %346, align 4
  %348 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %344, i32 %347, i32 4)
  %349 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %348, %struct.BF_PartHolder** %349, align 4
  %350 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %351 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %350, align 4
  %352 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %353 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %352, i32 0, i32 11
  %354 = load i32, i32* %353, align 4
  %355 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %351, i32 %354, i32 3)
  %356 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %355, %struct.BF_PartHolder** %356, align 4
  br label %357

; <label>:357:                                    ; preds = %342, %315
  %358 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %359 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %358, align 4
  %360 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %361 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %360, i32 0, i32 12
  %362 = load i32, i32* %361, align 4
  %363 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %359, i32 %362, i32 1)
  %364 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %363, %struct.BF_PartHolder** %364, align 4
  %365 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %366 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %365, align 4
  %367 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %368 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %367, i32 0, i32 13
  %369 = load i32, i32* %368, align 4
  %370 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %366, i32 %369, i32 1)
  %371 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %370, %struct.BF_PartHolder** %371, align 4
  %372 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %373 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %372, align 4
  %374 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %375 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %374, i32 0, i32 14
  %376 = load i32, i32* %375, align 4
  %377 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %373, i32 %376, i32 1)
  %378 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %377, %struct.BF_PartHolder** %378, align 4
  br label %379

; <label>:379:                                    ; preds = %357
  %380 = load i32, i32* %6, align 4
  %381 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop46 = add <4 x i32> %381, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop46, <4 x i32>* %allocaVec12
  %382 = add nsw i32 %380, 1
  store i32 %382, i32* %6, align 4
  br label %207

; <label>:383:                                    ; preds = %207
  br label %384

; <label>:384:                                    ; preds = %383
  %385 = load i32, i32* %5, align 4
  %386 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop47 = add <4 x i32> %386, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop47, <4 x i32>* %allocaVec11
  %387 = load <4 x i32>, <4 x i32>* %allocaVec11, align 4
  %extractE49 = extractelement <4 x i32> %387, i64 0
  %extractE50 = extractelement <4 x i32> %387, i64 1
  %extractE51 = extractelement <4 x i32> %387, i64 2
  %sum52 = add i32 %extractE49, %extractE50
  %sum53 = add i32 %sum52, %extractE51
  %388 = add nsw i32 %385, 1
  %Fmul48 = mul i32 %388, 3
  store i32 %388, i32* %Recovery1
  %Fcmp54 = icmp ne i32 %sum53, %Fmul48
  br i1 %Fcmp54, label %389, label %393

; <label>:389:                                    ; preds = %384
  %remThree96 = sdiv i32 %sum53, %extractE49
  %FcmpThree97 = icmp ne i32 %remThree96, 3
  br i1 %FcmpThree97, label %390, label %391

; <label>:390:                                    ; preds = %389
  store i32 %388, i32* %Recovery1, align 4
  br label %392

; <label>:391:                                    ; preds = %389
  store i32 %extractE49, i32* %Recovery1, align 4
  br label %392

; <label>:392:                                    ; preds = %391, %390
  br label %393

; <label>:393:                                    ; preds = %384, %392
  %ReplaceInst106 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst106, i32* %5, align 4
  br label %203

; <label>:394:                                    ; preds = %203
  %395 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %396 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %395, i32 0, i32 46
  %397 = load i32, i32* %396, align 4
  %398 = icmp eq i32 %397, 2
  br i1 %398, label %399, label %403

; <label>:399:                                    ; preds = %394
  %400 = load i32, i32* %10, align 4
  %insertElmt55 = insertelement <4 x i32> undef, i32 %400, i32 0
  %insertElmt56 = insertelement <4 x i32> %insertElmt55, i32 %400, i32 1
  %insertElmt57 = insertelement <4 x i32> %insertElmt56, i32 %400, i32 2
  %insertElmt58 = insertelement <4 x i32> %insertElmt57, i32 %400, i32 3
  store <4 x i32> %insertElmt58, <4 x i32>* %allocaVec16, align 16
  %401 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop59 = add <4 x i32> %401, <i32 256, i32 256, i32 256, i32 256>
  store <4 x i32> %Vop59, <4 x i32>* %allocaVec16
  %402 = add nsw i32 %400, 256
  store i32 %402, i32* %10, align 4
  br label %407

; <label>:403:                                    ; preds = %394
  %404 = load i32, i32* %10, align 4
  %405 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop60 = add <4 x i32> %405, <i32 136, i32 136, i32 136, i32 136>
  store <4 x i32> %Vop60, <4 x i32>* %allocaVec16
  %406 = add nsw i32 %404, 136
  store i32 %406, i32* %10, align 4
  br label %407

; <label>:407:                                    ; preds = %403, %399
  br label %624

; <label>:408:                                    ; preds = %135
  %409 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 4
  %410 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %411 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %410, i32 0, i32 0
  %412 = load i32, i32* %411, align 4
  %413 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %409, i32 %412, i32 8)
  store %struct.BF_PartHolder* %413, %struct.BF_PartHolder** @frameSIPH, align 4
  %414 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %415 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %414, i32 0, i32 46
  %416 = load i32, i32* %415, align 4
  %417 = icmp eq i32 %416, 2
  br i1 %417, label %418, label %424

; <label>:418:                                    ; preds = %408
  %419 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 4
  %420 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %421 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %420, i32 0, i32 1
  %422 = load i32, i32* %421, align 4
  %423 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %419, i32 %422, i32 2)
  store %struct.BF_PartHolder* %423, %struct.BF_PartHolder** @frameSIPH, align 4
  br label %430

; <label>:424:                                    ; preds = %408
  %425 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 4
  %426 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %427 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %426, i32 0, i32 1
  %428 = load i32, i32* %427, align 4
  %429 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %425, i32 %428, i32 1)
  store %struct.BF_PartHolder* %429, %struct.BF_PartHolder** @frameSIPH, align 4
  br label %430

; <label>:430:                                    ; preds = %424, %418
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec11
  store i32 0, i32* %5, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec12
  store i32 0, i32* %6, align 4
  br label %431

; <label>:431:                                    ; preds = %609, %430
  %432 = load i32, i32* %6, align 4
  %433 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %434 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %433, i32 0, i32 46
  %435 = load i32, i32* %434, align 4
  %436 = icmp slt i32 %432, %435
  br i1 %436, label %437, label %610

; <label>:437:                                    ; preds = %431
  %438 = load i32, i32* %5, align 4
  %439 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i32 0, i32 %438
  %440 = load i32, i32* %6, align 4
  %441 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %439, i32 0, i32 %440
  store %struct.BF_PartHolder** %441, %struct.BF_PartHolder*** %14, align 4
  %442 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %443 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %442, i32 0, i32 4
  %444 = load i32, i32* %5, align 4
  %445 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %443, i32 0, i32 %444
  %446 = getelementptr inbounds %struct.anon, %struct.anon* %445, i32 0, i32 0
  %447 = load i32, i32* %6, align 4
  %448 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %446, i32 0, i32 %447
  %449 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %448, i32 0, i32 0
  store %struct.gr_info* %449, %struct.gr_info** %15, align 4
  %450 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %451 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %450, align 4
  %452 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %453 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %452, i32 0, i32 0
  %454 = load i32, i32* %453, align 4
  %455 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %451, i32 %454, i32 12)
  %456 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %455, %struct.BF_PartHolder** %456, align 4
  %457 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %458 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %457, align 4
  %459 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %460 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %459, i32 0, i32 1
  %461 = load i32, i32* %460, align 4
  %462 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %458, i32 %461, i32 9)
  %463 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %462, %struct.BF_PartHolder** %463, align 4
  %464 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %465 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %464, align 4
  %466 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %467 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %466, i32 0, i32 3
  %468 = load i32, i32* %467, align 4
  %469 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %465, i32 %468, i32 8)
  %470 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %469, %struct.BF_PartHolder** %470, align 4
  %471 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %472 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %471, align 4
  %473 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %474 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %473, i32 0, i32 4
  %475 = load i32, i32* %474, align 4
  %476 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %472, i32 %475, i32 9)
  %477 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %476, %struct.BF_PartHolder** %477, align 4
  %478 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %479 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %478, align 4
  %480 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %481 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %480, i32 0, i32 5
  %482 = load i32, i32* %481, align 4
  %483 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %479, i32 %482, i32 1)
  %484 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %483, %struct.BF_PartHolder** %484, align 4
  %485 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %486 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %485, i32 0, i32 5
  %487 = load i32, i32* %486, align 4
  %488 = icmp ne i32 %487, 0
  br i1 %488, label %489, label %546

; <label>:489:                                    ; preds = %437
  %490 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %491 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %490, align 4
  %492 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %493 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %492, i32 0, i32 6
  %494 = load i32, i32* %493, align 4
  %495 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %491, i32 %494, i32 2)
  %496 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %495, %struct.BF_PartHolder** %496, align 4
  %497 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %498 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %497, align 4
  %499 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %500 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %499, i32 0, i32 7
  %501 = load i32, i32* %500, align 4
  %502 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %498, i32 %501, i32 1)
  %503 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %502, %struct.BF_PartHolder** %503, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec14
  store i32 0, i32* %8, align 4
  br label %504

; <label>:504:                                    ; preds = %517, %489
  %505 = load i32, i32* %8, align 4
  %506 = icmp slt i32 %505, 2
  br i1 %506, label %507, label %521

; <label>:507:                                    ; preds = %504
  %508 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %509 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %508, align 4
  %510 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %511 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %510, i32 0, i32 8
  %512 = load i32, i32* %8, align 4
  %513 = getelementptr inbounds [3 x i32], [3 x i32]* %511, i32 0, i32 %512
  %514 = load i32, i32* %513, align 4
  %515 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %509, i32 %514, i32 5)
  %516 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %515, %struct.BF_PartHolder** %516, align 4
  br label %517

; <label>:517:                                    ; preds = %507
  %518 = load i32, i32* %8, align 4
  %519 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %Vop61 = add <4 x i32> %519, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop61, <4 x i32>* %allocaVec14
  %520 = add nsw i32 %518, 1
  store i32 %520, i32* %8, align 4
  br label %504

; <label>:521:                                    ; preds = %504
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %9, align 4
  br label %522

; <label>:522:                                    ; preds = %544, %521
  %523 = load i32, i32* %9, align 4
  %524 = icmp slt i32 %523, 3
  br i1 %524, label %525, label %545

; <label>:525:                                    ; preds = %522
  %526 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %527 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %526, align 4
  %528 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %529 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %528, i32 0, i32 9
  %530 = load i32, i32* %9, align 4
  %531 = getelementptr inbounds [3 x i32], [3 x i32]* %529, i32 0, i32 %530
  %532 = load i32, i32* %531, align 4
  %533 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %527, i32 %532, i32 3)
  %534 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %533, %struct.BF_PartHolder** %534, align 4
  br label %535

; <label>:535:                                    ; preds = %525
  %536 = load i32, i32* %9, align 4
  %537 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop62 = add <4 x i32> %537, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop62, <4 x i32>* %allocaVec15
  %538 = load <4 x i32>, <4 x i32>* %allocaVec15, align 4
  %extractE64 = extractelement <4 x i32> %538, i64 0
  %extractE65 = extractelement <4 x i32> %538, i64 1
  %extractE66 = extractelement <4 x i32> %538, i64 2
  %sum67 = add i32 %extractE64, %extractE65
  %sum68 = add i32 %sum67, %extractE66
  %539 = add nsw i32 %536, 1
  %Fmul63 = mul i32 %539, 3
  store i32 %539, i32* %Recovery2
  %Fcmp69 = icmp ne i32 %sum68, %Fmul63
  br i1 %Fcmp69, label %540, label %544

; <label>:540:                                    ; preds = %535
  %remThree98 = sdiv i32 %sum68, %extractE64
  %FcmpThree99 = icmp ne i32 %remThree98, 3
  br i1 %FcmpThree99, label %541, label %542

; <label>:541:                                    ; preds = %540
  store i32 %539, i32* %Recovery2, align 4
  br label %543

; <label>:542:                                    ; preds = %540
  store i32 %extractE64, i32* %Recovery2, align 4
  br label %543

; <label>:543:                                    ; preds = %542, %541
  br label %544

; <label>:544:                                    ; preds = %535, %543
  %ReplaceInst107 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst107, i32* %9, align 4
  br label %522

; <label>:545:                                    ; preds = %522
  br label %585

; <label>:546:                                    ; preds = %437
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec14
  store i32 0, i32* %8, align 4
  br label %547

; <label>:547:                                    ; preds = %569, %546
  %548 = load i32, i32* %8, align 4
  %549 = icmp slt i32 %548, 3
  br i1 %549, label %550, label %570

; <label>:550:                                    ; preds = %547
  %551 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %552 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %551, align 4
  %553 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %554 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %553, i32 0, i32 8
  %555 = load i32, i32* %8, align 4
  %556 = getelementptr inbounds [3 x i32], [3 x i32]* %554, i32 0, i32 %555
  %557 = load i32, i32* %556, align 4
  %558 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %552, i32 %557, i32 5)
  %559 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %558, %struct.BF_PartHolder** %559, align 4
  br label %560

; <label>:560:                                    ; preds = %550
  %561 = load i32, i32* %8, align 4
  %562 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %Vop70 = add <4 x i32> %562, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop70, <4 x i32>* %allocaVec14
  %563 = load <4 x i32>, <4 x i32>* %allocaVec14, align 4
  %extractE72 = extractelement <4 x i32> %563, i64 0
  %extractE73 = extractelement <4 x i32> %563, i64 1
  %extractE74 = extractelement <4 x i32> %563, i64 2
  %sum75 = add i32 %extractE72, %extractE73
  %sum76 = add i32 %sum75, %extractE74
  %564 = add nsw i32 %561, 1
  %Fmul71 = mul i32 %564, 3
  store i32 %564, i32* %Recovery3
  %Fcmp77 = icmp ne i32 %sum76, %Fmul71
  br i1 %Fcmp77, label %565, label %569

; <label>:565:                                    ; preds = %560
  %remThree100 = sdiv i32 %sum76, %extractE72
  %FcmpThree101 = icmp ne i32 %remThree100, 3
  br i1 %FcmpThree101, label %566, label %567

; <label>:566:                                    ; preds = %565
  store i32 %564, i32* %Recovery3, align 4
  br label %568

; <label>:567:                                    ; preds = %565
  store i32 %extractE72, i32* %Recovery3, align 4
  br label %568

; <label>:568:                                    ; preds = %567, %566
  br label %569

; <label>:569:                                    ; preds = %560, %568
  %ReplaceInst108 = load i32, i32* %Recovery3, align 4
  store i32 %ReplaceInst108, i32* %8, align 4
  br label %547

; <label>:570:                                    ; preds = %547
  %571 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %572 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %571, align 4
  %573 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %574 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %573, i32 0, i32 10
  %575 = load i32, i32* %574, align 4
  %576 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %572, i32 %575, i32 4)
  %577 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %576, %struct.BF_PartHolder** %577, align 4
  %578 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %579 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %578, align 4
  %580 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %581 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %580, i32 0, i32 11
  %582 = load i32, i32* %581, align 4
  %583 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %579, i32 %582, i32 3)
  %584 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %583, %struct.BF_PartHolder** %584, align 4
  br label %585

; <label>:585:                                    ; preds = %570, %545
  %586 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %587 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %586, align 4
  %588 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %589 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %588, i32 0, i32 13
  %590 = load i32, i32* %589, align 4
  %591 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %587, i32 %590, i32 1)
  %592 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %591, %struct.BF_PartHolder** %592, align 4
  %593 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %594 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %593, align 4
  %595 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %596 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %595, i32 0, i32 14
  %597 = load i32, i32* %596, align 4
  %598 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %594, i32 %597, i32 1)
  %599 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %598, %struct.BF_PartHolder** %599, align 4
  br label %600

; <label>:600:                                    ; preds = %585
  %601 = load i32, i32* %6, align 4
  %602 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop78 = add <4 x i32> %602, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop78, <4 x i32>* %allocaVec12
  %603 = load <4 x i32>, <4 x i32>* %allocaVec12, align 4
  %extractE80 = extractelement <4 x i32> %603, i64 0
  %extractE81 = extractelement <4 x i32> %603, i64 1
  %extractE82 = extractelement <4 x i32> %603, i64 2
  %sum83 = add i32 %extractE80, %extractE81
  %sum84 = add i32 %sum83, %extractE82
  %604 = add nsw i32 %601, 1
  %Fmul79 = mul i32 %604, 3
  store i32 %604, i32* %Recovery4
  %Fcmp85 = icmp ne i32 %sum84, %Fmul79
  br i1 %Fcmp85, label %605, label %609

; <label>:605:                                    ; preds = %600
  %remThree102 = sdiv i32 %sum84, %extractE80
  %FcmpThree103 = icmp ne i32 %remThree102, 3
  br i1 %FcmpThree103, label %606, label %607

; <label>:606:                                    ; preds = %605
  store i32 %604, i32* %Recovery4, align 4
  br label %608

; <label>:607:                                    ; preds = %605
  store i32 %extractE80, i32* %Recovery4, align 4
  br label %608

; <label>:608:                                    ; preds = %607, %606
  br label %609

; <label>:609:                                    ; preds = %600, %608
  %ReplaceInst109 = load i32, i32* %Recovery4, align 4
  store i32 %ReplaceInst109, i32* %6, align 4
  br label %431

; <label>:610:                                    ; preds = %431
  %611 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %612 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %611, i32 0, i32 46
  %613 = load i32, i32* %612, align 4
  %614 = icmp eq i32 %613, 2
  br i1 %614, label %615, label %619

; <label>:615:                                    ; preds = %610
  %616 = load i32, i32* %10, align 4
  %617 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop86 = add <4 x i32> %617, <i32 136, i32 136, i32 136, i32 136>
  store <4 x i32> %Vop86, <4 x i32>* %allocaVec16
  %618 = add nsw i32 %616, 136
  store i32 %618, i32* %10, align 4
  br label %623

; <label>:619:                                    ; preds = %610
  %620 = load i32, i32* %10, align 4
  %621 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop87 = add <4 x i32> %621, <i32 72, i32 72, i32 72, i32 72>
  store <4 x i32> %Vop87, <4 x i32>* %allocaVec16
  %622 = add nsw i32 %620, 72
  store i32 %622, i32* %10, align 4
  br label %623

; <label>:623:                                    ; preds = %619, %615
  br label %624

; <label>:624:                                    ; preds = %623, %407
  %625 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %626 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %625, i32 0, i32 14
  %627 = load i32, i32* %626, align 4
  %628 = icmp ne i32 %627, 0
  br i1 %628, label %629, label %642

; <label>:629:                                    ; preds = %624
  %630 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %631 = load i32, i32* @crc, align 4
  %632 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %630, i32 %631, i32 16)
  store %struct.BF_PartHolder* %632, %struct.BF_PartHolder** @headerPH, align 4
  %633 = load i32, i32* %10, align 4
  %634 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop88 = add <4 x i32> %634, <i32 16, i32 16, i32 16, i32 16>
  store <4 x i32> %Vop88, <4 x i32>* %allocaVec16
  %635 = load <4 x i32>, <4 x i32>* %allocaVec16, align 4
  %extractE90 = extractelement <4 x i32> %635, i64 0
  %extractE91 = extractelement <4 x i32> %635, i64 1
  %extractE92 = extractelement <4 x i32> %635, i64 2
  %sum93 = add i32 %extractE90, %extractE91
  %sum94 = add i32 %sum93, %extractE92
  %636 = add nsw i32 %633, 16
  %Fmul89 = mul i32 %636, 3
  store i32 %636, i32* %Recovery5
  %Fcmp95 = icmp ne i32 %sum94, %Fmul89
  br i1 %Fcmp95, label %637, label %641

; <label>:637:                                    ; preds = %629
  %remThree104 = sdiv i32 %sum94, %extractE90
  %FcmpThree105 = icmp ne i32 %remThree104, 3
  br i1 %FcmpThree105, label %638, label %639

; <label>:638:                                    ; preds = %637
  store i32 %636, i32* %Recovery5, align 4
  br label %640

; <label>:639:                                    ; preds = %637
  store i32 %extractE90, i32* %Recovery5, align 4
  br label %640

; <label>:640:                                    ; preds = %639, %638
  br label %641

; <label>:641:                                    ; preds = %629, %640
  %ReplaceInst110 = load i32, i32* %Recovery5, align 4
  store i32 %ReplaceInst110, i32* %10, align 4
  br label %642

; <label>:642:                                    ; preds = %641, %624
  %643 = load i32, i32* %10, align 4
  ret i32 %643
}

; Function Attrs: nounwind
define internal arm_aapcscc void @encodeMainData(%struct.lame_global_flags*, [2 x [576 x i32]]*, %struct.III_side_info_t*, [2 x %struct.III_scalefac_t]*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %Recovery5 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %Recovery6 = alloca i32, align 4
  %5 = alloca %struct.lame_global_flags*, align 4
  %6 = alloca [2 x [576 x i32]]*, align 4
  %7 = alloca %struct.III_side_info_t*, align 4
  %8 = alloca [2 x %struct.III_scalefac_t]*, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec14 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %14 = alloca %struct.BF_PartHolder**, align 4
  %15 = alloca %struct.gr_info*, align 4
  %allocaVec18 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %allocaVec19 = alloca <4 x i32>, align 16
  %17 = alloca i32, align 4
  %18 = alloca i32*, align 4
  %19 = alloca %struct.BF_PartHolder**, align 4
  %20 = alloca %struct.gr_info*, align 4
  %21 = alloca i32*, align 4
  %allocaVec20 = alloca <4 x i32>, align 16
  %22 = alloca i32, align 4
  %allocaVec21 = alloca <4 x i32>, align 16
  %23 = alloca i32, align 4
  %allocaVec22 = alloca <4 x i32>, align 16
  %24 = alloca i32, align 4
  %allocaVec23 = alloca <4 x i32>, align 16
  %25 = alloca i32, align 4
  %allocaVec24 = alloca <4 x i32>, align 16
  %26 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %5, align 4
  store [2 x [576 x i32]]* %1, [2 x [576 x i32]]** %6, align 4
  store %struct.III_side_info_t* %2, %struct.III_side_info_t** %7, align 4
  store [2 x %struct.III_scalefac_t]* %3, [2 x %struct.III_scalefac_t]** %8, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec14
  store i32 0, i32* %10, align 4
  br label %27

; <label>:27:                                     ; preds = %54, %4
  %28 = load i32, i32* %10, align 4
  %29 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %30 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %29, i32 0, i32 45
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %28, %31
  br i1 %32, label %33, label %58

; <label>:33:                                     ; preds = %27
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %11, align 4
  br label %34

; <label>:34:                                     ; preds = %49, %33
  %35 = load i32, i32* %11, align 4
  %36 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %37 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %36, i32 0, i32 46
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %35, %38
  br i1 %39, label %40, label %53

; <label>:40:                                     ; preds = %34
  %41 = load i32, i32* %10, align 4
  %42 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i32 0, i32 %41
  %43 = load i32, i32* %11, align 4
  %44 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %42, i32 0, i32 %43
  %45 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %44, align 4
  %46 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %45, i32 0, i32 1
  %47 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %46, align 4
  %48 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %47, i32 0, i32 0
  store i32 0, i32* %48, align 4
  br label %49

; <label>:49:                                     ; preds = %40
  %50 = load i32, i32* %11, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %50, i32 0
  %insertElmt25 = insertelement <4 x i32> %insertElmt, i32 %50, i32 1
  %insertElmt26 = insertelement <4 x i32> %insertElmt25, i32 %50, i32 2
  %insertElmt27 = insertelement <4 x i32> %insertElmt26, i32 %50, i32 3
  store <4 x i32> %insertElmt27, <4 x i32>* %allocaVec15, align 16
  %51 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop = add <4 x i32> %51, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec15
  %52 = add nsw i32 %50, 1
  store i32 %52, i32* %11, align 4
  br label %34

; <label>:53:                                     ; preds = %34
  br label %54

; <label>:54:                                     ; preds = %53
  %55 = load i32, i32* %10, align 4
  %insertElmt28 = insertelement <4 x i32> undef, i32 %55, i32 0
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %55, i32 1
  %insertElmt30 = insertelement <4 x i32> %insertElmt29, i32 %55, i32 2
  %insertElmt31 = insertelement <4 x i32> %insertElmt30, i32 %55, i32 3
  store <4 x i32> %insertElmt31, <4 x i32>* %allocaVec14, align 16
  %56 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %Vop32 = add <4 x i32> %56, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop32, <4 x i32>* %allocaVec14
  %57 = add nsw i32 %55, 1
  store i32 %57, i32* %10, align 4
  br label %27

; <label>:58:                                     ; preds = %27
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec14
  store i32 0, i32* %10, align 4
  br label %59

; <label>:59:                                     ; preds = %86, %58
  %60 = load i32, i32* %10, align 4
  %61 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %62 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %61, i32 0, i32 45
  %63 = load i32, i32* %62, align 4
  %64 = icmp slt i32 %60, %63
  br i1 %64, label %65, label %90

; <label>:65:                                     ; preds = %59
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %11, align 4
  br label %66

; <label>:66:                                     ; preds = %81, %65
  %67 = load i32, i32* %11, align 4
  %68 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %69 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %68, i32 0, i32 46
  %70 = load i32, i32* %69, align 4
  %71 = icmp slt i32 %67, %70
  br i1 %71, label %72, label %85

; <label>:72:                                     ; preds = %66
  %73 = load i32, i32* %10, align 4
  %74 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i32 0, i32 %73
  %75 = load i32, i32* %11, align 4
  %76 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %74, i32 0, i32 %75
  %77 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %76, align 4
  %78 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %77, i32 0, i32 1
  %79 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %78, align 4
  %80 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %79, i32 0, i32 0
  store i32 0, i32* %80, align 4
  br label %81

; <label>:81:                                     ; preds = %72
  %82 = load i32, i32* %11, align 4
  %83 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop33 = add <4 x i32> %83, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop33, <4 x i32>* %allocaVec15
  %84 = add nsw i32 %82, 1
  store i32 %84, i32* %11, align 4
  br label %66

; <label>:85:                                     ; preds = %66
  br label %86

; <label>:86:                                     ; preds = %85
  %87 = load i32, i32* %10, align 4
  %88 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %Vop34 = add <4 x i32> %88, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop34, <4 x i32>* %allocaVec14
  %89 = add nsw i32 %87, 1
  store i32 %89, i32* %10, align 4
  br label %59

; <label>:90:                                     ; preds = %59
  %91 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %92 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %91, i32 0, i32 43
  %93 = load i32, i32* %92, align 4
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %95, label %372

; <label>:95:                                     ; preds = %90
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec14
  store i32 0, i32* %10, align 4
  br label %96

; <label>:96:                                     ; preds = %370, %95
  %97 = load i32, i32* %10, align 4
  %98 = icmp slt i32 %97, 2
  br i1 %98, label %99, label %371

; <label>:99:                                     ; preds = %96
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %11, align 4
  br label %100

; <label>:100:                                    ; preds = %356, %99
  %101 = load i32, i32* %11, align 4
  %102 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %103 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %102, i32 0, i32 46
  %104 = load i32, i32* %103, align 4
  %105 = icmp slt i32 %101, %104
  br i1 %105, label %106, label %360

; <label>:106:                                    ; preds = %100
  %107 = load i32, i32* %10, align 4
  %108 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i32 0, i32 %107
  %109 = load i32, i32* %11, align 4
  %110 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %108, i32 0, i32 %109
  store %struct.BF_PartHolder** %110, %struct.BF_PartHolder*** %14, align 4
  %111 = load %struct.III_side_info_t*, %struct.III_side_info_t** %7, align 4
  %112 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %111, i32 0, i32 4
  %113 = load i32, i32* %10, align 4
  %114 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %112, i32 0, i32 %113
  %115 = getelementptr inbounds %struct.anon, %struct.anon* %114, i32 0, i32 0
  %116 = load i32, i32* %11, align 4
  %117 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %115, i32 0, i32 %116
  %118 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %117, i32 0, i32 0
  store %struct.gr_info* %118, %struct.gr_info** %15, align 4
  %119 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %120 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %119, i32 0, i32 4
  %121 = load i32, i32* %120, align 4
  %122 = getelementptr inbounds [16 x i32], [16 x i32]* @slen1_tab, i32 0, i32 %121
  %123 = load i32, i32* %122, align 4
  store i32 %123, i32* %16, align 4
  %124 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %125 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %124, i32 0, i32 4
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds [16 x i32], [16 x i32]* @slen2_tab, i32 0, i32 %126
  %128 = load i32, i32* %127, align 4
  store i32 %128, i32* %17, align 4
  %129 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %6, align 4
  %130 = load i32, i32* %10, align 4
  %131 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %129, i32 %130
  %132 = load i32, i32* %11, align 4
  %133 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %131, i32 0, i32 %132
  %134 = getelementptr inbounds [576 x i32], [576 x i32]* %133, i32 0, i32 0
  store i32* %134, i32** %18, align 4
  %135 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %136 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %135, i32 0, i32 6
  %137 = load i32, i32* %136, align 4
  %138 = icmp eq i32 %137, 2
  br i1 %138, label %139, label %208

; <label>:139:                                    ; preds = %106
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %12, align 4
  br label %140

; <label>:140:                                    ; preds = %169, %139
  %141 = load i32, i32* %12, align 4
  %142 = icmp slt i32 %141, 6
  br i1 %142, label %143, label %173

; <label>:143:                                    ; preds = %140
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec17
  store i32 0, i32* %13, align 4
  br label %144

; <label>:144:                                    ; preds = %164, %143
  %145 = load i32, i32* %13, align 4
  %146 = icmp slt i32 %145, 3
  br i1 %146, label %147, label %168

; <label>:147:                                    ; preds = %144
  %148 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %149 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %148, align 4
  %150 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %8, align 4
  %151 = load i32, i32* %10, align 4
  %152 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %150, i32 %151
  %153 = load i32, i32* %11, align 4
  %154 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %152, i32 0, i32 %153
  %155 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %154, i32 0, i32 1
  %156 = load i32, i32* %12, align 4
  %157 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %155, i32 0, i32 %156
  %158 = load i32, i32* %13, align 4
  %159 = getelementptr inbounds [3 x i32], [3 x i32]* %157, i32 0, i32 %158
  %160 = load i32, i32* %159, align 4
  %161 = load i32, i32* %16, align 4
  %162 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %149, i32 %160, i32 %161)
  %163 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %162, %struct.BF_PartHolder** %163, align 4
  br label %164

; <label>:164:                                    ; preds = %147
  %165 = load i32, i32* %13, align 4
  %insertElmt35 = insertelement <4 x i32> undef, i32 %165, i32 0
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %165, i32 1
  %insertElmt37 = insertelement <4 x i32> %insertElmt36, i32 %165, i32 2
  %insertElmt38 = insertelement <4 x i32> %insertElmt37, i32 %165, i32 3
  store <4 x i32> %insertElmt38, <4 x i32>* %allocaVec17, align 16
  %166 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop39 = add <4 x i32> %166, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop39, <4 x i32>* %allocaVec17
  %167 = add nsw i32 %165, 1
  store i32 %167, i32* %13, align 4
  br label %144

; <label>:168:                                    ; preds = %144
  br label %169

; <label>:169:                                    ; preds = %168
  %170 = load i32, i32* %12, align 4
  %insertElmt40 = insertelement <4 x i32> undef, i32 %170, i32 0
  %insertElmt41 = insertelement <4 x i32> %insertElmt40, i32 %170, i32 1
  %insertElmt42 = insertelement <4 x i32> %insertElmt41, i32 %170, i32 2
  %insertElmt43 = insertelement <4 x i32> %insertElmt42, i32 %170, i32 3
  store <4 x i32> %insertElmt43, <4 x i32>* %allocaVec16, align 16
  %171 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop44 = add <4 x i32> %171, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop44, <4 x i32>* %allocaVec16
  %172 = add nsw i32 %170, 1
  store i32 %172, i32* %12, align 4
  br label %140

; <label>:173:                                    ; preds = %140
  store <4 x i32> <i32 6, i32 6, i32 6, i32 6>, <4 x i32>* %allocaVec16
  store i32 6, i32* %12, align 4
  br label %174

; <label>:174:                                    ; preds = %203, %173
  %175 = load i32, i32* %12, align 4
  %176 = icmp slt i32 %175, 12
  br i1 %176, label %177, label %207

; <label>:177:                                    ; preds = %174
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec17
  store i32 0, i32* %13, align 4
  br label %178

; <label>:178:                                    ; preds = %198, %177
  %179 = load i32, i32* %13, align 4
  %180 = icmp slt i32 %179, 3
  br i1 %180, label %181, label %202

; <label>:181:                                    ; preds = %178
  %182 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %183 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %182, align 4
  %184 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %8, align 4
  %185 = load i32, i32* %10, align 4
  %186 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %184, i32 %185
  %187 = load i32, i32* %11, align 4
  %188 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %186, i32 0, i32 %187
  %189 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %188, i32 0, i32 1
  %190 = load i32, i32* %12, align 4
  %191 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %189, i32 0, i32 %190
  %192 = load i32, i32* %13, align 4
  %193 = getelementptr inbounds [3 x i32], [3 x i32]* %191, i32 0, i32 %192
  %194 = load i32, i32* %193, align 4
  %195 = load i32, i32* %17, align 4
  %196 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %183, i32 %194, i32 %195)
  %197 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %196, %struct.BF_PartHolder** %197, align 4
  br label %198

; <label>:198:                                    ; preds = %181
  %199 = load i32, i32* %13, align 4
  %200 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop45 = add <4 x i32> %200, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop45, <4 x i32>* %allocaVec17
  %201 = add nsw i32 %199, 1
  store i32 %201, i32* %13, align 4
  br label %178

; <label>:202:                                    ; preds = %178
  br label %203

; <label>:203:                                    ; preds = %202
  %204 = load i32, i32* %12, align 4
  %205 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop46 = add <4 x i32> %205, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop46, <4 x i32>* %allocaVec16
  %206 = add nsw i32 %204, 1
  store i32 %206, i32* %12, align 4
  br label %174

; <label>:207:                                    ; preds = %174
  br label %349

; <label>:208:                                    ; preds = %106
  %209 = load i32, i32* %10, align 4
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %219, label %211

; <label>:211:                                    ; preds = %208
  %212 = load %struct.III_side_info_t*, %struct.III_side_info_t** %7, align 4
  %213 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %212, i32 0, i32 3
  %214 = load i32, i32* %11, align 4
  %215 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %213, i32 0, i32 %214
  %216 = getelementptr inbounds [4 x i32], [4 x i32]* %215, i32 0, i32 0
  %217 = load i32, i32* %216, align 4
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %219, label %243

; <label>:219:                                    ; preds = %211, %208
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %12, align 4
  br label %220

; <label>:220:                                    ; preds = %238, %219
  %221 = load i32, i32* %12, align 4
  %222 = icmp slt i32 %221, 6
  br i1 %222, label %223, label %242

; <label>:223:                                    ; preds = %220
  %224 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %225 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %224, align 4
  %226 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %8, align 4
  %227 = load i32, i32* %10, align 4
  %228 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %226, i32 %227
  %229 = load i32, i32* %11, align 4
  %230 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %228, i32 0, i32 %229
  %231 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %230, i32 0, i32 0
  %232 = load i32, i32* %12, align 4
  %233 = getelementptr inbounds [22 x i32], [22 x i32]* %231, i32 0, i32 %232
  %234 = load i32, i32* %233, align 4
  %235 = load i32, i32* %16, align 4
  %236 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %225, i32 %234, i32 %235)
  %237 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %236, %struct.BF_PartHolder** %237, align 4
  br label %238

; <label>:238:                                    ; preds = %223
  %239 = load i32, i32* %12, align 4
  %240 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop47 = add <4 x i32> %240, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop47, <4 x i32>* %allocaVec16
  %241 = add nsw i32 %239, 1
  store i32 %241, i32* %12, align 4
  br label %220

; <label>:242:                                    ; preds = %220
  br label %243

; <label>:243:                                    ; preds = %242, %211
  %244 = load i32, i32* %10, align 4
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %254, label %246

; <label>:246:                                    ; preds = %243
  %247 = load %struct.III_side_info_t*, %struct.III_side_info_t** %7, align 4
  %248 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %247, i32 0, i32 3
  %249 = load i32, i32* %11, align 4
  %250 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %248, i32 0, i32 %249
  %251 = getelementptr inbounds [4 x i32], [4 x i32]* %250, i32 0, i32 1
  %252 = load i32, i32* %251, align 4
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %254, label %278

; <label>:254:                                    ; preds = %246, %243
  store <4 x i32> <i32 6, i32 6, i32 6, i32 6>, <4 x i32>* %allocaVec16
  store i32 6, i32* %12, align 4
  br label %255

; <label>:255:                                    ; preds = %273, %254
  %256 = load i32, i32* %12, align 4
  %257 = icmp slt i32 %256, 11
  br i1 %257, label %258, label %277

; <label>:258:                                    ; preds = %255
  %259 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %260 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %259, align 4
  %261 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %8, align 4
  %262 = load i32, i32* %10, align 4
  %263 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %261, i32 %262
  %264 = load i32, i32* %11, align 4
  %265 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %263, i32 0, i32 %264
  %266 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %265, i32 0, i32 0
  %267 = load i32, i32* %12, align 4
  %268 = getelementptr inbounds [22 x i32], [22 x i32]* %266, i32 0, i32 %267
  %269 = load i32, i32* %268, align 4
  %270 = load i32, i32* %16, align 4
  %271 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %260, i32 %269, i32 %270)
  %272 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %271, %struct.BF_PartHolder** %272, align 4
  br label %273

; <label>:273:                                    ; preds = %258
  %274 = load i32, i32* %12, align 4
  %275 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop48 = add <4 x i32> %275, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop48, <4 x i32>* %allocaVec16
  %276 = add nsw i32 %274, 1
  store i32 %276, i32* %12, align 4
  br label %255

; <label>:277:                                    ; preds = %255
  br label %278

; <label>:278:                                    ; preds = %277, %246
  %279 = load i32, i32* %10, align 4
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %289, label %281

; <label>:281:                                    ; preds = %278
  %282 = load %struct.III_side_info_t*, %struct.III_side_info_t** %7, align 4
  %283 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %282, i32 0, i32 3
  %284 = load i32, i32* %11, align 4
  %285 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %283, i32 0, i32 %284
  %286 = getelementptr inbounds [4 x i32], [4 x i32]* %285, i32 0, i32 2
  %287 = load i32, i32* %286, align 4
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %313

; <label>:289:                                    ; preds = %281, %278
  store <4 x i32> <i32 11, i32 11, i32 11, i32 11>, <4 x i32>* %allocaVec16
  store i32 11, i32* %12, align 4
  br label %290

; <label>:290:                                    ; preds = %308, %289
  %291 = load i32, i32* %12, align 4
  %292 = icmp slt i32 %291, 16
  br i1 %292, label %293, label %312

; <label>:293:                                    ; preds = %290
  %294 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %295 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %294, align 4
  %296 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %8, align 4
  %297 = load i32, i32* %10, align 4
  %298 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %296, i32 %297
  %299 = load i32, i32* %11, align 4
  %300 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %298, i32 0, i32 %299
  %301 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %300, i32 0, i32 0
  %302 = load i32, i32* %12, align 4
  %303 = getelementptr inbounds [22 x i32], [22 x i32]* %301, i32 0, i32 %302
  %304 = load i32, i32* %303, align 4
  %305 = load i32, i32* %17, align 4
  %306 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %295, i32 %304, i32 %305)
  %307 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %306, %struct.BF_PartHolder** %307, align 4
  br label %308

; <label>:308:                                    ; preds = %293
  %309 = load i32, i32* %12, align 4
  %310 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop49 = add <4 x i32> %310, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop49, <4 x i32>* %allocaVec16
  %311 = add nsw i32 %309, 1
  store i32 %311, i32* %12, align 4
  br label %290

; <label>:312:                                    ; preds = %290
  br label %313

; <label>:313:                                    ; preds = %312, %281
  %314 = load i32, i32* %10, align 4
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %324, label %316

; <label>:316:                                    ; preds = %313
  %317 = load %struct.III_side_info_t*, %struct.III_side_info_t** %7, align 4
  %318 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %317, i32 0, i32 3
  %319 = load i32, i32* %11, align 4
  %320 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %318, i32 0, i32 %319
  %321 = getelementptr inbounds [4 x i32], [4 x i32]* %320, i32 0, i32 3
  %322 = load i32, i32* %321, align 4
  %323 = icmp eq i32 %322, 0
  br i1 %323, label %324, label %348

; <label>:324:                                    ; preds = %316, %313
  store <4 x i32> <i32 16, i32 16, i32 16, i32 16>, <4 x i32>* %allocaVec16
  store i32 16, i32* %12, align 4
  br label %325

; <label>:325:                                    ; preds = %343, %324
  %326 = load i32, i32* %12, align 4
  %327 = icmp slt i32 %326, 21
  br i1 %327, label %328, label %347

; <label>:328:                                    ; preds = %325
  %329 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %330 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %329, align 4
  %331 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %8, align 4
  %332 = load i32, i32* %10, align 4
  %333 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %331, i32 %332
  %334 = load i32, i32* %11, align 4
  %335 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %333, i32 0, i32 %334
  %336 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %335, i32 0, i32 0
  %337 = load i32, i32* %12, align 4
  %338 = getelementptr inbounds [22 x i32], [22 x i32]* %336, i32 0, i32 %337
  %339 = load i32, i32* %338, align 4
  %340 = load i32, i32* %17, align 4
  %341 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %330, i32 %339, i32 %340)
  %342 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %341, %struct.BF_PartHolder** %342, align 4
  br label %343

; <label>:343:                                    ; preds = %328
  %344 = load i32, i32* %12, align 4
  %345 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop50 = add <4 x i32> %345, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop50, <4 x i32>* %allocaVec16
  %346 = add nsw i32 %344, 1
  store i32 %346, i32* %12, align 4
  br label %325

; <label>:347:                                    ; preds = %325
  br label %348

; <label>:348:                                    ; preds = %347, %316
  br label %349

; <label>:349:                                    ; preds = %348, %207
  %350 = load i32, i32* %10, align 4
  %351 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i32 0, i32 %350
  %352 = load i32, i32* %11, align 4
  %353 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %351, i32 0, i32 %352
  %354 = load i32*, i32** %18, align 4
  %355 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  call arm_aapcscc void @Huffmancodebits(%struct.BF_PartHolder** %353, i32* %354, %struct.gr_info* %355)
  br label %356

; <label>:356:                                    ; preds = %349
  %357 = load i32, i32* %11, align 4
  %358 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop51 = add <4 x i32> %358, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop51, <4 x i32>* %allocaVec15
  %359 = add nsw i32 %357, 1
  store i32 %359, i32* %11, align 4
  br label %100

; <label>:360:                                    ; preds = %100
  br label %361

; <label>:361:                                    ; preds = %360
  %362 = load i32, i32* %10, align 4
  %363 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %Vop52 = add <4 x i32> %363, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop52, <4 x i32>* %allocaVec14
  %364 = load <4 x i32>, <4 x i32>* %allocaVec14, align 4
  %extractE = extractelement <4 x i32> %364, i64 0
  %extractE53 = extractelement <4 x i32> %364, i64 1
  %extractE54 = extractelement <4 x i32> %364, i64 2
  %sum = add i32 %extractE, %extractE53
  %sum55 = add i32 %sum, %extractE54
  %365 = add nsw i32 %362, 1
  %Fmul = mul i32 %365, 3
  store i32 %365, i32* %Recovery
  %Fcmp = icmp ne i32 %sum55, %Fmul
  br i1 %Fcmp, label %366, label %370

; <label>:366:                                    ; preds = %361
  %remThree = sdiv i32 %sum55, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %367, label %368

; <label>:367:                                    ; preds = %366
  store i32 %365, i32* %Recovery, align 4
  br label %369

; <label>:368:                                    ; preds = %366
  store i32 %extractE, i32* %Recovery, align 4
  br label %369

; <label>:369:                                    ; preds = %368, %367
  br label %370

; <label>:370:                                    ; preds = %361, %369
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %10, align 4
  br label %96

; <label>:371:                                    ; preds = %96
  br label %560

; <label>:372:                                    ; preds = %90
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec14
  store i32 0, i32* %10, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %11, align 4
  br label %373

; <label>:373:                                    ; preds = %558, %372
  %374 = load i32, i32* %11, align 4
  %375 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %376 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %375, i32 0, i32 46
  %377 = load i32, i32* %376, align 4
  %378 = icmp slt i32 %374, %377
  br i1 %378, label %379, label %559

; <label>:379:                                    ; preds = %373
  %380 = load i32, i32* %10, align 4
  %381 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i32 0, i32 %380
  %382 = load i32, i32* %11, align 4
  %383 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %381, i32 0, i32 %382
  store %struct.BF_PartHolder** %383, %struct.BF_PartHolder*** %19, align 4
  %384 = load %struct.III_side_info_t*, %struct.III_side_info_t** %7, align 4
  %385 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %384, i32 0, i32 4
  %386 = load i32, i32* %10, align 4
  %387 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %385, i32 0, i32 %386
  %388 = getelementptr inbounds %struct.anon, %struct.anon* %387, i32 0, i32 0
  %389 = load i32, i32* %11, align 4
  %390 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %388, i32 0, i32 %389
  %391 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %390, i32 0, i32 0
  store %struct.gr_info* %391, %struct.gr_info** %20, align 4
  %392 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %6, align 4
  %393 = load i32, i32* %10, align 4
  %394 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %392, i32 %393
  %395 = load i32, i32* %11, align 4
  %396 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %394, i32 0, i32 %395
  %397 = getelementptr inbounds [576 x i32], [576 x i32]* %396, i32 0, i32 0
  store i32* %397, i32** %21, align 4
  %398 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %399 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %398, i32 0, i32 19
  %400 = load i32*, i32** %399, align 4
  %401 = icmp ne i32* %400, null
  br i1 %401, label %403, label %402

; <label>:402:                                    ; preds = %379
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7.159, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 236, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__.encodeMainData, i32 0, i32 0))
  br label %403

; <label>:403:                                    ; preds = %402, %379
  %404 = phi i1 [ true, %379 ], [ false, %402 ]
  %405 = zext i1 %404 to i32
  %406 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %407 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %406, i32 0, i32 6
  %408 = load i32, i32* %407, align 4
  %409 = icmp eq i32 %408, 2
  br i1 %409, label %410, label %476

; <label>:410:                                    ; preds = %403
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %12, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec20
  store i32 0, i32* %22, align 4
  br label %411

; <label>:411:                                    ; preds = %471, %410
  %412 = load i32, i32* %22, align 4
  %413 = icmp slt i32 %412, 4
  br i1 %413, label %414, label %475

; <label>:414:                                    ; preds = %411
  %415 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %416 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %415, i32 0, i32 19
  %417 = load i32*, i32** %416, align 4
  %418 = load i32, i32* %22, align 4
  %419 = getelementptr inbounds i32, i32* %417, i32 %418
  %420 = load i32, i32* %419, align 4
  %421 = udiv i32 %420, 3
  store i32 %421, i32* %23, align 4
  %422 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %423 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %422, i32 0, i32 20
  %424 = load i32, i32* %22, align 4
  %425 = getelementptr inbounds [4 x i32], [4 x i32]* %423, i32 0, i32 %424
  %426 = load i32, i32* %425, align 4
  store i32 %426, i32* %24, align 4
  store i32 0, i32* %9, align 4
  br label %427

; <label>:427:                                    ; preds = %463, %414
  %428 = load i32, i32* %9, align 4
  %429 = load i32, i32* %23, align 4
  %430 = icmp slt i32 %428, %429
  br i1 %430, label %431, label %470

; <label>:431:                                    ; preds = %427
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec17
  store i32 0, i32* %13, align 4
  br label %432

; <label>:432:                                    ; preds = %461, %431
  %433 = load i32, i32* %13, align 4
  %434 = icmp slt i32 %433, 3
  br i1 %434, label %435, label %462

; <label>:435:                                    ; preds = %432
  %436 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %19, align 4
  %437 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %436, align 4
  %438 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %8, align 4
  %439 = load i32, i32* %10, align 4
  %440 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %438, i32 %439
  %441 = load i32, i32* %11, align 4
  %442 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %440, i32 0, i32 %441
  %443 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %442, i32 0, i32 1
  %444 = load i32, i32* %12, align 4
  %445 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %443, i32 0, i32 %444
  %446 = load i32, i32* %13, align 4
  %447 = getelementptr inbounds [3 x i32], [3 x i32]* %445, i32 0, i32 %446
  %448 = load i32, i32* %447, align 4
  %449 = load i32, i32* %24, align 4
  %450 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %437, i32 %448, i32 %449)
  %451 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %19, align 4
  store %struct.BF_PartHolder* %450, %struct.BF_PartHolder** %451, align 4
  br label %452

; <label>:452:                                    ; preds = %435
  %453 = load i32, i32* %13, align 4
  %454 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop56 = add <4 x i32> %454, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop56, <4 x i32>* %allocaVec17
  %455 = load <4 x i32>, <4 x i32>* %allocaVec17, align 4
  %extractE58 = extractelement <4 x i32> %455, i64 0
  %extractE59 = extractelement <4 x i32> %455, i64 1
  %extractE60 = extractelement <4 x i32> %455, i64 2
  %sum61 = add i32 %extractE58, %extractE59
  %sum62 = add i32 %sum61, %extractE60
  %456 = add nsw i32 %453, 1
  %Fmul57 = mul i32 %456, 3
  store i32 %456, i32* %Recovery2
  %Fcmp63 = icmp ne i32 %sum62, %Fmul57
  br i1 %Fcmp63, label %457, label %461

; <label>:457:                                    ; preds = %452
  %remThree107 = sdiv i32 %sum62, %extractE58
  %FcmpThree108 = icmp ne i32 %remThree107, 3
  br i1 %FcmpThree108, label %458, label %459

; <label>:458:                                    ; preds = %457
  store i32 %456, i32* %Recovery2, align 4
  br label %460

; <label>:459:                                    ; preds = %457
  store i32 %extractE58, i32* %Recovery2, align 4
  br label %460

; <label>:460:                                    ; preds = %459, %458
  br label %461

; <label>:461:                                    ; preds = %452, %460
  %ReplaceInst117 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst117, i32* %13, align 4
  br label %432

; <label>:462:                                    ; preds = %432
  br label %463

; <label>:463:                                    ; preds = %462
  %464 = load i32, i32* %9, align 4
  %insertElmt64 = insertelement <4 x i32> undef, i32 %464, i32 0
  %insertElmt65 = insertelement <4 x i32> %insertElmt64, i32 %464, i32 1
  %insertElmt66 = insertelement <4 x i32> %insertElmt65, i32 %464, i32 2
  %insertElmt67 = insertelement <4 x i32> %insertElmt66, i32 %464, i32 3
  store <4 x i32> %insertElmt67, <4 x i32>* %allocaVec13, align 16
  %465 = load <4 x i32>, <4 x i32>* %allocaVec13, align 16
  %Vop68 = add <4 x i32> %465, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop68, <4 x i32>* %allocaVec13
  %466 = add nsw i32 %464, 1
  store i32 %466, i32* %9, align 4
  %467 = load i32, i32* %12, align 4
  %468 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop69 = add <4 x i32> %468, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop69, <4 x i32>* %allocaVec16
  %469 = add nsw i32 %467, 1
  store i32 %469, i32* %12, align 4
  br label %427

; <label>:470:                                    ; preds = %427
  br label %471

; <label>:471:                                    ; preds = %470
  %472 = load i32, i32* %22, align 4
  %insertElmt70 = insertelement <4 x i32> undef, i32 %472, i32 0
  %insertElmt71 = insertelement <4 x i32> %insertElmt70, i32 %472, i32 1
  %insertElmt72 = insertelement <4 x i32> %insertElmt71, i32 %472, i32 2
  %insertElmt73 = insertelement <4 x i32> %insertElmt72, i32 %472, i32 3
  store <4 x i32> %insertElmt73, <4 x i32>* %allocaVec20, align 16
  %473 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop74 = add <4 x i32> %473, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop74, <4 x i32>* %allocaVec20
  %474 = add nsw i32 %472, 1
  store i32 %474, i32* %22, align 4
  br label %411

; <label>:475:                                    ; preds = %411
  br label %542

; <label>:476:                                    ; preds = %403
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %12, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec20
  store i32 0, i32* %22, align 4
  br label %477

; <label>:477:                                    ; preds = %540, %476
  %478 = load i32, i32* %22, align 4
  %479 = icmp slt i32 %478, 4
  br i1 %479, label %480, label %541

; <label>:480:                                    ; preds = %477
  %481 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %482 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %481, i32 0, i32 19
  %483 = load i32*, i32** %482, align 4
  %484 = load i32, i32* %22, align 4
  %485 = getelementptr inbounds i32, i32* %483, i32 %484
  %486 = load i32, i32* %485, align 4
  store i32 %486, i32* %25, align 4
  %487 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %488 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %487, i32 0, i32 20
  %489 = load i32, i32* %22, align 4
  %490 = getelementptr inbounds [4 x i32], [4 x i32]* %488, i32 0, i32 %489
  %491 = load i32, i32* %490, align 4
  store i32 %491, i32* %26, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec13
  store i32 0, i32* %9, align 4
  br label %492

; <label>:492:                                    ; preds = %529, %480
  %493 = load i32, i32* %9, align 4
  %494 = load i32, i32* %25, align 4
  %495 = icmp slt i32 %493, %494
  br i1 %495, label %496, label %530

; <label>:496:                                    ; preds = %492
  %497 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %19, align 4
  %498 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %497, align 4
  %499 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %8, align 4
  %500 = load i32, i32* %10, align 4
  %501 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %499, i32 %500
  %502 = load i32, i32* %11, align 4
  %503 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %501, i32 0, i32 %502
  %504 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %503, i32 0, i32 0
  %505 = load i32, i32* %12, align 4
  %506 = getelementptr inbounds [22 x i32], [22 x i32]* %504, i32 0, i32 %505
  %507 = load i32, i32* %506, align 4
  %508 = load i32, i32* %26, align 4
  %509 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %498, i32 %507, i32 %508)
  %510 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %19, align 4
  store %struct.BF_PartHolder* %509, %struct.BF_PartHolder** %510, align 4
  br label %511

; <label>:511:                                    ; preds = %496
  %512 = load i32, i32* %9, align 4
  %513 = load <4 x i32>, <4 x i32>* %allocaVec13, align 16
  %Vop75 = add <4 x i32> %513, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop75, <4 x i32>* %allocaVec13
  %514 = load <4 x i32>, <4 x i32>* %allocaVec13, align 4
  %extractE77 = extractelement <4 x i32> %514, i64 0
  %extractE78 = extractelement <4 x i32> %514, i64 1
  %extractE79 = extractelement <4 x i32> %514, i64 2
  %sum80 = add i32 %extractE77, %extractE78
  %sum81 = add i32 %sum80, %extractE79
  %515 = add nsw i32 %512, 1
  %Fmul76 = mul i32 %515, 3
  store i32 %515, i32* %Recovery3
  %Fcmp82 = icmp ne i32 %sum81, %Fmul76
  br i1 %Fcmp82, label %516, label %520

; <label>:516:                                    ; preds = %511
  %remThree109 = sdiv i32 %sum81, %extractE77
  %FcmpThree110 = icmp ne i32 %remThree109, 3
  br i1 %FcmpThree110, label %517, label %518

; <label>:517:                                    ; preds = %516
  store i32 %515, i32* %Recovery3, align 4
  br label %519

; <label>:518:                                    ; preds = %516
  store i32 %extractE77, i32* %Recovery3, align 4
  br label %519

; <label>:519:                                    ; preds = %518, %517
  br label %520

; <label>:520:                                    ; preds = %511, %519
  %ReplaceInst118 = load i32, i32* %Recovery3, align 4
  store i32 %ReplaceInst118, i32* %9, align 4
  %521 = load i32, i32* %12, align 4
  %522 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop83 = add <4 x i32> %522, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop83, <4 x i32>* %allocaVec16
  %523 = load <4 x i32>, <4 x i32>* %allocaVec16, align 4
  %extractE85 = extractelement <4 x i32> %523, i64 0
  %extractE86 = extractelement <4 x i32> %523, i64 1
  %extractE87 = extractelement <4 x i32> %523, i64 2
  %sum88 = add i32 %extractE85, %extractE86
  %sum89 = add i32 %sum88, %extractE87
  %524 = add nsw i32 %521, 1
  %Fmul84 = mul i32 %524, 3
  store i32 %524, i32* %Recovery4
  %Fcmp90 = icmp ne i32 %sum89, %Fmul84
  br i1 %Fcmp90, label %525, label %529

; <label>:525:                                    ; preds = %520
  %remThree111 = sdiv i32 %sum89, %extractE85
  %FcmpThree112 = icmp ne i32 %remThree111, 3
  br i1 %FcmpThree112, label %526, label %527

; <label>:526:                                    ; preds = %525
  store i32 %524, i32* %Recovery4, align 4
  br label %528

; <label>:527:                                    ; preds = %525
  store i32 %extractE85, i32* %Recovery4, align 4
  br label %528

; <label>:528:                                    ; preds = %527, %526
  br label %529

; <label>:529:                                    ; preds = %520, %528
  %ReplaceInst119 = load i32, i32* %Recovery4, align 4
  store i32 %ReplaceInst119, i32* %12, align 4
  br label %492

; <label>:530:                                    ; preds = %492
  br label %531

; <label>:531:                                    ; preds = %530
  %532 = load i32, i32* %22, align 4
  %533 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop91 = add <4 x i32> %533, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop91, <4 x i32>* %allocaVec20
  %534 = load <4 x i32>, <4 x i32>* %allocaVec20, align 4
  %extractE93 = extractelement <4 x i32> %534, i64 0
  %extractE94 = extractelement <4 x i32> %534, i64 1
  %extractE95 = extractelement <4 x i32> %534, i64 2
  %sum96 = add i32 %extractE93, %extractE94
  %sum97 = add i32 %sum96, %extractE95
  %535 = add nsw i32 %532, 1
  %Fmul92 = mul i32 %535, 3
  store i32 %535, i32* %Recovery5
  %Fcmp98 = icmp ne i32 %sum97, %Fmul92
  br i1 %Fcmp98, label %536, label %540

; <label>:536:                                    ; preds = %531
  %remThree113 = sdiv i32 %sum97, %extractE93
  %FcmpThree114 = icmp ne i32 %remThree113, 3
  br i1 %FcmpThree114, label %537, label %538

; <label>:537:                                    ; preds = %536
  store i32 %535, i32* %Recovery5, align 4
  br label %539

; <label>:538:                                    ; preds = %536
  store i32 %extractE93, i32* %Recovery5, align 4
  br label %539

; <label>:539:                                    ; preds = %538, %537
  br label %540

; <label>:540:                                    ; preds = %531, %539
  %ReplaceInst120 = load i32, i32* %Recovery5, align 4
  store i32 %ReplaceInst120, i32* %22, align 4
  br label %477

; <label>:541:                                    ; preds = %477
  br label %542

; <label>:542:                                    ; preds = %541, %475
  %543 = load i32, i32* %10, align 4
  %544 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i32 0, i32 %543
  %545 = load i32, i32* %11, align 4
  %546 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %544, i32 0, i32 %545
  %547 = load i32*, i32** %21, align 4
  %548 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  call arm_aapcscc void @Huffmancodebits(%struct.BF_PartHolder** %546, i32* %547, %struct.gr_info* %548)
  br label %549

; <label>:549:                                    ; preds = %542
  %550 = load i32, i32* %11, align 4
  %551 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop99 = add <4 x i32> %551, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop99, <4 x i32>* %allocaVec15
  %552 = load <4 x i32>, <4 x i32>* %allocaVec15, align 4
  %extractE101 = extractelement <4 x i32> %552, i64 0
  %extractE102 = extractelement <4 x i32> %552, i64 1
  %extractE103 = extractelement <4 x i32> %552, i64 2
  %sum104 = add i32 %extractE101, %extractE102
  %sum105 = add i32 %sum104, %extractE103
  %553 = add nsw i32 %550, 1
  %Fmul100 = mul i32 %553, 3
  store i32 %553, i32* %Recovery6
  %Fcmp106 = icmp ne i32 %sum105, %Fmul100
  br i1 %Fcmp106, label %554, label %558

; <label>:554:                                    ; preds = %549
  %remThree115 = sdiv i32 %sum105, %extractE101
  %FcmpThree116 = icmp ne i32 %remThree115, 3
  br i1 %FcmpThree116, label %555, label %556

; <label>:555:                                    ; preds = %554
  store i32 %553, i32* %Recovery6, align 4
  br label %557

; <label>:556:                                    ; preds = %554
  store i32 %extractE101, i32* %Recovery6, align 4
  br label %557

; <label>:557:                                    ; preds = %556, %555
  br label %558

; <label>:558:                                    ; preds = %549, %557
  %ReplaceInst121 = load i32, i32* %Recovery6, align 4
  store i32 %ReplaceInst121, i32* %11, align 4
  br label %373

; <label>:559:                                    ; preds = %373
  br label %560

; <label>:560:                                    ; preds = %559, %371
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @drain_into_ancillary_data(i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %2 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %6, i32 0
  %insertElmt9 = insertelement <4 x i32> %insertElmt, i32 %6, i32 1
  %insertElmt10 = insertelement <4 x i32> %insertElmt9, i32 %6, i32 2
  %insertElmt11 = insertelement <4 x i32> %insertElmt10, i32 %6, i32 3
  store <4 x i32> %insertElmt11, <4 x i32>* %allocaVec5, align 16
  %7 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop = sdiv <4 x i32> %7, <i32 32, i32 32, i32 32, i32 32>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec6
  %8 = load <4 x i32>, <4 x i32>* %allocaVec6, align 4
  %extractE = extractelement <4 x i32> %8, i64 0
  %extractE12 = extractelement <4 x i32> %8, i64 1
  %extractE13 = extractelement <4 x i32> %8, i64 2
  %sum = add i32 %extractE, %extractE12
  %sum14 = add i32 %sum, %extractE13
  %9 = sdiv i32 %6, 32
  %Fmul = mul i32 %9, 3
  store i32 %9, i32* %Recovery
  %Fcmp = icmp ne i32 %sum14, %Fmul
  br i1 %Fcmp, label %10, label %14

; <label>:10:                                     ; preds = %1
  %remThree = sdiv i32 %sum14, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %11, label %12

; <label>:11:                                     ; preds = %10
  store i32 %9, i32* %Recovery, align 4
  br label %13

; <label>:12:                                     ; preds = %10
  store i32 %extractE, i32* %Recovery, align 4
  br label %13

; <label>:13:                                     ; preds = %12, %11
  br label %14

; <label>:14:                                     ; preds = %1, %13
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %3, align 4
  %15 = load i32, i32* %2, align 4
  %insertElmt15 = insertelement <4 x i32> undef, i32 %15, i32 0
  %insertElmt16 = insertelement <4 x i32> %insertElmt15, i32 %15, i32 1
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %15, i32 2
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %15, i32 3
  store <4 x i32> %insertElmt18, <4 x i32>* %allocaVec5, align 16
  %16 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop19 = srem <4 x i32> %16, <i32 32, i32 32, i32 32, i32 32>
  store <4 x i32> %Vop19, <4 x i32>* %allocaVec7
  %17 = load <4 x i32>, <4 x i32>* %allocaVec7, align 4
  %extractE21 = extractelement <4 x i32> %17, i64 0
  %extractE22 = extractelement <4 x i32> %17, i64 1
  %extractE23 = extractelement <4 x i32> %17, i64 2
  %sum24 = add i32 %extractE21, %extractE22
  %sum25 = add i32 %sum24, %extractE23
  %18 = srem i32 %15, 32
  %Fmul20 = mul i32 %18, 3
  store i32 %18, i32* %Recovery1
  %Fcmp26 = icmp ne i32 %sum25, %Fmul20
  br i1 %Fcmp26, label %19, label %23

; <label>:19:                                     ; preds = %14
  %remThree39 = sdiv i32 %sum25, %extractE21
  %FcmpThree40 = icmp ne i32 %remThree39, 3
  br i1 %FcmpThree40, label %20, label %21

; <label>:20:                                     ; preds = %19
  store i32 %18, i32* %Recovery1, align 4
  br label %22

; <label>:21:                                     ; preds = %19
  store i32 %extractE21, i32* %Recovery1, align 4
  br label %22

; <label>:22:                                     ; preds = %21, %20
  br label %23

; <label>:23:                                     ; preds = %14, %22
  %ReplaceInst43 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst43, i32* %4, align 4
  %24 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @userFrameDataPH, align 4
  %25 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %24, i32 0, i32 1
  %26 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %25, align 4
  %27 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %26, i32 0, i32 0
  store i32 0, i32* %27, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec8
  store i32 0, i32* %5, align 4
  br label %28

; <label>:28:                                     ; preds = %44, %23
  %29 = load i32, i32* %5, align 4
  %30 = load i32, i32* %3, align 4
  %31 = icmp slt i32 %29, %30
  br i1 %31, label %32, label %45

; <label>:32:                                     ; preds = %28
  %33 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @userFrameDataPH, align 4
  %34 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %33, i32 0, i32 32)
  store %struct.BF_PartHolder* %34, %struct.BF_PartHolder** @userFrameDataPH, align 4
  br label %35

; <label>:35:                                     ; preds = %32
  %36 = load i32, i32* %5, align 4
  %insertElmt27 = insertelement <4 x i32> undef, i32 %36, i32 0
  %insertElmt28 = insertelement <4 x i32> %insertElmt27, i32 %36, i32 1
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %36, i32 2
  %insertElmt30 = insertelement <4 x i32> %insertElmt29, i32 %36, i32 3
  store <4 x i32> %insertElmt30, <4 x i32>* %allocaVec8, align 16
  %37 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %Vop31 = add <4 x i32> %37, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop31, <4 x i32>* %allocaVec8
  %38 = load <4 x i32>, <4 x i32>* %allocaVec8, align 4
  %extractE33 = extractelement <4 x i32> %38, i64 0
  %extractE34 = extractelement <4 x i32> %38, i64 1
  %extractE35 = extractelement <4 x i32> %38, i64 2
  %sum36 = add i32 %extractE33, %extractE34
  %sum37 = add i32 %sum36, %extractE35
  %39 = add nsw i32 %36, 1
  %Fmul32 = mul i32 %39, 3
  store i32 %39, i32* %Recovery2
  %Fcmp38 = icmp ne i32 %sum37, %Fmul32
  br i1 %Fcmp38, label %40, label %44

; <label>:40:                                     ; preds = %35
  %remThree41 = sdiv i32 %sum37, %extractE33
  %FcmpThree42 = icmp ne i32 %remThree41, 3
  br i1 %FcmpThree42, label %41, label %42

; <label>:41:                                     ; preds = %40
  store i32 %39, i32* %Recovery2, align 4
  br label %43

; <label>:42:                                     ; preds = %40
  store i32 %extractE33, i32* %Recovery2, align 4
  br label %43

; <label>:43:                                     ; preds = %42, %41
  br label %44

; <label>:44:                                     ; preds = %35, %43
  %ReplaceInst44 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst44, i32* %5, align 4
  br label %28

; <label>:45:                                     ; preds = %28
  %46 = load i32, i32* %4, align 4
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %52

; <label>:48:                                     ; preds = %45
  %49 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @userFrameDataPH, align 4
  %50 = load i32, i32* %4, align 4
  %51 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %49, i32 0, i32 %50)
  store %struct.BF_PartHolder* %51, %struct.BF_PartHolder** @userFrameDataPH, align 4
  br label %52

; <label>:52:                                     ; preds = %48, %45
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @Huffmancodebits(%struct.BF_PartHolder**, i32*, %struct.gr_info*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %Recovery5 = alloca i32, align 4
  %allocaVec14 = alloca <4 x i32>, align 16
  %Recovery6 = alloca i32, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %Recovery7 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %Recovery8 = alloca i32, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %CallInst = alloca i32, align 4
  %CallInstVec = alloca <4 x i32>, align 16
  %4 = alloca %struct.BF_PartHolder**, align 4
  %5 = alloca i32*, align 4
  %6 = alloca %struct.gr_info*, align 4
  %allocaVec18 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec19 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec20 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec21 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec22 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec23 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %allocaVec24 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %allocaVec25 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  %allocaVec26 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %allocaVec27 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %allocaVec28 = alloca <4 x i32>, align 16
  %17 = alloca i32, align 4
  %allocaVec29 = alloca <4 x i32>, align 16
  %18 = alloca i32, align 4
  %allocaVec30 = alloca <4 x i32>, align 16
  %19 = alloca i32, align 4
  %allocaVec31 = alloca <4 x i32>, align 16
  %20 = alloca i32, align 4
  %allocaVec32 = alloca <4 x i32>, align 16
  %21 = alloca i32, align 4
  %allocaVec33 = alloca <4 x i32>, align 16
  %22 = alloca i32, align 4
  %allocaVec34 = alloca <4 x i32>, align 16
  %23 = alloca i32, align 4
  %allocaVec35 = alloca <4 x i32>, align 16
  %24 = alloca i32, align 4
  %allocaVec36 = alloca <4 x i32>, align 16
  %25 = alloca i32, align 4
  %allocaVec37 = alloca <4 x i32>, align 16
  %26 = alloca i32, align 4
  %allocaVec38 = alloca <4 x i32>, align 16
  %27 = alloca i32, align 4
  %28 = alloca [192 x [3 x i32]]*, align 4
  %allocaVec39 = alloca <4 x i32>, align 16
  %29 = alloca i32, align 4
  %allocaVec40 = alloca <4 x i32>, align 16
  %30 = alloca i32, align 4
  %allocaVec41 = alloca <4 x i32>, align 16
  %31 = alloca i32, align 4
  %allocaVec42 = alloca <4 x i32>, align 16
  %32 = alloca i32, align 4
  %allocaVec43 = alloca <4 x i32>, align 16
  %33 = alloca i32, align 4
  store %struct.BF_PartHolder** %0, %struct.BF_PartHolder*** %4, align 4
  store i32* %1, i32** %5, align 4
  store %struct.gr_info* %2, %struct.gr_info** %6, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec33
  store i32 0, i32* %22, align 4
  %34 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %35 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %34, i32 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = mul i32 %36, 2
  store i32 %37, i32* %10, align 4
  %38 = load i32, i32* %10, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %275

; <label>:40:                                     ; preds = %3
  %41 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %42 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %41, i32 0, i32 7
  %43 = load i32, i32* %42, align 4
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %163, label %45

; <label>:45:                                     ; preds = %40
  %46 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %47 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %46, i32 0, i32 6
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 2
  br i1 %49, label %50, label %163

; <label>:50:                                     ; preds = %45
  %51 = load i32*, i32** %5, align 4
  %52 = bitcast i32* %51 to [192 x [3 x i32]]*
  store [192 x [3 x i32]]* %52, [192 x [3 x i32]]** %28, align 4
  store <4 x i32> <i32 12, i32 12, i32 12, i32 12>, <4 x i32>* %allocaVec18
  store i32 12, i32* %7, align 4
  store <4 x i32> <i32 576, i32 576, i32 576, i32 576>, <4 x i32>* %allocaVec19
  store i32 576, i32* %8, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec34
  store i32 0, i32* %23, align 4
  br label %53

; <label>:53:                                     ; preds = %161, %50
  %54 = load i32, i32* %23, align 4
  %55 = icmp slt i32 %54, 13
  br i1 %55, label %56, label %162

; <label>:56:                                     ; preds = %53
  store <4 x i32> <i32 100, i32 100, i32 100, i32 100>, <4 x i32>* %allocaVec39
  store i32 100, i32* %29, align 4
  %57 = load i32, i32* %23, align 4
  %58 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %57
  %59 = load i32, i32* %58, align 4
  store i32 %59, i32* %26, align 4
  %60 = load i32, i32* %23, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %60, i32 0
  %insertElmt44 = insertelement <4 x i32> %insertElmt, i32 %60, i32 1
  %insertElmt45 = insertelement <4 x i32> %insertElmt44, i32 %60, i32 2
  %insertElmt46 = insertelement <4 x i32> %insertElmt45, i32 %60, i32 3
  store <4 x i32> %insertElmt46, <4 x i32>* %allocaVec34, align 16
  %61 = load <4 x i32>, <4 x i32>* %allocaVec34, align 16
  %Vop = add <4 x i32> %61, <i32 1, i32 1, i32 1, i32 1>
  %62 = add nsw i32 %60, 1
  %63 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %62
  %64 = load i32, i32* %63, align 4
  store i32 %64, i32* %27, align 4
  %65 = load i32, i32* %26, align 4
  %66 = load i32, i32* %7, align 4
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %68, label %73

; <label>:68:                                     ; preds = %56
  %69 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %70 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %69, i32 0, i32 8
  %71 = getelementptr inbounds [3 x i32], [3 x i32]* %70, i32 0, i32 0
  %72 = load i32, i32* %71, align 4
  store i32 %72, i32* %29, align 4
  br label %78

; <label>:73:                                     ; preds = %56
  %74 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %75 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %74, i32 0, i32 8
  %76 = getelementptr inbounds [3 x i32], [3 x i32]* %75, i32 0, i32 1
  %77 = load i32, i32* %76, align 4
  store i32 %77, i32* %29, align 4
  br label %78

; <label>:78:                                     ; preds = %73, %68
  %79 = load i32, i32* %29, align 4
  %80 = icmp ult i32 %79, 32
  br i1 %80, label %82, label %81

; <label>:81:                                     ; preds = %78
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8.160, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 532, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.Huffmancodebits, i32 0, i32 0))
  br label %82

; <label>:82:                                     ; preds = %81, %78
  %83 = phi i1 [ true, %78 ], [ false, %81 ]
  %84 = zext i1 %83 to i32
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec35
  store i32 0, i32* %24, align 4
  br label %85

; <label>:85:                                     ; preds = %150, %82
  %86 = load i32, i32* %24, align 4
  %87 = icmp slt i32 %86, 3
  br i1 %87, label %88, label %151

; <label>:88:                                     ; preds = %85
  %89 = load i32, i32* %26, align 4
  store i32 %89, i32* %25, align 4
  br label %90

; <label>:90:                                     ; preds = %139, %88
  %91 = load i32, i32* %25, align 4
  %92 = load i32, i32* %27, align 4
  %93 = icmp slt i32 %91, %92
  br i1 %93, label %94, label %140

; <label>:94:                                     ; preds = %90
  %95 = load [192 x [3 x i32]]*, [192 x [3 x i32]]** %28, align 4
  %96 = load i32, i32* %25, align 4
  %97 = getelementptr inbounds [192 x [3 x i32]], [192 x [3 x i32]]* %95, i32 0, i32 %96
  %98 = load i32, i32* %24, align 4
  %99 = getelementptr inbounds [3 x i32], [3 x i32]* %97, i32 0, i32 %98
  %100 = load i32, i32* %99, align 4
  store i32 %100, i32* %14, align 4
  %101 = load [192 x [3 x i32]]*, [192 x [3 x i32]]** %28, align 4
  %102 = load i32, i32* %25, align 4
  %insertElmt47 = insertelement <4 x i32> undef, i32 %102, i32 0
  %insertElmt48 = insertelement <4 x i32> %insertElmt47, i32 %102, i32 1
  %insertElmt49 = insertelement <4 x i32> %insertElmt48, i32 %102, i32 2
  %insertElmt50 = insertelement <4 x i32> %insertElmt49, i32 %102, i32 3
  store <4 x i32> %insertElmt50, <4 x i32>* %allocaVec36, align 16
  %103 = load <4 x i32>, <4 x i32>* %allocaVec36, align 16
  %Vop51 = add <4 x i32> %103, <i32 1, i32 1, i32 1, i32 1>
  %104 = add nsw i32 %102, 1
  %105 = getelementptr inbounds [192 x [3 x i32]], [192 x [3 x i32]]* %101, i32 0, i32 %104
  %106 = load i32, i32* %24, align 4
  %107 = getelementptr inbounds [3 x i32], [3 x i32]* %105, i32 0, i32 %106
  %108 = load i32, i32* %107, align 4
  store i32 %108, i32* %15, align 4
  %109 = load i32, i32* %29, align 4
  %110 = load i32, i32* %14, align 4
  %111 = load i32, i32* %15, align 4
  %112 = call arm_aapcscc i32 @HuffmanCode(i32 %109, i32 %110, i32 %111, i32* %20, i32* %21, i32* %17, i32* %18)
  store i32 %112, i32* %16, align 4
  %113 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  %114 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %113, align 4
  %115 = load i32, i32* %20, align 4
  %116 = load i32, i32* %17, align 4
  %117 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %114, i32 %115, i32 %116)
  %118 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  store %struct.BF_PartHolder* %117, %struct.BF_PartHolder** %118, align 4
  %119 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  %120 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %119, align 4
  %121 = load i32, i32* %21, align 4
  %122 = load i32, i32* %18, align 4
  %123 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %120, i32 %121, i32 %122)
  %124 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  store %struct.BF_PartHolder* %123, %struct.BF_PartHolder** %124, align 4
  %125 = load i32, i32* %16, align 4
  %insertElmt52 = insertelement <4 x i32> undef, i32 %125, i32 0
  %insertElmt53 = insertelement <4 x i32> %insertElmt52, i32 %125, i32 1
  %insertElmt54 = insertelement <4 x i32> %insertElmt53, i32 %125, i32 2
  %insertElmt55 = insertelement <4 x i32> %insertElmt54, i32 %125, i32 3
  store <4 x i32> %insertElmt55, <4 x i32>* %allocaVec27, align 16
  %126 = load i32, i32* %22, align 4
  %insertElmt56 = insertelement <4 x i32> undef, i32 %126, i32 0
  %insertElmt57 = insertelement <4 x i32> %insertElmt56, i32 %126, i32 1
  %insertElmt58 = insertelement <4 x i32> %insertElmt57, i32 %126, i32 2
  %insertElmt59 = insertelement <4 x i32> %insertElmt58, i32 %126, i32 3
  store <4 x i32> %insertElmt59, <4 x i32>* %allocaVec33, align 16
  %127 = load <4 x i32>, <4 x i32>* %allocaVec33, align 16
  %128 = load <4 x i32>, <4 x i32>* %allocaVec27, align 16
  %Vop60 = add <4 x i32> %127, %128
  store <4 x i32> %Vop60, <4 x i32>* %allocaVec33
  %129 = add nsw i32 %126, %125
  store i32 %129, i32* %22, align 4
  br label %130

; <label>:130:                                    ; preds = %94
  %131 = load i32, i32* %25, align 4
  %insertElmt61 = insertelement <4 x i32> undef, i32 %131, i32 0
  %insertElmt62 = insertelement <4 x i32> %insertElmt61, i32 %131, i32 1
  %insertElmt63 = insertelement <4 x i32> %insertElmt62, i32 %131, i32 2
  %insertElmt64 = insertelement <4 x i32> %insertElmt63, i32 %131, i32 3
  store <4 x i32> %insertElmt64, <4 x i32>* %allocaVec36, align 16
  %132 = load <4 x i32>, <4 x i32>* %allocaVec36, align 16
  %Vop65 = add <4 x i32> %132, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %Vop65, <4 x i32>* %allocaVec36
  %133 = load <4 x i32>, <4 x i32>* %allocaVec36, align 4
  %extractE = extractelement <4 x i32> %133, i64 0
  %extractE66 = extractelement <4 x i32> %133, i64 1
  %extractE67 = extractelement <4 x i32> %133, i64 2
  %sum = add i32 %extractE, %extractE66
  %sum68 = add i32 %sum, %extractE67
  %134 = add nsw i32 %131, 2
  %Fmul = mul i32 %134, 3
  store i32 %134, i32* %Recovery
  %Fcmp = icmp ne i32 %sum68, %Fmul
  br i1 %Fcmp, label %135, label %139

; <label>:135:                                    ; preds = %130
  %remThree = sdiv i32 %sum68, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %136, label %137

; <label>:136:                                    ; preds = %135
  store i32 %134, i32* %Recovery, align 4
  br label %138

; <label>:137:                                    ; preds = %135
  store i32 %extractE, i32* %Recovery, align 4
  br label %138

; <label>:138:                                    ; preds = %137, %136
  br label %139

; <label>:139:                                    ; preds = %130, %138
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %25, align 4
  br label %90

; <label>:140:                                    ; preds = %90
  br label %141

; <label>:141:                                    ; preds = %140
  %142 = load i32, i32* %24, align 4
  %insertElmt69 = insertelement <4 x i32> undef, i32 %142, i32 0
  %insertElmt70 = insertelement <4 x i32> %insertElmt69, i32 %142, i32 1
  %insertElmt71 = insertelement <4 x i32> %insertElmt70, i32 %142, i32 2
  %insertElmt72 = insertelement <4 x i32> %insertElmt71, i32 %142, i32 3
  store <4 x i32> %insertElmt72, <4 x i32>* %allocaVec35, align 16
  %143 = load <4 x i32>, <4 x i32>* %allocaVec35, align 16
  %Vop73 = add <4 x i32> %143, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop73, <4 x i32>* %allocaVec35
  %144 = load <4 x i32>, <4 x i32>* %allocaVec35, align 4
  %extractE75 = extractelement <4 x i32> %144, i64 0
  %extractE76 = extractelement <4 x i32> %144, i64 1
  %extractE77 = extractelement <4 x i32> %144, i64 2
  %sum78 = add i32 %extractE75, %extractE76
  %sum79 = add i32 %sum78, %extractE77
  %145 = add nsw i32 %142, 1
  %Fmul74 = mul i32 %145, 3
  store i32 %145, i32* %Recovery1
  %Fcmp80 = icmp ne i32 %sum79, %Fmul74
  br i1 %Fcmp80, label %146, label %150

; <label>:146:                                    ; preds = %141
  %remThree160 = sdiv i32 %sum79, %extractE75
  %FcmpThree161 = icmp ne i32 %remThree160, 3
  br i1 %FcmpThree161, label %147, label %148

; <label>:147:                                    ; preds = %146
  store i32 %145, i32* %Recovery1, align 4
  br label %149

; <label>:148:                                    ; preds = %146
  store i32 %extractE75, i32* %Recovery1, align 4
  br label %149

; <label>:149:                                    ; preds = %148, %147
  br label %150

; <label>:150:                                    ; preds = %141, %149
  %ReplaceInst172 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst172, i32* %24, align 4
  br label %85

; <label>:151:                                    ; preds = %85
  br label %152

; <label>:152:                                    ; preds = %151
  %153 = load i32, i32* %23, align 4
  %insertElmt81 = insertelement <4 x i32> undef, i32 %153, i32 0
  %insertElmt82 = insertelement <4 x i32> %insertElmt81, i32 %153, i32 1
  %insertElmt83 = insertelement <4 x i32> %insertElmt82, i32 %153, i32 2
  %insertElmt84 = insertelement <4 x i32> %insertElmt83, i32 %153, i32 3
  store <4 x i32> %insertElmt84, <4 x i32>* %allocaVec34, align 16
  %154 = load <4 x i32>, <4 x i32>* %allocaVec34, align 16
  %Vop85 = add <4 x i32> %154, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop85, <4 x i32>* %allocaVec34
  %155 = load <4 x i32>, <4 x i32>* %allocaVec34, align 4
  %extractE87 = extractelement <4 x i32> %155, i64 0
  %extractE88 = extractelement <4 x i32> %155, i64 1
  %extractE89 = extractelement <4 x i32> %155, i64 2
  %sum90 = add i32 %extractE87, %extractE88
  %sum91 = add i32 %sum90, %extractE89
  %156 = add nsw i32 %153, 1
  %Fmul86 = mul i32 %156, 3
  store i32 %156, i32* %Recovery2
  %Fcmp92 = icmp ne i32 %sum91, %Fmul86
  br i1 %Fcmp92, label %157, label %161

; <label>:157:                                    ; preds = %152
  %remThree162 = sdiv i32 %sum91, %extractE87
  %FcmpThree163 = icmp ne i32 %remThree162, 3
  br i1 %FcmpThree163, label %158, label %159

; <label>:158:                                    ; preds = %157
  store i32 %156, i32* %Recovery2, align 4
  br label %160

; <label>:159:                                    ; preds = %157
  store i32 %extractE87, i32* %Recovery2, align 4
  br label %160

; <label>:160:                                    ; preds = %159, %158
  br label %161

; <label>:161:                                    ; preds = %152, %160
  %ReplaceInst173 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst173, i32* %23, align 4
  br label %53

; <label>:162:                                    ; preds = %53
  br label %274

; <label>:163:                                    ; preds = %45, %40
  store <4 x i32> <i32 100, i32 100, i32 100, i32 100>, <4 x i32>* %allocaVec40
  store i32 100, i32* %30, align 4
  %164 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %165 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %164, i32 0, i32 7
  %166 = load i32, i32* %165, align 4
  %167 = icmp ne i32 %166, 0
  br i1 %167, label %168, label %169

; <label>:168:                                    ; preds = %163
  store <4 x i32> <i32 36, i32 36, i32 36, i32 36>, <4 x i32>* %allocaVec18
  store i32 36, i32* %7, align 4
  store <4 x i32> <i32 576, i32 576, i32 576, i32 576>, <4 x i32>* %allocaVec19
  store i32 576, i32* %8, align 4
  br label %198

; <label>:169:                                    ; preds = %163
  %170 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %171 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %170, i32 0, i32 10
  %172 = load i32, i32* %171, align 4
  %173 = add i32 %172, 1
  store i32 %173, i32* %30, align 4
  %174 = load i32, i32* %30, align 4
  %175 = icmp ult i32 %174, 23
  br i1 %175, label %177, label %176

; <label>:176:                                    ; preds = %169
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9.161, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 605, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.Huffmancodebits, i32 0, i32 0))
  br label %177

; <label>:177:                                    ; preds = %176, %169
  %178 = phi i1 [ true, %169 ], [ false, %176 ]
  %179 = zext i1 %178 to i32
  %180 = load i32, i32* %30, align 4
  %181 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %180
  %182 = load i32, i32* %181, align 4
  store i32 %182, i32* %7, align 4
  %183 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %184 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %183, i32 0, i32 11
  %185 = load i32, i32* %184, align 4
  %186 = add i32 %185, 1
  %187 = load i32, i32* %30, align 4
  %188 = add i32 %187, %186
  store i32 %188, i32* %30, align 4
  %189 = load i32, i32* %30, align 4
  %190 = icmp ult i32 %189, 23
  br i1 %190, label %192, label %191

; <label>:191:                                    ; preds = %177
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9.161, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 608, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.Huffmancodebits, i32 0, i32 0))
  br label %192

; <label>:192:                                    ; preds = %191, %177
  %193 = phi i1 [ true, %177 ], [ false, %191 ]
  %194 = zext i1 %193 to i32
  %195 = load i32, i32* %30, align 4
  %196 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %195
  %197 = load i32, i32* %196, align 4
  store i32 %197, i32* %8, align 4
  br label %198

; <label>:198:                                    ; preds = %192, %168
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec20
  store i32 0, i32* %9, align 4
  br label %199

; <label>:199:                                    ; preds = %269, %198
  %200 = load i32, i32* %9, align 4
  %201 = load i32, i32* %10, align 4
  %202 = icmp slt i32 %200, %201
  br i1 %202, label %203, label %273

; <label>:203:                                    ; preds = %199
  store <4 x i32> <i32 100, i32 100, i32 100, i32 100>, <4 x i32>* %allocaVec41
  store i32 100, i32* %31, align 4
  %204 = load i32, i32* %9, align 4
  %205 = load i32, i32* %7, align 4
  %206 = icmp slt i32 %204, %205
  br i1 %206, label %207, label %212

; <label>:207:                                    ; preds = %203
  %208 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %209 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %208, i32 0, i32 8
  %210 = getelementptr inbounds [3 x i32], [3 x i32]* %209, i32 0, i32 0
  %211 = load i32, i32* %210, align 4
  store i32 %211, i32* %31, align 4
  br label %227

; <label>:212:                                    ; preds = %203
  %213 = load i32, i32* %9, align 4
  %214 = load i32, i32* %8, align 4
  %215 = icmp slt i32 %213, %214
  br i1 %215, label %216, label %221

; <label>:216:                                    ; preds = %212
  %217 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %218 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %217, i32 0, i32 8
  %219 = getelementptr inbounds [3 x i32], [3 x i32]* %218, i32 0, i32 1
  %220 = load i32, i32* %219, align 4
  store i32 %220, i32* %31, align 4
  br label %226

; <label>:221:                                    ; preds = %212
  %222 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %223 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %222, i32 0, i32 8
  %224 = getelementptr inbounds [3 x i32], [3 x i32]* %223, i32 0, i32 2
  %225 = load i32, i32* %224, align 4
  store i32 %225, i32* %31, align 4
  br label %226

; <label>:226:                                    ; preds = %221, %216
  br label %227

; <label>:227:                                    ; preds = %226, %207
  %228 = load i32, i32* %31, align 4
  %229 = icmp ult i32 %228, 32
  br i1 %229, label %231, label %230

; <label>:230:                                    ; preds = %227
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8.160, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 629, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.Huffmancodebits, i32 0, i32 0))
  br label %231

; <label>:231:                                    ; preds = %230, %227
  %232 = phi i1 [ true, %227 ], [ false, %230 ]
  %233 = zext i1 %232 to i32
  %234 = load i32*, i32** %5, align 4
  %235 = load i32, i32* %9, align 4
  %236 = getelementptr inbounds i32, i32* %234, i32 %235
  %237 = load i32, i32* %236, align 4
  store i32 %237, i32* %14, align 4
  %238 = load i32*, i32** %5, align 4
  %239 = load i32, i32* %9, align 4
  %insertElmt93 = insertelement <4 x i32> undef, i32 %239, i32 0
  %insertElmt94 = insertelement <4 x i32> %insertElmt93, i32 %239, i32 1
  %insertElmt95 = insertelement <4 x i32> %insertElmt94, i32 %239, i32 2
  %insertElmt96 = insertelement <4 x i32> %insertElmt95, i32 %239, i32 3
  store <4 x i32> %insertElmt96, <4 x i32>* %allocaVec20, align 16
  %240 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop97 = add <4 x i32> %240, <i32 1, i32 1, i32 1, i32 1>
  %241 = add nsw i32 %239, 1
  %242 = getelementptr inbounds i32, i32* %238, i32 %241
  %243 = load i32, i32* %242, align 4
  store i32 %243, i32* %15, align 4
  %244 = load i32, i32* %31, align 4
  %245 = icmp ne i32 %244, 0
  br i1 %245, label %246, label %268

; <label>:246:                                    ; preds = %231
  %247 = load i32, i32* %31, align 4
  %248 = load i32, i32* %14, align 4
  %249 = load i32, i32* %15, align 4
  %250 = call arm_aapcscc i32 @HuffmanCode(i32 %247, i32 %248, i32 %249, i32* %20, i32* %21, i32* %17, i32* %18)
  store i32 %250, i32* %16, align 4
  %251 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  %252 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %251, align 4
  %253 = load i32, i32* %20, align 4
  %254 = load i32, i32* %17, align 4
  %255 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %252, i32 %253, i32 %254)
  %256 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  store %struct.BF_PartHolder* %255, %struct.BF_PartHolder** %256, align 4
  %257 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  %258 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %257, align 4
  %259 = load i32, i32* %21, align 4
  %260 = load i32, i32* %18, align 4
  %261 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %258, i32 %259, i32 %260)
  %262 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  store %struct.BF_PartHolder* %261, %struct.BF_PartHolder** %262, align 4
  %263 = load i32, i32* %16, align 4
  %insertElmt98 = insertelement <4 x i32> undef, i32 %263, i32 0
  %insertElmt99 = insertelement <4 x i32> %insertElmt98, i32 %263, i32 1
  %insertElmt100 = insertelement <4 x i32> %insertElmt99, i32 %263, i32 2
  %insertElmt101 = insertelement <4 x i32> %insertElmt100, i32 %263, i32 3
  store <4 x i32> %insertElmt101, <4 x i32>* %allocaVec27, align 16
  %264 = load i32, i32* %22, align 4
  %265 = load <4 x i32>, <4 x i32>* %allocaVec33, align 16
  %266 = load <4 x i32>, <4 x i32>* %allocaVec27, align 16
  %Vop102 = add <4 x i32> %265, %266
  store <4 x i32> %Vop102, <4 x i32>* %allocaVec33
  %267 = add nsw i32 %264, %263
  store i32 %267, i32* %22, align 4
  br label %268

; <label>:268:                                    ; preds = %246, %231
  br label %269

; <label>:269:                                    ; preds = %268
  %270 = load i32, i32* %9, align 4
  %insertElmt103 = insertelement <4 x i32> undef, i32 %270, i32 0
  %insertElmt104 = insertelement <4 x i32> %insertElmt103, i32 %270, i32 1
  %insertElmt105 = insertelement <4 x i32> %insertElmt104, i32 %270, i32 2
  %insertElmt106 = insertelement <4 x i32> %insertElmt105, i32 %270, i32 3
  store <4 x i32> %insertElmt106, <4 x i32>* %allocaVec20, align 16
  %271 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop107 = add <4 x i32> %271, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %Vop107, <4 x i32>* %allocaVec20
  %272 = add nsw i32 %270, 2
  store i32 %272, i32* %9, align 4
  br label %199

; <label>:273:                                    ; preds = %199
  br label %274

; <label>:274:                                    ; preds = %273, %162
  br label %275

; <label>:275:                                    ; preds = %274, %3
  %276 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %277 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %276, i32 0, i32 14
  %278 = load i32, i32* %277, align 4
  %279 = icmp ult i32 %278, 2
  br i1 %279, label %281, label %280

; <label>:280:                                    ; preds = %275
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.10.162, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 649, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.Huffmancodebits, i32 0, i32 0))
  br label %281

; <label>:281:                                    ; preds = %280, %275
  %282 = phi i1 [ true, %275 ], [ false, %280 ]
  %283 = zext i1 %282 to i32
  %284 = load i32, i32* %10, align 4
  %insertElmt108 = insertelement <4 x i32> undef, i32 %284, i32 0
  %insertElmt109 = insertelement <4 x i32> %insertElmt108, i32 %284, i32 1
  %insertElmt110 = insertelement <4 x i32> %insertElmt109, i32 %284, i32 2
  %insertElmt111 = insertelement <4 x i32> %insertElmt110, i32 %284, i32 3
  store <4 x i32> %insertElmt111, <4 x i32>* %allocaVec21, align 16
  %285 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %286 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %285, i32 0, i32 2
  %287 = load i32, i32* %286, align 4
  %288 = mul i32 %287, 4
  %289 = add i32 %284, %288
  store i32 %289, i32* %11, align 4
  %290 = load i32, i32* %11, align 4
  %291 = icmp sle i32 %290, 576
  br i1 %291, label %293, label %292

; <label>:292:                                    ; preds = %281
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11.163, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 652, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.Huffmancodebits, i32 0, i32 0))
  br label %293

; <label>:293:                                    ; preds = %292, %281
  %294 = phi i1 [ true, %281 ], [ false, %292 ]
  %295 = zext i1 %294 to i32
  %296 = load i32, i32* %10, align 4
  store i32 %296, i32* %9, align 4
  br label %297

; <label>:297:                                    ; preds = %346, %293
  %298 = load i32, i32* %9, align 4
  %299 = load i32, i32* %11, align 4
  %300 = icmp slt i32 %298, %299
  br i1 %300, label %301, label %347

; <label>:301:                                    ; preds = %297
  %302 = load i32*, i32** %5, align 4
  %303 = load i32, i32* %9, align 4
  %304 = getelementptr inbounds i32, i32* %302, i32 %303
  %305 = load i32, i32* %304, align 4
  store i32 %305, i32* %12, align 4
  %306 = load i32*, i32** %5, align 4
  %307 = load i32, i32* %9, align 4
  %308 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop112 = add <4 x i32> %308, <i32 1, i32 1, i32 1, i32 1>
  %309 = add nsw i32 %307, 1
  %310 = getelementptr inbounds i32, i32* %306, i32 %309
  %311 = load i32, i32* %310, align 4
  store i32 %311, i32* %13, align 4
  %312 = load i32*, i32** %5, align 4
  %313 = load i32, i32* %9, align 4
  %314 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop113 = add <4 x i32> %314, <i32 2, i32 2, i32 2, i32 2>
  %315 = add nsw i32 %313, 2
  %316 = getelementptr inbounds i32, i32* %312, i32 %315
  %317 = load i32, i32* %316, align 4
  store i32 %317, i32* %14, align 4
  %318 = load i32*, i32** %5, align 4
  %319 = load i32, i32* %9, align 4
  %320 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop114 = add <4 x i32> %320, <i32 3, i32 3, i32 3, i32 3>
  %321 = add nsw i32 %319, 3
  %322 = getelementptr inbounds i32, i32* %318, i32 %321
  %323 = load i32, i32* %322, align 4
  store i32 %323, i32* %15, align 4
  %324 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  %325 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %326 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %325, i32 0, i32 14
  %327 = load i32, i32* %326, align 4
  %328 = add i32 %327, 32
  %329 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %328
  %330 = load i32, i32* %12, align 4
  %331 = load i32, i32* %13, align 4
  %332 = load i32, i32* %14, align 4
  %333 = load i32, i32* %15, align 4
  %334 = call arm_aapcscc i32 @L3_huffman_coder_count1(%struct.BF_PartHolder** %324, %struct.huffcodetab* %329, i32 %330, i32 %331, i32 %332, i32 %333)
  %335 = load i32, i32* %22, align 4
  %336 = add nsw i32 %335, %334
  store i32 %336, i32* %22, align 4
  br label %337

; <label>:337:                                    ; preds = %301
  %338 = load i32, i32* %9, align 4
  %339 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop115 = add <4 x i32> %339, <i32 4, i32 4, i32 4, i32 4>
  store <4 x i32> %Vop115, <4 x i32>* %allocaVec20
  %340 = load <4 x i32>, <4 x i32>* %allocaVec20, align 4
  %extractE117 = extractelement <4 x i32> %340, i64 0
  %extractE118 = extractelement <4 x i32> %340, i64 1
  %extractE119 = extractelement <4 x i32> %340, i64 2
  %sum120 = add i32 %extractE117, %extractE118
  %sum121 = add i32 %sum120, %extractE119
  %341 = add nsw i32 %338, 4
  %Fmul116 = mul i32 %341, 3
  store i32 %341, i32* %Recovery5
  %Fcmp122 = icmp ne i32 %sum121, %Fmul116
  br i1 %Fcmp122, label %342, label %346

; <label>:342:                                    ; preds = %337
  %remThree164 = sdiv i32 %sum121, %extractE117
  %FcmpThree165 = icmp ne i32 %remThree164, 3
  br i1 %FcmpThree165, label %343, label %344

; <label>:343:                                    ; preds = %342
  store i32 %341, i32* %Recovery5, align 4
  br label %345

; <label>:344:                                    ; preds = %342
  store i32 %extractE117, i32* %Recovery5, align 4
  br label %345

; <label>:345:                                    ; preds = %344, %343
  br label %346

; <label>:346:                                    ; preds = %337, %345
  %ReplaceInst174 = load i32, i32* %Recovery5, align 4
  store i32 %ReplaceInst174, i32* %9, align 4
  br label %297

; <label>:347:                                    ; preds = %297
  %348 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %349 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %348, i32 0, i32 0
  %350 = load i32, i32* %349, align 4
  %351 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %352 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %351, i32 0, i32 15
  %353 = load i32, i32* %352, align 4
  %354 = sub i32 %350, %353
  %355 = load i32, i32* %22, align 4
  %356 = sub i32 %354, %355
  store i32 %356, i32* %19, align 4
  %357 = icmp ne i32 %356, 0
  br i1 %357, label %358, label %413

; <label>:358:                                    ; preds = %347
  %359 = load i32, i32* %19, align 4
  %insertElmt123 = insertelement <4 x i32> undef, i32 %359, i32 0
  %insertElmt124 = insertelement <4 x i32> %insertElmt123, i32 %359, i32 1
  %insertElmt125 = insertelement <4 x i32> %insertElmt124, i32 %359, i32 2
  %insertElmt126 = insertelement <4 x i32> %insertElmt125, i32 %359, i32 3
  store <4 x i32> %insertElmt126, <4 x i32>* %allocaVec30, align 16
  %360 = load <4 x i32>, <4 x i32>* %allocaVec30, align 16
  %Vop127 = sdiv <4 x i32> %360, <i32 32, i32 32, i32 32, i32 32>
  store <4 x i32> %Vop127, <4 x i32>* %allocaVec42
  %361 = sdiv i32 %359, 32
  store i32 %361, i32* %32, align 4
  %362 = load i32, i32* %19, align 4
  %insertElmt128 = insertelement <4 x i32> undef, i32 %362, i32 0
  %insertElmt129 = insertelement <4 x i32> %insertElmt128, i32 %362, i32 1
  %insertElmt130 = insertelement <4 x i32> %insertElmt129, i32 %362, i32 2
  %insertElmt131 = insertelement <4 x i32> %insertElmt130, i32 %362, i32 3
  store <4 x i32> %insertElmt131, <4 x i32>* %allocaVec30, align 16
  %363 = load <4 x i32>, <4 x i32>* %allocaVec30, align 16
  %Vop132 = srem <4 x i32> %363, <i32 32, i32 32, i32 32, i32 32>
  store <4 x i32> %Vop132, <4 x i32>* %allocaVec43
  %364 = load <4 x i32>, <4 x i32>* %allocaVec43, align 4
  %extractE134 = extractelement <4 x i32> %364, i64 0
  %extractE135 = extractelement <4 x i32> %364, i64 1
  %extractE136 = extractelement <4 x i32> %364, i64 2
  %sum137 = add i32 %extractE134, %extractE135
  %sum138 = add i32 %sum137, %extractE136
  %365 = srem i32 %362, 32
  %Fmul133 = mul i32 %365, 3
  store i32 %365, i32* %Recovery6
  %Fcmp139 = icmp ne i32 %sum138, %Fmul133
  br i1 %Fcmp139, label %366, label %370

; <label>:366:                                    ; preds = %358
  %remThree166 = sdiv i32 %sum138, %extractE134
  %FcmpThree167 = icmp ne i32 %remThree166, 3
  br i1 %FcmpThree167, label %367, label %368

; <label>:367:                                    ; preds = %366
  store i32 %365, i32* %Recovery6, align 4
  br label %369

; <label>:368:                                    ; preds = %366
  store i32 %extractE134, i32* %Recovery6, align 4
  br label %369

; <label>:369:                                    ; preds = %368, %367
  br label %370

; <label>:370:                                    ; preds = %358, %369
  %ReplaceInst175 = load i32, i32* %Recovery6, align 4
  store i32 %ReplaceInst175, i32* %33, align 4
  %371 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %372 = load i32, i32* %19, align 4
  %373 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %371, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.12.164, i32 0, i32 0), i32 %372)
  %374 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %375 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %374, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13.165, i32 0, i32 0))
  br label %376

; <label>:376:                                    ; preds = %387, %370
  %377 = load i32, i32* %32, align 4
  %378 = load <4 x i32>, <4 x i32>* %allocaVec42, align 16
  %Vop140 = add <4 x i32> %378, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop140, <4 x i32>* %allocaVec42
  %379 = load <4 x i32>, <4 x i32>* %allocaVec42, align 4
  %extractE142 = extractelement <4 x i32> %379, i64 0
  %extractE143 = extractelement <4 x i32> %379, i64 1
  %extractE144 = extractelement <4 x i32> %379, i64 2
  %sum145 = add i32 %extractE142, %extractE143
  %sum146 = add i32 %sum145, %extractE144
  %380 = add nsw i32 %377, -1
  %Fmul141 = mul i32 %380, 3
  store i32 %380, i32* %Recovery7
  %Fcmp147 = icmp ne i32 %sum146, %Fmul141
  br i1 %Fcmp147, label %381, label %385

; <label>:381:                                    ; preds = %376
  %remThree168 = sdiv i32 %sum146, %extractE142
  %FcmpThree169 = icmp ne i32 %remThree168, 3
  br i1 %FcmpThree169, label %382, label %383

; <label>:382:                                    ; preds = %381
  store i32 %380, i32* %Recovery7, align 4
  br label %384

; <label>:383:                                    ; preds = %381
  store i32 %extractE142, i32* %Recovery7, align 4
  br label %384

; <label>:384:                                    ; preds = %383, %382
  br label %385

; <label>:385:                                    ; preds = %376, %384
  %ReplaceInst176 = load i32, i32* %Recovery7, align 4
  store i32 %ReplaceInst176, i32* %32, align 4
  %386 = icmp ne i32 %377, 0
  br i1 %386, label %387, label %392

; <label>:387:                                    ; preds = %385
  %388 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  %389 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %388, align 4
  %390 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %389, i32 -1, i32 32)
  %391 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  store %struct.BF_PartHolder* %390, %struct.BF_PartHolder** %391, align 4
  br label %376

; <label>:392:                                    ; preds = %385
  %393 = load i32, i32* %33, align 4
  %394 = icmp ne i32 %393, 0
  br i1 %394, label %395, label %401

; <label>:395:                                    ; preds = %392
  %396 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  %397 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %396, align 4
  %398 = load i32, i32* %33, align 4
  %399 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %397, i32 -1, i32 %398)
  %400 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  store %struct.BF_PartHolder* %399, %struct.BF_PartHolder** %400, align 4
  br label %401

; <label>:401:                                    ; preds = %395, %392
  %402 = load i32, i32* %19, align 4
  %insertElmt148 = insertelement <4 x i32> undef, i32 %402, i32 0
  %insertElmt149 = insertelement <4 x i32> %insertElmt148, i32 %402, i32 1
  %insertElmt150 = insertelement <4 x i32> %insertElmt149, i32 %402, i32 2
  %insertElmt151 = insertelement <4 x i32> %insertElmt150, i32 %402, i32 3
  store <4 x i32> %insertElmt151, <4 x i32>* %allocaVec30, align 16
  %403 = load i32, i32* %22, align 4
  %404 = load <4 x i32>, <4 x i32>* %allocaVec33, align 16
  %405 = load <4 x i32>, <4 x i32>* %allocaVec30, align 16
  %Vop152 = add <4 x i32> %404, %405
  store <4 x i32> %Vop152, <4 x i32>* %allocaVec33
  %406 = load <4 x i32>, <4 x i32>* %allocaVec33, align 4
  %extractE154 = extractelement <4 x i32> %406, i64 0
  %extractE155 = extractelement <4 x i32> %406, i64 1
  %extractE156 = extractelement <4 x i32> %406, i64 2
  %sum157 = add i32 %extractE154, %extractE155
  %sum158 = add i32 %sum157, %extractE156
  %407 = add nsw i32 %403, %402
  %Fmul153 = mul i32 %407, 3
  store i32 %407, i32* %Recovery8
  %Fcmp159 = icmp ne i32 %sum158, %Fmul153
  br i1 %Fcmp159, label %408, label %412

; <label>:408:                                    ; preds = %401
  %remThree170 = sdiv i32 %sum158, %extractE154
  %FcmpThree171 = icmp ne i32 %remThree170, 3
  br i1 %FcmpThree171, label %409, label %410

; <label>:409:                                    ; preds = %408
  store i32 %407, i32* %Recovery8, align 4
  br label %411

; <label>:410:                                    ; preds = %408
  store i32 %extractE154, i32* %Recovery8, align 4
  br label %411

; <label>:411:                                    ; preds = %410, %409
  br label %412

; <label>:412:                                    ; preds = %401, %411
  %ReplaceInst177 = load i32, i32* %Recovery8, align 4
  store i32 %ReplaceInst177, i32* %22, align 4
  br label %413

; <label>:413:                                    ; preds = %412, %347
  %414 = load i32, i32* %22, align 4
  %415 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %416 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %415, i32 0, i32 0
  %417 = load i32, i32* %416, align 4
  %418 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %419 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %418, i32 0, i32 15
  %420 = load i32, i32* %419, align 4
  %421 = sub i32 %417, %420
  %422 = icmp eq i32 %414, %421
  br i1 %422, label %424, label %423

; <label>:423:                                    ; preds = %413
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.14.166, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 683, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.Huffmancodebits, i32 0, i32 0))
  br label %424

; <label>:424:                                    ; preds = %423, %413
  %425 = phi i1 [ true, %413 ], [ false, %423 ]
  %426 = zext i1 %425 to i32
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @HuffmanCode(i32, i32, i32, i32*, i32*, i32*, i32*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec21 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec22 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec23 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec24 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec25 = alloca <4 x i32>, align 16
  %Recovery5 = alloca i32, align 4
  %allocaVec26 = alloca <4 x i32>, align 16
  %Recovery6 = alloca i32, align 4
  %allocaVec27 = alloca <4 x i32>, align 16
  %Recovery7 = alloca i32, align 4
  %allocaVec28 = alloca <4 x i32>, align 16
  %Recovery8 = alloca i32, align 4
  %allocaVec29 = alloca <4 x i32>, align 16
  %Recovery9 = alloca i32, align 4
  %allocaVec30 = alloca <4 x i32>, align 16
  %Recovery10 = alloca i32, align 4
  %allocaVec31 = alloca <4 x i32>, align 16
  %Recovery11 = alloca i32, align 4
  %allocaVec32 = alloca <4 x i32>, align 16
  %Recovery12 = alloca i32, align 4
  %allocaVec33 = alloca <4 x i32>, align 16
  %Recovery13 = alloca i32, align 4
  %allocaVec34 = alloca <4 x i32>, align 16
  %Recovery14 = alloca i32, align 4
  %allocaVec35 = alloca <4 x i32>, align 16
  %Recovery15 = alloca i32, align 4
  %allocaVec36 = alloca <4 x i32>, align 16
  %Recovery16 = alloca i32, align 4
  %allocaVec37 = alloca <4 x i32>, align 16
  %Recovery17 = alloca i32, align 4
  %allocaVec38 = alloca <4 x i32>, align 16
  %Recovery18 = alloca i32, align 4
  %allocaVec39 = alloca <4 x i32>, align 16
  %Recovery19 = alloca i32, align 4
  %allocaVec40 = alloca <4 x i32>, align 16
  %Recovery20 = alloca i32, align 4
  %allocaVec41 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec42 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec43 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec44 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec45 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %12 = alloca i32*, align 4
  %13 = alloca i32*, align 4
  %14 = alloca i32*, align 4
  %15 = alloca i32*, align 4
  %allocaVec46 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %allocaVec47 = alloca <4 x i32>, align 16
  %17 = alloca i32, align 4
  %allocaVec48 = alloca <4 x i32>, align 16
  %18 = alloca i32, align 4
  %allocaVec49 = alloca <4 x i32>, align 16
  %19 = alloca i32, align 4
  %allocaVec50 = alloca <4 x i32>, align 16
  %20 = alloca i32, align 4
  %allocaVec51 = alloca <4 x i32>, align 16
  %21 = alloca i32, align 4
  %22 = alloca %struct.huffcodetab*, align 4
  store i32 %0, i32* %9, align 4
  store i32 %1, i32* %10, align 4
  store i32 %2, i32* %11, align 4
  store i32* %3, i32** %12, align 4
  store i32* %4, i32** %13, align 4
  store i32* %5, i32** %14, align 4
  store i32* %6, i32** %15, align 4
  %23 = load i32*, i32** %14, align 4
  store i32 0, i32* %23, align 4
  %24 = load i32*, i32** %15, align 4
  store i32 0, i32* %24, align 4
  %25 = load i32*, i32** %12, align 4
  store i32 0, i32* %25, align 4
  %26 = load i32*, i32** %13, align 4
  store i32 0, i32* %26, align 4
  %27 = load i32, i32* %9, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %30

; <label>:29:                                     ; preds = %7
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec42
  store i32 0, i32* %8, align 4
  br label %234

; <label>:30:                                     ; preds = %7
  %31 = call arm_aapcscc i32 @abs_and_sign(i32* %10)
  store i32 %31, i32* %16, align 4
  %32 = call arm_aapcscc i32 @abs_and_sign(i32* %11)
  store i32 %32, i32* %17, align 4
  %33 = load i32, i32* %9, align 4
  %34 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %33
  store %struct.huffcodetab* %34, %struct.huffcodetab** %22, align 4
  %35 = load i32, i32* %9, align 4
  %36 = icmp sgt i32 %35, 15
  br i1 %36, label %37, label %156

; <label>:37:                                     ; preds = %30
  %38 = load %struct.huffcodetab*, %struct.huffcodetab** %22, align 4
  %39 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %38, i32 0, i32 0
  %40 = load i32, i32* %39, align 4
  store i32 %40, i32* %20, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec49
  store i32 0, i32* %19, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec48
  store i32 0, i32* %18, align 4
  %41 = load i32, i32* %10, align 4
  %42 = icmp sgt i32 %41, 14
  br i1 %42, label %43, label %56

; <label>:43:                                     ; preds = %37
  %44 = load i32, i32* %10, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %44, i32 0
  %insertElmt52 = insertelement <4 x i32> %insertElmt, i32 %44, i32 1
  %insertElmt53 = insertelement <4 x i32> %insertElmt52, i32 %44, i32 2
  %insertElmt54 = insertelement <4 x i32> %insertElmt53, i32 %44, i32 3
  store <4 x i32> %insertElmt54, <4 x i32>* %allocaVec44, align 16
  %45 = load <4 x i32>, <4 x i32>* %allocaVec44, align 16
  %Vop = sub <4 x i32> %45, <i32 15, i32 15, i32 15, i32 15>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec48
  %46 = sub nsw i32 %44, 15
  store i32 %46, i32* %18, align 4
  %47 = load i32, i32* %18, align 4
  %48 = load %struct.huffcodetab*, %struct.huffcodetab** %22, align 4
  %49 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %48, i32 0, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = icmp ule i32 %47, %50
  br i1 %51, label %53, label %52

; <label>:52:                                     ; preds = %43
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3.167, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 797, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.HuffmanCode, i32 0, i32 0))
  br label %53

; <label>:53:                                     ; preds = %52, %43
  %54 = phi i1 [ true, %43 ], [ false, %52 ]
  %55 = zext i1 %54 to i32
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %allocaVec44
  store i32 15, i32* %10, align 4
  br label %56

; <label>:56:                                     ; preds = %53, %37
  %57 = load i32, i32* %11, align 4
  %58 = icmp sgt i32 %57, 14
  br i1 %58, label %59, label %72

; <label>:59:                                     ; preds = %56
  %60 = load i32, i32* %11, align 4
  %insertElmt55 = insertelement <4 x i32> undef, i32 %60, i32 0
  %insertElmt56 = insertelement <4 x i32> %insertElmt55, i32 %60, i32 1
  %insertElmt57 = insertelement <4 x i32> %insertElmt56, i32 %60, i32 2
  %insertElmt58 = insertelement <4 x i32> %insertElmt57, i32 %60, i32 3
  store <4 x i32> %insertElmt58, <4 x i32>* %allocaVec45, align 16
  %61 = load <4 x i32>, <4 x i32>* %allocaVec45, align 16
  %Vop59 = sub <4 x i32> %61, <i32 15, i32 15, i32 15, i32 15>
  store <4 x i32> %Vop59, <4 x i32>* %allocaVec49
  %62 = sub nsw i32 %60, 15
  store i32 %62, i32* %19, align 4
  %63 = load i32, i32* %19, align 4
  %64 = load %struct.huffcodetab*, %struct.huffcodetab** %22, align 4
  %65 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %64, i32 0, i32 1
  %66 = load i32, i32* %65, align 4
  %67 = icmp ule i32 %63, %66
  br i1 %67, label %69, label %68

; <label>:68:                                     ; preds = %59
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.168, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 803, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.HuffmanCode, i32 0, i32 0))
  br label %69

; <label>:69:                                     ; preds = %68, %59
  %70 = phi i1 [ true, %59 ], [ false, %68 ]
  %71 = zext i1 %70 to i32
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %allocaVec45
  store i32 15, i32* %11, align 4
  br label %72

; <label>:72:                                     ; preds = %69, %56
  %73 = load i32, i32* %10, align 4
  %insertElmt60 = insertelement <4 x i32> undef, i32 %73, i32 0
  %insertElmt61 = insertelement <4 x i32> %insertElmt60, i32 %73, i32 1
  %insertElmt62 = insertelement <4 x i32> %insertElmt61, i32 %73, i32 2
  %insertElmt63 = insertelement <4 x i32> %insertElmt62, i32 %73, i32 3
  store <4 x i32> %insertElmt63, <4 x i32>* %allocaVec44, align 16
  %74 = load <4 x i32>, <4 x i32>* %allocaVec44, align 16
  %Vop64 = mul <4 x i32> %74, <i32 16, i32 16, i32 16, i32 16>
  %75 = mul nsw i32 %73, 16
  %76 = load i32, i32* %11, align 4
  %insertElmt65 = insertelement <4 x i32> undef, i32 %76, i32 0
  %insertElmt66 = insertelement <4 x i32> %insertElmt65, i32 %76, i32 1
  %insertElmt67 = insertelement <4 x i32> %insertElmt66, i32 %76, i32 2
  %insertElmt68 = insertelement <4 x i32> %insertElmt67, i32 %76, i32 3
  store <4 x i32> %insertElmt68, <4 x i32>* %allocaVec45, align 16
  %77 = load <4 x i32>, <4 x i32>* %allocaVec45, align 16
  %Vop69 = add <4 x i32> %Vop64, %77
  store <4 x i32> %Vop69, <4 x i32>* %allocaVec51
  %78 = load <4 x i32>, <4 x i32>* %allocaVec51, align 4
  %extractE = extractelement <4 x i32> %78, i64 0
  %extractE70 = extractelement <4 x i32> %78, i64 1
  %extractE71 = extractelement <4 x i32> %78, i64 2
  %sum = add i32 %extractE, %extractE70
  %sum72 = add i32 %sum, %extractE71
  %79 = add nsw i32 %75, %76
  %Fmul = mul i32 %79, 3
  store i32 %79, i32* %Recovery
  %Fcmp = icmp ne i32 %sum72, %Fmul
  br i1 %Fcmp, label %80, label %84

; <label>:80:                                     ; preds = %72
  %remThree = sdiv i32 %sum72, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %81, label %82

; <label>:81:                                     ; preds = %80
  store i32 %79, i32* %Recovery, align 4
  br label %83

; <label>:82:                                     ; preds = %80
  store i32 %extractE, i32* %Recovery, align 4
  br label %83

; <label>:83:                                     ; preds = %82, %81
  br label %84

; <label>:84:                                     ; preds = %72, %83
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %21, align 4
  %85 = load %struct.huffcodetab*, %struct.huffcodetab** %22, align 4
  %86 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %85, i32 0, i32 2
  %87 = load i32*, i32** %86, align 4
  %88 = load i32, i32* %21, align 4
  %89 = getelementptr inbounds i32, i32* %87, i32 %88
  %90 = load i32, i32* %89, align 4
  %91 = load i32*, i32** %12, align 4
  store i32 %90, i32* %91, align 4
  %92 = load %struct.huffcodetab*, %struct.huffcodetab** %22, align 4
  %93 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %92, i32 0, i32 3
  %94 = load i8*, i8** %93, align 4
  %95 = load i32, i32* %21, align 4
  %96 = getelementptr inbounds i8, i8* %94, i32 %95
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = load i32*, i32** %14, align 4
  store i32 %98, i32* %99, align 4
  %100 = load i32, i32* %10, align 4
  %101 = icmp sgt i32 %100, 14
  br i1 %101, label %102, label %111

; <label>:102:                                    ; preds = %84
  %103 = load i32, i32* %18, align 4
  %104 = load i32*, i32** %13, align 4
  %105 = load i32, i32* %104, align 4
  %106 = or i32 %105, %103
  store i32 %106, i32* %104, align 4
  %107 = load i32, i32* %20, align 4
  %108 = load i32*, i32** %15, align 4
  %109 = load i32, i32* %108, align 4
  %110 = add i32 %109, %107
  store i32 %110, i32* %108, align 4
  br label %111

; <label>:111:                                    ; preds = %102, %84
  %112 = load i32, i32* %10, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %125

; <label>:114:                                    ; preds = %111
  %115 = load i32*, i32** %13, align 4
  %116 = load i32, i32* %115, align 4
  %117 = shl i32 %116, 1
  store i32 %117, i32* %115, align 4
  %118 = load i32, i32* %16, align 4
  %119 = load i32*, i32** %13, align 4
  %120 = load i32, i32* %119, align 4
  %121 = or i32 %120, %118
  store i32 %121, i32* %119, align 4
  %122 = load i32*, i32** %15, align 4
  %123 = load i32, i32* %122, align 4
  %124 = add nsw i32 %123, 1
  store i32 %124, i32* %122, align 4
  br label %125

; <label>:125:                                    ; preds = %114, %111
  %126 = load i32, i32* %11, align 4
  %127 = icmp sgt i32 %126, 14
  br i1 %127, label %128, label %141

; <label>:128:                                    ; preds = %125
  %129 = load i32, i32* %20, align 4
  %insertElmt73 = insertelement <4 x i32> undef, i32 %129, i32 0
  %insertElmt74 = insertelement <4 x i32> %insertElmt73, i32 %129, i32 1
  %insertElmt75 = insertelement <4 x i32> %insertElmt74, i32 %129, i32 2
  %insertElmt76 = insertelement <4 x i32> %insertElmt75, i32 %129, i32 3
  store <4 x i32> %insertElmt76, <4 x i32>* %allocaVec50, align 16
  %130 = load i32*, i32** %13, align 4
  %131 = load i32, i32* %130, align 4
  %132 = shl i32 %131, %129
  store i32 %132, i32* %130, align 4
  %133 = load i32, i32* %19, align 4
  %134 = load i32*, i32** %13, align 4
  %135 = load i32, i32* %134, align 4
  %136 = or i32 %135, %133
  store i32 %136, i32* %134, align 4
  %137 = load i32, i32* %20, align 4
  %138 = load i32*, i32** %15, align 4
  %139 = load i32, i32* %138, align 4
  %140 = add i32 %139, %137
  store i32 %140, i32* %138, align 4
  br label %141

; <label>:141:                                    ; preds = %128, %125
  %142 = load i32, i32* %11, align 4
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %144, label %155

; <label>:144:                                    ; preds = %141
  %145 = load i32*, i32** %13, align 4
  %146 = load i32, i32* %145, align 4
  %147 = shl i32 %146, 1
  store i32 %147, i32* %145, align 4
  %148 = load i32, i32* %17, align 4
  %149 = load i32*, i32** %13, align 4
  %150 = load i32, i32* %149, align 4
  %151 = or i32 %150, %148
  store i32 %151, i32* %149, align 4
  %152 = load i32*, i32** %15, align 4
  %153 = load i32, i32* %152, align 4
  %154 = add nsw i32 %153, 1
  store i32 %154, i32* %152, align 4
  br label %155

; <label>:155:                                    ; preds = %144, %141
  br label %214

; <label>:156:                                    ; preds = %30
  %157 = load i32, i32* %10, align 4
  %insertElmt77 = insertelement <4 x i32> undef, i32 %157, i32 0
  %insertElmt78 = insertelement <4 x i32> %insertElmt77, i32 %157, i32 1
  %insertElmt79 = insertelement <4 x i32> %insertElmt78, i32 %157, i32 2
  %insertElmt80 = insertelement <4 x i32> %insertElmt79, i32 %157, i32 3
  store <4 x i32> %insertElmt80, <4 x i32>* %allocaVec44, align 16
  %158 = load <4 x i32>, <4 x i32>* %allocaVec44, align 16
  %Vop81 = mul <4 x i32> %158, <i32 16, i32 16, i32 16, i32 16>
  %159 = mul nsw i32 %157, 16
  %160 = load i32, i32* %11, align 4
  %insertElmt82 = insertelement <4 x i32> undef, i32 %160, i32 0
  %insertElmt83 = insertelement <4 x i32> %insertElmt82, i32 %160, i32 1
  %insertElmt84 = insertelement <4 x i32> %insertElmt83, i32 %160, i32 2
  %insertElmt85 = insertelement <4 x i32> %insertElmt84, i32 %160, i32 3
  store <4 x i32> %insertElmt85, <4 x i32>* %allocaVec45, align 16
  %161 = load <4 x i32>, <4 x i32>* %allocaVec45, align 16
  %Vop86 = add <4 x i32> %Vop81, %161
  store <4 x i32> %Vop86, <4 x i32>* %allocaVec51
  %162 = load <4 x i32>, <4 x i32>* %allocaVec51, align 4
  %extractE88 = extractelement <4 x i32> %162, i64 0
  %extractE89 = extractelement <4 x i32> %162, i64 1
  %extractE90 = extractelement <4 x i32> %162, i64 2
  %sum91 = add i32 %extractE88, %extractE89
  %sum92 = add i32 %sum91, %extractE90
  %163 = add nsw i32 %159, %160
  %Fmul87 = mul i32 %163, 3
  store i32 %163, i32* %Recovery12
  %Fcmp93 = icmp ne i32 %sum92, %Fmul87
  br i1 %Fcmp93, label %164, label %168

; <label>:164:                                    ; preds = %156
  %remThree94 = sdiv i32 %sum92, %extractE88
  %FcmpThree95 = icmp ne i32 %remThree94, 3
  br i1 %FcmpThree95, label %165, label %166

; <label>:165:                                    ; preds = %164
  store i32 %163, i32* %Recovery12, align 4
  br label %167

; <label>:166:                                    ; preds = %164
  store i32 %extractE88, i32* %Recovery12, align 4
  br label %167

; <label>:167:                                    ; preds = %166, %165
  br label %168

; <label>:168:                                    ; preds = %156, %167
  %ReplaceInst96 = load i32, i32* %Recovery12, align 4
  store i32 %ReplaceInst96, i32* %21, align 4
  %169 = load %struct.huffcodetab*, %struct.huffcodetab** %22, align 4
  %170 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %169, i32 0, i32 2
  %171 = load i32*, i32** %170, align 4
  %172 = load i32, i32* %21, align 4
  %173 = getelementptr inbounds i32, i32* %171, i32 %172
  %174 = load i32, i32* %173, align 4
  %175 = load i32*, i32** %12, align 4
  store i32 %174, i32* %175, align 4
  %176 = load %struct.huffcodetab*, %struct.huffcodetab** %22, align 4
  %177 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %176, i32 0, i32 3
  %178 = load i8*, i8** %177, align 4
  %179 = load i32, i32* %21, align 4
  %180 = getelementptr inbounds i8, i8* %178, i32 %179
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = load i32*, i32** %14, align 4
  %184 = load i32, i32* %183, align 4
  %185 = add nsw i32 %184, %182
  store i32 %185, i32* %183, align 4
  %186 = load i32, i32* %10, align 4
  %187 = icmp ne i32 %186, 0
  br i1 %187, label %188, label %199

; <label>:188:                                    ; preds = %168
  %189 = load i32*, i32** %12, align 4
  %190 = load i32, i32* %189, align 4
  %191 = shl i32 %190, 1
  store i32 %191, i32* %189, align 4
  %192 = load i32, i32* %16, align 4
  %193 = load i32*, i32** %12, align 4
  %194 = load i32, i32* %193, align 4
  %195 = or i32 %194, %192
  store i32 %195, i32* %193, align 4
  %196 = load i32*, i32** %14, align 4
  %197 = load i32, i32* %196, align 4
  %198 = add nsw i32 %197, 1
  store i32 %198, i32* %196, align 4
  br label %199

; <label>:199:                                    ; preds = %188, %168
  %200 = load i32, i32* %11, align 4
  %201 = icmp ne i32 %200, 0
  br i1 %201, label %202, label %213

; <label>:202:                                    ; preds = %199
  %203 = load i32*, i32** %12, align 4
  %204 = load i32, i32* %203, align 4
  %205 = shl i32 %204, 1
  store i32 %205, i32* %203, align 4
  %206 = load i32, i32* %17, align 4
  %207 = load i32*, i32** %12, align 4
  %208 = load i32, i32* %207, align 4
  %209 = or i32 %208, %206
  store i32 %209, i32* %207, align 4
  %210 = load i32*, i32** %14, align 4
  %211 = load i32, i32* %210, align 4
  %212 = add nsw i32 %211, 1
  store i32 %212, i32* %210, align 4
  br label %213

; <label>:213:                                    ; preds = %202, %199
  br label %214

; <label>:214:                                    ; preds = %213, %155
  %215 = load i32*, i32** %14, align 4
  %216 = load i32, i32* %215, align 4
  %217 = icmp sle i32 %216, 32
  br i1 %217, label %219, label %218

; <label>:218:                                    ; preds = %214
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.169, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 851, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.HuffmanCode, i32 0, i32 0))
  br label %219

; <label>:219:                                    ; preds = %218, %214
  %220 = phi i1 [ true, %214 ], [ false, %218 ]
  %221 = zext i1 %220 to i32
  %222 = load i32*, i32** %15, align 4
  %223 = load i32, i32* %222, align 4
  %224 = icmp sle i32 %223, 32
  br i1 %224, label %226, label %225

; <label>:225:                                    ; preds = %219
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.170, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 852, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.HuffmanCode, i32 0, i32 0))
  br label %226

; <label>:226:                                    ; preds = %225, %219
  %227 = phi i1 [ true, %219 ], [ false, %225 ]
  %228 = zext i1 %227 to i32
  %229 = load i32*, i32** %14, align 4
  %230 = load i32, i32* %229, align 4
  %231 = load i32*, i32** %15, align 4
  %232 = load i32, i32* %231, align 4
  %233 = add nsw i32 %230, %232
  store i32 %233, i32* %8, align 4
  br label %234

; <label>:234:                                    ; preds = %226, %29
  %235 = load i32, i32* %8, align 4
  ret i32 %235
}

; Function Attrs: nounwind
define arm_aapcscc i32 @L3_huffman_coder_count1(%struct.BF_PartHolder**, %struct.huffcodetab*, i32, i32, i32, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %7 = alloca %struct.BF_PartHolder**, align 4
  %8 = alloca %struct.huffcodetab*, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %17 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %18 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %19 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %20 = alloca i32, align 4
  store %struct.BF_PartHolder** %0, %struct.BF_PartHolder*** %7, align 4
  store %struct.huffcodetab* %1, %struct.huffcodetab** %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i32 %4, i32* %11, align 4
  store i32 %5, i32* %12, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec12
  store i32 0, i32* %20, align 4
  %21 = call arm_aapcscc i32 @abs_and_sign(i32* %9)
  store i32 %21, i32* %14, align 4
  %22 = call arm_aapcscc i32 @abs_and_sign(i32* %10)
  store i32 %22, i32* %15, align 4
  %23 = call arm_aapcscc i32 @abs_and_sign(i32* %11)
  store i32 %23, i32* %16, align 4
  %24 = call arm_aapcscc i32 @abs_and_sign(i32* %12)
  store i32 %24, i32* %17, align 4
  %25 = load i32, i32* %9, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %25, i32 0
  %insertElmt13 = insertelement <4 x i32> %insertElmt, i32 %25, i32 1
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %25, i32 2
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %25, i32 3
  store <4 x i32> %insertElmt15, <4 x i32>* %allocaVec1, align 16
  %26 = load <4 x i32>, <4 x i32>* %allocaVec1, align 16
  %Vop = shl <4 x i32> %26, <i32 3, i32 3, i32 3, i32 3>
  %27 = shl i32 %25, 3
  %28 = load i32, i32* %10, align 4
  %insertElmt16 = insertelement <4 x i32> undef, i32 %28, i32 0
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %28, i32 1
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %28, i32 2
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %28, i32 3
  store <4 x i32> %insertElmt19, <4 x i32>* %allocaVec2, align 16
  %29 = load <4 x i32>, <4 x i32>* %allocaVec2, align 16
  %Vop20 = shl <4 x i32> %29, <i32 2, i32 2, i32 2, i32 2>
  %30 = shl i32 %28, 2
  %Vop21 = add <4 x i32> %Vop, %Vop20
  %31 = add nsw i32 %27, %30
  %32 = load i32, i32* %11, align 4
  %insertElmt22 = insertelement <4 x i32> undef, i32 %32, i32 0
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %32, i32 1
  %insertElmt24 = insertelement <4 x i32> %insertElmt23, i32 %32, i32 2
  %insertElmt25 = insertelement <4 x i32> %insertElmt24, i32 %32, i32 3
  store <4 x i32> %insertElmt25, <4 x i32>* %allocaVec3, align 16
  %33 = load <4 x i32>, <4 x i32>* %allocaVec3, align 16
  %Vop26 = shl <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %34 = shl i32 %32, 1
  %Vop27 = add <4 x i32> %Vop21, %Vop26
  %35 = add nsw i32 %31, %34
  %36 = load i32, i32* %12, align 4
  %insertElmt28 = insertelement <4 x i32> undef, i32 %36, i32 0
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %36, i32 1
  %insertElmt30 = insertelement <4 x i32> %insertElmt29, i32 %36, i32 2
  %insertElmt31 = insertelement <4 x i32> %insertElmt30, i32 %36, i32 3
  store <4 x i32> %insertElmt31, <4 x i32>* %allocaVec4, align 16
  %37 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop32 = add <4 x i32> %Vop27, %37
  store <4 x i32> %Vop32, <4 x i32>* %allocaVec10
  %38 = add nsw i32 %35, %36
  store i32 %38, i32* %18, align 4
  %39 = load %struct.huffcodetab*, %struct.huffcodetab** %8, align 4
  %40 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %39, i32 0, i32 2
  %41 = load i32*, i32** %40, align 4
  %42 = load i32, i32* %18, align 4
  %43 = getelementptr inbounds i32, i32* %41, i32 %42
  %44 = load i32, i32* %43, align 4
  store i32 %44, i32* %13, align 4
  %45 = load %struct.huffcodetab*, %struct.huffcodetab** %8, align 4
  %46 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %45, i32 0, i32 3
  %47 = load i8*, i8** %46, align 4
  %48 = load i32, i32* %18, align 4
  %49 = getelementptr inbounds i8, i8* %47, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  store i32 %51, i32* %19, align 4
  %52 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %7, align 4
  %53 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %52, align 4
  %54 = load i32, i32* %13, align 4
  %55 = load i32, i32* %19, align 4
  %56 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %53, i32 %54, i32 %55)
  %57 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %7, align 4
  store %struct.BF_PartHolder* %56, %struct.BF_PartHolder** %57, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec12
  store i32 0, i32* %20, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec10
  store i32 0, i32* %18, align 4
  %58 = load i32, i32* %9, align 4
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %60, label %65

; <label>:60:                                     ; preds = %6
  %61 = load i32, i32* %14, align 4
  store i32 %61, i32* %18, align 4
  %62 = load i32, i32* %20, align 4
  %insertElmt33 = insertelement <4 x i32> undef, i32 %62, i32 0
  %insertElmt34 = insertelement <4 x i32> %insertElmt33, i32 %62, i32 1
  %insertElmt35 = insertelement <4 x i32> %insertElmt34, i32 %62, i32 2
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %62, i32 3
  store <4 x i32> %insertElmt36, <4 x i32>* %allocaVec12, align 16
  %63 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop37 = add <4 x i32> %63, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop37, <4 x i32>* %allocaVec12
  %64 = add nsw i32 %62, 1
  store i32 %64, i32* %20, align 4
  br label %65

; <label>:65:                                     ; preds = %60, %6
  %66 = load i32, i32* %10, align 4
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %78

; <label>:68:                                     ; preds = %65
  %69 = load i32, i32* %18, align 4
  %70 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop38 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %70
  %71 = mul i32 2, %69
  %72 = load i32, i32* %15, align 4
  %insertElmt39 = insertelement <4 x i32> undef, i32 %72, i32 0
  %insertElmt40 = insertelement <4 x i32> %insertElmt39, i32 %72, i32 1
  %insertElmt41 = insertelement <4 x i32> %insertElmt40, i32 %72, i32 2
  %insertElmt42 = insertelement <4 x i32> %insertElmt41, i32 %72, i32 3
  store <4 x i32> %insertElmt42, <4 x i32>* %allocaVec7, align 16
  %73 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop43 = add <4 x i32> %Vop38, %73
  store <4 x i32> %Vop43, <4 x i32>* %allocaVec10
  %74 = add i32 %71, %72
  store i32 %74, i32* %18, align 4
  %75 = load i32, i32* %20, align 4
  %76 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop44 = add <4 x i32> %76, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop44, <4 x i32>* %allocaVec12
  %77 = add nsw i32 %75, 1
  store i32 %77, i32* %20, align 4
  br label %78

; <label>:78:                                     ; preds = %68, %65
  %79 = load i32, i32* %11, align 4
  %80 = icmp ne i32 %79, 0
  br i1 %80, label %81, label %91

; <label>:81:                                     ; preds = %78
  %82 = load i32, i32* %18, align 4
  %83 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop45 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %83
  %84 = mul i32 2, %82
  %85 = load i32, i32* %16, align 4
  %insertElmt46 = insertelement <4 x i32> undef, i32 %85, i32 0
  %insertElmt47 = insertelement <4 x i32> %insertElmt46, i32 %85, i32 1
  %insertElmt48 = insertelement <4 x i32> %insertElmt47, i32 %85, i32 2
  %insertElmt49 = insertelement <4 x i32> %insertElmt48, i32 %85, i32 3
  store <4 x i32> %insertElmt49, <4 x i32>* %allocaVec8, align 16
  %86 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %Vop50 = add <4 x i32> %Vop45, %86
  store <4 x i32> %Vop50, <4 x i32>* %allocaVec10
  %87 = add i32 %84, %85
  store i32 %87, i32* %18, align 4
  %88 = load i32, i32* %20, align 4
  %89 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop51 = add <4 x i32> %89, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop51, <4 x i32>* %allocaVec12
  %90 = add nsw i32 %88, 1
  store i32 %90, i32* %20, align 4
  br label %91

; <label>:91:                                     ; preds = %81, %78
  %92 = load i32, i32* %12, align 4
  %93 = icmp ne i32 %92, 0
  br i1 %93, label %94, label %110

; <label>:94:                                     ; preds = %91
  %95 = load i32, i32* %18, align 4
  %96 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop52 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %96
  %97 = mul i32 2, %95
  %98 = load i32, i32* %17, align 4
  %insertElmt53 = insertelement <4 x i32> undef, i32 %98, i32 0
  %insertElmt54 = insertelement <4 x i32> %insertElmt53, i32 %98, i32 1
  %insertElmt55 = insertelement <4 x i32> %insertElmt54, i32 %98, i32 2
  %insertElmt56 = insertelement <4 x i32> %insertElmt55, i32 %98, i32 3
  store <4 x i32> %insertElmt56, <4 x i32>* %allocaVec9, align 16
  %99 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop57 = add <4 x i32> %Vop52, %99
  store <4 x i32> %Vop57, <4 x i32>* %allocaVec10
  %100 = load <4 x i32>, <4 x i32>* %allocaVec10, align 4
  %extractE = extractelement <4 x i32> %100, i64 0
  %extractE58 = extractelement <4 x i32> %100, i64 1
  %extractE59 = extractelement <4 x i32> %100, i64 2
  %sum = add i32 %extractE, %extractE58
  %sum60 = add i32 %sum, %extractE59
  %101 = add i32 %97, %98
  %Fmul = mul i32 %101, 3
  store i32 %101, i32* %Recovery
  %Fcmp = icmp ne i32 %sum60, %Fmul
  br i1 %Fcmp, label %102, label %106

; <label>:102:                                    ; preds = %94
  %remThree = sdiv i32 %sum60, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %103, label %104

; <label>:103:                                    ; preds = %102
  store i32 %101, i32* %Recovery, align 4
  br label %105

; <label>:104:                                    ; preds = %102
  store i32 %extractE, i32* %Recovery, align 4
  br label %105

; <label>:105:                                    ; preds = %104, %103
  br label %106

; <label>:106:                                    ; preds = %94, %105
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %18, align 4
  %107 = load i32, i32* %20, align 4
  %108 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop61 = add <4 x i32> %108, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop61, <4 x i32>* %allocaVec12
  %109 = add nsw i32 %107, 1
  store i32 %109, i32* %20, align 4
  br label %110

; <label>:110:                                    ; preds = %106, %91
  %111 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %7, align 4
  %112 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %111, align 4
  %113 = load i32, i32* %18, align 4
  %114 = load i32, i32* %20, align 4
  %115 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %112, i32 %113, i32 %114)
  %116 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %7, align 4
  store %struct.BF_PartHolder* %115, %struct.BF_PartHolder** %116, align 4
  %117 = load i32, i32* %20, align 4
  %118 = load i32, i32* %19, align 4
  %insertElmt62 = insertelement <4 x i32> undef, i32 %118, i32 0
  %insertElmt63 = insertelement <4 x i32> %insertElmt62, i32 %118, i32 1
  %insertElmt64 = insertelement <4 x i32> %insertElmt63, i32 %118, i32 2
  %insertElmt65 = insertelement <4 x i32> %insertElmt64, i32 %118, i32 3
  store <4 x i32> %insertElmt65, <4 x i32>* %allocaVec11, align 16
  %119 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %120 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop66 = add <4 x i32> %119, %120
  %121 = add nsw i32 %117, %118
  ret i32 %121
}

; Function Attrs: nounwind
define arm_aapcscc i32 @abs_and_sign(i32*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 4
  store i32* %0, i32** %3, align 4
  %4 = load i32*, i32** %3, align 4
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %1
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec1
  store i32 0, i32* %2, align 4
  br label %12

; <label>:8:                                      ; preds = %1
  %9 = load i32*, i32** %3, align 4
  %10 = load i32, i32* %9, align 4
  %11 = mul nsw i32 %10, -1
  store i32 %11, i32* %9, align 4
  store i32 1, i32* %2, align 4
  br label %12

; <label>:12:                                     ; preds = %8, %7
  %13 = load i32, i32* %2, align 4
  ret i32 %13
}

; Function Attrs: nounwind
define internal arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder*, i32, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec4 = alloca <4 x i32>, align 16
  %CastInst1 = alloca i32, align 4
  %CastInstVec2 = alloca <4 x i32>, align 16
  %4 = alloca %struct.BF_PartHolder*, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  store %struct.BF_PartHolder* %0, %struct.BF_PartHolder** %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %8 = load i32, i32* %6, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %8, i32 0
  %insertElmt8 = insertelement <4 x i32> %insertElmt, i32 %8, i32 1
  %insertElmt9 = insertelement <4 x i32> %insertElmt8, i32 %8, i32 2
  %insertElmt10 = insertelement <4 x i32> %insertElmt9, i32 %8, i32 3
  store <4 x i32> %insertElmt10, <4 x i32>* %allocaVec6, align 16
  %9 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %9
  store <4 x i32> %Vop, <4 x i32>* %allocaVec7
  %10 = shl i32 1, %8
  store i32 %10, i32* %7, align 4
  br label %11

; <label>:11:                                     ; preds = %35, %3
  %12 = load i32, i32* %7, align 4
  %13 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop11 = lshr <4 x i32> %13, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop11, <4 x i32>* %allocaVec7
  %14 = lshr i32 %12, 1
  store i32 %14, i32* %7, align 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %36

; <label>:16:                                     ; preds = %11
  %17 = load i32, i32* @crc, align 4
  %18 = shl i32 %17, 1
  store i32 %18, i32* @crc, align 4
  %19 = load i32, i32* @crc, align 4
  %20 = and i32 %19, 65536
  %21 = icmp ne i32 %20, 0
  %22 = xor i1 %21, true
  %23 = zext i1 %22 to i32
  %24 = load i32, i32* %5, align 4
  %25 = load i32, i32* %7, align 4
  %26 = and i32 %24, %25
  %27 = icmp ne i32 %26, 0
  %28 = xor i1 %27, true
  %29 = zext i1 %28 to i32
  %30 = xor i32 %23, %29
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %35

; <label>:32:                                     ; preds = %16
  %33 = load i32, i32* @crc, align 4
  %34 = xor i32 %33, 32773
  store i32 %34, i32* @crc, align 4
  br label %35

; <label>:35:                                     ; preds = %32, %16
  br label %11

; <label>:36:                                     ; preds = %11
  %37 = load i32, i32* @crc, align 4
  %38 = and i32 %37, 65535
  store i32 %38, i32* @crc, align 4
  %39 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %4, align 4
  %40 = load i32, i32* %5, align 4
  %41 = load i32, i32* %6, align 4
  %42 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %39, i32 %40, i32 %41)
  ret %struct.BF_PartHolder* %42
}

; Function Attrs: nounwind
define arm_aapcscc void @III_FlushBitstream() #0 {
  %1 = load i32, i32* @PartHoldersInitialized, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %6

; <label>:3:                                      ; preds = %0
  %4 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %5 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** @frameResults, align 4
  call arm_aapcscc void @BF_FlushBitstream(%struct.BF_FrameData* %4, %struct.BF_FrameResults* %5)
  br label %6

; <label>:6:                                      ; preds = %3, %0
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @lame_init_params(%struct.lame_global_flags*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec78 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec79 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec80 = alloca <2 x double>, align 16
  %CastInst2 = alloca double, align 4
  %CastInstVec3 = alloca <2 x double>, align 16
  %allocaVec81 = alloca <2 x double>, align 16
  %CastInst4 = alloca double, align 4
  %CastInstVec5 = alloca <2 x double>, align 16
  %allocaVec82 = alloca <2 x double>, align 16
  %CastInst6 = alloca double, align 4
  %CastInstVec7 = alloca <2 x double>, align 16
  %allocaVec83 = alloca <4 x float>, align 16
  %CastInst8 = alloca float, align 4
  %CastInstVec9 = alloca <4 x float>, align 16
  %allocaVec84 = alloca <4 x float>, align 16
  %CastInst10 = alloca float, align 4
  %CastInstVec11 = alloca <4 x float>, align 16
  %allocaVec85 = alloca <4 x float>, align 16
  %CastInst12 = alloca float, align 4
  %CastInstVec13 = alloca <4 x float>, align 16
  %allocaVec86 = alloca <4 x float>, align 16
  %CastInst14 = alloca float, align 4
  %CastInstVec15 = alloca <4 x float>, align 16
  %allocaVec87 = alloca <2 x double>, align 16
  %CastInst16 = alloca double, align 4
  %CastInstVec17 = alloca <2 x double>, align 16
  %allocaVec88 = alloca <2 x double>, align 16
  %CastInst18 = alloca double, align 4
  %CastInstVec19 = alloca <2 x double>, align 16
  %allocaVec89 = alloca <2 x double>, align 16
  %CastInst20 = alloca double, align 4
  %CastInstVec21 = alloca <2 x double>, align 16
  %allocaVec90 = alloca <2 x double>, align 16
  %CastInst22 = alloca double, align 4
  %CastInstVec23 = alloca <2 x double>, align 16
  %allocaVec91 = alloca <2 x double>, align 16
  %CastInst24 = alloca double, align 4
  %CastInstVec25 = alloca <2 x double>, align 16
  %allocaVec92 = alloca <2 x double>, align 16
  %CastInst26 = alloca double, align 4
  %CastInstVec27 = alloca <2 x double>, align 16
  %allocaVec93 = alloca <2 x double>, align 16
  %CastInst28 = alloca double, align 4
  %CastInstVec29 = alloca <2 x double>, align 16
  %allocaVec94 = alloca <2 x double>, align 16
  %CastInst30 = alloca double, align 4
  %CastInstVec31 = alloca <2 x double>, align 16
  %allocaVec95 = alloca <2 x double>, align 16
  %CastInst32 = alloca double, align 4
  %CastInstVec33 = alloca <2 x double>, align 16
  %allocaVec96 = alloca <2 x double>, align 16
  %CastInst34 = alloca double, align 4
  %CastInstVec35 = alloca <2 x double>, align 16
  %allocaVec97 = alloca <2 x double>, align 16
  %CastInst36 = alloca double, align 4
  %CastInstVec37 = alloca <2 x double>, align 16
  %allocaVec98 = alloca <2 x double>, align 16
  %CastInst38 = alloca double, align 4
  %CastInstVec39 = alloca <2 x double>, align 16
  %allocaVec99 = alloca <2 x double>, align 16
  %CastInst40 = alloca double, align 4
  %CastInstVec41 = alloca <2 x double>, align 16
  %allocaVec100 = alloca <2 x double>, align 16
  %CastInst42 = alloca double, align 4
  %CastInstVec43 = alloca <2 x double>, align 16
  %allocaVec101 = alloca <2 x double>, align 16
  %CastInst44 = alloca double, align 4
  %CastInstVec45 = alloca <2 x double>, align 16
  %allocaVec102 = alloca <2 x double>, align 16
  %CastInst46 = alloca double, align 4
  %CastInstVec47 = alloca <2 x double>, align 16
  %allocaVec103 = alloca <2 x double>, align 16
  %CastInst48 = alloca double, align 4
  %CastInstVec49 = alloca <2 x double>, align 16
  %allocaVec104 = alloca <2 x double>, align 16
  %CastInst50 = alloca double, align 4
  %CastInstVec51 = alloca <2 x double>, align 16
  %allocaVec105 = alloca <2 x double>, align 16
  %CastInst52 = alloca double, align 4
  %CastInstVec53 = alloca <2 x double>, align 16
  %allocaVec106 = alloca <2 x double>, align 16
  %CastInst54 = alloca double, align 4
  %CastInstVec55 = alloca <2 x double>, align 16
  %allocaVec107 = alloca <2 x double>, align 16
  %CastInst56 = alloca double, align 4
  %CastInstVec57 = alloca <2 x double>, align 16
  %allocaVec108 = alloca <2 x double>, align 16
  %CastInst58 = alloca double, align 4
  %CastInstVec59 = alloca <2 x double>, align 16
  %allocaVec109 = alloca <2 x double>, align 16
  %CastInst60 = alloca double, align 4
  %CastInstVec61 = alloca <2 x double>, align 16
  %allocaVec110 = alloca <2 x double>, align 16
  %CastInst62 = alloca double, align 4
  %CastInstVec63 = alloca <2 x double>, align 16
  %allocaVec111 = alloca <2 x double>, align 16
  %CastInst64 = alloca double, align 4
  %CastInstVec65 = alloca <2 x double>, align 16
  %allocaVec112 = alloca <2 x double>, align 16
  %CastInst66 = alloca double, align 4
  %CastInstVec67 = alloca <2 x double>, align 16
  %allocaVec113 = alloca <2 x double>, align 16
  %CastInst68 = alloca double, align 4
  %CastInstVec69 = alloca <2 x double>, align 16
  %allocaVec114 = alloca <2 x double>, align 16
  %CastInst70 = alloca double, align 4
  %CastInstVec71 = alloca <2 x double>, align 16
  %allocaVec115 = alloca <2 x double>, align 16
  %CastInst72 = alloca double, align 4
  %CastInstVec73 = alloca <2 x double>, align 16
  %allocaVec116 = alloca <2 x double>, align 16
  %CastInst74 = alloca double, align 4
  %CastInstVec75 = alloca <2 x double>, align 16
  %allocaVec117 = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %allocaVec118 = alloca <2 x double>, align 16
  %CallInst76 = alloca double, align 4
  %CallInstVec77 = alloca <2 x double>, align 16
  %2 = alloca %struct.lame_global_flags*, align 4
  %allocaVec119 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %allocaVec120 = alloca <4 x float>, align 16
  %4 = alloca float, align 4
  %allocaVec121 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec122 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec123 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec124 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec125 = alloca <2 x double>, align 16
  %9 = alloca double, align 8
  %allocaVec126 = alloca <2 x double>, align 16
  %10 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %2, align 4
  call void @llvm.memset.p0i8.i32(i8* bitcast (%struct.bit_stream_struc* @bs.172 to i8*), i8 0, i32 32, i32 4, i1 false)
  call void @llvm.memset.p0i8.i32(i8* bitcast (%struct.III_side_info_t* @l3_side to i8*), i8 0, i32 492, i32 4, i1 false)
  %11 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %12 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %11, i32 0, i32 39
  store i32 0, i32* %12, align 4
  call arm_aapcscc void @InitFormatBitStream()
  %13 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %14 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %13, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %17, label %20

; <label>:17:                                     ; preds = %1
  %18 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %19 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %18, i32 0, i32 8
  store i32 3, i32* %19, align 4
  br label %20

; <label>:20:                                     ; preds = %17, %1
  %21 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %22 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %21, i32 0, i32 46
  store i32 2, i32* %22, align 4
  %23 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %24 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %23, i32 0, i32 8
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 3
  br i1 %26, label %27, label %30

; <label>:27:                                     ; preds = %20
  %28 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %29 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %28, i32 0, i32 46
  store i32 1, i32* %29, align 4
  br label %30

; <label>:30:                                     ; preds = %27, %20
  %31 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %32 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %31, i32 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %182

; <label>:35:                                     ; preds = %30
  %36 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %37 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %36, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %40 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %39, i32 0, i32 3
  store i32 %38, i32* %40, align 4
  %41 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %42 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %41, i32 0, i32 3
  %43 = load i32, i32* %42, align 4
  %44 = icmp sge i32 %43, 48000
  br i1 %44, label %45, label %48

; <label>:45:                                     ; preds = %35
  %46 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %47 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %46, i32 0, i32 3
  store i32 48000, i32* %47, align 4
  br label %87

; <label>:48:                                     ; preds = %35
  %49 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %50 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %49, i32 0, i32 3
  %51 = load i32, i32* %50, align 4
  %52 = icmp sge i32 %51, 44100
  br i1 %52, label %53, label %56

; <label>:53:                                     ; preds = %48
  %54 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %55 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %54, i32 0, i32 3
  store i32 44100, i32* %55, align 4
  br label %86

; <label>:56:                                     ; preds = %48
  %57 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %58 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %57, i32 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = icmp sge i32 %59, 32000
  br i1 %60, label %61, label %64

; <label>:61:                                     ; preds = %56
  %62 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %63 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %62, i32 0, i32 3
  store i32 32000, i32* %63, align 4
  br label %85

; <label>:64:                                     ; preds = %56
  %65 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %66 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %65, i32 0, i32 3
  %67 = load i32, i32* %66, align 4
  %68 = icmp sge i32 %67, 24000
  br i1 %68, label %69, label %72

; <label>:69:                                     ; preds = %64
  %70 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %71 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %70, i32 0, i32 3
  store i32 24000, i32* %71, align 4
  br label %84

; <label>:72:                                     ; preds = %64
  %73 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %74 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %73, i32 0, i32 3
  %75 = load i32, i32* %74, align 4
  %76 = icmp sge i32 %75, 22050
  br i1 %76, label %77, label %80

; <label>:77:                                     ; preds = %72
  %78 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %79 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %78, i32 0, i32 3
  store i32 22050, i32* %79, align 4
  br label %83

; <label>:80:                                     ; preds = %72
  %81 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %82 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %81, i32 0, i32 3
  store i32 16000, i32* %82, align 4
  br label %83

; <label>:83:                                     ; preds = %80, %77
  br label %84

; <label>:84:                                     ; preds = %83, %69
  br label %85

; <label>:85:                                     ; preds = %84, %61
  br label %86

; <label>:86:                                     ; preds = %85, %53
  br label %87

; <label>:87:                                     ; preds = %86, %45
  %88 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %89 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %88, i32 0, i32 11
  %90 = load i32, i32* %89, align 4
  %91 = icmp sgt i32 %90, 0
  br i1 %91, label %92, label %181

; <label>:92:                                     ; preds = %87
  %93 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %94 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %93, i32 0, i32 3
  %95 = load i32, i32* %94, align 4
  %96 = mul nsw i32 %95, 16
  %97 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %98 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %97, i32 0, i32 46
  %99 = load i32, i32* %98, align 4
  %100 = mul nsw i32 %96, %99
  %101 = sitofp i32 %100 to double
  %102 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %103 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %102, i32 0, i32 11
  %104 = load i32, i32* %103, align 4
  %105 = sitofp i32 %104 to double
  %106 = fmul double 1.000000e+03, %105
  %107 = fdiv double %101, %106
  %108 = fptrunc double %107 to float
  store float %108, float* %4, align 4
  %109 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %110 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %109, i32 0, i32 21
  %111 = load i32, i32* %110, align 4
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %180, label %113

; <label>:113:                                    ; preds = %92
  %114 = load float, float* %4, align 4
  %115 = fcmp ogt float %114, 1.300000e+01
  br i1 %115, label %116, label %180

; <label>:116:                                    ; preds = %113
  %117 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %118 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %117, i32 0, i32 11
  %119 = load i32, i32* %118, align 4
  %120 = sitofp i32 %119 to double
  store double %120, double* %CastInst4
  %121 = load double, double* %CastInst4, align 4
  %insertCast = insertelement <2 x double> undef, double %121, i32 0
  %insertCast127 = insertelement <2 x double> %insertCast, double %121, i32 1
  store <2 x double> %insertCast127, <2 x double>* %CastInstVec5, align 4
  %122 = load <2 x double>, <2 x double>* %CastInstVec5, align 4
  %Vop = fmul <2 x double> <double 1.000000e+04, double 1.000000e+04>, %122
  %123 = fmul double 1.000000e+04, %120
  %124 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %125 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %124, i32 0, i32 46
  %126 = load i32, i32* %125, align 4
  %127 = mul nsw i32 16, %126
  %128 = sitofp i32 %127 to double
  %129 = fdiv double %123, %128
  %130 = fptosi double %129 to i32
  %131 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %132 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %131, i32 0, i32 3
  store i32 %130, i32* %132, align 4
  %133 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %134 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %133, i32 0, i32 3
  %135 = load i32, i32* %134, align 4
  %136 = icmp sle i32 %135, 16000
  br i1 %136, label %137, label %140

; <label>:137:                                    ; preds = %116
  %138 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %139 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %138, i32 0, i32 3
  store i32 16000, i32* %139, align 4
  br label %179

; <label>:140:                                    ; preds = %116
  %141 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %142 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %141, i32 0, i32 3
  %143 = load i32, i32* %142, align 4
  %144 = icmp sle i32 %143, 22050
  br i1 %144, label %145, label %148

; <label>:145:                                    ; preds = %140
  %146 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %147 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %146, i32 0, i32 3
  store i32 22050, i32* %147, align 4
  br label %178

; <label>:148:                                    ; preds = %140
  %149 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %150 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %149, i32 0, i32 3
  %151 = load i32, i32* %150, align 4
  %152 = icmp sle i32 %151, 24000
  br i1 %152, label %153, label %156

; <label>:153:                                    ; preds = %148
  %154 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %155 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %154, i32 0, i32 3
  store i32 24000, i32* %155, align 4
  br label %177

; <label>:156:                                    ; preds = %148
  %157 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %158 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %157, i32 0, i32 3
  %159 = load i32, i32* %158, align 4
  %160 = icmp sle i32 %159, 32000
  br i1 %160, label %161, label %164

; <label>:161:                                    ; preds = %156
  %162 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %163 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %162, i32 0, i32 3
  store i32 32000, i32* %163, align 4
  br label %176

; <label>:164:                                    ; preds = %156
  %165 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %166 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %165, i32 0, i32 3
  %167 = load i32, i32* %166, align 4
  %168 = icmp sle i32 %167, 44100
  br i1 %168, label %169, label %172

; <label>:169:                                    ; preds = %164
  %170 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %171 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %170, i32 0, i32 3
  store i32 44100, i32* %171, align 4
  br label %175

; <label>:172:                                    ; preds = %164
  %173 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %174 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %173, i32 0, i32 3
  store i32 48000, i32* %174, align 4
  br label %175

; <label>:175:                                    ; preds = %172, %169
  br label %176

; <label>:176:                                    ; preds = %175, %161
  br label %177

; <label>:177:                                    ; preds = %176, %153
  br label %178

; <label>:178:                                    ; preds = %177, %145
  br label %179

; <label>:179:                                    ; preds = %178, %137
  br label %180

; <label>:180:                                    ; preds = %179, %113, %92
  br label %181

; <label>:181:                                    ; preds = %180, %87
  br label %182

; <label>:182:                                    ; preds = %181, %30
  %183 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %184 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %183, i32 0, i32 3
  %185 = load i32, i32* %184, align 4
  %186 = icmp sle i32 %185, 24000
  %187 = select i1 %186, i32 1, i32 2
  %188 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %189 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %188, i32 0, i32 45
  store i32 %187, i32* %189, align 4
  %190 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %191 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %190, i32 0, i32 41
  store i32 800, i32* %191, align 4
  %192 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %193 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %192, i32 0, i32 45
  %194 = load i32, i32* %193, align 4
  %195 = mul nsw i32 %194, 576
  %196 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %197 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %196, i32 0, i32 42
  store i32 %195, i32* %197, align 4
  %198 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %199 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %198, i32 0, i32 11
  %200 = load i32, i32* %199, align 4
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %202, label %213

; <label>:202:                                    ; preds = %182
  %203 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %204 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %203, i32 0, i32 11
  store i32 128, i32* %204, align 4
  %205 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %206 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %205, i32 0, i32 45
  %207 = load i32, i32* %206, align 4
  %208 = icmp eq i32 %207, 1
  br i1 %208, label %209, label %212

; <label>:209:                                    ; preds = %202
  %210 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %211 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %210, i32 0, i32 11
  store i32 64, i32* %211, align 4
  br label %212

; <label>:212:                                    ; preds = %209, %202
  br label %213

; <label>:213:                                    ; preds = %212, %182
  %214 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %215 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %214, i32 0, i32 49
  store float 1.000000e+00, float* %215, align 4
  %216 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %217 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %216, i32 0, i32 3
  %218 = load i32, i32* %217, align 4
  %219 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %220 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %219, i32 0, i32 2
  %221 = load i32, i32* %220, align 4
  %222 = icmp ne i32 %218, %221
  br i1 %222, label %223, label %239

; <label>:223:                                    ; preds = %213
  %224 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %225 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %224, i32 0, i32 2
  %226 = load i32, i32* %225, align 4
  %227 = sitofp i32 %226 to float
  %228 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %229 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %228, i32 0, i32 3
  %230 = load i32, i32* %229, align 4
  %231 = sitofp i32 %230 to float
  store float %227, float* %CastInst8
  %232 = load float, float* %CastInst8, align 4
  %insertCast128 = insertelement <4 x float> undef, float %232, i32 0
  %insertCast129 = insertelement <4 x float> %insertCast128, float %232, i32 1
  %insertCast130 = insertelement <4 x float> %insertCast129, float %232, i32 2
  %insertCast131 = insertelement <4 x float> %insertCast130, float %232, i32 3
  store <4 x float> %insertCast131, <4 x float>* %CastInstVec9, align 4
  %233 = load <4 x float>, <4 x float>* %CastInstVec9, align 4
  store float %231, float* %CastInst10
  %234 = load float, float* %CastInst10, align 4
  %insertCast132 = insertelement <4 x float> undef, float %234, i32 0
  %insertCast133 = insertelement <4 x float> %insertCast132, float %234, i32 1
  %insertCast134 = insertelement <4 x float> %insertCast133, float %234, i32 2
  %insertCast135 = insertelement <4 x float> %insertCast134, float %234, i32 3
  store <4 x float> %insertCast135, <4 x float>* %CastInstVec11, align 4
  %235 = load <4 x float>, <4 x float>* %CastInstVec11, align 4
  %Vop136 = fdiv <4 x float> %233, %235
  %236 = fdiv float %227, %231
  %237 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %238 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %237, i32 0, i32 49
  store float %236, float* %238, align 4
  br label %239

; <label>:239:                                    ; preds = %223, %213
  %240 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %241 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %240, i32 0, i32 40
  store i32 0, i32* %241, align 4
  %242 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %243 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %242, i32 0, i32 0
  %244 = load i32, i32* %243, align 4
  %245 = uitofp i32 %244 to float
  %246 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %247 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %246, i32 0, i32 49
  %248 = load float, float* %247, align 4
  %249 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %250 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %249, i32 0, i32 42
  %251 = load i32, i32* %250, align 4
  %252 = sitofp i32 %251 to float
  %253 = fmul float %248, %252
  %254 = fdiv float %245, %253
  %255 = fadd float 2.000000e+00, %254
  %256 = fptosi float %255 to i32
  %257 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %258 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %257, i32 0, i32 40
  store i32 %256, i32* %258, align 4
  %259 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %260 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %259, i32 0, i32 11
  %261 = load i32, i32* %260, align 4
  %262 = icmp sge i32 %261, 320
  br i1 %262, label %263, label %266

; <label>:263:                                    ; preds = %239
  %264 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %265 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %264, i32 0, i32 21
  store i32 0, i32* %265, align 4
  br label %266

; <label>:266:                                    ; preds = %263, %239
  %267 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %268 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %267, i32 0, i32 3
  %269 = load i32, i32* %268, align 4
  %270 = mul nsw i32 %269, 16
  %271 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %272 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %271, i32 0, i32 46
  %273 = load i32, i32* %272, align 4
  %274 = mul nsw i32 %270, %273
  %275 = sitofp i32 %274 to double
  %276 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %277 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %276, i32 0, i32 11
  %278 = load i32, i32* %277, align 4
  %279 = sitofp i32 %278 to double
  %280 = fmul double 1.000000e+03, %279
  %281 = fdiv double %275, %280
  %282 = fptrunc double %281 to float
  store float %282, float* %4, align 4
  %283 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %284 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %283, i32 0, i32 21
  %285 = load i32, i32* %284, align 4
  %286 = icmp ne i32 %285, 0
  br i1 %286, label %287, label %299

; <label>:287:                                    ; preds = %266
  %288 = load float, float* %4, align 4
  %289 = fcmp ogt float %288, 1.100000e+01
  br i1 %289, label %290, label %299

; <label>:290:                                    ; preds = %287
  %291 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %292 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %291, i32 0, i32 22
  %293 = load i32, i32* %292, align 4
  %294 = sitofp i32 %293 to double
  store double %294, double* %CastInst20
  %295 = load double, double* %CastInst20, align 4
  %insertCast137 = insertelement <2 x double> undef, double %295, i32 0
  %insertCast138 = insertelement <2 x double> %insertCast137, double %295, i32 1
  store <2 x double> %insertCast138, <2 x double>* %CastInstVec21, align 4
  %296 = load <2 x double>, <2 x double>* %CastInstVec21, align 4
  %Vop139 = fadd <2 x double> <double 4.400000e+00, double 4.400000e+00>, %296
  %297 = fadd double 4.400000e+00, %294
  %298 = fptrunc double %297 to float
  store float %298, float* %4, align 4
  br label %299

; <label>:299:                                    ; preds = %290, %287, %266
  %300 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %301 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %300, i32 0, i32 9
  %302 = load i32, i32* %301, align 4
  %303 = icmp ne i32 %302, 0
  br i1 %303, label %316, label %304

; <label>:304:                                    ; preds = %299
  %305 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %306 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %305, i32 0, i32 8
  %307 = load i32, i32* %306, align 4
  %308 = icmp ne i32 %307, 3
  br i1 %308, label %309, label %316

; <label>:309:                                    ; preds = %304
  %310 = load float, float* %4, align 4
  %311 = fcmp olt float %310, 9.000000e+00
  br i1 %311, label %312, label %315

; <label>:312:                                    ; preds = %309
  %313 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %314 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %313, i32 0, i32 8
  store i32 0, i32* %314, align 4
  br label %315

; <label>:315:                                    ; preds = %312, %309
  br label %316

; <label>:316:                                    ; preds = %315, %304, %299
  %317 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %318 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %317, i32 0, i32 25
  %319 = load i32, i32* %318, align 4
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %357

; <label>:321:                                    ; preds = %316
  %322 = load float, float* %4, align 4
  %323 = fpext float %322 to double
  store double %323, double* %CastInst22
  %324 = load double, double* %CastInst22, align 4
  %insertCast140 = insertelement <2 x double> undef, double %324, i32 0
  %insertCast141 = insertelement <2 x double> %insertCast140, double %324, i32 1
  store <2 x double> %insertCast141, <2 x double>* %CastInstVec23, align 4
  %325 = load <2 x double>, <2 x double>* %CastInstVec23, align 4
  %Vop142 = fdiv <2 x double> %325, <double 1.600000e+01, double 1.600000e+01>
  %326 = fdiv double %323, 1.600000e+01
  %327 = call arm_aapcscc double @log(double %326) #7
  store double %327, double* %CallInst
  %328 = load double, double* %CallInst, align 4
  %insertCall = insertelement <2 x double> undef, double %328, i32 0
  %insertCall143 = insertelement <2 x double> %insertCall, double %328, i32 1
  store <2 x double> %insertCall143, <2 x double>* %CallInstVec, align 4
  %329 = load <2 x double>, <2 x double>* %CallInstVec, align 4
  %Vop144 = fmul <2 x double> <double 1.800000e+01, double 1.800000e+01>, %329
  %330 = fmul double 1.800000e+01, %327
  %Vop145 = fsub <2 x double> <double 1.450000e+01, double 1.450000e+01>, %Vop144
  %331 = fsub double 1.450000e+01, %330
  %332 = call arm_aapcscc double @floor(double %331) #9
  store double %332, double* %CallInst76
  %333 = load double, double* %CallInst76, align 4
  %insertCall146 = insertelement <2 x double> undef, double %333, i32 0
  %insertCall147 = insertelement <2 x double> %insertCall146, double %333, i32 1
  store <2 x double> %insertCall147, <2 x double>* %CallInstVec77, align 4
  %334 = load <2 x double>, <2 x double>* %CallInstVec77, align 4
  %Vop148 = fadd <2 x double> <double 1.000000e+00, double 1.000000e+00>, %334
  %335 = fadd double 1.000000e+00, %332
  %336 = fptosi double %335 to i32
  store i32 %336, i32* %5, align 4
  %337 = load i32, i32* %5, align 4
  %338 = icmp slt i32 %337, 31
  br i1 %338, label %339, label %356

; <label>:339:                                    ; preds = %321
  %340 = load i32, i32* %5, align 4
  %341 = sitofp i32 %340 to double
  store double %341, double* %CastInst24
  %342 = load double, double* %CastInst24, align 4
  %insertCast149 = insertelement <2 x double> undef, double %342, i32 0
  %insertCast150 = insertelement <2 x double> %insertCast149, double %342, i32 1
  store <2 x double> %insertCast150, <2 x double>* %CastInstVec25, align 4
  %343 = load <2 x double>, <2 x double>* %CastInstVec25, align 4
  %Vop151 = fdiv <2 x double> %343, <double 3.100000e+01, double 3.100000e+01>
  %344 = fdiv double %341, 3.100000e+01
  %345 = fptrunc double %344 to float
  %346 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %347 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %346, i32 0, i32 53
  store float %345, float* %347, align 4
  %348 = load i32, i32* %5, align 4
  %349 = sitofp i32 %348 to double
  store double %349, double* %CastInst26
  %350 = load double, double* %CastInst26, align 4
  %insertCast152 = insertelement <2 x double> undef, double %350, i32 0
  %insertCast153 = insertelement <2 x double> %insertCast152, double %350, i32 1
  store <2 x double> %insertCast153, <2 x double>* %CastInstVec27, align 4
  %351 = load <2 x double>, <2 x double>* %CastInstVec27, align 4
  %Vop154 = fdiv <2 x double> %351, <double 3.100000e+01, double 3.100000e+01>
  %352 = fdiv double %349, 3.100000e+01
  %353 = fptrunc double %352 to float
  %354 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %355 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %354, i32 0, i32 54
  store float %353, float* %355, align 4
  br label %356

; <label>:356:                                    ; preds = %339, %321
  br label %357

; <label>:357:                                    ; preds = %356, %316
  %358 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %359 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %358, i32 0, i32 26
  %360 = load i32, i32* %359, align 4
  %361 = icmp sgt i32 %360, 0
  br i1 %361, label %362, label %447

; <label>:362:                                    ; preds = %357
  %363 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %364 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %363, i32 0, i32 26
  %365 = load i32, i32* %364, align 4
  %366 = sitofp i32 %365 to double
  store double %366, double* %CastInst28
  %367 = load double, double* %CastInst28, align 4
  %insertCast155 = insertelement <2 x double> undef, double %367, i32 0
  %insertCast156 = insertelement <2 x double> %insertCast155, double %367, i32 1
  store <2 x double> %insertCast156, <2 x double>* %CastInstVec29, align 4
  %368 = load <2 x double>, <2 x double>* %CastInstVec29, align 4
  %Vop157 = fmul <2 x double> <double 2.000000e+00, double 2.000000e+00>, %368
  %369 = fmul double 2.000000e+00, %366
  %370 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %371 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %370, i32 0, i32 3
  %372 = load i32, i32* %371, align 4
  %373 = sitofp i32 %372 to double
  store double %373, double* %CastInst30
  %374 = load double, double* %CastInst30, align 4
  %insertCast158 = insertelement <2 x double> undef, double %374, i32 0
  %insertCast159 = insertelement <2 x double> %insertCast158, double %374, i32 1
  store <2 x double> %insertCast159, <2 x double>* %CastInstVec31, align 4
  %375 = load <2 x double>, <2 x double>* %CastInstVec31, align 4
  %Vop160 = fdiv <2 x double> %Vop157, %375
  %376 = fdiv double %369, %373
  %377 = fptrunc double %376 to float
  %378 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %379 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %378, i32 0, i32 55
  store float %377, float* %379, align 4
  %380 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %381 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %380, i32 0, i32 28
  %382 = load i32, i32* %381, align 4
  %383 = icmp sge i32 %382, 0
  br i1 %383, label %384, label %402

; <label>:384:                                    ; preds = %362
  %385 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %386 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %385, i32 0, i32 26
  %387 = load i32, i32* %386, align 4
  %388 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %389 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %388, i32 0, i32 28
  %390 = load i32, i32* %389, align 4
  %391 = add nsw i32 %387, %390
  %392 = sitofp i32 %391 to double
  %393 = fmul double 2.000000e+00, %392
  %394 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %395 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %394, i32 0, i32 3
  %396 = load i32, i32* %395, align 4
  %397 = sitofp i32 %396 to double
  %398 = fdiv double %393, %397
  %399 = fptrunc double %398 to float
  %400 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %401 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %400, i32 0, i32 56
  store float %399, float* %401, align 4
  br label %420

; <label>:402:                                    ; preds = %362
  %403 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %404 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %403, i32 0, i32 26
  %405 = load i32, i32* %404, align 4
  %406 = sitofp i32 %405 to double
  store double %406, double* %CastInst36
  %407 = load double, double* %CastInst36, align 4
  %insertCast161 = insertelement <2 x double> undef, double %407, i32 0
  %insertCast162 = insertelement <2 x double> %insertCast161, double %407, i32 1
  store <2 x double> %insertCast162, <2 x double>* %CastInstVec37, align 4
  %408 = load <2 x double>, <2 x double>* %CastInstVec37, align 4
  %Vop163 = fmul <2 x double> <double 2.000000e+00, double 2.000000e+00>, %408
  %409 = fmul double 2.000000e+00, %406
  %410 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %411 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %410, i32 0, i32 3
  %412 = load i32, i32* %411, align 4
  %413 = sitofp i32 %412 to double
  store double %413, double* %CastInst38
  %414 = load double, double* %CastInst38, align 4
  %insertCast164 = insertelement <2 x double> undef, double %414, i32 0
  %insertCast165 = insertelement <2 x double> %insertCast164, double %414, i32 1
  store <2 x double> %insertCast165, <2 x double>* %CastInstVec39, align 4
  %415 = load <2 x double>, <2 x double>* %CastInstVec39, align 4
  %Vop166 = fdiv <2 x double> %Vop163, %415
  %416 = fdiv double %409, %413
  %417 = fptrunc double %416 to float
  %418 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %419 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %418, i32 0, i32 56
  store float %417, float* %419, align 4
  br label %420

; <label>:420:                                    ; preds = %402, %384
  %421 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %422 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %421, i32 0, i32 55
  %423 = load float, float* %422, align 4
  %424 = fcmp olt float 1.000000e+00, %423
  br i1 %424, label %425, label %426

; <label>:425:                                    ; preds = %420
  br label %430

; <label>:426:                                    ; preds = %420
  %427 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %428 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %427, i32 0, i32 55
  %429 = load float, float* %428, align 4
  br label %430

; <label>:430:                                    ; preds = %426, %425
  %431 = phi float [ 1.000000e+00, %425 ], [ %429, %426 ]
  %432 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %433 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %432, i32 0, i32 55
  store float %431, float* %433, align 4
  %434 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %435 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %434, i32 0, i32 56
  %436 = load float, float* %435, align 4
  %437 = fcmp olt float 1.000000e+00, %436
  br i1 %437, label %438, label %439

; <label>:438:                                    ; preds = %430
  br label %443

; <label>:439:                                    ; preds = %430
  %440 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %441 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %440, i32 0, i32 56
  %442 = load float, float* %441, align 4
  br label %443

; <label>:443:                                    ; preds = %439, %438
  %444 = phi float [ 1.000000e+00, %438 ], [ %442, %439 ]
  %445 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %446 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %445, i32 0, i32 56
  store float %444, float* %446, align 4
  br label %447

; <label>:447:                                    ; preds = %443, %357
  %448 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %449 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %448, i32 0, i32 25
  %450 = load i32, i32* %449, align 4
  %451 = icmp sgt i32 %450, 0
  br i1 %451, label %452, label %545

; <label>:452:                                    ; preds = %447
  %453 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %454 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %453, i32 0, i32 25
  %455 = load i32, i32* %454, align 4
  %456 = sitofp i32 %455 to double
  store double %456, double* %CastInst40
  %457 = load double, double* %CastInst40, align 4
  %insertCast167 = insertelement <2 x double> undef, double %457, i32 0
  %insertCast168 = insertelement <2 x double> %insertCast167, double %457, i32 1
  store <2 x double> %insertCast168, <2 x double>* %CastInstVec41, align 4
  %458 = load <2 x double>, <2 x double>* %CastInstVec41, align 4
  %Vop169 = fmul <2 x double> <double 2.000000e+00, double 2.000000e+00>, %458
  %459 = fmul double 2.000000e+00, %456
  %460 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %461 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %460, i32 0, i32 3
  %462 = load i32, i32* %461, align 4
  %463 = sitofp i32 %462 to double
  store double %463, double* %CastInst42
  %464 = load double, double* %CastInst42, align 4
  %insertCast170 = insertelement <2 x double> undef, double %464, i32 0
  %insertCast171 = insertelement <2 x double> %insertCast170, double %464, i32 1
  store <2 x double> %insertCast171, <2 x double>* %CastInstVec43, align 4
  %465 = load <2 x double>, <2 x double>* %CastInstVec43, align 4
  %Vop172 = fdiv <2 x double> %Vop169, %465
  %466 = fdiv double %459, %463
  %467 = fptrunc double %466 to float
  %468 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %469 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %468, i32 0, i32 54
  store float %467, float* %469, align 4
  %470 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %471 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %470, i32 0, i32 27
  %472 = load i32, i32* %471, align 4
  %473 = icmp sge i32 %472, 0
  br i1 %473, label %474, label %500

; <label>:474:                                    ; preds = %452
  %475 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %476 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %475, i32 0, i32 25
  %477 = load i32, i32* %476, align 4
  %478 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %479 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %478, i32 0, i32 27
  %480 = load i32, i32* %479, align 4
  %481 = sub nsw i32 %477, %480
  %482 = sitofp i32 %481 to double
  %483 = fmul double 2.000000e+00, %482
  %484 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %485 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %484, i32 0, i32 3
  %486 = load i32, i32* %485, align 4
  %487 = sitofp i32 %486 to double
  %488 = fdiv double %483, %487
  %489 = fptrunc double %488 to float
  %490 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %491 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %490, i32 0, i32 53
  store float %489, float* %491, align 4
  %492 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %493 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %492, i32 0, i32 53
  %494 = load float, float* %493, align 4
  %495 = fcmp olt float %494, 0.000000e+00
  br i1 %495, label %496, label %499

; <label>:496:                                    ; preds = %474
  %497 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %498 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %497, i32 0, i32 53
  store float 0.000000e+00, float* %498, align 4
  br label %499

; <label>:499:                                    ; preds = %496, %474
  br label %518

; <label>:500:                                    ; preds = %452
  %501 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %502 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %501, i32 0, i32 25
  %503 = load i32, i32* %502, align 4
  %504 = sitofp i32 %503 to double
  store double %504, double* %CastInst48
  %505 = load double, double* %CastInst48, align 4
  %insertCast173 = insertelement <2 x double> undef, double %505, i32 0
  %insertCast174 = insertelement <2 x double> %insertCast173, double %505, i32 1
  store <2 x double> %insertCast174, <2 x double>* %CastInstVec49, align 4
  %506 = load <2 x double>, <2 x double>* %CastInstVec49, align 4
  %Vop175 = fmul <2 x double> <double 2.000000e+00, double 2.000000e+00>, %506
  %507 = fmul double 2.000000e+00, %504
  %508 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %509 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %508, i32 0, i32 3
  %510 = load i32, i32* %509, align 4
  %511 = sitofp i32 %510 to double
  store double %511, double* %CastInst50
  %512 = load double, double* %CastInst50, align 4
  %insertCast176 = insertelement <2 x double> undef, double %512, i32 0
  %insertCast177 = insertelement <2 x double> %insertCast176, double %512, i32 1
  store <2 x double> %insertCast177, <2 x double>* %CastInstVec51, align 4
  %513 = load <2 x double>, <2 x double>* %CastInstVec51, align 4
  %Vop178 = fdiv <2 x double> %Vop175, %513
  %514 = fdiv double %507, %511
  %515 = fptrunc double %514 to float
  %516 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %517 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %516, i32 0, i32 53
  store float %515, float* %517, align 4
  br label %518

; <label>:518:                                    ; preds = %500, %499
  %519 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %520 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %519, i32 0, i32 53
  %521 = load float, float* %520, align 4
  %522 = fcmp olt float 1.000000e+00, %521
  br i1 %522, label %523, label %524

; <label>:523:                                    ; preds = %518
  br label %528

; <label>:524:                                    ; preds = %518
  %525 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %526 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %525, i32 0, i32 53
  %527 = load float, float* %526, align 4
  br label %528

; <label>:528:                                    ; preds = %524, %523
  %529 = phi float [ 1.000000e+00, %523 ], [ %527, %524 ]
  %530 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %531 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %530, i32 0, i32 53
  store float %529, float* %531, align 4
  %532 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %533 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %532, i32 0, i32 54
  %534 = load float, float* %533, align 4
  %535 = fcmp olt float 1.000000e+00, %534
  br i1 %535, label %536, label %537

; <label>:536:                                    ; preds = %528
  br label %541

; <label>:537:                                    ; preds = %528
  %538 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %539 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %538, i32 0, i32 54
  %540 = load float, float* %539, align 4
  br label %541

; <label>:541:                                    ; preds = %537, %536
  %542 = phi float [ 1.000000e+00, %536 ], [ %540, %537 ]
  %543 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %544 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %543, i32 0, i32 54
  store float %542, float* %544, align 4
  br label %545

; <label>:545:                                    ; preds = %541, %447
  %546 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %547 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %546, i32 0, i32 59
  %548 = load i32, i32* %547, align 4
  %549 = icmp eq i32 %548, 0
  br i1 %549, label %550, label %838

; <label>:550:                                    ; preds = %545
  %551 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %552 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %551, i32 0, i32 53
  %553 = load float, float* %552, align 4
  %554 = fcmp ogt float %553, 0.000000e+00
  br i1 %554, label %555, label %681

; <label>:555:                                    ; preds = %550
  store <4 x i32> <i32 999, i32 999, i32 999, i32 999>, <4 x i32>* %allocaVec124
  store i32 999, i32* %8, align 4
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec123
  store i32 -1, i32* %7, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec122
  store i32 0, i32* %6, align 4
  br label %556

; <label>:556:                                    ; preds = %641, %555
  %557 = load i32, i32* %6, align 4
  %558 = icmp sle i32 %557, 31
  br i1 %558, label %559, label %645

; <label>:559:                                    ; preds = %556
  %560 = load i32, i32* %6, align 4
  %561 = sitofp i32 %560 to double
  store double %561, double* %CastInst52
  %562 = load double, double* %CastInst52, align 4
  %insertCast179 = insertelement <2 x double> undef, double %562, i32 0
  %insertCast180 = insertelement <2 x double> %insertCast179, double %562, i32 1
  store <2 x double> %insertCast180, <2 x double>* %CastInstVec53, align 4
  %563 = load <2 x double>, <2 x double>* %CastInstVec53, align 4
  %Vop181 = fdiv <2 x double> %563, <double 3.100000e+01, double 3.100000e+01>
  store <2 x double> %Vop181, <2 x double>* %allocaVec126
  %564 = fdiv double %561, 3.100000e+01
  store double %564, double* %10, align 8
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %allocaVec125
  store double 1.000000e+00, double* %9, align 8
  %565 = load double, double* %10, align 8
  %566 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %567 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %566, i32 0, i32 54
  %568 = load float, float* %567, align 4
  %569 = fpext float %568 to double
  %570 = fcmp oge double %565, %569
  br i1 %570, label %571, label %587

; <label>:571:                                    ; preds = %559
  %572 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %573 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %572, i32 0, i32 57
  %574 = load i32, i32* %573, align 4
  %575 = load i32, i32* %6, align 4
  %576 = icmp slt i32 %574, %575
  br i1 %576, label %577, label %581

; <label>:577:                                    ; preds = %571
  %578 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %579 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %578, i32 0, i32 57
  %580 = load i32, i32* %579, align 4
  br label %583

; <label>:581:                                    ; preds = %571
  %582 = load i32, i32* %6, align 4
  br label %583

; <label>:583:                                    ; preds = %581, %577
  %584 = phi i32 [ %580, %577 ], [ %582, %581 ]
  %585 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %586 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %585, i32 0, i32 57
  store i32 %584, i32* %586, align 4
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec125
  store double 0.000000e+00, double* %9, align 8
  br label %587

; <label>:587:                                    ; preds = %583, %559
  %588 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %589 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %588, i32 0, i32 53
  %590 = load float, float* %589, align 4
  %591 = fpext float %590 to double
  %592 = load double, double* %10, align 8
  %593 = fcmp olt double %591, %592
  br i1 %593, label %594, label %640

; <label>:594:                                    ; preds = %587
  %595 = load double, double* %10, align 8
  %596 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %597 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %596, i32 0, i32 54
  %598 = load float, float* %597, align 4
  %599 = fpext float %598 to double
  %600 = fcmp olt double %595, %599
  br i1 %600, label %601, label %640

; <label>:601:                                    ; preds = %594
  %602 = load i32, i32* %8, align 4
  %603 = load i32, i32* %6, align 4
  %604 = icmp slt i32 %602, %603
  br i1 %604, label %605, label %607

; <label>:605:                                    ; preds = %601
  %606 = load i32, i32* %8, align 4
  br label %609

; <label>:607:                                    ; preds = %601
  %608 = load i32, i32* %6, align 4
  br label %609

; <label>:609:                                    ; preds = %607, %605
  %610 = phi i32 [ %606, %605 ], [ %608, %607 ]
  store i32 %610, i32* %8, align 4
  %611 = load i32, i32* %7, align 4
  %612 = load i32, i32* %6, align 4
  %613 = icmp sgt i32 %611, %612
  br i1 %613, label %614, label %616

; <label>:614:                                    ; preds = %609
  %615 = load i32, i32* %7, align 4
  br label %618

; <label>:616:                                    ; preds = %609
  %617 = load i32, i32* %6, align 4
  br label %618

; <label>:618:                                    ; preds = %616, %614
  %619 = phi i32 [ %615, %614 ], [ %617, %616 ]
  store i32 %619, i32* %7, align 4
  %620 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %621 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %620, i32 0, i32 53
  %622 = load float, float* %621, align 4
  %623 = fpext float %622 to double
  %624 = load double, double* %10, align 8
  store double %623, double* %CastInst54
  %625 = load double, double* %CastInst54, align 4
  %insertCast182 = insertelement <2 x double> undef, double %625, i32 0
  %insertCast183 = insertelement <2 x double> %insertCast182, double %625, i32 1
  store <2 x double> %insertCast183, <2 x double>* %CastInstVec55, align 4
  %626 = load <2 x double>, <2 x double>* %CastInstVec55, align 4
  %627 = load <2 x double>, <2 x double>* %allocaVec126, align 16
  %Vop184 = fsub <2 x double> %626, %627
  %628 = fsub double %623, %624
  %Vop185 = fmul <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %Vop184
  %629 = fmul double 0x3FF921FB54442D18, %628
  %630 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %631 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %630, i32 0, i32 54
  %632 = load float, float* %631, align 4
  %633 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %634 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %633, i32 0, i32 53
  %635 = load float, float* %634, align 4
  %636 = fsub float %632, %635
  %637 = fpext float %636 to double
  %638 = fdiv double %629, %637
  %639 = call arm_aapcscc double @cos(double %638) #7
  store double %639, double* %9, align 8
  br label %640

; <label>:640:                                    ; preds = %618, %594, %587
  br label %641

; <label>:641:                                    ; preds = %640
  %642 = load i32, i32* %6, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %642, i32 0
  %insertElmt186 = insertelement <4 x i32> %insertElmt, i32 %642, i32 1
  %insertElmt187 = insertelement <4 x i32> %insertElmt186, i32 %642, i32 2
  %insertElmt188 = insertelement <4 x i32> %insertElmt187, i32 %642, i32 3
  store <4 x i32> %insertElmt188, <4 x i32>* %allocaVec122, align 16
  %643 = load <4 x i32>, <4 x i32>* %allocaVec122, align 16
  %Vop189 = add <4 x i32> %643, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop189, <4 x i32>* %allocaVec122
  %644 = add nsw i32 %642, 1
  store i32 %644, i32* %6, align 4
  br label %556

; <label>:645:                                    ; preds = %556
  %646 = load i32, i32* %8, align 4
  %647 = icmp eq i32 %646, 999
  br i1 %647, label %648, label %660

; <label>:648:                                    ; preds = %645
  %649 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %650 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %649, i32 0, i32 57
  %651 = load i32, i32* %650, align 4
  %652 = sitofp i32 %651 to double
  store double %652, double* %CastInst58
  %653 = load double, double* %CastInst58, align 4
  %insertCast190 = insertelement <2 x double> undef, double %653, i32 0
  %insertCast191 = insertelement <2 x double> %insertCast190, double %653, i32 1
  store <2 x double> %insertCast191, <2 x double>* %CastInstVec59, align 4
  %654 = load <2 x double>, <2 x double>* %CastInstVec59, align 4
  %Vop192 = fsub <2 x double> %654, <double 7.500000e-01, double 7.500000e-01>
  %655 = fsub double %652, 7.500000e-01
  %Vop193 = fdiv <2 x double> %Vop192, <double 3.100000e+01, double 3.100000e+01>
  %656 = fdiv double %655, 3.100000e+01
  %657 = fptrunc double %656 to float
  %658 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %659 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %658, i32 0, i32 53
  store float %657, float* %659, align 4
  br label %670

; <label>:660:                                    ; preds = %645
  %661 = load i32, i32* %8, align 4
  %662 = sitofp i32 %661 to double
  store double %662, double* %CastInst60
  %663 = load double, double* %CastInst60, align 4
  %insertCast194 = insertelement <2 x double> undef, double %663, i32 0
  %insertCast195 = insertelement <2 x double> %insertCast194, double %663, i32 1
  store <2 x double> %insertCast195, <2 x double>* %CastInstVec61, align 4
  %664 = load <2 x double>, <2 x double>* %CastInstVec61, align 4
  %Vop196 = fsub <2 x double> %664, <double 7.500000e-01, double 7.500000e-01>
  %665 = fsub double %662, 7.500000e-01
  %Vop197 = fdiv <2 x double> %Vop196, <double 3.100000e+01, double 3.100000e+01>
  %666 = fdiv double %665, 3.100000e+01
  %667 = fptrunc double %666 to float
  %668 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %669 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %668, i32 0, i32 53
  store float %667, float* %669, align 4
  br label %670

; <label>:670:                                    ; preds = %660, %648
  %671 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %672 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %671, i32 0, i32 57
  %673 = load i32, i32* %672, align 4
  %674 = sitofp i32 %673 to double
  store double %674, double* %CastInst62
  %675 = load double, double* %CastInst62, align 4
  %insertCast198 = insertelement <2 x double> undef, double %675, i32 0
  %insertCast199 = insertelement <2 x double> %insertCast198, double %675, i32 1
  store <2 x double> %insertCast199, <2 x double>* %CastInstVec63, align 4
  %676 = load <2 x double>, <2 x double>* %CastInstVec63, align 4
  %Vop200 = fdiv <2 x double> %676, <double 3.100000e+01, double 3.100000e+01>
  %677 = fdiv double %674, 3.100000e+01
  %678 = fptrunc double %677 to float
  %679 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %680 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %679, i32 0, i32 54
  store float %678, float* %680, align 4
  br label %681

; <label>:681:                                    ; preds = %670, %550
  %682 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %683 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %682, i32 0, i32 56
  %684 = load float, float* %683, align 4
  %685 = fcmp ogt float %684, 0.000000e+00
  br i1 %685, label %686, label %700

; <label>:686:                                    ; preds = %681
  %687 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %688 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %687, i32 0, i32 56
  %689 = load float, float* %688, align 4
  %690 = fpext float %689 to double
  %691 = fcmp olt double %690, 0x3F964BF964BF964C
  br i1 %691, label %692, label %699

; <label>:692:                                    ; preds = %686
  %693 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %694 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %693, i32 0, i32 55
  store float 0.000000e+00, float* %694, align 4
  %695 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %696 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %695, i32 0, i32 56
  store float 0.000000e+00, float* %696, align 4
  %697 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %698 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %697, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.173, i32 0, i32 0))
  br label %699

; <label>:699:                                    ; preds = %692, %686
  br label %700

; <label>:700:                                    ; preds = %699, %681
  %701 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %702 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %701, i32 0, i32 56
  %703 = load float, float* %702, align 4
  %704 = fcmp ogt float %703, 0.000000e+00
  br i1 %704, label %705, label %837

; <label>:705:                                    ; preds = %700
  store <4 x i32> <i32 999, i32 999, i32 999, i32 999>, <4 x i32>* %allocaVec124
  store i32 999, i32* %8, align 4
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec123
  store i32 -1, i32* %7, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec122
  store i32 0, i32* %6, align 4
  br label %706

; <label>:706:                                    ; preds = %800, %705
  %707 = load i32, i32* %6, align 4
  %708 = icmp sle i32 %707, 31
  br i1 %708, label %709, label %801

; <label>:709:                                    ; preds = %706
  %710 = load i32, i32* %6, align 4
  %711 = sitofp i32 %710 to double
  store double %711, double* %CastInst64
  %712 = load double, double* %CastInst64, align 4
  %insertCast201 = insertelement <2 x double> undef, double %712, i32 0
  %insertCast202 = insertelement <2 x double> %insertCast201, double %712, i32 1
  store <2 x double> %insertCast202, <2 x double>* %CastInstVec65, align 4
  %713 = load <2 x double>, <2 x double>* %CastInstVec65, align 4
  %Vop203 = fdiv <2 x double> %713, <double 3.100000e+01, double 3.100000e+01>
  store <2 x double> %Vop203, <2 x double>* %allocaVec126
  %714 = fdiv double %711, 3.100000e+01
  store double %714, double* %10, align 8
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %allocaVec125
  store double 1.000000e+00, double* %9, align 8
  %715 = load double, double* %10, align 8
  %716 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %717 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %716, i32 0, i32 55
  %718 = load float, float* %717, align 4
  %719 = fpext float %718 to double
  %720 = fcmp ole double %715, %719
  br i1 %720, label %721, label %737

; <label>:721:                                    ; preds = %709
  %722 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %723 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %722, i32 0, i32 58
  %724 = load i32, i32* %723, align 4
  %725 = load i32, i32* %6, align 4
  %726 = icmp sgt i32 %724, %725
  br i1 %726, label %727, label %731

; <label>:727:                                    ; preds = %721
  %728 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %729 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %728, i32 0, i32 58
  %730 = load i32, i32* %729, align 4
  br label %733

; <label>:731:                                    ; preds = %721
  %732 = load i32, i32* %6, align 4
  br label %733

; <label>:733:                                    ; preds = %731, %727
  %734 = phi i32 [ %730, %727 ], [ %732, %731 ]
  %735 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %736 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %735, i32 0, i32 58
  store i32 %734, i32* %736, align 4
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec125
  store double 0.000000e+00, double* %9, align 8
  br label %737

; <label>:737:                                    ; preds = %733, %709
  %738 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %739 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %738, i32 0, i32 55
  %740 = load float, float* %739, align 4
  %741 = fpext float %740 to double
  %742 = load double, double* %10, align 8
  %743 = fcmp olt double %741, %742
  br i1 %743, label %744, label %790

; <label>:744:                                    ; preds = %737
  %745 = load double, double* %10, align 8
  %746 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %747 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %746, i32 0, i32 56
  %748 = load float, float* %747, align 4
  %749 = fpext float %748 to double
  %750 = fcmp olt double %745, %749
  br i1 %750, label %751, label %790

; <label>:751:                                    ; preds = %744
  %752 = load i32, i32* %8, align 4
  %753 = load i32, i32* %6, align 4
  %754 = icmp slt i32 %752, %753
  br i1 %754, label %755, label %757

; <label>:755:                                    ; preds = %751
  %756 = load i32, i32* %8, align 4
  br label %759

; <label>:757:                                    ; preds = %751
  %758 = load i32, i32* %6, align 4
  br label %759

; <label>:759:                                    ; preds = %757, %755
  %760 = phi i32 [ %756, %755 ], [ %758, %757 ]
  store i32 %760, i32* %8, align 4
  %761 = load i32, i32* %7, align 4
  %762 = load i32, i32* %6, align 4
  %763 = icmp sgt i32 %761, %762
  br i1 %763, label %764, label %766

; <label>:764:                                    ; preds = %759
  %765 = load i32, i32* %7, align 4
  br label %768

; <label>:766:                                    ; preds = %759
  %767 = load i32, i32* %6, align 4
  br label %768

; <label>:768:                                    ; preds = %766, %764
  %769 = phi i32 [ %765, %764 ], [ %767, %766 ]
  store i32 %769, i32* %7, align 4
  %770 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %771 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %770, i32 0, i32 56
  %772 = load float, float* %771, align 4
  %773 = fpext float %772 to double
  %774 = load double, double* %10, align 8
  store double %773, double* %CastInst66
  %775 = load double, double* %CastInst66, align 4
  %insertCast204 = insertelement <2 x double> undef, double %775, i32 0
  %insertCast205 = insertelement <2 x double> %insertCast204, double %775, i32 1
  store <2 x double> %insertCast205, <2 x double>* %CastInstVec67, align 4
  %776 = load <2 x double>, <2 x double>* %CastInstVec67, align 4
  %777 = load <2 x double>, <2 x double>* %allocaVec126, align 16
  %Vop206 = fsub <2 x double> %776, %777
  %778 = fsub double %773, %774
  %Vop207 = fmul <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %Vop206
  %779 = fmul double 0x3FF921FB54442D18, %778
  %780 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %781 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %780, i32 0, i32 56
  %782 = load float, float* %781, align 4
  %783 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %784 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %783, i32 0, i32 55
  %785 = load float, float* %784, align 4
  %786 = fsub float %782, %785
  %787 = fpext float %786 to double
  %788 = fdiv double %779, %787
  %789 = call arm_aapcscc double @cos(double %788) #7
  store double %789, double* %9, align 8
  br label %790

; <label>:790:                                    ; preds = %768, %744, %737
  br label %791

; <label>:791:                                    ; preds = %790
  %792 = load i32, i32* %6, align 4
  %793 = load <4 x i32>, <4 x i32>* %allocaVec122, align 16
  %Vop208 = add <4 x i32> %793, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop208, <4 x i32>* %allocaVec122
  %794 = load <4 x i32>, <4 x i32>* %allocaVec122, align 4
  %extractE = extractelement <4 x i32> %794, i64 0
  %extractE209 = extractelement <4 x i32> %794, i64 1
  %extractE210 = extractelement <4 x i32> %794, i64 2
  %sum = add i32 %extractE, %extractE209
  %sum211 = add i32 %sum, %extractE210
  %795 = add nsw i32 %792, 1
  %Fmul = mul i32 %795, 3
  store i32 %795, i32* %Recovery
  %Fcmp = icmp ne i32 %sum211, %Fmul
  br i1 %Fcmp, label %796, label %800

; <label>:796:                                    ; preds = %791
  %remThree = sdiv i32 %sum211, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %797, label %798

; <label>:797:                                    ; preds = %796
  store i32 %795, i32* %Recovery, align 4
  br label %799

; <label>:798:                                    ; preds = %796
  store i32 %extractE, i32* %Recovery, align 4
  br label %799

; <label>:799:                                    ; preds = %798, %797
  br label %800

; <label>:800:                                    ; preds = %791, %799
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %6, align 4
  br label %706

; <label>:801:                                    ; preds = %706
  %802 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %803 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %802, i32 0, i32 58
  %804 = load i32, i32* %803, align 4
  %805 = sitofp i32 %804 to double
  store double %805, double* %CastInst70
  %806 = load double, double* %CastInst70, align 4
  %insertCast212 = insertelement <2 x double> undef, double %806, i32 0
  %insertCast213 = insertelement <2 x double> %insertCast212, double %806, i32 1
  store <2 x double> %insertCast213, <2 x double>* %CastInstVec71, align 4
  %807 = load <2 x double>, <2 x double>* %CastInstVec71, align 4
  %Vop214 = fdiv <2 x double> %807, <double 3.100000e+01, double 3.100000e+01>
  %808 = fdiv double %805, 3.100000e+01
  %809 = fptrunc double %808 to float
  %810 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %811 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %810, i32 0, i32 55
  store float %809, float* %811, align 4
  %812 = load i32, i32* %7, align 4
  %813 = icmp eq i32 %812, -1
  br i1 %813, label %814, label %826

; <label>:814:                                    ; preds = %801
  %815 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %816 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %815, i32 0, i32 58
  %817 = load i32, i32* %816, align 4
  %818 = sitofp i32 %817 to double
  store double %818, double* %CastInst72
  %819 = load double, double* %CastInst72, align 4
  %insertCast215 = insertelement <2 x double> undef, double %819, i32 0
  %insertCast216 = insertelement <2 x double> %insertCast215, double %819, i32 1
  store <2 x double> %insertCast216, <2 x double>* %CastInstVec73, align 4
  %820 = load <2 x double>, <2 x double>* %CastInstVec73, align 4
  %Vop217 = fadd <2 x double> %820, <double 7.500000e-01, double 7.500000e-01>
  %821 = fadd double %818, 7.500000e-01
  %Vop218 = fdiv <2 x double> %Vop217, <double 3.100000e+01, double 3.100000e+01>
  %822 = fdiv double %821, 3.100000e+01
  %823 = fptrunc double %822 to float
  %824 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %825 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %824, i32 0, i32 56
  store float %823, float* %825, align 4
  br label %836

; <label>:826:                                    ; preds = %801
  %827 = load i32, i32* %7, align 4
  %828 = sitofp i32 %827 to double
  store double %828, double* %CastInst74
  %829 = load double, double* %CastInst74, align 4
  %insertCast219 = insertelement <2 x double> undef, double %829, i32 0
  %insertCast220 = insertelement <2 x double> %insertCast219, double %829, i32 1
  store <2 x double> %insertCast220, <2 x double>* %CastInstVec75, align 4
  %830 = load <2 x double>, <2 x double>* %CastInstVec75, align 4
  %Vop221 = fadd <2 x double> %830, <double 7.500000e-01, double 7.500000e-01>
  %831 = fadd double %828, 7.500000e-01
  %Vop222 = fdiv <2 x double> %Vop221, <double 3.100000e+01, double 3.100000e+01>
  %832 = fdiv double %831, 3.100000e+01
  %833 = fptrunc double %832 to float
  %834 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %835 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %834, i32 0, i32 56
  store float %833, float* %835, align 4
  br label %836

; <label>:836:                                    ; preds = %826, %814
  br label %837

; <label>:837:                                    ; preds = %836, %700
  br label %838

; <label>:838:                                    ; preds = %837, %545
  %839 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %840 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %839, i32 0, i32 59
  %841 = load i32, i32* %840, align 4
  %842 = icmp eq i32 %841, 1
  br i1 %842, label %843, label %844

; <label>:843:                                    ; preds = %838
  br label %844

; <label>:844:                                    ; preds = %843, %838
  %845 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %846 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %845, i32 0, i32 52
  store i32 0, i32* %846, align 4
  %847 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %848 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %847, i32 0, i32 8
  %849 = load i32, i32* %848, align 4
  %850 = icmp eq i32 %849, 3
  %851 = select i1 %850, i32 1, i32 2
  %852 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %853 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %852, i32 0, i32 46
  store i32 %851, i32* %853, align 4
  %854 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %855 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %854, i32 0, i32 3
  %856 = load i32, i32* %855, align 4
  %857 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %858 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %857, i32 0, i32 43
  %859 = call arm_aapcscc i32 @SmpFrqIndex(i32 %856, i32* %858)
  %860 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %861 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %860, i32 0, i32 51
  store i32 %859, i32* %861, align 4
  %862 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %863 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %862, i32 0, i32 51
  %864 = load i32, i32* %863, align 4
  %865 = icmp slt i32 %864, 0
  br i1 %865, label %866, label %868

; <label>:866:                                    ; preds = %844
  %867 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  call arm_aapcscc void @display_bitrates(%struct._IO_FILE* %867)
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:868:                                    ; preds = %844
  %869 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %870 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %869, i32 0, i32 11
  %871 = load i32, i32* %870, align 4
  %872 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %873 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %872, i32 0, i32 43
  %874 = load i32, i32* %873, align 4
  %875 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %876 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %875, i32 0, i32 3
  %877 = load i32, i32* %876, align 4
  %878 = call arm_aapcscc i32 @BitrateIndex(i32 %871, i32 %874, i32 %877)
  %879 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %880 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %879, i32 0, i32 50
  store i32 %878, i32* %880, align 4
  %881 = icmp slt i32 %878, 0
  br i1 %881, label %882, label %884

; <label>:882:                                    ; preds = %868
  %883 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  call arm_aapcscc void @display_bitrates(%struct._IO_FILE* %883)
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:884:                                    ; preds = %868
  %885 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %886 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %885, i32 0, i32 21
  %887 = load i32, i32* %886, align 4
  %888 = icmp ne i32 %887, 0
  br i1 %888, label %889, label %972

; <label>:889:                                    ; preds = %884
  %890 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %891 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %890, i32 0, i32 24
  %892 = load i32, i32* %891, align 4
  %893 = icmp eq i32 0, %892
  br i1 %893, label %894, label %929

; <label>:894:                                    ; preds = %889
  %895 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %896 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %895, i32 0, i32 48
  store i32 13, i32* %896, align 4
  %897 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %898 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %897, i32 0, i32 23
  %899 = load i32, i32* %898, align 4
  %900 = icmp sge i32 %899, 256
  br i1 %900, label %901, label %904

; <label>:901:                                    ; preds = %894
  %902 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %903 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %902, i32 0, i32 48
  store i32 14, i32* %903, align 4
  br label %904

; <label>:904:                                    ; preds = %901, %894
  %905 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %906 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %905, i32 0, i32 22
  %907 = load i32, i32* %906, align 4
  %908 = icmp eq i32 %907, 0
  br i1 %908, label %909, label %912

; <label>:909:                                    ; preds = %904
  %910 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %911 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %910, i32 0, i32 48
  store i32 14, i32* %911, align 4
  br label %912

; <label>:912:                                    ; preds = %909, %904
  %913 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %914 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %913, i32 0, i32 22
  %915 = load i32, i32* %914, align 4
  %916 = icmp sge i32 %915, 4
  br i1 %916, label %917, label %920

; <label>:917:                                    ; preds = %912
  %918 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %919 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %918, i32 0, i32 48
  store i32 12, i32* %919, align 4
  br label %920

; <label>:920:                                    ; preds = %917, %912
  %921 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %922 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %921, i32 0, i32 22
  %923 = load i32, i32* %922, align 4
  %924 = icmp sge i32 %923, 8
  br i1 %924, label %925, label %928

; <label>:925:                                    ; preds = %920
  %926 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %927 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %926, i32 0, i32 48
  store i32 9, i32* %927, align 4
  br label %928

; <label>:928:                                    ; preds = %925, %920
  br label %946

; <label>:929:                                    ; preds = %889
  %930 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %931 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %930, i32 0, i32 24
  %932 = load i32, i32* %931, align 4
  %933 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %934 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %933, i32 0, i32 43
  %935 = load i32, i32* %934, align 4
  %936 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %937 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %936, i32 0, i32 3
  %938 = load i32, i32* %937, align 4
  %939 = call arm_aapcscc i32 @BitrateIndex(i32 %932, i32 %935, i32 %938)
  %940 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %941 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %940, i32 0, i32 48
  store i32 %939, i32* %941, align 4
  %942 = icmp slt i32 %939, 0
  br i1 %942, label %943, label %945

; <label>:943:                                    ; preds = %929
  %944 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  call arm_aapcscc void @display_bitrates(%struct._IO_FILE* %944)
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:945:                                    ; preds = %929
  br label %946

; <label>:946:                                    ; preds = %945, %928
  %947 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %948 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %947, i32 0, i32 23
  %949 = load i32, i32* %948, align 4
  %950 = icmp eq i32 0, %949
  br i1 %950, label %951, label %954

; <label>:951:                                    ; preds = %946
  %952 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %953 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %952, i32 0, i32 47
  store i32 1, i32* %953, align 4
  br label %971

; <label>:954:                                    ; preds = %946
  %955 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %956 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %955, i32 0, i32 23
  %957 = load i32, i32* %956, align 4
  %958 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %959 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %958, i32 0, i32 43
  %960 = load i32, i32* %959, align 4
  %961 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %962 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %961, i32 0, i32 3
  %963 = load i32, i32* %962, align 4
  %964 = call arm_aapcscc i32 @BitrateIndex(i32 %957, i32 %960, i32 %963)
  %965 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %966 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %965, i32 0, i32 47
  store i32 %964, i32* %966, align 4
  %967 = icmp slt i32 %964, 0
  br i1 %967, label %968, label %970

; <label>:968:                                    ; preds = %954
  %969 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  call arm_aapcscc void @display_bitrates(%struct._IO_FILE* %969)
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:970:                                    ; preds = %954
  br label %971

; <label>:971:                                    ; preds = %970, %951
  br label %972

; <label>:972:                                    ; preds = %971, %884
  %973 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %974 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %973, i32 0, i32 21
  %975 = load i32, i32* %974, align 4
  %976 = icmp ne i32 %975, 0
  br i1 %976, label %977, label %991

; <label>:977:                                    ; preds = %972
  %978 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %979 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %978, i32 0, i32 6
  %980 = load i32, i32* %979, align 4
  %981 = icmp slt i32 %980, 2
  br i1 %981, label %982, label %986

; <label>:982:                                    ; preds = %977
  %983 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %984 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %983, i32 0, i32 6
  %985 = load i32, i32* %984, align 4
  br label %987

; <label>:986:                                    ; preds = %977
  br label %987

; <label>:987:                                    ; preds = %986, %982
  %988 = phi i32 [ %985, %982 ], [ 2, %986 ]
  %989 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %990 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %989, i32 0, i32 6
  store i32 %988, i32* %990, align 4
  br label %991

; <label>:991:                                    ; preds = %987, %972
  %992 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %993 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %992, i32 0, i32 8
  %994 = load i32, i32* %993, align 4
  %995 = icmp eq i32 %994, 3
  br i1 %995, label %996, label %999

; <label>:996:                                    ; preds = %991
  %997 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %998 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %997, i32 0, i32 10
  store i32 0, i32* %998, align 4
  br label %999

; <label>:999:                                    ; preds = %996, %991
  %1000 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1001 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1000, i32 0, i32 21
  %1002 = load i32, i32* %1001, align 4
  %1003 = icmp eq i32 %1002, 0
  br i1 %1003, label %1004, label %1007

; <label>:1004:                                   ; preds = %999
  %1005 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1006 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1005, i32 0, i32 5
  store i32 0, i32* %1006, align 4
  br label %1007

; <label>:1007:                                   ; preds = %1004, %999
  %1008 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1009 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1008, i32 0, i32 32
  %1010 = load i8*, i8** %1009, align 4
  %1011 = icmp ne i8* %1010, null
  br i1 %1011, label %1012, label %1023

; <label>:1012:                                   ; preds = %1007
  %1013 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1014 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1013, i32 0, i32 32
  %1015 = load i8*, i8** %1014, align 4
  %1016 = getelementptr inbounds i8, i8* %1015, i32 0
  %1017 = load i8, i8* %1016, align 1
  %1018 = zext i8 %1017 to i32
  %1019 = icmp eq i32 %1018, 45
  br i1 %1019, label %1020, label %1023

; <label>:1020:                                   ; preds = %1012
  %1021 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1022 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1021, i32 0, i32 5
  store i32 0, i32* %1022, align 4
  br label %1023

; <label>:1023:                                   ; preds = %1020, %1012, %1007
  %1024 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1025 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1024, i32 0, i32 32
  %1026 = load i8*, i8** %1025, align 4
  %1027 = icmp eq i8* %1026, null
  br i1 %1027, label %1036, label %1028

; <label>:1028:                                   ; preds = %1023
  %1029 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1030 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1029, i32 0, i32 32
  %1031 = load i8*, i8** %1030, align 4
  %1032 = getelementptr inbounds i8, i8* %1031, i32 0
  %1033 = load i8, i8* %1032, align 1
  %1034 = zext i8 %1033 to i32
  %1035 = icmp eq i32 %1034, 45
  br i1 %1035, label %1036, label %1037

; <label>:1036:                                   ; preds = %1028, %1023
  store i32 0, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i32 0, i32 0), align 4
  br label %1037

; <label>:1037:                                   ; preds = %1036, %1028
  %1038 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1039 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1038, i32 0, i32 4
  %1040 = load i32, i32* %1039, align 4
  %1041 = icmp ne i32 %1040, 0
  br i1 %1041, label %1042, label %1045

; <label>:1042:                                   ; preds = %1037
  %1043 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1044 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1043, i32 0, i32 5
  store i32 0, i32* %1044, align 4
  br label %1045

; <label>:1045:                                   ; preds = %1042, %1037
  call arm_aapcscc void @init_bit_stream_w(%struct.bit_stream_struc* @bs.172)
  %1046 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1047 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1046, i32 0, i32 6
  %1048 = load i32, i32* %1047, align 4
  %1049 = icmp eq i32 %1048, 9
  br i1 %1049, label %1050, label %1063

; <label>:1050:                                   ; preds = %1045
  %1051 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1052 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1051, i32 0, i32 59
  store i32 0, i32* %1052, align 4
  %1053 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1054 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1053, i32 0, i32 63
  store i32 0, i32* %1054, align 4
  %1055 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1056 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1055, i32 0, i32 60
  store i32 0, i32* %1056, align 4
  %1057 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1058 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1057, i32 0, i32 61
  store i32 0, i32* %1058, align 4
  %1059 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1060 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1059, i32 0, i32 62
  store i32 0, i32* %1060, align 4
  %1061 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1062 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1061, i32 0, i32 64
  store i32 0, i32* %1062, align 4
  br label %1063

; <label>:1063:                                   ; preds = %1050, %1045
  %1064 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1065 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1064, i32 0, i32 6
  %1066 = load i32, i32* %1065, align 4
  %1067 = icmp eq i32 %1066, 8
  br i1 %1067, label %1068, label %1071

; <label>:1068:                                   ; preds = %1063
  %1069 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1070 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1069, i32 0, i32 6
  store i32 7, i32* %1070, align 4
  br label %1071

; <label>:1071:                                   ; preds = %1068, %1063
  %1072 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1073 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1072, i32 0, i32 6
  %1074 = load i32, i32* %1073, align 4
  %1075 = icmp eq i32 %1074, 7
  br i1 %1075, label %1076, label %1089

; <label>:1076:                                   ; preds = %1071
  %1077 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1078 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1077, i32 0, i32 59
  store i32 0, i32* %1078, align 4
  %1079 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1080 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1079, i32 0, i32 63
  store i32 1, i32* %1080, align 4
  %1081 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1082 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1081, i32 0, i32 60
  store i32 0, i32* %1082, align 4
  %1083 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1084 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1083, i32 0, i32 61
  store i32 0, i32* %1084, align 4
  %1085 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1086 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1085, i32 0, i32 62
  store i32 0, i32* %1086, align 4
  %1087 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1088 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1087, i32 0, i32 64
  store i32 0, i32* %1088, align 4
  br label %1089

; <label>:1089:                                   ; preds = %1076, %1071
  %1090 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1091 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1090, i32 0, i32 6
  %1092 = load i32, i32* %1091, align 4
  %1093 = icmp eq i32 %1092, 6
  br i1 %1093, label %1094, label %1097

; <label>:1094:                                   ; preds = %1089
  %1095 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1096 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1095, i32 0, i32 6
  store i32 5, i32* %1096, align 4
  br label %1097

; <label>:1097:                                   ; preds = %1094, %1089
  %1098 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1099 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1098, i32 0, i32 6
  %1100 = load i32, i32* %1099, align 4
  %1101 = icmp eq i32 %1100, 5
  br i1 %1101, label %1102, label %1115

; <label>:1102:                                   ; preds = %1097
  %1103 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1104 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1103, i32 0, i32 59
  store i32 0, i32* %1104, align 4
  %1105 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1106 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1105, i32 0, i32 63
  store i32 1, i32* %1106, align 4
  %1107 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1108 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1107, i32 0, i32 60
  store i32 0, i32* %1108, align 4
  %1109 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1110 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1109, i32 0, i32 61
  store i32 1, i32* %1110, align 4
  %1111 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1112 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1111, i32 0, i32 62
  store i32 0, i32* %1112, align 4
  %1113 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1114 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1113, i32 0, i32 64
  store i32 0, i32* %1114, align 4
  br label %1115

; <label>:1115:                                   ; preds = %1102, %1097
  %1116 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1117 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1116, i32 0, i32 6
  %1118 = load i32, i32* %1117, align 4
  %1119 = icmp eq i32 %1118, 4
  br i1 %1119, label %1120, label %1123

; <label>:1120:                                   ; preds = %1115
  %1121 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1122 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1121, i32 0, i32 6
  store i32 2, i32* %1122, align 4
  br label %1123

; <label>:1123:                                   ; preds = %1120, %1115
  %1124 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1125 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1124, i32 0, i32 6
  %1126 = load i32, i32* %1125, align 4
  %1127 = icmp eq i32 %1126, 3
  br i1 %1127, label %1128, label %1131

; <label>:1128:                                   ; preds = %1123
  %1129 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1130 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1129, i32 0, i32 6
  store i32 2, i32* %1130, align 4
  br label %1131

; <label>:1131:                                   ; preds = %1128, %1123
  %1132 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1133 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1132, i32 0, i32 6
  %1134 = load i32, i32* %1133, align 4
  %1135 = icmp eq i32 %1134, 2
  br i1 %1135, label %1136, label %1149

; <label>:1136:                                   ; preds = %1131
  %1137 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1138 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1137, i32 0, i32 59
  store i32 0, i32* %1138, align 4
  %1139 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1140 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1139, i32 0, i32 63
  store i32 1, i32* %1140, align 4
  %1141 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1142 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1141, i32 0, i32 60
  store i32 1, i32* %1142, align 4
  %1143 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1144 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1143, i32 0, i32 61
  store i32 1, i32* %1144, align 4
  %1145 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1146 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1145, i32 0, i32 62
  store i32 0, i32* %1146, align 4
  %1147 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1148 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1147, i32 0, i32 64
  store i32 1, i32* %1148, align 4
  br label %1149

; <label>:1149:                                   ; preds = %1136, %1131
  %1150 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1151 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1150, i32 0, i32 6
  %1152 = load i32, i32* %1151, align 4
  %1153 = icmp eq i32 %1152, 1
  br i1 %1153, label %1154, label %1167

; <label>:1154:                                   ; preds = %1149
  %1155 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1156 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1155, i32 0, i32 59
  store i32 0, i32* %1156, align 4
  %1157 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1158 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1157, i32 0, i32 63
  store i32 1, i32* %1158, align 4
  %1159 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1160 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1159, i32 0, i32 60
  store i32 1, i32* %1160, align 4
  %1161 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1162 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1161, i32 0, i32 61
  store i32 1, i32* %1162, align 4
  %1163 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1164 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1163, i32 0, i32 62
  store i32 1, i32* %1164, align 4
  %1165 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1166 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1165, i32 0, i32 64
  store i32 1, i32* %1166, align 4
  br label %1167

; <label>:1167:                                   ; preds = %1154, %1149
  %1168 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1169 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1168, i32 0, i32 6
  %1170 = load i32, i32* %1169, align 4
  %1171 = icmp eq i32 %1170, 0
  br i1 %1171, label %1172, label %1185

; <label>:1172:                                   ; preds = %1167
  %1173 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1174 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1173, i32 0, i32 59
  store i32 1, i32* %1174, align 4
  %1175 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1176 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1175, i32 0, i32 63
  store i32 1, i32* %1176, align 4
  %1177 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1178 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1177, i32 0, i32 60
  store i32 1, i32* %1178, align 4
  %1179 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1180 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1179, i32 0, i32 61
  store i32 3, i32* %1180, align 4
  %1181 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1182 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1181, i32 0, i32 62
  store i32 2, i32* %1182, align 4
  %1183 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1184 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1183, i32 0, i32 64
  store i32 2, i32* %1184, align 4
  call arm_aapcscc void @exit(i32 -99) #8
  unreachable

; <label>:1185:                                   ; preds = %1167
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec119
  store i32 0, i32* %3, align 4
  br label %1186

; <label>:1186:                                   ; preds = %1205, %1185
  %1187 = load i32, i32* %3, align 4
  %1188 = icmp slt i32 %1187, 23
  br i1 %1188, label %1189, label %1209

; <label>:1189:                                   ; preds = %1186
  %1190 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1191 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1190, i32 0, i32 51
  %1192 = load i32, i32* %1191, align 4
  %1193 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1194 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1193, i32 0, i32 43
  %1195 = load i32, i32* %1194, align 4
  %1196 = mul nsw i32 %1195, 3
  %1197 = add nsw i32 %1192, %1196
  %1198 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i32 0, i32 %1197
  %1199 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* %1198, i32 0, i32 0
  %1200 = load i32, i32* %3, align 4
  %1201 = getelementptr inbounds [23 x i32], [23 x i32]* %1199, i32 0, i32 %1200
  %1202 = load i32, i32* %1201, align 4
  %1203 = load i32, i32* %3, align 4
  %1204 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %1203
  store i32 %1202, i32* %1204, align 4
  br label %1205

; <label>:1205:                                   ; preds = %1189
  %1206 = load i32, i32* %3, align 4
  %insertElmt223 = insertelement <4 x i32> undef, i32 %1206, i32 0
  %insertElmt224 = insertelement <4 x i32> %insertElmt223, i32 %1206, i32 1
  %insertElmt225 = insertelement <4 x i32> %insertElmt224, i32 %1206, i32 2
  %insertElmt226 = insertelement <4 x i32> %insertElmt225, i32 %1206, i32 3
  store <4 x i32> %insertElmt226, <4 x i32>* %allocaVec119, align 16
  %1207 = load <4 x i32>, <4 x i32>* %allocaVec119, align 16
  %Vop227 = add <4 x i32> %1207, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop227, <4 x i32>* %allocaVec119
  %1208 = add nsw i32 %1206, 1
  store i32 %1208, i32* %3, align 4
  br label %1186

; <label>:1209:                                   ; preds = %1186
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec119
  store i32 0, i32* %3, align 4
  br label %1210

; <label>:1210:                                   ; preds = %1238, %1209
  %1211 = load i32, i32* %3, align 4
  %1212 = icmp slt i32 %1211, 14
  br i1 %1212, label %1213, label %1239

; <label>:1213:                                   ; preds = %1210
  %1214 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1215 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1214, i32 0, i32 51
  %1216 = load i32, i32* %1215, align 4
  %1217 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1218 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1217, i32 0, i32 43
  %1219 = load i32, i32* %1218, align 4
  %1220 = mul nsw i32 %1219, 3
  %1221 = add nsw i32 %1216, %1220
  %1222 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i32 0, i32 %1221
  %1223 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* %1222, i32 0, i32 1
  %1224 = load i32, i32* %3, align 4
  %1225 = getelementptr inbounds [14 x i32], [14 x i32]* %1223, i32 0, i32 %1224
  %1226 = load i32, i32* %1225, align 4
  %1227 = load i32, i32* %3, align 4
  %1228 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %1227
  store i32 %1226, i32* %1228, align 4
  br label %1229

; <label>:1229:                                   ; preds = %1213
  %1230 = load i32, i32* %3, align 4
  %1231 = load <4 x i32>, <4 x i32>* %allocaVec119, align 16
  %Vop228 = add <4 x i32> %1231, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop228, <4 x i32>* %allocaVec119
  %1232 = load <4 x i32>, <4 x i32>* %allocaVec119, align 4
  %extractE230 = extractelement <4 x i32> %1232, i64 0
  %extractE231 = extractelement <4 x i32> %1232, i64 1
  %extractE232 = extractelement <4 x i32> %1232, i64 2
  %sum233 = add i32 %extractE230, %extractE231
  %sum234 = add i32 %sum233, %extractE232
  %1233 = add nsw i32 %1230, 1
  %Fmul229 = mul i32 %1233, 3
  store i32 %1233, i32* %Recovery1
  %Fcmp235 = icmp ne i32 %sum234, %Fmul229
  br i1 %Fcmp235, label %1234, label %1238

; <label>:1234:                                   ; preds = %1229
  %remThree236 = sdiv i32 %sum234, %extractE230
  %FcmpThree237 = icmp ne i32 %remThree236, 3
  br i1 %FcmpThree237, label %1235, label %1236

; <label>:1235:                                   ; preds = %1234
  store i32 %1233, i32* %Recovery1, align 4
  br label %1237

; <label>:1236:                                   ; preds = %1234
  store i32 %extractE230, i32* %Recovery1, align 4
  br label %1237

; <label>:1237:                                   ; preds = %1236, %1235
  br label %1238

; <label>:1238:                                   ; preds = %1229, %1237
  %ReplaceInst238 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst238, i32* %3, align 4
  br label %1210

; <label>:1239:                                   ; preds = %1210
  %1240 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1241 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1240, i32 0, i32 5
  %1242 = load i32, i32* %1241, align 4
  %1243 = icmp ne i32 %1242, 0
  br i1 %1243, label %1244, label %1256

; <label>:1244:                                   ; preds = %1239
  %1245 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1246 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1245, i32 0, i32 43
  %1247 = load i32, i32* %1246, align 4
  %1248 = sub nsw i32 1, %1247
  %1249 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1250 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1249, i32 0, i32 8
  %1251 = load i32, i32* %1250, align 4
  %1252 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1253 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1252, i32 0, i32 51
  %1254 = load i32, i32* %1253, align 4
  %1255 = call arm_aapcscc i32 @InitVbrTag(%struct.bit_stream_struc* @bs.172, i32 %1248, i32 %1251, i32 %1254)
  br label %1256

; <label>:1256:                                   ; preds = %1244, %1239
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i32, i1) #5

; Function Attrs: nounwind
declare arm_aapcscc double @log(double) #2

; Function Attrs: nounwind
define arm_aapcscc void @lame_print_config(%struct.lame_global_flags*) #0 {
  %allocaVec = alloca <4 x float>, align 16
  %Recovery = alloca float, align 4
  %allocaVec10 = alloca <4 x float>, align 16
  %Recovery1 = alloca float, align 4
  %allocaVec11 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec12 = alloca <4 x float>, align 16
  %CastInst2 = alloca float, align 4
  %CastInstVec3 = alloca <4 x float>, align 16
  %allocaVec13 = alloca <4 x float>, align 16
  %CastInst4 = alloca float, align 4
  %CastInstVec5 = alloca <4 x float>, align 16
  %allocaVec14 = alloca <2 x double>, align 16
  %CastInst6 = alloca double, align 4
  %CastInstVec7 = alloca <2 x double>, align 16
  %allocaVec15 = alloca <2 x double>, align 16
  %CastInst8 = alloca double, align 4
  %CastInstVec9 = alloca <2 x double>, align 16
  %2 = alloca %struct.lame_global_flags*, align 4
  %allocaVec16 = alloca <4 x float>, align 16
  %3 = alloca float, align 4
  %allocaVec17 = alloca <4 x float>, align 16
  %4 = alloca float, align 4
  %allocaVec18 = alloca <4 x float>, align 16
  %5 = alloca float, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %2, align 4
  %6 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %7 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %6, i32 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = sitofp i32 %8 to double
  store double %9, double* %CastInst
  %10 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %10, i32 0
  %insertCast19 = insertelement <2 x double> %insertCast, double %10, i32 1
  store <2 x double> %insertCast19, <2 x double>* %CastInstVec, align 4
  %11 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %Vop = fdiv <2 x double> %11, <double 1.000000e+03, double 1.000000e+03>
  %12 = fdiv double %9, 1.000000e+03
  %13 = fptrunc double %12 to float
  store float %13, float* %3, align 4
  %14 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %15 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %14, i32 0, i32 49
  %16 = load float, float* %15, align 4
  %17 = load float, float* %3, align 4
  %18 = fmul float %16, %17
  store float %18, float* %4, align 4
  %19 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %20 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %19, i32 0, i32 46
  %21 = load i32, i32* %20, align 4
  %22 = mul nsw i32 %21, 16
  %23 = sitofp i32 %22 to float
  %24 = load float, float* %3, align 4
  %25 = fmul float %23, %24
  %26 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %27 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %26, i32 0, i32 11
  %28 = load i32, i32* %27, align 4
  %29 = sitofp i32 %28 to float
  %30 = fdiv float %25, %29
  store float %30, float* %5, align 4
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  call arm_aapcscc void @lame_print_version(%struct._IO_FILE* %31)
  %32 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %33 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %32, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 2
  br i1 %35, label %36, label %44

; <label>:36:                                     ; preds = %1
  %37 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %38 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %37, i32 0, i32 46
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, 1
  br i1 %40, label %41, label %44

; <label>:41:                                     ; preds = %36
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %43 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.5.174, i32 0, i32 0))
  br label %44

; <label>:44:                                     ; preds = %41, %36, %1
  %45 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %46 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %45, i32 0, i32 49
  %47 = load float, float* %46, align 4
  %48 = fcmp une float %47, 1.000000e+00
  br i1 %48, label %49, label %56

; <label>:49:                                     ; preds = %44
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %51 = load float, float* %4, align 4
  %52 = fptosi float %51 to i32
  %53 = load float, float* %3, align 4
  %54 = fptosi float %53 to i32
  %55 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6.175, i32 0, i32 0), i32 %52, i32 %54)
  br label %56

; <label>:56:                                     ; preds = %49, %44
  %57 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %58 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %57, i32 0, i32 56
  %59 = load float, float* %58, align 4
  %60 = fpext float %59 to double
  %61 = fcmp ogt double %60, 0.000000e+00
  br i1 %61, label %62, label %79

; <label>:62:                                     ; preds = %56
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %64 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %65 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %64, i32 0, i32 55
  %66 = load float, float* %65, align 4
  %67 = load float, float* %3, align 4
  %68 = fmul float %66, %67
  %69 = fmul float %68, 5.000000e+02
  %70 = fpext float %69 to double
  %71 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %72 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %71, i32 0, i32 56
  %73 = load float, float* %72, align 4
  %74 = load float, float* %3, align 4
  %75 = fmul float %73, %74
  %76 = fmul float %75, 5.000000e+02
  %77 = fpext float %76 to double
  %78 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.7.176, i32 0, i32 0), double %70, double %77)
  br label %79

; <label>:79:                                     ; preds = %62, %56
  %80 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %81 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %80, i32 0, i32 53
  %82 = load float, float* %81, align 4
  %83 = fpext float %82 to double
  %84 = fcmp ogt double %83, 0.000000e+00
  br i1 %84, label %85, label %102

; <label>:85:                                     ; preds = %79
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %87 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %88 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %87, i32 0, i32 53
  %89 = load float, float* %88, align 4
  %90 = load float, float* %3, align 4
  %91 = fmul float %89, %90
  %92 = fmul float %91, 5.000000e+02
  %93 = fpext float %92 to double
  %94 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %95 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %94, i32 0, i32 54
  %96 = load float, float* %95, align 4
  %97 = load float, float* %3, align 4
  %98 = fmul float %96, %97
  %99 = fmul float %98, 5.000000e+02
  %100 = fpext float %99 to double
  %101 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %86, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8.177, i32 0, i32 0), double %93, double %100)
  br label %102

; <label>:102:                                    ; preds = %85, %79
  %103 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %104 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %103, i32 0, i32 4
  %105 = load i32, i32* %104, align 4
  %106 = icmp ne i32 %105, 0
  br i1 %106, label %107, label %113

; <label>:107:                                    ; preds = %102
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %109 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %110 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %109, i32 0, i32 31
  %111 = load i8*, i8** %110, align 4
  %112 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %108, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9.178, i32 0, i32 0), i8* %111)
  br label %199

; <label>:113:                                    ; preds = %102
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %115 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %116 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %115, i32 0, i32 31
  %117 = load i8*, i8** %116, align 4
  %118 = call arm_aapcscc i32 @strcmp(i8* %117, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.179, i32 0, i32 0))
  %119 = icmp ne i32 %118, 0
  br i1 %119, label %120, label %125

; <label>:120:                                    ; preds = %113
  %121 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %122 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %121, i32 0, i32 31
  %123 = load i8*, i8** %122, align 4
  %124 = call arm_aapcscc i8* @mybasename(i8* %123)
  br label %126

; <label>:125:                                    ; preds = %113
  br label %126

; <label>:126:                                    ; preds = %125, %120
  %127 = phi i8* [ %124, %120 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12.180, i32 0, i32 0), %125 ]
  %128 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %129 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %128, i32 0, i32 32
  %130 = load i8*, i8** %129, align 4
  %131 = call arm_aapcscc i32 @strcmp(i8* %130, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.179, i32 0, i32 0))
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %133, label %138

; <label>:133:                                    ; preds = %126
  %134 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %135 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %134, i32 0, i32 32
  %136 = load i8*, i8** %135, align 4
  %137 = call arm_aapcscc i8* @mybasename(i8* %136)
  br label %139

; <label>:138:                                    ; preds = %126
  br label %139

; <label>:139:                                    ; preds = %138, %133
  %140 = phi i8* [ %137, %133 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13.181, i32 0, i32 0), %138 ]
  %141 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %114, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10.182, i32 0, i32 0), i8* %127, i8* %140)
  %142 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %143 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %142, i32 0, i32 21
  %144 = load i32, i32* %143, align 4
  %145 = icmp ne i32 %144, 0
  br i1 %145, label %146, label %171

; <label>:146:                                    ; preds = %139
  %147 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %148 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %149 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %148, i32 0, i32 3
  %150 = load i32, i32* %149, align 4
  %151 = sitofp i32 %150 to double
  store double %151, double* %CastInst6
  %152 = load double, double* %CastInst6, align 4
  %insertCast20 = insertelement <2 x double> undef, double %152, i32 0
  %insertCast21 = insertelement <2 x double> %insertCast20, double %152, i32 1
  store <2 x double> %insertCast21, <2 x double>* %CastInstVec7, align 4
  %153 = load <2 x double>, <2 x double>* %CastInstVec7, align 4
  %Vop22 = fdiv <2 x double> %153, <double 1.000000e+03, double 1.000000e+03>
  %154 = fdiv double %151, 1.000000e+03
  %155 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %156 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %155, i32 0, i32 22
  %157 = load i32, i32* %156, align 4
  %158 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %159 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %158, i32 0, i32 8
  %160 = load i32, i32* %159, align 4
  %161 = getelementptr inbounds [4 x i8*], [4 x i8*]* @lame_print_config.mode_names, i32 0, i32 %160
  %162 = load i8*, i8** %161, align 4
  %163 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %164 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %163, i32 0, i32 43
  %165 = load i32, i32* %164, align 4
  %166 = sub nsw i32 2, %165
  %167 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %168 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %167, i32 0, i32 6
  %169 = load i32, i32* %168, align 4
  %170 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %147, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.14.183, i32 0, i32 0), double %154, i32 %157, i8* %162, i32 %166, i32 %169)
  br label %198

; <label>:171:                                    ; preds = %139
  %172 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %173 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %174 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %173, i32 0, i32 3
  %175 = load i32, i32* %174, align 4
  %176 = sitofp i32 %175 to double
  store double %176, double* %CastInst8
  %177 = load double, double* %CastInst8, align 4
  %insertCast23 = insertelement <2 x double> undef, double %177, i32 0
  %insertCast24 = insertelement <2 x double> %insertCast23, double %177, i32 1
  store <2 x double> %insertCast24, <2 x double>* %CastInstVec9, align 4
  %178 = load <2 x double>, <2 x double>* %CastInstVec9, align 4
  %Vop25 = fdiv <2 x double> %178, <double 1.000000e+03, double 1.000000e+03>
  %179 = fdiv double %176, 1.000000e+03
  %180 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %181 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %180, i32 0, i32 11
  %182 = load i32, i32* %181, align 4
  %183 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %184 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %183, i32 0, i32 8
  %185 = load i32, i32* %184, align 4
  %186 = getelementptr inbounds [4 x i8*], [4 x i8*]* @lame_print_config.mode_names, i32 0, i32 %185
  %187 = load i8*, i8** %186, align 4
  %188 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %189 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %188, i32 0, i32 43
  %190 = load i32, i32* %189, align 4
  %191 = sub nsw i32 2, %190
  %192 = load float, float* %5, align 4
  %193 = fpext float %192 to double
  %194 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %195 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %194, i32 0, i32 6
  %196 = load i32, i32* %195, align 4
  %197 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %172, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.15.184, i32 0, i32 0), double %179, i32 %182, i8* %187, i32 %191, double %193, i32 %196)
  br label %198

; <label>:198:                                    ; preds = %171, %146
  br label %199

; <label>:199:                                    ; preds = %198, %107
  %200 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %201 = call arm_aapcscc i32 @fflush(%struct._IO_FILE* %200)
  ret void
}

declare arm_aapcscc i32 @strcmp(i8*, i8*) #3

; Function Attrs: nounwind
define internal arm_aapcscc i8* @mybasename(i8*) #0 {
  %2 = alloca i8*, align 4
  %3 = alloca i8*, align 4
  store i8* %0, i8** %2, align 4
  %4 = load i8*, i8** %2, align 4
  %5 = call arm_aapcscc i8* @strrchr(i8* %4, i32 47)
  store i8* %5, i8** %3, align 4
  %6 = load i8*, i8** %3, align 4
  %7 = icmp ne i8* %6, null
  br i1 %7, label %8, label %11

; <label>:8:                                      ; preds = %1
  %9 = load i8*, i8** %3, align 4
  %10 = getelementptr inbounds i8, i8* %9, i32 1
  br label %13

; <label>:11:                                     ; preds = %1
  %12 = load i8*, i8** %2, align 4
  br label %13

; <label>:13:                                     ; preds = %11, %8
  %14 = phi i8* [ %10, %8 ], [ %12, %11 ]
  ret i8* %14
}

declare arm_aapcscc i32 @fflush(%struct._IO_FILE*) #3

declare arm_aapcscc i8* @strrchr(i8*, i32) #3

; Function Attrs: nounwind
define arm_aapcscc i32 @lame_encode_frame(%struct.lame_global_flags*, i16*, i16*, i32, i8*, i32) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %Recovery = alloca double, align 8
  %allocaVec9 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec11 = alloca <2 x double>, align 16
  %Recovery3 = alloca double, align 8
  %allocaVec12 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec13 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec14 = alloca <2 x double>, align 16
  %CastInst5 = alloca double, align 4
  %CastInstVec6 = alloca <2 x double>, align 16
  %allocaVec15 = alloca <2 x double>, align 16
  %CastInst7 = alloca double, align 4
  %CastInstVec8 = alloca <2 x double>, align 16
  %allocaVec16 = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %7 = alloca %struct.lame_global_flags*, align 4
  %8 = alloca i16*, align 4
  %9 = alloca i16*, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 4
  %allocaVec18 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %13 = alloca [2 x [2 x [576 x double]]], align 8
  %14 = alloca [2 x [2 x [576 x i32]]], align 4
  %allocaVec19 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %16 = alloca [2 x [2 x %struct.III_psy_ratio]], align 8
  %17 = alloca [2 x [2 x %struct.III_psy_ratio]], align 8
  %18 = alloca [2 x [2 x %struct.III_psy_ratio]]*, align 4
  %19 = alloca [2 x [2 x %struct.III_scalefac_t]], align 4
  %20 = alloca [2 x i16*], align 4
  %21 = alloca [2 x [2 x double]], align 8
  %22 = alloca [2 x [2 x double]], align 8
  %23 = alloca [2 x [2 x double]]*, align 4
  %allocaVec20 = alloca <4 x i32>, align 16
  %24 = alloca i32, align 4
  %allocaVec21 = alloca <4 x i32>, align 16
  %25 = alloca i32, align 4
  %allocaVec22 = alloca <4 x i32>, align 16
  %26 = alloca i32, align 4
  %allocaVec23 = alloca <4 x i32>, align 16
  %27 = alloca i32, align 4
  %allocaVec24 = alloca <4 x i32>, align 16
  %28 = alloca i32, align 4
  %allocaVec25 = alloca <2 x double>, align 16
  %29 = alloca double, align 8
  %allocaVec26 = alloca <2 x double>, align 16
  %30 = alloca double, align 8
  %allocaVec27 = alloca <2 x double>, align 16
  %31 = alloca double, align 8
  %allocaVec28 = alloca <2 x double>, align 16
  %32 = alloca double, align 8
  %allocaVec29 = alloca <4 x i32>, align 16
  %33 = alloca i32, align 4
  %allocaVec30 = alloca <4 x i32>, align 16
  %34 = alloca i32, align 4
  %35 = alloca [2 x i16*], align 4
  %36 = alloca [2 x i32], align 4
  %37 = alloca %struct.gr_info*, align 4
  %allocaVec31 = alloca <2 x double>, align 16
  %38 = alloca double, align 8
  %allocaVec32 = alloca <2 x double>, align 16
  %39 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %7, align 4
  store i16* %1, i16** %8, align 4
  store i16* %2, i16** %9, align 4
  store i32 %3, i32* %10, align 4
  store i8* %4, i8** %11, align 4
  store i32 %5, i32* %12, align 4
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec25
  store double 0.000000e+00, double* %29, align 8
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec26
  store double 0.000000e+00, double* %30, align 8
  %40 = getelementptr inbounds [2 x [2 x %struct.III_psy_ratio]], [2 x [2 x %struct.III_psy_ratio]]* %16, i32 0, i32 0
  %41 = bitcast [2 x %struct.III_psy_ratio]* %40 to i8*
  call void @llvm.memset.p0i8.i32(i8* %41, i8 0, i32 3904, i32 8, i1 false)
  %42 = getelementptr inbounds [2 x [2 x %struct.III_psy_ratio]], [2 x [2 x %struct.III_psy_ratio]]* %17, i32 0, i32 0
  %43 = bitcast [2 x %struct.III_psy_ratio]* %42 to i8*
  call void @llvm.memset.p0i8.i32(i8* %43, i8 0, i32 3904, i32 8, i1 false)
  %44 = getelementptr inbounds [2 x [2 x %struct.III_scalefac_t]], [2 x [2 x %struct.III_scalefac_t]]* %19, i32 0, i32 0
  %45 = bitcast [2 x %struct.III_scalefac_t]* %44 to i8*
  call void @llvm.memset.p0i8.i32(i8* %45, i8 0, i32 976, i32 4, i1 false)
  %46 = load i16*, i16** %8, align 4
  %47 = getelementptr inbounds [2 x i16*], [2 x i16*]* %20, i32 0, i32 0
  store i16* %46, i16** %47, align 4
  %48 = load i16*, i16** %9, align 4
  %49 = getelementptr inbounds [2 x i16*], [2 x i16*]* %20, i32 0, i32 1
  store i16* %48, i16** %49, align 4
  %50 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %51 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %50, i32 0, i32 52
  store i32 0, i32* %51, align 4
  %52 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %53 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %52, i32 0, i32 39
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %109

; <label>:56:                                     ; preds = %6
  %57 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %58 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %57, i32 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = sitofp i32 %59 to double
  store double %60, double* %CastInst
  %61 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %61, i32 0
  %insertCast33 = insertelement <2 x double> %insertCast, double %61, i32 1
  store <2 x double> %insertCast33, <2 x double>* %CastInstVec, align 4
  %62 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %Vop = fdiv <2 x double> %62, <double 1.000000e+03, double 1.000000e+03>
  store <2 x double> %Vop, <2 x double>* %allocaVec28
  %63 = fdiv double %60, 1.000000e+03
  store double %63, double* %32, align 8
  %64 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %65 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %64, i32 0, i32 11
  %66 = load i32, i32* %65, align 4
  store i32 %66, i32* %33, align 4
  store i32 0, i32* @lame_encode_frame.sentBits, align 4
  store i32 8, i32* @lame_encode_frame.bitsPerSlot, align 4
  %67 = load i32, i32* %33, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %67, i32 0
  %insertElmt34 = insertelement <4 x i32> %insertElmt, i32 %67, i32 1
  %insertElmt35 = insertelement <4 x i32> %insertElmt34, i32 %67, i32 2
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %67, i32 3
  store <4 x i32> %insertElmt36, <4 x i32>* %allocaVec29, align 16
  %68 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %69 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %68, i32 0, i32 42
  %70 = load i32, i32* %69, align 4
  %71 = mul nsw i32 %67, %70
  %72 = sitofp i32 %71 to double
  %73 = load double, double* %32, align 8
  %74 = load i32, i32* @lame_encode_frame.bitsPerSlot, align 4
  %75 = uitofp i32 %74 to double
  %76 = fmul double %73, %75
  %77 = fdiv double %72, %76
  store double %77, double* %31, align 8
  %78 = load double, double* %31, align 8
  %79 = load double, double* %31, align 8
  %80 = fadd double %79, 1.000000e-09
  %81 = call arm_aapcscc double @floor(double %80) #9
  %82 = fsub double %78, %81
  store double %82, double* @lame_encode_frame.frac_SpF, align 8
  %83 = load double, double* @lame_encode_frame.frac_SpF, align 8
  %84 = call arm_aapcscc double @fabs(double %83) #9
  %85 = fcmp olt double %84, 1.000000e-09
  br i1 %85, label %86, label %87

; <label>:86:                                     ; preds = %56
  store double 0.000000e+00, double* @lame_encode_frame.frac_SpF, align 8
  br label %87

; <label>:87:                                     ; preds = %86, %56
  %88 = load double, double* @lame_encode_frame.frac_SpF, align 8
  %89 = fsub double -0.000000e+00, %88
  store double %89, double* @lame_encode_frame.slot_lag, align 8
  %90 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %91 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %90, i32 0, i32 44
  store i32 1, i32* %91, align 4
  %92 = load double, double* @lame_encode_frame.frac_SpF, align 8
  %93 = fcmp oeq double %92, 0.000000e+00
  br i1 %93, label %94, label %97

; <label>:94:                                     ; preds = %87
  %95 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %96 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %95, i32 0, i32 44
  store i32 0, i32* %96, align 4
  br label %97

; <label>:97:                                     ; preds = %94, %87
  %98 = load i32, i32* %10, align 4
  %99 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %100 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %99, i32 0, i32 42
  %101 = load i32, i32* %100, align 4
  %102 = add nsw i32 1024, %101
  %103 = sub nsw i32 %102, 272
  %104 = icmp sge i32 %98, %103
  br i1 %104, label %106, label %105

; <label>:105:                                    ; preds = %97
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.16.189, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.190, i32 0, i32 0), i32 666, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.lame_encode_frame, i32 0, i32 0))
  br label %106

; <label>:106:                                    ; preds = %105, %97
  %107 = phi i1 [ true, %97 ], [ false, %105 ]
  %108 = zext i1 %107 to i32
  br label %109

; <label>:109:                                    ; preds = %106, %6
  %110 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %111 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %110, i32 0, i32 15
  %112 = load i32, i32* %111, align 4
  switch i32 %112, label %120 [
    i32 0, label %113
    i32 1, label %116
    i32 2, label %119
  ]

; <label>:113:                                    ; preds = %109
  %114 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %115 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %114, i32 0, i32 44
  store i32 0, i32* %115, align 4
  br label %161

; <label>:116:                                    ; preds = %109
  %117 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %118 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %117, i32 0, i32 44
  store i32 1, i32* %118, align 4
  br label %161

; <label>:119:                                    ; preds = %109
  br label %120

; <label>:120:                                    ; preds = %119, %109
  %121 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %122 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %121, i32 0, i32 21
  %123 = load i32, i32* %122, align 4
  %124 = icmp ne i32 %123, 0
  br i1 %124, label %125, label %128

; <label>:125:                                    ; preds = %120
  %126 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %127 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %126, i32 0, i32 44
  store i32 0, i32* %127, align 4
  br label %160

; <label>:128:                                    ; preds = %120
  %129 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %130 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %129, i32 0, i32 17
  %131 = load i32, i32* %130, align 4
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %133, label %136

; <label>:133:                                    ; preds = %128
  %134 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %135 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %134, i32 0, i32 44
  store i32 0, i32* %135, align 4
  br label %159

; <label>:136:                                    ; preds = %128
  %137 = load double, double* @lame_encode_frame.frac_SpF, align 8
  %138 = fcmp une double %137, 0.000000e+00
  br i1 %138, label %139, label %158

; <label>:139:                                    ; preds = %136
  %140 = load double, double* @lame_encode_frame.slot_lag, align 8
  %141 = load double, double* @lame_encode_frame.frac_SpF, align 8
  %142 = fsub double %141, 1.000000e+00
  %143 = fcmp ogt double %140, %142
  br i1 %143, label %144, label %150

; <label>:144:                                    ; preds = %139
  %145 = load double, double* @lame_encode_frame.frac_SpF, align 8
  %146 = load double, double* @lame_encode_frame.slot_lag, align 8
  %147 = fsub double %146, %145
  store double %147, double* @lame_encode_frame.slot_lag, align 8
  %148 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %149 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %148, i32 0, i32 44
  store i32 0, i32* %149, align 4
  br label %157

; <label>:150:                                    ; preds = %139
  %151 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %152 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %151, i32 0, i32 44
  store i32 1, i32* %152, align 4
  %153 = load double, double* @lame_encode_frame.frac_SpF, align 8
  %154 = fsub double 1.000000e+00, %153
  %155 = load double, double* @lame_encode_frame.slot_lag, align 8
  %156 = fadd double %155, %154
  store double %156, double* @lame_encode_frame.slot_lag, align 8
  br label %157

; <label>:157:                                    ; preds = %150, %144
  br label %158

; <label>:158:                                    ; preds = %157, %136
  br label %159

; <label>:159:                                    ; preds = %158, %133
  br label %160

; <label>:160:                                    ; preds = %159, %125
  br label %161

; <label>:161:                                    ; preds = %160, %116, %113
  %162 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %163 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %162, i32 0, i32 4
  %164 = load i32, i32* %163, align 4
  %165 = icmp ne i32 %164, 0
  br i1 %165, label %197, label %166

; <label>:166:                                    ; preds = %161
  %167 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %168 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %167, i32 0, i32 7
  %169 = load i32, i32* %168, align 4
  %170 = icmp ne i32 %169, 0
  br i1 %170, label %197, label %171

; <label>:171:                                    ; preds = %166
  %172 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %173 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %172, i32 0, i32 43
  %174 = load i32, i32* %173, align 4
  %175 = icmp eq i32 %174, 0
  %176 = select i1 %175, i32 200, i32 50
  store i32 %176, i32* %34, align 4
  %177 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %178 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %177, i32 0, i32 39
  %179 = load i32, i32* %178, align 4
  %180 = load i32, i32* %34, align 4
  %181 = srem i32 %179, %180
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %183, label %196

; <label>:183:                                    ; preds = %171
  %184 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %185 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %184, i32 0, i32 3
  %186 = load i32, i32* %185, align 4
  %187 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %188 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %187, i32 0, i32 39
  %189 = load i32, i32* %188, align 4
  %190 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %191 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %190, i32 0, i32 40
  %192 = load i32, i32* %191, align 4
  %193 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %194 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %193, i32 0, i32 42
  %195 = load i32, i32* %194, align 4
  call arm_aapcscc void @timestatus(i32 %186, i32 %189, i32 %192, i32 %195)
  br label %196

; <label>:196:                                    ; preds = %183, %171
  br label %197

; <label>:197:                                    ; preds = %196, %166, %161
  %198 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %199 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %198, i32 0, i32 63
  %200 = load i32, i32* %199, align 4
  %201 = icmp ne i32 %200, 0
  br i1 %201, label %202, label %282

; <label>:202:                                    ; preds = %197
  %203 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %204 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %203, i32 0, i32 45
  %205 = load i32, i32* %204, align 4
  %206 = sub nsw i32 %205, 1
  %207 = getelementptr inbounds [2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i32 0, i32 %206
  %208 = load double, double* %207, align 8
  store double %208, double* %30, align 8
  store i32 0, i32* %25, align 4
  br label %209

; <label>:209:                                    ; preds = %277, %202
  %210 = load i32, i32* %25, align 4
  %211 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %212 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %211, i32 0, i32 45
  %213 = load i32, i32* %212, align 4
  %214 = icmp slt i32 %210, %213
  br i1 %214, label %215, label %281

; <label>:215:                                    ; preds = %209
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec20
  store i32 0, i32* %24, align 4
  br label %216

; <label>:216:                                    ; preds = %234, %215
  %217 = load i32, i32* %24, align 4
  %218 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %219 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %218, i32 0, i32 46
  %220 = load i32, i32* %219, align 4
  %221 = icmp slt i32 %217, %220
  br i1 %221, label %222, label %238

; <label>:222:                                    ; preds = %216
  %223 = load i32, i32* %24, align 4
  %224 = getelementptr inbounds [2 x i16*], [2 x i16*]* %20, i32 0, i32 %223
  %225 = load i16*, i16** %224, align 4
  %226 = load i32, i32* %25, align 4
  %insertElmt37 = insertelement <4 x i32> undef, i32 %226, i32 0
  %insertElmt38 = insertelement <4 x i32> %insertElmt37, i32 %226, i32 1
  %insertElmt39 = insertelement <4 x i32> %insertElmt38, i32 %226, i32 2
  %insertElmt40 = insertelement <4 x i32> %insertElmt39, i32 %226, i32 3
  store <4 x i32> %insertElmt40, <4 x i32>* %allocaVec21, align 16
  %227 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop41 = mul <4 x i32> %227, <i32 576, i32 576, i32 576, i32 576>
  %228 = mul nsw i32 %226, 576
  %Vop42 = add <4 x i32> <i32 576, i32 576, i32 576, i32 576>, %Vop41
  %229 = add nsw i32 576, %228
  %Vop43 = sub <4 x i32> %Vop42, <i32 272, i32 272, i32 272, i32 272>
  %230 = sub nsw i32 %229, 272
  %231 = getelementptr inbounds i16, i16* %225, i32 %230
  %232 = load i32, i32* %24, align 4
  %233 = getelementptr inbounds [2 x i16*], [2 x i16*]* %35, i32 0, i32 %232
  store i16* %231, i16** %233, align 4
  br label %234

; <label>:234:                                    ; preds = %222
  %235 = load i32, i32* %24, align 4
  %insertElmt44 = insertelement <4 x i32> undef, i32 %235, i32 0
  %insertElmt45 = insertelement <4 x i32> %insertElmt44, i32 %235, i32 1
  %insertElmt46 = insertelement <4 x i32> %insertElmt45, i32 %235, i32 2
  %insertElmt47 = insertelement <4 x i32> %insertElmt46, i32 %235, i32 3
  store <4 x i32> %insertElmt47, <4 x i32>* %allocaVec20, align 16
  %236 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop48 = add <4 x i32> %236, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop48, <4 x i32>* %allocaVec20
  %237 = add nsw i32 %235, 1
  store i32 %237, i32* %24, align 4
  br label %216

; <label>:238:                                    ; preds = %216
  %239 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %240 = getelementptr inbounds [2 x i16*], [2 x i16*]* %35, i32 0, i32 0
  %241 = load i32, i32* %25, align 4
  %242 = load i32, i32* %25, align 4
  %243 = getelementptr inbounds [2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i32 0, i32 %242
  %244 = load i32, i32* %25, align 4
  %245 = getelementptr inbounds [2 x double], [2 x double]* @lame_encode_frame.ms_ener_ratio, i32 0, i32 %244
  %246 = getelementptr inbounds [2 x [2 x %struct.III_psy_ratio]], [2 x [2 x %struct.III_psy_ratio]]* %16, i32 0, i32 0
  %247 = getelementptr inbounds [2 x [2 x %struct.III_psy_ratio]], [2 x [2 x %struct.III_psy_ratio]]* %17, i32 0, i32 0
  %248 = load i32, i32* %25, align 4
  %249 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %21, i32 0, i32 %248
  %250 = getelementptr inbounds [2 x double], [2 x double]* %249, i32 0, i32 0
  %251 = load i32, i32* %25, align 4
  %252 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %22, i32 0, i32 %251
  %253 = getelementptr inbounds [2 x double], [2 x double]* %252, i32 0, i32 0
  %254 = getelementptr inbounds [2 x i32], [2 x i32]* %36, i32 0, i32 0
  call arm_aapcscc void @L3psycho_anal(%struct.lame_global_flags* %239, i16** %240, i32 %241, double* %243, double* %29, double* %245, [2 x %struct.III_psy_ratio]* %246, [2 x %struct.III_psy_ratio]* %247, double* %250, double* %253, i32* %254)
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec20
  store i32 0, i32* %24, align 4
  br label %255

; <label>:255:                                    ; preds = %272, %238
  %256 = load i32, i32* %24, align 4
  %257 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %258 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %257, i32 0, i32 46
  %259 = load i32, i32* %258, align 4
  %260 = icmp slt i32 %256, %259
  br i1 %260, label %261, label %276

; <label>:261:                                    ; preds = %255
  %262 = load i32, i32* %24, align 4
  %263 = getelementptr inbounds [2 x i32], [2 x i32]* %36, i32 0, i32 %262
  %264 = load i32, i32* %263, align 4
  %265 = load i32, i32* %25, align 4
  %266 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i32 0, i32 4), i32 0, i32 %265
  %267 = getelementptr inbounds %struct.anon, %struct.anon* %266, i32 0, i32 0
  %268 = load i32, i32* %24, align 4
  %269 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %267, i32 0, i32 %268
  %270 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %269, i32 0, i32 0
  %271 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %270, i32 0, i32 6
  store i32 %264, i32* %271, align 4
  br label %272

; <label>:272:                                    ; preds = %261
  %273 = load i32, i32* %24, align 4
  %274 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop49 = add <4 x i32> %274, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop49, <4 x i32>* %allocaVec20
  %275 = add nsw i32 %273, 1
  store i32 %275, i32* %24, align 4
  br label %255

; <label>:276:                                    ; preds = %255
  br label %277

; <label>:277:                                    ; preds = %276
  %278 = load i32, i32* %25, align 4
  %insertElmt50 = insertelement <4 x i32> undef, i32 %278, i32 0
  %insertElmt51 = insertelement <4 x i32> %insertElmt50, i32 %278, i32 1
  %insertElmt52 = insertelement <4 x i32> %insertElmt51, i32 %278, i32 2
  %insertElmt53 = insertelement <4 x i32> %insertElmt52, i32 %278, i32 3
  store <4 x i32> %insertElmt53, <4 x i32>* %allocaVec21, align 16
  %279 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop54 = add <4 x i32> %279, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop54, <4 x i32>* %allocaVec21
  %280 = add nsw i32 %278, 1
  store i32 %280, i32* %25, align 4
  br label %209

; <label>:281:                                    ; preds = %209
  br label %318

; <label>:282:                                    ; preds = %197
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec21
  store i32 0, i32* %25, align 4
  br label %283

; <label>:283:                                    ; preds = %313, %282
  %284 = load i32, i32* %25, align 4
  %285 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %286 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %285, i32 0, i32 45
  %287 = load i32, i32* %286, align 4
  %288 = icmp slt i32 %284, %287
  br i1 %288, label %289, label %317

; <label>:289:                                    ; preds = %283
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec20
  store i32 0, i32* %24, align 4
  br label %290

; <label>:290:                                    ; preds = %308, %289
  %291 = load i32, i32* %24, align 4
  %292 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %293 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %292, i32 0, i32 46
  %294 = load i32, i32* %293, align 4
  %295 = icmp slt i32 %291, %294
  br i1 %295, label %296, label %312

; <label>:296:                                    ; preds = %290
  %297 = load i32, i32* %25, align 4
  %298 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i32 0, i32 4), i32 0, i32 %297
  %299 = getelementptr inbounds %struct.anon, %struct.anon* %298, i32 0, i32 0
  %300 = load i32, i32* %24, align 4
  %301 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %299, i32 0, i32 %300
  %302 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %301, i32 0, i32 0
  %303 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %302, i32 0, i32 6
  store i32 0, i32* %303, align 4
  %304 = load i32, i32* %25, align 4
  %305 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %21, i32 0, i32 %304
  %306 = load i32, i32* %24, align 4
  %307 = getelementptr inbounds [2 x double], [2 x double]* %305, i32 0, i32 %306
  store double 7.000000e+02, double* %307, align 8
  br label %308

; <label>:308:                                    ; preds = %296
  %309 = load i32, i32* %24, align 4
  %310 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop55 = add <4 x i32> %310, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop55, <4 x i32>* %allocaVec20
  %311 = add nsw i32 %309, 1
  store i32 %311, i32* %24, align 4
  br label %290

; <label>:312:                                    ; preds = %290
  br label %313

; <label>:313:                                    ; preds = %312
  %314 = load i32, i32* %25, align 4
  %315 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop56 = add <4 x i32> %315, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop56, <4 x i32>* %allocaVec21
  %316 = add nsw i32 %314, 1
  store i32 %316, i32* %25, align 4
  br label %283

; <label>:317:                                    ; preds = %283
  br label %318

; <label>:318:                                    ; preds = %317, %281
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec21
  store i32 0, i32* %25, align 4
  br label %319

; <label>:319:                                    ; preds = %372, %318
  %320 = load i32, i32* %25, align 4
  %321 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %322 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %321, i32 0, i32 45
  %323 = load i32, i32* %322, align 4
  %324 = icmp slt i32 %320, %323
  br i1 %324, label %325, label %373

; <label>:325:                                    ; preds = %319
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec20
  store i32 0, i32* %24, align 4
  br label %326

; <label>:326:                                    ; preds = %361, %325
  %327 = load i32, i32* %24, align 4
  %328 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %329 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %328, i32 0, i32 46
  %330 = load i32, i32* %329, align 4
  %331 = icmp slt i32 %327, %330
  br i1 %331, label %332, label %362

; <label>:332:                                    ; preds = %326
  %333 = load i32, i32* %25, align 4
  %334 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i32 0, i32 4), i32 0, i32 %333
  %335 = getelementptr inbounds %struct.anon, %struct.anon* %334, i32 0, i32 0
  %336 = load i32, i32* %24, align 4
  %337 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %335, i32 0, i32 %336
  %338 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %337, i32 0, i32 0
  store %struct.gr_info* %338, %struct.gr_info** %37, align 4
  %339 = load %struct.gr_info*, %struct.gr_info** %37, align 4
  %340 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %339, i32 0, i32 7
  store i32 0, i32* %340, align 4
  %341 = load %struct.gr_info*, %struct.gr_info** %37, align 4
  %342 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %341, i32 0, i32 6
  %343 = load i32, i32* %342, align 4
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %345, label %348

; <label>:345:                                    ; preds = %332
  %346 = load %struct.gr_info*, %struct.gr_info** %37, align 4
  %347 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %346, i32 0, i32 5
  store i32 0, i32* %347, align 4
  br label %351

; <label>:348:                                    ; preds = %332
  %349 = load %struct.gr_info*, %struct.gr_info** %37, align 4
  %350 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %349, i32 0, i32 5
  store i32 1, i32* %350, align 4
  br label %351

; <label>:351:                                    ; preds = %348, %345
  br label %352

; <label>:352:                                    ; preds = %351
  %353 = load i32, i32* %24, align 4
  %354 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop57 = add <4 x i32> %354, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop57, <4 x i32>* %allocaVec20
  %355 = load <4 x i32>, <4 x i32>* %allocaVec20, align 4
  %extractE = extractelement <4 x i32> %355, i64 0
  %extractE58 = extractelement <4 x i32> %355, i64 1
  %extractE59 = extractelement <4 x i32> %355, i64 2
  %sum = add i32 %extractE, %extractE58
  %sum60 = add i32 %sum, %extractE59
  %356 = add nsw i32 %353, 1
  %Fmul = mul i32 %356, 3
  store i32 %356, i32* %Recovery1
  %Fcmp = icmp ne i32 %sum60, %Fmul
  br i1 %Fcmp, label %357, label %361

; <label>:357:                                    ; preds = %352
  %remThree = sdiv i32 %sum60, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %358, label %359

; <label>:358:                                    ; preds = %357
  store i32 %356, i32* %Recovery1, align 4
  br label %360

; <label>:359:                                    ; preds = %357
  store i32 %extractE, i32* %Recovery1, align 4
  br label %360

; <label>:360:                                    ; preds = %359, %358
  br label %361

; <label>:361:                                    ; preds = %352, %360
  %ReplaceInst = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst, i32* %24, align 4
  br label %326

; <label>:362:                                    ; preds = %326
  br label %363

; <label>:363:                                    ; preds = %362
  %364 = load i32, i32* %25, align 4
  %365 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop61 = add <4 x i32> %365, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop61, <4 x i32>* %allocaVec21
  %366 = load <4 x i32>, <4 x i32>* %allocaVec21, align 4
  %extractE63 = extractelement <4 x i32> %366, i64 0
  %extractE64 = extractelement <4 x i32> %366, i64 1
  %extractE65 = extractelement <4 x i32> %366, i64 2
  %sum66 = add i32 %extractE63, %extractE64
  %sum67 = add i32 %sum66, %extractE65
  %367 = add nsw i32 %364, 1
  %Fmul62 = mul i32 %367, 3
  store i32 %367, i32* %Recovery2
  %Fcmp68 = icmp ne i32 %sum67, %Fmul62
  br i1 %Fcmp68, label %368, label %372

; <label>:368:                                    ; preds = %363
  %remThree69 = sdiv i32 %sum67, %extractE63
  %FcmpThree70 = icmp ne i32 %remThree69, 3
  br i1 %FcmpThree70, label %369, label %370

; <label>:369:                                    ; preds = %368
  store i32 %367, i32* %Recovery2, align 4
  br label %371

; <label>:370:                                    ; preds = %368
  store i32 %extractE63, i32* %Recovery2, align 4
  br label %371

; <label>:371:                                    ; preds = %370, %369
  br label %372

; <label>:372:                                    ; preds = %363, %371
  %ReplaceInst71 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst71, i32* %25, align 4
  br label %319

; <label>:373:                                    ; preds = %319
  %374 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %375 = getelementptr inbounds [2 x i16*], [2 x i16*]* %20, i32 0, i32 0
  %376 = load i16*, i16** %375, align 4
  %377 = getelementptr inbounds [2 x i16*], [2 x i16*]* %20, i32 0, i32 1
  %378 = load i16*, i16** %377, align 4
  %379 = getelementptr inbounds [2 x [2 x [576 x double]]], [2 x [2 x [576 x double]]]* %13, i32 0, i32 0
  call arm_aapcscc void @mdct_sub48(%struct.lame_global_flags* %374, i16* %376, i16* %378, [2 x [576 x double]]* %379, %struct.III_side_info_t* @l3_side)
  %380 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %381 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %380, i32 0, i32 8
  %382 = load i32, i32* %381, align 4
  %383 = icmp eq i32 %382, 1
  %384 = zext i1 %383 to i32
  store i32 %384, i32* %28, align 4
  %385 = load i32, i32* %28, align 4
  %386 = icmp ne i32 %385, 0
  br i1 %386, label %387, label %398

; <label>:387:                                    ; preds = %373
  %388 = load i32, i32* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i32 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 6), align 4
  %389 = load i32, i32* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i32 0, i32 4, i32 0, i32 0, i32 1, i32 0, i32 6), align 4
  %390 = icmp eq i32 %388, %389
  br i1 %390, label %391, label %395

; <label>:391:                                    ; preds = %387
  %392 = load i32, i32* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i32 0, i32 4, i32 1, i32 0, i32 0, i32 0, i32 6), align 4
  %393 = load i32, i32* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i32 0, i32 4, i32 1, i32 0, i32 1, i32 0, i32 6), align 4
  %394 = icmp eq i32 %392, %393
  br label %395

; <label>:395:                                    ; preds = %391, %387
  %396 = phi i1 [ false, %387 ], [ %394, %391 ]
  %397 = zext i1 %396 to i32
  store i32 %397, i32* %28, align 4
  br label %398

; <label>:398:                                    ; preds = %395, %373
  %399 = load i32, i32* %28, align 4
  %400 = icmp ne i32 %399, 0
  br i1 %400, label %401, label %420

; <label>:401:                                    ; preds = %398
  %402 = load double, double* getelementptr inbounds ([2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i32 0, i32 0), align 8
  %403 = load double, double* getelementptr inbounds ([2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i32 0, i32 1), align 8
  %404 = fadd double %402, %403
  %405 = load double, double* %30, align 8
  %406 = fadd double %404, %405
  %407 = load double, double* %29, align 8
  %408 = fadd double %406, %407
  %409 = fmul double 2.500000e-01, %408
  store double %409, double* %38, align 8
  %410 = load double, double* getelementptr inbounds ([2 x double], [2 x double]* @lame_encode_frame.ms_ener_ratio, i32 0, i32 0), align 8
  %411 = load double, double* getelementptr inbounds ([2 x double], [2 x double]* @lame_encode_frame.ms_ener_ratio, i32 0, i32 1), align 8
  %412 = fadd double %410, %411
  %413 = fmul double 5.000000e-01, %412
  store double %413, double* %39, align 8
  %414 = load double, double* %38, align 8
  %415 = fcmp olt double %414, 3.500000e-01
  br i1 %415, label %416, label %419

; <label>:416:                                    ; preds = %401
  %417 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %418 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %417, i32 0, i32 52
  store i32 2, i32* %418, align 4
  br label %419

; <label>:419:                                    ; preds = %416, %401
  br label %420

; <label>:420:                                    ; preds = %419, %398
  %421 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %422 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %421, i32 0, i32 10
  %423 = load i32, i32* %422, align 4
  %424 = icmp ne i32 %423, 0
  br i1 %424, label %425, label %428

; <label>:425:                                    ; preds = %420
  %426 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %427 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %426, i32 0, i32 52
  store i32 2, i32* %427, align 4
  br label %428

; <label>:428:                                    ; preds = %425, %420
  %429 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %430 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %429, i32 0, i32 52
  %431 = load i32, i32* %430, align 4
  %432 = icmp eq i32 2, %431
  br i1 %432, label %433, label %434

; <label>:433:                                    ; preds = %428
  store [2 x [2 x %struct.III_psy_ratio]]* %17, [2 x [2 x %struct.III_psy_ratio]]** %18, align 4
  store [2 x [2 x double]]* %22, [2 x [2 x double]]** %23, align 4
  br label %435

; <label>:434:                                    ; preds = %428
  store [2 x [2 x %struct.III_psy_ratio]]* %16, [2 x [2 x %struct.III_psy_ratio]]** %18, align 4
  store [2 x [2 x double]]* %21, [2 x [2 x double]]** %23, align 4
  br label %435

; <label>:435:                                    ; preds = %434, %433
  %436 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %437 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %436, i32 0, i32 21
  %438 = load i32, i32* %437, align 4
  %439 = icmp ne i32 %438, 0
  br i1 %439, label %440, label %449

; <label>:440:                                    ; preds = %435
  %441 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %442 = load [2 x [2 x double]]*, [2 x [2 x double]]** %23, align 4
  %443 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %442, i32 0, i32 0
  %444 = getelementptr inbounds [2 x [2 x [576 x double]]], [2 x [2 x [576 x double]]]* %13, i32 0, i32 0
  %445 = load [2 x [2 x %struct.III_psy_ratio]]*, [2 x [2 x %struct.III_psy_ratio]]** %18, align 4
  %446 = getelementptr inbounds [2 x [2 x %struct.III_psy_ratio]], [2 x [2 x %struct.III_psy_ratio]]* %445, i32 0, i32 0
  %447 = getelementptr inbounds [2 x [2 x [576 x i32]]], [2 x [2 x [576 x i32]]]* %14, i32 0, i32 0
  %448 = getelementptr inbounds [2 x [2 x %struct.III_scalefac_t]], [2 x [2 x %struct.III_scalefac_t]]* %19, i32 0, i32 0
  call arm_aapcscc void @VBR_iteration_loop(%struct.lame_global_flags* %441, [2 x double]* %443, double* getelementptr inbounds ([2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i32 0, i32 0), [2 x [576 x double]]* %444, [2 x %struct.III_psy_ratio]* %446, %struct.III_side_info_t* @l3_side, [2 x [576 x i32]]* %447, [2 x %struct.III_scalefac_t]* %448)
  br label %458

; <label>:449:                                    ; preds = %435
  %450 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %451 = load [2 x [2 x double]]*, [2 x [2 x double]]** %23, align 4
  %452 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %451, i32 0, i32 0
  %453 = getelementptr inbounds [2 x [2 x [576 x double]]], [2 x [2 x [576 x double]]]* %13, i32 0, i32 0
  %454 = load [2 x [2 x %struct.III_psy_ratio]]*, [2 x [2 x %struct.III_psy_ratio]]** %18, align 4
  %455 = getelementptr inbounds [2 x [2 x %struct.III_psy_ratio]], [2 x [2 x %struct.III_psy_ratio]]* %454, i32 0, i32 0
  %456 = getelementptr inbounds [2 x [2 x [576 x i32]]], [2 x [2 x [576 x i32]]]* %14, i32 0, i32 0
  %457 = getelementptr inbounds [2 x [2 x %struct.III_scalefac_t]], [2 x [2 x %struct.III_scalefac_t]]* %19, i32 0, i32 0
  call arm_aapcscc void @iteration_loop(%struct.lame_global_flags* %450, [2 x double]* %452, double* getelementptr inbounds ([2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i32 0, i32 0), [2 x [576 x double]]* %453, [2 x %struct.III_psy_ratio]* %455, %struct.III_side_info_t* @l3_side, [2 x [576 x i32]]* %456, [2 x %struct.III_scalefac_t]* %457)
  br label %458

; <label>:458:                                    ; preds = %449, %440
  %459 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  call arm_aapcscc void @getframebits(%struct.lame_global_flags* %459, i32* %27, i32* %26)
  %460 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %461 = load i32, i32* %27, align 4
  %462 = getelementptr inbounds [2 x [2 x [576 x i32]]], [2 x [2 x [576 x i32]]]* %14, i32 0, i32 0
  %463 = getelementptr inbounds [2 x [2 x %struct.III_scalefac_t]], [2 x [2 x %struct.III_scalefac_t]]* %19, i32 0, i32 0
  call arm_aapcscc void @III_format_bitstream(%struct.lame_global_flags* %460, i32 %461, [2 x [576 x i32]]* %462, %struct.III_side_info_t* @l3_side, [2 x %struct.III_scalefac_t]* %463, %struct.bit_stream_struc* @bs.172)
  %464 = load i32, i32* getelementptr inbounds (%struct.bit_stream_struc, %struct.bit_stream_struc* @bs.172, i32 0, i32 5), align 4
  %465 = load i32, i32* @lame_encode_frame.sentBits, align 4
  %466 = sub i32 %464, %465
  store i32 %466, i32* @lame_encode_frame.frameBits, align 4
  %467 = load i32, i32* @lame_encode_frame.frameBits, align 4
  %468 = load i32, i32* @lame_encode_frame.bitsPerSlot, align 4
  %469 = urem i32 %467, %468
  %470 = icmp ne i32 %469, 0
  br i1 %470, label %471, label %481

; <label>:471:                                    ; preds = %458
  %472 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %473 = load i32, i32* @lame_encode_frame.frameBits, align 4
  %474 = load i32, i32* @lame_encode_frame.frameBits, align 4
  %475 = load i32, i32* @lame_encode_frame.bitsPerSlot, align 4
  %476 = udiv i32 %474, %475
  %477 = load i32, i32* @lame_encode_frame.frameBits, align 4
  %478 = load i32, i32* @lame_encode_frame.bitsPerSlot, align 4
  %479 = urem i32 %477, %478
  %480 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %472, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.18.191, i32 0, i32 0), i32 %473, i32 %476, i32 %479)
  br label %481

; <label>:481:                                    ; preds = %471, %458
  %482 = load i32, i32* @lame_encode_frame.frameBits, align 4
  %483 = load i32, i32* @lame_encode_frame.sentBits, align 4
  %484 = add i32 %483, %482
  store i32 %484, i32* @lame_encode_frame.sentBits, align 4
  %485 = load i8*, i8** %11, align 4
  %486 = load i32, i32* %12, align 4
  %487 = call arm_aapcscc i32 @copy_buffer(i8* %485, i32 %486, %struct.bit_stream_struc* @bs.172)
  store i32 %487, i32* %15, align 4
  %488 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %489 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %488, i32 0, i32 5
  %490 = load i32, i32* %489, align 4
  %491 = icmp ne i32 %490, 0
  br i1 %491, label %492, label %495

; <label>:492:                                    ; preds = %481
  %493 = load i32, i32* @lame_encode_frame.sentBits, align 4
  %494 = udiv i32 %493, 8
  call arm_aapcscc void @AddVbrFrame(i32 %494)
  br label %495

; <label>:495:                                    ; preds = %492, %481
  %496 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %497 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %496, i32 0, i32 39
  %498 = load i32, i32* %497, align 4
  %499 = add nsw i32 %498, 1
  store i32 %499, i32* %497, align 4
  %500 = load i32, i32* %15, align 4
  ret i32 %500
}

; Function Attrs: nounwind readnone
declare arm_aapcscc double @fabs(double) #6

; Function Attrs: nounwind
define arm_aapcscc i32 @fill_buffer_resample(%struct.lame_global_flags*, i16*, i32, i16*, i32, i32*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec27 = alloca <2 x double>, align 16
  %Recovery1 = alloca double, align 8
  %allocaVec28 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec29 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec30 = alloca <2 x double>, align 16
  %CastInst3 = alloca double, align 4
  %CastInstVec4 = alloca <2 x double>, align 16
  %allocaVec31 = alloca <4 x float>, align 16
  %CastInst5 = alloca float, align 4
  %CastInstVec6 = alloca <4 x float>, align 16
  %allocaVec32 = alloca <2 x double>, align 16
  %CastInst7 = alloca double, align 4
  %CastInstVec8 = alloca <2 x double>, align 16
  %allocaVec33 = alloca <2 x double>, align 16
  %CastInst9 = alloca double, align 4
  %CastInstVec10 = alloca <2 x double>, align 16
  %allocaVec34 = alloca <2 x double>, align 16
  %CastInst11 = alloca double, align 4
  %CastInstVec12 = alloca <2 x double>, align 16
  %allocaVec35 = alloca <2 x double>, align 16
  %CastInst13 = alloca double, align 4
  %CastInstVec14 = alloca <2 x double>, align 16
  %allocaVec36 = alloca <2 x double>, align 16
  %CastInst15 = alloca double, align 4
  %CastInstVec16 = alloca <2 x double>, align 16
  %allocaVec37 = alloca <2 x double>, align 16
  %CastInst17 = alloca double, align 4
  %CastInstVec18 = alloca <2 x double>, align 16
  %allocaVec38 = alloca <2 x double>, align 16
  %CastInst19 = alloca double, align 4
  %CastInstVec20 = alloca <2 x double>, align 16
  %allocaVec39 = alloca <4 x float>, align 16
  %CastInst21 = alloca float, align 4
  %CastInstVec22 = alloca <4 x float>, align 16
  %allocaVec40 = alloca <4 x float>, align 16
  %CastInst23 = alloca float, align 4
  %CastInstVec24 = alloca <4 x float>, align 16
  %allocaVec41 = alloca <2 x double>, align 16
  %CastInst25 = alloca double, align 4
  %CastInstVec26 = alloca <2 x double>, align 16
  %allocaVec42 = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %8 = alloca %struct.lame_global_flags*, align 4
  %9 = alloca i16*, align 4
  %allocaVec43 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %11 = alloca i16*, align 4
  %allocaVec44 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %13 = alloca i32*, align 4
  %allocaVec45 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  %allocaVec46 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %allocaVec47 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %allocaVec48 = alloca <4 x i32>, align 16
  %17 = alloca i32, align 4
  %allocaVec49 = alloca <4 x i32>, align 16
  %18 = alloca i32, align 4
  %allocaVec50 = alloca <4 x i32>, align 16
  %19 = alloca i32, align 4
  %allocaVec51 = alloca <4 x i32>, align 16
  %20 = alloca i32, align 4
  %allocaVec52 = alloca <4 x i32>, align 16
  %21 = alloca i32, align 4
  %allocaVec53 = alloca <4 x i32>, align 16
  %22 = alloca i32, align 4
  %allocaVec54 = alloca <4 x i32>, align 16
  %23 = alloca i32, align 4
  %allocaVec55 = alloca <2 x double>, align 16
  %24 = alloca double, align 8
  %allocaVec56 = alloca <2 x double>, align 16
  %25 = alloca double, align 8
  %allocaVec57 = alloca <2 x double>, align 16
  %26 = alloca double, align 8
  %allocaVec58 = alloca <2 x double>, align 16
  %27 = alloca double, align 8
  %allocaVec59 = alloca <2 x double>, align 16
  %28 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %8, align 4
  store i16* %1, i16** %9, align 4
  store i32 %2, i32* %10, align 4
  store i16* %3, i16** %11, align 4
  store i32 %4, i32* %12, align 4
  store i32* %5, i32** %13, align 4
  store i32 %6, i32* %14, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec47
  store i32 0, i32* %16, align 4
  %29 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %30 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %29, i32 0, i32 39
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %47

; <label>:33:                                     ; preds = %7
  %34 = load i32, i32* %14, align 4
  %35 = getelementptr inbounds [2 x i32], [2 x i32]* @fill_buffer_resample.init, i32 0, i32 %34
  %36 = load i32, i32* %35, align 4
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %47, label %38

; <label>:38:                                     ; preds = %33
  %39 = load i32, i32* %14, align 4
  %40 = getelementptr inbounds [2 x i32], [2 x i32]* @fill_buffer_resample.init, i32 0, i32 %39
  store i32 1, i32* %40, align 4
  %41 = load i32, i32* %14, align 4
  %42 = getelementptr inbounds [2 x double], [2 x double]* @fill_buffer_resample.itime, i32 0, i32 %41
  store double 0.000000e+00, double* %42, align 8
  %43 = load i32, i32* %14, align 4
  %44 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i32 0, i32 %43
  %45 = getelementptr inbounds [5 x i16], [5 x i16]* %44, i32 0, i32 0
  %46 = bitcast i16* %45 to i8*
  call void @llvm.memset.p0i8.i32(i8* %46, i8 0, i32 10, i32 2, i1 false)
  br label %47

; <label>:47:                                     ; preds = %38, %33, %7
  %48 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %49 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %48, i32 0, i32 39
  %50 = load i32, i32* %49, align 4
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %55

; <label>:52:                                     ; preds = %47
  %53 = load i32, i32* %14, align 4
  %54 = getelementptr inbounds [2 x i32], [2 x i32]* @fill_buffer_resample.init, i32 0, i32 %53
  store i32 0, i32* %54, align 4
  br label %55

; <label>:55:                                     ; preds = %52, %47
  %56 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %57 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %56, i32 0, i32 49
  %58 = load float, float* %57, align 4
  %59 = fpext float %58 to double
  %60 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %61 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %60, i32 0, i32 49
  %62 = load float, float* %61, align 4
  %63 = fpext float %62 to double
  store double %63, double* %CastInst
  %64 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %64, i32 0
  %insertCast60 = insertelement <2 x double> %insertCast, double %64, i32 1
  store <2 x double> %insertCast60, <2 x double>* %CastInstVec, align 4
  %65 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %Vop = fadd <2 x double> <double 5.000000e-01, double 5.000000e-01>, %65
  %66 = fadd double 5.000000e-01, %63
  %67 = call arm_aapcscc double @floor(double %66) #9
  store double %59, double* %CastInst3
  %68 = load double, double* %CastInst3, align 4
  %insertCast61 = insertelement <2 x double> undef, double %68, i32 0
  %insertCast62 = insertelement <2 x double> %insertCast61, double %68, i32 1
  store <2 x double> %insertCast62, <2 x double>* %CastInstVec4, align 4
  %69 = load <2 x double>, <2 x double>* %CastInstVec4, align 4
  store double %67, double* %CallInst
  %70 = load double, double* %CallInst, align 4
  %insertCall = insertelement <2 x double> undef, double %70, i32 0
  %insertCall63 = insertelement <2 x double> %insertCall, double %70, i32 1
  store <2 x double> %insertCall63, <2 x double>* %CallInstVec, align 4
  %71 = load <2 x double>, <2 x double>* %CallInstVec, align 4
  %Vop64 = fsub <2 x double> %69, %71
  %72 = fsub double %59, %67
  %73 = call arm_aapcscc double @fabs(double %72) #9
  %74 = fcmp olt double %73, 1.000000e-04
  %75 = zext i1 %74 to i32
  store i32 %75, i32* %18, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec48
  store i32 0, i32* %17, align 4
  br label %76

; <label>:76:                                     ; preds = %327, %55
  %77 = load i32, i32* %17, align 4
  %78 = load i32, i32* %10, align 4
  %79 = icmp slt i32 %77, %78
  br i1 %79, label %80, label %328

; <label>:80:                                     ; preds = %76
  %81 = load i32, i32* %17, align 4
  %82 = sitofp i32 %81 to float
  %83 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %84 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %83, i32 0, i32 49
  %85 = load float, float* %84, align 4
  %86 = fmul float %82, %85
  %87 = fpext float %86 to double
  store double %87, double* %28, align 8
  %88 = load double, double* %28, align 8
  %89 = load i32, i32* %14, align 4
  %90 = getelementptr inbounds [2 x double], [2 x double]* @fill_buffer_resample.itime, i32 0, i32 %89
  %91 = load double, double* %90, align 8
  %92 = fsub double %88, %91
  %93 = call arm_aapcscc double @floor(double %92) #9
  %94 = fptosi double %93 to i32
  store i32 %94, i32* %16, align 4
  %95 = load i32, i32* %16, align 4
  %96 = add nsw i32 %95, 2
  %97 = load i32, i32* %12, align 4
  %98 = icmp sge i32 %96, %97
  br i1 %98, label %99, label %100

; <label>:99:                                     ; preds = %80
  br label %328

; <label>:100:                                    ; preds = %80
  %101 = load double, double* %28, align 8
  %insertElmt = insertelement <2 x double> undef, double %101, i32 0
  %insertElmt65 = insertelement <2 x double> %insertElmt, double %101, i32 1
  store <2 x double> %insertElmt65, <2 x double>* %allocaVec59, align 16
  %102 = load i32, i32* %14, align 4
  %103 = getelementptr inbounds [2 x double], [2 x double]* @fill_buffer_resample.itime, i32 0, i32 %102
  %104 = load double, double* %103, align 8
  %105 = load i32, i32* %16, align 4
  %106 = sitofp i32 %105 to double
  %107 = fadd double %104, %106
  %108 = fsub double %101, %107
  store double %108, double* %25, align 8
  %109 = load double, double* %25, align 8
  %110 = fsub double %109, 1.000000e+00
  store double %110, double* %26, align 8
  %111 = load i32, i32* %16, align 4
  %112 = icmp slt i32 %111, 0
  br i1 %112, label %113, label %122

; <label>:113:                                    ; preds = %100
  %114 = load i32, i32* %14, align 4
  %115 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i32 0, i32 %114
  %116 = load i32, i32* %16, align 4
  %insertElmt66 = insertelement <4 x i32> undef, i32 %116, i32 0
  %insertElmt67 = insertelement <4 x i32> %insertElmt66, i32 %116, i32 1
  %insertElmt68 = insertelement <4 x i32> %insertElmt67, i32 %116, i32 2
  %insertElmt69 = insertelement <4 x i32> %insertElmt68, i32 %116, i32 3
  store <4 x i32> %insertElmt69, <4 x i32>* %allocaVec47, align 16
  %117 = load <4 x i32>, <4 x i32>* %allocaVec47, align 16
  %Vop70 = add <4 x i32> <i32 5, i32 5, i32 5, i32 5>, %117
  %118 = add nsw i32 5, %116
  %119 = getelementptr inbounds [5 x i16], [5 x i16]* %115, i32 0, i32 %118
  %120 = load i16, i16* %119, align 2
  %121 = sext i16 %120 to i32
  br label %128

; <label>:122:                                    ; preds = %100
  %123 = load i16*, i16** %11, align 4
  %124 = load i32, i32* %16, align 4
  %125 = getelementptr inbounds i16, i16* %123, i32 %124
  %126 = load i16, i16* %125, align 2
  %127 = sext i16 %126 to i32
  br label %128

; <label>:128:                                    ; preds = %122, %113
  %129 = phi i32 [ %121, %113 ], [ %127, %122 ]
  store i32 %129, i32* %21, align 4
  %130 = load i32, i32* %16, align 4
  %insertElmt71 = insertelement <4 x i32> undef, i32 %130, i32 0
  %insertElmt72 = insertelement <4 x i32> %insertElmt71, i32 %130, i32 1
  %insertElmt73 = insertelement <4 x i32> %insertElmt72, i32 %130, i32 2
  %insertElmt74 = insertelement <4 x i32> %insertElmt73, i32 %130, i32 3
  store <4 x i32> %insertElmt74, <4 x i32>* %allocaVec47, align 16
  %131 = load <4 x i32>, <4 x i32>* %allocaVec47, align 16
  %Vop75 = add <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %131
  %132 = add nsw i32 1, %130
  %133 = icmp slt i32 %132, 0
  br i1 %133, label %134, label %143

; <label>:134:                                    ; preds = %128
  %135 = load i32, i32* %14, align 4
  %136 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i32 0, i32 %135
  %137 = load i32, i32* %16, align 4
  %insertElmt76 = insertelement <4 x i32> undef, i32 %137, i32 0
  %insertElmt77 = insertelement <4 x i32> %insertElmt76, i32 %137, i32 1
  %insertElmt78 = insertelement <4 x i32> %insertElmt77, i32 %137, i32 2
  %insertElmt79 = insertelement <4 x i32> %insertElmt78, i32 %137, i32 3
  store <4 x i32> %insertElmt79, <4 x i32>* %allocaVec47, align 16
  %138 = load <4 x i32>, <4 x i32>* %allocaVec47, align 16
  %Vop80 = add <4 x i32> <i32 6, i32 6, i32 6, i32 6>, %138
  %139 = add nsw i32 6, %137
  %140 = getelementptr inbounds [5 x i16], [5 x i16]* %136, i32 0, i32 %139
  %141 = load i16, i16* %140, align 2
  %142 = sext i16 %141 to i32
  br label %151

; <label>:143:                                    ; preds = %128
  %144 = load i16*, i16** %11, align 4
  %145 = load i32, i32* %16, align 4
  %insertElmt81 = insertelement <4 x i32> undef, i32 %145, i32 0
  %insertElmt82 = insertelement <4 x i32> %insertElmt81, i32 %145, i32 1
  %insertElmt83 = insertelement <4 x i32> %insertElmt82, i32 %145, i32 2
  %insertElmt84 = insertelement <4 x i32> %insertElmt83, i32 %145, i32 3
  store <4 x i32> %insertElmt84, <4 x i32>* %allocaVec47, align 16
  %146 = load <4 x i32>, <4 x i32>* %allocaVec47, align 16
  %Vop85 = add <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %146
  %147 = add nsw i32 1, %145
  %148 = getelementptr inbounds i16, i16* %144, i32 %147
  %149 = load i16, i16* %148, align 2
  %150 = sext i16 %149 to i32
  br label %151

; <label>:151:                                    ; preds = %143, %134
  %152 = phi i32 [ %142, %134 ], [ %150, %143 ]
  store i32 %152, i32* %22, align 4
  %153 = load i32, i32* %18, align 4
  %154 = icmp ne i32 %153, 0
  br i1 %154, label %155, label %177

; <label>:155:                                    ; preds = %151
  %156 = load i32, i32* %22, align 4
  %157 = sitofp i32 %156 to double
  %158 = load double, double* %25, align 8
  %insertElmt86 = insertelement <2 x double> undef, double %158, i32 0
  %insertElmt87 = insertelement <2 x double> %insertElmt86, double %158, i32 1
  store <2 x double> %insertElmt87, <2 x double>* %allocaVec56, align 16
  store double %157, double* %CastInst9
  %159 = load double, double* %CastInst9, align 4
  %insertCast88 = insertelement <2 x double> undef, double %159, i32 0
  %insertCast89 = insertelement <2 x double> %insertCast88, double %159, i32 1
  store <2 x double> %insertCast89, <2 x double>* %CastInstVec10, align 4
  %160 = load <2 x double>, <2 x double>* %CastInstVec10, align 4
  %161 = load <2 x double>, <2 x double>* %allocaVec56, align 16
  %Vop90 = fmul <2 x double> %160, %161
  %162 = fmul double %157, %158
  %163 = load i32, i32* %21, align 4
  %164 = sitofp i32 %163 to double
  %165 = load double, double* %26, align 8
  %insertElmt91 = insertelement <2 x double> undef, double %165, i32 0
  %insertElmt92 = insertelement <2 x double> %insertElmt91, double %165, i32 1
  store <2 x double> %insertElmt92, <2 x double>* %allocaVec57, align 16
  store double %164, double* %CastInst11
  %166 = load double, double* %CastInst11, align 4
  %insertCast93 = insertelement <2 x double> undef, double %166, i32 0
  %insertCast94 = insertelement <2 x double> %insertCast93, double %166, i32 1
  store <2 x double> %insertCast94, <2 x double>* %CastInstVec12, align 4
  %167 = load <2 x double>, <2 x double>* %CastInstVec12, align 4
  %168 = load <2 x double>, <2 x double>* %allocaVec57, align 16
  %Vop95 = fmul <2 x double> %167, %168
  %169 = fmul double %164, %165
  %Vop96 = fsub <2 x double> %Vop90, %Vop95
  %170 = fsub double %162, %169
  %Vop97 = fadd <2 x double> <double 5.000000e-01, double 5.000000e-01>, %Vop96
  %171 = fadd double 5.000000e-01, %170
  %172 = call arm_aapcscc double @floor(double %171) #9
  %173 = fptosi double %172 to i16
  %174 = load i16*, i16** %9, align 4
  %175 = load i32, i32* %17, align 4
  %176 = getelementptr inbounds i16, i16* %174, i32 %175
  store i16 %173, i16* %176, align 2
  br label %317

; <label>:177:                                    ; preds = %151
  %178 = load double, double* %25, align 8
  %insertElmt98 = insertelement <2 x double> undef, double %178, i32 0
  %insertElmt99 = insertelement <2 x double> %insertElmt98, double %178, i32 1
  store <2 x double> %insertElmt99, <2 x double>* %allocaVec56, align 16
  %179 = load <2 x double>, <2 x double>* %allocaVec56, align 16
  %Vop100 = fadd <2 x double> %179, <double 1.000000e+00, double 1.000000e+00>
  store <2 x double> %Vop100, <2 x double>* %allocaVec55
  %180 = fadd double %178, 1.000000e+00
  store double %180, double* %24, align 8
  %181 = load double, double* %25, align 8
  %insertElmt101 = insertelement <2 x double> undef, double %181, i32 0
  %insertElmt102 = insertelement <2 x double> %insertElmt101, double %181, i32 1
  store <2 x double> %insertElmt102, <2 x double>* %allocaVec56, align 16
  %182 = load <2 x double>, <2 x double>* %allocaVec56, align 16
  %Vop103 = fsub <2 x double> %182, <double 2.000000e+00, double 2.000000e+00>
  store <2 x double> %Vop103, <2 x double>* %allocaVec58
  %183 = fsub double %181, 2.000000e+00
  store double %183, double* %27, align 8
  %184 = load i32, i32* %16, align 4
  %insertElmt104 = insertelement <4 x i32> undef, i32 %184, i32 0
  %insertElmt105 = insertelement <4 x i32> %insertElmt104, i32 %184, i32 1
  %insertElmt106 = insertelement <4 x i32> %insertElmt105, i32 %184, i32 2
  %insertElmt107 = insertelement <4 x i32> %insertElmt106, i32 %184, i32 3
  store <4 x i32> %insertElmt107, <4 x i32>* %allocaVec47, align 16
  %185 = load <4 x i32>, <4 x i32>* %allocaVec47, align 16
  %Vop108 = sub <4 x i32> %185, <i32 1, i32 1, i32 1, i32 1>
  %186 = sub nsw i32 %184, 1
  %187 = icmp slt i32 %186, 0
  br i1 %187, label %188, label %198

; <label>:188:                                    ; preds = %177
  %189 = load i32, i32* %14, align 4
  %190 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i32 0, i32 %189
  %191 = load i32, i32* %16, align 4
  %insertElmt109 = insertelement <4 x i32> undef, i32 %191, i32 0
  %insertElmt110 = insertelement <4 x i32> %insertElmt109, i32 %191, i32 1
  %insertElmt111 = insertelement <4 x i32> %insertElmt110, i32 %191, i32 2
  %insertElmt112 = insertelement <4 x i32> %insertElmt111, i32 %191, i32 3
  store <4 x i32> %insertElmt112, <4 x i32>* %allocaVec47, align 16
  %192 = load <4 x i32>, <4 x i32>* %allocaVec47, align 16
  %Vop113 = sub <4 x i32> %192, <i32 1, i32 1, i32 1, i32 1>
  %193 = sub nsw i32 %191, 1
  %Vop114 = add <4 x i32> <i32 5, i32 5, i32 5, i32 5>, %Vop113
  %194 = add nsw i32 5, %193
  %195 = getelementptr inbounds [5 x i16], [5 x i16]* %190, i32 0, i32 %194
  %196 = load i16, i16* %195, align 2
  %197 = sext i16 %196 to i32
  br label %206

; <label>:198:                                    ; preds = %177
  %199 = load i16*, i16** %11, align 4
  %200 = load i32, i32* %16, align 4
  %insertElmt115 = insertelement <4 x i32> undef, i32 %200, i32 0
  %insertElmt116 = insertelement <4 x i32> %insertElmt115, i32 %200, i32 1
  %insertElmt117 = insertelement <4 x i32> %insertElmt116, i32 %200, i32 2
  %insertElmt118 = insertelement <4 x i32> %insertElmt117, i32 %200, i32 3
  store <4 x i32> %insertElmt118, <4 x i32>* %allocaVec47, align 16
  %201 = load <4 x i32>, <4 x i32>* %allocaVec47, align 16
  %Vop119 = sub <4 x i32> %201, <i32 1, i32 1, i32 1, i32 1>
  %202 = sub nsw i32 %200, 1
  %203 = getelementptr inbounds i16, i16* %199, i32 %202
  %204 = load i16, i16* %203, align 2
  %205 = sext i16 %204 to i32
  br label %206

; <label>:206:                                    ; preds = %198, %188
  %207 = phi i32 [ %197, %188 ], [ %205, %198 ]
  store i32 %207, i32* %20, align 4
  %208 = load i32, i32* %16, align 4
  %insertElmt120 = insertelement <4 x i32> undef, i32 %208, i32 0
  %insertElmt121 = insertelement <4 x i32> %insertElmt120, i32 %208, i32 1
  %insertElmt122 = insertelement <4 x i32> %insertElmt121, i32 %208, i32 2
  %insertElmt123 = insertelement <4 x i32> %insertElmt122, i32 %208, i32 3
  store <4 x i32> %insertElmt123, <4 x i32>* %allocaVec47, align 16
  %209 = load <4 x i32>, <4 x i32>* %allocaVec47, align 16
  %Vop124 = add <4 x i32> %209, <i32 2, i32 2, i32 2, i32 2>
  %210 = add nsw i32 %208, 2
  %211 = icmp slt i32 %210, 0
  br i1 %211, label %212, label %222

; <label>:212:                                    ; preds = %206
  %213 = load i32, i32* %14, align 4
  %214 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i32 0, i32 %213
  %215 = load i32, i32* %16, align 4
  %insertElmt125 = insertelement <4 x i32> undef, i32 %215, i32 0
  %insertElmt126 = insertelement <4 x i32> %insertElmt125, i32 %215, i32 1
  %insertElmt127 = insertelement <4 x i32> %insertElmt126, i32 %215, i32 2
  %insertElmt128 = insertelement <4 x i32> %insertElmt127, i32 %215, i32 3
  store <4 x i32> %insertElmt128, <4 x i32>* %allocaVec47, align 16
  %216 = load <4 x i32>, <4 x i32>* %allocaVec47, align 16
  %Vop129 = add <4 x i32> %216, <i32 2, i32 2, i32 2, i32 2>
  %217 = add nsw i32 %215, 2
  %Vop130 = add <4 x i32> <i32 5, i32 5, i32 5, i32 5>, %Vop129
  %218 = add nsw i32 5, %217
  %219 = getelementptr inbounds [5 x i16], [5 x i16]* %214, i32 0, i32 %218
  %220 = load i16, i16* %219, align 2
  %221 = sext i16 %220 to i32
  br label %230

; <label>:222:                                    ; preds = %206
  %223 = load i16*, i16** %11, align 4
  %224 = load i32, i32* %16, align 4
  %insertElmt131 = insertelement <4 x i32> undef, i32 %224, i32 0
  %insertElmt132 = insertelement <4 x i32> %insertElmt131, i32 %224, i32 1
  %insertElmt133 = insertelement <4 x i32> %insertElmt132, i32 %224, i32 2
  %insertElmt134 = insertelement <4 x i32> %insertElmt133, i32 %224, i32 3
  store <4 x i32> %insertElmt134, <4 x i32>* %allocaVec47, align 16
  %225 = load <4 x i32>, <4 x i32>* %allocaVec47, align 16
  %Vop135 = add <4 x i32> %225, <i32 2, i32 2, i32 2, i32 2>
  %226 = add nsw i32 %224, 2
  %227 = getelementptr inbounds i16, i16* %223, i32 %226
  %228 = load i16, i16* %227, align 2
  %229 = sext i16 %228 to i32
  br label %230

; <label>:230:                                    ; preds = %222, %212
  %231 = phi i32 [ %221, %212 ], [ %229, %222 ]
  store i32 %231, i32* %23, align 4
  %232 = load i32, i32* %20, align 4
  %insertElmt136 = insertelement <4 x i32> undef, i32 %232, i32 0
  %insertElmt137 = insertelement <4 x i32> %insertElmt136, i32 %232, i32 1
  %insertElmt138 = insertelement <4 x i32> %insertElmt137, i32 %232, i32 2
  %insertElmt139 = insertelement <4 x i32> %insertElmt138, i32 %232, i32 3
  store <4 x i32> %insertElmt139, <4 x i32>* %allocaVec51, align 16
  %233 = load <4 x i32>, <4 x i32>* %allocaVec51, align 16
  %Vop140 = sub <4 x i32> zeroinitializer, %233
  %234 = sub nsw i32 0, %232
  %235 = sitofp i32 %234 to double
  %236 = load double, double* %25, align 8
  %insertElmt141 = insertelement <2 x double> undef, double %236, i32 0
  %insertElmt142 = insertelement <2 x double> %insertElmt141, double %236, i32 1
  store <2 x double> %insertElmt142, <2 x double>* %allocaVec56, align 16
  store double %235, double* %CastInst13
  %237 = load double, double* %CastInst13, align 4
  %insertCast143 = insertelement <2 x double> undef, double %237, i32 0
  %insertCast144 = insertelement <2 x double> %insertCast143, double %237, i32 1
  store <2 x double> %insertCast144, <2 x double>* %CastInstVec14, align 4
  %238 = load <2 x double>, <2 x double>* %CastInstVec14, align 4
  %239 = load <2 x double>, <2 x double>* %allocaVec56, align 16
  %Vop145 = fmul <2 x double> %238, %239
  %240 = fmul double %235, %236
  %241 = load double, double* %26, align 8
  %insertElmt146 = insertelement <2 x double> undef, double %241, i32 0
  %insertElmt147 = insertelement <2 x double> %insertElmt146, double %241, i32 1
  store <2 x double> %insertElmt147, <2 x double>* %allocaVec57, align 16
  %242 = load <2 x double>, <2 x double>* %allocaVec57, align 16
  %Vop148 = fmul <2 x double> %Vop145, %242
  %243 = fmul double %240, %241
  %244 = load double, double* %27, align 8
  %245 = load <2 x double>, <2 x double>* %allocaVec58, align 16
  %Vop149 = fmul <2 x double> %Vop148, %245
  %246 = fmul double %243, %244
  %Vop150 = fdiv <2 x double> %Vop149, <double 6.000000e+00, double 6.000000e+00>
  %247 = fdiv double %246, 6.000000e+00
  %Vop151 = fadd <2 x double> <double 5.000000e-01, double 5.000000e-01>, %Vop150
  %248 = fadd double 5.000000e-01, %247
  %249 = load i32, i32* %21, align 4
  %250 = sitofp i32 %249 to double
  %251 = load double, double* %24, align 8
  store double %250, double* %CastInst15
  %252 = load double, double* %CastInst15, align 4
  %insertCast152 = insertelement <2 x double> undef, double %252, i32 0
  %insertCast153 = insertelement <2 x double> %insertCast152, double %252, i32 1
  store <2 x double> %insertCast153, <2 x double>* %CastInstVec16, align 4
  %253 = load <2 x double>, <2 x double>* %CastInstVec16, align 4
  %254 = load <2 x double>, <2 x double>* %allocaVec55, align 16
  %Vop154 = fmul <2 x double> %253, %254
  %255 = fmul double %250, %251
  %256 = load double, double* %26, align 8
  %insertElmt155 = insertelement <2 x double> undef, double %256, i32 0
  %insertElmt156 = insertelement <2 x double> %insertElmt155, double %256, i32 1
  store <2 x double> %insertElmt156, <2 x double>* %allocaVec57, align 16
  %257 = load <2 x double>, <2 x double>* %allocaVec57, align 16
  %Vop157 = fmul <2 x double> %Vop154, %257
  %258 = fmul double %255, %256
  %259 = load double, double* %27, align 8
  %260 = load <2 x double>, <2 x double>* %allocaVec58, align 16
  %Vop158 = fmul <2 x double> %Vop157, %260
  %261 = fmul double %258, %259
  %Vop159 = fdiv <2 x double> %Vop158, <double 2.000000e+00, double 2.000000e+00>
  %262 = fdiv double %261, 2.000000e+00
  %Vop160 = fadd <2 x double> %Vop151, %Vop159
  %263 = fadd double %248, %262
  %264 = load i32, i32* %22, align 4
  %265 = sitofp i32 %264 to double
  %266 = load double, double* %24, align 8
  store double %265, double* %CastInst17
  %267 = load double, double* %CastInst17, align 4
  %insertCast161 = insertelement <2 x double> undef, double %267, i32 0
  %insertCast162 = insertelement <2 x double> %insertCast161, double %267, i32 1
  store <2 x double> %insertCast162, <2 x double>* %CastInstVec18, align 4
  %268 = load <2 x double>, <2 x double>* %CastInstVec18, align 4
  %269 = load <2 x double>, <2 x double>* %allocaVec55, align 16
  %Vop163 = fmul <2 x double> %268, %269
  %270 = fmul double %265, %266
  %271 = load double, double* %25, align 8
  %insertElmt164 = insertelement <2 x double> undef, double %271, i32 0
  %insertElmt165 = insertelement <2 x double> %insertElmt164, double %271, i32 1
  store <2 x double> %insertElmt165, <2 x double>* %allocaVec56, align 16
  %272 = load <2 x double>, <2 x double>* %allocaVec56, align 16
  %Vop166 = fmul <2 x double> %Vop163, %272
  %273 = fmul double %270, %271
  %274 = load double, double* %27, align 8
  %275 = load <2 x double>, <2 x double>* %allocaVec58, align 16
  %Vop167 = fmul <2 x double> %Vop166, %275
  %276 = fmul double %273, %274
  %Vop168 = fdiv <2 x double> %Vop167, <double 2.000000e+00, double 2.000000e+00>
  %277 = fdiv double %276, 2.000000e+00
  %Vop169 = fsub <2 x double> %Vop160, %Vop168
  %278 = fsub double %263, %277
  %279 = load i32, i32* %23, align 4
  %280 = sitofp i32 %279 to double
  %281 = load double, double* %24, align 8
  store double %280, double* %CastInst19
  %282 = load double, double* %CastInst19, align 4
  %insertCast170 = insertelement <2 x double> undef, double %282, i32 0
  %insertCast171 = insertelement <2 x double> %insertCast170, double %282, i32 1
  store <2 x double> %insertCast171, <2 x double>* %CastInstVec20, align 4
  %283 = load <2 x double>, <2 x double>* %CastInstVec20, align 4
  %284 = load <2 x double>, <2 x double>* %allocaVec55, align 16
  %Vop172 = fmul <2 x double> %283, %284
  %285 = fmul double %280, %281
  %286 = load double, double* %25, align 8
  %insertElmt173 = insertelement <2 x double> undef, double %286, i32 0
  %insertElmt174 = insertelement <2 x double> %insertElmt173, double %286, i32 1
  store <2 x double> %insertElmt174, <2 x double>* %allocaVec56, align 16
  %287 = load <2 x double>, <2 x double>* %allocaVec56, align 16
  %Vop175 = fmul <2 x double> %Vop172, %287
  %288 = fmul double %285, %286
  %289 = load double, double* %26, align 8
  %insertElmt176 = insertelement <2 x double> undef, double %289, i32 0
  %insertElmt177 = insertelement <2 x double> %insertElmt176, double %289, i32 1
  store <2 x double> %insertElmt177, <2 x double>* %allocaVec57, align 16
  %290 = load <2 x double>, <2 x double>* %allocaVec57, align 16
  %Vop178 = fmul <2 x double> %Vop175, %290
  %291 = fmul double %288, %289
  %Vop179 = fdiv <2 x double> %Vop178, <double 6.000000e+00, double 6.000000e+00>
  %292 = fdiv double %291, 6.000000e+00
  %Vop180 = fadd <2 x double> %Vop169, %Vop179
  %293 = fadd double %278, %292
  %294 = call arm_aapcscc double @floor(double %293) #9
  %295 = fptosi double %294 to i32
  store i32 %295, i32* %19, align 4
  %296 = load i32, i32* %19, align 4
  %297 = icmp sgt i32 %296, 32767
  br i1 %297, label %298, label %302

; <label>:298:                                    ; preds = %230
  %299 = load i16*, i16** %9, align 4
  %300 = load i32, i32* %17, align 4
  %301 = getelementptr inbounds i16, i16* %299, i32 %300
  store i16 32767, i16* %301, align 2
  br label %316

; <label>:302:                                    ; preds = %230
  %303 = load i32, i32* %19, align 4
  %304 = icmp slt i32 %303, -32767
  br i1 %304, label %305, label %309

; <label>:305:                                    ; preds = %302
  %306 = load i16*, i16** %9, align 4
  %307 = load i32, i32* %17, align 4
  %308 = getelementptr inbounds i16, i16* %306, i32 %307
  store i16 -32767, i16* %308, align 2
  br label %315

; <label>:309:                                    ; preds = %302
  %310 = load i32, i32* %19, align 4
  %311 = trunc i32 %310 to i16
  %312 = load i16*, i16** %9, align 4
  %313 = load i32, i32* %17, align 4
  %314 = getelementptr inbounds i16, i16* %312, i32 %313
  store i16 %311, i16* %314, align 2
  br label %315

; <label>:315:                                    ; preds = %309, %305
  br label %316

; <label>:316:                                    ; preds = %315, %298
  br label %317

; <label>:317:                                    ; preds = %316, %155
  br label %318

; <label>:318:                                    ; preds = %317
  %319 = load i32, i32* %17, align 4
  %insertElmt181 = insertelement <4 x i32> undef, i32 %319, i32 0
  %insertElmt182 = insertelement <4 x i32> %insertElmt181, i32 %319, i32 1
  %insertElmt183 = insertelement <4 x i32> %insertElmt182, i32 %319, i32 2
  %insertElmt184 = insertelement <4 x i32> %insertElmt183, i32 %319, i32 3
  store <4 x i32> %insertElmt184, <4 x i32>* %allocaVec48, align 16
  %320 = load <4 x i32>, <4 x i32>* %allocaVec48, align 16
  %Vop185 = add <4 x i32> %320, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop185, <4 x i32>* %allocaVec48
  %321 = load <4 x i32>, <4 x i32>* %allocaVec48, align 4
  %extractE = extractelement <4 x i32> %321, i64 0
  %extractE186 = extractelement <4 x i32> %321, i64 1
  %extractE187 = extractelement <4 x i32> %321, i64 2
  %sum = add i32 %extractE, %extractE186
  %sum188 = add i32 %sum, %extractE187
  %322 = add nsw i32 %319, 1
  %Fmul = mul i32 %322, 3
  store i32 %322, i32* %Recovery
  %Fcmp = icmp ne i32 %sum188, %Fmul
  br i1 %Fcmp, label %323, label %327

; <label>:323:                                    ; preds = %318
  %remThree = sdiv i32 %sum188, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %324, label %325

; <label>:324:                                    ; preds = %323
  store i32 %322, i32* %Recovery, align 4
  br label %326

; <label>:325:                                    ; preds = %323
  store i32 %extractE, i32* %Recovery, align 4
  br label %326

; <label>:326:                                    ; preds = %325, %324
  br label %327

; <label>:327:                                    ; preds = %318, %326
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %17, align 4
  br label %76

; <label>:328:                                    ; preds = %99, %76
  %329 = load i32, i32* %12, align 4
  %330 = load i32, i32* %16, align 4
  %insertElmt189 = insertelement <4 x i32> undef, i32 %330, i32 0
  %insertElmt190 = insertelement <4 x i32> %insertElmt189, i32 %330, i32 1
  %insertElmt191 = insertelement <4 x i32> %insertElmt190, i32 %330, i32 2
  %insertElmt192 = insertelement <4 x i32> %insertElmt191, i32 %330, i32 3
  store <4 x i32> %insertElmt192, <4 x i32>* %allocaVec47, align 16
  %331 = load <4 x i32>, <4 x i32>* %allocaVec47, align 16
  %Vop193 = add <4 x i32> %331, <i32 2, i32 2, i32 2, i32 2>
  %332 = add nsw i32 %330, 2
  %333 = icmp slt i32 %329, %332
  br i1 %333, label %334, label %336

; <label>:334:                                    ; preds = %328
  %335 = load i32, i32* %12, align 4
  br label %340

; <label>:336:                                    ; preds = %328
  %337 = load i32, i32* %16, align 4
  %insertElmt194 = insertelement <4 x i32> undef, i32 %337, i32 0
  %insertElmt195 = insertelement <4 x i32> %insertElmt194, i32 %337, i32 1
  %insertElmt196 = insertelement <4 x i32> %insertElmt195, i32 %337, i32 2
  %insertElmt197 = insertelement <4 x i32> %insertElmt196, i32 %337, i32 3
  store <4 x i32> %insertElmt197, <4 x i32>* %allocaVec47, align 16
  %338 = load <4 x i32>, <4 x i32>* %allocaVec47, align 16
  %Vop198 = add <4 x i32> %338, <i32 2, i32 2, i32 2, i32 2>
  %339 = add nsw i32 %337, 2
  br label %340

; <label>:340:                                    ; preds = %336, %334
  %341 = phi i32 [ %335, %334 ], [ %339, %336 ]
  %342 = load i32*, i32** %13, align 4
  store i32 %341, i32* %342, align 4
  %343 = load i32*, i32** %13, align 4
  %344 = load i32, i32* %343, align 4
  %345 = sitofp i32 %344 to float
  %346 = load i32, i32* %17, align 4
  %347 = sitofp i32 %346 to float
  %348 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %349 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %348, i32 0, i32 49
  %350 = load float, float* %349, align 4
  %351 = fmul float %347, %350
  %352 = fsub float %345, %351
  %353 = fpext float %352 to double
  %354 = load i32, i32* %14, align 4
  %355 = getelementptr inbounds [2 x double], [2 x double]* @fill_buffer_resample.itime, i32 0, i32 %354
  %356 = load double, double* %355, align 8
  %357 = fadd double %356, %353
  store double %357, double* %355, align 8
  store i32 0, i32* %15, align 4
  br label %358

; <label>:358:                                    ; preds = %383, %340
  %359 = load i32, i32* %15, align 4
  %360 = icmp slt i32 %359, 5
  br i1 %360, label %361, label %384

; <label>:361:                                    ; preds = %358
  %362 = load i16*, i16** %11, align 4
  %363 = load i32*, i32** %13, align 4
  %364 = load i32, i32* %363, align 4
  %365 = load i32, i32* %15, align 4
  %366 = add nsw i32 %364, %365
  %367 = sub nsw i32 %366, 5
  %368 = getelementptr inbounds i16, i16* %362, i32 %367
  %369 = load i16, i16* %368, align 2
  %370 = load i32, i32* %14, align 4
  %371 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i32 0, i32 %370
  %372 = load i32, i32* %15, align 4
  %373 = getelementptr inbounds [5 x i16], [5 x i16]* %371, i32 0, i32 %372
  store i16 %369, i16* %373, align 2
  br label %374

; <label>:374:                                    ; preds = %361
  %375 = load i32, i32* %15, align 4
  %insertElmt199 = insertelement <4 x i32> undef, i32 %375, i32 0
  %insertElmt200 = insertelement <4 x i32> %insertElmt199, i32 %375, i32 1
  %insertElmt201 = insertelement <4 x i32> %insertElmt200, i32 %375, i32 2
  %insertElmt202 = insertelement <4 x i32> %insertElmt201, i32 %375, i32 3
  store <4 x i32> %insertElmt202, <4 x i32>* %allocaVec46, align 16
  %376 = load <4 x i32>, <4 x i32>* %allocaVec46, align 16
  %Vop203 = add <4 x i32> %376, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop203, <4 x i32>* %allocaVec46
  %377 = load <4 x i32>, <4 x i32>* %allocaVec46, align 4
  %extractE205 = extractelement <4 x i32> %377, i64 0
  %extractE206 = extractelement <4 x i32> %377, i64 1
  %extractE207 = extractelement <4 x i32> %377, i64 2
  %sum208 = add i32 %extractE205, %extractE206
  %sum209 = add i32 %sum208, %extractE207
  %378 = add nsw i32 %375, 1
  %Fmul204 = mul i32 %378, 3
  store i32 %378, i32* %Recovery2
  %Fcmp210 = icmp ne i32 %sum209, %Fmul204
  br i1 %Fcmp210, label %379, label %383

; <label>:379:                                    ; preds = %374
  %remThree211 = sdiv i32 %sum209, %extractE205
  %FcmpThree212 = icmp ne i32 %remThree211, 3
  br i1 %FcmpThree212, label %380, label %381

; <label>:380:                                    ; preds = %379
  store i32 %378, i32* %Recovery2, align 4
  br label %382

; <label>:381:                                    ; preds = %379
  store i32 %extractE205, i32* %Recovery2, align 4
  br label %382

; <label>:382:                                    ; preds = %381, %380
  br label %383

; <label>:383:                                    ; preds = %374, %382
  %ReplaceInst213 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst213, i32* %15, align 4
  br label %358

; <label>:384:                                    ; preds = %358
  %385 = load i32, i32* %17, align 4
  ret i32 %385
}

; Function Attrs: nounwind
define arm_aapcscc i32 @fill_buffer(%struct.lame_global_flags*, i16*, i32, i16*, i32) #0 {
  %6 = alloca %struct.lame_global_flags*, align 4
  %7 = alloca i16*, align 4
  %allocaVec = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %9 = alloca i16*, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %6, align 4
  store i16* %1, i16** %7, align 4
  store i32 %2, i32* %8, align 4
  store i16* %3, i16** %9, align 4
  store i32 %4, i32* %10, align 4
  %12 = load i32, i32* %8, align 4
  %13 = load i32, i32* %10, align 4
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %5
  %16 = load i32, i32* %8, align 4
  br label %19

; <label>:17:                                     ; preds = %5
  %18 = load i32, i32* %10, align 4
  br label %19

; <label>:19:                                     ; preds = %17, %15
  %20 = phi i32 [ %16, %15 ], [ %18, %17 ]
  store i32 %20, i32* %11, align 4
  %21 = load i16*, i16** %7, align 4
  %22 = bitcast i16* %21 to i8*
  %23 = load i16*, i16** %9, align 4
  %24 = bitcast i16* %23 to i8*
  %25 = load i32, i32* %11, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %25, i32 0
  %insertElmt3 = insertelement <4 x i32> %insertElmt, i32 %25, i32 1
  %insertElmt4 = insertelement <4 x i32> %insertElmt3, i32 %25, i32 2
  %insertElmt5 = insertelement <4 x i32> %insertElmt4, i32 %25, i32 3
  store <4 x i32> %insertElmt5, <4 x i32>* %allocaVec2, align 16
  %26 = load <4 x i32>, <4 x i32>* %allocaVec2, align 16
  %Vop = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %26
  %27 = mul i32 2, %25
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %22, i8* %24, i32 %27, i32 1, i1 false)
  %28 = load i32, i32* %11, align 4
  ret i32 %28
}

; Function Attrs: nounwind
define arm_aapcscc i32 @lame_encode_buffer(%struct.lame_global_flags*, i16*, i16*, i32, i8*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec12 = alloca <4 x i32>, align 16
  %CastInst5 = alloca i32, align 4
  %CastInstVec6 = alloca <4 x i32>, align 16
  %allocaVec13 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %8 = alloca %struct.lame_global_flags*, align 4
  %9 = alloca i16*, align 4
  %10 = alloca i16*, align 4
  %allocaVec14 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %allocaVec18 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %allocaVec19 = alloca <4 x i32>, align 16
  %17 = alloca i32, align 4
  %allocaVec20 = alloca <4 x i32>, align 16
  %18 = alloca i32, align 4
  %19 = alloca [2 x i16*], align 4
  %allocaVec21 = alloca <4 x i32>, align 16
  %20 = alloca i32, align 4
  %allocaVec22 = alloca <4 x i32>, align 16
  %21 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %8, align 4
  store i16* %1, i16** %9, align 4
  store i16* %2, i16** %10, align 4
  store i32 %3, i32* %11, align 4
  store i8* %4, i8** %12, align 4
  store i32 %5, i32* %13, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %14, align 4
  %22 = load i16*, i16** %9, align 4
  %23 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 0
  store i16* %22, i16** %23, align 4
  %24 = load i16*, i16** %10, align 4
  %25 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 1
  store i16* %24, i16** %25, align 4
  %26 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %27 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %26, i32 0, i32 42
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 1024, %28
  %30 = sub nsw i32 %29, 272
  store i32 %30, i32* %18, align 4
  %31 = load i32, i32* %18, align 4
  %32 = icmp sge i32 3056, %31
  br i1 %32, label %34, label %33

; <label>:33:                                     ; preds = %6
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.19.192, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.190, i32 0, i32 0), i32 995, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.lame_encode_buffer, i32 0, i32 0))
  br label %34

; <label>:34:                                     ; preds = %33, %6
  %35 = phi i1 [ true, %6 ], [ false, %33 ]
  %36 = zext i1 %35 to i32
  %37 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %38 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %37, i32 0, i32 39
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %45

; <label>:41:                                     ; preds = %34
  %42 = load i32, i32* @lame_encode_buffer.frame_buffered, align 4
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %45, label %44

; <label>:44:                                     ; preds = %41
  call void @llvm.memset.p0i8.i32(i8* bitcast ([2 x [3056 x i16]]* @mfbuf to i8*), i8 0, i32 12224, i32 2, i1 false)
  store i32 1, i32* @lame_encode_buffer.frame_buffered, align 4
  store i32 1088, i32* @mf_samples_to_encode, align 4
  store i32 752, i32* @mf_size, align 4
  br label %45

; <label>:45:                                     ; preds = %44, %41, %34
  %46 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %47 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %46, i32 0, i32 39
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 1
  br i1 %49, label %50, label %51

; <label>:50:                                     ; preds = %45
  store i32 0, i32* @lame_encode_buffer.frame_buffered, align 4
  br label %51

; <label>:51:                                     ; preds = %50, %45
  %52 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %53 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %52, i32 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 2
  br i1 %55, label %56, label %99

; <label>:56:                                     ; preds = %51
  %57 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %58 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %57, i32 0, i32 46
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 1
  br i1 %60, label %61, label %99

; <label>:61:                                     ; preds = %56
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec18
  store i32 0, i32* %16, align 4
  br label %62

; <label>:62:                                     ; preds = %94, %61
  %63 = load i32, i32* %16, align 4
  %64 = load i32, i32* %11, align 4
  %65 = icmp slt i32 %63, %64
  br i1 %65, label %66, label %98

; <label>:66:                                     ; preds = %62
  %67 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 0
  %68 = load i16*, i16** %67, align 4
  %69 = load i32, i32* %16, align 4
  %70 = getelementptr inbounds i16, i16* %68, i32 %69
  %71 = load i16, i16* %70, align 2
  %72 = sext i16 %71 to i32
  %73 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 1
  %74 = load i16*, i16** %73, align 4
  %75 = load i32, i32* %16, align 4
  %76 = getelementptr inbounds i16, i16* %74, i32 %75
  %77 = load i16, i16* %76, align 2
  %78 = sext i16 %77 to i32
  store i32 %72, i32* %CastInst
  %79 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %79, i32 0
  %insertCast23 = insertelement <4 x i32> %insertCast, i32 %79, i32 1
  %insertCast24 = insertelement <4 x i32> %insertCast23, i32 %79, i32 2
  %insertCast25 = insertelement <4 x i32> %insertCast24, i32 %79, i32 3
  store <4 x i32> %insertCast25, <4 x i32>* %CastInstVec, align 4
  %80 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  store i32 %78, i32* %CastInst5
  %81 = load i32, i32* %CastInst5, align 4
  %insertCast26 = insertelement <4 x i32> undef, i32 %81, i32 0
  %insertCast27 = insertelement <4 x i32> %insertCast26, i32 %81, i32 1
  %insertCast28 = insertelement <4 x i32> %insertCast27, i32 %81, i32 2
  %insertCast29 = insertelement <4 x i32> %insertCast28, i32 %81, i32 3
  store <4 x i32> %insertCast29, <4 x i32>* %CastInstVec6, align 4
  %82 = load <4 x i32>, <4 x i32>* %CastInstVec6, align 4
  %Vop = add <4 x i32> %80, %82
  %83 = add nsw i32 %72, %78
  %Vop30 = sdiv <4 x i32> %Vop, <i32 2, i32 2, i32 2, i32 2>
  %84 = sdiv i32 %83, 2
  %85 = trunc i32 %84 to i16
  %86 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 0
  %87 = load i16*, i16** %86, align 4
  %88 = load i32, i32* %16, align 4
  %89 = getelementptr inbounds i16, i16* %87, i32 %88
  store i16 %85, i16* %89, align 2
  %90 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 1
  %91 = load i16*, i16** %90, align 4
  %92 = load i32, i32* %16, align 4
  %93 = getelementptr inbounds i16, i16* %91, i32 %92
  store i16 0, i16* %93, align 2
  br label %94

; <label>:94:                                     ; preds = %66
  %95 = load i32, i32* %16, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %95, i32 0
  %insertElmt31 = insertelement <4 x i32> %insertElmt, i32 %95, i32 1
  %insertElmt32 = insertelement <4 x i32> %insertElmt31, i32 %95, i32 2
  %insertElmt33 = insertelement <4 x i32> %insertElmt32, i32 %95, i32 3
  store <4 x i32> %insertElmt33, <4 x i32>* %allocaVec18, align 16
  %96 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop34 = add <4 x i32> %96, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop34, <4 x i32>* %allocaVec18
  %97 = add nsw i32 %95, 1
  store i32 %97, i32* %16, align 4
  br label %62

; <label>:98:                                     ; preds = %62
  br label %99

; <label>:99:                                     ; preds = %98, %56, %51
  br label %100

; <label>:100:                                    ; preds = %263, %99
  %101 = load i32, i32* %11, align 4
  %102 = icmp sgt i32 %101, 0
  br i1 %102, label %103, label %264

; <label>:103:                                    ; preds = %100
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec21
  store i32 0, i32* %20, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec22
  store i32 0, i32* %21, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec19
  store i32 0, i32* %17, align 4
  br label %104

; <label>:104:                                    ; preds = %151, %103
  %105 = load i32, i32* %17, align 4
  %106 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %107 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %106, i32 0, i32 46
  %108 = load i32, i32* %107, align 4
  %109 = icmp slt i32 %105, %108
  br i1 %109, label %110, label %155

; <label>:110:                                    ; preds = %104
  %111 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %112 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %111, i32 0, i32 49
  %113 = load float, float* %112, align 4
  %114 = fcmp une float %113, 1.000000e+00
  br i1 %114, label %115, label %130

; <label>:115:                                    ; preds = %110
  %116 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %117 = load i32, i32* %17, align 4
  %118 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 %117
  %119 = load i32, i32* @mf_size, align 4
  %120 = getelementptr inbounds [3056 x i16], [3056 x i16]* %118, i32 0, i32 %119
  %121 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %122 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %121, i32 0, i32 42
  %123 = load i32, i32* %122, align 4
  %124 = load i32, i32* %17, align 4
  %125 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 %124
  %126 = load i16*, i16** %125, align 4
  %127 = load i32, i32* %11, align 4
  %128 = load i32, i32* %17, align 4
  %129 = call arm_aapcscc i32 @fill_buffer_resample(%struct.lame_global_flags* %116, i16* %120, i32 %123, i16* %126, i32 %127, i32* %20, i32 %128)
  store i32 %129, i32* %21, align 4
  br label %145

; <label>:130:                                    ; preds = %110
  %131 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %132 = load i32, i32* %17, align 4
  %133 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 %132
  %134 = load i32, i32* @mf_size, align 4
  %135 = getelementptr inbounds [3056 x i16], [3056 x i16]* %133, i32 0, i32 %134
  %136 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %137 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %136, i32 0, i32 42
  %138 = load i32, i32* %137, align 4
  %139 = load i32, i32* %17, align 4
  %140 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 %139
  %141 = load i16*, i16** %140, align 4
  %142 = load i32, i32* %11, align 4
  %143 = call arm_aapcscc i32 @fill_buffer(%struct.lame_global_flags* %131, i16* %135, i32 %138, i16* %141, i32 %142)
  store i32 %143, i32* %21, align 4
  %144 = load i32, i32* %21, align 4
  store i32 %144, i32* %20, align 4
  br label %145

; <label>:145:                                    ; preds = %130, %115
  %146 = load i32, i32* %20, align 4
  %147 = load i32, i32* %17, align 4
  %148 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 %147
  %149 = load i16*, i16** %148, align 4
  %150 = getelementptr inbounds i16, i16* %149, i32 %146
  store i16* %150, i16** %148, align 4
  br label %151

; <label>:151:                                    ; preds = %145
  %152 = load i32, i32* %17, align 4
  %insertElmt35 = insertelement <4 x i32> undef, i32 %152, i32 0
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %152, i32 1
  %insertElmt37 = insertelement <4 x i32> %insertElmt36, i32 %152, i32 2
  %insertElmt38 = insertelement <4 x i32> %insertElmt37, i32 %152, i32 3
  store <4 x i32> %insertElmt38, <4 x i32>* %allocaVec19, align 16
  %153 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop39 = add <4 x i32> %153, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop39, <4 x i32>* %allocaVec19
  %154 = add nsw i32 %152, 1
  store i32 %154, i32* %17, align 4
  br label %104

; <label>:155:                                    ; preds = %104
  %156 = load i32, i32* %20, align 4
  %insertElmt40 = insertelement <4 x i32> undef, i32 %156, i32 0
  %insertElmt41 = insertelement <4 x i32> %insertElmt40, i32 %156, i32 1
  %insertElmt42 = insertelement <4 x i32> %insertElmt41, i32 %156, i32 2
  %insertElmt43 = insertelement <4 x i32> %insertElmt42, i32 %156, i32 3
  store <4 x i32> %insertElmt43, <4 x i32>* %allocaVec21, align 16
  %157 = load i32, i32* %11, align 4
  %insertElmt44 = insertelement <4 x i32> undef, i32 %157, i32 0
  %insertElmt45 = insertelement <4 x i32> %insertElmt44, i32 %157, i32 1
  %insertElmt46 = insertelement <4 x i32> %insertElmt45, i32 %157, i32 2
  %insertElmt47 = insertelement <4 x i32> %insertElmt46, i32 %157, i32 3
  store <4 x i32> %insertElmt47, <4 x i32>* %allocaVec14, align 16
  %158 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %159 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop48 = sub <4 x i32> %158, %159
  store <4 x i32> %Vop48, <4 x i32>* %allocaVec14
  %160 = load <4 x i32>, <4 x i32>* %allocaVec14, align 4
  %extractE = extractelement <4 x i32> %160, i64 0
  %extractE49 = extractelement <4 x i32> %160, i64 1
  %extractE50 = extractelement <4 x i32> %160, i64 2
  %sum = add i32 %extractE, %extractE49
  %sum51 = add i32 %sum, %extractE50
  %161 = sub nsw i32 %157, %156
  %Fmul = mul i32 %161, 3
  store i32 %161, i32* %Recovery1
  %Fcmp = icmp ne i32 %sum51, %Fmul
  br i1 %Fcmp, label %162, label %166

; <label>:162:                                    ; preds = %155
  %remThree = sdiv i32 %sum51, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %163, label %164

; <label>:163:                                    ; preds = %162
  store i32 %161, i32* %Recovery1, align 4
  br label %165

; <label>:164:                                    ; preds = %162
  store i32 %extractE, i32* %Recovery1, align 4
  br label %165

; <label>:165:                                    ; preds = %164, %163
  br label %166

; <label>:166:                                    ; preds = %155, %165
  %ReplaceInst = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst, i32* %11, align 4
  %167 = load i32, i32* %21, align 4
  %insertElmt52 = insertelement <4 x i32> undef, i32 %167, i32 0
  %insertElmt53 = insertelement <4 x i32> %insertElmt52, i32 %167, i32 1
  %insertElmt54 = insertelement <4 x i32> %insertElmt53, i32 %167, i32 2
  %insertElmt55 = insertelement <4 x i32> %insertElmt54, i32 %167, i32 3
  store <4 x i32> %insertElmt55, <4 x i32>* %allocaVec22, align 16
  %168 = load i32, i32* @mf_size, align 4
  %169 = add nsw i32 %168, %167
  store i32 %169, i32* @mf_size, align 4
  %170 = load i32, i32* @mf_size, align 4
  %171 = icmp sle i32 %170, 3056
  br i1 %171, label %173, label %172

; <label>:172:                                    ; preds = %166
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20.193, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.190, i32 0, i32 0), i32 1045, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.lame_encode_buffer, i32 0, i32 0))
  br label %173

; <label>:173:                                    ; preds = %172, %166
  %174 = phi i1 [ true, %166 ], [ false, %172 ]
  %175 = zext i1 %174 to i32
  %176 = load i32, i32* %21, align 4
  %insertElmt56 = insertelement <4 x i32> undef, i32 %176, i32 0
  %insertElmt57 = insertelement <4 x i32> %insertElmt56, i32 %176, i32 1
  %insertElmt58 = insertelement <4 x i32> %insertElmt57, i32 %176, i32 2
  %insertElmt59 = insertelement <4 x i32> %insertElmt58, i32 %176, i32 3
  store <4 x i32> %insertElmt59, <4 x i32>* %allocaVec22, align 16
  %177 = load i32, i32* @mf_samples_to_encode, align 4
  %178 = add nsw i32 %177, %176
  store i32 %178, i32* @mf_samples_to_encode, align 4
  %179 = load i32, i32* @mf_size, align 4
  %180 = load i32, i32* %18, align 4
  %181 = icmp sge i32 %179, %180
  br i1 %181, label %182, label %263

; <label>:182:                                    ; preds = %173
  %183 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %184 = load i32, i32* @mf_size, align 4
  %185 = load i8*, i8** %12, align 4
  %186 = load i32, i32* %13, align 4
  %187 = call arm_aapcscc i32 @lame_encode_frame(%struct.lame_global_flags* %183, i16* getelementptr inbounds ([2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 0, i32 0), i16* getelementptr inbounds ([2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 1, i32 0), i32 %184, i8* %185, i32 %186)
  store i32 %187, i32* %15, align 4
  %188 = load i32, i32* %15, align 4
  %189 = icmp eq i32 %188, -1
  br i1 %189, label %190, label %191

; <label>:190:                                    ; preds = %182
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec13
  store i32 -1, i32* %7, align 4
  br label %272

; <label>:191:                                    ; preds = %182
  %192 = load i32, i32* %15, align 4
  %193 = load i8*, i8** %12, align 4
  %194 = getelementptr inbounds i8, i8* %193, i32 %192
  store i8* %194, i8** %12, align 4
  %195 = load i32, i32* %15, align 4
  %insertElmt60 = insertelement <4 x i32> undef, i32 %195, i32 0
  %insertElmt61 = insertelement <4 x i32> %insertElmt60, i32 %195, i32 1
  %insertElmt62 = insertelement <4 x i32> %insertElmt61, i32 %195, i32 2
  %insertElmt63 = insertelement <4 x i32> %insertElmt62, i32 %195, i32 3
  store <4 x i32> %insertElmt63, <4 x i32>* %allocaVec17, align 16
  %196 = load i32, i32* %14, align 4
  %insertElmt64 = insertelement <4 x i32> undef, i32 %196, i32 0
  %insertElmt65 = insertelement <4 x i32> %insertElmt64, i32 %196, i32 1
  %insertElmt66 = insertelement <4 x i32> %insertElmt65, i32 %196, i32 2
  %insertElmt67 = insertelement <4 x i32> %insertElmt66, i32 %196, i32 3
  store <4 x i32> %insertElmt67, <4 x i32>* %allocaVec16, align 16
  %197 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %198 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop68 = add <4 x i32> %197, %198
  store <4 x i32> %Vop68, <4 x i32>* %allocaVec16
  %199 = load <4 x i32>, <4 x i32>* %allocaVec16, align 4
  %extractE70 = extractelement <4 x i32> %199, i64 0
  %extractE71 = extractelement <4 x i32> %199, i64 1
  %extractE72 = extractelement <4 x i32> %199, i64 2
  %sum73 = add i32 %extractE70, %extractE71
  %sum74 = add i32 %sum73, %extractE72
  %200 = add nsw i32 %196, %195
  %Fmul69 = mul i32 %200, 3
  store i32 %200, i32* %Recovery2
  %Fcmp75 = icmp ne i32 %sum74, %Fmul69
  br i1 %Fcmp75, label %201, label %205

; <label>:201:                                    ; preds = %191
  %remThree92 = sdiv i32 %sum74, %extractE70
  %FcmpThree93 = icmp ne i32 %remThree92, 3
  br i1 %FcmpThree93, label %202, label %203

; <label>:202:                                    ; preds = %201
  store i32 %200, i32* %Recovery2, align 4
  br label %204

; <label>:203:                                    ; preds = %201
  store i32 %extractE70, i32* %Recovery2, align 4
  br label %204

; <label>:204:                                    ; preds = %203, %202
  br label %205

; <label>:205:                                    ; preds = %191, %204
  %ReplaceInst98 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst98, i32* %14, align 4
  %206 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %207 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %206, i32 0, i32 42
  %208 = load i32, i32* %207, align 4
  %209 = load i32, i32* @mf_size, align 4
  %210 = sub nsw i32 %209, %208
  store i32 %210, i32* @mf_size, align 4
  %211 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %212 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %211, i32 0, i32 42
  %213 = load i32, i32* %212, align 4
  %214 = load i32, i32* @mf_samples_to_encode, align 4
  %215 = sub nsw i32 %214, %213
  store i32 %215, i32* @mf_samples_to_encode, align 4
  store i32 0, i32* %17, align 4
  br label %216

; <label>:216:                                    ; preds = %261, %205
  %217 = load i32, i32* %17, align 4
  %218 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %219 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %218, i32 0, i32 46
  %220 = load i32, i32* %219, align 4
  %221 = icmp slt i32 %217, %220
  br i1 %221, label %222, label %262

; <label>:222:                                    ; preds = %216
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec18
  store i32 0, i32* %16, align 4
  br label %223

; <label>:223:                                    ; preds = %250, %222
  %224 = load i32, i32* %16, align 4
  %225 = load i32, i32* @mf_size, align 4
  %226 = icmp slt i32 %224, %225
  br i1 %226, label %227, label %251

; <label>:227:                                    ; preds = %223
  %228 = load i32, i32* %17, align 4
  %229 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 %228
  %230 = load i32, i32* %16, align 4
  %231 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %232 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %231, i32 0, i32 42
  %233 = load i32, i32* %232, align 4
  %234 = add nsw i32 %230, %233
  %235 = getelementptr inbounds [3056 x i16], [3056 x i16]* %229, i32 0, i32 %234
  %236 = load i16, i16* %235, align 2
  %237 = load i32, i32* %17, align 4
  %238 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 %237
  %239 = load i32, i32* %16, align 4
  %240 = getelementptr inbounds [3056 x i16], [3056 x i16]* %238, i32 0, i32 %239
  store i16 %236, i16* %240, align 2
  br label %241

; <label>:241:                                    ; preds = %227
  %242 = load i32, i32* %16, align 4
  %243 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop76 = add <4 x i32> %243, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop76, <4 x i32>* %allocaVec18
  %244 = load <4 x i32>, <4 x i32>* %allocaVec18, align 4
  %extractE78 = extractelement <4 x i32> %244, i64 0
  %extractE79 = extractelement <4 x i32> %244, i64 1
  %extractE80 = extractelement <4 x i32> %244, i64 2
  %sum81 = add i32 %extractE78, %extractE79
  %sum82 = add i32 %sum81, %extractE80
  %245 = add nsw i32 %242, 1
  %Fmul77 = mul i32 %245, 3
  store i32 %245, i32* %Recovery3
  %Fcmp83 = icmp ne i32 %sum82, %Fmul77
  br i1 %Fcmp83, label %246, label %250

; <label>:246:                                    ; preds = %241
  %remThree94 = sdiv i32 %sum82, %extractE78
  %FcmpThree95 = icmp ne i32 %remThree94, 3
  br i1 %FcmpThree95, label %247, label %248

; <label>:247:                                    ; preds = %246
  store i32 %245, i32* %Recovery3, align 4
  br label %249

; <label>:248:                                    ; preds = %246
  store i32 %extractE78, i32* %Recovery3, align 4
  br label %249

; <label>:249:                                    ; preds = %248, %247
  br label %250

; <label>:250:                                    ; preds = %241, %249
  %ReplaceInst99 = load i32, i32* %Recovery3, align 4
  store i32 %ReplaceInst99, i32* %16, align 4
  br label %223

; <label>:251:                                    ; preds = %223
  br label %252

; <label>:252:                                    ; preds = %251
  %253 = load i32, i32* %17, align 4
  %254 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop84 = add <4 x i32> %254, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop84, <4 x i32>* %allocaVec19
  %255 = load <4 x i32>, <4 x i32>* %allocaVec19, align 4
  %extractE86 = extractelement <4 x i32> %255, i64 0
  %extractE87 = extractelement <4 x i32> %255, i64 1
  %extractE88 = extractelement <4 x i32> %255, i64 2
  %sum89 = add i32 %extractE86, %extractE87
  %sum90 = add i32 %sum89, %extractE88
  %256 = add nsw i32 %253, 1
  %Fmul85 = mul i32 %256, 3
  store i32 %256, i32* %Recovery4
  %Fcmp91 = icmp ne i32 %sum90, %Fmul85
  br i1 %Fcmp91, label %257, label %261

; <label>:257:                                    ; preds = %252
  %remThree96 = sdiv i32 %sum90, %extractE86
  %FcmpThree97 = icmp ne i32 %remThree96, 3
  br i1 %FcmpThree97, label %258, label %259

; <label>:258:                                    ; preds = %257
  store i32 %256, i32* %Recovery4, align 4
  br label %260

; <label>:259:                                    ; preds = %257
  store i32 %extractE86, i32* %Recovery4, align 4
  br label %260

; <label>:260:                                    ; preds = %259, %258
  br label %261

; <label>:261:                                    ; preds = %252, %260
  %ReplaceInst100 = load i32, i32* %Recovery4, align 4
  store i32 %ReplaceInst100, i32* %17, align 4
  br label %216

; <label>:262:                                    ; preds = %216
  br label %263

; <label>:263:                                    ; preds = %262, %173
  br label %100

; <label>:264:                                    ; preds = %100
  %265 = load i32, i32* %11, align 4
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %268, label %267

; <label>:267:                                    ; preds = %264
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21.194, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.190, i32 0, i32 0), i32 1066, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.lame_encode_buffer, i32 0, i32 0))
  br label %268

; <label>:268:                                    ; preds = %267, %264
  %269 = phi i1 [ true, %264 ], [ false, %267 ]
  %270 = zext i1 %269 to i32
  %271 = load i32, i32* %14, align 4
  store i32 %271, i32* %7, align 4
  br label %272

; <label>:272:                                    ; preds = %268, %190
  %273 = load i32, i32* %7, align 4
  ret i32 %273
}

; Function Attrs: nounwind
define arm_aapcscc i32 @lame_encode_buffer_interleaved(%struct.lame_global_flags*, i16*, i32, i8*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec12 = alloca <4 x i32>, align 16
  %CastInst5 = alloca i32, align 4
  %CastInstVec6 = alloca <4 x i32>, align 16
  %allocaVec13 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %7 = alloca %struct.lame_global_flags*, align 4
  %8 = alloca i16*, align 4
  %allocaVec14 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %allocaVec18 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  %allocaVec19 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %allocaVec20 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %17 = alloca i16*, align 4
  %18 = alloca i16*, align 4
  %allocaVec21 = alloca <4 x i32>, align 16
  %19 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %7, align 4
  store i16* %1, i16** %8, align 4
  store i32 %2, i32* %9, align 4
  store i8* %3, i8** %10, align 4
  store i32 %4, i32* %11, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %12, align 4
  %20 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %21 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %20, i32 0, i32 42
  %22 = load i32, i32* %21, align 4
  %23 = add nsw i32 1024, %22
  %24 = sub nsw i32 %23, 272
  store i32 %24, i32* %16, align 4
  %25 = load i32, i32* %16, align 4
  %26 = icmp sge i32 3056, %25
  br i1 %26, label %28, label %27

; <label>:27:                                     ; preds = %5
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.19.192, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.190, i32 0, i32 0), i32 1083, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__func__.lame_encode_buffer_interleaved, i32 0, i32 0))
  br label %28

; <label>:28:                                     ; preds = %27, %5
  %29 = phi i1 [ true, %5 ], [ false, %27 ]
  %30 = zext i1 %29 to i32
  %31 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %32 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %31, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %35, label %42

; <label>:35:                                     ; preds = %28
  %36 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %37 = load i16*, i16** %8, align 4
  %38 = load i32, i32* %9, align 4
  %39 = load i8*, i8** %10, align 4
  %40 = load i32, i32* %11, align 4
  %41 = call arm_aapcscc i32 @lame_encode_buffer(%struct.lame_global_flags* %36, i16* %37, i16* null, i32 %38, i8* %39, i32 %40)
  store i32 %41, i32* %6, align 4
  br label %344

; <label>:42:                                     ; preds = %28
  %43 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %44 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %43, i32 0, i32 49
  %45 = load float, float* %44, align 4
  %46 = fcmp une float %45, 1.000000e+00
  br i1 %46, label %47, label %106

; <label>:47:                                     ; preds = %42
  %48 = load i32, i32* %9, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %48, i32 0
  %insertElmt22 = insertelement <4 x i32> %insertElmt, i32 %48, i32 1
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %48, i32 2
  %insertElmt24 = insertelement <4 x i32> %insertElmt23, i32 %48, i32 3
  store <4 x i32> %insertElmt24, <4 x i32>* %allocaVec14, align 16
  %49 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %Vop = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %49
  %50 = mul i32 2, %48
  %51 = call arm_aapcscc i8* @malloc(i32 %50)
  %52 = bitcast i8* %51 to i16*
  store i16* %52, i16** %17, align 4
  %53 = load i32, i32* %9, align 4
  %insertElmt25 = insertelement <4 x i32> undef, i32 %53, i32 0
  %insertElmt26 = insertelement <4 x i32> %insertElmt25, i32 %53, i32 1
  %insertElmt27 = insertelement <4 x i32> %insertElmt26, i32 %53, i32 2
  %insertElmt28 = insertelement <4 x i32> %insertElmt27, i32 %53, i32 3
  store <4 x i32> %insertElmt28, <4 x i32>* %allocaVec14, align 16
  %54 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %Vop29 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %54
  %55 = mul i32 2, %53
  %56 = call arm_aapcscc i8* @malloc(i32 %55)
  %57 = bitcast i8* %56 to i16*
  store i16* %57, i16** %18, align 4
  %58 = load i16*, i16** %17, align 4
  %59 = icmp eq i16* %58, null
  br i1 %59, label %63, label %60

; <label>:60:                                     ; preds = %47
  %61 = load i16*, i16** %18, align 4
  %62 = icmp eq i16* %61, null
  br i1 %62, label %63, label %64

; <label>:63:                                     ; preds = %60, %47
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec13
  store i32 -1, i32* %6, align 4
  br label %344

; <label>:64:                                     ; preds = %60
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec18
  store i32 0, i32* %14, align 4
  br label %65

; <label>:65:                                     ; preds = %89, %64
  %66 = load i32, i32* %14, align 4
  %67 = load i32, i32* %9, align 4
  %68 = icmp slt i32 %66, %67
  br i1 %68, label %69, label %93

; <label>:69:                                     ; preds = %65
  %70 = load i16*, i16** %8, align 4
  %71 = load i32, i32* %14, align 4
  %insertElmt30 = insertelement <4 x i32> undef, i32 %71, i32 0
  %insertElmt31 = insertelement <4 x i32> %insertElmt30, i32 %71, i32 1
  %insertElmt32 = insertelement <4 x i32> %insertElmt31, i32 %71, i32 2
  %insertElmt33 = insertelement <4 x i32> %insertElmt32, i32 %71, i32 3
  store <4 x i32> %insertElmt33, <4 x i32>* %allocaVec18, align 16
  %72 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop34 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %72
  %73 = mul nsw i32 2, %71
  %74 = getelementptr inbounds i16, i16* %70, i32 %73
  %75 = load i16, i16* %74, align 2
  %76 = load i16*, i16** %17, align 4
  %77 = load i32, i32* %14, align 4
  %78 = getelementptr inbounds i16, i16* %76, i32 %77
  store i16 %75, i16* %78, align 2
  %79 = load i16*, i16** %8, align 4
  %80 = load i32, i32* %14, align 4
  %insertElmt35 = insertelement <4 x i32> undef, i32 %80, i32 0
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %80, i32 1
  %insertElmt37 = insertelement <4 x i32> %insertElmt36, i32 %80, i32 2
  %insertElmt38 = insertelement <4 x i32> %insertElmt37, i32 %80, i32 3
  store <4 x i32> %insertElmt38, <4 x i32>* %allocaVec18, align 16
  %81 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop39 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %81
  %82 = mul nsw i32 2, %80
  %Vop40 = add <4 x i32> %Vop39, <i32 1, i32 1, i32 1, i32 1>
  %83 = add nsw i32 %82, 1
  %84 = getelementptr inbounds i16, i16* %79, i32 %83
  %85 = load i16, i16* %84, align 2
  %86 = load i16*, i16** %18, align 4
  %87 = load i32, i32* %14, align 4
  %88 = getelementptr inbounds i16, i16* %86, i32 %87
  store i16 %85, i16* %88, align 2
  br label %89

; <label>:89:                                     ; preds = %69
  %90 = load i32, i32* %14, align 4
  %insertElmt41 = insertelement <4 x i32> undef, i32 %90, i32 0
  %insertElmt42 = insertelement <4 x i32> %insertElmt41, i32 %90, i32 1
  %insertElmt43 = insertelement <4 x i32> %insertElmt42, i32 %90, i32 2
  %insertElmt44 = insertelement <4 x i32> %insertElmt43, i32 %90, i32 3
  store <4 x i32> %insertElmt44, <4 x i32>* %allocaVec18, align 16
  %91 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop45 = add <4 x i32> %91, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop45, <4 x i32>* %allocaVec18
  %92 = add nsw i32 %90, 1
  store i32 %92, i32* %14, align 4
  br label %65

; <label>:93:                                     ; preds = %65
  %94 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %95 = load i16*, i16** %17, align 4
  %96 = load i16*, i16** %18, align 4
  %97 = load i32, i32* %9, align 4
  %98 = load i8*, i8** %10, align 4
  %99 = load i32, i32* %11, align 4
  %100 = call arm_aapcscc i32 @lame_encode_buffer(%struct.lame_global_flags* %94, i16* %95, i16* %96, i32 %97, i8* %98, i32 %99)
  store i32 %100, i32* %13, align 4
  %101 = load i16*, i16** %17, align 4
  %102 = bitcast i16* %101 to i8*
  call arm_aapcscc void @free(i8* %102)
  %103 = load i16*, i16** %18, align 4
  %104 = bitcast i16* %103 to i8*
  call arm_aapcscc void @free(i8* %104)
  %105 = load i32, i32* %13, align 4
  store i32 %105, i32* %6, align 4
  br label %344

; <label>:106:                                    ; preds = %42
  %107 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %108 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %107, i32 0, i32 39
  %109 = load i32, i32* %108, align 4
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %115

; <label>:111:                                    ; preds = %106
  %112 = load i32, i32* @lame_encode_buffer_interleaved.frame_buffered, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %115, label %114

; <label>:114:                                    ; preds = %111
  call void @llvm.memset.p0i8.i32(i8* bitcast ([2 x [3056 x i16]]* @mfbuf to i8*), i8 0, i32 12224, i32 2, i1 false)
  store i32 1, i32* @lame_encode_buffer_interleaved.frame_buffered, align 4
  store i32 1088, i32* @mf_samples_to_encode, align 4
  store i32 752, i32* @mf_size, align 4
  br label %115

; <label>:115:                                    ; preds = %114, %111, %106
  %116 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %117 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %116, i32 0, i32 39
  %118 = load i32, i32* %117, align 4
  %119 = icmp eq i32 %118, 1
  br i1 %119, label %120, label %121

; <label>:120:                                    ; preds = %115
  store i32 0, i32* @lame_encode_buffer_interleaved.frame_buffered, align 4
  br label %121

; <label>:121:                                    ; preds = %120, %115
  %122 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %123 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %122, i32 0, i32 1
  %124 = load i32, i32* %123, align 4
  %125 = icmp eq i32 %124, 2
  br i1 %125, label %126, label %175

; <label>:126:                                    ; preds = %121
  %127 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %128 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %127, i32 0, i32 46
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %131, label %175

; <label>:131:                                    ; preds = %126
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec18
  store i32 0, i32* %14, align 4
  br label %132

; <label>:132:                                    ; preds = %170, %131
  %133 = load i32, i32* %14, align 4
  %134 = load i32, i32* %9, align 4
  %135 = icmp slt i32 %133, %134
  br i1 %135, label %136, label %174

; <label>:136:                                    ; preds = %132
  %137 = load i16*, i16** %8, align 4
  %138 = load i32, i32* %14, align 4
  %139 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop46 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %139
  %140 = mul nsw i32 2, %138
  %141 = getelementptr inbounds i16, i16* %137, i32 %140
  %142 = load i16, i16* %141, align 2
  %143 = sext i16 %142 to i32
  %144 = load i16*, i16** %8, align 4
  %145 = load i32, i32* %14, align 4
  %146 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop47 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %146
  %147 = mul nsw i32 2, %145
  %Vop48 = add <4 x i32> %Vop47, <i32 1, i32 1, i32 1, i32 1>
  %148 = add nsw i32 %147, 1
  %149 = getelementptr inbounds i16, i16* %144, i32 %148
  %150 = load i16, i16* %149, align 2
  %151 = sext i16 %150 to i32
  store i32 %143, i32* %CastInst
  %152 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %152, i32 0
  %insertCast49 = insertelement <4 x i32> %insertCast, i32 %152, i32 1
  %insertCast50 = insertelement <4 x i32> %insertCast49, i32 %152, i32 2
  %insertCast51 = insertelement <4 x i32> %insertCast50, i32 %152, i32 3
  store <4 x i32> %insertCast51, <4 x i32>* %CastInstVec, align 4
  %153 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  store i32 %151, i32* %CastInst5
  %154 = load i32, i32* %CastInst5, align 4
  %insertCast52 = insertelement <4 x i32> undef, i32 %154, i32 0
  %insertCast53 = insertelement <4 x i32> %insertCast52, i32 %154, i32 1
  %insertCast54 = insertelement <4 x i32> %insertCast53, i32 %154, i32 2
  %insertCast55 = insertelement <4 x i32> %insertCast54, i32 %154, i32 3
  store <4 x i32> %insertCast55, <4 x i32>* %CastInstVec6, align 4
  %155 = load <4 x i32>, <4 x i32>* %CastInstVec6, align 4
  %Vop56 = add <4 x i32> %153, %155
  %156 = add nsw i32 %143, %151
  %Vop57 = sdiv <4 x i32> %Vop56, <i32 2, i32 2, i32 2, i32 2>
  %157 = sdiv i32 %156, 2
  %158 = trunc i32 %157 to i16
  %159 = load i16*, i16** %8, align 4
  %160 = load i32, i32* %14, align 4
  %161 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop58 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %161
  %162 = mul nsw i32 2, %160
  %163 = getelementptr inbounds i16, i16* %159, i32 %162
  store i16 %158, i16* %163, align 2
  %164 = load i16*, i16** %8, align 4
  %165 = load i32, i32* %14, align 4
  %166 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop59 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %166
  %167 = mul nsw i32 2, %165
  %Vop60 = add <4 x i32> %Vop59, <i32 1, i32 1, i32 1, i32 1>
  %168 = add nsw i32 %167, 1
  %169 = getelementptr inbounds i16, i16* %164, i32 %168
  store i16 0, i16* %169, align 2
  br label %170

; <label>:170:                                    ; preds = %136
  %171 = load i32, i32* %14, align 4
  %172 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop61 = add <4 x i32> %172, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop61, <4 x i32>* %allocaVec18
  %173 = add nsw i32 %171, 1
  store i32 %173, i32* %14, align 4
  br label %132

; <label>:174:                                    ; preds = %132
  br label %175

; <label>:175:                                    ; preds = %174, %126, %121
  br label %176

; <label>:176:                                    ; preds = %335, %175
  %177 = load i32, i32* %9, align 4
  %178 = icmp sgt i32 %177, 0
  br i1 %178, label %179, label %336

; <label>:179:                                    ; preds = %176
  %180 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %181 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %180, i32 0, i32 42
  %182 = load i32, i32* %181, align 4
  %183 = load i32, i32* %9, align 4
  %184 = icmp slt i32 %182, %183
  br i1 %184, label %185, label %189

; <label>:185:                                    ; preds = %179
  %186 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %187 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %186, i32 0, i32 42
  %188 = load i32, i32* %187, align 4
  br label %191

; <label>:189:                                    ; preds = %179
  %190 = load i32, i32* %9, align 4
  br label %191

; <label>:191:                                    ; preds = %189, %185
  %192 = phi i32 [ %188, %185 ], [ %190, %189 ]
  store i32 %192, i32* %19, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec18
  store i32 0, i32* %14, align 4
  br label %193

; <label>:193:                                    ; preds = %218, %191
  %194 = load i32, i32* %14, align 4
  %195 = load i32, i32* %19, align 4
  %196 = icmp slt i32 %194, %195
  br i1 %196, label %197, label %222

; <label>:197:                                    ; preds = %193
  %198 = load i16*, i16** %8, align 4
  %199 = load i32, i32* %14, align 4
  %200 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop62 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %200
  %201 = mul nsw i32 2, %199
  %202 = getelementptr inbounds i16, i16* %198, i32 %201
  %203 = load i16, i16* %202, align 2
  %204 = load i32, i32* @mf_size, align 4
  %205 = load i32, i32* %14, align 4
  %206 = add nsw i32 %204, %205
  %207 = getelementptr inbounds [3056 x i16], [3056 x i16]* getelementptr inbounds ([2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 0), i32 0, i32 %206
  store i16 %203, i16* %207, align 2
  %208 = load i16*, i16** %8, align 4
  %209 = load i32, i32* %14, align 4
  %210 = mul nsw i32 2, %209
  %211 = add nsw i32 %210, 1
  %212 = getelementptr inbounds i16, i16* %208, i32 %211
  %213 = load i16, i16* %212, align 2
  %214 = load i32, i32* @mf_size, align 4
  %215 = load i32, i32* %14, align 4
  %216 = add nsw i32 %214, %215
  %217 = getelementptr inbounds [3056 x i16], [3056 x i16]* getelementptr inbounds ([2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 1), i32 0, i32 %216
  store i16 %213, i16* %217, align 2
  br label %218

; <label>:218:                                    ; preds = %197
  %219 = load i32, i32* %14, align 4
  %220 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop63 = add <4 x i32> %220, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop63, <4 x i32>* %allocaVec18
  %221 = add nsw i32 %219, 1
  store i32 %221, i32* %14, align 4
  br label %193

; <label>:222:                                    ; preds = %193
  %223 = load i32, i32* %19, align 4
  %insertElmt64 = insertelement <4 x i32> undef, i32 %223, i32 0
  %insertElmt65 = insertelement <4 x i32> %insertElmt64, i32 %223, i32 1
  %insertElmt66 = insertelement <4 x i32> %insertElmt65, i32 %223, i32 2
  %insertElmt67 = insertelement <4 x i32> %insertElmt66, i32 %223, i32 3
  store <4 x i32> %insertElmt67, <4 x i32>* %allocaVec21, align 16
  %224 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop68 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %224
  %225 = mul nsw i32 2, %223
  %226 = load i16*, i16** %8, align 4
  %227 = getelementptr inbounds i16, i16* %226, i32 %225
  store i16* %227, i16** %8, align 4
  %228 = load i32, i32* %19, align 4
  %insertElmt69 = insertelement <4 x i32> undef, i32 %228, i32 0
  %insertElmt70 = insertelement <4 x i32> %insertElmt69, i32 %228, i32 1
  %insertElmt71 = insertelement <4 x i32> %insertElmt70, i32 %228, i32 2
  %insertElmt72 = insertelement <4 x i32> %insertElmt71, i32 %228, i32 3
  store <4 x i32> %insertElmt72, <4 x i32>* %allocaVec21, align 16
  %229 = load i32, i32* %9, align 4
  %insertElmt73 = insertelement <4 x i32> undef, i32 %229, i32 0
  %insertElmt74 = insertelement <4 x i32> %insertElmt73, i32 %229, i32 1
  %insertElmt75 = insertelement <4 x i32> %insertElmt74, i32 %229, i32 2
  %insertElmt76 = insertelement <4 x i32> %insertElmt75, i32 %229, i32 3
  store <4 x i32> %insertElmt76, <4 x i32>* %allocaVec14, align 16
  %230 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %231 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop77 = sub <4 x i32> %230, %231
  store <4 x i32> %Vop77, <4 x i32>* %allocaVec14
  %232 = load <4 x i32>, <4 x i32>* %allocaVec14, align 4
  %extractE = extractelement <4 x i32> %232, i64 0
  %extractE78 = extractelement <4 x i32> %232, i64 1
  %extractE79 = extractelement <4 x i32> %232, i64 2
  %sum = add i32 %extractE, %extractE78
  %sum80 = add i32 %sum, %extractE79
  %233 = sub nsw i32 %229, %228
  %Fmul = mul i32 %233, 3
  store i32 %233, i32* %Recovery1
  %Fcmp = icmp ne i32 %sum80, %Fmul
  br i1 %Fcmp, label %234, label %238

; <label>:234:                                    ; preds = %222
  %remThree = sdiv i32 %sum80, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %235, label %236

; <label>:235:                                    ; preds = %234
  store i32 %233, i32* %Recovery1, align 4
  br label %237

; <label>:236:                                    ; preds = %234
  store i32 %extractE, i32* %Recovery1, align 4
  br label %237

; <label>:237:                                    ; preds = %236, %235
  br label %238

; <label>:238:                                    ; preds = %222, %237
  %ReplaceInst = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst, i32* %9, align 4
  %239 = load i32, i32* %19, align 4
  %insertElmt81 = insertelement <4 x i32> undef, i32 %239, i32 0
  %insertElmt82 = insertelement <4 x i32> %insertElmt81, i32 %239, i32 1
  %insertElmt83 = insertelement <4 x i32> %insertElmt82, i32 %239, i32 2
  %insertElmt84 = insertelement <4 x i32> %insertElmt83, i32 %239, i32 3
  store <4 x i32> %insertElmt84, <4 x i32>* %allocaVec21, align 16
  %240 = load i32, i32* @mf_size, align 4
  %241 = add nsw i32 %240, %239
  store i32 %241, i32* @mf_size, align 4
  %242 = load i32, i32* @mf_size, align 4
  %243 = icmp sle i32 %242, 3056
  br i1 %243, label %245, label %244

; <label>:244:                                    ; preds = %238
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20.193, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.190, i32 0, i32 0), i32 1140, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__func__.lame_encode_buffer_interleaved, i32 0, i32 0))
  br label %245

; <label>:245:                                    ; preds = %244, %238
  %246 = phi i1 [ true, %238 ], [ false, %244 ]
  %247 = zext i1 %246 to i32
  %248 = load i32, i32* %19, align 4
  %insertElmt85 = insertelement <4 x i32> undef, i32 %248, i32 0
  %insertElmt86 = insertelement <4 x i32> %insertElmt85, i32 %248, i32 1
  %insertElmt87 = insertelement <4 x i32> %insertElmt86, i32 %248, i32 2
  %insertElmt88 = insertelement <4 x i32> %insertElmt87, i32 %248, i32 3
  store <4 x i32> %insertElmt88, <4 x i32>* %allocaVec21, align 16
  %249 = load i32, i32* @mf_samples_to_encode, align 4
  %250 = add nsw i32 %249, %248
  store i32 %250, i32* @mf_samples_to_encode, align 4
  %251 = load i32, i32* @mf_size, align 4
  %252 = load i32, i32* %16, align 4
  %253 = icmp sge i32 %251, %252
  br i1 %253, label %254, label %335

; <label>:254:                                    ; preds = %245
  %255 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %256 = load i32, i32* @mf_size, align 4
  %257 = load i8*, i8** %10, align 4
  %258 = load i32, i32* %11, align 4
  %259 = call arm_aapcscc i32 @lame_encode_frame(%struct.lame_global_flags* %255, i16* getelementptr inbounds ([2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 0, i32 0), i16* getelementptr inbounds ([2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 1, i32 0), i32 %256, i8* %257, i32 %258)
  store i32 %259, i32* %13, align 4
  %260 = load i32, i32* %13, align 4
  %261 = icmp eq i32 %260, -1
  br i1 %261, label %262, label %263

; <label>:262:                                    ; preds = %254
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec13
  store i32 -1, i32* %6, align 4
  br label %344

; <label>:263:                                    ; preds = %254
  %264 = load i32, i32* %13, align 4
  %265 = load i8*, i8** %10, align 4
  %266 = getelementptr inbounds i8, i8* %265, i32 %264
  store i8* %266, i8** %10, align 4
  %267 = load i32, i32* %13, align 4
  %insertElmt89 = insertelement <4 x i32> undef, i32 %267, i32 0
  %insertElmt90 = insertelement <4 x i32> %insertElmt89, i32 %267, i32 1
  %insertElmt91 = insertelement <4 x i32> %insertElmt90, i32 %267, i32 2
  %insertElmt92 = insertelement <4 x i32> %insertElmt91, i32 %267, i32 3
  store <4 x i32> %insertElmt92, <4 x i32>* %allocaVec17, align 16
  %268 = load i32, i32* %12, align 4
  %insertElmt93 = insertelement <4 x i32> undef, i32 %268, i32 0
  %insertElmt94 = insertelement <4 x i32> %insertElmt93, i32 %268, i32 1
  %insertElmt95 = insertelement <4 x i32> %insertElmt94, i32 %268, i32 2
  %insertElmt96 = insertelement <4 x i32> %insertElmt95, i32 %268, i32 3
  store <4 x i32> %insertElmt96, <4 x i32>* %allocaVec16, align 16
  %269 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %270 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop97 = add <4 x i32> %269, %270
  store <4 x i32> %Vop97, <4 x i32>* %allocaVec16
  %271 = load <4 x i32>, <4 x i32>* %allocaVec16, align 4
  %extractE99 = extractelement <4 x i32> %271, i64 0
  %extractE100 = extractelement <4 x i32> %271, i64 1
  %extractE101 = extractelement <4 x i32> %271, i64 2
  %sum102 = add i32 %extractE99, %extractE100
  %sum103 = add i32 %sum102, %extractE101
  %272 = add nsw i32 %268, %267
  %Fmul98 = mul i32 %272, 3
  store i32 %272, i32* %Recovery2
  %Fcmp104 = icmp ne i32 %sum103, %Fmul98
  br i1 %Fcmp104, label %273, label %277

; <label>:273:                                    ; preds = %263
  %remThree125 = sdiv i32 %sum103, %extractE99
  %FcmpThree126 = icmp ne i32 %remThree125, 3
  br i1 %FcmpThree126, label %274, label %275

; <label>:274:                                    ; preds = %273
  store i32 %272, i32* %Recovery2, align 4
  br label %276

; <label>:275:                                    ; preds = %273
  store i32 %extractE99, i32* %Recovery2, align 4
  br label %276

; <label>:276:                                    ; preds = %275, %274
  br label %277

; <label>:277:                                    ; preds = %263, %276
  %ReplaceInst131 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst131, i32* %12, align 4
  %278 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %279 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %278, i32 0, i32 42
  %280 = load i32, i32* %279, align 4
  %281 = load i32, i32* @mf_size, align 4
  %282 = sub nsw i32 %281, %280
  store i32 %282, i32* @mf_size, align 4
  %283 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %284 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %283, i32 0, i32 42
  %285 = load i32, i32* %284, align 4
  %286 = load i32, i32* @mf_samples_to_encode, align 4
  %287 = sub nsw i32 %286, %285
  store i32 %287, i32* @mf_samples_to_encode, align 4
  store i32 0, i32* %15, align 4
  br label %288

; <label>:288:                                    ; preds = %333, %277
  %289 = load i32, i32* %15, align 4
  %290 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %291 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %290, i32 0, i32 46
  %292 = load i32, i32* %291, align 4
  %293 = icmp slt i32 %289, %292
  br i1 %293, label %294, label %334

; <label>:294:                                    ; preds = %288
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec18
  store i32 0, i32* %14, align 4
  br label %295

; <label>:295:                                    ; preds = %322, %294
  %296 = load i32, i32* %14, align 4
  %297 = load i32, i32* @mf_size, align 4
  %298 = icmp slt i32 %296, %297
  br i1 %298, label %299, label %323

; <label>:299:                                    ; preds = %295
  %300 = load i32, i32* %15, align 4
  %301 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 %300
  %302 = load i32, i32* %14, align 4
  %303 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %304 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %303, i32 0, i32 42
  %305 = load i32, i32* %304, align 4
  %306 = add nsw i32 %302, %305
  %307 = getelementptr inbounds [3056 x i16], [3056 x i16]* %301, i32 0, i32 %306
  %308 = load i16, i16* %307, align 2
  %309 = load i32, i32* %15, align 4
  %310 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 %309
  %311 = load i32, i32* %14, align 4
  %312 = getelementptr inbounds [3056 x i16], [3056 x i16]* %310, i32 0, i32 %311
  store i16 %308, i16* %312, align 2
  br label %313

; <label>:313:                                    ; preds = %299
  %314 = load i32, i32* %14, align 4
  %315 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop105 = add <4 x i32> %315, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop105, <4 x i32>* %allocaVec18
  %316 = load <4 x i32>, <4 x i32>* %allocaVec18, align 4
  %extractE107 = extractelement <4 x i32> %316, i64 0
  %extractE108 = extractelement <4 x i32> %316, i64 1
  %extractE109 = extractelement <4 x i32> %316, i64 2
  %sum110 = add i32 %extractE107, %extractE108
  %sum111 = add i32 %sum110, %extractE109
  %317 = add nsw i32 %314, 1
  %Fmul106 = mul i32 %317, 3
  store i32 %317, i32* %Recovery3
  %Fcmp112 = icmp ne i32 %sum111, %Fmul106
  br i1 %Fcmp112, label %318, label %322

; <label>:318:                                    ; preds = %313
  %remThree127 = sdiv i32 %sum111, %extractE107
  %FcmpThree128 = icmp ne i32 %remThree127, 3
  br i1 %FcmpThree128, label %319, label %320

; <label>:319:                                    ; preds = %318
  store i32 %317, i32* %Recovery3, align 4
  br label %321

; <label>:320:                                    ; preds = %318
  store i32 %extractE107, i32* %Recovery3, align 4
  br label %321

; <label>:321:                                    ; preds = %320, %319
  br label %322

; <label>:322:                                    ; preds = %313, %321
  %ReplaceInst132 = load i32, i32* %Recovery3, align 4
  store i32 %ReplaceInst132, i32* %14, align 4
  br label %295

; <label>:323:                                    ; preds = %295
  br label %324

; <label>:324:                                    ; preds = %323
  %325 = load i32, i32* %15, align 4
  %insertElmt113 = insertelement <4 x i32> undef, i32 %325, i32 0
  %insertElmt114 = insertelement <4 x i32> %insertElmt113, i32 %325, i32 1
  %insertElmt115 = insertelement <4 x i32> %insertElmt114, i32 %325, i32 2
  %insertElmt116 = insertelement <4 x i32> %insertElmt115, i32 %325, i32 3
  store <4 x i32> %insertElmt116, <4 x i32>* %allocaVec19, align 16
  %326 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop117 = add <4 x i32> %326, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop117, <4 x i32>* %allocaVec19
  %327 = load <4 x i32>, <4 x i32>* %allocaVec19, align 4
  %extractE119 = extractelement <4 x i32> %327, i64 0
  %extractE120 = extractelement <4 x i32> %327, i64 1
  %extractE121 = extractelement <4 x i32> %327, i64 2
  %sum122 = add i32 %extractE119, %extractE120
  %sum123 = add i32 %sum122, %extractE121
  %328 = add nsw i32 %325, 1
  %Fmul118 = mul i32 %328, 3
  store i32 %328, i32* %Recovery4
  %Fcmp124 = icmp ne i32 %sum123, %Fmul118
  br i1 %Fcmp124, label %329, label %333

; <label>:329:                                    ; preds = %324
  %remThree129 = sdiv i32 %sum123, %extractE119
  %FcmpThree130 = icmp ne i32 %remThree129, 3
  br i1 %FcmpThree130, label %330, label %331

; <label>:330:                                    ; preds = %329
  store i32 %328, i32* %Recovery4, align 4
  br label %332

; <label>:331:                                    ; preds = %329
  store i32 %extractE119, i32* %Recovery4, align 4
  br label %332

; <label>:332:                                    ; preds = %331, %330
  br label %333

; <label>:333:                                    ; preds = %324, %332
  %ReplaceInst133 = load i32, i32* %Recovery4, align 4
  store i32 %ReplaceInst133, i32* %15, align 4
  br label %288

; <label>:334:                                    ; preds = %288
  br label %335

; <label>:335:                                    ; preds = %334, %245
  br label %176

; <label>:336:                                    ; preds = %176
  %337 = load i32, i32* %9, align 4
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %340, label %339

; <label>:339:                                    ; preds = %336
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21.194, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.190, i32 0, i32 0), i32 1161, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__func__.lame_encode_buffer_interleaved, i32 0, i32 0))
  br label %340

; <label>:340:                                    ; preds = %339, %336
  %341 = phi i1 [ true, %336 ], [ false, %339 ]
  %342 = zext i1 %341 to i32
  %343 = load i32, i32* %12, align 4
  store i32 %343, i32* %6, align 4
  br label %344

; <label>:344:                                    ; preds = %340, %262, %93, %63, %35
  %345 = load i32, i32* %6, align 4
  ret i32 %345
}

declare arm_aapcscc i8* @malloc(i32) #3

; Function Attrs: nounwind
define arm_aapcscc i32 @lame_encode(%struct.lame_global_flags*, [1152 x i16]*, i8*, i32) #0 {
  %5 = alloca %struct.lame_global_flags*, align 4
  %6 = alloca [1152 x i16]*, align 4
  %7 = alloca i8*, align 4
  %allocaVec = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %5, align 4
  store [1152 x i16]* %1, [1152 x i16]** %6, align 4
  store i8* %2, i8** %7, align 4
  store i32 %3, i32* %8, align 4
  %11 = load i32, i32* @mf_samples_to_encode, align 4
  store i32 %11, i32* %10, align 4
  %12 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %13 = load [1152 x i16]*, [1152 x i16]** %6, align 4
  %14 = getelementptr inbounds [1152 x i16], [1152 x i16]* %13, i32 0
  %15 = getelementptr inbounds [1152 x i16], [1152 x i16]* %14, i32 0, i32 0
  %16 = load [1152 x i16]*, [1152 x i16]** %6, align 4
  %17 = getelementptr inbounds [1152 x i16], [1152 x i16]* %16, i32 1
  %18 = getelementptr inbounds [1152 x i16], [1152 x i16]* %17, i32 0, i32 0
  %19 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %20 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %19, i32 0, i32 45
  %21 = load i32, i32* %20, align 4
  %22 = mul nsw i32 576, %21
  %23 = load i8*, i8** %7, align 4
  %24 = load i32, i32* %8, align 4
  %25 = call arm_aapcscc i32 @lame_encode_buffer(%struct.lame_global_flags* %12, i16* %15, i16* %18, i32 %22, i8* %23, i32 %24)
  store i32 %25, i32* %9, align 4
  %26 = load i32, i32* %10, align 4
  store i32 %26, i32* @mf_samples_to_encode, align 4
  %27 = load i32, i32* %9, align 4
  ret i32 %27
}

; Function Attrs: nounwind
define arm_aapcscc void @lame_init(%struct.lame_global_flags*) #0 {
  %2 = alloca %struct.lame_global_flags*, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %2, align 4
  %3 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %4 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %3, i32 0, i32 36
  store i32 0, i32* %4, align 4
  %5 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %6 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %5, i32 0, i32 33
  store i32 0, i32* %6, align 4
  %7 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %8 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %7, i32 0, i32 34
  store i32 0, i32* %8, align 4
  %9 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %10 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %9, i32 0, i32 5
  store i32 1, i32* %10, align 4
  %11 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %12 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %11, i32 0, i32 35
  store float 0.000000e+00, float* %12, align 4
  %13 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %14 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %13, i32 0, i32 17
  store i32 0, i32* %14, align 4
  %15 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %16 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %15, i32 0, i32 18
  store i32 0, i32* %16, align 4
  %17 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %18 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %17, i32 0, i32 19
  store i32 0, i32* %18, align 4
  %19 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %20 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %19, i32 0, i32 20
  store i32 0, i32* %20, align 4
  %21 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %22 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %21, i32 0, i32 39
  store i32 0, i32* %22, align 4
  %23 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %24 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %23, i32 0, i32 4
  store i32 0, i32* %24, align 4
  %25 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %26 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %25, i32 0, i32 6
  store i32 5, i32* %26, align 4
  %27 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %28 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %27, i32 0, i32 29
  store i32 0, i32* %28, align 4
  %29 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %30 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %29, i32 0, i32 59
  store i32 0, i32* %30, align 4
  %31 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %32 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %31, i32 0, i32 25
  store i32 0, i32* %32, align 4
  %33 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %34 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %33, i32 0, i32 26
  store i32 0, i32* %34, align 4
  %35 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %36 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %35, i32 0, i32 27
  store i32 -1, i32* %36, align 4
  %37 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %38 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %37, i32 0, i32 28
  store i32 -1, i32* %38, align 4
  %39 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %40 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %39, i32 0, i32 53
  store float 0.000000e+00, float* %40, align 4
  %41 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %42 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %41, i32 0, i32 54
  store float 0.000000e+00, float* %42, align 4
  %43 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %44 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %43, i32 0, i32 55
  store float 0.000000e+00, float* %44, align 4
  %45 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %46 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %45, i32 0, i32 56
  store float 0.000000e+00, float* %46, align 4
  %47 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %48 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %47, i32 0, i32 57
  store i32 32, i32* %48, align 4
  %49 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %50 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %49, i32 0, i32 58
  store i32 -1, i32* %50, align 4
  %51 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %52 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %51, i32 0, i32 37
  store i32 0, i32* %52, align 4
  %53 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %54 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %53, i32 0, i32 49
  store float 1.000000e+00, float* %54, align 4
  %55 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %56 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %55, i32 0, i32 15
  store i32 2, i32* %56, align 4
  %57 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %58 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %57, i32 0, i32 44
  store i32 0, i32* %58, align 4
  %59 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %60 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %59, i32 0, i32 30
  store i32 0, i32* %60, align 4
  %61 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %62 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %61, i32 0, i32 7
  store i32 0, i32* %62, align 4
  %63 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %64 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %63, i32 0, i32 40
  store i32 0, i32* %64, align 4
  %65 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %66 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %65, i32 0, i32 21
  store i32 0, i32* %66, align 4
  %67 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %68 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %67, i32 0, i32 22
  store i32 4, i32* %68, align 4
  %69 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %70 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %69, i32 0, i32 23
  store i32 0, i32* %70, align 4
  %71 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %72 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %71, i32 0, i32 24
  store i32 0, i32* %72, align 4
  %73 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %74 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %73, i32 0, i32 47
  store i32 1, i32* %74, align 4
  %75 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %76 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %75, i32 0, i32 48
  store i32 13, i32* %76, align 4
  %77 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %78 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %77, i32 0, i32 43
  store i32 1, i32* %78, align 4
  %79 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %80 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %79, i32 0, i32 8
  store i32 1, i32* %80, align 4
  %81 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %82 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %81, i32 0, i32 9
  store i32 0, i32* %82, align 4
  %83 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %84 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %83, i32 0, i32 10
  store i32 0, i32* %84, align 4
  %85 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %86 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %85, i32 0, i32 11
  store i32 0, i32* %86, align 4
  %87 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %88 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %87, i32 0, i32 12
  store i32 0, i32* %88, align 4
  %89 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %90 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %89, i32 0, i32 13
  store i32 1, i32* %90, align 4
  %91 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %92 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %91, i32 0, i32 16
  store i32 0, i32* %92, align 4
  %93 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %94 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %93, i32 0, i32 14
  store i32 0, i32* %94, align 4
  %95 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %96 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %95, i32 0, i32 38
  store i32 0, i32* %96, align 4
  %97 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %98 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %97, i32 0, i32 2
  store i32 44100, i32* %98, align 4
  %99 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %100 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %99, i32 0, i32 3
  store i32 0, i32* %100, align 4
  %101 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %102 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %101, i32 0, i32 1
  store i32 2, i32* %102, align 4
  %103 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %104 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %103, i32 0, i32 0
  store i32 -1, i32* %104, align 4
  %105 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %106 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %105, i32 0, i32 31
  store i8* null, i8** %106, align 4
  %107 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %108 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %107, i32 0, i32 32
  store i8* null, i8** %108, align 4
  store i32 0, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i32 0, i32 0), align 4
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @lame_encode_finish(%struct.lame_global_flags*, i8*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %5 = alloca %struct.lame_global_flags*, align 4
  %6 = alloca i8*, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %11 = alloca [2 x [1152 x i16]], align 2
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %5, align 4
  store i8* %1, i8** %6, align 4
  store i32 %2, i32* %7, align 4
  %12 = getelementptr inbounds [2 x [1152 x i16]], [2 x [1152 x i16]]* %11, i32 0, i32 0
  %13 = bitcast [1152 x i16]* %12 to i8*
  call void @llvm.memset.p0i8.i32(i8* %13, i8 0, i32 4608, i32 2, i1 false)
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec10
  store i32 0, i32* %9, align 4
  br label %14

; <label>:14:                                     ; preds = %41, %3
  %15 = load i32, i32* @mf_samples_to_encode, align 4
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %55

; <label>:17:                                     ; preds = %14
  %18 = load i32, i32* %7, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %18, i32 0
  %insertElmt12 = insertelement <4 x i32> %insertElmt, i32 %18, i32 1
  %insertElmt13 = insertelement <4 x i32> %insertElmt12, i32 %18, i32 2
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %18, i32 3
  store <4 x i32> %insertElmt14, <4 x i32>* %allocaVec8, align 16
  %19 = load i32, i32* %9, align 4
  %insertElmt15 = insertelement <4 x i32> undef, i32 %19, i32 0
  %insertElmt16 = insertelement <4 x i32> %insertElmt15, i32 %19, i32 1
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %19, i32 2
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %19, i32 3
  store <4 x i32> %insertElmt18, <4 x i32>* %allocaVec10, align 16
  %20 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %21 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop = sub <4 x i32> %20, %21
  store <4 x i32> %Vop, <4 x i32>* %allocaVec11
  %22 = load <4 x i32>, <4 x i32>* %allocaVec11, align 4
  %extractE = extractelement <4 x i32> %22, i64 0
  %extractE19 = extractelement <4 x i32> %22, i64 1
  %extractE20 = extractelement <4 x i32> %22, i64 2
  %sum = add i32 %extractE, %extractE19
  %sum21 = add i32 %sum, %extractE20
  %23 = sub nsw i32 %18, %19
  %Fmul = mul i32 %23, 3
  store i32 %23, i32* %Recovery
  %Fcmp = icmp ne i32 %sum21, %Fmul
  br i1 %Fcmp, label %24, label %28

; <label>:24:                                     ; preds = %17
  %remThree = sdiv i32 %sum21, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %25, label %26

; <label>:25:                                     ; preds = %24
  store i32 %23, i32* %Recovery, align 4
  br label %27

; <label>:26:                                     ; preds = %24
  store i32 %extractE, i32* %Recovery, align 4
  br label %27

; <label>:27:                                     ; preds = %26, %25
  br label %28

; <label>:28:                                     ; preds = %17, %27
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %10, align 4
  %29 = load i32, i32* %7, align 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %32

; <label>:31:                                     ; preds = %28
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec11
  store i32 0, i32* %10, align 4
  br label %32

; <label>:32:                                     ; preds = %31, %28
  %33 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %34 = getelementptr inbounds [2 x [1152 x i16]], [2 x [1152 x i16]]* %11, i32 0, i32 0
  %35 = load i8*, i8** %6, align 4
  %36 = load i32, i32* %10, align 4
  %37 = call arm_aapcscc i32 @lame_encode(%struct.lame_global_flags* %33, [1152 x i16]* %34, i8* %35, i32 %36)
  store i32 %37, i32* %8, align 4
  %38 = load i32, i32* %8, align 4
  %39 = icmp eq i32 %38, -1
  br i1 %39, label %40, label %41

; <label>:40:                                     ; preds = %32
  call arm_aapcscc void @desalloc_buffer(%struct.bit_stream_struc* @bs.172)
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec7
  store i32 -1, i32* %4, align 4
  br label %121

; <label>:41:                                     ; preds = %32
  %42 = load i32, i32* %8, align 4
  %43 = load i8*, i8** %6, align 4
  %44 = getelementptr inbounds i8, i8* %43, i32 %42
  store i8* %44, i8** %6, align 4
  %45 = load i32, i32* %8, align 4
  %insertElmt22 = insertelement <4 x i32> undef, i32 %45, i32 0
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %45, i32 1
  %insertElmt24 = insertelement <4 x i32> %insertElmt23, i32 %45, i32 2
  %insertElmt25 = insertelement <4 x i32> %insertElmt24, i32 %45, i32 3
  store <4 x i32> %insertElmt25, <4 x i32>* %allocaVec9, align 16
  %46 = load i32, i32* %9, align 4
  %insertElmt26 = insertelement <4 x i32> undef, i32 %46, i32 0
  %insertElmt27 = insertelement <4 x i32> %insertElmt26, i32 %46, i32 1
  %insertElmt28 = insertelement <4 x i32> %insertElmt27, i32 %46, i32 2
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %46, i32 3
  store <4 x i32> %insertElmt29, <4 x i32>* %allocaVec10, align 16
  %47 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %48 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop30 = add <4 x i32> %47, %48
  store <4 x i32> %Vop30, <4 x i32>* %allocaVec10
  %49 = add nsw i32 %46, %45
  store i32 %49, i32* %9, align 4
  %50 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %51 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %50, i32 0, i32 42
  %52 = load i32, i32* %51, align 4
  %53 = load i32, i32* @mf_samples_to_encode, align 4
  %54 = sub nsw i32 %53, %52
  store i32 %54, i32* @mf_samples_to_encode, align 4
  br label %14

; <label>:55:                                     ; preds = %14
  %56 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %57 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %56, i32 0, i32 39
  %58 = load i32, i32* %57, align 4
  %59 = add nsw i32 %58, -1
  store i32 %59, i32* %57, align 4
  %60 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %61 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %60, i32 0, i32 4
  %62 = load i32, i32* %61, align 4
  %63 = icmp ne i32 %62, 0
  br i1 %63, label %86, label %64

; <label>:64:                                     ; preds = %55
  %65 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %66 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %65, i32 0, i32 7
  %67 = load i32, i32* %66, align 4
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %86, label %69

; <label>:69:                                     ; preds = %64
  %70 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %71 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %70, i32 0, i32 3
  %72 = load i32, i32* %71, align 4
  %73 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %74 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %73, i32 0, i32 39
  %75 = load i32, i32* %74, align 4
  %76 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %77 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %76, i32 0, i32 40
  %78 = load i32, i32* %77, align 4
  %79 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %80 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %79, i32 0, i32 42
  %81 = load i32, i32* %80, align 4
  call arm_aapcscc void @timestatus(i32 %72, i32 %75, i32 %78, i32 %81)
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %83 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %82, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.195, i32 0, i32 0))
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %85 = call arm_aapcscc i32 @fflush(%struct._IO_FILE* %84)
  br label %86

; <label>:86:                                     ; preds = %69, %64, %55
  call arm_aapcscc void @III_FlushBitstream()
  %87 = load i32, i32* %7, align 4
  %insertElmt31 = insertelement <4 x i32> undef, i32 %87, i32 0
  %insertElmt32 = insertelement <4 x i32> %insertElmt31, i32 %87, i32 1
  %insertElmt33 = insertelement <4 x i32> %insertElmt32, i32 %87, i32 2
  %insertElmt34 = insertelement <4 x i32> %insertElmt33, i32 %87, i32 3
  store <4 x i32> %insertElmt34, <4 x i32>* %allocaVec8, align 16
  %88 = load i32, i32* %9, align 4
  %89 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %90 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop35 = sub <4 x i32> %89, %90
  store <4 x i32> %Vop35, <4 x i32>* %allocaVec11
  %91 = load <4 x i32>, <4 x i32>* %allocaVec11, align 4
  %extractE37 = extractelement <4 x i32> %91, i64 0
  %extractE38 = extractelement <4 x i32> %91, i64 1
  %extractE39 = extractelement <4 x i32> %91, i64 2
  %sum40 = add i32 %extractE37, %extractE38
  %sum41 = add i32 %sum40, %extractE39
  %92 = sub nsw i32 %87, %88
  %Fmul36 = mul i32 %92, 3
  store i32 %92, i32* %Recovery2
  %Fcmp42 = icmp ne i32 %sum41, %Fmul36
  br i1 %Fcmp42, label %93, label %97

; <label>:93:                                     ; preds = %86
  %remThree55 = sdiv i32 %sum41, %extractE37
  %FcmpThree56 = icmp ne i32 %remThree55, 3
  br i1 %FcmpThree56, label %94, label %95

; <label>:94:                                     ; preds = %93
  store i32 %92, i32* %Recovery2, align 4
  br label %96

; <label>:95:                                     ; preds = %93
  store i32 %extractE37, i32* %Recovery2, align 4
  br label %96

; <label>:96:                                     ; preds = %95, %94
  br label %97

; <label>:97:                                     ; preds = %86, %96
  %ReplaceInst59 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst59, i32* %10, align 4
  %98 = load i32, i32* %7, align 4
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %101

; <label>:100:                                    ; preds = %97
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec11
  store i32 0, i32* %10, align 4
  br label %101

; <label>:101:                                    ; preds = %100, %97
  %102 = load i8*, i8** %6, align 4
  %103 = load i32, i32* %10, align 4
  %104 = call arm_aapcscc i32 @copy_buffer(i8* %102, i32 %103, %struct.bit_stream_struc* @bs.172)
  store i32 %104, i32* %8, align 4
  %105 = load i32, i32* %8, align 4
  %106 = icmp eq i32 %105, -1
  br i1 %106, label %107, label %108

; <label>:107:                                    ; preds = %101
  call arm_aapcscc void @desalloc_buffer(%struct.bit_stream_struc* @bs.172)
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec7
  store i32 -1, i32* %4, align 4
  br label %121

; <label>:108:                                    ; preds = %101
  %109 = load i32, i32* %8, align 4
  %insertElmt43 = insertelement <4 x i32> undef, i32 %109, i32 0
  %insertElmt44 = insertelement <4 x i32> %insertElmt43, i32 %109, i32 1
  %insertElmt45 = insertelement <4 x i32> %insertElmt44, i32 %109, i32 2
  %insertElmt46 = insertelement <4 x i32> %insertElmt45, i32 %109, i32 3
  store <4 x i32> %insertElmt46, <4 x i32>* %allocaVec9, align 16
  %110 = load i32, i32* %9, align 4
  %111 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %112 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop47 = add <4 x i32> %111, %112
  store <4 x i32> %Vop47, <4 x i32>* %allocaVec10
  %113 = load <4 x i32>, <4 x i32>* %allocaVec10, align 4
  %extractE49 = extractelement <4 x i32> %113, i64 0
  %extractE50 = extractelement <4 x i32> %113, i64 1
  %extractE51 = extractelement <4 x i32> %113, i64 2
  %sum52 = add i32 %extractE49, %extractE50
  %sum53 = add i32 %sum52, %extractE51
  %114 = add nsw i32 %110, %109
  %Fmul48 = mul i32 %114, 3
  store i32 %114, i32* %Recovery3
  %Fcmp54 = icmp ne i32 %sum53, %Fmul48
  br i1 %Fcmp54, label %115, label %119

; <label>:115:                                    ; preds = %108
  %remThree57 = sdiv i32 %sum53, %extractE49
  %FcmpThree58 = icmp ne i32 %remThree57, 3
  br i1 %FcmpThree58, label %116, label %117

; <label>:116:                                    ; preds = %115
  store i32 %114, i32* %Recovery3, align 4
  br label %118

; <label>:117:                                    ; preds = %115
  store i32 %extractE49, i32* %Recovery3, align 4
  br label %118

; <label>:118:                                    ; preds = %117, %116
  br label %119

; <label>:119:                                    ; preds = %108, %118
  %ReplaceInst60 = load i32, i32* %Recovery3, align 4
  store i32 %ReplaceInst60, i32* %9, align 4
  call arm_aapcscc void @desalloc_buffer(%struct.bit_stream_struc* @bs.172)
  %120 = load i32, i32* %9, align 4
  store i32 %120, i32* %4, align 4
  br label %121

; <label>:121:                                    ; preds = %119, %107, %40
  %122 = load i32, i32* %4, align 4
  ret i32 %122
}

; Function Attrs: nounwind
define arm_aapcscc void @lame_mp3_tags(%struct.lame_global_flags*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %2 = alloca %struct.lame_global_flags*, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %2, align 4
  %4 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %5 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %4, i32 0, i32 5
  %6 = load i32, i32* %5, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %23

; <label>:8:                                      ; preds = %1
  %9 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %10 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %9, i32 0, i32 22
  %11 = load i32, i32* %10, align 4
  %12 = mul nsw i32 %11, 100
  %13 = sdiv i32 %12, 9
  store i32 %13, i32* %3, align 4
  %14 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %15 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %14, i32 0, i32 32
  %16 = load i8*, i8** %15, align 4
  %17 = load i32, i32* %3, align 4
  %18 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %19 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %18, i32 0, i32 43
  %20 = load i32, i32* %19, align 4
  %21 = sub nsw i32 1, %20
  %22 = call arm_aapcscc i32 @PutVbrTag(i8* %16, i32 %17, i32 %21)
  br label %23

; <label>:23:                                     ; preds = %8, %1
  %24 = load i32, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i32 0, i32 0), align 4
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %31

; <label>:26:                                     ; preds = %23
  call arm_aapcscc void @id3_buildtag(%struct.ID3TAGDATA* @id3tag)
  %27 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %28 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %27, i32 0, i32 32
  %29 = load i8*, i8** %28, align 4
  %30 = call arm_aapcscc i32 @id3_writetag(i8* %29, %struct.ID3TAGDATA* @id3tag)
  br label %31

; <label>:31:                                     ; preds = %26, %23
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @lame_version(%struct.lame_global_flags*, i8*) #0 {
  %3 = alloca %struct.lame_global_flags*, align 4
  %4 = alloca i8*, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %3, align 4
  store i8* %1, i8** %4, align 4
  %5 = load i8*, i8** %4, align 4
  %6 = call arm_aapcscc i8* @get_lame_version()
  %7 = call arm_aapcscc i8* @strncpy(i8* %5, i8* %6, i32 20)
  ret void
}

declare arm_aapcscc i8* @strncpy(i8*, i8*, i32) #3

; Function Attrs: nounwind
define arm_aapcscc i32 @main(i32, i8**) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 4
  %6 = alloca [16384 x i8], align 1
  %7 = alloca [2 x [1152 x i16]], align 2
  %allocaVec2 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %10 = alloca %struct.lame_global_flags, align 4
  %11 = alloca %struct._IO_FILE*, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 4
  call arm_aapcscc void @lame_init(%struct.lame_global_flags* %10)
  %12 = load i32, i32* %4, align 4
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %18

; <label>:14:                                     ; preds = %2
  %15 = load i8**, i8*** %5, align 4
  %16 = getelementptr inbounds i8*, i8** %15, i32 0
  %17 = load i8*, i8** %16, align 4
  call arm_aapcscc void @lame_usage(%struct.lame_global_flags* %10, i8* %17)
  br label %18

; <label>:18:                                     ; preds = %14, %2
  %19 = load i32, i32* %4, align 4
  %20 = load i8**, i8*** %5, align 4
  call arm_aapcscc void @lame_parse_args(%struct.lame_global_flags* %10, i32 %19, i8** %20)
  %21 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %10, i32 0, i32 4
  %22 = load i32, i32* %21, align 4
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %43, label %24

; <label>:24:                                     ; preds = %18
  %25 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %10, i32 0, i32 32
  %26 = load i8*, i8** %25, align 4
  %27 = call arm_aapcscc i32 @strcmp(i8* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.196, i32 0, i32 0))
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  store %struct._IO_FILE* %30, %struct._IO_FILE** %11, align 4
  br label %42

; <label>:31:                                     ; preds = %24
  %32 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %10, i32 0, i32 32
  %33 = load i8*, i8** %32, align 4
  %34 = call arm_aapcscc %struct._IO_FILE* @fopen(i8* %33, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.197, i32 0, i32 0))
  store %struct._IO_FILE* %34, %struct._IO_FILE** %11, align 4
  %35 = icmp eq %struct._IO_FILE* %34, null
  br i1 %35, label %36, label %41

; <label>:36:                                     ; preds = %31
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %38 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %10, i32 0, i32 32
  %39 = load i8*, i8** %38, align 4
  %40 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.198, i32 0, i32 0), i8* %39)
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:41:                                     ; preds = %31
  br label %42

; <label>:42:                                     ; preds = %41, %29
  br label %43

; <label>:43:                                     ; preds = %42, %18
  call arm_aapcscc void @lame_init_infile(%struct.lame_global_flags* %10)
  call arm_aapcscc void @lame_init_params(%struct.lame_global_flags* %10)
  call arm_aapcscc void @lame_print_config(%struct.lame_global_flags* %10)
  br label %44

; <label>:44:                                     ; preds = %70, %43
  %45 = getelementptr inbounds [2 x [1152 x i16]], [2 x [1152 x i16]]* %7, i32 0, i32 0
  %46 = call arm_aapcscc i32 @lame_readframe(%struct.lame_global_flags* %10, [1152 x i16]* %45)
  store i32 %46, i32* %8, align 4
  %47 = getelementptr inbounds [2 x [1152 x i16]], [2 x [1152 x i16]]* %7, i32 0, i32 0
  %48 = getelementptr inbounds [1152 x i16], [1152 x i16]* %47, i32 0, i32 0
  %49 = getelementptr inbounds [2 x [1152 x i16]], [2 x [1152 x i16]]* %7, i32 0, i32 1
  %50 = getelementptr inbounds [1152 x i16], [1152 x i16]* %49, i32 0, i32 0
  %51 = load i32, i32* %8, align 4
  %52 = getelementptr inbounds [16384 x i8], [16384 x i8]* %6, i32 0, i32 0
  %53 = call arm_aapcscc i32 @lame_encode_buffer(%struct.lame_global_flags* %10, i16* %48, i16* %50, i32 %51, i8* %52, i32 16384)
  store i32 %53, i32* %9, align 4
  %54 = load i32, i32* %9, align 4
  %55 = icmp eq i32 %54, -1
  br i1 %55, label %56, label %59

; <label>:56:                                     ; preds = %44
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %58 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3.199, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:59:                                     ; preds = %44
  %60 = getelementptr inbounds [16384 x i8], [16384 x i8]* %6, i32 0, i32 0
  %61 = load i32, i32* %9, align 4
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 4
  %63 = call arm_aapcscc i32 @fwrite(i8* %60, i32 1, i32 %61, %struct._IO_FILE* %62)
  %64 = load i32, i32* %9, align 4
  %65 = icmp ne i32 %63, %64
  br i1 %65, label %66, label %69

; <label>:66:                                     ; preds = %59
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %68 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4.200, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:69:                                     ; preds = %59
  br label %70

; <label>:70:                                     ; preds = %69
  %71 = load i32, i32* %8, align 4
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %44, label %73

; <label>:73:                                     ; preds = %70
  %74 = getelementptr inbounds [16384 x i8], [16384 x i8]* %6, i32 0, i32 0
  %75 = call arm_aapcscc i32 @lame_encode_finish(%struct.lame_global_flags* %10, i8* %74, i32 16384)
  store i32 %75, i32* %9, align 4
  %76 = getelementptr inbounds [16384 x i8], [16384 x i8]* %6, i32 0, i32 0
  %77 = load i32, i32* %9, align 4
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 4
  %79 = call arm_aapcscc i32 @fwrite(i8* %76, i32 1, i32 %77, %struct._IO_FILE* %78)
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 4
  %81 = call arm_aapcscc i32 @fclose(%struct._IO_FILE* %80)
  call arm_aapcscc void @lame_close_infile(%struct.lame_global_flags* %10)
  call arm_aapcscc void @lame_mp3_tags(%struct.lame_global_flags* %10)
  ret i32 0
}

declare arm_aapcscc void @lame_usage(%struct.lame_global_flags*, i8*) #3

declare arm_aapcscc void @lame_parse_args(%struct.lame_global_flags*, i32, i8**) #3

declare arm_aapcscc void @lame_init_infile(%struct.lame_global_flags*) #3

declare arm_aapcscc i32 @lame_readframe(%struct.lame_global_flags*, [1152 x i16]*) #3

declare arm_aapcscc void @lame_close_infile(%struct.lame_global_flags*) #3

; Function Attrs: nounwind
define arm_aapcscc void @mdct_sub48(%struct.lame_global_flags*, i16*, i16*, [2 x [576 x double]]*, %struct.III_side_info_t*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec18 = alloca <2 x double>, align 16
  %Recovery1 = alloca double, align 8
  %allocaVec19 = alloca <2 x double>, align 16
  %Recovery2 = alloca double, align 8
  %allocaVec20 = alloca <2 x double>, align 16
  %Recovery3 = alloca double, align 8
  %allocaVec21 = alloca <2 x double>, align 16
  %Recovery4 = alloca double, align 8
  %allocaVec22 = alloca <2 x double>, align 16
  %Recovery5 = alloca double, align 8
  %allocaVec23 = alloca <4 x i32>, align 16
  %Recovery6 = alloca i32, align 4
  %allocaVec24 = alloca <4 x i32>, align 16
  %Recovery7 = alloca i32, align 4
  %allocaVec25 = alloca <4 x i32>, align 16
  %Recovery8 = alloca i32, align 4
  %allocaVec26 = alloca <4 x i32>, align 16
  %Recovery9 = alloca i32, align 4
  %allocaVec27 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec28 = alloca <2 x double>, align 16
  %CastInst10 = alloca double, align 4
  %CastInstVec11 = alloca <2 x double>, align 16
  %allocaVec29 = alloca <2 x double>, align 16
  %CastInst12 = alloca double, align 4
  %CastInstVec13 = alloca <2 x double>, align 16
  %allocaVec30 = alloca <2 x double>, align 16
  %CastInst14 = alloca double, align 4
  %CastInstVec15 = alloca <2 x double>, align 16
  %allocaVec31 = alloca <2 x double>, align 16
  %CastInst16 = alloca double, align 4
  %CastInstVec17 = alloca <2 x double>, align 16
  %6 = alloca %struct.lame_global_flags*, align 4
  %7 = alloca i16*, align 4
  %8 = alloca i16*, align 4
  %9 = alloca [2 x [576 x double]]*, align 4
  %10 = alloca %struct.III_side_info_t*, align 4
  %allocaVec32 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec33 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %allocaVec34 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %14 = alloca i16*, align 4
  %allocaVec35 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %16 = alloca double*, align 4
  %17 = alloca %struct.gr_info*, align 4
  %18 = alloca double*, align 4
  %allocaVec36 = alloca <2 x double>, align 16
  %19 = alloca double, align 8
  %allocaVec37 = alloca <2 x double>, align 16
  %20 = alloca double, align 8
  %allocaVec38 = alloca <4 x i32>, align 16
  %21 = alloca i32, align 4
  %allocaVec39 = alloca <2 x double>, align 16
  %22 = alloca double, align 8
  %allocaVec40 = alloca <2 x double>, align 16
  %23 = alloca double, align 8
  %allocaVec41 = alloca <2 x double>, align 16
  %24 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %6, align 4
  store i16* %1, i16** %7, align 4
  store i16* %2, i16** %8, align 4
  store [2 x [576 x double]]* %3, [2 x [576 x double]]** %9, align 4
  store %struct.III_side_info_t* %4, %struct.III_side_info_t** %10, align 4
  %25 = load i32, i32* @mdct_sub48.init, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %30

; <label>:27:                                     ; preds = %5
  call arm_aapcscc void @mdct_init48()
  %28 = load i32, i32* @mdct_sub48.init, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* @mdct_sub48.init, align 4
  br label %30

; <label>:30:                                     ; preds = %27, %5
  %31 = load i16*, i16** %7, align 4
  store i16* %31, i16** %14, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec34
  store i32 0, i32* %13, align 4
  br label %32

; <label>:32:                                     ; preds = %647, %30
  %33 = load i32, i32* %13, align 4
  %34 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %35 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %34, i32 0, i32 46
  %36 = load i32, i32* %35, align 4
  %37 = icmp slt i32 %33, %36
  br i1 %37, label %38, label %648

; <label>:38:                                     ; preds = %32
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec32
  store i32 0, i32* %11, align 4
  br label %39

; <label>:39:                                     ; preds = %619, %38
  %40 = load i32, i32* %11, align 4
  %41 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %42 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %41, i32 0, i32 45
  %43 = load i32, i32* %42, align 4
  %44 = icmp slt i32 %40, %43
  br i1 %44, label %45, label %620

; <label>:45:                                     ; preds = %39
  %46 = load [2 x [576 x double]]*, [2 x [576 x double]]** %9, align 4
  %47 = load i32, i32* %11, align 4
  %48 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %46, i32 %47
  %49 = load i32, i32* %13, align 4
  %50 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %48, i32 0, i32 %49
  %51 = getelementptr inbounds [576 x double], [576 x double]* %50, i32 0, i32 0
  store double* %51, double** %16, align 4
  %52 = load %struct.III_side_info_t*, %struct.III_side_info_t** %10, align 4
  %53 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %52, i32 0, i32 4
  %54 = load i32, i32* %11, align 4
  %55 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %53, i32 0, i32 %54
  %56 = getelementptr inbounds %struct.anon, %struct.anon* %55, i32 0, i32 0
  %57 = load i32, i32* %13, align 4
  %58 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %56, i32 0, i32 %57
  %59 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %58, i32 0, i32 0
  store %struct.gr_info* %59, %struct.gr_info** %17, align 4
  %60 = load i32, i32* %13, align 4
  %61 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %60
  %62 = load i32, i32* %11, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %62, i32 0
  %insertElmt42 = insertelement <4 x i32> %insertElmt, i32 %62, i32 1
  %insertElmt43 = insertelement <4 x i32> %insertElmt42, i32 %62, i32 2
  %insertElmt44 = insertelement <4 x i32> %insertElmt43, i32 %62, i32 3
  store <4 x i32> %insertElmt44, <4 x i32>* %allocaVec32, align 16
  %63 = load <4 x i32>, <4 x i32>* %allocaVec32, align 16
  %Vop = sub <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %63
  %64 = sub nsw i32 1, %62
  %65 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %61, i32 0, i32 %64
  %66 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %65, i32 0, i32 0
  %67 = getelementptr inbounds [32 x double], [32 x double]* %66, i32 0, i32 0
  store double* %67, double** %18, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec33
  store i32 0, i32* %12, align 4
  br label %68

; <label>:68:                                     ; preds = %98, %45
  %69 = load i32, i32* %12, align 4
  %70 = icmp slt i32 %69, 9
  br i1 %70, label %71, label %102

; <label>:71:                                     ; preds = %68
  %72 = load i16*, i16** %14, align 4
  %73 = load double*, double** %18, align 4
  call arm_aapcscc void @window_subband(i16* %72, double* %73, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4))
  %74 = load i16*, i16** %14, align 4
  %75 = getelementptr inbounds i16, i16* %74, i32 32
  %76 = load double*, double** %18, align 4
  %77 = getelementptr inbounds double, double* %76, i32 32
  call arm_aapcscc void @window_subband(i16* %75, double* %77, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4))
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec35
  store i32 1, i32* %15, align 4
  br label %78

; <label>:78:                                     ; preds = %89, %71
  %79 = load i32, i32* %15, align 4
  %80 = icmp slt i32 %79, 32
  br i1 %80, label %81, label %93

; <label>:81:                                     ; preds = %78
  %82 = load double*, double** %18, align 4
  %83 = load i32, i32* %15, align 4
  %insertElmt45 = insertelement <4 x i32> undef, i32 %83, i32 0
  %insertElmt46 = insertelement <4 x i32> %insertElmt45, i32 %83, i32 1
  %insertElmt47 = insertelement <4 x i32> %insertElmt46, i32 %83, i32 2
  %insertElmt48 = insertelement <4 x i32> %insertElmt47, i32 %83, i32 3
  store <4 x i32> %insertElmt48, <4 x i32>* %allocaVec35, align 16
  %84 = load <4 x i32>, <4 x i32>* %allocaVec35, align 16
  %Vop49 = add <4 x i32> %84, <i32 32, i32 32, i32 32, i32 32>
  %85 = add nsw i32 %83, 32
  %86 = getelementptr inbounds double, double* %82, i32 %85
  %87 = load double, double* %86, align 8
  %88 = fmul double %87, -1.000000e+00
  store double %88, double* %86, align 8
  br label %89

; <label>:89:                                     ; preds = %81
  %90 = load i32, i32* %15, align 4
  %insertElmt50 = insertelement <4 x i32> undef, i32 %90, i32 0
  %insertElmt51 = insertelement <4 x i32> %insertElmt50, i32 %90, i32 1
  %insertElmt52 = insertelement <4 x i32> %insertElmt51, i32 %90, i32 2
  %insertElmt53 = insertelement <4 x i32> %insertElmt52, i32 %90, i32 3
  store <4 x i32> %insertElmt53, <4 x i32>* %allocaVec35, align 16
  %91 = load <4 x i32>, <4 x i32>* %allocaVec35, align 16
  %Vop54 = add <4 x i32> %91, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %Vop54, <4 x i32>* %allocaVec35
  %92 = add nsw i32 %90, 2
  store i32 %92, i32* %15, align 4
  br label %78

; <label>:93:                                     ; preds = %78
  %94 = load double*, double** %18, align 4
  %95 = getelementptr inbounds double, double* %94, i32 64
  store double* %95, double** %18, align 4
  %96 = load i16*, i16** %14, align 4
  %97 = getelementptr inbounds i16, i16* %96, i32 64
  store i16* %97, i16** %14, align 4
  br label %98

; <label>:98:                                     ; preds = %93
  %99 = load i32, i32* %12, align 4
  %insertElmt55 = insertelement <4 x i32> undef, i32 %99, i32 0
  %insertElmt56 = insertelement <4 x i32> %insertElmt55, i32 %99, i32 1
  %insertElmt57 = insertelement <4 x i32> %insertElmt56, i32 %99, i32 2
  %insertElmt58 = insertelement <4 x i32> %insertElmt57, i32 %99, i32 3
  store <4 x i32> %insertElmt58, <4 x i32>* %allocaVec33, align 16
  %100 = load <4 x i32>, <4 x i32>* %allocaVec33, align 16
  %Vop59 = add <4 x i32> %100, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop59, <4 x i32>* %allocaVec33
  %101 = add nsw i32 %99, 1
  store i32 %101, i32* %12, align 4
  br label %68

; <label>:102:                                    ; preds = %68
  %103 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %104 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %103, i32 0, i32 59
  %105 = load i32, i32* %104, align 4
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %243

; <label>:107:                                    ; preds = %102
  %108 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %109 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %108, i32 0, i32 58
  %110 = load i32, i32* %109, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %15, align 4
  br label %112

; <label>:112:                                    ; preds = %238, %107
  %113 = load i32, i32* %15, align 4
  %114 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %115 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %114, i32 0, i32 57
  %116 = load i32, i32* %115, align 4
  %117 = icmp slt i32 %113, %116
  br i1 %117, label %118, label %242

; <label>:118:                                    ; preds = %112
  %119 = load i32, i32* %15, align 4
  %120 = sitofp i32 %119 to double
  store double %120, double* %CastInst
  %121 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %121, i32 0
  %insertCast60 = insertelement <2 x double> %insertCast, double %121, i32 1
  store <2 x double> %insertCast60, <2 x double>* %CastInstVec, align 4
  %122 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %Vop61 = fdiv <2 x double> %122, <double 3.100000e+01, double 3.100000e+01>
  store <2 x double> %Vop61, <2 x double>* %allocaVec37
  %123 = fdiv double %120, 3.100000e+01
  store double %123, double* %20, align 8
  %124 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %125 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %124, i32 0, i32 53
  %126 = load float, float* %125, align 4
  %127 = fpext float %126 to double
  %128 = load double, double* %20, align 8
  %129 = fcmp olt double %127, %128
  br i1 %129, label %130, label %180

; <label>:130:                                    ; preds = %118
  %131 = load double, double* %20, align 8
  %132 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %133 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %132, i32 0, i32 54
  %134 = load float, float* %133, align 4
  %135 = fpext float %134 to double
  %136 = fcmp olt double %131, %135
  br i1 %136, label %137, label %180

; <label>:137:                                    ; preds = %130
  %138 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %139 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %138, i32 0, i32 53
  %140 = load float, float* %139, align 4
  %141 = fpext float %140 to double
  %142 = load double, double* %20, align 8
  store double %141, double* %CastInst10
  %143 = load double, double* %CastInst10, align 4
  %insertCast62 = insertelement <2 x double> undef, double %143, i32 0
  %insertCast63 = insertelement <2 x double> %insertCast62, double %143, i32 1
  store <2 x double> %insertCast63, <2 x double>* %CastInstVec11, align 4
  %144 = load <2 x double>, <2 x double>* %CastInstVec11, align 4
  %145 = load <2 x double>, <2 x double>* %allocaVec37, align 16
  %Vop64 = fsub <2 x double> %144, %145
  %146 = fsub double %141, %142
  %Vop65 = fmul <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %Vop64
  %147 = fmul double 0x3FF921FB54442D18, %146
  %148 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %149 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %148, i32 0, i32 54
  %150 = load float, float* %149, align 4
  %151 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %152 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %151, i32 0, i32 53
  %153 = load float, float* %152, align 4
  %154 = fsub float %150, %153
  %155 = fpext float %154 to double
  %156 = fdiv double %147, %155
  %157 = call arm_aapcscc double @cos(double %156) #7
  store double %157, double* %19, align 8
  store i32 0, i32* %12, align 4
  br label %158

; <label>:158:                                    ; preds = %175, %137
  %159 = load i32, i32* %12, align 4
  %160 = icmp slt i32 %159, 18
  br i1 %160, label %161, label %179

; <label>:161:                                    ; preds = %158
  %162 = load double, double* %19, align 8
  %insertElmt66 = insertelement <2 x double> undef, double %162, i32 0
  %insertElmt67 = insertelement <2 x double> %insertElmt66, double %162, i32 1
  store <2 x double> %insertElmt67, <2 x double>* %allocaVec36, align 16
  %163 = load i32, i32* %13, align 4
  %164 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %163
  %165 = load i32, i32* %11, align 4
  %insertElmt68 = insertelement <4 x i32> undef, i32 %165, i32 0
  %insertElmt69 = insertelement <4 x i32> %insertElmt68, i32 %165, i32 1
  %insertElmt70 = insertelement <4 x i32> %insertElmt69, i32 %165, i32 2
  %insertElmt71 = insertelement <4 x i32> %insertElmt70, i32 %165, i32 3
  store <4 x i32> %insertElmt71, <4 x i32>* %allocaVec32, align 16
  %166 = load <4 x i32>, <4 x i32>* %allocaVec32, align 16
  %Vop72 = sub <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %166
  %167 = sub nsw i32 1, %165
  %168 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %164, i32 0, i32 %167
  %169 = load i32, i32* %12, align 4
  %170 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %168, i32 0, i32 %169
  %171 = load i32, i32* %15, align 4
  %172 = getelementptr inbounds [32 x double], [32 x double]* %170, i32 0, i32 %171
  %173 = load double, double* %172, align 8
  %174 = fmul double %173, %162
  store double %174, double* %172, align 8
  br label %175

; <label>:175:                                    ; preds = %161
  %176 = load i32, i32* %12, align 4
  %177 = load <4 x i32>, <4 x i32>* %allocaVec33, align 16
  %Vop73 = add <4 x i32> %177, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop73, <4 x i32>* %allocaVec33
  %178 = add nsw i32 %176, 1
  store i32 %178, i32* %12, align 4
  br label %158

; <label>:179:                                    ; preds = %158
  br label %180

; <label>:180:                                    ; preds = %179, %130, %118
  %181 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %182 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %181, i32 0, i32 55
  %183 = load float, float* %182, align 4
  %184 = fpext float %183 to double
  %185 = load double, double* %20, align 8
  %186 = fcmp olt double %184, %185
  br i1 %186, label %187, label %237

; <label>:187:                                    ; preds = %180
  %188 = load double, double* %20, align 8
  %189 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %190 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %189, i32 0, i32 56
  %191 = load float, float* %190, align 4
  %192 = fpext float %191 to double
  %193 = fcmp olt double %188, %192
  br i1 %193, label %194, label %237

; <label>:194:                                    ; preds = %187
  %195 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %196 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %195, i32 0, i32 56
  %197 = load float, float* %196, align 4
  %198 = fpext float %197 to double
  %199 = load double, double* %20, align 8
  store double %198, double* %CastInst14
  %200 = load double, double* %CastInst14, align 4
  %insertCast74 = insertelement <2 x double> undef, double %200, i32 0
  %insertCast75 = insertelement <2 x double> %insertCast74, double %200, i32 1
  store <2 x double> %insertCast75, <2 x double>* %CastInstVec15, align 4
  %201 = load <2 x double>, <2 x double>* %CastInstVec15, align 4
  %202 = load <2 x double>, <2 x double>* %allocaVec37, align 16
  %Vop76 = fsub <2 x double> %201, %202
  %203 = fsub double %198, %199
  %Vop77 = fmul <2 x double> <double 0x3FF921FB54442D18, double 0x3FF921FB54442D18>, %Vop76
  %204 = fmul double 0x3FF921FB54442D18, %203
  %205 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %206 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %205, i32 0, i32 56
  %207 = load float, float* %206, align 4
  %208 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %209 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %208, i32 0, i32 55
  %210 = load float, float* %209, align 4
  %211 = fsub float %207, %210
  %212 = fpext float %211 to double
  %213 = fdiv double %204, %212
  %214 = call arm_aapcscc double @cos(double %213) #7
  store double %214, double* %19, align 8
  store i32 0, i32* %12, align 4
  br label %215

; <label>:215:                                    ; preds = %232, %194
  %216 = load i32, i32* %12, align 4
  %217 = icmp slt i32 %216, 18
  br i1 %217, label %218, label %236

; <label>:218:                                    ; preds = %215
  %219 = load double, double* %19, align 8
  %insertElmt78 = insertelement <2 x double> undef, double %219, i32 0
  %insertElmt79 = insertelement <2 x double> %insertElmt78, double %219, i32 1
  store <2 x double> %insertElmt79, <2 x double>* %allocaVec36, align 16
  %220 = load i32, i32* %13, align 4
  %221 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %220
  %222 = load i32, i32* %11, align 4
  %insertElmt80 = insertelement <4 x i32> undef, i32 %222, i32 0
  %insertElmt81 = insertelement <4 x i32> %insertElmt80, i32 %222, i32 1
  %insertElmt82 = insertelement <4 x i32> %insertElmt81, i32 %222, i32 2
  %insertElmt83 = insertelement <4 x i32> %insertElmt82, i32 %222, i32 3
  store <4 x i32> %insertElmt83, <4 x i32>* %allocaVec32, align 16
  %223 = load <4 x i32>, <4 x i32>* %allocaVec32, align 16
  %Vop84 = sub <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %223
  %224 = sub nsw i32 1, %222
  %225 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %221, i32 0, i32 %224
  %226 = load i32, i32* %12, align 4
  %227 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %225, i32 0, i32 %226
  %228 = load i32, i32* %15, align 4
  %229 = getelementptr inbounds [32 x double], [32 x double]* %227, i32 0, i32 %228
  %230 = load double, double* %229, align 8
  %231 = fmul double %230, %219
  store double %231, double* %229, align 8
  br label %232

; <label>:232:                                    ; preds = %218
  %233 = load i32, i32* %12, align 4
  %234 = load <4 x i32>, <4 x i32>* %allocaVec33, align 16
  %Vop85 = add <4 x i32> %234, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop85, <4 x i32>* %allocaVec33
  %235 = add nsw i32 %233, 1
  store i32 %235, i32* %12, align 4
  br label %215

; <label>:236:                                    ; preds = %215
  br label %237

; <label>:237:                                    ; preds = %236, %187, %180
  br label %238

; <label>:238:                                    ; preds = %237
  %239 = load i32, i32* %15, align 4
  %240 = load <4 x i32>, <4 x i32>* %allocaVec35, align 16
  %Vop86 = add <4 x i32> %240, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop86, <4 x i32>* %allocaVec35
  %241 = add nsw i32 %239, 1
  store i32 %241, i32* %15, align 4
  br label %112

; <label>:242:                                    ; preds = %112
  br label %243

; <label>:243:                                    ; preds = %242, %102
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec35
  store i32 0, i32* %15, align 4
  br label %244

; <label>:244:                                    ; preds = %606, %243
  %245 = load i32, i32* %15, align 4
  %246 = icmp slt i32 %245, 32
  br i1 %246, label %247, label %609

; <label>:247:                                    ; preds = %244
  %248 = load %struct.gr_info*, %struct.gr_info** %17, align 4
  %249 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %248, i32 0, i32 6
  %250 = load i32, i32* %249, align 4
  store i32 %250, i32* %21, align 4
  %251 = load i32, i32* %15, align 4
  %252 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %253 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %252, i32 0, i32 57
  %254 = load i32, i32* %253, align 4
  %255 = icmp sge i32 %251, %254
  br i1 %255, label %262, label %256

; <label>:256:                                    ; preds = %247
  %257 = load i32, i32* %15, align 4
  %258 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %259 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %258, i32 0, i32 58
  %260 = load i32, i32* %259, align 4
  %261 = icmp sle i32 %257, %260
  br i1 %261, label %262, label %265

; <label>:262:                                    ; preds = %256, %247
  %263 = load double*, double** %16, align 4
  %264 = bitcast double* %263 to i8*
  call void @llvm.memset.p0i8.i32(i8* %264, i8 0, i32 144, i32 1, i1 false)
  br label %528

; <label>:265:                                    ; preds = %256
  %266 = load i32, i32* %21, align 4
  %267 = icmp eq i32 %266, 2
  br i1 %267, label %268, label %442

; <label>:268:                                    ; preds = %265
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %allocaVec33
  store i32 2, i32* %12, align 4
  br label %269

; <label>:269:                                    ; preds = %436, %268
  %270 = load i32, i32* %12, align 4
  %271 = icmp sge i32 %270, 0
  br i1 %271, label %272, label %440

; <label>:272:                                    ; preds = %269
  %273 = load i32, i32* %12, align 4
  %274 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2), i32 0, i32 %273
  %275 = load double, double* %274, align 8
  store double %275, double* %22, align 8
  %276 = load i32, i32* %13, align 4
  %277 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %276
  %278 = load i32, i32* %11, align 4
  %279 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %277, i32 0, i32 %278
  %280 = load i32, i32* %12, align 4
  %281 = load <4 x i32>, <4 x i32>* %allocaVec33, align 16
  %Vop87 = add <4 x i32> %281, <i32 6, i32 6, i32 6, i32 6>
  %282 = add nsw i32 %280, 6
  %283 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %279, i32 0, i32 %282
  %284 = load i32, i32* %15, align 4
  %285 = getelementptr inbounds [32 x double], [32 x double]* %283, i32 0, i32 %284
  %286 = load double, double* %285, align 8
  %287 = load double, double* %22, align 8
  %288 = fmul double %286, %287
  %289 = load i32, i32* %13, align 4
  %290 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %289
  %291 = load i32, i32* %11, align 4
  %292 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %290, i32 0, i32 %291
  %293 = load i32, i32* %12, align 4
  %294 = sub nsw i32 11, %293
  %295 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %292, i32 0, i32 %294
  %296 = load i32, i32* %15, align 4
  %297 = getelementptr inbounds [32 x double], [32 x double]* %295, i32 0, i32 %296
  %298 = load double, double* %297, align 8
  %299 = fsub double %288, %298
  %300 = load i32, i32* %12, align 4
  %301 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4), i32 %300
  store double %299, double* %301, align 8
  %302 = load i32, i32* %13, align 4
  %303 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %302
  %304 = load i32, i32* %11, align 4
  %305 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %303, i32 0, i32 %304
  %306 = load i32, i32* %12, align 4
  %307 = add nsw i32 %306, 12
  %308 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %305, i32 0, i32 %307
  %309 = load i32, i32* %15, align 4
  %310 = getelementptr inbounds [32 x double], [32 x double]* %308, i32 0, i32 %309
  %311 = load double, double* %310, align 8
  %312 = load i32, i32* %13, align 4
  %313 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %312
  %314 = load i32, i32* %11, align 4
  %315 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %313, i32 0, i32 %314
  %316 = load i32, i32* %12, align 4
  %317 = sub nsw i32 17, %316
  %318 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %315, i32 0, i32 %317
  %319 = load i32, i32* %15, align 4
  %320 = getelementptr inbounds [32 x double], [32 x double]* %318, i32 0, i32 %319
  %321 = load double, double* %320, align 8
  %322 = load double, double* %22, align 8
  %323 = fmul double %321, %322
  %324 = fadd double %311, %323
  %325 = load i32, i32* %12, align 4
  %326 = add nsw i32 %325, 3
  %327 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4), i32 %326
  store double %324, double* %327, align 8
  %328 = load i32, i32* %13, align 4
  %329 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %328
  %330 = load i32, i32* %11, align 4
  %331 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %329, i32 0, i32 %330
  %332 = load i32, i32* %12, align 4
  %333 = add nsw i32 %332, 12
  %334 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %331, i32 0, i32 %333
  %335 = load i32, i32* %15, align 4
  %336 = getelementptr inbounds [32 x double], [32 x double]* %334, i32 0, i32 %335
  %337 = load double, double* %336, align 8
  %338 = load double, double* %22, align 8
  %339 = fmul double %337, %338
  %340 = load i32, i32* %13, align 4
  %341 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %340
  %342 = load i32, i32* %11, align 4
  %343 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %341, i32 0, i32 %342
  %344 = load i32, i32* %12, align 4
  %345 = sub nsw i32 17, %344
  %346 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %343, i32 0, i32 %345
  %347 = load i32, i32* %15, align 4
  %348 = getelementptr inbounds [32 x double], [32 x double]* %346, i32 0, i32 %347
  %349 = load double, double* %348, align 8
  %350 = fsub double %339, %349
  %351 = load i32, i32* %12, align 4
  %352 = add nsw i32 %351, 6
  %353 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4), i32 %352
  store double %350, double* %353, align 8
  %354 = load i32, i32* %13, align 4
  %355 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %354
  %356 = load i32, i32* %11, align 4
  %357 = sub nsw i32 1, %356
  %358 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %355, i32 0, i32 %357
  %359 = load i32, i32* %12, align 4
  %360 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %358, i32 0, i32 %359
  %361 = load i32, i32* %15, align 4
  %362 = getelementptr inbounds [32 x double], [32 x double]* %360, i32 0, i32 %361
  %363 = load double, double* %362, align 8
  %364 = load i32, i32* %13, align 4
  %365 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %364
  %366 = load i32, i32* %11, align 4
  %367 = sub nsw i32 1, %366
  %368 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %365, i32 0, i32 %367
  %369 = load i32, i32* %12, align 4
  %370 = sub nsw i32 5, %369
  %371 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %368, i32 0, i32 %370
  %372 = load i32, i32* %15, align 4
  %373 = getelementptr inbounds [32 x double], [32 x double]* %371, i32 0, i32 %372
  %374 = load double, double* %373, align 8
  %375 = load double, double* %22, align 8
  %376 = fmul double %374, %375
  %377 = fadd double %363, %376
  %378 = load i32, i32* %12, align 4
  %379 = add nsw i32 %378, 9
  %380 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4), i32 %379
  store double %377, double* %380, align 8
  %381 = load i32, i32* %13, align 4
  %382 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %381
  %383 = load i32, i32* %11, align 4
  %384 = sub nsw i32 1, %383
  %385 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %382, i32 0, i32 %384
  %386 = load i32, i32* %12, align 4
  %387 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %385, i32 0, i32 %386
  %388 = load i32, i32* %15, align 4
  %389 = getelementptr inbounds [32 x double], [32 x double]* %387, i32 0, i32 %388
  %390 = load double, double* %389, align 8
  %391 = load double, double* %22, align 8
  %392 = fmul double %390, %391
  %393 = load i32, i32* %13, align 4
  %394 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %393
  %395 = load i32, i32* %11, align 4
  %396 = sub nsw i32 1, %395
  %397 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %394, i32 0, i32 %396
  %398 = load i32, i32* %12, align 4
  %399 = sub nsw i32 5, %398
  %400 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %397, i32 0, i32 %399
  %401 = load i32, i32* %15, align 4
  %402 = getelementptr inbounds [32 x double], [32 x double]* %400, i32 0, i32 %401
  %403 = load double, double* %402, align 8
  %404 = fsub double %392, %403
  %405 = load i32, i32* %12, align 4
  %406 = add nsw i32 %405, 12
  %407 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4), i32 %406
  store double %404, double* %407, align 8
  %408 = load i32, i32* %13, align 4
  %409 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %408
  %410 = load i32, i32* %11, align 4
  %411 = sub nsw i32 1, %410
  %412 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %409, i32 0, i32 %411
  %413 = load i32, i32* %12, align 4
  %414 = add nsw i32 %413, 6
  %415 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %412, i32 0, i32 %414
  %416 = load i32, i32* %15, align 4
  %417 = getelementptr inbounds [32 x double], [32 x double]* %415, i32 0, i32 %416
  %418 = load double, double* %417, align 8
  %419 = load i32, i32* %13, align 4
  %420 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %419
  %421 = load i32, i32* %11, align 4
  %422 = sub nsw i32 1, %421
  %423 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %420, i32 0, i32 %422
  %424 = load i32, i32* %12, align 4
  %425 = sub nsw i32 11, %424
  %426 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %423, i32 0, i32 %425
  %427 = load i32, i32* %15, align 4
  %428 = getelementptr inbounds [32 x double], [32 x double]* %426, i32 0, i32 %427
  %429 = load double, double* %428, align 8
  %430 = load double, double* %22, align 8
  %431 = fmul double %429, %430
  %432 = fadd double %418, %431
  %433 = load i32, i32* %12, align 4
  %434 = add nsw i32 %433, 15
  %435 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4), i32 %434
  store double %432, double* %435, align 8
  br label %436

; <label>:436:                                    ; preds = %272
  %437 = load i32, i32* %12, align 4
  %438 = load <4 x i32>, <4 x i32>* %allocaVec33, align 16
  %Vop88 = add <4 x i32> %438, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop88, <4 x i32>* %allocaVec33
  %439 = add nsw i32 %437, -1
  store i32 %439, i32* %12, align 4
  br label %269

; <label>:440:                                    ; preds = %269
  %441 = load double*, double** %16, align 4
  call arm_aapcscc void @mdct_short(double* %441, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4))
  br label %527

; <label>:442:                                    ; preds = %265
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %allocaVec33
  store i32 8, i32* %12, align 4
  br label %443

; <label>:443:                                    ; preds = %521, %442
  %444 = load i32, i32* %12, align 4
  %445 = icmp sge i32 %444, 0
  br i1 %445, label %446, label %525

; <label>:446:                                    ; preds = %443
  %447 = load i32, i32* %21, align 4
  %448 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 %447
  %449 = load i32, i32* %12, align 4
  %450 = getelementptr inbounds [36 x double], [36 x double]* %448, i32 0, i32 %449
  %451 = load double, double* %450, align 8
  %452 = load i32, i32* %13, align 4
  %453 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %452
  %454 = load i32, i32* %11, align 4
  %455 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %453, i32 0, i32 %454
  %456 = load i32, i32* %12, align 4
  %457 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %455, i32 0, i32 %456
  %458 = load i32, i32* %15, align 4
  %459 = getelementptr inbounds [32 x double], [32 x double]* %457, i32 0, i32 %458
  %460 = load double, double* %459, align 8
  %461 = fmul double %451, %460
  %462 = load i32, i32* %21, align 4
  %463 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 %462
  %464 = load i32, i32* %12, align 4
  %465 = add nsw i32 %464, 9
  %466 = getelementptr inbounds [36 x double], [36 x double]* %463, i32 0, i32 %465
  %467 = load double, double* %466, align 8
  %468 = load i32, i32* %13, align 4
  %469 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %468
  %470 = load i32, i32* %11, align 4
  %471 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %469, i32 0, i32 %470
  %472 = load i32, i32* %12, align 4
  %473 = sub nsw i32 17, %472
  %474 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %471, i32 0, i32 %473
  %475 = load i32, i32* %15, align 4
  %476 = getelementptr inbounds [32 x double], [32 x double]* %474, i32 0, i32 %475
  %477 = load double, double* %476, align 8
  %478 = fmul double %467, %477
  %479 = fsub double %461, %478
  %480 = load i32, i32* %12, align 4
  %481 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4), i32 %480
  store double %479, double* %481, align 8
  %482 = load i32, i32* %21, align 4
  %483 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 %482
  %484 = load i32, i32* %12, align 4
  %485 = add nsw i32 %484, 18
  %486 = getelementptr inbounds [36 x double], [36 x double]* %483, i32 0, i32 %485
  %487 = load double, double* %486, align 8
  %488 = load i32, i32* %13, align 4
  %489 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %488
  %490 = load i32, i32* %11, align 4
  %491 = sub nsw i32 1, %490
  %492 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %489, i32 0, i32 %491
  %493 = load i32, i32* %12, align 4
  %494 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %492, i32 0, i32 %493
  %495 = load i32, i32* %15, align 4
  %496 = getelementptr inbounds [32 x double], [32 x double]* %494, i32 0, i32 %495
  %497 = load double, double* %496, align 8
  %498 = fmul double %487, %497
  %499 = load i32, i32* %21, align 4
  %500 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 %499
  %501 = load i32, i32* %12, align 4
  %502 = add nsw i32 %501, 27
  %503 = getelementptr inbounds [36 x double], [36 x double]* %500, i32 0, i32 %502
  %504 = load double, double* %503, align 8
  %505 = load i32, i32* %13, align 4
  %506 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %505
  %507 = load i32, i32* %11, align 4
  %508 = sub nsw i32 1, %507
  %509 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %506, i32 0, i32 %508
  %510 = load i32, i32* %12, align 4
  %511 = sub nsw i32 17, %510
  %512 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %509, i32 0, i32 %511
  %513 = load i32, i32* %15, align 4
  %514 = getelementptr inbounds [32 x double], [32 x double]* %512, i32 0, i32 %513
  %515 = load double, double* %514, align 8
  %516 = fmul double %504, %515
  %517 = fadd double %498, %516
  %518 = load i32, i32* %12, align 4
  %519 = add nsw i32 9, %518
  %520 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4), i32 %519
  store double %517, double* %520, align 8
  br label %521

; <label>:521:                                    ; preds = %446
  %522 = load i32, i32* %12, align 4
  %523 = load <4 x i32>, <4 x i32>* %allocaVec33, align 16
  %Vop89 = add <4 x i32> %523, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop89, <4 x i32>* %allocaVec33
  %524 = add nsw i32 %522, -1
  store i32 %524, i32* %12, align 4
  br label %443

; <label>:525:                                    ; preds = %443
  %526 = load double*, double** %16, align 4
  call arm_aapcscc void @mdct_long(double* %526, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4))
  br label %527

; <label>:527:                                    ; preds = %525, %440
  br label %528

; <label>:528:                                    ; preds = %527, %262
  %529 = load i32, i32* %21, align 4
  %530 = icmp ne i32 %529, 2
  br i1 %530, label %531, label %596

; <label>:531:                                    ; preds = %528
  %532 = load i32, i32* %15, align 4
  %533 = icmp eq i32 %532, 0
  br i1 %533, label %534, label %535

; <label>:534:                                    ; preds = %531
  br label %597

; <label>:535:                                    ; preds = %531
  store <4 x i32> <i32 7, i32 7, i32 7, i32 7>, <4 x i32>* %allocaVec33
  store i32 7, i32* %12, align 4
  br label %536

; <label>:536:                                    ; preds = %594, %535
  %537 = load i32, i32* %12, align 4
  %538 = icmp sge i32 %537, 0
  br i1 %538, label %539, label %595

; <label>:539:                                    ; preds = %536
  %540 = load double*, double** %16, align 4
  %541 = load i32, i32* %12, align 4
  %542 = getelementptr inbounds double, double* %540, i32 %541
  %543 = load double, double* %542, align 8
  %544 = load i32, i32* %12, align 4
  %545 = getelementptr inbounds [8 x double], [8 x double]* @ca, i32 0, i32 %544
  %546 = load double, double* %545, align 8
  %547 = fmul double %543, %546
  %548 = load double*, double** %16, align 4
  %549 = load i32, i32* %12, align 4
  %550 = sub nsw i32 -1, %549
  %551 = getelementptr inbounds double, double* %548, i32 %550
  %552 = load double, double* %551, align 8
  %553 = load i32, i32* %12, align 4
  %554 = getelementptr inbounds [8 x double], [8 x double]* @cs, i32 0, i32 %553
  %555 = load double, double* %554, align 8
  %556 = fmul double %552, %555
  %557 = fadd double %547, %556
  store double %557, double* %23, align 8
  %558 = load double*, double** %16, align 4
  %559 = load i32, i32* %12, align 4
  %560 = getelementptr inbounds double, double* %558, i32 %559
  %561 = load double, double* %560, align 8
  %562 = load i32, i32* %12, align 4
  %563 = getelementptr inbounds [8 x double], [8 x double]* @cs, i32 0, i32 %562
  %564 = load double, double* %563, align 8
  %565 = fmul double %561, %564
  %566 = load double*, double** %16, align 4
  %567 = load i32, i32* %12, align 4
  %568 = sub nsw i32 -1, %567
  %569 = getelementptr inbounds double, double* %566, i32 %568
  %570 = load double, double* %569, align 8
  %571 = load i32, i32* %12, align 4
  %572 = getelementptr inbounds [8 x double], [8 x double]* @ca, i32 0, i32 %571
  %573 = load double, double* %572, align 8
  %574 = fmul double %570, %573
  %575 = fsub double %565, %574
  store double %575, double* %24, align 8
  %576 = load double, double* %23, align 8
  %577 = load double*, double** %16, align 4
  %578 = load i32, i32* %12, align 4
  %579 = sub nsw i32 -1, %578
  %580 = getelementptr inbounds double, double* %577, i32 %579
  store double %576, double* %580, align 8
  %581 = load double, double* %24, align 8
  %582 = load double*, double** %16, align 4
  %583 = load i32, i32* %12, align 4
  %584 = getelementptr inbounds double, double* %582, i32 %583
  store double %581, double* %584, align 8
  br label %585

; <label>:585:                                    ; preds = %539
  %586 = load i32, i32* %12, align 4
  %587 = load <4 x i32>, <4 x i32>* %allocaVec33, align 16
  %Vop90 = add <4 x i32> %587, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop90, <4 x i32>* %allocaVec33
  %588 = load <4 x i32>, <4 x i32>* %allocaVec33, align 4
  %extractE = extractelement <4 x i32> %588, i64 0
  %extractE91 = extractelement <4 x i32> %588, i64 1
  %extractE92 = extractelement <4 x i32> %588, i64 2
  %sum = add i32 %extractE, %extractE91
  %sum93 = add i32 %sum, %extractE92
  %589 = add nsw i32 %586, -1
  %Fmul = mul i32 %589, 3
  store i32 %589, i32* %Recovery6
  %Fcmp = icmp ne i32 %sum93, %Fmul
  br i1 %Fcmp, label %590, label %594

; <label>:590:                                    ; preds = %585
  %remThree = sdiv i32 %sum93, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %591, label %592

; <label>:591:                                    ; preds = %590
  store i32 %589, i32* %Recovery6, align 4
  br label %593

; <label>:592:                                    ; preds = %590
  store i32 %extractE, i32* %Recovery6, align 4
  br label %593

; <label>:593:                                    ; preds = %592, %591
  br label %594

; <label>:594:                                    ; preds = %585, %593
  %ReplaceInst = load i32, i32* %Recovery6, align 4
  store i32 %ReplaceInst, i32* %12, align 4
  br label %536

; <label>:595:                                    ; preds = %536
  br label %596

; <label>:596:                                    ; preds = %595, %528
  br label %597

; <label>:597:                                    ; preds = %596, %534
  %598 = load i32, i32* %15, align 4
  %599 = load <4 x i32>, <4 x i32>* %allocaVec35, align 16
  %Vop94 = add <4 x i32> %599, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop94, <4 x i32>* %allocaVec35
  %600 = load <4 x i32>, <4 x i32>* %allocaVec35, align 4
  %extractE96 = extractelement <4 x i32> %600, i64 0
  %extractE97 = extractelement <4 x i32> %600, i64 1
  %extractE98 = extractelement <4 x i32> %600, i64 2
  %sum99 = add i32 %extractE96, %extractE97
  %sum100 = add i32 %sum99, %extractE98
  %601 = add nsw i32 %598, 1
  %Fmul95 = mul i32 %601, 3
  store i32 %601, i32* %Recovery7
  %Fcmp101 = icmp ne i32 %sum100, %Fmul95
  br i1 %Fcmp101, label %602, label %606

; <label>:602:                                    ; preds = %597
  %remThree126 = sdiv i32 %sum100, %extractE96
  %FcmpThree127 = icmp ne i32 %remThree126, 3
  br i1 %FcmpThree127, label %603, label %604

; <label>:603:                                    ; preds = %602
  store i32 %601, i32* %Recovery7, align 4
  br label %605

; <label>:604:                                    ; preds = %602
  store i32 %extractE96, i32* %Recovery7, align 4
  br label %605

; <label>:605:                                    ; preds = %604, %603
  br label %606

; <label>:606:                                    ; preds = %597, %605
  %ReplaceInst132 = load i32, i32* %Recovery7, align 4
  store i32 %ReplaceInst132, i32* %15, align 4
  %607 = load double*, double** %16, align 4
  %608 = getelementptr inbounds double, double* %607, i32 18
  store double* %608, double** %16, align 4
  br label %244

; <label>:609:                                    ; preds = %244
  br label %610

; <label>:610:                                    ; preds = %609
  %611 = load i32, i32* %11, align 4
  %insertElmt102 = insertelement <4 x i32> undef, i32 %611, i32 0
  %insertElmt103 = insertelement <4 x i32> %insertElmt102, i32 %611, i32 1
  %insertElmt104 = insertelement <4 x i32> %insertElmt103, i32 %611, i32 2
  %insertElmt105 = insertelement <4 x i32> %insertElmt104, i32 %611, i32 3
  store <4 x i32> %insertElmt105, <4 x i32>* %allocaVec32, align 16
  %612 = load <4 x i32>, <4 x i32>* %allocaVec32, align 16
  %Vop106 = add <4 x i32> %612, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop106, <4 x i32>* %allocaVec32
  %613 = load <4 x i32>, <4 x i32>* %allocaVec32, align 4
  %extractE108 = extractelement <4 x i32> %613, i64 0
  %extractE109 = extractelement <4 x i32> %613, i64 1
  %extractE110 = extractelement <4 x i32> %613, i64 2
  %sum111 = add i32 %extractE108, %extractE109
  %sum112 = add i32 %sum111, %extractE110
  %614 = add nsw i32 %611, 1
  %Fmul107 = mul i32 %614, 3
  store i32 %614, i32* %Recovery8
  %Fcmp113 = icmp ne i32 %sum112, %Fmul107
  br i1 %Fcmp113, label %615, label %619

; <label>:615:                                    ; preds = %610
  %remThree128 = sdiv i32 %sum112, %extractE108
  %FcmpThree129 = icmp ne i32 %remThree128, 3
  br i1 %FcmpThree129, label %616, label %617

; <label>:616:                                    ; preds = %615
  store i32 %614, i32* %Recovery8, align 4
  br label %618

; <label>:617:                                    ; preds = %615
  store i32 %extractE108, i32* %Recovery8, align 4
  br label %618

; <label>:618:                                    ; preds = %617, %616
  br label %619

; <label>:619:                                    ; preds = %610, %618
  %ReplaceInst133 = load i32, i32* %Recovery8, align 4
  store i32 %ReplaceInst133, i32* %11, align 4
  br label %39

; <label>:620:                                    ; preds = %39
  %621 = load i16*, i16** %8, align 4
  store i16* %621, i16** %14, align 4
  %622 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %623 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %622, i32 0, i32 45
  %624 = load i32, i32* %623, align 4
  %625 = icmp eq i32 %624, 1
  br i1 %625, label %626, label %637

; <label>:626:                                    ; preds = %620
  %627 = load i32, i32* %13, align 4
  %628 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %627
  %629 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %628, i32 0, i32 0
  %630 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %629, i32 0, i32 0
  %631 = bitcast [32 x double]* %630 to i8*
  %632 = load i32, i32* %13, align 4
  %633 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %632
  %634 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %633, i32 0, i32 1
  %635 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %634, i32 0, i32 0
  %636 = bitcast [32 x double]* %635 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %631, i8* %636, i32 4608, i32 8, i1 false)
  br label %637

; <label>:637:                                    ; preds = %626, %620
  br label %638

; <label>:638:                                    ; preds = %637
  %639 = load i32, i32* %13, align 4
  %insertElmt114 = insertelement <4 x i32> undef, i32 %639, i32 0
  %insertElmt115 = insertelement <4 x i32> %insertElmt114, i32 %639, i32 1
  %insertElmt116 = insertelement <4 x i32> %insertElmt115, i32 %639, i32 2
  %insertElmt117 = insertelement <4 x i32> %insertElmt116, i32 %639, i32 3
  store <4 x i32> %insertElmt117, <4 x i32>* %allocaVec34, align 16
  %640 = load <4 x i32>, <4 x i32>* %allocaVec34, align 16
  %Vop118 = add <4 x i32> %640, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop118, <4 x i32>* %allocaVec34
  %641 = load <4 x i32>, <4 x i32>* %allocaVec34, align 4
  %extractE120 = extractelement <4 x i32> %641, i64 0
  %extractE121 = extractelement <4 x i32> %641, i64 1
  %extractE122 = extractelement <4 x i32> %641, i64 2
  %sum123 = add i32 %extractE120, %extractE121
  %sum124 = add i32 %sum123, %extractE122
  %642 = add nsw i32 %639, 1
  %Fmul119 = mul i32 %642, 3
  store i32 %642, i32* %Recovery9
  %Fcmp125 = icmp ne i32 %sum124, %Fmul119
  br i1 %Fcmp125, label %643, label %647

; <label>:643:                                    ; preds = %638
  %remThree130 = sdiv i32 %sum124, %extractE120
  %FcmpThree131 = icmp ne i32 %remThree130, 3
  br i1 %FcmpThree131, label %644, label %645

; <label>:644:                                    ; preds = %643
  store i32 %642, i32* %Recovery9, align 4
  br label %646

; <label>:645:                                    ; preds = %643
  store i32 %extractE120, i32* %Recovery9, align 4
  br label %646

; <label>:646:                                    ; preds = %645, %644
  br label %647

; <label>:647:                                    ; preds = %638, %646
  %ReplaceInst134 = load i32, i32* %Recovery9, align 4
  store i32 %ReplaceInst134, i32* %13, align 4
  br label %32

; <label>:648:                                    ; preds = %32
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @mdct_init48() #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec61 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec62 = alloca <2 x double>, align 16
  %Recovery2 = alloca double, align 8
  %allocaVec63 = alloca <2 x double>, align 16
  %Recovery3 = alloca double, align 8
  %allocaVec64 = alloca <2 x double>, align 16
  %Recovery4 = alloca double, align 8
  %allocaVec65 = alloca <4 x i32>, align 16
  %Recovery5 = alloca i32, align 4
  %allocaVec66 = alloca <4 x i32>, align 16
  %Recovery6 = alloca i32, align 4
  %allocaVec67 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec68 = alloca <2 x double>, align 16
  %CastInst7 = alloca double, align 4
  %CastInstVec8 = alloca <2 x double>, align 16
  %allocaVec69 = alloca <2 x double>, align 16
  %CastInst9 = alloca double, align 4
  %CastInstVec10 = alloca <2 x double>, align 16
  %allocaVec70 = alloca <2 x double>, align 16
  %CastInst11 = alloca double, align 4
  %CastInstVec12 = alloca <2 x double>, align 16
  %allocaVec71 = alloca <2 x double>, align 16
  %CastInst13 = alloca double, align 4
  %CastInstVec14 = alloca <2 x double>, align 16
  %allocaVec72 = alloca <2 x double>, align 16
  %CastInst15 = alloca double, align 4
  %CastInstVec16 = alloca <2 x double>, align 16
  %allocaVec73 = alloca <2 x double>, align 16
  %CastInst17 = alloca double, align 4
  %CastInstVec18 = alloca <2 x double>, align 16
  %allocaVec74 = alloca <2 x double>, align 16
  %CastInst19 = alloca double, align 4
  %CastInstVec20 = alloca <2 x double>, align 16
  %allocaVec75 = alloca <2 x double>, align 16
  %CastInst21 = alloca double, align 4
  %CastInstVec22 = alloca <2 x double>, align 16
  %allocaVec76 = alloca <2 x double>, align 16
  %CastInst23 = alloca double, align 4
  %CastInstVec24 = alloca <2 x double>, align 16
  %allocaVec77 = alloca <2 x double>, align 16
  %CastInst25 = alloca double, align 4
  %CastInstVec26 = alloca <2 x double>, align 16
  %allocaVec78 = alloca <2 x double>, align 16
  %CastInst27 = alloca double, align 4
  %CastInstVec28 = alloca <2 x double>, align 16
  %allocaVec79 = alloca <2 x double>, align 16
  %CastInst29 = alloca double, align 4
  %CastInstVec30 = alloca <2 x double>, align 16
  %allocaVec80 = alloca <2 x double>, align 16
  %CastInst31 = alloca double, align 4
  %CastInstVec32 = alloca <2 x double>, align 16
  %allocaVec81 = alloca <2 x double>, align 16
  %CastInst33 = alloca double, align 4
  %CastInstVec34 = alloca <2 x double>, align 16
  %allocaVec82 = alloca <2 x double>, align 16
  %CastInst35 = alloca double, align 4
  %CastInstVec36 = alloca <2 x double>, align 16
  %allocaVec83 = alloca <2 x double>, align 16
  %CastInst37 = alloca double, align 4
  %CastInstVec38 = alloca <2 x double>, align 16
  %allocaVec84 = alloca <2 x double>, align 16
  %CastInst39 = alloca double, align 4
  %CastInstVec40 = alloca <2 x double>, align 16
  %allocaVec85 = alloca <2 x double>, align 16
  %CastInst41 = alloca double, align 4
  %CastInstVec42 = alloca <2 x double>, align 16
  %allocaVec86 = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %allocaVec87 = alloca <2 x double>, align 16
  %CallInst43 = alloca double, align 4
  %CallInstVec44 = alloca <2 x double>, align 16
  %allocaVec88 = alloca <2 x double>, align 16
  %CallInst45 = alloca double, align 4
  %CallInstVec46 = alloca <2 x double>, align 16
  %allocaVec89 = alloca <2 x double>, align 16
  %CallInst47 = alloca double, align 4
  %CallInstVec48 = alloca <2 x double>, align 16
  %allocaVec90 = alloca <2 x double>, align 16
  %CallInst49 = alloca double, align 4
  %CallInstVec50 = alloca <2 x double>, align 16
  %allocaVec91 = alloca <2 x double>, align 16
  %CallInst51 = alloca double, align 4
  %CallInstVec52 = alloca <2 x double>, align 16
  %allocaVec92 = alloca <2 x double>, align 16
  %CallInst53 = alloca double, align 4
  %CallInstVec54 = alloca <2 x double>, align 16
  %allocaVec93 = alloca <2 x double>, align 16
  %CallInst55 = alloca double, align 4
  %CallInstVec56 = alloca <2 x double>, align 16
  %allocaVec94 = alloca <2 x double>, align 16
  %CallInst57 = alloca double, align 4
  %CallInstVec58 = alloca <2 x double>, align 16
  %allocaVec95 = alloca <2 x double>, align 16
  %CallInst59 = alloca double, align 4
  %CallInstVec60 = alloca <2 x double>, align 16
  %allocaVec96 = alloca <4 x i32>, align 16
  %1 = alloca i32, align 4
  %allocaVec97 = alloca <4 x i32>, align 16
  %2 = alloca i32, align 4
  %allocaVec98 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %allocaVec99 = alloca <2 x double>, align 16
  %4 = alloca double, align 8
  %allocaVec100 = alloca <2 x double>, align 16
  %5 = alloca double, align 8
  %6 = alloca double*, align 4
  %allocaVec101 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %8 = alloca double*, align 4
  %9 = alloca double*, align 4
  %10 = alloca [31 x double], align 8
  %allocaVec102 = alloca <2 x double>, align 16
  %11 = alloca double, align 8
  %allocaVec103 = alloca <2 x double>, align 16
  %12 = alloca double, align 8
  %allocaVec104 = alloca <2 x double>, align 16
  %13 = alloca double, align 8
  %allocaVec105 = alloca <2 x double>, align 16
  %14 = alloca double, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec97
  store i32 0, i32* %2, align 4
  br label %15

; <label>:15:                                     ; preds = %40, %0
  %16 = load i32, i32* %2, align 4
  %17 = icmp slt i32 %16, 8
  br i1 %17, label %18, label %44

; <label>:18:                                     ; preds = %15
  %19 = load i32, i32* %2, align 4
  %20 = getelementptr inbounds [8 x double], [8 x double]* @mdct_init48.c, i32 0, i32 %19
  %21 = load double, double* %20, align 8
  %22 = load i32, i32* %2, align 4
  %23 = getelementptr inbounds [8 x double], [8 x double]* @mdct_init48.c, i32 0, i32 %22
  %24 = load double, double* %23, align 8
  %25 = fmul double %21, %24
  %26 = fadd double 1.000000e+00, %25
  store double %26, double* %4, align 8
  %27 = load double, double* %4, align 8
  %28 = call arm_aapcscc double @sqrt(double %27) #7
  store double %28, double* %4, align 8
  %29 = load i32, i32* %2, align 4
  %30 = getelementptr inbounds [8 x double], [8 x double]* @mdct_init48.c, i32 0, i32 %29
  %31 = load double, double* %30, align 8
  %32 = load double, double* %4, align 8
  %33 = fdiv double %31, %32
  %34 = load i32, i32* %2, align 4
  %35 = getelementptr inbounds [8 x double], [8 x double]* @ca, i32 0, i32 %34
  store double %33, double* %35, align 8
  %36 = load double, double* %4, align 8
  %37 = fdiv double 1.000000e+00, %36
  %38 = load i32, i32* %2, align 4
  %39 = getelementptr inbounds [8 x double], [8 x double]* @cs, i32 0, i32 %38
  store double %37, double* %39, align 8
  br label %40

; <label>:40:                                     ; preds = %18
  %41 = load i32, i32* %2, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %41, i32 0
  %insertElmt106 = insertelement <4 x i32> %insertElmt, i32 %41, i32 1
  %insertElmt107 = insertelement <4 x i32> %insertElmt106, i32 %41, i32 2
  %insertElmt108 = insertelement <4 x i32> %insertElmt107, i32 %41, i32 3
  store <4 x i32> %insertElmt108, <4 x i32>* %allocaVec97, align 16
  %42 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop = add <4 x i32> %42, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec97
  %43 = add nsw i32 %41, 1
  store i32 %43, i32* %2, align 4
  br label %15

; <label>:44:                                     ; preds = %15
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec96
  store i32 0, i32* %1, align 4
  br label %45

; <label>:45:                                     ; preds = %58, %44
  %46 = load i32, i32* %1, align 4
  %47 = icmp slt i32 %46, 36
  br i1 %47, label %48, label %62

; <label>:48:                                     ; preds = %45
  %49 = load i32, i32* %1, align 4
  %50 = sitofp i32 %49 to double
  store double %50, double* %CastInst
  %51 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %51, i32 0
  %insertCast109 = insertelement <2 x double> %insertCast, double %51, i32 1
  store <2 x double> %insertCast109, <2 x double>* %CastInstVec, align 4
  %52 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %Vop110 = fadd <2 x double> %52, <double 5.000000e-01, double 5.000000e-01>
  %53 = fadd double %50, 5.000000e-01
  %Vop111 = fmul <2 x double> <double 0x3FB657184AE74487, double 0x3FB657184AE74487>, %Vop110
  %54 = fmul double 0x3FB657184AE74487, %53
  %55 = call arm_aapcscc double @sin(double %54) #7
  %56 = load i32, i32* %1, align 4
  %57 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %56
  store double %55, double* %57, align 8
  br label %58

; <label>:58:                                     ; preds = %48
  %59 = load i32, i32* %1, align 4
  %insertElmt112 = insertelement <4 x i32> undef, i32 %59, i32 0
  %insertElmt113 = insertelement <4 x i32> %insertElmt112, i32 %59, i32 1
  %insertElmt114 = insertelement <4 x i32> %insertElmt113, i32 %59, i32 2
  %insertElmt115 = insertelement <4 x i32> %insertElmt114, i32 %59, i32 3
  store <4 x i32> %insertElmt115, <4 x i32>* %allocaVec96, align 16
  %60 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop116 = add <4 x i32> %60, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop116, <4 x i32>* %allocaVec96
  %61 = add nsw i32 %59, 1
  store i32 %61, i32* %1, align 4
  br label %45

; <label>:62:                                     ; preds = %45
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec96
  store i32 0, i32* %1, align 4
  br label %63

; <label>:63:                                     ; preds = %72, %62
  %64 = load i32, i32* %1, align 4
  %65 = icmp slt i32 %64, 18
  br i1 %65, label %66, label %76

; <label>:66:                                     ; preds = %63
  %67 = load i32, i32* %1, align 4
  %68 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %67
  %69 = load double, double* %68, align 8
  %70 = load i32, i32* %1, align 4
  %71 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %70
  store double %69, double* %71, align 8
  br label %72

; <label>:72:                                     ; preds = %66
  %73 = load i32, i32* %1, align 4
  %74 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop117 = add <4 x i32> %74, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop117, <4 x i32>* %allocaVec96
  %75 = add nsw i32 %73, 1
  store i32 %75, i32* %1, align 4
  br label %63

; <label>:76:                                     ; preds = %63
  br label %77

; <label>:77:                                     ; preds = %83, %76
  %78 = load i32, i32* %1, align 4
  %79 = icmp slt i32 %78, 24
  br i1 %79, label %80, label %87

; <label>:80:                                     ; preds = %77
  %81 = load i32, i32* %1, align 4
  %82 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %81
  store double 1.000000e+00, double* %82, align 8
  br label %83

; <label>:83:                                     ; preds = %80
  %84 = load i32, i32* %1, align 4
  %85 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop118 = add <4 x i32> %85, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop118, <4 x i32>* %allocaVec96
  %86 = add nsw i32 %84, 1
  store i32 %86, i32* %1, align 4
  br label %77

; <label>:87:                                     ; preds = %77
  br label %88

; <label>:88:                                     ; preds = %101, %87
  %89 = load i32, i32* %1, align 4
  %90 = icmp slt i32 %89, 30
  br i1 %90, label %91, label %105

; <label>:91:                                     ; preds = %88
  %92 = load i32, i32* %1, align 4
  %93 = sitofp i32 %92 to double
  store double %93, double* %CastInst7
  %94 = load double, double* %CastInst7, align 4
  %insertCast119 = insertelement <2 x double> undef, double %94, i32 0
  %insertCast120 = insertelement <2 x double> %insertCast119, double %94, i32 1
  store <2 x double> %insertCast120, <2 x double>* %CastInstVec8, align 4
  %95 = load <2 x double>, <2 x double>* %CastInstVec8, align 4
  %Vop121 = fadd <2 x double> %95, <double 5.000000e-01, double 5.000000e-01>
  %96 = fadd double %93, 5.000000e-01
  %Vop122 = fmul <2 x double> <double 0x3FD0C152382D7365, double 0x3FD0C152382D7365>, %Vop121
  %97 = fmul double 0x3FD0C152382D7365, %96
  %98 = call arm_aapcscc double @cos(double %97) #7
  %99 = load i32, i32* %1, align 4
  %100 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %99
  store double %98, double* %100, align 8
  br label %101

; <label>:101:                                    ; preds = %91
  %102 = load i32, i32* %1, align 4
  %103 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop123 = add <4 x i32> %103, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop123, <4 x i32>* %allocaVec96
  %104 = add nsw i32 %102, 1
  store i32 %104, i32* %1, align 4
  br label %88

; <label>:105:                                    ; preds = %88
  br label %106

; <label>:106:                                    ; preds = %112, %105
  %107 = load i32, i32* %1, align 4
  %108 = icmp slt i32 %107, 36
  br i1 %108, label %109, label %116

; <label>:109:                                    ; preds = %106
  %110 = load i32, i32* %1, align 4
  %111 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %110
  store double 0.000000e+00, double* %111, align 8
  br label %112

; <label>:112:                                    ; preds = %109
  %113 = load i32, i32* %1, align 4
  %114 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop124 = add <4 x i32> %114, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop124, <4 x i32>* %allocaVec96
  %115 = add nsw i32 %113, 1
  store i32 %115, i32* %1, align 4
  br label %106

; <label>:116:                                    ; preds = %106
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec96
  store i32 0, i32* %1, align 4
  br label %117

; <label>:117:                                    ; preds = %128, %116
  %118 = load i32, i32* %1, align 4
  %119 = icmp slt i32 %118, 36
  br i1 %119, label %120, label %132

; <label>:120:                                    ; preds = %117
  %121 = load i32, i32* %1, align 4
  %122 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop125 = sub <4 x i32> <i32 35, i32 35, i32 35, i32 35>, %122
  %123 = sub nsw i32 35, %121
  %124 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %123
  %125 = load double, double* %124, align 8
  %126 = load i32, i32* %1, align 4
  %127 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %126
  store double %125, double* %127, align 8
  br label %128

; <label>:128:                                    ; preds = %120
  %129 = load i32, i32* %1, align 4
  %130 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop126 = add <4 x i32> %130, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop126, <4 x i32>* %allocaVec96
  %131 = add nsw i32 %129, 1
  store i32 %131, i32* %1, align 4
  br label %117

; <label>:132:                                    ; preds = %117
  store <2 x double> <double 0x3FBC71C71C71C71C, double 0x3FBC71C71C71C71C>, <2 x double>* %allocaVec99
  store double 0x3FBC71C71C71C71C, double* %4, align 8
  store double* getelementptr inbounds ([244 x double], [244 x double]* @cos_l, i32 0, i32 0), double** %6, align 4
  store <4 x i32> <i32 11, i32 11, i32 11, i32 11>, <4 x i32>* %allocaVec101
  store i32 11, i32* %7, align 4
  br label %133

; <label>:133:                                    ; preds = %205, %132
  %134 = load i32, i32* %7, align 4
  %135 = getelementptr inbounds [12 x i32], [12 x i32]* @all, i32 0, i32 %134
  %136 = load i32, i32* %135, align 4
  store i32 %136, i32* %3, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec97
  store i32 0, i32* %2, align 4
  br label %137

; <label>:137:                                    ; preds = %166, %133
  %138 = load i32, i32* %2, align 4
  %139 = icmp slt i32 %138, 9
  br i1 %139, label %140, label %170

; <label>:140:                                    ; preds = %137
  %141 = load double, double* %4, align 8
  %insertElmt127 = insertelement <2 x double> undef, double %141, i32 0
  %insertElmt128 = insertelement <2 x double> %insertElmt127, double %141, i32 1
  store <2 x double> %insertElmt128, <2 x double>* %allocaVec99, align 16
  %142 = load i32, i32* %3, align 4
  %insertElmt129 = insertelement <4 x i32> undef, i32 %142, i32 0
  %insertElmt130 = insertelement <4 x i32> %insertElmt129, i32 %142, i32 1
  %insertElmt131 = insertelement <4 x i32> %insertElmt130, i32 %142, i32 2
  %insertElmt132 = insertelement <4 x i32> %insertElmt131, i32 %142, i32 3
  store <4 x i32> %insertElmt132, <4 x i32>* %allocaVec98, align 16
  %143 = load <4 x i32>, <4 x i32>* %allocaVec98, align 16
  %Vop133 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %143
  %144 = mul nsw i32 2, %142
  %Vop134 = add <4 x i32> %Vop133, <i32 1, i32 1, i32 1, i32 1>
  %145 = add nsw i32 %144, 1
  %146 = sitofp i32 %145 to double
  store double %146, double* %CastInst9
  %147 = load double, double* %CastInst9, align 4
  %insertCast135 = insertelement <2 x double> undef, double %147, i32 0
  %insertCast136 = insertelement <2 x double> %insertCast135, double %147, i32 1
  store <2 x double> %insertCast136, <2 x double>* %CastInstVec10, align 4
  %148 = load <2 x double>, <2 x double>* %CastInstVec10, align 4
  %Vop137 = fmul <2 x double> <double 0x3F9657184AE74487, double 0x3F9657184AE74487>, %148
  %149 = fmul double 0x3F9657184AE74487, %146
  %150 = load i32, i32* %2, align 4
  %151 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop138 = mul <4 x i32> <i32 4, i32 4, i32 4, i32 4>, %151
  %152 = mul nsw i32 4, %150
  %Vop139 = add <4 x i32> %Vop138, <i32 2, i32 2, i32 2, i32 2>
  %153 = add nsw i32 %152, 2
  %Vop140 = add <4 x i32> %Vop139, <i32 36, i32 36, i32 36, i32 36>
  %154 = add nsw i32 %153, 36
  %155 = sitofp i32 %154 to double
  store double %155, double* %CastInst11
  %156 = load double, double* %CastInst11, align 4
  %insertCast141 = insertelement <2 x double> undef, double %156, i32 0
  %insertCast142 = insertelement <2 x double> %insertCast141, double %156, i32 1
  store <2 x double> %insertCast142, <2 x double>* %CastInstVec12, align 4
  %157 = load <2 x double>, <2 x double>* %CastInstVec12, align 4
  %Vop143 = fmul <2 x double> %Vop137, %157
  %158 = fmul double %149, %155
  %159 = call arm_aapcscc double @cos(double %158) #7
  %160 = load <2 x double>, <2 x double>* %allocaVec99, align 16
  store double %159, double* %CallInst
  %161 = load double, double* %CallInst, align 4
  %insertCall = insertelement <2 x double> undef, double %161, i32 0
  %insertCall144 = insertelement <2 x double> %insertCall, double %161, i32 1
  store <2 x double> %insertCall144, <2 x double>* %CallInstVec, align 4
  %162 = load <2 x double>, <2 x double>* %CallInstVec, align 4
  %Vop145 = fmul <2 x double> %160, %162
  %163 = fmul double %141, %159
  %164 = load double*, double** %6, align 4
  %165 = getelementptr inbounds double, double* %164, i32 1
  store double* %165, double** %6, align 4
  store double %163, double* %164, align 8
  br label %166

; <label>:166:                                    ; preds = %140
  %167 = load i32, i32* %2, align 4
  %168 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop146 = add <4 x i32> %168, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop146, <4 x i32>* %allocaVec97
  %169 = add nsw i32 %167, 1
  store i32 %169, i32* %2, align 4
  br label %137

; <label>:170:                                    ; preds = %137
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec97
  store i32 0, i32* %2, align 4
  br label %171

; <label>:171:                                    ; preds = %200, %170
  %172 = load i32, i32* %2, align 4
  %173 = icmp slt i32 %172, 9
  br i1 %173, label %174, label %204

; <label>:174:                                    ; preds = %171
  %175 = load double, double* %4, align 8
  %insertElmt147 = insertelement <2 x double> undef, double %175, i32 0
  %insertElmt148 = insertelement <2 x double> %insertElmt147, double %175, i32 1
  store <2 x double> %insertElmt148, <2 x double>* %allocaVec99, align 16
  %176 = load i32, i32* %3, align 4
  %insertElmt149 = insertelement <4 x i32> undef, i32 %176, i32 0
  %insertElmt150 = insertelement <4 x i32> %insertElmt149, i32 %176, i32 1
  %insertElmt151 = insertelement <4 x i32> %insertElmt150, i32 %176, i32 2
  %insertElmt152 = insertelement <4 x i32> %insertElmt151, i32 %176, i32 3
  store <4 x i32> %insertElmt152, <4 x i32>* %allocaVec98, align 16
  %177 = load <4 x i32>, <4 x i32>* %allocaVec98, align 16
  %Vop153 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %177
  %178 = mul nsw i32 2, %176
  %Vop154 = add <4 x i32> %Vop153, <i32 1, i32 1, i32 1, i32 1>
  %179 = add nsw i32 %178, 1
  %180 = sitofp i32 %179 to double
  store double %180, double* %CastInst13
  %181 = load double, double* %CastInst13, align 4
  %insertCast155 = insertelement <2 x double> undef, double %181, i32 0
  %insertCast156 = insertelement <2 x double> %insertCast155, double %181, i32 1
  store <2 x double> %insertCast156, <2 x double>* %CastInstVec14, align 4
  %182 = load <2 x double>, <2 x double>* %CastInstVec14, align 4
  %Vop157 = fmul <2 x double> <double 0x3F9657184AE74487, double 0x3F9657184AE74487>, %182
  %183 = fmul double 0x3F9657184AE74487, %180
  %184 = load i32, i32* %2, align 4
  %185 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop158 = mul <4 x i32> <i32 4, i32 4, i32 4, i32 4>, %185
  %186 = mul nsw i32 4, %184
  %Vop159 = add <4 x i32> %Vop158, <i32 2, i32 2, i32 2, i32 2>
  %187 = add nsw i32 %186, 2
  %Vop160 = add <4 x i32> %Vop159, <i32 108, i32 108, i32 108, i32 108>
  %188 = add nsw i32 %187, 108
  %189 = sitofp i32 %188 to double
  store double %189, double* %CastInst15
  %190 = load double, double* %CastInst15, align 4
  %insertCast161 = insertelement <2 x double> undef, double %190, i32 0
  %insertCast162 = insertelement <2 x double> %insertCast161, double %190, i32 1
  store <2 x double> %insertCast162, <2 x double>* %CastInstVec16, align 4
  %191 = load <2 x double>, <2 x double>* %CastInstVec16, align 4
  %Vop163 = fmul <2 x double> %Vop157, %191
  %192 = fmul double %183, %189
  %193 = call arm_aapcscc double @cos(double %192) #7
  %194 = load <2 x double>, <2 x double>* %allocaVec99, align 16
  store double %193, double* %CallInst43
  %195 = load double, double* %CallInst43, align 4
  %insertCall164 = insertelement <2 x double> undef, double %195, i32 0
  %insertCall165 = insertelement <2 x double> %insertCall164, double %195, i32 1
  store <2 x double> %insertCall165, <2 x double>* %CallInstVec44, align 4
  %196 = load <2 x double>, <2 x double>* %CallInstVec44, align 4
  %Vop166 = fmul <2 x double> %194, %196
  %197 = fmul double %175, %193
  %198 = load double*, double** %6, align 4
  %199 = getelementptr inbounds double, double* %198, i32 1
  store double* %199, double** %6, align 4
  store double %197, double* %198, align 8
  br label %200

; <label>:200:                                    ; preds = %174
  %201 = load i32, i32* %2, align 4
  %202 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop167 = add <4 x i32> %202, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop167, <4 x i32>* %allocaVec97
  %203 = add nsw i32 %201, 1
  store i32 %203, i32* %2, align 4
  br label %171

; <label>:204:                                    ; preds = %171
  br label %205

; <label>:205:                                    ; preds = %204
  %206 = load i32, i32* %7, align 4
  %insertElmt168 = insertelement <4 x i32> undef, i32 %206, i32 0
  %insertElmt169 = insertelement <4 x i32> %insertElmt168, i32 %206, i32 1
  %insertElmt170 = insertelement <4 x i32> %insertElmt169, i32 %206, i32 2
  %insertElmt171 = insertelement <4 x i32> %insertElmt170, i32 %206, i32 3
  store <4 x i32> %insertElmt171, <4 x i32>* %allocaVec101, align 16
  %207 = load <4 x i32>, <4 x i32>* %allocaVec101, align 16
  %Vop172 = add <4 x i32> %207, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop172, <4 x i32>* %allocaVec101
  %208 = add nsw i32 %206, -1
  store i32 %208, i32* %7, align 4
  %209 = icmp sge i32 %208, 0
  br i1 %209, label %133, label %210

; <label>:210:                                    ; preds = %205
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %allocaVec101
  store i32 3, i32* %7, align 4
  br label %211

; <label>:211:                                    ; preds = %283, %210
  %212 = load i32, i32* %7, align 4
  %213 = getelementptr inbounds [4 x i32], [4 x i32]* @mdct_init48.d3, i32 0, i32 %212
  %214 = load i32, i32* %213, align 4
  store i32 %214, i32* %3, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec97
  store i32 0, i32* %2, align 4
  br label %215

; <label>:215:                                    ; preds = %244, %211
  %216 = load i32, i32* %2, align 4
  %217 = icmp slt i32 %216, 3
  br i1 %217, label %218, label %248

; <label>:218:                                    ; preds = %215
  %219 = load double, double* %4, align 8
  %insertElmt173 = insertelement <2 x double> undef, double %219, i32 0
  %insertElmt174 = insertelement <2 x double> %insertElmt173, double %219, i32 1
  store <2 x double> %insertElmt174, <2 x double>* %allocaVec99, align 16
  %220 = load i32, i32* %3, align 4
  %insertElmt175 = insertelement <4 x i32> undef, i32 %220, i32 0
  %insertElmt176 = insertelement <4 x i32> %insertElmt175, i32 %220, i32 1
  %insertElmt177 = insertelement <4 x i32> %insertElmt176, i32 %220, i32 2
  %insertElmt178 = insertelement <4 x i32> %insertElmt177, i32 %220, i32 3
  store <4 x i32> %insertElmt178, <4 x i32>* %allocaVec98, align 16
  %221 = load <4 x i32>, <4 x i32>* %allocaVec98, align 16
  %Vop179 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %221
  %222 = mul nsw i32 2, %220
  %Vop180 = add <4 x i32> %Vop179, <i32 1, i32 1, i32 1, i32 1>
  %223 = add nsw i32 %222, 1
  %224 = sitofp i32 %223 to double
  store double %224, double* %CastInst17
  %225 = load double, double* %CastInst17, align 4
  %insertCast181 = insertelement <2 x double> undef, double %225, i32 0
  %insertCast182 = insertelement <2 x double> %insertCast181, double %225, i32 1
  store <2 x double> %insertCast182, <2 x double>* %CastInstVec18, align 4
  %226 = load <2 x double>, <2 x double>* %CastInstVec18, align 4
  %Vop183 = fmul <2 x double> <double 0x3F9657184AE74487, double 0x3F9657184AE74487>, %226
  %227 = fmul double 0x3F9657184AE74487, %224
  %228 = load i32, i32* %2, align 4
  %229 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop184 = mul <4 x i32> <i32 4, i32 4, i32 4, i32 4>, %229
  %230 = mul nsw i32 4, %228
  %Vop185 = add <4 x i32> %Vop184, <i32 2, i32 2, i32 2, i32 2>
  %231 = add nsw i32 %230, 2
  %Vop186 = add <4 x i32> %Vop185, <i32 36, i32 36, i32 36, i32 36>
  %232 = add nsw i32 %231, 36
  %233 = sitofp i32 %232 to double
  store double %233, double* %CastInst19
  %234 = load double, double* %CastInst19, align 4
  %insertCast187 = insertelement <2 x double> undef, double %234, i32 0
  %insertCast188 = insertelement <2 x double> %insertCast187, double %234, i32 1
  store <2 x double> %insertCast188, <2 x double>* %CastInstVec20, align 4
  %235 = load <2 x double>, <2 x double>* %CastInstVec20, align 4
  %Vop189 = fmul <2 x double> %Vop183, %235
  %236 = fmul double %227, %233
  %237 = call arm_aapcscc double @cos(double %236) #7
  %238 = load <2 x double>, <2 x double>* %allocaVec99, align 16
  store double %237, double* %CallInst45
  %239 = load double, double* %CallInst45, align 4
  %insertCall190 = insertelement <2 x double> undef, double %239, i32 0
  %insertCall191 = insertelement <2 x double> %insertCall190, double %239, i32 1
  store <2 x double> %insertCall191, <2 x double>* %CallInstVec46, align 4
  %240 = load <2 x double>, <2 x double>* %CallInstVec46, align 4
  %Vop192 = fmul <2 x double> %238, %240
  %241 = fmul double %219, %237
  %242 = load double*, double** %6, align 4
  %243 = getelementptr inbounds double, double* %242, i32 1
  store double* %243, double** %6, align 4
  store double %241, double* %242, align 8
  br label %244

; <label>:244:                                    ; preds = %218
  %245 = load i32, i32* %2, align 4
  %246 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop193 = add <4 x i32> %246, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop193, <4 x i32>* %allocaVec97
  %247 = add nsw i32 %245, 1
  store i32 %247, i32* %2, align 4
  br label %215

; <label>:248:                                    ; preds = %215
  store <4 x i32> <i32 6, i32 6, i32 6, i32 6>, <4 x i32>* %allocaVec97
  store i32 6, i32* %2, align 4
  br label %249

; <label>:249:                                    ; preds = %278, %248
  %250 = load i32, i32* %2, align 4
  %251 = icmp slt i32 %250, 9
  br i1 %251, label %252, label %282

; <label>:252:                                    ; preds = %249
  %253 = load double, double* %4, align 8
  %insertElmt194 = insertelement <2 x double> undef, double %253, i32 0
  %insertElmt195 = insertelement <2 x double> %insertElmt194, double %253, i32 1
  store <2 x double> %insertElmt195, <2 x double>* %allocaVec99, align 16
  %254 = load i32, i32* %3, align 4
  %insertElmt196 = insertelement <4 x i32> undef, i32 %254, i32 0
  %insertElmt197 = insertelement <4 x i32> %insertElmt196, i32 %254, i32 1
  %insertElmt198 = insertelement <4 x i32> %insertElmt197, i32 %254, i32 2
  %insertElmt199 = insertelement <4 x i32> %insertElmt198, i32 %254, i32 3
  store <4 x i32> %insertElmt199, <4 x i32>* %allocaVec98, align 16
  %255 = load <4 x i32>, <4 x i32>* %allocaVec98, align 16
  %Vop200 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %255
  %256 = mul nsw i32 2, %254
  %Vop201 = add <4 x i32> %Vop200, <i32 1, i32 1, i32 1, i32 1>
  %257 = add nsw i32 %256, 1
  %258 = sitofp i32 %257 to double
  store double %258, double* %CastInst21
  %259 = load double, double* %CastInst21, align 4
  %insertCast202 = insertelement <2 x double> undef, double %259, i32 0
  %insertCast203 = insertelement <2 x double> %insertCast202, double %259, i32 1
  store <2 x double> %insertCast203, <2 x double>* %CastInstVec22, align 4
  %260 = load <2 x double>, <2 x double>* %CastInstVec22, align 4
  %Vop204 = fmul <2 x double> <double 0x3F9657184AE74487, double 0x3F9657184AE74487>, %260
  %261 = fmul double 0x3F9657184AE74487, %258
  %262 = load i32, i32* %2, align 4
  %263 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop205 = mul <4 x i32> <i32 4, i32 4, i32 4, i32 4>, %263
  %264 = mul nsw i32 4, %262
  %Vop206 = add <4 x i32> %Vop205, <i32 2, i32 2, i32 2, i32 2>
  %265 = add nsw i32 %264, 2
  %Vop207 = add <4 x i32> %Vop206, <i32 36, i32 36, i32 36, i32 36>
  %266 = add nsw i32 %265, 36
  %267 = sitofp i32 %266 to double
  store double %267, double* %CastInst23
  %268 = load double, double* %CastInst23, align 4
  %insertCast208 = insertelement <2 x double> undef, double %268, i32 0
  %insertCast209 = insertelement <2 x double> %insertCast208, double %268, i32 1
  store <2 x double> %insertCast209, <2 x double>* %CastInstVec24, align 4
  %269 = load <2 x double>, <2 x double>* %CastInstVec24, align 4
  %Vop210 = fmul <2 x double> %Vop204, %269
  %270 = fmul double %261, %267
  %271 = call arm_aapcscc double @cos(double %270) #7
  %272 = load <2 x double>, <2 x double>* %allocaVec99, align 16
  store double %271, double* %CallInst47
  %273 = load double, double* %CallInst47, align 4
  %insertCall211 = insertelement <2 x double> undef, double %273, i32 0
  %insertCall212 = insertelement <2 x double> %insertCall211, double %273, i32 1
  store <2 x double> %insertCall212, <2 x double>* %CallInstVec48, align 4
  %274 = load <2 x double>, <2 x double>* %CallInstVec48, align 4
  %Vop213 = fmul <2 x double> %272, %274
  %275 = fmul double %253, %271
  %276 = load double*, double** %6, align 4
  %277 = getelementptr inbounds double, double* %276, i32 1
  store double* %277, double** %6, align 4
  store double %275, double* %276, align 8
  br label %278

; <label>:278:                                    ; preds = %252
  %279 = load i32, i32* %2, align 4
  %280 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop214 = add <4 x i32> %280, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop214, <4 x i32>* %allocaVec97
  %281 = add nsw i32 %279, 1
  store i32 %281, i32* %2, align 4
  br label %249

; <label>:282:                                    ; preds = %249
  br label %283

; <label>:283:                                    ; preds = %282
  %284 = load i32, i32* %7, align 4
  %285 = load <4 x i32>, <4 x i32>* %allocaVec101, align 16
  %Vop215 = add <4 x i32> %285, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop215, <4 x i32>* %allocaVec101
  %286 = add nsw i32 %284, -1
  store i32 %286, i32* %7, align 4
  %287 = icmp sge i32 %286, 0
  br i1 %287, label %211, label %288

; <label>:288:                                    ; preds = %283
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec101
  store i32 1, i32* %7, align 4
  br label %289

; <label>:289:                                    ; preds = %336, %288
  %290 = load i32, i32* %7, align 4
  %291 = getelementptr inbounds [2 x i32], [2 x i32]* @mdct_init48.d9, i32 0, i32 %290
  %292 = load i32, i32* %291, align 4
  store i32 %292, i32* %3, align 4
  %293 = load double, double* %4, align 8
  %insertElmt216 = insertelement <2 x double> undef, double %293, i32 0
  %insertElmt217 = insertelement <2 x double> %insertElmt216, double %293, i32 1
  store <2 x double> %insertElmt217, <2 x double>* %allocaVec99, align 16
  %294 = load i32, i32* %3, align 4
  %insertElmt218 = insertelement <4 x i32> undef, i32 %294, i32 0
  %insertElmt219 = insertelement <4 x i32> %insertElmt218, i32 %294, i32 1
  %insertElmt220 = insertelement <4 x i32> %insertElmt219, i32 %294, i32 2
  %insertElmt221 = insertelement <4 x i32> %insertElmt220, i32 %294, i32 3
  store <4 x i32> %insertElmt221, <4 x i32>* %allocaVec98, align 16
  %295 = load <4 x i32>, <4 x i32>* %allocaVec98, align 16
  %Vop222 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %295
  %296 = mul nsw i32 2, %294
  %Vop223 = add <4 x i32> %Vop222, <i32 1, i32 1, i32 1, i32 1>
  %297 = add nsw i32 %296, 1
  %298 = sitofp i32 %297 to double
  store double %298, double* %CastInst25
  %299 = load double, double* %CastInst25, align 4
  %insertCast224 = insertelement <2 x double> undef, double %299, i32 0
  %insertCast225 = insertelement <2 x double> %insertCast224, double %299, i32 1
  store <2 x double> %insertCast225, <2 x double>* %CastInstVec26, align 4
  %300 = load <2 x double>, <2 x double>* %CastInstVec26, align 4
  %Vop226 = fmul <2 x double> <double 0x3F9657184AE74487, double 0x3F9657184AE74487>, %300
  %301 = fmul double 0x3F9657184AE74487, %298
  %Vop227 = fmul <2 x double> %Vop226, <double 3.800000e+01, double 3.800000e+01>
  %302 = fmul double %301, 3.800000e+01
  %303 = call arm_aapcscc double @cos(double %302) #7
  %304 = load <2 x double>, <2 x double>* %allocaVec99, align 16
  store double %303, double* %CallInst49
  %305 = load double, double* %CallInst49, align 4
  %insertCall228 = insertelement <2 x double> undef, double %305, i32 0
  %insertCall229 = insertelement <2 x double> %insertCall228, double %305, i32 1
  store <2 x double> %insertCall229, <2 x double>* %CallInstVec50, align 4
  %306 = load <2 x double>, <2 x double>* %CallInstVec50, align 4
  %Vop230 = fmul <2 x double> %304, %306
  %307 = fmul double %293, %303
  %308 = load double*, double** %6, align 4
  %309 = getelementptr inbounds double, double* %308, i32 1
  store double* %309, double** %6, align 4
  store double %307, double* %308, align 8
  %310 = load double, double* %4, align 8
  %insertElmt231 = insertelement <2 x double> undef, double %310, i32 0
  %insertElmt232 = insertelement <2 x double> %insertElmt231, double %310, i32 1
  store <2 x double> %insertElmt232, <2 x double>* %allocaVec99, align 16
  %311 = load i32, i32* %3, align 4
  %insertElmt233 = insertelement <4 x i32> undef, i32 %311, i32 0
  %insertElmt234 = insertelement <4 x i32> %insertElmt233, i32 %311, i32 1
  %insertElmt235 = insertelement <4 x i32> %insertElmt234, i32 %311, i32 2
  %insertElmt236 = insertelement <4 x i32> %insertElmt235, i32 %311, i32 3
  store <4 x i32> %insertElmt236, <4 x i32>* %allocaVec98, align 16
  %312 = load <4 x i32>, <4 x i32>* %allocaVec98, align 16
  %Vop237 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %312
  %313 = mul nsw i32 2, %311
  %Vop238 = add <4 x i32> %Vop237, <i32 1, i32 1, i32 1, i32 1>
  %314 = add nsw i32 %313, 1
  %315 = sitofp i32 %314 to double
  store double %315, double* %CastInst27
  %316 = load double, double* %CastInst27, align 4
  %insertCast239 = insertelement <2 x double> undef, double %316, i32 0
  %insertCast240 = insertelement <2 x double> %insertCast239, double %316, i32 1
  store <2 x double> %insertCast240, <2 x double>* %CastInstVec28, align 4
  %317 = load <2 x double>, <2 x double>* %CastInstVec28, align 4
  %Vop241 = fmul <2 x double> <double 0x3F9657184AE74487, double 0x3F9657184AE74487>, %317
  %318 = fmul double 0x3F9657184AE74487, %315
  %Vop242 = fmul <2 x double> %Vop241, <double 4.600000e+01, double 4.600000e+01>
  %319 = fmul double %318, 4.600000e+01
  %320 = call arm_aapcscc double @cos(double %319) #7
  %321 = load <2 x double>, <2 x double>* %allocaVec99, align 16
  store double %320, double* %CallInst51
  %322 = load double, double* %CallInst51, align 4
  %insertCall243 = insertelement <2 x double> undef, double %322, i32 0
  %insertCall244 = insertelement <2 x double> %insertCall243, double %322, i32 1
  store <2 x double> %insertCall244, <2 x double>* %CallInstVec52, align 4
  %323 = load <2 x double>, <2 x double>* %CallInstVec52, align 4
  %Vop245 = fmul <2 x double> %321, %323
  %324 = fmul double %310, %320
  %325 = load double*, double** %6, align 4
  %326 = getelementptr inbounds double, double* %325, i32 1
  store double* %326, double** %6, align 4
  store double %324, double* %325, align 8
  br label %327

; <label>:327:                                    ; preds = %289
  %328 = load i32, i32* %7, align 4
  %329 = load <4 x i32>, <4 x i32>* %allocaVec101, align 16
  %Vop246 = add <4 x i32> %329, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop246, <4 x i32>* %allocaVec101
  %330 = load <4 x i32>, <4 x i32>* %allocaVec101, align 4
  %extractE = extractelement <4 x i32> %330, i64 0
  %extractE247 = extractelement <4 x i32> %330, i64 1
  %extractE248 = extractelement <4 x i32> %330, i64 2
  %sum = add i32 %extractE, %extractE247
  %sum249 = add i32 %sum, %extractE248
  %331 = add nsw i32 %328, -1
  %Fmul = mul i32 %331, 3
  store i32 %331, i32* %Recovery
  %Fcmp = icmp ne i32 %sum249, %Fmul
  br i1 %Fcmp, label %332, label %336

; <label>:332:                                    ; preds = %327
  %remThree = sdiv i32 %sum249, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %333, label %334

; <label>:333:                                    ; preds = %332
  store i32 %331, i32* %Recovery, align 4
  br label %335

; <label>:334:                                    ; preds = %332
  store i32 %extractE, i32* %Recovery, align 4
  br label %335

; <label>:335:                                    ; preds = %334, %333
  br label %336

; <label>:336:                                    ; preds = %327, %335
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %7, align 4
  %337 = icmp sge i32 %331, 0
  br i1 %337, label %289, label %338

; <label>:338:                                    ; preds = %336
  %339 = load double, double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i32 0, i32 248), align 8
  store double %339, double* %5, align 8
  store double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i32 0, i32 0), double** %8, align 4
  store double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i32 0, i32 0), double** %9, align 4
  %340 = load double*, double** %8, align 4
  %341 = getelementptr inbounds double, double* %340, i32 1
  store double* %341, double** %8, align 4
  %342 = load double, double* %340, align 8
  store double %342, double* %11, align 8
  %343 = load double, double* %11, align 8
  %insertElmt250 = insertelement <2 x double> undef, double %343, i32 0
  %insertElmt251 = insertelement <2 x double> %insertElmt250, double %343, i32 1
  store <2 x double> %insertElmt251, <2 x double>* %allocaVec102, align 16
  %344 = load double, double* %5, align 8
  %insertElmt252 = insertelement <2 x double> undef, double %344, i32 0
  %insertElmt253 = insertelement <2 x double> %insertElmt252, double %344, i32 1
  store <2 x double> %insertElmt253, <2 x double>* %allocaVec100, align 16
  %345 = load <2 x double>, <2 x double>* %allocaVec102, align 16
  %346 = load <2 x double>, <2 x double>* %allocaVec100, align 16
  %Vop254 = fdiv <2 x double> %345, %346
  %347 = fdiv double %343, %344
  %348 = getelementptr inbounds [31 x double], [31 x double]* %10, i32 0, i32 15
  store double %347, double* %348, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec97
  store i32 0, i32* %2, align 4
  br label %349

; <label>:349:                                    ; preds = %360, %338
  %350 = load i32, i32* %2, align 4
  %351 = icmp slt i32 %350, 7
  br i1 %351, label %352, label %364

; <label>:352:                                    ; preds = %349
  %353 = load double*, double** %8, align 4
  %354 = getelementptr inbounds double, double* %353, i32 1
  store double* %354, double** %8, align 4
  %355 = load double, double* %353, align 8
  %356 = load double, double* %11, align 8
  %357 = fdiv double %355, %356
  %358 = load double*, double** %9, align 4
  %359 = getelementptr inbounds double, double* %358, i32 1
  store double* %359, double** %9, align 4
  store double %357, double* %358, align 8
  br label %360

; <label>:360:                                    ; preds = %352
  %361 = load i32, i32* %2, align 4
  %362 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop255 = add <4 x i32> %362, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop255, <4 x i32>* %allocaVec97
  %363 = add nsw i32 %361, 1
  store i32 %363, i32* %2, align 4
  br label %349

; <label>:364:                                    ; preds = %349
  store <4 x i32> <i32 14, i32 14, i32 14, i32 14>, <4 x i32>* %allocaVec96
  store i32 14, i32* %1, align 4
  br label %365

; <label>:365:                                    ; preds = %399, %364
  %366 = load i32, i32* %1, align 4
  %367 = icmp sge i32 %366, 0
  br i1 %367, label %368, label %403

; <label>:368:                                    ; preds = %365
  %369 = load double*, double** %8, align 4
  %370 = getelementptr inbounds double, double* %369, i32 1
  store double* %370, double** %8, align 4
  %371 = load double, double* %369, align 8
  store double %371, double* %12, align 8
  %372 = load double, double* %12, align 8
  %insertElmt256 = insertelement <2 x double> undef, double %372, i32 0
  %insertElmt257 = insertelement <2 x double> %insertElmt256, double %372, i32 1
  store <2 x double> %insertElmt257, <2 x double>* %allocaVec103, align 16
  %373 = load double, double* %5, align 8
  %insertElmt258 = insertelement <2 x double> undef, double %373, i32 0
  %insertElmt259 = insertelement <2 x double> %insertElmt258, double %373, i32 1
  store <2 x double> %insertElmt259, <2 x double>* %allocaVec100, align 16
  %374 = load <2 x double>, <2 x double>* %allocaVec103, align 16
  %375 = load <2 x double>, <2 x double>* %allocaVec100, align 16
  %Vop260 = fdiv <2 x double> %374, %375
  %376 = fdiv double %372, %373
  %377 = load i32, i32* %1, align 4
  %378 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop261 = sub <4 x i32> <i32 30, i32 30, i32 30, i32 30>, %378
  %379 = sub nsw i32 30, %377
  %380 = getelementptr inbounds [31 x double], [31 x double]* %10, i32 0, i32 %379
  store double %376, double* %380, align 8
  %381 = load i32, i32* %1, align 4
  %382 = getelementptr inbounds [31 x double], [31 x double]* %10, i32 0, i32 %381
  store double %376, double* %382, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec97
  store i32 0, i32* %2, align 4
  br label %383

; <label>:383:                                    ; preds = %394, %368
  %384 = load i32, i32* %2, align 4
  %385 = icmp slt i32 %384, 15
  br i1 %385, label %386, label %398

; <label>:386:                                    ; preds = %383
  %387 = load double*, double** %8, align 4
  %388 = getelementptr inbounds double, double* %387, i32 1
  store double* %388, double** %8, align 4
  %389 = load double, double* %387, align 8
  %390 = load double, double* %12, align 8
  %391 = fdiv double %389, %390
  %392 = load double*, double** %9, align 4
  %393 = getelementptr inbounds double, double* %392, i32 1
  store double* %393, double** %9, align 4
  store double %391, double* %392, align 8
  br label %394

; <label>:394:                                    ; preds = %386
  %395 = load i32, i32* %2, align 4
  %396 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop262 = add <4 x i32> %396, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop262, <4 x i32>* %allocaVec97
  %397 = add nsw i32 %395, 1
  store i32 %397, i32* %2, align 4
  br label %383

; <label>:398:                                    ; preds = %383
  br label %399

; <label>:399:                                    ; preds = %398
  %400 = load i32, i32* %1, align 4
  %401 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop263 = add <4 x i32> %401, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop263, <4 x i32>* %allocaVec96
  %402 = add nsw i32 %400, -1
  store i32 %402, i32* %1, align 4
  br label %365

; <label>:403:                                    ; preds = %365
  %404 = load double*, double** %8, align 4
  %405 = getelementptr inbounds double, double* %404, i32 1
  store double* %405, double** %8, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec97
  store i32 0, i32* %2, align 4
  br label %406

; <label>:406:                                    ; preds = %417, %403
  %407 = load i32, i32* %2, align 4
  %408 = icmp slt i32 %407, 7
  br i1 %408, label %409, label %421

; <label>:409:                                    ; preds = %406
  %410 = load double*, double** %8, align 4
  %411 = getelementptr inbounds double, double* %410, i32 1
  store double* %411, double** %8, align 4
  %412 = load double, double* %410, align 8
  %413 = load double, double* %5, align 8
  %414 = fdiv double %412, %413
  %415 = load double*, double** %9, align 4
  %416 = getelementptr inbounds double, double* %415, i32 1
  store double* %416, double** %9, align 4
  store double %414, double* %415, align 8
  br label %417

; <label>:417:                                    ; preds = %409
  %418 = load i32, i32* %2, align 4
  %419 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop264 = add <4 x i32> %419, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop264, <4 x i32>* %allocaVec97
  %420 = add nsw i32 %418, 1
  store i32 %420, i32* %2, align 4
  br label %406

; <label>:421:                                    ; preds = %406
  store double* getelementptr inbounds ([16 x [31 x double]], [16 x [31 x double]]* @mm, i32 0, i32 0, i32 0), double** %8, align 4
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %allocaVec96
  store i32 15, i32* %1, align 4
  br label %422

; <label>:422:                                    ; preds = %456, %421
  %423 = load i32, i32* %1, align 4
  %424 = icmp sge i32 %423, 0
  br i1 %424, label %425, label %460

; <label>:425:                                    ; preds = %422
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec97
  store i32 1, i32* %2, align 4
  br label %426

; <label>:426:                                    ; preds = %451, %425
  %427 = load i32, i32* %2, align 4
  %428 = icmp slt i32 %427, 32
  br i1 %428, label %429, label %455

; <label>:429:                                    ; preds = %426
  %430 = load i32, i32* %1, align 4
  %431 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop265 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %431
  %432 = mul nsw i32 2, %430
  %Vop266 = add <4 x i32> %Vop265, <i32 1, i32 1, i32 1, i32 1>
  %433 = add nsw i32 %432, 1
  %434 = load i32, i32* %2, align 4
  %435 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop267 = mul <4 x i32> %Vop266, %435
  %436 = mul nsw i32 %433, %434
  %437 = sitofp i32 %436 to double
  store double %437, double* %CastInst29
  %438 = load double, double* %CastInst29, align 4
  %insertCast268 = insertelement <2 x double> undef, double %438, i32 0
  %insertCast269 = insertelement <2 x double> %insertCast268, double %438, i32 1
  store <2 x double> %insertCast269, <2 x double>* %CastInstVec30, align 4
  %439 = load <2 x double>, <2 x double>* %CastInstVec30, align 4
  %Vop270 = fmul <2 x double> %439, <double 0x400921FB54442D18, double 0x400921FB54442D18>
  %440 = fmul double %437, 0x400921FB54442D18
  %Vop271 = fdiv <2 x double> %Vop270, <double 6.400000e+01, double 6.400000e+01>
  %441 = fdiv double %440, 6.400000e+01
  %442 = call arm_aapcscc double @cos(double %441) #7
  %443 = load i32, i32* %2, align 4
  %444 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop272 = sub <4 x i32> %444, <i32 1, i32 1, i32 1, i32 1>
  %445 = sub nsw i32 %443, 1
  %446 = getelementptr inbounds [31 x double], [31 x double]* %10, i32 0, i32 %445
  %447 = load double, double* %446, align 8
  %448 = fmul double %442, %447
  %449 = load double*, double** %8, align 4
  %450 = getelementptr inbounds double, double* %449, i32 1
  store double* %450, double** %8, align 4
  store double %448, double* %449, align 8
  br label %451

; <label>:451:                                    ; preds = %429
  %452 = load i32, i32* %2, align 4
  %453 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop273 = add <4 x i32> %453, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop273, <4 x i32>* %allocaVec97
  %454 = add nsw i32 %452, 1
  store i32 %454, i32* %2, align 4
  br label %426

; <label>:455:                                    ; preds = %426
  br label %456

; <label>:456:                                    ; preds = %455
  %457 = load i32, i32* %1, align 4
  %458 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop274 = add <4 x i32> %458, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop274, <4 x i32>* %allocaVec96
  %459 = add nsw i32 %457, -1
  store i32 %459, i32* %1, align 4
  br label %422

; <label>:460:                                    ; preds = %422
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec97
  store i32 0, i32* %2, align 4
  br label %461

; <label>:461:                                    ; preds = %588, %460
  %462 = load i32, i32* %2, align 4
  %463 = icmp slt i32 %462, 4
  br i1 %463, label %464, label %589

; <label>:464:                                    ; preds = %461
  %465 = load i32, i32* %2, align 4
  %466 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop275 = sub <4 x i32> <i32 17, i32 17, i32 17, i32 17>, %466
  %467 = sub nsw i32 17, %465
  %468 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %467
  %469 = load double, double* %468, align 8
  store double %469, double* %13, align 8
  %470 = load i32, i32* %2, align 4
  %471 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop276 = add <4 x i32> <i32 9, i32 9, i32 9, i32 9>, %471
  %472 = add nsw i32 9, %470
  %473 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %472
  %474 = load double, double* %473, align 8
  %475 = load i32, i32* %2, align 4
  %476 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop277 = sub <4 x i32> <i32 17, i32 17, i32 17, i32 17>, %476
  %477 = sub nsw i32 17, %475
  %478 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %477
  store double %474, double* %478, align 8
  %479 = load double, double* %13, align 8
  %480 = load i32, i32* %2, align 4
  %481 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop278 = add <4 x i32> <i32 9, i32 9, i32 9, i32 9>, %481
  %482 = add nsw i32 9, %480
  %483 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %482
  store double %479, double* %483, align 8
  %484 = load i32, i32* %2, align 4
  %485 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop279 = sub <4 x i32> <i32 35, i32 35, i32 35, i32 35>, %485
  %486 = sub nsw i32 35, %484
  %487 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %486
  %488 = load double, double* %487, align 8
  store double %488, double* %13, align 8
  %489 = load i32, i32* %2, align 4
  %490 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop280 = add <4 x i32> <i32 27, i32 27, i32 27, i32 27>, %490
  %491 = add nsw i32 27, %489
  %492 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %491
  %493 = load double, double* %492, align 8
  %494 = load i32, i32* %2, align 4
  %495 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop281 = sub <4 x i32> <i32 35, i32 35, i32 35, i32 35>, %495
  %496 = sub nsw i32 35, %494
  %497 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %496
  store double %493, double* %497, align 8
  %498 = load double, double* %13, align 8
  %499 = load i32, i32* %2, align 4
  %500 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop282 = add <4 x i32> <i32 27, i32 27, i32 27, i32 27>, %500
  %501 = add nsw i32 27, %499
  %502 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %501
  store double %498, double* %502, align 8
  %503 = load i32, i32* %2, align 4
  %504 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop283 = sub <4 x i32> <i32 17, i32 17, i32 17, i32 17>, %504
  %505 = sub nsw i32 17, %503
  %506 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %505
  %507 = load double, double* %506, align 8
  store double %507, double* %13, align 8
  %508 = load i32, i32* %2, align 4
  %509 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop284 = add <4 x i32> <i32 9, i32 9, i32 9, i32 9>, %509
  %510 = add nsw i32 9, %508
  %511 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %510
  %512 = load double, double* %511, align 8
  %513 = load i32, i32* %2, align 4
  %514 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop285 = sub <4 x i32> <i32 17, i32 17, i32 17, i32 17>, %514
  %515 = sub nsw i32 17, %513
  %516 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %515
  store double %512, double* %516, align 8
  %517 = load double, double* %13, align 8
  %518 = load i32, i32* %2, align 4
  %519 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop286 = add <4 x i32> <i32 9, i32 9, i32 9, i32 9>, %519
  %520 = add nsw i32 9, %518
  %521 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %520
  store double %517, double* %521, align 8
  %522 = load i32, i32* %2, align 4
  %523 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop287 = sub <4 x i32> <i32 35, i32 35, i32 35, i32 35>, %523
  %524 = sub nsw i32 35, %522
  %525 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %524
  %526 = load double, double* %525, align 8
  store double %526, double* %13, align 8
  %527 = load i32, i32* %2, align 4
  %528 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop288 = add <4 x i32> <i32 27, i32 27, i32 27, i32 27>, %528
  %529 = add nsw i32 27, %527
  %530 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %529
  %531 = load double, double* %530, align 8
  %532 = load i32, i32* %2, align 4
  %533 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop289 = sub <4 x i32> <i32 35, i32 35, i32 35, i32 35>, %533
  %534 = sub nsw i32 35, %532
  %535 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %534
  store double %531, double* %535, align 8
  %536 = load double, double* %13, align 8
  %537 = load i32, i32* %2, align 4
  %538 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop290 = add <4 x i32> <i32 27, i32 27, i32 27, i32 27>, %538
  %539 = add nsw i32 27, %537
  %540 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %539
  store double %536, double* %540, align 8
  %541 = load i32, i32* %2, align 4
  %542 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop291 = sub <4 x i32> <i32 17, i32 17, i32 17, i32 17>, %542
  %543 = sub nsw i32 17, %541
  %544 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %543
  %545 = load double, double* %544, align 8
  store double %545, double* %13, align 8
  %546 = load i32, i32* %2, align 4
  %547 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop292 = add <4 x i32> <i32 9, i32 9, i32 9, i32 9>, %547
  %548 = add nsw i32 9, %546
  %549 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %548
  %550 = load double, double* %549, align 8
  %551 = load i32, i32* %2, align 4
  %552 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop293 = sub <4 x i32> <i32 17, i32 17, i32 17, i32 17>, %552
  %553 = sub nsw i32 17, %551
  %554 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %553
  store double %550, double* %554, align 8
  %555 = load double, double* %13, align 8
  %556 = load i32, i32* %2, align 4
  %557 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop294 = add <4 x i32> <i32 9, i32 9, i32 9, i32 9>, %557
  %558 = add nsw i32 9, %556
  %559 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %558
  store double %555, double* %559, align 8
  %560 = load i32, i32* %2, align 4
  %561 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop295 = sub <4 x i32> <i32 35, i32 35, i32 35, i32 35>, %561
  %562 = sub nsw i32 35, %560
  %563 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %562
  %564 = load double, double* %563, align 8
  store double %564, double* %13, align 8
  %565 = load i32, i32* %2, align 4
  %566 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop296 = add <4 x i32> <i32 27, i32 27, i32 27, i32 27>, %566
  %567 = add nsw i32 27, %565
  %568 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %567
  %569 = load double, double* %568, align 8
  %570 = load i32, i32* %2, align 4
  %571 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop297 = sub <4 x i32> <i32 35, i32 35, i32 35, i32 35>, %571
  %572 = sub nsw i32 35, %570
  %573 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %572
  store double %569, double* %573, align 8
  %574 = load double, double* %13, align 8
  %575 = load i32, i32* %2, align 4
  %576 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop298 = add <4 x i32> <i32 27, i32 27, i32 27, i32 27>, %576
  %577 = add nsw i32 27, %575
  %578 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %577
  store double %574, double* %578, align 8
  br label %579

; <label>:579:                                    ; preds = %464
  %580 = load i32, i32* %2, align 4
  %581 = load <4 x i32>, <4 x i32>* %allocaVec97, align 16
  %Vop299 = add <4 x i32> %581, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop299, <4 x i32>* %allocaVec97
  %582 = load <4 x i32>, <4 x i32>* %allocaVec97, align 4
  %extractE301 = extractelement <4 x i32> %582, i64 0
  %extractE302 = extractelement <4 x i32> %582, i64 1
  %extractE303 = extractelement <4 x i32> %582, i64 2
  %sum304 = add i32 %extractE301, %extractE302
  %sum305 = add i32 %sum304, %extractE303
  %583 = add nsw i32 %580, 1
  %Fmul300 = mul i32 %583, 3
  store i32 %583, i32* %Recovery1
  %Fcmp306 = icmp ne i32 %sum305, %Fmul300
  br i1 %Fcmp306, label %584, label %588

; <label>:584:                                    ; preds = %579
  %remThree385 = sdiv i32 %sum305, %extractE301
  %FcmpThree386 = icmp ne i32 %remThree385, 3
  br i1 %FcmpThree386, label %585, label %586

; <label>:585:                                    ; preds = %584
  store i32 %583, i32* %Recovery1, align 4
  br label %587

; <label>:586:                                    ; preds = %584
  store i32 %extractE301, i32* %Recovery1, align 4
  br label %587

; <label>:587:                                    ; preds = %586, %585
  br label %588

; <label>:588:                                    ; preds = %579, %587
  %ReplaceInst391 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst391, i32* %2, align 4
  br label %461

; <label>:589:                                    ; preds = %461
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec96
  store i32 0, i32* %1, align 4
  br label %590

; <label>:590:                                    ; preds = %613, %589
  %591 = load i32, i32* %1, align 4
  %592 = icmp slt i32 %591, 36
  br i1 %592, label %593, label %617

; <label>:593:                                    ; preds = %590
  %594 = load double, double* %5, align 8
  %insertElmt307 = insertelement <2 x double> undef, double %594, i32 0
  %insertElmt308 = insertelement <2 x double> %insertElmt307, double %594, i32 1
  store <2 x double> %insertElmt308, <2 x double>* %allocaVec100, align 16
  %595 = load <2 x double>, <2 x double>* %allocaVec100, align 16
  %Vop309 = fdiv <2 x double> %595, <double 3.276800e+04, double 3.276800e+04>
  %596 = fdiv double %594, 3.276800e+04
  %597 = load i32, i32* %1, align 4
  %598 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %597
  %599 = load double, double* %598, align 8
  %600 = fmul double %599, %596
  store double %600, double* %598, align 8
  %601 = load double, double* %5, align 8
  %602 = fdiv double %601, 3.276800e+04
  %603 = load i32, i32* %1, align 4
  %604 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %603
  %605 = load double, double* %604, align 8
  %606 = fmul double %605, %602
  store double %606, double* %604, align 8
  %607 = load double, double* %5, align 8
  %608 = fdiv double %607, 3.276800e+04
  %609 = load i32, i32* %1, align 4
  %610 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %609
  %611 = load double, double* %610, align 8
  %612 = fmul double %611, %608
  store double %612, double* %610, align 8
  br label %613

; <label>:613:                                    ; preds = %593
  %614 = load i32, i32* %1, align 4
  %615 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop310 = add <4 x i32> %615, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop310, <4 x i32>* %allocaVec96
  %616 = add nsw i32 %614, 1
  store i32 %616, i32* %1, align 4
  br label %590

; <label>:617:                                    ; preds = %590
  store <2 x double> <double 0x3FD5555555555555, double 0x3FD5555555555555>, <2 x double>* %allocaVec99
  store double 0x3FD5555555555555, double* %4, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec96
  store i32 0, i32* %1, align 4
  br label %618

; <label>:618:                                    ; preds = %727, %617
  %619 = load i32, i32* %1, align 4
  %620 = icmp slt i32 %619, 3
  br i1 %620, label %621, label %728

; <label>:621:                                    ; preds = %618
  %622 = load i32, i32* %1, align 4
  %623 = sitofp i32 %622 to double
  store double %623, double* %CastInst31
  %624 = load double, double* %CastInst31, align 4
  %insertCast311 = insertelement <2 x double> undef, double %624, i32 0
  %insertCast312 = insertelement <2 x double> %insertCast311, double %624, i32 1
  store <2 x double> %insertCast312, <2 x double>* %CastInstVec32, align 4
  %625 = load <2 x double>, <2 x double>* %CastInstVec32, align 4
  %Vop313 = fadd <2 x double> %625, <double 5.000000e-01, double 5.000000e-01>
  %626 = fadd double %623, 5.000000e-01
  %Vop314 = fmul <2 x double> <double 0x3FD0C152382D7365, double 0x3FD0C152382D7365>, %Vop313
  %627 = fmul double 0x3FD0C152382D7365, %626
  %628 = call arm_aapcscc double @cos(double %627) #7
  %629 = load double, double* %5, align 8
  %insertElmt315 = insertelement <2 x double> undef, double %629, i32 0
  %insertElmt316 = insertelement <2 x double> %insertElmt315, double %629, i32 1
  store <2 x double> %insertElmt316, <2 x double>* %allocaVec100, align 16
  store double %628, double* %CallInst55
  %630 = load double, double* %CallInst55, align 4
  %insertCall317 = insertelement <2 x double> undef, double %630, i32 0
  %insertCall318 = insertelement <2 x double> %insertCall317, double %630, i32 1
  store <2 x double> %insertCall318, <2 x double>* %CallInstVec56, align 4
  %631 = load <2 x double>, <2 x double>* %CallInstVec56, align 4
  %632 = load <2 x double>, <2 x double>* %allocaVec100, align 16
  %Vop319 = fmul <2 x double> %631, %632
  %633 = fmul double %628, %629
  %Vop320 = fdiv <2 x double> %Vop319, <double 3.276800e+04, double 3.276800e+04>
  %634 = fdiv double %633, 3.276800e+04
  %635 = load double, double* %4, align 8
  %insertElmt321 = insertelement <2 x double> undef, double %635, i32 0
  %insertElmt322 = insertelement <2 x double> %insertElmt321, double %635, i32 1
  store <2 x double> %insertElmt322, <2 x double>* %allocaVec99, align 16
  %636 = load <2 x double>, <2 x double>* %allocaVec99, align 16
  %Vop323 = fmul <2 x double> %Vop320, %636
  store <2 x double> %Vop323, <2 x double>* %allocaVec105
  %637 = fmul double %634, %635
  store double %637, double* %14, align 8
  %638 = load i32, i32* %1, align 4
  %639 = sitofp i32 %638 to double
  store double %639, double* %CastInst33
  %640 = load double, double* %CastInst33, align 4
  %insertCast324 = insertelement <2 x double> undef, double %640, i32 0
  %insertCast325 = insertelement <2 x double> %insertCast324, double %640, i32 1
  store <2 x double> %insertCast325, <2 x double>* %CastInstVec34, align 4
  %641 = load <2 x double>, <2 x double>* %CastInstVec34, align 4
  %Vop326 = fadd <2 x double> %641, <double 5.000000e-01, double 5.000000e-01>
  %642 = fadd double %639, 5.000000e-01
  %Vop327 = fmul <2 x double> <double 0x3FD0C152382D7365, double 0x3FD0C152382D7365>, %Vop326
  %643 = fmul double 0x3FD0C152382D7365, %642
  %644 = call arm_aapcscc double @tan(double %643) #7
  %645 = load i32, i32* %1, align 4
  %646 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2), i32 0, i32 %645
  store double %644, double* %646, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec98
  store i32 0, i32* %3, align 4
  br label %647

; <label>:647:                                    ; preds = %716, %621
  %648 = load i32, i32* %3, align 4
  %649 = icmp slt i32 %648, 6
  br i1 %649, label %650, label %717

; <label>:650:                                    ; preds = %647
  %651 = load double, double* %14, align 8
  %652 = load i32, i32* %3, align 4
  %insertElmt328 = insertelement <4 x i32> undef, i32 %652, i32 0
  %insertElmt329 = insertelement <4 x i32> %insertElmt328, i32 %652, i32 1
  %insertElmt330 = insertelement <4 x i32> %insertElmt329, i32 %652, i32 2
  %insertElmt331 = insertelement <4 x i32> %insertElmt330, i32 %652, i32 3
  store <4 x i32> %insertElmt331, <4 x i32>* %allocaVec98, align 16
  %653 = load <4 x i32>, <4 x i32>* %allocaVec98, align 16
  %Vop332 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %653
  %654 = mul nsw i32 2, %652
  %Vop333 = add <4 x i32> %Vop332, <i32 1, i32 1, i32 1, i32 1>
  %655 = add nsw i32 %654, 1
  %656 = sitofp i32 %655 to double
  store double %656, double* %CastInst35
  %657 = load double, double* %CastInst35, align 4
  %insertCast334 = insertelement <2 x double> undef, double %657, i32 0
  %insertCast335 = insertelement <2 x double> %insertCast334, double %657, i32 1
  store <2 x double> %insertCast335, <2 x double>* %CastInstVec36, align 4
  %658 = load <2 x double>, <2 x double>* %CastInstVec36, align 4
  %Vop336 = fmul <2 x double> <double 0x3FB0C152382D7365, double 0x3FB0C152382D7365>, %658
  %659 = fmul double 0x3FB0C152382D7365, %656
  %660 = load i32, i32* %1, align 4
  %661 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop337 = mul <4 x i32> <i32 4, i32 4, i32 4, i32 4>, %661
  %662 = mul nsw i32 4, %660
  %Vop338 = add <4 x i32> %Vop337, <i32 2, i32 2, i32 2, i32 2>
  %663 = add nsw i32 %662, 2
  %Vop339 = add <4 x i32> %Vop338, <i32 12, i32 12, i32 12, i32 12>
  %664 = add nsw i32 %663, 12
  %665 = sitofp i32 %664 to double
  store double %665, double* %CastInst37
  %666 = load double, double* %CastInst37, align 4
  %insertCast340 = insertelement <2 x double> undef, double %666, i32 0
  %insertCast341 = insertelement <2 x double> %insertCast340, double %666, i32 1
  store <2 x double> %insertCast341, <2 x double>* %CastInstVec38, align 4
  %667 = load <2 x double>, <2 x double>* %CastInstVec38, align 4
  %Vop342 = fmul <2 x double> %Vop336, %667
  %668 = fmul double %659, %665
  %669 = call arm_aapcscc double @cos(double %668) #7
  %670 = load <2 x double>, <2 x double>* %allocaVec105, align 16
  store double %669, double* %CallInst57
  %671 = load double, double* %CallInst57, align 4
  %insertCall343 = insertelement <2 x double> undef, double %671, i32 0
  %insertCall344 = insertelement <2 x double> %insertCall343, double %671, i32 1
  store <2 x double> %insertCall344, <2 x double>* %CallInstVec58, align 4
  %672 = load <2 x double>, <2 x double>* %CallInstVec58, align 4
  %Vop345 = fmul <2 x double> %670, %672
  %673 = fmul double %651, %669
  %674 = load i32, i32* %3, align 4
  %675 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i32 0, i32 %674
  %676 = load i32, i32* %1, align 4
  %677 = getelementptr inbounds [6 x double], [6 x double]* %675, i32 0, i32 %676
  store double %673, double* %677, align 8
  %678 = load double, double* %14, align 8
  %679 = load i32, i32* %3, align 4
  %insertElmt346 = insertelement <4 x i32> undef, i32 %679, i32 0
  %insertElmt347 = insertelement <4 x i32> %insertElmt346, i32 %679, i32 1
  %insertElmt348 = insertelement <4 x i32> %insertElmt347, i32 %679, i32 2
  %insertElmt349 = insertelement <4 x i32> %insertElmt348, i32 %679, i32 3
  store <4 x i32> %insertElmt349, <4 x i32>* %allocaVec98, align 16
  %680 = load <4 x i32>, <4 x i32>* %allocaVec98, align 16
  %Vop350 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %680
  %681 = mul nsw i32 2, %679
  %Vop351 = add <4 x i32> %Vop350, <i32 1, i32 1, i32 1, i32 1>
  %682 = add nsw i32 %681, 1
  %683 = sitofp i32 %682 to double
  store double %683, double* %CastInst39
  %684 = load double, double* %CastInst39, align 4
  %insertCast352 = insertelement <2 x double> undef, double %684, i32 0
  %insertCast353 = insertelement <2 x double> %insertCast352, double %684, i32 1
  store <2 x double> %insertCast353, <2 x double>* %CastInstVec40, align 4
  %685 = load <2 x double>, <2 x double>* %CastInstVec40, align 4
  %Vop354 = fmul <2 x double> <double 0x3FB0C152382D7365, double 0x3FB0C152382D7365>, %685
  %686 = fmul double 0x3FB0C152382D7365, %683
  %687 = load i32, i32* %1, align 4
  %688 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop355 = mul <4 x i32> <i32 4, i32 4, i32 4, i32 4>, %688
  %689 = mul nsw i32 4, %687
  %Vop356 = add <4 x i32> %Vop355, <i32 2, i32 2, i32 2, i32 2>
  %690 = add nsw i32 %689, 2
  %Vop357 = add <4 x i32> %Vop356, <i32 36, i32 36, i32 36, i32 36>
  %691 = add nsw i32 %690, 36
  %692 = sitofp i32 %691 to double
  store double %692, double* %CastInst41
  %693 = load double, double* %CastInst41, align 4
  %insertCast358 = insertelement <2 x double> undef, double %693, i32 0
  %insertCast359 = insertelement <2 x double> %insertCast358, double %693, i32 1
  store <2 x double> %insertCast359, <2 x double>* %CastInstVec42, align 4
  %694 = load <2 x double>, <2 x double>* %CastInstVec42, align 4
  %Vop360 = fmul <2 x double> %Vop354, %694
  %695 = fmul double %686, %692
  %696 = call arm_aapcscc double @cos(double %695) #7
  %697 = load <2 x double>, <2 x double>* %allocaVec105, align 16
  store double %696, double* %CallInst59
  %698 = load double, double* %CallInst59, align 4
  %insertCall361 = insertelement <2 x double> undef, double %698, i32 0
  %insertCall362 = insertelement <2 x double> %insertCall361, double %698, i32 1
  store <2 x double> %insertCall362, <2 x double>* %CallInstVec60, align 4
  %699 = load <2 x double>, <2 x double>* %CallInstVec60, align 4
  %Vop363 = fmul <2 x double> %697, %699
  %700 = fmul double %678, %696
  %701 = load i32, i32* %3, align 4
  %702 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i32 0, i32 %701
  %703 = load i32, i32* %1, align 4
  %704 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop364 = add <4 x i32> %704, <i32 3, i32 3, i32 3, i32 3>
  %705 = add nsw i32 %703, 3
  %706 = getelementptr inbounds [6 x double], [6 x double]* %702, i32 0, i32 %705
  store double %700, double* %706, align 8
  br label %707

; <label>:707:                                    ; preds = %650
  %708 = load i32, i32* %3, align 4
  %insertElmt365 = insertelement <4 x i32> undef, i32 %708, i32 0
  %insertElmt366 = insertelement <4 x i32> %insertElmt365, i32 %708, i32 1
  %insertElmt367 = insertelement <4 x i32> %insertElmt366, i32 %708, i32 2
  %insertElmt368 = insertelement <4 x i32> %insertElmt367, i32 %708, i32 3
  store <4 x i32> %insertElmt368, <4 x i32>* %allocaVec98, align 16
  %709 = load <4 x i32>, <4 x i32>* %allocaVec98, align 16
  %Vop369 = add <4 x i32> %709, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop369, <4 x i32>* %allocaVec98
  %710 = load <4 x i32>, <4 x i32>* %allocaVec98, align 4
  %extractE371 = extractelement <4 x i32> %710, i64 0
  %extractE372 = extractelement <4 x i32> %710, i64 1
  %extractE373 = extractelement <4 x i32> %710, i64 2
  %sum374 = add i32 %extractE371, %extractE372
  %sum375 = add i32 %sum374, %extractE373
  %711 = add nsw i32 %708, 1
  %Fmul370 = mul i32 %711, 3
  store i32 %711, i32* %Recovery5
  %Fcmp376 = icmp ne i32 %sum375, %Fmul370
  br i1 %Fcmp376, label %712, label %716

; <label>:712:                                    ; preds = %707
  %remThree387 = sdiv i32 %sum375, %extractE371
  %FcmpThree388 = icmp ne i32 %remThree387, 3
  br i1 %FcmpThree388, label %713, label %714

; <label>:713:                                    ; preds = %712
  store i32 %711, i32* %Recovery5, align 4
  br label %715

; <label>:714:                                    ; preds = %712
  store i32 %extractE371, i32* %Recovery5, align 4
  br label %715

; <label>:715:                                    ; preds = %714, %713
  br label %716

; <label>:716:                                    ; preds = %707, %715
  %ReplaceInst392 = load i32, i32* %Recovery5, align 4
  store i32 %ReplaceInst392, i32* %3, align 4
  br label %647

; <label>:717:                                    ; preds = %647
  br label %718

; <label>:718:                                    ; preds = %717
  %719 = load i32, i32* %1, align 4
  %720 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop377 = add <4 x i32> %720, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop377, <4 x i32>* %allocaVec96
  %721 = load <4 x i32>, <4 x i32>* %allocaVec96, align 4
  %extractE379 = extractelement <4 x i32> %721, i64 0
  %extractE380 = extractelement <4 x i32> %721, i64 1
  %extractE381 = extractelement <4 x i32> %721, i64 2
  %sum382 = add i32 %extractE379, %extractE380
  %sum383 = add i32 %sum382, %extractE381
  %722 = add nsw i32 %719, 1
  %Fmul378 = mul i32 %722, 3
  store i32 %722, i32* %Recovery6
  %Fcmp384 = icmp ne i32 %sum383, %Fmul378
  br i1 %Fcmp384, label %723, label %727

; <label>:723:                                    ; preds = %718
  %remThree389 = sdiv i32 %sum383, %extractE379
  %FcmpThree390 = icmp ne i32 %remThree389, 3
  br i1 %FcmpThree390, label %724, label %725

; <label>:724:                                    ; preds = %723
  store i32 %722, i32* %Recovery6, align 4
  br label %726

; <label>:725:                                    ; preds = %723
  store i32 %extractE379, i32* %Recovery6, align 4
  br label %726

; <label>:726:                                    ; preds = %725, %724
  br label %727

; <label>:727:                                    ; preds = %718, %726
  %ReplaceInst393 = load i32, i32* %Recovery6, align 4
  store i32 %ReplaceInst393, i32* %1, align 4
  br label %618

; <label>:728:                                    ; preds = %618
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @window_subband(i16*, double*, double*) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %Recovery = alloca double, align 8
  %allocaVec117 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec118 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec119 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec120 = alloca <4 x i32>, align 16
  %CastInst3 = alloca i32, align 4
  %CastInstVec4 = alloca <4 x i32>, align 16
  %allocaVec121 = alloca <2 x double>, align 16
  %CastInst5 = alloca double, align 4
  %CastInstVec6 = alloca <2 x double>, align 16
  %allocaVec122 = alloca <4 x i32>, align 16
  %CastInst7 = alloca i32, align 4
  %CastInstVec8 = alloca <4 x i32>, align 16
  %allocaVec123 = alloca <4 x i32>, align 16
  %CastInst9 = alloca i32, align 4
  %CastInstVec10 = alloca <4 x i32>, align 16
  %allocaVec124 = alloca <2 x double>, align 16
  %CastInst11 = alloca double, align 4
  %CastInstVec12 = alloca <2 x double>, align 16
  %allocaVec125 = alloca <4 x i32>, align 16
  %CastInst13 = alloca i32, align 4
  %CastInstVec14 = alloca <4 x i32>, align 16
  %allocaVec126 = alloca <4 x i32>, align 16
  %CastInst15 = alloca i32, align 4
  %CastInstVec16 = alloca <4 x i32>, align 16
  %allocaVec127 = alloca <2 x double>, align 16
  %CastInst17 = alloca double, align 4
  %CastInstVec18 = alloca <2 x double>, align 16
  %allocaVec128 = alloca <4 x i32>, align 16
  %CastInst19 = alloca i32, align 4
  %CastInstVec20 = alloca <4 x i32>, align 16
  %allocaVec129 = alloca <4 x i32>, align 16
  %CastInst21 = alloca i32, align 4
  %CastInstVec22 = alloca <4 x i32>, align 16
  %allocaVec130 = alloca <2 x double>, align 16
  %CastInst23 = alloca double, align 4
  %CastInstVec24 = alloca <2 x double>, align 16
  %allocaVec131 = alloca <4 x i32>, align 16
  %CastInst25 = alloca i32, align 4
  %CastInstVec26 = alloca <4 x i32>, align 16
  %allocaVec132 = alloca <4 x i32>, align 16
  %CastInst27 = alloca i32, align 4
  %CastInstVec28 = alloca <4 x i32>, align 16
  %allocaVec133 = alloca <2 x double>, align 16
  %CastInst29 = alloca double, align 4
  %CastInstVec30 = alloca <2 x double>, align 16
  %allocaVec134 = alloca <4 x i32>, align 16
  %CastInst31 = alloca i32, align 4
  %CastInstVec32 = alloca <4 x i32>, align 16
  %allocaVec135 = alloca <4 x i32>, align 16
  %CastInst33 = alloca i32, align 4
  %CastInstVec34 = alloca <4 x i32>, align 16
  %allocaVec136 = alloca <2 x double>, align 16
  %CastInst35 = alloca double, align 4
  %CastInstVec36 = alloca <2 x double>, align 16
  %allocaVec137 = alloca <4 x i32>, align 16
  %CastInst37 = alloca i32, align 4
  %CastInstVec38 = alloca <4 x i32>, align 16
  %allocaVec138 = alloca <4 x i32>, align 16
  %CastInst39 = alloca i32, align 4
  %CastInstVec40 = alloca <4 x i32>, align 16
  %allocaVec139 = alloca <2 x double>, align 16
  %CastInst41 = alloca double, align 4
  %CastInstVec42 = alloca <2 x double>, align 16
  %allocaVec140 = alloca <2 x double>, align 16
  %CastInst43 = alloca double, align 4
  %CastInstVec44 = alloca <2 x double>, align 16
  %allocaVec141 = alloca <2 x double>, align 16
  %CastInst45 = alloca double, align 4
  %CastInstVec46 = alloca <2 x double>, align 16
  %allocaVec142 = alloca <2 x double>, align 16
  %CastInst47 = alloca double, align 4
  %CastInstVec48 = alloca <2 x double>, align 16
  %allocaVec143 = alloca <2 x double>, align 16
  %CastInst49 = alloca double, align 4
  %CastInstVec50 = alloca <2 x double>, align 16
  %allocaVec144 = alloca <2 x double>, align 16
  %CastInst51 = alloca double, align 4
  %CastInstVec52 = alloca <2 x double>, align 16
  %allocaVec145 = alloca <2 x double>, align 16
  %CastInst53 = alloca double, align 4
  %CastInstVec54 = alloca <2 x double>, align 16
  %allocaVec146 = alloca <2 x double>, align 16
  %CastInst55 = alloca double, align 4
  %CastInstVec56 = alloca <2 x double>, align 16
  %allocaVec147 = alloca <2 x double>, align 16
  %CastInst57 = alloca double, align 4
  %CastInstVec58 = alloca <2 x double>, align 16
  %allocaVec148 = alloca <2 x double>, align 16
  %CastInst59 = alloca double, align 4
  %CastInstVec60 = alloca <2 x double>, align 16
  %allocaVec149 = alloca <2 x double>, align 16
  %CastInst61 = alloca double, align 4
  %CastInstVec62 = alloca <2 x double>, align 16
  %allocaVec150 = alloca <2 x double>, align 16
  %CastInst63 = alloca double, align 4
  %CastInstVec64 = alloca <2 x double>, align 16
  %allocaVec151 = alloca <2 x double>, align 16
  %CastInst65 = alloca double, align 4
  %CastInstVec66 = alloca <2 x double>, align 16
  %allocaVec152 = alloca <2 x double>, align 16
  %CastInst67 = alloca double, align 4
  %CastInstVec68 = alloca <2 x double>, align 16
  %allocaVec153 = alloca <2 x double>, align 16
  %CastInst69 = alloca double, align 4
  %CastInstVec70 = alloca <2 x double>, align 16
  %allocaVec154 = alloca <2 x double>, align 16
  %CastInst71 = alloca double, align 4
  %CastInstVec72 = alloca <2 x double>, align 16
  %allocaVec155 = alloca <2 x double>, align 16
  %CastInst73 = alloca double, align 4
  %CastInstVec74 = alloca <2 x double>, align 16
  %allocaVec156 = alloca <2 x double>, align 16
  %CastInst75 = alloca double, align 4
  %CastInstVec76 = alloca <2 x double>, align 16
  %allocaVec157 = alloca <2 x double>, align 16
  %CastInst77 = alloca double, align 4
  %CastInstVec78 = alloca <2 x double>, align 16
  %allocaVec158 = alloca <2 x double>, align 16
  %CastInst79 = alloca double, align 4
  %CastInstVec80 = alloca <2 x double>, align 16
  %allocaVec159 = alloca <2 x double>, align 16
  %CastInst81 = alloca double, align 4
  %CastInstVec82 = alloca <2 x double>, align 16
  %allocaVec160 = alloca <2 x double>, align 16
  %CastInst83 = alloca double, align 4
  %CastInstVec84 = alloca <2 x double>, align 16
  %allocaVec161 = alloca <2 x double>, align 16
  %CastInst85 = alloca double, align 4
  %CastInstVec86 = alloca <2 x double>, align 16
  %allocaVec162 = alloca <2 x double>, align 16
  %CastInst87 = alloca double, align 4
  %CastInstVec88 = alloca <2 x double>, align 16
  %allocaVec163 = alloca <2 x double>, align 16
  %CastInst89 = alloca double, align 4
  %CastInstVec90 = alloca <2 x double>, align 16
  %allocaVec164 = alloca <2 x double>, align 16
  %CastInst91 = alloca double, align 4
  %CastInstVec92 = alloca <2 x double>, align 16
  %allocaVec165 = alloca <2 x double>, align 16
  %CastInst93 = alloca double, align 4
  %CastInstVec94 = alloca <2 x double>, align 16
  %allocaVec166 = alloca <2 x double>, align 16
  %CastInst95 = alloca double, align 4
  %CastInstVec96 = alloca <2 x double>, align 16
  %allocaVec167 = alloca <2 x double>, align 16
  %CastInst97 = alloca double, align 4
  %CastInstVec98 = alloca <2 x double>, align 16
  %allocaVec168 = alloca <2 x double>, align 16
  %CastInst99 = alloca double, align 4
  %CastInstVec100 = alloca <2 x double>, align 16
  %allocaVec169 = alloca <2 x double>, align 16
  %CastInst101 = alloca double, align 4
  %CastInstVec102 = alloca <2 x double>, align 16
  %allocaVec170 = alloca <2 x double>, align 16
  %CastInst103 = alloca double, align 4
  %CastInstVec104 = alloca <2 x double>, align 16
  %allocaVec171 = alloca <2 x double>, align 16
  %CastInst105 = alloca double, align 4
  %CastInstVec106 = alloca <2 x double>, align 16
  %allocaVec172 = alloca <2 x double>, align 16
  %CastInst107 = alloca double, align 4
  %CastInstVec108 = alloca <2 x double>, align 16
  %allocaVec173 = alloca <2 x double>, align 16
  %CastInst109 = alloca double, align 4
  %CastInstVec110 = alloca <2 x double>, align 16
  %allocaVec174 = alloca <2 x double>, align 16
  %CastInst111 = alloca double, align 4
  %CastInstVec112 = alloca <2 x double>, align 16
  %allocaVec175 = alloca <2 x double>, align 16
  %CastInst113 = alloca double, align 4
  %CastInstVec114 = alloca <2 x double>, align 16
  %allocaVec176 = alloca <2 x double>, align 16
  %CastInst115 = alloca double, align 4
  %CastInstVec116 = alloca <2 x double>, align 16
  %4 = alloca i16*, align 4
  %5 = alloca double*, align 4
  %6 = alloca double*, align 4
  %allocaVec177 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec178 = alloca <2 x double>, align 16
  %8 = alloca double, align 8
  %allocaVec179 = alloca <2 x double>, align 16
  %9 = alloca double, align 8
  %10 = alloca double*, align 4
  %11 = alloca i16*, align 4
  %12 = alloca i16*, align 4
  %allocaVec180 = alloca <2 x double>, align 16
  %13 = alloca double, align 8
  %allocaVec181 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  %allocaVec182 = alloca <2 x double>, align 16
  %15 = alloca double, align 8
  %allocaVec183 = alloca <2 x double>, align 16
  %16 = alloca double, align 8
  store i16* %0, i16** %4, align 4
  store double* %1, double** %5, align 4
  store double* %2, double** %6, align 4
  store double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i32 0, i32 0), double** %10, align 4
  %17 = load i16*, i16** %4, align 4
  %18 = getelementptr inbounds i16, i16* %17, i32 255
  %19 = load i16, i16* %18, align 2
  %20 = sitofp i16 %19 to double
  store double %20, double* %9, align 8
  %21 = load i16*, i16** %4, align 4
  %22 = getelementptr inbounds i16, i16* %21, i32 223
  %23 = load i16, i16* %22, align 2
  %24 = sext i16 %23 to i32
  %25 = load i16*, i16** %4, align 4
  %26 = getelementptr inbounds i16, i16* %25, i32 287
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  store i32 %24, i32* %CastInst
  %29 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %29, i32 0
  %insertCast184 = insertelement <4 x i32> %insertCast, i32 %29, i32 1
  %insertCast185 = insertelement <4 x i32> %insertCast184, i32 %29, i32 2
  %insertCast186 = insertelement <4 x i32> %insertCast185, i32 %29, i32 3
  store <4 x i32> %insertCast186, <4 x i32>* %CastInstVec, align 4
  %30 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  store i32 %28, i32* %CastInst3
  %31 = load i32, i32* %CastInst3, align 4
  %insertCast187 = insertelement <4 x i32> undef, i32 %31, i32 0
  %insertCast188 = insertelement <4 x i32> %insertCast187, i32 %31, i32 1
  %insertCast189 = insertelement <4 x i32> %insertCast188, i32 %31, i32 2
  %insertCast190 = insertelement <4 x i32> %insertCast189, i32 %31, i32 3
  store <4 x i32> %insertCast190, <4 x i32>* %CastInstVec4, align 4
  %32 = load <4 x i32>, <4 x i32>* %CastInstVec4, align 4
  %Vop = sub <4 x i32> %30, %32
  %33 = sub nsw i32 %24, %28
  %34 = sitofp i32 %33 to double
  %35 = load double*, double** %10, align 4
  %36 = getelementptr inbounds double, double* %35, i32 1
  store double* %36, double** %10, align 4
  %37 = load double, double* %35, align 8
  %38 = fmul double %34, %37
  %39 = load double, double* %9, align 8
  %40 = fadd double %39, %38
  store double %40, double* %9, align 8
  %41 = load i16*, i16** %4, align 4
  %42 = getelementptr inbounds i16, i16* %41, i32 191
  %43 = load i16, i16* %42, align 2
  %44 = sext i16 %43 to i32
  %45 = load i16*, i16** %4, align 4
  %46 = getelementptr inbounds i16, i16* %45, i32 319
  %47 = load i16, i16* %46, align 2
  %48 = sext i16 %47 to i32
  %49 = add nsw i32 %44, %48
  %50 = sitofp i32 %49 to double
  %51 = load double*, double** %10, align 4
  %52 = getelementptr inbounds double, double* %51, i32 1
  store double* %52, double** %10, align 4
  %53 = load double, double* %51, align 8
  %54 = fmul double %50, %53
  %55 = load double, double* %9, align 8
  %56 = fadd double %55, %54
  store double %56, double* %9, align 8
  %57 = load i16*, i16** %4, align 4
  %58 = getelementptr inbounds i16, i16* %57, i32 159
  %59 = load i16, i16* %58, align 2
  %60 = sext i16 %59 to i32
  %61 = load i16*, i16** %4, align 4
  %62 = getelementptr inbounds i16, i16* %61, i32 351
  %63 = load i16, i16* %62, align 2
  %64 = sext i16 %63 to i32
  %65 = sub nsw i32 %60, %64
  %66 = sitofp i32 %65 to double
  %67 = load double*, double** %10, align 4
  %68 = getelementptr inbounds double, double* %67, i32 1
  store double* %68, double** %10, align 4
  %69 = load double, double* %67, align 8
  %70 = fmul double %66, %69
  %71 = load double, double* %9, align 8
  %72 = fadd double %71, %70
  store double %72, double* %9, align 8
  %73 = load i16*, i16** %4, align 4
  %74 = getelementptr inbounds i16, i16* %73, i32 127
  %75 = load i16, i16* %74, align 2
  %76 = sext i16 %75 to i32
  %77 = load i16*, i16** %4, align 4
  %78 = getelementptr inbounds i16, i16* %77, i32 383
  %79 = load i16, i16* %78, align 2
  %80 = sext i16 %79 to i32
  %81 = add nsw i32 %76, %80
  %82 = sitofp i32 %81 to double
  %83 = load double*, double** %10, align 4
  %84 = getelementptr inbounds double, double* %83, i32 1
  store double* %84, double** %10, align 4
  %85 = load double, double* %83, align 8
  %86 = fmul double %82, %85
  %87 = load double, double* %9, align 8
  %88 = fadd double %87, %86
  store double %88, double* %9, align 8
  %89 = load i16*, i16** %4, align 4
  %90 = getelementptr inbounds i16, i16* %89, i32 95
  %91 = load i16, i16* %90, align 2
  %92 = sext i16 %91 to i32
  %93 = load i16*, i16** %4, align 4
  %94 = getelementptr inbounds i16, i16* %93, i32 415
  %95 = load i16, i16* %94, align 2
  %96 = sext i16 %95 to i32
  %97 = sub nsw i32 %92, %96
  %98 = sitofp i32 %97 to double
  %99 = load double*, double** %10, align 4
  %100 = getelementptr inbounds double, double* %99, i32 1
  store double* %100, double** %10, align 4
  %101 = load double, double* %99, align 8
  %102 = fmul double %98, %101
  %103 = load double, double* %9, align 8
  %104 = fadd double %103, %102
  store double %104, double* %9, align 8
  %105 = load i16*, i16** %4, align 4
  %106 = getelementptr inbounds i16, i16* %105, i32 63
  %107 = load i16, i16* %106, align 2
  %108 = sext i16 %107 to i32
  %109 = load i16*, i16** %4, align 4
  %110 = getelementptr inbounds i16, i16* %109, i32 447
  %111 = load i16, i16* %110, align 2
  %112 = sext i16 %111 to i32
  %113 = add nsw i32 %108, %112
  %114 = sitofp i32 %113 to double
  %115 = load double*, double** %10, align 4
  %116 = getelementptr inbounds double, double* %115, i32 1
  store double* %116, double** %10, align 4
  %117 = load double, double* %115, align 8
  %118 = fmul double %114, %117
  %119 = load double, double* %9, align 8
  %120 = fadd double %119, %118
  store double %120, double* %9, align 8
  %121 = load i16*, i16** %4, align 4
  %122 = getelementptr inbounds i16, i16* %121, i32 31
  %123 = load i16, i16* %122, align 2
  %124 = sext i16 %123 to i32
  %125 = load i16*, i16** %4, align 4
  %126 = getelementptr inbounds i16, i16* %125, i32 479
  %127 = load i16, i16* %126, align 2
  %128 = sext i16 %127 to i32
  %129 = sub nsw i32 %124, %128
  %130 = sitofp i32 %129 to double
  %131 = load double*, double** %10, align 4
  %132 = getelementptr inbounds double, double* %131, i32 1
  store double* %132, double** %10, align 4
  %133 = load double, double* %131, align 8
  %134 = fmul double %130, %133
  %135 = load double, double* %9, align 8
  %136 = fadd double %135, %134
  store double %136, double* %9, align 8
  %137 = load double, double* %9, align 8
  %138 = load double*, double** %6, align 4
  %139 = getelementptr inbounds double, double* %138, i32 15
  store double %137, double* %139, align 8
  store i32 14, i32* %7, align 4
  br label %140

; <label>:140:                                    ; preds = %605, %3
  %141 = load i32, i32* %7, align 4
  %142 = icmp sge i32 %141, 0
  br i1 %142, label %143, label %609

; <label>:143:                                    ; preds = %140
  %144 = load i16*, i16** %4, align 4
  %145 = load i32, i32* %7, align 4
  %146 = getelementptr inbounds i16, i16* %144, i32 %145
  store i16* %146, i16** %11, align 4
  %147 = load i16*, i16** %4, align 4
  %148 = load i32, i32* %7, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %148, i32 0
  %insertElmt191 = insertelement <4 x i32> %insertElmt, i32 %148, i32 1
  %insertElmt192 = insertelement <4 x i32> %insertElmt191, i32 %148, i32 2
  %insertElmt193 = insertelement <4 x i32> %insertElmt192, i32 %148, i32 3
  store <4 x i32> %insertElmt193, <4 x i32>* %allocaVec177, align 16
  %149 = load <4 x i32>, <4 x i32>* %allocaVec177, align 16
  %Vop194 = sub <4 x i32> zeroinitializer, %149
  %150 = sub nsw i32 0, %148
  %151 = getelementptr inbounds i16, i16* %147, i32 %150
  store i16* %151, i16** %12, align 4
  %152 = load i16*, i16** %12, align 4
  %153 = getelementptr inbounds i16, i16* %152, i32 270
  %154 = load i16, i16* %153, align 2
  %155 = sitofp i16 %154 to double
  store double %155, double* %8, align 8
  %156 = load i16*, i16** %11, align 4
  %157 = getelementptr inbounds i16, i16* %156, i32 240
  %158 = load i16, i16* %157, align 2
  %159 = sitofp i16 %158 to double
  store double %159, double* %9, align 8
  %160 = load double*, double** %10, align 4
  %161 = getelementptr inbounds double, double* %160, i32 1
  store double* %161, double** %10, align 4
  %162 = load double, double* %160, align 8
  store double %162, double* %13, align 8
  %163 = load i16*, i16** %12, align 4
  %164 = getelementptr inbounds i16, i16* %163, i32 334
  %165 = load i16, i16* %164, align 2
  %166 = sext i16 %165 to i32
  %167 = sitofp i32 %166 to double
  %168 = load double, double* %13, align 8
  %insertElmt195 = insertelement <2 x double> undef, double %168, i32 0
  %insertElmt196 = insertelement <2 x double> %insertElmt195, double %168, i32 1
  store <2 x double> %insertElmt196, <2 x double>* %allocaVec180, align 16
  store double %167, double* %CastInst43
  %169 = load double, double* %CastInst43, align 4
  %insertCast197 = insertelement <2 x double> undef, double %169, i32 0
  %insertCast198 = insertelement <2 x double> %insertCast197, double %169, i32 1
  store <2 x double> %insertCast198, <2 x double>* %CastInstVec44, align 4
  %170 = load <2 x double>, <2 x double>* %CastInstVec44, align 4
  %171 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop199 = fmul <2 x double> %170, %171
  %172 = fmul double %167, %168
  %173 = load double, double* %8, align 8
  %insertElmt200 = insertelement <2 x double> undef, double %173, i32 0
  %insertElmt201 = insertelement <2 x double> %insertElmt200, double %173, i32 1
  store <2 x double> %insertElmt201, <2 x double>* %allocaVec178, align 16
  %174 = load <2 x double>, <2 x double>* %allocaVec178, align 16
  %Vop202 = fadd <2 x double> %174, %Vop199
  store <2 x double> %Vop202, <2 x double>* %allocaVec178
  %175 = fadd double %173, %172
  store double %175, double* %8, align 8
  %176 = load i16*, i16** %11, align 4
  %177 = getelementptr inbounds i16, i16* %176, i32 176
  %178 = load i16, i16* %177, align 2
  %179 = sext i16 %178 to i32
  %180 = sitofp i32 %179 to double
  %181 = load double, double* %13, align 8
  %insertElmt203 = insertelement <2 x double> undef, double %181, i32 0
  %insertElmt204 = insertelement <2 x double> %insertElmt203, double %181, i32 1
  store <2 x double> %insertElmt204, <2 x double>* %allocaVec180, align 16
  store double %180, double* %CastInst45
  %182 = load double, double* %CastInst45, align 4
  %insertCast205 = insertelement <2 x double> undef, double %182, i32 0
  %insertCast206 = insertelement <2 x double> %insertCast205, double %182, i32 1
  store <2 x double> %insertCast206, <2 x double>* %CastInstVec46, align 4
  %183 = load <2 x double>, <2 x double>* %CastInstVec46, align 4
  %184 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop207 = fmul <2 x double> %183, %184
  %185 = fmul double %180, %181
  %186 = load double, double* %9, align 8
  %insertElmt208 = insertelement <2 x double> undef, double %186, i32 0
  %insertElmt209 = insertelement <2 x double> %insertElmt208, double %186, i32 1
  store <2 x double> %insertElmt209, <2 x double>* %allocaVec179, align 16
  %187 = load <2 x double>, <2 x double>* %allocaVec179, align 16
  %Vop210 = fadd <2 x double> %187, %Vop207
  store <2 x double> %Vop210, <2 x double>* %allocaVec179
  %188 = fadd double %186, %185
  store double %188, double* %9, align 8
  %189 = load double*, double** %10, align 4
  %190 = getelementptr inbounds double, double* %189, i32 1
  store double* %190, double** %10, align 4
  %191 = load double, double* %189, align 8
  store double %191, double* %13, align 8
  %192 = load i16*, i16** %12, align 4
  %193 = getelementptr inbounds i16, i16* %192, i32 398
  %194 = load i16, i16* %193, align 2
  %195 = sext i16 %194 to i32
  %196 = sitofp i32 %195 to double
  %197 = load double, double* %13, align 8
  %insertElmt211 = insertelement <2 x double> undef, double %197, i32 0
  %insertElmt212 = insertelement <2 x double> %insertElmt211, double %197, i32 1
  store <2 x double> %insertElmt212, <2 x double>* %allocaVec180, align 16
  store double %196, double* %CastInst47
  %198 = load double, double* %CastInst47, align 4
  %insertCast213 = insertelement <2 x double> undef, double %198, i32 0
  %insertCast214 = insertelement <2 x double> %insertCast213, double %198, i32 1
  store <2 x double> %insertCast214, <2 x double>* %CastInstVec48, align 4
  %199 = load <2 x double>, <2 x double>* %CastInstVec48, align 4
  %200 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop215 = fmul <2 x double> %199, %200
  %201 = fmul double %196, %197
  %202 = load double, double* %8, align 8
  %203 = load <2 x double>, <2 x double>* %allocaVec178, align 16
  %Vop216 = fadd <2 x double> %203, %Vop215
  store <2 x double> %Vop216, <2 x double>* %allocaVec178
  %204 = fadd double %202, %201
  store double %204, double* %8, align 8
  %205 = load i16*, i16** %11, align 4
  %206 = getelementptr inbounds i16, i16* %205, i32 112
  %207 = load i16, i16* %206, align 2
  %208 = sext i16 %207 to i32
  %209 = sitofp i32 %208 to double
  %210 = load double, double* %13, align 8
  %insertElmt217 = insertelement <2 x double> undef, double %210, i32 0
  %insertElmt218 = insertelement <2 x double> %insertElmt217, double %210, i32 1
  store <2 x double> %insertElmt218, <2 x double>* %allocaVec180, align 16
  store double %209, double* %CastInst49
  %211 = load double, double* %CastInst49, align 4
  %insertCast219 = insertelement <2 x double> undef, double %211, i32 0
  %insertCast220 = insertelement <2 x double> %insertCast219, double %211, i32 1
  store <2 x double> %insertCast220, <2 x double>* %CastInstVec50, align 4
  %212 = load <2 x double>, <2 x double>* %CastInstVec50, align 4
  %213 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop221 = fmul <2 x double> %212, %213
  %214 = fmul double %209, %210
  %215 = load double, double* %9, align 8
  %216 = load <2 x double>, <2 x double>* %allocaVec179, align 16
  %Vop222 = fadd <2 x double> %216, %Vop221
  store <2 x double> %Vop222, <2 x double>* %allocaVec179
  %217 = fadd double %215, %214
  store double %217, double* %9, align 8
  %218 = load double*, double** %10, align 4
  %219 = getelementptr inbounds double, double* %218, i32 1
  store double* %219, double** %10, align 4
  %220 = load double, double* %218, align 8
  store double %220, double* %13, align 8
  %221 = load i16*, i16** %12, align 4
  %222 = getelementptr inbounds i16, i16* %221, i32 462
  %223 = load i16, i16* %222, align 2
  %224 = sext i16 %223 to i32
  %225 = sitofp i32 %224 to double
  %226 = load double, double* %13, align 8
  %insertElmt223 = insertelement <2 x double> undef, double %226, i32 0
  %insertElmt224 = insertelement <2 x double> %insertElmt223, double %226, i32 1
  store <2 x double> %insertElmt224, <2 x double>* %allocaVec180, align 16
  store double %225, double* %CastInst51
  %227 = load double, double* %CastInst51, align 4
  %insertCast225 = insertelement <2 x double> undef, double %227, i32 0
  %insertCast226 = insertelement <2 x double> %insertCast225, double %227, i32 1
  store <2 x double> %insertCast226, <2 x double>* %CastInstVec52, align 4
  %228 = load <2 x double>, <2 x double>* %CastInstVec52, align 4
  %229 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop227 = fmul <2 x double> %228, %229
  %230 = fmul double %225, %226
  %231 = load double, double* %8, align 8
  %232 = load <2 x double>, <2 x double>* %allocaVec178, align 16
  %Vop228 = fadd <2 x double> %232, %Vop227
  store <2 x double> %Vop228, <2 x double>* %allocaVec178
  %233 = fadd double %231, %230
  store double %233, double* %8, align 8
  %234 = load i16*, i16** %11, align 4
  %235 = getelementptr inbounds i16, i16* %234, i32 48
  %236 = load i16, i16* %235, align 2
  %237 = sext i16 %236 to i32
  %238 = sitofp i32 %237 to double
  %239 = load double, double* %13, align 8
  %insertElmt229 = insertelement <2 x double> undef, double %239, i32 0
  %insertElmt230 = insertelement <2 x double> %insertElmt229, double %239, i32 1
  store <2 x double> %insertElmt230, <2 x double>* %allocaVec180, align 16
  store double %238, double* %CastInst53
  %240 = load double, double* %CastInst53, align 4
  %insertCast231 = insertelement <2 x double> undef, double %240, i32 0
  %insertCast232 = insertelement <2 x double> %insertCast231, double %240, i32 1
  store <2 x double> %insertCast232, <2 x double>* %CastInstVec54, align 4
  %241 = load <2 x double>, <2 x double>* %CastInstVec54, align 4
  %242 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop233 = fmul <2 x double> %241, %242
  %243 = fmul double %238, %239
  %244 = load double, double* %9, align 8
  %245 = load <2 x double>, <2 x double>* %allocaVec179, align 16
  %Vop234 = fadd <2 x double> %245, %Vop233
  store <2 x double> %Vop234, <2 x double>* %allocaVec179
  %246 = fadd double %244, %243
  store double %246, double* %9, align 8
  %247 = load double*, double** %10, align 4
  %248 = getelementptr inbounds double, double* %247, i32 1
  store double* %248, double** %10, align 4
  %249 = load double, double* %247, align 8
  store double %249, double* %13, align 8
  %250 = load i16*, i16** %12, align 4
  %251 = getelementptr inbounds i16, i16* %250, i32 14
  %252 = load i16, i16* %251, align 2
  %253 = sext i16 %252 to i32
  %254 = sitofp i32 %253 to double
  %255 = load double, double* %13, align 8
  %insertElmt235 = insertelement <2 x double> undef, double %255, i32 0
  %insertElmt236 = insertelement <2 x double> %insertElmt235, double %255, i32 1
  store <2 x double> %insertElmt236, <2 x double>* %allocaVec180, align 16
  store double %254, double* %CastInst55
  %256 = load double, double* %CastInst55, align 4
  %insertCast237 = insertelement <2 x double> undef, double %256, i32 0
  %insertCast238 = insertelement <2 x double> %insertCast237, double %256, i32 1
  store <2 x double> %insertCast238, <2 x double>* %CastInstVec56, align 4
  %257 = load <2 x double>, <2 x double>* %CastInstVec56, align 4
  %258 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop239 = fmul <2 x double> %257, %258
  %259 = fmul double %254, %255
  %260 = load double, double* %8, align 8
  %261 = load <2 x double>, <2 x double>* %allocaVec178, align 16
  %Vop240 = fadd <2 x double> %261, %Vop239
  store <2 x double> %Vop240, <2 x double>* %allocaVec178
  %262 = fadd double %260, %259
  store double %262, double* %8, align 8
  %263 = load i16*, i16** %11, align 4
  %264 = getelementptr inbounds i16, i16* %263, i32 496
  %265 = load i16, i16* %264, align 2
  %266 = sext i16 %265 to i32
  %267 = sitofp i32 %266 to double
  %268 = load double, double* %13, align 8
  %insertElmt241 = insertelement <2 x double> undef, double %268, i32 0
  %insertElmt242 = insertelement <2 x double> %insertElmt241, double %268, i32 1
  store <2 x double> %insertElmt242, <2 x double>* %allocaVec180, align 16
  store double %267, double* %CastInst57
  %269 = load double, double* %CastInst57, align 4
  %insertCast243 = insertelement <2 x double> undef, double %269, i32 0
  %insertCast244 = insertelement <2 x double> %insertCast243, double %269, i32 1
  store <2 x double> %insertCast244, <2 x double>* %CastInstVec58, align 4
  %270 = load <2 x double>, <2 x double>* %CastInstVec58, align 4
  %271 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop245 = fmul <2 x double> %270, %271
  %272 = fmul double %267, %268
  %273 = load double, double* %9, align 8
  %274 = load <2 x double>, <2 x double>* %allocaVec179, align 16
  %Vop246 = fadd <2 x double> %274, %Vop245
  store <2 x double> %Vop246, <2 x double>* %allocaVec179
  %275 = fadd double %273, %272
  store double %275, double* %9, align 8
  %276 = load double*, double** %10, align 4
  %277 = getelementptr inbounds double, double* %276, i32 1
  store double* %277, double** %10, align 4
  %278 = load double, double* %276, align 8
  store double %278, double* %13, align 8
  %279 = load i16*, i16** %12, align 4
  %280 = getelementptr inbounds i16, i16* %279, i32 78
  %281 = load i16, i16* %280, align 2
  %282 = sext i16 %281 to i32
  %283 = sitofp i32 %282 to double
  %284 = load double, double* %13, align 8
  %insertElmt247 = insertelement <2 x double> undef, double %284, i32 0
  %insertElmt248 = insertelement <2 x double> %insertElmt247, double %284, i32 1
  store <2 x double> %insertElmt248, <2 x double>* %allocaVec180, align 16
  store double %283, double* %CastInst59
  %285 = load double, double* %CastInst59, align 4
  %insertCast249 = insertelement <2 x double> undef, double %285, i32 0
  %insertCast250 = insertelement <2 x double> %insertCast249, double %285, i32 1
  store <2 x double> %insertCast250, <2 x double>* %CastInstVec60, align 4
  %286 = load <2 x double>, <2 x double>* %CastInstVec60, align 4
  %287 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop251 = fmul <2 x double> %286, %287
  %288 = fmul double %283, %284
  %289 = load double, double* %8, align 8
  %290 = load <2 x double>, <2 x double>* %allocaVec178, align 16
  %Vop252 = fadd <2 x double> %290, %Vop251
  store <2 x double> %Vop252, <2 x double>* %allocaVec178
  %291 = fadd double %289, %288
  store double %291, double* %8, align 8
  %292 = load i16*, i16** %11, align 4
  %293 = getelementptr inbounds i16, i16* %292, i32 432
  %294 = load i16, i16* %293, align 2
  %295 = sext i16 %294 to i32
  %296 = sitofp i32 %295 to double
  %297 = load double, double* %13, align 8
  %insertElmt253 = insertelement <2 x double> undef, double %297, i32 0
  %insertElmt254 = insertelement <2 x double> %insertElmt253, double %297, i32 1
  store <2 x double> %insertElmt254, <2 x double>* %allocaVec180, align 16
  store double %296, double* %CastInst61
  %298 = load double, double* %CastInst61, align 4
  %insertCast255 = insertelement <2 x double> undef, double %298, i32 0
  %insertCast256 = insertelement <2 x double> %insertCast255, double %298, i32 1
  store <2 x double> %insertCast256, <2 x double>* %CastInstVec62, align 4
  %299 = load <2 x double>, <2 x double>* %CastInstVec62, align 4
  %300 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop257 = fmul <2 x double> %299, %300
  %301 = fmul double %296, %297
  %302 = load double, double* %9, align 8
  %303 = load <2 x double>, <2 x double>* %allocaVec179, align 16
  %Vop258 = fadd <2 x double> %303, %Vop257
  store <2 x double> %Vop258, <2 x double>* %allocaVec179
  %304 = fadd double %302, %301
  store double %304, double* %9, align 8
  %305 = load double*, double** %10, align 4
  %306 = getelementptr inbounds double, double* %305, i32 1
  store double* %306, double** %10, align 4
  %307 = load double, double* %305, align 8
  store double %307, double* %13, align 8
  %308 = load i16*, i16** %12, align 4
  %309 = getelementptr inbounds i16, i16* %308, i32 142
  %310 = load i16, i16* %309, align 2
  %311 = sext i16 %310 to i32
  %312 = sitofp i32 %311 to double
  %313 = load double, double* %13, align 8
  %insertElmt259 = insertelement <2 x double> undef, double %313, i32 0
  %insertElmt260 = insertelement <2 x double> %insertElmt259, double %313, i32 1
  store <2 x double> %insertElmt260, <2 x double>* %allocaVec180, align 16
  store double %312, double* %CastInst63
  %314 = load double, double* %CastInst63, align 4
  %insertCast261 = insertelement <2 x double> undef, double %314, i32 0
  %insertCast262 = insertelement <2 x double> %insertCast261, double %314, i32 1
  store <2 x double> %insertCast262, <2 x double>* %CastInstVec64, align 4
  %315 = load <2 x double>, <2 x double>* %CastInstVec64, align 4
  %316 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop263 = fmul <2 x double> %315, %316
  %317 = fmul double %312, %313
  %318 = load double, double* %8, align 8
  %319 = load <2 x double>, <2 x double>* %allocaVec178, align 16
  %Vop264 = fadd <2 x double> %319, %Vop263
  store <2 x double> %Vop264, <2 x double>* %allocaVec178
  %320 = fadd double %318, %317
  store double %320, double* %8, align 8
  %321 = load i16*, i16** %11, align 4
  %322 = getelementptr inbounds i16, i16* %321, i32 368
  %323 = load i16, i16* %322, align 2
  %324 = sext i16 %323 to i32
  %325 = sitofp i32 %324 to double
  %326 = load double, double* %13, align 8
  %insertElmt265 = insertelement <2 x double> undef, double %326, i32 0
  %insertElmt266 = insertelement <2 x double> %insertElmt265, double %326, i32 1
  store <2 x double> %insertElmt266, <2 x double>* %allocaVec180, align 16
  store double %325, double* %CastInst65
  %327 = load double, double* %CastInst65, align 4
  %insertCast267 = insertelement <2 x double> undef, double %327, i32 0
  %insertCast268 = insertelement <2 x double> %insertCast267, double %327, i32 1
  store <2 x double> %insertCast268, <2 x double>* %CastInstVec66, align 4
  %328 = load <2 x double>, <2 x double>* %CastInstVec66, align 4
  %329 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop269 = fmul <2 x double> %328, %329
  %330 = fmul double %325, %326
  %331 = load double, double* %9, align 8
  %332 = load <2 x double>, <2 x double>* %allocaVec179, align 16
  %Vop270 = fadd <2 x double> %332, %Vop269
  store <2 x double> %Vop270, <2 x double>* %allocaVec179
  %333 = fadd double %331, %330
  store double %333, double* %9, align 8
  %334 = load double*, double** %10, align 4
  %335 = getelementptr inbounds double, double* %334, i32 1
  store double* %335, double** %10, align 4
  %336 = load double, double* %334, align 8
  store double %336, double* %13, align 8
  %337 = load i16*, i16** %12, align 4
  %338 = getelementptr inbounds i16, i16* %337, i32 206
  %339 = load i16, i16* %338, align 2
  %340 = sext i16 %339 to i32
  %341 = sitofp i32 %340 to double
  %342 = load double, double* %13, align 8
  %insertElmt271 = insertelement <2 x double> undef, double %342, i32 0
  %insertElmt272 = insertelement <2 x double> %insertElmt271, double %342, i32 1
  store <2 x double> %insertElmt272, <2 x double>* %allocaVec180, align 16
  store double %341, double* %CastInst67
  %343 = load double, double* %CastInst67, align 4
  %insertCast273 = insertelement <2 x double> undef, double %343, i32 0
  %insertCast274 = insertelement <2 x double> %insertCast273, double %343, i32 1
  store <2 x double> %insertCast274, <2 x double>* %CastInstVec68, align 4
  %344 = load <2 x double>, <2 x double>* %CastInstVec68, align 4
  %345 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop275 = fmul <2 x double> %344, %345
  %346 = fmul double %341, %342
  %347 = load double, double* %8, align 8
  %348 = load <2 x double>, <2 x double>* %allocaVec178, align 16
  %Vop276 = fadd <2 x double> %348, %Vop275
  store <2 x double> %Vop276, <2 x double>* %allocaVec178
  %349 = fadd double %347, %346
  store double %349, double* %8, align 8
  %350 = load i16*, i16** %11, align 4
  %351 = getelementptr inbounds i16, i16* %350, i32 304
  %352 = load i16, i16* %351, align 2
  %353 = sext i16 %352 to i32
  %354 = sitofp i32 %353 to double
  %355 = load double, double* %13, align 8
  %insertElmt277 = insertelement <2 x double> undef, double %355, i32 0
  %insertElmt278 = insertelement <2 x double> %insertElmt277, double %355, i32 1
  store <2 x double> %insertElmt278, <2 x double>* %allocaVec180, align 16
  store double %354, double* %CastInst69
  %356 = load double, double* %CastInst69, align 4
  %insertCast279 = insertelement <2 x double> undef, double %356, i32 0
  %insertCast280 = insertelement <2 x double> %insertCast279, double %356, i32 1
  store <2 x double> %insertCast280, <2 x double>* %CastInstVec70, align 4
  %357 = load <2 x double>, <2 x double>* %CastInstVec70, align 4
  %358 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop281 = fmul <2 x double> %357, %358
  %359 = fmul double %354, %355
  %360 = load double, double* %9, align 8
  %361 = load <2 x double>, <2 x double>* %allocaVec179, align 16
  %Vop282 = fadd <2 x double> %361, %Vop281
  store <2 x double> %Vop282, <2 x double>* %allocaVec179
  %362 = fadd double %360, %359
  store double %362, double* %9, align 8
  %363 = load double*, double** %10, align 4
  %364 = getelementptr inbounds double, double* %363, i32 1
  store double* %364, double** %10, align 4
  %365 = load double, double* %363, align 8
  store double %365, double* %13, align 8
  %366 = load i16*, i16** %11, align 4
  %367 = getelementptr inbounds i16, i16* %366, i32 16
  %368 = load i16, i16* %367, align 2
  %369 = sext i16 %368 to i32
  %370 = sitofp i32 %369 to double
  %371 = load double, double* %13, align 8
  %insertElmt283 = insertelement <2 x double> undef, double %371, i32 0
  %insertElmt284 = insertelement <2 x double> %insertElmt283, double %371, i32 1
  store <2 x double> %insertElmt284, <2 x double>* %allocaVec180, align 16
  store double %370, double* %CastInst71
  %372 = load double, double* %CastInst71, align 4
  %insertCast285 = insertelement <2 x double> undef, double %372, i32 0
  %insertCast286 = insertelement <2 x double> %insertCast285, double %372, i32 1
  store <2 x double> %insertCast286, <2 x double>* %CastInstVec72, align 4
  %373 = load <2 x double>, <2 x double>* %CastInstVec72, align 4
  %374 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop287 = fmul <2 x double> %373, %374
  %375 = fmul double %370, %371
  %376 = load double, double* %8, align 8
  %377 = load <2 x double>, <2 x double>* %allocaVec178, align 16
  %Vop288 = fadd <2 x double> %377, %Vop287
  store <2 x double> %Vop288, <2 x double>* %allocaVec178
  %378 = fadd double %376, %375
  store double %378, double* %8, align 8
  %379 = load i16*, i16** %12, align 4
  %380 = getelementptr inbounds i16, i16* %379, i32 494
  %381 = load i16, i16* %380, align 2
  %382 = sext i16 %381 to i32
  %383 = sitofp i32 %382 to double
  %384 = load double, double* %13, align 8
  %insertElmt289 = insertelement <2 x double> undef, double %384, i32 0
  %insertElmt290 = insertelement <2 x double> %insertElmt289, double %384, i32 1
  store <2 x double> %insertElmt290, <2 x double>* %allocaVec180, align 16
  store double %383, double* %CastInst73
  %385 = load double, double* %CastInst73, align 4
  %insertCast291 = insertelement <2 x double> undef, double %385, i32 0
  %insertCast292 = insertelement <2 x double> %insertCast291, double %385, i32 1
  store <2 x double> %insertCast292, <2 x double>* %CastInstVec74, align 4
  %386 = load <2 x double>, <2 x double>* %CastInstVec74, align 4
  %387 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop293 = fmul <2 x double> %386, %387
  %388 = fmul double %383, %384
  %389 = load double, double* %9, align 8
  %390 = load <2 x double>, <2 x double>* %allocaVec179, align 16
  %Vop294 = fsub <2 x double> %390, %Vop293
  store <2 x double> %Vop294, <2 x double>* %allocaVec179
  %391 = fsub double %389, %388
  store double %391, double* %9, align 8
  %392 = load double*, double** %10, align 4
  %393 = getelementptr inbounds double, double* %392, i32 1
  store double* %393, double** %10, align 4
  %394 = load double, double* %392, align 8
  store double %394, double* %13, align 8
  %395 = load i16*, i16** %11, align 4
  %396 = getelementptr inbounds i16, i16* %395, i32 80
  %397 = load i16, i16* %396, align 2
  %398 = sext i16 %397 to i32
  %399 = sitofp i32 %398 to double
  %400 = load double, double* %13, align 8
  %insertElmt295 = insertelement <2 x double> undef, double %400, i32 0
  %insertElmt296 = insertelement <2 x double> %insertElmt295, double %400, i32 1
  store <2 x double> %insertElmt296, <2 x double>* %allocaVec180, align 16
  store double %399, double* %CastInst75
  %401 = load double, double* %CastInst75, align 4
  %insertCast297 = insertelement <2 x double> undef, double %401, i32 0
  %insertCast298 = insertelement <2 x double> %insertCast297, double %401, i32 1
  store <2 x double> %insertCast298, <2 x double>* %CastInstVec76, align 4
  %402 = load <2 x double>, <2 x double>* %CastInstVec76, align 4
  %403 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop299 = fmul <2 x double> %402, %403
  %404 = fmul double %399, %400
  %405 = load double, double* %8, align 8
  %406 = load <2 x double>, <2 x double>* %allocaVec178, align 16
  %Vop300 = fadd <2 x double> %406, %Vop299
  store <2 x double> %Vop300, <2 x double>* %allocaVec178
  %407 = fadd double %405, %404
  store double %407, double* %8, align 8
  %408 = load i16*, i16** %12, align 4
  %409 = getelementptr inbounds i16, i16* %408, i32 430
  %410 = load i16, i16* %409, align 2
  %411 = sext i16 %410 to i32
  %412 = sitofp i32 %411 to double
  %413 = load double, double* %13, align 8
  %insertElmt301 = insertelement <2 x double> undef, double %413, i32 0
  %insertElmt302 = insertelement <2 x double> %insertElmt301, double %413, i32 1
  store <2 x double> %insertElmt302, <2 x double>* %allocaVec180, align 16
  store double %412, double* %CastInst77
  %414 = load double, double* %CastInst77, align 4
  %insertCast303 = insertelement <2 x double> undef, double %414, i32 0
  %insertCast304 = insertelement <2 x double> %insertCast303, double %414, i32 1
  store <2 x double> %insertCast304, <2 x double>* %CastInstVec78, align 4
  %415 = load <2 x double>, <2 x double>* %CastInstVec78, align 4
  %416 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop305 = fmul <2 x double> %415, %416
  %417 = fmul double %412, %413
  %418 = load double, double* %9, align 8
  %419 = load <2 x double>, <2 x double>* %allocaVec179, align 16
  %Vop306 = fsub <2 x double> %419, %Vop305
  store <2 x double> %Vop306, <2 x double>* %allocaVec179
  %420 = fsub double %418, %417
  store double %420, double* %9, align 8
  %421 = load double*, double** %10, align 4
  %422 = getelementptr inbounds double, double* %421, i32 1
  store double* %422, double** %10, align 4
  %423 = load double, double* %421, align 8
  store double %423, double* %13, align 8
  %424 = load i16*, i16** %11, align 4
  %425 = getelementptr inbounds i16, i16* %424, i32 144
  %426 = load i16, i16* %425, align 2
  %427 = sext i16 %426 to i32
  %428 = sitofp i32 %427 to double
  %429 = load double, double* %13, align 8
  %insertElmt307 = insertelement <2 x double> undef, double %429, i32 0
  %insertElmt308 = insertelement <2 x double> %insertElmt307, double %429, i32 1
  store <2 x double> %insertElmt308, <2 x double>* %allocaVec180, align 16
  store double %428, double* %CastInst79
  %430 = load double, double* %CastInst79, align 4
  %insertCast309 = insertelement <2 x double> undef, double %430, i32 0
  %insertCast310 = insertelement <2 x double> %insertCast309, double %430, i32 1
  store <2 x double> %insertCast310, <2 x double>* %CastInstVec80, align 4
  %431 = load <2 x double>, <2 x double>* %CastInstVec80, align 4
  %432 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop311 = fmul <2 x double> %431, %432
  %433 = fmul double %428, %429
  %434 = load double, double* %8, align 8
  %435 = load <2 x double>, <2 x double>* %allocaVec178, align 16
  %Vop312 = fadd <2 x double> %435, %Vop311
  store <2 x double> %Vop312, <2 x double>* %allocaVec178
  %436 = fadd double %434, %433
  store double %436, double* %8, align 8
  %437 = load i16*, i16** %12, align 4
  %438 = getelementptr inbounds i16, i16* %437, i32 366
  %439 = load i16, i16* %438, align 2
  %440 = sext i16 %439 to i32
  %441 = sitofp i32 %440 to double
  %442 = load double, double* %13, align 8
  %insertElmt313 = insertelement <2 x double> undef, double %442, i32 0
  %insertElmt314 = insertelement <2 x double> %insertElmt313, double %442, i32 1
  store <2 x double> %insertElmt314, <2 x double>* %allocaVec180, align 16
  store double %441, double* %CastInst81
  %443 = load double, double* %CastInst81, align 4
  %insertCast315 = insertelement <2 x double> undef, double %443, i32 0
  %insertCast316 = insertelement <2 x double> %insertCast315, double %443, i32 1
  store <2 x double> %insertCast316, <2 x double>* %CastInstVec82, align 4
  %444 = load <2 x double>, <2 x double>* %CastInstVec82, align 4
  %445 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop317 = fmul <2 x double> %444, %445
  %446 = fmul double %441, %442
  %447 = load double, double* %9, align 8
  %448 = load <2 x double>, <2 x double>* %allocaVec179, align 16
  %Vop318 = fsub <2 x double> %448, %Vop317
  store <2 x double> %Vop318, <2 x double>* %allocaVec179
  %449 = fsub double %447, %446
  store double %449, double* %9, align 8
  %450 = load double*, double** %10, align 4
  %451 = getelementptr inbounds double, double* %450, i32 1
  store double* %451, double** %10, align 4
  %452 = load double, double* %450, align 8
  store double %452, double* %13, align 8
  %453 = load i16*, i16** %11, align 4
  %454 = getelementptr inbounds i16, i16* %453, i32 208
  %455 = load i16, i16* %454, align 2
  %456 = sext i16 %455 to i32
  %457 = sitofp i32 %456 to double
  %458 = load double, double* %13, align 8
  %insertElmt319 = insertelement <2 x double> undef, double %458, i32 0
  %insertElmt320 = insertelement <2 x double> %insertElmt319, double %458, i32 1
  store <2 x double> %insertElmt320, <2 x double>* %allocaVec180, align 16
  store double %457, double* %CastInst83
  %459 = load double, double* %CastInst83, align 4
  %insertCast321 = insertelement <2 x double> undef, double %459, i32 0
  %insertCast322 = insertelement <2 x double> %insertCast321, double %459, i32 1
  store <2 x double> %insertCast322, <2 x double>* %CastInstVec84, align 4
  %460 = load <2 x double>, <2 x double>* %CastInstVec84, align 4
  %461 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop323 = fmul <2 x double> %460, %461
  %462 = fmul double %457, %458
  %463 = load double, double* %8, align 8
  %464 = load <2 x double>, <2 x double>* %allocaVec178, align 16
  %Vop324 = fadd <2 x double> %464, %Vop323
  store <2 x double> %Vop324, <2 x double>* %allocaVec178
  %465 = fadd double %463, %462
  store double %465, double* %8, align 8
  %466 = load i16*, i16** %12, align 4
  %467 = getelementptr inbounds i16, i16* %466, i32 302
  %468 = load i16, i16* %467, align 2
  %469 = sext i16 %468 to i32
  %470 = sitofp i32 %469 to double
  %471 = load double, double* %13, align 8
  %insertElmt325 = insertelement <2 x double> undef, double %471, i32 0
  %insertElmt326 = insertelement <2 x double> %insertElmt325, double %471, i32 1
  store <2 x double> %insertElmt326, <2 x double>* %allocaVec180, align 16
  store double %470, double* %CastInst85
  %472 = load double, double* %CastInst85, align 4
  %insertCast327 = insertelement <2 x double> undef, double %472, i32 0
  %insertCast328 = insertelement <2 x double> %insertCast327, double %472, i32 1
  store <2 x double> %insertCast328, <2 x double>* %CastInstVec86, align 4
  %473 = load <2 x double>, <2 x double>* %CastInstVec86, align 4
  %474 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop329 = fmul <2 x double> %473, %474
  %475 = fmul double %470, %471
  %476 = load double, double* %9, align 8
  %477 = load <2 x double>, <2 x double>* %allocaVec179, align 16
  %Vop330 = fsub <2 x double> %477, %Vop329
  store <2 x double> %Vop330, <2 x double>* %allocaVec179
  %478 = fsub double %476, %475
  store double %478, double* %9, align 8
  %479 = load double*, double** %10, align 4
  %480 = getelementptr inbounds double, double* %479, i32 1
  store double* %480, double** %10, align 4
  %481 = load double, double* %479, align 8
  store double %481, double* %13, align 8
  %482 = load i16*, i16** %11, align 4
  %483 = getelementptr inbounds i16, i16* %482, i32 272
  %484 = load i16, i16* %483, align 2
  %485 = sext i16 %484 to i32
  %486 = sitofp i32 %485 to double
  %487 = load double, double* %13, align 8
  %insertElmt331 = insertelement <2 x double> undef, double %487, i32 0
  %insertElmt332 = insertelement <2 x double> %insertElmt331, double %487, i32 1
  store <2 x double> %insertElmt332, <2 x double>* %allocaVec180, align 16
  store double %486, double* %CastInst87
  %488 = load double, double* %CastInst87, align 4
  %insertCast333 = insertelement <2 x double> undef, double %488, i32 0
  %insertCast334 = insertelement <2 x double> %insertCast333, double %488, i32 1
  store <2 x double> %insertCast334, <2 x double>* %CastInstVec88, align 4
  %489 = load <2 x double>, <2 x double>* %CastInstVec88, align 4
  %490 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop335 = fmul <2 x double> %489, %490
  %491 = fmul double %486, %487
  %492 = load double, double* %8, align 8
  %493 = load <2 x double>, <2 x double>* %allocaVec178, align 16
  %Vop336 = fsub <2 x double> %493, %Vop335
  store <2 x double> %Vop336, <2 x double>* %allocaVec178
  %494 = fsub double %492, %491
  store double %494, double* %8, align 8
  %495 = load i16*, i16** %12, align 4
  %496 = getelementptr inbounds i16, i16* %495, i32 238
  %497 = load i16, i16* %496, align 2
  %498 = sext i16 %497 to i32
  %499 = sitofp i32 %498 to double
  %500 = load double, double* %13, align 8
  %insertElmt337 = insertelement <2 x double> undef, double %500, i32 0
  %insertElmt338 = insertelement <2 x double> %insertElmt337, double %500, i32 1
  store <2 x double> %insertElmt338, <2 x double>* %allocaVec180, align 16
  store double %499, double* %CastInst89
  %501 = load double, double* %CastInst89, align 4
  %insertCast339 = insertelement <2 x double> undef, double %501, i32 0
  %insertCast340 = insertelement <2 x double> %insertCast339, double %501, i32 1
  store <2 x double> %insertCast340, <2 x double>* %CastInstVec90, align 4
  %502 = load <2 x double>, <2 x double>* %CastInstVec90, align 4
  %503 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop341 = fmul <2 x double> %502, %503
  %504 = fmul double %499, %500
  %505 = load double, double* %9, align 8
  %506 = load <2 x double>, <2 x double>* %allocaVec179, align 16
  %Vop342 = fadd <2 x double> %506, %Vop341
  store <2 x double> %Vop342, <2 x double>* %allocaVec179
  %507 = fadd double %505, %504
  store double %507, double* %9, align 8
  %508 = load double*, double** %10, align 4
  %509 = getelementptr inbounds double, double* %508, i32 1
  store double* %509, double** %10, align 4
  %510 = load double, double* %508, align 8
  store double %510, double* %13, align 8
  %511 = load i16*, i16** %11, align 4
  %512 = getelementptr inbounds i16, i16* %511, i32 336
  %513 = load i16, i16* %512, align 2
  %514 = sext i16 %513 to i32
  %515 = sitofp i32 %514 to double
  %516 = load double, double* %13, align 8
  %insertElmt343 = insertelement <2 x double> undef, double %516, i32 0
  %insertElmt344 = insertelement <2 x double> %insertElmt343, double %516, i32 1
  store <2 x double> %insertElmt344, <2 x double>* %allocaVec180, align 16
  store double %515, double* %CastInst91
  %517 = load double, double* %CastInst91, align 4
  %insertCast345 = insertelement <2 x double> undef, double %517, i32 0
  %insertCast346 = insertelement <2 x double> %insertCast345, double %517, i32 1
  store <2 x double> %insertCast346, <2 x double>* %CastInstVec92, align 4
  %518 = load <2 x double>, <2 x double>* %CastInstVec92, align 4
  %519 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop347 = fmul <2 x double> %518, %519
  %520 = fmul double %515, %516
  %521 = load double, double* %8, align 8
  %522 = load <2 x double>, <2 x double>* %allocaVec178, align 16
  %Vop348 = fsub <2 x double> %522, %Vop347
  store <2 x double> %Vop348, <2 x double>* %allocaVec178
  %523 = fsub double %521, %520
  store double %523, double* %8, align 8
  %524 = load i16*, i16** %12, align 4
  %525 = getelementptr inbounds i16, i16* %524, i32 174
  %526 = load i16, i16* %525, align 2
  %527 = sext i16 %526 to i32
  %528 = sitofp i32 %527 to double
  %529 = load double, double* %13, align 8
  %insertElmt349 = insertelement <2 x double> undef, double %529, i32 0
  %insertElmt350 = insertelement <2 x double> %insertElmt349, double %529, i32 1
  store <2 x double> %insertElmt350, <2 x double>* %allocaVec180, align 16
  store double %528, double* %CastInst93
  %530 = load double, double* %CastInst93, align 4
  %insertCast351 = insertelement <2 x double> undef, double %530, i32 0
  %insertCast352 = insertelement <2 x double> %insertCast351, double %530, i32 1
  store <2 x double> %insertCast352, <2 x double>* %CastInstVec94, align 4
  %531 = load <2 x double>, <2 x double>* %CastInstVec94, align 4
  %532 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop353 = fmul <2 x double> %531, %532
  %533 = fmul double %528, %529
  %534 = load double, double* %9, align 8
  %535 = load <2 x double>, <2 x double>* %allocaVec179, align 16
  %Vop354 = fadd <2 x double> %535, %Vop353
  store <2 x double> %Vop354, <2 x double>* %allocaVec179
  %536 = fadd double %534, %533
  store double %536, double* %9, align 8
  %537 = load double*, double** %10, align 4
  %538 = getelementptr inbounds double, double* %537, i32 1
  store double* %538, double** %10, align 4
  %539 = load double, double* %537, align 8
  store double %539, double* %13, align 8
  %540 = load i16*, i16** %11, align 4
  %541 = getelementptr inbounds i16, i16* %540, i32 400
  %542 = load i16, i16* %541, align 2
  %543 = sext i16 %542 to i32
  %544 = sitofp i32 %543 to double
  %545 = load double, double* %13, align 8
  %insertElmt355 = insertelement <2 x double> undef, double %545, i32 0
  %insertElmt356 = insertelement <2 x double> %insertElmt355, double %545, i32 1
  store <2 x double> %insertElmt356, <2 x double>* %allocaVec180, align 16
  store double %544, double* %CastInst95
  %546 = load double, double* %CastInst95, align 4
  %insertCast357 = insertelement <2 x double> undef, double %546, i32 0
  %insertCast358 = insertelement <2 x double> %insertCast357, double %546, i32 1
  store <2 x double> %insertCast358, <2 x double>* %CastInstVec96, align 4
  %547 = load <2 x double>, <2 x double>* %CastInstVec96, align 4
  %548 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop359 = fmul <2 x double> %547, %548
  %549 = fmul double %544, %545
  %550 = load double, double* %8, align 8
  %551 = load <2 x double>, <2 x double>* %allocaVec178, align 16
  %Vop360 = fsub <2 x double> %551, %Vop359
  store <2 x double> %Vop360, <2 x double>* %allocaVec178
  %552 = fsub double %550, %549
  store double %552, double* %8, align 8
  %553 = load i16*, i16** %12, align 4
  %554 = getelementptr inbounds i16, i16* %553, i32 110
  %555 = load i16, i16* %554, align 2
  %556 = sext i16 %555 to i32
  %557 = sitofp i32 %556 to double
  %558 = load double, double* %13, align 8
  %insertElmt361 = insertelement <2 x double> undef, double %558, i32 0
  %insertElmt362 = insertelement <2 x double> %insertElmt361, double %558, i32 1
  store <2 x double> %insertElmt362, <2 x double>* %allocaVec180, align 16
  store double %557, double* %CastInst97
  %559 = load double, double* %CastInst97, align 4
  %insertCast363 = insertelement <2 x double> undef, double %559, i32 0
  %insertCast364 = insertelement <2 x double> %insertCast363, double %559, i32 1
  store <2 x double> %insertCast364, <2 x double>* %CastInstVec98, align 4
  %560 = load <2 x double>, <2 x double>* %CastInstVec98, align 4
  %561 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop365 = fmul <2 x double> %560, %561
  %562 = fmul double %557, %558
  %563 = load double, double* %9, align 8
  %564 = load <2 x double>, <2 x double>* %allocaVec179, align 16
  %Vop366 = fadd <2 x double> %564, %Vop365
  store <2 x double> %Vop366, <2 x double>* %allocaVec179
  %565 = fadd double %563, %562
  store double %565, double* %9, align 8
  %566 = load double*, double** %10, align 4
  %567 = getelementptr inbounds double, double* %566, i32 1
  store double* %567, double** %10, align 4
  %568 = load double, double* %566, align 8
  store double %568, double* %13, align 8
  %569 = load i16*, i16** %11, align 4
  %570 = getelementptr inbounds i16, i16* %569, i32 464
  %571 = load i16, i16* %570, align 2
  %572 = sext i16 %571 to i32
  %573 = sitofp i32 %572 to double
  %574 = load double, double* %13, align 8
  %insertElmt367 = insertelement <2 x double> undef, double %574, i32 0
  %insertElmt368 = insertelement <2 x double> %insertElmt367, double %574, i32 1
  store <2 x double> %insertElmt368, <2 x double>* %allocaVec180, align 16
  store double %573, double* %CastInst99
  %575 = load double, double* %CastInst99, align 4
  %insertCast369 = insertelement <2 x double> undef, double %575, i32 0
  %insertCast370 = insertelement <2 x double> %insertCast369, double %575, i32 1
  store <2 x double> %insertCast370, <2 x double>* %CastInstVec100, align 4
  %576 = load <2 x double>, <2 x double>* %CastInstVec100, align 4
  %577 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop371 = fmul <2 x double> %576, %577
  %578 = fmul double %573, %574
  %579 = load double, double* %8, align 8
  %580 = load <2 x double>, <2 x double>* %allocaVec178, align 16
  %Vop372 = fsub <2 x double> %580, %Vop371
  store <2 x double> %Vop372, <2 x double>* %allocaVec178
  %581 = fsub double %579, %578
  store double %581, double* %8, align 8
  %582 = load i16*, i16** %12, align 4
  %583 = getelementptr inbounds i16, i16* %582, i32 46
  %584 = load i16, i16* %583, align 2
  %585 = sext i16 %584 to i32
  %586 = sitofp i32 %585 to double
  %587 = load double, double* %13, align 8
  %insertElmt373 = insertelement <2 x double> undef, double %587, i32 0
  %insertElmt374 = insertelement <2 x double> %insertElmt373, double %587, i32 1
  store <2 x double> %insertElmt374, <2 x double>* %allocaVec180, align 16
  store double %586, double* %CastInst101
  %588 = load double, double* %CastInst101, align 4
  %insertCast375 = insertelement <2 x double> undef, double %588, i32 0
  %insertCast376 = insertelement <2 x double> %insertCast375, double %588, i32 1
  store <2 x double> %insertCast376, <2 x double>* %CastInstVec102, align 4
  %589 = load <2 x double>, <2 x double>* %CastInstVec102, align 4
  %590 = load <2 x double>, <2 x double>* %allocaVec180, align 16
  %Vop377 = fmul <2 x double> %589, %590
  %591 = fmul double %586, %587
  %592 = load double, double* %9, align 8
  %593 = load <2 x double>, <2 x double>* %allocaVec179, align 16
  %Vop378 = fadd <2 x double> %593, %Vop377
  store <2 x double> %Vop378, <2 x double>* %allocaVec179
  %594 = fadd double %592, %591
  store double %594, double* %9, align 8
  %595 = load double, double* %8, align 8
  %596 = load double*, double** %6, align 4
  %597 = load i32, i32* %7, align 4
  %insertElmt379 = insertelement <4 x i32> undef, i32 %597, i32 0
  %insertElmt380 = insertelement <4 x i32> %insertElmt379, i32 %597, i32 1
  %insertElmt381 = insertelement <4 x i32> %insertElmt380, i32 %597, i32 2
  %insertElmt382 = insertelement <4 x i32> %insertElmt381, i32 %597, i32 3
  store <4 x i32> %insertElmt382, <4 x i32>* %allocaVec177, align 16
  %598 = load <4 x i32>, <4 x i32>* %allocaVec177, align 16
  %Vop383 = sub <4 x i32> <i32 30, i32 30, i32 30, i32 30>, %598
  %599 = sub nsw i32 30, %597
  %600 = getelementptr inbounds double, double* %596, i32 %599
  store double %595, double* %600, align 8
  %601 = load double, double* %9, align 8
  %602 = load double*, double** %6, align 4
  %603 = load i32, i32* %7, align 4
  %604 = getelementptr inbounds double, double* %602, i32 %603
  store double %601, double* %604, align 8
  br label %605

; <label>:605:                                    ; preds = %143
  %606 = load i32, i32* %7, align 4
  %insertElmt384 = insertelement <4 x i32> undef, i32 %606, i32 0
  %insertElmt385 = insertelement <4 x i32> %insertElmt384, i32 %606, i32 1
  %insertElmt386 = insertelement <4 x i32> %insertElmt385, i32 %606, i32 2
  %insertElmt387 = insertelement <4 x i32> %insertElmt386, i32 %606, i32 3
  store <4 x i32> %insertElmt387, <4 x i32>* %allocaVec177, align 16
  %607 = load <4 x i32>, <4 x i32>* %allocaVec177, align 16
  %Vop388 = add <4 x i32> %607, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop388, <4 x i32>* %allocaVec177
  %608 = add nsw i32 %606, -1
  store i32 %608, i32* %7, align 4
  br label %140

; <label>:609:                                    ; preds = %140
  %610 = load i16*, i16** %4, align 4
  %611 = getelementptr inbounds i16, i16* %610, i32 239
  %612 = load i16, i16* %611, align 2
  %613 = sitofp i16 %612 to double
  store double %613, double* %8, align 8
  %614 = load i16*, i16** %4, align 4
  %615 = getelementptr inbounds i16, i16* %614, i32 175
  %616 = load i16, i16* %615, align 2
  %617 = sext i16 %616 to i32
  %618 = sitofp i32 %617 to double
  %619 = load double*, double** %10, align 4
  %620 = getelementptr inbounds double, double* %619, i32 1
  store double* %620, double** %10, align 4
  %621 = load double, double* %619, align 8
  %622 = fmul double %618, %621
  %623 = load double, double* %8, align 8
  %624 = fadd double %623, %622
  store double %624, double* %8, align 8
  %625 = load i16*, i16** %4, align 4
  %626 = getelementptr inbounds i16, i16* %625, i32 111
  %627 = load i16, i16* %626, align 2
  %628 = sext i16 %627 to i32
  %629 = sitofp i32 %628 to double
  %630 = load double*, double** %10, align 4
  %631 = getelementptr inbounds double, double* %630, i32 1
  store double* %631, double** %10, align 4
  %632 = load double, double* %630, align 8
  %633 = fmul double %629, %632
  %634 = load double, double* %8, align 8
  %635 = fadd double %634, %633
  store double %635, double* %8, align 8
  %636 = load i16*, i16** %4, align 4
  %637 = getelementptr inbounds i16, i16* %636, i32 47
  %638 = load i16, i16* %637, align 2
  %639 = sext i16 %638 to i32
  %640 = sitofp i32 %639 to double
  %641 = load double*, double** %10, align 4
  %642 = getelementptr inbounds double, double* %641, i32 1
  store double* %642, double** %10, align 4
  %643 = load double, double* %641, align 8
  %644 = fmul double %640, %643
  %645 = load double, double* %8, align 8
  %646 = fadd double %645, %644
  store double %646, double* %8, align 8
  %647 = load i16*, i16** %4, align 4
  %648 = getelementptr inbounds i16, i16* %647, i32 303
  %649 = load i16, i16* %648, align 2
  %650 = sext i16 %649 to i32
  %651 = sitofp i32 %650 to double
  %652 = load double*, double** %10, align 4
  %653 = getelementptr inbounds double, double* %652, i32 1
  store double* %653, double** %10, align 4
  %654 = load double, double* %652, align 8
  %655 = fmul double %651, %654
  %656 = load double, double* %8, align 8
  %657 = fsub double %656, %655
  store double %657, double* %8, align 8
  %658 = load i16*, i16** %4, align 4
  %659 = getelementptr inbounds i16, i16* %658, i32 367
  %660 = load i16, i16* %659, align 2
  %661 = sext i16 %660 to i32
  %662 = sitofp i32 %661 to double
  %663 = load double*, double** %10, align 4
  %664 = getelementptr inbounds double, double* %663, i32 1
  store double* %664, double** %10, align 4
  %665 = load double, double* %663, align 8
  %666 = fmul double %662, %665
  %667 = load double, double* %8, align 8
  %668 = fsub double %667, %666
  store double %668, double* %8, align 8
  %669 = load i16*, i16** %4, align 4
  %670 = getelementptr inbounds i16, i16* %669, i32 431
  %671 = load i16, i16* %670, align 2
  %672 = sext i16 %671 to i32
  %673 = sitofp i32 %672 to double
  %674 = load double*, double** %10, align 4
  %675 = getelementptr inbounds double, double* %674, i32 1
  store double* %675, double** %10, align 4
  %676 = load double, double* %674, align 8
  %677 = fmul double %673, %676
  %678 = load double, double* %8, align 8
  %679 = fsub double %678, %677
  store double %679, double* %8, align 8
  %680 = load i16*, i16** %4, align 4
  %681 = getelementptr inbounds i16, i16* %680, i32 495
  %682 = load i16, i16* %681, align 2
  %683 = sext i16 %682 to i32
  %684 = sitofp i32 %683 to double
  %685 = load double*, double** %10, align 4
  %686 = getelementptr inbounds double, double* %685, i32 1
  store double* %686, double** %10, align 4
  %687 = load double, double* %685, align 8
  %688 = fmul double %684, %687
  %689 = load double, double* %8, align 8
  %690 = fsub double %689, %688
  store double %690, double* %8, align 8
  %691 = load double*, double** %6, align 4
  %692 = getelementptr inbounds double, double* %691, i32 1
  store double* %692, double** %6, align 4
  store double* getelementptr inbounds ([16 x [31 x double]], [16 x [31 x double]]* @mm, i32 0, i32 0, i32 0), double** %10, align 4
  store i32 15, i32* %7, align 4
  br label %693

; <label>:693:                                    ; preds = %765, %609
  %694 = load i32, i32* %7, align 4
  %695 = icmp sge i32 %694, 0
  br i1 %695, label %696, label %766

; <label>:696:                                    ; preds = %693
  %697 = load double, double* %8, align 8
  store double %697, double* %15, align 8
  %698 = load double, double* %9, align 8
  %699 = load double*, double** %10, align 4
  %700 = getelementptr inbounds double, double* %699, i32 1
  store double* %700, double** %10, align 4
  %701 = load double, double* %699, align 8
  %702 = fmul double %698, %701
  store double %702, double* %16, align 8
  store i32 14, i32* %14, align 4
  br label %703

; <label>:703:                                    ; preds = %734, %696
  %704 = load i32, i32* %14, align 4
  %705 = icmp sge i32 %704, 0
  br i1 %705, label %706, label %735

; <label>:706:                                    ; preds = %703
  %707 = load double*, double** %10, align 4
  %708 = getelementptr inbounds double, double* %707, i32 1
  store double* %708, double** %10, align 4
  %709 = load double, double* %707, align 8
  %710 = load double*, double** %6, align 4
  %711 = getelementptr inbounds double, double* %710, i32 1
  store double* %711, double** %6, align 4
  %712 = load double, double* %710, align 8
  %713 = fmul double %709, %712
  %714 = load double, double* %15, align 8
  %715 = fadd double %714, %713
  store double %715, double* %15, align 8
  %716 = load double*, double** %10, align 4
  %717 = getelementptr inbounds double, double* %716, i32 1
  store double* %717, double** %10, align 4
  %718 = load double, double* %716, align 8
  %719 = load double*, double** %6, align 4
  %720 = getelementptr inbounds double, double* %719, i32 1
  store double* %720, double** %6, align 4
  %721 = load double, double* %719, align 8
  %722 = fmul double %718, %721
  %723 = load double, double* %16, align 8
  %724 = fadd double %723, %722
  store double %724, double* %16, align 8
  br label %725

; <label>:725:                                    ; preds = %706
  %726 = load i32, i32* %14, align 4
  %insertElmt389 = insertelement <4 x i32> undef, i32 %726, i32 0
  %insertElmt390 = insertelement <4 x i32> %insertElmt389, i32 %726, i32 1
  %insertElmt391 = insertelement <4 x i32> %insertElmt390, i32 %726, i32 2
  %insertElmt392 = insertelement <4 x i32> %insertElmt391, i32 %726, i32 3
  store <4 x i32> %insertElmt392, <4 x i32>* %allocaVec181, align 16
  %727 = load <4 x i32>, <4 x i32>* %allocaVec181, align 16
  %Vop393 = add <4 x i32> %727, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop393, <4 x i32>* %allocaVec181
  %728 = load <4 x i32>, <4 x i32>* %allocaVec181, align 4
  %extractE = extractelement <4 x i32> %728, i64 0
  %extractE394 = extractelement <4 x i32> %728, i64 1
  %extractE395 = extractelement <4 x i32> %728, i64 2
  %sum = add i32 %extractE, %extractE394
  %sum396 = add i32 %sum, %extractE395
  %729 = add nsw i32 %726, -1
  %Fmul = mul i32 %729, 3
  store i32 %729, i32* %Recovery1
  %Fcmp = icmp ne i32 %sum396, %Fmul
  br i1 %Fcmp, label %730, label %734

; <label>:730:                                    ; preds = %725
  %remThree = sdiv i32 %sum396, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %731, label %732

; <label>:731:                                    ; preds = %730
  store i32 %729, i32* %Recovery1, align 4
  br label %733

; <label>:732:                                    ; preds = %730
  store i32 %extractE, i32* %Recovery1, align 4
  br label %733

; <label>:733:                                    ; preds = %732, %731
  br label %734

; <label>:734:                                    ; preds = %725, %733
  %ReplaceInst = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst, i32* %14, align 4
  br label %703

; <label>:735:                                    ; preds = %703
  %736 = load double*, double** %6, align 4
  %737 = getelementptr inbounds double, double* %736, i32 -30
  store double* %737, double** %6, align 4
  %738 = load double, double* %15, align 8
  %insertElmt397 = insertelement <2 x double> undef, double %738, i32 0
  %insertElmt398 = insertelement <2 x double> %insertElmt397, double %738, i32 1
  store <2 x double> %insertElmt398, <2 x double>* %allocaVec182, align 16
  %739 = load double, double* %16, align 8
  %insertElmt399 = insertelement <2 x double> undef, double %739, i32 0
  %insertElmt400 = insertelement <2 x double> %insertElmt399, double %739, i32 1
  store <2 x double> %insertElmt400, <2 x double>* %allocaVec183, align 16
  %740 = load <2 x double>, <2 x double>* %allocaVec182, align 16
  %741 = load <2 x double>, <2 x double>* %allocaVec183, align 16
  %Vop401 = fadd <2 x double> %740, %741
  %742 = fadd double %738, %739
  %743 = load double*, double** %5, align 4
  %744 = load i32, i32* %7, align 4
  %745 = getelementptr inbounds double, double* %743, i32 %744
  store double %742, double* %745, align 8
  %746 = load double, double* %15, align 8
  %insertElmt402 = insertelement <2 x double> undef, double %746, i32 0
  %insertElmt403 = insertelement <2 x double> %insertElmt402, double %746, i32 1
  store <2 x double> %insertElmt403, <2 x double>* %allocaVec182, align 16
  %747 = load double, double* %16, align 8
  %insertElmt404 = insertelement <2 x double> undef, double %747, i32 0
  %insertElmt405 = insertelement <2 x double> %insertElmt404, double %747, i32 1
  store <2 x double> %insertElmt405, <2 x double>* %allocaVec183, align 16
  %748 = load <2 x double>, <2 x double>* %allocaVec182, align 16
  %749 = load <2 x double>, <2 x double>* %allocaVec183, align 16
  %Vop406 = fsub <2 x double> %748, %749
  %750 = fsub double %746, %747
  %751 = load double*, double** %5, align 4
  %752 = load i32, i32* %7, align 4
  %753 = load <4 x i32>, <4 x i32>* %allocaVec177, align 16
  %Vop407 = sub <4 x i32> <i32 31, i32 31, i32 31, i32 31>, %753
  %754 = sub nsw i32 31, %752
  %755 = getelementptr inbounds double, double* %751, i32 %754
  store double %750, double* %755, align 8
  br label %756

; <label>:756:                                    ; preds = %735
  %757 = load i32, i32* %7, align 4
  %758 = load <4 x i32>, <4 x i32>* %allocaVec177, align 16
  %Vop408 = add <4 x i32> %758, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop408, <4 x i32>* %allocaVec177
  %759 = load <4 x i32>, <4 x i32>* %allocaVec177, align 4
  %extractE410 = extractelement <4 x i32> %759, i64 0
  %extractE411 = extractelement <4 x i32> %759, i64 1
  %extractE412 = extractelement <4 x i32> %759, i64 2
  %sum413 = add i32 %extractE410, %extractE411
  %sum414 = add i32 %sum413, %extractE412
  %760 = add nsw i32 %757, -1
  %Fmul409 = mul i32 %760, 3
  store i32 %760, i32* %Recovery2
  %Fcmp415 = icmp ne i32 %sum414, %Fmul409
  br i1 %Fcmp415, label %761, label %765

; <label>:761:                                    ; preds = %756
  %remThree416 = sdiv i32 %sum414, %extractE410
  %FcmpThree417 = icmp ne i32 %remThree416, 3
  br i1 %FcmpThree417, label %762, label %763

; <label>:762:                                    ; preds = %761
  store i32 %760, i32* %Recovery2, align 4
  br label %764

; <label>:763:                                    ; preds = %761
  store i32 %extractE410, i32* %Recovery2, align 4
  br label %764

; <label>:764:                                    ; preds = %763, %762
  br label %765

; <label>:765:                                    ; preds = %756, %764
  %ReplaceInst418 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst418, i32* %7, align 4
  br label %693

; <label>:766:                                    ; preds = %693
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @mdct_short(double*, double*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %3 = alloca double*, align 4
  %4 = alloca double*, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec5 = alloca <2 x double>, align 16
  %7 = alloca double, align 8
  %allocaVec6 = alloca <2 x double>, align 16
  %8 = alloca double, align 8
  %allocaVec7 = alloca <2 x double>, align 16
  %9 = alloca double, align 8
  %allocaVec8 = alloca <2 x double>, align 16
  %10 = alloca double, align 8
  %allocaVec9 = alloca <2 x double>, align 16
  %11 = alloca double, align 8
  %allocaVec10 = alloca <2 x double>, align 16
  %12 = alloca double, align 8
  store double* %0, double** %3, align 4
  store double* %1, double** %4, align 4
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %allocaVec3
  store i32 5, i32* %5, align 4
  br label %13

; <label>:13:                                     ; preds = %124, %2
  %14 = load i32, i32* %5, align 4
  %15 = icmp sge i32 %14, 0
  br i1 %15, label %16, label %125

; <label>:16:                                     ; preds = %13
  %17 = load i32, i32* %5, align 4
  %18 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i32 0, i32 %17
  %19 = getelementptr inbounds [6 x double], [6 x double]* %18, i32 0, i32 0
  %20 = load double, double* %19, align 8
  store double %20, double* %7, align 8
  %21 = load i32, i32* %5, align 4
  %22 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i32 0, i32 %21
  %23 = getelementptr inbounds [6 x double], [6 x double]* %22, i32 0, i32 1
  %24 = load double, double* %23, align 8
  store double %24, double* %8, align 8
  %25 = load i32, i32* %5, align 4
  %26 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i32 0, i32 %25
  %27 = getelementptr inbounds [6 x double], [6 x double]* %26, i32 0, i32 2
  %28 = load double, double* %27, align 8
  store double %28, double* %9, align 8
  %29 = load i32, i32* %5, align 4
  %30 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i32 0, i32 %29
  %31 = getelementptr inbounds [6 x double], [6 x double]* %30, i32 0, i32 3
  %32 = load double, double* %31, align 8
  store double %32, double* %10, align 8
  %33 = load i32, i32* %5, align 4
  %34 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i32 0, i32 %33
  %35 = getelementptr inbounds [6 x double], [6 x double]* %34, i32 0, i32 4
  %36 = load double, double* %35, align 8
  store double %36, double* %11, align 8
  %37 = load i32, i32* %5, align 4
  %38 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i32 0, i32 %37
  %39 = getelementptr inbounds [6 x double], [6 x double]* %38, i32 0, i32 5
  %40 = load double, double* %39, align 8
  store double %40, double* %12, align 8
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %allocaVec4
  store i32 2, i32* %6, align 4
  br label %41

; <label>:41:                                     ; preds = %113, %16
  %42 = load i32, i32* %6, align 4
  %43 = icmp sge i32 %42, 0
  br i1 %43, label %44, label %114

; <label>:44:                                     ; preds = %41
  %45 = load double, double* %7, align 8
  %insertElmt = insertelement <2 x double> undef, double %45, i32 0
  %insertElmt11 = insertelement <2 x double> %insertElmt, double %45, i32 1
  store <2 x double> %insertElmt11, <2 x double>* %allocaVec5, align 16
  %46 = load double*, double** %4, align 4
  %47 = load i32, i32* %6, align 4
  %insertElmt12 = insertelement <4 x i32> undef, i32 %47, i32 0
  %insertElmt13 = insertelement <4 x i32> %insertElmt12, i32 %47, i32 1
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %47, i32 2
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %47, i32 3
  store <4 x i32> %insertElmt15, <4 x i32>* %allocaVec4, align 16
  %48 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop = mul <4 x i32> <i32 6, i32 6, i32 6, i32 6>, %48
  %49 = mul nsw i32 6, %47
  %50 = getelementptr inbounds double, double* %46, i32 %49
  %51 = load double, double* %50, align 8
  %52 = fmul double %45, %51
  %53 = load double, double* %8, align 8
  %54 = load double*, double** %4, align 4
  %55 = load i32, i32* %6, align 4
  %56 = mul nsw i32 6, %55
  %57 = add nsw i32 %56, 1
  %58 = getelementptr inbounds double, double* %54, i32 %57
  %59 = load double, double* %58, align 8
  %60 = fmul double %53, %59
  %61 = fadd double %52, %60
  %62 = load double, double* %9, align 8
  %63 = load double*, double** %4, align 4
  %64 = load i32, i32* %6, align 4
  %65 = mul nsw i32 6, %64
  %66 = add nsw i32 %65, 2
  %67 = getelementptr inbounds double, double* %63, i32 %66
  %68 = load double, double* %67, align 8
  %69 = fmul double %62, %68
  %70 = fadd double %61, %69
  %71 = load double, double* %10, align 8
  %72 = load double*, double** %4, align 4
  %73 = load i32, i32* %6, align 4
  %74 = mul nsw i32 6, %73
  %75 = add nsw i32 %74, 3
  %76 = getelementptr inbounds double, double* %72, i32 %75
  %77 = load double, double* %76, align 8
  %78 = fmul double %71, %77
  %79 = fadd double %70, %78
  %80 = load double, double* %11, align 8
  %81 = load double*, double** %4, align 4
  %82 = load i32, i32* %6, align 4
  %83 = mul nsw i32 6, %82
  %84 = add nsw i32 %83, 4
  %85 = getelementptr inbounds double, double* %81, i32 %84
  %86 = load double, double* %85, align 8
  %87 = fmul double %80, %86
  %88 = fadd double %79, %87
  %89 = load double, double* %12, align 8
  %90 = load double*, double** %4, align 4
  %91 = load i32, i32* %6, align 4
  %92 = mul nsw i32 6, %91
  %93 = add nsw i32 %92, 5
  %94 = getelementptr inbounds double, double* %90, i32 %93
  %95 = load double, double* %94, align 8
  %96 = fmul double %89, %95
  %97 = fadd double %88, %96
  %98 = load double*, double** %3, align 4
  %99 = load i32, i32* %5, align 4
  %100 = mul nsw i32 3, %99
  %101 = load i32, i32* %6, align 4
  %102 = add nsw i32 %100, %101
  %103 = getelementptr inbounds double, double* %98, i32 %102
  store double %97, double* %103, align 8
  br label %104

; <label>:104:                                    ; preds = %44
  %105 = load i32, i32* %6, align 4
  %insertElmt16 = insertelement <4 x i32> undef, i32 %105, i32 0
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %105, i32 1
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %105, i32 2
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %105, i32 3
  store <4 x i32> %insertElmt19, <4 x i32>* %allocaVec4, align 16
  %106 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop20 = add <4 x i32> %106, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop20, <4 x i32>* %allocaVec4
  %107 = load <4 x i32>, <4 x i32>* %allocaVec4, align 4
  %extractE = extractelement <4 x i32> %107, i64 0
  %extractE21 = extractelement <4 x i32> %107, i64 1
  %extractE22 = extractelement <4 x i32> %107, i64 2
  %sum = add i32 %extractE, %extractE21
  %sum23 = add i32 %sum, %extractE22
  %108 = add nsw i32 %105, -1
  %Fmul = mul i32 %108, 3
  store i32 %108, i32* %Recovery
  %Fcmp = icmp ne i32 %sum23, %Fmul
  br i1 %Fcmp, label %109, label %113

; <label>:109:                                    ; preds = %104
  %remThree = sdiv i32 %sum23, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %110, label %111

; <label>:110:                                    ; preds = %109
  store i32 %108, i32* %Recovery, align 4
  br label %112

; <label>:111:                                    ; preds = %109
  store i32 %extractE, i32* %Recovery, align 4
  br label %112

; <label>:112:                                    ; preds = %111, %110
  br label %113

; <label>:113:                                    ; preds = %104, %112
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %6, align 4
  br label %41

; <label>:114:                                    ; preds = %41
  br label %115

; <label>:115:                                    ; preds = %114
  %116 = load i32, i32* %5, align 4
  %insertElmt24 = insertelement <4 x i32> undef, i32 %116, i32 0
  %insertElmt25 = insertelement <4 x i32> %insertElmt24, i32 %116, i32 1
  %insertElmt26 = insertelement <4 x i32> %insertElmt25, i32 %116, i32 2
  %insertElmt27 = insertelement <4 x i32> %insertElmt26, i32 %116, i32 3
  store <4 x i32> %insertElmt27, <4 x i32>* %allocaVec3, align 16
  %117 = load <4 x i32>, <4 x i32>* %allocaVec3, align 16
  %Vop28 = add <4 x i32> %117, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop28, <4 x i32>* %allocaVec3
  %118 = load <4 x i32>, <4 x i32>* %allocaVec3, align 4
  %extractE30 = extractelement <4 x i32> %118, i64 0
  %extractE31 = extractelement <4 x i32> %118, i64 1
  %extractE32 = extractelement <4 x i32> %118, i64 2
  %sum33 = add i32 %extractE30, %extractE31
  %sum34 = add i32 %sum33, %extractE32
  %119 = add nsw i32 %116, -1
  %Fmul29 = mul i32 %119, 3
  store i32 %119, i32* %Recovery1
  %Fcmp35 = icmp ne i32 %sum34, %Fmul29
  br i1 %Fcmp35, label %120, label %124

; <label>:120:                                    ; preds = %115
  %remThree36 = sdiv i32 %sum34, %extractE30
  %FcmpThree37 = icmp ne i32 %remThree36, 3
  br i1 %FcmpThree37, label %121, label %122

; <label>:121:                                    ; preds = %120
  store i32 %119, i32* %Recovery1, align 4
  br label %123

; <label>:122:                                    ; preds = %120
  store i32 %extractE30, i32* %Recovery1, align 4
  br label %123

; <label>:123:                                    ; preds = %122, %121
  br label %124

; <label>:124:                                    ; preds = %115, %123
  %ReplaceInst38 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst38, i32* %5, align 4
  br label %13

; <label>:125:                                    ; preds = %13
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @mdct_long(double*, double*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %3 = alloca double*, align 4
  %4 = alloca double*, align 4
  %allocaVec1 = alloca <2 x double>, align 16
  %5 = alloca double, align 8
  %allocaVec2 = alloca <2 x double>, align 16
  %6 = alloca double, align 8
  %allocaVec3 = alloca <2 x double>, align 16
  %7 = alloca double, align 8
  %allocaVec4 = alloca <2 x double>, align 16
  %8 = alloca double, align 8
  %allocaVec5 = alloca <2 x double>, align 16
  %9 = alloca double, align 8
  %allocaVec6 = alloca <2 x double>, align 16
  %10 = alloca double, align 8
  %allocaVec7 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %12 = alloca double*, align 4
  store double* %0, double** %3, align 4
  store double* %1, double** %4, align 4
  store <4 x i32> <i32 11, i32 11, i32 11, i32 11>, <4 x i32>* %allocaVec7
  store i32 11, i32* %11, align 4
  store double* getelementptr inbounds ([244 x double], [244 x double]* @cos_l, i32 0, i32 0), double** %12, align 4
  br label %13

; <label>:13:                                     ; preds = %173, %2
  %14 = load double*, double** %4, align 4
  %15 = getelementptr inbounds double, double* %14, i32 0
  %16 = load double, double* %15, align 8
  %17 = load double*, double** %12, align 4
  %18 = getelementptr inbounds double, double* %17, i32 0
  %19 = load double, double* %18, align 8
  %20 = fmul double %16, %19
  %21 = load double*, double** %4, align 4
  %22 = getelementptr inbounds double, double* %21, i32 1
  %23 = load double, double* %22, align 8
  %24 = load double*, double** %12, align 4
  %25 = getelementptr inbounds double, double* %24, i32 1
  %26 = load double, double* %25, align 8
  %27 = fmul double %23, %26
  %28 = fadd double %20, %27
  %29 = load double*, double** %4, align 4
  %30 = getelementptr inbounds double, double* %29, i32 2
  %31 = load double, double* %30, align 8
  %32 = load double*, double** %12, align 4
  %33 = getelementptr inbounds double, double* %32, i32 2
  %34 = load double, double* %33, align 8
  %35 = fmul double %31, %34
  %36 = fadd double %28, %35
  %37 = load double*, double** %4, align 4
  %38 = getelementptr inbounds double, double* %37, i32 3
  %39 = load double, double* %38, align 8
  %40 = load double*, double** %12, align 4
  %41 = getelementptr inbounds double, double* %40, i32 3
  %42 = load double, double* %41, align 8
  %43 = fmul double %39, %42
  %44 = fadd double %36, %43
  %45 = load double*, double** %4, align 4
  %46 = getelementptr inbounds double, double* %45, i32 4
  %47 = load double, double* %46, align 8
  %48 = load double*, double** %12, align 4
  %49 = getelementptr inbounds double, double* %48, i32 4
  %50 = load double, double* %49, align 8
  %51 = fmul double %47, %50
  %52 = fadd double %44, %51
  %53 = load double*, double** %4, align 4
  %54 = getelementptr inbounds double, double* %53, i32 5
  %55 = load double, double* %54, align 8
  %56 = load double*, double** %12, align 4
  %57 = getelementptr inbounds double, double* %56, i32 5
  %58 = load double, double* %57, align 8
  %59 = fmul double %55, %58
  %60 = fadd double %52, %59
  %61 = load double*, double** %4, align 4
  %62 = getelementptr inbounds double, double* %61, i32 6
  %63 = load double, double* %62, align 8
  %64 = load double*, double** %12, align 4
  %65 = getelementptr inbounds double, double* %64, i32 6
  %66 = load double, double* %65, align 8
  %67 = fmul double %63, %66
  %68 = fadd double %60, %67
  %69 = load double*, double** %4, align 4
  %70 = getelementptr inbounds double, double* %69, i32 7
  %71 = load double, double* %70, align 8
  %72 = load double*, double** %12, align 4
  %73 = getelementptr inbounds double, double* %72, i32 7
  %74 = load double, double* %73, align 8
  %75 = fmul double %71, %74
  %76 = fadd double %68, %75
  %77 = load double*, double** %4, align 4
  %78 = getelementptr inbounds double, double* %77, i32 8
  %79 = load double, double* %78, align 8
  %80 = load double*, double** %12, align 4
  %81 = getelementptr inbounds double, double* %80, i32 8
  %82 = load double, double* %81, align 8
  %83 = fmul double %79, %82
  %84 = fadd double %76, %83
  %85 = load double*, double** %4, align 4
  %86 = getelementptr inbounds double, double* %85, i32 9
  %87 = load double, double* %86, align 8
  %88 = load double*, double** %12, align 4
  %89 = getelementptr inbounds double, double* %88, i32 9
  %90 = load double, double* %89, align 8
  %91 = fmul double %87, %90
  %92 = fadd double %84, %91
  %93 = load double*, double** %4, align 4
  %94 = getelementptr inbounds double, double* %93, i32 10
  %95 = load double, double* %94, align 8
  %96 = load double*, double** %12, align 4
  %97 = getelementptr inbounds double, double* %96, i32 10
  %98 = load double, double* %97, align 8
  %99 = fmul double %95, %98
  %100 = fadd double %92, %99
  %101 = load double*, double** %4, align 4
  %102 = getelementptr inbounds double, double* %101, i32 11
  %103 = load double, double* %102, align 8
  %104 = load double*, double** %12, align 4
  %105 = getelementptr inbounds double, double* %104, i32 11
  %106 = load double, double* %105, align 8
  %107 = fmul double %103, %106
  %108 = fadd double %100, %107
  %109 = load double*, double** %4, align 4
  %110 = getelementptr inbounds double, double* %109, i32 12
  %111 = load double, double* %110, align 8
  %112 = load double*, double** %12, align 4
  %113 = getelementptr inbounds double, double* %112, i32 12
  %114 = load double, double* %113, align 8
  %115 = fmul double %111, %114
  %116 = fadd double %108, %115
  %117 = load double*, double** %4, align 4
  %118 = getelementptr inbounds double, double* %117, i32 13
  %119 = load double, double* %118, align 8
  %120 = load double*, double** %12, align 4
  %121 = getelementptr inbounds double, double* %120, i32 13
  %122 = load double, double* %121, align 8
  %123 = fmul double %119, %122
  %124 = fadd double %116, %123
  %125 = load double*, double** %4, align 4
  %126 = getelementptr inbounds double, double* %125, i32 14
  %127 = load double, double* %126, align 8
  %128 = load double*, double** %12, align 4
  %129 = getelementptr inbounds double, double* %128, i32 14
  %130 = load double, double* %129, align 8
  %131 = fmul double %127, %130
  %132 = fadd double %124, %131
  %133 = load double*, double** %4, align 4
  %134 = getelementptr inbounds double, double* %133, i32 15
  %135 = load double, double* %134, align 8
  %136 = load double*, double** %12, align 4
  %137 = getelementptr inbounds double, double* %136, i32 15
  %138 = load double, double* %137, align 8
  %139 = fmul double %135, %138
  %140 = fadd double %132, %139
  %141 = load double*, double** %4, align 4
  %142 = getelementptr inbounds double, double* %141, i32 16
  %143 = load double, double* %142, align 8
  %144 = load double*, double** %12, align 4
  %145 = getelementptr inbounds double, double* %144, i32 16
  %146 = load double, double* %145, align 8
  %147 = fmul double %143, %146
  %148 = fadd double %140, %147
  %149 = load double*, double** %4, align 4
  %150 = getelementptr inbounds double, double* %149, i32 17
  %151 = load double, double* %150, align 8
  %152 = load double*, double** %12, align 4
  %153 = getelementptr inbounds double, double* %152, i32 17
  %154 = load double, double* %153, align 8
  %155 = fmul double %151, %154
  %156 = fadd double %148, %155
  %157 = load double*, double** %3, align 4
  %158 = load i32, i32* %11, align 4
  %159 = getelementptr inbounds [12 x i32], [12 x i32]* @all, i32 0, i32 %158
  %160 = load i32, i32* %159, align 4
  %161 = getelementptr inbounds double, double* %157, i32 %160
  store double %156, double* %161, align 8
  %162 = load double*, double** %12, align 4
  %163 = getelementptr inbounds double, double* %162, i32 18
  store double* %163, double** %12, align 4
  br label %164

; <label>:164:                                    ; preds = %13
  %165 = load i32, i32* %11, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %165, i32 0
  %insertElmt8 = insertelement <4 x i32> %insertElmt, i32 %165, i32 1
  %insertElmt9 = insertelement <4 x i32> %insertElmt8, i32 %165, i32 2
  %insertElmt10 = insertelement <4 x i32> %insertElmt9, i32 %165, i32 3
  store <4 x i32> %insertElmt10, <4 x i32>* %allocaVec7, align 16
  %166 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop = add <4 x i32> %166, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec7
  %167 = load <4 x i32>, <4 x i32>* %allocaVec7, align 4
  %extractE = extractelement <4 x i32> %167, i64 0
  %extractE11 = extractelement <4 x i32> %167, i64 1
  %extractE12 = extractelement <4 x i32> %167, i64 2
  %sum = add i32 %extractE, %extractE11
  %sum13 = add i32 %sum, %extractE12
  %168 = add nsw i32 %165, -1
  %Fmul = mul i32 %168, 3
  store i32 %168, i32* %Recovery
  %Fcmp = icmp ne i32 %sum13, %Fmul
  br i1 %Fcmp, label %169, label %173

; <label>:169:                                    ; preds = %164
  %remThree = sdiv i32 %sum13, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %170, label %171

; <label>:170:                                    ; preds = %169
  store i32 %168, i32* %Recovery, align 4
  br label %172

; <label>:171:                                    ; preds = %169
  store i32 %extractE, i32* %Recovery, align 4
  br label %172

; <label>:172:                                    ; preds = %171, %170
  br label %173

; <label>:173:                                    ; preds = %164, %172
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %11, align 4
  %174 = icmp sge i32 %168, 0
  br i1 %174, label %13, label %175

; <label>:175:                                    ; preds = %173
  %176 = load double*, double** %4, align 4
  %177 = getelementptr inbounds double, double* %176, i32 0
  %178 = load double, double* %177, align 8
  %179 = load double*, double** %4, align 4
  %180 = getelementptr inbounds double, double* %179, i32 5
  %181 = load double, double* %180, align 8
  %182 = fadd double %178, %181
  %183 = load double*, double** %4, align 4
  %184 = getelementptr inbounds double, double* %183, i32 15
  %185 = load double, double* %184, align 8
  %186 = fadd double %182, %185
  store double %186, double* %5, align 8
  %187 = load double*, double** %4, align 4
  %188 = getelementptr inbounds double, double* %187, i32 1
  %189 = load double, double* %188, align 8
  %190 = load double*, double** %4, align 4
  %191 = getelementptr inbounds double, double* %190, i32 4
  %192 = load double, double* %191, align 8
  %193 = fadd double %189, %192
  %194 = load double*, double** %4, align 4
  %195 = getelementptr inbounds double, double* %194, i32 16
  %196 = load double, double* %195, align 8
  %197 = fadd double %193, %196
  store double %197, double* %6, align 8
  %198 = load double*, double** %4, align 4
  %199 = getelementptr inbounds double, double* %198, i32 2
  %200 = load double, double* %199, align 8
  %201 = load double*, double** %4, align 4
  %202 = getelementptr inbounds double, double* %201, i32 3
  %203 = load double, double* %202, align 8
  %204 = fadd double %200, %203
  %205 = load double*, double** %4, align 4
  %206 = getelementptr inbounds double, double* %205, i32 17
  %207 = load double, double* %206, align 8
  %208 = fadd double %204, %207
  store double %208, double* %7, align 8
  %209 = load double*, double** %4, align 4
  %210 = getelementptr inbounds double, double* %209, i32 6
  %211 = load double, double* %210, align 8
  %212 = load double*, double** %4, align 4
  %213 = getelementptr inbounds double, double* %212, i32 9
  %214 = load double, double* %213, align 8
  %215 = fsub double %211, %214
  %216 = load double*, double** %4, align 4
  %217 = getelementptr inbounds double, double* %216, i32 14
  %218 = load double, double* %217, align 8
  %219 = fadd double %215, %218
  store double %219, double* %8, align 8
  %220 = load double*, double** %4, align 4
  %221 = getelementptr inbounds double, double* %220, i32 7
  %222 = load double, double* %221, align 8
  %223 = load double*, double** %4, align 4
  %224 = getelementptr inbounds double, double* %223, i32 10
  %225 = load double, double* %224, align 8
  %226 = fsub double %222, %225
  %227 = load double*, double** %4, align 4
  %228 = getelementptr inbounds double, double* %227, i32 13
  %229 = load double, double* %228, align 8
  %230 = fadd double %226, %229
  store double %230, double* %9, align 8
  %231 = load double*, double** %4, align 4
  %232 = getelementptr inbounds double, double* %231, i32 8
  %233 = load double, double* %232, align 8
  %234 = load double*, double** %4, align 4
  %235 = getelementptr inbounds double, double* %234, i32 11
  %236 = load double, double* %235, align 8
  %237 = fsub double %233, %236
  %238 = load double*, double** %4, align 4
  %239 = getelementptr inbounds double, double* %238, i32 12
  %240 = load double, double* %239, align 8
  %241 = fadd double %237, %240
  store double %241, double* %10, align 8
  %242 = load double, double* %5, align 8
  %243 = load double*, double** %12, align 4
  %244 = getelementptr inbounds double, double* %243, i32 0
  %245 = load double, double* %244, align 8
  %246 = fmul double %242, %245
  %247 = load double, double* %6, align 8
  %248 = load double*, double** %12, align 4
  %249 = getelementptr inbounds double, double* %248, i32 1
  %250 = load double, double* %249, align 8
  %251 = fmul double %247, %250
  %252 = fadd double %246, %251
  %253 = load double, double* %7, align 8
  %254 = load double*, double** %12, align 4
  %255 = getelementptr inbounds double, double* %254, i32 2
  %256 = load double, double* %255, align 8
  %257 = fmul double %253, %256
  %258 = fadd double %252, %257
  %259 = load double, double* %8, align 8
  %260 = load double*, double** %12, align 4
  %261 = getelementptr inbounds double, double* %260, i32 3
  %262 = load double, double* %261, align 8
  %263 = fmul double %259, %262
  %264 = fadd double %258, %263
  %265 = load double, double* %9, align 8
  %266 = load double*, double** %12, align 4
  %267 = getelementptr inbounds double, double* %266, i32 4
  %268 = load double, double* %267, align 8
  %269 = fmul double %265, %268
  %270 = fadd double %264, %269
  %271 = load double, double* %10, align 8
  %272 = load double*, double** %12, align 4
  %273 = getelementptr inbounds double, double* %272, i32 5
  %274 = load double, double* %273, align 8
  %275 = fmul double %271, %274
  %276 = fadd double %270, %275
  %277 = load double*, double** %3, align 4
  %278 = getelementptr inbounds double, double* %277, i32 16
  store double %276, double* %278, align 8
  %279 = load double*, double** %12, align 4
  %280 = getelementptr inbounds double, double* %279, i32 6
  store double* %280, double** %12, align 4
  %281 = load double, double* %5, align 8
  %282 = load double*, double** %12, align 4
  %283 = getelementptr inbounds double, double* %282, i32 0
  %284 = load double, double* %283, align 8
  %285 = fmul double %281, %284
  %286 = load double, double* %6, align 8
  %287 = load double*, double** %12, align 4
  %288 = getelementptr inbounds double, double* %287, i32 1
  %289 = load double, double* %288, align 8
  %290 = fmul double %286, %289
  %291 = fadd double %285, %290
  %292 = load double, double* %7, align 8
  %293 = load double*, double** %12, align 4
  %294 = getelementptr inbounds double, double* %293, i32 2
  %295 = load double, double* %294, align 8
  %296 = fmul double %292, %295
  %297 = fadd double %291, %296
  %298 = load double, double* %8, align 8
  %299 = load double*, double** %12, align 4
  %300 = getelementptr inbounds double, double* %299, i32 3
  %301 = load double, double* %300, align 8
  %302 = fmul double %298, %301
  %303 = fadd double %297, %302
  %304 = load double, double* %9, align 8
  %305 = load double*, double** %12, align 4
  %306 = getelementptr inbounds double, double* %305, i32 4
  %307 = load double, double* %306, align 8
  %308 = fmul double %304, %307
  %309 = fadd double %303, %308
  %310 = load double, double* %10, align 8
  %311 = load double*, double** %12, align 4
  %312 = getelementptr inbounds double, double* %311, i32 5
  %313 = load double, double* %312, align 8
  %314 = fmul double %310, %313
  %315 = fadd double %309, %314
  %316 = load double*, double** %3, align 4
  %317 = getelementptr inbounds double, double* %316, i32 10
  store double %315, double* %317, align 8
  %318 = load double*, double** %12, align 4
  %319 = getelementptr inbounds double, double* %318, i32 6
  store double* %319, double** %12, align 4
  %320 = load double, double* %5, align 8
  %321 = load double*, double** %12, align 4
  %322 = getelementptr inbounds double, double* %321, i32 0
  %323 = load double, double* %322, align 8
  %324 = fmul double %320, %323
  %325 = load double, double* %6, align 8
  %326 = load double*, double** %12, align 4
  %327 = getelementptr inbounds double, double* %326, i32 1
  %328 = load double, double* %327, align 8
  %329 = fmul double %325, %328
  %330 = fadd double %324, %329
  %331 = load double, double* %7, align 8
  %332 = load double*, double** %12, align 4
  %333 = getelementptr inbounds double, double* %332, i32 2
  %334 = load double, double* %333, align 8
  %335 = fmul double %331, %334
  %336 = fadd double %330, %335
  %337 = load double, double* %8, align 8
  %338 = load double*, double** %12, align 4
  %339 = getelementptr inbounds double, double* %338, i32 3
  %340 = load double, double* %339, align 8
  %341 = fmul double %337, %340
  %342 = fadd double %336, %341
  %343 = load double, double* %9, align 8
  %344 = load double*, double** %12, align 4
  %345 = getelementptr inbounds double, double* %344, i32 4
  %346 = load double, double* %345, align 8
  %347 = fmul double %343, %346
  %348 = fadd double %342, %347
  %349 = load double, double* %10, align 8
  %350 = load double*, double** %12, align 4
  %351 = getelementptr inbounds double, double* %350, i32 5
  %352 = load double, double* %351, align 8
  %353 = fmul double %349, %352
  %354 = fadd double %348, %353
  %355 = load double*, double** %3, align 4
  %356 = getelementptr inbounds double, double* %355, i32 7
  store double %354, double* %356, align 8
  %357 = load double*, double** %12, align 4
  %358 = getelementptr inbounds double, double* %357, i32 6
  store double* %358, double** %12, align 4
  %359 = load double, double* %5, align 8
  %360 = load double*, double** %12, align 4
  %361 = getelementptr inbounds double, double* %360, i32 0
  %362 = load double, double* %361, align 8
  %363 = fmul double %359, %362
  %364 = load double, double* %6, align 8
  %365 = load double*, double** %12, align 4
  %366 = getelementptr inbounds double, double* %365, i32 1
  %367 = load double, double* %366, align 8
  %368 = fmul double %364, %367
  %369 = fadd double %363, %368
  %370 = load double, double* %7, align 8
  %371 = load double*, double** %12, align 4
  %372 = getelementptr inbounds double, double* %371, i32 2
  %373 = load double, double* %372, align 8
  %374 = fmul double %370, %373
  %375 = fadd double %369, %374
  %376 = load double, double* %8, align 8
  %377 = load double*, double** %12, align 4
  %378 = getelementptr inbounds double, double* %377, i32 3
  %379 = load double, double* %378, align 8
  %380 = fmul double %376, %379
  %381 = fadd double %375, %380
  %382 = load double, double* %9, align 8
  %383 = load double*, double** %12, align 4
  %384 = getelementptr inbounds double, double* %383, i32 4
  %385 = load double, double* %384, align 8
  %386 = fmul double %382, %385
  %387 = fadd double %381, %386
  %388 = load double, double* %10, align 8
  %389 = load double*, double** %12, align 4
  %390 = getelementptr inbounds double, double* %389, i32 5
  %391 = load double, double* %390, align 8
  %392 = fmul double %388, %391
  %393 = fadd double %387, %392
  %394 = load double*, double** %3, align 4
  %395 = getelementptr inbounds double, double* %394, i32 1
  store double %393, double* %395, align 8
  %396 = load double*, double** %12, align 4
  %397 = getelementptr inbounds double, double* %396, i32 6
  store double* %397, double** %12, align 4
  %398 = load double, double* %5, align 8
  %399 = load double, double* %6, align 8
  %400 = fsub double %398, %399
  %401 = load double, double* %10, align 8
  %402 = fadd double %400, %401
  store double %402, double* %5, align 8
  %403 = load double, double* %7, align 8
  %404 = load double, double* %8, align 8
  %405 = fsub double %403, %404
  %406 = load double, double* %9, align 8
  %407 = fsub double %405, %406
  store double %407, double* %7, align 8
  %408 = load double, double* %5, align 8
  %409 = load double*, double** %12, align 4
  %410 = getelementptr inbounds double, double* %409, i32 0
  %411 = load double, double* %410, align 8
  %412 = fmul double %408, %411
  %413 = load double, double* %7, align 8
  %414 = load double*, double** %12, align 4
  %415 = getelementptr inbounds double, double* %414, i32 1
  %416 = load double, double* %415, align 8
  %417 = fmul double %413, %416
  %418 = fadd double %412, %417
  %419 = load double*, double** %3, align 4
  %420 = getelementptr inbounds double, double* %419, i32 13
  store double %418, double* %420, align 8
  %421 = load double, double* %5, align 8
  %422 = load double*, double** %12, align 4
  %423 = getelementptr inbounds double, double* %422, i32 2
  %424 = load double, double* %423, align 8
  %425 = fmul double %421, %424
  %426 = load double, double* %7, align 8
  %427 = load double*, double** %12, align 4
  %428 = getelementptr inbounds double, double* %427, i32 3
  %429 = load double, double* %428, align 8
  %430 = fmul double %426, %429
  %431 = fadd double %425, %430
  %432 = load double*, double** %3, align 4
  %433 = getelementptr inbounds double, double* %432, i32 4
  store double %431, double* %433, align 8
  ret void
}

; Function Attrs: nounwind
declare arm_aapcscc double @sqrt(double) #2

; Function Attrs: nounwind
declare arm_aapcscc double @tan(double) #2

; Function Attrs: nounwind
define arm_aapcscc i32 @ReadByte(%struct._IO_FILE*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %CallInst = alloca i32, align 4
  %CallInstVec = alloca <4 x i32>, align 16
  %2 = alloca %struct._IO_FILE*, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %5 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %4)
  store i32 %5, i32* %CallInst
  %6 = load i32, i32* %CallInst, align 4
  %insertCall = insertelement <4 x i32> undef, i32 %6, i32 0
  %insertCall3 = insertelement <4 x i32> %insertCall, i32 %6, i32 1
  %insertCall4 = insertelement <4 x i32> %insertCall3, i32 %6, i32 2
  %insertCall5 = insertelement <4 x i32> %insertCall4, i32 %6, i32 3
  store <4 x i32> %insertCall5, <4 x i32>* %CallInstVec, align 4
  %7 = load <4 x i32>, <4 x i32>* %CallInstVec, align 4
  %Vop = and <4 x i32> %7, <i32 255, i32 255, i32 255, i32 255>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec2
  %8 = and i32 %5, 255
  store i32 %8, i32* %3, align 4
  %9 = load i32, i32* %3, align 4
  %10 = load <4 x i32>, <4 x i32>* %allocaVec2, align 16
  %Vop6 = and <4 x i32> %10, <i32 128, i32 128, i32 128, i32 128>
  %11 = and i32 %9, 128
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %23

; <label>:13:                                     ; preds = %1
  %14 = load i32, i32* %3, align 4
  %15 = load <4 x i32>, <4 x i32>* %allocaVec2, align 16
  %Vop7 = sub <4 x i32> %15, <i32 256, i32 256, i32 256, i32 256>
  store <4 x i32> %Vop7, <4 x i32>* %allocaVec2
  %16 = load <4 x i32>, <4 x i32>* %allocaVec2, align 4
  %extractE = extractelement <4 x i32> %16, i64 0
  %extractE8 = extractelement <4 x i32> %16, i64 1
  %extractE9 = extractelement <4 x i32> %16, i64 2
  %sum = add i32 %extractE, %extractE8
  %sum10 = add i32 %sum, %extractE9
  %17 = sub nsw i32 %14, 256
  %Fmul = mul i32 %17, 3
  store i32 %17, i32* %Recovery
  %Fcmp = icmp ne i32 %sum10, %Fmul
  br i1 %Fcmp, label %18, label %22

; <label>:18:                                     ; preds = %13
  %remThree = sdiv i32 %sum10, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %19, label %20

; <label>:19:                                     ; preds = %18
  store i32 %17, i32* %Recovery, align 4
  br label %21

; <label>:20:                                     ; preds = %18
  store i32 %extractE, i32* %Recovery, align 4
  br label %21

; <label>:21:                                     ; preds = %20, %19
  br label %22

; <label>:22:                                     ; preds = %13, %21
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %3, align 4
  br label %23

; <label>:23:                                     ; preds = %22, %1
  %24 = load i32, i32* %3, align 4
  ret i32 %24
}

declare arm_aapcscc i32 @getc(%struct._IO_FILE*) #3

; Function Attrs: nounwind
define arm_aapcscc i32 @Read16BitsLowHigh(%struct._IO_FILE*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %CallInst = alloca i32, align 4
  %CallInstVec = alloca <4 x i32>, align 16
  %allocaVec4 = alloca <4 x i32>, align 16
  %CallInst1 = alloca i32, align 4
  %CallInstVec2 = alloca <4 x i32>, align 16
  %2 = alloca %struct._IO_FILE*, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %7 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %6)
  store i32 %7, i32* %CallInst
  %8 = load i32, i32* %CallInst, align 4
  %insertCall = insertelement <4 x i32> undef, i32 %8, i32 0
  %insertCall8 = insertelement <4 x i32> %insertCall, i32 %8, i32 1
  %insertCall9 = insertelement <4 x i32> %insertCall8, i32 %8, i32 2
  %insertCall10 = insertelement <4 x i32> %insertCall9, i32 %8, i32 3
  store <4 x i32> %insertCall10, <4 x i32>* %CallInstVec, align 4
  %9 = load <4 x i32>, <4 x i32>* %CallInstVec, align 4
  %Vop = and <4 x i32> <i32 255, i32 255, i32 255, i32 255>, %9
  store <4 x i32> %Vop, <4 x i32>* %allocaVec5
  %10 = and i32 255, %7
  store i32 %10, i32* %3, align 4
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %12 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %11)
  store i32 %12, i32* %CallInst1
  %13 = load i32, i32* %CallInst1, align 4
  %insertCall11 = insertelement <4 x i32> undef, i32 %13, i32 0
  %insertCall12 = insertelement <4 x i32> %insertCall11, i32 %13, i32 1
  %insertCall13 = insertelement <4 x i32> %insertCall12, i32 %13, i32 2
  %insertCall14 = insertelement <4 x i32> %insertCall13, i32 %13, i32 3
  store <4 x i32> %insertCall14, <4 x i32>* %CallInstVec2, align 4
  %14 = load <4 x i32>, <4 x i32>* %CallInstVec2, align 4
  %Vop15 = and <4 x i32> <i32 255, i32 255, i32 255, i32 255>, %14
  store <4 x i32> %Vop15, <4 x i32>* %allocaVec6
  %15 = and i32 255, %12
  store i32 %15, i32* %4, align 4
  %16 = load i32, i32* %4, align 4
  %17 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop16 = shl <4 x i32> %17, <i32 8, i32 8, i32 8, i32 8>
  %18 = shl i32 %16, 8
  %19 = load i32, i32* %3, align 4
  %20 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop17 = add <4 x i32> %Vop16, %20
  store <4 x i32> %Vop17, <4 x i32>* %allocaVec7
  %21 = add nsw i32 %18, %19
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %5, align 4
  %23 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop18 = and <4 x i32> %23, <i32 32768, i32 32768, i32 32768, i32 32768>
  %24 = and i32 %22, 32768
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %36

; <label>:26:                                     ; preds = %1
  %27 = load i32, i32* %5, align 4
  %28 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop19 = sub <4 x i32> %28, <i32 65536, i32 65536, i32 65536, i32 65536>
  store <4 x i32> %Vop19, <4 x i32>* %allocaVec7
  %29 = load <4 x i32>, <4 x i32>* %allocaVec7, align 4
  %extractE = extractelement <4 x i32> %29, i64 0
  %extractE20 = extractelement <4 x i32> %29, i64 1
  %extractE21 = extractelement <4 x i32> %29, i64 2
  %sum = add i32 %extractE, %extractE20
  %sum22 = add i32 %sum, %extractE21
  %30 = sub nsw i32 %27, 65536
  %Fmul = mul i32 %30, 3
  store i32 %30, i32* %Recovery
  %Fcmp = icmp ne i32 %sum22, %Fmul
  br i1 %Fcmp, label %31, label %35

; <label>:31:                                     ; preds = %26
  %remThree = sdiv i32 %sum22, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %32, label %33

; <label>:32:                                     ; preds = %31
  store i32 %30, i32* %Recovery, align 4
  br label %34

; <label>:33:                                     ; preds = %31
  store i32 %extractE, i32* %Recovery, align 4
  br label %34

; <label>:34:                                     ; preds = %33, %32
  br label %35

; <label>:35:                                     ; preds = %26, %34
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %5, align 4
  br label %36

; <label>:36:                                     ; preds = %35, %1
  %37 = load i32, i32* %5, align 4
  ret i32 %37
}

; Function Attrs: nounwind
define arm_aapcscc i32 @Read16BitsHighLow(%struct._IO_FILE*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %CallInst = alloca i32, align 4
  %CallInstVec = alloca <4 x i32>, align 16
  %allocaVec4 = alloca <4 x i32>, align 16
  %CallInst1 = alloca i32, align 4
  %CallInstVec2 = alloca <4 x i32>, align 16
  %2 = alloca %struct._IO_FILE*, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %7 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %6)
  store i32 %7, i32* %CallInst
  %8 = load i32, i32* %CallInst, align 4
  %insertCall = insertelement <4 x i32> undef, i32 %8, i32 0
  %insertCall8 = insertelement <4 x i32> %insertCall, i32 %8, i32 1
  %insertCall9 = insertelement <4 x i32> %insertCall8, i32 %8, i32 2
  %insertCall10 = insertelement <4 x i32> %insertCall9, i32 %8, i32 3
  store <4 x i32> %insertCall10, <4 x i32>* %CallInstVec, align 4
  %9 = load <4 x i32>, <4 x i32>* %CallInstVec, align 4
  %Vop = and <4 x i32> <i32 255, i32 255, i32 255, i32 255>, %9
  store <4 x i32> %Vop, <4 x i32>* %allocaVec5
  %10 = and i32 255, %7
  store i32 %10, i32* %3, align 4
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %12 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %11)
  store i32 %12, i32* %CallInst1
  %13 = load i32, i32* %CallInst1, align 4
  %insertCall11 = insertelement <4 x i32> undef, i32 %13, i32 0
  %insertCall12 = insertelement <4 x i32> %insertCall11, i32 %13, i32 1
  %insertCall13 = insertelement <4 x i32> %insertCall12, i32 %13, i32 2
  %insertCall14 = insertelement <4 x i32> %insertCall13, i32 %13, i32 3
  store <4 x i32> %insertCall14, <4 x i32>* %CallInstVec2, align 4
  %14 = load <4 x i32>, <4 x i32>* %CallInstVec2, align 4
  %Vop15 = and <4 x i32> <i32 255, i32 255, i32 255, i32 255>, %14
  store <4 x i32> %Vop15, <4 x i32>* %allocaVec6
  %15 = and i32 255, %12
  store i32 %15, i32* %4, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop16 = shl <4 x i32> %17, <i32 8, i32 8, i32 8, i32 8>
  %18 = shl i32 %16, 8
  %19 = load i32, i32* %4, align 4
  %20 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop17 = add <4 x i32> %Vop16, %20
  store <4 x i32> %Vop17, <4 x i32>* %allocaVec7
  %21 = add nsw i32 %18, %19
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %5, align 4
  %23 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop18 = and <4 x i32> %23, <i32 32768, i32 32768, i32 32768, i32 32768>
  %24 = and i32 %22, 32768
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %36

; <label>:26:                                     ; preds = %1
  %27 = load i32, i32* %5, align 4
  %28 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop19 = sub <4 x i32> %28, <i32 65536, i32 65536, i32 65536, i32 65536>
  store <4 x i32> %Vop19, <4 x i32>* %allocaVec7
  %29 = load <4 x i32>, <4 x i32>* %allocaVec7, align 4
  %extractE = extractelement <4 x i32> %29, i64 0
  %extractE20 = extractelement <4 x i32> %29, i64 1
  %extractE21 = extractelement <4 x i32> %29, i64 2
  %sum = add i32 %extractE, %extractE20
  %sum22 = add i32 %sum, %extractE21
  %30 = sub nsw i32 %27, 65536
  %Fmul = mul i32 %30, 3
  store i32 %30, i32* %Recovery
  %Fcmp = icmp ne i32 %sum22, %Fmul
  br i1 %Fcmp, label %31, label %35

; <label>:31:                                     ; preds = %26
  %remThree = sdiv i32 %sum22, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %32, label %33

; <label>:32:                                     ; preds = %31
  store i32 %30, i32* %Recovery, align 4
  br label %34

; <label>:33:                                     ; preds = %31
  store i32 %extractE, i32* %Recovery, align 4
  br label %34

; <label>:34:                                     ; preds = %33, %32
  br label %35

; <label>:35:                                     ; preds = %26, %34
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %5, align 4
  br label %36

; <label>:36:                                     ; preds = %35, %1
  %37 = load i32, i32* %5, align 4
  ret i32 %37
}

; Function Attrs: nounwind
define arm_aapcscc void @Write8Bits(%struct._IO_FILE*, i32) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %allocaVec = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %5, i32 0
  %insertElmt1 = insertelement <4 x i32> %insertElmt, i32 %5, i32 1
  %insertElmt2 = insertelement <4 x i32> %insertElmt1, i32 %5, i32 2
  %insertElmt3 = insertelement <4 x i32> %insertElmt2, i32 %5, i32 3
  store <4 x i32> %insertElmt3, <4 x i32>* %allocaVec, align 16
  %6 = load <4 x i32>, <4 x i32>* %allocaVec, align 16
  %Vop = and <4 x i32> %6, <i32 255, i32 255, i32 255, i32 255>
  %7 = and i32 %5, 255
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = call arm_aapcscc i32 @putc(i32 %7, %struct._IO_FILE* %8)
  ret void
}

declare arm_aapcscc i32 @putc(i32, %struct._IO_FILE*) #3

; Function Attrs: nounwind
define arm_aapcscc void @Write16BitsLowHigh(%struct._IO_FILE*, i32) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %allocaVec = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %5, i32 0
  %insertElmt1 = insertelement <4 x i32> %insertElmt, i32 %5, i32 1
  %insertElmt2 = insertelement <4 x i32> %insertElmt1, i32 %5, i32 2
  %insertElmt3 = insertelement <4 x i32> %insertElmt2, i32 %5, i32 3
  store <4 x i32> %insertElmt3, <4 x i32>* %allocaVec, align 16
  %6 = load <4 x i32>, <4 x i32>* %allocaVec, align 16
  %Vop = and <4 x i32> %6, <i32 255, i32 255, i32 255, i32 255>
  %7 = and i32 %5, 255
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = call arm_aapcscc i32 @putc(i32 %7, %struct._IO_FILE* %8)
  %10 = load i32, i32* %4, align 4
  %insertElmt4 = insertelement <4 x i32> undef, i32 %10, i32 0
  %insertElmt5 = insertelement <4 x i32> %insertElmt4, i32 %10, i32 1
  %insertElmt6 = insertelement <4 x i32> %insertElmt5, i32 %10, i32 2
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %10, i32 3
  store <4 x i32> %insertElmt7, <4 x i32>* %allocaVec, align 16
  %11 = load <4 x i32>, <4 x i32>* %allocaVec, align 16
  %Vop8 = ashr <4 x i32> %11, <i32 8, i32 8, i32 8, i32 8>
  %12 = ashr i32 %10, 8
  %Vop9 = and <4 x i32> %Vop8, <i32 255, i32 255, i32 255, i32 255>
  %13 = and i32 %12, 255
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %15 = call arm_aapcscc i32 @putc(i32 %13, %struct._IO_FILE* %14)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @Write16BitsHighLow(%struct._IO_FILE*, i32) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %allocaVec = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %5, i32 0
  %insertElmt1 = insertelement <4 x i32> %insertElmt, i32 %5, i32 1
  %insertElmt2 = insertelement <4 x i32> %insertElmt1, i32 %5, i32 2
  %insertElmt3 = insertelement <4 x i32> %insertElmt2, i32 %5, i32 3
  store <4 x i32> %insertElmt3, <4 x i32>* %allocaVec, align 16
  %6 = load <4 x i32>, <4 x i32>* %allocaVec, align 16
  %Vop = ashr <4 x i32> %6, <i32 8, i32 8, i32 8, i32 8>
  %7 = ashr i32 %5, 8
  %Vop4 = and <4 x i32> %Vop, <i32 255, i32 255, i32 255, i32 255>
  %8 = and i32 %7, 255
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %10 = call arm_aapcscc i32 @putc(i32 %8, %struct._IO_FILE* %9)
  %11 = load i32, i32* %4, align 4
  %insertElmt5 = insertelement <4 x i32> undef, i32 %11, i32 0
  %insertElmt6 = insertelement <4 x i32> %insertElmt5, i32 %11, i32 1
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %11, i32 2
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %11, i32 3
  store <4 x i32> %insertElmt8, <4 x i32>* %allocaVec, align 16
  %12 = load <4 x i32>, <4 x i32>* %allocaVec, align 16
  %Vop9 = and <4 x i32> %12, <i32 255, i32 255, i32 255, i32 255>
  %13 = and i32 %11, 255
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %15 = call arm_aapcscc i32 @putc(i32 %13, %struct._IO_FILE* %14)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @Read24BitsHighLow(%struct._IO_FILE*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %CallInst = alloca i32, align 4
  %CallInstVec = alloca <4 x i32>, align 16
  %allocaVec6 = alloca <4 x i32>, align 16
  %CallInst1 = alloca i32, align 4
  %CallInstVec2 = alloca <4 x i32>, align 16
  %allocaVec7 = alloca <4 x i32>, align 16
  %CallInst3 = alloca i32, align 4
  %CallInstVec4 = alloca <4 x i32>, align 16
  %2 = alloca %struct._IO_FILE*, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %8 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %7)
  store i32 %8, i32* %CallInst
  %9 = load i32, i32* %CallInst, align 4
  %insertCall = insertelement <4 x i32> undef, i32 %9, i32 0
  %insertCall12 = insertelement <4 x i32> %insertCall, i32 %9, i32 1
  %insertCall13 = insertelement <4 x i32> %insertCall12, i32 %9, i32 2
  %insertCall14 = insertelement <4 x i32> %insertCall13, i32 %9, i32 3
  store <4 x i32> %insertCall14, <4 x i32>* %CallInstVec, align 4
  %10 = load <4 x i32>, <4 x i32>* %CallInstVec, align 4
  %Vop = and <4 x i32> <i32 255, i32 255, i32 255, i32 255>, %10
  store <4 x i32> %Vop, <4 x i32>* %allocaVec8
  %11 = and i32 255, %8
  store i32 %11, i32* %3, align 4
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %13 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %12)
  store i32 %13, i32* %CallInst1
  %14 = load i32, i32* %CallInst1, align 4
  %insertCall15 = insertelement <4 x i32> undef, i32 %14, i32 0
  %insertCall16 = insertelement <4 x i32> %insertCall15, i32 %14, i32 1
  %insertCall17 = insertelement <4 x i32> %insertCall16, i32 %14, i32 2
  %insertCall18 = insertelement <4 x i32> %insertCall17, i32 %14, i32 3
  store <4 x i32> %insertCall18, <4 x i32>* %CallInstVec2, align 4
  %15 = load <4 x i32>, <4 x i32>* %CallInstVec2, align 4
  %Vop19 = and <4 x i32> <i32 255, i32 255, i32 255, i32 255>, %15
  store <4 x i32> %Vop19, <4 x i32>* %allocaVec9
  %16 = and i32 255, %13
  store i32 %16, i32* %4, align 4
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %18 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %17)
  store i32 %18, i32* %CallInst3
  %19 = load i32, i32* %CallInst3, align 4
  %insertCall20 = insertelement <4 x i32> undef, i32 %19, i32 0
  %insertCall21 = insertelement <4 x i32> %insertCall20, i32 %19, i32 1
  %insertCall22 = insertelement <4 x i32> %insertCall21, i32 %19, i32 2
  %insertCall23 = insertelement <4 x i32> %insertCall22, i32 %19, i32 3
  store <4 x i32> %insertCall23, <4 x i32>* %CallInstVec4, align 4
  %20 = load <4 x i32>, <4 x i32>* %CallInstVec4, align 4
  %Vop24 = and <4 x i32> <i32 255, i32 255, i32 255, i32 255>, %20
  store <4 x i32> %Vop24, <4 x i32>* %allocaVec10
  %21 = and i32 255, %18
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %3, align 4
  %23 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %Vop25 = shl <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %24 = shl i32 %22, 16
  %25 = load i32, i32* %4, align 4
  %26 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop26 = shl <4 x i32> %26, <i32 8, i32 8, i32 8, i32 8>
  %27 = shl i32 %25, 8
  %Vop27 = add <4 x i32> %Vop25, %Vop26
  %28 = add nsw i32 %24, %27
  %29 = load i32, i32* %5, align 4
  %30 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop28 = add <4 x i32> %Vop27, %30
  store <4 x i32> %Vop28, <4 x i32>* %allocaVec11
  %31 = add nsw i32 %28, %29
  store i32 %31, i32* %6, align 4
  %32 = load i32, i32* %6, align 4
  %33 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop29 = and <4 x i32> %33, <i32 8388608, i32 8388608, i32 8388608, i32 8388608>
  %34 = and i32 %32, 8388608
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %46

; <label>:36:                                     ; preds = %1
  %37 = load i32, i32* %6, align 4
  %38 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop30 = sub <4 x i32> %38, <i32 16777216, i32 16777216, i32 16777216, i32 16777216>
  store <4 x i32> %Vop30, <4 x i32>* %allocaVec11
  %39 = load <4 x i32>, <4 x i32>* %allocaVec11, align 4
  %extractE = extractelement <4 x i32> %39, i64 0
  %extractE31 = extractelement <4 x i32> %39, i64 1
  %extractE32 = extractelement <4 x i32> %39, i64 2
  %sum = add i32 %extractE, %extractE31
  %sum33 = add i32 %sum, %extractE32
  %40 = sub nsw i32 %37, 16777216
  %Fmul = mul i32 %40, 3
  store i32 %40, i32* %Recovery
  %Fcmp = icmp ne i32 %sum33, %Fmul
  br i1 %Fcmp, label %41, label %45

; <label>:41:                                     ; preds = %36
  %remThree = sdiv i32 %sum33, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %42, label %43

; <label>:42:                                     ; preds = %41
  store i32 %40, i32* %Recovery, align 4
  br label %44

; <label>:43:                                     ; preds = %41
  store i32 %extractE, i32* %Recovery, align 4
  br label %44

; <label>:44:                                     ; preds = %43, %42
  br label %45

; <label>:45:                                     ; preds = %36, %44
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %6, align 4
  br label %46

; <label>:46:                                     ; preds = %45, %1
  %47 = load i32, i32* %6, align 4
  ret i32 %47
}

; Function Attrs: nounwind
define arm_aapcscc i32 @Read32Bits(%struct._IO_FILE*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %CallInst = alloca i32, align 4
  %CallInstVec = alloca <4 x i32>, align 16
  %allocaVec4 = alloca <4 x i32>, align 16
  %CallInst1 = alloca i32, align 4
  %CallInstVec2 = alloca <4 x i32>, align 16
  %2 = alloca %struct._IO_FILE*, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %7 = call arm_aapcscc i32 @Read16BitsLowHigh(%struct._IO_FILE* %6)
  store i32 %7, i32* %CallInst
  %8 = load i32, i32* %CallInst, align 4
  %insertCall = insertelement <4 x i32> undef, i32 %8, i32 0
  %insertCall8 = insertelement <4 x i32> %insertCall, i32 %8, i32 1
  %insertCall9 = insertelement <4 x i32> %insertCall8, i32 %8, i32 2
  %insertCall10 = insertelement <4 x i32> %insertCall9, i32 %8, i32 3
  store <4 x i32> %insertCall10, <4 x i32>* %CallInstVec, align 4
  %9 = load <4 x i32>, <4 x i32>* %CallInstVec, align 4
  %Vop = and <4 x i32> <i32 65535, i32 65535, i32 65535, i32 65535>, %9
  store <4 x i32> %Vop, <4 x i32>* %allocaVec5
  %10 = and i32 65535, %7
  store i32 %10, i32* %3, align 4
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %12 = call arm_aapcscc i32 @Read16BitsLowHigh(%struct._IO_FILE* %11)
  store i32 %12, i32* %CallInst1
  %13 = load i32, i32* %CallInst1, align 4
  %insertCall11 = insertelement <4 x i32> undef, i32 %13, i32 0
  %insertCall12 = insertelement <4 x i32> %insertCall11, i32 %13, i32 1
  %insertCall13 = insertelement <4 x i32> %insertCall12, i32 %13, i32 2
  %insertCall14 = insertelement <4 x i32> %insertCall13, i32 %13, i32 3
  store <4 x i32> %insertCall14, <4 x i32>* %CallInstVec2, align 4
  %14 = load <4 x i32>, <4 x i32>* %CallInstVec2, align 4
  %Vop15 = and <4 x i32> <i32 65535, i32 65535, i32 65535, i32 65535>, %14
  store <4 x i32> %Vop15, <4 x i32>* %allocaVec6
  %15 = and i32 65535, %12
  store i32 %15, i32* %4, align 4
  %16 = load i32, i32* %4, align 4
  %17 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop16 = shl <4 x i32> %17, <i32 16, i32 16, i32 16, i32 16>
  %18 = shl i32 %16, 16
  %19 = load i32, i32* %3, align 4
  %20 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop17 = add <4 x i32> %Vop16, %20
  store <4 x i32> %Vop17, <4 x i32>* %allocaVec7
  %21 = load <4 x i32>, <4 x i32>* %allocaVec7, align 4
  %extractE = extractelement <4 x i32> %21, i64 0
  %extractE18 = extractelement <4 x i32> %21, i64 1
  %extractE19 = extractelement <4 x i32> %21, i64 2
  %sum = add i32 %extractE, %extractE18
  %sum20 = add i32 %sum, %extractE19
  %22 = add nsw i32 %18, %19
  %Fmul = mul i32 %22, 3
  store i32 %22, i32* %Recovery
  %Fcmp = icmp ne i32 %sum20, %Fmul
  br i1 %Fcmp, label %23, label %27

; <label>:23:                                     ; preds = %1
  %remThree = sdiv i32 %sum20, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %24, label %25

; <label>:24:                                     ; preds = %23
  store i32 %22, i32* %Recovery, align 4
  br label %26

; <label>:25:                                     ; preds = %23
  store i32 %extractE, i32* %Recovery, align 4
  br label %26

; <label>:26:                                     ; preds = %25, %24
  br label %27

; <label>:27:                                     ; preds = %1, %26
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %5, align 4
  %28 = load i32, i32* %5, align 4
  ret i32 %28
}

; Function Attrs: nounwind
define arm_aapcscc i32 @Read32BitsHighLow(%struct._IO_FILE*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %CallInst = alloca i32, align 4
  %CallInstVec = alloca <4 x i32>, align 16
  %allocaVec4 = alloca <4 x i32>, align 16
  %CallInst1 = alloca i32, align 4
  %CallInstVec2 = alloca <4 x i32>, align 16
  %2 = alloca %struct._IO_FILE*, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %7 = call arm_aapcscc i32 @Read16BitsHighLow(%struct._IO_FILE* %6)
  store i32 %7, i32* %CallInst
  %8 = load i32, i32* %CallInst, align 4
  %insertCall = insertelement <4 x i32> undef, i32 %8, i32 0
  %insertCall8 = insertelement <4 x i32> %insertCall, i32 %8, i32 1
  %insertCall9 = insertelement <4 x i32> %insertCall8, i32 %8, i32 2
  %insertCall10 = insertelement <4 x i32> %insertCall9, i32 %8, i32 3
  store <4 x i32> %insertCall10, <4 x i32>* %CallInstVec, align 4
  %9 = load <4 x i32>, <4 x i32>* %CallInstVec, align 4
  %Vop = and <4 x i32> <i32 65535, i32 65535, i32 65535, i32 65535>, %9
  store <4 x i32> %Vop, <4 x i32>* %allocaVec5
  %10 = and i32 65535, %7
  store i32 %10, i32* %3, align 4
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %12 = call arm_aapcscc i32 @Read16BitsHighLow(%struct._IO_FILE* %11)
  store i32 %12, i32* %CallInst1
  %13 = load i32, i32* %CallInst1, align 4
  %insertCall11 = insertelement <4 x i32> undef, i32 %13, i32 0
  %insertCall12 = insertelement <4 x i32> %insertCall11, i32 %13, i32 1
  %insertCall13 = insertelement <4 x i32> %insertCall12, i32 %13, i32 2
  %insertCall14 = insertelement <4 x i32> %insertCall13, i32 %13, i32 3
  store <4 x i32> %insertCall14, <4 x i32>* %CallInstVec2, align 4
  %14 = load <4 x i32>, <4 x i32>* %CallInstVec2, align 4
  %Vop15 = and <4 x i32> <i32 65535, i32 65535, i32 65535, i32 65535>, %14
  store <4 x i32> %Vop15, <4 x i32>* %allocaVec6
  %15 = and i32 65535, %12
  store i32 %15, i32* %4, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop16 = shl <4 x i32> %17, <i32 16, i32 16, i32 16, i32 16>
  %18 = shl i32 %16, 16
  %19 = load i32, i32* %4, align 4
  %20 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop17 = add <4 x i32> %Vop16, %20
  store <4 x i32> %Vop17, <4 x i32>* %allocaVec7
  %21 = load <4 x i32>, <4 x i32>* %allocaVec7, align 4
  %extractE = extractelement <4 x i32> %21, i64 0
  %extractE18 = extractelement <4 x i32> %21, i64 1
  %extractE19 = extractelement <4 x i32> %21, i64 2
  %sum = add i32 %extractE, %extractE18
  %sum20 = add i32 %sum, %extractE19
  %22 = add nsw i32 %18, %19
  %Fmul = mul i32 %22, 3
  store i32 %22, i32* %Recovery
  %Fcmp = icmp ne i32 %sum20, %Fmul
  br i1 %Fcmp, label %23, label %27

; <label>:23:                                     ; preds = %1
  %remThree = sdiv i32 %sum20, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %24, label %25

; <label>:24:                                     ; preds = %23
  store i32 %22, i32* %Recovery, align 4
  br label %26

; <label>:25:                                     ; preds = %23
  store i32 %extractE, i32* %Recovery, align 4
  br label %26

; <label>:26:                                     ; preds = %25, %24
  br label %27

; <label>:27:                                     ; preds = %1, %26
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %5, align 4
  %28 = load i32, i32* %5, align 4
  ret i32 %28
}

; Function Attrs: nounwind
define arm_aapcscc void @Write32Bits(%struct._IO_FILE*, i32) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %allocaVec = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %6 = load i32, i32* %4, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %6, i32 0
  %insertElmt1 = insertelement <4 x i32> %insertElmt, i32 %6, i32 1
  %insertElmt2 = insertelement <4 x i32> %insertElmt1, i32 %6, i32 2
  %insertElmt3 = insertelement <4 x i32> %insertElmt2, i32 %6, i32 3
  store <4 x i32> %insertElmt3, <4 x i32>* %allocaVec, align 16
  %7 = load <4 x i32>, <4 x i32>* %allocaVec, align 16
  %Vop = and <4 x i32> %7, <i32 65535, i32 65535, i32 65535, i32 65535>
  %8 = and i32 %6, 65535
  call arm_aapcscc void @Write16BitsLowHigh(%struct._IO_FILE* %5, i32 %8)
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %10 = load i32, i32* %4, align 4
  %insertElmt4 = insertelement <4 x i32> undef, i32 %10, i32 0
  %insertElmt5 = insertelement <4 x i32> %insertElmt4, i32 %10, i32 1
  %insertElmt6 = insertelement <4 x i32> %insertElmt5, i32 %10, i32 2
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %10, i32 3
  store <4 x i32> %insertElmt7, <4 x i32>* %allocaVec, align 16
  %11 = load <4 x i32>, <4 x i32>* %allocaVec, align 16
  %Vop8 = ashr <4 x i32> %11, <i32 16, i32 16, i32 16, i32 16>
  %12 = ashr i32 %10, 16
  %Vop9 = and <4 x i32> %Vop8, <i32 65535, i32 65535, i32 65535, i32 65535>
  %13 = and i32 %12, 65535
  call arm_aapcscc void @Write16BitsLowHigh(%struct._IO_FILE* %9, i32 %13)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @Write32BitsLowHigh(%struct._IO_FILE*, i32) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %allocaVec = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %6 = load i32, i32* %4, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %6, i32 0
  %insertElmt1 = insertelement <4 x i32> %insertElmt, i32 %6, i32 1
  %insertElmt2 = insertelement <4 x i32> %insertElmt1, i32 %6, i32 2
  %insertElmt3 = insertelement <4 x i32> %insertElmt2, i32 %6, i32 3
  store <4 x i32> %insertElmt3, <4 x i32>* %allocaVec, align 16
  %7 = load <4 x i32>, <4 x i32>* %allocaVec, align 16
  %Vop = and <4 x i32> %7, <i32 65535, i32 65535, i32 65535, i32 65535>
  %8 = and i32 %6, 65535
  call arm_aapcscc void @Write16BitsLowHigh(%struct._IO_FILE* %5, i32 %8)
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %10 = load i32, i32* %4, align 4
  %insertElmt4 = insertelement <4 x i32> undef, i32 %10, i32 0
  %insertElmt5 = insertelement <4 x i32> %insertElmt4, i32 %10, i32 1
  %insertElmt6 = insertelement <4 x i32> %insertElmt5, i32 %10, i32 2
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %10, i32 3
  store <4 x i32> %insertElmt7, <4 x i32>* %allocaVec, align 16
  %11 = load <4 x i32>, <4 x i32>* %allocaVec, align 16
  %Vop8 = ashr <4 x i32> %11, <i32 16, i32 16, i32 16, i32 16>
  %12 = ashr i32 %10, 16
  %Vop9 = and <4 x i32> %Vop8, <i32 65535, i32 65535, i32 65535, i32 65535>
  %13 = and i32 %12, 65535
  call arm_aapcscc void @Write16BitsLowHigh(%struct._IO_FILE* %9, i32 %13)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @Write32BitsHighLow(%struct._IO_FILE*, i32) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %allocaVec = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %6 = load i32, i32* %4, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %6, i32 0
  %insertElmt1 = insertelement <4 x i32> %insertElmt, i32 %6, i32 1
  %insertElmt2 = insertelement <4 x i32> %insertElmt1, i32 %6, i32 2
  %insertElmt3 = insertelement <4 x i32> %insertElmt2, i32 %6, i32 3
  store <4 x i32> %insertElmt3, <4 x i32>* %allocaVec, align 16
  %7 = load <4 x i32>, <4 x i32>* %allocaVec, align 16
  %Vop = ashr <4 x i32> %7, <i32 16, i32 16, i32 16, i32 16>
  %8 = ashr i32 %6, 16
  %Vop4 = and <4 x i32> %Vop, <i32 65535, i32 65535, i32 65535, i32 65535>
  %9 = and i32 %8, 65535
  call arm_aapcscc void @Write16BitsHighLow(%struct._IO_FILE* %5, i32 %9)
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %11 = load i32, i32* %4, align 4
  %insertElmt5 = insertelement <4 x i32> undef, i32 %11, i32 0
  %insertElmt6 = insertelement <4 x i32> %insertElmt5, i32 %11, i32 1
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %11, i32 2
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %11, i32 3
  store <4 x i32> %insertElmt8, <4 x i32>* %allocaVec, align 16
  %12 = load <4 x i32>, <4 x i32>* %allocaVec, align 16
  %Vop9 = and <4 x i32> %12, <i32 65535, i32 65535, i32 65535, i32 65535>
  %13 = and i32 %11, 65535
  call arm_aapcscc void @Write16BitsHighLow(%struct._IO_FILE* %10, i32 %13)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @ReadBytes(%struct._IO_FILE*, i8*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec4 = alloca <4 x i32>, align 16
  %CastInst1 = alloca i32, align 4
  %CastInstVec2 = alloca <4 x i32>, align 16
  %4 = alloca %struct._IO_FILE*, align 4
  %5 = alloca i8*, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %4, align 4
  store i8* %1, i8** %5, align 4
  store i32 %2, i32* %6, align 4
  br label %7

; <label>:7:                                      ; preds = %30, %3
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 4
  %9 = call arm_aapcscc i32 @feof(%struct._IO_FILE* %8)
  %10 = icmp ne i32 %9, 0
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i32
  %13 = load i32, i32* %6, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %13, i32 0
  %insertElmt6 = insertelement <4 x i32> %insertElmt, i32 %13, i32 1
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %13, i32 2
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %13, i32 3
  store <4 x i32> %insertElmt8, <4 x i32>* %allocaVec5, align 16
  %14 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop = add <4 x i32> %14, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec5
  %15 = load <4 x i32>, <4 x i32>* %allocaVec5, align 4
  %extractE = extractelement <4 x i32> %15, i64 0
  %extractE9 = extractelement <4 x i32> %15, i64 1
  %extractE10 = extractelement <4 x i32> %15, i64 2
  %sum = add i32 %extractE, %extractE9
  %sum11 = add i32 %sum, %extractE10
  %16 = add nsw i32 %13, -1
  %Fmul = mul i32 %16, 3
  store i32 %16, i32* %Recovery
  %Fcmp = icmp ne i32 %sum11, %Fmul
  br i1 %Fcmp, label %17, label %21

; <label>:17:                                     ; preds = %7
  %remThree = sdiv i32 %sum11, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %18, label %19

; <label>:18:                                     ; preds = %17
  store i32 %16, i32* %Recovery, align 4
  br label %20

; <label>:19:                                     ; preds = %17
  store i32 %extractE, i32* %Recovery, align 4
  br label %20

; <label>:20:                                     ; preds = %19, %18
  br label %21

; <label>:21:                                     ; preds = %7, %20
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %6, align 4
  %22 = icmp sgt i32 %13, 0
  %23 = zext i1 %22 to i32
  store i32 %12, i32* %CastInst
  %24 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %24, i32 0
  %insertCast12 = insertelement <4 x i32> %insertCast, i32 %24, i32 1
  %insertCast13 = insertelement <4 x i32> %insertCast12, i32 %24, i32 2
  %insertCast14 = insertelement <4 x i32> %insertCast13, i32 %24, i32 3
  store <4 x i32> %insertCast14, <4 x i32>* %CastInstVec, align 4
  %25 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  store i32 %23, i32* %CastInst1
  %26 = load i32, i32* %CastInst1, align 4
  %insertCast15 = insertelement <4 x i32> undef, i32 %26, i32 0
  %insertCast16 = insertelement <4 x i32> %insertCast15, i32 %26, i32 1
  %insertCast17 = insertelement <4 x i32> %insertCast16, i32 %26, i32 2
  %insertCast18 = insertelement <4 x i32> %insertCast17, i32 %26, i32 3
  store <4 x i32> %insertCast18, <4 x i32>* %CastInstVec2, align 4
  %27 = load <4 x i32>, <4 x i32>* %CastInstVec2, align 4
  %Vop19 = and <4 x i32> %25, %27
  %28 = and i32 %12, %23
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %36

; <label>:30:                                     ; preds = %21
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 4
  %32 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %31)
  %33 = trunc i32 %32 to i8
  %34 = load i8*, i8** %5, align 4
  %35 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %35, i8** %5, align 4
  store i8 %33, i8* %34, align 1
  br label %7

; <label>:36:                                     ; preds = %21
  ret void
}

declare arm_aapcscc i32 @feof(%struct._IO_FILE*) #3

; Function Attrs: nounwind
define arm_aapcscc void @ReadBytesSwapped(%struct._IO_FILE*, i8*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec4 = alloca <4 x i32>, align 16
  %CastInst1 = alloca i32, align 4
  %CastInstVec2 = alloca <4 x i32>, align 16
  %4 = alloca %struct._IO_FILE*, align 4
  %5 = alloca i8*, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %4, align 4
  store i8* %1, i8** %5, align 4
  store i32 %2, i32* %6, align 4
  %8 = load i8*, i8** %5, align 4
  store i8* %8, i8** %7, align 4
  br label %9

; <label>:9:                                      ; preds = %32, %3
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 4
  %11 = call arm_aapcscc i32 @feof(%struct._IO_FILE* %10)
  %12 = icmp ne i32 %11, 0
  %13 = xor i1 %12, true
  %14 = zext i1 %13 to i32
  %15 = load i32, i32* %6, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %15, i32 0
  %insertElmt6 = insertelement <4 x i32> %insertElmt, i32 %15, i32 1
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %15, i32 2
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %15, i32 3
  store <4 x i32> %insertElmt8, <4 x i32>* %allocaVec5, align 16
  %16 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop = add <4 x i32> %16, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec5
  %17 = load <4 x i32>, <4 x i32>* %allocaVec5, align 4
  %extractE = extractelement <4 x i32> %17, i64 0
  %extractE9 = extractelement <4 x i32> %17, i64 1
  %extractE10 = extractelement <4 x i32> %17, i64 2
  %sum = add i32 %extractE, %extractE9
  %sum11 = add i32 %sum, %extractE10
  %18 = add nsw i32 %15, -1
  %Fmul = mul i32 %18, 3
  store i32 %18, i32* %Recovery
  %Fcmp = icmp ne i32 %sum11, %Fmul
  br i1 %Fcmp, label %19, label %23

; <label>:19:                                     ; preds = %9
  %remThree = sdiv i32 %sum11, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %20, label %21

; <label>:20:                                     ; preds = %19
  store i32 %18, i32* %Recovery, align 4
  br label %22

; <label>:21:                                     ; preds = %19
  store i32 %extractE, i32* %Recovery, align 4
  br label %22

; <label>:22:                                     ; preds = %21, %20
  br label %23

; <label>:23:                                     ; preds = %9, %22
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %6, align 4
  %24 = icmp sgt i32 %15, 0
  %25 = zext i1 %24 to i32
  store i32 %14, i32* %CastInst
  %26 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %26, i32 0
  %insertCast12 = insertelement <4 x i32> %insertCast, i32 %26, i32 1
  %insertCast13 = insertelement <4 x i32> %insertCast12, i32 %26, i32 2
  %insertCast14 = insertelement <4 x i32> %insertCast13, i32 %26, i32 3
  store <4 x i32> %insertCast14, <4 x i32>* %CastInstVec, align 4
  %27 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  store i32 %25, i32* %CastInst1
  %28 = load i32, i32* %CastInst1, align 4
  %insertCast15 = insertelement <4 x i32> undef, i32 %28, i32 0
  %insertCast16 = insertelement <4 x i32> %insertCast15, i32 %28, i32 1
  %insertCast17 = insertelement <4 x i32> %insertCast16, i32 %28, i32 2
  %insertCast18 = insertelement <4 x i32> %insertCast17, i32 %28, i32 3
  store <4 x i32> %insertCast18, <4 x i32>* %CastInstVec2, align 4
  %29 = load <4 x i32>, <4 x i32>* %CastInstVec2, align 4
  %Vop19 = and <4 x i32> %27, %29
  %30 = and i32 %14, %25
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %38

; <label>:32:                                     ; preds = %23
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 4
  %34 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %33)
  %35 = trunc i32 %34 to i8
  %36 = load i8*, i8** %7, align 4
  %37 = getelementptr inbounds i8, i8* %36, i32 1
  store i8* %37, i8** %7, align 4
  store i8 %35, i8* %36, align 1
  br label %9

; <label>:38:                                     ; preds = %23
  %39 = load i8*, i8** %7, align 4
  %40 = getelementptr inbounds i8, i8* %39, i32 -1
  store i8* %40, i8** %7, align 4
  br label %41

; <label>:41:                                     ; preds = %55, %38
  %42 = load i8*, i8** %5, align 4
  %43 = load i8*, i8** %7, align 4
  %44 = icmp ult i8* %42, %43
  br i1 %44, label %45, label %60

; <label>:45:                                     ; preds = %41
  %46 = load i8*, i8** %5, align 4
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  store i32 %48, i32* %6, align 4
  %49 = load i8*, i8** %7, align 4
  %50 = load i8, i8* %49, align 1
  %51 = load i8*, i8** %5, align 4
  store i8 %50, i8* %51, align 1
  %52 = load i32, i32* %6, align 4
  %53 = trunc i32 %52 to i8
  %54 = load i8*, i8** %7, align 4
  store i8 %53, i8* %54, align 1
  br label %55

; <label>:55:                                     ; preds = %45
  %56 = load i8*, i8** %5, align 4
  %57 = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %57, i8** %5, align 4
  %58 = load i8*, i8** %7, align 4
  %59 = getelementptr inbounds i8, i8* %58, i32 -1
  store i8* %59, i8** %7, align 4
  br label %41

; <label>:60:                                     ; preds = %41
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @WriteBytes(%struct._IO_FILE*, i8*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %4 = alloca %struct._IO_FILE*, align 4
  %5 = alloca i8*, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %4, align 4
  store i8* %1, i8** %5, align 4
  store i32 %2, i32* %6, align 4
  br label %7

; <label>:7:                                      ; preds = %18, %3
  %8 = load i32, i32* %6, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %8, i32 0
  %insertElmt2 = insertelement <4 x i32> %insertElmt, i32 %8, i32 1
  %insertElmt3 = insertelement <4 x i32> %insertElmt2, i32 %8, i32 2
  %insertElmt4 = insertelement <4 x i32> %insertElmt3, i32 %8, i32 3
  store <4 x i32> %insertElmt4, <4 x i32>* %allocaVec1, align 16
  %9 = load <4 x i32>, <4 x i32>* %allocaVec1, align 16
  %Vop = add <4 x i32> %9, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec1
  %10 = load <4 x i32>, <4 x i32>* %allocaVec1, align 4
  %extractE = extractelement <4 x i32> %10, i64 0
  %extractE5 = extractelement <4 x i32> %10, i64 1
  %extractE6 = extractelement <4 x i32> %10, i64 2
  %sum = add i32 %extractE, %extractE5
  %sum7 = add i32 %sum, %extractE6
  %11 = add nsw i32 %8, -1
  %Fmul = mul i32 %11, 3
  store i32 %11, i32* %Recovery
  %Fcmp = icmp ne i32 %sum7, %Fmul
  br i1 %Fcmp, label %12, label %16

; <label>:12:                                     ; preds = %7
  %remThree = sdiv i32 %sum7, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %13, label %14

; <label>:13:                                     ; preds = %12
  store i32 %11, i32* %Recovery, align 4
  br label %15

; <label>:14:                                     ; preds = %12
  store i32 %extractE, i32* %Recovery, align 4
  br label %15

; <label>:15:                                     ; preds = %14, %13
  br label %16

; <label>:16:                                     ; preds = %7, %15
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %6, align 4
  %17 = icmp sgt i32 %8, 0
  br i1 %17, label %18, label %25

; <label>:18:                                     ; preds = %16
  %19 = load i8*, i8** %5, align 4
  %20 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %20, i8** %5, align 4
  %21 = load i8, i8* %19, align 1
  %22 = zext i8 %21 to i32
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 4
  %24 = call arm_aapcscc i32 @putc(i32 %22, %struct._IO_FILE* %23)
  br label %7

; <label>:25:                                     ; preds = %16
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @WriteBytesSwapped(%struct._IO_FILE*, i8*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %4 = alloca %struct._IO_FILE*, align 4
  %5 = alloca i8*, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %4, align 4
  store i8* %1, i8** %5, align 4
  store i32 %2, i32* %6, align 4
  %7 = load i32, i32* %6, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %7, i32 0
  %insertElmt2 = insertelement <4 x i32> %insertElmt, i32 %7, i32 1
  %insertElmt3 = insertelement <4 x i32> %insertElmt2, i32 %7, i32 2
  %insertElmt4 = insertelement <4 x i32> %insertElmt3, i32 %7, i32 3
  store <4 x i32> %insertElmt4, <4 x i32>* %allocaVec1, align 16
  %8 = load <4 x i32>, <4 x i32>* %allocaVec1, align 16
  %Vop = sub <4 x i32> %8, <i32 1, i32 1, i32 1, i32 1>
  %9 = sub nsw i32 %7, 1
  %10 = load i8*, i8** %5, align 4
  %11 = getelementptr inbounds i8, i8* %10, i32 %9
  store i8* %11, i8** %5, align 4
  br label %12

; <label>:12:                                     ; preds = %23, %3
  %13 = load i32, i32* %6, align 4
  %insertElmt5 = insertelement <4 x i32> undef, i32 %13, i32 0
  %insertElmt6 = insertelement <4 x i32> %insertElmt5, i32 %13, i32 1
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %13, i32 2
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %13, i32 3
  store <4 x i32> %insertElmt8, <4 x i32>* %allocaVec1, align 16
  %14 = load <4 x i32>, <4 x i32>* %allocaVec1, align 16
  %Vop9 = add <4 x i32> %14, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop9, <4 x i32>* %allocaVec1
  %15 = load <4 x i32>, <4 x i32>* %allocaVec1, align 4
  %extractE = extractelement <4 x i32> %15, i64 0
  %extractE10 = extractelement <4 x i32> %15, i64 1
  %extractE11 = extractelement <4 x i32> %15, i64 2
  %sum = add i32 %extractE, %extractE10
  %sum12 = add i32 %sum, %extractE11
  %16 = add nsw i32 %13, -1
  %Fmul = mul i32 %16, 3
  store i32 %16, i32* %Recovery
  %Fcmp = icmp ne i32 %sum12, %Fmul
  br i1 %Fcmp, label %17, label %21

; <label>:17:                                     ; preds = %12
  %remThree = sdiv i32 %sum12, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %18, label %19

; <label>:18:                                     ; preds = %17
  store i32 %16, i32* %Recovery, align 4
  br label %20

; <label>:19:                                     ; preds = %17
  store i32 %extractE, i32* %Recovery, align 4
  br label %20

; <label>:20:                                     ; preds = %19, %18
  br label %21

; <label>:21:                                     ; preds = %12, %20
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %6, align 4
  %22 = icmp sgt i32 %13, 0
  br i1 %22, label %23, label %30

; <label>:23:                                     ; preds = %21
  %24 = load i8*, i8** %5, align 4
  %25 = getelementptr inbounds i8, i8* %24, i32 -1
  store i8* %25, i8** %5, align 4
  %26 = load i8, i8* %24, align 1
  %27 = zext i8 %26 to i32
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 4
  %29 = call arm_aapcscc i32 @putc(i32 %27, %struct._IO_FILE* %28)
  br label %12

; <label>:30:                                     ; preds = %21
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc double @ReadIeeeFloatHighLow(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca [4 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %5 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i32 0, i32 0
  call arm_aapcscc void @ReadBytes(%struct._IO_FILE* %4, i8* %5, i32 4)
  %6 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i32 0, i32 0
  %7 = call arm_aapcscc double @ConvertFromIeeeSingle(i8* %6)
  ret double %7
}

; Function Attrs: nounwind
define arm_aapcscc double @ReadIeeeFloatLowHigh(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca [4 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %5 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i32 0, i32 0
  call arm_aapcscc void @ReadBytesSwapped(%struct._IO_FILE* %4, i8* %5, i32 4)
  %6 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i32 0, i32 0
  %7 = call arm_aapcscc double @ConvertFromIeeeSingle(i8* %6)
  ret double %7
}

; Function Attrs: nounwind
define arm_aapcscc double @ReadIeeeDoubleHighLow(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca [8 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %5 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i32 0, i32 0
  call arm_aapcscc void @ReadBytes(%struct._IO_FILE* %4, i8* %5, i32 8)
  %6 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i32 0, i32 0
  %7 = call arm_aapcscc double @ConvertFromIeeeDouble(i8* %6)
  ret double %7
}

; Function Attrs: nounwind
define arm_aapcscc double @ReadIeeeDoubleLowHigh(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca [8 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %5 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i32 0, i32 0
  call arm_aapcscc void @ReadBytesSwapped(%struct._IO_FILE* %4, i8* %5, i32 8)
  %6 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i32 0, i32 0
  %7 = call arm_aapcscc double @ConvertFromIeeeDouble(i8* %6)
  ret double %7
}

; Function Attrs: nounwind
define arm_aapcscc double @ReadIeeeExtendedHighLow(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca [10 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %5 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i32 0, i32 0
  call arm_aapcscc void @ReadBytes(%struct._IO_FILE* %4, i8* %5, i32 10)
  %6 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i32 0, i32 0
  %7 = call arm_aapcscc double @ConvertFromIeeeExtended(i8* %6)
  ret double %7
}

; Function Attrs: nounwind
define arm_aapcscc double @ReadIeeeExtendedLowHigh(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca [10 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %5 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i32 0, i32 0
  call arm_aapcscc void @ReadBytesSwapped(%struct._IO_FILE* %4, i8* %5, i32 10)
  %6 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i32 0, i32 0
  %7 = call arm_aapcscc double @ConvertFromIeeeExtended(i8* %6)
  ret double %7
}

; Function Attrs: nounwind
define arm_aapcscc void @WriteIeeeFloatLowHigh(%struct._IO_FILE*, double) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %allocaVec = alloca <2 x double>, align 16
  %4 = alloca double, align 8
  %5 = alloca [4 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store double %1, double* %4, align 8
  %6 = load double, double* %4, align 8
  %7 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @ConvertToIeeeSingle(double %6, i8* %7)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @WriteBytesSwapped(%struct._IO_FILE* %8, i8* %9, i32 4)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @WriteIeeeFloatHighLow(%struct._IO_FILE*, double) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %allocaVec = alloca <2 x double>, align 16
  %4 = alloca double, align 8
  %5 = alloca [4 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store double %1, double* %4, align 8
  %6 = load double, double* %4, align 8
  %7 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @ConvertToIeeeSingle(double %6, i8* %7)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @WriteBytes(%struct._IO_FILE* %8, i8* %9, i32 4)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @WriteIeeeDoubleLowHigh(%struct._IO_FILE*, double) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %allocaVec = alloca <2 x double>, align 16
  %4 = alloca double, align 8
  %5 = alloca [8 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store double %1, double* %4, align 8
  %6 = load double, double* %4, align 8
  %7 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @ConvertToIeeeDouble(double %6, i8* %7)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @WriteBytesSwapped(%struct._IO_FILE* %8, i8* %9, i32 8)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @WriteIeeeDoubleHighLow(%struct._IO_FILE*, double) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %allocaVec = alloca <2 x double>, align 16
  %4 = alloca double, align 8
  %5 = alloca [8 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store double %1, double* %4, align 8
  %6 = load double, double* %4, align 8
  %7 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @ConvertToIeeeDouble(double %6, i8* %7)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @WriteBytes(%struct._IO_FILE* %8, i8* %9, i32 8)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @WriteIeeeExtendedLowHigh(%struct._IO_FILE*, double) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %allocaVec = alloca <2 x double>, align 16
  %4 = alloca double, align 8
  %5 = alloca [10 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store double %1, double* %4, align 8
  %6 = load double, double* %4, align 8
  %7 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @ConvertToIeeeExtended(double %6, i8* %7)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @WriteBytesSwapped(%struct._IO_FILE* %8, i8* %9, i32 10)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @WriteIeeeExtendedHighLow(%struct._IO_FILE*, double) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %allocaVec = alloca <2 x double>, align 16
  %4 = alloca double, align 8
  %5 = alloca [10 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store double %1, double* %4, align 8
  %6 = load double, double* %4, align 8
  %7 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @ConvertToIeeeExtended(double %6, i8* %7)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @WriteBytes(%struct._IO_FILE* %8, i8* %9, i32 10)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @L3psycho_anal(%struct.lame_global_flags*, i16**, i32, double*, double*, double*, [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]*, double*, double*, i32*) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %Recovery = alloca double, align 8
  %allocaVec76 = alloca <2 x double>, align 16
  %Recovery1 = alloca double, align 8
  %allocaVec77 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec78 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec79 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec80 = alloca <2 x double>, align 16
  %Recovery5 = alloca double, align 8
  %allocaVec81 = alloca <2 x double>, align 16
  %Recovery6 = alloca double, align 8
  %allocaVec82 = alloca <4 x float>, align 16
  %Recovery7 = alloca float, align 4
  %allocaVec83 = alloca <4 x float>, align 16
  %Recovery8 = alloca float, align 4
  %allocaVec84 = alloca <4 x float>, align 16
  %Recovery9 = alloca float, align 4
  %allocaVec85 = alloca <4 x float>, align 16
  %Recovery10 = alloca float, align 4
  %allocaVec86 = alloca <4 x float>, align 16
  %Recovery11 = alloca float, align 4
  %allocaVec87 = alloca <2 x double>, align 16
  %Recovery12 = alloca double, align 8
  %allocaVec88 = alloca <2 x double>, align 16
  %Recovery13 = alloca double, align 8
  %allocaVec89 = alloca <4 x i32>, align 16
  %Recovery14 = alloca i32, align 4
  %allocaVec90 = alloca <4 x i32>, align 16
  %Recovery15 = alloca i32, align 4
  %allocaVec91 = alloca <2 x double>, align 16
  %Recovery16 = alloca double, align 8
  %allocaVec92 = alloca <2 x double>, align 16
  %Recovery17 = alloca double, align 8
  %allocaVec93 = alloca <4 x float>, align 16
  %Recovery18 = alloca float, align 4
  %allocaVec94 = alloca <4 x float>, align 16
  %Recovery19 = alloca float, align 4
  %allocaVec95 = alloca <4 x float>, align 16
  %Recovery20 = alloca float, align 4
  %allocaVec96 = alloca <2 x double>, align 16
  %Recovery21 = alloca double, align 8
  %allocaVec97 = alloca <2 x double>, align 16
  %Recovery22 = alloca double, align 8
  %allocaVec98 = alloca <4 x i32>, align 16
  %Recovery23 = alloca i32, align 4
  %allocaVec99 = alloca <4 x float>, align 16
  %Recovery24 = alloca float, align 4
  %allocaVec100 = alloca <4 x i32>, align 16
  %Recovery25 = alloca i32, align 4
  %allocaVec101 = alloca <2 x double>, align 16
  %Recovery26 = alloca double, align 8
  %allocaVec102 = alloca <4 x i32>, align 16
  %Recovery27 = alloca i32, align 4
  %allocaVec103 = alloca <2 x double>, align 16
  %Recovery28 = alloca double, align 8
  %allocaVec104 = alloca <2 x double>, align 16
  %Recovery29 = alloca double, align 8
  %allocaVec105 = alloca <4 x i32>, align 16
  %Recovery30 = alloca i32, align 4
  %allocaVec106 = alloca <2 x double>, align 16
  %Recovery31 = alloca double, align 8
  %allocaVec107 = alloca <2 x double>, align 16
  %Recovery32 = alloca double, align 8
  %allocaVec108 = alloca <2 x double>, align 16
  %Recovery33 = alloca double, align 8
  %allocaVec109 = alloca <2 x double>, align 16
  %Recovery34 = alloca double, align 8
  %allocaVec110 = alloca <2 x double>, align 16
  %Recovery35 = alloca double, align 8
  %allocaVec111 = alloca <4 x i32>, align 16
  %Recovery36 = alloca i32, align 4
  %allocaVec112 = alloca <4 x i32>, align 16
  %Recovery37 = alloca i32, align 4
  %allocaVec113 = alloca <2 x double>, align 16
  %Recovery38 = alloca double, align 8
  %allocaVec114 = alloca <4 x i32>, align 16
  %Recovery39 = alloca i32, align 4
  %allocaVec115 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec116 = alloca <2 x double>, align 16
  %CastInst40 = alloca double, align 4
  %CastInstVec41 = alloca <2 x double>, align 16
  %allocaVec117 = alloca <2 x double>, align 16
  %CastInst42 = alloca double, align 4
  %CastInstVec43 = alloca <2 x double>, align 16
  %allocaVec118 = alloca <2 x double>, align 16
  %CastInst44 = alloca double, align 4
  %CastInstVec45 = alloca <2 x double>, align 16
  %allocaVec119 = alloca <2 x double>, align 16
  %CastInst46 = alloca double, align 4
  %CastInstVec47 = alloca <2 x double>, align 16
  %allocaVec120 = alloca <2 x double>, align 16
  %CastInst48 = alloca double, align 4
  %CastInstVec49 = alloca <2 x double>, align 16
  %allocaVec121 = alloca <2 x double>, align 16
  %CastInst50 = alloca double, align 4
  %CastInstVec51 = alloca <2 x double>, align 16
  %allocaVec122 = alloca <2 x double>, align 16
  %CastInst52 = alloca double, align 4
  %CastInstVec53 = alloca <2 x double>, align 16
  %allocaVec123 = alloca <2 x double>, align 16
  %CastInst54 = alloca double, align 4
  %CastInstVec55 = alloca <2 x double>, align 16
  %allocaVec124 = alloca <2 x double>, align 16
  %CastInst56 = alloca double, align 4
  %CastInstVec57 = alloca <2 x double>, align 16
  %allocaVec125 = alloca <2 x double>, align 16
  %CastInst58 = alloca double, align 4
  %CastInstVec59 = alloca <2 x double>, align 16
  %allocaVec126 = alloca <2 x double>, align 16
  %CastInst60 = alloca double, align 4
  %CastInstVec61 = alloca <2 x double>, align 16
  %allocaVec127 = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %allocaVec128 = alloca <2 x double>, align 16
  %CallInst62 = alloca double, align 4
  %CallInstVec63 = alloca <2 x double>, align 16
  %allocaVec129 = alloca <2 x double>, align 16
  %CallInst64 = alloca double, align 4
  %CallInstVec65 = alloca <2 x double>, align 16
  %allocaVec130 = alloca <2 x double>, align 16
  %CallInst66 = alloca double, align 4
  %CallInstVec67 = alloca <2 x double>, align 16
  %allocaVec131 = alloca <2 x double>, align 16
  %CallInst68 = alloca double, align 4
  %CallInstVec69 = alloca <2 x double>, align 16
  %allocaVec132 = alloca <2 x double>, align 16
  %CallInst70 = alloca double, align 4
  %CallInstVec71 = alloca <2 x double>, align 16
  %allocaVec133 = alloca <2 x double>, align 16
  %CallInst72 = alloca double, align 4
  %CallInstVec73 = alloca <2 x double>, align 16
  %allocaVec134 = alloca <2 x double>, align 16
  %CallInst74 = alloca double, align 4
  %CallInstVec75 = alloca <2 x double>, align 16
  %12 = alloca %struct.lame_global_flags*, align 4
  %13 = alloca i16**, align 4
  %allocaVec135 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  %15 = alloca double*, align 4
  %16 = alloca double*, align 4
  %17 = alloca double*, align 4
  %18 = alloca [2 x %struct.III_psy_ratio]*, align 4
  %19 = alloca [2 x %struct.III_psy_ratio]*, align 4
  %20 = alloca double*, align 4
  %21 = alloca double*, align 4
  %22 = alloca i32*, align 4
  %23 = alloca [1024 x float]*, align 4
  %24 = alloca [3 x [256 x float]]*, align 4
  %25 = alloca [4 x float], align 4
  %allocaVec136 = alloca <2 x double>, align 16
  %26 = alloca double, align 8
  %allocaVec137 = alloca <2 x double>, align 16
  %27 = alloca double, align 8
  %28 = alloca [2 x i32], align 4
  %29 = alloca [2 x i32], align 4
  %allocaVec138 = alloca <4 x i32>, align 16
  %30 = alloca i32, align 4
  %allocaVec139 = alloca <4 x i32>, align 16
  %31 = alloca i32, align 4
  %allocaVec140 = alloca <4 x i32>, align 16
  %32 = alloca i32, align 4
  %allocaVec141 = alloca <4 x i32>, align 16
  %33 = alloca i32, align 4
  %allocaVec142 = alloca <4 x i32>, align 16
  %34 = alloca i32, align 4
  %allocaVec143 = alloca <4 x i32>, align 16
  %35 = alloca i32, align 4
  %allocaVec144 = alloca <4 x i32>, align 16
  %36 = alloca i32, align 4
  %allocaVec145 = alloca <4 x i32>, align 16
  %37 = alloca i32, align 4
  %allocaVec146 = alloca <4 x float>, align 16
  %38 = alloca float, align 4
  %39 = alloca [63 x double], align 8
  %allocaVec147 = alloca <2 x double>, align 16
  %40 = alloca double, align 8
  %allocaVec148 = alloca <2 x double>, align 16
  %41 = alloca double, align 8
  %allocaVec149 = alloca <2 x double>, align 16
  %42 = alloca double, align 8
  %allocaVec150 = alloca <2 x double>, align 16
  %43 = alloca double, align 8
  %allocaVec151 = alloca <4 x float>, align 16
  %44 = alloca float, align 4
  %allocaVec152 = alloca <4 x float>, align 16
  %45 = alloca float, align 4
  %allocaVec153 = alloca <4 x float>, align 16
  %46 = alloca float, align 4
  %allocaVec154 = alloca <4 x float>, align 16
  %47 = alloca float, align 4
  %allocaVec155 = alloca <4 x float>, align 16
  %48 = alloca float, align 4
  %allocaVec156 = alloca <4 x float>, align 16
  %49 = alloca float, align 4
  %allocaVec157 = alloca <4 x float>, align 16
  %50 = alloca float, align 4
  %allocaVec158 = alloca <4 x float>, align 16
  %51 = alloca float, align 4
  %allocaVec159 = alloca <4 x float>, align 16
  %52 = alloca float, align 4
  %allocaVec160 = alloca <4 x float>, align 16
  %53 = alloca float, align 4
  %allocaVec161 = alloca <4 x float>, align 16
  %54 = alloca float, align 4
  %allocaVec162 = alloca <4 x float>, align 16
  %55 = alloca float, align 4
  %allocaVec163 = alloca <4 x float>, align 16
  %56 = alloca float, align 4
  %allocaVec164 = alloca <4 x float>, align 16
  %57 = alloca float, align 4
  %allocaVec165 = alloca <4 x float>, align 16
  %58 = alloca float, align 4
  %allocaVec166 = alloca <4 x float>, align 16
  %59 = alloca float, align 4
  %allocaVec167 = alloca <4 x float>, align 16
  %60 = alloca float, align 4
  %allocaVec168 = alloca <4 x float>, align 16
  %61 = alloca float, align 4
  %allocaVec169 = alloca <4 x float>, align 16
  %62 = alloca float, align 4
  %allocaVec170 = alloca <4 x float>, align 16
  %63 = alloca float, align 4
  %allocaVec171 = alloca <4 x float>, align 16
  %64 = alloca float, align 4
  %allocaVec172 = alloca <4 x float>, align 16
  %65 = alloca float, align 4
  %allocaVec173 = alloca <4 x float>, align 16
  %66 = alloca float, align 4
  %allocaVec174 = alloca <4 x float>, align 16
  %67 = alloca float, align 4
  %allocaVec175 = alloca <4 x float>, align 16
  %68 = alloca float, align 4
  %allocaVec176 = alloca <4 x float>, align 16
  %69 = alloca float, align 4
  %allocaVec177 = alloca <4 x float>, align 16
  %70 = alloca float, align 4
  %allocaVec178 = alloca <4 x float>, align 16
  %71 = alloca float, align 4
  %allocaVec179 = alloca <4 x float>, align 16
  %72 = alloca float, align 4
  %allocaVec180 = alloca <4 x float>, align 16
  %73 = alloca float, align 4
  %allocaVec181 = alloca <4 x float>, align 16
  %74 = alloca float, align 4
  %allocaVec182 = alloca <4 x float>, align 16
  %75 = alloca float, align 4
  %allocaVec183 = alloca <4 x float>, align 16
  %76 = alloca float, align 4
  %allocaVec184 = alloca <4 x float>, align 16
  %77 = alloca float, align 4
  %allocaVec185 = alloca <4 x float>, align 16
  %78 = alloca float, align 4
  %allocaVec186 = alloca <4 x float>, align 16
  %79 = alloca float, align 4
  %allocaVec187 = alloca <4 x float>, align 16
  %80 = alloca float, align 4
  %allocaVec188 = alloca <4 x float>, align 16
  %81 = alloca float, align 4
  %allocaVec189 = alloca <2 x double>, align 16
  %82 = alloca double, align 8
  %allocaVec190 = alloca <2 x double>, align 16
  %83 = alloca double, align 8
  %allocaVec191 = alloca <4 x i32>, align 16
  %84 = alloca i32, align 4
  %allocaVec192 = alloca <4 x i32>, align 16
  %85 = alloca i32, align 4
  %allocaVec193 = alloca <2 x double>, align 16
  %86 = alloca double, align 8
  %allocaVec194 = alloca <2 x double>, align 16
  %87 = alloca double, align 8
  %allocaVec195 = alloca <2 x double>, align 16
  %88 = alloca double, align 8
  %allocaVec196 = alloca <2 x double>, align 16
  %89 = alloca double, align 8
  %allocaVec197 = alloca <2 x double>, align 16
  %90 = alloca double, align 8
  %allocaVec198 = alloca <4 x float>, align 16
  %91 = alloca float, align 4
  %allocaVec199 = alloca <4 x float>, align 16
  %92 = alloca float, align 4
  %allocaVec200 = alloca <4 x float>, align 16
  %93 = alloca float, align 4
  %allocaVec201 = alloca <4 x float>, align 16
  %94 = alloca float, align 4
  %allocaVec202 = alloca <4 x float>, align 16
  %95 = alloca float, align 4
  %allocaVec203 = alloca <2 x double>, align 16
  %96 = alloca double, align 8
  %allocaVec204 = alloca <2 x double>, align 16
  %97 = alloca double, align 8
  %allocaVec205 = alloca <4 x i32>, align 16
  %98 = alloca i32, align 4
  %allocaVec206 = alloca <4 x float>, align 16
  %99 = alloca float, align 4
  %allocaVec207 = alloca <2 x double>, align 16
  %100 = alloca double, align 8
  %allocaVec208 = alloca <2 x double>, align 16
  %101 = alloca double, align 8
  %allocaVec209 = alloca <2 x double>, align 16
  %102 = alloca double, align 8
  %allocaVec210 = alloca <2 x double>, align 16
  %103 = alloca double, align 8
  %allocaVec211 = alloca <2 x double>, align 16
  %104 = alloca double, align 8
  %allocaVec212 = alloca <2 x double>, align 16
  %105 = alloca double, align 8
  %allocaVec213 = alloca <4 x i32>, align 16
  %106 = alloca i32, align 4
  %allocaVec214 = alloca <4 x i32>, align 16
  %107 = alloca i32, align 4
  %allocaVec215 = alloca <2 x double>, align 16
  %108 = alloca double, align 8
  %allocaVec216 = alloca <2 x double>, align 16
  %109 = alloca double, align 8
  %allocaVec217 = alloca <2 x double>, align 16
  %110 = alloca double, align 8
  %allocaVec218 = alloca <2 x double>, align 16
  %111 = alloca double, align 8
  %allocaVec219 = alloca <2 x double>, align 16
  %112 = alloca double, align 8
  %allocaVec220 = alloca <4 x i32>, align 16
  %113 = alloca i32, align 4
  %allocaVec221 = alloca <4 x float>, align 16
  %114 = alloca float, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %12, align 4
  store i16** %1, i16*** %13, align 4
  store i32 %2, i32* %14, align 4
  store double* %3, double** %15, align 4
  store double* %4, double** %16, align 4
  store double* %5, double** %17, align 4
  store [2 x %struct.III_psy_ratio]* %6, [2 x %struct.III_psy_ratio]** %18, align 4
  store [2 x %struct.III_psy_ratio]* %7, [2 x %struct.III_psy_ratio]** %19, align 4
  store double* %8, double** %20, align 4
  store double* %9, double** %21, align 4
  store i32* %10, i32** %22, align 4
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec136
  store double 0.000000e+00, double* %26, align 8
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec137
  store double 0.000000e+00, double* %27, align 8
  %115 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %116 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %115, i32 0, i32 39
  %117 = load i32, i32* %116, align 4
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %582

; <label>:119:                                    ; preds = %11
  %120 = load i32, i32* %14, align 4
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %582

; <label>:122:                                    ; preds = %119
  store i32 3, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 0), align 4
  store i32 3, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 1), align 4
  %123 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %124 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %123, i32 0, i32 3
  %125 = load i32, i32* %124, align 4
  store i32 %125, i32* %33, align 4
  %126 = load i32, i32* %33, align 4
  switch i32 %126, label %133 [
    i32 32000, label %127
    i32 44100, label %128
    i32 48000, label %129
    i32 16000, label %130
    i32 22050, label %131
    i32 24000, label %132
  ]

; <label>:127:                                    ; preds = %122
  br label %137

; <label>:128:                                    ; preds = %122
  br label %137

; <label>:129:                                    ; preds = %122
  br label %137

; <label>:130:                                    ; preds = %122
  br label %137

; <label>:131:                                    ; preds = %122
  br label %137

; <label>:132:                                    ; preds = %122
  br label %137

; <label>:133:                                    ; preds = %122
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %135 = load i32, i32* %33, align 4
  %136 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %134, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.205, i32 0, i32 0), i32 %135)
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:137:                                    ; preds = %132, %131, %130, %129, %128, %127
  call void @llvm.memset.p0i8.i32(i8* bitcast ([4 x [2 x [513 x float]]]* @L3psycho_anal.rx_sav to i8*), i8 0, i32 16416, i32 4, i1 false)
  call void @llvm.memset.p0i8.i32(i8* bitcast ([4 x [2 x [513 x float]]]* @L3psycho_anal.ax_sav to i8*), i8 0, i32 16416, i32 4, i1 false)
  call void @llvm.memset.p0i8.i32(i8* bitcast ([4 x [2 x [513 x float]]]* @L3psycho_anal.bx_sav to i8*), i8 0, i32 16416, i32 4, i1 false)
  call void @llvm.memset.p0i8.i32(i8* bitcast ([4 x %struct.III_psy_xmin]* @L3psycho_anal.en to i8*), i8 0, i32 1952, i32 8, i1 false)
  call void @llvm.memset.p0i8.i32(i8* bitcast ([4 x %struct.III_psy_xmin]* @L3psycho_anal.thm to i8*), i8 0, i32 1952, i32 8, i1 false)
  store i32 6, i32* @L3psycho_anal.cw_lower_index, align 4
  %138 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %139 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %138, i32 0, i32 35
  %140 = load float, float* %139, align 4
  %141 = fcmp ogt float %140, 0.000000e+00
  br i1 %141, label %142, label %146

; <label>:142:                                    ; preds = %137
  %143 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %144 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %143, i32 0, i32 35
  %145 = load float, float* %144, align 4
  store float %145, float* %38, align 4
  br label %147

; <label>:146:                                    ; preds = %137
  store <4 x float> <float 0x4021BE4F80000000, float 0x4021BE4F80000000, float 0x4021BE4F80000000, float 0x4021BE4F80000000>, <4 x float>* %allocaVec146
  store float 0x4021BE4F80000000, float* %38, align 4
  br label %147

; <label>:147:                                    ; preds = %146, %142
  %148 = load float, float* %38, align 4
  %149 = fpext float %148 to double
  store double %149, double* %CastInst
  %150 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %150, i32 0
  %insertCast222 = insertelement <2 x double> %insertCast, double %150, i32 1
  store <2 x double> %insertCast222, <2 x double>* %CastInstVec, align 4
  %151 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %Vop = fmul <2 x double> %151, <double 1.000000e+03, double 1.000000e+03>
  %152 = fmul double %149, 1.000000e+03
  %Vop223 = fmul <2 x double> %Vop, <double 1.024000e+03, double 1.024000e+03>
  %153 = fmul double %152, 1.024000e+03
  %154 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %155 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %154, i32 0, i32 3
  %156 = load i32, i32* %155, align 4
  %157 = sitofp i32 %156 to double
  store double %157, double* %CastInst40
  %158 = load double, double* %CastInst40, align 4
  %insertCast224 = insertelement <2 x double> undef, double %158, i32 0
  %insertCast225 = insertelement <2 x double> %insertCast224, double %158, i32 1
  store <2 x double> %insertCast225, <2 x double>* %CastInstVec41, align 4
  %159 = load <2 x double>, <2 x double>* %CastInstVec41, align 4
  %Vop226 = fdiv <2 x double> %Vop223, %159
  %160 = fdiv double %153, %157
  %161 = fptosi double %160 to i32
  store i32 %161, i32* @L3psycho_anal.cw_upper_index, align 4
  %162 = load i32, i32* @L3psycho_anal.cw_upper_index, align 4
  %163 = icmp slt i32 509, %162
  br i1 %163, label %164, label %165

; <label>:164:                                    ; preds = %147
  br label %167

; <label>:165:                                    ; preds = %147
  %166 = load i32, i32* @L3psycho_anal.cw_upper_index, align 4
  br label %167

; <label>:167:                                    ; preds = %165, %164
  %168 = phi i32 [ 509, %164 ], [ %166, %165 ]
  store i32 %168, i32* @L3psycho_anal.cw_upper_index, align 4
  %169 = load i32, i32* @L3psycho_anal.cw_upper_index, align 4
  %170 = icmp sgt i32 6, %169
  br i1 %170, label %171, label %172

; <label>:171:                                    ; preds = %167
  br label %174

; <label>:172:                                    ; preds = %167
  %173 = load i32, i32* @L3psycho_anal.cw_upper_index, align 4
  br label %174

; <label>:174:                                    ; preds = %172, %171
  %175 = phi i32 [ 6, %171 ], [ %173, %172 ]
  store i32 %175, i32* @L3psycho_anal.cw_upper_index, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec142
  store i32 0, i32* %34, align 4
  br label %176

; <label>:176:                                    ; preds = %182, %174
  %177 = load i32, i32* %34, align 4
  %178 = icmp slt i32 %177, 513
  br i1 %178, label %179, label %186

; <label>:179:                                    ; preds = %176
  %180 = load i32, i32* %34, align 4
  %181 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i32 0, i32 %180
  store float 0x3FD99999A0000000, float* %181, align 4
  br label %182

; <label>:182:                                    ; preds = %179
  %183 = load i32, i32* %34, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %183, i32 0
  %insertElmt227 = insertelement <4 x i32> %insertElmt, i32 %183, i32 1
  %insertElmt228 = insertelement <4 x i32> %insertElmt227, i32 %183, i32 2
  %insertElmt229 = insertelement <4 x i32> %insertElmt228, i32 %183, i32 3
  store <4 x i32> %insertElmt229, <4 x i32>* %allocaVec142, align 16
  %184 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop230 = add <4 x i32> %184, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop230, <4 x i32>* %allocaVec142
  %185 = add nsw i32 %183, 1
  store i32 %185, i32* %34, align 4
  br label %176

; <label>:186:                                    ; preds = %176
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec144
  store i32 0, i32* %36, align 4
  br label %187

; <label>:187:                                    ; preds = %213, %186
  %188 = load i32, i32* %36, align 4
  %189 = icmp slt i32 %188, 12
  br i1 %189, label %190, label %217

; <label>:190:                                    ; preds = %187
  %191 = load i32, i32* %36, align 4
  %192 = sitofp i32 %191 to double
  store double %192, double* %CastInst42
  %193 = load double, double* %CastInst42, align 4
  %insertCast231 = insertelement <2 x double> undef, double %193, i32 0
  %insertCast232 = insertelement <2 x double> %insertCast231, double %193, i32 1
  store <2 x double> %insertCast232, <2 x double>* %CastInstVec43, align 4
  %194 = load <2 x double>, <2 x double>* %CastInstVec43, align 4
  %Vop233 = fmul <2 x double> <double 0x400921FB54442D18, double 0x400921FB54442D18>, %194
  %195 = fmul double 0x400921FB54442D18, %192
  %Vop234 = fdiv <2 x double> %Vop233, <double 1.200000e+01, double 1.200000e+01>
  %196 = fdiv double %195, 1.200000e+01
  %197 = call arm_aapcscc double @cos(double %196) #7
  store double %197, double* %CallInst
  %198 = load double, double* %CallInst, align 4
  %insertCall = insertelement <2 x double> undef, double %198, i32 0
  %insertCall235 = insertelement <2 x double> %insertCall, double %198, i32 1
  store <2 x double> %insertCall235, <2 x double>* %CallInstVec, align 4
  %199 = load <2 x double>, <2 x double>* %CallInstVec, align 4
  %Vop236 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %199
  %200 = fsub double 1.000000e+00, %197
  %Vop237 = fmul <2 x double> <double 1.250000e+00, double 1.250000e+00>, %Vop236
  %201 = fmul double 1.250000e+00, %200
  %Vop238 = fsub <2 x double> %Vop237, <double 2.500000e+00, double 2.500000e+00>
  store <2 x double> %Vop238, <2 x double>* %allocaVec147
  %202 = load <2 x double>, <2 x double>* %allocaVec147, align 4
  %extractE = extractelement <2 x double> %202, i64 0
  %extractE239 = extractelement <2 x double> %202, i64 1
  %sum = fadd double %extractE, %extractE239
  %sum240 = fadd double %sum, %extractE239
  %203 = fsub double %201, 2.500000e+00
  %Fmul = fmul double %203, 3.000000e+00
  store double %203, double* %Recovery
  %Fcmp = fcmp une double %sum240, %Fmul
  br i1 %Fcmp, label %204, label %208

; <label>:204:                                    ; preds = %190
  %remThree = fdiv double %sum240, %extractE
  %FcmpThree = fcmp une double %remThree, 3.000000e+00
  br i1 %FcmpThree, label %205, label %206

; <label>:205:                                    ; preds = %204
  store double %203, double* %Recovery, align 8
  br label %207

; <label>:206:                                    ; preds = %204
  store double %extractE, double* %Recovery, align 8
  br label %207

; <label>:207:                                    ; preds = %206, %205
  br label %208

; <label>:208:                                    ; preds = %190, %207
  %ReplaceInst = load double, double* %Recovery, align 8
  store double %ReplaceInst, double* %40, align 8
  %209 = load double, double* %40, align 8
  %210 = call arm_aapcscc double @pow(double 1.000000e+01, double %209) #7
  %211 = load i32, i32* %36, align 4
  %212 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.mld_s, i32 0, i32 %211
  store double %210, double* %212, align 8
  br label %213

; <label>:213:                                    ; preds = %208
  %214 = load i32, i32* %36, align 4
  %insertElmt241 = insertelement <4 x i32> undef, i32 %214, i32 0
  %insertElmt242 = insertelement <4 x i32> %insertElmt241, i32 %214, i32 1
  %insertElmt243 = insertelement <4 x i32> %insertElmt242, i32 %214, i32 2
  %insertElmt244 = insertelement <4 x i32> %insertElmt243, i32 %214, i32 3
  store <4 x i32> %insertElmt244, <4 x i32>* %allocaVec144, align 16
  %215 = load <4 x i32>, <4 x i32>* %allocaVec144, align 16
  %Vop245 = add <4 x i32> %215, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop245, <4 x i32>* %allocaVec144
  %216 = add nsw i32 %214, 1
  store i32 %216, i32* %36, align 4
  br label %187

; <label>:217:                                    ; preds = %187
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec144
  store i32 0, i32* %36, align 4
  br label %218

; <label>:218:                                    ; preds = %244, %217
  %219 = load i32, i32* %36, align 4
  %220 = icmp slt i32 %219, 21
  br i1 %220, label %221, label %248

; <label>:221:                                    ; preds = %218
  %222 = load i32, i32* %36, align 4
  %223 = sitofp i32 %222 to double
  store double %223, double* %CastInst44
  %224 = load double, double* %CastInst44, align 4
  %insertCast246 = insertelement <2 x double> undef, double %224, i32 0
  %insertCast247 = insertelement <2 x double> %insertCast246, double %224, i32 1
  store <2 x double> %insertCast247, <2 x double>* %CastInstVec45, align 4
  %225 = load <2 x double>, <2 x double>* %CastInstVec45, align 4
  %Vop248 = fmul <2 x double> <double 0x400921FB54442D18, double 0x400921FB54442D18>, %225
  %226 = fmul double 0x400921FB54442D18, %223
  %Vop249 = fdiv <2 x double> %Vop248, <double 2.100000e+01, double 2.100000e+01>
  %227 = fdiv double %226, 2.100000e+01
  %228 = call arm_aapcscc double @cos(double %227) #7
  store double %228, double* %CallInst62
  %229 = load double, double* %CallInst62, align 4
  %insertCall250 = insertelement <2 x double> undef, double %229, i32 0
  %insertCall251 = insertelement <2 x double> %insertCall250, double %229, i32 1
  store <2 x double> %insertCall251, <2 x double>* %CallInstVec63, align 4
  %230 = load <2 x double>, <2 x double>* %CallInstVec63, align 4
  %Vop252 = fsub <2 x double> <double 1.000000e+00, double 1.000000e+00>, %230
  %231 = fsub double 1.000000e+00, %228
  %Vop253 = fmul <2 x double> <double 1.250000e+00, double 1.250000e+00>, %Vop252
  %232 = fmul double 1.250000e+00, %231
  %Vop254 = fsub <2 x double> %Vop253, <double 2.500000e+00, double 2.500000e+00>
  store <2 x double> %Vop254, <2 x double>* %allocaVec148
  %233 = load <2 x double>, <2 x double>* %allocaVec148, align 4
  %extractE256 = extractelement <2 x double> %233, i64 0
  %extractE257 = extractelement <2 x double> %233, i64 1
  %sum258 = fadd double %extractE256, %extractE257
  %sum259 = fadd double %sum258, %extractE257
  %234 = fsub double %232, 2.500000e+00
  %Fmul255 = fmul double %234, 3.000000e+00
  store double %234, double* %Recovery1
  %Fcmp260 = fcmp une double %sum259, %Fmul255
  br i1 %Fcmp260, label %235, label %239

; <label>:235:                                    ; preds = %221
  %remThree893 = fdiv double %sum259, %extractE256
  %FcmpThree894 = fcmp une double %remThree893, 3.000000e+00
  br i1 %FcmpThree894, label %236, label %237

; <label>:236:                                    ; preds = %235
  store double %234, double* %Recovery1, align 8
  br label %238

; <label>:237:                                    ; preds = %235
  store double %extractE256, double* %Recovery1, align 8
  br label %238

; <label>:238:                                    ; preds = %237, %236
  br label %239

; <label>:239:                                    ; preds = %221, %238
  %ReplaceInst927 = load double, double* %Recovery1, align 8
  store double %ReplaceInst927, double* %41, align 8
  %240 = load double, double* %41, align 8
  %241 = call arm_aapcscc double @pow(double 1.000000e+01, double %240) #7
  %242 = load i32, i32* %36, align 4
  %243 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.mld_l, i32 0, i32 %242
  store double %241, double* %243, align 8
  br label %244

; <label>:244:                                    ; preds = %239
  %245 = load i32, i32* %36, align 4
  %246 = load <4 x i32>, <4 x i32>* %allocaVec144, align 16
  %Vop261 = add <4 x i32> %246, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop261, <4 x i32>* %allocaVec144
  %247 = add nsw i32 %245, 1
  store i32 %247, i32* %36, align 4
  br label %218

; <label>:248:                                    ; preds = %218
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec141
  store i32 0, i32* %33, align 4
  br label %249

; <label>:249:                                    ; preds = %255, %248
  %250 = load i32, i32* %33, align 4
  %251 = icmp slt i32 %250, 513
  br i1 %251, label %252, label %259

; <label>:252:                                    ; preds = %249
  %253 = load i32, i32* %33, align 4
  %254 = getelementptr inbounds [513 x i32], [513 x i32]* @L3psycho_anal.partition_l, i32 0, i32 %253
  store i32 -1, i32* %254, align 4
  br label %255

; <label>:255:                                    ; preds = %252
  %256 = load i32, i32* %33, align 4
  %insertElmt262 = insertelement <4 x i32> undef, i32 %256, i32 0
  %insertElmt263 = insertelement <4 x i32> %insertElmt262, i32 %256, i32 1
  %insertElmt264 = insertelement <4 x i32> %insertElmt263, i32 %256, i32 2
  %insertElmt265 = insertelement <4 x i32> %insertElmt264, i32 %256, i32 3
  store <4 x i32> %insertElmt265, <4 x i32>* %allocaVec141, align 16
  %257 = load <4 x i32>, <4 x i32>* %allocaVec141, align 16
  %Vop266 = add <4 x i32> %257, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop266, <4 x i32>* %allocaVec141
  %258 = add nsw i32 %256, 1
  store i32 %258, i32* %33, align 4
  br label %249

; <label>:259:                                    ; preds = %249
  %260 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %261 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %260, i32 0, i32 3
  %262 = load i32, i32* %261, align 4
  %263 = sitofp i32 %262 to double
  %264 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 0
  call arm_aapcscc void @L3para_read(double %263, i32* getelementptr inbounds ([63 x i32], [63 x i32]* @L3psycho_anal.numlines_l, i32 0, i32 0), i32* getelementptr inbounds ([63 x i32], [63 x i32]* @L3psycho_anal.numlines_s, i32 0, i32 0), i32* getelementptr inbounds ([513 x i32], [513 x i32]* @L3psycho_anal.partition_l, i32 0, i32 0), double* getelementptr inbounds ([63 x double], [63 x double]* @L3psycho_anal.minval, i32 0, i32 0), double* getelementptr inbounds ([63 x double], [63 x double]* @L3psycho_anal.qthr_l, i32 0, i32 0), [64 x double]* getelementptr inbounds ([64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i32 0, i32 0), [64 x double]* getelementptr inbounds ([64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i32 0, i32 0), double* getelementptr inbounds ([63 x double], [63 x double]* @L3psycho_anal.qthr_s, i32 0, i32 0), double* %264, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @L3psycho_anal.bu_l, i32 0, i32 0), i32* getelementptr inbounds ([21 x i32], [21 x i32]* @L3psycho_anal.bo_l, i32 0, i32 0), double* getelementptr inbounds ([21 x double], [21 x double]* @L3psycho_anal.w1_l, i32 0, i32 0), double* getelementptr inbounds ([21 x double], [21 x double]* @L3psycho_anal.w2_l, i32 0, i32 0), i32* getelementptr inbounds ([12 x i32], [12 x i32]* @L3psycho_anal.bu_s, i32 0, i32 0), i32* getelementptr inbounds ([12 x i32], [12 x i32]* @L3psycho_anal.bo_s, i32 0, i32 0), double* getelementptr inbounds ([12 x double], [12 x double]* @L3psycho_anal.w1_s, i32 0, i32 0), double* getelementptr inbounds ([12 x double], [12 x double]* @L3psycho_anal.w2_s, i32 0, i32 0))
  store i32 0, i32* @L3psycho_anal.npart_l_orig, align 4
  store i32 0, i32* @L3psycho_anal.npart_s_orig, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec141
  store i32 0, i32* %33, align 4
  br label %265

; <label>:265:                                    ; preds = %279, %259
  %266 = load i32, i32* %33, align 4
  %267 = icmp slt i32 %266, 513
  br i1 %267, label %268, label %283

; <label>:268:                                    ; preds = %265
  %269 = load i32, i32* %33, align 4
  %270 = getelementptr inbounds [513 x i32], [513 x i32]* @L3psycho_anal.partition_l, i32 0, i32 %269
  %271 = load i32, i32* %270, align 4
  %272 = load i32, i32* @L3psycho_anal.npart_l_orig, align 4
  %273 = icmp sgt i32 %271, %272
  br i1 %273, label %274, label %278

; <label>:274:                                    ; preds = %268
  %275 = load i32, i32* %33, align 4
  %276 = getelementptr inbounds [513 x i32], [513 x i32]* @L3psycho_anal.partition_l, i32 0, i32 %275
  %277 = load i32, i32* %276, align 4
  store i32 %277, i32* @L3psycho_anal.npart_l_orig, align 4
  br label %278

; <label>:278:                                    ; preds = %274, %268
  br label %279

; <label>:279:                                    ; preds = %278
  %280 = load i32, i32* %33, align 4
  %281 = load <4 x i32>, <4 x i32>* %allocaVec141, align 16
  %Vop267 = add <4 x i32> %281, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop267, <4 x i32>* %allocaVec141
  %282 = add nsw i32 %280, 1
  store i32 %282, i32* %33, align 4
  br label %265

; <label>:283:                                    ; preds = %265
  %284 = load i32, i32* @L3psycho_anal.npart_l_orig, align 4
  %285 = add nsw i32 %284, 1
  store i32 %285, i32* @L3psycho_anal.npart_l_orig, align 4
  store i32 0, i32* %33, align 4
  br label %286

; <label>:286:                                    ; preds = %292, %283
  %287 = load i32, i32* %33, align 4
  %288 = getelementptr inbounds [63 x i32], [63 x i32]* @L3psycho_anal.numlines_s, i32 0, i32 %287
  %289 = load i32, i32* %288, align 4
  %290 = icmp sge i32 %289, 0
  br i1 %290, label %291, label %296

; <label>:291:                                    ; preds = %286
  br label %292

; <label>:292:                                    ; preds = %291
  %293 = load i32, i32* %33, align 4
  %294 = load <4 x i32>, <4 x i32>* %allocaVec141, align 16
  %Vop268 = add <4 x i32> %294, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop268, <4 x i32>* %allocaVec141
  %295 = add nsw i32 %293, 1
  store i32 %295, i32* %33, align 4
  br label %286

; <label>:296:                                    ; preds = %286
  %297 = load i32, i32* %33, align 4
  store i32 %297, i32* @L3psycho_anal.npart_s_orig, align 4
  %298 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @L3psycho_anal.bo_l, i32 0, i32 20), align 4
  %299 = add nsw i32 %298, 1
  store i32 %299, i32* @L3psycho_anal.npart_l, align 4
  %300 = load i32, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @L3psycho_anal.bo_s, i32 0, i32 11), align 4
  %301 = add nsw i32 %300, 1
  store i32 %301, i32* @L3psycho_anal.npart_s, align 4
  %302 = load i32, i32* @L3psycho_anal.npart_l, align 4
  %303 = load i32, i32* @L3psycho_anal.npart_l_orig, align 4
  %304 = icmp sgt i32 %302, %303
  br i1 %304, label %305, label %309

; <label>:305:                                    ; preds = %296
  %306 = load i32, i32* @L3psycho_anal.npart_l_orig, align 4
  store i32 %306, i32* @L3psycho_anal.npart_l, align 4
  %307 = load i32, i32* @L3psycho_anal.npart_l, align 4
  %308 = sub nsw i32 %307, 1
  store i32 %308, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @L3psycho_anal.bo_l, i32 0, i32 20), align 4
  store double 1.000000e+00, double* getelementptr inbounds ([21 x double], [21 x double]* @L3psycho_anal.w2_l, i32 0, i32 20), align 8
  br label %309

; <label>:309:                                    ; preds = %305, %296
  %310 = load i32, i32* @L3psycho_anal.npart_s, align 4
  %311 = load i32, i32* @L3psycho_anal.npart_s_orig, align 4
  %312 = icmp sgt i32 %310, %311
  br i1 %312, label %313, label %317

; <label>:313:                                    ; preds = %309
  %314 = load i32, i32* @L3psycho_anal.npart_s_orig, align 4
  store i32 %314, i32* @L3psycho_anal.npart_s, align 4
  %315 = load i32, i32* @L3psycho_anal.npart_s, align 4
  %316 = sub nsw i32 %315, 1
  store i32 %316, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @L3psycho_anal.bo_s, i32 0, i32 11), align 4
  store double 1.000000e+00, double* getelementptr inbounds ([12 x double], [12 x double]* @L3psycho_anal.w2_s, i32 0, i32 11), align 8
  br label %317

; <label>:317:                                    ; preds = %313, %309
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec141
  store i32 0, i32* %33, align 4
  br label %318

; <label>:318:                                    ; preds = %368, %317
  %319 = load i32, i32* %33, align 4
  %320 = load i32, i32* @L3psycho_anal.npart_l, align 4
  %321 = icmp slt i32 %319, %320
  br i1 %321, label %322, label %372

; <label>:322:                                    ; preds = %318
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec142
  store i32 0, i32* %34, align 4
  br label %323

; <label>:323:                                    ; preds = %336, %322
  %324 = load i32, i32* %34, align 4
  %325 = load i32, i32* @L3psycho_anal.npart_l_orig, align 4
  %326 = icmp slt i32 %324, %325
  br i1 %326, label %327, label %340

; <label>:327:                                    ; preds = %323
  %328 = load i32, i32* %33, align 4
  %329 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i32 0, i32 %328
  %330 = load i32, i32* %34, align 4
  %331 = getelementptr inbounds [64 x double], [64 x double]* %329, i32 0, i32 %330
  %332 = load double, double* %331, align 8
  %333 = fcmp une double %332, 0.000000e+00
  br i1 %333, label %334, label %335

; <label>:334:                                    ; preds = %327
  br label %340

; <label>:335:                                    ; preds = %327
  br label %336

; <label>:336:                                    ; preds = %335
  %337 = load i32, i32* %34, align 4
  %338 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop269 = add <4 x i32> %338, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop269, <4 x i32>* %allocaVec142
  %339 = add nsw i32 %337, 1
  store i32 %339, i32* %34, align 4
  br label %323

; <label>:340:                                    ; preds = %334, %323
  %341 = load i32, i32* %34, align 4
  %342 = load i32, i32* %33, align 4
  %343 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i32 0, i32 %342
  %344 = getelementptr inbounds [2 x i32], [2 x i32]* %343, i32 0, i32 0
  store i32 %341, i32* %344, align 4
  %345 = load i32, i32* @L3psycho_anal.npart_l_orig, align 4
  %346 = sub nsw i32 %345, 1
  store i32 %346, i32* %34, align 4
  br label %347

; <label>:347:                                    ; preds = %359, %340
  %348 = load i32, i32* %34, align 4
  %349 = icmp sgt i32 %348, 0
  br i1 %349, label %350, label %363

; <label>:350:                                    ; preds = %347
  %351 = load i32, i32* %33, align 4
  %352 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i32 0, i32 %351
  %353 = load i32, i32* %34, align 4
  %354 = getelementptr inbounds [64 x double], [64 x double]* %352, i32 0, i32 %353
  %355 = load double, double* %354, align 8
  %356 = fcmp une double %355, 0.000000e+00
  br i1 %356, label %357, label %358

; <label>:357:                                    ; preds = %350
  br label %363

; <label>:358:                                    ; preds = %350
  br label %359

; <label>:359:                                    ; preds = %358
  %360 = load i32, i32* %34, align 4
  %361 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop270 = add <4 x i32> %361, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop270, <4 x i32>* %allocaVec142
  %362 = add nsw i32 %360, -1
  store i32 %362, i32* %34, align 4
  br label %347

; <label>:363:                                    ; preds = %357, %347
  %364 = load i32, i32* %34, align 4
  %365 = load i32, i32* %33, align 4
  %366 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i32 0, i32 %365
  %367 = getelementptr inbounds [2 x i32], [2 x i32]* %366, i32 0, i32 1
  store i32 %364, i32* %367, align 4
  br label %368

; <label>:368:                                    ; preds = %363
  %369 = load i32, i32* %33, align 4
  %370 = load <4 x i32>, <4 x i32>* %allocaVec141, align 16
  %Vop271 = add <4 x i32> %370, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop271, <4 x i32>* %allocaVec141
  %371 = add nsw i32 %369, 1
  store i32 %371, i32* %33, align 4
  br label %318

; <label>:372:                                    ; preds = %318
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec141
  store i32 0, i32* %33, align 4
  br label %373

; <label>:373:                                    ; preds = %432, %372
  %374 = load i32, i32* %33, align 4
  %375 = load i32, i32* @L3psycho_anal.npart_s, align 4
  %376 = icmp slt i32 %374, %375
  br i1 %376, label %377, label %433

; <label>:377:                                    ; preds = %373
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec142
  store i32 0, i32* %34, align 4
  br label %378

; <label>:378:                                    ; preds = %391, %377
  %379 = load i32, i32* %34, align 4
  %380 = load i32, i32* @L3psycho_anal.npart_s_orig, align 4
  %381 = icmp slt i32 %379, %380
  br i1 %381, label %382, label %395

; <label>:382:                                    ; preds = %378
  %383 = load i32, i32* %33, align 4
  %384 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i32 0, i32 %383
  %385 = load i32, i32* %34, align 4
  %386 = getelementptr inbounds [64 x double], [64 x double]* %384, i32 0, i32 %385
  %387 = load double, double* %386, align 8
  %388 = fcmp une double %387, 0.000000e+00
  br i1 %388, label %389, label %390

; <label>:389:                                    ; preds = %382
  br label %395

; <label>:390:                                    ; preds = %382
  br label %391

; <label>:391:                                    ; preds = %390
  %392 = load i32, i32* %34, align 4
  %393 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop272 = add <4 x i32> %393, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop272, <4 x i32>* %allocaVec142
  %394 = add nsw i32 %392, 1
  store i32 %394, i32* %34, align 4
  br label %378

; <label>:395:                                    ; preds = %389, %378
  %396 = load i32, i32* %34, align 4
  %397 = load i32, i32* %33, align 4
  %398 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i32 0, i32 %397
  %399 = getelementptr inbounds [2 x i32], [2 x i32]* %398, i32 0, i32 0
  store i32 %396, i32* %399, align 4
  %400 = load i32, i32* @L3psycho_anal.npart_s_orig, align 4
  %401 = sub nsw i32 %400, 1
  store i32 %401, i32* %34, align 4
  br label %402

; <label>:402:                                    ; preds = %414, %395
  %403 = load i32, i32* %34, align 4
  %404 = icmp sgt i32 %403, 0
  br i1 %404, label %405, label %418

; <label>:405:                                    ; preds = %402
  %406 = load i32, i32* %33, align 4
  %407 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i32 0, i32 %406
  %408 = load i32, i32* %34, align 4
  %409 = getelementptr inbounds [64 x double], [64 x double]* %407, i32 0, i32 %408
  %410 = load double, double* %409, align 8
  %411 = fcmp une double %410, 0.000000e+00
  br i1 %411, label %412, label %413

; <label>:412:                                    ; preds = %405
  br label %418

; <label>:413:                                    ; preds = %405
  br label %414

; <label>:414:                                    ; preds = %413
  %415 = load i32, i32* %34, align 4
  %416 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop273 = add <4 x i32> %416, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop273, <4 x i32>* %allocaVec142
  %417 = add nsw i32 %415, -1
  store i32 %417, i32* %34, align 4
  br label %402

; <label>:418:                                    ; preds = %412, %402
  %419 = load i32, i32* %34, align 4
  %420 = load i32, i32* %33, align 4
  %421 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i32 0, i32 %420
  %422 = getelementptr inbounds [2 x i32], [2 x i32]* %421, i32 0, i32 1
  store i32 %419, i32* %422, align 4
  br label %423

; <label>:423:                                    ; preds = %418
  %424 = load i32, i32* %33, align 4
  %425 = load <4 x i32>, <4 x i32>* %allocaVec141, align 16
  %Vop274 = add <4 x i32> %425, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop274, <4 x i32>* %allocaVec141
  %426 = load <4 x i32>, <4 x i32>* %allocaVec141, align 4
  %extractE276 = extractelement <4 x i32> %426, i64 0
  %extractE277 = extractelement <4 x i32> %426, i64 1
  %extractE278 = extractelement <4 x i32> %426, i64 2
  %sum279 = add i32 %extractE276, %extractE277
  %sum280 = add i32 %sum279, %extractE278
  %427 = add nsw i32 %424, 1
  %Fmul275 = mul i32 %427, 3
  store i32 %427, i32* %Recovery4
  %Fcmp281 = icmp ne i32 %sum280, %Fmul275
  br i1 %Fcmp281, label %428, label %432

; <label>:428:                                    ; preds = %423
  %remThree895 = sdiv i32 %sum280, %extractE276
  %FcmpThree896 = icmp ne i32 %remThree895, 3
  br i1 %FcmpThree896, label %429, label %430

; <label>:429:                                    ; preds = %428
  store i32 %427, i32* %Recovery4, align 4
  br label %431

; <label>:430:                                    ; preds = %428
  store i32 %extractE276, i32* %Recovery4, align 4
  br label %431

; <label>:431:                                    ; preds = %430, %429
  br label %432

; <label>:432:                                    ; preds = %423, %431
  %ReplaceInst928 = load i32, i32* %Recovery4, align 4
  store i32 %ReplaceInst928, i32* %33, align 4
  br label %373

; <label>:433:                                    ; preds = %373
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec140
  store i32 0, i32* %32, align 4
  br label %434

; <label>:434:                                    ; preds = %492, %433
  %435 = load i32, i32* %32, align 4
  %436 = load i32, i32* @L3psycho_anal.npart_l, align 4
  %437 = icmp slt i32 %435, %436
  br i1 %437, label %438, label %496

; <label>:438:                                    ; preds = %434
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec149
  store double 0.000000e+00, double* %42, align 8
  %439 = load i32, i32* %32, align 4
  %440 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i32 0, i32 %439
  %441 = getelementptr inbounds [2 x i32], [2 x i32]* %440, i32 0, i32 0
  %442 = load i32, i32* %441, align 4
  store i32 %442, i32* %35, align 4
  br label %443

; <label>:443:                                    ; preds = %458, %438
  %444 = load i32, i32* %35, align 4
  %445 = load i32, i32* %32, align 4
  %446 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i32 0, i32 %445
  %447 = getelementptr inbounds [2 x i32], [2 x i32]* %446, i32 0, i32 1
  %448 = load i32, i32* %447, align 4
  %449 = icmp sle i32 %444, %448
  br i1 %449, label %450, label %462

; <label>:450:                                    ; preds = %443
  %451 = load i32, i32* %32, align 4
  %452 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i32 0, i32 %451
  %453 = load i32, i32* %35, align 4
  %454 = getelementptr inbounds [64 x double], [64 x double]* %452, i32 0, i32 %453
  %455 = load double, double* %454, align 8
  %456 = load double, double* %42, align 8
  %457 = fadd double %456, %455
  store double %457, double* %42, align 8
  br label %458

; <label>:458:                                    ; preds = %450
  %459 = load i32, i32* %35, align 4
  %insertElmt282 = insertelement <4 x i32> undef, i32 %459, i32 0
  %insertElmt283 = insertelement <4 x i32> %insertElmt282, i32 %459, i32 1
  %insertElmt284 = insertelement <4 x i32> %insertElmt283, i32 %459, i32 2
  %insertElmt285 = insertelement <4 x i32> %insertElmt284, i32 %459, i32 3
  store <4 x i32> %insertElmt285, <4 x i32>* %allocaVec143, align 16
  %460 = load <4 x i32>, <4 x i32>* %allocaVec143, align 16
  %Vop286 = add <4 x i32> %460, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop286, <4 x i32>* %allocaVec143
  %461 = add nsw i32 %459, 1
  store i32 %461, i32* %35, align 4
  br label %443

; <label>:462:                                    ; preds = %443
  %463 = load i32, i32* %32, align 4
  %464 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i32 0, i32 %463
  %465 = getelementptr inbounds [2 x i32], [2 x i32]* %464, i32 0, i32 0
  %466 = load i32, i32* %465, align 4
  store i32 %466, i32* %35, align 4
  br label %467

; <label>:467:                                    ; preds = %487, %462
  %468 = load i32, i32* %35, align 4
  %469 = load i32, i32* %32, align 4
  %470 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i32 0, i32 %469
  %471 = getelementptr inbounds [2 x i32], [2 x i32]* %470, i32 0, i32 1
  %472 = load i32, i32* %471, align 4
  %473 = icmp sle i32 %468, %472
  br i1 %473, label %474, label %491

; <label>:474:                                    ; preds = %467
  %475 = call arm_aapcscc double @exp(double 0xBFF61AD547A6661A) #7
  %476 = load double, double* %42, align 8
  %insertElmt287 = insertelement <2 x double> undef, double %476, i32 0
  %insertElmt288 = insertelement <2 x double> %insertElmt287, double %476, i32 1
  store <2 x double> %insertElmt288, <2 x double>* %allocaVec149, align 16
  store double %475, double* %CallInst64
  %477 = load double, double* %CallInst64, align 4
  %insertCall289 = insertelement <2 x double> undef, double %477, i32 0
  %insertCall290 = insertelement <2 x double> %insertCall289, double %477, i32 1
  store <2 x double> %insertCall290, <2 x double>* %CallInstVec65, align 4
  %478 = load <2 x double>, <2 x double>* %CallInstVec65, align 4
  %479 = load <2 x double>, <2 x double>* %allocaVec149, align 16
  %Vop291 = fdiv <2 x double> %478, %479
  %480 = fdiv double %475, %476
  %481 = load i32, i32* %32, align 4
  %482 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i32 0, i32 %481
  %483 = load i32, i32* %35, align 4
  %484 = getelementptr inbounds [64 x double], [64 x double]* %482, i32 0, i32 %483
  %485 = load double, double* %484, align 8
  %486 = fmul double %485, %480
  store double %486, double* %484, align 8
  br label %487

; <label>:487:                                    ; preds = %474
  %488 = load i32, i32* %35, align 4
  %489 = load <4 x i32>, <4 x i32>* %allocaVec143, align 16
  %Vop292 = add <4 x i32> %489, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop292, <4 x i32>* %allocaVec143
  %490 = add nsw i32 %488, 1
  store i32 %490, i32* %35, align 4
  br label %467

; <label>:491:                                    ; preds = %467
  br label %492

; <label>:492:                                    ; preds = %491
  %493 = load i32, i32* %32, align 4
  %insertElmt293 = insertelement <4 x i32> undef, i32 %493, i32 0
  %insertElmt294 = insertelement <4 x i32> %insertElmt293, i32 %493, i32 1
  %insertElmt295 = insertelement <4 x i32> %insertElmt294, i32 %493, i32 2
  %insertElmt296 = insertelement <4 x i32> %insertElmt295, i32 %493, i32 3
  store <4 x i32> %insertElmt296, <4 x i32>* %allocaVec140, align 16
  %494 = load <4 x i32>, <4 x i32>* %allocaVec140, align 16
  %Vop297 = add <4 x i32> %494, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop297, <4 x i32>* %allocaVec140
  %495 = add nsw i32 %493, 1
  store i32 %495, i32* %32, align 4
  br label %434

; <label>:496:                                    ; preds = %434
  %497 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %498 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %497, i32 0, i32 43
  %499 = load i32, i32* %498, align 4
  %500 = icmp eq i32 %499, 1
  br i1 %500, label %501, label %519

; <label>:501:                                    ; preds = %496
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec140
  store i32 0, i32* %32, align 4
  br label %502

; <label>:502:                                    ; preds = %514, %501
  %503 = load i32, i32* %32, align 4
  %504 = load i32, i32* @L3psycho_anal.npart_s, align 4
  %505 = icmp slt i32 %503, %504
  br i1 %505, label %506, label %518

; <label>:506:                                    ; preds = %502
  %507 = load i32, i32* %32, align 4
  %508 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %507
  %509 = load double, double* %508, align 8
  %510 = fmul double %509, 0x3FCD791C5F888823
  %511 = call arm_aapcscc double @exp(double %510) #7
  %512 = load i32, i32* %32, align 4
  %513 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %512
  store double %511, double* %513, align 8
  br label %514

; <label>:514:                                    ; preds = %506
  %515 = load i32, i32* %32, align 4
  %516 = load <4 x i32>, <4 x i32>* %allocaVec140, align 16
  %Vop298 = add <4 x i32> %516, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop298, <4 x i32>* %allocaVec140
  %517 = add nsw i32 %515, 1
  store i32 %517, i32* %32, align 4
  br label %502

; <label>:518:                                    ; preds = %502
  br label %519

; <label>:519:                                    ; preds = %518, %496
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec140
  store i32 0, i32* %32, align 4
  br label %520

; <label>:520:                                    ; preds = %577, %519
  %521 = load i32, i32* %32, align 4
  %522 = load i32, i32* @L3psycho_anal.npart_s, align 4
  %523 = icmp slt i32 %521, %522
  br i1 %523, label %524, label %581

; <label>:524:                                    ; preds = %520
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec150
  store double 0.000000e+00, double* %43, align 8
  %525 = load i32, i32* %32, align 4
  %526 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i32 0, i32 %525
  %527 = getelementptr inbounds [2 x i32], [2 x i32]* %526, i32 0, i32 0
  %528 = load i32, i32* %527, align 4
  store i32 %528, i32* %35, align 4
  br label %529

; <label>:529:                                    ; preds = %544, %524
  %530 = load i32, i32* %35, align 4
  %531 = load i32, i32* %32, align 4
  %532 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i32 0, i32 %531
  %533 = getelementptr inbounds [2 x i32], [2 x i32]* %532, i32 0, i32 1
  %534 = load i32, i32* %533, align 4
  %535 = icmp sle i32 %530, %534
  br i1 %535, label %536, label %548

; <label>:536:                                    ; preds = %529
  %537 = load i32, i32* %32, align 4
  %538 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i32 0, i32 %537
  %539 = load i32, i32* %35, align 4
  %540 = getelementptr inbounds [64 x double], [64 x double]* %538, i32 0, i32 %539
  %541 = load double, double* %540, align 8
  %542 = load double, double* %43, align 8
  %543 = fadd double %542, %541
  store double %543, double* %43, align 8
  br label %544

; <label>:544:                                    ; preds = %536
  %545 = load i32, i32* %35, align 4
  %546 = load <4 x i32>, <4 x i32>* %allocaVec143, align 16
  %Vop299 = add <4 x i32> %546, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop299, <4 x i32>* %allocaVec143
  %547 = add nsw i32 %545, 1
  store i32 %547, i32* %35, align 4
  br label %529

; <label>:548:                                    ; preds = %529
  %549 = load i32, i32* %32, align 4
  %550 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i32 0, i32 %549
  %551 = getelementptr inbounds [2 x i32], [2 x i32]* %550, i32 0, i32 0
  %552 = load i32, i32* %551, align 4
  store i32 %552, i32* %35, align 4
  br label %553

; <label>:553:                                    ; preds = %572, %548
  %554 = load i32, i32* %35, align 4
  %555 = load i32, i32* %32, align 4
  %556 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i32 0, i32 %555
  %557 = getelementptr inbounds [2 x i32], [2 x i32]* %556, i32 0, i32 1
  %558 = load i32, i32* %557, align 4
  %559 = icmp sle i32 %554, %558
  br i1 %559, label %560, label %576

; <label>:560:                                    ; preds = %553
  %561 = load i32, i32* %32, align 4
  %562 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %561
  %563 = load double, double* %562, align 8
  %564 = load double, double* %43, align 8
  %565 = fdiv double %563, %564
  %566 = load i32, i32* %32, align 4
  %567 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i32 0, i32 %566
  %568 = load i32, i32* %35, align 4
  %569 = getelementptr inbounds [64 x double], [64 x double]* %567, i32 0, i32 %568
  %570 = load double, double* %569, align 8
  %571 = fmul double %570, %565
  store double %571, double* %569, align 8
  br label %572

; <label>:572:                                    ; preds = %560
  %573 = load i32, i32* %35, align 4
  %574 = load <4 x i32>, <4 x i32>* %allocaVec143, align 16
  %Vop300 = add <4 x i32> %574, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop300, <4 x i32>* %allocaVec143
  %575 = add nsw i32 %573, 1
  store i32 %575, i32* %35, align 4
  br label %553

; <label>:576:                                    ; preds = %553
  br label %577

; <label>:577:                                    ; preds = %576
  %578 = load i32, i32* %32, align 4
  %579 = load <4 x i32>, <4 x i32>* %allocaVec140, align 16
  %Vop301 = add <4 x i32> %579, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop301, <4 x i32>* %allocaVec140
  %580 = add nsw i32 %578, 1
  store i32 %580, i32* %32, align 4
  br label %520

; <label>:581:                                    ; preds = %520
  call arm_aapcscc void @init_fft()
  br label %582

; <label>:582:                                    ; preds = %581, %119, %11
  %583 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %584 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %583, i32 0, i32 46
  %585 = load i32, i32* %584, align 4
  store i32 %585, i32* %30, align 4
  %586 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %587 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %586, i32 0, i32 8
  %588 = load i32, i32* %587, align 4
  %589 = icmp eq i32 %588, 1
  br i1 %589, label %590, label %591

; <label>:590:                                    ; preds = %582
  store <4 x i32> <i32 4, i32 4, i32 4, i32 4>, <4 x i32>* %allocaVec138
  store i32 4, i32* %30, align 4
  br label %591

; <label>:591:                                    ; preds = %590, %582
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec139
  store i32 0, i32* %31, align 4
  br label %592

; <label>:592:                                    ; preds = %2135, %591
  %593 = load i32, i32* %31, align 4
  %594 = load i32, i32* %30, align 4
  %595 = icmp slt i32 %593, %594
  br i1 %595, label %596, label %2139

; <label>:596:                                    ; preds = %592
  %597 = load i32, i32* %31, align 4
  %insertElmt302 = insertelement <4 x i32> undef, i32 %597, i32 0
  %insertElmt303 = insertelement <4 x i32> %insertElmt302, i32 %597, i32 1
  %insertElmt304 = insertelement <4 x i32> %insertElmt303, i32 %597, i32 2
  %insertElmt305 = insertelement <4 x i32> %insertElmt304, i32 %597, i32 3
  store <4 x i32> %insertElmt305, <4 x i32>* %allocaVec139, align 16
  %598 = load <4 x i32>, <4 x i32>* %allocaVec139, align 16
  %Vop306 = and <4 x i32> %598, <i32 1, i32 1, i32 1, i32 1>
  %599 = and i32 %597, 1
  %600 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* getelementptr inbounds ([2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i32 0, i32 0), i32 %599
  store [3 x [256 x float]]* %600, [3 x [256 x float]]** %24, align 4
  %601 = load i32, i32* %31, align 4
  %insertElmt307 = insertelement <4 x i32> undef, i32 %601, i32 0
  %insertElmt308 = insertelement <4 x i32> %insertElmt307, i32 %601, i32 1
  %insertElmt309 = insertelement <4 x i32> %insertElmt308, i32 %601, i32 2
  %insertElmt310 = insertelement <4 x i32> %insertElmt309, i32 %601, i32 3
  store <4 x i32> %insertElmt310, <4 x i32>* %allocaVec139, align 16
  %602 = load <4 x i32>, <4 x i32>* %allocaVec139, align 16
  %Vop311 = and <4 x i32> %602, <i32 1, i32 1, i32 1, i32 1>
  %603 = and i32 %601, 1
  %604 = getelementptr inbounds [1024 x float], [1024 x float]* getelementptr inbounds ([2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i32 0, i32 0), i32 %603
  store [1024 x float]* %604, [1024 x float]** %23, align 4
  %605 = load i32, i32* %31, align 4
  %606 = icmp slt i32 %605, 2
  br i1 %606, label %607, label %642

; <label>:607:                                    ; preds = %596
  %608 = load [1024 x float]*, [1024 x float]** %23, align 4
  %609 = getelementptr inbounds [1024 x float], [1024 x float]* %608, i32 0, i32 0
  %610 = load i32, i32* %31, align 4
  %611 = load i16**, i16*** %13, align 4
  call arm_aapcscc void @fft_long(float* %609, i32 %610, i16** %611)
  %612 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %613 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %612, i32 0, i32 0
  %614 = load i32, i32* %31, align 4
  %615 = load i16**, i16*** %13, align 4
  call arm_aapcscc void @fft_short([256 x float]* %613, i32 %614, i16** %615)
  %616 = load i32, i32* %31, align 4
  %617 = getelementptr inbounds [4 x double], [4 x double]* @L3psycho_anal.pe, i32 0, i32 %616
  %618 = load double, double* %617, align 8
  %619 = load double*, double** %20, align 4
  %620 = load i32, i32* %31, align 4
  %621 = getelementptr inbounds double, double* %619, i32 %620
  store double %618, double* %621, align 8
  %622 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %18, align 4
  %623 = load i32, i32* %14, align 4
  %624 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %622, i32 %623
  %625 = load i32, i32* %31, align 4
  %626 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %624, i32 0, i32 %625
  %627 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %626, i32 0, i32 0
  %628 = load i32, i32* %31, align 4
  %629 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %628
  %630 = bitcast %struct.III_psy_xmin* %627 to i8*
  %631 = bitcast %struct.III_psy_xmin* %629 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %630, i8* %631, i32 488, i32 8, i1 false)
  %632 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %18, align 4
  %633 = load i32, i32* %14, align 4
  %634 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %632, i32 %633
  %635 = load i32, i32* %31, align 4
  %636 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %634, i32 0, i32 %635
  %637 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %636, i32 0, i32 1
  %638 = load i32, i32* %31, align 4
  %639 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i32 0, i32 %638
  %640 = bitcast %struct.III_psy_xmin* %637 to i8*
  %641 = bitcast %struct.III_psy_xmin* %639 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %640, i8* %641, i32 488, i32 8, i1 false)
  br label %758

; <label>:642:                                    ; preds = %596
  %643 = load i32, i32* %31, align 4
  %644 = getelementptr inbounds [4 x double], [4 x double]* @L3psycho_anal.pe, i32 0, i32 %643
  %645 = load double, double* %644, align 8
  %646 = load double*, double** %21, align 4
  %647 = load i32, i32* %31, align 4
  %insertElmt312 = insertelement <4 x i32> undef, i32 %647, i32 0
  %insertElmt313 = insertelement <4 x i32> %insertElmt312, i32 %647, i32 1
  %insertElmt314 = insertelement <4 x i32> %insertElmt313, i32 %647, i32 2
  %insertElmt315 = insertelement <4 x i32> %insertElmt314, i32 %647, i32 3
  store <4 x i32> %insertElmt315, <4 x i32>* %allocaVec139, align 16
  %648 = load <4 x i32>, <4 x i32>* %allocaVec139, align 16
  %Vop316 = sub <4 x i32> %648, <i32 2, i32 2, i32 2, i32 2>
  %649 = sub nsw i32 %647, 2
  %650 = getelementptr inbounds double, double* %646, i32 %649
  store double %645, double* %650, align 8
  %651 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %19, align 4
  %652 = load i32, i32* %14, align 4
  %653 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %651, i32 %652
  %654 = load i32, i32* %31, align 4
  %insertElmt317 = insertelement <4 x i32> undef, i32 %654, i32 0
  %insertElmt318 = insertelement <4 x i32> %insertElmt317, i32 %654, i32 1
  %insertElmt319 = insertelement <4 x i32> %insertElmt318, i32 %654, i32 2
  %insertElmt320 = insertelement <4 x i32> %insertElmt319, i32 %654, i32 3
  store <4 x i32> %insertElmt320, <4 x i32>* %allocaVec139, align 16
  %655 = load <4 x i32>, <4 x i32>* %allocaVec139, align 16
  %Vop321 = sub <4 x i32> %655, <i32 2, i32 2, i32 2, i32 2>
  %656 = sub nsw i32 %654, 2
  %657 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %653, i32 0, i32 %656
  %658 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %657, i32 0, i32 1
  %659 = load i32, i32* %31, align 4
  %660 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i32 0, i32 %659
  %661 = bitcast %struct.III_psy_xmin* %658 to i8*
  %662 = bitcast %struct.III_psy_xmin* %660 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %661, i8* %662, i32 488, i32 8, i1 false)
  %663 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %19, align 4
  %664 = load i32, i32* %14, align 4
  %665 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %663, i32 %664
  %666 = load i32, i32* %31, align 4
  %insertElmt322 = insertelement <4 x i32> undef, i32 %666, i32 0
  %insertElmt323 = insertelement <4 x i32> %insertElmt322, i32 %666, i32 1
  %insertElmt324 = insertelement <4 x i32> %insertElmt323, i32 %666, i32 2
  %insertElmt325 = insertelement <4 x i32> %insertElmt324, i32 %666, i32 3
  store <4 x i32> %insertElmt325, <4 x i32>* %allocaVec139, align 16
  %667 = load <4 x i32>, <4 x i32>* %allocaVec139, align 16
  %Vop326 = sub <4 x i32> %667, <i32 2, i32 2, i32 2, i32 2>
  %668 = sub nsw i32 %666, 2
  %669 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %665, i32 0, i32 %668
  %670 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %669, i32 0, i32 0
  %671 = load i32, i32* %31, align 4
  %672 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %671
  %673 = bitcast %struct.III_psy_xmin* %670 to i8*
  %674 = bitcast %struct.III_psy_xmin* %672 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %673, i8* %674, i32 488, i32 8, i1 false)
  %675 = load i32, i32* %31, align 4
  %676 = icmp eq i32 %675, 2
  br i1 %676, label %677, label %757

; <label>:677:                                    ; preds = %642
  store <4 x i32> <i32 1023, i32 1023, i32 1023, i32 1023>, <4 x i32>* %allocaVec142
  store i32 1023, i32* %34, align 4
  br label %678

; <label>:678:                                    ; preds = %704, %677
  %679 = load i32, i32* %34, align 4
  %680 = icmp sge i32 %679, 0
  br i1 %680, label %681, label %708

; <label>:681:                                    ; preds = %678
  %682 = load i32, i32* %34, align 4
  %683 = getelementptr inbounds [1024 x float], [1024 x float]* getelementptr inbounds ([2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i32 0, i32 0), i32 0, i32 %682
  %684 = load float, float* %683, align 4
  store float %684, float* %44, align 4
  %685 = load i32, i32* %34, align 4
  %686 = getelementptr inbounds [1024 x float], [1024 x float]* getelementptr inbounds ([2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i32 0, i32 1), i32 0, i32 %685
  %687 = load float, float* %686, align 4
  store float %687, float* %45, align 4
  %688 = load float, float* %44, align 4
  %insertElmt327 = insertelement <4 x float> undef, float %688, i32 0
  %insertElmt328 = insertelement <4 x float> %insertElmt327, float %688, i32 1
  %insertElmt329 = insertelement <4 x float> %insertElmt328, float %688, i32 2
  %insertElmt330 = insertelement <4 x float> %insertElmt329, float %688, i32 3
  store <4 x float> %insertElmt330, <4 x float>* %allocaVec151, align 16
  %689 = load float, float* %45, align 4
  %insertElmt331 = insertelement <4 x float> undef, float %689, i32 0
  %insertElmt332 = insertelement <4 x float> %insertElmt331, float %689, i32 1
  %insertElmt333 = insertelement <4 x float> %insertElmt332, float %689, i32 2
  %insertElmt334 = insertelement <4 x float> %insertElmt333, float %689, i32 3
  store <4 x float> %insertElmt334, <4 x float>* %allocaVec152, align 16
  %690 = load <4 x float>, <4 x float>* %allocaVec151, align 16
  %691 = load <4 x float>, <4 x float>* %allocaVec152, align 16
  %Vop335 = fadd <4 x float> %690, %691
  %692 = fadd float %688, %689
  %Vop336 = fmul <4 x float> %Vop335, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %693 = fmul float %692, 0x3FE6A09E60000000
  %694 = load i32, i32* %34, align 4
  %695 = getelementptr inbounds [1024 x float], [1024 x float]* getelementptr inbounds ([2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i32 0, i32 0), i32 0, i32 %694
  store float %693, float* %695, align 4
  %696 = load float, float* %44, align 4
  %insertElmt337 = insertelement <4 x float> undef, float %696, i32 0
  %insertElmt338 = insertelement <4 x float> %insertElmt337, float %696, i32 1
  %insertElmt339 = insertelement <4 x float> %insertElmt338, float %696, i32 2
  %insertElmt340 = insertelement <4 x float> %insertElmt339, float %696, i32 3
  store <4 x float> %insertElmt340, <4 x float>* %allocaVec151, align 16
  %697 = load float, float* %45, align 4
  %insertElmt341 = insertelement <4 x float> undef, float %697, i32 0
  %insertElmt342 = insertelement <4 x float> %insertElmt341, float %697, i32 1
  %insertElmt343 = insertelement <4 x float> %insertElmt342, float %697, i32 2
  %insertElmt344 = insertelement <4 x float> %insertElmt343, float %697, i32 3
  store <4 x float> %insertElmt344, <4 x float>* %allocaVec152, align 16
  %698 = load <4 x float>, <4 x float>* %allocaVec151, align 16
  %699 = load <4 x float>, <4 x float>* %allocaVec152, align 16
  %Vop345 = fsub <4 x float> %698, %699
  %700 = fsub float %696, %697
  %Vop346 = fmul <4 x float> %Vop345, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %701 = fmul float %700, 0x3FE6A09E60000000
  %702 = load i32, i32* %34, align 4
  %703 = getelementptr inbounds [1024 x float], [1024 x float]* getelementptr inbounds ([2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i32 0, i32 1), i32 0, i32 %702
  store float %701, float* %703, align 4
  br label %704

; <label>:704:                                    ; preds = %681
  %705 = load i32, i32* %34, align 4
  %706 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop347 = add <4 x i32> %706, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop347, <4 x i32>* %allocaVec142
  %707 = add nsw i32 %705, -1
  store i32 %707, i32* %34, align 4
  br label %678

; <label>:708:                                    ; preds = %678
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %allocaVec140
  store i32 2, i32* %32, align 4
  br label %709

; <label>:709:                                    ; preds = %752, %708
  %710 = load i32, i32* %32, align 4
  %711 = icmp sge i32 %710, 0
  br i1 %711, label %712, label %756

; <label>:712:                                    ; preds = %709
  store <4 x i32> <i32 255, i32 255, i32 255, i32 255>, <4 x i32>* %allocaVec142
  store i32 255, i32* %34, align 4
  br label %713

; <label>:713:                                    ; preds = %747, %712
  %714 = load i32, i32* %34, align 4
  %715 = icmp sge i32 %714, 0
  br i1 %715, label %716, label %751

; <label>:716:                                    ; preds = %713
  %717 = load i32, i32* %32, align 4
  %718 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* getelementptr inbounds ([2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i32 0, i32 0), i32 0, i32 %717
  %719 = load i32, i32* %34, align 4
  %720 = getelementptr inbounds [256 x float], [256 x float]* %718, i32 0, i32 %719
  %721 = load float, float* %720, align 4
  store float %721, float* %46, align 4
  %722 = load i32, i32* %32, align 4
  %723 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* getelementptr inbounds ([2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i32 0, i32 1), i32 0, i32 %722
  %724 = load i32, i32* %34, align 4
  %725 = getelementptr inbounds [256 x float], [256 x float]* %723, i32 0, i32 %724
  %726 = load float, float* %725, align 4
  store float %726, float* %47, align 4
  %727 = load float, float* %46, align 4
  %insertElmt348 = insertelement <4 x float> undef, float %727, i32 0
  %insertElmt349 = insertelement <4 x float> %insertElmt348, float %727, i32 1
  %insertElmt350 = insertelement <4 x float> %insertElmt349, float %727, i32 2
  %insertElmt351 = insertelement <4 x float> %insertElmt350, float %727, i32 3
  store <4 x float> %insertElmt351, <4 x float>* %allocaVec153, align 16
  %728 = load float, float* %47, align 4
  %insertElmt352 = insertelement <4 x float> undef, float %728, i32 0
  %insertElmt353 = insertelement <4 x float> %insertElmt352, float %728, i32 1
  %insertElmt354 = insertelement <4 x float> %insertElmt353, float %728, i32 2
  %insertElmt355 = insertelement <4 x float> %insertElmt354, float %728, i32 3
  store <4 x float> %insertElmt355, <4 x float>* %allocaVec154, align 16
  %729 = load <4 x float>, <4 x float>* %allocaVec153, align 16
  %730 = load <4 x float>, <4 x float>* %allocaVec154, align 16
  %Vop356 = fadd <4 x float> %729, %730
  %731 = fadd float %727, %728
  %Vop357 = fmul <4 x float> %Vop356, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %732 = fmul float %731, 0x3FE6A09E60000000
  %733 = load i32, i32* %32, align 4
  %734 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* getelementptr inbounds ([2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i32 0, i32 0), i32 0, i32 %733
  %735 = load i32, i32* %34, align 4
  %736 = getelementptr inbounds [256 x float], [256 x float]* %734, i32 0, i32 %735
  store float %732, float* %736, align 4
  %737 = load float, float* %46, align 4
  %insertElmt358 = insertelement <4 x float> undef, float %737, i32 0
  %insertElmt359 = insertelement <4 x float> %insertElmt358, float %737, i32 1
  %insertElmt360 = insertelement <4 x float> %insertElmt359, float %737, i32 2
  %insertElmt361 = insertelement <4 x float> %insertElmt360, float %737, i32 3
  store <4 x float> %insertElmt361, <4 x float>* %allocaVec153, align 16
  %738 = load float, float* %47, align 4
  %insertElmt362 = insertelement <4 x float> undef, float %738, i32 0
  %insertElmt363 = insertelement <4 x float> %insertElmt362, float %738, i32 1
  %insertElmt364 = insertelement <4 x float> %insertElmt363, float %738, i32 2
  %insertElmt365 = insertelement <4 x float> %insertElmt364, float %738, i32 3
  store <4 x float> %insertElmt365, <4 x float>* %allocaVec154, align 16
  %739 = load <4 x float>, <4 x float>* %allocaVec153, align 16
  %740 = load <4 x float>, <4 x float>* %allocaVec154, align 16
  %Vop366 = fsub <4 x float> %739, %740
  %741 = fsub float %737, %738
  %Vop367 = fmul <4 x float> %Vop366, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %742 = fmul float %741, 0x3FE6A09E60000000
  %743 = load i32, i32* %32, align 4
  %744 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* getelementptr inbounds ([2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i32 0, i32 1), i32 0, i32 %743
  %745 = load i32, i32* %34, align 4
  %746 = getelementptr inbounds [256 x float], [256 x float]* %744, i32 0, i32 %745
  store float %742, float* %746, align 4
  br label %747

; <label>:747:                                    ; preds = %716
  %748 = load i32, i32* %34, align 4
  %749 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop368 = add <4 x i32> %749, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop368, <4 x i32>* %allocaVec142
  %750 = add nsw i32 %748, -1
  store i32 %750, i32* %34, align 4
  br label %713

; <label>:751:                                    ; preds = %713
  br label %752

; <label>:752:                                    ; preds = %751
  %753 = load i32, i32* %32, align 4
  %754 = load <4 x i32>, <4 x i32>* %allocaVec140, align 16
  %Vop369 = add <4 x i32> %754, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop369, <4 x i32>* %allocaVec140
  %755 = add nsw i32 %753, -1
  store i32 %755, i32* %32, align 4
  br label %709

; <label>:756:                                    ; preds = %709
  br label %757

; <label>:757:                                    ; preds = %756, %642
  br label %758

; <label>:758:                                    ; preds = %757, %607
  %759 = load [1024 x float]*, [1024 x float]** %23, align 4
  %760 = getelementptr inbounds [1024 x float], [1024 x float]* %759, i32 0, i32 0
  %761 = load float, float* %760, align 4
  store float %761, float* getelementptr inbounds ([513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 0), align 4
  %762 = load float, float* getelementptr inbounds ([513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 0), align 4
  %763 = load float, float* getelementptr inbounds ([513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 0), align 4
  %764 = fmul float %763, %762
  store float %764, float* getelementptr inbounds ([513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 0), align 4
  %765 = load float, float* getelementptr inbounds ([513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 0), align 4
  %766 = load i32, i32* %31, align 4
  %767 = getelementptr inbounds [4 x float], [4 x float]* %25, i32 0, i32 %766
  store float %765, float* %767, align 4
  store i32 511, i32* %34, align 4
  br label %768

; <label>:768:                                    ; preds = %809, %758
  %769 = load i32, i32* %34, align 4
  %770 = icmp sge i32 %769, 0
  br i1 %770, label %771, label %813

; <label>:771:                                    ; preds = %768
  %772 = load [1024 x float]*, [1024 x float]** %23, align 4
  %773 = load i32, i32* %34, align 4
  %774 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop370 = sub <4 x i32> <i32 512, i32 512, i32 512, i32 512>, %774
  %775 = sub nsw i32 512, %773
  %776 = getelementptr inbounds [1024 x float], [1024 x float]* %772, i32 0, i32 %775
  %777 = load float, float* %776, align 4
  store float %777, float* %48, align 4
  %778 = load [1024 x float]*, [1024 x float]** %23, align 4
  %779 = load i32, i32* %34, align 4
  %780 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop371 = add <4 x i32> <i32 512, i32 512, i32 512, i32 512>, %780
  %781 = add nsw i32 512, %779
  %782 = getelementptr inbounds [1024 x float], [1024 x float]* %778, i32 0, i32 %781
  %783 = load float, float* %782, align 4
  store float %783, float* %49, align 4
  %784 = load float, float* %48, align 4
  %insertElmt372 = insertelement <4 x float> undef, float %784, i32 0
  %insertElmt373 = insertelement <4 x float> %insertElmt372, float %784, i32 1
  %insertElmt374 = insertelement <4 x float> %insertElmt373, float %784, i32 2
  %insertElmt375 = insertelement <4 x float> %insertElmt374, float %784, i32 3
  store <4 x float> %insertElmt375, <4 x float>* %allocaVec155, align 16
  %785 = load float, float* %48, align 4
  %insertElmt376 = insertelement <4 x float> undef, float %785, i32 0
  %insertElmt377 = insertelement <4 x float> %insertElmt376, float %785, i32 1
  %insertElmt378 = insertelement <4 x float> %insertElmt377, float %785, i32 2
  %insertElmt379 = insertelement <4 x float> %insertElmt378, float %785, i32 3
  store <4 x float> %insertElmt379, <4 x float>* %allocaVec155, align 16
  %786 = load <4 x float>, <4 x float>* %allocaVec155, align 16
  %787 = load <4 x float>, <4 x float>* %allocaVec155, align 16
  %Vop380 = fmul <4 x float> %786, %787
  %788 = fmul float %784, %785
  %789 = load float, float* %49, align 4
  %insertElmt381 = insertelement <4 x float> undef, float %789, i32 0
  %insertElmt382 = insertelement <4 x float> %insertElmt381, float %789, i32 1
  %insertElmt383 = insertelement <4 x float> %insertElmt382, float %789, i32 2
  %insertElmt384 = insertelement <4 x float> %insertElmt383, float %789, i32 3
  store <4 x float> %insertElmt384, <4 x float>* %allocaVec156, align 16
  %790 = load float, float* %49, align 4
  %insertElmt385 = insertelement <4 x float> undef, float %790, i32 0
  %insertElmt386 = insertelement <4 x float> %insertElmt385, float %790, i32 1
  %insertElmt387 = insertelement <4 x float> %insertElmt386, float %790, i32 2
  %insertElmt388 = insertelement <4 x float> %insertElmt387, float %790, i32 3
  store <4 x float> %insertElmt388, <4 x float>* %allocaVec156, align 16
  %791 = load <4 x float>, <4 x float>* %allocaVec156, align 16
  %792 = load <4 x float>, <4 x float>* %allocaVec156, align 16
  %Vop389 = fmul <4 x float> %791, %792
  %793 = fmul float %789, %790
  %Vop390 = fadd <4 x float> %Vop380, %Vop389
  %794 = fadd float %788, %793
  %Vop391 = fmul <4 x float> %Vop390, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %795 = fmul float %794, 5.000000e-01
  %796 = load i32, i32* %34, align 4
  %797 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop392 = sub <4 x i32> <i32 512, i32 512, i32 512, i32 512>, %797
  %798 = sub nsw i32 512, %796
  %799 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %798
  store float %795, float* %799, align 4
  %800 = load i32, i32* %34, align 4
  %801 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop393 = sub <4 x i32> <i32 512, i32 512, i32 512, i32 512>, %801
  %802 = sub nsw i32 512, %800
  %803 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %802
  %804 = load float, float* %803, align 4
  %805 = load i32, i32* %31, align 4
  %806 = getelementptr inbounds [4 x float], [4 x float]* %25, i32 0, i32 %805
  %807 = load float, float* %806, align 4
  %808 = fadd float %807, %804
  store float %808, float* %806, align 4
  br label %809

; <label>:809:                                    ; preds = %771
  %810 = load i32, i32* %34, align 4
  %811 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop394 = add <4 x i32> %811, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop394, <4 x i32>* %allocaVec142
  %812 = add nsw i32 %810, -1
  store i32 %812, i32* %34, align 4
  br label %768

; <label>:813:                                    ; preds = %768
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %allocaVec140
  store i32 2, i32* %32, align 4
  br label %814

; <label>:814:                                    ; preds = %878, %813
  %815 = load i32, i32* %32, align 4
  %816 = icmp sge i32 %815, 0
  br i1 %816, label %817, label %882

; <label>:817:                                    ; preds = %814
  %818 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %819 = load i32, i32* %32, align 4
  %820 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %818, i32 0, i32 %819
  %821 = getelementptr inbounds [256 x float], [256 x float]* %820, i32 0, i32 0
  %822 = load float, float* %821, align 4
  %823 = load i32, i32* %32, align 4
  %824 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 %823
  %825 = getelementptr inbounds [129 x float], [129 x float]* %824, i32 0, i32 0
  store float %822, float* %825, align 4
  %826 = load i32, i32* %32, align 4
  %827 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 %826
  %828 = getelementptr inbounds [129 x float], [129 x float]* %827, i32 0, i32 0
  %829 = load float, float* %828, align 4
  %830 = load i32, i32* %32, align 4
  %831 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 %830
  %832 = getelementptr inbounds [129 x float], [129 x float]* %831, i32 0, i32 0
  %833 = load float, float* %832, align 4
  %834 = fmul float %833, %829
  store float %834, float* %832, align 4
  store i32 127, i32* %34, align 4
  br label %835

; <label>:835:                                    ; preds = %873, %817
  %836 = load i32, i32* %34, align 4
  %837 = icmp sge i32 %836, 0
  br i1 %837, label %838, label %877

; <label>:838:                                    ; preds = %835
  %839 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %840 = load i32, i32* %32, align 4
  %841 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %839, i32 0, i32 %840
  %842 = load i32, i32* %34, align 4
  %843 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop395 = sub <4 x i32> <i32 128, i32 128, i32 128, i32 128>, %843
  %844 = sub nsw i32 128, %842
  %845 = getelementptr inbounds [256 x float], [256 x float]* %841, i32 0, i32 %844
  %846 = load float, float* %845, align 4
  store float %846, float* %50, align 4
  %847 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %848 = load i32, i32* %32, align 4
  %849 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %847, i32 0, i32 %848
  %850 = load i32, i32* %34, align 4
  %851 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop396 = add <4 x i32> <i32 128, i32 128, i32 128, i32 128>, %851
  %852 = add nsw i32 128, %850
  %853 = getelementptr inbounds [256 x float], [256 x float]* %849, i32 0, i32 %852
  %854 = load float, float* %853, align 4
  store float %854, float* %51, align 4
  %855 = load float, float* %50, align 4
  %insertElmt397 = insertelement <4 x float> undef, float %855, i32 0
  %insertElmt398 = insertelement <4 x float> %insertElmt397, float %855, i32 1
  %insertElmt399 = insertelement <4 x float> %insertElmt398, float %855, i32 2
  %insertElmt400 = insertelement <4 x float> %insertElmt399, float %855, i32 3
  store <4 x float> %insertElmt400, <4 x float>* %allocaVec157, align 16
  %856 = load float, float* %50, align 4
  %insertElmt401 = insertelement <4 x float> undef, float %856, i32 0
  %insertElmt402 = insertelement <4 x float> %insertElmt401, float %856, i32 1
  %insertElmt403 = insertelement <4 x float> %insertElmt402, float %856, i32 2
  %insertElmt404 = insertelement <4 x float> %insertElmt403, float %856, i32 3
  store <4 x float> %insertElmt404, <4 x float>* %allocaVec157, align 16
  %857 = load <4 x float>, <4 x float>* %allocaVec157, align 16
  %858 = load <4 x float>, <4 x float>* %allocaVec157, align 16
  %Vop405 = fmul <4 x float> %857, %858
  %859 = fmul float %855, %856
  %860 = load float, float* %51, align 4
  %insertElmt406 = insertelement <4 x float> undef, float %860, i32 0
  %insertElmt407 = insertelement <4 x float> %insertElmt406, float %860, i32 1
  %insertElmt408 = insertelement <4 x float> %insertElmt407, float %860, i32 2
  %insertElmt409 = insertelement <4 x float> %insertElmt408, float %860, i32 3
  store <4 x float> %insertElmt409, <4 x float>* %allocaVec158, align 16
  %861 = load float, float* %51, align 4
  %insertElmt410 = insertelement <4 x float> undef, float %861, i32 0
  %insertElmt411 = insertelement <4 x float> %insertElmt410, float %861, i32 1
  %insertElmt412 = insertelement <4 x float> %insertElmt411, float %861, i32 2
  %insertElmt413 = insertelement <4 x float> %insertElmt412, float %861, i32 3
  store <4 x float> %insertElmt413, <4 x float>* %allocaVec158, align 16
  %862 = load <4 x float>, <4 x float>* %allocaVec158, align 16
  %863 = load <4 x float>, <4 x float>* %allocaVec158, align 16
  %Vop414 = fmul <4 x float> %862, %863
  %864 = fmul float %860, %861
  %Vop415 = fadd <4 x float> %Vop405, %Vop414
  %865 = fadd float %859, %864
  %Vop416 = fmul <4 x float> %Vop415, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %866 = fmul float %865, 5.000000e-01
  %867 = load i32, i32* %32, align 4
  %868 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 %867
  %869 = load i32, i32* %34, align 4
  %870 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop417 = sub <4 x i32> <i32 128, i32 128, i32 128, i32 128>, %870
  %871 = sub nsw i32 128, %869
  %872 = getelementptr inbounds [129 x float], [129 x float]* %868, i32 0, i32 %871
  store float %866, float* %872, align 4
  br label %873

; <label>:873:                                    ; preds = %838
  %874 = load i32, i32* %34, align 4
  %875 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop418 = add <4 x i32> %875, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop418, <4 x i32>* %allocaVec142
  %876 = add nsw i32 %874, -1
  store i32 %876, i32* %34, align 4
  br label %835

; <label>:877:                                    ; preds = %835
  br label %878

; <label>:878:                                    ; preds = %877
  %879 = load i32, i32* %32, align 4
  %880 = load <4 x i32>, <4 x i32>* %allocaVec140, align 16
  %Vop419 = add <4 x i32> %880, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop419, <4 x i32>* %allocaVec140
  %881 = add nsw i32 %879, -1
  store i32 %881, i32* %32, align 4
  br label %814

; <label>:882:                                    ; preds = %814
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec142
  store i32 0, i32* %34, align 4
  br label %883

; <label>:883:                                    ; preds = %1134, %882
  %884 = load i32, i32* %34, align 4
  %885 = load i32, i32* @L3psycho_anal.cw_lower_index, align 4
  %886 = icmp slt i32 %884, %885
  br i1 %886, label %887, label %1138

; <label>:887:                                    ; preds = %883
  %888 = load i32, i32* %31, align 4
  %889 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.ax_sav, i32 0, i32 %888
  %890 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %889, i32 0, i32 1
  %891 = load i32, i32* %34, align 4
  %892 = getelementptr inbounds [513 x float], [513 x float]* %890, i32 0, i32 %891
  %893 = load float, float* %892, align 4
  store float %893, float* %54, align 4
  %894 = load i32, i32* %31, align 4
  %895 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.bx_sav, i32 0, i32 %894
  %896 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %895, i32 0, i32 1
  %897 = load i32, i32* %34, align 4
  %898 = getelementptr inbounds [513 x float], [513 x float]* %896, i32 0, i32 %897
  %899 = load float, float* %898, align 4
  store float %899, float* %57, align 4
  %900 = load i32, i32* %31, align 4
  %901 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.rx_sav, i32 0, i32 %900
  %902 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %901, i32 0, i32 1
  %903 = load i32, i32* %34, align 4
  %904 = getelementptr inbounds [513 x float], [513 x float]* %902, i32 0, i32 %903
  %905 = load float, float* %904, align 4
  store float %905, float* %60, align 4
  %906 = load i32, i32* %31, align 4
  %907 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.ax_sav, i32 0, i32 %906
  %908 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %907, i32 0, i32 0
  %909 = load i32, i32* %34, align 4
  %910 = getelementptr inbounds [513 x float], [513 x float]* %908, i32 0, i32 %909
  %911 = load float, float* %910, align 4
  %912 = load i32, i32* %31, align 4
  %913 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.ax_sav, i32 0, i32 %912
  %914 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %913, i32 0, i32 1
  %915 = load i32, i32* %34, align 4
  %916 = getelementptr inbounds [513 x float], [513 x float]* %914, i32 0, i32 %915
  store float %911, float* %916, align 4
  store float %911, float* %53, align 4
  %917 = load i32, i32* %31, align 4
  %918 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.bx_sav, i32 0, i32 %917
  %919 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %918, i32 0, i32 0
  %920 = load i32, i32* %34, align 4
  %921 = getelementptr inbounds [513 x float], [513 x float]* %919, i32 0, i32 %920
  %922 = load float, float* %921, align 4
  %923 = load i32, i32* %31, align 4
  %924 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.bx_sav, i32 0, i32 %923
  %925 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %924, i32 0, i32 1
  %926 = load i32, i32* %34, align 4
  %927 = getelementptr inbounds [513 x float], [513 x float]* %925, i32 0, i32 %926
  store float %922, float* %927, align 4
  store float %922, float* %56, align 4
  %928 = load i32, i32* %31, align 4
  %929 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.rx_sav, i32 0, i32 %928
  %930 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %929, i32 0, i32 0
  %931 = load i32, i32* %34, align 4
  %932 = getelementptr inbounds [513 x float], [513 x float]* %930, i32 0, i32 %931
  %933 = load float, float* %932, align 4
  %934 = load i32, i32* %31, align 4
  %935 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.rx_sav, i32 0, i32 %934
  %936 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %935, i32 0, i32 1
  %937 = load i32, i32* %34, align 4
  %938 = getelementptr inbounds [513 x float], [513 x float]* %936, i32 0, i32 %937
  store float %933, float* %938, align 4
  store float %933, float* %59, align 4
  %939 = load [1024 x float]*, [1024 x float]** %23, align 4
  %940 = load i32, i32* %34, align 4
  %941 = getelementptr inbounds [1024 x float], [1024 x float]* %939, i32 0, i32 %940
  %942 = load float, float* %941, align 4
  %943 = load i32, i32* %31, align 4
  %944 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.ax_sav, i32 0, i32 %943
  %945 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %944, i32 0, i32 0
  %946 = load i32, i32* %34, align 4
  %947 = getelementptr inbounds [513 x float], [513 x float]* %945, i32 0, i32 %946
  store float %942, float* %947, align 4
  store float %942, float* %52, align 4
  %948 = load i32, i32* %34, align 4
  %949 = icmp eq i32 %948, 0
  br i1 %949, label %950, label %954

; <label>:950:                                    ; preds = %887
  %951 = load [1024 x float]*, [1024 x float]** %23, align 4
  %952 = getelementptr inbounds [1024 x float], [1024 x float]* %951, i32 0, i32 0
  %953 = load float, float* %952, align 4
  br label %961

; <label>:954:                                    ; preds = %887
  %955 = load [1024 x float]*, [1024 x float]** %23, align 4
  %956 = load i32, i32* %34, align 4
  %957 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop420 = sub <4 x i32> <i32 1024, i32 1024, i32 1024, i32 1024>, %957
  %958 = sub nsw i32 1024, %956
  %959 = getelementptr inbounds [1024 x float], [1024 x float]* %955, i32 0, i32 %958
  %960 = load float, float* %959, align 4
  br label %961

; <label>:961:                                    ; preds = %954, %950
  %962 = phi float [ %953, %950 ], [ %960, %954 ]
  %963 = load i32, i32* %31, align 4
  %964 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.bx_sav, i32 0, i32 %963
  %965 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %964, i32 0, i32 0
  %966 = load i32, i32* %34, align 4
  %967 = getelementptr inbounds [513 x float], [513 x float]* %965, i32 0, i32 %966
  store float %962, float* %967, align 4
  store float %962, float* %55, align 4
  %968 = load i32, i32* %34, align 4
  %969 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %968
  %970 = load float, float* %969, align 4
  %971 = fpext float %970 to double
  %972 = call arm_aapcscc double @sqrt(double %971) #7
  %973 = fptrunc double %972 to float
  %974 = load i32, i32* %31, align 4
  %975 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.rx_sav, i32 0, i32 %974
  %976 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %975, i32 0, i32 0
  %977 = load i32, i32* %34, align 4
  %978 = getelementptr inbounds [513 x float], [513 x float]* %976, i32 0, i32 %977
  store float %973, float* %978, align 4
  store float %973, float* %58, align 4
  %979 = load float, float* %59, align 4
  %980 = fcmp une float %979, 0.000000e+00
  br i1 %980, label %981, label %1004

; <label>:981:                                    ; preds = %961
  %982 = load float, float* %53, align 4
  %insertElmt421 = insertelement <4 x float> undef, float %982, i32 0
  %insertElmt422 = insertelement <4 x float> %insertElmt421, float %982, i32 1
  %insertElmt423 = insertelement <4 x float> %insertElmt422, float %982, i32 2
  %insertElmt424 = insertelement <4 x float> %insertElmt423, float %982, i32 3
  store <4 x float> %insertElmt424, <4 x float>* %allocaVec160, align 16
  %983 = load float, float* %56, align 4
  %insertElmt425 = insertelement <4 x float> undef, float %983, i32 0
  %insertElmt426 = insertelement <4 x float> %insertElmt425, float %983, i32 1
  %insertElmt427 = insertelement <4 x float> %insertElmt426, float %983, i32 2
  %insertElmt428 = insertelement <4 x float> %insertElmt427, float %983, i32 3
  store <4 x float> %insertElmt428, <4 x float>* %allocaVec163, align 16
  %984 = load <4 x float>, <4 x float>* %allocaVec160, align 16
  %985 = load <4 x float>, <4 x float>* %allocaVec163, align 16
  %Vop429 = fmul <4 x float> %984, %985
  store <4 x float> %Vop429, <4 x float>* %allocaVec168
  %986 = fmul float %982, %983
  store float %986, float* %61, align 4
  %987 = load float, float* %53, align 4
  %insertElmt430 = insertelement <4 x float> undef, float %987, i32 0
  %insertElmt431 = insertelement <4 x float> %insertElmt430, float %987, i32 1
  %insertElmt432 = insertelement <4 x float> %insertElmt431, float %987, i32 2
  %insertElmt433 = insertelement <4 x float> %insertElmt432, float %987, i32 3
  store <4 x float> %insertElmt433, <4 x float>* %allocaVec160, align 16
  %988 = load float, float* %53, align 4
  %insertElmt434 = insertelement <4 x float> undef, float %988, i32 0
  %insertElmt435 = insertelement <4 x float> %insertElmt434, float %988, i32 1
  %insertElmt436 = insertelement <4 x float> %insertElmt435, float %988, i32 2
  %insertElmt437 = insertelement <4 x float> %insertElmt436, float %988, i32 3
  store <4 x float> %insertElmt437, <4 x float>* %allocaVec160, align 16
  %989 = load <4 x float>, <4 x float>* %allocaVec160, align 16
  %990 = load <4 x float>, <4 x float>* %allocaVec160, align 16
  %Vop438 = fmul <4 x float> %989, %990
  %991 = fmul float %987, %988
  %992 = load float, float* %56, align 4
  %insertElmt439 = insertelement <4 x float> undef, float %992, i32 0
  %insertElmt440 = insertelement <4 x float> %insertElmt439, float %992, i32 1
  %insertElmt441 = insertelement <4 x float> %insertElmt440, float %992, i32 2
  %insertElmt442 = insertelement <4 x float> %insertElmt441, float %992, i32 3
  store <4 x float> %insertElmt442, <4 x float>* %allocaVec163, align 16
  %993 = load float, float* %56, align 4
  %insertElmt443 = insertelement <4 x float> undef, float %993, i32 0
  %insertElmt444 = insertelement <4 x float> %insertElmt443, float %993, i32 1
  %insertElmt445 = insertelement <4 x float> %insertElmt444, float %993, i32 2
  %insertElmt446 = insertelement <4 x float> %insertElmt445, float %993, i32 3
  store <4 x float> %insertElmt446, <4 x float>* %allocaVec163, align 16
  %994 = load <4 x float>, <4 x float>* %allocaVec163, align 16
  %995 = load <4 x float>, <4 x float>* %allocaVec163, align 16
  %Vop447 = fmul <4 x float> %994, %995
  %996 = fmul float %992, %993
  %Vop448 = fsub <4 x float> %Vop438, %Vop447
  %997 = fsub float %991, %996
  %Vop449 = fmul <4 x float> %Vop448, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  store <4 x float> %Vop449, <4 x float>* %allocaVec169
  %998 = fmul float %997, 5.000000e-01
  store float %998, float* %62, align 4
  %999 = load float, float* %59, align 4
  %insertElmt450 = insertelement <4 x float> undef, float %999, i32 0
  %insertElmt451 = insertelement <4 x float> %insertElmt450, float %999, i32 1
  %insertElmt452 = insertelement <4 x float> %insertElmt451, float %999, i32 2
  %insertElmt453 = insertelement <4 x float> %insertElmt452, float %999, i32 3
  store <4 x float> %insertElmt453, <4 x float>* %allocaVec166, align 16
  %1000 = load float, float* %59, align 4
  %insertElmt454 = insertelement <4 x float> undef, float %1000, i32 0
  %insertElmt455 = insertelement <4 x float> %insertElmt454, float %1000, i32 1
  %insertElmt456 = insertelement <4 x float> %insertElmt455, float %1000, i32 2
  %insertElmt457 = insertelement <4 x float> %insertElmt456, float %1000, i32 3
  store <4 x float> %insertElmt457, <4 x float>* %allocaVec166, align 16
  %1001 = load <4 x float>, <4 x float>* %allocaVec166, align 16
  %1002 = load <4 x float>, <4 x float>* %allocaVec166, align 16
  %Vop458 = fmul <4 x float> %1001, %1002
  store <4 x float> %Vop458, <4 x float>* %allocaVec170
  %1003 = fmul float %999, %1000
  store float %1003, float* %63, align 4
  br label %1005

; <label>:1004:                                   ; preds = %961
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %allocaVec168
  store float 1.000000e+00, float* %61, align 4
  store <4 x float> zeroinitializer, <4 x float>* %allocaVec169
  store float 0.000000e+00, float* %62, align 4
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %allocaVec170
  store float 1.000000e+00, float* %63, align 4
  br label %1005

; <label>:1005:                                   ; preds = %1004, %981
  %1006 = load float, float* %60, align 4
  %1007 = fcmp une float %1006, 0.000000e+00
  br i1 %1007, label %1008, label %1051

; <label>:1008:                                   ; preds = %1005
  %1009 = load float, float* %62, align 4
  %1010 = load float, float* %61, align 4
  %1011 = load <4 x float>, <4 x float>* %allocaVec169, align 16
  %1012 = load <4 x float>, <4 x float>* %allocaVec168, align 16
  %Vop459 = fadd <4 x float> %1011, %1012
  %1013 = fadd float %1009, %1010
  %1014 = load float, float* %54, align 4
  %insertElmt460 = insertelement <4 x float> undef, float %1014, i32 0
  %insertElmt461 = insertelement <4 x float> %insertElmt460, float %1014, i32 1
  %insertElmt462 = insertelement <4 x float> %insertElmt461, float %1014, i32 2
  %insertElmt463 = insertelement <4 x float> %insertElmt462, float %1014, i32 3
  store <4 x float> %insertElmt463, <4 x float>* %allocaVec161, align 16
  %1015 = load float, float* %57, align 4
  %insertElmt464 = insertelement <4 x float> undef, float %1015, i32 0
  %insertElmt465 = insertelement <4 x float> %insertElmt464, float %1015, i32 1
  %insertElmt466 = insertelement <4 x float> %insertElmt465, float %1015, i32 2
  %insertElmt467 = insertelement <4 x float> %insertElmt466, float %1015, i32 3
  store <4 x float> %insertElmt467, <4 x float>* %allocaVec164, align 16
  %1016 = load <4 x float>, <4 x float>* %allocaVec161, align 16
  %1017 = load <4 x float>, <4 x float>* %allocaVec164, align 16
  %Vop468 = fadd <4 x float> %1016, %1017
  %1018 = fadd float %1014, %1015
  %Vop469 = fmul <4 x float> %Vop459, %Vop468
  %1019 = fmul float %1013, %1018
  %Vop470 = fmul <4 x float> %Vop469, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  store <4 x float> %Vop470, <4 x float>* %allocaVec171
  %1020 = fmul float %1019, 5.000000e-01
  store float %1020, float* %64, align 4
  %1021 = load float, float* %54, align 4
  %insertElmt471 = insertelement <4 x float> undef, float %1021, i32 0
  %insertElmt472 = insertelement <4 x float> %insertElmt471, float %1021, i32 1
  %insertElmt473 = insertelement <4 x float> %insertElmt472, float %1021, i32 2
  %insertElmt474 = insertelement <4 x float> %insertElmt473, float %1021, i32 3
  store <4 x float> %insertElmt474, <4 x float>* %allocaVec161, align 16
  %1022 = load <4 x float>, <4 x float>* %allocaVec161, align 16
  %Vop475 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %1022
  %1023 = fsub float -0.000000e+00, %1021
  %1024 = load float, float* %61, align 4
  %1025 = load <4 x float>, <4 x float>* %allocaVec168, align 16
  %Vop476 = fmul <4 x float> %Vop475, %1025
  %1026 = fmul float %1023, %1024
  %1027 = load float, float* %64, align 4
  %1028 = load <4 x float>, <4 x float>* %allocaVec171, align 16
  %Vop477 = fadd <4 x float> %Vop476, %1028
  store <4 x float> %Vop477, <4 x float>* %allocaVec172
  %1029 = load <4 x float>, <4 x float>* %allocaVec172, align 4
  %extractE479 = extractelement <4 x float> %1029, i64 0
  %extractE480 = extractelement <4 x float> %1029, i64 1
  %extractE481 = extractelement <4 x float> %1029, i64 2
  %sum482 = fadd float %extractE479, %extractE480
  %sum483 = fadd float %sum482, %extractE481
  %1030 = fadd float %1026, %1027
  %Fmul478 = fmul float %1030, 3.000000e+00
  store float %1030, float* %Recovery10
  %Fcmp484 = fcmp une float %sum483, %Fmul478
  br i1 %Fcmp484, label %1031, label %1035

; <label>:1031:                                   ; preds = %1008
  %remThree897 = fdiv float %sum483, %extractE479
  %FcmpThree898 = fcmp une float %remThree897, 3.000000e+00
  br i1 %FcmpThree898, label %1032, label %1033

; <label>:1032:                                   ; preds = %1031
  store float %1030, float* %Recovery10, align 4
  br label %1034

; <label>:1033:                                   ; preds = %1031
  store float %extractE479, float* %Recovery10, align 4
  br label %1034

; <label>:1034:                                   ; preds = %1033, %1032
  br label %1035

; <label>:1035:                                   ; preds = %1008, %1034
  %ReplaceInst929 = load float, float* %Recovery10, align 4
  store float %ReplaceInst929, float* %65, align 4
  %1036 = load float, float* %57, align 4
  %insertElmt485 = insertelement <4 x float> undef, float %1036, i32 0
  %insertElmt486 = insertelement <4 x float> %insertElmt485, float %1036, i32 1
  %insertElmt487 = insertelement <4 x float> %insertElmt486, float %1036, i32 2
  %insertElmt488 = insertelement <4 x float> %insertElmt487, float %1036, i32 3
  store <4 x float> %insertElmt488, <4 x float>* %allocaVec164, align 16
  %1037 = load <4 x float>, <4 x float>* %allocaVec164, align 16
  %Vop489 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %1037
  %1038 = fsub float -0.000000e+00, %1036
  %1039 = load float, float* %62, align 4
  %1040 = load <4 x float>, <4 x float>* %allocaVec169, align 16
  %Vop490 = fmul <4 x float> %Vop489, %1040
  %1041 = fmul float %1038, %1039
  %1042 = load float, float* %64, align 4
  %1043 = load <4 x float>, <4 x float>* %allocaVec171, align 16
  %Vop491 = fadd <4 x float> %Vop490, %1043
  store <4 x float> %Vop491, <4 x float>* %allocaVec168
  %1044 = fadd float %1041, %1042
  store float %1044, float* %61, align 4
  %1045 = load float, float* %65, align 4
  store float %1045, float* %62, align 4
  %1046 = load float, float* %60, align 4
  %insertElmt492 = insertelement <4 x float> undef, float %1046, i32 0
  %insertElmt493 = insertelement <4 x float> %insertElmt492, float %1046, i32 1
  %insertElmt494 = insertelement <4 x float> %insertElmt493, float %1046, i32 2
  %insertElmt495 = insertelement <4 x float> %insertElmt494, float %1046, i32 3
  store <4 x float> %insertElmt495, <4 x float>* %allocaVec167, align 16
  %1047 = load float, float* %63, align 4
  %1048 = load <4 x float>, <4 x float>* %allocaVec170, align 16
  %1049 = load <4 x float>, <4 x float>* %allocaVec167, align 16
  %Vop496 = fmul <4 x float> %1048, %1049
  store <4 x float> %Vop496, <4 x float>* %allocaVec170
  %1050 = fmul float %1047, %1046
  store float %1050, float* %63, align 4
  br label %1052

; <label>:1051:                                   ; preds = %1005
  br label %1052

; <label>:1052:                                   ; preds = %1051, %1035
  %1053 = load float, float* %59, align 4
  %insertElmt497 = insertelement <4 x float> undef, float %1053, i32 0
  %insertElmt498 = insertelement <4 x float> %insertElmt497, float %1053, i32 1
  %insertElmt499 = insertelement <4 x float> %insertElmt498, float %1053, i32 2
  %insertElmt500 = insertelement <4 x float> %insertElmt499, float %1053, i32 3
  store <4 x float> %insertElmt500, <4 x float>* %allocaVec166, align 16
  %1054 = load <4 x float>, <4 x float>* %allocaVec166, align 16
  %Vop501 = fmul <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %1054
  %1055 = fmul float 2.000000e+00, %1053
  %1056 = load float, float* %60, align 4
  %insertElmt502 = insertelement <4 x float> undef, float %1056, i32 0
  %insertElmt503 = insertelement <4 x float> %insertElmt502, float %1056, i32 1
  %insertElmt504 = insertelement <4 x float> %insertElmt503, float %1056, i32 2
  %insertElmt505 = insertelement <4 x float> %insertElmt504, float %1056, i32 3
  store <4 x float> %insertElmt505, <4 x float>* %allocaVec167, align 16
  %1057 = load <4 x float>, <4 x float>* %allocaVec167, align 16
  %Vop506 = fsub <4 x float> %Vop501, %1057
  %1058 = fsub float %1055, %1056
  %1059 = load float, float* %63, align 4
  %1060 = load <4 x float>, <4 x float>* %allocaVec170, align 16
  %Vop507 = fdiv <4 x float> %Vop506, %1060
  store <4 x float> %Vop507, <4 x float>* %allocaVec173
  %1061 = fdiv float %1058, %1059
  store float %1061, float* %66, align 4
  %1062 = load float, float* %66, align 4
  %1063 = load float, float* %61, align 4
  %1064 = load <4 x float>, <4 x float>* %allocaVec168, align 16
  %1065 = load <4 x float>, <4 x float>* %allocaVec173, align 16
  %Vop508 = fmul <4 x float> %1064, %1065
  store <4 x float> %Vop508, <4 x float>* %allocaVec168
  %1066 = fmul float %1063, %1062
  store float %1066, float* %61, align 4
  %1067 = load float, float* %66, align 4
  %1068 = load float, float* %62, align 4
  %1069 = load <4 x float>, <4 x float>* %allocaVec169, align 16
  %1070 = load <4 x float>, <4 x float>* %allocaVec173, align 16
  %Vop509 = fmul <4 x float> %1069, %1070
  store <4 x float> %Vop509, <4 x float>* %allocaVec169
  %1071 = fmul float %1068, %1067
  store float %1071, float* %62, align 4
  %1072 = load float, float* %58, align 4
  %1073 = fpext float %1072 to double
  %1074 = load float, float* %59, align 4
  %insertElmt510 = insertelement <4 x float> undef, float %1074, i32 0
  %insertElmt511 = insertelement <4 x float> %insertElmt510, float %1074, i32 1
  %insertElmt512 = insertelement <4 x float> %insertElmt511, float %1074, i32 2
  %insertElmt513 = insertelement <4 x float> %insertElmt512, float %1074, i32 3
  store <4 x float> %insertElmt513, <4 x float>* %allocaVec166, align 16
  %1075 = load <4 x float>, <4 x float>* %allocaVec166, align 16
  %Vop514 = fmul <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %1075
  %1076 = fmul float 2.000000e+00, %1074
  %1077 = load float, float* %60, align 4
  %insertElmt515 = insertelement <4 x float> undef, float %1077, i32 0
  %insertElmt516 = insertelement <4 x float> %insertElmt515, float %1077, i32 1
  %insertElmt517 = insertelement <4 x float> %insertElmt516, float %1077, i32 2
  %insertElmt518 = insertelement <4 x float> %insertElmt517, float %1077, i32 3
  store <4 x float> %insertElmt518, <4 x float>* %allocaVec167, align 16
  %1078 = load <4 x float>, <4 x float>* %allocaVec167, align 16
  %Vop519 = fsub <4 x float> %Vop514, %1078
  %1079 = fsub float %1076, %1077
  %1080 = fpext float %1079 to double
  %1081 = call arm_aapcscc double @fabs(double %1080) #9
  store double %1073, double* %CastInst46
  %1082 = load double, double* %CastInst46, align 4
  %insertCast520 = insertelement <2 x double> undef, double %1082, i32 0
  %insertCast521 = insertelement <2 x double> %insertCast520, double %1082, i32 1
  store <2 x double> %insertCast521, <2 x double>* %CastInstVec47, align 4
  %1083 = load <2 x double>, <2 x double>* %CastInstVec47, align 4
  store double %1081, double* %CallInst66
  %1084 = load double, double* %CallInst66, align 4
  %insertCall522 = insertelement <2 x double> undef, double %1084, i32 0
  %insertCall523 = insertelement <2 x double> %insertCall522, double %1084, i32 1
  store <2 x double> %insertCall523, <2 x double>* %CallInstVec67, align 4
  %1085 = load <2 x double>, <2 x double>* %CallInstVec67, align 4
  %Vop524 = fadd <2 x double> %1083, %1085
  %1086 = fadd double %1073, %1081
  %1087 = fptrunc double %1086 to float
  store float %1087, float* %63, align 4
  %1088 = load float, float* %63, align 4
  %1089 = fcmp une float %1088, 0.000000e+00
  br i1 %1089, label %1090, label %1130

; <label>:1090:                                   ; preds = %1052
  %1091 = load float, float* %52, align 4
  %insertElmt525 = insertelement <4 x float> undef, float %1091, i32 0
  %insertElmt526 = insertelement <4 x float> %insertElmt525, float %1091, i32 1
  %insertElmt527 = insertelement <4 x float> %insertElmt526, float %1091, i32 2
  %insertElmt528 = insertelement <4 x float> %insertElmt527, float %1091, i32 3
  store <4 x float> %insertElmt528, <4 x float>* %allocaVec159, align 16
  %1092 = load float, float* %55, align 4
  %insertElmt529 = insertelement <4 x float> undef, float %1092, i32 0
  %insertElmt530 = insertelement <4 x float> %insertElmt529, float %1092, i32 1
  %insertElmt531 = insertelement <4 x float> %insertElmt530, float %1092, i32 2
  %insertElmt532 = insertelement <4 x float> %insertElmt531, float %1092, i32 3
  store <4 x float> %insertElmt532, <4 x float>* %allocaVec162, align 16
  %1093 = load <4 x float>, <4 x float>* %allocaVec159, align 16
  %1094 = load <4 x float>, <4 x float>* %allocaVec162, align 16
  %Vop533 = fadd <4 x float> %1093, %1094
  %1095 = fadd float %1091, %1092
  %Vop534 = fmul <4 x float> %Vop533, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1096 = fmul float %1095, 5.000000e-01
  %1097 = load float, float* %61, align 4
  %1098 = load <4 x float>, <4 x float>* %allocaVec168, align 16
  %Vop535 = fsub <4 x float> %Vop534, %1098
  store <4 x float> %Vop535, <4 x float>* %allocaVec168
  %1099 = fsub float %1096, %1097
  store float %1099, float* %61, align 4
  %1100 = load float, float* %52, align 4
  %insertElmt536 = insertelement <4 x float> undef, float %1100, i32 0
  %insertElmt537 = insertelement <4 x float> %insertElmt536, float %1100, i32 1
  %insertElmt538 = insertelement <4 x float> %insertElmt537, float %1100, i32 2
  %insertElmt539 = insertelement <4 x float> %insertElmt538, float %1100, i32 3
  store <4 x float> %insertElmt539, <4 x float>* %allocaVec159, align 16
  %1101 = load float, float* %55, align 4
  %insertElmt540 = insertelement <4 x float> undef, float %1101, i32 0
  %insertElmt541 = insertelement <4 x float> %insertElmt540, float %1101, i32 1
  %insertElmt542 = insertelement <4 x float> %insertElmt541, float %1101, i32 2
  %insertElmt543 = insertelement <4 x float> %insertElmt542, float %1101, i32 3
  store <4 x float> %insertElmt543, <4 x float>* %allocaVec162, align 16
  %1102 = load <4 x float>, <4 x float>* %allocaVec159, align 16
  %1103 = load <4 x float>, <4 x float>* %allocaVec162, align 16
  %Vop544 = fsub <4 x float> %1102, %1103
  %1104 = fsub float %1100, %1101
  %Vop545 = fmul <4 x float> %Vop544, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1105 = fmul float %1104, 5.000000e-01
  %1106 = load float, float* %62, align 4
  %1107 = load <4 x float>, <4 x float>* %allocaVec169, align 16
  %Vop546 = fsub <4 x float> %Vop545, %1107
  store <4 x float> %Vop546, <4 x float>* %allocaVec169
  %1108 = fsub float %1105, %1106
  store float %1108, float* %62, align 4
  %1109 = load float, float* %61, align 4
  %1110 = load float, float* %61, align 4
  %1111 = load <4 x float>, <4 x float>* %allocaVec168, align 16
  %1112 = load <4 x float>, <4 x float>* %allocaVec168, align 16
  %Vop547 = fmul <4 x float> %1111, %1112
  %1113 = fmul float %1109, %1110
  %1114 = load float, float* %62, align 4
  %1115 = load float, float* %62, align 4
  %1116 = load <4 x float>, <4 x float>* %allocaVec169, align 16
  %1117 = load <4 x float>, <4 x float>* %allocaVec169, align 16
  %Vop548 = fmul <4 x float> %1116, %1117
  %1118 = fmul float %1114, %1115
  %Vop549 = fadd <4 x float> %Vop547, %Vop548
  %1119 = fadd float %1113, %1118
  %1120 = fpext float %1119 to double
  %1121 = call arm_aapcscc double @sqrt(double %1120) #7
  %1122 = load float, float* %63, align 4
  %1123 = fpext float %1122 to double
  store double %1121, double* %CallInst68
  %1124 = load double, double* %CallInst68, align 4
  %insertCall550 = insertelement <2 x double> undef, double %1124, i32 0
  %insertCall551 = insertelement <2 x double> %insertCall550, double %1124, i32 1
  store <2 x double> %insertCall551, <2 x double>* %CallInstVec69, align 4
  %1125 = load <2 x double>, <2 x double>* %CallInstVec69, align 4
  store double %1123, double* %CastInst48
  %1126 = load double, double* %CastInst48, align 4
  %insertCast552 = insertelement <2 x double> undef, double %1126, i32 0
  %insertCast553 = insertelement <2 x double> %insertCast552, double %1126, i32 1
  store <2 x double> %insertCast553, <2 x double>* %CastInstVec49, align 4
  %1127 = load <2 x double>, <2 x double>* %CastInstVec49, align 4
  %Vop554 = fdiv <2 x double> %1125, %1127
  %1128 = fdiv double %1121, %1123
  %1129 = fptrunc double %1128 to float
  store float %1129, float* %63, align 4
  br label %1130

; <label>:1130:                                   ; preds = %1090, %1052
  %1131 = load float, float* %63, align 4
  %1132 = load i32, i32* %34, align 4
  %1133 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i32 0, i32 %1132
  store float %1131, float* %1133, align 4
  br label %1134

; <label>:1134:                                   ; preds = %1130
  %1135 = load i32, i32* %34, align 4
  %1136 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop555 = add <4 x i32> %1136, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop555, <4 x i32>* %allocaVec142
  %1137 = add nsw i32 %1135, 1
  store i32 %1137, i32* %34, align 4
  br label %883

; <label>:1138:                                   ; preds = %883
  %1139 = load i32, i32* @L3psycho_anal.cw_lower_index, align 4
  store i32 %1139, i32* %34, align 4
  br label %1140

; <label>:1140:                                   ; preds = %1368, %1138
  %1141 = load i32, i32* %34, align 4
  %1142 = load i32, i32* @L3psycho_anal.cw_upper_index, align 4
  %1143 = icmp slt i32 %1141, %1142
  br i1 %1143, label %1144, label %1372

; <label>:1144:                                   ; preds = %1140
  %1145 = load i32, i32* %34, align 4
  %1146 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop556 = add <4 x i32> %1146, <i32 2, i32 2, i32 2, i32 2>
  %1147 = add nsw i32 %1145, 2
  %Vop557 = sdiv <4 x i32> %Vop556, <i32 4, i32 4, i32 4, i32 4>
  store <4 x i32> %Vop557, <4 x i32>* %allocaVec143
  %1148 = sdiv i32 %1147, 4
  store i32 %1148, i32* %35, align 4
  %1149 = load i32, i32* %35, align 4
  %1150 = getelementptr inbounds [129 x float], [129 x float]* getelementptr inbounds ([3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 0), i32 0, i32 %1149
  %1151 = load float, float* %1150, align 4
  store float %1151, float* %68, align 4
  %1152 = load float, float* %68, align 4
  %1153 = fcmp une float %1152, 0.000000e+00
  br i1 %1153, label %1154, label %1189

; <label>:1154:                                   ; preds = %1144
  %1155 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %1156 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %1155, i32 0, i32 0
  %1157 = load i32, i32* %35, align 4
  %1158 = getelementptr inbounds [256 x float], [256 x float]* %1156, i32 0, i32 %1157
  %1159 = load float, float* %1158, align 4
  store float %1159, float* %73, align 4
  %1160 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %1161 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %1160, i32 0, i32 0
  %1162 = load i32, i32* %35, align 4
  %1163 = load <4 x i32>, <4 x i32>* %allocaVec143, align 16
  %Vop558 = sub <4 x i32> <i32 256, i32 256, i32 256, i32 256>, %1163
  %1164 = sub nsw i32 256, %1162
  %1165 = getelementptr inbounds [256 x float], [256 x float]* %1161, i32 0, i32 %1164
  %1166 = load float, float* %1165, align 4
  store float %1166, float* %74, align 4
  %1167 = load float, float* %73, align 4
  %insertElmt559 = insertelement <4 x float> undef, float %1167, i32 0
  %insertElmt560 = insertelement <4 x float> %insertElmt559, float %1167, i32 1
  %insertElmt561 = insertelement <4 x float> %insertElmt560, float %1167, i32 2
  %insertElmt562 = insertelement <4 x float> %insertElmt561, float %1167, i32 3
  store <4 x float> %insertElmt562, <4 x float>* %allocaVec180, align 16
  %1168 = load float, float* %74, align 4
  %insertElmt563 = insertelement <4 x float> undef, float %1168, i32 0
  %insertElmt564 = insertelement <4 x float> %insertElmt563, float %1168, i32 1
  %insertElmt565 = insertelement <4 x float> %insertElmt564, float %1168, i32 2
  %insertElmt566 = insertelement <4 x float> %insertElmt565, float %1168, i32 3
  store <4 x float> %insertElmt566, <4 x float>* %allocaVec181, align 16
  %1169 = load <4 x float>, <4 x float>* %allocaVec180, align 16
  %1170 = load <4 x float>, <4 x float>* %allocaVec181, align 16
  %Vop567 = fmul <4 x float> %1169, %1170
  store <4 x float> %Vop567, <4 x float>* %allocaVec177
  %1171 = fmul float %1167, %1168
  store float %1171, float* %70, align 4
  %1172 = load float, float* %73, align 4
  %insertElmt568 = insertelement <4 x float> undef, float %1172, i32 0
  %insertElmt569 = insertelement <4 x float> %insertElmt568, float %1172, i32 1
  %insertElmt570 = insertelement <4 x float> %insertElmt569, float %1172, i32 2
  %insertElmt571 = insertelement <4 x float> %insertElmt570, float %1172, i32 3
  store <4 x float> %insertElmt571, <4 x float>* %allocaVec180, align 16
  %1173 = load float, float* %73, align 4
  %insertElmt572 = insertelement <4 x float> undef, float %1173, i32 0
  %insertElmt573 = insertelement <4 x float> %insertElmt572, float %1173, i32 1
  %insertElmt574 = insertelement <4 x float> %insertElmt573, float %1173, i32 2
  %insertElmt575 = insertelement <4 x float> %insertElmt574, float %1173, i32 3
  store <4 x float> %insertElmt575, <4 x float>* %allocaVec180, align 16
  %1174 = load <4 x float>, <4 x float>* %allocaVec180, align 16
  %1175 = load <4 x float>, <4 x float>* %allocaVec180, align 16
  %Vop576 = fmul <4 x float> %1174, %1175
  %1176 = fmul float %1172, %1173
  %1177 = load float, float* %74, align 4
  %insertElmt577 = insertelement <4 x float> undef, float %1177, i32 0
  %insertElmt578 = insertelement <4 x float> %insertElmt577, float %1177, i32 1
  %insertElmt579 = insertelement <4 x float> %insertElmt578, float %1177, i32 2
  %insertElmt580 = insertelement <4 x float> %insertElmt579, float %1177, i32 3
  store <4 x float> %insertElmt580, <4 x float>* %allocaVec181, align 16
  %1178 = load float, float* %74, align 4
  %insertElmt581 = insertelement <4 x float> undef, float %1178, i32 0
  %insertElmt582 = insertelement <4 x float> %insertElmt581, float %1178, i32 1
  %insertElmt583 = insertelement <4 x float> %insertElmt582, float %1178, i32 2
  %insertElmt584 = insertelement <4 x float> %insertElmt583, float %1178, i32 3
  store <4 x float> %insertElmt584, <4 x float>* %allocaVec181, align 16
  %1179 = load <4 x float>, <4 x float>* %allocaVec181, align 16
  %1180 = load <4 x float>, <4 x float>* %allocaVec181, align 16
  %Vop585 = fmul <4 x float> %1179, %1180
  %1181 = fmul float %1177, %1178
  %Vop586 = fsub <4 x float> %Vop576, %Vop585
  %1182 = fsub float %1176, %1181
  %Vop587 = fmul <4 x float> %Vop586, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  store <4 x float> %Vop587, <4 x float>* %allocaVec178
  %1183 = fmul float %1182, 5.000000e-01
  store float %1183, float* %71, align 4
  %1184 = load float, float* %68, align 4
  store float %1184, float* %72, align 4
  %1185 = load float, float* %68, align 4
  %1186 = fpext float %1185 to double
  %1187 = call arm_aapcscc double @sqrt(double %1186) #7
  %1188 = fptrunc double %1187 to float
  store float %1188, float* %68, align 4
  br label %1190

; <label>:1189:                                   ; preds = %1144
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %allocaVec177
  store float 1.000000e+00, float* %70, align 4
  store <4 x float> zeroinitializer, <4 x float>* %allocaVec178
  store float 0.000000e+00, float* %71, align 4
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %allocaVec179
  store float 1.000000e+00, float* %72, align 4
  br label %1190

; <label>:1190:                                   ; preds = %1189, %1154
  %1191 = load i32, i32* %35, align 4
  %1192 = getelementptr inbounds [129 x float], [129 x float]* getelementptr inbounds ([3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 2), i32 0, i32 %1191
  %1193 = load float, float* %1192, align 4
  store float %1193, float* %69, align 4
  %1194 = load float, float* %69, align 4
  %1195 = fcmp une float %1194, 0.000000e+00
  br i1 %1195, label %1196, label %1255

; <label>:1196:                                   ; preds = %1190
  %1197 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %1198 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %1197, i32 0, i32 2
  %1199 = load i32, i32* %35, align 4
  %1200 = getelementptr inbounds [256 x float], [256 x float]* %1198, i32 0, i32 %1199
  %1201 = load float, float* %1200, align 4
  store float %1201, float* %75, align 4
  %1202 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %1203 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %1202, i32 0, i32 2
  %1204 = load i32, i32* %35, align 4
  %1205 = load <4 x i32>, <4 x i32>* %allocaVec143, align 16
  %Vop588 = sub <4 x i32> <i32 256, i32 256, i32 256, i32 256>, %1205
  %1206 = sub nsw i32 256, %1204
  %1207 = getelementptr inbounds [256 x float], [256 x float]* %1203, i32 0, i32 %1206
  %1208 = load float, float* %1207, align 4
  store float %1208, float* %76, align 4
  %1209 = load float, float* %71, align 4
  %1210 = load float, float* %70, align 4
  %1211 = load <4 x float>, <4 x float>* %allocaVec178, align 16
  %1212 = load <4 x float>, <4 x float>* %allocaVec177, align 16
  %Vop589 = fadd <4 x float> %1211, %1212
  %1213 = fadd float %1209, %1210
  %1214 = load float, float* %75, align 4
  %insertElmt590 = insertelement <4 x float> undef, float %1214, i32 0
  %insertElmt591 = insertelement <4 x float> %insertElmt590, float %1214, i32 1
  %insertElmt592 = insertelement <4 x float> %insertElmt591, float %1214, i32 2
  %insertElmt593 = insertelement <4 x float> %insertElmt592, float %1214, i32 3
  store <4 x float> %insertElmt593, <4 x float>* %allocaVec182, align 16
  %1215 = load float, float* %76, align 4
  %insertElmt594 = insertelement <4 x float> undef, float %1215, i32 0
  %insertElmt595 = insertelement <4 x float> %insertElmt594, float %1215, i32 1
  %insertElmt596 = insertelement <4 x float> %insertElmt595, float %1215, i32 2
  %insertElmt597 = insertelement <4 x float> %insertElmt596, float %1215, i32 3
  store <4 x float> %insertElmt597, <4 x float>* %allocaVec183, align 16
  %1216 = load <4 x float>, <4 x float>* %allocaVec182, align 16
  %1217 = load <4 x float>, <4 x float>* %allocaVec183, align 16
  %Vop598 = fadd <4 x float> %1216, %1217
  %1218 = fadd float %1214, %1215
  %Vop599 = fmul <4 x float> %Vop589, %Vop598
  %1219 = fmul float %1213, %1218
  %Vop600 = fmul <4 x float> %Vop599, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  store <4 x float> %Vop600, <4 x float>* %allocaVec184
  %1220 = fmul float %1219, 5.000000e-01
  store float %1220, float* %77, align 4
  %1221 = load float, float* %75, align 4
  %insertElmt601 = insertelement <4 x float> undef, float %1221, i32 0
  %insertElmt602 = insertelement <4 x float> %insertElmt601, float %1221, i32 1
  %insertElmt603 = insertelement <4 x float> %insertElmt602, float %1221, i32 2
  %insertElmt604 = insertelement <4 x float> %insertElmt603, float %1221, i32 3
  store <4 x float> %insertElmt604, <4 x float>* %allocaVec182, align 16
  %1222 = load <4 x float>, <4 x float>* %allocaVec182, align 16
  %Vop605 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %1222
  %1223 = fsub float -0.000000e+00, %1221
  %1224 = load float, float* %70, align 4
  %1225 = load <4 x float>, <4 x float>* %allocaVec177, align 16
  %Vop606 = fmul <4 x float> %Vop605, %1225
  %1226 = fmul float %1223, %1224
  %1227 = load float, float* %77, align 4
  %1228 = load <4 x float>, <4 x float>* %allocaVec184, align 16
  %Vop607 = fadd <4 x float> %Vop606, %1228
  store <4 x float> %Vop607, <4 x float>* %allocaVec185
  %1229 = load <4 x float>, <4 x float>* %allocaVec185, align 4
  %extractE609 = extractelement <4 x float> %1229, i64 0
  %extractE610 = extractelement <4 x float> %1229, i64 1
  %extractE611 = extractelement <4 x float> %1229, i64 2
  %sum612 = fadd float %extractE609, %extractE610
  %sum613 = fadd float %sum612, %extractE611
  %1230 = fadd float %1226, %1227
  %Fmul608 = fmul float %1230, 3.000000e+00
  store float %1230, float* %Recovery11
  %Fcmp614 = fcmp une float %sum613, %Fmul608
  br i1 %Fcmp614, label %1231, label %1235

; <label>:1231:                                   ; preds = %1196
  %remThree899 = fdiv float %sum613, %extractE609
  %FcmpThree900 = fcmp une float %remThree899, 3.000000e+00
  br i1 %FcmpThree900, label %1232, label %1233

; <label>:1232:                                   ; preds = %1231
  store float %1230, float* %Recovery11, align 4
  br label %1234

; <label>:1233:                                   ; preds = %1231
  store float %extractE609, float* %Recovery11, align 4
  br label %1234

; <label>:1234:                                   ; preds = %1233, %1232
  br label %1235

; <label>:1235:                                   ; preds = %1196, %1234
  %ReplaceInst930 = load float, float* %Recovery11, align 4
  store float %ReplaceInst930, float* %78, align 4
  %1236 = load float, float* %76, align 4
  %insertElmt615 = insertelement <4 x float> undef, float %1236, i32 0
  %insertElmt616 = insertelement <4 x float> %insertElmt615, float %1236, i32 1
  %insertElmt617 = insertelement <4 x float> %insertElmt616, float %1236, i32 2
  %insertElmt618 = insertelement <4 x float> %insertElmt617, float %1236, i32 3
  store <4 x float> %insertElmt618, <4 x float>* %allocaVec183, align 16
  %1237 = load <4 x float>, <4 x float>* %allocaVec183, align 16
  %Vop619 = fsub <4 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %1237
  %1238 = fsub float -0.000000e+00, %1236
  %1239 = load float, float* %71, align 4
  %1240 = load <4 x float>, <4 x float>* %allocaVec178, align 16
  %Vop620 = fmul <4 x float> %Vop619, %1240
  %1241 = fmul float %1238, %1239
  %1242 = load float, float* %77, align 4
  %1243 = load <4 x float>, <4 x float>* %allocaVec184, align 16
  %Vop621 = fadd <4 x float> %Vop620, %1243
  store <4 x float> %Vop621, <4 x float>* %allocaVec177
  %1244 = fadd float %1241, %1242
  store float %1244, float* %70, align 4
  %1245 = load float, float* %78, align 4
  store float %1245, float* %71, align 4
  %1246 = load float, float* %69, align 4
  %1247 = fpext float %1246 to double
  %1248 = call arm_aapcscc double @sqrt(double %1247) #7
  %1249 = fptrunc double %1248 to float
  store float %1249, float* %69, align 4
  %1250 = load float, float* %69, align 4
  %insertElmt622 = insertelement <4 x float> undef, float %1250, i32 0
  %insertElmt623 = insertelement <4 x float> %insertElmt622, float %1250, i32 1
  %insertElmt624 = insertelement <4 x float> %insertElmt623, float %1250, i32 2
  %insertElmt625 = insertelement <4 x float> %insertElmt624, float %1250, i32 3
  store <4 x float> %insertElmt625, <4 x float>* %allocaVec176, align 16
  %1251 = load float, float* %72, align 4
  %insertElmt626 = insertelement <4 x float> undef, float %1251, i32 0
  %insertElmt627 = insertelement <4 x float> %insertElmt626, float %1251, i32 1
  %insertElmt628 = insertelement <4 x float> %insertElmt627, float %1251, i32 2
  %insertElmt629 = insertelement <4 x float> %insertElmt628, float %1251, i32 3
  store <4 x float> %insertElmt629, <4 x float>* %allocaVec179, align 16
  %1252 = load <4 x float>, <4 x float>* %allocaVec179, align 16
  %1253 = load <4 x float>, <4 x float>* %allocaVec176, align 16
  %Vop630 = fmul <4 x float> %1252, %1253
  store <4 x float> %Vop630, <4 x float>* %allocaVec179
  %1254 = fmul float %1251, %1250
  store float %1254, float* %72, align 4
  br label %1256

; <label>:1255:                                   ; preds = %1190
  br label %1256

; <label>:1256:                                   ; preds = %1255, %1235
  %1257 = load float, float* %68, align 4
  %insertElmt631 = insertelement <4 x float> undef, float %1257, i32 0
  %insertElmt632 = insertelement <4 x float> %insertElmt631, float %1257, i32 1
  %insertElmt633 = insertelement <4 x float> %insertElmt632, float %1257, i32 2
  %insertElmt634 = insertelement <4 x float> %insertElmt633, float %1257, i32 3
  store <4 x float> %insertElmt634, <4 x float>* %allocaVec175, align 16
  %1258 = load <4 x float>, <4 x float>* %allocaVec175, align 16
  %Vop635 = fmul <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %1258
  %1259 = fmul float 2.000000e+00, %1257
  %1260 = load float, float* %69, align 4
  %insertElmt636 = insertelement <4 x float> undef, float %1260, i32 0
  %insertElmt637 = insertelement <4 x float> %insertElmt636, float %1260, i32 1
  %insertElmt638 = insertelement <4 x float> %insertElmt637, float %1260, i32 2
  %insertElmt639 = insertelement <4 x float> %insertElmt638, float %1260, i32 3
  store <4 x float> %insertElmt639, <4 x float>* %allocaVec176, align 16
  %1261 = load <4 x float>, <4 x float>* %allocaVec176, align 16
  %Vop640 = fsub <4 x float> %Vop635, %1261
  %1262 = fsub float %1259, %1260
  %1263 = load float, float* %72, align 4
  %1264 = load <4 x float>, <4 x float>* %allocaVec179, align 16
  %Vop641 = fdiv <4 x float> %Vop640, %1264
  store <4 x float> %Vop641, <4 x float>* %allocaVec186
  %1265 = fdiv float %1262, %1263
  store float %1265, float* %79, align 4
  %1266 = load float, float* %79, align 4
  %1267 = load float, float* %70, align 4
  %1268 = load <4 x float>, <4 x float>* %allocaVec177, align 16
  %1269 = load <4 x float>, <4 x float>* %allocaVec186, align 16
  %Vop642 = fmul <4 x float> %1268, %1269
  store <4 x float> %Vop642, <4 x float>* %allocaVec177
  %1270 = fmul float %1267, %1266
  store float %1270, float* %70, align 4
  %1271 = load float, float* %79, align 4
  %1272 = load float, float* %71, align 4
  %1273 = load <4 x float>, <4 x float>* %allocaVec178, align 16
  %1274 = load <4 x float>, <4 x float>* %allocaVec186, align 16
  %Vop643 = fmul <4 x float> %1273, %1274
  store <4 x float> %Vop643, <4 x float>* %allocaVec178
  %1275 = fmul float %1272, %1271
  store float %1275, float* %71, align 4
  %1276 = load i32, i32* %35, align 4
  %1277 = getelementptr inbounds [129 x float], [129 x float]* getelementptr inbounds ([3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 1), i32 0, i32 %1276
  %1278 = load float, float* %1277, align 4
  %1279 = fpext float %1278 to double
  %1280 = call arm_aapcscc double @sqrt(double %1279) #7
  %1281 = fptrunc double %1280 to float
  store float %1281, float* %67, align 4
  %1282 = load float, float* %67, align 4
  %1283 = fpext float %1282 to double
  %1284 = load float, float* %68, align 4
  %insertElmt644 = insertelement <4 x float> undef, float %1284, i32 0
  %insertElmt645 = insertelement <4 x float> %insertElmt644, float %1284, i32 1
  %insertElmt646 = insertelement <4 x float> %insertElmt645, float %1284, i32 2
  %insertElmt647 = insertelement <4 x float> %insertElmt646, float %1284, i32 3
  store <4 x float> %insertElmt647, <4 x float>* %allocaVec175, align 16
  %1285 = load <4 x float>, <4 x float>* %allocaVec175, align 16
  %Vop648 = fmul <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %1285
  %1286 = fmul float 2.000000e+00, %1284
  %1287 = load float, float* %69, align 4
  %insertElmt649 = insertelement <4 x float> undef, float %1287, i32 0
  %insertElmt650 = insertelement <4 x float> %insertElmt649, float %1287, i32 1
  %insertElmt651 = insertelement <4 x float> %insertElmt650, float %1287, i32 2
  %insertElmt652 = insertelement <4 x float> %insertElmt651, float %1287, i32 3
  store <4 x float> %insertElmt652, <4 x float>* %allocaVec176, align 16
  %1288 = load <4 x float>, <4 x float>* %allocaVec176, align 16
  %Vop653 = fsub <4 x float> %Vop648, %1288
  %1289 = fsub float %1286, %1287
  %1290 = fpext float %1289 to double
  %1291 = call arm_aapcscc double @fabs(double %1290) #9
  store double %1283, double* %CastInst50
  %1292 = load double, double* %CastInst50, align 4
  %insertCast654 = insertelement <2 x double> undef, double %1292, i32 0
  %insertCast655 = insertelement <2 x double> %insertCast654, double %1292, i32 1
  store <2 x double> %insertCast655, <2 x double>* %CastInstVec51, align 4
  %1293 = load <2 x double>, <2 x double>* %CastInstVec51, align 4
  store double %1291, double* %CallInst70
  %1294 = load double, double* %CallInst70, align 4
  %insertCall656 = insertelement <2 x double> undef, double %1294, i32 0
  %insertCall657 = insertelement <2 x double> %insertCall656, double %1294, i32 1
  store <2 x double> %insertCall657, <2 x double>* %CallInstVec71, align 4
  %1295 = load <2 x double>, <2 x double>* %CallInstVec71, align 4
  %Vop658 = fadd <2 x double> %1293, %1295
  %1296 = fadd double %1283, %1291
  %1297 = fptrunc double %1296 to float
  store float %1297, float* %72, align 4
  %1298 = load float, float* %72, align 4
  %1299 = fcmp une float %1298, 0.000000e+00
  br i1 %1299, label %1300, label %1352

; <label>:1300:                                   ; preds = %1256
  %1301 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %1302 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %1301, i32 0, i32 1
  %1303 = load i32, i32* %35, align 4
  %1304 = getelementptr inbounds [256 x float], [256 x float]* %1302, i32 0, i32 %1303
  %1305 = load float, float* %1304, align 4
  store float %1305, float* %80, align 4
  %1306 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %1307 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %1306, i32 0, i32 1
  %1308 = load i32, i32* %35, align 4
  %1309 = load <4 x i32>, <4 x i32>* %allocaVec143, align 16
  %Vop659 = sub <4 x i32> <i32 256, i32 256, i32 256, i32 256>, %1309
  %1310 = sub nsw i32 256, %1308
  %1311 = getelementptr inbounds [256 x float], [256 x float]* %1307, i32 0, i32 %1310
  %1312 = load float, float* %1311, align 4
  store float %1312, float* %81, align 4
  %1313 = load float, float* %80, align 4
  %insertElmt660 = insertelement <4 x float> undef, float %1313, i32 0
  %insertElmt661 = insertelement <4 x float> %insertElmt660, float %1313, i32 1
  %insertElmt662 = insertelement <4 x float> %insertElmt661, float %1313, i32 2
  %insertElmt663 = insertelement <4 x float> %insertElmt662, float %1313, i32 3
  store <4 x float> %insertElmt663, <4 x float>* %allocaVec187, align 16
  %1314 = load float, float* %81, align 4
  %insertElmt664 = insertelement <4 x float> undef, float %1314, i32 0
  %insertElmt665 = insertelement <4 x float> %insertElmt664, float %1314, i32 1
  %insertElmt666 = insertelement <4 x float> %insertElmt665, float %1314, i32 2
  %insertElmt667 = insertelement <4 x float> %insertElmt666, float %1314, i32 3
  store <4 x float> %insertElmt667, <4 x float>* %allocaVec188, align 16
  %1315 = load <4 x float>, <4 x float>* %allocaVec187, align 16
  %1316 = load <4 x float>, <4 x float>* %allocaVec188, align 16
  %Vop668 = fadd <4 x float> %1315, %1316
  %1317 = fadd float %1313, %1314
  %Vop669 = fmul <4 x float> %Vop668, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1318 = fmul float %1317, 5.000000e-01
  %1319 = load float, float* %70, align 4
  %1320 = load <4 x float>, <4 x float>* %allocaVec177, align 16
  %Vop670 = fsub <4 x float> %Vop669, %1320
  store <4 x float> %Vop670, <4 x float>* %allocaVec177
  %1321 = fsub float %1318, %1319
  store float %1321, float* %70, align 4
  %1322 = load float, float* %80, align 4
  %insertElmt671 = insertelement <4 x float> undef, float %1322, i32 0
  %insertElmt672 = insertelement <4 x float> %insertElmt671, float %1322, i32 1
  %insertElmt673 = insertelement <4 x float> %insertElmt672, float %1322, i32 2
  %insertElmt674 = insertelement <4 x float> %insertElmt673, float %1322, i32 3
  store <4 x float> %insertElmt674, <4 x float>* %allocaVec187, align 16
  %1323 = load float, float* %81, align 4
  %insertElmt675 = insertelement <4 x float> undef, float %1323, i32 0
  %insertElmt676 = insertelement <4 x float> %insertElmt675, float %1323, i32 1
  %insertElmt677 = insertelement <4 x float> %insertElmt676, float %1323, i32 2
  %insertElmt678 = insertelement <4 x float> %insertElmt677, float %1323, i32 3
  store <4 x float> %insertElmt678, <4 x float>* %allocaVec188, align 16
  %1324 = load <4 x float>, <4 x float>* %allocaVec187, align 16
  %1325 = load <4 x float>, <4 x float>* %allocaVec188, align 16
  %Vop679 = fsub <4 x float> %1324, %1325
  %1326 = fsub float %1322, %1323
  %Vop680 = fmul <4 x float> %Vop679, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1327 = fmul float %1326, 5.000000e-01
  %1328 = load float, float* %71, align 4
  %1329 = load <4 x float>, <4 x float>* %allocaVec178, align 16
  %Vop681 = fsub <4 x float> %Vop680, %1329
  store <4 x float> %Vop681, <4 x float>* %allocaVec178
  %1330 = fsub float %1327, %1328
  store float %1330, float* %71, align 4
  %1331 = load float, float* %70, align 4
  %1332 = load float, float* %70, align 4
  %1333 = load <4 x float>, <4 x float>* %allocaVec177, align 16
  %1334 = load <4 x float>, <4 x float>* %allocaVec177, align 16
  %Vop682 = fmul <4 x float> %1333, %1334
  %1335 = fmul float %1331, %1332
  %1336 = load float, float* %71, align 4
  %1337 = load float, float* %71, align 4
  %1338 = load <4 x float>, <4 x float>* %allocaVec178, align 16
  %1339 = load <4 x float>, <4 x float>* %allocaVec178, align 16
  %Vop683 = fmul <4 x float> %1338, %1339
  %1340 = fmul float %1336, %1337
  %Vop684 = fadd <4 x float> %Vop682, %Vop683
  %1341 = fadd float %1335, %1340
  %1342 = fpext float %1341 to double
  %1343 = call arm_aapcscc double @sqrt(double %1342) #7
  %1344 = load float, float* %72, align 4
  %1345 = fpext float %1344 to double
  store double %1343, double* %CallInst72
  %1346 = load double, double* %CallInst72, align 4
  %insertCall685 = insertelement <2 x double> undef, double %1346, i32 0
  %insertCall686 = insertelement <2 x double> %insertCall685, double %1346, i32 1
  store <2 x double> %insertCall686, <2 x double>* %CallInstVec73, align 4
  %1347 = load <2 x double>, <2 x double>* %CallInstVec73, align 4
  store double %1345, double* %CastInst52
  %1348 = load double, double* %CastInst52, align 4
  %insertCast687 = insertelement <2 x double> undef, double %1348, i32 0
  %insertCast688 = insertelement <2 x double> %insertCast687, double %1348, i32 1
  store <2 x double> %insertCast688, <2 x double>* %CastInstVec53, align 4
  %1349 = load <2 x double>, <2 x double>* %CastInstVec53, align 4
  %Vop689 = fdiv <2 x double> %1347, %1349
  %1350 = fdiv double %1343, %1345
  %1351 = fptrunc double %1350 to float
  store float %1351, float* %72, align 4
  br label %1352

; <label>:1352:                                   ; preds = %1300, %1256
  %1353 = load float, float* %72, align 4
  %1354 = load i32, i32* %34, align 4
  %1355 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i32 0, i32 %1354
  store float %1353, float* %1355, align 4
  %1356 = load i32, i32* %34, align 4
  %1357 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop690 = add <4 x i32> %1357, <i32 3, i32 3, i32 3, i32 3>
  %1358 = add nsw i32 %1356, 3
  %1359 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i32 0, i32 %1358
  store float %1353, float* %1359, align 4
  %1360 = load i32, i32* %34, align 4
  %1361 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop691 = add <4 x i32> %1361, <i32 2, i32 2, i32 2, i32 2>
  %1362 = add nsw i32 %1360, 2
  %1363 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i32 0, i32 %1362
  store float %1353, float* %1363, align 4
  %1364 = load i32, i32* %34, align 4
  %1365 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop692 = add <4 x i32> %1365, <i32 1, i32 1, i32 1, i32 1>
  %1366 = add nsw i32 %1364, 1
  %1367 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i32 0, i32 %1366
  store float %1353, float* %1367, align 4
  br label %1368

; <label>:1368:                                   ; preds = %1352
  %1369 = load i32, i32* %34, align 4
  %1370 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop693 = add <4 x i32> %1370, <i32 4, i32 4, i32 4, i32 4>
  store <4 x i32> %Vop693, <4 x i32>* %allocaVec142
  %1371 = add nsw i32 %1369, 4
  store i32 %1371, i32* %34, align 4
  br label %1140

; <label>:1372:                                   ; preds = %1140
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec140
  store i32 0, i32* %32, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec142
  store i32 0, i32* %34, align 4
  br label %1373

; <label>:1373:                                   ; preds = %1437, %1372
  %1374 = load i32, i32* %34, align 4
  %1375 = load i32, i32* @L3psycho_anal.cw_upper_index, align 4
  %1376 = icmp slt i32 %1374, %1375
  br i1 %1376, label %1377, label %1447

; <label>:1377:                                   ; preds = %1373
  %1378 = load i32, i32* %34, align 4
  %1379 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %1378
  %1380 = load float, float* %1379, align 4
  %1381 = fpext float %1380 to double
  store double %1381, double* %82, align 8
  %1382 = load i32, i32* %34, align 4
  %1383 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %1382
  %1384 = load float, float* %1383, align 4
  %1385 = load i32, i32* %34, align 4
  %1386 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i32 0, i32 %1385
  %1387 = load float, float* %1386, align 4
  %1388 = fmul float %1384, %1387
  %1389 = fpext float %1388 to double
  store double %1389, double* %83, align 8
  %1390 = load i32, i32* %34, align 4
  %1391 = add nsw i32 %1390, 1
  store i32 %1391, i32* %34, align 4
  %1392 = load i32, i32* %32, align 4
  %1393 = getelementptr inbounds [63 x i32], [63 x i32]* @L3psycho_anal.numlines_l, i32 0, i32 %1392
  %1394 = load i32, i32* %1393, align 4
  %1395 = sub nsw i32 %1394, 1
  store i32 %1395, i32* %84, align 4
  br label %1396

; <label>:1396:                                   ; preds = %1436, %1377
  %1397 = load i32, i32* %84, align 4
  %1398 = icmp sgt i32 %1397, 0
  br i1 %1398, label %1399, label %1437

; <label>:1399:                                   ; preds = %1396
  %1400 = load i32, i32* %34, align 4
  %1401 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %1400
  %1402 = load float, float* %1401, align 4
  %1403 = fpext float %1402 to double
  %1404 = load double, double* %82, align 8
  %insertElmt694 = insertelement <2 x double> undef, double %1404, i32 0
  %insertElmt695 = insertelement <2 x double> %insertElmt694, double %1404, i32 1
  store <2 x double> %insertElmt695, <2 x double>* %allocaVec189, align 16
  %1405 = load <2 x double>, <2 x double>* %allocaVec189, align 16
  store double %1403, double* %CastInst54
  %1406 = load double, double* %CastInst54, align 4
  %insertCast696 = insertelement <2 x double> undef, double %1406, i32 0
  %insertCast697 = insertelement <2 x double> %insertCast696, double %1406, i32 1
  store <2 x double> %insertCast697, <2 x double>* %CastInstVec55, align 4
  %1407 = load <2 x double>, <2 x double>* %CastInstVec55, align 4
  %Vop698 = fadd <2 x double> %1405, %1407
  store <2 x double> %Vop698, <2 x double>* %allocaVec189
  %1408 = load <2 x double>, <2 x double>* %allocaVec189, align 4
  %extractE700 = extractelement <2 x double> %1408, i64 0
  %extractE701 = extractelement <2 x double> %1408, i64 1
  %sum702 = fadd double %extractE700, %extractE701
  %sum703 = fadd double %sum702, %extractE701
  %1409 = fadd double %1404, %1403
  %Fmul699 = fmul double %1409, 3.000000e+00
  store double %1409, double* %Recovery12
  %Fcmp704 = fcmp une double %sum703, %Fmul699
  br i1 %Fcmp704, label %1410, label %1414

; <label>:1410:                                   ; preds = %1399
  %remThree901 = fdiv double %sum703, %extractE700
  %FcmpThree902 = fcmp une double %remThree901, 3.000000e+00
  br i1 %FcmpThree902, label %1411, label %1412

; <label>:1411:                                   ; preds = %1410
  store double %1409, double* %Recovery12, align 8
  br label %1413

; <label>:1412:                                   ; preds = %1410
  store double %extractE700, double* %Recovery12, align 8
  br label %1413

; <label>:1413:                                   ; preds = %1412, %1411
  br label %1414

; <label>:1414:                                   ; preds = %1399, %1413
  %ReplaceInst931 = load double, double* %Recovery12, align 8
  store double %ReplaceInst931, double* %82, align 8
  %1415 = load i32, i32* %34, align 4
  %1416 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %1415
  %1417 = load float, float* %1416, align 4
  %1418 = load i32, i32* %34, align 4
  %1419 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i32 0, i32 %1418
  %1420 = load float, float* %1419, align 4
  %1421 = fmul float %1417, %1420
  %1422 = fpext float %1421 to double
  %1423 = load double, double* %83, align 8
  %1424 = fadd double %1423, %1422
  store double %1424, double* %83, align 8
  %1425 = load i32, i32* %34, align 4
  %1426 = add nsw i32 %1425, 1
  store i32 %1426, i32* %34, align 4
  br label %1427

; <label>:1427:                                   ; preds = %1414
  %1428 = load i32, i32* %84, align 4
  %insertElmt705 = insertelement <4 x i32> undef, i32 %1428, i32 0
  %insertElmt706 = insertelement <4 x i32> %insertElmt705, i32 %1428, i32 1
  %insertElmt707 = insertelement <4 x i32> %insertElmt706, i32 %1428, i32 2
  %insertElmt708 = insertelement <4 x i32> %insertElmt707, i32 %1428, i32 3
  store <4 x i32> %insertElmt708, <4 x i32>* %allocaVec191, align 16
  %1429 = load <4 x i32>, <4 x i32>* %allocaVec191, align 16
  %Vop709 = add <4 x i32> %1429, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop709, <4 x i32>* %allocaVec191
  %1430 = load <4 x i32>, <4 x i32>* %allocaVec191, align 4
  %extractE711 = extractelement <4 x i32> %1430, i64 0
  %extractE712 = extractelement <4 x i32> %1430, i64 1
  %extractE713 = extractelement <4 x i32> %1430, i64 2
  %sum714 = add i32 %extractE711, %extractE712
  %sum715 = add i32 %sum714, %extractE713
  %1431 = add nsw i32 %1428, -1
  %Fmul710 = mul i32 %1431, 3
  store i32 %1431, i32* %Recovery14
  %Fcmp716 = icmp ne i32 %sum715, %Fmul710
  br i1 %Fcmp716, label %1432, label %1436

; <label>:1432:                                   ; preds = %1427
  %remThree903 = sdiv i32 %sum715, %extractE711
  %FcmpThree904 = icmp ne i32 %remThree903, 3
  br i1 %FcmpThree904, label %1433, label %1434

; <label>:1433:                                   ; preds = %1432
  store i32 %1431, i32* %Recovery14, align 4
  br label %1435

; <label>:1434:                                   ; preds = %1432
  store i32 %extractE711, i32* %Recovery14, align 4
  br label %1435

; <label>:1435:                                   ; preds = %1434, %1433
  br label %1436

; <label>:1436:                                   ; preds = %1427, %1435
  %ReplaceInst932 = load i32, i32* %Recovery14, align 4
  store i32 %ReplaceInst932, i32* %84, align 4
  br label %1396

; <label>:1437:                                   ; preds = %1396
  %1438 = load double, double* %82, align 8
  %1439 = load i32, i32* %32, align 4
  %1440 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1439
  store double %1438, double* %1440, align 8
  %1441 = load double, double* %83, align 8
  %1442 = load i32, i32* %32, align 4
  %1443 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.cb, i32 0, i32 %1442
  store double %1441, double* %1443, align 8
  %1444 = load i32, i32* %32, align 4
  %1445 = load <4 x i32>, <4 x i32>* %allocaVec140, align 16
  %Vop717 = add <4 x i32> %1445, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop717, <4 x i32>* %allocaVec140
  %1446 = add nsw i32 %1444, 1
  store i32 %1446, i32* %32, align 4
  br label %1373

; <label>:1447:                                   ; preds = %1373
  br label %1448

; <label>:1448:                                   ; preds = %1497, %1447
  %1449 = load i32, i32* %32, align 4
  %1450 = load i32, i32* @L3psycho_anal.npart_l_orig, align 4
  %1451 = icmp slt i32 %1449, %1450
  br i1 %1451, label %1452, label %1501

; <label>:1452:                                   ; preds = %1448
  %1453 = load i32, i32* %34, align 4
  %1454 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop718 = add <4 x i32> %1454, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop718, <4 x i32>* %allocaVec142
  %1455 = add nsw i32 %1453, 1
  store i32 %1455, i32* %34, align 4
  %1456 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %1453
  %1457 = load float, float* %1456, align 4
  %1458 = fpext float %1457 to double
  store double %1458, double* %86, align 8
  %1459 = load i32, i32* %32, align 4
  %1460 = getelementptr inbounds [63 x i32], [63 x i32]* @L3psycho_anal.numlines_l, i32 0, i32 %1459
  %1461 = load i32, i32* %1460, align 4
  %1462 = sub nsw i32 %1461, 1
  store i32 %1462, i32* %85, align 4
  br label %1463

; <label>:1463:                                   ; preds = %1487, %1452
  %1464 = load i32, i32* %85, align 4
  %1465 = icmp sgt i32 %1464, 0
  br i1 %1465, label %1466, label %1488

; <label>:1466:                                   ; preds = %1463
  %1467 = load i32, i32* %34, align 4
  %1468 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop719 = add <4 x i32> %1468, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop719, <4 x i32>* %allocaVec142
  %1469 = add nsw i32 %1467, 1
  store i32 %1469, i32* %34, align 4
  %1470 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %1467
  %1471 = load float, float* %1470, align 4
  %1472 = fpext float %1471 to double
  %1473 = load double, double* %86, align 8
  %insertElmt720 = insertelement <2 x double> undef, double %1473, i32 0
  %insertElmt721 = insertelement <2 x double> %insertElmt720, double %1473, i32 1
  store <2 x double> %insertElmt721, <2 x double>* %allocaVec193, align 16
  %1474 = load <2 x double>, <2 x double>* %allocaVec193, align 16
  store double %1472, double* %CastInst58
  %1475 = load double, double* %CastInst58, align 4
  %insertCast722 = insertelement <2 x double> undef, double %1475, i32 0
  %insertCast723 = insertelement <2 x double> %insertCast722, double %1475, i32 1
  store <2 x double> %insertCast723, <2 x double>* %CastInstVec59, align 4
  %1476 = load <2 x double>, <2 x double>* %CastInstVec59, align 4
  %Vop724 = fadd <2 x double> %1474, %1476
  store <2 x double> %Vop724, <2 x double>* %allocaVec193
  %1477 = fadd double %1473, %1472
  store double %1477, double* %86, align 8
  br label %1478

; <label>:1478:                                   ; preds = %1466
  %1479 = load i32, i32* %85, align 4
  %insertElmt725 = insertelement <4 x i32> undef, i32 %1479, i32 0
  %insertElmt726 = insertelement <4 x i32> %insertElmt725, i32 %1479, i32 1
  %insertElmt727 = insertelement <4 x i32> %insertElmt726, i32 %1479, i32 2
  %insertElmt728 = insertelement <4 x i32> %insertElmt727, i32 %1479, i32 3
  store <4 x i32> %insertElmt728, <4 x i32>* %allocaVec192, align 16
  %1480 = load <4 x i32>, <4 x i32>* %allocaVec192, align 16
  %Vop729 = add <4 x i32> %1480, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop729, <4 x i32>* %allocaVec192
  %1481 = load <4 x i32>, <4 x i32>* %allocaVec192, align 4
  %extractE731 = extractelement <4 x i32> %1481, i64 0
  %extractE732 = extractelement <4 x i32> %1481, i64 1
  %extractE733 = extractelement <4 x i32> %1481, i64 2
  %sum734 = add i32 %extractE731, %extractE732
  %sum735 = add i32 %sum734, %extractE733
  %1482 = add nsw i32 %1479, -1
  %Fmul730 = mul i32 %1482, 3
  store i32 %1482, i32* %Recovery15
  %Fcmp736 = icmp ne i32 %sum735, %Fmul730
  br i1 %Fcmp736, label %1483, label %1487

; <label>:1483:                                   ; preds = %1478
  %remThree905 = sdiv i32 %sum735, %extractE731
  %FcmpThree906 = icmp ne i32 %remThree905, 3
  br i1 %FcmpThree906, label %1484, label %1485

; <label>:1484:                                   ; preds = %1483
  store i32 %1482, i32* %Recovery15, align 4
  br label %1486

; <label>:1485:                                   ; preds = %1483
  store i32 %extractE731, i32* %Recovery15, align 4
  br label %1486

; <label>:1486:                                   ; preds = %1485, %1484
  br label %1487

; <label>:1487:                                   ; preds = %1478, %1486
  %ReplaceInst933 = load i32, i32* %Recovery15, align 4
  store i32 %ReplaceInst933, i32* %85, align 4
  br label %1463

; <label>:1488:                                   ; preds = %1463
  %1489 = load double, double* %86, align 8
  %1490 = load i32, i32* %32, align 4
  %1491 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1490
  store double %1489, double* %1491, align 8
  %1492 = load double, double* %86, align 8
  %1493 = load <2 x double>, <2 x double>* %allocaVec193, align 16
  %Vop737 = fmul <2 x double> %1493, <double 4.000000e-01, double 4.000000e-01>
  %1494 = fmul double %1492, 4.000000e-01
  %1495 = load i32, i32* %32, align 4
  %1496 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.cb, i32 0, i32 %1495
  store double %1494, double* %1496, align 8
  br label %1497

; <label>:1497:                                   ; preds = %1488
  %1498 = load i32, i32* %32, align 4
  %1499 = load <4 x i32>, <4 x i32>* %allocaVec140, align 16
  %Vop738 = add <4 x i32> %1499, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop738, <4 x i32>* %allocaVec140
  %1500 = add nsw i32 %1498, 1
  store i32 %1500, i32* %32, align 4
  br label %1448

; <label>:1501:                                   ; preds = %1448
  %1502 = load i32, i32* %31, align 4
  %1503 = getelementptr inbounds [4 x double], [4 x double]* @L3psycho_anal.pe, i32 0, i32 %1502
  store double 0.000000e+00, double* %1503, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec140
  store i32 0, i32* %32, align 4
  br label %1504

; <label>:1504:                                   ; preds = %1720, %1501
  %1505 = load i32, i32* %32, align 4
  %1506 = load i32, i32* @L3psycho_anal.npart_l, align 4
  %1507 = icmp slt i32 %1505, %1506
  br i1 %1507, label %1508, label %1724

; <label>:1508:                                   ; preds = %1504
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec195
  store double 0.000000e+00, double* %88, align 8
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec196
  store double 0.000000e+00, double* %89, align 8
  %1509 = load i32, i32* %32, align 4
  %1510 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i32 0, i32 %1509
  %1511 = getelementptr inbounds [2 x i32], [2 x i32]* %1510, i32 0, i32 0
  %1512 = load i32, i32* %1511, align 4
  store i32 %1512, i32* %35, align 4
  br label %1513

; <label>:1513:                                   ; preds = %1543, %1508
  %1514 = load i32, i32* %35, align 4
  %1515 = load i32, i32* %32, align 4
  %1516 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i32 0, i32 %1515
  %1517 = getelementptr inbounds [2 x i32], [2 x i32]* %1516, i32 0, i32 1
  %1518 = load i32, i32* %1517, align 4
  %1519 = icmp sle i32 %1514, %1518
  br i1 %1519, label %1520, label %1547

; <label>:1520:                                   ; preds = %1513
  %1521 = load i32, i32* %32, align 4
  %1522 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i32 0, i32 %1521
  %1523 = load i32, i32* %35, align 4
  %1524 = getelementptr inbounds [64 x double], [64 x double]* %1522, i32 0, i32 %1523
  %1525 = load double, double* %1524, align 8
  %1526 = load i32, i32* %35, align 4
  %1527 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1526
  %1528 = load double, double* %1527, align 8
  %1529 = fmul double %1525, %1528
  %1530 = load double, double* %88, align 8
  %1531 = fadd double %1530, %1529
  store double %1531, double* %88, align 8
  %1532 = load i32, i32* %32, align 4
  %1533 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i32 0, i32 %1532
  %1534 = load i32, i32* %35, align 4
  %1535 = getelementptr inbounds [64 x double], [64 x double]* %1533, i32 0, i32 %1534
  %1536 = load double, double* %1535, align 8
  %1537 = load i32, i32* %35, align 4
  %1538 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.cb, i32 0, i32 %1537
  %1539 = load double, double* %1538, align 8
  %1540 = fmul double %1536, %1539
  %1541 = load double, double* %89, align 8
  %1542 = fadd double %1541, %1540
  store double %1542, double* %89, align 8
  br label %1543

; <label>:1543:                                   ; preds = %1520
  %1544 = load i32, i32* %35, align 4
  %1545 = load <4 x i32>, <4 x i32>* %allocaVec143, align 16
  %Vop739 = add <4 x i32> %1545, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop739, <4 x i32>* %allocaVec143
  %1546 = add nsw i32 %1544, 1
  store i32 %1546, i32* %35, align 4
  br label %1513

; <label>:1547:                                   ; preds = %1513
  %1548 = load double, double* %88, align 8
  store double %1548, double* %87, align 8
  %1549 = load double, double* %87, align 8
  %1550 = fcmp une double %1549, 0.000000e+00
  br i1 %1550, label %1551, label %1575

; <label>:1551:                                   ; preds = %1547
  %1552 = load double, double* %89, align 8
  %insertElmt740 = insertelement <2 x double> undef, double %1552, i32 0
  %insertElmt741 = insertelement <2 x double> %insertElmt740, double %1552, i32 1
  store <2 x double> %insertElmt741, <2 x double>* %allocaVec196, align 16
  %1553 = load double, double* %87, align 8
  %insertElmt742 = insertelement <2 x double> undef, double %1553, i32 0
  %insertElmt743 = insertelement <2 x double> %insertElmt742, double %1553, i32 1
  store <2 x double> %insertElmt743, <2 x double>* %allocaVec194, align 16
  %1554 = load <2 x double>, <2 x double>* %allocaVec196, align 16
  %1555 = load <2 x double>, <2 x double>* %allocaVec194, align 16
  %Vop744 = fdiv <2 x double> %1554, %1555
  store <2 x double> %Vop744, <2 x double>* %allocaVec194
  %1556 = fdiv double %1552, %1553
  store double %1556, double* %87, align 8
  %1557 = load double, double* %87, align 8
  %1558 = fcmp ole double %1557, 0x3FA8F6869E6F084D
  br i1 %1558, label %1559, label %1561

; <label>:1559:                                   ; preds = %1551
  %1560 = call arm_aapcscc double @exp(double 0xC0061AD547A6661A) #7
  store double %1560, double* %87, align 8
  br label %1574

; <label>:1561:                                   ; preds = %1551
  %1562 = load double, double* %87, align 8
  %1563 = fcmp ogt double %1562, 0x3FDFEDFBDEEA22F7
  br i1 %1563, label %1564, label %1565

; <label>:1564:                                   ; preds = %1561
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %allocaVec194
  store double 1.000000e+00, double* %87, align 8
  br label %1573

; <label>:1565:                                   ; preds = %1561
  %1566 = load double, double* %87, align 8
  %1567 = call arm_aapcscc double @log(double %1566) #7
  store double %1567, double* %87, align 8
  %1568 = load double, double* %87, align 8
  %1569 = load <2 x double>, <2 x double>* %allocaVec194, align 16
  %Vop745 = fmul <2 x double> <double 0x3FF30298B36105E3, double 0x3FF30298B36105E3>, %1569
  %1570 = fmul double 0x3FF30298B36105E3, %1568
  %Vop746 = fadd <2 x double> <double 0x3FEA6FF6E4078667, double 0x3FEA6FF6E4078667>, %Vop745
  %1571 = fadd double 0x3FEA6FF6E4078667, %1570
  %1572 = call arm_aapcscc double @exp(double %1571) #7
  store double %1572, double* %87, align 8
  br label %1573

; <label>:1573:                                   ; preds = %1565, %1564
  br label %1574

; <label>:1574:                                   ; preds = %1573, %1559
  br label %1575

; <label>:1575:                                   ; preds = %1574, %1547
  %1576 = load i32, i32* %32, align 4
  %1577 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.minval, i32 0, i32 %1576
  %1578 = load double, double* %1577, align 8
  %1579 = load double, double* %87, align 8
  %1580 = fcmp olt double %1578, %1579
  br i1 %1580, label %1581, label %1585

; <label>:1581:                                   ; preds = %1575
  %1582 = load i32, i32* %32, align 4
  %1583 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.minval, i32 0, i32 %1582
  %1584 = load double, double* %1583, align 8
  br label %1587

; <label>:1585:                                   ; preds = %1575
  %1586 = load double, double* %87, align 8
  br label %1587

; <label>:1587:                                   ; preds = %1585, %1581
  %1588 = phi double [ %1584, %1581 ], [ %1586, %1585 ]
  store double %1588, double* %87, align 8
  %1589 = load double, double* %87, align 8
  %1590 = load double, double* %88, align 8
  %insertElmt747 = insertelement <2 x double> undef, double %1590, i32 0
  %insertElmt748 = insertelement <2 x double> %insertElmt747, double %1590, i32 1
  store <2 x double> %insertElmt748, <2 x double>* %allocaVec195, align 16
  %1591 = load <2 x double>, <2 x double>* %allocaVec195, align 16
  %1592 = load <2 x double>, <2 x double>* %allocaVec194, align 16
  %Vop749 = fmul <2 x double> %1591, %1592
  store <2 x double> %Vop749, <2 x double>* %allocaVec195
  %1593 = load <2 x double>, <2 x double>* %allocaVec195, align 4
  %extractE751 = extractelement <2 x double> %1593, i64 0
  %extractE752 = extractelement <2 x double> %1593, i64 1
  %sum753 = fadd double %extractE751, %extractE752
  %sum754 = fadd double %sum753, %extractE752
  %1594 = fmul double %1590, %1589
  %Fmul750 = fmul double %1594, 3.000000e+00
  store double %1594, double* %Recovery16
  %Fcmp755 = fcmp une double %sum754, %Fmul750
  br i1 %Fcmp755, label %1595, label %1599

; <label>:1595:                                   ; preds = %1587
  %remThree907 = fdiv double %sum754, %extractE751
  %FcmpThree908 = fcmp une double %remThree907, 3.000000e+00
  br i1 %FcmpThree908, label %1596, label %1597

; <label>:1596:                                   ; preds = %1595
  store double %1594, double* %Recovery16, align 8
  br label %1598

; <label>:1597:                                   ; preds = %1595
  store double %extractE751, double* %Recovery16, align 8
  br label %1598

; <label>:1598:                                   ; preds = %1597, %1596
  br label %1599

; <label>:1599:                                   ; preds = %1587, %1598
  %ReplaceInst934 = load double, double* %Recovery16, align 8
  store double %ReplaceInst934, double* %88, align 8
  %1600 = load double, double* %88, align 8
  %1601 = load i32, i32* %31, align 4
  %1602 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_1, i32 0, i32 %1601
  %1603 = load i32, i32* %32, align 4
  %1604 = getelementptr inbounds [63 x double], [63 x double]* %1602, i32 0, i32 %1603
  %1605 = load double, double* %1604, align 8
  %1606 = fmul double 2.000000e+00, %1605
  %1607 = load i32, i32* %31, align 4
  %1608 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_2, i32 0, i32 %1607
  %1609 = load i32, i32* %32, align 4
  %1610 = getelementptr inbounds [63 x double], [63 x double]* %1608, i32 0, i32 %1609
  %1611 = load double, double* %1610, align 8
  %1612 = fmul double 1.600000e+01, %1611
  %1613 = fcmp olt double %1606, %1612
  br i1 %1613, label %1614, label %1621

; <label>:1614:                                   ; preds = %1599
  %1615 = load i32, i32* %31, align 4
  %1616 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_1, i32 0, i32 %1615
  %1617 = load i32, i32* %32, align 4
  %1618 = getelementptr inbounds [63 x double], [63 x double]* %1616, i32 0, i32 %1617
  %1619 = load double, double* %1618, align 8
  %1620 = fmul double 2.000000e+00, %1619
  br label %1628

; <label>:1621:                                   ; preds = %1599
  %1622 = load i32, i32* %31, align 4
  %1623 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_2, i32 0, i32 %1622
  %1624 = load i32, i32* %32, align 4
  %1625 = getelementptr inbounds [63 x double], [63 x double]* %1623, i32 0, i32 %1624
  %1626 = load double, double* %1625, align 8
  %1627 = fmul double 1.600000e+01, %1626
  br label %1628

; <label>:1628:                                   ; preds = %1621, %1614
  %1629 = phi double [ %1620, %1614 ], [ %1627, %1621 ]
  %1630 = fcmp olt double %1600, %1629
  br i1 %1630, label %1631, label %1633

; <label>:1631:                                   ; preds = %1628
  %1632 = load double, double* %88, align 8
  br label %1663

; <label>:1633:                                   ; preds = %1628
  %1634 = load i32, i32* %31, align 4
  %1635 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_1, i32 0, i32 %1634
  %1636 = load i32, i32* %32, align 4
  %1637 = getelementptr inbounds [63 x double], [63 x double]* %1635, i32 0, i32 %1636
  %1638 = load double, double* %1637, align 8
  %1639 = fmul double 2.000000e+00, %1638
  %1640 = load i32, i32* %31, align 4
  %1641 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_2, i32 0, i32 %1640
  %1642 = load i32, i32* %32, align 4
  %1643 = getelementptr inbounds [63 x double], [63 x double]* %1641, i32 0, i32 %1642
  %1644 = load double, double* %1643, align 8
  %1645 = fmul double 1.600000e+01, %1644
  %1646 = fcmp olt double %1639, %1645
  br i1 %1646, label %1647, label %1654

; <label>:1647:                                   ; preds = %1633
  %1648 = load i32, i32* %31, align 4
  %1649 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_1, i32 0, i32 %1648
  %1650 = load i32, i32* %32, align 4
  %1651 = getelementptr inbounds [63 x double], [63 x double]* %1649, i32 0, i32 %1650
  %1652 = load double, double* %1651, align 8
  %1653 = fmul double 2.000000e+00, %1652
  br label %1661

; <label>:1654:                                   ; preds = %1633
  %1655 = load i32, i32* %31, align 4
  %1656 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_2, i32 0, i32 %1655
  %1657 = load i32, i32* %32, align 4
  %1658 = getelementptr inbounds [63 x double], [63 x double]* %1656, i32 0, i32 %1657
  %1659 = load double, double* %1658, align 8
  %1660 = fmul double 1.600000e+01, %1659
  br label %1661

; <label>:1661:                                   ; preds = %1654, %1647
  %1662 = phi double [ %1653, %1647 ], [ %1660, %1654 ]
  br label %1663

; <label>:1663:                                   ; preds = %1661, %1631
  %1664 = phi double [ %1632, %1631 ], [ %1662, %1661 ]
  store double %1664, double* %90, align 8
  %1665 = load i32, i32* %32, align 4
  %1666 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.qthr_l, i32 0, i32 %1665
  %1667 = load double, double* %1666, align 8
  %1668 = load double, double* %90, align 8
  %1669 = fcmp ogt double %1667, %1668
  br i1 %1669, label %1670, label %1674

; <label>:1670:                                   ; preds = %1663
  %1671 = load i32, i32* %32, align 4
  %1672 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.qthr_l, i32 0, i32 %1671
  %1673 = load double, double* %1672, align 8
  br label %1676

; <label>:1674:                                   ; preds = %1663
  %1675 = load double, double* %90, align 8
  br label %1676

; <label>:1676:                                   ; preds = %1674, %1670
  %1677 = phi double [ %1673, %1670 ], [ %1675, %1674 ]
  %1678 = load i32, i32* %32, align 4
  %1679 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %1678
  store double %1677, double* %1679, align 8
  %1680 = load i32, i32* %31, align 4
  %1681 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_1, i32 0, i32 %1680
  %1682 = load i32, i32* %32, align 4
  %1683 = getelementptr inbounds [63 x double], [63 x double]* %1681, i32 0, i32 %1682
  %1684 = load double, double* %1683, align 8
  %1685 = load i32, i32* %31, align 4
  %1686 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_2, i32 0, i32 %1685
  %1687 = load i32, i32* %32, align 4
  %1688 = getelementptr inbounds [63 x double], [63 x double]* %1686, i32 0, i32 %1687
  store double %1684, double* %1688, align 8
  %1689 = load double, double* %88, align 8
  %1690 = load i32, i32* %31, align 4
  %1691 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_1, i32 0, i32 %1690
  %1692 = load i32, i32* %32, align 4
  %1693 = getelementptr inbounds [63 x double], [63 x double]* %1691, i32 0, i32 %1692
  store double %1689, double* %1693, align 8
  %1694 = load i32, i32* %32, align 4
  %1695 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %1694
  %1696 = load double, double* %1695, align 8
  %1697 = load i32, i32* %32, align 4
  %1698 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1697
  %1699 = load double, double* %1698, align 8
  %1700 = fcmp olt double %1696, %1699
  br i1 %1700, label %1701, label %1719

; <label>:1701:                                   ; preds = %1676
  %1702 = load i32, i32* %32, align 4
  %1703 = getelementptr inbounds [63 x i32], [63 x i32]* @L3psycho_anal.numlines_l, i32 0, i32 %1702
  %1704 = load i32, i32* %1703, align 4
  %1705 = sitofp i32 %1704 to double
  %1706 = load i32, i32* %32, align 4
  %1707 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %1706
  %1708 = load double, double* %1707, align 8
  %1709 = load i32, i32* %32, align 4
  %1710 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1709
  %1711 = load double, double* %1710, align 8
  %1712 = fdiv double %1708, %1711
  %1713 = call arm_aapcscc double @log(double %1712) #7
  %1714 = fmul double %1705, %1713
  %1715 = load i32, i32* %31, align 4
  %1716 = getelementptr inbounds [4 x double], [4 x double]* @L3psycho_anal.pe, i32 0, i32 %1715
  %1717 = load double, double* %1716, align 8
  %1718 = fsub double %1717, %1714
  store double %1718, double* %1716, align 8
  br label %1719

; <label>:1719:                                   ; preds = %1701, %1676
  br label %1720

; <label>:1720:                                   ; preds = %1719
  %1721 = load i32, i32* %32, align 4
  %1722 = load <4 x i32>, <4 x i32>* %allocaVec140, align 16
  %Vop756 = add <4 x i32> %1722, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop756, <4 x i32>* %allocaVec140
  %1723 = add nsw i32 %1721, 1
  store i32 %1723, i32* %32, align 4
  br label %1504

; <label>:1724:                                   ; preds = %1504
  %1725 = load i32, i32* %31, align 4
  %1726 = icmp slt i32 %1725, 2
  br i1 %1726, label %1727, label %1832

; <label>:1727:                                   ; preds = %1724
  %1728 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %1729 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1728, i32 0, i32 37
  %1730 = load i32, i32* %1729, align 4
  %1731 = icmp ne i32 %1730, 0
  br i1 %1731, label %1732, label %1735

; <label>:1732:                                   ; preds = %1727
  %1733 = load i32, i32* %31, align 4
  %1734 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 %1733
  store i32 1, i32* %1734, align 4
  br label %1831

; <label>:1735:                                   ; preds = %1727
  %1736 = load i32, i32* %31, align 4
  %1737 = getelementptr inbounds [4 x double], [4 x double]* @L3psycho_anal.pe, i32 0, i32 %1736
  %1738 = load double, double* %1737, align 8
  %1739 = fcmp ogt double %1738, 3.000000e+03
  br i1 %1739, label %1740, label %1743

; <label>:1740:                                   ; preds = %1735
  %1741 = load i32, i32* %31, align 4
  %1742 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 %1741
  store i32 0, i32* %1742, align 4
  br label %1830

; <label>:1743:                                   ; preds = %1735
  store <4 x float> zeroinitializer, <4 x float>* %allocaVec200
  store float 0.000000e+00, float* %93, align 4
  store <4 x float> zeroinitializer, <4 x float>* %allocaVec201
  store float 0.000000e+00, float* %94, align 4
  store <4 x float> zeroinitializer, <4 x float>* %allocaVec202
  store float 0.000000e+00, float* %95, align 4
  store <4 x i32> <i32 64, i32 64, i32 64, i32 64>, <4 x i32>* %allocaVec142
  store i32 64, i32* %34, align 4
  br label %1744

; <label>:1744:                                   ; preds = %1763, %1743
  %1745 = load i32, i32* %34, align 4
  %1746 = icmp slt i32 %1745, 129
  br i1 %1746, label %1747, label %1767

; <label>:1747:                                   ; preds = %1744
  %1748 = load i32, i32* %34, align 4
  %1749 = getelementptr inbounds [129 x float], [129 x float]* getelementptr inbounds ([3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 0), i32 0, i32 %1748
  %1750 = load float, float* %1749, align 4
  %1751 = load float, float* %93, align 4
  %1752 = fadd float %1751, %1750
  store float %1752, float* %93, align 4
  %1753 = load i32, i32* %34, align 4
  %1754 = getelementptr inbounds [129 x float], [129 x float]* getelementptr inbounds ([3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 1), i32 0, i32 %1753
  %1755 = load float, float* %1754, align 4
  %1756 = load float, float* %94, align 4
  %1757 = fadd float %1756, %1755
  store float %1757, float* %94, align 4
  %1758 = load i32, i32* %34, align 4
  %1759 = getelementptr inbounds [129 x float], [129 x float]* getelementptr inbounds ([3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 2), i32 0, i32 %1758
  %1760 = load float, float* %1759, align 4
  %1761 = load float, float* %95, align 4
  %1762 = fadd float %1761, %1760
  store float %1762, float* %95, align 4
  br label %1763

; <label>:1763:                                   ; preds = %1747
  %1764 = load i32, i32* %34, align 4
  %1765 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop757 = add <4 x i32> %1765, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop757, <4 x i32>* %allocaVec142
  %1766 = add nsw i32 %1764, 1
  store i32 %1766, i32* %34, align 4
  br label %1744

; <label>:1767:                                   ; preds = %1744
  %1768 = load float, float* %93, align 4
  %1769 = load float, float* %94, align 4
  %1770 = fcmp olt float %1768, %1769
  br i1 %1770, label %1771, label %1773

; <label>:1771:                                   ; preds = %1767
  %1772 = load float, float* %93, align 4
  br label %1775

; <label>:1773:                                   ; preds = %1767
  %1774 = load float, float* %94, align 4
  br label %1775

; <label>:1775:                                   ; preds = %1773, %1771
  %1776 = phi float [ %1772, %1771 ], [ %1774, %1773 ]
  store float %1776, float* %91, align 4
  %1777 = load float, float* %91, align 4
  %1778 = load float, float* %95, align 4
  %1779 = fcmp olt float %1777, %1778
  br i1 %1779, label %1780, label %1782

; <label>:1780:                                   ; preds = %1775
  %1781 = load float, float* %91, align 4
  br label %1784

; <label>:1782:                                   ; preds = %1775
  %1783 = load float, float* %95, align 4
  br label %1784

; <label>:1784:                                   ; preds = %1782, %1780
  %1785 = phi float [ %1781, %1780 ], [ %1783, %1782 ]
  store float %1785, float* %91, align 4
  %1786 = load float, float* %93, align 4
  %1787 = load float, float* %94, align 4
  %1788 = fcmp ogt float %1786, %1787
  br i1 %1788, label %1789, label %1791

; <label>:1789:                                   ; preds = %1784
  %1790 = load float, float* %93, align 4
  br label %1793

; <label>:1791:                                   ; preds = %1784
  %1792 = load float, float* %94, align 4
  br label %1793

; <label>:1793:                                   ; preds = %1791, %1789
  %1794 = phi float [ %1790, %1789 ], [ %1792, %1791 ]
  store float %1794, float* %92, align 4
  %1795 = load float, float* %92, align 4
  %1796 = load float, float* %95, align 4
  %1797 = fcmp ogt float %1795, %1796
  br i1 %1797, label %1798, label %1800

; <label>:1798:                                   ; preds = %1793
  %1799 = load float, float* %92, align 4
  br label %1802

; <label>:1800:                                   ; preds = %1793
  %1801 = load float, float* %95, align 4
  br label %1802

; <label>:1802:                                   ; preds = %1800, %1798
  %1803 = phi float [ %1799, %1798 ], [ %1801, %1800 ]
  store float %1803, float* %92, align 4
  %1804 = load i32, i32* %31, align 4
  %1805 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 %1804
  store i32 1, i32* %1805, align 4
  %1806 = load float, float* %92, align 4
  %1807 = load float, float* %91, align 4
  %insertElmt758 = insertelement <4 x float> undef, float %1807, i32 0
  %insertElmt759 = insertelement <4 x float> %insertElmt758, float %1807, i32 1
  %insertElmt760 = insertelement <4 x float> %insertElmt759, float %1807, i32 2
  %insertElmt761 = insertelement <4 x float> %insertElmt760, float %1807, i32 3
  store <4 x float> %insertElmt761, <4 x float>* %allocaVec198, align 16
  %1808 = load <4 x float>, <4 x float>* %allocaVec198, align 16
  %Vop762 = fmul <4 x float> <float 3.000000e+01, float 3.000000e+01, float 3.000000e+01, float 3.000000e+01>, %1808
  %1809 = fmul float 3.000000e+01, %1807
  %1810 = fcmp ogt float %1806, %1809
  br i1 %1810, label %1811, label %1814

; <label>:1811:                                   ; preds = %1802
  %1812 = load i32, i32* %31, align 4
  %1813 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 %1812
  store i32 0, i32* %1813, align 4
  br label %1829

; <label>:1814:                                   ; preds = %1802
  %1815 = load float, float* %92, align 4
  %1816 = load float, float* %91, align 4
  %insertElmt763 = insertelement <4 x float> undef, float %1816, i32 0
  %insertElmt764 = insertelement <4 x float> %insertElmt763, float %1816, i32 1
  %insertElmt765 = insertelement <4 x float> %insertElmt764, float %1816, i32 2
  %insertElmt766 = insertelement <4 x float> %insertElmt765, float %1816, i32 3
  store <4 x float> %insertElmt766, <4 x float>* %allocaVec198, align 16
  %1817 = load <4 x float>, <4 x float>* %allocaVec198, align 16
  %Vop767 = fmul <4 x float> <float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01>, %1817
  %1818 = fmul float 1.000000e+01, %1816
  %1819 = fcmp ogt float %1815, %1818
  br i1 %1819, label %1820, label %1828

; <label>:1820:                                   ; preds = %1814
  %1821 = load i32, i32* %31, align 4
  %1822 = getelementptr inbounds [4 x double], [4 x double]* @L3psycho_anal.pe, i32 0, i32 %1821
  %1823 = load double, double* %1822, align 8
  %1824 = fcmp ogt double %1823, 1.000000e+03
  br i1 %1824, label %1825, label %1828

; <label>:1825:                                   ; preds = %1820
  %1826 = load i32, i32* %31, align 4
  %1827 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 %1826
  store i32 0, i32* %1827, align 4
  br label %1828

; <label>:1828:                                   ; preds = %1825, %1820, %1814
  br label %1829

; <label>:1829:                                   ; preds = %1828, %1811
  br label %1830

; <label>:1830:                                   ; preds = %1829, %1740
  br label %1831

; <label>:1831:                                   ; preds = %1830, %1732
  br label %1832

; <label>:1832:                                   ; preds = %1831, %1724
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec144
  store i32 0, i32* %36, align 4
  br label %1833

; <label>:1833:                                   ; preds = %1913, %1832
  %1834 = load i32, i32* %36, align 4
  %1835 = icmp slt i32 %1834, 21
  br i1 %1835, label %1836, label %1917

; <label>:1836:                                   ; preds = %1833
  %1837 = load i32, i32* %36, align 4
  %1838 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.w1_l, i32 0, i32 %1837
  %1839 = load double, double* %1838, align 8
  %1840 = load i32, i32* %36, align 4
  %1841 = getelementptr inbounds [21 x i32], [21 x i32]* @L3psycho_anal.bu_l, i32 0, i32 %1840
  %1842 = load i32, i32* %1841, align 4
  %1843 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1842
  %1844 = load double, double* %1843, align 8
  %1845 = fmul double %1839, %1844
  %1846 = load i32, i32* %36, align 4
  %1847 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.w2_l, i32 0, i32 %1846
  %1848 = load double, double* %1847, align 8
  %1849 = load i32, i32* %36, align 4
  %1850 = getelementptr inbounds [21 x i32], [21 x i32]* @L3psycho_anal.bo_l, i32 0, i32 %1849
  %1851 = load i32, i32* %1850, align 4
  %1852 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1851
  %1853 = load double, double* %1852, align 8
  %1854 = fmul double %1848, %1853
  %1855 = fadd double %1845, %1854
  store double %1855, double* %96, align 8
  %1856 = load i32, i32* %36, align 4
  %1857 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.w1_l, i32 0, i32 %1856
  %1858 = load double, double* %1857, align 8
  %1859 = load i32, i32* %36, align 4
  %1860 = getelementptr inbounds [21 x i32], [21 x i32]* @L3psycho_anal.bu_l, i32 0, i32 %1859
  %1861 = load i32, i32* %1860, align 4
  %1862 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %1861
  %1863 = load double, double* %1862, align 8
  %1864 = fmul double %1858, %1863
  %1865 = load i32, i32* %36, align 4
  %1866 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.w2_l, i32 0, i32 %1865
  %1867 = load double, double* %1866, align 8
  %1868 = load i32, i32* %36, align 4
  %1869 = getelementptr inbounds [21 x i32], [21 x i32]* @L3psycho_anal.bo_l, i32 0, i32 %1868
  %1870 = load i32, i32* %1869, align 4
  %1871 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %1870
  %1872 = load double, double* %1871, align 8
  %1873 = fmul double %1867, %1872
  %1874 = fadd double %1864, %1873
  store double %1874, double* %97, align 8
  %1875 = load i32, i32* %36, align 4
  %1876 = getelementptr inbounds [21 x i32], [21 x i32]* @L3psycho_anal.bu_l, i32 0, i32 %1875
  %1877 = load i32, i32* %1876, align 4
  %1878 = add nsw i32 %1877, 1
  store i32 %1878, i32* %32, align 4
  br label %1879

; <label>:1879:                                   ; preds = %1896, %1836
  %1880 = load i32, i32* %32, align 4
  %1881 = load i32, i32* %36, align 4
  %1882 = getelementptr inbounds [21 x i32], [21 x i32]* @L3psycho_anal.bo_l, i32 0, i32 %1881
  %1883 = load i32, i32* %1882, align 4
  %1884 = icmp slt i32 %1880, %1883
  br i1 %1884, label %1885, label %1900

; <label>:1885:                                   ; preds = %1879
  %1886 = load i32, i32* %32, align 4
  %1887 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1886
  %1888 = load double, double* %1887, align 8
  %1889 = load double, double* %96, align 8
  %1890 = fadd double %1889, %1888
  store double %1890, double* %96, align 8
  %1891 = load i32, i32* %32, align 4
  %1892 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %1891
  %1893 = load double, double* %1892, align 8
  %1894 = load double, double* %97, align 8
  %1895 = fadd double %1894, %1893
  store double %1895, double* %97, align 8
  br label %1896

; <label>:1896:                                   ; preds = %1885
  %1897 = load i32, i32* %32, align 4
  %1898 = load <4 x i32>, <4 x i32>* %allocaVec140, align 16
  %Vop768 = add <4 x i32> %1898, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop768, <4 x i32>* %allocaVec140
  %1899 = add nsw i32 %1897, 1
  store i32 %1899, i32* %32, align 4
  br label %1879

; <label>:1900:                                   ; preds = %1879
  %1901 = load double, double* %96, align 8
  %1902 = load i32, i32* %31, align 4
  %1903 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i32 0, i32 %1902
  %1904 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1903, i32 0, i32 0
  %1905 = load i32, i32* %36, align 4
  %1906 = getelementptr inbounds [22 x double], [22 x double]* %1904, i32 0, i32 %1905
  store double %1901, double* %1906, align 8
  %1907 = load double, double* %97, align 8
  %1908 = load i32, i32* %31, align 4
  %1909 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %1908
  %1910 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1909, i32 0, i32 0
  %1911 = load i32, i32* %36, align 4
  %1912 = getelementptr inbounds [22 x double], [22 x double]* %1910, i32 0, i32 %1911
  store double %1907, double* %1912, align 8
  br label %1913

; <label>:1913:                                   ; preds = %1900
  %1914 = load i32, i32* %36, align 4
  %1915 = load <4 x i32>, <4 x i32>* %allocaVec144, align 16
  %Vop769 = add <4 x i32> %1915, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop769, <4 x i32>* %allocaVec144
  %1916 = add nsw i32 %1914, 1
  store i32 %1916, i32* %36, align 4
  br label %1833

; <label>:1917:                                   ; preds = %1833
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec145
  store i32 0, i32* %37, align 4
  br label %1918

; <label>:1918:                                   ; preds = %2130, %1917
  %1919 = load i32, i32* %37, align 4
  %1920 = icmp slt i32 %1919, 3
  br i1 %1920, label %1921, label %2134

; <label>:1921:                                   ; preds = %1918
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec142
  store i32 0, i32* %34, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec140
  store i32 0, i32* %32, align 4
  br label %1922

; <label>:1922:                                   ; preds = %1971, %1921
  %1923 = load i32, i32* %32, align 4
  %1924 = load i32, i32* @L3psycho_anal.npart_s_orig, align 4
  %1925 = icmp slt i32 %1923, %1924
  br i1 %1925, label %1926, label %1975

; <label>:1926:                                   ; preds = %1922
  %1927 = load i32, i32* %37, align 4
  %1928 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 %1927
  %1929 = load i32, i32* %34, align 4
  %1930 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop770 = add <4 x i32> %1930, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop770, <4 x i32>* %allocaVec142
  %1931 = add nsw i32 %1929, 1
  store i32 %1931, i32* %34, align 4
  %1932 = getelementptr inbounds [129 x float], [129 x float]* %1928, i32 0, i32 %1929
  %1933 = load float, float* %1932, align 4
  store float %1933, float* %99, align 4
  %1934 = load i32, i32* %32, align 4
  %1935 = getelementptr inbounds [63 x i32], [63 x i32]* @L3psycho_anal.numlines_s, i32 0, i32 %1934
  %1936 = load i32, i32* %1935, align 4
  store i32 %1936, i32* %98, align 4
  br label %1937

; <label>:1937:                                   ; preds = %1965, %1926
  %1938 = load i32, i32* %98, align 4
  %1939 = icmp sgt i32 %1938, 0
  br i1 %1939, label %1940, label %1966

; <label>:1940:                                   ; preds = %1937
  %1941 = load i32, i32* %37, align 4
  %1942 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 %1941
  %1943 = load i32, i32* %34, align 4
  %1944 = load <4 x i32>, <4 x i32>* %allocaVec142, align 16
  %Vop771 = add <4 x i32> %1944, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop771, <4 x i32>* %allocaVec142
  %1945 = load <4 x i32>, <4 x i32>* %allocaVec142, align 4
  %extractE773 = extractelement <4 x i32> %1945, i64 0
  %extractE774 = extractelement <4 x i32> %1945, i64 1
  %extractE775 = extractelement <4 x i32> %1945, i64 2
  %sum776 = add i32 %extractE773, %extractE774
  %sum777 = add i32 %sum776, %extractE775
  %1946 = add nsw i32 %1943, 1
  %Fmul772 = mul i32 %1946, 3
  store i32 %1946, i32* %Recovery23
  %Fcmp778 = icmp ne i32 %sum777, %Fmul772
  br i1 %Fcmp778, label %1947, label %1951

; <label>:1947:                                   ; preds = %1940
  %remThree909 = sdiv i32 %sum777, %extractE773
  %FcmpThree910 = icmp ne i32 %remThree909, 3
  br i1 %FcmpThree910, label %1948, label %1949

; <label>:1948:                                   ; preds = %1947
  store i32 %1946, i32* %Recovery23, align 4
  br label %1950

; <label>:1949:                                   ; preds = %1947
  store i32 %extractE773, i32* %Recovery23, align 4
  br label %1950

; <label>:1950:                                   ; preds = %1949, %1948
  br label %1951

; <label>:1951:                                   ; preds = %1940, %1950
  %ReplaceInst935 = load i32, i32* %Recovery23, align 4
  store i32 %ReplaceInst935, i32* %34, align 4
  %1952 = getelementptr inbounds [129 x float], [129 x float]* %1942, i32 0, i32 %1943
  %1953 = load float, float* %1952, align 4
  %1954 = load float, float* %99, align 4
  %1955 = fadd float %1954, %1953
  store float %1955, float* %99, align 4
  br label %1956

; <label>:1956:                                   ; preds = %1951
  %1957 = load i32, i32* %98, align 4
  %insertElmt779 = insertelement <4 x i32> undef, i32 %1957, i32 0
  %insertElmt780 = insertelement <4 x i32> %insertElmt779, i32 %1957, i32 1
  %insertElmt781 = insertelement <4 x i32> %insertElmt780, i32 %1957, i32 2
  %insertElmt782 = insertelement <4 x i32> %insertElmt781, i32 %1957, i32 3
  store <4 x i32> %insertElmt782, <4 x i32>* %allocaVec205, align 16
  %1958 = load <4 x i32>, <4 x i32>* %allocaVec205, align 16
  %Vop783 = add <4 x i32> %1958, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop783, <4 x i32>* %allocaVec205
  %1959 = load <4 x i32>, <4 x i32>* %allocaVec205, align 4
  %extractE785 = extractelement <4 x i32> %1959, i64 0
  %extractE786 = extractelement <4 x i32> %1959, i64 1
  %extractE787 = extractelement <4 x i32> %1959, i64 2
  %sum788 = add i32 %extractE785, %extractE786
  %sum789 = add i32 %sum788, %extractE787
  %1960 = add nsw i32 %1957, -1
  %Fmul784 = mul i32 %1960, 3
  store i32 %1960, i32* %Recovery25
  %Fcmp790 = icmp ne i32 %sum789, %Fmul784
  br i1 %Fcmp790, label %1961, label %1965

; <label>:1961:                                   ; preds = %1956
  %remThree911 = sdiv i32 %sum789, %extractE785
  %FcmpThree912 = icmp ne i32 %remThree911, 3
  br i1 %FcmpThree912, label %1962, label %1963

; <label>:1962:                                   ; preds = %1961
  store i32 %1960, i32* %Recovery25, align 4
  br label %1964

; <label>:1963:                                   ; preds = %1961
  store i32 %extractE785, i32* %Recovery25, align 4
  br label %1964

; <label>:1964:                                   ; preds = %1963, %1962
  br label %1965

; <label>:1965:                                   ; preds = %1956, %1964
  %ReplaceInst936 = load i32, i32* %Recovery25, align 4
  store i32 %ReplaceInst936, i32* %98, align 4
  br label %1937

; <label>:1966:                                   ; preds = %1937
  %1967 = load float, float* %99, align 4
  %1968 = fpext float %1967 to double
  %1969 = load i32, i32* %32, align 4
  %1970 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1969
  store double %1968, double* %1970, align 8
  br label %1971

; <label>:1971:                                   ; preds = %1966
  %1972 = load i32, i32* %32, align 4
  %1973 = load <4 x i32>, <4 x i32>* %allocaVec140, align 16
  %Vop791 = add <4 x i32> %1973, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop791, <4 x i32>* %allocaVec140
  %1974 = add nsw i32 %1972, 1
  store i32 %1974, i32* %32, align 4
  br label %1922

; <label>:1975:                                   ; preds = %1922
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec140
  store i32 0, i32* %32, align 4
  br label %1976

; <label>:1976:                                   ; preds = %2030, %1975
  %1977 = load i32, i32* %32, align 4
  %1978 = load i32, i32* @L3psycho_anal.npart_s, align 4
  %1979 = icmp slt i32 %1977, %1978
  br i1 %1979, label %1980, label %2034

; <label>:1980:                                   ; preds = %1976
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec207
  store double 0.000000e+00, double* %100, align 8
  %1981 = load i32, i32* %32, align 4
  %1982 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i32 0, i32 %1981
  %1983 = getelementptr inbounds [2 x i32], [2 x i32]* %1982, i32 0, i32 0
  %1984 = load i32, i32* %1983, align 4
  store i32 %1984, i32* %35, align 4
  br label %1985

; <label>:1985:                                   ; preds = %2013, %1980
  %1986 = load i32, i32* %35, align 4
  %1987 = load i32, i32* %32, align 4
  %1988 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i32 0, i32 %1987
  %1989 = getelementptr inbounds [2 x i32], [2 x i32]* %1988, i32 0, i32 1
  %1990 = load i32, i32* %1989, align 4
  %1991 = icmp sle i32 %1986, %1990
  br i1 %1991, label %1992, label %2014

; <label>:1992:                                   ; preds = %1985
  %1993 = load i32, i32* %32, align 4
  %1994 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i32 0, i32 %1993
  %1995 = load i32, i32* %35, align 4
  %1996 = getelementptr inbounds [64 x double], [64 x double]* %1994, i32 0, i32 %1995
  %1997 = load double, double* %1996, align 8
  %1998 = load i32, i32* %35, align 4
  %1999 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1998
  %2000 = load double, double* %1999, align 8
  %2001 = fmul double %1997, %2000
  %2002 = load double, double* %100, align 8
  %2003 = fadd double %2002, %2001
  store double %2003, double* %100, align 8
  br label %2004

; <label>:2004:                                   ; preds = %1992
  %2005 = load i32, i32* %35, align 4
  %2006 = load <4 x i32>, <4 x i32>* %allocaVec143, align 16
  %Vop792 = add <4 x i32> %2006, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop792, <4 x i32>* %allocaVec143
  %2007 = load <4 x i32>, <4 x i32>* %allocaVec143, align 4
  %extractE794 = extractelement <4 x i32> %2007, i64 0
  %extractE795 = extractelement <4 x i32> %2007, i64 1
  %extractE796 = extractelement <4 x i32> %2007, i64 2
  %sum797 = add i32 %extractE794, %extractE795
  %sum798 = add i32 %sum797, %extractE796
  %2008 = add nsw i32 %2005, 1
  %Fmul793 = mul i32 %2008, 3
  store i32 %2008, i32* %Recovery27
  %Fcmp799 = icmp ne i32 %sum798, %Fmul793
  br i1 %Fcmp799, label %2009, label %2013

; <label>:2009:                                   ; preds = %2004
  %remThree913 = sdiv i32 %sum798, %extractE794
  %FcmpThree914 = icmp ne i32 %remThree913, 3
  br i1 %FcmpThree914, label %2010, label %2011

; <label>:2010:                                   ; preds = %2009
  store i32 %2008, i32* %Recovery27, align 4
  br label %2012

; <label>:2011:                                   ; preds = %2009
  store i32 %extractE794, i32* %Recovery27, align 4
  br label %2012

; <label>:2012:                                   ; preds = %2011, %2010
  br label %2013

; <label>:2013:                                   ; preds = %2004, %2012
  %ReplaceInst937 = load i32, i32* %Recovery27, align 4
  store i32 %ReplaceInst937, i32* %35, align 4
  br label %1985

; <label>:2014:                                   ; preds = %1985
  %2015 = load i32, i32* %32, align 4
  %2016 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.qthr_s, i32 0, i32 %2015
  %2017 = load double, double* %2016, align 8
  %2018 = load double, double* %100, align 8
  %2019 = fcmp ogt double %2017, %2018
  br i1 %2019, label %2020, label %2024

; <label>:2020:                                   ; preds = %2014
  %2021 = load i32, i32* %32, align 4
  %2022 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.qthr_s, i32 0, i32 %2021
  %2023 = load double, double* %2022, align 8
  br label %2026

; <label>:2024:                                   ; preds = %2014
  %2025 = load double, double* %100, align 8
  br label %2026

; <label>:2026:                                   ; preds = %2024, %2020
  %2027 = phi double [ %2023, %2020 ], [ %2025, %2024 ]
  %2028 = load i32, i32* %32, align 4
  %2029 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %2028
  store double %2027, double* %2029, align 8
  br label %2030

; <label>:2030:                                   ; preds = %2026
  %2031 = load i32, i32* %32, align 4
  %2032 = load <4 x i32>, <4 x i32>* %allocaVec140, align 16
  %Vop800 = add <4 x i32> %2032, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop800, <4 x i32>* %allocaVec140
  %2033 = add nsw i32 %2031, 1
  store i32 %2033, i32* %32, align 4
  br label %1976

; <label>:2034:                                   ; preds = %1976
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec144
  store i32 0, i32* %36, align 4
  br label %2035

; <label>:2035:                                   ; preds = %2125, %2034
  %2036 = load i32, i32* %36, align 4
  %2037 = icmp slt i32 %2036, 12
  br i1 %2037, label %2038, label %2129

; <label>:2038:                                   ; preds = %2035
  %2039 = load i32, i32* %36, align 4
  %2040 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.w1_s, i32 0, i32 %2039
  %2041 = load double, double* %2040, align 8
  %2042 = load i32, i32* %36, align 4
  %2043 = getelementptr inbounds [12 x i32], [12 x i32]* @L3psycho_anal.bu_s, i32 0, i32 %2042
  %2044 = load i32, i32* %2043, align 4
  %2045 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %2044
  %2046 = load double, double* %2045, align 8
  %2047 = fmul double %2041, %2046
  %2048 = load i32, i32* %36, align 4
  %2049 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.w2_s, i32 0, i32 %2048
  %2050 = load double, double* %2049, align 8
  %2051 = load i32, i32* %36, align 4
  %2052 = getelementptr inbounds [12 x i32], [12 x i32]* @L3psycho_anal.bo_s, i32 0, i32 %2051
  %2053 = load i32, i32* %2052, align 4
  %2054 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %2053
  %2055 = load double, double* %2054, align 8
  %2056 = fmul double %2050, %2055
  %2057 = fadd double %2047, %2056
  store double %2057, double* %101, align 8
  %2058 = load i32, i32* %36, align 4
  %2059 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.w1_s, i32 0, i32 %2058
  %2060 = load double, double* %2059, align 8
  %2061 = load i32, i32* %36, align 4
  %2062 = getelementptr inbounds [12 x i32], [12 x i32]* @L3psycho_anal.bu_s, i32 0, i32 %2061
  %2063 = load i32, i32* %2062, align 4
  %2064 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %2063
  %2065 = load double, double* %2064, align 8
  %2066 = fmul double %2060, %2065
  %2067 = load i32, i32* %36, align 4
  %2068 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.w2_s, i32 0, i32 %2067
  %2069 = load double, double* %2068, align 8
  %2070 = load i32, i32* %36, align 4
  %2071 = getelementptr inbounds [12 x i32], [12 x i32]* @L3psycho_anal.bo_s, i32 0, i32 %2070
  %2072 = load i32, i32* %2071, align 4
  %2073 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %2072
  %2074 = load double, double* %2073, align 8
  %2075 = fmul double %2069, %2074
  %2076 = fadd double %2066, %2075
  store double %2076, double* %102, align 8
  %2077 = load i32, i32* %36, align 4
  %2078 = getelementptr inbounds [12 x i32], [12 x i32]* @L3psycho_anal.bu_s, i32 0, i32 %2077
  %2079 = load i32, i32* %2078, align 4
  %2080 = add nsw i32 %2079, 1
  store i32 %2080, i32* %32, align 4
  br label %2081

; <label>:2081:                                   ; preds = %2107, %2038
  %2082 = load i32, i32* %32, align 4
  %2083 = load i32, i32* %36, align 4
  %2084 = getelementptr inbounds [12 x i32], [12 x i32]* @L3psycho_anal.bo_s, i32 0, i32 %2083
  %2085 = load i32, i32* %2084, align 4
  %2086 = icmp slt i32 %2082, %2085
  br i1 %2086, label %2087, label %2108

; <label>:2087:                                   ; preds = %2081
  %2088 = load i32, i32* %32, align 4
  %2089 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %2088
  %2090 = load double, double* %2089, align 8
  %2091 = load double, double* %101, align 8
  %2092 = fadd double %2091, %2090
  store double %2092, double* %101, align 8
  %2093 = load i32, i32* %32, align 4
  %2094 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %2093
  %2095 = load double, double* %2094, align 8
  %2096 = load double, double* %102, align 8
  %2097 = fadd double %2096, %2095
  store double %2097, double* %102, align 8
  br label %2098

; <label>:2098:                                   ; preds = %2087
  %2099 = load i32, i32* %32, align 4
  %2100 = load <4 x i32>, <4 x i32>* %allocaVec140, align 16
  %Vop801 = add <4 x i32> %2100, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop801, <4 x i32>* %allocaVec140
  %2101 = load <4 x i32>, <4 x i32>* %allocaVec140, align 4
  %extractE803 = extractelement <4 x i32> %2101, i64 0
  %extractE804 = extractelement <4 x i32> %2101, i64 1
  %extractE805 = extractelement <4 x i32> %2101, i64 2
  %sum806 = add i32 %extractE803, %extractE804
  %sum807 = add i32 %sum806, %extractE805
  %2102 = add nsw i32 %2099, 1
  %Fmul802 = mul i32 %2102, 3
  store i32 %2102, i32* %Recovery30
  %Fcmp808 = icmp ne i32 %sum807, %Fmul802
  br i1 %Fcmp808, label %2103, label %2107

; <label>:2103:                                   ; preds = %2098
  %remThree915 = sdiv i32 %sum807, %extractE803
  %FcmpThree916 = icmp ne i32 %remThree915, 3
  br i1 %FcmpThree916, label %2104, label %2105

; <label>:2104:                                   ; preds = %2103
  store i32 %2102, i32* %Recovery30, align 4
  br label %2106

; <label>:2105:                                   ; preds = %2103
  store i32 %extractE803, i32* %Recovery30, align 4
  br label %2106

; <label>:2106:                                   ; preds = %2105, %2104
  br label %2107

; <label>:2107:                                   ; preds = %2098, %2106
  %ReplaceInst938 = load i32, i32* %Recovery30, align 4
  store i32 %ReplaceInst938, i32* %32, align 4
  br label %2081

; <label>:2108:                                   ; preds = %2081
  %2109 = load double, double* %101, align 8
  %2110 = load i32, i32* %31, align 4
  %2111 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i32 0, i32 %2110
  %2112 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2111, i32 0, i32 1
  %2113 = load i32, i32* %36, align 4
  %2114 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2112, i32 0, i32 %2113
  %2115 = load i32, i32* %37, align 4
  %2116 = getelementptr inbounds [3 x double], [3 x double]* %2114, i32 0, i32 %2115
  store double %2109, double* %2116, align 8
  %2117 = load double, double* %102, align 8
  %2118 = load i32, i32* %31, align 4
  %2119 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2118
  %2120 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2119, i32 0, i32 1
  %2121 = load i32, i32* %36, align 4
  %2122 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2120, i32 0, i32 %2121
  %2123 = load i32, i32* %37, align 4
  %2124 = getelementptr inbounds [3 x double], [3 x double]* %2122, i32 0, i32 %2123
  store double %2117, double* %2124, align 8
  br label %2125

; <label>:2125:                                   ; preds = %2108
  %2126 = load i32, i32* %36, align 4
  %2127 = load <4 x i32>, <4 x i32>* %allocaVec144, align 16
  %Vop809 = add <4 x i32> %2127, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop809, <4 x i32>* %allocaVec144
  %2128 = add nsw i32 %2126, 1
  store i32 %2128, i32* %36, align 4
  br label %2035

; <label>:2129:                                   ; preds = %2035
  br label %2130

; <label>:2130:                                   ; preds = %2129
  %2131 = load i32, i32* %37, align 4
  %insertElmt810 = insertelement <4 x i32> undef, i32 %2131, i32 0
  %insertElmt811 = insertelement <4 x i32> %insertElmt810, i32 %2131, i32 1
  %insertElmt812 = insertelement <4 x i32> %insertElmt811, i32 %2131, i32 2
  %insertElmt813 = insertelement <4 x i32> %insertElmt812, i32 %2131, i32 3
  store <4 x i32> %insertElmt813, <4 x i32>* %allocaVec145, align 16
  %2132 = load <4 x i32>, <4 x i32>* %allocaVec145, align 16
  %Vop814 = add <4 x i32> %2132, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop814, <4 x i32>* %allocaVec145
  %2133 = add nsw i32 %2131, 1
  store i32 %2133, i32* %37, align 4
  br label %1918

; <label>:2134:                                   ; preds = %1918
  br label %2135

; <label>:2135:                                   ; preds = %2134
  %2136 = load i32, i32* %31, align 4
  %insertElmt815 = insertelement <4 x i32> undef, i32 %2136, i32 0
  %insertElmt816 = insertelement <4 x i32> %insertElmt815, i32 %2136, i32 1
  %insertElmt817 = insertelement <4 x i32> %insertElmt816, i32 %2136, i32 2
  %insertElmt818 = insertelement <4 x i32> %insertElmt817, i32 %2136, i32 3
  store <4 x i32> %insertElmt818, <4 x i32>* %allocaVec139, align 16
  %2137 = load <4 x i32>, <4 x i32>* %allocaVec139, align 16
  %Vop819 = add <4 x i32> %2137, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop819, <4 x i32>* %allocaVec139
  %2138 = add nsw i32 %2136, 1
  store i32 %2138, i32* %31, align 4
  br label %592

; <label>:2139:                                   ; preds = %592
  %2140 = load i32, i32* %30, align 4
  %2141 = icmp eq i32 %2140, 4
  br i1 %2141, label %2142, label %2532

; <label>:2142:                                   ; preds = %2139
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %allocaVec213
  store i32 2, i32* %106, align 4
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %allocaVec214
  store i32 3, i32* %107, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec144
  store i32 0, i32* %36, align 4
  br label %2143

; <label>:2143:                                   ; preds = %2308, %2142
  %2144 = load i32, i32* %36, align 4
  %2145 = icmp slt i32 %2144, 21
  br i1 %2145, label %2146, label %2312

; <label>:2146:                                   ; preds = %2143
  %2147 = load i32, i32* %36, align 4
  %2148 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 0), i32 0, i32 %2147
  %2149 = load double, double* %2148, align 8
  %2150 = load i32, i32* %36, align 4
  %2151 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 0), i32 0, i32 %2150
  %2152 = load double, double* %2151, align 8
  %2153 = fmul double 1.580000e+00, %2152
  %2154 = fcmp ole double %2149, %2153
  br i1 %2154, label %2155, label %2307

; <label>:2155:                                   ; preds = %2146
  %2156 = load i32, i32* %36, align 4
  %2157 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 0), i32 0, i32 %2156
  %2158 = load double, double* %2157, align 8
  %2159 = load i32, i32* %36, align 4
  %2160 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 0), i32 0, i32 %2159
  %2161 = load double, double* %2160, align 8
  %2162 = fmul double 1.580000e+00, %2161
  %2163 = fcmp ole double %2158, %2162
  br i1 %2163, label %2164, label %2307

; <label>:2164:                                   ; preds = %2155
  %2165 = load i32, i32* %36, align 4
  %2166 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.mld_l, i32 0, i32 %2165
  %2167 = load double, double* %2166, align 8
  %2168 = load i32, i32* %107, align 4
  %2169 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i32 0, i32 %2168
  %2170 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2169, i32 0, i32 0
  %2171 = load i32, i32* %36, align 4
  %2172 = getelementptr inbounds [22 x double], [22 x double]* %2170, i32 0, i32 %2171
  %2173 = load double, double* %2172, align 8
  %2174 = fmul double %2167, %2173
  store double %2174, double* %105, align 8
  %2175 = load i32, i32* %106, align 4
  %2176 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2175
  %2177 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2176, i32 0, i32 0
  %2178 = load i32, i32* %36, align 4
  %2179 = getelementptr inbounds [22 x double], [22 x double]* %2177, i32 0, i32 %2178
  %2180 = load double, double* %2179, align 8
  %2181 = load i32, i32* %107, align 4
  %2182 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2181
  %2183 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2182, i32 0, i32 0
  %2184 = load i32, i32* %36, align 4
  %2185 = getelementptr inbounds [22 x double], [22 x double]* %2183, i32 0, i32 %2184
  %2186 = load double, double* %2185, align 8
  %2187 = load double, double* %105, align 8
  %2188 = fcmp olt double %2186, %2187
  br i1 %2188, label %2189, label %2196

; <label>:2189:                                   ; preds = %2164
  %2190 = load i32, i32* %107, align 4
  %2191 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2190
  %2192 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2191, i32 0, i32 0
  %2193 = load i32, i32* %36, align 4
  %2194 = getelementptr inbounds [22 x double], [22 x double]* %2192, i32 0, i32 %2193
  %2195 = load double, double* %2194, align 8
  br label %2198

; <label>:2196:                                   ; preds = %2164
  %2197 = load double, double* %105, align 8
  br label %2198

; <label>:2198:                                   ; preds = %2196, %2189
  %2199 = phi double [ %2195, %2189 ], [ %2197, %2196 ]
  %2200 = fcmp ogt double %2180, %2199
  br i1 %2200, label %2201, label %2208

; <label>:2201:                                   ; preds = %2198
  %2202 = load i32, i32* %106, align 4
  %2203 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2202
  %2204 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2203, i32 0, i32 0
  %2205 = load i32, i32* %36, align 4
  %2206 = getelementptr inbounds [22 x double], [22 x double]* %2204, i32 0, i32 %2205
  %2207 = load double, double* %2206, align 8
  br label %2228

; <label>:2208:                                   ; preds = %2198
  %2209 = load i32, i32* %107, align 4
  %2210 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2209
  %2211 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2210, i32 0, i32 0
  %2212 = load i32, i32* %36, align 4
  %2213 = getelementptr inbounds [22 x double], [22 x double]* %2211, i32 0, i32 %2212
  %2214 = load double, double* %2213, align 8
  %2215 = load double, double* %105, align 8
  %2216 = fcmp olt double %2214, %2215
  br i1 %2216, label %2217, label %2224

; <label>:2217:                                   ; preds = %2208
  %2218 = load i32, i32* %107, align 4
  %2219 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2218
  %2220 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2219, i32 0, i32 0
  %2221 = load i32, i32* %36, align 4
  %2222 = getelementptr inbounds [22 x double], [22 x double]* %2220, i32 0, i32 %2221
  %2223 = load double, double* %2222, align 8
  br label %2226

; <label>:2224:                                   ; preds = %2208
  %2225 = load double, double* %105, align 8
  br label %2226

; <label>:2226:                                   ; preds = %2224, %2217
  %2227 = phi double [ %2223, %2217 ], [ %2225, %2224 ]
  br label %2228

; <label>:2228:                                   ; preds = %2226, %2201
  %2229 = phi double [ %2207, %2201 ], [ %2227, %2226 ]
  store double %2229, double* %104, align 8
  %2230 = load i32, i32* %36, align 4
  %2231 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.mld_l, i32 0, i32 %2230
  %2232 = load double, double* %2231, align 8
  %2233 = load i32, i32* %106, align 4
  %2234 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i32 0, i32 %2233
  %2235 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2234, i32 0, i32 0
  %2236 = load i32, i32* %36, align 4
  %2237 = getelementptr inbounds [22 x double], [22 x double]* %2235, i32 0, i32 %2236
  %2238 = load double, double* %2237, align 8
  %2239 = fmul double %2232, %2238
  store double %2239, double* %105, align 8
  %2240 = load i32, i32* %107, align 4
  %2241 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2240
  %2242 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2241, i32 0, i32 0
  %2243 = load i32, i32* %36, align 4
  %2244 = getelementptr inbounds [22 x double], [22 x double]* %2242, i32 0, i32 %2243
  %2245 = load double, double* %2244, align 8
  %2246 = load i32, i32* %106, align 4
  %2247 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2246
  %2248 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2247, i32 0, i32 0
  %2249 = load i32, i32* %36, align 4
  %2250 = getelementptr inbounds [22 x double], [22 x double]* %2248, i32 0, i32 %2249
  %2251 = load double, double* %2250, align 8
  %2252 = load double, double* %105, align 8
  %2253 = fcmp olt double %2251, %2252
  br i1 %2253, label %2254, label %2261

; <label>:2254:                                   ; preds = %2228
  %2255 = load i32, i32* %106, align 4
  %2256 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2255
  %2257 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2256, i32 0, i32 0
  %2258 = load i32, i32* %36, align 4
  %2259 = getelementptr inbounds [22 x double], [22 x double]* %2257, i32 0, i32 %2258
  %2260 = load double, double* %2259, align 8
  br label %2263

; <label>:2261:                                   ; preds = %2228
  %2262 = load double, double* %105, align 8
  br label %2263

; <label>:2263:                                   ; preds = %2261, %2254
  %2264 = phi double [ %2260, %2254 ], [ %2262, %2261 ]
  %2265 = fcmp ogt double %2245, %2264
  br i1 %2265, label %2266, label %2273

; <label>:2266:                                   ; preds = %2263
  %2267 = load i32, i32* %107, align 4
  %2268 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2267
  %2269 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2268, i32 0, i32 0
  %2270 = load i32, i32* %36, align 4
  %2271 = getelementptr inbounds [22 x double], [22 x double]* %2269, i32 0, i32 %2270
  %2272 = load double, double* %2271, align 8
  br label %2293

; <label>:2273:                                   ; preds = %2263
  %2274 = load i32, i32* %106, align 4
  %2275 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2274
  %2276 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2275, i32 0, i32 0
  %2277 = load i32, i32* %36, align 4
  %2278 = getelementptr inbounds [22 x double], [22 x double]* %2276, i32 0, i32 %2277
  %2279 = load double, double* %2278, align 8
  %2280 = load double, double* %105, align 8
  %2281 = fcmp olt double %2279, %2280
  br i1 %2281, label %2282, label %2289

; <label>:2282:                                   ; preds = %2273
  %2283 = load i32, i32* %106, align 4
  %2284 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2283
  %2285 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2284, i32 0, i32 0
  %2286 = load i32, i32* %36, align 4
  %2287 = getelementptr inbounds [22 x double], [22 x double]* %2285, i32 0, i32 %2286
  %2288 = load double, double* %2287, align 8
  br label %2291

; <label>:2289:                                   ; preds = %2273
  %2290 = load double, double* %105, align 8
  br label %2291

; <label>:2291:                                   ; preds = %2289, %2282
  %2292 = phi double [ %2288, %2282 ], [ %2290, %2289 ]
  br label %2293

; <label>:2293:                                   ; preds = %2291, %2266
  %2294 = phi double [ %2272, %2266 ], [ %2292, %2291 ]
  store double %2294, double* %103, align 8
  %2295 = load double, double* %104, align 8
  %2296 = load i32, i32* %106, align 4
  %2297 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2296
  %2298 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2297, i32 0, i32 0
  %2299 = load i32, i32* %36, align 4
  %2300 = getelementptr inbounds [22 x double], [22 x double]* %2298, i32 0, i32 %2299
  store double %2295, double* %2300, align 8
  %2301 = load double, double* %103, align 8
  %2302 = load i32, i32* %107, align 4
  %2303 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2302
  %2304 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2303, i32 0, i32 0
  %2305 = load i32, i32* %36, align 4
  %2306 = getelementptr inbounds [22 x double], [22 x double]* %2304, i32 0, i32 %2305
  store double %2301, double* %2306, align 8
  br label %2307

; <label>:2307:                                   ; preds = %2293, %2155, %2146
  br label %2308

; <label>:2308:                                   ; preds = %2307
  %2309 = load i32, i32* %36, align 4
  %2310 = load <4 x i32>, <4 x i32>* %allocaVec144, align 16
  %Vop820 = add <4 x i32> %2310, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop820, <4 x i32>* %allocaVec144
  %2311 = add nsw i32 %2309, 1
  store i32 %2311, i32* %36, align 4
  br label %2143

; <label>:2312:                                   ; preds = %2143
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec144
  store i32 0, i32* %36, align 4
  br label %2313

; <label>:2313:                                   ; preds = %2527, %2312
  %2314 = load i32, i32* %36, align 4
  %2315 = icmp slt i32 %2314, 12
  br i1 %2315, label %2316, label %2531

; <label>:2316:                                   ; preds = %2313
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec145
  store i32 0, i32* %37, align 4
  br label %2317

; <label>:2317:                                   ; preds = %2522, %2316
  %2318 = load i32, i32* %37, align 4
  %2319 = icmp slt i32 %2318, 3
  br i1 %2319, label %2320, label %2526

; <label>:2320:                                   ; preds = %2317
  %2321 = load i32, i32* %36, align 4
  %2322 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 1), i32 0, i32 %2321
  %2323 = load i32, i32* %37, align 4
  %2324 = getelementptr inbounds [3 x double], [3 x double]* %2322, i32 0, i32 %2323
  %2325 = load double, double* %2324, align 8
  %2326 = load i32, i32* %36, align 4
  %2327 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 1), i32 0, i32 %2326
  %2328 = load i32, i32* %37, align 4
  %2329 = getelementptr inbounds [3 x double], [3 x double]* %2327, i32 0, i32 %2328
  %2330 = load double, double* %2329, align 8
  %2331 = fmul double 1.580000e+00, %2330
  %2332 = fcmp ole double %2325, %2331
  br i1 %2332, label %2333, label %2521

; <label>:2333:                                   ; preds = %2320
  %2334 = load i32, i32* %36, align 4
  %2335 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 1), i32 0, i32 %2334
  %2336 = load i32, i32* %37, align 4
  %2337 = getelementptr inbounds [3 x double], [3 x double]* %2335, i32 0, i32 %2336
  %2338 = load double, double* %2337, align 8
  %2339 = load i32, i32* %36, align 4
  %2340 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 1), i32 0, i32 %2339
  %2341 = load i32, i32* %37, align 4
  %2342 = getelementptr inbounds [3 x double], [3 x double]* %2340, i32 0, i32 %2341
  %2343 = load double, double* %2342, align 8
  %2344 = fmul double 1.580000e+00, %2343
  %2345 = fcmp ole double %2338, %2344
  br i1 %2345, label %2346, label %2521

; <label>:2346:                                   ; preds = %2333
  %2347 = load i32, i32* %36, align 4
  %2348 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.mld_s, i32 0, i32 %2347
  %2349 = load double, double* %2348, align 8
  %2350 = load i32, i32* %107, align 4
  %2351 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i32 0, i32 %2350
  %2352 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2351, i32 0, i32 1
  %2353 = load i32, i32* %36, align 4
  %2354 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2352, i32 0, i32 %2353
  %2355 = load i32, i32* %37, align 4
  %2356 = getelementptr inbounds [3 x double], [3 x double]* %2354, i32 0, i32 %2355
  %2357 = load double, double* %2356, align 8
  %2358 = fmul double %2349, %2357
  store double %2358, double* %105, align 8
  %2359 = load i32, i32* %106, align 4
  %2360 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2359
  %2361 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2360, i32 0, i32 1
  %2362 = load i32, i32* %36, align 4
  %2363 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2361, i32 0, i32 %2362
  %2364 = load i32, i32* %37, align 4
  %2365 = getelementptr inbounds [3 x double], [3 x double]* %2363, i32 0, i32 %2364
  %2366 = load double, double* %2365, align 8
  %2367 = load i32, i32* %107, align 4
  %2368 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2367
  %2369 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2368, i32 0, i32 1
  %2370 = load i32, i32* %36, align 4
  %2371 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2369, i32 0, i32 %2370
  %2372 = load i32, i32* %37, align 4
  %2373 = getelementptr inbounds [3 x double], [3 x double]* %2371, i32 0, i32 %2372
  %2374 = load double, double* %2373, align 8
  %2375 = load double, double* %105, align 8
  %2376 = fcmp olt double %2374, %2375
  br i1 %2376, label %2377, label %2386

; <label>:2377:                                   ; preds = %2346
  %2378 = load i32, i32* %107, align 4
  %2379 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2378
  %2380 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2379, i32 0, i32 1
  %2381 = load i32, i32* %36, align 4
  %2382 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2380, i32 0, i32 %2381
  %2383 = load i32, i32* %37, align 4
  %2384 = getelementptr inbounds [3 x double], [3 x double]* %2382, i32 0, i32 %2383
  %2385 = load double, double* %2384, align 8
  br label %2388

; <label>:2386:                                   ; preds = %2346
  %2387 = load double, double* %105, align 8
  br label %2388

; <label>:2388:                                   ; preds = %2386, %2377
  %2389 = phi double [ %2385, %2377 ], [ %2387, %2386 ]
  %2390 = fcmp ogt double %2366, %2389
  br i1 %2390, label %2391, label %2400

; <label>:2391:                                   ; preds = %2388
  %2392 = load i32, i32* %106, align 4
  %2393 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2392
  %2394 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2393, i32 0, i32 1
  %2395 = load i32, i32* %36, align 4
  %2396 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2394, i32 0, i32 %2395
  %2397 = load i32, i32* %37, align 4
  %2398 = getelementptr inbounds [3 x double], [3 x double]* %2396, i32 0, i32 %2397
  %2399 = load double, double* %2398, align 8
  br label %2424

; <label>:2400:                                   ; preds = %2388
  %2401 = load i32, i32* %107, align 4
  %2402 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2401
  %2403 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2402, i32 0, i32 1
  %2404 = load i32, i32* %36, align 4
  %2405 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2403, i32 0, i32 %2404
  %2406 = load i32, i32* %37, align 4
  %2407 = getelementptr inbounds [3 x double], [3 x double]* %2405, i32 0, i32 %2406
  %2408 = load double, double* %2407, align 8
  %2409 = load double, double* %105, align 8
  %2410 = fcmp olt double %2408, %2409
  br i1 %2410, label %2411, label %2420

; <label>:2411:                                   ; preds = %2400
  %2412 = load i32, i32* %107, align 4
  %2413 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2412
  %2414 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2413, i32 0, i32 1
  %2415 = load i32, i32* %36, align 4
  %2416 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2414, i32 0, i32 %2415
  %2417 = load i32, i32* %37, align 4
  %2418 = getelementptr inbounds [3 x double], [3 x double]* %2416, i32 0, i32 %2417
  %2419 = load double, double* %2418, align 8
  br label %2422

; <label>:2420:                                   ; preds = %2400
  %2421 = load double, double* %105, align 8
  br label %2422

; <label>:2422:                                   ; preds = %2420, %2411
  %2423 = phi double [ %2419, %2411 ], [ %2421, %2420 ]
  br label %2424

; <label>:2424:                                   ; preds = %2422, %2391
  %2425 = phi double [ %2399, %2391 ], [ %2423, %2422 ]
  store double %2425, double* %104, align 8
  %2426 = load i32, i32* %36, align 4
  %2427 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.mld_s, i32 0, i32 %2426
  %2428 = load double, double* %2427, align 8
  %2429 = load i32, i32* %106, align 4
  %2430 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i32 0, i32 %2429
  %2431 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2430, i32 0, i32 1
  %2432 = load i32, i32* %36, align 4
  %2433 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2431, i32 0, i32 %2432
  %2434 = load i32, i32* %37, align 4
  %2435 = getelementptr inbounds [3 x double], [3 x double]* %2433, i32 0, i32 %2434
  %2436 = load double, double* %2435, align 8
  %2437 = fmul double %2428, %2436
  store double %2437, double* %105, align 8
  %2438 = load i32, i32* %107, align 4
  %2439 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2438
  %2440 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2439, i32 0, i32 1
  %2441 = load i32, i32* %36, align 4
  %2442 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2440, i32 0, i32 %2441
  %2443 = load i32, i32* %37, align 4
  %2444 = getelementptr inbounds [3 x double], [3 x double]* %2442, i32 0, i32 %2443
  %2445 = load double, double* %2444, align 8
  %2446 = load i32, i32* %106, align 4
  %2447 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2446
  %2448 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2447, i32 0, i32 1
  %2449 = load i32, i32* %36, align 4
  %2450 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2448, i32 0, i32 %2449
  %2451 = load i32, i32* %37, align 4
  %2452 = getelementptr inbounds [3 x double], [3 x double]* %2450, i32 0, i32 %2451
  %2453 = load double, double* %2452, align 8
  %2454 = load double, double* %105, align 8
  %2455 = fcmp olt double %2453, %2454
  br i1 %2455, label %2456, label %2465

; <label>:2456:                                   ; preds = %2424
  %2457 = load i32, i32* %106, align 4
  %2458 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2457
  %2459 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2458, i32 0, i32 1
  %2460 = load i32, i32* %36, align 4
  %2461 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2459, i32 0, i32 %2460
  %2462 = load i32, i32* %37, align 4
  %2463 = getelementptr inbounds [3 x double], [3 x double]* %2461, i32 0, i32 %2462
  %2464 = load double, double* %2463, align 8
  br label %2467

; <label>:2465:                                   ; preds = %2424
  %2466 = load double, double* %105, align 8
  br label %2467

; <label>:2467:                                   ; preds = %2465, %2456
  %2468 = phi double [ %2464, %2456 ], [ %2466, %2465 ]
  %2469 = fcmp ogt double %2445, %2468
  br i1 %2469, label %2470, label %2479

; <label>:2470:                                   ; preds = %2467
  %2471 = load i32, i32* %107, align 4
  %2472 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2471
  %2473 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2472, i32 0, i32 1
  %2474 = load i32, i32* %36, align 4
  %2475 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2473, i32 0, i32 %2474
  %2476 = load i32, i32* %37, align 4
  %2477 = getelementptr inbounds [3 x double], [3 x double]* %2475, i32 0, i32 %2476
  %2478 = load double, double* %2477, align 8
  br label %2503

; <label>:2479:                                   ; preds = %2467
  %2480 = load i32, i32* %106, align 4
  %2481 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2480
  %2482 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2481, i32 0, i32 1
  %2483 = load i32, i32* %36, align 4
  %2484 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2482, i32 0, i32 %2483
  %2485 = load i32, i32* %37, align 4
  %2486 = getelementptr inbounds [3 x double], [3 x double]* %2484, i32 0, i32 %2485
  %2487 = load double, double* %2486, align 8
  %2488 = load double, double* %105, align 8
  %2489 = fcmp olt double %2487, %2488
  br i1 %2489, label %2490, label %2499

; <label>:2490:                                   ; preds = %2479
  %2491 = load i32, i32* %106, align 4
  %2492 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2491
  %2493 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2492, i32 0, i32 1
  %2494 = load i32, i32* %36, align 4
  %2495 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2493, i32 0, i32 %2494
  %2496 = load i32, i32* %37, align 4
  %2497 = getelementptr inbounds [3 x double], [3 x double]* %2495, i32 0, i32 %2496
  %2498 = load double, double* %2497, align 8
  br label %2501

; <label>:2499:                                   ; preds = %2479
  %2500 = load double, double* %105, align 8
  br label %2501

; <label>:2501:                                   ; preds = %2499, %2490
  %2502 = phi double [ %2498, %2490 ], [ %2500, %2499 ]
  br label %2503

; <label>:2503:                                   ; preds = %2501, %2470
  %2504 = phi double [ %2478, %2470 ], [ %2502, %2501 ]
  store double %2504, double* %103, align 8
  %2505 = load double, double* %104, align 8
  %2506 = load i32, i32* %106, align 4
  %2507 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2506
  %2508 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2507, i32 0, i32 1
  %2509 = load i32, i32* %36, align 4
  %2510 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2508, i32 0, i32 %2509
  %2511 = load i32, i32* %37, align 4
  %2512 = getelementptr inbounds [3 x double], [3 x double]* %2510, i32 0, i32 %2511
  store double %2505, double* %2512, align 8
  %2513 = load double, double* %103, align 8
  %2514 = load i32, i32* %107, align 4
  %2515 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2514
  %2516 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2515, i32 0, i32 1
  %2517 = load i32, i32* %36, align 4
  %2518 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2516, i32 0, i32 %2517
  %2519 = load i32, i32* %37, align 4
  %2520 = getelementptr inbounds [3 x double], [3 x double]* %2518, i32 0, i32 %2519
  store double %2513, double* %2520, align 8
  br label %2521

; <label>:2521:                                   ; preds = %2503, %2333, %2320
  br label %2522

; <label>:2522:                                   ; preds = %2521
  %2523 = load i32, i32* %37, align 4
  %2524 = load <4 x i32>, <4 x i32>* %allocaVec145, align 16
  %Vop821 = add <4 x i32> %2524, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop821, <4 x i32>* %allocaVec145
  %2525 = add nsw i32 %2523, 1
  store i32 %2525, i32* %37, align 4
  br label %2317

; <label>:2526:                                   ; preds = %2317
  br label %2527

; <label>:2527:                                   ; preds = %2526
  %2528 = load i32, i32* %36, align 4
  %2529 = load <4 x i32>, <4 x i32>* %allocaVec144, align 16
  %Vop822 = add <4 x i32> %2529, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop822, <4 x i32>* %allocaVec144
  %2530 = add nsw i32 %2528, 1
  store i32 %2530, i32* %36, align 4
  br label %2313

; <label>:2531:                                   ; preds = %2313
  br label %2532

; <label>:2532:                                   ; preds = %2531, %2139
  %2533 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %2534 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %2533, i32 0, i32 8
  %2535 = load i32, i32* %2534, align 4
  %2536 = icmp eq i32 %2535, 1
  br i1 %2536, label %2537, label %2743

; <label>:2537:                                   ; preds = %2532
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec218
  store double 0.000000e+00, double* %111, align 8
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec219
  store double 0.000000e+00, double* %112, align 8
  store <4 x i32> <i32 5, i32 5, i32 5, i32 5>, <4 x i32>* %allocaVec144
  store i32 5, i32* %36, align 4
  br label %2538

; <label>:2538:                                   ; preds = %2598, %2537
  %2539 = load i32, i32* %36, align 4
  %2540 = icmp slt i32 %2539, 21
  br i1 %2540, label %2541, label %2602

; <label>:2541:                                   ; preds = %2538
  %2542 = load i32, i32* %36, align 4
  %2543 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 0), i32 0, i32 %2542
  %2544 = load double, double* %2543, align 8
  %2545 = load i32, i32* %36, align 4
  %2546 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 0), i32 0, i32 %2545
  %2547 = load double, double* %2546, align 8
  %2548 = fcmp olt double %2544, %2547
  br i1 %2548, label %2549, label %2553

; <label>:2549:                                   ; preds = %2541
  %2550 = load i32, i32* %36, align 4
  %2551 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 0), i32 0, i32 %2550
  %2552 = load double, double* %2551, align 8
  br label %2557

; <label>:2553:                                   ; preds = %2541
  %2554 = load i32, i32* %36, align 4
  %2555 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 0), i32 0, i32 %2554
  %2556 = load double, double* %2555, align 8
  br label %2557

; <label>:2557:                                   ; preds = %2553, %2549
  %2558 = phi double [ %2552, %2549 ], [ %2556, %2553 ]
  store double %2558, double* %109, align 8
  %2559 = load i32, i32* %36, align 4
  %2560 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 0), i32 0, i32 %2559
  %2561 = load double, double* %2560, align 8
  %2562 = load i32, i32* %36, align 4
  %2563 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 0), i32 0, i32 %2562
  %2564 = load double, double* %2563, align 8
  %2565 = fcmp ogt double %2561, %2564
  br i1 %2565, label %2566, label %2570

; <label>:2566:                                   ; preds = %2557
  %2567 = load i32, i32* %36, align 4
  %2568 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 0), i32 0, i32 %2567
  %2569 = load double, double* %2568, align 8
  br label %2574

; <label>:2570:                                   ; preds = %2557
  %2571 = load i32, i32* %36, align 4
  %2572 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 0), i32 0, i32 %2571
  %2573 = load double, double* %2572, align 8
  br label %2574

; <label>:2574:                                   ; preds = %2570, %2566
  %2575 = phi double [ %2569, %2566 ], [ %2573, %2570 ]
  store double %2575, double* %110, align 8
  %2576 = load double, double* %110, align 8
  %2577 = load double, double* %109, align 8
  %insertElmt823 = insertelement <2 x double> undef, double %2577, i32 0
  %insertElmt824 = insertelement <2 x double> %insertElmt823, double %2577, i32 1
  store <2 x double> %insertElmt824, <2 x double>* %allocaVec216, align 16
  %2578 = load <2 x double>, <2 x double>* %allocaVec216, align 16
  %Vop825 = fmul <2 x double> <double 1.000000e+03, double 1.000000e+03>, %2578
  %2579 = fmul double 1.000000e+03, %2577
  %2580 = fcmp oge double %2576, %2579
  br i1 %2580, label %2581, label %2582

; <label>:2581:                                   ; preds = %2574
  store <2 x double> <double 3.000000e+00, double 3.000000e+00>, <2 x double>* %allocaVec215
  store double 3.000000e+00, double* %108, align 8
  br label %2589

; <label>:2582:                                   ; preds = %2574
  %2583 = load double, double* %110, align 8
  %insertElmt826 = insertelement <2 x double> undef, double %2583, i32 0
  %insertElmt827 = insertelement <2 x double> %insertElmt826, double %2583, i32 1
  store <2 x double> %insertElmt827, <2 x double>* %allocaVec217, align 16
  %2584 = load double, double* %109, align 8
  %insertElmt828 = insertelement <2 x double> undef, double %2584, i32 0
  %insertElmt829 = insertelement <2 x double> %insertElmt828, double %2584, i32 1
  store <2 x double> %insertElmt829, <2 x double>* %allocaVec216, align 16
  %2585 = load <2 x double>, <2 x double>* %allocaVec217, align 16
  %2586 = load <2 x double>, <2 x double>* %allocaVec216, align 16
  %Vop830 = fdiv <2 x double> %2585, %2586
  %2587 = fdiv double %2583, %2584
  %2588 = call arm_aapcscc double @log10(double %2587) #7
  store double %2588, double* %108, align 8
  br label %2589

; <label>:2589:                                   ; preds = %2582, %2581
  %2590 = load double, double* %108, align 8
  %insertElmt831 = insertelement <2 x double> undef, double %2590, i32 0
  %insertElmt832 = insertelement <2 x double> %insertElmt831, double %2590, i32 1
  store <2 x double> %insertElmt832, <2 x double>* %allocaVec215, align 16
  %2591 = load double, double* %111, align 8
  %insertElmt833 = insertelement <2 x double> undef, double %2591, i32 0
  %insertElmt834 = insertelement <2 x double> %insertElmt833, double %2591, i32 1
  store <2 x double> %insertElmt834, <2 x double>* %allocaVec218, align 16
  %2592 = load <2 x double>, <2 x double>* %allocaVec218, align 16
  %2593 = load <2 x double>, <2 x double>* %allocaVec215, align 16
  %Vop835 = fadd <2 x double> %2592, %2593
  store <2 x double> %Vop835, <2 x double>* %allocaVec218
  %2594 = fadd double %2591, %2590
  store double %2594, double* %111, align 8
  %2595 = load double, double* %112, align 8
  %insertElmt836 = insertelement <2 x double> undef, double %2595, i32 0
  %insertElmt837 = insertelement <2 x double> %insertElmt836, double %2595, i32 1
  store <2 x double> %insertElmt837, <2 x double>* %allocaVec219, align 16
  %2596 = load <2 x double>, <2 x double>* %allocaVec219, align 16
  %Vop838 = fadd <2 x double> %2596, <double 1.000000e+00, double 1.000000e+00>
  store <2 x double> %Vop838, <2 x double>* %allocaVec219
  %2597 = fadd double %2595, 1.000000e+00
  store double %2597, double* %112, align 8
  br label %2598

; <label>:2598:                                   ; preds = %2589
  %2599 = load i32, i32* %36, align 4
  %2600 = load <4 x i32>, <4 x i32>* %allocaVec144, align 16
  %Vop839 = add <4 x i32> %2600, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop839, <4 x i32>* %allocaVec144
  %2601 = add nsw i32 %2599, 1
  store i32 %2601, i32* %36, align 4
  br label %2538

; <label>:2602:                                   ; preds = %2538
  %2603 = load double, double* %111, align 8
  %2604 = load double, double* %112, align 8
  %2605 = load <2 x double>, <2 x double>* %allocaVec218, align 16
  %2606 = load <2 x double>, <2 x double>* %allocaVec219, align 16
  %Vop840 = fdiv <2 x double> %2605, %2606
  %2607 = fdiv double %2603, %2604
  %Vop841 = fmul <2 x double> %Vop840, <double 7.000000e-01, double 7.000000e-01>
  store <2 x double> %Vop841, <2 x double>* %allocaVec136
  %2608 = load <2 x double>, <2 x double>* %allocaVec136, align 4
  %extractE843 = extractelement <2 x double> %2608, i64 0
  %extractE844 = extractelement <2 x double> %2608, i64 1
  %sum845 = fadd double %extractE843, %extractE844
  %sum846 = fadd double %sum845, %extractE844
  %2609 = fmul double %2607, 7.000000e-01
  %Fmul842 = fmul double %2609, 3.000000e+00
  store double %2609, double* %Recovery35
  %Fcmp847 = fcmp une double %sum846, %Fmul842
  br i1 %Fcmp847, label %2610, label %2614

; <label>:2610:                                   ; preds = %2602
  %remThree917 = fdiv double %sum846, %extractE843
  %FcmpThree918 = fcmp une double %remThree917, 3.000000e+00
  br i1 %FcmpThree918, label %2611, label %2612

; <label>:2611:                                   ; preds = %2610
  store double %2609, double* %Recovery35, align 8
  br label %2613

; <label>:2612:                                   ; preds = %2610
  store double %extractE843, double* %Recovery35, align 8
  br label %2613

; <label>:2613:                                   ; preds = %2612, %2611
  br label %2614

; <label>:2614:                                   ; preds = %2602, %2613
  %ReplaceInst939 = load double, double* %Recovery35, align 8
  store double %ReplaceInst939, double* %26, align 8
  %2615 = load double, double* %26, align 8
  %2616 = fcmp olt double %2615, 5.000000e-01
  br i1 %2616, label %2617, label %2619

; <label>:2617:                                   ; preds = %2614
  %2618 = load double, double* %26, align 8
  br label %2620

; <label>:2619:                                   ; preds = %2614
  br label %2620

; <label>:2620:                                   ; preds = %2619, %2617
  %2621 = phi double [ %2618, %2617 ], [ 5.000000e-01, %2619 ]
  store double %2621, double* %26, align 8
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec218
  store double 0.000000e+00, double* %111, align 8
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec219
  store double 0.000000e+00, double* %112, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec145
  store i32 0, i32* %37, align 4
  br label %2622

; <label>:2622:                                   ; preds = %2722, %2620
  %2623 = load i32, i32* %37, align 4
  %2624 = icmp slt i32 %2623, 3
  br i1 %2624, label %2625, label %2723

; <label>:2625:                                   ; preds = %2622
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %allocaVec144
  store i32 3, i32* %36, align 4
  br label %2626

; <label>:2626:                                   ; preds = %2711, %2625
  %2627 = load i32, i32* %36, align 4
  %2628 = icmp slt i32 %2627, 12
  br i1 %2628, label %2629, label %2712

; <label>:2629:                                   ; preds = %2626
  %2630 = load i32, i32* %36, align 4
  %2631 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 1), i32 0, i32 %2630
  %2632 = load i32, i32* %37, align 4
  %2633 = getelementptr inbounds [3 x double], [3 x double]* %2631, i32 0, i32 %2632
  %2634 = load double, double* %2633, align 8
  %2635 = load i32, i32* %36, align 4
  %2636 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 1), i32 0, i32 %2635
  %2637 = load i32, i32* %37, align 4
  %2638 = getelementptr inbounds [3 x double], [3 x double]* %2636, i32 0, i32 %2637
  %2639 = load double, double* %2638, align 8
  %2640 = fcmp olt double %2634, %2639
  br i1 %2640, label %2641, label %2647

; <label>:2641:                                   ; preds = %2629
  %2642 = load i32, i32* %36, align 4
  %2643 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 1), i32 0, i32 %2642
  %2644 = load i32, i32* %37, align 4
  %2645 = getelementptr inbounds [3 x double], [3 x double]* %2643, i32 0, i32 %2644
  %2646 = load double, double* %2645, align 8
  br label %2653

; <label>:2647:                                   ; preds = %2629
  %2648 = load i32, i32* %36, align 4
  %2649 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 1), i32 0, i32 %2648
  %2650 = load i32, i32* %37, align 4
  %2651 = getelementptr inbounds [3 x double], [3 x double]* %2649, i32 0, i32 %2650
  %2652 = load double, double* %2651, align 8
  br label %2653

; <label>:2653:                                   ; preds = %2647, %2641
  %2654 = phi double [ %2646, %2641 ], [ %2652, %2647 ]
  store double %2654, double* %109, align 8
  %2655 = load i32, i32* %36, align 4
  %2656 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 1), i32 0, i32 %2655
  %2657 = load i32, i32* %37, align 4
  %2658 = getelementptr inbounds [3 x double], [3 x double]* %2656, i32 0, i32 %2657
  %2659 = load double, double* %2658, align 8
  %2660 = load i32, i32* %36, align 4
  %2661 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 1), i32 0, i32 %2660
  %2662 = load i32, i32* %37, align 4
  %2663 = getelementptr inbounds [3 x double], [3 x double]* %2661, i32 0, i32 %2662
  %2664 = load double, double* %2663, align 8
  %2665 = fcmp ogt double %2659, %2664
  br i1 %2665, label %2666, label %2672

; <label>:2666:                                   ; preds = %2653
  %2667 = load i32, i32* %36, align 4
  %2668 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 1), i32 0, i32 %2667
  %2669 = load i32, i32* %37, align 4
  %2670 = getelementptr inbounds [3 x double], [3 x double]* %2668, i32 0, i32 %2669
  %2671 = load double, double* %2670, align 8
  br label %2678

; <label>:2672:                                   ; preds = %2653
  %2673 = load i32, i32* %36, align 4
  %2674 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 1), i32 0, i32 %2673
  %2675 = load i32, i32* %37, align 4
  %2676 = getelementptr inbounds [3 x double], [3 x double]* %2674, i32 0, i32 %2675
  %2677 = load double, double* %2676, align 8
  br label %2678

; <label>:2678:                                   ; preds = %2672, %2666
  %2679 = phi double [ %2671, %2666 ], [ %2677, %2672 ]
  store double %2679, double* %110, align 8
  %2680 = load double, double* %110, align 8
  %2681 = load double, double* %109, align 8
  %insertElmt848 = insertelement <2 x double> undef, double %2681, i32 0
  %insertElmt849 = insertelement <2 x double> %insertElmt848, double %2681, i32 1
  store <2 x double> %insertElmt849, <2 x double>* %allocaVec216, align 16
  %2682 = load <2 x double>, <2 x double>* %allocaVec216, align 16
  %Vop850 = fmul <2 x double> <double 1.000000e+03, double 1.000000e+03>, %2682
  %2683 = fmul double 1.000000e+03, %2681
  %2684 = fcmp oge double %2680, %2683
  br i1 %2684, label %2685, label %2686

; <label>:2685:                                   ; preds = %2678
  store <2 x double> <double 3.000000e+00, double 3.000000e+00>, <2 x double>* %allocaVec215
  store double 3.000000e+00, double* %108, align 8
  br label %2693

; <label>:2686:                                   ; preds = %2678
  %2687 = load double, double* %110, align 8
  %insertElmt851 = insertelement <2 x double> undef, double %2687, i32 0
  %insertElmt852 = insertelement <2 x double> %insertElmt851, double %2687, i32 1
  store <2 x double> %insertElmt852, <2 x double>* %allocaVec217, align 16
  %2688 = load double, double* %109, align 8
  %insertElmt853 = insertelement <2 x double> undef, double %2688, i32 0
  %insertElmt854 = insertelement <2 x double> %insertElmt853, double %2688, i32 1
  store <2 x double> %insertElmt854, <2 x double>* %allocaVec216, align 16
  %2689 = load <2 x double>, <2 x double>* %allocaVec217, align 16
  %2690 = load <2 x double>, <2 x double>* %allocaVec216, align 16
  %Vop855 = fdiv <2 x double> %2689, %2690
  %2691 = fdiv double %2687, %2688
  %2692 = call arm_aapcscc double @log10(double %2691) #7
  store double %2692, double* %108, align 8
  br label %2693

; <label>:2693:                                   ; preds = %2686, %2685
  %2694 = load double, double* %108, align 8
  %insertElmt856 = insertelement <2 x double> undef, double %2694, i32 0
  %insertElmt857 = insertelement <2 x double> %insertElmt856, double %2694, i32 1
  store <2 x double> %insertElmt857, <2 x double>* %allocaVec215, align 16
  %2695 = load double, double* %111, align 8
  %2696 = load <2 x double>, <2 x double>* %allocaVec218, align 16
  %2697 = load <2 x double>, <2 x double>* %allocaVec215, align 16
  %Vop858 = fadd <2 x double> %2696, %2697
  store <2 x double> %Vop858, <2 x double>* %allocaVec218
  %2698 = fadd double %2695, %2694
  store double %2698, double* %111, align 8
  %2699 = load double, double* %112, align 8
  %2700 = load <2 x double>, <2 x double>* %allocaVec219, align 16
  %Vop859 = fadd <2 x double> %2700, <double 1.000000e+00, double 1.000000e+00>
  store <2 x double> %Vop859, <2 x double>* %allocaVec219
  %2701 = fadd double %2699, 1.000000e+00
  store double %2701, double* %112, align 8
  br label %2702

; <label>:2702:                                   ; preds = %2693
  %2703 = load i32, i32* %36, align 4
  %2704 = load <4 x i32>, <4 x i32>* %allocaVec144, align 16
  %Vop860 = add <4 x i32> %2704, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop860, <4 x i32>* %allocaVec144
  %2705 = load <4 x i32>, <4 x i32>* %allocaVec144, align 4
  %extractE862 = extractelement <4 x i32> %2705, i64 0
  %extractE863 = extractelement <4 x i32> %2705, i64 1
  %extractE864 = extractelement <4 x i32> %2705, i64 2
  %sum865 = add i32 %extractE862, %extractE863
  %sum866 = add i32 %sum865, %extractE864
  %2706 = add nsw i32 %2703, 1
  %Fmul861 = mul i32 %2706, 3
  store i32 %2706, i32* %Recovery36
  %Fcmp867 = icmp ne i32 %sum866, %Fmul861
  br i1 %Fcmp867, label %2707, label %2711

; <label>:2707:                                   ; preds = %2702
  %remThree919 = sdiv i32 %sum866, %extractE862
  %FcmpThree920 = icmp ne i32 %remThree919, 3
  br i1 %FcmpThree920, label %2708, label %2709

; <label>:2708:                                   ; preds = %2707
  store i32 %2706, i32* %Recovery36, align 4
  br label %2710

; <label>:2709:                                   ; preds = %2707
  store i32 %extractE862, i32* %Recovery36, align 4
  br label %2710

; <label>:2710:                                   ; preds = %2709, %2708
  br label %2711

; <label>:2711:                                   ; preds = %2702, %2710
  %ReplaceInst940 = load i32, i32* %Recovery36, align 4
  store i32 %ReplaceInst940, i32* %36, align 4
  br label %2626

; <label>:2712:                                   ; preds = %2626
  br label %2713

; <label>:2713:                                   ; preds = %2712
  %2714 = load i32, i32* %37, align 4
  %2715 = load <4 x i32>, <4 x i32>* %allocaVec145, align 16
  %Vop868 = add <4 x i32> %2715, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop868, <4 x i32>* %allocaVec145
  %2716 = load <4 x i32>, <4 x i32>* %allocaVec145, align 4
  %extractE870 = extractelement <4 x i32> %2716, i64 0
  %extractE871 = extractelement <4 x i32> %2716, i64 1
  %extractE872 = extractelement <4 x i32> %2716, i64 2
  %sum873 = add i32 %extractE870, %extractE871
  %sum874 = add i32 %sum873, %extractE872
  %2717 = add nsw i32 %2714, 1
  %Fmul869 = mul i32 %2717, 3
  store i32 %2717, i32* %Recovery37
  %Fcmp875 = icmp ne i32 %sum874, %Fmul869
  br i1 %Fcmp875, label %2718, label %2722

; <label>:2718:                                   ; preds = %2713
  %remThree921 = sdiv i32 %sum874, %extractE870
  %FcmpThree922 = icmp ne i32 %remThree921, 3
  br i1 %FcmpThree922, label %2719, label %2720

; <label>:2719:                                   ; preds = %2718
  store i32 %2717, i32* %Recovery37, align 4
  br label %2721

; <label>:2720:                                   ; preds = %2718
  store i32 %extractE870, i32* %Recovery37, align 4
  br label %2721

; <label>:2721:                                   ; preds = %2720, %2719
  br label %2722

; <label>:2722:                                   ; preds = %2713, %2721
  %ReplaceInst941 = load i32, i32* %Recovery37, align 4
  store i32 %ReplaceInst941, i32* %37, align 4
  br label %2622

; <label>:2723:                                   ; preds = %2622
  %2724 = load double, double* %111, align 8
  %2725 = load double, double* %112, align 8
  %2726 = load <2 x double>, <2 x double>* %allocaVec218, align 16
  %2727 = load <2 x double>, <2 x double>* %allocaVec219, align 16
  %Vop876 = fdiv <2 x double> %2726, %2727
  %2728 = fdiv double %2724, %2725
  %Vop877 = fmul <2 x double> %Vop876, <double 7.000000e-01, double 7.000000e-01>
  store <2 x double> %Vop877, <2 x double>* %allocaVec137
  %2729 = load <2 x double>, <2 x double>* %allocaVec137, align 4
  %extractE879 = extractelement <2 x double> %2729, i64 0
  %extractE880 = extractelement <2 x double> %2729, i64 1
  %sum881 = fadd double %extractE879, %extractE880
  %sum882 = fadd double %sum881, %extractE880
  %2730 = fmul double %2728, 7.000000e-01
  %Fmul878 = fmul double %2730, 3.000000e+00
  store double %2730, double* %Recovery38
  %Fcmp883 = fcmp une double %sum882, %Fmul878
  br i1 %Fcmp883, label %2731, label %2735

; <label>:2731:                                   ; preds = %2723
  %remThree923 = fdiv double %sum882, %extractE879
  %FcmpThree924 = fcmp une double %remThree923, 3.000000e+00
  br i1 %FcmpThree924, label %2732, label %2733

; <label>:2732:                                   ; preds = %2731
  store double %2730, double* %Recovery38, align 8
  br label %2734

; <label>:2733:                                   ; preds = %2731
  store double %extractE879, double* %Recovery38, align 8
  br label %2734

; <label>:2734:                                   ; preds = %2733, %2732
  br label %2735

; <label>:2735:                                   ; preds = %2723, %2734
  %ReplaceInst942 = load double, double* %Recovery38, align 8
  store double %ReplaceInst942, double* %27, align 8
  %2736 = load double, double* %27, align 8
  %2737 = fcmp olt double %2736, 5.000000e-01
  br i1 %2737, label %2738, label %2740

; <label>:2738:                                   ; preds = %2735
  %2739 = load double, double* %27, align 8
  br label %2741

; <label>:2740:                                   ; preds = %2735
  br label %2741

; <label>:2741:                                   ; preds = %2740, %2738
  %2742 = phi double [ %2739, %2738 ], [ 5.000000e-01, %2740 ]
  store double %2742, double* %27, align 8
  br label %2743

; <label>:2743:                                   ; preds = %2741, %2532
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec139
  store i32 0, i32* %31, align 4
  br label %2744

; <label>:2744:                                   ; preds = %2753, %2743
  %2745 = load i32, i32* %31, align 4
  %2746 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %2747 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %2746, i32 0, i32 46
  %2748 = load i32, i32* %2747, align 4
  %2749 = icmp slt i32 %2745, %2748
  br i1 %2749, label %2750, label %2757

; <label>:2750:                                   ; preds = %2744
  %2751 = load i32, i32* %31, align 4
  %2752 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i32 0, i32 %2751
  store i32 0, i32* %2752, align 4
  br label %2753

; <label>:2753:                                   ; preds = %2750
  %2754 = load i32, i32* %31, align 4
  %2755 = load <4 x i32>, <4 x i32>* %allocaVec139, align 16
  %Vop884 = add <4 x i32> %2755, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop884, <4 x i32>* %allocaVec139
  %2756 = add nsw i32 %2754, 1
  store i32 %2756, i32* %31, align 4
  br label %2744

; <label>:2757:                                   ; preds = %2744
  %2758 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %2759 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %2758, i32 0, i32 46
  %2760 = load i32, i32* %2759, align 4
  %2761 = icmp eq i32 %2760, 2
  br i1 %2761, label %2762, label %2790

; <label>:2762:                                   ; preds = %2757
  %2763 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %2764 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %2763, i32 0, i32 36
  %2765 = load i32, i32* %2764, align 4
  %2766 = icmp ne i32 %2765, 0
  br i1 %2766, label %2767, label %2772

; <label>:2767:                                   ; preds = %2762
  %2768 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %2769 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %2768, i32 0, i32 8
  %2770 = load i32, i32* %2769, align 4
  %2771 = icmp eq i32 %2770, 1
  br i1 %2771, label %2772, label %2789

; <label>:2772:                                   ; preds = %2767, %2762
  %2773 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 0
  %2774 = load i32, i32* %2773, align 4
  %2775 = icmp ne i32 %2774, 0
  br i1 %2775, label %2776, label %2780

; <label>:2776:                                   ; preds = %2772
  %2777 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 1
  %2778 = load i32, i32* %2777, align 4
  %2779 = icmp ne i32 %2778, 0
  br label %2780

; <label>:2780:                                   ; preds = %2776, %2772
  %2781 = phi i1 [ false, %2772 ], [ %2779, %2776 ]
  %2782 = zext i1 %2781 to i32
  store i32 %2782, i32* %113, align 4
  %2783 = load i32, i32* %113, align 4
  %2784 = icmp ne i32 %2783, 0
  br i1 %2784, label %2788, label %2785

; <label>:2785:                                   ; preds = %2780
  %2786 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 0
  store i32 0, i32* %2786, align 4
  %2787 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 1
  store i32 0, i32* %2787, align 4
  br label %2788

; <label>:2788:                                   ; preds = %2785, %2780
  br label %2789

; <label>:2789:                                   ; preds = %2788, %2767
  br label %2790

; <label>:2790:                                   ; preds = %2789, %2757
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec139
  store i32 0, i32* %31, align 4
  br label %2791

; <label>:2791:                                   ; preds = %2856, %2790
  %2792 = load i32, i32* %31, align 4
  %2793 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %2794 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %2793, i32 0, i32 46
  %2795 = load i32, i32* %2794, align 4
  %2796 = icmp slt i32 %2792, %2795
  br i1 %2796, label %2797, label %2857

; <label>:2797:                                   ; preds = %2791
  %2798 = load i32, i32* %31, align 4
  %2799 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 %2798
  %2800 = load i32, i32* %2799, align 4
  %2801 = icmp ne i32 %2800, 0
  br i1 %2801, label %2802, label %2816

; <label>:2802:                                   ; preds = %2797
  %2803 = load i32, i32* %31, align 4
  %2804 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 %2803
  %2805 = load i32, i32* %2804, align 4
  switch i32 %2805, label %2815 [
    i32 0, label %2806
    i32 3, label %2806
    i32 2, label %2809
    i32 1, label %2812
  ]

; <label>:2806:                                   ; preds = %2802, %2802
  %2807 = load i32, i32* %31, align 4
  %2808 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i32 0, i32 %2807
  store i32 0, i32* %2808, align 4
  br label %2815

; <label>:2809:                                   ; preds = %2802
  %2810 = load i32, i32* %31, align 4
  %2811 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i32 0, i32 %2810
  store i32 3, i32* %2811, align 4
  br label %2815

; <label>:2812:                                   ; preds = %2802
  %2813 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %2814 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2813, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1.206, i32 0, i32 0))
  call arm_aapcscc void @abort() #8
  unreachable

; <label>:2815:                                   ; preds = %2809, %2806, %2802
  br label %2835

; <label>:2816:                                   ; preds = %2797
  %2817 = load i32, i32* %31, align 4
  %2818 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i32 0, i32 %2817
  store i32 2, i32* %2818, align 4
  %2819 = load i32, i32* %31, align 4
  %2820 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 %2819
  %2821 = load i32, i32* %2820, align 4
  %2822 = icmp eq i32 %2821, 0
  br i1 %2822, label %2823, label %2826

; <label>:2823:                                   ; preds = %2816
  %2824 = load i32, i32* %31, align 4
  %2825 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 %2824
  store i32 1, i32* %2825, align 4
  br label %2826

; <label>:2826:                                   ; preds = %2823, %2816
  %2827 = load i32, i32* %31, align 4
  %2828 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 %2827
  %2829 = load i32, i32* %2828, align 4
  %2830 = icmp eq i32 %2829, 3
  br i1 %2830, label %2831, label %2834

; <label>:2831:                                   ; preds = %2826
  %2832 = load i32, i32* %31, align 4
  %2833 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 %2832
  store i32 2, i32* %2833, align 4
  br label %2834

; <label>:2834:                                   ; preds = %2831, %2826
  br label %2835

; <label>:2835:                                   ; preds = %2834, %2815
  %2836 = load i32, i32* %31, align 4
  %2837 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 %2836
  %2838 = load i32, i32* %2837, align 4
  %2839 = load i32*, i32** %22, align 4
  %2840 = load i32, i32* %31, align 4
  %2841 = getelementptr inbounds i32, i32* %2839, i32 %2840
  store i32 %2838, i32* %2841, align 4
  %2842 = load i32, i32* %31, align 4
  %2843 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i32 0, i32 %2842
  %2844 = load i32, i32* %2843, align 4
  %2845 = load i32, i32* %31, align 4
  %2846 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 %2845
  store i32 %2844, i32* %2846, align 4
  br label %2847

; <label>:2847:                                   ; preds = %2835
  %2848 = load i32, i32* %31, align 4
  %2849 = load <4 x i32>, <4 x i32>* %allocaVec139, align 16
  %Vop885 = add <4 x i32> %2849, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop885, <4 x i32>* %allocaVec139
  %2850 = load <4 x i32>, <4 x i32>* %allocaVec139, align 4
  %extractE887 = extractelement <4 x i32> %2850, i64 0
  %extractE888 = extractelement <4 x i32> %2850, i64 1
  %extractE889 = extractelement <4 x i32> %2850, i64 2
  %sum890 = add i32 %extractE887, %extractE888
  %sum891 = add i32 %sum890, %extractE889
  %2851 = add nsw i32 %2848, 1
  %Fmul886 = mul i32 %2851, 3
  store i32 %2851, i32* %Recovery39
  %Fcmp892 = icmp ne i32 %sum891, %Fmul886
  br i1 %Fcmp892, label %2852, label %2856

; <label>:2852:                                   ; preds = %2847
  %remThree925 = sdiv i32 %sum891, %extractE887
  %FcmpThree926 = icmp ne i32 %remThree925, 3
  br i1 %FcmpThree926, label %2853, label %2854

; <label>:2853:                                   ; preds = %2852
  store i32 %2851, i32* %Recovery39, align 4
  br label %2855

; <label>:2854:                                   ; preds = %2852
  store i32 %extractE887, i32* %Recovery39, align 4
  br label %2855

; <label>:2855:                                   ; preds = %2854, %2853
  br label %2856

; <label>:2856:                                   ; preds = %2847, %2855
  %ReplaceInst943 = load i32, i32* %Recovery39, align 4
  store i32 %ReplaceInst943, i32* %31, align 4
  br label %2791

; <label>:2857:                                   ; preds = %2791
  %2858 = load i32*, i32** %22, align 4
  %2859 = getelementptr inbounds i32, i32* %2858, i32 0
  %2860 = load i32, i32* %2859, align 4
  %2861 = icmp eq i32 %2860, 2
  br i1 %2861, label %2862, label %2865

; <label>:2862:                                   ; preds = %2857
  %2863 = load double, double* @L3psycho_anal.ms_ratio_s_old, align 8
  %2864 = load double*, double** %15, align 4
  store double %2863, double* %2864, align 8
  br label %2868

; <label>:2865:                                   ; preds = %2857
  %2866 = load double, double* @L3psycho_anal.ms_ratio_l_old, align 8
  %2867 = load double*, double** %15, align 4
  store double %2866, double* %2867, align 8
  br label %2868

; <label>:2868:                                   ; preds = %2865, %2862
  %2869 = load double, double* %27, align 8
  store double %2869, double* @L3psycho_anal.ms_ratio_s_old, align 8
  %2870 = load double, double* %26, align 8
  store double %2870, double* @L3psycho_anal.ms_ratio_l_old, align 8
  %2871 = load double, double* %26, align 8
  %2872 = load double*, double** %16, align 4
  store double %2871, double* %2872, align 8
  %2873 = load i32, i32* %30, align 4
  %2874 = icmp eq i32 %2873, 4
  br i1 %2874, label %2875, label %2892

; <label>:2875:                                   ; preds = %2868
  %2876 = getelementptr inbounds [4 x float], [4 x float]* %25, i32 0, i32 3
  %2877 = load float, float* %2876, align 4
  %2878 = getelementptr inbounds [4 x float], [4 x float]* %25, i32 0, i32 2
  %2879 = load float, float* %2878, align 4
  %2880 = fadd float %2877, %2879
  store float %2880, float* %114, align 4
  %2881 = load double, double* @L3psycho_anal.ms_ener_ratio_old, align 8
  %2882 = load double*, double** %17, align 4
  store double %2881, double* %2882, align 8
  store double 0.000000e+00, double* @L3psycho_anal.ms_ener_ratio_old, align 8
  %2883 = load float, float* %114, align 4
  %2884 = fcmp ogt float %2883, 0.000000e+00
  br i1 %2884, label %2885, label %2891

; <label>:2885:                                   ; preds = %2875
  %2886 = getelementptr inbounds [4 x float], [4 x float]* %25, i32 0, i32 3
  %2887 = load float, float* %2886, align 4
  %2888 = load float, float* %114, align 4
  %2889 = fdiv float %2887, %2888
  %2890 = fpext float %2889 to double
  store double %2890, double* @L3psycho_anal.ms_ener_ratio_old, align 8
  br label %2891

; <label>:2891:                                   ; preds = %2885, %2875
  br label %2894

; <label>:2892:                                   ; preds = %2868
  %2893 = load double*, double** %17, align 4
  store double 0.000000e+00, double* %2893, align 8
  br label %2894

; <label>:2894:                                   ; preds = %2892, %2891
  ret void
}

; Function Attrs: nounwind
declare arm_aapcscc double @pow(double, double) #2

; Function Attrs: nounwind
define arm_aapcscc void @L3para_read(double, i32*, i32*, i32*, double*, double*, [64 x double]*, [64 x double]*, double*, double*, i32*, i32*, double*, double*, i32*, i32*, double*, double*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec14 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec18 = alloca <4 x i32>, align 16
  %Recovery5 = alloca i32, align 4
  %allocaVec19 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec20 = alloca <2 x double>, align 16
  %CastInst6 = alloca double, align 4
  %CastInstVec7 = alloca <2 x double>, align 16
  %allocaVec21 = alloca <2 x double>, align 16
  %CastInst8 = alloca double, align 4
  %CastInstVec9 = alloca <2 x double>, align 16
  %allocaVec22 = alloca <2 x double>, align 16
  %CastInst10 = alloca double, align 4
  %CastInstVec11 = alloca <2 x double>, align 16
  %allocaVec23 = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %allocaVec24 = alloca <2 x double>, align 16
  %CallInst12 = alloca double, align 4
  %CallInstVec13 = alloca <2 x double>, align 16
  %allocaVec25 = alloca <2 x double>, align 16
  %19 = alloca double, align 8
  %20 = alloca i32*, align 4
  %21 = alloca i32*, align 4
  %22 = alloca i32*, align 4
  %23 = alloca double*, align 4
  %24 = alloca double*, align 4
  %25 = alloca [64 x double]*, align 4
  %26 = alloca [64 x double]*, align 4
  %27 = alloca double*, align 4
  %28 = alloca double*, align 4
  %29 = alloca i32*, align 4
  %30 = alloca i32*, align 4
  %31 = alloca double*, align 4
  %32 = alloca double*, align 4
  %33 = alloca i32*, align 4
  %34 = alloca i32*, align 4
  %35 = alloca double*, align 4
  %36 = alloca double*, align 4
  %allocaVec26 = alloca <2 x double>, align 16
  %37 = alloca double, align 8
  %38 = alloca [63 x double], align 8
  %39 = alloca [63 x double], align 8
  %allocaVec27 = alloca <4 x i32>, align 16
  %40 = alloca i32, align 4
  %allocaVec28 = alloca <4 x i32>, align 16
  %41 = alloca i32, align 4
  %42 = alloca double*, align 4
  %allocaVec29 = alloca <4 x i32>, align 16
  %43 = alloca i32, align 4
  %allocaVec30 = alloca <4 x i32>, align 16
  %44 = alloca i32, align 4
  %allocaVec31 = alloca <4 x i32>, align 16
  %45 = alloca i32, align 4
  %allocaVec32 = alloca <4 x i32>, align 16
  %46 = alloca i32, align 4
  %allocaVec33 = alloca <4 x i32>, align 16
  %47 = alloca i32, align 4
  %allocaVec34 = alloca <4 x i32>, align 16
  %48 = alloca i32, align 4
  %allocaVec35 = alloca <4 x i32>, align 16
  %49 = alloca i32, align 4
  %allocaVec36 = alloca <4 x i32>, align 16
  %50 = alloca i32, align 4
  %allocaVec37 = alloca <2 x double>, align 16
  %51 = alloca double, align 8
  %allocaVec38 = alloca <2 x double>, align 16
  %52 = alloca double, align 8
  %allocaVec39 = alloca <2 x double>, align 16
  %53 = alloca double, align 8
  %allocaVec40 = alloca <2 x double>, align 16
  %54 = alloca double, align 8
  %allocaVec41 = alloca <2 x double>, align 16
  %55 = alloca double, align 8
  %allocaVec42 = alloca <2 x double>, align 16
  %56 = alloca double, align 8
  %allocaVec43 = alloca <2 x double>, align 16
  %57 = alloca double, align 8
  %allocaVec44 = alloca <2 x double>, align 16
  %58 = alloca double, align 8
  store double %0, double* %19, align 8
  store i32* %1, i32** %20, align 4
  store i32* %2, i32** %21, align 4
  store i32* %3, i32** %22, align 4
  store double* %4, double** %23, align 4
  store double* %5, double** %24, align 4
  store [64 x double]* %6, [64 x double]** %25, align 4
  store [64 x double]* %7, [64 x double]** %26, align 4
  store double* %8, double** %27, align 4
  store double* %9, double** %28, align 4
  store i32* %10, i32** %29, align 4
  store i32* %11, i32** %30, align 4
  store double* %12, double** %31, align 4
  store double* %13, double** %32, align 4
  store i32* %14, i32** %33, align 4
  store i32* %15, i32** %34, align 4
  store double* %16, double** %35, align 4
  store double* %17, double** %36, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec27
  store i32 0, i32* %40, align 4
  store double* getelementptr inbounds ([4926 x double], [4926 x double]* @psy_data, i32 0, i32 0), double** %42, align 4
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec36
  store i32 1, i32* %50, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec34
  store i32 0, i32* %48, align 4
  br label %59

; <label>:59:                                     ; preds = %173, %18
  %60 = load i32, i32* %48, align 4
  %61 = icmp slt i32 %60, 6
  br i1 %61, label %62, label %177

; <label>:62:                                     ; preds = %59
  %63 = load double*, double** %42, align 4
  %64 = getelementptr inbounds double, double* %63, i32 1
  store double* %64, double** %42, align 4
  %65 = load double, double* %63, align 8
  store double %65, double* %37, align 8
  %66 = load double*, double** %42, align 4
  %67 = getelementptr inbounds double, double* %66, i32 1
  store double* %67, double** %42, align 4
  %68 = load double, double* %66, align 8
  %69 = fptosi double %68 to i32
  store i32 %69, i32* %41, align 4
  %70 = load i32, i32* %41, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %70, i32 0
  %insertElmt45 = insertelement <4 x i32> %insertElmt, i32 %70, i32 1
  %insertElmt46 = insertelement <4 x i32> %insertElmt45, i32 %70, i32 2
  %insertElmt47 = insertelement <4 x i32> %insertElmt46, i32 %70, i32 3
  store <4 x i32> %insertElmt47, <4 x i32>* %allocaVec28, align 16
  %71 = load <4 x i32>, <4 x i32>* %allocaVec28, align 16
  %Vop = add <4 x i32> %71, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec28
  %72 = add nsw i32 %70, 1
  store i32 %72, i32* %41, align 4
  %73 = load double, double* %19, align 8
  %74 = load double, double* %37, align 8
  %insertElmt48 = insertelement <2 x double> undef, double %74, i32 0
  %insertElmt49 = insertelement <2 x double> %insertElmt48, double %74, i32 1
  store <2 x double> %insertElmt49, <2 x double>* %allocaVec26, align 16
  %75 = load i32, i32* %50, align 4
  %76 = sitofp i32 %75 to double
  %77 = load <2 x double>, <2 x double>* %allocaVec26, align 16
  store double %76, double* %CastInst
  %78 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %78, i32 0
  %insertCast50 = insertelement <2 x double> %insertCast, double %78, i32 1
  store <2 x double> %insertCast50, <2 x double>* %CastInstVec, align 4
  %79 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %Vop51 = fdiv <2 x double> %77, %79
  %80 = fdiv double %74, %76
  %81 = fcmp oeq double %73, %80
  br i1 %81, label %82, label %166

; <label>:82:                                     ; preds = %62
  %83 = load i32, i32* %41, align 4
  store i32 %83, i32* %40, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec30
  store i32 0, i32* %44, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec33
  store i32 0, i32* %47, align 4
  br label %84

; <label>:84:                                     ; preds = %161, %82
  %85 = load i32, i32* %44, align 4
  %86 = load i32, i32* %41, align 4
  %87 = icmp slt i32 %85, %86
  br i1 %87, label %88, label %165

; <label>:88:                                     ; preds = %84
  %89 = load double*, double** %42, align 4
  %90 = getelementptr inbounds double, double* %89, i32 1
  store double* %90, double** %42, align 4
  %91 = load double, double* %89, align 8
  %92 = fptosi double %91 to i32
  store i32 %92, i32* %45, align 4
  %93 = load double*, double** %42, align 4
  %94 = getelementptr inbounds double, double* %93, i32 1
  store double* %94, double** %42, align 4
  %95 = load double, double* %93, align 8
  %96 = fptosi double %95 to i32
  %97 = load i32*, i32** %20, align 4
  %98 = load i32, i32* %44, align 4
  %99 = getelementptr inbounds i32, i32* %97, i32 %98
  store i32 %96, i32* %99, align 4
  %100 = load double*, double** %42, align 4
  %101 = getelementptr inbounds double, double* %100, i32 1
  store double* %101, double** %42, align 4
  %102 = load double, double* %100, align 8
  %103 = fsub double %102, 6.000000e+00
  %104 = fsub double -0.000000e+00, %103
  %105 = fmul double %104, 0x3FCD791C5F888823
  %106 = call arm_aapcscc double @exp(double %105) #7
  %107 = load double*, double** %23, align 4
  %108 = load i32, i32* %44, align 4
  %109 = getelementptr inbounds double, double* %107, i32 %108
  store double %106, double* %109, align 8
  %110 = load double*, double** %42, align 4
  %111 = getelementptr inbounds double, double* %110, i32 1
  store double* %111, double** %42, align 4
  %112 = load double, double* %110, align 8
  %113 = load double*, double** %24, align 4
  %114 = load i32, i32* %44, align 4
  %115 = getelementptr inbounds double, double* %113, i32 %114
  store double %112, double* %115, align 8
  %116 = load double*, double** %42, align 4
  %117 = getelementptr inbounds double, double* %116, i32 1
  store double* %117, double** %42, align 4
  %118 = load double*, double** %42, align 4
  %119 = getelementptr inbounds double, double* %118, i32 1
  store double* %119, double** %42, align 4
  %120 = load double, double* %118, align 8
  %121 = load i32, i32* %44, align 4
  %122 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %121
  store double %120, double* %122, align 8
  %123 = load i32, i32* %45, align 4
  %124 = load i32, i32* %44, align 4
  %125 = icmp ne i32 %123, %124
  br i1 %125, label %126, label %129

; <label>:126:                                    ; preds = %88
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %128 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %127, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2.207, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:129:                                    ; preds = %88
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec32
  store i32 0, i32* %46, align 4
  br label %130

; <label>:130:                                    ; preds = %159, %129
  %131 = load i32, i32* %46, align 4
  %132 = load i32*, i32** %20, align 4
  %133 = load i32, i32* %44, align 4
  %134 = getelementptr inbounds i32, i32* %132, i32 %133
  %135 = load i32, i32* %134, align 4
  %136 = icmp slt i32 %131, %135
  br i1 %136, label %137, label %160

; <label>:137:                                    ; preds = %130
  %138 = load i32, i32* %44, align 4
  %139 = load i32*, i32** %22, align 4
  %140 = load i32, i32* %47, align 4
  %insertElmt52 = insertelement <4 x i32> undef, i32 %140, i32 0
  %insertElmt53 = insertelement <4 x i32> %insertElmt52, i32 %140, i32 1
  %insertElmt54 = insertelement <4 x i32> %insertElmt53, i32 %140, i32 2
  %insertElmt55 = insertelement <4 x i32> %insertElmt54, i32 %140, i32 3
  store <4 x i32> %insertElmt55, <4 x i32>* %allocaVec33, align 16
  %141 = load <4 x i32>, <4 x i32>* %allocaVec33, align 16
  %Vop56 = add <4 x i32> %141, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop56, <4 x i32>* %allocaVec33
  %142 = load <4 x i32>, <4 x i32>* %allocaVec33, align 4
  %extractE = extractelement <4 x i32> %142, i64 0
  %extractE57 = extractelement <4 x i32> %142, i64 1
  %extractE58 = extractelement <4 x i32> %142, i64 2
  %sum = add i32 %extractE, %extractE57
  %sum59 = add i32 %sum, %extractE58
  %143 = add nsw i32 %140, 1
  %Fmul = mul i32 %143, 3
  store i32 %143, i32* %Recovery
  %Fcmp = icmp ne i32 %sum59, %Fmul
  br i1 %Fcmp, label %144, label %148

; <label>:144:                                    ; preds = %137
  %remThree = sdiv i32 %sum59, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %145, label %146

; <label>:145:                                    ; preds = %144
  store i32 %143, i32* %Recovery, align 4
  br label %147

; <label>:146:                                    ; preds = %144
  store i32 %extractE, i32* %Recovery, align 4
  br label %147

; <label>:147:                                    ; preds = %146, %145
  br label %148

; <label>:148:                                    ; preds = %137, %147
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %47, align 4
  %149 = getelementptr inbounds i32, i32* %139, i32 %140
  store i32 %138, i32* %149, align 4
  br label %150

; <label>:150:                                    ; preds = %148
  %151 = load i32, i32* %46, align 4
  %insertElmt60 = insertelement <4 x i32> undef, i32 %151, i32 0
  %insertElmt61 = insertelement <4 x i32> %insertElmt60, i32 %151, i32 1
  %insertElmt62 = insertelement <4 x i32> %insertElmt61, i32 %151, i32 2
  %insertElmt63 = insertelement <4 x i32> %insertElmt62, i32 %151, i32 3
  store <4 x i32> %insertElmt63, <4 x i32>* %allocaVec32, align 16
  %152 = load <4 x i32>, <4 x i32>* %allocaVec32, align 16
  %Vop64 = add <4 x i32> %152, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop64, <4 x i32>* %allocaVec32
  %153 = load <4 x i32>, <4 x i32>* %allocaVec32, align 4
  %extractE66 = extractelement <4 x i32> %153, i64 0
  %extractE67 = extractelement <4 x i32> %153, i64 1
  %extractE68 = extractelement <4 x i32> %153, i64 2
  %sum69 = add i32 %extractE66, %extractE67
  %sum70 = add i32 %sum69, %extractE68
  %154 = add nsw i32 %151, 1
  %Fmul65 = mul i32 %154, 3
  store i32 %154, i32* %Recovery1
  %Fcmp71 = icmp ne i32 %sum70, %Fmul65
  br i1 %Fcmp71, label %155, label %159

; <label>:155:                                    ; preds = %150
  %remThree184 = sdiv i32 %sum70, %extractE66
  %FcmpThree185 = icmp ne i32 %remThree184, 3
  br i1 %FcmpThree185, label %156, label %157

; <label>:156:                                    ; preds = %155
  store i32 %154, i32* %Recovery1, align 4
  br label %158

; <label>:157:                                    ; preds = %155
  store i32 %extractE66, i32* %Recovery1, align 4
  br label %158

; <label>:158:                                    ; preds = %157, %156
  br label %159

; <label>:159:                                    ; preds = %150, %158
  %ReplaceInst192 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst192, i32* %46, align 4
  br label %130

; <label>:160:                                    ; preds = %130
  br label %161

; <label>:161:                                    ; preds = %160
  %162 = load i32, i32* %44, align 4
  %insertElmt72 = insertelement <4 x i32> undef, i32 %162, i32 0
  %insertElmt73 = insertelement <4 x i32> %insertElmt72, i32 %162, i32 1
  %insertElmt74 = insertelement <4 x i32> %insertElmt73, i32 %162, i32 2
  %insertElmt75 = insertelement <4 x i32> %insertElmt74, i32 %162, i32 3
  store <4 x i32> %insertElmt75, <4 x i32>* %allocaVec30, align 16
  %163 = load <4 x i32>, <4 x i32>* %allocaVec30, align 16
  %Vop76 = add <4 x i32> %163, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop76, <4 x i32>* %allocaVec30
  %164 = add nsw i32 %162, 1
  store i32 %164, i32* %44, align 4
  br label %84

; <label>:165:                                    ; preds = %84
  br label %172

; <label>:166:                                    ; preds = %62
  %167 = load i32, i32* %41, align 4
  %168 = load <4 x i32>, <4 x i32>* %allocaVec28, align 16
  %Vop77 = mul <4 x i32> %168, <i32 6, i32 6, i32 6, i32 6>
  %169 = mul nsw i32 %167, 6
  %170 = load double*, double** %42, align 4
  %171 = getelementptr inbounds double, double* %170, i32 %169
  store double* %171, double** %42, align 4
  br label %172

; <label>:172:                                    ; preds = %166, %165
  br label %173

; <label>:173:                                    ; preds = %172
  %174 = load i32, i32* %48, align 4
  %insertElmt78 = insertelement <4 x i32> undef, i32 %174, i32 0
  %insertElmt79 = insertelement <4 x i32> %insertElmt78, i32 %174, i32 1
  %insertElmt80 = insertelement <4 x i32> %insertElmt79, i32 %174, i32 2
  %insertElmt81 = insertelement <4 x i32> %insertElmt80, i32 %174, i32 3
  store <4 x i32> %insertElmt81, <4 x i32>* %allocaVec34, align 16
  %175 = load <4 x i32>, <4 x i32>* %allocaVec34, align 16
  %Vop82 = add <4 x i32> %175, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop82, <4 x i32>* %allocaVec34
  %176 = add nsw i32 %174, 1
  store i32 %176, i32* %48, align 4
  br label %59

; <label>:177:                                    ; preds = %59
  %178 = load i32, i32* %40, align 4
  store i32 %178, i32* %49, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec30
  store i32 0, i32* %44, align 4
  br label %179

; <label>:179:                                    ; preds = %299, %177
  %180 = load i32, i32* %44, align 4
  %181 = load i32, i32* %49, align 4
  %182 = icmp slt i32 %180, %181
  br i1 %182, label %183, label %303

; <label>:183:                                    ; preds = %179
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec31
  store i32 0, i32* %45, align 4
  br label %184

; <label>:184:                                    ; preds = %294, %183
  %185 = load i32, i32* %45, align 4
  %186 = load i32, i32* %49, align 4
  %187 = icmp slt i32 %185, %186
  br i1 %187, label %188, label %298

; <label>:188:                                    ; preds = %184
  %189 = load i32, i32* %45, align 4
  %190 = load i32, i32* %44, align 4
  %191 = icmp sge i32 %189, %190
  br i1 %191, label %192, label %201

; <label>:192:                                    ; preds = %188
  %193 = load i32, i32* %44, align 4
  %194 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %193
  %195 = load double, double* %194, align 8
  %196 = load i32, i32* %45, align 4
  %197 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %196
  %198 = load double, double* %197, align 8
  %199 = fsub double %195, %198
  %200 = fmul double %199, 3.000000e+00
  store double %200, double* %51, align 8
  br label %210

; <label>:201:                                    ; preds = %188
  %202 = load i32, i32* %44, align 4
  %203 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %202
  %204 = load double, double* %203, align 8
  %205 = load i32, i32* %45, align 4
  %206 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %205
  %207 = load double, double* %206, align 8
  %208 = fsub double %204, %207
  %209 = fmul double %208, 1.500000e+00
  store double %209, double* %51, align 8
  br label %210

; <label>:210:                                    ; preds = %201, %192
  %211 = load i32, i32* %44, align 4
  %212 = load i32, i32* %45, align 4
  %213 = icmp sge i32 %211, %212
  br i1 %213, label %214, label %223

; <label>:214:                                    ; preds = %210
  %215 = load i32, i32* %44, align 4
  %216 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %215
  %217 = load double, double* %216, align 8
  %218 = load i32, i32* %45, align 4
  %219 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %218
  %220 = load double, double* %219, align 8
  %221 = fsub double %217, %220
  %222 = fmul double %221, 3.000000e+00
  store double %222, double* %51, align 8
  br label %232

; <label>:223:                                    ; preds = %210
  %224 = load i32, i32* %44, align 4
  %225 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %224
  %226 = load double, double* %225, align 8
  %227 = load i32, i32* %45, align 4
  %228 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %227
  %229 = load double, double* %228, align 8
  %230 = fsub double %226, %229
  %231 = fmul double %230, 1.500000e+00
  store double %231, double* %51, align 8
  br label %232

; <label>:232:                                    ; preds = %223, %214
  %233 = load double, double* %51, align 8
  %234 = fcmp oge double %233, 5.000000e-01
  br i1 %234, label %235, label %252

; <label>:235:                                    ; preds = %232
  %236 = load double, double* %51, align 8
  %237 = fcmp ole double %236, 2.500000e+00
  br i1 %237, label %238, label %252

; <label>:238:                                    ; preds = %235
  %239 = load double, double* %51, align 8
  %insertElmt83 = insertelement <2 x double> undef, double %239, i32 0
  %insertElmt84 = insertelement <2 x double> %insertElmt83, double %239, i32 1
  store <2 x double> %insertElmt84, <2 x double>* %allocaVec37, align 16
  %240 = load <2 x double>, <2 x double>* %allocaVec37, align 16
  %Vop85 = fsub <2 x double> %240, <double 5.000000e-01, double 5.000000e-01>
  store <2 x double> %Vop85, <2 x double>* %allocaVec40
  %241 = fsub double %239, 5.000000e-01
  store double %241, double* %54, align 8
  %242 = load double, double* %54, align 8
  %243 = load double, double* %54, align 8
  %244 = load <2 x double>, <2 x double>* %allocaVec40, align 16
  %245 = load <2 x double>, <2 x double>* %allocaVec40, align 16
  %Vop86 = fmul <2 x double> %244, %245
  %246 = fmul double %242, %243
  %247 = load double, double* %54, align 8
  %248 = load <2 x double>, <2 x double>* %allocaVec40, align 16
  %Vop87 = fmul <2 x double> <double 2.000000e+00, double 2.000000e+00>, %248
  %249 = fmul double 2.000000e+00, %247
  %Vop88 = fsub <2 x double> %Vop86, %Vop87
  %250 = fsub double %246, %249
  %Vop89 = fmul <2 x double> <double 8.000000e+00, double 8.000000e+00>, %Vop88
  store <2 x double> %Vop89, <2 x double>* %allocaVec38
  %251 = fmul double 8.000000e+00, %250
  store double %251, double* %52, align 8
  br label %253

; <label>:252:                                    ; preds = %235, %232
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec38
  store double 0.000000e+00, double* %52, align 8
  br label %253

; <label>:253:                                    ; preds = %252, %238
  %254 = load double, double* %51, align 8
  %insertElmt90 = insertelement <2 x double> undef, double %254, i32 0
  %insertElmt91 = insertelement <2 x double> %insertElmt90, double %254, i32 1
  store <2 x double> %insertElmt91, <2 x double>* %allocaVec37, align 16
  %255 = load <2 x double>, <2 x double>* %allocaVec37, align 16
  %Vop92 = fadd <2 x double> %255, <double 4.740000e-01, double 4.740000e-01>
  store <2 x double> %Vop92, <2 x double>* %allocaVec37
  %256 = fadd double %254, 4.740000e-01
  store double %256, double* %51, align 8
  %257 = load double, double* %51, align 8
  %258 = load <2 x double>, <2 x double>* %allocaVec37, align 16
  %Vop93 = fmul <2 x double> <double 7.500000e+00, double 7.500000e+00>, %258
  %259 = fmul double 7.500000e+00, %257
  %Vop94 = fadd <2 x double> <double 0x402F9F6E6106AB15, double 0x402F9F6E6106AB15>, %Vop93
  %260 = fadd double 0x402F9F6E6106AB15, %259
  %261 = load double, double* %51, align 8
  %262 = load double, double* %51, align 8
  %263 = load <2 x double>, <2 x double>* %allocaVec37, align 16
  %264 = load <2 x double>, <2 x double>* %allocaVec37, align 16
  %Vop95 = fmul <2 x double> %263, %264
  %265 = fmul double %261, %262
  %Vop96 = fadd <2 x double> <double 1.000000e+00, double 1.000000e+00>, %Vop95
  %266 = fadd double 1.000000e+00, %265
  %267 = call arm_aapcscc double @sqrt(double %266) #7
  store double %267, double* %CallInst
  %268 = load double, double* %CallInst, align 4
  %insertCall = insertelement <2 x double> undef, double %268, i32 0
  %insertCall97 = insertelement <2 x double> %insertCall, double %268, i32 1
  store <2 x double> %insertCall97, <2 x double>* %CallInstVec, align 4
  %269 = load <2 x double>, <2 x double>* %CallInstVec, align 4
  %Vop98 = fmul <2 x double> <double 1.750000e+01, double 1.750000e+01>, %269
  %270 = fmul double 1.750000e+01, %267
  %Vop99 = fsub <2 x double> %Vop94, %Vop98
  store <2 x double> %Vop99, <2 x double>* %allocaVec39
  %271 = fsub double %260, %270
  store double %271, double* %53, align 8
  %272 = load double, double* %53, align 8
  %273 = fcmp ole double %272, -6.000000e+01
  br i1 %273, label %274, label %280

; <label>:274:                                    ; preds = %253
  %275 = load [64 x double]*, [64 x double]** %25, align 4
  %276 = load i32, i32* %44, align 4
  %277 = getelementptr inbounds [64 x double], [64 x double]* %275, i32 %276
  %278 = load i32, i32* %45, align 4
  %279 = getelementptr inbounds [64 x double], [64 x double]* %277, i32 0, i32 %278
  store double 0.000000e+00, double* %279, align 8
  br label %293

; <label>:280:                                    ; preds = %253
  %281 = load double, double* %52, align 8
  %282 = load double, double* %53, align 8
  %283 = load <2 x double>, <2 x double>* %allocaVec38, align 16
  %284 = load <2 x double>, <2 x double>* %allocaVec39, align 16
  %Vop100 = fadd <2 x double> %283, %284
  %285 = fadd double %281, %282
  %Vop101 = fmul <2 x double> %Vop100, <double 0x3FCD791C5F888823, double 0x3FCD791C5F888823>
  %286 = fmul double %285, 0x3FCD791C5F888823
  %287 = call arm_aapcscc double @exp(double %286) #7
  %288 = load [64 x double]*, [64 x double]** %25, align 4
  %289 = load i32, i32* %44, align 4
  %290 = getelementptr inbounds [64 x double], [64 x double]* %288, i32 %289
  %291 = load i32, i32* %45, align 4
  %292 = getelementptr inbounds [64 x double], [64 x double]* %290, i32 0, i32 %291
  store double %287, double* %292, align 8
  br label %293

; <label>:293:                                    ; preds = %280, %274
  br label %294

; <label>:294:                                    ; preds = %293
  %295 = load i32, i32* %45, align 4
  %insertElmt102 = insertelement <4 x i32> undef, i32 %295, i32 0
  %insertElmt103 = insertelement <4 x i32> %insertElmt102, i32 %295, i32 1
  %insertElmt104 = insertelement <4 x i32> %insertElmt103, i32 %295, i32 2
  %insertElmt105 = insertelement <4 x i32> %insertElmt104, i32 %295, i32 3
  store <4 x i32> %insertElmt105, <4 x i32>* %allocaVec31, align 16
  %296 = load <4 x i32>, <4 x i32>* %allocaVec31, align 16
  %Vop106 = add <4 x i32> %296, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop106, <4 x i32>* %allocaVec31
  %297 = add nsw i32 %295, 1
  store i32 %297, i32* %45, align 4
  br label %184

; <label>:298:                                    ; preds = %184
  br label %299

; <label>:299:                                    ; preds = %298
  %300 = load i32, i32* %44, align 4
  %301 = load <4 x i32>, <4 x i32>* %allocaVec30, align 16
  %Vop107 = add <4 x i32> %301, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop107, <4 x i32>* %allocaVec30
  %302 = add nsw i32 %300, 1
  store i32 %302, i32* %44, align 4
  br label %179

; <label>:303:                                    ; preds = %179
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec34
  store i32 0, i32* %48, align 4
  br label %304

; <label>:304:                                    ; preds = %391, %303
  %305 = load i32, i32* %48, align 4
  %306 = icmp slt i32 %305, 6
  br i1 %306, label %307, label %395

; <label>:307:                                    ; preds = %304
  %308 = load double*, double** %42, align 4
  %309 = getelementptr inbounds double, double* %308, i32 1
  store double* %309, double** %42, align 4
  %310 = load double, double* %308, align 8
  store double %310, double* %37, align 8
  %311 = load double*, double** %42, align 4
  %312 = getelementptr inbounds double, double* %311, i32 1
  store double* %312, double** %42, align 4
  %313 = load double, double* %311, align 8
  %314 = fptosi double %313 to i32
  store i32 %314, i32* %41, align 4
  %315 = load i32, i32* %41, align 4
  %316 = load <4 x i32>, <4 x i32>* %allocaVec28, align 16
  %Vop108 = add <4 x i32> %316, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop108, <4 x i32>* %allocaVec28
  %317 = add nsw i32 %315, 1
  store i32 %317, i32* %41, align 4
  %318 = load double, double* %19, align 8
  %319 = load double, double* %37, align 8
  %insertElmt109 = insertelement <2 x double> undef, double %319, i32 0
  %insertElmt110 = insertelement <2 x double> %insertElmt109, double %319, i32 1
  store <2 x double> %insertElmt110, <2 x double>* %allocaVec26, align 16
  %320 = load i32, i32* %50, align 4
  %321 = sitofp i32 %320 to double
  %322 = load <2 x double>, <2 x double>* %allocaVec26, align 16
  store double %321, double* %CastInst6
  %323 = load double, double* %CastInst6, align 4
  %insertCast111 = insertelement <2 x double> undef, double %323, i32 0
  %insertCast112 = insertelement <2 x double> %insertCast111, double %323, i32 1
  store <2 x double> %insertCast112, <2 x double>* %CastInstVec7, align 4
  %324 = load <2 x double>, <2 x double>* %CastInstVec7, align 4
  %Vop113 = fdiv <2 x double> %322, %324
  %325 = fdiv double %319, %321
  %326 = fcmp oeq double %318, %325
  br i1 %326, label %327, label %384

; <label>:327:                                    ; preds = %307
  %328 = load i32, i32* %41, align 4
  store i32 %328, i32* %40, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec30
  store i32 0, i32* %44, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec33
  store i32 0, i32* %47, align 4
  br label %329

; <label>:329:                                    ; preds = %376, %327
  %330 = load i32, i32* %44, align 4
  %331 = load i32, i32* %41, align 4
  %332 = icmp slt i32 %330, %331
  br i1 %332, label %333, label %380

; <label>:333:                                    ; preds = %329
  %334 = load double*, double** %42, align 4
  %335 = getelementptr inbounds double, double* %334, i32 1
  store double* %335, double** %42, align 4
  %336 = load double, double* %334, align 8
  %337 = fptosi double %336 to i32
  store i32 %337, i32* %45, align 4
  %338 = load double*, double** %42, align 4
  %339 = getelementptr inbounds double, double* %338, i32 1
  store double* %339, double** %42, align 4
  %340 = load double, double* %338, align 8
  %341 = fptosi double %340 to i32
  %342 = load i32*, i32** %21, align 4
  %343 = load i32, i32* %44, align 4
  %344 = getelementptr inbounds i32, i32* %342, i32 %343
  store i32 %341, i32* %344, align 4
  %345 = load double*, double** %42, align 4
  %346 = getelementptr inbounds double, double* %345, i32 1
  store double* %346, double** %42, align 4
  %347 = load double, double* %345, align 8
  %348 = load double*, double** %27, align 4
  %349 = load i32, i32* %44, align 4
  %350 = getelementptr inbounds double, double* %348, i32 %349
  store double %347, double* %350, align 8
  %351 = load double*, double** %42, align 4
  %352 = getelementptr inbounds double, double* %351, i32 1
  store double* %352, double** %42, align 4
  %353 = load double*, double** %42, align 4
  %354 = getelementptr inbounds double, double* %353, i32 1
  store double* %354, double** %42, align 4
  %355 = load double, double* %353, align 8
  %356 = load double*, double** %28, align 4
  %357 = load i32, i32* %44, align 4
  %358 = getelementptr inbounds double, double* %356, i32 %357
  store double %355, double* %358, align 8
  %359 = load double*, double** %42, align 4
  %360 = getelementptr inbounds double, double* %359, i32 1
  store double* %360, double** %42, align 4
  %361 = load double, double* %359, align 8
  %362 = load i32, i32* %44, align 4
  %363 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %362
  store double %361, double* %363, align 8
  %364 = load i32, i32* %45, align 4
  %365 = load i32, i32* %44, align 4
  %366 = icmp ne i32 %364, %365
  br i1 %366, label %367, label %370

; <label>:367:                                    ; preds = %333
  %368 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %369 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %368, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3.208, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:370:                                    ; preds = %333
  %371 = load i32*, i32** %21, align 4
  %372 = load i32, i32* %44, align 4
  %373 = getelementptr inbounds i32, i32* %371, i32 %372
  %374 = load i32, i32* %373, align 4
  %375 = add nsw i32 %374, -1
  store i32 %375, i32* %373, align 4
  br label %376

; <label>:376:                                    ; preds = %370
  %377 = load i32, i32* %44, align 4
  %378 = load <4 x i32>, <4 x i32>* %allocaVec30, align 16
  %Vop114 = add <4 x i32> %378, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop114, <4 x i32>* %allocaVec30
  %379 = add nsw i32 %377, 1
  store i32 %379, i32* %44, align 4
  br label %329

; <label>:380:                                    ; preds = %329
  %381 = load i32*, i32** %21, align 4
  %382 = load i32, i32* %44, align 4
  %383 = getelementptr inbounds i32, i32* %381, i32 %382
  store i32 -1, i32* %383, align 4
  br label %390

; <label>:384:                                    ; preds = %307
  %385 = load i32, i32* %41, align 4
  %386 = load <4 x i32>, <4 x i32>* %allocaVec28, align 16
  %Vop115 = mul <4 x i32> %386, <i32 6, i32 6, i32 6, i32 6>
  %387 = mul nsw i32 %385, 6
  %388 = load double*, double** %42, align 4
  %389 = getelementptr inbounds double, double* %388, i32 %387
  store double* %389, double** %42, align 4
  br label %390

; <label>:390:                                    ; preds = %384, %380
  br label %391

; <label>:391:                                    ; preds = %390
  %392 = load i32, i32* %48, align 4
  %393 = load <4 x i32>, <4 x i32>* %allocaVec34, align 16
  %Vop116 = add <4 x i32> %393, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop116, <4 x i32>* %allocaVec34
  %394 = add nsw i32 %392, 1
  store i32 %394, i32* %48, align 4
  br label %304

; <label>:395:                                    ; preds = %304
  %396 = load i32, i32* %40, align 4
  store i32 %396, i32* %49, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec30
  store i32 0, i32* %44, align 4
  br label %397

; <label>:397:                                    ; preds = %523, %395
  %398 = load i32, i32* %44, align 4
  %399 = load i32, i32* %49, align 4
  %400 = icmp slt i32 %398, %399
  br i1 %400, label %401, label %527

; <label>:401:                                    ; preds = %397
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec31
  store i32 0, i32* %45, align 4
  br label %402

; <label>:402:                                    ; preds = %521, %401
  %403 = load i32, i32* %45, align 4
  %404 = load i32, i32* %49, align 4
  %405 = icmp slt i32 %403, %404
  br i1 %405, label %406, label %522

; <label>:406:                                    ; preds = %402
  %407 = load i32, i32* %45, align 4
  %408 = load i32, i32* %44, align 4
  %409 = icmp sge i32 %407, %408
  br i1 %409, label %410, label %419

; <label>:410:                                    ; preds = %406
  %411 = load i32, i32* %44, align 4
  %412 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %411
  %413 = load double, double* %412, align 8
  %414 = load i32, i32* %45, align 4
  %415 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %414
  %416 = load double, double* %415, align 8
  %417 = fsub double %413, %416
  %418 = fmul double %417, 3.000000e+00
  store double %418, double* %55, align 8
  br label %428

; <label>:419:                                    ; preds = %406
  %420 = load i32, i32* %44, align 4
  %421 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %420
  %422 = load double, double* %421, align 8
  %423 = load i32, i32* %45, align 4
  %424 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %423
  %425 = load double, double* %424, align 8
  %426 = fsub double %422, %425
  %427 = fmul double %426, 1.500000e+00
  store double %427, double* %55, align 8
  br label %428

; <label>:428:                                    ; preds = %419, %410
  %429 = load i32, i32* %44, align 4
  %430 = load i32, i32* %45, align 4
  %431 = icmp sge i32 %429, %430
  br i1 %431, label %432, label %441

; <label>:432:                                    ; preds = %428
  %433 = load i32, i32* %44, align 4
  %434 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %433
  %435 = load double, double* %434, align 8
  %436 = load i32, i32* %45, align 4
  %437 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %436
  %438 = load double, double* %437, align 8
  %439 = fsub double %435, %438
  %440 = fmul double %439, 3.000000e+00
  store double %440, double* %55, align 8
  br label %450

; <label>:441:                                    ; preds = %428
  %442 = load i32, i32* %44, align 4
  %443 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %442
  %444 = load double, double* %443, align 8
  %445 = load i32, i32* %45, align 4
  %446 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %445
  %447 = load double, double* %446, align 8
  %448 = fsub double %444, %447
  %449 = fmul double %448, 1.500000e+00
  store double %449, double* %55, align 8
  br label %450

; <label>:450:                                    ; preds = %441, %432
  %451 = load double, double* %55, align 8
  %452 = fcmp oge double %451, 5.000000e-01
  br i1 %452, label %453, label %470

; <label>:453:                                    ; preds = %450
  %454 = load double, double* %55, align 8
  %455 = fcmp ole double %454, 2.500000e+00
  br i1 %455, label %456, label %470

; <label>:456:                                    ; preds = %453
  %457 = load double, double* %55, align 8
  %insertElmt117 = insertelement <2 x double> undef, double %457, i32 0
  %insertElmt118 = insertelement <2 x double> %insertElmt117, double %457, i32 1
  store <2 x double> %insertElmt118, <2 x double>* %allocaVec41, align 16
  %458 = load <2 x double>, <2 x double>* %allocaVec41, align 16
  %Vop119 = fsub <2 x double> %458, <double 5.000000e-01, double 5.000000e-01>
  store <2 x double> %Vop119, <2 x double>* %allocaVec44
  %459 = fsub double %457, 5.000000e-01
  store double %459, double* %58, align 8
  %460 = load double, double* %58, align 8
  %461 = load double, double* %58, align 8
  %462 = load <2 x double>, <2 x double>* %allocaVec44, align 16
  %463 = load <2 x double>, <2 x double>* %allocaVec44, align 16
  %Vop120 = fmul <2 x double> %462, %463
  %464 = fmul double %460, %461
  %465 = load double, double* %58, align 8
  %466 = load <2 x double>, <2 x double>* %allocaVec44, align 16
  %Vop121 = fmul <2 x double> <double 2.000000e+00, double 2.000000e+00>, %466
  %467 = fmul double 2.000000e+00, %465
  %Vop122 = fsub <2 x double> %Vop120, %Vop121
  %468 = fsub double %464, %467
  %Vop123 = fmul <2 x double> <double 8.000000e+00, double 8.000000e+00>, %Vop122
  store <2 x double> %Vop123, <2 x double>* %allocaVec42
  %469 = fmul double 8.000000e+00, %468
  store double %469, double* %56, align 8
  br label %471

; <label>:470:                                    ; preds = %453, %450
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec42
  store double 0.000000e+00, double* %56, align 8
  br label %471

; <label>:471:                                    ; preds = %470, %456
  %472 = load double, double* %55, align 8
  %insertElmt124 = insertelement <2 x double> undef, double %472, i32 0
  %insertElmt125 = insertelement <2 x double> %insertElmt124, double %472, i32 1
  store <2 x double> %insertElmt125, <2 x double>* %allocaVec41, align 16
  %473 = load <2 x double>, <2 x double>* %allocaVec41, align 16
  %Vop126 = fadd <2 x double> %473, <double 4.740000e-01, double 4.740000e-01>
  store <2 x double> %Vop126, <2 x double>* %allocaVec41
  %474 = fadd double %472, 4.740000e-01
  store double %474, double* %55, align 8
  %475 = load double, double* %55, align 8
  %476 = load <2 x double>, <2 x double>* %allocaVec41, align 16
  %Vop127 = fmul <2 x double> <double 7.500000e+00, double 7.500000e+00>, %476
  %477 = fmul double 7.500000e+00, %475
  %Vop128 = fadd <2 x double> <double 0x402F9F6E6106AB15, double 0x402F9F6E6106AB15>, %Vop127
  %478 = fadd double 0x402F9F6E6106AB15, %477
  %479 = load double, double* %55, align 8
  %480 = load double, double* %55, align 8
  %481 = load <2 x double>, <2 x double>* %allocaVec41, align 16
  %482 = load <2 x double>, <2 x double>* %allocaVec41, align 16
  %Vop129 = fmul <2 x double> %481, %482
  %483 = fmul double %479, %480
  %Vop130 = fadd <2 x double> <double 1.000000e+00, double 1.000000e+00>, %Vop129
  %484 = fadd double 1.000000e+00, %483
  %485 = call arm_aapcscc double @sqrt(double %484) #7
  store double %485, double* %CallInst12
  %486 = load double, double* %CallInst12, align 4
  %insertCall131 = insertelement <2 x double> undef, double %486, i32 0
  %insertCall132 = insertelement <2 x double> %insertCall131, double %486, i32 1
  store <2 x double> %insertCall132, <2 x double>* %CallInstVec13, align 4
  %487 = load <2 x double>, <2 x double>* %CallInstVec13, align 4
  %Vop133 = fmul <2 x double> <double 1.750000e+01, double 1.750000e+01>, %487
  %488 = fmul double 1.750000e+01, %485
  %Vop134 = fsub <2 x double> %Vop128, %Vop133
  store <2 x double> %Vop134, <2 x double>* %allocaVec43
  %489 = fsub double %478, %488
  store double %489, double* %57, align 8
  %490 = load double, double* %57, align 8
  %491 = fcmp ole double %490, -6.000000e+01
  br i1 %491, label %492, label %498

; <label>:492:                                    ; preds = %471
  %493 = load [64 x double]*, [64 x double]** %26, align 4
  %494 = load i32, i32* %44, align 4
  %495 = getelementptr inbounds [64 x double], [64 x double]* %493, i32 %494
  %496 = load i32, i32* %45, align 4
  %497 = getelementptr inbounds [64 x double], [64 x double]* %495, i32 0, i32 %496
  store double 0.000000e+00, double* %497, align 8
  br label %511

; <label>:498:                                    ; preds = %471
  %499 = load double, double* %56, align 8
  %500 = load double, double* %57, align 8
  %501 = load <2 x double>, <2 x double>* %allocaVec42, align 16
  %502 = load <2 x double>, <2 x double>* %allocaVec43, align 16
  %Vop135 = fadd <2 x double> %501, %502
  %503 = fadd double %499, %500
  %Vop136 = fmul <2 x double> %Vop135, <double 0x3FCD791C5F888823, double 0x3FCD791C5F888823>
  %504 = fmul double %503, 0x3FCD791C5F888823
  %505 = call arm_aapcscc double @exp(double %504) #7
  %506 = load [64 x double]*, [64 x double]** %26, align 4
  %507 = load i32, i32* %44, align 4
  %508 = getelementptr inbounds [64 x double], [64 x double]* %506, i32 %507
  %509 = load i32, i32* %45, align 4
  %510 = getelementptr inbounds [64 x double], [64 x double]* %508, i32 0, i32 %509
  store double %505, double* %510, align 8
  br label %511

; <label>:511:                                    ; preds = %498, %492
  br label %512

; <label>:512:                                    ; preds = %511
  %513 = load i32, i32* %45, align 4
  %514 = load <4 x i32>, <4 x i32>* %allocaVec31, align 16
  %Vop137 = add <4 x i32> %514, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop137, <4 x i32>* %allocaVec31
  %515 = load <4 x i32>, <4 x i32>* %allocaVec31, align 4
  %extractE139 = extractelement <4 x i32> %515, i64 0
  %extractE140 = extractelement <4 x i32> %515, i64 1
  %extractE141 = extractelement <4 x i32> %515, i64 2
  %sum142 = add i32 %extractE139, %extractE140
  %sum143 = add i32 %sum142, %extractE141
  %516 = add nsw i32 %513, 1
  %Fmul138 = mul i32 %516, 3
  store i32 %516, i32* %Recovery3
  %Fcmp144 = icmp ne i32 %sum143, %Fmul138
  br i1 %Fcmp144, label %517, label %521

; <label>:517:                                    ; preds = %512
  %remThree186 = sdiv i32 %sum143, %extractE139
  %FcmpThree187 = icmp ne i32 %remThree186, 3
  br i1 %FcmpThree187, label %518, label %519

; <label>:518:                                    ; preds = %517
  store i32 %516, i32* %Recovery3, align 4
  br label %520

; <label>:519:                                    ; preds = %517
  store i32 %extractE139, i32* %Recovery3, align 4
  br label %520

; <label>:520:                                    ; preds = %519, %518
  br label %521

; <label>:521:                                    ; preds = %512, %520
  %ReplaceInst193 = load i32, i32* %Recovery3, align 4
  store i32 %ReplaceInst193, i32* %45, align 4
  br label %402

; <label>:522:                                    ; preds = %402
  br label %523

; <label>:523:                                    ; preds = %522
  %524 = load i32, i32* %44, align 4
  %525 = load <4 x i32>, <4 x i32>* %allocaVec30, align 16
  %Vop145 = add <4 x i32> %525, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop145, <4 x i32>* %allocaVec30
  %526 = add nsw i32 %524, 1
  store i32 %526, i32* %44, align 4
  br label %397

; <label>:527:                                    ; preds = %397
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec34
  store i32 0, i32* %48, align 4
  br label %528

; <label>:528:                                    ; preds = %641, %527
  %529 = load i32, i32* %48, align 4
  %530 = icmp slt i32 %529, 6
  br i1 %530, label %531, label %645

; <label>:531:                                    ; preds = %528
  %532 = load double*, double** %42, align 4
  %533 = getelementptr inbounds double, double* %532, i32 1
  store double* %533, double** %42, align 4
  %534 = load double, double* %532, align 8
  store double %534, double* %37, align 8
  %535 = load double*, double** %42, align 4
  %536 = getelementptr inbounds double, double* %535, i32 1
  store double* %536, double** %42, align 4
  %537 = load double, double* %535, align 8
  %538 = fptosi double %537 to i32
  store i32 %538, i32* %43, align 4
  %539 = load i32, i32* %43, align 4
  %insertElmt146 = insertelement <4 x i32> undef, i32 %539, i32 0
  %insertElmt147 = insertelement <4 x i32> %insertElmt146, i32 %539, i32 1
  %insertElmt148 = insertelement <4 x i32> %insertElmt147, i32 %539, i32 2
  %insertElmt149 = insertelement <4 x i32> %insertElmt148, i32 %539, i32 3
  store <4 x i32> %insertElmt149, <4 x i32>* %allocaVec29, align 16
  %540 = load <4 x i32>, <4 x i32>* %allocaVec29, align 16
  %Vop150 = add <4 x i32> %540, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop150, <4 x i32>* %allocaVec29
  %541 = add nsw i32 %539, 1
  store i32 %541, i32* %43, align 4
  %542 = load double, double* %19, align 8
  %543 = load double, double* %37, align 8
  %insertElmt151 = insertelement <2 x double> undef, double %543, i32 0
  %insertElmt152 = insertelement <2 x double> %insertElmt151, double %543, i32 1
  store <2 x double> %insertElmt152, <2 x double>* %allocaVec26, align 16
  %544 = load i32, i32* %50, align 4
  %545 = sitofp i32 %544 to double
  %546 = load <2 x double>, <2 x double>* %allocaVec26, align 16
  store double %545, double* %CastInst8
  %547 = load double, double* %CastInst8, align 4
  %insertCast153 = insertelement <2 x double> undef, double %547, i32 0
  %insertCast154 = insertelement <2 x double> %insertCast153, double %547, i32 1
  store <2 x double> %insertCast154, <2 x double>* %CastInstVec9, align 4
  %548 = load <2 x double>, <2 x double>* %CastInstVec9, align 4
  %Vop155 = fdiv <2 x double> %546, %548
  %549 = fdiv double %543, %545
  %550 = fcmp oeq double %542, %549
  br i1 %550, label %551, label %634

; <label>:551:                                    ; preds = %531
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec30
  store i32 0, i32* %44, align 4
  br label %552

; <label>:552:                                    ; preds = %629, %551
  %553 = load i32, i32* %44, align 4
  %554 = load i32, i32* %43, align 4
  %555 = icmp slt i32 %553, %554
  br i1 %555, label %556, label %633

; <label>:556:                                    ; preds = %552
  %557 = load double*, double** %42, align 4
  %558 = getelementptr inbounds double, double* %557, i32 1
  store double* %558, double** %42, align 4
  %559 = load double, double* %557, align 8
  %560 = fptosi double %559 to i32
  store i32 %560, i32* %45, align 4
  %561 = load double*, double** %42, align 4
  %562 = getelementptr inbounds double, double* %561, i32 1
  store double* %562, double** %42, align 4
  %563 = load double*, double** %42, align 4
  %564 = getelementptr inbounds double, double* %563, i32 1
  store double* %564, double** %42, align 4
  %565 = load double, double* %563, align 8
  %566 = fptosi double %565 to i32
  %567 = load i32*, i32** %29, align 4
  %568 = load i32, i32* %44, align 4
  %569 = getelementptr inbounds i32, i32* %567, i32 %568
  store i32 %566, i32* %569, align 4
  %570 = load double*, double** %42, align 4
  %571 = getelementptr inbounds double, double* %570, i32 1
  store double* %571, double** %42, align 4
  %572 = load double, double* %570, align 8
  %573 = fptosi double %572 to i32
  %574 = load i32*, i32** %30, align 4
  %575 = load i32, i32* %44, align 4
  %576 = getelementptr inbounds i32, i32* %574, i32 %575
  store i32 %573, i32* %576, align 4
  %577 = load double*, double** %42, align 4
  %578 = getelementptr inbounds double, double* %577, i32 1
  store double* %578, double** %42, align 4
  %579 = load double, double* %577, align 8
  %580 = load double*, double** %31, align 4
  %581 = load i32, i32* %44, align 4
  %582 = getelementptr inbounds double, double* %580, i32 %581
  store double %579, double* %582, align 8
  %583 = load double*, double** %42, align 4
  %584 = getelementptr inbounds double, double* %583, i32 1
  store double* %584, double** %42, align 4
  %585 = load double, double* %583, align 8
  %586 = load double*, double** %32, align 4
  %587 = load i32, i32* %44, align 4
  %588 = getelementptr inbounds double, double* %586, i32 %587
  store double %585, double* %588, align 8
  %589 = load i32, i32* %45, align 4
  %590 = load i32, i32* %44, align 4
  %591 = icmp ne i32 %589, %590
  br i1 %591, label %592, label %595

; <label>:592:                                    ; preds = %556
  %593 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %594 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %593, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4.209, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:595:                                    ; preds = %556
  %596 = load i32, i32* %44, align 4
  %597 = icmp ne i32 %596, 0
  br i1 %597, label %598, label %628

; <label>:598:                                    ; preds = %595
  %599 = load double*, double** %31, align 4
  %600 = load i32, i32* %44, align 4
  %601 = getelementptr inbounds double, double* %599, i32 %600
  %602 = load double, double* %601, align 8
  %603 = fsub double 1.000000e+00, %602
  %604 = load double*, double** %32, align 4
  %605 = load i32, i32* %44, align 4
  %606 = sub nsw i32 %605, 1
  %607 = getelementptr inbounds double, double* %604, i32 %606
  %608 = load double, double* %607, align 8
  %609 = fsub double %603, %608
  %610 = call arm_aapcscc double @fabs(double %609) #9
  %611 = fcmp ogt double %610, 1.000000e-02
  br i1 %611, label %612, label %627

; <label>:612:                                    ; preds = %598
  %613 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %614 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %613, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5.210, i32 0, i32 0))
  %615 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %616 = load double*, double** %31, align 4
  %617 = load i32, i32* %44, align 4
  %618 = getelementptr inbounds double, double* %616, i32 %617
  %619 = load double, double* %618, align 8
  %620 = load double*, double** %32, align 4
  %621 = load i32, i32* %44, align 4
  %622 = load <4 x i32>, <4 x i32>* %allocaVec30, align 16
  %Vop156 = sub <4 x i32> %622, <i32 1, i32 1, i32 1, i32 1>
  %623 = sub nsw i32 %621, 1
  %624 = getelementptr inbounds double, double* %620, i32 %623
  %625 = load double, double* %624, align 8
  %626 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %615, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6.211, i32 0, i32 0), double %619, double %625)
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:627:                                    ; preds = %598
  br label %628

; <label>:628:                                    ; preds = %627, %595
  br label %629

; <label>:629:                                    ; preds = %628
  %630 = load i32, i32* %44, align 4
  %631 = load <4 x i32>, <4 x i32>* %allocaVec30, align 16
  %Vop157 = add <4 x i32> %631, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop157, <4 x i32>* %allocaVec30
  %632 = add nsw i32 %630, 1
  store i32 %632, i32* %44, align 4
  br label %552

; <label>:633:                                    ; preds = %552
  br label %640

; <label>:634:                                    ; preds = %531
  %635 = load i32, i32* %43, align 4
  %636 = load <4 x i32>, <4 x i32>* %allocaVec29, align 16
  %Vop158 = mul <4 x i32> %636, <i32 6, i32 6, i32 6, i32 6>
  %637 = mul nsw i32 %635, 6
  %638 = load double*, double** %42, align 4
  %639 = getelementptr inbounds double, double* %638, i32 %637
  store double* %639, double** %42, align 4
  br label %640

; <label>:640:                                    ; preds = %634, %633
  br label %641

; <label>:641:                                    ; preds = %640
  %642 = load i32, i32* %48, align 4
  %643 = load <4 x i32>, <4 x i32>* %allocaVec34, align 16
  %Vop159 = add <4 x i32> %643, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop159, <4 x i32>* %allocaVec34
  %644 = add nsw i32 %642, 1
  store i32 %644, i32* %48, align 4
  br label %528

; <label>:645:                                    ; preds = %528
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec34
  store i32 0, i32* %48, align 4
  br label %646

; <label>:646:                                    ; preds = %774, %645
  %647 = load i32, i32* %48, align 4
  %648 = icmp slt i32 %647, 6
  br i1 %648, label %649, label %775

; <label>:649:                                    ; preds = %646
  %650 = load double*, double** %42, align 4
  %651 = getelementptr inbounds double, double* %650, i32 1
  store double* %651, double** %42, align 4
  %652 = load double, double* %650, align 8
  store double %652, double* %37, align 8
  %653 = load double*, double** %42, align 4
  %654 = getelementptr inbounds double, double* %653, i32 1
  store double* %654, double** %42, align 4
  %655 = load double, double* %653, align 8
  %656 = fptosi double %655 to i32
  store i32 %656, i32* %43, align 4
  %657 = load i32, i32* %43, align 4
  %658 = load <4 x i32>, <4 x i32>* %allocaVec29, align 16
  %Vop160 = add <4 x i32> %658, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop160, <4 x i32>* %allocaVec29
  %659 = add nsw i32 %657, 1
  store i32 %659, i32* %43, align 4
  %660 = load double, double* %19, align 8
  %661 = load double, double* %37, align 8
  %insertElmt161 = insertelement <2 x double> undef, double %661, i32 0
  %insertElmt162 = insertelement <2 x double> %insertElmt161, double %661, i32 1
  store <2 x double> %insertElmt162, <2 x double>* %allocaVec26, align 16
  %662 = load i32, i32* %50, align 4
  %663 = sitofp i32 %662 to double
  %664 = load <2 x double>, <2 x double>* %allocaVec26, align 16
  store double %663, double* %CastInst10
  %665 = load double, double* %CastInst10, align 4
  %insertCast163 = insertelement <2 x double> undef, double %665, i32 0
  %insertCast164 = insertelement <2 x double> %insertCast163, double %665, i32 1
  store <2 x double> %insertCast164, <2 x double>* %CastInstVec11, align 4
  %666 = load <2 x double>, <2 x double>* %CastInstVec11, align 4
  %Vop165 = fdiv <2 x double> %664, %666
  %667 = fdiv double %661, %663
  %668 = fcmp oeq double %660, %667
  br i1 %668, label %669, label %758

; <label>:669:                                    ; preds = %649
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec30
  store i32 0, i32* %44, align 4
  br label %670

; <label>:670:                                    ; preds = %756, %669
  %671 = load i32, i32* %44, align 4
  %672 = load i32, i32* %43, align 4
  %673 = icmp slt i32 %671, %672
  br i1 %673, label %674, label %757

; <label>:674:                                    ; preds = %670
  %675 = load double*, double** %42, align 4
  %676 = getelementptr inbounds double, double* %675, i32 1
  store double* %676, double** %42, align 4
  %677 = load double, double* %675, align 8
  %678 = fptosi double %677 to i32
  store i32 %678, i32* %45, align 4
  %679 = load double*, double** %42, align 4
  %680 = getelementptr inbounds double, double* %679, i32 1
  store double* %680, double** %42, align 4
  %681 = load double*, double** %42, align 4
  %682 = getelementptr inbounds double, double* %681, i32 1
  store double* %682, double** %42, align 4
  %683 = load double, double* %681, align 8
  %684 = fptosi double %683 to i32
  %685 = load i32*, i32** %33, align 4
  %686 = load i32, i32* %44, align 4
  %687 = getelementptr inbounds i32, i32* %685, i32 %686
  store i32 %684, i32* %687, align 4
  %688 = load double*, double** %42, align 4
  %689 = getelementptr inbounds double, double* %688, i32 1
  store double* %689, double** %42, align 4
  %690 = load double, double* %688, align 8
  %691 = fptosi double %690 to i32
  %692 = load i32*, i32** %34, align 4
  %693 = load i32, i32* %44, align 4
  %694 = getelementptr inbounds i32, i32* %692, i32 %693
  store i32 %691, i32* %694, align 4
  %695 = load double*, double** %42, align 4
  %696 = getelementptr inbounds double, double* %695, i32 1
  store double* %696, double** %42, align 4
  %697 = load double, double* %695, align 8
  %698 = load double*, double** %35, align 4
  %699 = load i32, i32* %44, align 4
  %700 = getelementptr inbounds double, double* %698, i32 %699
  store double %697, double* %700, align 8
  %701 = load double*, double** %42, align 4
  %702 = getelementptr inbounds double, double* %701, i32 1
  store double* %702, double** %42, align 4
  %703 = load double, double* %701, align 8
  %704 = load double*, double** %36, align 4
  %705 = load i32, i32* %44, align 4
  %706 = getelementptr inbounds double, double* %704, i32 %705
  store double %703, double* %706, align 8
  %707 = load i32, i32* %45, align 4
  %708 = load i32, i32* %44, align 4
  %709 = icmp ne i32 %707, %708
  br i1 %709, label %710, label %713

; <label>:710:                                    ; preds = %674
  %711 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %712 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %711, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4.209, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:713:                                    ; preds = %674
  %714 = load i32, i32* %44, align 4
  %715 = icmp ne i32 %714, 0
  br i1 %715, label %716, label %746

; <label>:716:                                    ; preds = %713
  %717 = load double*, double** %35, align 4
  %718 = load i32, i32* %44, align 4
  %719 = getelementptr inbounds double, double* %717, i32 %718
  %720 = load double, double* %719, align 8
  %721 = fsub double 1.000000e+00, %720
  %722 = load double*, double** %36, align 4
  %723 = load i32, i32* %44, align 4
  %724 = sub nsw i32 %723, 1
  %725 = getelementptr inbounds double, double* %722, i32 %724
  %726 = load double, double* %725, align 8
  %727 = fsub double %721, %726
  %728 = call arm_aapcscc double @fabs(double %727) #9
  %729 = fcmp ogt double %728, 1.000000e-02
  br i1 %729, label %730, label %745

; <label>:730:                                    ; preds = %716
  %731 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %732 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %731, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.7.212, i32 0, i32 0))
  %733 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %734 = load double*, double** %35, align 4
  %735 = load i32, i32* %44, align 4
  %736 = getelementptr inbounds double, double* %734, i32 %735
  %737 = load double, double* %736, align 8
  %738 = load double*, double** %36, align 4
  %739 = load i32, i32* %44, align 4
  %740 = load <4 x i32>, <4 x i32>* %allocaVec30, align 16
  %Vop166 = sub <4 x i32> %740, <i32 1, i32 1, i32 1, i32 1>
  %741 = sub nsw i32 %739, 1
  %742 = getelementptr inbounds double, double* %738, i32 %741
  %743 = load double, double* %742, align 8
  %744 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %733, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6.211, i32 0, i32 0), double %737, double %743)
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:745:                                    ; preds = %716
  br label %746

; <label>:746:                                    ; preds = %745, %713
  br label %747

; <label>:747:                                    ; preds = %746
  %748 = load i32, i32* %44, align 4
  %749 = load <4 x i32>, <4 x i32>* %allocaVec30, align 16
  %Vop167 = add <4 x i32> %749, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop167, <4 x i32>* %allocaVec30
  %750 = load <4 x i32>, <4 x i32>* %allocaVec30, align 4
  %extractE169 = extractelement <4 x i32> %750, i64 0
  %extractE170 = extractelement <4 x i32> %750, i64 1
  %extractE171 = extractelement <4 x i32> %750, i64 2
  %sum172 = add i32 %extractE169, %extractE170
  %sum173 = add i32 %sum172, %extractE171
  %751 = add nsw i32 %748, 1
  %Fmul168 = mul i32 %751, 3
  store i32 %751, i32* %Recovery4
  %Fcmp174 = icmp ne i32 %sum173, %Fmul168
  br i1 %Fcmp174, label %752, label %756

; <label>:752:                                    ; preds = %747
  %remThree188 = sdiv i32 %sum173, %extractE169
  %FcmpThree189 = icmp ne i32 %remThree188, 3
  br i1 %FcmpThree189, label %753, label %754

; <label>:753:                                    ; preds = %752
  store i32 %751, i32* %Recovery4, align 4
  br label %755

; <label>:754:                                    ; preds = %752
  store i32 %extractE169, i32* %Recovery4, align 4
  br label %755

; <label>:755:                                    ; preds = %754, %753
  br label %756

; <label>:756:                                    ; preds = %747, %755
  %ReplaceInst194 = load i32, i32* %Recovery4, align 4
  store i32 %ReplaceInst194, i32* %44, align 4
  br label %670

; <label>:757:                                    ; preds = %670
  br label %764

; <label>:758:                                    ; preds = %649
  %759 = load i32, i32* %43, align 4
  %760 = load <4 x i32>, <4 x i32>* %allocaVec29, align 16
  %Vop175 = mul <4 x i32> %760, <i32 6, i32 6, i32 6, i32 6>
  %761 = mul nsw i32 %759, 6
  %762 = load double*, double** %42, align 4
  %763 = getelementptr inbounds double, double* %762, i32 %761
  store double* %763, double** %42, align 4
  br label %764

; <label>:764:                                    ; preds = %758, %757
  br label %765

; <label>:765:                                    ; preds = %764
  %766 = load i32, i32* %48, align 4
  %767 = load <4 x i32>, <4 x i32>* %allocaVec34, align 16
  %Vop176 = add <4 x i32> %767, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop176, <4 x i32>* %allocaVec34
  %768 = load <4 x i32>, <4 x i32>* %allocaVec34, align 4
  %extractE178 = extractelement <4 x i32> %768, i64 0
  %extractE179 = extractelement <4 x i32> %768, i64 1
  %extractE180 = extractelement <4 x i32> %768, i64 2
  %sum181 = add i32 %extractE178, %extractE179
  %sum182 = add i32 %sum181, %extractE180
  %769 = add nsw i32 %766, 1
  %Fmul177 = mul i32 %769, 3
  store i32 %769, i32* %Recovery5
  %Fcmp183 = icmp ne i32 %sum182, %Fmul177
  br i1 %Fcmp183, label %770, label %774

; <label>:770:                                    ; preds = %765
  %remThree190 = sdiv i32 %sum182, %extractE178
  %FcmpThree191 = icmp ne i32 %remThree190, 3
  br i1 %FcmpThree191, label %771, label %772

; <label>:771:                                    ; preds = %770
  store i32 %769, i32* %Recovery5, align 4
  br label %773

; <label>:772:                                    ; preds = %770
  store i32 %extractE178, i32* %Recovery5, align 4
  br label %773

; <label>:773:                                    ; preds = %772, %771
  br label %774

; <label>:774:                                    ; preds = %765, %773
  %ReplaceInst195 = load i32, i32* %Recovery5, align 4
  store i32 %ReplaceInst195, i32* %48, align 4
  br label %646

; <label>:775:                                    ; preds = %646
  ret void
}

; Function Attrs: nounwind
declare arm_aapcscc double @exp(double) #2

; Function Attrs: nounwind
declare arm_aapcscc double @log10(double) #2

; Function Attrs: noreturn
declare arm_aapcscc void @abort() #4

; Function Attrs: nounwind
define arm_aapcscc void @iteration_loop(%struct.lame_global_flags*, [2 x double]*, double*, [2 x [576 x double]]*, [2 x %struct.III_psy_ratio]*, %struct.III_side_info_t*, [2 x [576 x i32]]*, [2 x %struct.III_scalefac_t]*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %9 = alloca %struct.lame_global_flags*, align 4
  %10 = alloca [2 x double]*, align 4
  %11 = alloca double*, align 4
  %12 = alloca [2 x [576 x double]]*, align 4
  %13 = alloca [2 x %struct.III_psy_ratio]*, align 4
  %14 = alloca %struct.III_side_info_t*, align 4
  %15 = alloca [2 x [576 x i32]]*, align 4
  %16 = alloca [2 x %struct.III_scalefac_t]*, align 4
  %17 = alloca [4 x [21 x double]], align 8
  %18 = alloca [4 x double], align 8
  %19 = alloca [2 x %struct.III_psy_xmin], align 8
  %20 = alloca %struct.gr_info*, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %21 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %22 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %23 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %24 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %25 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %26 = alloca i32, align 4
  %27 = alloca [2 x i32], align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %9, align 4
  store [2 x double]* %1, [2 x double]** %10, align 4
  store double* %2, double** %11, align 4
  store [2 x [576 x double]]* %3, [2 x [576 x double]]** %12, align 4
  store [2 x %struct.III_psy_ratio]* %4, [2 x %struct.III_psy_ratio]** %13, align 4
  store %struct.III_side_info_t* %5, %struct.III_side_info_t** %14, align 4
  store [2 x [576 x i32]]* %6, [2 x [576 x i32]]** %15, align 4
  store [2 x %struct.III_scalefac_t]* %7, [2 x %struct.III_scalefac_t]** %16, align 4
  %28 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %29 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %30 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  call arm_aapcscc void @iteration_init(%struct.lame_global_flags* %28, %struct.III_side_info_t* %29, [2 x [576 x i32]]* %30)
  %31 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %32 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %31, i32 0, i32 43
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i32 0, i32 %33
  %35 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %36 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %35, i32 0, i32 50
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds [15 x i32], [15 x i32]* %34, i32 0, i32 %37
  %39 = load i32, i32* %38, align 4
  store i32 %39, i32* %26, align 4
  %40 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  call arm_aapcscc void @getframebits(%struct.lame_global_flags* %40, i32* %21, i32* %22)
  %41 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %42 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %43 = load i32, i32* %22, align 4
  %44 = load i32, i32* %21, align 4
  %45 = call arm_aapcscc i32 @ResvFrameBegin(%struct.lame_global_flags* %41, %struct.III_side_info_t* %42, i32 %43, i32 %44)
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec10
  store i32 0, i32* %24, align 4
  br label %46

; <label>:46:                                     ; preds = %254, %8
  %47 = load i32, i32* %24, align 4
  %48 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %49 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %48, i32 0, i32 45
  %50 = load i32, i32* %49, align 4
  %51 = icmp slt i32 %47, %50
  br i1 %51, label %52, label %255

; <label>:52:                                     ; preds = %46
  %53 = load i32, i32* @convert_mdct, align 4
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %55, label %64

; <label>:55:                                     ; preds = %52
  %56 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %57 = load i32, i32* %24, align 4
  %58 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %56, i32 %57
  %59 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %58, i32 0, i32 0
  %60 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %61 = load i32, i32* %24, align 4
  %62 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %60, i32 %61
  %63 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %62, i32 0, i32 0
  call arm_aapcscc void @ms_convert([576 x double]* %59, [576 x double]* %63)
  br label %64

; <label>:64:                                     ; preds = %55, %52
  %65 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %66 = load [2 x double]*, [2 x double]** %10, align 4
  %67 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %68 = getelementptr inbounds [2 x i32], [2 x i32]* %27, i32 0, i32 0
  %69 = load i32, i32* %22, align 4
  %70 = load i32, i32* %24, align 4
  call arm_aapcscc void @on_pe(%struct.lame_global_flags* %65, [2 x double]* %66, %struct.III_side_info_t* %67, i32* %68, i32 %69, i32 %70)
  %71 = load i32, i32* @reduce_sidechannel, align 4
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %73, label %80

; <label>:73:                                     ; preds = %64
  %74 = getelementptr inbounds [2 x i32], [2 x i32]* %27, i32 0, i32 0
  %75 = load double*, double** %11, align 4
  %76 = load i32, i32* %24, align 4
  %77 = getelementptr inbounds double, double* %75, i32 %76
  %78 = load double, double* %77, align 8
  %79 = load i32, i32* %22, align 4
  call arm_aapcscc void @reduce_side(i32* %74, double %78, i32 %79)
  br label %80

; <label>:80:                                     ; preds = %73, %64
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec9
  store i32 0, i32* %23, align 4
  br label %81

; <label>:81:                                     ; preds = %243, %80
  %82 = load i32, i32* %23, align 4
  %83 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %84 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %83, i32 0, i32 46
  %85 = load i32, i32* %84, align 4
  %86 = icmp slt i32 %82, %85
  br i1 %86, label %87, label %244

; <label>:87:                                     ; preds = %81
  %88 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %89 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %88, i32 0, i32 4
  %90 = load i32, i32* %24, align 4
  %91 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %89, i32 0, i32 %90
  %92 = getelementptr inbounds %struct.anon, %struct.anon* %91, i32 0, i32 0
  %93 = load i32, i32* %23, align 4
  %94 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %92, i32 0, i32 %93
  %95 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %94, i32 0, i32 0
  store %struct.gr_info* %95, %struct.gr_info** %20, align 4
  %96 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %97 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %98 = load i32, i32* %24, align 4
  %99 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %97, i32 %98
  %100 = load i32, i32* %23, align 4
  %101 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %99, i32 0, i32 %100
  %102 = getelementptr inbounds [576 x double], [576 x double]* %101, i32 0, i32 0
  %103 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %104 = call arm_aapcscc i32 @init_outer_loop(%struct.lame_global_flags* %96, double* %102, %struct.gr_info* %103)
  %105 = icmp ne i32 %104, 0
  br i1 %105, label %124, label %106

; <label>:106:                                    ; preds = %87
  %107 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %108 = load i32, i32* %24, align 4
  %109 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %107, i32 %108
  %110 = load i32, i32* %23, align 4
  %111 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %109, i32 0, i32 %110
  %112 = bitcast %struct.III_scalefac_t* %111 to i8*
  call void @llvm.memset.p0i8.i32(i8* %112, i8 0, i32 244, i32 4, i1 false)
  %113 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %114 = load i32, i32* %24, align 4
  %115 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %113, i32 %114
  %116 = load i32, i32* %23, align 4
  %117 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %115, i32 0, i32 %116
  %118 = getelementptr inbounds [576 x i32], [576 x i32]* %117, i32 0, i32 0
  %119 = bitcast i32* %118 to i8*
  call void @llvm.memset.p0i8.i32(i8* %119, i8 0, i32 2304, i32 4, i1 false)
  %120 = getelementptr inbounds [4 x double], [4 x double]* %18, i32 0, i32 3
  store double 0.000000e+00, double* %120, align 8
  %121 = getelementptr inbounds [4 x double], [4 x double]* %18, i32 0, i32 2
  store double 0.000000e+00, double* %121, align 8
  %122 = getelementptr inbounds [4 x double], [4 x double]* %18, i32 0, i32 1
  store double 0.000000e+00, double* %122, align 8
  %123 = getelementptr inbounds [4 x double], [4 x double]* %18, i32 0, i32 0
  store double 0.000000e+00, double* %123, align 8
  br label %168

; <label>:124:                                    ; preds = %87
  %125 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %126 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %127 = load i32, i32* %24, align 4
  %128 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %126, i32 %127
  %129 = load i32, i32* %23, align 4
  %130 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %128, i32 0, i32 %129
  %131 = getelementptr inbounds [576 x double], [576 x double]* %130, i32 0, i32 0
  %132 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %13, align 4
  %133 = load i32, i32* %24, align 4
  %134 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %132, i32 %133
  %135 = load i32, i32* %23, align 4
  %136 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %134, i32 0, i32 %135
  %137 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %138 = load i32, i32* %23, align 4
  %139 = getelementptr inbounds [2 x %struct.III_psy_xmin], [2 x %struct.III_psy_xmin]* %19, i32 0, i32 %138
  %140 = call arm_aapcscc i32 @calc_xmin(%struct.lame_global_flags* %125, double* %131, %struct.III_psy_ratio* %136, %struct.gr_info* %137, %struct.III_psy_xmin* %139)
  %141 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %142 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %143 = load i32, i32* %24, align 4
  %144 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %142, i32 %143
  %145 = load i32, i32* %23, align 4
  %146 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %144, i32 0, i32 %145
  %147 = getelementptr inbounds [576 x double], [576 x double]* %146, i32 0, i32 0
  %148 = load i32, i32* %23, align 4
  %149 = getelementptr inbounds [2 x i32], [2 x i32]* %27, i32 0, i32 %148
  %150 = load i32, i32* %149, align 4
  %151 = getelementptr inbounds [4 x double], [4 x double]* %18, i32 0, i32 0
  %152 = load i32, i32* %23, align 4
  %153 = getelementptr inbounds [2 x %struct.III_psy_xmin], [2 x %struct.III_psy_xmin]* %19, i32 0, i32 %152
  %154 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %155 = load i32, i32* %24, align 4
  %156 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %154, i32 %155
  %157 = load i32, i32* %23, align 4
  %158 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %156, i32 0, i32 %157
  %159 = getelementptr inbounds [576 x i32], [576 x i32]* %158, i32 0, i32 0
  %160 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %161 = load i32, i32* %24, align 4
  %162 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %160, i32 %161
  %163 = load i32, i32* %23, align 4
  %164 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %162, i32 0, i32 %163
  %165 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %166 = getelementptr inbounds [4 x [21 x double]], [4 x [21 x double]]* %17, i32 0, i32 0
  %167 = load i32, i32* %23, align 4
  call arm_aapcscc void @outer_loop(%struct.lame_global_flags* %141, double* %147, i32 %150, double* %151, %struct.III_psy_xmin* %153, i32* %159, %struct.III_scalefac_t* %164, %struct.gr_info* %165, [21 x double]* %166, i32 %167)
  br label %168

; <label>:168:                                    ; preds = %124, %106
  %169 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %170 = load i32, i32* %24, align 4
  %171 = load i32, i32* %23, align 4
  %172 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %173 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %174 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  call arm_aapcscc void @best_scalefac_store(%struct.lame_global_flags* %169, i32 %170, i32 %171, [2 x [576 x i32]]* %172, %struct.III_side_info_t* %173, [2 x %struct.III_scalefac_t]* %174)
  %175 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %176 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %175, i32 0, i32 64
  %177 = load i32, i32* %176, align 4
  %178 = icmp eq i32 %177, 1
  br i1 %178, label %179, label %194

; <label>:179:                                    ; preds = %168
  %180 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %181 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %180, i32 0, i32 6
  %182 = load i32, i32* %181, align 4
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %194

; <label>:184:                                    ; preds = %179
  %185 = load i32, i32* %24, align 4
  %186 = load i32, i32* %23, align 4
  %187 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %188 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %189 = load i32, i32* %24, align 4
  %190 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %188, i32 %189
  %191 = load i32, i32* %23, align 4
  %192 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %190, i32 0, i32 %191
  %193 = getelementptr inbounds [576 x i32], [576 x i32]* %192, i32 0, i32 0
  call arm_aapcscc void @best_huffman_divide(i32 %185, i32 %186, %struct.gr_info* %187, i32* %193)
  br label %194

; <label>:194:                                    ; preds = %184, %179, %168
  %195 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %196 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %197 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %198 = load i32, i32* %22, align 4
  call arm_aapcscc void @ResvAdjust(%struct.lame_global_flags* %195, %struct.gr_info* %196, %struct.III_side_info_t* %197, i32 %198)
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec11
  store i32 0, i32* %25, align 4
  br label %199

; <label>:199:                                    ; preds = %232, %194
  %200 = load i32, i32* %25, align 4
  %201 = icmp slt i32 %200, 576
  br i1 %201, label %202, label %233

; <label>:202:                                    ; preds = %199
  %203 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %204 = load i32, i32* %24, align 4
  %205 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %203, i32 %204
  %206 = load i32, i32* %23, align 4
  %207 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %205, i32 0, i32 %206
  %208 = load i32, i32* %25, align 4
  %209 = getelementptr inbounds [576 x double], [576 x double]* %207, i32 0, i32 %208
  %210 = load double, double* %209, align 8
  %211 = fcmp olt double %210, 0.000000e+00
  br i1 %211, label %212, label %222

; <label>:212:                                    ; preds = %202
  %213 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %214 = load i32, i32* %24, align 4
  %215 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %213, i32 %214
  %216 = load i32, i32* %23, align 4
  %217 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %215, i32 0, i32 %216
  %218 = load i32, i32* %25, align 4
  %219 = getelementptr inbounds [576 x i32], [576 x i32]* %217, i32 0, i32 %218
  %220 = load i32, i32* %219, align 4
  %221 = mul nsw i32 %220, -1
  store i32 %221, i32* %219, align 4
  br label %222

; <label>:222:                                    ; preds = %212, %202
  br label %223

; <label>:223:                                    ; preds = %222
  %224 = load i32, i32* %25, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %224, i32 0
  %insertElmt13 = insertelement <4 x i32> %insertElmt, i32 %224, i32 1
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %224, i32 2
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %224, i32 3
  store <4 x i32> %insertElmt15, <4 x i32>* %allocaVec11, align 16
  %225 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop = add <4 x i32> %225, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec11
  %226 = load <4 x i32>, <4 x i32>* %allocaVec11, align 4
  %extractE = extractelement <4 x i32> %226, i64 0
  %extractE16 = extractelement <4 x i32> %226, i64 1
  %extractE17 = extractelement <4 x i32> %226, i64 2
  %sum = add i32 %extractE, %extractE16
  %sum18 = add i32 %sum, %extractE17
  %227 = add nsw i32 %224, 1
  %Fmul = mul i32 %227, 3
  store i32 %227, i32* %Recovery1
  %Fcmp = icmp ne i32 %sum18, %Fmul
  br i1 %Fcmp, label %228, label %232

; <label>:228:                                    ; preds = %223
  %remThree = sdiv i32 %sum18, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %229, label %230

; <label>:229:                                    ; preds = %228
  store i32 %227, i32* %Recovery1, align 4
  br label %231

; <label>:230:                                    ; preds = %228
  store i32 %extractE, i32* %Recovery1, align 4
  br label %231

; <label>:231:                                    ; preds = %230, %229
  br label %232

; <label>:232:                                    ; preds = %223, %231
  %ReplaceInst = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst, i32* %25, align 4
  br label %199

; <label>:233:                                    ; preds = %199
  br label %234

; <label>:234:                                    ; preds = %233
  %235 = load i32, i32* %23, align 4
  %insertElmt19 = insertelement <4 x i32> undef, i32 %235, i32 0
  %insertElmt20 = insertelement <4 x i32> %insertElmt19, i32 %235, i32 1
  %insertElmt21 = insertelement <4 x i32> %insertElmt20, i32 %235, i32 2
  %insertElmt22 = insertelement <4 x i32> %insertElmt21, i32 %235, i32 3
  store <4 x i32> %insertElmt22, <4 x i32>* %allocaVec9, align 16
  %236 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop23 = add <4 x i32> %236, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop23, <4 x i32>* %allocaVec9
  %237 = load <4 x i32>, <4 x i32>* %allocaVec9, align 4
  %extractE25 = extractelement <4 x i32> %237, i64 0
  %extractE26 = extractelement <4 x i32> %237, i64 1
  %extractE27 = extractelement <4 x i32> %237, i64 2
  %sum28 = add i32 %extractE25, %extractE26
  %sum29 = add i32 %sum28, %extractE27
  %238 = add nsw i32 %235, 1
  %Fmul24 = mul i32 %238, 3
  store i32 %238, i32* %Recovery2
  %Fcmp30 = icmp ne i32 %sum29, %Fmul24
  br i1 %Fcmp30, label %239, label %243

; <label>:239:                                    ; preds = %234
  %remThree43 = sdiv i32 %sum29, %extractE25
  %FcmpThree44 = icmp ne i32 %remThree43, 3
  br i1 %FcmpThree44, label %240, label %241

; <label>:240:                                    ; preds = %239
  store i32 %238, i32* %Recovery2, align 4
  br label %242

; <label>:241:                                    ; preds = %239
  store i32 %extractE25, i32* %Recovery2, align 4
  br label %242

; <label>:242:                                    ; preds = %241, %240
  br label %243

; <label>:243:                                    ; preds = %234, %242
  %ReplaceInst47 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst47, i32* %23, align 4
  br label %81

; <label>:244:                                    ; preds = %81
  br label %245

; <label>:245:                                    ; preds = %244
  %246 = load i32, i32* %24, align 4
  %insertElmt31 = insertelement <4 x i32> undef, i32 %246, i32 0
  %insertElmt32 = insertelement <4 x i32> %insertElmt31, i32 %246, i32 1
  %insertElmt33 = insertelement <4 x i32> %insertElmt32, i32 %246, i32 2
  %insertElmt34 = insertelement <4 x i32> %insertElmt33, i32 %246, i32 3
  store <4 x i32> %insertElmt34, <4 x i32>* %allocaVec10, align 16
  %247 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop35 = add <4 x i32> %247, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop35, <4 x i32>* %allocaVec10
  %248 = load <4 x i32>, <4 x i32>* %allocaVec10, align 4
  %extractE37 = extractelement <4 x i32> %248, i64 0
  %extractE38 = extractelement <4 x i32> %248, i64 1
  %extractE39 = extractelement <4 x i32> %248, i64 2
  %sum40 = add i32 %extractE37, %extractE38
  %sum41 = add i32 %sum40, %extractE39
  %249 = add nsw i32 %246, 1
  %Fmul36 = mul i32 %249, 3
  store i32 %249, i32* %Recovery3
  %Fcmp42 = icmp ne i32 %sum41, %Fmul36
  br i1 %Fcmp42, label %250, label %254

; <label>:250:                                    ; preds = %245
  %remThree45 = sdiv i32 %sum41, %extractE37
  %FcmpThree46 = icmp ne i32 %remThree45, 3
  br i1 %FcmpThree46, label %251, label %252

; <label>:251:                                    ; preds = %250
  store i32 %249, i32* %Recovery3, align 4
  br label %253

; <label>:252:                                    ; preds = %250
  store i32 %extractE37, i32* %Recovery3, align 4
  br label %253

; <label>:253:                                    ; preds = %252, %251
  br label %254

; <label>:254:                                    ; preds = %245, %253
  %ReplaceInst48 = load i32, i32* %Recovery3, align 4
  store i32 %ReplaceInst48, i32* %24, align 4
  br label %46

; <label>:255:                                    ; preds = %46
  %256 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %257 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %258 = load i32, i32* %22, align 4
  call arm_aapcscc void @ResvFrameEnd(%struct.lame_global_flags* %256, %struct.III_side_info_t* %257, i32 %258)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @init_outer_loop(%struct.lame_global_flags*, double*, %struct.gr_info*) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %Recovery = alloca double, align 8
  %allocaVec4 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec7 = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %allocaVec8 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %5 = alloca %struct.lame_global_flags*, align 4
  %6 = alloca double*, align 4
  %7 = alloca %struct.gr_info*, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %11 = alloca [3 x double], align 8
  %allocaVec12 = alloca <2 x double>, align 16
  %12 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %5, align 4
  store double* %1, double** %6, align 4
  store %struct.gr_info* %2, %struct.gr_info** %7, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec9
  store i32 0, i32* %8, align 4
  br label %13

; <label>:13:                                     ; preds = %21, %3
  %14 = load i32, i32* %8, align 4
  %15 = icmp slt i32 %14, 4
  br i1 %15, label %16, label %25

; <label>:16:                                     ; preds = %13
  %17 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %18 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %17, i32 0, i32 20
  %19 = load i32, i32* %8, align 4
  %20 = getelementptr inbounds [4 x i32], [4 x i32]* %18, i32 0, i32 %19
  store i32 0, i32* %20, align 4
  br label %21

; <label>:21:                                     ; preds = %16
  %22 = load i32, i32* %8, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %22, i32 0
  %insertElmt13 = insertelement <4 x i32> %insertElmt, i32 %22, i32 1
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %22, i32 2
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %22, i32 3
  store <4 x i32> %insertElmt15, <4 x i32>* %allocaVec9, align 16
  %23 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop = add <4 x i32> %23, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec9
  %24 = add nsw i32 %22, 1
  store i32 %24, i32* %8, align 4
  br label %13

; <label>:25:                                     ; preds = %13
  %26 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %27 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %26, i32 0, i32 19
  store i32* getelementptr inbounds ([6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i32 0, i32 0, i32 0, i32 0), i32** %27, align 4
  %28 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %29 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %28, i32 0, i32 0
  store i32 0, i32* %29, align 4
  %30 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %31 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %30, i32 0, i32 1
  store i32 0, i32* %31, align 4
  %32 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %33 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %32, i32 0, i32 2
  store i32 0, i32* %33, align 4
  %34 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %35 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %34, i32 0, i32 4
  store i32 0, i32* %35, align 4
  %36 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %37 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %36, i32 0, i32 8
  %38 = getelementptr inbounds [3 x i32], [3 x i32]* %37, i32 0, i32 0
  store i32 0, i32* %38, align 4
  %39 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %40 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %39, i32 0, i32 8
  %41 = getelementptr inbounds [3 x i32], [3 x i32]* %40, i32 0, i32 1
  store i32 0, i32* %41, align 4
  %42 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %43 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %42, i32 0, i32 8
  %44 = getelementptr inbounds [3 x i32], [3 x i32]* %43, i32 0, i32 2
  store i32 0, i32* %44, align 4
  %45 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %46 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %45, i32 0, i32 9
  %47 = getelementptr inbounds [3 x i32], [3 x i32]* %46, i32 0, i32 0
  store i32 0, i32* %47, align 4
  %48 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %49 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %48, i32 0, i32 9
  %50 = getelementptr inbounds [3 x i32], [3 x i32]* %49, i32 0, i32 1
  store i32 0, i32* %50, align 4
  %51 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %52 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %51, i32 0, i32 9
  %53 = getelementptr inbounds [3 x i32], [3 x i32]* %52, i32 0, i32 2
  store i32 0, i32* %53, align 4
  %54 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %55 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %54, i32 0, i32 10
  store i32 0, i32* %55, align 4
  %56 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %57 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %56, i32 0, i32 11
  store i32 0, i32* %57, align 4
  %58 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %59 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %58, i32 0, i32 15
  store i32 0, i32* %59, align 4
  %60 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %61 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %60, i32 0, i32 12
  store i32 0, i32* %61, align 4
  %62 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %63 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %62, i32 0, i32 13
  store i32 0, i32* %63, align 4
  %64 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %65 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %64, i32 0, i32 3
  store i32 210, i32* %65, align 4
  %66 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %67 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %66, i32 0, i32 14
  store i32 0, i32* %67, align 4
  %68 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %69 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %68, i32 0, i32 18
  store i32 0, i32* %69, align 4
  %70 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %71 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %70, i32 0, i32 20
  %72 = load i32, i32* %71, align 4
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %74, label %242

; <label>:74:                                     ; preds = %25
  %75 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %76 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %75, i32 0, i32 6
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 2
  br i1 %78, label %79, label %241

; <label>:79:                                     ; preds = %74
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec11
  store i32 0, i32* %10, align 4
  br label %80

; <label>:80:                                     ; preds = %86, %79
  %81 = load i32, i32* %10, align 4
  %82 = icmp slt i32 %81, 3
  br i1 %82, label %83, label %90

; <label>:83:                                     ; preds = %80
  %84 = load i32, i32* %10, align 4
  %85 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 %84
  store double 0.000000e+00, double* %85, align 8
  br label %86

; <label>:86:                                     ; preds = %83
  %87 = load i32, i32* %10, align 4
  %insertElmt16 = insertelement <4 x i32> undef, i32 %87, i32 0
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %87, i32 1
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %87, i32 2
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %87, i32 3
  store <4 x i32> %insertElmt19, <4 x i32>* %allocaVec11, align 16
  %88 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop20 = add <4 x i32> %88, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop20, <4 x i32>* %allocaVec11
  %89 = add nsw i32 %87, 1
  store i32 %89, i32* %10, align 4
  br label %80

; <label>:90:                                     ; preds = %80
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec9
  store i32 0, i32* %8, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec10
  store i32 0, i32* %9, align 4
  br label %91

; <label>:91:                                     ; preds = %128, %90
  %92 = load i32, i32* %9, align 4
  %93 = icmp slt i32 %92, 192
  br i1 %93, label %94, label %129

; <label>:94:                                     ; preds = %91
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec11
  store i32 0, i32* %10, align 4
  br label %95

; <label>:95:                                     ; preds = %114, %94
  %96 = load i32, i32* %10, align 4
  %97 = icmp slt i32 %96, 3
  br i1 %97, label %98, label %118

; <label>:98:                                     ; preds = %95
  %99 = load double*, double** %6, align 4
  %100 = load i32, i32* %8, align 4
  %101 = getelementptr inbounds double, double* %99, i32 %100
  %102 = load double, double* %101, align 8
  %103 = load double*, double** %6, align 4
  %104 = load i32, i32* %8, align 4
  %105 = getelementptr inbounds double, double* %103, i32 %104
  %106 = load double, double* %105, align 8
  %107 = fmul double %102, %106
  %108 = load i32, i32* %10, align 4
  %109 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 %108
  %110 = load double, double* %109, align 8
  %111 = fadd double %110, %107
  store double %111, double* %109, align 8
  %112 = load i32, i32* %8, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %8, align 4
  br label %114

; <label>:114:                                    ; preds = %98
  %115 = load i32, i32* %10, align 4
  %116 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop21 = add <4 x i32> %116, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop21, <4 x i32>* %allocaVec11
  %117 = add nsw i32 %115, 1
  store i32 %117, i32* %10, align 4
  br label %95

; <label>:118:                                    ; preds = %95
  br label %119

; <label>:119:                                    ; preds = %118
  %120 = load i32, i32* %9, align 4
  %insertElmt22 = insertelement <4 x i32> undef, i32 %120, i32 0
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %120, i32 1
  %insertElmt24 = insertelement <4 x i32> %insertElmt23, i32 %120, i32 2
  %insertElmt25 = insertelement <4 x i32> %insertElmt24, i32 %120, i32 3
  store <4 x i32> %insertElmt25, <4 x i32>* %allocaVec10, align 16
  %121 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop26 = add <4 x i32> %121, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop26, <4 x i32>* %allocaVec10
  %122 = load <4 x i32>, <4 x i32>* %allocaVec10, align 4
  %extractE = extractelement <4 x i32> %122, i64 0
  %extractE27 = extractelement <4 x i32> %122, i64 1
  %extractE28 = extractelement <4 x i32> %122, i64 2
  %sum = add i32 %extractE, %extractE27
  %sum29 = add i32 %sum, %extractE28
  %123 = add nsw i32 %120, 1
  %Fmul = mul i32 %123, 3
  store i32 %123, i32* %Recovery1
  %Fcmp = icmp ne i32 %sum29, %Fmul
  br i1 %Fcmp, label %124, label %128

; <label>:124:                                    ; preds = %119
  %remThree = sdiv i32 %sum29, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %125, label %126

; <label>:125:                                    ; preds = %124
  store i32 %123, i32* %Recovery1, align 4
  br label %127

; <label>:126:                                    ; preds = %124
  store i32 %extractE, i32* %Recovery1, align 4
  br label %127

; <label>:127:                                    ; preds = %126, %125
  br label %128

; <label>:128:                                    ; preds = %119, %127
  %ReplaceInst = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst, i32* %9, align 4
  br label %91

; <label>:129:                                    ; preds = %91
  store <2 x double> <double 1.000000e-12, double 1.000000e-12>, <2 x double>* %allocaVec12
  store double 1.000000e-12, double* %12, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec11
  store i32 0, i32* %10, align 4
  br label %130

; <label>:130:                                    ; preds = %147, %129
  %131 = load i32, i32* %10, align 4
  %132 = icmp slt i32 %131, 3
  br i1 %132, label %133, label %151

; <label>:133:                                    ; preds = %130
  %134 = load double, double* %12, align 8
  %135 = load i32, i32* %10, align 4
  %136 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 %135
  %137 = load double, double* %136, align 8
  %138 = fcmp ogt double %134, %137
  br i1 %138, label %139, label %141

; <label>:139:                                    ; preds = %133
  %140 = load double, double* %12, align 8
  br label %145

; <label>:141:                                    ; preds = %133
  %142 = load i32, i32* %10, align 4
  %143 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 %142
  %144 = load double, double* %143, align 8
  br label %145

; <label>:145:                                    ; preds = %141, %139
  %146 = phi double [ %140, %139 ], [ %144, %141 ]
  store double %146, double* %12, align 8
  br label %147

; <label>:147:                                    ; preds = %145
  %148 = load i32, i32* %10, align 4
  %149 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop30 = add <4 x i32> %149, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop30, <4 x i32>* %allocaVec11
  %150 = add nsw i32 %148, 1
  store i32 %150, i32* %10, align 4
  br label %130

; <label>:151:                                    ; preds = %130
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec11
  store i32 0, i32* %10, align 4
  br label %152

; <label>:152:                                    ; preds = %172, %151
  %153 = load i32, i32* %10, align 4
  %154 = icmp slt i32 %153, 3
  br i1 %154, label %155, label %176

; <label>:155:                                    ; preds = %152
  %156 = load i32, i32* %10, align 4
  %157 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 %156
  %158 = load double, double* %157, align 8
  %159 = fcmp ogt double %158, 1.000000e-12
  br i1 %159, label %160, label %164

; <label>:160:                                    ; preds = %155
  %161 = load i32, i32* %10, align 4
  %162 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 %161
  %163 = load double, double* %162, align 8
  br label %165

; <label>:164:                                    ; preds = %155
  br label %165

; <label>:165:                                    ; preds = %164, %160
  %166 = phi double [ %163, %160 ], [ 1.000000e-12, %164 ]
  %167 = load double, double* %12, align 8
  %insertElmt31 = insertelement <2 x double> undef, double %167, i32 0
  %insertElmt32 = insertelement <2 x double> %insertElmt31, double %167, i32 1
  store <2 x double> %insertElmt32, <2 x double>* %allocaVec12, align 16
  %168 = load <2 x double>, <2 x double>* %allocaVec12, align 16
  %169 = fdiv double %166, %167
  %170 = load i32, i32* %10, align 4
  %171 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 %170
  store double %169, double* %171, align 8
  br label %172

; <label>:172:                                    ; preds = %165
  %173 = load i32, i32* %10, align 4
  %174 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop33 = add <4 x i32> %174, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop33, <4 x i32>* %allocaVec11
  %175 = add nsw i32 %173, 1
  store i32 %175, i32* %10, align 4
  br label %152

; <label>:176:                                    ; preds = %152
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec11
  store i32 0, i32* %10, align 4
  br label %177

; <label>:177:                                    ; preds = %228, %176
  %178 = load i32, i32* %10, align 4
  %179 = icmp slt i32 %178, 3
  br i1 %179, label %180, label %229

; <label>:180:                                    ; preds = %177
  %181 = load i32, i32* %10, align 4
  %182 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 %181
  %183 = load double, double* %182, align 8
  %184 = call arm_aapcscc double @log(double %183) #7
  store double %184, double* %CallInst
  %185 = load double, double* %CallInst, align 4
  %insertCall = insertelement <2 x double> undef, double %185, i32 0
  %insertCall34 = insertelement <2 x double> %insertCall, double %185, i32 1
  store <2 x double> %insertCall34, <2 x double>* %CallInstVec, align 4
  %186 = load <2 x double>, <2 x double>* %CallInstVec, align 4
  %Vop35 = fmul <2 x double> <double -5.000000e-01, double -5.000000e-01>, %186
  %187 = fmul double -5.000000e-01, %184
  %Vop36 = fdiv <2 x double> %Vop35, <double 0x3FE62E42FEFA39EF, double 0x3FE62E42FEFA39EF>
  %188 = fdiv double %187, 0x3FE62E42FEFA39EF
  %Vop37 = fadd <2 x double> %Vop36, <double 5.000000e-01, double 5.000000e-01>
  %189 = fadd double %188, 5.000000e-01
  %190 = fptosi double %189 to i32
  %191 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %192 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %191, i32 0, i32 9
  %193 = load i32, i32* %10, align 4
  %194 = getelementptr inbounds [3 x i32], [3 x i32]* %192, i32 0, i32 %193
  store i32 %190, i32* %194, align 4
  %195 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %196 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %195, i32 0, i32 9
  %197 = load i32, i32* %10, align 4
  %198 = getelementptr inbounds [3 x i32], [3 x i32]* %196, i32 0, i32 %197
  %199 = load i32, i32* %198, align 4
  %200 = icmp sgt i32 %199, 2
  br i1 %200, label %201, label %206

; <label>:201:                                    ; preds = %180
  %202 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %203 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %202, i32 0, i32 9
  %204 = load i32, i32* %10, align 4
  %205 = getelementptr inbounds [3 x i32], [3 x i32]* %203, i32 0, i32 %204
  store i32 2, i32* %205, align 4
  br label %206

; <label>:206:                                    ; preds = %201, %180
  %207 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %208 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %207, i32 0, i32 9
  %209 = load i32, i32* %10, align 4
  %210 = getelementptr inbounds [3 x i32], [3 x i32]* %208, i32 0, i32 %209
  %211 = load i32, i32* %210, align 4
  %212 = icmp slt i32 %211, 0
  br i1 %212, label %213, label %218

; <label>:213:                                    ; preds = %206
  %214 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %215 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %214, i32 0, i32 9
  %216 = load i32, i32* %10, align 4
  %217 = getelementptr inbounds [3 x i32], [3 x i32]* %215, i32 0, i32 %216
  store i32 0, i32* %217, align 4
  br label %218

; <label>:218:                                    ; preds = %213, %206
  br label %219

; <label>:219:                                    ; preds = %218
  %220 = load i32, i32* %10, align 4
  %221 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop38 = add <4 x i32> %221, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop38, <4 x i32>* %allocaVec11
  %222 = load <4 x i32>, <4 x i32>* %allocaVec11, align 4
  %extractE40 = extractelement <4 x i32> %222, i64 0
  %extractE41 = extractelement <4 x i32> %222, i64 1
  %extractE42 = extractelement <4 x i32> %222, i64 2
  %sum43 = add i32 %extractE40, %extractE41
  %sum44 = add i32 %sum43, %extractE42
  %223 = add nsw i32 %220, 1
  %Fmul39 = mul i32 %223, 3
  store i32 %223, i32* %Recovery2
  %Fcmp45 = icmp ne i32 %sum44, %Fmul39
  br i1 %Fcmp45, label %224, label %228

; <label>:224:                                    ; preds = %219
  %remThree54 = sdiv i32 %sum44, %extractE40
  %FcmpThree55 = icmp ne i32 %remThree54, 3
  br i1 %FcmpThree55, label %225, label %226

; <label>:225:                                    ; preds = %224
  store i32 %223, i32* %Recovery2, align 4
  br label %227

; <label>:226:                                    ; preds = %224
  store i32 %extractE40, i32* %Recovery2, align 4
  br label %227

; <label>:227:                                    ; preds = %226, %225
  br label %228

; <label>:228:                                    ; preds = %219, %227
  %ReplaceInst58 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst58, i32* %10, align 4
  br label %177

; <label>:229:                                    ; preds = %177
  %230 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 0
  %231 = load double, double* %230, align 8
  %232 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 1
  %233 = load double, double* %232, align 8
  %234 = fadd double %231, %233
  %235 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 2
  %236 = load double, double* %235, align 8
  %237 = fadd double %234, %236
  %238 = fcmp olt double 1.000000e-99, %237
  br i1 %238, label %239, label %240

; <label>:239:                                    ; preds = %229
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec8
  store i32 1, i32* %4, align 4
  br label %266

; <label>:240:                                    ; preds = %229
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec8
  store i32 0, i32* %4, align 4
  br label %266

; <label>:241:                                    ; preds = %74
  br label %242

; <label>:242:                                    ; preds = %241, %25
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec9
  store i32 0, i32* %8, align 4
  br label %243

; <label>:243:                                    ; preds = %264, %242
  %244 = load i32, i32* %8, align 4
  %245 = icmp slt i32 %244, 576
  br i1 %245, label %246, label %265

; <label>:246:                                    ; preds = %243
  %247 = load double*, double** %6, align 4
  %248 = load i32, i32* %8, align 4
  %249 = getelementptr inbounds double, double* %247, i32 %248
  %250 = load double, double* %249, align 8
  %251 = call arm_aapcscc double @fabs(double %250) #9
  %252 = fcmp olt double 1.000000e-99, %251
  br i1 %252, label %253, label %254

; <label>:253:                                    ; preds = %246
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec8
  store i32 1, i32* %4, align 4
  br label %266

; <label>:254:                                    ; preds = %246
  br label %255

; <label>:255:                                    ; preds = %254
  %256 = load i32, i32* %8, align 4
  %257 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop46 = add <4 x i32> %257, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop46, <4 x i32>* %allocaVec9
  %258 = load <4 x i32>, <4 x i32>* %allocaVec9, align 4
  %extractE48 = extractelement <4 x i32> %258, i64 0
  %extractE49 = extractelement <4 x i32> %258, i64 1
  %extractE50 = extractelement <4 x i32> %258, i64 2
  %sum51 = add i32 %extractE48, %extractE49
  %sum52 = add i32 %sum51, %extractE50
  %259 = add nsw i32 %256, 1
  %Fmul47 = mul i32 %259, 3
  store i32 %259, i32* %Recovery3
  %Fcmp53 = icmp ne i32 %sum52, %Fmul47
  br i1 %Fcmp53, label %260, label %264

; <label>:260:                                    ; preds = %255
  %remThree56 = sdiv i32 %sum52, %extractE48
  %FcmpThree57 = icmp ne i32 %remThree56, 3
  br i1 %FcmpThree57, label %261, label %262

; <label>:261:                                    ; preds = %260
  store i32 %259, i32* %Recovery3, align 4
  br label %263

; <label>:262:                                    ; preds = %260
  store i32 %extractE48, i32* %Recovery3, align 4
  br label %263

; <label>:263:                                    ; preds = %262, %261
  br label %264

; <label>:264:                                    ; preds = %255, %263
  %ReplaceInst59 = load i32, i32* %Recovery3, align 4
  store i32 %ReplaceInst59, i32* %8, align 4
  br label %243

; <label>:265:                                    ; preds = %243
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec8
  store i32 0, i32* %4, align 4
  br label %266

; <label>:266:                                    ; preds = %265, %253, %240, %239
  %267 = load i32, i32* %4, align 4
  ret i32 %267
}

; Function Attrs: nounwind
define arm_aapcscc void @outer_loop(%struct.lame_global_flags*, double*, i32, double*, %struct.III_psy_xmin*, i32*, %struct.III_scalefac_t*, %struct.gr_info*, [21 x double]*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec9 = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %11 = alloca %struct.lame_global_flags*, align 4
  %12 = alloca double*, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %14 = alloca double*, align 4
  %15 = alloca %struct.III_psy_xmin*, align 4
  %16 = alloca i32*, align 4
  %17 = alloca %struct.III_scalefac_t*, align 4
  %18 = alloca %struct.gr_info*, align 4
  %19 = alloca [21 x double]*, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %20 = alloca i32, align 4
  %21 = alloca %struct.III_scalefac_t, align 4
  %22 = alloca %struct.gr_info, align 4
  %23 = alloca [576 x i32], align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %24 = alloca i32, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %25 = alloca i32, align 4
  %allocaVec14 = alloca <4 x i32>, align 16
  %26 = alloca i32, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %27 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %28 = alloca i32, align 4
  %29 = alloca [576 x double], align 8
  %allocaVec17 = alloca <2 x double>, align 16
  %30 = alloca double, align 8
  %allocaVec18 = alloca <4 x i32>, align 16
  %31 = alloca i32, align 4
  %allocaVec19 = alloca <4 x i32>, align 16
  %32 = alloca i32, align 4
  %allocaVec20 = alloca <2 x double>, align 16
  %33 = alloca double, align 8
  %allocaVec21 = alloca <2 x double>, align 16
  %34 = alloca double, align 8
  %allocaVec22 = alloca <2 x double>, align 16
  %35 = alloca double, align 8
  %allocaVec23 = alloca <4 x i32>, align 16
  %36 = alloca i32, align 4
  %allocaVec24 = alloca <2 x double>, align 16
  %37 = alloca double, align 8
  %allocaVec25 = alloca <2 x double>, align 16
  %38 = alloca double, align 8
  %allocaVec26 = alloca <2 x double>, align 16
  %39 = alloca double, align 8
  %40 = alloca [4 x [21 x double]], align 8
  %41 = alloca [4 x [21 x double]], align 8
  %allocaVec27 = alloca <4 x i32>, align 16
  %42 = alloca i32, align 4
  %allocaVec28 = alloca <4 x i32>, align 16
  %43 = alloca i32, align 4
  %allocaVec29 = alloca <4 x i32>, align 16
  %44 = alloca i32, align 4
  %allocaVec30 = alloca <4 x i32>, align 16
  %45 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %11, align 4
  store double* %1, double** %12, align 4
  store i32 %2, i32* %13, align 4
  store double* %3, double** %14, align 4
  store %struct.III_psy_xmin* %4, %struct.III_psy_xmin** %15, align 4
  store i32* %5, i32** %16, align 4
  store %struct.III_scalefac_t* %6, %struct.III_scalefac_t** %17, align 4
  store %struct.gr_info* %7, %struct.gr_info** %18, align 4
  store [21 x double]* %8, [21 x double]** %19, align 4
  store i32 %9, i32* %20, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %27, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec19
  store i32 0, i32* %32, align 4
  store <4 x i32> <i32 100, i32 100, i32 100, i32 100>, <4 x i32>* %allocaVec23
  store i32 100, i32* %36, align 4
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec24
  store double 0.000000e+00, double* %37, align 8
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec25
  store double 0.000000e+00, double* %38, align 8
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec26
  store double 0.000000e+00, double* %39, align 8
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec27
  store i32 1, i32* %42, align 4
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec28
  store i32 1, i32* %43, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec13
  store i32 0, i32* %25, align 4
  br label %46

; <label>:46:                                     ; preds = %264, %10
  %47 = load i32, i32* %43, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %265

; <label>:49:                                     ; preds = %46
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec29
  store i32 0, i32* %44, align 4
  %50 = load i32, i32* %25, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %50, i32 0
  %insertElmt31 = insertelement <4 x i32> %insertElmt, i32 %50, i32 1
  %insertElmt32 = insertelement <4 x i32> %insertElmt31, i32 %50, i32 2
  %insertElmt33 = insertelement <4 x i32> %insertElmt32, i32 %50, i32 3
  store <4 x i32> %insertElmt33, <4 x i32>* %allocaVec13, align 16
  %51 = load <4 x i32>, <4 x i32>* %allocaVec13, align 16
  %Vop = add <4 x i32> %51, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec13
  %52 = load <4 x i32>, <4 x i32>* %allocaVec13, align 4
  %extractE = extractelement <4 x i32> %52, i64 0
  %extractE34 = extractelement <4 x i32> %52, i64 1
  %extractE35 = extractelement <4 x i32> %52, i64 2
  %sum = add i32 %extractE, %extractE34
  %sum36 = add i32 %sum, %extractE35
  %53 = add nsw i32 %50, 1
  %Fmul = mul i32 %53, 3
  store i32 %53, i32* %Recovery
  %Fcmp = icmp ne i32 %sum36, %Fmul
  br i1 %Fcmp, label %54, label %58

; <label>:54:                                     ; preds = %49
  %remThree = sdiv i32 %sum36, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %55, label %56

; <label>:55:                                     ; preds = %54
  store i32 %53, i32* %Recovery, align 4
  br label %57

; <label>:56:                                     ; preds = %54
  store i32 %extractE, i32* %Recovery, align 4
  br label %57

; <label>:57:                                     ; preds = %56, %55
  br label %58

; <label>:58:                                     ; preds = %49, %57
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %25, align 4
  %59 = load i32, i32* %42, align 4
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %107

; <label>:61:                                     ; preds = %58
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec27
  store i32 0, i32* %42, align 4
  %62 = bitcast %struct.III_scalefac_t* %21 to i8*
  call void @llvm.memset.p0i8.i32(i8* %62, i8 0, i32 244, i32 4, i1 false)
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec12
  store i32 0, i32* %24, align 4
  br label %63

; <label>:63:                                     ; preds = %91, %61
  %64 = load i32, i32* %24, align 4
  %65 = icmp slt i32 %64, 576
  br i1 %65, label %66, label %92

; <label>:66:                                     ; preds = %63
  %67 = load double*, double** %12, align 4
  %68 = load i32, i32* %24, align 4
  %69 = getelementptr inbounds double, double* %67, i32 %68
  %70 = load double, double* %69, align 8
  %71 = call arm_aapcscc double @fabs(double %70) #9
  store double %71, double* %30, align 8
  %72 = load double, double* %30, align 8
  %73 = call arm_aapcscc double @sqrt(double %72) #7
  %74 = load double, double* %30, align 8
  %insertElmt37 = insertelement <2 x double> undef, double %74, i32 0
  %insertElmt38 = insertelement <2 x double> %insertElmt37, double %74, i32 1
  store <2 x double> %insertElmt38, <2 x double>* %allocaVec17, align 16
  store double %73, double* %CallInst
  %75 = load double, double* %CallInst, align 4
  %insertCall = insertelement <2 x double> undef, double %75, i32 0
  %insertCall39 = insertelement <2 x double> %insertCall, double %75, i32 1
  store <2 x double> %insertCall39, <2 x double>* %CallInstVec, align 4
  %76 = load <2 x double>, <2 x double>* %CallInstVec, align 4
  %77 = load <2 x double>, <2 x double>* %allocaVec17, align 16
  %Vop40 = fmul <2 x double> %76, %77
  %78 = fmul double %73, %74
  %79 = call arm_aapcscc double @sqrt(double %78) #7
  %80 = load i32, i32* %24, align 4
  %81 = getelementptr inbounds [576 x double], [576 x double]* %29, i32 0, i32 %80
  store double %79, double* %81, align 8
  br label %82

; <label>:82:                                     ; preds = %66
  %83 = load i32, i32* %24, align 4
  %insertElmt41 = insertelement <4 x i32> undef, i32 %83, i32 0
  %insertElmt42 = insertelement <4 x i32> %insertElmt41, i32 %83, i32 1
  %insertElmt43 = insertelement <4 x i32> %insertElmt42, i32 %83, i32 2
  %insertElmt44 = insertelement <4 x i32> %insertElmt43, i32 %83, i32 3
  store <4 x i32> %insertElmt44, <4 x i32>* %allocaVec12, align 16
  %84 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop45 = add <4 x i32> %84, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop45, <4 x i32>* %allocaVec12
  %85 = load <4 x i32>, <4 x i32>* %allocaVec12, align 4
  %extractE47 = extractelement <4 x i32> %85, i64 0
  %extractE48 = extractelement <4 x i32> %85, i64 1
  %extractE49 = extractelement <4 x i32> %85, i64 2
  %sum50 = add i32 %extractE47, %extractE48
  %sum51 = add i32 %sum50, %extractE49
  %86 = add nsw i32 %83, 1
  %Fmul46 = mul i32 %86, 3
  store i32 %86, i32* %Recovery1
  %Fcmp52 = icmp ne i32 %sum51, %Fmul46
  br i1 %Fcmp52, label %87, label %91

; <label>:87:                                     ; preds = %82
  %remThree57 = sdiv i32 %sum51, %extractE47
  %FcmpThree58 = icmp ne i32 %remThree57, 3
  br i1 %FcmpThree58, label %88, label %89

; <label>:88:                                     ; preds = %87
  store i32 %86, i32* %Recovery1, align 4
  br label %90

; <label>:89:                                     ; preds = %87
  store i32 %extractE47, i32* %Recovery1, align 4
  br label %90

; <label>:90:                                     ; preds = %89, %88
  br label %91

; <label>:91:                                     ; preds = %82, %90
  %ReplaceInst59 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst59, i32* %24, align 4
  br label %63

; <label>:92:                                     ; preds = %63
  %93 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %94 = load i32, i32* %13, align 4
  %95 = load i32, i32* %20, align 4
  %96 = getelementptr inbounds [2 x i32], [2 x i32]* @outer_loop.OldValue, i32 0, i32 %95
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds [576 x i32], [576 x i32]* %23, i32 0, i32 0
  %99 = getelementptr inbounds [576 x double], [576 x double]* %29, i32 0, i32 0
  %100 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %101 = call arm_aapcscc i32 @bin_search_StepSize2(%struct.lame_global_flags* %93, i32 %94, i32 %97, i32* %98, double* %99, %struct.gr_info* %100)
  store i32 %101, i32* %27, align 4
  %102 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %103 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %102, i32 0, i32 3
  %104 = load i32, i32* %103, align 4
  %105 = load i32, i32* %20, align 4
  %106 = getelementptr inbounds [2 x i32], [2 x i32]* @outer_loop.OldValue, i32 0, i32 %105
  store i32 %104, i32* %106, align 4
  br label %107

; <label>:107:                                    ; preds = %92, %58
  %108 = load i32, i32* %13, align 4
  %insertElmt53 = insertelement <4 x i32> undef, i32 %108, i32 0
  %insertElmt54 = insertelement <4 x i32> %insertElmt53, i32 %108, i32 1
  %insertElmt55 = insertelement <4 x i32> %insertElmt54, i32 %108, i32 2
  %insertElmt56 = insertelement <4 x i32> %insertElmt55, i32 %108, i32 3
  store <4 x i32> %insertElmt56, <4 x i32>* %allocaVec10, align 16
  %109 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %110 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %109, i32 0, i32 15
  %111 = load i32, i32* %110, align 4
  %112 = sub i32 %108, %111
  store i32 %112, i32* %28, align 4
  %113 = load i32, i32* %28, align 4
  %114 = icmp slt i32 %113, 0
  br i1 %114, label %115, label %122

; <label>:115:                                    ; preds = %107
  %116 = load i32, i32* %25, align 4
  %117 = icmp ne i32 %116, 1
  br i1 %117, label %119, label %118

; <label>:118:                                    ; preds = %115
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5.215, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 805, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__.outer_loop, i32 0, i32 0))
  br label %119

; <label>:119:                                    ; preds = %118, %115
  %120 = phi i1 [ true, %115 ], [ false, %118 ]
  %121 = zext i1 %120 to i32
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec28
  store i32 0, i32* %43, align 4
  br label %203

; <label>:122:                                    ; preds = %107
  %123 = load i32, i32* %25, align 4
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %125, label %143

; <label>:125:                                    ; preds = %122
  %126 = load i32, i32* %27, align 4
  %127 = load i32, i32* %28, align 4
  %128 = icmp sgt i32 %126, %127
  br i1 %128, label %129, label %140

; <label>:129:                                    ; preds = %125
  %130 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %131 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %130, i32 0, i32 3
  %132 = load i32, i32* %131, align 4
  %133 = add i32 %132, 1
  store i32 %133, i32* %131, align 4
  %134 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %135 = getelementptr inbounds [576 x double], [576 x double]* %29, i32 0, i32 0
  %136 = getelementptr inbounds [576 x i32], [576 x i32]* %23, i32 0, i32 0
  %137 = load i32, i32* %28, align 4
  %138 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %139 = call arm_aapcscc i32 @inner_loop(%struct.lame_global_flags* %134, double* %135, i32* %136, i32 %137, %struct.gr_info* %138)
  store i32 %139, i32* %45, align 4
  br label %142

; <label>:140:                                    ; preds = %125
  %141 = load i32, i32* %27, align 4
  store i32 %141, i32* %45, align 4
  br label %142

; <label>:142:                                    ; preds = %140, %129
  br label %150

; <label>:143:                                    ; preds = %122
  %144 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %145 = getelementptr inbounds [576 x double], [576 x double]* %29, i32 0, i32 0
  %146 = getelementptr inbounds [576 x i32], [576 x i32]* %23, i32 0, i32 0
  %147 = load i32, i32* %28, align 4
  %148 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %149 = call arm_aapcscc i32 @inner_loop(%struct.lame_global_flags* %144, double* %145, i32* %146, i32 %147, %struct.gr_info* %148)
  store i32 %149, i32* %45, align 4
  br label %150

; <label>:150:                                    ; preds = %143, %142
  %151 = load i32, i32* %45, align 4
  %152 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %153 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %152, i32 0, i32 0
  store i32 %151, i32* %153, align 4
  %154 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %155 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %154, i32 0, i32 61
  %156 = load i32, i32* %155, align 4
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %159

; <label>:158:                                    ; preds = %150
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec19
  store i32 0, i32* %32, align 4
  br label %167

; <label>:159:                                    ; preds = %150
  %160 = load double*, double** %12, align 4
  %161 = getelementptr inbounds [576 x i32], [576 x i32]* %23, i32 0, i32 0
  %162 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %163 = getelementptr inbounds [4 x [21 x double]], [4 x [21 x double]]* %40, i32 0, i32 0
  %164 = getelementptr inbounds [4 x [21 x double]], [4 x [21 x double]]* %41, i32 0, i32 0
  %165 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %15, align 4
  %166 = call arm_aapcscc i32 @calc_noise1(double* %160, i32* %161, %struct.gr_info* %162, [21 x double]* %163, [21 x double]* %164, %struct.III_psy_xmin* %165, %struct.III_scalefac_t* %21, double* %34, double* %35, double* %33)
  store i32 %166, i32* %32, align 4
  br label %167

; <label>:167:                                    ; preds = %159, %158
  %168 = load i32, i32* %25, align 4
  %169 = icmp eq i32 %168, 1
  br i1 %169, label %170, label %171

; <label>:170:                                    ; preds = %167
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec18
  store i32 1, i32* %31, align 4
  br label %184

; <label>:171:                                    ; preds = %167
  %172 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %173 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %172, i32 0, i32 18
  %174 = load i32, i32* %173, align 4
  %175 = load i32, i32* %36, align 4
  %176 = load double, double* %39, align 8
  %177 = load double, double* %38, align 8
  %178 = load double, double* %37, align 8
  %179 = load i32, i32* %32, align 4
  %180 = load double, double* %35, align 8
  %181 = load double, double* %34, align 8
  %182 = load double, double* %33, align 8
  %183 = call arm_aapcscc i32 @quant_compare(i32 %174, i32 %175, double %176, double %177, double %178, i32 %179, double %180, double %181, double %182)
  store i32 %183, i32* %31, align 4
  br label %184

; <label>:184:                                    ; preds = %171, %170
  %185 = load i32, i32* %31, align 4
  %186 = icmp ne i32 %185, 0
  br i1 %186, label %187, label %202

; <label>:187:                                    ; preds = %184
  %188 = load i32, i32* %32, align 4
  store i32 %188, i32* %36, align 4
  %189 = load double, double* %33, align 8
  store double %189, double* %37, align 8
  %190 = load double, double* %34, align 8
  store double %190, double* %38, align 8
  %191 = load double, double* %35, align 8
  store double %191, double* %39, align 8
  %192 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %17, align 4
  %193 = bitcast %struct.III_scalefac_t* %192 to i8*
  %194 = bitcast %struct.III_scalefac_t* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %193, i8* %194, i32 244, i32 4, i1 false)
  %195 = load i32*, i32** %16, align 4
  %196 = bitcast i32* %195 to i8*
  %197 = getelementptr inbounds [576 x i32], [576 x i32]* %23, i32 0, i32 0
  %198 = bitcast i32* %197 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %196, i8* %198, i32 2304, i32 4, i1 false)
  %199 = bitcast %struct.gr_info* %22 to i8*
  %200 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %201 = bitcast %struct.gr_info* %200 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %199, i8* %201, i32 112, i32 4, i1 false)
  br label %202

; <label>:202:                                    ; preds = %187, %184
  br label %203

; <label>:203:                                    ; preds = %202, %119
  %204 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %205 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %204, i32 0, i32 62
  %206 = load i32, i32* %205, align 4
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %208, label %213

; <label>:208:                                    ; preds = %203
  %209 = load i32, i32* %32, align 4
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %212

; <label>:211:                                    ; preds = %208
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec28
  store i32 0, i32* %43, align 4
  br label %212

; <label>:212:                                    ; preds = %211, %208
  br label %213

; <label>:213:                                    ; preds = %212, %203
  %214 = load i32, i32* %43, align 4
  %215 = icmp ne i32 %214, 0
  br i1 %215, label %216, label %249

; <label>:216:                                    ; preds = %213
  %217 = getelementptr inbounds [576 x double], [576 x double]* %29, i32 0, i32 0
  %218 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %219 = getelementptr inbounds [4 x [21 x double]], [4 x [21 x double]]* %41, i32 0, i32 0
  call arm_aapcscc void @amp_scalefac_bands(double* %217, %struct.gr_info* %218, %struct.III_scalefac_t* %21, [21 x double]* %219)
  %220 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %221 = call arm_aapcscc i32 @loop_break(%struct.III_scalefac_t* %21, %struct.gr_info* %220)
  store i32 %221, i32* %26, align 4
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %223, label %244

; <label>:223:                                    ; preds = %216
  %224 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %225 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %224, i32 0, i32 43
  %226 = load i32, i32* %225, align 4
  %227 = icmp eq i32 %226, 1
  br i1 %227, label %228, label %231

; <label>:228:                                    ; preds = %223
  %229 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %230 = call arm_aapcscc i32 @scale_bitcount(%struct.III_scalefac_t* %21, %struct.gr_info* %229)
  store i32 %230, i32* %26, align 4
  br label %234

; <label>:231:                                    ; preds = %223
  %232 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %233 = call arm_aapcscc i32 @scale_bitcount_lsf(%struct.III_scalefac_t* %21, %struct.gr_info* %232)
  store i32 %233, i32* %26, align 4
  br label %234

; <label>:234:                                    ; preds = %231, %228
  %235 = load i32, i32* %26, align 4
  %236 = icmp ne i32 %235, 0
  br i1 %236, label %237, label %243

; <label>:237:                                    ; preds = %234
  %238 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %239 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %238, i32 0, i32 13
  %240 = load i32, i32* %239, align 4
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %242, label %243

; <label>:242:                                    ; preds = %237
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec29
  store i32 1, i32* %44, align 4
  br label %243

; <label>:243:                                    ; preds = %242, %237, %234
  br label %244

; <label>:244:                                    ; preds = %243, %216
  %245 = load i32, i32* %26, align 4
  %246 = icmp ne i32 %245, 0
  %247 = xor i1 %246, true
  %248 = zext i1 %247 to i32
  store i32 %248, i32* %43, align 4
  br label %249

; <label>:249:                                    ; preds = %244, %213
  %250 = load i32, i32* %44, align 4
  %251 = icmp ne i32 %250, 0
  br i1 %251, label %252, label %264

; <label>:252:                                    ; preds = %249
  %253 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %254 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %253, i32 0, i32 19
  %255 = load i32, i32* %254, align 4
  %256 = icmp ne i32 %255, 0
  br i1 %256, label %257, label %264

; <label>:257:                                    ; preds = %252
  %258 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %259 = load double*, double** %12, align 4
  %260 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %261 = call arm_aapcscc i32 @init_outer_loop(%struct.lame_global_flags* %258, double* %259, %struct.gr_info* %260)
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec27
  store i32 1, i32* %42, align 4
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec28
  store i32 1, i32* %43, align 4
  %262 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %263 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %262, i32 0, i32 13
  store i32 1, i32* %263, align 4
  br label %264

; <label>:264:                                    ; preds = %257, %252, %249
  br label %46

; <label>:265:                                    ; preds = %46
  %266 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %267 = bitcast %struct.gr_info* %266 to i8*
  %268 = bitcast %struct.gr_info* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %267, i8* %268, i32 112, i32 4, i1 false)
  %269 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %270 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %269, i32 0, i32 15
  %271 = load i32, i32* %270, align 4
  %272 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %273 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %272, i32 0, i32 0
  %274 = load i32, i32* %273, align 4
  %275 = add i32 %274, %271
  store i32 %275, i32* %273, align 4
  %276 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %277 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %276, i32 0, i32 3
  %278 = load i32, i32* %277, align 4
  %279 = icmp ult i32 %278, 256
  br i1 %279, label %281, label %280

; <label>:280:                                    ; preds = %265
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6.217, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 891, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__.outer_loop, i32 0, i32 0))
  br label %281

; <label>:281:                                    ; preds = %280, %265
  %282 = phi i1 [ true, %265 ], [ false, %280 ]
  %283 = zext i1 %282 to i32
  %284 = load i32, i32* %36, align 4
  %285 = sitofp i32 %284 to double
  %286 = load double*, double** %14, align 4
  %287 = getelementptr inbounds double, double* %286, i32 0
  store double %285, double* %287, align 8
  %288 = load double, double* %37, align 8
  %289 = load double*, double** %14, align 4
  %290 = getelementptr inbounds double, double* %289, i32 1
  store double %288, double* %290, align 8
  %291 = load double, double* %38, align 8
  %292 = load double*, double** %14, align 4
  %293 = getelementptr inbounds double, double* %292, i32 2
  store double %291, double* %293, align 8
  %294 = load double, double* %39, align 8
  %295 = load double*, double** %14, align 4
  %296 = getelementptr inbounds double, double* %295, i32 3
  store double %294, double* %296, align 8
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @calc_noise1(double*, i32*, %struct.gr_info*, [21 x double]*, [21 x double]*, %struct.III_psy_xmin*, %struct.III_scalefac_t*, double*, double*, double*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec21 = alloca <2 x double>, align 16
  %Recovery1 = alloca double, align 8
  %allocaVec22 = alloca <2 x double>, align 16
  %Recovery2 = alloca double, align 8
  %allocaVec23 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec24 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec25 = alloca <4 x i32>, align 16
  %Recovery5 = alloca i32, align 4
  %allocaVec26 = alloca <2 x double>, align 16
  %Recovery6 = alloca double, align 8
  %allocaVec27 = alloca <2 x double>, align 16
  %Recovery7 = alloca double, align 8
  %allocaVec28 = alloca <4 x i32>, align 16
  %Recovery8 = alloca i32, align 4
  %allocaVec29 = alloca <4 x i32>, align 16
  %Recovery9 = alloca i32, align 4
  %allocaVec30 = alloca <4 x i32>, align 16
  %Recovery10 = alloca i32, align 4
  %allocaVec31 = alloca <2 x double>, align 16
  %Recovery11 = alloca double, align 8
  %allocaVec32 = alloca <2 x double>, align 16
  %Recovery12 = alloca double, align 8
  %allocaVec33 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec34 = alloca <2 x double>, align 16
  %CastInst13 = alloca double, align 4
  %CastInstVec14 = alloca <2 x double>, align 16
  %allocaVec35 = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %allocaVec36 = alloca <2 x double>, align 16
  %CallInst15 = alloca double, align 4
  %CallInstVec16 = alloca <2 x double>, align 16
  %allocaVec37 = alloca <2 x double>, align 16
  %CallInst17 = alloca double, align 4
  %CallInstVec18 = alloca <2 x double>, align 16
  %allocaVec38 = alloca <2 x double>, align 16
  %CallInst19 = alloca double, align 4
  %CallInstVec20 = alloca <2 x double>, align 16
  %11 = alloca double*, align 4
  %12 = alloca i32*, align 4
  %13 = alloca %struct.gr_info*, align 4
  %14 = alloca [21 x double]*, align 4
  %15 = alloca [21 x double]*, align 4
  %16 = alloca %struct.III_psy_xmin*, align 4
  %17 = alloca %struct.III_scalefac_t*, align 4
  %18 = alloca double*, align 4
  %19 = alloca double*, align 4
  %20 = alloca double*, align 4
  %allocaVec39 = alloca <4 x i32>, align 16
  %21 = alloca i32, align 4
  %allocaVec40 = alloca <4 x i32>, align 16
  %22 = alloca i32, align 4
  %allocaVec41 = alloca <4 x i32>, align 16
  %23 = alloca i32, align 4
  %allocaVec42 = alloca <4 x i32>, align 16
  %24 = alloca i32, align 4
  %allocaVec43 = alloca <4 x i32>, align 16
  %25 = alloca i32, align 4
  %allocaVec44 = alloca <4 x i32>, align 16
  %26 = alloca i32, align 4
  %allocaVec45 = alloca <2 x double>, align 16
  %27 = alloca double, align 8
  %allocaVec46 = alloca <2 x double>, align 16
  %28 = alloca double, align 8
  %allocaVec47 = alloca <2 x double>, align 16
  %29 = alloca double, align 8
  %allocaVec48 = alloca <4 x i32>, align 16
  %30 = alloca i32, align 4
  %allocaVec49 = alloca <2 x double>, align 16
  %31 = alloca double, align 8
  %allocaVec50 = alloca <2 x double>, align 16
  %32 = alloca double, align 8
  %allocaVec51 = alloca <4 x i32>, align 16
  %33 = alloca i32, align 4
  %allocaVec52 = alloca <2 x double>, align 16
  %34 = alloca double, align 8
  %allocaVec53 = alloca <4 x i32>, align 16
  %35 = alloca i32, align 4
  %allocaVec54 = alloca <2 x double>, align 16
  %36 = alloca double, align 8
  store double* %0, double** %11, align 4
  store i32* %1, i32** %12, align 4
  store %struct.gr_info* %2, %struct.gr_info** %13, align 4
  store [21 x double]* %3, [21 x double]** %14, align 4
  store [21 x double]* %4, [21 x double]** %15, align 4
  store %struct.III_psy_xmin* %5, %struct.III_psy_xmin** %16, align 4
  store %struct.III_scalefac_t* %6, %struct.III_scalefac_t** %17, align 4
  store double* %7, double** %18, align 4
  store double* %8, double** %19, align 4
  store double* %9, double** %20, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec43
  store i32 0, i32* %25, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec48
  store i32 0, i32* %30, align 4
  %37 = load double*, double** %18, align 4
  store double 0.000000e+00, double* %37, align 8
  %38 = load double*, double** %19, align 4
  store double 0.000000e+00, double* %38, align 8
  %39 = load double*, double** %20, align 4
  store double -9.990000e+02, double* %39, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec44
  store i32 0, i32* %26, align 4
  br label %40

; <label>:40:                                     ; preds = %207, %10
  %41 = load i32, i32* %26, align 4
  %42 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %43 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %42, i32 0, i32 16
  %44 = load i32, i32* %43, align 4
  %45 = icmp ult i32 %41, %44
  br i1 %45, label %46, label %211

; <label>:46:                                     ; preds = %40
  %47 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %17, align 4
  %48 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %47, i32 0, i32 0
  %49 = load i32, i32* %26, align 4
  %50 = getelementptr inbounds [22 x i32], [22 x i32]* %48, i32 0, i32 %49
  %51 = load i32, i32* %50, align 4
  store i32 %51, i32* %33, align 4
  %52 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %53 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %52, i32 0, i32 12
  %54 = load i32, i32* %53, align 4
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %62

; <label>:56:                                     ; preds = %46
  %57 = load i32, i32* %26, align 4
  %58 = getelementptr inbounds [21 x i32], [21 x i32]* @pretab, i32 0, i32 %57
  %59 = load i32, i32* %58, align 4
  %60 = load i32, i32* %33, align 4
  %61 = add nsw i32 %60, %59
  store i32 %61, i32* %33, align 4
  br label %62

; <label>:62:                                     ; preds = %56, %46
  %63 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %64 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %63, i32 0, i32 3
  %65 = load i32, i32* %64, align 4
  %66 = load i32, i32* %33, align 4
  %67 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %68 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %67, i32 0, i32 13
  %69 = load i32, i32* %68, align 4
  %70 = add i32 %69, 1
  %71 = shl i32 %66, %70
  %72 = sub i32 %65, %71
  store i32 %72, i32* %33, align 4
  %73 = load i32, i32* %33, align 4
  %74 = icmp slt i32 %73, 256
  br i1 %74, label %76, label %75

; <label>:75:                                     ; preds = %62
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7.218, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 945, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.calc_noise1, i32 0, i32 0))
  br label %76

; <label>:76:                                     ; preds = %75, %62
  %77 = phi i1 [ true, %62 ], [ false, %75 ]
  %78 = zext i1 %77 to i32
  %79 = load i32, i32* %33, align 4
  %80 = icmp sge i32 %79, 0
  br i1 %80, label %82, label %81

; <label>:81:                                     ; preds = %76
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.219, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 946, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.calc_noise1, i32 0, i32 0))
  br label %82

; <label>:82:                                     ; preds = %81, %76
  %83 = phi i1 [ true, %76 ], [ false, %81 ]
  %84 = zext i1 %83 to i32
  %85 = load i32, i32* %33, align 4
  %86 = getelementptr inbounds [256 x double], [256 x double]* @pow20, i32 0, i32 %85
  %87 = load double, double* %86, align 8
  store double %87, double* %32, align 8
  %88 = load i32, i32* %26, align 4
  %89 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %88
  %90 = load i32, i32* %89, align 4
  store i32 %90, i32* %21, align 4
  %91 = load i32, i32* %26, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %91, i32 0
  %insertElmt55 = insertelement <4 x i32> %insertElmt, i32 %91, i32 1
  %insertElmt56 = insertelement <4 x i32> %insertElmt55, i32 %91, i32 2
  %insertElmt57 = insertelement <4 x i32> %insertElmt56, i32 %91, i32 3
  store <4 x i32> %insertElmt57, <4 x i32>* %allocaVec44, align 16
  %92 = load <4 x i32>, <4 x i32>* %allocaVec44, align 16
  %Vop = add <4 x i32> %92, <i32 1, i32 1, i32 1, i32 1>
  %93 = add i32 %91, 1
  %94 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %93
  %95 = load i32, i32* %94, align 4
  store i32 %95, i32* %22, align 4
  %96 = load i32, i32* %22, align 4
  %insertElmt58 = insertelement <4 x i32> undef, i32 %96, i32 0
  %insertElmt59 = insertelement <4 x i32> %insertElmt58, i32 %96, i32 1
  %insertElmt60 = insertelement <4 x i32> %insertElmt59, i32 %96, i32 2
  %insertElmt61 = insertelement <4 x i32> %insertElmt60, i32 %96, i32 3
  store <4 x i32> %insertElmt61, <4 x i32>* %allocaVec40, align 16
  %97 = load i32, i32* %21, align 4
  %insertElmt62 = insertelement <4 x i32> undef, i32 %97, i32 0
  %insertElmt63 = insertelement <4 x i32> %insertElmt62, i32 %97, i32 1
  %insertElmt64 = insertelement <4 x i32> %insertElmt63, i32 %97, i32 2
  %insertElmt65 = insertelement <4 x i32> %insertElmt64, i32 %97, i32 3
  store <4 x i32> %insertElmt65, <4 x i32>* %allocaVec39, align 16
  %98 = load <4 x i32>, <4 x i32>* %allocaVec40, align 16
  %99 = load <4 x i32>, <4 x i32>* %allocaVec39, align 16
  %Vop66 = sub <4 x i32> %98, %99
  %100 = sub nsw i32 %96, %97
  %101 = sitofp i32 %100 to double
  store double %101, double* %29, align 8
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec45
  store double 0.000000e+00, double* %27, align 8
  %102 = load i32, i32* %21, align 4
  store i32 %102, i32* %23, align 4
  br label %103

; <label>:103:                                    ; preds = %127, %82
  %104 = load i32, i32* %23, align 4
  %105 = load i32, i32* %22, align 4
  %106 = icmp slt i32 %104, %105
  br i1 %106, label %107, label %131

; <label>:107:                                    ; preds = %103
  %108 = load double*, double** %11, align 4
  %109 = load i32, i32* %23, align 4
  %110 = getelementptr inbounds double, double* %108, i32 %109
  %111 = load double, double* %110, align 8
  %112 = call arm_aapcscc double @fabs(double %111) #9
  %113 = load i32*, i32** %12, align 4
  %114 = load i32, i32* %23, align 4
  %115 = getelementptr inbounds i32, i32* %113, i32 %114
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %116
  %118 = load double, double* %117, align 8
  %119 = load double, double* %32, align 8
  %120 = fmul double %118, %119
  %121 = fsub double %112, %120
  store double %121, double* %34, align 8
  %122 = load double, double* %34, align 8
  %123 = load double, double* %34, align 8
  %124 = fmul double %122, %123
  %125 = load double, double* %27, align 8
  %126 = fadd double %125, %124
  store double %126, double* %27, align 8
  br label %127

; <label>:127:                                    ; preds = %107
  %128 = load i32, i32* %23, align 4
  %insertElmt67 = insertelement <4 x i32> undef, i32 %128, i32 0
  %insertElmt68 = insertelement <4 x i32> %insertElmt67, i32 %128, i32 1
  %insertElmt69 = insertelement <4 x i32> %insertElmt68, i32 %128, i32 2
  %insertElmt70 = insertelement <4 x i32> %insertElmt69, i32 %128, i32 3
  store <4 x i32> %insertElmt70, <4 x i32>* %allocaVec41, align 16
  %129 = load <4 x i32>, <4 x i32>* %allocaVec41, align 16
  %Vop71 = add <4 x i32> %129, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop71, <4 x i32>* %allocaVec41
  %130 = add nsw i32 %128, 1
  store i32 %130, i32* %23, align 4
  br label %103

; <label>:131:                                    ; preds = %103
  %132 = load double, double* %27, align 8
  %insertElmt72 = insertelement <2 x double> undef, double %132, i32 0
  %insertElmt73 = insertelement <2 x double> %insertElmt72, double %132, i32 1
  store <2 x double> %insertElmt73, <2 x double>* %allocaVec45, align 16
  %133 = load double, double* %29, align 8
  %insertElmt74 = insertelement <2 x double> undef, double %133, i32 0
  %insertElmt75 = insertelement <2 x double> %insertElmt74, double %133, i32 1
  store <2 x double> %insertElmt75, <2 x double>* %allocaVec47, align 16
  %134 = load <2 x double>, <2 x double>* %allocaVec45, align 16
  %135 = load <2 x double>, <2 x double>* %allocaVec47, align 16
  %Vop76 = fdiv <2 x double> %134, %135
  %136 = fdiv double %132, %133
  %137 = load [21 x double]*, [21 x double]** %14, align 4
  %138 = getelementptr inbounds [21 x double], [21 x double]* %137, i32 0
  %139 = load i32, i32* %26, align 4
  %140 = getelementptr inbounds [21 x double], [21 x double]* %138, i32 0, i32 %139
  store double %136, double* %140, align 8
  %141 = load [21 x double]*, [21 x double]** %14, align 4
  %142 = getelementptr inbounds [21 x double], [21 x double]* %141, i32 0
  %143 = load i32, i32* %26, align 4
  %144 = getelementptr inbounds [21 x double], [21 x double]* %142, i32 0, i32 %143
  %145 = load double, double* %144, align 8
  %146 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %16, align 4
  %147 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %146, i32 0, i32 0
  %148 = load i32, i32* %26, align 4
  %149 = getelementptr inbounds [22 x double], [22 x double]* %147, i32 0, i32 %148
  %150 = load double, double* %149, align 8
  %151 = fdiv double %145, %150
  %152 = fcmp ogt double 1.000000e-03, %151
  br i1 %152, label %153, label %154

; <label>:153:                                    ; preds = %131
  br label %166

; <label>:154:                                    ; preds = %131
  %155 = load [21 x double]*, [21 x double]** %14, align 4
  %156 = getelementptr inbounds [21 x double], [21 x double]* %155, i32 0
  %157 = load i32, i32* %26, align 4
  %158 = getelementptr inbounds [21 x double], [21 x double]* %156, i32 0, i32 %157
  %159 = load double, double* %158, align 8
  %160 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %16, align 4
  %161 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %160, i32 0, i32 0
  %162 = load i32, i32* %26, align 4
  %163 = getelementptr inbounds [22 x double], [22 x double]* %161, i32 0, i32 %162
  %164 = load double, double* %163, align 8
  %165 = fdiv double %159, %164
  br label %166

; <label>:166:                                    ; preds = %154, %153
  %167 = phi double [ 1.000000e-03, %153 ], [ %165, %154 ]
  %168 = call arm_aapcscc double @log10(double %167) #7
  store double %168, double* %CallInst15
  %169 = load double, double* %CallInst15, align 4
  %insertCall = insertelement <2 x double> undef, double %169, i32 0
  %insertCall77 = insertelement <2 x double> %insertCall, double %169, i32 1
  store <2 x double> %insertCall77, <2 x double>* %CallInstVec16, align 4
  %170 = load <2 x double>, <2 x double>* %CallInstVec16, align 4
  %Vop78 = fmul <2 x double> <double 1.000000e+01, double 1.000000e+01>, %170
  store <2 x double> %Vop78, <2 x double>* %allocaVec49
  %171 = fmul double 1.000000e+01, %168
  store double %171, double* %31, align 8
  %172 = load double, double* %31, align 8
  %173 = load [21 x double]*, [21 x double]** %15, align 4
  %174 = getelementptr inbounds [21 x double], [21 x double]* %173, i32 0
  %175 = load i32, i32* %26, align 4
  %176 = getelementptr inbounds [21 x double], [21 x double]* %174, i32 0, i32 %175
  store double %172, double* %176, align 8
  %177 = load double, double* %31, align 8
  %178 = fcmp ogt double %177, 0.000000e+00
  br i1 %178, label %179, label %187

; <label>:179:                                    ; preds = %166
  %180 = load i32, i32* %25, align 4
  %insertElmt79 = insertelement <4 x i32> undef, i32 %180, i32 0
  %insertElmt80 = insertelement <4 x i32> %insertElmt79, i32 %180, i32 1
  %insertElmt81 = insertelement <4 x i32> %insertElmt80, i32 %180, i32 2
  %insertElmt82 = insertelement <4 x i32> %insertElmt81, i32 %180, i32 3
  store <4 x i32> %insertElmt82, <4 x i32>* %allocaVec43, align 16
  %181 = load <4 x i32>, <4 x i32>* %allocaVec43, align 16
  %Vop83 = add <4 x i32> %181, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop83, <4 x i32>* %allocaVec43
  %182 = add nsw i32 %180, 1
  store i32 %182, i32* %25, align 4
  %183 = load double, double* %31, align 8
  %184 = load double*, double** %18, align 4
  %185 = load double, double* %184, align 8
  %186 = fadd double %185, %183
  store double %186, double* %184, align 8
  br label %187

; <label>:187:                                    ; preds = %179, %166
  %188 = load double, double* %31, align 8
  %189 = load double*, double** %19, align 4
  %190 = load double, double* %189, align 8
  %191 = fadd double %190, %188
  store double %191, double* %189, align 8
  %192 = load double*, double** %20, align 4
  %193 = load double, double* %192, align 8
  %194 = load double, double* %31, align 8
  %195 = fcmp ogt double %193, %194
  br i1 %195, label %196, label %199

; <label>:196:                                    ; preds = %187
  %197 = load double*, double** %20, align 4
  %198 = load double, double* %197, align 8
  br label %201

; <label>:199:                                    ; preds = %187
  %200 = load double, double* %31, align 8
  br label %201

; <label>:201:                                    ; preds = %199, %196
  %202 = phi double [ %198, %196 ], [ %200, %199 ]
  %203 = load double*, double** %20, align 4
  store double %202, double* %203, align 8
  %204 = load i32, i32* %30, align 4
  %insertElmt84 = insertelement <4 x i32> undef, i32 %204, i32 0
  %insertElmt85 = insertelement <4 x i32> %insertElmt84, i32 %204, i32 1
  %insertElmt86 = insertelement <4 x i32> %insertElmt85, i32 %204, i32 2
  %insertElmt87 = insertelement <4 x i32> %insertElmt86, i32 %204, i32 3
  store <4 x i32> %insertElmt87, <4 x i32>* %allocaVec48, align 16
  %205 = load <4 x i32>, <4 x i32>* %allocaVec48, align 16
  %Vop88 = add <4 x i32> %205, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop88, <4 x i32>* %allocaVec48
  %206 = add nsw i32 %204, 1
  store i32 %206, i32* %30, align 4
  br label %207

; <label>:207:                                    ; preds = %201
  %208 = load i32, i32* %26, align 4
  %insertElmt89 = insertelement <4 x i32> undef, i32 %208, i32 0
  %insertElmt90 = insertelement <4 x i32> %insertElmt89, i32 %208, i32 1
  %insertElmt91 = insertelement <4 x i32> %insertElmt90, i32 %208, i32 2
  %insertElmt92 = insertelement <4 x i32> %insertElmt91, i32 %208, i32 3
  store <4 x i32> %insertElmt92, <4 x i32>* %allocaVec44, align 16
  %209 = load <4 x i32>, <4 x i32>* %allocaVec44, align 16
  %Vop93 = add <4 x i32> %209, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop93, <4 x i32>* %allocaVec44
  %210 = add i32 %208, 1
  store i32 %210, i32* %26, align 4
  br label %40

; <label>:211:                                    ; preds = %40
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec42
  store i32 0, i32* %24, align 4
  br label %212

; <label>:212:                                    ; preds = %445, %211
  %213 = load i32, i32* %24, align 4
  %214 = icmp slt i32 %213, 3
  br i1 %214, label %215, label %446

; <label>:215:                                    ; preds = %212
  %216 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %217 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %216, i32 0, i32 17
  %218 = load i32, i32* %217, align 4
  store i32 %218, i32* %26, align 4
  br label %219

; <label>:219:                                    ; preds = %434, %215
  %220 = load i32, i32* %26, align 4
  %221 = icmp ult i32 %220, 12
  br i1 %221, label %222, label %435

; <label>:222:                                    ; preds = %219
  %223 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %17, align 4
  %224 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %223, i32 0, i32 1
  %225 = load i32, i32* %26, align 4
  %226 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %224, i32 0, i32 %225
  %227 = load i32, i32* %24, align 4
  %228 = getelementptr inbounds [3 x i32], [3 x i32]* %226, i32 0, i32 %227
  %229 = load i32, i32* %228, align 4
  %230 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %231 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %230, i32 0, i32 13
  %232 = load i32, i32* %231, align 4
  %233 = add i32 %232, 1
  %234 = shl i32 %229, %233
  %235 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %236 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %235, i32 0, i32 9
  %237 = load i32, i32* %24, align 4
  %238 = getelementptr inbounds [3 x i32], [3 x i32]* %236, i32 0, i32 %237
  %239 = load i32, i32* %238, align 4
  %240 = mul nsw i32 %239, 8
  %241 = add nsw i32 %234, %240
  store i32 %241, i32* %35, align 4
  %242 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %243 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %242, i32 0, i32 3
  %244 = load i32, i32* %243, align 4
  %245 = load i32, i32* %35, align 4
  %246 = sub i32 %244, %245
  store i32 %246, i32* %35, align 4
  %247 = load i32, i32* %35, align 4
  %248 = icmp slt i32 %247, 256
  br i1 %248, label %250, label %249

; <label>:249:                                    ; preds = %222
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7.218, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 1000, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.calc_noise1, i32 0, i32 0))
  br label %250

; <label>:250:                                    ; preds = %249, %222
  %251 = phi i1 [ true, %222 ], [ false, %249 ]
  %252 = zext i1 %251 to i32
  %253 = load i32, i32* %35, align 4
  %254 = icmp sge i32 %253, 0
  br i1 %254, label %256, label %255

; <label>:255:                                    ; preds = %250
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.219, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 1001, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.calc_noise1, i32 0, i32 0))
  br label %256

; <label>:256:                                    ; preds = %255, %250
  %257 = phi i1 [ true, %250 ], [ false, %255 ]
  %258 = zext i1 %257 to i32
  %259 = load i32, i32* %35, align 4
  %260 = getelementptr inbounds [256 x double], [256 x double]* @pow20, i32 0, i32 %259
  %261 = load double, double* %260, align 8
  store double %261, double* %28, align 8
  %262 = load i32, i32* %26, align 4
  %263 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %262
  %264 = load i32, i32* %263, align 4
  store i32 %264, i32* %21, align 4
  %265 = load i32, i32* %26, align 4
  %266 = load <4 x i32>, <4 x i32>* %allocaVec44, align 16
  %Vop94 = add <4 x i32> %266, <i32 1, i32 1, i32 1, i32 1>
  %267 = add i32 %265, 1
  %268 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %267
  %269 = load i32, i32* %268, align 4
  store i32 %269, i32* %22, align 4
  %270 = load i32, i32* %22, align 4
  %insertElmt95 = insertelement <4 x i32> undef, i32 %270, i32 0
  %insertElmt96 = insertelement <4 x i32> %insertElmt95, i32 %270, i32 1
  %insertElmt97 = insertelement <4 x i32> %insertElmt96, i32 %270, i32 2
  %insertElmt98 = insertelement <4 x i32> %insertElmt97, i32 %270, i32 3
  store <4 x i32> %insertElmt98, <4 x i32>* %allocaVec40, align 16
  %271 = load i32, i32* %21, align 4
  %insertElmt99 = insertelement <4 x i32> undef, i32 %271, i32 0
  %insertElmt100 = insertelement <4 x i32> %insertElmt99, i32 %271, i32 1
  %insertElmt101 = insertelement <4 x i32> %insertElmt100, i32 %271, i32 2
  %insertElmt102 = insertelement <4 x i32> %insertElmt101, i32 %271, i32 3
  store <4 x i32> %insertElmt102, <4 x i32>* %allocaVec39, align 16
  %272 = load <4 x i32>, <4 x i32>* %allocaVec40, align 16
  %273 = load <4 x i32>, <4 x i32>* %allocaVec39, align 16
  %Vop103 = sub <4 x i32> %272, %273
  %274 = sub nsw i32 %270, %271
  %275 = sitofp i32 %274 to double
  store double %275, double* %29, align 8
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec45
  store double 0.000000e+00, double* %27, align 8
  %276 = load i32, i32* %21, align 4
  store i32 %276, i32* %23, align 4
  br label %277

; <label>:277:                                    ; preds = %320, %256
  %278 = load i32, i32* %23, align 4
  %279 = load i32, i32* %22, align 4
  %280 = icmp slt i32 %278, %279
  br i1 %280, label %281, label %321

; <label>:281:                                    ; preds = %277
  %282 = load double*, double** %11, align 4
  %283 = load i32, i32* %23, align 4
  %284 = load <4 x i32>, <4 x i32>* %allocaVec41, align 16
  %Vop104 = mul <4 x i32> %284, <i32 3, i32 3, i32 3, i32 3>
  %285 = mul nsw i32 %283, 3
  %286 = load i32, i32* %24, align 4
  %insertElmt105 = insertelement <4 x i32> undef, i32 %286, i32 0
  %insertElmt106 = insertelement <4 x i32> %insertElmt105, i32 %286, i32 1
  %insertElmt107 = insertelement <4 x i32> %insertElmt106, i32 %286, i32 2
  %insertElmt108 = insertelement <4 x i32> %insertElmt107, i32 %286, i32 3
  store <4 x i32> %insertElmt108, <4 x i32>* %allocaVec42, align 16
  %287 = load <4 x i32>, <4 x i32>* %allocaVec42, align 16
  %Vop109 = add <4 x i32> %Vop104, %287
  %288 = add nsw i32 %285, %286
  %289 = getelementptr inbounds double, double* %282, i32 %288
  %290 = load double, double* %289, align 8
  %291 = call arm_aapcscc double @fabs(double %290) #9
  %292 = load i32*, i32** %12, align 4
  %293 = load i32, i32* %23, align 4
  %294 = load <4 x i32>, <4 x i32>* %allocaVec41, align 16
  %Vop110 = mul <4 x i32> %294, <i32 3, i32 3, i32 3, i32 3>
  %295 = mul nsw i32 %293, 3
  %296 = load i32, i32* %24, align 4
  %insertElmt111 = insertelement <4 x i32> undef, i32 %296, i32 0
  %insertElmt112 = insertelement <4 x i32> %insertElmt111, i32 %296, i32 1
  %insertElmt113 = insertelement <4 x i32> %insertElmt112, i32 %296, i32 2
  %insertElmt114 = insertelement <4 x i32> %insertElmt113, i32 %296, i32 3
  store <4 x i32> %insertElmt114, <4 x i32>* %allocaVec42, align 16
  %297 = load <4 x i32>, <4 x i32>* %allocaVec42, align 16
  %Vop115 = add <4 x i32> %Vop110, %297
  %298 = add nsw i32 %295, %296
  %299 = getelementptr inbounds i32, i32* %292, i32 %298
  %300 = load i32, i32* %299, align 4
  %301 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %300
  %302 = load double, double* %301, align 8
  %303 = load double, double* %28, align 8
  %304 = fmul double %302, %303
  %305 = fsub double %291, %304
  store double %305, double* %36, align 8
  %306 = load double, double* %36, align 8
  %307 = load double, double* %36, align 8
  %308 = fmul double %306, %307
  %309 = load double, double* %27, align 8
  %310 = fadd double %309, %308
  store double %310, double* %27, align 8
  br label %311

; <label>:311:                                    ; preds = %281
  %312 = load i32, i32* %23, align 4
  %313 = load <4 x i32>, <4 x i32>* %allocaVec41, align 16
  %Vop116 = add <4 x i32> %313, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop116, <4 x i32>* %allocaVec41
  %314 = load <4 x i32>, <4 x i32>* %allocaVec41, align 4
  %extractE = extractelement <4 x i32> %314, i64 0
  %extractE117 = extractelement <4 x i32> %314, i64 1
  %extractE118 = extractelement <4 x i32> %314, i64 2
  %sum = add i32 %extractE, %extractE117
  %sum119 = add i32 %sum, %extractE118
  %315 = add nsw i32 %312, 1
  %Fmul = mul i32 %315, 3
  store i32 %315, i32* %Recovery4
  %Fcmp = icmp ne i32 %sum119, %Fmul
  br i1 %Fcmp, label %316, label %320

; <label>:316:                                    ; preds = %311
  %remThree = sdiv i32 %sum119, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %317, label %318

; <label>:317:                                    ; preds = %316
  store i32 %315, i32* %Recovery4, align 4
  br label %319

; <label>:318:                                    ; preds = %316
  store i32 %extractE, i32* %Recovery4, align 4
  br label %319

; <label>:319:                                    ; preds = %318, %317
  br label %320

; <label>:320:                                    ; preds = %311, %319
  %ReplaceInst = load i32, i32* %Recovery4, align 4
  store i32 %ReplaceInst, i32* %23, align 4
  br label %277

; <label>:321:                                    ; preds = %277
  %322 = load double, double* %27, align 8
  %insertElmt120 = insertelement <2 x double> undef, double %322, i32 0
  %insertElmt121 = insertelement <2 x double> %insertElmt120, double %322, i32 1
  store <2 x double> %insertElmt121, <2 x double>* %allocaVec45, align 16
  %323 = load double, double* %29, align 8
  %insertElmt122 = insertelement <2 x double> undef, double %323, i32 0
  %insertElmt123 = insertelement <2 x double> %insertElmt122, double %323, i32 1
  store <2 x double> %insertElmt123, <2 x double>* %allocaVec47, align 16
  %324 = load <2 x double>, <2 x double>* %allocaVec45, align 16
  %325 = load <2 x double>, <2 x double>* %allocaVec47, align 16
  %Vop124 = fdiv <2 x double> %324, %325
  %326 = fdiv double %322, %323
  %327 = load [21 x double]*, [21 x double]** %14, align 4
  %328 = load i32, i32* %24, align 4
  %insertElmt125 = insertelement <4 x i32> undef, i32 %328, i32 0
  %insertElmt126 = insertelement <4 x i32> %insertElmt125, i32 %328, i32 1
  %insertElmt127 = insertelement <4 x i32> %insertElmt126, i32 %328, i32 2
  %insertElmt128 = insertelement <4 x i32> %insertElmt127, i32 %328, i32 3
  store <4 x i32> %insertElmt128, <4 x i32>* %allocaVec42, align 16
  %329 = load <4 x i32>, <4 x i32>* %allocaVec42, align 16
  %Vop129 = add <4 x i32> %329, <i32 1, i32 1, i32 1, i32 1>
  %330 = add nsw i32 %328, 1
  %331 = getelementptr inbounds [21 x double], [21 x double]* %327, i32 %330
  %332 = load i32, i32* %26, align 4
  %333 = getelementptr inbounds [21 x double], [21 x double]* %331, i32 0, i32 %332
  store double %326, double* %333, align 8
  %334 = load [21 x double]*, [21 x double]** %14, align 4
  %335 = load i32, i32* %24, align 4
  %insertElmt130 = insertelement <4 x i32> undef, i32 %335, i32 0
  %insertElmt131 = insertelement <4 x i32> %insertElmt130, i32 %335, i32 1
  %insertElmt132 = insertelement <4 x i32> %insertElmt131, i32 %335, i32 2
  %insertElmt133 = insertelement <4 x i32> %insertElmt132, i32 %335, i32 3
  store <4 x i32> %insertElmt133, <4 x i32>* %allocaVec42, align 16
  %336 = load <4 x i32>, <4 x i32>* %allocaVec42, align 16
  %Vop134 = add <4 x i32> %336, <i32 1, i32 1, i32 1, i32 1>
  %337 = add nsw i32 %335, 1
  %338 = getelementptr inbounds [21 x double], [21 x double]* %334, i32 %337
  %339 = load i32, i32* %26, align 4
  %340 = getelementptr inbounds [21 x double], [21 x double]* %338, i32 0, i32 %339
  %341 = load double, double* %340, align 8
  %342 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %16, align 4
  %343 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %342, i32 0, i32 1
  %344 = load i32, i32* %26, align 4
  %345 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %343, i32 0, i32 %344
  %346 = load i32, i32* %24, align 4
  %347 = getelementptr inbounds [3 x double], [3 x double]* %345, i32 0, i32 %346
  %348 = load double, double* %347, align 8
  %349 = fdiv double %341, %348
  %350 = fcmp ogt double 1.000000e-03, %349
  br i1 %350, label %351, label %352

; <label>:351:                                    ; preds = %321
  br label %369

; <label>:352:                                    ; preds = %321
  %353 = load [21 x double]*, [21 x double]** %14, align 4
  %354 = load i32, i32* %24, align 4
  %insertElmt135 = insertelement <4 x i32> undef, i32 %354, i32 0
  %insertElmt136 = insertelement <4 x i32> %insertElmt135, i32 %354, i32 1
  %insertElmt137 = insertelement <4 x i32> %insertElmt136, i32 %354, i32 2
  %insertElmt138 = insertelement <4 x i32> %insertElmt137, i32 %354, i32 3
  store <4 x i32> %insertElmt138, <4 x i32>* %allocaVec42, align 16
  %355 = load <4 x i32>, <4 x i32>* %allocaVec42, align 16
  %Vop139 = add <4 x i32> %355, <i32 1, i32 1, i32 1, i32 1>
  %356 = add nsw i32 %354, 1
  %357 = getelementptr inbounds [21 x double], [21 x double]* %353, i32 %356
  %358 = load i32, i32* %26, align 4
  %359 = getelementptr inbounds [21 x double], [21 x double]* %357, i32 0, i32 %358
  %360 = load double, double* %359, align 8
  %361 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %16, align 4
  %362 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %361, i32 0, i32 1
  %363 = load i32, i32* %26, align 4
  %364 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %362, i32 0, i32 %363
  %365 = load i32, i32* %24, align 4
  %366 = getelementptr inbounds [3 x double], [3 x double]* %364, i32 0, i32 %365
  %367 = load double, double* %366, align 8
  %368 = fdiv double %360, %367
  br label %369

; <label>:369:                                    ; preds = %352, %351
  %370 = phi double [ 1.000000e-03, %351 ], [ %368, %352 ]
  %371 = call arm_aapcscc double @log10(double %370) #7
  store double %371, double* %CallInst19
  %372 = load double, double* %CallInst19, align 4
  %insertCall140 = insertelement <2 x double> undef, double %372, i32 0
  %insertCall141 = insertelement <2 x double> %insertCall140, double %372, i32 1
  store <2 x double> %insertCall141, <2 x double>* %CallInstVec20, align 4
  %373 = load <2 x double>, <2 x double>* %CallInstVec20, align 4
  %Vop142 = fmul <2 x double> <double 1.000000e+01, double 1.000000e+01>, %373
  store <2 x double> %Vop142, <2 x double>* %allocaVec49
  %374 = fmul double 1.000000e+01, %371
  store double %374, double* %31, align 8
  %375 = load double, double* %31, align 8
  %376 = load [21 x double]*, [21 x double]** %15, align 4
  %377 = load i32, i32* %24, align 4
  %insertElmt143 = insertelement <4 x i32> undef, i32 %377, i32 0
  %insertElmt144 = insertelement <4 x i32> %insertElmt143, i32 %377, i32 1
  %insertElmt145 = insertelement <4 x i32> %insertElmt144, i32 %377, i32 2
  %insertElmt146 = insertelement <4 x i32> %insertElmt145, i32 %377, i32 3
  store <4 x i32> %insertElmt146, <4 x i32>* %allocaVec42, align 16
  %378 = load <4 x i32>, <4 x i32>* %allocaVec42, align 16
  %Vop147 = add <4 x i32> %378, <i32 1, i32 1, i32 1, i32 1>
  %379 = add nsw i32 %377, 1
  %380 = getelementptr inbounds [21 x double], [21 x double]* %376, i32 %379
  %381 = load i32, i32* %26, align 4
  %382 = getelementptr inbounds [21 x double], [21 x double]* %380, i32 0, i32 %381
  store double %375, double* %382, align 8
  %383 = load double, double* %31, align 8
  %384 = fcmp ogt double %383, 0.000000e+00
  br i1 %384, label %385, label %399

; <label>:385:                                    ; preds = %369
  %386 = load i32, i32* %25, align 4
  %387 = load <4 x i32>, <4 x i32>* %allocaVec43, align 16
  %Vop148 = add <4 x i32> %387, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop148, <4 x i32>* %allocaVec43
  %388 = load <4 x i32>, <4 x i32>* %allocaVec43, align 4
  %extractE150 = extractelement <4 x i32> %388, i64 0
  %extractE151 = extractelement <4 x i32> %388, i64 1
  %extractE152 = extractelement <4 x i32> %388, i64 2
  %sum153 = add i32 %extractE150, %extractE151
  %sum154 = add i32 %sum153, %extractE152
  %389 = add nsw i32 %386, 1
  %Fmul149 = mul i32 %389, 3
  store i32 %389, i32* %Recovery5
  %Fcmp155 = icmp ne i32 %sum154, %Fmul149
  br i1 %Fcmp155, label %390, label %394

; <label>:390:                                    ; preds = %385
  %remThree184 = sdiv i32 %sum154, %extractE150
  %FcmpThree185 = icmp ne i32 %remThree184, 3
  br i1 %FcmpThree185, label %391, label %392

; <label>:391:                                    ; preds = %390
  store i32 %389, i32* %Recovery5, align 4
  br label %393

; <label>:392:                                    ; preds = %390
  store i32 %extractE150, i32* %Recovery5, align 4
  br label %393

; <label>:393:                                    ; preds = %392, %391
  br label %394

; <label>:394:                                    ; preds = %385, %393
  %ReplaceInst192 = load i32, i32* %Recovery5, align 4
  store i32 %ReplaceInst192, i32* %25, align 4
  %395 = load double, double* %31, align 8
  %396 = load double*, double** %18, align 4
  %397 = load double, double* %396, align 8
  %398 = fadd double %397, %395
  store double %398, double* %396, align 8
  br label %399

; <label>:399:                                    ; preds = %394, %369
  %400 = load double, double* %31, align 8
  %401 = load double*, double** %19, align 4
  %402 = load double, double* %401, align 8
  %403 = fadd double %402, %400
  store double %403, double* %401, align 8
  %404 = load double*, double** %20, align 4
  %405 = load double, double* %404, align 8
  %406 = load double, double* %31, align 8
  %407 = fcmp ogt double %405, %406
  br i1 %407, label %408, label %411

; <label>:408:                                    ; preds = %399
  %409 = load double*, double** %20, align 4
  %410 = load double, double* %409, align 8
  br label %413

; <label>:411:                                    ; preds = %399
  %412 = load double, double* %31, align 8
  br label %413

; <label>:413:                                    ; preds = %411, %408
  %414 = phi double [ %410, %408 ], [ %412, %411 ]
  %415 = load double*, double** %20, align 4
  store double %414, double* %415, align 8
  %416 = load i32, i32* %30, align 4
  %417 = load <4 x i32>, <4 x i32>* %allocaVec48, align 16
  %Vop156 = add <4 x i32> %417, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop156, <4 x i32>* %allocaVec48
  %418 = load <4 x i32>, <4 x i32>* %allocaVec48, align 4
  %extractE158 = extractelement <4 x i32> %418, i64 0
  %extractE159 = extractelement <4 x i32> %418, i64 1
  %extractE160 = extractelement <4 x i32> %418, i64 2
  %sum161 = add i32 %extractE158, %extractE159
  %sum162 = add i32 %sum161, %extractE160
  %419 = add nsw i32 %416, 1
  %Fmul157 = mul i32 %419, 3
  store i32 %419, i32* %Recovery8
  %Fcmp163 = icmp ne i32 %sum162, %Fmul157
  br i1 %Fcmp163, label %420, label %424

; <label>:420:                                    ; preds = %413
  %remThree186 = sdiv i32 %sum162, %extractE158
  %FcmpThree187 = icmp ne i32 %remThree186, 3
  br i1 %FcmpThree187, label %421, label %422

; <label>:421:                                    ; preds = %420
  store i32 %419, i32* %Recovery8, align 4
  br label %423

; <label>:422:                                    ; preds = %420
  store i32 %extractE158, i32* %Recovery8, align 4
  br label %423

; <label>:423:                                    ; preds = %422, %421
  br label %424

; <label>:424:                                    ; preds = %413, %423
  %ReplaceInst193 = load i32, i32* %Recovery8, align 4
  store i32 %ReplaceInst193, i32* %30, align 4
  br label %425

; <label>:425:                                    ; preds = %424
  %426 = load i32, i32* %26, align 4
  %427 = load <4 x i32>, <4 x i32>* %allocaVec44, align 16
  %Vop164 = add <4 x i32> %427, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop164, <4 x i32>* %allocaVec44
  %428 = load <4 x i32>, <4 x i32>* %allocaVec44, align 4
  %extractE166 = extractelement <4 x i32> %428, i64 0
  %extractE167 = extractelement <4 x i32> %428, i64 1
  %extractE168 = extractelement <4 x i32> %428, i64 2
  %sum169 = add i32 %extractE166, %extractE167
  %sum170 = add i32 %sum169, %extractE168
  %429 = add i32 %426, 1
  %Fmul165 = mul i32 %429, 3
  store i32 %429, i32* %Recovery9
  %Fcmp171 = icmp ne i32 %sum170, %Fmul165
  br i1 %Fcmp171, label %430, label %434

; <label>:430:                                    ; preds = %425
  %remThree188 = sdiv i32 %sum170, %extractE166
  %FcmpThree189 = icmp ne i32 %remThree188, 3
  br i1 %FcmpThree189, label %431, label %432

; <label>:431:                                    ; preds = %430
  store i32 %429, i32* %Recovery9, align 4
  br label %433

; <label>:432:                                    ; preds = %430
  store i32 %extractE166, i32* %Recovery9, align 4
  br label %433

; <label>:433:                                    ; preds = %432, %431
  br label %434

; <label>:434:                                    ; preds = %425, %433
  %ReplaceInst194 = load i32, i32* %Recovery9, align 4
  store i32 %ReplaceInst194, i32* %26, align 4
  br label %219

; <label>:435:                                    ; preds = %219
  br label %436

; <label>:436:                                    ; preds = %435
  %437 = load i32, i32* %24, align 4
  %insertElmt172 = insertelement <4 x i32> undef, i32 %437, i32 0
  %insertElmt173 = insertelement <4 x i32> %insertElmt172, i32 %437, i32 1
  %insertElmt174 = insertelement <4 x i32> %insertElmt173, i32 %437, i32 2
  %insertElmt175 = insertelement <4 x i32> %insertElmt174, i32 %437, i32 3
  store <4 x i32> %insertElmt175, <4 x i32>* %allocaVec42, align 16
  %438 = load <4 x i32>, <4 x i32>* %allocaVec42, align 16
  %Vop176 = add <4 x i32> %438, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop176, <4 x i32>* %allocaVec42
  %439 = load <4 x i32>, <4 x i32>* %allocaVec42, align 4
  %extractE178 = extractelement <4 x i32> %439, i64 0
  %extractE179 = extractelement <4 x i32> %439, i64 1
  %extractE180 = extractelement <4 x i32> %439, i64 2
  %sum181 = add i32 %extractE178, %extractE179
  %sum182 = add i32 %sum181, %extractE180
  %440 = add nsw i32 %437, 1
  %Fmul177 = mul i32 %440, 3
  store i32 %440, i32* %Recovery10
  %Fcmp183 = icmp ne i32 %sum182, %Fmul177
  br i1 %Fcmp183, label %441, label %445

; <label>:441:                                    ; preds = %436
  %remThree190 = sdiv i32 %sum182, %extractE178
  %FcmpThree191 = icmp ne i32 %remThree190, 3
  br i1 %FcmpThree191, label %442, label %443

; <label>:442:                                    ; preds = %441
  store i32 %440, i32* %Recovery10, align 4
  br label %444

; <label>:443:                                    ; preds = %441
  store i32 %extractE178, i32* %Recovery10, align 4
  br label %444

; <label>:444:                                    ; preds = %443, %442
  br label %445

; <label>:445:                                    ; preds = %436, %444
  %ReplaceInst195 = load i32, i32* %Recovery10, align 4
  store i32 %ReplaceInst195, i32* %24, align 4
  br label %212

; <label>:446:                                    ; preds = %212
  %447 = load i32, i32* %30, align 4
  %448 = icmp sgt i32 %447, 1
  br i1 %448, label %449, label %455

; <label>:449:                                    ; preds = %446
  %450 = load i32, i32* %30, align 4
  %451 = sitofp i32 %450 to double
  %452 = load double*, double** %19, align 4
  %453 = load double, double* %452, align 8
  %454 = fdiv double %453, %451
  store double %454, double* %452, align 8
  br label %455

; <label>:455:                                    ; preds = %449, %446
  %456 = load i32, i32* %25, align 4
  %457 = icmp sgt i32 %456, 1
  br i1 %457, label %458, label %464

; <label>:458:                                    ; preds = %455
  %459 = load i32, i32* %25, align 4
  %460 = sitofp i32 %459 to double
  %461 = load double*, double** %18, align 4
  %462 = load double, double* %461, align 8
  %463 = fdiv double %462, %460
  store double %463, double* %461, align 8
  br label %464

; <label>:464:                                    ; preds = %458, %455
  %465 = load i32, i32* %25, align 4
  ret i32 %465
}

; Function Attrs: nounwind
define arm_aapcscc i32 @quant_compare(i32, i32, double, double, double, i32, double, double, double) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec2 = alloca <2 x double>, align 16
  %12 = alloca double, align 8
  %allocaVec3 = alloca <2 x double>, align 16
  %13 = alloca double, align 8
  %allocaVec4 = alloca <2 x double>, align 16
  %14 = alloca double, align 8
  %allocaVec5 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %allocaVec6 = alloca <2 x double>, align 16
  %16 = alloca double, align 8
  %allocaVec7 = alloca <2 x double>, align 16
  %17 = alloca double, align 8
  %allocaVec8 = alloca <2 x double>, align 16
  %18 = alloca double, align 8
  %allocaVec9 = alloca <4 x i32>, align 16
  %19 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  store i32 %1, i32* %11, align 4
  store double %2, double* %12, align 8
  store double %3, double* %13, align 8
  store double %4, double* %14, align 8
  store i32 %5, i32* %15, align 4
  store double %6, double* %16, align 8
  store double %7, double* %17, align 8
  store double %8, double* %18, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec9
  store i32 0, i32* %19, align 4
  %20 = load i32, i32* %10, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %39

; <label>:22:                                     ; preds = %9
  %23 = load i32, i32* %15, align 4
  %24 = load i32, i32* %11, align 4
  %25 = icmp slt i32 %23, %24
  br i1 %25, label %36, label %26

; <label>:26:                                     ; preds = %22
  %27 = load i32, i32* %15, align 4
  %28 = load i32, i32* %11, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %34

; <label>:30:                                     ; preds = %26
  %31 = load double, double* %17, align 8
  %32 = load double, double* %13, align 8
  %33 = fcmp ole double %31, %32
  br label %34

; <label>:34:                                     ; preds = %30, %26
  %35 = phi i1 [ false, %26 ], [ %33, %30 ]
  br label %36

; <label>:36:                                     ; preds = %34, %22
  %37 = phi i1 [ true, %22 ], [ %35, %34 ]
  %38 = zext i1 %37 to i32
  store i32 %38, i32* %19, align 4
  br label %39

; <label>:39:                                     ; preds = %36, %9
  %40 = load i32, i32* %10, align 4
  %41 = icmp eq i32 %40, 1
  br i1 %41, label %42, label %47

; <label>:42:                                     ; preds = %39
  %43 = load double, double* %18, align 8
  %44 = load double, double* %14, align 8
  %45 = fcmp olt double %43, %44
  %46 = zext i1 %45 to i32
  store i32 %46, i32* %19, align 4
  br label %47

; <label>:47:                                     ; preds = %42, %39
  %48 = load i32, i32* %10, align 4
  %49 = icmp eq i32 %48, 2
  br i1 %49, label %50, label %55

; <label>:50:                                     ; preds = %47
  %51 = load double, double* %16, align 8
  %52 = load double, double* %12, align 8
  %53 = fcmp olt double %51, %52
  %54 = zext i1 %53 to i32
  store i32 %54, i32* %19, align 4
  br label %55

; <label>:55:                                     ; preds = %50, %47
  %56 = load i32, i32* %10, align 4
  %57 = icmp eq i32 %56, 3
  br i1 %57, label %58, label %71

; <label>:58:                                     ; preds = %55
  %59 = load double, double* %16, align 8
  %60 = load double, double* %12, align 8
  %61 = fcmp olt double %59, %60
  br i1 %61, label %62, label %68

; <label>:62:                                     ; preds = %58
  %63 = load double, double* %18, align 8
  %64 = load double, double* %14, align 8
  %insertElmt = insertelement <2 x double> undef, double %64, i32 0
  %insertElmt10 = insertelement <2 x double> %insertElmt, double %64, i32 1
  store <2 x double> %insertElmt10, <2 x double>* %allocaVec4, align 16
  %65 = load <2 x double>, <2 x double>* %allocaVec4, align 16
  %Vop = fadd <2 x double> %65, <double 2.000000e+00, double 2.000000e+00>
  %66 = fadd double %64, 2.000000e+00
  %67 = fcmp olt double %63, %66
  br label %68

; <label>:68:                                     ; preds = %62, %58
  %69 = phi i1 [ false, %58 ], [ %67, %62 ]
  %70 = zext i1 %69 to i32
  store i32 %70, i32* %19, align 4
  br label %71

; <label>:71:                                     ; preds = %68, %55
  %72 = load i32, i32* %10, align 4
  %73 = icmp eq i32 %72, 4
  br i1 %73, label %74, label %175

; <label>:74:                                     ; preds = %71
  %75 = load double, double* %18, align 8
  %76 = fcmp oge double 0.000000e+00, %75
  br i1 %76, label %77, label %80

; <label>:77:                                     ; preds = %74
  %78 = load double, double* %14, align 8
  %79 = fcmp ogt double %78, 2.000000e+00
  br i1 %79, label %172, label %80

; <label>:80:                                     ; preds = %77, %74
  %81 = load double, double* %18, align 8
  %82 = fcmp oge double 0.000000e+00, %81
  br i1 %82, label %83, label %96

; <label>:83:                                     ; preds = %80
  %84 = load double, double* %14, align 8
  %85 = fcmp olt double %84, 0.000000e+00
  br i1 %85, label %86, label %96

; <label>:86:                                     ; preds = %83
  %87 = load double, double* %14, align 8
  %insertElmt11 = insertelement <2 x double> undef, double %87, i32 0
  %insertElmt12 = insertelement <2 x double> %insertElmt11, double %87, i32 1
  store <2 x double> %insertElmt12, <2 x double>* %allocaVec4, align 16
  %88 = load <2 x double>, <2 x double>* %allocaVec4, align 16
  %Vop13 = fadd <2 x double> %88, <double 2.000000e+00, double 2.000000e+00>
  %89 = fadd double %87, 2.000000e+00
  %90 = load double, double* %18, align 8
  %91 = fcmp ogt double %89, %90
  br i1 %91, label %92, label %96

; <label>:92:                                     ; preds = %86
  %93 = load double, double* %16, align 8
  %94 = load double, double* %12, align 8
  %95 = fcmp olt double %93, %94
  br i1 %95, label %172, label %96

; <label>:96:                                     ; preds = %92, %86, %83, %80
  %97 = load double, double* %18, align 8
  %98 = fcmp oge double 0.000000e+00, %97
  br i1 %98, label %99, label %116

; <label>:99:                                     ; preds = %96
  %100 = load double, double* %14, align 8
  %101 = fcmp ogt double %100, 0.000000e+00
  br i1 %101, label %102, label %116

; <label>:102:                                    ; preds = %99
  %103 = load double, double* %14, align 8
  %insertElmt14 = insertelement <2 x double> undef, double %103, i32 0
  %insertElmt15 = insertelement <2 x double> %insertElmt14, double %103, i32 1
  store <2 x double> %insertElmt15, <2 x double>* %allocaVec4, align 16
  %104 = load <2 x double>, <2 x double>* %allocaVec4, align 16
  %Vop16 = fadd <2 x double> %104, <double 2.000000e+00, double 2.000000e+00>
  %105 = fadd double %103, 2.000000e+00
  %106 = load double, double* %18, align 8
  %107 = fcmp ogt double %105, %106
  br i1 %107, label %108, label %116

; <label>:108:                                    ; preds = %102
  %109 = load double, double* %16, align 8
  %110 = load double, double* %12, align 8
  %insertElmt17 = insertelement <2 x double> undef, double %110, i32 0
  %insertElmt18 = insertelement <2 x double> %insertElmt17, double %110, i32 1
  store <2 x double> %insertElmt18, <2 x double>* %allocaVec2, align 16
  %111 = load double, double* %13, align 8
  %insertElmt19 = insertelement <2 x double> undef, double %111, i32 0
  %insertElmt20 = insertelement <2 x double> %insertElmt19, double %111, i32 1
  store <2 x double> %insertElmt20, <2 x double>* %allocaVec3, align 16
  %112 = load <2 x double>, <2 x double>* %allocaVec2, align 16
  %113 = load <2 x double>, <2 x double>* %allocaVec3, align 16
  %Vop21 = fadd <2 x double> %112, %113
  %114 = fadd double %110, %111
  %115 = fcmp olt double %109, %114
  br i1 %115, label %172, label %116

; <label>:116:                                    ; preds = %108, %102, %99, %96
  %117 = load double, double* %18, align 8
  %118 = fcmp olt double 0.000000e+00, %117
  br i1 %118, label %119, label %140

; <label>:119:                                    ; preds = %116
  %120 = load double, double* %14, align 8
  %121 = fcmp ogt double %120, -5.000000e-01
  br i1 %121, label %122, label %140

; <label>:122:                                    ; preds = %119
  %123 = load double, double* %14, align 8
  %insertElmt22 = insertelement <2 x double> undef, double %123, i32 0
  %insertElmt23 = insertelement <2 x double> %insertElmt22, double %123, i32 1
  store <2 x double> %insertElmt23, <2 x double>* %allocaVec4, align 16
  %124 = load <2 x double>, <2 x double>* %allocaVec4, align 16
  %Vop24 = fadd <2 x double> %124, <double 1.000000e+00, double 1.000000e+00>
  %125 = fadd double %123, 1.000000e+00
  %126 = load double, double* %18, align 8
  %127 = fcmp ogt double %125, %126
  br i1 %127, label %128, label %140

; <label>:128:                                    ; preds = %122
  %129 = load double, double* %16, align 8
  %insertElmt25 = insertelement <2 x double> undef, double %129, i32 0
  %insertElmt26 = insertelement <2 x double> %insertElmt25, double %129, i32 1
  store <2 x double> %insertElmt26, <2 x double>* %allocaVec6, align 16
  %130 = load double, double* %17, align 8
  %insertElmt27 = insertelement <2 x double> undef, double %130, i32 0
  %insertElmt28 = insertelement <2 x double> %insertElmt27, double %130, i32 1
  store <2 x double> %insertElmt28, <2 x double>* %allocaVec7, align 16
  %131 = load <2 x double>, <2 x double>* %allocaVec6, align 16
  %132 = load <2 x double>, <2 x double>* %allocaVec7, align 16
  %Vop29 = fadd <2 x double> %131, %132
  %133 = fadd double %129, %130
  %134 = load double, double* %12, align 8
  %insertElmt30 = insertelement <2 x double> undef, double %134, i32 0
  %insertElmt31 = insertelement <2 x double> %insertElmt30, double %134, i32 1
  store <2 x double> %insertElmt31, <2 x double>* %allocaVec2, align 16
  %135 = load double, double* %13, align 8
  %insertElmt32 = insertelement <2 x double> undef, double %135, i32 0
  %insertElmt33 = insertelement <2 x double> %insertElmt32, double %135, i32 1
  store <2 x double> %insertElmt33, <2 x double>* %allocaVec3, align 16
  %136 = load <2 x double>, <2 x double>* %allocaVec2, align 16
  %137 = load <2 x double>, <2 x double>* %allocaVec3, align 16
  %Vop34 = fadd <2 x double> %136, %137
  %138 = fadd double %134, %135
  %139 = fcmp olt double %133, %138
  br i1 %139, label %172, label %140

; <label>:140:                                    ; preds = %128, %122, %119, %116
  %141 = load double, double* %18, align 8
  %142 = fcmp olt double 0.000000e+00, %141
  br i1 %142, label %143, label %170

; <label>:143:                                    ; preds = %140
  %144 = load double, double* %14, align 8
  %145 = fcmp ogt double %144, -1.000000e+00
  br i1 %145, label %146, label %170

; <label>:146:                                    ; preds = %143
  %147 = load double, double* %14, align 8
  %insertElmt35 = insertelement <2 x double> undef, double %147, i32 0
  %insertElmt36 = insertelement <2 x double> %insertElmt35, double %147, i32 1
  store <2 x double> %insertElmt36, <2 x double>* %allocaVec4, align 16
  %148 = load <2 x double>, <2 x double>* %allocaVec4, align 16
  %Vop37 = fadd <2 x double> %148, <double 1.500000e+00, double 1.500000e+00>
  %149 = fadd double %147, 1.500000e+00
  %150 = load double, double* %18, align 8
  %151 = fcmp ogt double %149, %150
  br i1 %151, label %152, label %170

; <label>:152:                                    ; preds = %146
  %153 = load double, double* %16, align 8
  %insertElmt38 = insertelement <2 x double> undef, double %153, i32 0
  %insertElmt39 = insertelement <2 x double> %insertElmt38, double %153, i32 1
  store <2 x double> %insertElmt39, <2 x double>* %allocaVec6, align 16
  %154 = load double, double* %17, align 8
  %insertElmt40 = insertelement <2 x double> undef, double %154, i32 0
  %insertElmt41 = insertelement <2 x double> %insertElmt40, double %154, i32 1
  store <2 x double> %insertElmt41, <2 x double>* %allocaVec7, align 16
  %155 = load <2 x double>, <2 x double>* %allocaVec6, align 16
  %156 = load <2 x double>, <2 x double>* %allocaVec7, align 16
  %Vop42 = fadd <2 x double> %155, %156
  %157 = fadd double %153, %154
  %158 = load double, double* %17, align 8
  %insertElmt43 = insertelement <2 x double> undef, double %158, i32 0
  %insertElmt44 = insertelement <2 x double> %insertElmt43, double %158, i32 1
  store <2 x double> %insertElmt44, <2 x double>* %allocaVec7, align 16
  %159 = load <2 x double>, <2 x double>* %allocaVec7, align 16
  %Vop45 = fadd <2 x double> %Vop42, %159
  %160 = fadd double %157, %158
  %161 = load double, double* %12, align 8
  %insertElmt46 = insertelement <2 x double> undef, double %161, i32 0
  %insertElmt47 = insertelement <2 x double> %insertElmt46, double %161, i32 1
  store <2 x double> %insertElmt47, <2 x double>* %allocaVec2, align 16
  %162 = load double, double* %13, align 8
  %insertElmt48 = insertelement <2 x double> undef, double %162, i32 0
  %insertElmt49 = insertelement <2 x double> %insertElmt48, double %162, i32 1
  store <2 x double> %insertElmt49, <2 x double>* %allocaVec3, align 16
  %163 = load <2 x double>, <2 x double>* %allocaVec2, align 16
  %164 = load <2 x double>, <2 x double>* %allocaVec3, align 16
  %Vop50 = fadd <2 x double> %163, %164
  %165 = fadd double %161, %162
  %166 = load double, double* %13, align 8
  %insertElmt51 = insertelement <2 x double> undef, double %166, i32 0
  %insertElmt52 = insertelement <2 x double> %insertElmt51, double %166, i32 1
  store <2 x double> %insertElmt52, <2 x double>* %allocaVec3, align 16
  %167 = load <2 x double>, <2 x double>* %allocaVec3, align 16
  %Vop53 = fadd <2 x double> %Vop50, %167
  %168 = fadd double %165, %166
  %169 = fcmp olt double %160, %168
  br label %170

; <label>:170:                                    ; preds = %152, %146, %143, %140
  %171 = phi i1 [ false, %146 ], [ false, %143 ], [ false, %140 ], [ %169, %152 ]
  br label %172

; <label>:172:                                    ; preds = %170, %128, %108, %92, %77
  %173 = phi i1 [ true, %128 ], [ true, %108 ], [ true, %92 ], [ true, %77 ], [ %171, %170 ]
  %174 = zext i1 %173 to i32
  store i32 %174, i32* %19, align 4
  br label %175

; <label>:175:                                    ; preds = %172, %71
  %176 = load i32, i32* %10, align 4
  %177 = icmp eq i32 %176, 5
  br i1 %177, label %178, label %195

; <label>:178:                                    ; preds = %175
  %179 = load double, double* %17, align 8
  %180 = load double, double* %13, align 8
  %181 = fcmp olt double %179, %180
  br i1 %181, label %192, label %182

; <label>:182:                                    ; preds = %178
  %183 = load double, double* %17, align 8
  %184 = load double, double* %13, align 8
  %185 = fcmp oeq double %183, %184
  br i1 %185, label %186, label %190

; <label>:186:                                    ; preds = %182
  %187 = load double, double* %16, align 8
  %188 = load double, double* %12, align 8
  %189 = fcmp olt double %187, %188
  br label %190

; <label>:190:                                    ; preds = %186, %182
  %191 = phi i1 [ false, %182 ], [ %189, %186 ]
  br label %192

; <label>:192:                                    ; preds = %190, %178
  %193 = phi i1 [ true, %178 ], [ %191, %190 ]
  %194 = zext i1 %193 to i32
  store i32 %194, i32* %19, align 4
  br label %195

; <label>:195:                                    ; preds = %192, %175
  %196 = load i32, i32* %10, align 4
  %197 = icmp eq i32 %196, 6
  br i1 %197, label %198, label %227

; <label>:198:                                    ; preds = %195
  %199 = load double, double* %17, align 8
  %200 = load double, double* %13, align 8
  %201 = fcmp olt double %199, %200
  br i1 %201, label %224, label %202

; <label>:202:                                    ; preds = %198
  %203 = load double, double* %17, align 8
  %204 = load double, double* %13, align 8
  %205 = fcmp oeq double %203, %204
  br i1 %205, label %206, label %222

; <label>:206:                                    ; preds = %202
  %207 = load double, double* %18, align 8
  %208 = load double, double* %14, align 8
  %209 = fcmp olt double %207, %208
  br i1 %209, label %220, label %210

; <label>:210:                                    ; preds = %206
  %211 = load double, double* %18, align 8
  %212 = load double, double* %14, align 8
  %213 = fcmp oeq double %211, %212
  br i1 %213, label %214, label %218

; <label>:214:                                    ; preds = %210
  %215 = load double, double* %16, align 8
  %216 = load double, double* %12, align 8
  %217 = fcmp ole double %215, %216
  br label %218

; <label>:218:                                    ; preds = %214, %210
  %219 = phi i1 [ false, %210 ], [ %217, %214 ]
  br label %220

; <label>:220:                                    ; preds = %218, %206
  %221 = phi i1 [ true, %206 ], [ %219, %218 ]
  br label %222

; <label>:222:                                    ; preds = %220, %202
  %223 = phi i1 [ false, %202 ], [ %221, %220 ]
  br label %224

; <label>:224:                                    ; preds = %222, %198
  %225 = phi i1 [ true, %198 ], [ %223, %222 ]
  %226 = zext i1 %225 to i32
  store i32 %226, i32* %19, align 4
  br label %227

; <label>:227:                                    ; preds = %224, %195
  %228 = load i32, i32* %19, align 4
  ret i32 %228
}

; Function Attrs: nounwind
define arm_aapcscc void @amp_scalefac_bands(double*, %struct.gr_info*, %struct.III_scalefac_t*, [21 x double]*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec7 = alloca <2 x double>, align 16
  %Recovery1 = alloca double, align 8
  %allocaVec8 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec9 = alloca <2 x double>, align 16
  %Recovery3 = alloca double, align 8
  %allocaVec10 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %Recovery5 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %Recovery6 = alloca i32, align 4
  %5 = alloca double*, align 4
  %6 = alloca %struct.gr_info*, align 4
  %7 = alloca %struct.III_scalefac_t*, align 4
  %8 = alloca [21 x double]*, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec14 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %allocaVec18 = alloca <2 x double>, align 16
  %14 = alloca double, align 8
  %allocaVec19 = alloca <2 x double>, align 16
  %15 = alloca double, align 8
  store double* %0, double** %5, align 4
  store %struct.gr_info* %1, %struct.gr_info** %6, align 4
  store %struct.III_scalefac_t* %2, %struct.III_scalefac_t** %7, align 4
  store [21 x double]* %3, [21 x double]** %8, align 4
  %16 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %17 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %16, i32 0, i32 13
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %4
  store <2 x double> <double 0x3FF4BFDAD5362A27, double 0x3FF4BFDAD5362A27>, <2 x double>* %allocaVec18
  store double 0x3FF4BFDAD5362A27, double* %14, align 8
  br label %22

; <label>:21:                                     ; preds = %4
  store <2 x double> <double 0x3FFAE89F995AD3AE, double 0x3FFAE89F995AD3AE>, <2 x double>* %allocaVec18
  store double 0x3FFAE89F995AD3AE, double* %14, align 8
  br label %22

; <label>:22:                                     ; preds = %21, %20
  store <2 x double> <double -9.000000e+02, double -9.000000e+02>, <2 x double>* %allocaVec19
  store double -9.000000e+02, double* %15, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec17
  store i32 0, i32* %13, align 4
  br label %23

; <label>:23:                                     ; preds = %47, %22
  %24 = load i32, i32* %13, align 4
  %25 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %26 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %25, i32 0, i32 16
  %27 = load i32, i32* %26, align 4
  %28 = icmp ult i32 %24, %27
  br i1 %28, label %29, label %51

; <label>:29:                                     ; preds = %23
  %30 = load [21 x double]*, [21 x double]** %8, align 4
  %31 = getelementptr inbounds [21 x double], [21 x double]* %30, i32 0
  %32 = load i32, i32* %13, align 4
  %33 = getelementptr inbounds [21 x double], [21 x double]* %31, i32 0, i32 %32
  %34 = load double, double* %33, align 8
  %35 = load double, double* %15, align 8
  %36 = fcmp ogt double %34, %35
  br i1 %36, label %37, label %43

; <label>:37:                                     ; preds = %29
  %38 = load [21 x double]*, [21 x double]** %8, align 4
  %39 = getelementptr inbounds [21 x double], [21 x double]* %38, i32 0
  %40 = load i32, i32* %13, align 4
  %41 = getelementptr inbounds [21 x double], [21 x double]* %39, i32 0, i32 %40
  %42 = load double, double* %41, align 8
  br label %45

; <label>:43:                                     ; preds = %29
  %44 = load double, double* %15, align 8
  br label %45

; <label>:45:                                     ; preds = %43, %37
  %46 = phi double [ %42, %37 ], [ %44, %43 ]
  store double %46, double* %15, align 8
  br label %47

; <label>:47:                                     ; preds = %45
  %48 = load i32, i32* %13, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %48, i32 0
  %insertElmt20 = insertelement <4 x i32> %insertElmt, i32 %48, i32 1
  %insertElmt21 = insertelement <4 x i32> %insertElmt20, i32 %48, i32 2
  %insertElmt22 = insertelement <4 x i32> %insertElmt21, i32 %48, i32 3
  store <4 x i32> %insertElmt22, <4 x i32>* %allocaVec17, align 16
  %49 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop = add <4 x i32> %49, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec17
  %50 = add i32 %48, 1
  store i32 %50, i32* %13, align 4
  br label %23

; <label>:51:                                     ; preds = %23
  %52 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %53 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %52, i32 0, i32 17
  %54 = load i32, i32* %53, align 4
  store i32 %54, i32* %13, align 4
  br label %55

; <label>:55:                                     ; preds = %91, %51
  %56 = load i32, i32* %13, align 4
  %57 = icmp ult i32 %56, 12
  br i1 %57, label %58, label %95

; <label>:58:                                     ; preds = %55
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %12, align 4
  br label %59

; <label>:59:                                     ; preds = %86, %58
  %60 = load i32, i32* %12, align 4
  %61 = icmp slt i32 %60, 3
  br i1 %61, label %62, label %90

; <label>:62:                                     ; preds = %59
  %63 = load [21 x double]*, [21 x double]** %8, align 4
  %64 = load i32, i32* %12, align 4
  %insertElmt23 = insertelement <4 x i32> undef, i32 %64, i32 0
  %insertElmt24 = insertelement <4 x i32> %insertElmt23, i32 %64, i32 1
  %insertElmt25 = insertelement <4 x i32> %insertElmt24, i32 %64, i32 2
  %insertElmt26 = insertelement <4 x i32> %insertElmt25, i32 %64, i32 3
  store <4 x i32> %insertElmt26, <4 x i32>* %allocaVec16, align 16
  %65 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop27 = add <4 x i32> %65, <i32 1, i32 1, i32 1, i32 1>
  %66 = add nsw i32 %64, 1
  %67 = getelementptr inbounds [21 x double], [21 x double]* %63, i32 %66
  %68 = load i32, i32* %13, align 4
  %69 = getelementptr inbounds [21 x double], [21 x double]* %67, i32 0, i32 %68
  %70 = load double, double* %69, align 8
  %71 = load double, double* %15, align 8
  %72 = fcmp ogt double %70, %71
  br i1 %72, label %73, label %82

; <label>:73:                                     ; preds = %62
  %74 = load [21 x double]*, [21 x double]** %8, align 4
  %75 = load i32, i32* %12, align 4
  %insertElmt28 = insertelement <4 x i32> undef, i32 %75, i32 0
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %75, i32 1
  %insertElmt30 = insertelement <4 x i32> %insertElmt29, i32 %75, i32 2
  %insertElmt31 = insertelement <4 x i32> %insertElmt30, i32 %75, i32 3
  store <4 x i32> %insertElmt31, <4 x i32>* %allocaVec16, align 16
  %76 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop32 = add <4 x i32> %76, <i32 1, i32 1, i32 1, i32 1>
  %77 = add nsw i32 %75, 1
  %78 = getelementptr inbounds [21 x double], [21 x double]* %74, i32 %77
  %79 = load i32, i32* %13, align 4
  %80 = getelementptr inbounds [21 x double], [21 x double]* %78, i32 0, i32 %79
  %81 = load double, double* %80, align 8
  br label %84

; <label>:82:                                     ; preds = %62
  %83 = load double, double* %15, align 8
  br label %84

; <label>:84:                                     ; preds = %82, %73
  %85 = phi double [ %81, %73 ], [ %83, %82 ]
  store double %85, double* %15, align 8
  br label %86

; <label>:86:                                     ; preds = %84
  %87 = load i32, i32* %12, align 4
  %insertElmt33 = insertelement <4 x i32> undef, i32 %87, i32 0
  %insertElmt34 = insertelement <4 x i32> %insertElmt33, i32 %87, i32 1
  %insertElmt35 = insertelement <4 x i32> %insertElmt34, i32 %87, i32 2
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %87, i32 3
  store <4 x i32> %insertElmt36, <4 x i32>* %allocaVec16, align 16
  %88 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop37 = add <4 x i32> %88, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop37, <4 x i32>* %allocaVec16
  %89 = add nsw i32 %87, 1
  store i32 %89, i32* %12, align 4
  br label %59

; <label>:90:                                     ; preds = %59
  br label %91

; <label>:91:                                     ; preds = %90
  %92 = load i32, i32* %13, align 4
  %93 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop38 = add <4 x i32> %93, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop38, <4 x i32>* %allocaVec17
  %94 = add i32 %92, 1
  store i32 %94, i32* %13, align 4
  br label %55

; <label>:95:                                     ; preds = %55
  %96 = load double, double* %15, align 8
  %insertElmt39 = insertelement <2 x double> undef, double %96, i32 0
  %insertElmt40 = insertelement <2 x double> %insertElmt39, double %96, i32 1
  store <2 x double> %insertElmt40, <2 x double>* %allocaVec19, align 16
  %97 = load <2 x double>, <2 x double>* %allocaVec19, align 16
  %Vop41 = fmul <2 x double> %97, <double 1.050000e+00, double 1.050000e+00>
  %98 = fmul double %96, 1.050000e+00
  %99 = fcmp olt double %98, 0.000000e+00
  br i1 %99, label %100, label %104

; <label>:100:                                    ; preds = %95
  %101 = load double, double* %15, align 8
  %insertElmt42 = insertelement <2 x double> undef, double %101, i32 0
  %insertElmt43 = insertelement <2 x double> %insertElmt42, double %101, i32 1
  store <2 x double> %insertElmt43, <2 x double>* %allocaVec19, align 16
  %102 = load <2 x double>, <2 x double>* %allocaVec19, align 16
  %Vop44 = fmul <2 x double> %102, <double 1.050000e+00, double 1.050000e+00>
  %103 = fmul double %101, 1.050000e+00
  br label %105

; <label>:104:                                    ; preds = %95
  br label %105

; <label>:105:                                    ; preds = %104, %100
  %106 = phi double [ %103, %100 ], [ 0.000000e+00, %104 ]
  store double %106, double* %15, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec17
  store i32 0, i32* %13, align 4
  br label %107

; <label>:107:                                    ; preds = %153, %105
  %108 = load i32, i32* %13, align 4
  %109 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %110 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %109, i32 0, i32 16
  %111 = load i32, i32* %110, align 4
  %112 = icmp ult i32 %108, %111
  br i1 %112, label %113, label %157

; <label>:113:                                    ; preds = %107
  %114 = load [21 x double]*, [21 x double]** %8, align 4
  %115 = getelementptr inbounds [21 x double], [21 x double]* %114, i32 0
  %116 = load i32, i32* %13, align 4
  %117 = getelementptr inbounds [21 x double], [21 x double]* %115, i32 0, i32 %116
  %118 = load double, double* %117, align 8
  %119 = load double, double* %15, align 8
  %120 = fcmp ogt double %118, %119
  br i1 %120, label %121, label %152

; <label>:121:                                    ; preds = %113
  %122 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %7, align 4
  %123 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %122, i32 0, i32 0
  %124 = load i32, i32* %13, align 4
  %125 = getelementptr inbounds [22 x i32], [22 x i32]* %123, i32 0, i32 %124
  %126 = load i32, i32* %125, align 4
  %127 = add nsw i32 %126, 1
  store i32 %127, i32* %125, align 4
  %128 = load i32, i32* %13, align 4
  %129 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %128
  %130 = load i32, i32* %129, align 4
  store i32 %130, i32* %9, align 4
  %131 = load i32, i32* %13, align 4
  %132 = add i32 %131, 1
  %133 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %132
  %134 = load i32, i32* %133, align 4
  store i32 %134, i32* %10, align 4
  %135 = load i32, i32* %9, align 4
  store i32 %135, i32* %11, align 4
  br label %136

; <label>:136:                                    ; preds = %147, %121
  %137 = load i32, i32* %11, align 4
  %138 = load i32, i32* %10, align 4
  %139 = icmp slt i32 %137, %138
  br i1 %139, label %140, label %151

; <label>:140:                                    ; preds = %136
  %141 = load double, double* %14, align 8
  %insertElmt45 = insertelement <2 x double> undef, double %141, i32 0
  %insertElmt46 = insertelement <2 x double> %insertElmt45, double %141, i32 1
  store <2 x double> %insertElmt46, <2 x double>* %allocaVec18, align 16
  %142 = load double*, double** %5, align 4
  %143 = load i32, i32* %11, align 4
  %144 = getelementptr inbounds double, double* %142, i32 %143
  %145 = load double, double* %144, align 8
  %146 = fmul double %145, %141
  store double %146, double* %144, align 8
  br label %147

; <label>:147:                                    ; preds = %140
  %148 = load i32, i32* %11, align 4
  %insertElmt47 = insertelement <4 x i32> undef, i32 %148, i32 0
  %insertElmt48 = insertelement <4 x i32> %insertElmt47, i32 %148, i32 1
  %insertElmt49 = insertelement <4 x i32> %insertElmt48, i32 %148, i32 2
  %insertElmt50 = insertelement <4 x i32> %insertElmt49, i32 %148, i32 3
  store <4 x i32> %insertElmt50, <4 x i32>* %allocaVec15, align 16
  %149 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop51 = add <4 x i32> %149, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop51, <4 x i32>* %allocaVec15
  %150 = add nsw i32 %148, 1
  store i32 %150, i32* %11, align 4
  br label %136

; <label>:151:                                    ; preds = %136
  br label %152

; <label>:152:                                    ; preds = %151, %113
  br label %153

; <label>:153:                                    ; preds = %152
  %154 = load i32, i32* %13, align 4
  %155 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop52 = add <4 x i32> %155, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop52, <4 x i32>* %allocaVec17
  %156 = add i32 %154, 1
  store i32 %156, i32* %13, align 4
  br label %107

; <label>:157:                                    ; preds = %107
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %12, align 4
  br label %158

; <label>:158:                                    ; preds = %244, %157
  %159 = load i32, i32* %12, align 4
  %160 = icmp slt i32 %159, 3
  br i1 %160, label %161, label %245

; <label>:161:                                    ; preds = %158
  %162 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %163 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %162, i32 0, i32 17
  %164 = load i32, i32* %163, align 4
  store i32 %164, i32* %13, align 4
  br label %165

; <label>:165:                                    ; preds = %233, %161
  %166 = load i32, i32* %13, align 4
  %167 = icmp ult i32 %166, 12
  br i1 %167, label %168, label %234

; <label>:168:                                    ; preds = %165
  %169 = load [21 x double]*, [21 x double]** %8, align 4
  %170 = load i32, i32* %12, align 4
  %171 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop53 = add <4 x i32> %171, <i32 1, i32 1, i32 1, i32 1>
  %172 = add nsw i32 %170, 1
  %173 = getelementptr inbounds [21 x double], [21 x double]* %169, i32 %172
  %174 = load i32, i32* %13, align 4
  %175 = getelementptr inbounds [21 x double], [21 x double]* %173, i32 0, i32 %174
  %176 = load double, double* %175, align 8
  %177 = load double, double* %15, align 8
  %178 = fcmp ogt double %176, %177
  br i1 %178, label %179, label %223

; <label>:179:                                    ; preds = %168
  %180 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %7, align 4
  %181 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %180, i32 0, i32 1
  %182 = load i32, i32* %13, align 4
  %183 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %181, i32 0, i32 %182
  %184 = load i32, i32* %12, align 4
  %185 = getelementptr inbounds [3 x i32], [3 x i32]* %183, i32 0, i32 %184
  %186 = load i32, i32* %185, align 4
  %187 = add nsw i32 %186, 1
  store i32 %187, i32* %185, align 4
  %188 = load i32, i32* %13, align 4
  %189 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %188
  %190 = load i32, i32* %189, align 4
  store i32 %190, i32* %9, align 4
  %191 = load i32, i32* %13, align 4
  %192 = add i32 %191, 1
  %193 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %192
  %194 = load i32, i32* %193, align 4
  store i32 %194, i32* %10, align 4
  %195 = load i32, i32* %9, align 4
  store i32 %195, i32* %11, align 4
  br label %196

; <label>:196:                                    ; preds = %221, %179
  %197 = load i32, i32* %11, align 4
  %198 = load i32, i32* %10, align 4
  %199 = icmp slt i32 %197, %198
  br i1 %199, label %200, label %222

; <label>:200:                                    ; preds = %196
  %201 = load double, double* %14, align 8
  %insertElmt54 = insertelement <2 x double> undef, double %201, i32 0
  %insertElmt55 = insertelement <2 x double> %insertElmt54, double %201, i32 1
  store <2 x double> %insertElmt55, <2 x double>* %allocaVec18, align 16
  %202 = load double*, double** %5, align 4
  %203 = load i32, i32* %11, align 4
  %204 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop56 = mul <4 x i32> %204, <i32 3, i32 3, i32 3, i32 3>
  %205 = mul nsw i32 %203, 3
  %206 = load i32, i32* %12, align 4
  %207 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop57 = add <4 x i32> %Vop56, %207
  %208 = add nsw i32 %205, %206
  %209 = getelementptr inbounds double, double* %202, i32 %208
  %210 = load double, double* %209, align 8
  %211 = fmul double %210, %201
  store double %211, double* %209, align 8
  br label %212

; <label>:212:                                    ; preds = %200
  %213 = load i32, i32* %11, align 4
  %214 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop58 = add <4 x i32> %214, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop58, <4 x i32>* %allocaVec15
  %215 = load <4 x i32>, <4 x i32>* %allocaVec15, align 4
  %extractE = extractelement <4 x i32> %215, i64 0
  %extractE59 = extractelement <4 x i32> %215, i64 1
  %extractE60 = extractelement <4 x i32> %215, i64 2
  %sum = add i32 %extractE, %extractE59
  %sum61 = add i32 %sum, %extractE60
  %216 = add nsw i32 %213, 1
  %Fmul = mul i32 %216, 3
  store i32 %216, i32* %Recovery4
  %Fcmp = icmp ne i32 %sum61, %Fmul
  br i1 %Fcmp, label %217, label %221

; <label>:217:                                    ; preds = %212
  %remThree = sdiv i32 %sum61, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %218, label %219

; <label>:218:                                    ; preds = %217
  store i32 %216, i32* %Recovery4, align 4
  br label %220

; <label>:219:                                    ; preds = %217
  store i32 %extractE, i32* %Recovery4, align 4
  br label %220

; <label>:220:                                    ; preds = %219, %218
  br label %221

; <label>:221:                                    ; preds = %212, %220
  %ReplaceInst = load i32, i32* %Recovery4, align 4
  store i32 %ReplaceInst, i32* %11, align 4
  br label %196

; <label>:222:                                    ; preds = %196
  br label %223

; <label>:223:                                    ; preds = %222, %168
  br label %224

; <label>:224:                                    ; preds = %223
  %225 = load i32, i32* %13, align 4
  %226 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop62 = add <4 x i32> %226, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop62, <4 x i32>* %allocaVec17
  %227 = load <4 x i32>, <4 x i32>* %allocaVec17, align 4
  %extractE64 = extractelement <4 x i32> %227, i64 0
  %extractE65 = extractelement <4 x i32> %227, i64 1
  %extractE66 = extractelement <4 x i32> %227, i64 2
  %sum67 = add i32 %extractE64, %extractE65
  %sum68 = add i32 %sum67, %extractE66
  %228 = add i32 %225, 1
  %Fmul63 = mul i32 %228, 3
  store i32 %228, i32* %Recovery5
  %Fcmp69 = icmp ne i32 %sum68, %Fmul63
  br i1 %Fcmp69, label %229, label %233

; <label>:229:                                    ; preds = %224
  %remThree78 = sdiv i32 %sum68, %extractE64
  %FcmpThree79 = icmp ne i32 %remThree78, 3
  br i1 %FcmpThree79, label %230, label %231

; <label>:230:                                    ; preds = %229
  store i32 %228, i32* %Recovery5, align 4
  br label %232

; <label>:231:                                    ; preds = %229
  store i32 %extractE64, i32* %Recovery5, align 4
  br label %232

; <label>:232:                                    ; preds = %231, %230
  br label %233

; <label>:233:                                    ; preds = %224, %232
  %ReplaceInst82 = load i32, i32* %Recovery5, align 4
  store i32 %ReplaceInst82, i32* %13, align 4
  br label %165

; <label>:234:                                    ; preds = %165
  br label %235

; <label>:235:                                    ; preds = %234
  %236 = load i32, i32* %12, align 4
  %237 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop70 = add <4 x i32> %237, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop70, <4 x i32>* %allocaVec16
  %238 = load <4 x i32>, <4 x i32>* %allocaVec16, align 4
  %extractE72 = extractelement <4 x i32> %238, i64 0
  %extractE73 = extractelement <4 x i32> %238, i64 1
  %extractE74 = extractelement <4 x i32> %238, i64 2
  %sum75 = add i32 %extractE72, %extractE73
  %sum76 = add i32 %sum75, %extractE74
  %239 = add nsw i32 %236, 1
  %Fmul71 = mul i32 %239, 3
  store i32 %239, i32* %Recovery6
  %Fcmp77 = icmp ne i32 %sum76, %Fmul71
  br i1 %Fcmp77, label %240, label %244

; <label>:240:                                    ; preds = %235
  %remThree80 = sdiv i32 %sum76, %extractE72
  %FcmpThree81 = icmp ne i32 %remThree80, 3
  br i1 %FcmpThree81, label %241, label %242

; <label>:241:                                    ; preds = %240
  store i32 %239, i32* %Recovery6, align 4
  br label %243

; <label>:242:                                    ; preds = %240
  store i32 %extractE72, i32* %Recovery6, align 4
  br label %243

; <label>:243:                                    ; preds = %242, %241
  br label %244

; <label>:244:                                    ; preds = %235, %243
  %ReplaceInst83 = load i32, i32* %Recovery6, align 4
  store i32 %ReplaceInst83, i32* %12, align 4
  br label %158

; <label>:245:                                    ; preds = %158
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @set_masking_lower(i32, i32) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec1 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %allocaVec3 = alloca <4 x float>, align 16
  %5 = alloca float, align 4
  %allocaVec4 = alloca <4 x float>, align 16
  %6 = alloca float, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %7 = load i32, i32* %3, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %7, i32 0
  %insertElmt5 = insertelement <4 x i32> %insertElmt, i32 %7, i32 1
  %insertElmt6 = insertelement <4 x i32> %insertElmt5, i32 %7, i32 2
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %7, i32 3
  store <4 x i32> %insertElmt7, <4 x i32>* %allocaVec1, align 16
  %8 = load <4 x i32>, <4 x i32>* %allocaVec1, align 16
  %Vop = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %8
  %9 = mul nsw i32 2, %7
  %Vop8 = add <4 x i32> <i32 -6, i32 -6, i32 -6, i32 -6>, %Vop
  %10 = add nsw i32 -6, %9
  %11 = sitofp i32 %10 to float
  store float %11, float* %5, align 4
  %12 = load i32, i32* %4, align 4
  %insertElmt9 = insertelement <4 x i32> undef, i32 %12, i32 0
  %insertElmt10 = insertelement <4 x i32> %insertElmt9, i32 %12, i32 1
  %insertElmt11 = insertelement <4 x i32> %insertElmt10, i32 %12, i32 2
  %insertElmt12 = insertelement <4 x i32> %insertElmt11, i32 %12, i32 3
  store <4 x i32> %insertElmt12, <4 x i32>* %allocaVec2, align 16
  %13 = load <4 x i32>, <4 x i32>* %allocaVec2, align 16
  %Vop13 = sub <4 x i32> %13, <i32 125, i32 125, i32 125, i32 125>
  %14 = sub nsw i32 %12, 125
  %15 = sitofp i32 %14 to double
  store double %15, double* %CastInst
  %16 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %16, i32 0
  %insertCast14 = insertelement <2 x double> %insertCast, double %16, i32 1
  store <2 x double> %insertCast14, <2 x double>* %CastInstVec, align 4
  %17 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %Vop15 = fdiv <2 x double> %17, <double 2.375000e+03, double 2.375000e+03>
  %18 = fdiv double %15, 2.375000e+03
  %19 = fptrunc double %18 to float
  store float %19, float* %6, align 4
  %20 = load float, float* %6, align 4
  %insertElmt16 = insertelement <4 x float> undef, float %20, i32 0
  %insertElmt17 = insertelement <4 x float> %insertElmt16, float %20, i32 1
  %insertElmt18 = insertelement <4 x float> %insertElmt17, float %20, i32 2
  %insertElmt19 = insertelement <4 x float> %insertElmt18, float %20, i32 3
  store <4 x float> %insertElmt19, <4 x float>* %allocaVec4, align 16
  %21 = load <4 x float>, <4 x float>* %allocaVec4, align 16
  %Vop20 = fsub <4 x float> %21, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = fsub float %20, 1.000000e+00
  %Vop21 = fmul <4 x float> <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>, %Vop20
  store <4 x float> %Vop21, <4 x float>* %allocaVec4
  %23 = fmul float 4.000000e+00, %22
  store float %23, float* %6, align 4
  %24 = load float, float* %6, align 4
  %25 = load float, float* %5, align 4
  %insertElmt22 = insertelement <4 x float> undef, float %25, i32 0
  %insertElmt23 = insertelement <4 x float> %insertElmt22, float %25, i32 1
  %insertElmt24 = insertelement <4 x float> %insertElmt23, float %25, i32 2
  %insertElmt25 = insertelement <4 x float> %insertElmt24, float %25, i32 3
  store <4 x float> %insertElmt25, <4 x float>* %allocaVec3, align 16
  %26 = load <4 x float>, <4 x float>* %allocaVec3, align 16
  %27 = load <4 x float>, <4 x float>* %allocaVec4, align 16
  %Vop26 = fadd <4 x float> %26, %27
  store <4 x float> %Vop26, <4 x float>* %allocaVec3
  %28 = fadd float %25, %24
  store float %28, float* %5, align 4
  %29 = load float, float* %5, align 4
  %30 = load <4 x float>, <4 x float>* %allocaVec3, align 16
  %Vop27 = fdiv <4 x float> %30, <float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01>
  %31 = fdiv float %29, 1.000000e+01
  %32 = fpext float %31 to double
  %33 = call arm_aapcscc double @pow(double 1.000000e+01, double %32) #7
  %34 = fptrunc double %33 to float
  store float %34, float* @masking_lower, align 4
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @VBR_iteration_loop(%struct.lame_global_flags*, [2 x double]*, double*, [2 x [576 x double]]*, [2 x %struct.III_psy_ratio]*, %struct.III_side_info_t*, [2 x [576 x i32]]*, [2 x %struct.III_scalefac_t]*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec14 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %Recovery5 = alloca i32, align 4
  %allocaVec18 = alloca <4 x i32>, align 16
  %Recovery6 = alloca i32, align 4
  %allocaVec19 = alloca <4 x i32>, align 16
  %Recovery7 = alloca i32, align 4
  %allocaVec20 = alloca <4 x i32>, align 16
  %Recovery8 = alloca i32, align 4
  %allocaVec21 = alloca <4 x i32>, align 16
  %Recovery9 = alloca i32, align 4
  %allocaVec22 = alloca <4 x i32>, align 16
  %Recovery10 = alloca i32, align 4
  %allocaVec23 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec24 = alloca <2 x double>, align 16
  %CastInst11 = alloca double, align 4
  %CastInstVec12 = alloca <2 x double>, align 16
  %9 = alloca %struct.lame_global_flags*, align 4
  %10 = alloca [2 x double]*, align 4
  %11 = alloca double*, align 4
  %12 = alloca [2 x [576 x double]]*, align 4
  %13 = alloca [2 x %struct.III_psy_ratio]*, align 4
  %14 = alloca %struct.III_side_info_t*, align 4
  %15 = alloca [2 x [576 x i32]]*, align 4
  %16 = alloca [2 x %struct.III_scalefac_t]*, align 4
  %17 = alloca %struct.gr_info, align 4
  %18 = alloca %struct.gr_info, align 4
  %19 = alloca %struct.III_scalefac_t, align 4
  %20 = alloca [576 x i32], align 4
  %21 = alloca %struct.III_psy_xmin, align 8
  %22 = alloca %struct.gr_info*, align 4
  %23 = alloca [2 x [2 x i32]], align 4
  %24 = alloca [4 x double], align 8
  %25 = alloca [4 x double], align 8
  %26 = alloca [4 x [21 x double]], align 8
  %allocaVec25 = alloca <4 x i32>, align 16
  %27 = alloca i32, align 4
  %allocaVec26 = alloca <4 x i32>, align 16
  %28 = alloca i32, align 4
  %allocaVec27 = alloca <4 x i32>, align 16
  %29 = alloca i32, align 4
  %allocaVec28 = alloca <4 x i32>, align 16
  %30 = alloca i32, align 4
  %allocaVec29 = alloca <4 x i32>, align 16
  %31 = alloca i32, align 4
  %allocaVec30 = alloca <4 x i32>, align 16
  %32 = alloca i32, align 4
  %33 = alloca [15 x i32], align 4
  %allocaVec31 = alloca <4 x i32>, align 16
  %34 = alloca i32, align 4
  %allocaVec32 = alloca <4 x i32>, align 16
  %35 = alloca i32, align 4
  %allocaVec33 = alloca <4 x i32>, align 16
  %36 = alloca i32, align 4
  %allocaVec34 = alloca <4 x i32>, align 16
  %37 = alloca i32, align 4
  %allocaVec35 = alloca <4 x i32>, align 16
  %38 = alloca i32, align 4
  %allocaVec36 = alloca <4 x i32>, align 16
  %39 = alloca i32, align 4
  %allocaVec37 = alloca <4 x i32>, align 16
  %40 = alloca i32, align 4
  %allocaVec38 = alloca <4 x i32>, align 16
  %41 = alloca i32, align 4
  %allocaVec39 = alloca <4 x i32>, align 16
  %42 = alloca i32, align 4
  %allocaVec40 = alloca <4 x i32>, align 16
  %43 = alloca i32, align 4
  %allocaVec41 = alloca <4 x i32>, align 16
  %44 = alloca i32, align 4
  %allocaVec42 = alloca <2 x double>, align 16
  %45 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %9, align 4
  store [2 x double]* %1, [2 x double]** %10, align 4
  store double* %2, double** %11, align 4
  store [2 x [576 x double]]* %3, [2 x [576 x double]]** %12, align 4
  store [2 x %struct.III_psy_ratio]* %4, [2 x %struct.III_psy_ratio]** %13, align 4
  store %struct.III_side_info_t* %5, %struct.III_side_info_t** %14, align 4
  store [2 x [576 x i32]]* %6, [2 x [576 x i32]]** %15, align 4
  store [2 x %struct.III_scalefac_t]* %7, [2 x %struct.III_scalefac_t]** %16, align 4
  store %struct.gr_info* null, %struct.gr_info** %22, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec27
  store i32 0, i32* %29, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec30
  store i32 0, i32* %32, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec38
  store i32 0, i32* %41, align 4
  %46 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %47 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %48 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  call arm_aapcscc void @iteration_init(%struct.lame_global_flags* %46, %struct.III_side_info_t* %47, [2 x [576 x i32]]* %48)
  %49 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %50 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %49, i32 0, i32 50
  store i32 1, i32* %50, align 4
  br label %51

; <label>:51:                                     ; preds = %84, %8
  %52 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %53 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %52, i32 0, i32 50
  %54 = load i32, i32* %53, align 4
  %55 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %56 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %55, i32 0, i32 48
  %57 = load i32, i32* %56, align 4
  %58 = icmp sle i32 %54, %57
  br i1 %58, label %59, label %89

; <label>:59:                                     ; preds = %51
  %60 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  call arm_aapcscc void @getframebits(%struct.lame_global_flags* %60, i32* %34, i32* %36)
  %61 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %62 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %61, i32 0, i32 50
  %63 = load i32, i32* %62, align 4
  %64 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %65 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %64, i32 0, i32 47
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %63, %66
  br i1 %67, label %68, label %74

; <label>:68:                                     ; preds = %59
  %69 = load i32, i32* %36, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %69, i32 0
  %insertElmt43 = insertelement <4 x i32> %insertElmt, i32 %69, i32 1
  %insertElmt44 = insertelement <4 x i32> %insertElmt43, i32 %69, i32 2
  %insertElmt45 = insertelement <4 x i32> %insertElmt44, i32 %69, i32 3
  store <4 x i32> %insertElmt45, <4 x i32>* %allocaVec33, align 16
  %70 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %71 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %70, i32 0, i32 46
  %72 = load i32, i32* %71, align 4
  %73 = sdiv i32 %69, %72
  store i32 %73, i32* %32, align 4
  br label %74

; <label>:74:                                     ; preds = %68, %59
  %75 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %76 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %77 = load i32, i32* %36, align 4
  %78 = load i32, i32* %34, align 4
  %79 = call arm_aapcscc i32 @ResvFrameBegin(%struct.lame_global_flags* %75, %struct.III_side_info_t* %76, i32 %77, i32 %78)
  %80 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %81 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %80, i32 0, i32 50
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds [15 x i32], [15 x i32]* %33, i32 0, i32 %82
  store i32 %79, i32* %83, align 4
  br label %84

; <label>:84:                                     ; preds = %74
  %85 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %86 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %85, i32 0, i32 50
  %87 = load i32, i32* %86, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %86, align 4
  br label %51

; <label>:89:                                     ; preds = %51
  %90 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %91 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %90, i32 0, i32 48
  %92 = load i32, i32* %91, align 4
  %93 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %94 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %93, i32 0, i32 50
  store i32 %92, i32* %94, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec37
  store i32 0, i32* %40, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec36
  store i32 0, i32* %39, align 4
  br label %95

; <label>:95:                                     ; preds = %503, %89
  %96 = load i32, i32* %39, align 4
  %97 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %98 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %97, i32 0, i32 45
  %99 = load i32, i32* %98, align 4
  %100 = icmp slt i32 %96, %99
  br i1 %100, label %101, label %507

; <label>:101:                                    ; preds = %95
  %102 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %103 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %102, i32 0, i32 46
  %104 = load i32, i32* %103, align 4
  store i32 %104, i32* %42, align 4
  %105 = load i32, i32* @reduce_sidechannel, align 4
  %106 = icmp ne i32 %105, 0
  br i1 %106, label %107, label %108

; <label>:107:                                    ; preds = %101
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec39
  store i32 1, i32* %42, align 4
  br label %108

; <label>:108:                                    ; preds = %107, %101
  %109 = load i32, i32* @convert_mdct, align 4
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %111, label %120

; <label>:111:                                    ; preds = %108
  %112 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %113 = load i32, i32* %39, align 4
  %114 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %112, i32 %113
  %115 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %114, i32 0, i32 0
  %116 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %117 = load i32, i32* %39, align 4
  %118 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %116, i32 %117
  %119 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %118, i32 0, i32 0
  call arm_aapcscc void @ms_convert([576 x double]* %115, [576 x double]* %119)
  br label %120

; <label>:120:                                    ; preds = %111, %108
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec35
  store i32 0, i32* %38, align 4
  br label %121

; <label>:121:                                    ; preds = %498, %120
  %122 = load i32, i32* %38, align 4
  %123 = load i32, i32* %42, align 4
  %124 = icmp slt i32 %122, %123
  br i1 %124, label %125, label %502

; <label>:125:                                    ; preds = %121
  %126 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %127 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %126, i32 0, i32 4
  %128 = load i32, i32* %39, align 4
  %129 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %127, i32 0, i32 %128
  %130 = getelementptr inbounds %struct.anon, %struct.anon* %129, i32 0, i32 0
  %131 = load i32, i32* %38, align 4
  %132 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %130, i32 0, i32 %131
  %133 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %132, i32 0, i32 0
  store %struct.gr_info* %133, %struct.gr_info** %22, align 4
  %134 = load i32, i32* %32, align 4
  %135 = icmp sgt i32 125, %134
  br i1 %135, label %136, label %137

; <label>:136:                                    ; preds = %125
  br label %139

; <label>:137:                                    ; preds = %125
  %138 = load i32, i32* %32, align 4
  br label %139

; <label>:139:                                    ; preds = %137, %136
  %140 = phi i32 [ 125, %136 ], [ %138, %137 ]
  store i32 %140, i32* %30, align 4
  %141 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %142 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %143 = load i32, i32* %39, align 4
  %144 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %142, i32 %143
  %145 = load i32, i32* %38, align 4
  %146 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %144, i32 0, i32 %145
  %147 = getelementptr inbounds [576 x double], [576 x double]* %146, i32 0, i32 0
  %148 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %149 = call arm_aapcscc i32 @init_outer_loop(%struct.lame_global_flags* %141, double* %147, %struct.gr_info* %148)
  %150 = icmp ne i32 %149, 0
  br i1 %150, label %169, label %151

; <label>:151:                                    ; preds = %139
  %152 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %153 = load i32, i32* %39, align 4
  %154 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %152, i32 %153
  %155 = load i32, i32* %38, align 4
  %156 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %154, i32 0, i32 %155
  %157 = bitcast %struct.III_scalefac_t* %156 to i8*
  call void @llvm.memset.p0i8.i32(i8* %157, i8 0, i32 244, i32 4, i1 false)
  %158 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %159 = load i32, i32* %39, align 4
  %160 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %158, i32 %159
  %161 = load i32, i32* %38, align 4
  %162 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %160, i32 0, i32 %161
  %163 = getelementptr inbounds [576 x i32], [576 x i32]* %162, i32 0, i32 0
  %164 = bitcast i32* %163 to i8*
  call void @llvm.memset.p0i8.i32(i8* %164, i8 0, i32 2304, i32 4, i1 false)
  %165 = load i32, i32* %39, align 4
  %166 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %165
  %167 = load i32, i32* %38, align 4
  %168 = getelementptr inbounds [2 x i32], [2 x i32]* %166, i32 0, i32 %167
  store i32 0, i32* %168, align 4
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec37
  store i32 1, i32* %40, align 4
  br label %498

; <label>:169:                                    ; preds = %139
  %170 = bitcast %struct.gr_info* %18 to i8*
  %171 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %172 = bitcast %struct.gr_info* %171 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %170, i8* %172, i32 112, i32 4, i1 false)
  %173 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %174 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %173, i32 0, i32 22
  %175 = load i32, i32* %174, align 4
  call arm_aapcscc void @set_masking_lower(i32 %175, i32 2500)
  %176 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %177 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %178 = load i32, i32* %39, align 4
  %179 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %177, i32 %178
  %180 = load i32, i32* %38, align 4
  %181 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %179, i32 0, i32 %180
  %182 = getelementptr inbounds [576 x double], [576 x double]* %181, i32 0, i32 0
  %183 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %13, align 4
  %184 = load i32, i32* %39, align 4
  %185 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %183, i32 %184
  %186 = load i32, i32* %38, align 4
  %187 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %185, i32 0, i32 %186
  %188 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %189 = call arm_aapcscc i32 @calc_xmin(%struct.lame_global_flags* %176, double* %182, %struct.III_psy_ratio* %187, %struct.gr_info* %188, %struct.III_psy_xmin* %21)
  %190 = icmp eq i32 0, %189
  br i1 %190, label %191, label %192

; <label>:191:                                    ; preds = %169
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec37
  store i32 1, i32* %40, align 4
  store <4 x i32> <i32 125, i32 125, i32 125, i32 125>, <4 x i32>* %allocaVec28
  store i32 125, i32* %30, align 4
  br label %192

; <label>:192:                                    ; preds = %191, %169
  %193 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %194 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %193, i32 0, i32 6
  %195 = load i32, i32* %194, align 4
  %196 = icmp eq i32 %195, 2
  br i1 %196, label %197, label %228

; <label>:197:                                    ; preds = %192
  %198 = load [2 x double]*, [2 x double]** %10, align 4
  %199 = load i32, i32* %39, align 4
  %200 = getelementptr inbounds [2 x double], [2 x double]* %198, i32 %199
  %201 = load i32, i32* %38, align 4
  %202 = getelementptr inbounds [2 x double], [2 x double]* %200, i32 0, i32 %201
  %203 = load double, double* %202, align 8
  %204 = fcmp ogt double 1.100000e+03, %203
  br i1 %204, label %205, label %206

; <label>:205:                                    ; preds = %197
  br label %213

; <label>:206:                                    ; preds = %197
  %207 = load [2 x double]*, [2 x double]** %10, align 4
  %208 = load i32, i32* %39, align 4
  %209 = getelementptr inbounds [2 x double], [2 x double]* %207, i32 %208
  %210 = load i32, i32* %38, align 4
  %211 = getelementptr inbounds [2 x double], [2 x double]* %209, i32 0, i32 %210
  %212 = load double, double* %211, align 8
  br label %213

; <label>:213:                                    ; preds = %206, %205
  %214 = phi double [ 1.100000e+03, %205 ], [ %212, %206 ]
  %215 = load i32, i32* %30, align 4
  %216 = sitofp i32 %215 to double
  store double %216, double* %CastInst
  %217 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %217, i32 0
  %insertCast46 = insertelement <2 x double> %insertCast, double %217, i32 1
  store <2 x double> %insertCast46, <2 x double>* %CastInstVec, align 4
  %218 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %219 = fadd double %216, %214
  %220 = fptosi double %219 to i32
  store i32 %220, i32* %30, align 4
  %221 = load i32, i32* %30, align 4
  %222 = icmp slt i32 %221, 1800
  br i1 %222, label %223, label %225

; <label>:223:                                    ; preds = %213
  %224 = load i32, i32* %30, align 4
  br label %226

; <label>:225:                                    ; preds = %213
  br label %226

; <label>:226:                                    ; preds = %225, %223
  %227 = phi i32 [ %224, %223 ], [ 1800, %225 ]
  store i32 %227, i32* %30, align 4
  br label %228

; <label>:228:                                    ; preds = %226, %192
  %229 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %230 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %229, i32 0, i32 48
  %231 = load i32, i32* %230, align 4
  %232 = getelementptr inbounds [15 x i32], [15 x i32]* %33, i32 0, i32 %231
  %233 = load i32, i32* %232, align 4
  %234 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %235 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %234, i32 0, i32 46
  %236 = load i32, i32* %235, align 4
  %237 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %238 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %237, i32 0, i32 45
  %239 = load i32, i32* %238, align 4
  %240 = mul nsw i32 %236, %239
  %241 = sdiv i32 %233, %240
  %242 = add nsw i32 1200, %241
  store i32 %242, i32* %31, align 4
  %243 = load i32, i32* %31, align 4
  %244 = icmp slt i32 %243, 2500
  br i1 %244, label %245, label %247

; <label>:245:                                    ; preds = %228
  %246 = load i32, i32* %31, align 4
  br label %248

; <label>:247:                                    ; preds = %228
  br label %248

; <label>:248:                                    ; preds = %247, %245
  %249 = phi i32 [ %246, %245 ], [ 2500, %247 ]
  store i32 %249, i32* %31, align 4
  %250 = load i32, i32* %31, align 4
  %251 = load i32, i32* %30, align 4
  %252 = icmp sgt i32 %250, %251
  br i1 %252, label %253, label %255

; <label>:253:                                    ; preds = %248
  %254 = load i32, i32* %31, align 4
  br label %257

; <label>:255:                                    ; preds = %248
  %256 = load i32, i32* %30, align 4
  br label %257

; <label>:257:                                    ; preds = %255, %253
  %258 = phi i32 [ %254, %253 ], [ %256, %255 ]
  store i32 %258, i32* %31, align 4
  %259 = load i32, i32* %31, align 4
  %insertElmt47 = insertelement <4 x i32> undef, i32 %259, i32 0
  %insertElmt48 = insertelement <4 x i32> %insertElmt47, i32 %259, i32 1
  %insertElmt49 = insertelement <4 x i32> %insertElmt48, i32 %259, i32 2
  %insertElmt50 = insertelement <4 x i32> %insertElmt49, i32 %259, i32 3
  store <4 x i32> %insertElmt50, <4 x i32>* %allocaVec29, align 16
  %260 = load i32, i32* %30, align 4
  %insertElmt51 = insertelement <4 x i32> undef, i32 %260, i32 0
  %insertElmt52 = insertelement <4 x i32> %insertElmt51, i32 %260, i32 1
  %insertElmt53 = insertelement <4 x i32> %insertElmt52, i32 %260, i32 2
  %insertElmt54 = insertelement <4 x i32> %insertElmt53, i32 %260, i32 3
  store <4 x i32> %insertElmt54, <4 x i32>* %allocaVec28, align 16
  %261 = load <4 x i32>, <4 x i32>* %allocaVec29, align 16
  %262 = load <4 x i32>, <4 x i32>* %allocaVec28, align 16
  %Vop = sub <4 x i32> %261, %262
  %263 = sub nsw i32 %259, %260
  %Vop55 = sdiv <4 x i32> %Vop, <i32 4, i32 4, i32 4, i32 4>
  store <4 x i32> %Vop55, <4 x i32>* %allocaVec26
  %264 = sdiv i32 %263, 4
  store i32 %264, i32* %28, align 4
  %265 = load i32, i32* %31, align 4
  %insertElmt56 = insertelement <4 x i32> undef, i32 %265, i32 0
  %insertElmt57 = insertelement <4 x i32> %insertElmt56, i32 %265, i32 1
  %insertElmt58 = insertelement <4 x i32> %insertElmt57, i32 %265, i32 2
  %insertElmt59 = insertelement <4 x i32> %insertElmt58, i32 %265, i32 3
  store <4 x i32> %insertElmt59, <4 x i32>* %allocaVec29, align 16
  %266 = load i32, i32* %30, align 4
  %insertElmt60 = insertelement <4 x i32> undef, i32 %266, i32 0
  %insertElmt61 = insertelement <4 x i32> %insertElmt60, i32 %266, i32 1
  %insertElmt62 = insertelement <4 x i32> %insertElmt61, i32 %266, i32 2
  %insertElmt63 = insertelement <4 x i32> %insertElmt62, i32 %266, i32 3
  store <4 x i32> %insertElmt63, <4 x i32>* %allocaVec28, align 16
  %267 = load <4 x i32>, <4 x i32>* %allocaVec29, align 16
  %268 = load <4 x i32>, <4 x i32>* %allocaVec28, align 16
  %Vop64 = add <4 x i32> %267, %268
  %269 = add nsw i32 %265, %266
  %Vop65 = sdiv <4 x i32> %Vop64, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %Vop65, <4 x i32>* %allocaVec25
  %270 = sdiv i32 %269, 2
  store i32 %270, i32* %27, align 4
  %271 = load i32, i32* %31, align 4
  %insertElmt66 = insertelement <4 x i32> undef, i32 %271, i32 0
  %insertElmt67 = insertelement <4 x i32> %insertElmt66, i32 %271, i32 1
  %insertElmt68 = insertelement <4 x i32> %insertElmt67, i32 %271, i32 2
  %insertElmt69 = insertelement <4 x i32> %insertElmt68, i32 %271, i32 3
  store <4 x i32> %insertElmt69, <4 x i32>* %allocaVec29, align 16
  %272 = load <4 x i32>, <4 x i32>* %allocaVec29, align 16
  %Vop70 = add <4 x i32> %272, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop70, <4 x i32>* %allocaVec40
  %273 = load <4 x i32>, <4 x i32>* %allocaVec40, align 4
  %extractE = extractelement <4 x i32> %273, i64 0
  %extractE71 = extractelement <4 x i32> %273, i64 1
  %extractE72 = extractelement <4 x i32> %273, i64 2
  %sum = add i32 %extractE, %extractE71
  %sum73 = add i32 %sum, %extractE72
  %274 = add nsw i32 %271, 1
  %Fmul = mul i32 %274, 3
  store i32 %274, i32* %Recovery2
  %Fcmp = icmp ne i32 %sum73, %Fmul
  br i1 %Fcmp, label %275, label %279

; <label>:275:                                    ; preds = %257
  %remThree = sdiv i32 %sum73, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %276, label %277

; <label>:276:                                    ; preds = %275
  store i32 %274, i32* %Recovery2, align 4
  br label %278

; <label>:277:                                    ; preds = %275
  store i32 %extractE, i32* %Recovery2, align 4
  br label %278

; <label>:278:                                    ; preds = %277, %276
  br label %279

; <label>:279:                                    ; preds = %257, %278
  %ReplaceInst = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst, i32* %43, align 4
  br label %280

; <label>:280:                                    ; preds = %447, %279
  %281 = load i32, i32* %27, align 4
  %282 = load i32, i32* %30, align 4
  %283 = icmp sge i32 %281, %282
  br i1 %283, label %285, label %284

; <label>:284:                                    ; preds = %280
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.222, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 400, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.VBR_iteration_loop, i32 0, i32 0))
  br label %285

; <label>:285:                                    ; preds = %284, %280
  %286 = phi i1 [ true, %280 ], [ false, %284 ]
  %287 = zext i1 %286 to i32
  %288 = load i32, i32* %27, align 4
  %289 = load i32, i32* %31, align 4
  %290 = icmp sle i32 %288, %289
  br i1 %290, label %292, label %291

; <label>:291:                                    ; preds = %285
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2.223, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 401, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.VBR_iteration_loop, i32 0, i32 0))
  br label %292

; <label>:292:                                    ; preds = %291, %285
  %293 = phi i1 [ true, %285 ], [ false, %291 ]
  %294 = zext i1 %293 to i32
  %295 = load i32, i32* %27, align 4
  %296 = load i32, i32* %43, align 4
  %297 = icmp sge i32 %295, %296
  br i1 %297, label %298, label %307

; <label>:298:                                    ; preds = %292
  %299 = load i32, i32* %28, align 4
  %300 = load i32, i32* %27, align 4
  %301 = load <4 x i32>, <4 x i32>* %allocaVec25, align 16
  %302 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop74 = sub <4 x i32> %301, %302
  store <4 x i32> %Vop74, <4 x i32>* %allocaVec25
  %303 = sub nsw i32 %300, %299
  store i32 %303, i32* %27, align 4
  %304 = load i32, i32* %28, align 4
  %305 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop75 = sdiv <4 x i32> %305, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %Vop75, <4 x i32>* %allocaVec26
  %306 = sdiv i32 %304, 2
  store i32 %306, i32* %28, align 4
  br label %447

; <label>:307:                                    ; preds = %292
  %308 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 0
  store double 0.000000e+00, double* %308, align 8
  %309 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 1
  store double 0.000000e+00, double* %309, align 8
  %310 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 2
  store double 0.000000e+00, double* %310, align 8
  %311 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 3
  store double 0.000000e+00, double* %311, align 8
  %312 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 0
  %313 = load double, double* %312, align 8
  %314 = fcmp ogt double 0.000000e+00, %313
  br i1 %314, label %315, label %316

; <label>:315:                                    ; preds = %307
  br label %319

; <label>:316:                                    ; preds = %307
  %317 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 0
  %318 = load double, double* %317, align 8
  br label %319

; <label>:319:                                    ; preds = %316, %315
  %320 = phi double [ 0.000000e+00, %315 ], [ %318, %316 ]
  %321 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 0
  store double %320, double* %321, align 8
  %322 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 2
  %323 = load double, double* %322, align 8
  %324 = fcmp ogt double 0.000000e+00, %323
  br i1 %324, label %325, label %326

; <label>:325:                                    ; preds = %319
  br label %329

; <label>:326:                                    ; preds = %319
  %327 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 2
  %328 = load double, double* %327, align 8
  br label %329

; <label>:329:                                    ; preds = %326, %325
  %330 = phi double [ 0.000000e+00, %325 ], [ %328, %326 ]
  %331 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 2
  store double %330, double* %331, align 8
  %332 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %333 = bitcast %struct.gr_info* %332 to i8*
  %334 = bitcast %struct.gr_info* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %333, i8* %334, i32 112, i32 4, i1 false)
  %335 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %336 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %335, i32 0, i32 22
  %337 = load i32, i32* %336, align 4
  %338 = load i32, i32* %27, align 4
  call arm_aapcscc void @set_masking_lower(i32 %337, i32 %338)
  %339 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %340 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %341 = load i32, i32* %39, align 4
  %342 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %340, i32 %341
  %343 = load i32, i32* %38, align 4
  %344 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %342, i32 0, i32 %343
  %345 = getelementptr inbounds [576 x double], [576 x double]* %344, i32 0, i32 0
  %346 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %13, align 4
  %347 = load i32, i32* %39, align 4
  %348 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %346, i32 %347
  %349 = load i32, i32* %38, align 4
  %350 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %348, i32 0, i32 %349
  %351 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %352 = call arm_aapcscc i32 @calc_xmin(%struct.lame_global_flags* %339, double* %345, %struct.III_psy_ratio* %350, %struct.gr_info* %351, %struct.III_psy_xmin* %21)
  %353 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %354 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %355 = load i32, i32* %39, align 4
  %356 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %354, i32 %355
  %357 = load i32, i32* %38, align 4
  %358 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %356, i32 0, i32 %357
  %359 = getelementptr inbounds [576 x double], [576 x double]* %358, i32 0, i32 0
  %360 = load i32, i32* %27, align 4
  %361 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 0
  %362 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %363 = load i32, i32* %39, align 4
  %364 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %362, i32 %363
  %365 = load i32, i32* %38, align 4
  %366 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %364, i32 0, i32 %365
  %367 = getelementptr inbounds [576 x i32], [576 x i32]* %366, i32 0, i32 0
  %368 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %369 = load i32, i32* %39, align 4
  %370 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %368, i32 %369
  %371 = load i32, i32* %38, align 4
  %372 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %370, i32 0, i32 %371
  %373 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %374 = getelementptr inbounds [4 x [21 x double]], [4 x [21 x double]]* %26, i32 0, i32 0
  %375 = load i32, i32* %38, align 4
  call arm_aapcscc void @outer_loop(%struct.lame_global_flags* %353, double* %359, i32 %360, double* %361, %struct.III_psy_xmin* %21, i32* %367, %struct.III_scalefac_t* %372, %struct.gr_info* %373, [21 x double]* %374, i32 %375)
  %376 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 0
  %377 = load double, double* %376, align 8
  %378 = fptosi double %377 to i32
  %379 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 3
  %380 = load double, double* %379, align 8
  %381 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 2
  %382 = load double, double* %381, align 8
  %383 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 1
  %384 = load double, double* %383, align 8
  %385 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 0
  %386 = load double, double* %385, align 8
  %387 = fptosi double %386 to i32
  %388 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 3
  %389 = load double, double* %388, align 8
  %390 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 2
  %391 = load double, double* %390, align 8
  %392 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 1
  %393 = load double, double* %392, align 8
  %394 = call arm_aapcscc i32 @VBR_compare(i32 %378, double %380, double %382, double %384, i32 %387, double %389, double %391, double %393)
  store i32 %394, i32* %44, align 4
  %395 = load i32, i32* %44, align 4
  %396 = icmp ne i32 %395, 0
  br i1 %396, label %397, label %425

; <label>:397:                                    ; preds = %329
  %398 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %399 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %398, i32 0, i32 0
  %400 = load i32, i32* %399, align 4
  store i32 %400, i32* %43, align 4
  %401 = bitcast %struct.III_scalefac_t* %19 to i8*
  %402 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %403 = load i32, i32* %39, align 4
  %404 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %402, i32 %403
  %405 = load i32, i32* %38, align 4
  %406 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %404, i32 0, i32 %405
  %407 = bitcast %struct.III_scalefac_t* %406 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %401, i8* %407, i32 244, i32 4, i1 false)
  %408 = getelementptr inbounds [576 x i32], [576 x i32]* %20, i32 0, i32 0
  %409 = bitcast i32* %408 to i8*
  %410 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %411 = load i32, i32* %39, align 4
  %412 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %410, i32 %411
  %413 = load i32, i32* %38, align 4
  %414 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %412, i32 0, i32 %413
  %415 = getelementptr inbounds [576 x i32], [576 x i32]* %414, i32 0, i32 0
  %416 = bitcast i32* %415 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %409, i8* %416, i32 2304, i32 4, i1 false)
  %417 = bitcast %struct.gr_info* %17 to i8*
  %418 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %419 = bitcast %struct.gr_info* %418 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %417, i8* %419, i32 112, i32 4, i1 false)
  %420 = load i32, i32* %28, align 4
  %421 = load i32, i32* %27, align 4
  %422 = load <4 x i32>, <4 x i32>* %allocaVec25, align 16
  %423 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop76 = sub <4 x i32> %422, %423
  store <4 x i32> %Vop76, <4 x i32>* %allocaVec25
  %424 = sub nsw i32 %421, %420
  store i32 %424, i32* %27, align 4
  br label %437

; <label>:425:                                    ; preds = %329
  %426 = load i32, i32* %28, align 4
  %427 = load i32, i32* %27, align 4
  %428 = load <4 x i32>, <4 x i32>* %allocaVec25, align 16
  %429 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop77 = add <4 x i32> %428, %429
  store <4 x i32> %Vop77, <4 x i32>* %allocaVec25
  %430 = load <4 x i32>, <4 x i32>* %allocaVec25, align 4
  %extractE79 = extractelement <4 x i32> %430, i64 0
  %extractE80 = extractelement <4 x i32> %430, i64 1
  %extractE81 = extractelement <4 x i32> %430, i64 2
  %sum82 = add i32 %extractE79, %extractE80
  %sum83 = add i32 %sum82, %extractE81
  %431 = add nsw i32 %427, %426
  %Fmul78 = mul i32 %431, 3
  store i32 %431, i32* %Recovery3
  %Fcmp84 = icmp ne i32 %sum83, %Fmul78
  br i1 %Fcmp84, label %432, label %436

; <label>:432:                                    ; preds = %425
  %remThree140 = sdiv i32 %sum83, %extractE79
  %FcmpThree141 = icmp ne i32 %remThree140, 3
  br i1 %FcmpThree141, label %433, label %434

; <label>:433:                                    ; preds = %432
  store i32 %431, i32* %Recovery3, align 4
  br label %435

; <label>:434:                                    ; preds = %432
  store i32 %extractE79, i32* %Recovery3, align 4
  br label %435

; <label>:435:                                    ; preds = %434, %433
  br label %436

; <label>:436:                                    ; preds = %425, %435
  %ReplaceInst150 = load i32, i32* %Recovery3, align 4
  store i32 %ReplaceInst150, i32* %27, align 4
  br label %437

; <label>:437:                                    ; preds = %436, %397
  %438 = load i32, i32* %28, align 4
  %439 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop85 = sdiv <4 x i32> %439, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %Vop85, <4 x i32>* %allocaVec26
  %440 = load <4 x i32>, <4 x i32>* %allocaVec26, align 4
  %extractE87 = extractelement <4 x i32> %440, i64 0
  %extractE88 = extractelement <4 x i32> %440, i64 1
  %extractE89 = extractelement <4 x i32> %440, i64 2
  %sum90 = add i32 %extractE87, %extractE88
  %sum91 = add i32 %sum90, %extractE89
  %441 = sdiv i32 %438, 2
  %Fmul86 = mul i32 %441, 3
  store i32 %441, i32* %Recovery4
  %Fcmp92 = icmp ne i32 %sum91, %Fmul86
  br i1 %Fcmp92, label %442, label %446

; <label>:442:                                    ; preds = %437
  %remThree142 = sdiv i32 %sum91, %extractE87
  %FcmpThree143 = icmp ne i32 %remThree142, 3
  br i1 %FcmpThree143, label %443, label %444

; <label>:443:                                    ; preds = %442
  store i32 %441, i32* %Recovery4, align 4
  br label %445

; <label>:444:                                    ; preds = %442
  store i32 %extractE87, i32* %Recovery4, align 4
  br label %445

; <label>:445:                                    ; preds = %444, %443
  br label %446

; <label>:446:                                    ; preds = %437, %445
  %ReplaceInst151 = load i32, i32* %Recovery4, align 4
  store i32 %ReplaceInst151, i32* %28, align 4
  br label %447

; <label>:447:                                    ; preds = %446, %298
  %448 = load i32, i32* %28, align 4
  %449 = icmp sgt i32 %448, 10
  br i1 %449, label %280, label %450

; <label>:450:                                    ; preds = %447
  %451 = load i32, i32* %43, align 4
  %452 = load i32, i32* %31, align 4
  %453 = icmp sle i32 %451, %452
  br i1 %453, label %454, label %474

; <label>:454:                                    ; preds = %450
  %455 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %456 = bitcast %struct.gr_info* %455 to i8*
  %457 = bitcast %struct.gr_info* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %456, i8* %457, i32 112, i32 4, i1 false)
  %458 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %459 = load i32, i32* %39, align 4
  %460 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %458, i32 %459
  %461 = load i32, i32* %38, align 4
  %462 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %460, i32 0, i32 %461
  %463 = bitcast %struct.III_scalefac_t* %462 to i8*
  %464 = bitcast %struct.III_scalefac_t* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %463, i8* %464, i32 244, i32 4, i1 false)
  %465 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %466 = load i32, i32* %39, align 4
  %467 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %465, i32 %466
  %468 = load i32, i32* %38, align 4
  %469 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %467, i32 0, i32 %468
  %470 = getelementptr inbounds [576 x i32], [576 x i32]* %469, i32 0, i32 0
  %471 = bitcast i32* %470 to i8*
  %472 = getelementptr inbounds [576 x i32], [576 x i32]* %20, i32 0, i32 0
  %473 = bitcast i32* %472 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %471, i8* %473, i32 2304, i32 4, i1 false)
  br label %474

; <label>:474:                                    ; preds = %454, %450
  %475 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %476 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %475, i32 0, i32 0
  %477 = load i32, i32* %476, align 4
  %478 = load i32, i32* %31, align 4
  %479 = icmp sle i32 %477, %478
  br i1 %479, label %481, label %480

; <label>:480:                                    ; preds = %474
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3.224, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 497, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.VBR_iteration_loop, i32 0, i32 0))
  br label %481

; <label>:481:                                    ; preds = %480, %474
  %482 = phi i1 [ true, %474 ], [ false, %480 ]
  %483 = zext i1 %482 to i32
  %484 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %485 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %484, i32 0, i32 0
  %486 = load i32, i32* %485, align 4
  %487 = load i32, i32* %39, align 4
  %488 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %487
  %489 = load i32, i32* %38, align 4
  %490 = getelementptr inbounds [2 x i32], [2 x i32]* %488, i32 0, i32 %489
  store i32 %486, i32* %490, align 4
  %491 = load i32, i32* %39, align 4
  %492 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %491
  %493 = load i32, i32* %38, align 4
  %494 = getelementptr inbounds [2 x i32], [2 x i32]* %492, i32 0, i32 %493
  %495 = load i32, i32* %494, align 4
  %496 = load i32, i32* %29, align 4
  %497 = add nsw i32 %496, %495
  store i32 %497, i32* %29, align 4
  br label %498

; <label>:498:                                    ; preds = %481, %151
  %499 = load i32, i32* %38, align 4
  %insertElmt93 = insertelement <4 x i32> undef, i32 %499, i32 0
  %insertElmt94 = insertelement <4 x i32> %insertElmt93, i32 %499, i32 1
  %insertElmt95 = insertelement <4 x i32> %insertElmt94, i32 %499, i32 2
  %insertElmt96 = insertelement <4 x i32> %insertElmt95, i32 %499, i32 3
  store <4 x i32> %insertElmt96, <4 x i32>* %allocaVec35, align 16
  %500 = load <4 x i32>, <4 x i32>* %allocaVec35, align 16
  %Vop97 = add <4 x i32> %500, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop97, <4 x i32>* %allocaVec35
  %501 = add nsw i32 %499, 1
  store i32 %501, i32* %38, align 4
  br label %121

; <label>:502:                                    ; preds = %121
  br label %503

; <label>:503:                                    ; preds = %502
  %504 = load i32, i32* %39, align 4
  %insertElmt98 = insertelement <4 x i32> undef, i32 %504, i32 0
  %insertElmt99 = insertelement <4 x i32> %insertElmt98, i32 %504, i32 1
  %insertElmt100 = insertelement <4 x i32> %insertElmt99, i32 %504, i32 2
  %insertElmt101 = insertelement <4 x i32> %insertElmt100, i32 %504, i32 3
  store <4 x i32> %insertElmt101, <4 x i32>* %allocaVec36, align 16
  %505 = load <4 x i32>, <4 x i32>* %allocaVec36, align 16
  %Vop102 = add <4 x i32> %505, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop102, <4 x i32>* %allocaVec36
  %506 = add nsw i32 %504, 1
  store i32 %506, i32* %39, align 4
  br label %95

; <label>:507:                                    ; preds = %95
  %508 = load i32, i32* @reduce_sidechannel, align 4
  %509 = icmp ne i32 %508, 0
  br i1 %509, label %510, label %567

; <label>:510:                                    ; preds = %507
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec36
  store i32 0, i32* %39, align 4
  br label %511

; <label>:511:                                    ; preds = %562, %510
  %512 = load i32, i32* %39, align 4
  %513 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %514 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %513, i32 0, i32 45
  %515 = load i32, i32* %514, align 4
  %516 = icmp slt i32 %512, %515
  br i1 %516, label %517, label %566

; <label>:517:                                    ; preds = %511
  %518 = load double*, double** %11, align 4
  %519 = load i32, i32* %39, align 4
  %520 = getelementptr inbounds double, double* %518, i32 %519
  %521 = load double, double* %520, align 8
  %522 = fsub double 5.000000e-01, %521
  %523 = fmul double 3.300000e-01, %522
  %524 = fdiv double %523, 5.000000e-01
  store double %524, double* %45, align 8
  %525 = load double, double* %45, align 8
  %526 = fsub double 1.000000e+00, %525
  %527 = load double, double* %45, align 8
  %528 = fadd double 1.000000e+00, %527
  %529 = fdiv double %526, %528
  %530 = load i32, i32* %39, align 4
  %531 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %530
  %532 = getelementptr inbounds [2 x i32], [2 x i32]* %531, i32 0, i32 0
  %533 = load i32, i32* %532, align 4
  %534 = sitofp i32 %533 to double
  %535 = fmul double %529, %534
  %536 = fptosi double %535 to i32
  %537 = load i32, i32* %39, align 4
  %538 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %537
  %539 = getelementptr inbounds [2 x i32], [2 x i32]* %538, i32 0, i32 1
  store i32 %536, i32* %539, align 4
  %540 = load i32, i32* %39, align 4
  %541 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %540
  %542 = getelementptr inbounds [2 x i32], [2 x i32]* %541, i32 0, i32 1
  %543 = load i32, i32* %542, align 4
  %544 = icmp sgt i32 125, %543
  br i1 %544, label %545, label %546

; <label>:545:                                    ; preds = %517
  br label %551

; <label>:546:                                    ; preds = %517
  %547 = load i32, i32* %39, align 4
  %548 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %547
  %549 = getelementptr inbounds [2 x i32], [2 x i32]* %548, i32 0, i32 1
  %550 = load i32, i32* %549, align 4
  br label %551

; <label>:551:                                    ; preds = %546, %545
  %552 = phi i32 [ 125, %545 ], [ %550, %546 ]
  %553 = load i32, i32* %39, align 4
  %554 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %553
  %555 = getelementptr inbounds [2 x i32], [2 x i32]* %554, i32 0, i32 1
  store i32 %552, i32* %555, align 4
  %556 = load i32, i32* %39, align 4
  %557 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %556
  %558 = getelementptr inbounds [2 x i32], [2 x i32]* %557, i32 0, i32 1
  %559 = load i32, i32* %558, align 4
  %560 = load i32, i32* %29, align 4
  %561 = add nsw i32 %560, %559
  store i32 %561, i32* %29, align 4
  br label %562

; <label>:562:                                    ; preds = %551
  %563 = load i32, i32* %39, align 4
  %564 = load <4 x i32>, <4 x i32>* %allocaVec36, align 16
  %Vop103 = add <4 x i32> %564, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop103, <4 x i32>* %allocaVec36
  %565 = add nsw i32 %563, 1
  store i32 %565, i32* %39, align 4
  br label %511

; <label>:566:                                    ; preds = %511
  br label %567

; <label>:567:                                    ; preds = %566, %507
  %568 = load i32, i32* %40, align 4
  %569 = icmp ne i32 %568, 0
  br i1 %569, label %570, label %571

; <label>:570:                                    ; preds = %567
  br label %575

; <label>:571:                                    ; preds = %567
  %572 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %573 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %572, i32 0, i32 47
  %574 = load i32, i32* %573, align 4
  br label %575

; <label>:575:                                    ; preds = %571, %570
  %576 = phi i32 [ 1, %570 ], [ %574, %571 ]
  %577 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %578 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %577, i32 0, i32 50
  store i32 %576, i32* %578, align 4
  br label %579

; <label>:579:                                    ; preds = %597, %575
  %580 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %581 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %580, i32 0, i32 50
  %582 = load i32, i32* %581, align 4
  %583 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %584 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %583, i32 0, i32 48
  %585 = load i32, i32* %584, align 4
  %586 = icmp slt i32 %582, %585
  br i1 %586, label %587, label %602

; <label>:587:                                    ; preds = %579
  %588 = load i32, i32* %29, align 4
  %589 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %590 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %589, i32 0, i32 50
  %591 = load i32, i32* %590, align 4
  %592 = getelementptr inbounds [15 x i32], [15 x i32]* %33, i32 0, i32 %591
  %593 = load i32, i32* %592, align 4
  %594 = icmp sle i32 %588, %593
  br i1 %594, label %595, label %596

; <label>:595:                                    ; preds = %587
  br label %602

; <label>:596:                                    ; preds = %587
  br label %597

; <label>:597:                                    ; preds = %596
  %598 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %599 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %598, i32 0, i32 50
  %600 = load i32, i32* %599, align 4
  %601 = add nsw i32 %600, 1
  store i32 %601, i32* %599, align 4
  br label %579

; <label>:602:                                    ; preds = %595, %579
  %603 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  call arm_aapcscc void @getframebits(%struct.lame_global_flags* %603, i32* %34, i32* %36)
  %604 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %605 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %606 = load i32, i32* %36, align 4
  %607 = load i32, i32* %34, align 4
  %608 = call arm_aapcscc i32 @ResvFrameBegin(%struct.lame_global_flags* %604, %struct.III_side_info_t* %605, i32 %606, i32 %607)
  store i32 %608, i32* %35, align 4
  %609 = load i32, i32* %29, align 4
  %610 = load i32, i32* %35, align 4
  %611 = icmp sgt i32 %609, %610
  br i1 %611, label %612, label %685

; <label>:612:                                    ; preds = %602
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec38
  store i32 1, i32* %41, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec36
  store i32 0, i32* %39, align 4
  br label %613

; <label>:613:                                    ; preds = %649, %612
  %614 = load i32, i32* %39, align 4
  %615 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %616 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %615, i32 0, i32 45
  %617 = load i32, i32* %616, align 4
  %618 = icmp slt i32 %614, %617
  br i1 %618, label %619, label %653

; <label>:619:                                    ; preds = %613
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec35
  store i32 0, i32* %38, align 4
  br label %620

; <label>:620:                                    ; preds = %644, %619
  %621 = load i32, i32* %38, align 4
  %622 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %623 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %622, i32 0, i32 46
  %624 = load i32, i32* %623, align 4
  %625 = icmp slt i32 %621, %624
  br i1 %625, label %626, label %648

; <label>:626:                                    ; preds = %620
  %627 = load i32, i32* %39, align 4
  %628 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %627
  %629 = load i32, i32* %38, align 4
  %630 = getelementptr inbounds [2 x i32], [2 x i32]* %628, i32 0, i32 %629
  %631 = load i32, i32* %630, align 4
  %632 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %633 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %632, i32 0, i32 50
  %634 = load i32, i32* %633, align 4
  %635 = getelementptr inbounds [15 x i32], [15 x i32]* %33, i32 0, i32 %634
  %636 = load i32, i32* %635, align 4
  %637 = mul nsw i32 %631, %636
  %638 = load i32, i32* %29, align 4
  %639 = sdiv i32 %637, %638
  %640 = load i32, i32* %39, align 4
  %641 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %640
  %642 = load i32, i32* %38, align 4
  %643 = getelementptr inbounds [2 x i32], [2 x i32]* %641, i32 0, i32 %642
  store i32 %639, i32* %643, align 4
  br label %644

; <label>:644:                                    ; preds = %626
  %645 = load i32, i32* %38, align 4
  %646 = load <4 x i32>, <4 x i32>* %allocaVec35, align 16
  %Vop104 = add <4 x i32> %646, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop104, <4 x i32>* %allocaVec35
  %647 = add nsw i32 %645, 1
  store i32 %647, i32* %38, align 4
  br label %620

; <label>:648:                                    ; preds = %620
  br label %649

; <label>:649:                                    ; preds = %648
  %650 = load i32, i32* %39, align 4
  %651 = load <4 x i32>, <4 x i32>* %allocaVec36, align 16
  %Vop105 = add <4 x i32> %651, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop105, <4 x i32>* %allocaVec36
  %652 = add nsw i32 %650, 1
  store i32 %652, i32* %39, align 4
  br label %613

; <label>:653:                                    ; preds = %613
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec27
  store i32 0, i32* %29, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec36
  store i32 0, i32* %39, align 4
  br label %654

; <label>:654:                                    ; preds = %680, %653
  %655 = load i32, i32* %39, align 4
  %656 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %657 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %656, i32 0, i32 45
  %658 = load i32, i32* %657, align 4
  %659 = icmp slt i32 %655, %658
  br i1 %659, label %660, label %684

; <label>:660:                                    ; preds = %654
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec35
  store i32 0, i32* %38, align 4
  br label %661

; <label>:661:                                    ; preds = %675, %660
  %662 = load i32, i32* %38, align 4
  %663 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %664 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %663, i32 0, i32 46
  %665 = load i32, i32* %664, align 4
  %666 = icmp slt i32 %662, %665
  br i1 %666, label %667, label %679

; <label>:667:                                    ; preds = %661
  %668 = load i32, i32* %39, align 4
  %669 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %668
  %670 = load i32, i32* %38, align 4
  %671 = getelementptr inbounds [2 x i32], [2 x i32]* %669, i32 0, i32 %670
  %672 = load i32, i32* %671, align 4
  %673 = load i32, i32* %29, align 4
  %674 = add nsw i32 %673, %672
  store i32 %674, i32* %29, align 4
  br label %675

; <label>:675:                                    ; preds = %667
  %676 = load i32, i32* %38, align 4
  %677 = load <4 x i32>, <4 x i32>* %allocaVec35, align 16
  %Vop106 = add <4 x i32> %677, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop106, <4 x i32>* %allocaVec35
  %678 = add nsw i32 %676, 1
  store i32 %678, i32* %38, align 4
  br label %661

; <label>:679:                                    ; preds = %661
  br label %680

; <label>:680:                                    ; preds = %679
  %681 = load i32, i32* %39, align 4
  %682 = load <4 x i32>, <4 x i32>* %allocaVec36, align 16
  %Vop107 = add <4 x i32> %682, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop107, <4 x i32>* %allocaVec36
  %683 = add nsw i32 %681, 1
  store i32 %683, i32* %39, align 4
  br label %654

; <label>:684:                                    ; preds = %654
  br label %685

; <label>:685:                                    ; preds = %684, %602
  %686 = load i32, i32* %29, align 4
  %687 = load i32, i32* %35, align 4
  %688 = icmp sle i32 %686, %687
  br i1 %688, label %690, label %689

; <label>:689:                                    ; preds = %685
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4.225, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 552, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.VBR_iteration_loop, i32 0, i32 0))
  br label %690

; <label>:690:                                    ; preds = %689, %685
  %691 = phi i1 [ true, %685 ], [ false, %689 ]
  %692 = zext i1 %691 to i32
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec36
  store i32 0, i32* %39, align 4
  br label %693

; <label>:693:                                    ; preds = %809, %690
  %694 = load i32, i32* %39, align 4
  %695 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %696 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %695, i32 0, i32 45
  %697 = load i32, i32* %696, align 4
  %698 = icmp slt i32 %694, %697
  br i1 %698, label %699, label %813

; <label>:699:                                    ; preds = %693
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec35
  store i32 0, i32* %38, align 4
  br label %700

; <label>:700:                                    ; preds = %804, %699
  %701 = load i32, i32* %38, align 4
  %702 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %703 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %702, i32 0, i32 46
  %704 = load i32, i32* %703, align 4
  %705 = icmp slt i32 %701, %704
  br i1 %705, label %706, label %808

; <label>:706:                                    ; preds = %700
  %707 = load i32, i32* %41, align 4
  %708 = icmp ne i32 %707, 0
  br i1 %708, label %715, label %709

; <label>:709:                                    ; preds = %706
  %710 = load i32, i32* @reduce_sidechannel, align 4
  %711 = icmp ne i32 %710, 0
  br i1 %711, label %712, label %803

; <label>:712:                                    ; preds = %709
  %713 = load i32, i32* %38, align 4
  %714 = icmp eq i32 %713, 1
  br i1 %714, label %715, label %803

; <label>:715:                                    ; preds = %712, %706
  %716 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %717 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %716, i32 0, i32 4
  %718 = load i32, i32* %39, align 4
  %719 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %717, i32 0, i32 %718
  %720 = getelementptr inbounds %struct.anon, %struct.anon* %719, i32 0, i32 0
  %721 = load i32, i32* %38, align 4
  %722 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %720, i32 0, i32 %721
  %723 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %722, i32 0, i32 0
  store %struct.gr_info* %723, %struct.gr_info** %22, align 4
  %724 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %725 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %726 = load i32, i32* %39, align 4
  %727 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %725, i32 %726
  %728 = load i32, i32* %38, align 4
  %729 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %727, i32 0, i32 %728
  %730 = getelementptr inbounds [576 x double], [576 x double]* %729, i32 0, i32 0
  %731 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %732 = call arm_aapcscc i32 @init_outer_loop(%struct.lame_global_flags* %724, double* %730, %struct.gr_info* %731)
  %733 = icmp ne i32 %732, 0
  br i1 %733, label %752, label %734

; <label>:734:                                    ; preds = %715
  %735 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %736 = load i32, i32* %39, align 4
  %737 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %735, i32 %736
  %738 = load i32, i32* %38, align 4
  %739 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %737, i32 0, i32 %738
  %740 = bitcast %struct.III_scalefac_t* %739 to i8*
  call void @llvm.memset.p0i8.i32(i8* %740, i8 0, i32 244, i32 4, i1 false)
  %741 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %742 = load i32, i32* %39, align 4
  %743 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %741, i32 %742
  %744 = load i32, i32* %38, align 4
  %745 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %743, i32 0, i32 %744
  %746 = getelementptr inbounds [576 x i32], [576 x i32]* %745, i32 0, i32 0
  %747 = bitcast i32* %746 to i8*
  call void @llvm.memset.p0i8.i32(i8* %747, i8 0, i32 2304, i32 4, i1 false)
  %748 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 3
  store double 0.000000e+00, double* %748, align 8
  %749 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 2
  store double 0.000000e+00, double* %749, align 8
  %750 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 1
  store double 0.000000e+00, double* %750, align 8
  %751 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 0
  store double 0.000000e+00, double* %751, align 8
  br label %802

; <label>:752:                                    ; preds = %715
  %753 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %754 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %753, i32 0, i32 22
  %755 = load i32, i32* %754, align 4
  %756 = load i32, i32* %39, align 4
  %757 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %756
  %758 = load i32, i32* %38, align 4
  %759 = getelementptr inbounds [2 x i32], [2 x i32]* %757, i32 0, i32 %758
  %760 = load i32, i32* %759, align 4
  call arm_aapcscc void @set_masking_lower(i32 %755, i32 %760)
  %761 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %762 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %763 = load i32, i32* %39, align 4
  %764 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %762, i32 %763
  %765 = load i32, i32* %38, align 4
  %766 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %764, i32 0, i32 %765
  %767 = getelementptr inbounds [576 x double], [576 x double]* %766, i32 0, i32 0
  %768 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %13, align 4
  %769 = load i32, i32* %39, align 4
  %770 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %768, i32 %769
  %771 = load i32, i32* %38, align 4
  %772 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %770, i32 0, i32 %771
  %773 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %774 = call arm_aapcscc i32 @calc_xmin(%struct.lame_global_flags* %761, double* %767, %struct.III_psy_ratio* %772, %struct.gr_info* %773, %struct.III_psy_xmin* %21)
  %775 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %776 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %777 = load i32, i32* %39, align 4
  %778 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %776, i32 %777
  %779 = load i32, i32* %38, align 4
  %780 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %778, i32 0, i32 %779
  %781 = getelementptr inbounds [576 x double], [576 x double]* %780, i32 0, i32 0
  %782 = load i32, i32* %39, align 4
  %783 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %782
  %784 = load i32, i32* %38, align 4
  %785 = getelementptr inbounds [2 x i32], [2 x i32]* %783, i32 0, i32 %784
  %786 = load i32, i32* %785, align 4
  %787 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 0
  %788 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %789 = load i32, i32* %39, align 4
  %790 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %788, i32 %789
  %791 = load i32, i32* %38, align 4
  %792 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %790, i32 0, i32 %791
  %793 = getelementptr inbounds [576 x i32], [576 x i32]* %792, i32 0, i32 0
  %794 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %795 = load i32, i32* %39, align 4
  %796 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %794, i32 %795
  %797 = load i32, i32* %38, align 4
  %798 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %796, i32 0, i32 %797
  %799 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %800 = getelementptr inbounds [4 x [21 x double]], [4 x [21 x double]]* %26, i32 0, i32 0
  %801 = load i32, i32* %38, align 4
  call arm_aapcscc void @outer_loop(%struct.lame_global_flags* %775, double* %781, i32 %786, double* %787, %struct.III_psy_xmin* %21, i32* %793, %struct.III_scalefac_t* %798, %struct.gr_info* %799, [21 x double]* %800, i32 %801)
  br label %802

; <label>:802:                                    ; preds = %752, %734
  br label %803

; <label>:803:                                    ; preds = %802, %712, %709
  br label %804

; <label>:804:                                    ; preds = %803
  %805 = load i32, i32* %38, align 4
  %806 = load <4 x i32>, <4 x i32>* %allocaVec35, align 16
  %Vop108 = add <4 x i32> %806, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop108, <4 x i32>* %allocaVec35
  %807 = add nsw i32 %805, 1
  store i32 %807, i32* %38, align 4
  br label %700

; <label>:808:                                    ; preds = %700
  br label %809

; <label>:809:                                    ; preds = %808
  %810 = load i32, i32* %39, align 4
  %811 = load <4 x i32>, <4 x i32>* %allocaVec36, align 16
  %Vop109 = add <4 x i32> %811, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop109, <4 x i32>* %allocaVec36
  %812 = add nsw i32 %810, 1
  store i32 %812, i32* %39, align 4
  br label %693

; <label>:813:                                    ; preds = %693
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec36
  store i32 0, i32* %39, align 4
  br label %814

; <label>:814:                                    ; preds = %866, %813
  %815 = load i32, i32* %39, align 4
  %816 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %817 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %816, i32 0, i32 45
  %818 = load i32, i32* %817, align 4
  %819 = icmp slt i32 %815, %818
  br i1 %819, label %820, label %870

; <label>:820:                                    ; preds = %814
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec35
  store i32 0, i32* %38, align 4
  br label %821

; <label>:821:                                    ; preds = %861, %820
  %822 = load i32, i32* %38, align 4
  %823 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %824 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %823, i32 0, i32 46
  %825 = load i32, i32* %824, align 4
  %826 = icmp slt i32 %822, %825
  br i1 %826, label %827, label %865

; <label>:827:                                    ; preds = %821
  %828 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %829 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %828, i32 0, i32 4
  %830 = load i32, i32* %39, align 4
  %831 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %829, i32 0, i32 %830
  %832 = getelementptr inbounds %struct.anon, %struct.anon* %831, i32 0, i32 0
  %833 = load i32, i32* %38, align 4
  %834 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %832, i32 0, i32 %833
  %835 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %834, i32 0, i32 0
  store %struct.gr_info* %835, %struct.gr_info** %22, align 4
  %836 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %837 = load i32, i32* %39, align 4
  %838 = load i32, i32* %38, align 4
  %839 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %840 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %841 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  call arm_aapcscc void @best_scalefac_store(%struct.lame_global_flags* %836, i32 %837, i32 %838, [2 x [576 x i32]]* %839, %struct.III_side_info_t* %840, [2 x %struct.III_scalefac_t]* %841)
  %842 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %843 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %842, i32 0, i32 6
  %844 = load i32, i32* %843, align 4
  %845 = icmp eq i32 %844, 0
  br i1 %845, label %846, label %856

; <label>:846:                                    ; preds = %827
  %847 = load i32, i32* %39, align 4
  %848 = load i32, i32* %38, align 4
  %849 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %850 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %851 = load i32, i32* %39, align 4
  %852 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %850, i32 %851
  %853 = load i32, i32* %38, align 4
  %854 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %852, i32 0, i32 %853
  %855 = getelementptr inbounds [576 x i32], [576 x i32]* %854, i32 0, i32 0
  call arm_aapcscc void @best_huffman_divide(i32 %847, i32 %848, %struct.gr_info* %849, i32* %855)
  br label %856

; <label>:856:                                    ; preds = %846, %827
  %857 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %858 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %859 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %860 = load i32, i32* %36, align 4
  call arm_aapcscc void @ResvAdjust(%struct.lame_global_flags* %857, %struct.gr_info* %858, %struct.III_side_info_t* %859, i32 %860)
  br label %861

; <label>:861:                                    ; preds = %856
  %862 = load i32, i32* %38, align 4
  %863 = load <4 x i32>, <4 x i32>* %allocaVec35, align 16
  %Vop110 = add <4 x i32> %863, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop110, <4 x i32>* %allocaVec35
  %864 = add nsw i32 %862, 1
  store i32 %864, i32* %38, align 4
  br label %821

; <label>:865:                                    ; preds = %821
  br label %866

; <label>:866:                                    ; preds = %865
  %867 = load i32, i32* %39, align 4
  %868 = load <4 x i32>, <4 x i32>* %allocaVec36, align 16
  %Vop111 = add <4 x i32> %868, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop111, <4 x i32>* %allocaVec36
  %869 = add nsw i32 %867, 1
  store i32 %869, i32* %39, align 4
  br label %814

; <label>:870:                                    ; preds = %814
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec36
  store i32 0, i32* %39, align 4
  br label %871

; <label>:871:                                    ; preds = %940, %870
  %872 = load i32, i32* %39, align 4
  %873 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %874 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %873, i32 0, i32 45
  %875 = load i32, i32* %874, align 4
  %876 = icmp slt i32 %872, %875
  br i1 %876, label %877, label %941

; <label>:877:                                    ; preds = %871
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec35
  store i32 0, i32* %38, align 4
  br label %878

; <label>:878:                                    ; preds = %929, %877
  %879 = load i32, i32* %38, align 4
  %880 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %881 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %880, i32 0, i32 46
  %882 = load i32, i32* %881, align 4
  %883 = icmp slt i32 %879, %882
  br i1 %883, label %884, label %930

; <label>:884:                                    ; preds = %878
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec34
  store i32 0, i32* %37, align 4
  br label %885

; <label>:885:                                    ; preds = %918, %884
  %886 = load i32, i32* %37, align 4
  %887 = icmp slt i32 %886, 576
  br i1 %887, label %888, label %919

; <label>:888:                                    ; preds = %885
  %889 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %890 = load i32, i32* %39, align 4
  %891 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %889, i32 %890
  %892 = load i32, i32* %38, align 4
  %893 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %891, i32 0, i32 %892
  %894 = load i32, i32* %37, align 4
  %895 = getelementptr inbounds [576 x double], [576 x double]* %893, i32 0, i32 %894
  %896 = load double, double* %895, align 8
  %897 = fcmp olt double %896, 0.000000e+00
  br i1 %897, label %898, label %908

; <label>:898:                                    ; preds = %888
  %899 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %900 = load i32, i32* %39, align 4
  %901 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %899, i32 %900
  %902 = load i32, i32* %38, align 4
  %903 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %901, i32 0, i32 %902
  %904 = load i32, i32* %37, align 4
  %905 = getelementptr inbounds [576 x i32], [576 x i32]* %903, i32 0, i32 %904
  %906 = load i32, i32* %905, align 4
  %907 = mul nsw i32 %906, -1
  store i32 %907, i32* %905, align 4
  br label %908

; <label>:908:                                    ; preds = %898, %888
  br label %909

; <label>:909:                                    ; preds = %908
  %910 = load i32, i32* %37, align 4
  %insertElmt112 = insertelement <4 x i32> undef, i32 %910, i32 0
  %insertElmt113 = insertelement <4 x i32> %insertElmt112, i32 %910, i32 1
  %insertElmt114 = insertelement <4 x i32> %insertElmt113, i32 %910, i32 2
  %insertElmt115 = insertelement <4 x i32> %insertElmt114, i32 %910, i32 3
  store <4 x i32> %insertElmt115, <4 x i32>* %allocaVec34, align 16
  %911 = load <4 x i32>, <4 x i32>* %allocaVec34, align 16
  %Vop116 = add <4 x i32> %911, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop116, <4 x i32>* %allocaVec34
  %912 = load <4 x i32>, <4 x i32>* %allocaVec34, align 4
  %extractE118 = extractelement <4 x i32> %912, i64 0
  %extractE119 = extractelement <4 x i32> %912, i64 1
  %extractE120 = extractelement <4 x i32> %912, i64 2
  %sum121 = add i32 %extractE118, %extractE119
  %sum122 = add i32 %sum121, %extractE120
  %913 = add nsw i32 %910, 1
  %Fmul117 = mul i32 %913, 3
  store i32 %913, i32* %Recovery8
  %Fcmp123 = icmp ne i32 %sum122, %Fmul117
  br i1 %Fcmp123, label %914, label %918

; <label>:914:                                    ; preds = %909
  %remThree144 = sdiv i32 %sum122, %extractE118
  %FcmpThree145 = icmp ne i32 %remThree144, 3
  br i1 %FcmpThree145, label %915, label %916

; <label>:915:                                    ; preds = %914
  store i32 %913, i32* %Recovery8, align 4
  br label %917

; <label>:916:                                    ; preds = %914
  store i32 %extractE118, i32* %Recovery8, align 4
  br label %917

; <label>:917:                                    ; preds = %916, %915
  br label %918

; <label>:918:                                    ; preds = %909, %917
  %ReplaceInst152 = load i32, i32* %Recovery8, align 4
  store i32 %ReplaceInst152, i32* %37, align 4
  br label %885

; <label>:919:                                    ; preds = %885
  br label %920

; <label>:920:                                    ; preds = %919
  %921 = load i32, i32* %38, align 4
  %922 = load <4 x i32>, <4 x i32>* %allocaVec35, align 16
  %Vop124 = add <4 x i32> %922, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop124, <4 x i32>* %allocaVec35
  %923 = load <4 x i32>, <4 x i32>* %allocaVec35, align 4
  %extractE126 = extractelement <4 x i32> %923, i64 0
  %extractE127 = extractelement <4 x i32> %923, i64 1
  %extractE128 = extractelement <4 x i32> %923, i64 2
  %sum129 = add i32 %extractE126, %extractE127
  %sum130 = add i32 %sum129, %extractE128
  %924 = add nsw i32 %921, 1
  %Fmul125 = mul i32 %924, 3
  store i32 %924, i32* %Recovery9
  %Fcmp131 = icmp ne i32 %sum130, %Fmul125
  br i1 %Fcmp131, label %925, label %929

; <label>:925:                                    ; preds = %920
  %remThree146 = sdiv i32 %sum130, %extractE126
  %FcmpThree147 = icmp ne i32 %remThree146, 3
  br i1 %FcmpThree147, label %926, label %927

; <label>:926:                                    ; preds = %925
  store i32 %924, i32* %Recovery9, align 4
  br label %928

; <label>:927:                                    ; preds = %925
  store i32 %extractE126, i32* %Recovery9, align 4
  br label %928

; <label>:928:                                    ; preds = %927, %926
  br label %929

; <label>:929:                                    ; preds = %920, %928
  %ReplaceInst153 = load i32, i32* %Recovery9, align 4
  store i32 %ReplaceInst153, i32* %38, align 4
  br label %878

; <label>:930:                                    ; preds = %878
  br label %931

; <label>:931:                                    ; preds = %930
  %932 = load i32, i32* %39, align 4
  %933 = load <4 x i32>, <4 x i32>* %allocaVec36, align 16
  %Vop132 = add <4 x i32> %933, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop132, <4 x i32>* %allocaVec36
  %934 = load <4 x i32>, <4 x i32>* %allocaVec36, align 4
  %extractE134 = extractelement <4 x i32> %934, i64 0
  %extractE135 = extractelement <4 x i32> %934, i64 1
  %extractE136 = extractelement <4 x i32> %934, i64 2
  %sum137 = add i32 %extractE134, %extractE135
  %sum138 = add i32 %sum137, %extractE136
  %935 = add nsw i32 %932, 1
  %Fmul133 = mul i32 %935, 3
  store i32 %935, i32* %Recovery10
  %Fcmp139 = icmp ne i32 %sum138, %Fmul133
  br i1 %Fcmp139, label %936, label %940

; <label>:936:                                    ; preds = %931
  %remThree148 = sdiv i32 %sum138, %extractE134
  %FcmpThree149 = icmp ne i32 %remThree148, 3
  br i1 %FcmpThree149, label %937, label %938

; <label>:937:                                    ; preds = %936
  store i32 %935, i32* %Recovery10, align 4
  br label %939

; <label>:938:                                    ; preds = %936
  store i32 %extractE134, i32* %Recovery10, align 4
  br label %939

; <label>:939:                                    ; preds = %938, %937
  br label %940

; <label>:940:                                    ; preds = %931, %939
  %ReplaceInst154 = load i32, i32* %Recovery10, align 4
  store i32 %ReplaceInst154, i32* %39, align 4
  br label %871

; <label>:941:                                    ; preds = %871
  %942 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %943 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %944 = load i32, i32* %36, align 4
  call arm_aapcscc void @ResvFrameEnd(%struct.lame_global_flags* %942, %struct.III_side_info_t* %943, i32 %944)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @VBR_compare(i32, double, double, double, i32, double, double, double) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec1 = alloca <2 x double>, align 16
  %10 = alloca double, align 8
  %allocaVec2 = alloca <2 x double>, align 16
  %11 = alloca double, align 8
  %allocaVec3 = alloca <2 x double>, align 16
  %12 = alloca double, align 8
  %allocaVec4 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %allocaVec5 = alloca <2 x double>, align 16
  %14 = alloca double, align 8
  %allocaVec6 = alloca <2 x double>, align 16
  %15 = alloca double, align 8
  %allocaVec7 = alloca <2 x double>, align 16
  %16 = alloca double, align 8
  %allocaVec8 = alloca <4 x i32>, align 16
  %17 = alloca i32, align 4
  store i32 %0, i32* %9, align 4
  store double %1, double* %10, align 8
  store double %2, double* %11, align 8
  store double %3, double* %12, align 8
  store i32 %4, i32* %13, align 4
  store double %5, double* %14, align 8
  store double %6, double* %15, align 8
  store double %7, double* %16, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec8
  store i32 0, i32* %17, align 4
  %18 = load i32, i32* %13, align 4
  %19 = load i32, i32* %9, align 4
  %20 = icmp sle i32 %18, %19
  br i1 %20, label %21, label %33

; <label>:21:                                     ; preds = %8
  %22 = load double, double* %15, align 8
  %23 = load double, double* %11, align 8
  %24 = fcmp ole double %22, %23
  br i1 %24, label %25, label %33

; <label>:25:                                     ; preds = %21
  %26 = load double, double* %14, align 8
  %27 = load double, double* %10, align 8
  %28 = fcmp ole double %26, %27
  br i1 %28, label %29, label %33

; <label>:29:                                     ; preds = %25
  %30 = load double, double* %16, align 8
  %31 = load double, double* %12, align 8
  %32 = fcmp ole double %30, %31
  br label %33

; <label>:33:                                     ; preds = %29, %25, %21, %8
  %34 = phi i1 [ false, %25 ], [ false, %21 ], [ false, %8 ], [ %32, %29 ]
  %35 = zext i1 %34 to i32
  store i32 %35, i32* %17, align 4
  %36 = load i32, i32* %17, align 4
  ret i32 %36
}

; Function Attrs: nounwind
define arm_aapcscc void @iteration_init(%struct.lame_global_flags*, %struct.III_side_info_t*, [2 x [576 x i32]]*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec13 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec14 = alloca <2 x double>, align 16
  %CastInst3 = alloca double, align 4
  %CastInstVec4 = alloca <2 x double>, align 16
  %allocaVec15 = alloca <2 x double>, align 16
  %CastInst5 = alloca double, align 4
  %CastInstVec6 = alloca <2 x double>, align 16
  %allocaVec16 = alloca <2 x double>, align 16
  %CastInst7 = alloca double, align 4
  %CastInstVec8 = alloca <2 x double>, align 16
  %allocaVec17 = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %allocaVec18 = alloca <2 x double>, align 16
  %CallInst9 = alloca double, align 4
  %CallInstVec10 = alloca <2 x double>, align 16
  %4 = alloca %struct.lame_global_flags*, align 4
  %5 = alloca %struct.III_side_info_t*, align 4
  %6 = alloca [2 x [576 x i32]]*, align 4
  %7 = alloca %struct.gr_info*, align 4
  %allocaVec19 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec20 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec21 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %4, align 4
  store %struct.III_side_info_t* %1, %struct.III_side_info_t** %5, align 4
  store [2 x [576 x i32]]* %2, [2 x [576 x i32]]** %6, align 4
  %11 = load %struct.III_side_info_t*, %struct.III_side_info_t** %5, align 4
  %12 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %11, i32 0, i32 2
  store i32 0, i32* %12, align 4
  %13 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %14 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %13, i32 0, i32 39
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %168

; <label>:17:                                     ; preds = %3
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec21
  store i32 0, i32* %10, align 4
  br label %18

; <label>:18:                                     ; preds = %37, %17
  %19 = load i32, i32* %10, align 4
  %20 = icmp slt i32 %19, 23
  br i1 %20, label %21, label %41

; <label>:21:                                     ; preds = %18
  %22 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %23 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %22, i32 0, i32 51
  %24 = load i32, i32* %23, align 4
  %25 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %26 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %25, i32 0, i32 43
  %27 = load i32, i32* %26, align 4
  %28 = mul nsw i32 %27, 3
  %29 = add nsw i32 %24, %28
  %30 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i32 0, i32 %29
  %31 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* %30, i32 0, i32 0
  %32 = load i32, i32* %10, align 4
  %33 = getelementptr inbounds [23 x i32], [23 x i32]* %31, i32 0, i32 %32
  %34 = load i32, i32* %33, align 4
  %35 = load i32, i32* %10, align 4
  %36 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %35
  store i32 %34, i32* %36, align 4
  br label %37

; <label>:37:                                     ; preds = %21
  %38 = load i32, i32* %10, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %38, i32 0
  %insertElmt22 = insertelement <4 x i32> %insertElmt, i32 %38, i32 1
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %38, i32 2
  %insertElmt24 = insertelement <4 x i32> %insertElmt23, i32 %38, i32 3
  store <4 x i32> %insertElmt24, <4 x i32>* %allocaVec21, align 16
  %39 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop = add <4 x i32> %39, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec21
  %40 = add nsw i32 %38, 1
  store i32 %40, i32* %10, align 4
  br label %18

; <label>:41:                                     ; preds = %18
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec21
  store i32 0, i32* %10, align 4
  br label %42

; <label>:42:                                     ; preds = %61, %41
  %43 = load i32, i32* %10, align 4
  %44 = icmp slt i32 %43, 14
  br i1 %44, label %45, label %65

; <label>:45:                                     ; preds = %42
  %46 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %47 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %46, i32 0, i32 51
  %48 = load i32, i32* %47, align 4
  %49 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %50 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %49, i32 0, i32 43
  %51 = load i32, i32* %50, align 4
  %52 = mul nsw i32 %51, 3
  %53 = add nsw i32 %48, %52
  %54 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i32 0, i32 %53
  %55 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* %54, i32 0, i32 1
  %56 = load i32, i32* %10, align 4
  %57 = getelementptr inbounds [14 x i32], [14 x i32]* %55, i32 0, i32 %56
  %58 = load i32, i32* %57, align 4
  %59 = load i32, i32* %10, align 4
  %60 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %59
  store i32 %58, i32* %60, align 4
  br label %61

; <label>:61:                                     ; preds = %45
  %62 = load i32, i32* %10, align 4
  %63 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop25 = add <4 x i32> %63, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop25, <4 x i32>* %allocaVec21
  %64 = add nsw i32 %62, 1
  store i32 %64, i32* %10, align 4
  br label %42

; <label>:65:                                     ; preds = %42
  %66 = load %struct.III_side_info_t*, %struct.III_side_info_t** %5, align 4
  %67 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %66, i32 0, i32 0
  store i32 0, i32* %67, align 4
  %68 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  call arm_aapcscc void @compute_ath(%struct.lame_global_flags* %68, double* getelementptr inbounds ([21 x double], [21 x double]* @ATH_l, i32 0, i32 0), double* getelementptr inbounds ([21 x double], [21 x double]* @ATH_s, i32 0, i32 0))
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec21
  store i32 0, i32* %10, align 4
  br label %69

; <label>:69:                                     ; preds = %78, %65
  %70 = load i32, i32* %10, align 4
  %71 = icmp slt i32 %70, 8208
  br i1 %71, label %72, label %82

; <label>:72:                                     ; preds = %69
  %73 = load i32, i32* %10, align 4
  %74 = sitofp i32 %73 to double
  %75 = call arm_aapcscc double @pow(double %74, double 0x3FF5555555555555) #7
  %76 = load i32, i32* %10, align 4
  %77 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %76
  store double %75, double* %77, align 8
  br label %78

; <label>:78:                                     ; preds = %72
  %79 = load i32, i32* %10, align 4
  %80 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop26 = add <4 x i32> %80, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop26, <4 x i32>* %allocaVec21
  %81 = add nsw i32 %79, 1
  store i32 %81, i32* %10, align 4
  br label %69

; <label>:82:                                     ; preds = %69
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec21
  store i32 0, i32* %10, align 4
  br label %83

; <label>:83:                                     ; preds = %104, %82
  %84 = load i32, i32* %10, align 4
  %85 = icmp slt i32 %84, 8207
  br i1 %85, label %86, label %108

; <label>:86:                                     ; preds = %83
  %87 = load i32, i32* %10, align 4
  %88 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop27 = add <4 x i32> %88, <i32 1, i32 1, i32 1, i32 1>
  %89 = add nsw i32 %87, 1
  %90 = sitofp i32 %89 to double
  %91 = load i32, i32* %10, align 4
  %92 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %91
  %93 = load double, double* %92, align 8
  %94 = load i32, i32* %10, align 4
  %95 = add nsw i32 %94, 1
  %96 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %95
  %97 = load double, double* %96, align 8
  %98 = fadd double %93, %97
  %99 = fmul double 5.000000e-01, %98
  %100 = call arm_aapcscc double @pow(double %99, double 7.500000e-01) #7
  %101 = fsub double %90, %100
  %102 = load i32, i32* %10, align 4
  %103 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %102
  store double %101, double* %103, align 8
  br label %104

; <label>:104:                                    ; preds = %86
  %105 = load i32, i32* %10, align 4
  %106 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop28 = add <4 x i32> %106, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop28, <4 x i32>* %allocaVec21
  %107 = add nsw i32 %105, 1
  store i32 %107, i32* %10, align 4
  br label %83

; <label>:108:                                    ; preds = %83
  %109 = load i32, i32* %10, align 4
  %110 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %109
  store double 5.000000e-01, double* %110, align 8
  store double 0.000000e+00, double* getelementptr inbounds ([8208 x double], [8208 x double]* @adj43asm, i32 0, i32 0), align 8
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec21
  store i32 1, i32* %10, align 4
  br label %111

; <label>:111:                                    ; preds = %134, %108
  %112 = load i32, i32* %10, align 4
  %113 = icmp slt i32 %112, 8208
  br i1 %113, label %114, label %138

; <label>:114:                                    ; preds = %111
  %115 = load i32, i32* %10, align 4
  %116 = sitofp i32 %115 to double
  store double %116, double* %CastInst3
  %117 = load double, double* %CastInst3, align 4
  %insertCast = insertelement <2 x double> undef, double %117, i32 0
  %insertCast29 = insertelement <2 x double> %insertCast, double %117, i32 1
  store <2 x double> %insertCast29, <2 x double>* %CastInstVec4, align 4
  %118 = load <2 x double>, <2 x double>* %CastInstVec4, align 4
  %Vop30 = fsub <2 x double> %118, <double 5.000000e-01, double 5.000000e-01>
  %119 = fsub double %116, 5.000000e-01
  %120 = load i32, i32* %10, align 4
  %121 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop31 = sub <4 x i32> %121, <i32 1, i32 1, i32 1, i32 1>
  %122 = sub nsw i32 %120, 1
  %123 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %122
  %124 = load double, double* %123, align 8
  %125 = load i32, i32* %10, align 4
  %126 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %125
  %127 = load double, double* %126, align 8
  %128 = fadd double %124, %127
  %129 = fmul double 5.000000e-01, %128
  %130 = call arm_aapcscc double @pow(double %129, double 7.500000e-01) #7
  %131 = fsub double %119, %130
  %132 = load i32, i32* %10, align 4
  %133 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43asm, i32 0, i32 %132
  store double %131, double* %133, align 8
  br label %134

; <label>:134:                                    ; preds = %114
  %135 = load i32, i32* %10, align 4
  %136 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop32 = add <4 x i32> %136, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop32, <4 x i32>* %allocaVec21
  %137 = add nsw i32 %135, 1
  store i32 %137, i32* %10, align 4
  br label %111

; <label>:138:                                    ; preds = %111
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec21
  store i32 0, i32* %10, align 4
  br label %139

; <label>:139:                                    ; preds = %163, %138
  %140 = load i32, i32* %10, align 4
  %141 = icmp slt i32 %140, 256
  br i1 %141, label %142, label %167

; <label>:142:                                    ; preds = %139
  %143 = load i32, i32* %10, align 4
  %144 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop33 = sub <4 x i32> %144, <i32 210, i32 210, i32 210, i32 210>
  %145 = sub nsw i32 %143, 210
  %146 = sitofp i32 %145 to double
  store double %146, double* %CastInst5
  %147 = load double, double* %CastInst5, align 4
  %insertCast34 = insertelement <2 x double> undef, double %147, i32 0
  %insertCast35 = insertelement <2 x double> %insertCast34, double %147, i32 1
  store <2 x double> %insertCast35, <2 x double>* %CastInstVec6, align 4
  %148 = load <2 x double>, <2 x double>* %CastInstVec6, align 4
  %Vop36 = fmul <2 x double> %148, <double -1.875000e-01, double -1.875000e-01>
  %149 = fmul double %146, -1.875000e-01
  %150 = call arm_aapcscc double @pow(double 2.000000e+00, double %149) #7
  %151 = load i32, i32* %10, align 4
  %152 = getelementptr inbounds [256 x double], [256 x double]* @ipow20, i32 0, i32 %151
  store double %150, double* %152, align 8
  %153 = load i32, i32* %10, align 4
  %154 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop37 = sub <4 x i32> %154, <i32 210, i32 210, i32 210, i32 210>
  %155 = sub nsw i32 %153, 210
  %156 = sitofp i32 %155 to double
  store double %156, double* %CastInst7
  %157 = load double, double* %CastInst7, align 4
  %insertCast38 = insertelement <2 x double> undef, double %157, i32 0
  %insertCast39 = insertelement <2 x double> %insertCast38, double %157, i32 1
  store <2 x double> %insertCast39, <2 x double>* %CastInstVec8, align 4
  %158 = load <2 x double>, <2 x double>* %CastInstVec8, align 4
  %Vop40 = fmul <2 x double> %158, <double 2.500000e-01, double 2.500000e-01>
  %159 = fmul double %156, 2.500000e-01
  %160 = call arm_aapcscc double @pow(double 2.000000e+00, double %159) #7
  %161 = load i32, i32* %10, align 4
  %162 = getelementptr inbounds [256 x double], [256 x double]* @pow20, i32 0, i32 %161
  store double %160, double* %162, align 8
  br label %163

; <label>:163:                                    ; preds = %142
  %164 = load i32, i32* %10, align 4
  %165 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop41 = add <4 x i32> %165, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop41, <4 x i32>* %allocaVec21
  %166 = add nsw i32 %164, 1
  store i32 %166, i32* %10, align 4
  br label %139

; <label>:167:                                    ; preds = %139
  br label %168

; <label>:168:                                    ; preds = %167, %3
  store i32 0, i32* @convert_mdct, align 4
  store i32 0, i32* @reduce_sidechannel, align 4
  %169 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %170 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %169, i32 0, i32 52
  %171 = load i32, i32* %170, align 4
  %172 = icmp eq i32 %171, 2
  br i1 %172, label %173, label %174

; <label>:173:                                    ; preds = %168
  store i32 1, i32* @convert_mdct, align 4
  store i32 1, i32* @reduce_sidechannel, align 4
  br label %174

; <label>:174:                                    ; preds = %173, %168
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec20
  store i32 0, i32* %9, align 4
  br label %175

; <label>:175:                                    ; preds = %226, %174
  %176 = load i32, i32* %9, align 4
  %177 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %178 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %177, i32 0, i32 45
  %179 = load i32, i32* %178, align 4
  %180 = icmp slt i32 %176, %179
  br i1 %180, label %181, label %227

; <label>:181:                                    ; preds = %175
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec19
  store i32 0, i32* %8, align 4
  br label %182

; <label>:182:                                    ; preds = %212, %181
  %183 = load i32, i32* %8, align 4
  %184 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %185 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %184, i32 0, i32 46
  %186 = load i32, i32* %185, align 4
  %187 = icmp slt i32 %183, %186
  br i1 %187, label %188, label %216

; <label>:188:                                    ; preds = %182
  %189 = load %struct.III_side_info_t*, %struct.III_side_info_t** %5, align 4
  %190 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %189, i32 0, i32 4
  %191 = load i32, i32* %9, align 4
  %192 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %190, i32 0, i32 %191
  %193 = getelementptr inbounds %struct.anon, %struct.anon* %192, i32 0, i32 0
  %194 = load i32, i32* %8, align 4
  %195 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %193, i32 0, i32 %194
  %196 = bitcast %struct.gr_info_ss* %195 to %struct.gr_info*
  store %struct.gr_info* %196, %struct.gr_info** %7, align 4
  %197 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %198 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %197, i32 0, i32 6
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 2
  br i1 %200, label %201, label %206

; <label>:201:                                    ; preds = %188
  %202 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %203 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %202, i32 0, i32 16
  store i32 0, i32* %203, align 4
  %204 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %205 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %204, i32 0, i32 17
  store i32 0, i32* %205, align 4
  br label %211

; <label>:206:                                    ; preds = %188
  %207 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %208 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %207, i32 0, i32 16
  store i32 21, i32* %208, align 4
  %209 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %210 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %209, i32 0, i32 17
  store i32 12, i32* %210, align 4
  br label %211

; <label>:211:                                    ; preds = %206, %201
  br label %212

; <label>:212:                                    ; preds = %211
  %213 = load i32, i32* %8, align 4
  %insertElmt42 = insertelement <4 x i32> undef, i32 %213, i32 0
  %insertElmt43 = insertelement <4 x i32> %insertElmt42, i32 %213, i32 1
  %insertElmt44 = insertelement <4 x i32> %insertElmt43, i32 %213, i32 2
  %insertElmt45 = insertelement <4 x i32> %insertElmt44, i32 %213, i32 3
  store <4 x i32> %insertElmt45, <4 x i32>* %allocaVec19, align 16
  %214 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop46 = add <4 x i32> %214, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop46, <4 x i32>* %allocaVec19
  %215 = add nsw i32 %213, 1
  store i32 %215, i32* %8, align 4
  br label %182

; <label>:216:                                    ; preds = %182
  br label %217

; <label>:217:                                    ; preds = %216
  %218 = load i32, i32* %9, align 4
  %insertElmt47 = insertelement <4 x i32> undef, i32 %218, i32 0
  %insertElmt48 = insertelement <4 x i32> %insertElmt47, i32 %218, i32 1
  %insertElmt49 = insertelement <4 x i32> %insertElmt48, i32 %218, i32 2
  %insertElmt50 = insertelement <4 x i32> %insertElmt49, i32 %218, i32 3
  store <4 x i32> %insertElmt50, <4 x i32>* %allocaVec20, align 16
  %219 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop51 = add <4 x i32> %219, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop51, <4 x i32>* %allocaVec20
  %220 = load <4 x i32>, <4 x i32>* %allocaVec20, align 4
  %extractE = extractelement <4 x i32> %220, i64 0
  %extractE52 = extractelement <4 x i32> %220, i64 1
  %extractE53 = extractelement <4 x i32> %220, i64 2
  %sum = add i32 %extractE, %extractE52
  %sum54 = add i32 %sum, %extractE53
  %221 = add nsw i32 %218, 1
  %Fmul = mul i32 %221, 3
  store i32 %221, i32* %Recovery
  %Fcmp = icmp ne i32 %sum54, %Fmul
  br i1 %Fcmp, label %222, label %226

; <label>:222:                                    ; preds = %217
  %remThree = sdiv i32 %sum54, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %223, label %224

; <label>:223:                                    ; preds = %222
  store i32 %221, i32* %Recovery, align 4
  br label %225

; <label>:224:                                    ; preds = %222
  store i32 %extractE, i32* %Recovery, align 4
  br label %225

; <label>:225:                                    ; preds = %224, %223
  br label %226

; <label>:226:                                    ; preds = %217, %225
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %9, align 4
  br label %175

; <label>:227:                                    ; preds = %175
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec19
  store i32 0, i32* %8, align 4
  br label %228

; <label>:228:                                    ; preds = %265, %227
  %229 = load i32, i32* %8, align 4
  %230 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %231 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %230, i32 0, i32 46
  %232 = load i32, i32* %231, align 4
  %233 = icmp slt i32 %229, %232
  br i1 %233, label %234, label %266

; <label>:234:                                    ; preds = %228
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec21
  store i32 0, i32* %10, align 4
  br label %235

; <label>:235:                                    ; preds = %254, %234
  %236 = load i32, i32* %10, align 4
  %237 = icmp slt i32 %236, 4
  br i1 %237, label %238, label %255

; <label>:238:                                    ; preds = %235
  %239 = load %struct.III_side_info_t*, %struct.III_side_info_t** %5, align 4
  %240 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %239, i32 0, i32 3
  %241 = load i32, i32* %8, align 4
  %242 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %240, i32 0, i32 %241
  %243 = load i32, i32* %10, align 4
  %244 = getelementptr inbounds [4 x i32], [4 x i32]* %242, i32 0, i32 %243
  store i32 0, i32* %244, align 4
  br label %245

; <label>:245:                                    ; preds = %238
  %246 = load i32, i32* %10, align 4
  %247 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop55 = add <4 x i32> %247, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop55, <4 x i32>* %allocaVec21
  %248 = load <4 x i32>, <4 x i32>* %allocaVec21, align 4
  %extractE57 = extractelement <4 x i32> %248, i64 0
  %extractE58 = extractelement <4 x i32> %248, i64 1
  %extractE59 = extractelement <4 x i32> %248, i64 2
  %sum60 = add i32 %extractE57, %extractE58
  %sum61 = add i32 %sum60, %extractE59
  %249 = add nsw i32 %246, 1
  %Fmul56 = mul i32 %249, 3
  store i32 %249, i32* %Recovery1
  %Fcmp62 = icmp ne i32 %sum61, %Fmul56
  br i1 %Fcmp62, label %250, label %254

; <label>:250:                                    ; preds = %245
  %remThree71 = sdiv i32 %sum61, %extractE57
  %FcmpThree72 = icmp ne i32 %remThree71, 3
  br i1 %FcmpThree72, label %251, label %252

; <label>:251:                                    ; preds = %250
  store i32 %249, i32* %Recovery1, align 4
  br label %253

; <label>:252:                                    ; preds = %250
  store i32 %extractE57, i32* %Recovery1, align 4
  br label %253

; <label>:253:                                    ; preds = %252, %251
  br label %254

; <label>:254:                                    ; preds = %245, %253
  %ReplaceInst75 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst75, i32* %10, align 4
  br label %235

; <label>:255:                                    ; preds = %235
  br label %256

; <label>:256:                                    ; preds = %255
  %257 = load i32, i32* %8, align 4
  %258 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop63 = add <4 x i32> %258, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop63, <4 x i32>* %allocaVec19
  %259 = load <4 x i32>, <4 x i32>* %allocaVec19, align 4
  %extractE65 = extractelement <4 x i32> %259, i64 0
  %extractE66 = extractelement <4 x i32> %259, i64 1
  %extractE67 = extractelement <4 x i32> %259, i64 2
  %sum68 = add i32 %extractE65, %extractE66
  %sum69 = add i32 %sum68, %extractE67
  %260 = add nsw i32 %257, 1
  %Fmul64 = mul i32 %260, 3
  store i32 %260, i32* %Recovery2
  %Fcmp70 = icmp ne i32 %sum69, %Fmul64
  br i1 %Fcmp70, label %261, label %265

; <label>:261:                                    ; preds = %256
  %remThree73 = sdiv i32 %sum69, %extractE65
  %FcmpThree74 = icmp ne i32 %remThree73, 3
  br i1 %FcmpThree74, label %262, label %263

; <label>:262:                                    ; preds = %261
  store i32 %260, i32* %Recovery2, align 4
  br label %264

; <label>:263:                                    ; preds = %261
  store i32 %extractE65, i32* %Recovery2, align 4
  br label %264

; <label>:264:                                    ; preds = %263, %262
  br label %265

; <label>:265:                                    ; preds = %256, %264
  %ReplaceInst76 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst76, i32* %8, align 4
  br label %228

; <label>:266:                                    ; preds = %228
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @compute_ath(%struct.lame_global_flags*, double*, double*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec7 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec8 = alloca <2 x double>, align 16
  %CastInst2 = alloca double, align 4
  %CastInstVec3 = alloca <2 x double>, align 16
  %allocaVec9 = alloca <2 x double>, align 16
  %CastInst4 = alloca double, align 4
  %CastInstVec5 = alloca <2 x double>, align 16
  %4 = alloca %struct.lame_global_flags*, align 4
  %5 = alloca double*, align 4
  %6 = alloca double*, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec14 = alloca <2 x double>, align 16
  %11 = alloca double, align 8
  %allocaVec15 = alloca <2 x double>, align 16
  %12 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %4, align 4
  store double* %1, double** %5, align 4
  store double* %2, double** %6, align 4
  %13 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %14 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %13, i32 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = sitofp i32 %15 to double
  store double %16, double* %CastInst
  %17 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %17, i32 0
  %insertCast16 = insertelement <2 x double> %insertCast, double %17, i32 1
  store <2 x double> %insertCast16, <2 x double>* %CastInstVec, align 4
  %18 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %Vop = fdiv <2 x double> %18, <double 1.000000e+03, double 1.000000e+03>
  store <2 x double> %Vop, <2 x double>* %allocaVec15
  %19 = fdiv double %16, 1.000000e+03
  store double %19, double* %12, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec10
  store i32 0, i32* %7, align 4
  br label %20

; <label>:20:                                     ; preds = %74, %3
  %21 = load i32, i32* %7, align 4
  %22 = icmp slt i32 %21, 21
  br i1 %22, label %23, label %78

; <label>:23:                                     ; preds = %20
  %24 = load i32, i32* %7, align 4
  %25 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %24
  %26 = load i32, i32* %25, align 4
  store i32 %26, i32* %9, align 4
  %27 = load i32, i32* %7, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %27, i32 0
  %insertElmt17 = insertelement <4 x i32> %insertElmt, i32 %27, i32 1
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %27, i32 2
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %27, i32 3
  store <4 x i32> %insertElmt19, <4 x i32>* %allocaVec10, align 16
  %28 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop20 = add <4 x i32> %28, <i32 1, i32 1, i32 1, i32 1>
  %29 = add nsw i32 %27, 1
  %30 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %29
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %10, align 4
  %32 = load double*, double** %5, align 4
  %33 = load i32, i32* %7, align 4
  %34 = getelementptr inbounds double, double* %32, i32 %33
  store double 1.000000e+99, double* %34, align 8
  %35 = load i32, i32* %9, align 4
  store i32 %35, i32* %8, align 4
  br label %36

; <label>:36:                                     ; preds = %69, %23
  %37 = load i32, i32* %8, align 4
  %38 = load i32, i32* %10, align 4
  %39 = icmp slt i32 %37, %38
  br i1 %39, label %40, label %73

; <label>:40:                                     ; preds = %36
  %41 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %42 = load double, double* %12, align 8
  %43 = load i32, i32* %8, align 4
  %44 = sitofp i32 %43 to double
  %45 = load <2 x double>, <2 x double>* %allocaVec15, align 16
  store double %44, double* %CastInst2
  %46 = load double, double* %CastInst2, align 4
  %insertCast21 = insertelement <2 x double> undef, double %46, i32 0
  %insertCast22 = insertelement <2 x double> %insertCast21, double %46, i32 1
  store <2 x double> %insertCast22, <2 x double>* %CastInstVec3, align 4
  %47 = load <2 x double>, <2 x double>* %CastInstVec3, align 4
  %Vop23 = fmul <2 x double> %45, %47
  %48 = fmul double %42, %44
  %Vop24 = fdiv <2 x double> %Vop23, <double 1.152000e+03, double 1.152000e+03>
  %49 = fdiv double %48, 1.152000e+03
  %50 = call arm_aapcscc double @ATHformula(%struct.lame_global_flags* %41, double %49)
  store double %50, double* %11, align 8
  %51 = load double*, double** %5, align 4
  %52 = load i32, i32* %7, align 4
  %53 = getelementptr inbounds double, double* %51, i32 %52
  %54 = load double, double* %53, align 8
  %55 = load double, double* %11, align 8
  %56 = fcmp olt double %54, %55
  br i1 %56, label %57, label %62

; <label>:57:                                     ; preds = %40
  %58 = load double*, double** %5, align 4
  %59 = load i32, i32* %7, align 4
  %60 = getelementptr inbounds double, double* %58, i32 %59
  %61 = load double, double* %60, align 8
  br label %64

; <label>:62:                                     ; preds = %40
  %63 = load double, double* %11, align 8
  br label %64

; <label>:64:                                     ; preds = %62, %57
  %65 = phi double [ %61, %57 ], [ %63, %62 ]
  %66 = load double*, double** %5, align 4
  %67 = load i32, i32* %7, align 4
  %68 = getelementptr inbounds double, double* %66, i32 %67
  store double %65, double* %68, align 8
  br label %69

; <label>:69:                                     ; preds = %64
  %70 = load i32, i32* %8, align 4
  %insertElmt25 = insertelement <4 x i32> undef, i32 %70, i32 0
  %insertElmt26 = insertelement <4 x i32> %insertElmt25, i32 %70, i32 1
  %insertElmt27 = insertelement <4 x i32> %insertElmt26, i32 %70, i32 2
  %insertElmt28 = insertelement <4 x i32> %insertElmt27, i32 %70, i32 3
  store <4 x i32> %insertElmt28, <4 x i32>* %allocaVec11, align 16
  %71 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop29 = add <4 x i32> %71, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop29, <4 x i32>* %allocaVec11
  %72 = add nsw i32 %70, 1
  store i32 %72, i32* %8, align 4
  br label %36

; <label>:73:                                     ; preds = %36
  br label %74

; <label>:74:                                     ; preds = %73
  %75 = load i32, i32* %7, align 4
  %insertElmt30 = insertelement <4 x i32> undef, i32 %75, i32 0
  %insertElmt31 = insertelement <4 x i32> %insertElmt30, i32 %75, i32 1
  %insertElmt32 = insertelement <4 x i32> %insertElmt31, i32 %75, i32 2
  %insertElmt33 = insertelement <4 x i32> %insertElmt32, i32 %75, i32 3
  store <4 x i32> %insertElmt33, <4 x i32>* %allocaVec10, align 16
  %76 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop34 = add <4 x i32> %76, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop34, <4 x i32>* %allocaVec10
  %77 = add nsw i32 %75, 1
  store i32 %77, i32* %7, align 4
  br label %20

; <label>:78:                                     ; preds = %20
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec10
  store i32 0, i32* %7, align 4
  br label %79

; <label>:79:                                     ; preds = %148, %78
  %80 = load i32, i32* %7, align 4
  %81 = icmp slt i32 %80, 12
  br i1 %81, label %82, label %149

; <label>:82:                                     ; preds = %79
  %83 = load i32, i32* %7, align 4
  %84 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %83
  %85 = load i32, i32* %84, align 4
  store i32 %85, i32* %9, align 4
  %86 = load i32, i32* %7, align 4
  %87 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop35 = add <4 x i32> %87, <i32 1, i32 1, i32 1, i32 1>
  %88 = add nsw i32 %86, 1
  %89 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %88
  %90 = load i32, i32* %89, align 4
  store i32 %90, i32* %10, align 4
  %91 = load double*, double** %6, align 4
  %92 = load i32, i32* %7, align 4
  %93 = getelementptr inbounds double, double* %91, i32 %92
  store double 1.000000e+99, double* %93, align 8
  %94 = load i32, i32* %9, align 4
  store i32 %94, i32* %8, align 4
  br label %95

; <label>:95:                                     ; preds = %137, %82
  %96 = load i32, i32* %8, align 4
  %97 = load i32, i32* %10, align 4
  %98 = icmp slt i32 %96, %97
  br i1 %98, label %99, label %138

; <label>:99:                                     ; preds = %95
  %100 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %101 = load double, double* %12, align 8
  %102 = load i32, i32* %8, align 4
  %103 = sitofp i32 %102 to double
  %104 = load <2 x double>, <2 x double>* %allocaVec15, align 16
  store double %103, double* %CastInst4
  %105 = load double, double* %CastInst4, align 4
  %insertCast36 = insertelement <2 x double> undef, double %105, i32 0
  %insertCast37 = insertelement <2 x double> %insertCast36, double %105, i32 1
  store <2 x double> %insertCast37, <2 x double>* %CastInstVec5, align 4
  %106 = load <2 x double>, <2 x double>* %CastInstVec5, align 4
  %Vop38 = fmul <2 x double> %104, %106
  %107 = fmul double %101, %103
  %Vop39 = fdiv <2 x double> %Vop38, <double 3.840000e+02, double 3.840000e+02>
  %108 = fdiv double %107, 3.840000e+02
  %109 = call arm_aapcscc double @ATHformula(%struct.lame_global_flags* %100, double %108)
  store double %109, double* %11, align 8
  %110 = load double*, double** %6, align 4
  %111 = load i32, i32* %7, align 4
  %112 = getelementptr inbounds double, double* %110, i32 %111
  %113 = load double, double* %112, align 8
  %114 = load double, double* %11, align 8
  %115 = fcmp olt double %113, %114
  br i1 %115, label %116, label %121

; <label>:116:                                    ; preds = %99
  %117 = load double*, double** %6, align 4
  %118 = load i32, i32* %7, align 4
  %119 = getelementptr inbounds double, double* %117, i32 %118
  %120 = load double, double* %119, align 8
  br label %123

; <label>:121:                                    ; preds = %99
  %122 = load double, double* %11, align 8
  br label %123

; <label>:123:                                    ; preds = %121, %116
  %124 = phi double [ %120, %116 ], [ %122, %121 ]
  %125 = load double*, double** %6, align 4
  %126 = load i32, i32* %7, align 4
  %127 = getelementptr inbounds double, double* %125, i32 %126
  store double %124, double* %127, align 8
  br label %128

; <label>:128:                                    ; preds = %123
  %129 = load i32, i32* %8, align 4
  %130 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop40 = add <4 x i32> %130, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop40, <4 x i32>* %allocaVec11
  %131 = load <4 x i32>, <4 x i32>* %allocaVec11, align 4
  %extractE = extractelement <4 x i32> %131, i64 0
  %extractE41 = extractelement <4 x i32> %131, i64 1
  %extractE42 = extractelement <4 x i32> %131, i64 2
  %sum = add i32 %extractE, %extractE41
  %sum43 = add i32 %sum, %extractE42
  %132 = add nsw i32 %129, 1
  %Fmul = mul i32 %132, 3
  store i32 %132, i32* %Recovery
  %Fcmp = icmp ne i32 %sum43, %Fmul
  br i1 %Fcmp, label %133, label %137

; <label>:133:                                    ; preds = %128
  %remThree = sdiv i32 %sum43, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %134, label %135

; <label>:134:                                    ; preds = %133
  store i32 %132, i32* %Recovery, align 4
  br label %136

; <label>:135:                                    ; preds = %133
  store i32 %extractE, i32* %Recovery, align 4
  br label %136

; <label>:136:                                    ; preds = %135, %134
  br label %137

; <label>:137:                                    ; preds = %128, %136
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %8, align 4
  br label %95

; <label>:138:                                    ; preds = %95
  br label %139

; <label>:139:                                    ; preds = %138
  %140 = load i32, i32* %7, align 4
  %141 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop44 = add <4 x i32> %141, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop44, <4 x i32>* %allocaVec10
  %142 = load <4 x i32>, <4 x i32>* %allocaVec10, align 4
  %extractE46 = extractelement <4 x i32> %142, i64 0
  %extractE47 = extractelement <4 x i32> %142, i64 1
  %extractE48 = extractelement <4 x i32> %142, i64 2
  %sum49 = add i32 %extractE46, %extractE47
  %sum50 = add i32 %sum49, %extractE48
  %143 = add nsw i32 %140, 1
  %Fmul45 = mul i32 %143, 3
  store i32 %143, i32* %Recovery1
  %Fcmp51 = icmp ne i32 %sum50, %Fmul45
  br i1 %Fcmp51, label %144, label %148

; <label>:144:                                    ; preds = %139
  %remThree52 = sdiv i32 %sum50, %extractE46
  %FcmpThree53 = icmp ne i32 %remThree52, 3
  br i1 %FcmpThree53, label %145, label %146

; <label>:145:                                    ; preds = %144
  store i32 %143, i32* %Recovery1, align 4
  br label %147

; <label>:146:                                    ; preds = %144
  store i32 %extractE46, i32* %Recovery1, align 4
  br label %147

; <label>:147:                                    ; preds = %146, %145
  br label %148

; <label>:148:                                    ; preds = %139, %147
  %ReplaceInst54 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst54, i32* %7, align 4
  br label %79

; <label>:149:                                    ; preds = %79
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc double @ATHformula(%struct.lame_global_flags*, double) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %allocaVec7 = alloca <2 x double>, align 16
  %CallInst1 = alloca double, align 4
  %CallInstVec2 = alloca <2 x double>, align 16
  %allocaVec8 = alloca <2 x double>, align 16
  %CallInst3 = alloca double, align 4
  %CallInstVec4 = alloca <2 x double>, align 16
  %allocaVec9 = alloca <2 x double>, align 16
  %CallInst5 = alloca double, align 4
  %CallInstVec6 = alloca <2 x double>, align 16
  %3 = alloca %struct.lame_global_flags*, align 4
  %allocaVec10 = alloca <2 x double>, align 16
  %4 = alloca double, align 8
  %allocaVec11 = alloca <2 x double>, align 16
  %5 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %3, align 4
  store double %1, double* %4, align 8
  %6 = load double, double* %4, align 8
  %7 = fcmp ogt double 2.000000e-02, %6
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %2
  br label %11

; <label>:9:                                      ; preds = %2
  %10 = load double, double* %4, align 8
  br label %11

; <label>:11:                                     ; preds = %9, %8
  %12 = phi double [ 2.000000e-02, %8 ], [ %10, %9 ]
  store double %12, double* %4, align 8
  %13 = load double, double* %4, align 8
  %14 = call arm_aapcscc double @pow(double %13, double -8.000000e-01) #7
  store double %14, double* %CallInst
  %15 = load double, double* %CallInst, align 4
  %insertCall = insertelement <2 x double> undef, double %15, i32 0
  %insertCall12 = insertelement <2 x double> %insertCall, double %15, i32 1
  store <2 x double> %insertCall12, <2 x double>* %CallInstVec, align 4
  %16 = load <2 x double>, <2 x double>* %CallInstVec, align 4
  %Vop = fmul <2 x double> <double 3.640000e+00, double 3.640000e+00>, %16
  %17 = fmul double 3.640000e+00, %14
  %18 = load double, double* %4, align 8
  %insertElmt = insertelement <2 x double> undef, double %18, i32 0
  %insertElmt13 = insertelement <2 x double> %insertElmt, double %18, i32 1
  store <2 x double> %insertElmt13, <2 x double>* %allocaVec10, align 16
  %19 = load <2 x double>, <2 x double>* %allocaVec10, align 16
  %Vop14 = fsub <2 x double> %19, <double 3.300000e+00, double 3.300000e+00>
  %20 = fsub double %18, 3.300000e+00
  %21 = call arm_aapcscc double @pow(double %20, double 2.000000e+00) #7
  store double %21, double* %CallInst1
  %22 = load double, double* %CallInst1, align 4
  %insertCall15 = insertelement <2 x double> undef, double %22, i32 0
  %insertCall16 = insertelement <2 x double> %insertCall15, double %22, i32 1
  store <2 x double> %insertCall16, <2 x double>* %CallInstVec2, align 4
  %23 = load <2 x double>, <2 x double>* %CallInstVec2, align 4
  %Vop17 = fmul <2 x double> <double -6.000000e-01, double -6.000000e-01>, %23
  %24 = fmul double -6.000000e-01, %21
  %25 = call arm_aapcscc double @exp(double %24) #7
  store double %25, double* %CallInst3
  %26 = load double, double* %CallInst3, align 4
  %insertCall18 = insertelement <2 x double> undef, double %26, i32 0
  %insertCall19 = insertelement <2 x double> %insertCall18, double %26, i32 1
  store <2 x double> %insertCall19, <2 x double>* %CallInstVec4, align 4
  %27 = load <2 x double>, <2 x double>* %CallInstVec4, align 4
  %Vop20 = fmul <2 x double> <double 6.500000e+00, double 6.500000e+00>, %27
  %28 = fmul double 6.500000e+00, %25
  %Vop21 = fsub <2 x double> %Vop, %Vop20
  %29 = fsub double %17, %28
  %30 = load double, double* %4, align 8
  %31 = call arm_aapcscc double @pow(double %30, double 4.000000e+00) #7
  store double %31, double* %CallInst5
  %32 = load double, double* %CallInst5, align 4
  %insertCall22 = insertelement <2 x double> undef, double %32, i32 0
  %insertCall23 = insertelement <2 x double> %insertCall22, double %32, i32 1
  store <2 x double> %insertCall23, <2 x double>* %CallInstVec6, align 4
  %33 = load <2 x double>, <2 x double>* %CallInstVec6, align 4
  %Vop24 = fmul <2 x double> <double 1.000000e-03, double 1.000000e-03>, %33
  %34 = fmul double 1.000000e-03, %31
  %Vop25 = fadd <2 x double> %Vop21, %Vop24
  store <2 x double> %Vop25, <2 x double>* %allocaVec11
  %35 = fadd double %29, %34
  store double %35, double* %5, align 8
  %36 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %37 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %36, i32 0, i32 34
  %38 = load i32, i32* %37, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %44

; <label>:40:                                     ; preds = %11
  %41 = load double, double* %5, align 8
  %42 = load <2 x double>, <2 x double>* %allocaVec11, align 16
  %Vop26 = fsub <2 x double> %42, <double 2.000000e+02, double 2.000000e+02>
  store <2 x double> %Vop26, <2 x double>* %allocaVec11
  %43 = fsub double %41, 2.000000e+02
  store double %43, double* %5, align 8
  br label %48

; <label>:44:                                     ; preds = %11
  %45 = load double, double* %5, align 8
  %46 = load <2 x double>, <2 x double>* %allocaVec11, align 16
  %Vop27 = fsub <2 x double> %46, <double 1.140000e+02, double 1.140000e+02>
  store <2 x double> %Vop27, <2 x double>* %allocaVec11
  %47 = fsub double %45, 1.140000e+02
  store double %47, double* %5, align 8
  br label %48

; <label>:48:                                     ; preds = %44, %40
  %49 = load double, double* %5, align 8
  %50 = load <2 x double>, <2 x double>* %allocaVec11, align 16
  %Vop28 = fdiv <2 x double> %50, <double 1.000000e+01, double 1.000000e+01>
  %51 = fdiv double %49, 1.000000e+01
  %52 = call arm_aapcscc double @pow(double 1.000000e+01, double %51) #7
  store double %52, double* %5, align 8
  %53 = load double, double* %5, align 8
  ret double %53
}

; Function Attrs: nounwind
define arm_aapcscc void @ms_convert([576 x double]*, [576 x double]*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %3 = alloca [576 x double]*, align 4
  %4 = alloca [576 x double]*, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec2 = alloca <2 x double>, align 16
  %6 = alloca double, align 8
  %allocaVec3 = alloca <2 x double>, align 16
  %7 = alloca double, align 8
  store [576 x double]* %0, [576 x double]** %3, align 4
  store [576 x double]* %1, [576 x double]** %4, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec1
  store i32 0, i32* %5, align 4
  br label %8

; <label>:8:                                      ; preds = %51, %2
  %9 = load i32, i32* %5, align 4
  %10 = icmp slt i32 %9, 576
  br i1 %10, label %11, label %52

; <label>:11:                                     ; preds = %8
  %12 = load [576 x double]*, [576 x double]** %4, align 4
  %13 = getelementptr inbounds [576 x double], [576 x double]* %12, i32 0
  %14 = load i32, i32* %5, align 4
  %15 = getelementptr inbounds [576 x double], [576 x double]* %13, i32 0, i32 %14
  %16 = load double, double* %15, align 8
  store double %16, double* %6, align 8
  %17 = load [576 x double]*, [576 x double]** %4, align 4
  %18 = getelementptr inbounds [576 x double], [576 x double]* %17, i32 1
  %19 = load i32, i32* %5, align 4
  %20 = getelementptr inbounds [576 x double], [576 x double]* %18, i32 0, i32 %19
  %21 = load double, double* %20, align 8
  store double %21, double* %7, align 8
  %22 = load double, double* %6, align 8
  %insertElmt = insertelement <2 x double> undef, double %22, i32 0
  %insertElmt4 = insertelement <2 x double> %insertElmt, double %22, i32 1
  store <2 x double> %insertElmt4, <2 x double>* %allocaVec2, align 16
  %23 = load double, double* %7, align 8
  %insertElmt5 = insertelement <2 x double> undef, double %23, i32 0
  %insertElmt6 = insertelement <2 x double> %insertElmt5, double %23, i32 1
  store <2 x double> %insertElmt6, <2 x double>* %allocaVec3, align 16
  %24 = load <2 x double>, <2 x double>* %allocaVec2, align 16
  %25 = load <2 x double>, <2 x double>* %allocaVec3, align 16
  %Vop = fadd <2 x double> %24, %25
  %26 = fadd double %22, %23
  %Vop7 = fmul <2 x double> %Vop, <double 0x3FE6A09E667F3BCD, double 0x3FE6A09E667F3BCD>
  %27 = fmul double %26, 0x3FE6A09E667F3BCD
  %28 = load [576 x double]*, [576 x double]** %3, align 4
  %29 = getelementptr inbounds [576 x double], [576 x double]* %28, i32 0
  %30 = load i32, i32* %5, align 4
  %31 = getelementptr inbounds [576 x double], [576 x double]* %29, i32 0, i32 %30
  store double %27, double* %31, align 8
  %32 = load double, double* %6, align 8
  %insertElmt8 = insertelement <2 x double> undef, double %32, i32 0
  %insertElmt9 = insertelement <2 x double> %insertElmt8, double %32, i32 1
  store <2 x double> %insertElmt9, <2 x double>* %allocaVec2, align 16
  %33 = load double, double* %7, align 8
  %insertElmt10 = insertelement <2 x double> undef, double %33, i32 0
  %insertElmt11 = insertelement <2 x double> %insertElmt10, double %33, i32 1
  store <2 x double> %insertElmt11, <2 x double>* %allocaVec3, align 16
  %34 = load <2 x double>, <2 x double>* %allocaVec2, align 16
  %35 = load <2 x double>, <2 x double>* %allocaVec3, align 16
  %Vop12 = fsub <2 x double> %34, %35
  %36 = fsub double %32, %33
  %Vop13 = fmul <2 x double> %Vop12, <double 0x3FE6A09E667F3BCD, double 0x3FE6A09E667F3BCD>
  %37 = fmul double %36, 0x3FE6A09E667F3BCD
  %38 = load [576 x double]*, [576 x double]** %3, align 4
  %39 = getelementptr inbounds [576 x double], [576 x double]* %38, i32 1
  %40 = load i32, i32* %5, align 4
  %41 = getelementptr inbounds [576 x double], [576 x double]* %39, i32 0, i32 %40
  store double %37, double* %41, align 8
  br label %42

; <label>:42:                                     ; preds = %11
  %43 = load i32, i32* %5, align 4
  %insertElmt14 = insertelement <4 x i32> undef, i32 %43, i32 0
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %43, i32 1
  %insertElmt16 = insertelement <4 x i32> %insertElmt15, i32 %43, i32 2
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %43, i32 3
  store <4 x i32> %insertElmt17, <4 x i32>* %allocaVec1, align 16
  %44 = load <4 x i32>, <4 x i32>* %allocaVec1, align 16
  %Vop18 = add <4 x i32> %44, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop18, <4 x i32>* %allocaVec1
  %45 = load <4 x i32>, <4 x i32>* %allocaVec1, align 4
  %extractE = extractelement <4 x i32> %45, i64 0
  %extractE19 = extractelement <4 x i32> %45, i64 1
  %extractE20 = extractelement <4 x i32> %45, i64 2
  %sum = add i32 %extractE, %extractE19
  %sum21 = add i32 %sum, %extractE20
  %46 = add nsw i32 %43, 1
  %Fmul = mul i32 %46, 3
  store i32 %46, i32* %Recovery
  %Fcmp = icmp ne i32 %sum21, %Fmul
  br i1 %Fcmp, label %47, label %51

; <label>:47:                                     ; preds = %42
  %remThree = sdiv i32 %sum21, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %48, label %49

; <label>:48:                                     ; preds = %47
  store i32 %46, i32* %Recovery, align 4
  br label %50

; <label>:49:                                     ; preds = %47
  store i32 %extractE, i32* %Recovery, align 4
  br label %50

; <label>:50:                                     ; preds = %49, %48
  br label %51

; <label>:51:                                     ; preds = %42, %50
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %5, align 4
  br label %8

; <label>:52:                                     ; preds = %8
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @on_pe(%struct.lame_global_flags*, [2 x double]*, %struct.III_side_info_t*, i32*, i32, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %7 = alloca %struct.lame_global_flags*, align 4
  %8 = alloca [2 x double]*, align 4
  %9 = alloca %struct.III_side_info_t*, align 4
  %10 = alloca i32*, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %13 = alloca %struct.gr_info*, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %17 = alloca [2 x i32], align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %18 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %7, align 4
  store [2 x double]* %1, [2 x double]** %8, align 4
  store %struct.III_side_info_t* %2, %struct.III_side_info_t** %9, align 4
  store i32* %3, i32** %10, align 4
  store i32 %4, i32* %11, align 4
  store i32 %5, i32* %12, align 4
  %19 = load i32, i32* %11, align 4
  %20 = load i32, i32* %12, align 4
  call arm_aapcscc void @ResvMaxBits(i32 %19, i32* %15, i32* %14, i32 %20)
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec8
  store i32 0, i32* %18, align 4
  br label %21

; <label>:21:                                     ; preds = %139, %6
  %22 = load i32, i32* %18, align 4
  %23 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %24 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %23, i32 0, i32 46
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %22, %25
  br i1 %26, label %27, label %140

; <label>:27:                                     ; preds = %21
  %28 = load %struct.III_side_info_t*, %struct.III_side_info_t** %9, align 4
  %29 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %28, i32 0, i32 4
  %30 = load i32, i32* %12, align 4
  %31 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %29, i32 0, i32 %30
  %32 = getelementptr inbounds %struct.anon, %struct.anon* %31, i32 0, i32 0
  %33 = load i32, i32* %18, align 4
  %34 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %32, i32 0, i32 %33
  %35 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %34, i32 0, i32 0
  store %struct.gr_info* %35, %struct.gr_info** %13, align 4
  %36 = load i32, i32* %15, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %36, i32 0
  %insertElmt9 = insertelement <4 x i32> %insertElmt, i32 %36, i32 1
  %insertElmt10 = insertelement <4 x i32> %insertElmt9, i32 %36, i32 2
  %insertElmt11 = insertelement <4 x i32> %insertElmt10, i32 %36, i32 3
  store <4 x i32> %insertElmt11, <4 x i32>* %allocaVec6, align 16
  %37 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %38 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %37, i32 0, i32 46
  %39 = load i32, i32* %38, align 4
  %40 = sdiv i32 %36, %39
  %41 = load i32*, i32** %10, align 4
  %42 = load i32, i32* %18, align 4
  %43 = getelementptr inbounds i32, i32* %41, i32 %42
  store i32 %40, i32* %43, align 4
  store i32 0, i32* %16, align 4
  %44 = load [2 x double]*, [2 x double]** %8, align 4
  %45 = load i32, i32* %12, align 4
  %46 = getelementptr inbounds [2 x double], [2 x double]* %44, i32 %45
  %47 = load i32, i32* %18, align 4
  %48 = getelementptr inbounds [2 x double], [2 x double]* %46, i32 0, i32 %47
  %49 = load double, double* %48, align 8
  %50 = fsub double %49, 7.500000e+02
  %51 = fdiv double %50, 1.550000e+00
  %52 = fptosi double %51 to i32
  %53 = load i32, i32* %18, align 4
  %54 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %53
  store i32 %52, i32* %54, align 4
  %55 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %56 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %55, i32 0, i32 6
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 2
  br i1 %58, label %59, label %68

; <label>:59:                                     ; preds = %27
  %60 = load i32, i32* %18, align 4
  %61 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %60
  %62 = load i32, i32* %61, align 4
  %63 = icmp slt i32 %62, 500
  br i1 %63, label %64, label %67

; <label>:64:                                     ; preds = %59
  %65 = load i32, i32* %18, align 4
  %66 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %65
  store i32 500, i32* %66, align 4
  br label %67

; <label>:67:                                     ; preds = %64, %59
  br label %68

; <label>:68:                                     ; preds = %67, %27
  %69 = load i32, i32* %18, align 4
  %70 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %69
  %71 = load i32, i32* %70, align 4
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %73, label %76

; <label>:73:                                     ; preds = %68
  %74 = load i32, i32* %18, align 4
  %75 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %74
  store i32 0, i32* %75, align 4
  br label %76

; <label>:76:                                     ; preds = %73, %68
  %77 = load i32, i32* %18, align 4
  %78 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %77
  %79 = load i32, i32* %78, align 4
  %80 = load i32, i32* %16, align 4
  %81 = add nsw i32 %80, %79
  store i32 %81, i32* %16, align 4
  %82 = load i32, i32* %16, align 4
  %83 = load i32, i32* %14, align 4
  %84 = icmp sgt i32 %82, %83
  br i1 %84, label %85, label %95

; <label>:85:                                     ; preds = %76
  %86 = load i32, i32* %14, align 4
  %insertElmt12 = insertelement <4 x i32> undef, i32 %86, i32 0
  %insertElmt13 = insertelement <4 x i32> %insertElmt12, i32 %86, i32 1
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %86, i32 2
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %86, i32 3
  store <4 x i32> %insertElmt15, <4 x i32>* %allocaVec5, align 16
  %87 = load i32, i32* %18, align 4
  %88 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %87
  %89 = load i32, i32* %88, align 4
  %90 = mul nsw i32 %86, %89
  %91 = load i32, i32* %16, align 4
  %92 = sdiv i32 %90, %91
  %93 = load i32, i32* %18, align 4
  %94 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %93
  store i32 %92, i32* %94, align 4
  br label %95

; <label>:95:                                     ; preds = %85, %76
  %96 = load i32*, i32** %10, align 4
  %97 = load i32, i32* %18, align 4
  %98 = getelementptr inbounds i32, i32* %96, i32 %97
  %99 = load i32, i32* %98, align 4
  %100 = load i32, i32* %18, align 4
  %101 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %100
  %102 = load i32, i32* %101, align 4
  %103 = add nsw i32 %99, %102
  %104 = icmp sgt i32 %103, 4095
  br i1 %104, label %105, label %113

; <label>:105:                                    ; preds = %95
  %106 = load i32*, i32** %10, align 4
  %107 = load i32, i32* %18, align 4
  %108 = getelementptr inbounds i32, i32* %106, i32 %107
  %109 = load i32, i32* %108, align 4
  %110 = sub nsw i32 4095, %109
  %111 = load i32, i32* %18, align 4
  %112 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113:                                    ; preds = %105, %95
  %114 = load i32*, i32** %10, align 4
  %115 = load i32, i32* %18, align 4
  %116 = getelementptr inbounds i32, i32* %114, i32 %115
  %117 = load i32, i32* %116, align 4
  %118 = load i32, i32* %18, align 4
  %119 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %118
  %120 = load i32, i32* %119, align 4
  %121 = add nsw i32 %117, %120
  %122 = load i32*, i32** %10, align 4
  %123 = load i32, i32* %18, align 4
  %124 = getelementptr inbounds i32, i32* %122, i32 %123
  store i32 %121, i32* %124, align 4
  %125 = load i32, i32* %18, align 4
  %126 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %125
  %127 = load i32, i32* %126, align 4
  %128 = load i32, i32* %14, align 4
  %129 = sub nsw i32 %128, %127
  store i32 %129, i32* %14, align 4
  br label %130

; <label>:130:                                    ; preds = %113
  %131 = load i32, i32* %18, align 4
  %insertElmt16 = insertelement <4 x i32> undef, i32 %131, i32 0
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %131, i32 1
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %131, i32 2
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %131, i32 3
  store <4 x i32> %insertElmt19, <4 x i32>* %allocaVec8, align 16
  %132 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %Vop = add <4 x i32> %132, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec8
  %133 = load <4 x i32>, <4 x i32>* %allocaVec8, align 4
  %extractE = extractelement <4 x i32> %133, i64 0
  %extractE20 = extractelement <4 x i32> %133, i64 1
  %extractE21 = extractelement <4 x i32> %133, i64 2
  %sum = add i32 %extractE, %extractE20
  %sum22 = add i32 %sum, %extractE21
  %134 = add nsw i32 %131, 1
  %Fmul = mul i32 %134, 3
  store i32 %134, i32* %Recovery1
  %Fcmp = icmp ne i32 %sum22, %Fmul
  br i1 %Fcmp, label %135, label %139

; <label>:135:                                    ; preds = %130
  %remThree = sdiv i32 %sum22, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %136, label %137

; <label>:136:                                    ; preds = %135
  store i32 %134, i32* %Recovery1, align 4
  br label %138

; <label>:137:                                    ; preds = %135
  store i32 %extractE, i32* %Recovery1, align 4
  br label %138

; <label>:138:                                    ; preds = %137, %136
  br label %139

; <label>:139:                                    ; preds = %130, %138
  %ReplaceInst = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst, i32* %18, align 4
  br label %21

; <label>:140:                                    ; preds = %21
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @reduce_side(i32*, double, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec13 = alloca <4 x float>, align 16
  %CastInst = alloca float, align 4
  %CastInstVec = alloca <4 x float>, align 16
  %allocaVec14 = alloca <4 x float>, align 16
  %CastInst2 = alloca float, align 4
  %CastInstVec3 = alloca <4 x float>, align 16
  %allocaVec15 = alloca <4 x float>, align 16
  %CastInst4 = alloca float, align 4
  %CastInstVec5 = alloca <4 x float>, align 16
  %allocaVec16 = alloca <4 x float>, align 16
  %CastInst6 = alloca float, align 4
  %CastInstVec7 = alloca <4 x float>, align 16
  %allocaVec17 = alloca <4 x float>, align 16
  %CastInst8 = alloca float, align 4
  %CastInstVec9 = alloca <4 x float>, align 16
  %allocaVec18 = alloca <4 x float>, align 16
  %CastInst10 = alloca float, align 4
  %CastInstVec11 = alloca <4 x float>, align 16
  %4 = alloca i32*, align 4
  %allocaVec19 = alloca <2 x double>, align 16
  %5 = alloca double, align 8
  %allocaVec20 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec21 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec22 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec23 = alloca <4 x float>, align 16
  %9 = alloca float, align 4
  %allocaVec24 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  store i32* %0, i32** %4, align 4
  store double %1, double* %5, align 8
  store i32 %2, i32* %6, align 4
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %allocaVec22
  store i32 2, i32* %8, align 4
  %11 = load double, double* %5, align 8
  %insertElmt = insertelement <2 x double> undef, double %11, i32 0
  %insertElmt25 = insertelement <2 x double> %insertElmt, double %11, i32 1
  store <2 x double> %insertElmt25, <2 x double>* %allocaVec19, align 16
  %12 = load <2 x double>, <2 x double>* %allocaVec19, align 16
  %Vop = fsub <2 x double> <double 5.000000e-01, double 5.000000e-01>, %12
  %13 = fsub double 5.000000e-01, %11
  %Vop26 = fmul <2 x double> <double 3.300000e-01, double 3.300000e-01>, %Vop
  %14 = fmul double 3.300000e-01, %13
  %Vop27 = fdiv <2 x double> %Vop26, <double 5.000000e-01, double 5.000000e-01>
  %15 = fdiv double %14, 5.000000e-01
  %16 = fptrunc double %15 to float
  store float %16, float* %9, align 4
  %17 = load float, float* %9, align 4
  %18 = fcmp olt float %17, 0.000000e+00
  br i1 %18, label %19, label %20

; <label>:19:                                     ; preds = %3
  store <4 x float> zeroinitializer, <4 x float>* %allocaVec23
  store float 0.000000e+00, float* %9, align 4
  br label %20

; <label>:20:                                     ; preds = %19, %3
  %21 = load i32*, i32** %4, align 4
  %22 = getelementptr inbounds i32, i32* %21, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = icmp sge i32 %23, 125
  br i1 %24, label %25, label %90

; <label>:25:                                     ; preds = %20
  %26 = load i32*, i32** %4, align 4
  %27 = getelementptr inbounds i32, i32* %26, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = sitofp i32 %28 to float
  %30 = load i32*, i32** %4, align 4
  %31 = getelementptr inbounds i32, i32* %30, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = sitofp i32 %32 to float
  %34 = load float, float* %9, align 4
  %insertElmt28 = insertelement <4 x float> undef, float %34, i32 0
  %insertElmt29 = insertelement <4 x float> %insertElmt28, float %34, i32 1
  %insertElmt30 = insertelement <4 x float> %insertElmt29, float %34, i32 2
  %insertElmt31 = insertelement <4 x float> %insertElmt30, float %34, i32 3
  store <4 x float> %insertElmt31, <4 x float>* %allocaVec23, align 16
  store float %33, float* %CastInst
  %35 = load float, float* %CastInst, align 4
  %insertCast = insertelement <4 x float> undef, float %35, i32 0
  %insertCast32 = insertelement <4 x float> %insertCast, float %35, i32 1
  %insertCast33 = insertelement <4 x float> %insertCast32, float %35, i32 2
  %insertCast34 = insertelement <4 x float> %insertCast33, float %35, i32 3
  store <4 x float> %insertCast34, <4 x float>* %CastInstVec, align 4
  %36 = load <4 x float>, <4 x float>* %CastInstVec, align 4
  %37 = load <4 x float>, <4 x float>* %allocaVec23, align 16
  %Vop35 = fmul <4 x float> %36, %37
  %38 = fmul float %33, %34
  store float %29, float* %CastInst2
  %39 = load float, float* %CastInst2, align 4
  %insertCast36 = insertelement <4 x float> undef, float %39, i32 0
  %insertCast37 = insertelement <4 x float> %insertCast36, float %39, i32 1
  %insertCast38 = insertelement <4 x float> %insertCast37, float %39, i32 2
  %insertCast39 = insertelement <4 x float> %insertCast38, float %39, i32 3
  store <4 x float> %insertCast39, <4 x float>* %CastInstVec3, align 4
  %40 = load <4 x float>, <4 x float>* %CastInstVec3, align 4
  %Vop40 = fsub <4 x float> %40, %Vop35
  %41 = fsub float %29, %38
  %42 = fcmp ogt float %41, 1.250000e+02
  br i1 %42, label %43, label %78

; <label>:43:                                     ; preds = %25
  %44 = load i32*, i32** %4, align 4
  %45 = getelementptr inbounds i32, i32* %44, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = sitofp i32 %46 to float
  %48 = load float, float* %9, align 4
  %insertElmt41 = insertelement <4 x float> undef, float %48, i32 0
  %insertElmt42 = insertelement <4 x float> %insertElmt41, float %48, i32 1
  %insertElmt43 = insertelement <4 x float> %insertElmt42, float %48, i32 2
  %insertElmt44 = insertelement <4 x float> %insertElmt43, float %48, i32 3
  store <4 x float> %insertElmt44, <4 x float>* %allocaVec23, align 16
  store float %47, float* %CastInst4
  %49 = load float, float* %CastInst4, align 4
  %insertCast45 = insertelement <4 x float> undef, float %49, i32 0
  %insertCast46 = insertelement <4 x float> %insertCast45, float %49, i32 1
  %insertCast47 = insertelement <4 x float> %insertCast46, float %49, i32 2
  %insertCast48 = insertelement <4 x float> %insertCast47, float %49, i32 3
  store <4 x float> %insertCast48, <4 x float>* %CastInstVec5, align 4
  %50 = load <4 x float>, <4 x float>* %CastInstVec5, align 4
  %51 = load <4 x float>, <4 x float>* %allocaVec23, align 16
  %Vop49 = fmul <4 x float> %50, %51
  %52 = fmul float %47, %48
  %53 = load i32*, i32** %4, align 4
  %54 = getelementptr inbounds i32, i32* %53, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = sitofp i32 %55 to float
  store float %56, float* %CastInst6
  %57 = load float, float* %CastInst6, align 4
  %insertCast50 = insertelement <4 x float> undef, float %57, i32 0
  %insertCast51 = insertelement <4 x float> %insertCast50, float %57, i32 1
  %insertCast52 = insertelement <4 x float> %insertCast51, float %57, i32 2
  %insertCast53 = insertelement <4 x float> %insertCast52, float %57, i32 3
  store <4 x float> %insertCast53, <4 x float>* %CastInstVec7, align 4
  %58 = load <4 x float>, <4 x float>* %CastInstVec7, align 4
  %Vop54 = fadd <4 x float> %58, %Vop49
  %59 = fadd float %56, %52
  %60 = fptosi float %59 to i32
  store i32 %60, i32* %54, align 4
  %61 = load i32*, i32** %4, align 4
  %62 = getelementptr inbounds i32, i32* %61, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = sitofp i32 %63 to float
  %65 = load float, float* %9, align 4
  %insertElmt55 = insertelement <4 x float> undef, float %65, i32 0
  %insertElmt56 = insertelement <4 x float> %insertElmt55, float %65, i32 1
  %insertElmt57 = insertelement <4 x float> %insertElmt56, float %65, i32 2
  %insertElmt58 = insertelement <4 x float> %insertElmt57, float %65, i32 3
  store <4 x float> %insertElmt58, <4 x float>* %allocaVec23, align 16
  store float %64, float* %CastInst8
  %66 = load float, float* %CastInst8, align 4
  %insertCast59 = insertelement <4 x float> undef, float %66, i32 0
  %insertCast60 = insertelement <4 x float> %insertCast59, float %66, i32 1
  %insertCast61 = insertelement <4 x float> %insertCast60, float %66, i32 2
  %insertCast62 = insertelement <4 x float> %insertCast61, float %66, i32 3
  store <4 x float> %insertCast62, <4 x float>* %CastInstVec9, align 4
  %67 = load <4 x float>, <4 x float>* %CastInstVec9, align 4
  %68 = load <4 x float>, <4 x float>* %allocaVec23, align 16
  %Vop63 = fmul <4 x float> %67, %68
  %69 = fmul float %64, %65
  %70 = load i32*, i32** %4, align 4
  %71 = getelementptr inbounds i32, i32* %70, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = sitofp i32 %72 to float
  store float %73, float* %CastInst10
  %74 = load float, float* %CastInst10, align 4
  %insertCast64 = insertelement <4 x float> undef, float %74, i32 0
  %insertCast65 = insertelement <4 x float> %insertCast64, float %74, i32 1
  %insertCast66 = insertelement <4 x float> %insertCast65, float %74, i32 2
  %insertCast67 = insertelement <4 x float> %insertCast66, float %74, i32 3
  store <4 x float> %insertCast67, <4 x float>* %CastInstVec11, align 4
  %75 = load <4 x float>, <4 x float>* %CastInstVec11, align 4
  %Vop68 = fsub <4 x float> %75, %Vop63
  %76 = fsub float %73, %69
  %77 = fptosi float %76 to i32
  store i32 %77, i32* %71, align 4
  br label %89

; <label>:78:                                     ; preds = %25
  %79 = load i32*, i32** %4, align 4
  %80 = getelementptr inbounds i32, i32* %79, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = sub nsw i32 %81, 125
  %83 = load i32*, i32** %4, align 4
  %84 = getelementptr inbounds i32, i32* %83, i32 0
  %85 = load i32, i32* %84, align 4
  %86 = add nsw i32 %85, %82
  store i32 %86, i32* %84, align 4
  %87 = load i32*, i32** %4, align 4
  %88 = getelementptr inbounds i32, i32* %87, i32 1
  store i32 125, i32* %88, align 4
  br label %89

; <label>:89:                                     ; preds = %78, %43
  br label %90

; <label>:90:                                     ; preds = %89, %20
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec21
  store i32 0, i32* %7, align 4
  br label %91

; <label>:91:                                     ; preds = %130, %90
  %92 = load i32, i32* %7, align 4
  %93 = load i32, i32* %8, align 4
  %94 = icmp slt i32 %92, %93
  br i1 %94, label %95, label %131

; <label>:95:                                     ; preds = %91
  %96 = load i32, i32* %6, align 4
  %insertElmt69 = insertelement <4 x i32> undef, i32 %96, i32 0
  %insertElmt70 = insertelement <4 x i32> %insertElmt69, i32 %96, i32 1
  %insertElmt71 = insertelement <4 x i32> %insertElmt70, i32 %96, i32 2
  %insertElmt72 = insertelement <4 x i32> %insertElmt71, i32 %96, i32 3
  store <4 x i32> %insertElmt72, <4 x i32>* %allocaVec20, align 16
  %97 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop73 = sdiv <4 x i32> %97, <i32 2, i32 2, i32 2, i32 2>
  %98 = sdiv i32 %96, 2
  %Vop74 = add <4 x i32> %Vop73, <i32 1200, i32 1200, i32 1200, i32 1200>
  %99 = add nsw i32 %98, 1200
  %100 = icmp slt i32 4095, %99
  br i1 %100, label %101, label %102

; <label>:101:                                    ; preds = %95
  br label %107

; <label>:102:                                    ; preds = %95
  %103 = load i32, i32* %6, align 4
  %insertElmt75 = insertelement <4 x i32> undef, i32 %103, i32 0
  %insertElmt76 = insertelement <4 x i32> %insertElmt75, i32 %103, i32 1
  %insertElmt77 = insertelement <4 x i32> %insertElmt76, i32 %103, i32 2
  %insertElmt78 = insertelement <4 x i32> %insertElmt77, i32 %103, i32 3
  store <4 x i32> %insertElmt78, <4 x i32>* %allocaVec20, align 16
  %104 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop79 = sdiv <4 x i32> %104, <i32 2, i32 2, i32 2, i32 2>
  %105 = sdiv i32 %103, 2
  %Vop80 = add <4 x i32> %Vop79, <i32 1200, i32 1200, i32 1200, i32 1200>
  %106 = add nsw i32 %105, 1200
  br label %107

; <label>:107:                                    ; preds = %102, %101
  %108 = phi i32 [ 4095, %101 ], [ %106, %102 ]
  store i32 %108, i32* %10, align 4
  %109 = load i32*, i32** %4, align 4
  %110 = load i32, i32* %7, align 4
  %111 = getelementptr inbounds i32, i32* %109, i32 %110
  %112 = load i32, i32* %111, align 4
  %113 = load i32, i32* %10, align 4
  %114 = icmp sgt i32 %112, %113
  br i1 %114, label %115, label %120

; <label>:115:                                    ; preds = %107
  %116 = load i32, i32* %10, align 4
  %117 = load i32*, i32** %4, align 4
  %118 = load i32, i32* %7, align 4
  %119 = getelementptr inbounds i32, i32* %117, i32 %118
  store i32 %116, i32* %119, align 4
  br label %120

; <label>:120:                                    ; preds = %115, %107
  br label %121

; <label>:121:                                    ; preds = %120
  %122 = load i32, i32* %7, align 4
  %insertElmt81 = insertelement <4 x i32> undef, i32 %122, i32 0
  %insertElmt82 = insertelement <4 x i32> %insertElmt81, i32 %122, i32 1
  %insertElmt83 = insertelement <4 x i32> %insertElmt82, i32 %122, i32 2
  %insertElmt84 = insertelement <4 x i32> %insertElmt83, i32 %122, i32 3
  store <4 x i32> %insertElmt84, <4 x i32>* %allocaVec21, align 16
  %123 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop85 = add <4 x i32> %123, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop85, <4 x i32>* %allocaVec21
  %124 = load <4 x i32>, <4 x i32>* %allocaVec21, align 4
  %extractE = extractelement <4 x i32> %124, i64 0
  %extractE86 = extractelement <4 x i32> %124, i64 1
  %extractE87 = extractelement <4 x i32> %124, i64 2
  %sum = add i32 %extractE, %extractE86
  %sum88 = add i32 %sum, %extractE87
  %125 = add nsw i32 %122, 1
  %Fmul = mul i32 %125, 3
  store i32 %125, i32* %Recovery1
  %Fcmp = icmp ne i32 %sum88, %Fmul
  br i1 %Fcmp, label %126, label %130

; <label>:126:                                    ; preds = %121
  %remThree = sdiv i32 %sum88, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %127, label %128

; <label>:127:                                    ; preds = %126
  store i32 %125, i32* %Recovery1, align 4
  br label %129

; <label>:128:                                    ; preds = %126
  store i32 %extractE, i32* %Recovery1, align 4
  br label %129

; <label>:129:                                    ; preds = %128, %127
  br label %130

; <label>:130:                                    ; preds = %121, %129
  %ReplaceInst = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst, i32* %7, align 4
  br label %91

; <label>:131:                                    ; preds = %91
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @inner_loop(%struct.lame_global_flags*, double*, i32*, i32, %struct.gr_info*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %6 = alloca %struct.lame_global_flags*, align 4
  %7 = alloca double*, align 4
  %8 = alloca i32*, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %10 = alloca %struct.gr_info*, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %6, align 4
  store double* %1, double** %7, align 4
  store i32* %2, i32** %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.gr_info* %4, %struct.gr_info** %10, align 4
  %12 = load i32, i32* %9, align 4
  %13 = icmp sge i32 %12, 0
  br i1 %13, label %15, label %14

; <label>:14:                                     ; preds = %5
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.254, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1.255, i32 0, i32 0), i32 431, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__.inner_loop, i32 0, i32 0))
  br label %15

; <label>:15:                                     ; preds = %14, %5
  %16 = phi i1 [ true, %5 ], [ false, %14 ]
  %17 = zext i1 %16 to i32
  %18 = load %struct.gr_info*, %struct.gr_info** %10, align 4
  %19 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = add i32 %20, -1
  store i32 %21, i32* %19, align 4
  br label %22

; <label>:22:                                     ; preds = %32, %15
  %23 = load %struct.gr_info*, %struct.gr_info** %10, align 4
  %24 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %23, i32 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = add i32 %25, 1
  store i32 %26, i32* %24, align 4
  %27 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %28 = load i32*, i32** %8, align 4
  %29 = load double*, double** %7, align 4
  %30 = load %struct.gr_info*, %struct.gr_info** %10, align 4
  %31 = call arm_aapcscc i32 @count_bits(%struct.lame_global_flags* %27, i32* %28, double* %29, %struct.gr_info* %30)
  store i32 %31, i32* %11, align 4
  br label %32

; <label>:32:                                     ; preds = %22
  %33 = load i32, i32* %11, align 4
  %34 = load i32, i32* %9, align 4
  %35 = icmp sgt i32 %33, %34
  br i1 %35, label %22, label %36

; <label>:36:                                     ; preds = %32
  %37 = load i32, i32* %11, align 4
  ret i32 %37
}

; Function Attrs: nounwind
define arm_aapcscc i32 @scale_bitcount(%struct.III_scalefac_t*, %struct.gr_info*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %3 = alloca %struct.III_scalefac_t*, align 4
  %4 = alloca %struct.gr_info*, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %11 = alloca i32*, align 4
  store %struct.III_scalefac_t* %0, %struct.III_scalefac_t** %3, align 4
  store %struct.gr_info* %1, %struct.gr_info** %4, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec10
  store i32 0, i32* %8, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec11
  store i32 0, i32* %9, align 4
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %allocaVec12
  store i32 2, i32* %10, align 4
  %12 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %13 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %12, i32 0, i32 6
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 2
  br i1 %15, label %16, label %86

; <label>:16:                                     ; preds = %2
  store i32* getelementptr inbounds ([16 x i32], [16 x i32]* @scale_bitcount.slen1_tab, i32 0, i32 0), i32** %11, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec7
  store i32 0, i32* %5, align 4
  br label %17

; <label>:17:                                     ; preds = %84, %16
  %18 = load i32, i32* %5, align 4
  %19 = icmp slt i32 %18, 3
  br i1 %19, label %20, label %85

; <label>:20:                                     ; preds = %17
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec9
  store i32 0, i32* %7, align 4
  br label %21

; <label>:21:                                     ; preds = %43, %20
  %22 = load i32, i32* %7, align 4
  %23 = icmp slt i32 %22, 6
  br i1 %23, label %24, label %47

; <label>:24:                                     ; preds = %21
  %25 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %26 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %25, i32 0, i32 1
  %27 = load i32, i32* %7, align 4
  %28 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %26, i32 0, i32 %27
  %29 = load i32, i32* %5, align 4
  %30 = getelementptr inbounds [3 x i32], [3 x i32]* %28, i32 0, i32 %29
  %31 = load i32, i32* %30, align 4
  %32 = load i32, i32* %8, align 4
  %33 = icmp sgt i32 %31, %32
  br i1 %33, label %34, label %42

; <label>:34:                                     ; preds = %24
  %35 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %36 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %35, i32 0, i32 1
  %37 = load i32, i32* %7, align 4
  %38 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %36, i32 0, i32 %37
  %39 = load i32, i32* %5, align 4
  %40 = getelementptr inbounds [3 x i32], [3 x i32]* %38, i32 0, i32 %39
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %8, align 4
  br label %42

; <label>:42:                                     ; preds = %34, %24
  br label %43

; <label>:43:                                     ; preds = %42
  %44 = load i32, i32* %7, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %44, i32 0
  %insertElmt13 = insertelement <4 x i32> %insertElmt, i32 %44, i32 1
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %44, i32 2
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %44, i32 3
  store <4 x i32> %insertElmt15, <4 x i32>* %allocaVec9, align 16
  %45 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop = add <4 x i32> %45, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec9
  %46 = add nsw i32 %44, 1
  store i32 %46, i32* %7, align 4
  br label %21

; <label>:47:                                     ; preds = %21
  store <4 x i32> <i32 6, i32 6, i32 6, i32 6>, <4 x i32>* %allocaVec9
  store i32 6, i32* %7, align 4
  br label %48

; <label>:48:                                     ; preds = %70, %47
  %49 = load i32, i32* %7, align 4
  %50 = icmp slt i32 %49, 12
  br i1 %50, label %51, label %74

; <label>:51:                                     ; preds = %48
  %52 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %53 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %52, i32 0, i32 1
  %54 = load i32, i32* %7, align 4
  %55 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %53, i32 0, i32 %54
  %56 = load i32, i32* %5, align 4
  %57 = getelementptr inbounds [3 x i32], [3 x i32]* %55, i32 0, i32 %56
  %58 = load i32, i32* %57, align 4
  %59 = load i32, i32* %9, align 4
  %60 = icmp sgt i32 %58, %59
  br i1 %60, label %61, label %69

; <label>:61:                                     ; preds = %51
  %62 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %63 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %62, i32 0, i32 1
  %64 = load i32, i32* %7, align 4
  %65 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %63, i32 0, i32 %64
  %66 = load i32, i32* %5, align 4
  %67 = getelementptr inbounds [3 x i32], [3 x i32]* %65, i32 0, i32 %66
  %68 = load i32, i32* %67, align 4
  store i32 %68, i32* %9, align 4
  br label %69

; <label>:69:                                     ; preds = %61, %51
  br label %70

; <label>:70:                                     ; preds = %69
  %71 = load i32, i32* %7, align 4
  %72 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop16 = add <4 x i32> %72, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop16, <4 x i32>* %allocaVec9
  %73 = add nsw i32 %71, 1
  store i32 %73, i32* %7, align 4
  br label %48

; <label>:74:                                     ; preds = %48
  br label %75

; <label>:75:                                     ; preds = %74
  %76 = load i32, i32* %5, align 4
  %insertElmt17 = insertelement <4 x i32> undef, i32 %76, i32 0
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %76, i32 1
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %76, i32 2
  %insertElmt20 = insertelement <4 x i32> %insertElmt19, i32 %76, i32 3
  store <4 x i32> %insertElmt20, <4 x i32>* %allocaVec7, align 16
  %77 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop21 = add <4 x i32> %77, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop21, <4 x i32>* %allocaVec7
  %78 = load <4 x i32>, <4 x i32>* %allocaVec7, align 4
  %extractE = extractelement <4 x i32> %78, i64 0
  %extractE22 = extractelement <4 x i32> %78, i64 1
  %extractE23 = extractelement <4 x i32> %78, i64 2
  %sum = add i32 %extractE, %extractE22
  %sum24 = add i32 %sum, %extractE23
  %79 = add nsw i32 %76, 1
  %Fmul = mul i32 %79, 3
  store i32 %79, i32* %Recovery
  %Fcmp = icmp ne i32 %sum24, %Fmul
  br i1 %Fcmp, label %80, label %84

; <label>:80:                                     ; preds = %75
  %remThree = sdiv i32 %sum24, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %81, label %82

; <label>:81:                                     ; preds = %80
  store i32 %79, i32* %Recovery, align 4
  br label %83

; <label>:82:                                     ; preds = %80
  store i32 %extractE, i32* %Recovery, align 4
  br label %83

; <label>:83:                                     ; preds = %82, %81
  br label %84

; <label>:84:                                     ; preds = %75, %83
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %5, align 4
  br label %17

; <label>:85:                                     ; preds = %17
  br label %189

; <label>:86:                                     ; preds = %2
  store i32* getelementptr inbounds ([16 x i32], [16 x i32]* @scale_bitcount.slen2_tab, i32 0, i32 0), i32** %11, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec9
  store i32 0, i32* %7, align 4
  br label %87

; <label>:87:                                     ; preds = %105, %86
  %88 = load i32, i32* %7, align 4
  %89 = icmp slt i32 %88, 11
  br i1 %89, label %90, label %109

; <label>:90:                                     ; preds = %87
  %91 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %92 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %91, i32 0, i32 0
  %93 = load i32, i32* %7, align 4
  %94 = getelementptr inbounds [22 x i32], [22 x i32]* %92, i32 0, i32 %93
  %95 = load i32, i32* %94, align 4
  %96 = load i32, i32* %8, align 4
  %97 = icmp sgt i32 %95, %96
  br i1 %97, label %98, label %104

; <label>:98:                                     ; preds = %90
  %99 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %100 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %99, i32 0, i32 0
  %101 = load i32, i32* %7, align 4
  %102 = getelementptr inbounds [22 x i32], [22 x i32]* %100, i32 0, i32 %101
  %103 = load i32, i32* %102, align 4
  store i32 %103, i32* %8, align 4
  br label %104

; <label>:104:                                    ; preds = %98, %90
  br label %105

; <label>:105:                                    ; preds = %104
  %106 = load i32, i32* %7, align 4
  %107 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop25 = add <4 x i32> %107, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop25, <4 x i32>* %allocaVec9
  %108 = add nsw i32 %106, 1
  store i32 %108, i32* %7, align 4
  br label %87

; <label>:109:                                    ; preds = %87
  %110 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %111 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %110, i32 0, i32 12
  %112 = load i32, i32* %111, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %159, label %114

; <label>:114:                                    ; preds = %109
  store <4 x i32> <i32 11, i32 11, i32 11, i32 11>, <4 x i32>* %allocaVec9
  store i32 11, i32* %7, align 4
  br label %115

; <label>:115:                                    ; preds = %130, %114
  %116 = load i32, i32* %7, align 4
  %117 = icmp slt i32 %116, 21
  br i1 %117, label %118, label %134

; <label>:118:                                    ; preds = %115
  %119 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %120 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %119, i32 0, i32 0
  %121 = load i32, i32* %7, align 4
  %122 = getelementptr inbounds [22 x i32], [22 x i32]* %120, i32 0, i32 %121
  %123 = load i32, i32* %122, align 4
  %124 = load i32, i32* %7, align 4
  %125 = getelementptr inbounds [21 x i32], [21 x i32]* @pretab, i32 0, i32 %124
  %126 = load i32, i32* %125, align 4
  %127 = icmp slt i32 %123, %126
  br i1 %127, label %128, label %129

; <label>:128:                                    ; preds = %118
  br label %134

; <label>:129:                                    ; preds = %118
  br label %130

; <label>:130:                                    ; preds = %129
  %131 = load i32, i32* %7, align 4
  %132 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop26 = add <4 x i32> %132, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop26, <4 x i32>* %allocaVec9
  %133 = add nsw i32 %131, 1
  store i32 %133, i32* %7, align 4
  br label %115

; <label>:134:                                    ; preds = %128, %115
  %135 = load i32, i32* %7, align 4
  %136 = icmp eq i32 %135, 21
  br i1 %136, label %137, label %158

; <label>:137:                                    ; preds = %134
  %138 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %139 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %138, i32 0, i32 12
  store i32 1, i32* %139, align 4
  store <4 x i32> <i32 11, i32 11, i32 11, i32 11>, <4 x i32>* %allocaVec9
  store i32 11, i32* %7, align 4
  br label %140

; <label>:140:                                    ; preds = %153, %137
  %141 = load i32, i32* %7, align 4
  %142 = icmp slt i32 %141, 21
  br i1 %142, label %143, label %157

; <label>:143:                                    ; preds = %140
  %144 = load i32, i32* %7, align 4
  %145 = getelementptr inbounds [21 x i32], [21 x i32]* @pretab, i32 0, i32 %144
  %146 = load i32, i32* %145, align 4
  %147 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %148 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %147, i32 0, i32 0
  %149 = load i32, i32* %7, align 4
  %150 = getelementptr inbounds [22 x i32], [22 x i32]* %148, i32 0, i32 %149
  %151 = load i32, i32* %150, align 4
  %152 = sub nsw i32 %151, %146
  store i32 %152, i32* %150, align 4
  br label %153

; <label>:153:                                    ; preds = %143
  %154 = load i32, i32* %7, align 4
  %155 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop27 = add <4 x i32> %155, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop27, <4 x i32>* %allocaVec9
  %156 = add nsw i32 %154, 1
  store i32 %156, i32* %7, align 4
  br label %140

; <label>:157:                                    ; preds = %140
  br label %158

; <label>:158:                                    ; preds = %157, %134
  br label %159

; <label>:159:                                    ; preds = %158, %109
  store <4 x i32> <i32 11, i32 11, i32 11, i32 11>, <4 x i32>* %allocaVec9
  store i32 11, i32* %7, align 4
  br label %160

; <label>:160:                                    ; preds = %187, %159
  %161 = load i32, i32* %7, align 4
  %162 = icmp slt i32 %161, 21
  br i1 %162, label %163, label %188

; <label>:163:                                    ; preds = %160
  %164 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %165 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %164, i32 0, i32 0
  %166 = load i32, i32* %7, align 4
  %167 = getelementptr inbounds [22 x i32], [22 x i32]* %165, i32 0, i32 %166
  %168 = load i32, i32* %167, align 4
  %169 = load i32, i32* %9, align 4
  %170 = icmp sgt i32 %168, %169
  br i1 %170, label %171, label %177

; <label>:171:                                    ; preds = %163
  %172 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %173 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %172, i32 0, i32 0
  %174 = load i32, i32* %7, align 4
  %175 = getelementptr inbounds [22 x i32], [22 x i32]* %173, i32 0, i32 %174
  %176 = load i32, i32* %175, align 4
  store i32 %176, i32* %9, align 4
  br label %177

; <label>:177:                                    ; preds = %171, %163
  br label %178

; <label>:178:                                    ; preds = %177
  %179 = load i32, i32* %7, align 4
  %180 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop28 = add <4 x i32> %180, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop28, <4 x i32>* %allocaVec9
  %181 = load <4 x i32>, <4 x i32>* %allocaVec9, align 4
  %extractE30 = extractelement <4 x i32> %181, i64 0
  %extractE31 = extractelement <4 x i32> %181, i64 1
  %extractE32 = extractelement <4 x i32> %181, i64 2
  %sum33 = add i32 %extractE30, %extractE31
  %sum34 = add i32 %sum33, %extractE32
  %182 = add nsw i32 %179, 1
  %Fmul29 = mul i32 %182, 3
  store i32 %182, i32* %Recovery2
  %Fcmp35 = icmp ne i32 %sum34, %Fmul29
  br i1 %Fcmp35, label %183, label %187

; <label>:183:                                    ; preds = %178
  %remThree48 = sdiv i32 %sum34, %extractE30
  %FcmpThree49 = icmp ne i32 %remThree48, 3
  br i1 %FcmpThree49, label %184, label %185

; <label>:184:                                    ; preds = %183
  store i32 %182, i32* %Recovery2, align 4
  br label %186

; <label>:185:                                    ; preds = %183
  store i32 %extractE30, i32* %Recovery2, align 4
  br label %186

; <label>:186:                                    ; preds = %185, %184
  br label %187

; <label>:187:                                    ; preds = %178, %186
  %ReplaceInst52 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst52, i32* %7, align 4
  br label %160

; <label>:188:                                    ; preds = %160
  br label %189

; <label>:189:                                    ; preds = %188, %85
  %190 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %191 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %190, i32 0, i32 15
  store i32 100000, i32* %191, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec8
  store i32 0, i32* %6, align 4
  br label %192

; <label>:192:                                    ; preds = %236, %189
  %193 = load i32, i32* %6, align 4
  %194 = icmp slt i32 %193, 16
  br i1 %194, label %195, label %237

; <label>:195:                                    ; preds = %192
  %196 = load i32, i32* %8, align 4
  %197 = load i32, i32* %6, align 4
  %198 = getelementptr inbounds [16 x i32], [16 x i32]* @scale_bitcount.slen1, i32 0, i32 %197
  %199 = load i32, i32* %198, align 4
  %200 = icmp slt i32 %196, %199
  br i1 %200, label %201, label %226

; <label>:201:                                    ; preds = %195
  %202 = load i32, i32* %9, align 4
  %203 = load i32, i32* %6, align 4
  %204 = getelementptr inbounds [16 x i32], [16 x i32]* @scale_bitcount.slen2, i32 0, i32 %203
  %205 = load i32, i32* %204, align 4
  %206 = icmp slt i32 %202, %205
  br i1 %206, label %207, label %226

; <label>:207:                                    ; preds = %201
  %208 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %209 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %208, i32 0, i32 15
  %210 = load i32, i32* %209, align 4
  %211 = load i32*, i32** %11, align 4
  %212 = load i32, i32* %6, align 4
  %213 = getelementptr inbounds i32, i32* %211, i32 %212
  %214 = load i32, i32* %213, align 4
  %215 = icmp sgt i32 %210, %214
  br i1 %215, label %216, label %226

; <label>:216:                                    ; preds = %207
  %217 = load i32*, i32** %11, align 4
  %218 = load i32, i32* %6, align 4
  %219 = getelementptr inbounds i32, i32* %217, i32 %218
  %220 = load i32, i32* %219, align 4
  %221 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %222 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %221, i32 0, i32 15
  store i32 %220, i32* %222, align 4
  %223 = load i32, i32* %6, align 4
  %224 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %225 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %224, i32 0, i32 4
  store i32 %223, i32* %225, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec12
  store i32 0, i32* %10, align 4
  br label %226

; <label>:226:                                    ; preds = %216, %207, %201, %195
  br label %227

; <label>:227:                                    ; preds = %226
  %228 = load i32, i32* %6, align 4
  %insertElmt36 = insertelement <4 x i32> undef, i32 %228, i32 0
  %insertElmt37 = insertelement <4 x i32> %insertElmt36, i32 %228, i32 1
  %insertElmt38 = insertelement <4 x i32> %insertElmt37, i32 %228, i32 2
  %insertElmt39 = insertelement <4 x i32> %insertElmt38, i32 %228, i32 3
  store <4 x i32> %insertElmt39, <4 x i32>* %allocaVec8, align 16
  %229 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %Vop40 = add <4 x i32> %229, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop40, <4 x i32>* %allocaVec8
  %230 = load <4 x i32>, <4 x i32>* %allocaVec8, align 4
  %extractE42 = extractelement <4 x i32> %230, i64 0
  %extractE43 = extractelement <4 x i32> %230, i64 1
  %extractE44 = extractelement <4 x i32> %230, i64 2
  %sum45 = add i32 %extractE42, %extractE43
  %sum46 = add i32 %sum45, %extractE44
  %231 = add nsw i32 %228, 1
  %Fmul41 = mul i32 %231, 3
  store i32 %231, i32* %Recovery3
  %Fcmp47 = icmp ne i32 %sum46, %Fmul41
  br i1 %Fcmp47, label %232, label %236

; <label>:232:                                    ; preds = %227
  %remThree50 = sdiv i32 %sum46, %extractE42
  %FcmpThree51 = icmp ne i32 %remThree50, 3
  br i1 %FcmpThree51, label %233, label %234

; <label>:233:                                    ; preds = %232
  store i32 %231, i32* %Recovery3, align 4
  br label %235

; <label>:234:                                    ; preds = %232
  store i32 %extractE42, i32* %Recovery3, align 4
  br label %235

; <label>:235:                                    ; preds = %234, %233
  br label %236

; <label>:236:                                    ; preds = %227, %235
  %ReplaceInst53 = load i32, i32* %Recovery3, align 4
  store i32 %ReplaceInst53, i32* %6, align 4
  br label %192

; <label>:237:                                    ; preds = %192
  %238 = load i32, i32* %10, align 4
  ret i32 %238
}

; Function Attrs: nounwind
define arm_aapcscc i32 @scale_bitcount_lsf(%struct.III_scalefac_t*, %struct.gr_info*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %Recovery5 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %Recovery6 = alloca i32, align 4
  %3 = alloca %struct.III_scalefac_t*, align 4
  %4 = alloca %struct.gr_info*, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec14 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec18 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec19 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec20 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %13 = alloca [4 x i32], align 4
  %14 = alloca i32*, align 4
  %allocaVec21 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %allocaVec22 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %allocaVec23 = alloca <4 x i32>, align 16
  %17 = alloca i32, align 4
  %allocaVec24 = alloca <4 x i32>, align 16
  %18 = alloca i32, align 4
  store %struct.III_scalefac_t* %0, %struct.III_scalefac_t** %3, align 4
  store %struct.gr_info* %1, %struct.gr_info** %4, align 4
  %19 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %20 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %19, i32 0, i32 12
  %21 = load i32, i32* %20, align 4
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %2
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %allocaVec13
  store i32 2, i32* %5, align 4
  br label %25

; <label>:24:                                     ; preds = %2
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec13
  store i32 0, i32* %5, align 4
  br label %25

; <label>:25:                                     ; preds = %24, %23
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec19
  store i32 0, i32* %11, align 4
  br label %26

; <label>:26:                                     ; preds = %32, %25
  %27 = load i32, i32* %11, align 4
  %28 = icmp slt i32 %27, 4
  br i1 %28, label %29, label %36

; <label>:29:                                     ; preds = %26
  %30 = load i32, i32* %11, align 4
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i32 0, i32 %30
  store i32 0, i32* %31, align 4
  br label %32

; <label>:32:                                     ; preds = %29
  %33 = load i32, i32* %11, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %33, i32 0
  %insertElmt25 = insertelement <4 x i32> %insertElmt, i32 %33, i32 1
  %insertElmt26 = insertelement <4 x i32> %insertElmt25, i32 %33, i32 2
  %insertElmt27 = insertelement <4 x i32> %insertElmt26, i32 %33, i32 3
  store <4 x i32> %insertElmt27, <4 x i32>* %allocaVec19, align 16
  %34 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop = add <4 x i32> %34, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec19
  %35 = add nsw i32 %33, 1
  store i32 %35, i32* %11, align 4
  br label %26

; <label>:36:                                     ; preds = %26
  %37 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %38 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %37, i32 0, i32 6
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, 2
  br i1 %40, label %41, label %111

; <label>:41:                                     ; preds = %36
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec14
  store i32 1, i32* %6, align 4
  %42 = load i32, i32* %5, align 4
  %43 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i32 0, i32 %42
  %44 = load i32, i32* %6, align 4
  %45 = getelementptr inbounds [3 x [4 x i32]], [3 x [4 x i32]]* %43, i32 0, i32 %44
  %46 = getelementptr inbounds [4 x i32], [4 x i32]* %45, i32 0, i32 0
  store i32* %46, i32** %14, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec20
  store i32 0, i32* %12, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %7, align 4
  br label %47

; <label>:47:                                     ; preds = %106, %41
  %48 = load i32, i32* %7, align 4
  %49 = icmp slt i32 %48, 4
  br i1 %49, label %50, label %110

; <label>:50:                                     ; preds = %47
  %51 = load i32*, i32** %14, align 4
  %52 = load i32, i32* %7, align 4
  %53 = getelementptr inbounds i32, i32* %51, i32 %52
  %54 = load i32, i32* %53, align 4
  %55 = udiv i32 %54, 3
  store i32 %55, i32* %8, align 4
  store i32 0, i32* %11, align 4
  br label %56

; <label>:56:                                     ; preds = %98, %50
  %57 = load i32, i32* %11, align 4
  %58 = load i32, i32* %8, align 4
  %59 = icmp slt i32 %57, %58
  br i1 %59, label %60, label %105

; <label>:60:                                     ; preds = %56
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec17
  store i32 0, i32* %9, align 4
  br label %61

; <label>:61:                                     ; preds = %96, %60
  %62 = load i32, i32* %9, align 4
  %63 = icmp slt i32 %62, 3
  br i1 %63, label %64, label %97

; <label>:64:                                     ; preds = %61
  %65 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %66 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %65, i32 0, i32 1
  %67 = load i32, i32* %12, align 4
  %68 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %66, i32 0, i32 %67
  %69 = load i32, i32* %9, align 4
  %70 = getelementptr inbounds [3 x i32], [3 x i32]* %68, i32 0, i32 %69
  %71 = load i32, i32* %70, align 4
  %72 = load i32, i32* %7, align 4
  %73 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i32 0, i32 %72
  %74 = load i32, i32* %73, align 4
  %75 = icmp sgt i32 %71, %74
  br i1 %75, label %76, label %86

; <label>:76:                                     ; preds = %64
  %77 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %78 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %77, i32 0, i32 1
  %79 = load i32, i32* %12, align 4
  %80 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %78, i32 0, i32 %79
  %81 = load i32, i32* %9, align 4
  %82 = getelementptr inbounds [3 x i32], [3 x i32]* %80, i32 0, i32 %81
  %83 = load i32, i32* %82, align 4
  %84 = load i32, i32* %7, align 4
  %85 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i32 0, i32 %84
  store i32 %83, i32* %85, align 4
  br label %86

; <label>:86:                                     ; preds = %76, %64
  br label %87

; <label>:87:                                     ; preds = %86
  %88 = load i32, i32* %9, align 4
  %insertElmt28 = insertelement <4 x i32> undef, i32 %88, i32 0
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %88, i32 1
  %insertElmt30 = insertelement <4 x i32> %insertElmt29, i32 %88, i32 2
  %insertElmt31 = insertelement <4 x i32> %insertElmt30, i32 %88, i32 3
  store <4 x i32> %insertElmt31, <4 x i32>* %allocaVec17, align 16
  %89 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop32 = add <4 x i32> %89, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop32, <4 x i32>* %allocaVec17
  %90 = load <4 x i32>, <4 x i32>* %allocaVec17, align 4
  %extractE = extractelement <4 x i32> %90, i64 0
  %extractE33 = extractelement <4 x i32> %90, i64 1
  %extractE34 = extractelement <4 x i32> %90, i64 2
  %sum = add i32 %extractE, %extractE33
  %sum35 = add i32 %sum, %extractE34
  %91 = add nsw i32 %88, 1
  %Fmul = mul i32 %91, 3
  store i32 %91, i32* %Recovery1
  %Fcmp = icmp ne i32 %sum35, %Fmul
  br i1 %Fcmp, label %92, label %96

; <label>:92:                                     ; preds = %87
  %remThree = sdiv i32 %sum35, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %93, label %94

; <label>:93:                                     ; preds = %92
  store i32 %91, i32* %Recovery1, align 4
  br label %95

; <label>:94:                                     ; preds = %92
  store i32 %extractE, i32* %Recovery1, align 4
  br label %95

; <label>:95:                                     ; preds = %94, %93
  br label %96

; <label>:96:                                     ; preds = %87, %95
  %ReplaceInst = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst, i32* %9, align 4
  br label %61

; <label>:97:                                     ; preds = %61
  br label %98

; <label>:98:                                     ; preds = %97
  %99 = load i32, i32* %11, align 4
  %100 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop36 = add <4 x i32> %100, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop36, <4 x i32>* %allocaVec19
  %101 = add nsw i32 %99, 1
  store i32 %101, i32* %11, align 4
  %102 = load i32, i32* %12, align 4
  %insertElmt37 = insertelement <4 x i32> undef, i32 %102, i32 0
  %insertElmt38 = insertelement <4 x i32> %insertElmt37, i32 %102, i32 1
  %insertElmt39 = insertelement <4 x i32> %insertElmt38, i32 %102, i32 2
  %insertElmt40 = insertelement <4 x i32> %insertElmt39, i32 %102, i32 3
  store <4 x i32> %insertElmt40, <4 x i32>* %allocaVec20, align 16
  %103 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop41 = add <4 x i32> %103, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop41, <4 x i32>* %allocaVec20
  %104 = add nsw i32 %102, 1
  store i32 %104, i32* %12, align 4
  br label %56

; <label>:105:                                    ; preds = %56
  br label %106

; <label>:106:                                    ; preds = %105
  %107 = load i32, i32* %7, align 4
  %insertElmt42 = insertelement <4 x i32> undef, i32 %107, i32 0
  %insertElmt43 = insertelement <4 x i32> %insertElmt42, i32 %107, i32 1
  %insertElmt44 = insertelement <4 x i32> %insertElmt43, i32 %107, i32 2
  %insertElmt45 = insertelement <4 x i32> %insertElmt44, i32 %107, i32 3
  store <4 x i32> %insertElmt45, <4 x i32>* %allocaVec15, align 16
  %108 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop46 = add <4 x i32> %108, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop46, <4 x i32>* %allocaVec15
  %109 = add nsw i32 %107, 1
  store i32 %109, i32* %7, align 4
  br label %47

; <label>:110:                                    ; preds = %47
  br label %173

; <label>:111:                                    ; preds = %36
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec14
  store i32 0, i32* %6, align 4
  %112 = load i32, i32* %5, align 4
  %113 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i32 0, i32 %112
  %114 = load i32, i32* %6, align 4
  %115 = getelementptr inbounds [3 x [4 x i32]], [3 x [4 x i32]]* %113, i32 0, i32 %114
  %116 = getelementptr inbounds [4 x i32], [4 x i32]* %115, i32 0, i32 0
  store i32* %116, i32** %14, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec20
  store i32 0, i32* %12, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %7, align 4
  br label %117

; <label>:117:                                    ; preds = %168, %111
  %118 = load i32, i32* %7, align 4
  %119 = icmp slt i32 %118, 4
  br i1 %119, label %120, label %172

; <label>:120:                                    ; preds = %117
  %121 = load i32*, i32** %14, align 4
  %122 = load i32, i32* %7, align 4
  %123 = getelementptr inbounds i32, i32* %121, i32 %122
  %124 = load i32, i32* %123, align 4
  store i32 %124, i32* %8, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec19
  store i32 0, i32* %11, align 4
  br label %125

; <label>:125:                                    ; preds = %166, %120
  %126 = load i32, i32* %11, align 4
  %127 = load i32, i32* %8, align 4
  %128 = icmp slt i32 %126, %127
  br i1 %128, label %129, label %167

; <label>:129:                                    ; preds = %125
  %130 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %131 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %130, i32 0, i32 0
  %132 = load i32, i32* %12, align 4
  %133 = getelementptr inbounds [22 x i32], [22 x i32]* %131, i32 0, i32 %132
  %134 = load i32, i32* %133, align 4
  %135 = load i32, i32* %7, align 4
  %136 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i32 0, i32 %135
  %137 = load i32, i32* %136, align 4
  %138 = icmp sgt i32 %134, %137
  br i1 %138, label %139, label %147

; <label>:139:                                    ; preds = %129
  %140 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %141 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %140, i32 0, i32 0
  %142 = load i32, i32* %12, align 4
  %143 = getelementptr inbounds [22 x i32], [22 x i32]* %141, i32 0, i32 %142
  %144 = load i32, i32* %143, align 4
  %145 = load i32, i32* %7, align 4
  %146 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i32 0, i32 %145
  store i32 %144, i32* %146, align 4
  br label %147

; <label>:147:                                    ; preds = %139, %129
  br label %148

; <label>:148:                                    ; preds = %147
  %149 = load i32, i32* %11, align 4
  %150 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop47 = add <4 x i32> %150, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop47, <4 x i32>* %allocaVec19
  %151 = load <4 x i32>, <4 x i32>* %allocaVec19, align 4
  %extractE49 = extractelement <4 x i32> %151, i64 0
  %extractE50 = extractelement <4 x i32> %151, i64 1
  %extractE51 = extractelement <4 x i32> %151, i64 2
  %sum52 = add i32 %extractE49, %extractE50
  %sum53 = add i32 %sum52, %extractE51
  %152 = add nsw i32 %149, 1
  %Fmul48 = mul i32 %152, 3
  store i32 %152, i32* %Recovery2
  %Fcmp54 = icmp ne i32 %sum53, %Fmul48
  br i1 %Fcmp54, label %153, label %157

; <label>:153:                                    ; preds = %148
  %remThree136 = sdiv i32 %sum53, %extractE49
  %FcmpThree137 = icmp ne i32 %remThree136, 3
  br i1 %FcmpThree137, label %154, label %155

; <label>:154:                                    ; preds = %153
  store i32 %152, i32* %Recovery2, align 4
  br label %156

; <label>:155:                                    ; preds = %153
  store i32 %extractE49, i32* %Recovery2, align 4
  br label %156

; <label>:156:                                    ; preds = %155, %154
  br label %157

; <label>:157:                                    ; preds = %148, %156
  %ReplaceInst144 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst144, i32* %11, align 4
  %158 = load i32, i32* %12, align 4
  %159 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop55 = add <4 x i32> %159, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop55, <4 x i32>* %allocaVec20
  %160 = load <4 x i32>, <4 x i32>* %allocaVec20, align 4
  %extractE57 = extractelement <4 x i32> %160, i64 0
  %extractE58 = extractelement <4 x i32> %160, i64 1
  %extractE59 = extractelement <4 x i32> %160, i64 2
  %sum60 = add i32 %extractE57, %extractE58
  %sum61 = add i32 %sum60, %extractE59
  %161 = add nsw i32 %158, 1
  %Fmul56 = mul i32 %161, 3
  store i32 %161, i32* %Recovery3
  %Fcmp62 = icmp ne i32 %sum61, %Fmul56
  br i1 %Fcmp62, label %162, label %166

; <label>:162:                                    ; preds = %157
  %remThree138 = sdiv i32 %sum61, %extractE57
  %FcmpThree139 = icmp ne i32 %remThree138, 3
  br i1 %FcmpThree139, label %163, label %164

; <label>:163:                                    ; preds = %162
  store i32 %161, i32* %Recovery3, align 4
  br label %165

; <label>:164:                                    ; preds = %162
  store i32 %extractE57, i32* %Recovery3, align 4
  br label %165

; <label>:165:                                    ; preds = %164, %163
  br label %166

; <label>:166:                                    ; preds = %157, %165
  %ReplaceInst145 = load i32, i32* %Recovery3, align 4
  store i32 %ReplaceInst145, i32* %12, align 4
  br label %125

; <label>:167:                                    ; preds = %125
  br label %168

; <label>:168:                                    ; preds = %167
  %169 = load i32, i32* %7, align 4
  %170 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop63 = add <4 x i32> %170, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop63, <4 x i32>* %allocaVec15
  %171 = add nsw i32 %169, 1
  store i32 %171, i32* %7, align 4
  br label %117

; <label>:172:                                    ; preds = %117
  br label %173

; <label>:173:                                    ; preds = %172, %110
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec18
  store i32 0, i32* %10, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %7, align 4
  br label %174

; <label>:174:                                    ; preds = %198, %173
  %175 = load i32, i32* %7, align 4
  %176 = icmp slt i32 %175, 4
  br i1 %176, label %177, label %202

; <label>:177:                                    ; preds = %174
  %178 = load i32, i32* %7, align 4
  %179 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i32 0, i32 %178
  %180 = load i32, i32* %179, align 4
  %181 = load i32, i32* %5, align 4
  %182 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @max_range_sfac_tab, i32 0, i32 %181
  %183 = load i32, i32* %7, align 4
  %184 = getelementptr inbounds [4 x i32], [4 x i32]* %182, i32 0, i32 %183
  %185 = load i32, i32* %184, align 4
  %186 = icmp sgt i32 %180, %185
  br i1 %186, label %187, label %197

; <label>:187:                                    ; preds = %177
  %188 = load i32, i32* %10, align 4
  %insertElmt64 = insertelement <4 x i32> undef, i32 %188, i32 0
  %insertElmt65 = insertelement <4 x i32> %insertElmt64, i32 %188, i32 1
  %insertElmt66 = insertelement <4 x i32> %insertElmt65, i32 %188, i32 2
  %insertElmt67 = insertelement <4 x i32> %insertElmt66, i32 %188, i32 3
  store <4 x i32> %insertElmt67, <4 x i32>* %allocaVec18, align 16
  %189 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop68 = add <4 x i32> %189, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop68, <4 x i32>* %allocaVec18
  %190 = load <4 x i32>, <4 x i32>* %allocaVec18, align 4
  %extractE70 = extractelement <4 x i32> %190, i64 0
  %extractE71 = extractelement <4 x i32> %190, i64 1
  %extractE72 = extractelement <4 x i32> %190, i64 2
  %sum73 = add i32 %extractE70, %extractE71
  %sum74 = add i32 %sum73, %extractE72
  %191 = add nsw i32 %188, 1
  %Fmul69 = mul i32 %191, 3
  store i32 %191, i32* %Recovery4
  %Fcmp75 = icmp ne i32 %sum74, %Fmul69
  br i1 %Fcmp75, label %192, label %196

; <label>:192:                                    ; preds = %187
  %remThree140 = sdiv i32 %sum74, %extractE70
  %FcmpThree141 = icmp ne i32 %remThree140, 3
  br i1 %FcmpThree141, label %193, label %194

; <label>:193:                                    ; preds = %192
  store i32 %191, i32* %Recovery4, align 4
  br label %195

; <label>:194:                                    ; preds = %192
  store i32 %extractE70, i32* %Recovery4, align 4
  br label %195

; <label>:195:                                    ; preds = %194, %193
  br label %196

; <label>:196:                                    ; preds = %187, %195
  %ReplaceInst146 = load i32, i32* %Recovery4, align 4
  store i32 %ReplaceInst146, i32* %10, align 4
  br label %197

; <label>:197:                                    ; preds = %196, %177
  br label %198

; <label>:198:                                    ; preds = %197
  %199 = load i32, i32* %7, align 4
  %200 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop76 = add <4 x i32> %200, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop76, <4 x i32>* %allocaVec15
  %201 = add nsw i32 %199, 1
  store i32 %201, i32* %7, align 4
  br label %174

; <label>:202:                                    ; preds = %174
  %203 = load i32, i32* %10, align 4
  %204 = icmp ne i32 %203, 0
  br i1 %204, label %293, label %205

; <label>:205:                                    ; preds = %202
  %206 = load i32, i32* %5, align 4
  %207 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i32 0, i32 %206
  %208 = load i32, i32* %6, align 4
  %209 = getelementptr inbounds [3 x [4 x i32]], [3 x [4 x i32]]* %207, i32 0, i32 %208
  %210 = getelementptr inbounds [4 x i32], [4 x i32]* %209, i32 0, i32 0
  %211 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %212 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %211, i32 0, i32 19
  store i32* %210, i32** %212, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %7, align 4
  br label %213

; <label>:213:                                    ; preds = %226, %205
  %214 = load i32, i32* %7, align 4
  %215 = icmp slt i32 %214, 4
  br i1 %215, label %216, label %230

; <label>:216:                                    ; preds = %213
  %217 = load i32, i32* %7, align 4
  %218 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i32 0, i32 %217
  %219 = load i32, i32* %218, align 4
  %220 = getelementptr inbounds [16 x i32], [16 x i32]* @scale_bitcount_lsf.log2tab, i32 0, i32 %219
  %221 = load i32, i32* %220, align 4
  %222 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %223 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %222, i32 0, i32 20
  %224 = load i32, i32* %7, align 4
  %225 = getelementptr inbounds [4 x i32], [4 x i32]* %223, i32 0, i32 %224
  store i32 %221, i32* %225, align 4
  br label %226

; <label>:226:                                    ; preds = %216
  %227 = load i32, i32* %7, align 4
  %228 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop77 = add <4 x i32> %228, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop77, <4 x i32>* %allocaVec15
  %229 = add nsw i32 %227, 1
  store i32 %229, i32* %7, align 4
  br label %213

; <label>:230:                                    ; preds = %213
  %231 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %232 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %231, i32 0, i32 20
  %233 = getelementptr inbounds [4 x i32], [4 x i32]* %232, i32 0, i32 0
  %234 = load i32, i32* %233, align 4
  store i32 %234, i32* %15, align 4
  %235 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %236 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %235, i32 0, i32 20
  %237 = getelementptr inbounds [4 x i32], [4 x i32]* %236, i32 0, i32 1
  %238 = load i32, i32* %237, align 4
  store i32 %238, i32* %16, align 4
  %239 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %240 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %239, i32 0, i32 20
  %241 = getelementptr inbounds [4 x i32], [4 x i32]* %240, i32 0, i32 2
  %242 = load i32, i32* %241, align 4
  store i32 %242, i32* %17, align 4
  %243 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %244 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %243, i32 0, i32 20
  %245 = getelementptr inbounds [4 x i32], [4 x i32]* %244, i32 0, i32 3
  %246 = load i32, i32* %245, align 4
  store i32 %246, i32* %18, align 4
  %247 = load i32, i32* %5, align 4
  switch i32 %247, label %289 [
    i32 0, label %248
    i32 1, label %265
    i32 2, label %279
  ]

; <label>:248:                                    ; preds = %230
  %249 = load i32, i32* %15, align 4
  %insertElmt78 = insertelement <4 x i32> undef, i32 %249, i32 0
  %insertElmt79 = insertelement <4 x i32> %insertElmt78, i32 %249, i32 1
  %insertElmt80 = insertelement <4 x i32> %insertElmt79, i32 %249, i32 2
  %insertElmt81 = insertelement <4 x i32> %insertElmt80, i32 %249, i32 3
  store <4 x i32> %insertElmt81, <4 x i32>* %allocaVec21, align 16
  %250 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop82 = mul <4 x i32> %250, <i32 5, i32 5, i32 5, i32 5>
  %251 = mul i32 %249, 5
  %252 = load i32, i32* %16, align 4
  %insertElmt83 = insertelement <4 x i32> undef, i32 %252, i32 0
  %insertElmt84 = insertelement <4 x i32> %insertElmt83, i32 %252, i32 1
  %insertElmt85 = insertelement <4 x i32> %insertElmt84, i32 %252, i32 2
  %insertElmt86 = insertelement <4 x i32> %insertElmt85, i32 %252, i32 3
  store <4 x i32> %insertElmt86, <4 x i32>* %allocaVec22, align 16
  %253 = load <4 x i32>, <4 x i32>* %allocaVec22, align 16
  %Vop87 = add <4 x i32> %Vop82, %253
  %254 = add i32 %251, %252
  %Vop88 = shl <4 x i32> %Vop87, <i32 4, i32 4, i32 4, i32 4>
  %255 = shl i32 %254, 4
  %256 = load i32, i32* %17, align 4
  %insertElmt89 = insertelement <4 x i32> undef, i32 %256, i32 0
  %insertElmt90 = insertelement <4 x i32> %insertElmt89, i32 %256, i32 1
  %insertElmt91 = insertelement <4 x i32> %insertElmt90, i32 %256, i32 2
  %insertElmt92 = insertelement <4 x i32> %insertElmt91, i32 %256, i32 3
  store <4 x i32> %insertElmt92, <4 x i32>* %allocaVec23, align 16
  %257 = load <4 x i32>, <4 x i32>* %allocaVec23, align 16
  %Vop93 = shl <4 x i32> %257, <i32 2, i32 2, i32 2, i32 2>
  %258 = shl i32 %256, 2
  %Vop94 = add <4 x i32> %Vop88, %Vop93
  %259 = add i32 %255, %258
  %260 = load i32, i32* %18, align 4
  %insertElmt95 = insertelement <4 x i32> undef, i32 %260, i32 0
  %insertElmt96 = insertelement <4 x i32> %insertElmt95, i32 %260, i32 1
  %insertElmt97 = insertelement <4 x i32> %insertElmt96, i32 %260, i32 2
  %insertElmt98 = insertelement <4 x i32> %insertElmt97, i32 %260, i32 3
  store <4 x i32> %insertElmt98, <4 x i32>* %allocaVec24, align 16
  %261 = load <4 x i32>, <4 x i32>* %allocaVec24, align 16
  %Vop99 = add <4 x i32> %Vop94, %261
  %262 = add i32 %259, %260
  %263 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %264 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %263, i32 0, i32 4
  store i32 %262, i32* %264, align 4
  br label %292

; <label>:265:                                    ; preds = %230
  %266 = load i32, i32* %15, align 4
  %insertElmt100 = insertelement <4 x i32> undef, i32 %266, i32 0
  %insertElmt101 = insertelement <4 x i32> %insertElmt100, i32 %266, i32 1
  %insertElmt102 = insertelement <4 x i32> %insertElmt101, i32 %266, i32 2
  %insertElmt103 = insertelement <4 x i32> %insertElmt102, i32 %266, i32 3
  store <4 x i32> %insertElmt103, <4 x i32>* %allocaVec21, align 16
  %267 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop104 = mul <4 x i32> %267, <i32 5, i32 5, i32 5, i32 5>
  %268 = mul i32 %266, 5
  %269 = load i32, i32* %16, align 4
  %insertElmt105 = insertelement <4 x i32> undef, i32 %269, i32 0
  %insertElmt106 = insertelement <4 x i32> %insertElmt105, i32 %269, i32 1
  %insertElmt107 = insertelement <4 x i32> %insertElmt106, i32 %269, i32 2
  %insertElmt108 = insertelement <4 x i32> %insertElmt107, i32 %269, i32 3
  store <4 x i32> %insertElmt108, <4 x i32>* %allocaVec22, align 16
  %270 = load <4 x i32>, <4 x i32>* %allocaVec22, align 16
  %Vop109 = add <4 x i32> %Vop104, %270
  %271 = add i32 %268, %269
  %Vop110 = shl <4 x i32> %Vop109, <i32 2, i32 2, i32 2, i32 2>
  %272 = shl i32 %271, 2
  %Vop111 = add <4 x i32> <i32 400, i32 400, i32 400, i32 400>, %Vop110
  %273 = add i32 400, %272
  %274 = load i32, i32* %17, align 4
  %insertElmt112 = insertelement <4 x i32> undef, i32 %274, i32 0
  %insertElmt113 = insertelement <4 x i32> %insertElmt112, i32 %274, i32 1
  %insertElmt114 = insertelement <4 x i32> %insertElmt113, i32 %274, i32 2
  %insertElmt115 = insertelement <4 x i32> %insertElmt114, i32 %274, i32 3
  store <4 x i32> %insertElmt115, <4 x i32>* %allocaVec23, align 16
  %275 = load <4 x i32>, <4 x i32>* %allocaVec23, align 16
  %Vop116 = add <4 x i32> %Vop111, %275
  %276 = add i32 %273, %274
  %277 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %278 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %277, i32 0, i32 4
  store i32 %276, i32* %278, align 4
  br label %292

; <label>:279:                                    ; preds = %230
  %280 = load i32, i32* %15, align 4
  %insertElmt117 = insertelement <4 x i32> undef, i32 %280, i32 0
  %insertElmt118 = insertelement <4 x i32> %insertElmt117, i32 %280, i32 1
  %insertElmt119 = insertelement <4 x i32> %insertElmt118, i32 %280, i32 2
  %insertElmt120 = insertelement <4 x i32> %insertElmt119, i32 %280, i32 3
  store <4 x i32> %insertElmt120, <4 x i32>* %allocaVec21, align 16
  %281 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop121 = mul <4 x i32> %281, <i32 3, i32 3, i32 3, i32 3>
  %282 = mul i32 %280, 3
  %Vop122 = add <4 x i32> <i32 500, i32 500, i32 500, i32 500>, %Vop121
  %283 = add i32 500, %282
  %284 = load i32, i32* %16, align 4
  %insertElmt123 = insertelement <4 x i32> undef, i32 %284, i32 0
  %insertElmt124 = insertelement <4 x i32> %insertElmt123, i32 %284, i32 1
  %insertElmt125 = insertelement <4 x i32> %insertElmt124, i32 %284, i32 2
  %insertElmt126 = insertelement <4 x i32> %insertElmt125, i32 %284, i32 3
  store <4 x i32> %insertElmt126, <4 x i32>* %allocaVec22, align 16
  %285 = load <4 x i32>, <4 x i32>* %allocaVec22, align 16
  %Vop127 = add <4 x i32> %Vop122, %285
  %286 = add i32 %283, %284
  %287 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %288 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %287, i32 0, i32 4
  store i32 %286, i32* %288, align 4
  br label %292

; <label>:289:                                    ; preds = %230
  %290 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %291 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %290, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2.260, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:292:                                    ; preds = %279, %265, %248
  br label %293

; <label>:293:                                    ; preds = %292, %202
  %294 = load i32, i32* %10, align 4
  %295 = icmp ne i32 %294, 0
  br i1 %295, label %338, label %296

; <label>:296:                                    ; preds = %293
  %297 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %298 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %297, i32 0, i32 19
  %299 = load i32*, i32** %298, align 4
  %300 = icmp ne i32* %299, null
  br i1 %300, label %302, label %301

; <label>:301:                                    ; preds = %296
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3.261, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1.255, i32 0, i32 0), i32 665, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.scale_bitcount_lsf, i32 0, i32 0))
  br label %302

; <label>:302:                                    ; preds = %301, %296
  %303 = phi i1 [ true, %296 ], [ false, %301 ]
  %304 = zext i1 %303 to i32
  %305 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %306 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %305, i32 0, i32 15
  store i32 0, i32* %306, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %7, align 4
  br label %307

; <label>:307:                                    ; preds = %336, %302
  %308 = load i32, i32* %7, align 4
  %309 = icmp slt i32 %308, 4
  br i1 %309, label %310, label %337

; <label>:310:                                    ; preds = %307
  %311 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %312 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %311, i32 0, i32 20
  %313 = load i32, i32* %7, align 4
  %314 = getelementptr inbounds [4 x i32], [4 x i32]* %312, i32 0, i32 %313
  %315 = load i32, i32* %314, align 4
  %316 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %317 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %316, i32 0, i32 19
  %318 = load i32*, i32** %317, align 4
  %319 = load i32, i32* %7, align 4
  %320 = getelementptr inbounds i32, i32* %318, i32 %319
  %321 = load i32, i32* %320, align 4
  %322 = mul i32 %315, %321
  %323 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %324 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %323, i32 0, i32 15
  %325 = load i32, i32* %324, align 4
  %326 = add i32 %325, %322
  store i32 %326, i32* %324, align 4
  br label %327

; <label>:327:                                    ; preds = %310
  %328 = load i32, i32* %7, align 4
  %329 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop128 = add <4 x i32> %329, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop128, <4 x i32>* %allocaVec15
  %330 = load <4 x i32>, <4 x i32>* %allocaVec15, align 4
  %extractE130 = extractelement <4 x i32> %330, i64 0
  %extractE131 = extractelement <4 x i32> %330, i64 1
  %extractE132 = extractelement <4 x i32> %330, i64 2
  %sum133 = add i32 %extractE130, %extractE131
  %sum134 = add i32 %sum133, %extractE132
  %331 = add nsw i32 %328, 1
  %Fmul129 = mul i32 %331, 3
  store i32 %331, i32* %Recovery6
  %Fcmp135 = icmp ne i32 %sum134, %Fmul129
  br i1 %Fcmp135, label %332, label %336

; <label>:332:                                    ; preds = %327
  %remThree142 = sdiv i32 %sum134, %extractE130
  %FcmpThree143 = icmp ne i32 %remThree142, 3
  br i1 %FcmpThree143, label %333, label %334

; <label>:333:                                    ; preds = %332
  store i32 %331, i32* %Recovery6, align 4
  br label %335

; <label>:334:                                    ; preds = %332
  store i32 %extractE130, i32* %Recovery6, align 4
  br label %335

; <label>:335:                                    ; preds = %334, %333
  br label %336

; <label>:336:                                    ; preds = %327, %335
  %ReplaceInst147 = load i32, i32* %Recovery6, align 4
  store i32 %ReplaceInst147, i32* %7, align 4
  br label %307

; <label>:337:                                    ; preds = %307
  br label %338

; <label>:338:                                    ; preds = %337, %293
  %339 = load i32, i32* %10, align 4
  ret i32 %339
}

; Function Attrs: nounwind
define arm_aapcscc i32 @calc_xmin(%struct.lame_global_flags*, double*, %struct.III_psy_ratio*, %struct.gr_info*, %struct.III_psy_xmin*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec14 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec16 = alloca <2 x double>, align 16
  %Recovery4 = alloca double, align 8
  %allocaVec17 = alloca <4 x i32>, align 16
  %Recovery5 = alloca i32, align 4
  %allocaVec18 = alloca <4 x i32>, align 16
  %Recovery6 = alloca i32, align 4
  %allocaVec19 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec20 = alloca <2 x double>, align 16
  %CastInst7 = alloca double, align 4
  %CastInstVec8 = alloca <2 x double>, align 16
  %allocaVec21 = alloca <2 x double>, align 16
  %CastInst9 = alloca double, align 4
  %CastInstVec10 = alloca <2 x double>, align 16
  %allocaVec22 = alloca <2 x double>, align 16
  %CastInst11 = alloca double, align 4
  %CastInstVec12 = alloca <2 x double>, align 16
  %6 = alloca %struct.lame_global_flags*, align 4
  %7 = alloca double*, align 4
  %8 = alloca %struct.III_psy_ratio*, align 4
  %9 = alloca %struct.gr_info*, align 4
  %10 = alloca %struct.III_psy_xmin*, align 4
  %allocaVec23 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec24 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %allocaVec25 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %allocaVec26 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  %allocaVec27 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %allocaVec28 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %allocaVec29 = alloca <4 x i32>, align 16
  %17 = alloca i32, align 4
  %allocaVec30 = alloca <2 x double>, align 16
  %18 = alloca double, align 8
  %allocaVec31 = alloca <2 x double>, align 16
  %19 = alloca double, align 8
  %allocaVec32 = alloca <2 x double>, align 16
  %20 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %6, align 4
  store double* %1, double** %7, align 4
  store %struct.III_psy_ratio* %2, %struct.III_psy_ratio** %8, align 4
  store %struct.gr_info* %3, %struct.gr_info** %9, align 4
  store %struct.III_psy_xmin* %4, %struct.III_psy_xmin** %10, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec28
  store i32 0, i32* %16, align 4
  %21 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %22 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %21, i32 0, i32 33
  %23 = load i32, i32* %22, align 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %75

; <label>:25:                                     ; preds = %5
  %26 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %27 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %26, i32 0, i32 17
  %28 = load i32, i32* %27, align 4
  store i32 %28, i32* %17, align 4
  br label %29

; <label>:29:                                     ; preds = %51, %25
  %30 = load i32, i32* %17, align 4
  %31 = icmp ult i32 %30, 12
  br i1 %31, label %32, label %55

; <label>:32:                                     ; preds = %29
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec27
  store i32 0, i32* %15, align 4
  br label %33

; <label>:33:                                     ; preds = %46, %32
  %34 = load i32, i32* %15, align 4
  %35 = icmp slt i32 %34, 3
  br i1 %35, label %36, label %50

; <label>:36:                                     ; preds = %33
  %37 = load i32, i32* %17, align 4
  %38 = getelementptr inbounds [21 x double], [21 x double]* @ATH_s, i32 0, i32 %37
  %39 = load double, double* %38, align 8
  %40 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %10, align 4
  %41 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %40, i32 0, i32 1
  %42 = load i32, i32* %17, align 4
  %43 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %41, i32 0, i32 %42
  %44 = load i32, i32* %15, align 4
  %45 = getelementptr inbounds [3 x double], [3 x double]* %43, i32 0, i32 %44
  store double %39, double* %45, align 8
  br label %46

; <label>:46:                                     ; preds = %36
  %47 = load i32, i32* %15, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %47, i32 0
  %insertElmt33 = insertelement <4 x i32> %insertElmt, i32 %47, i32 1
  %insertElmt34 = insertelement <4 x i32> %insertElmt33, i32 %47, i32 2
  %insertElmt35 = insertelement <4 x i32> %insertElmt34, i32 %47, i32 3
  store <4 x i32> %insertElmt35, <4 x i32>* %allocaVec27, align 16
  %48 = load <4 x i32>, <4 x i32>* %allocaVec27, align 16
  %Vop = add <4 x i32> %48, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec27
  %49 = add nsw i32 %47, 1
  store i32 %49, i32* %15, align 4
  br label %33

; <label>:50:                                     ; preds = %33
  br label %51

; <label>:51:                                     ; preds = %50
  %52 = load i32, i32* %17, align 4
  %insertElmt36 = insertelement <4 x i32> undef, i32 %52, i32 0
  %insertElmt37 = insertelement <4 x i32> %insertElmt36, i32 %52, i32 1
  %insertElmt38 = insertelement <4 x i32> %insertElmt37, i32 %52, i32 2
  %insertElmt39 = insertelement <4 x i32> %insertElmt38, i32 %52, i32 3
  store <4 x i32> %insertElmt39, <4 x i32>* %allocaVec29, align 16
  %53 = load <4 x i32>, <4 x i32>* %allocaVec29, align 16
  %Vop40 = add <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop40, <4 x i32>* %allocaVec29
  %54 = add i32 %52, 1
  store i32 %54, i32* %17, align 4
  br label %29

; <label>:55:                                     ; preds = %29
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec29
  store i32 0, i32* %17, align 4
  br label %56

; <label>:56:                                     ; preds = %70, %55
  %57 = load i32, i32* %17, align 4
  %58 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %59 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %58, i32 0, i32 16
  %60 = load i32, i32* %59, align 4
  %61 = icmp ult i32 %57, %60
  br i1 %61, label %62, label %74

; <label>:62:                                     ; preds = %56
  %63 = load i32, i32* %17, align 4
  %64 = getelementptr inbounds [21 x double], [21 x double]* @ATH_l, i32 0, i32 %63
  %65 = load double, double* %64, align 8
  %66 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %10, align 4
  %67 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %66, i32 0, i32 0
  %68 = load i32, i32* %17, align 4
  %69 = getelementptr inbounds [22 x double], [22 x double]* %67, i32 0, i32 %68
  store double %65, double* %69, align 8
  br label %70

; <label>:70:                                     ; preds = %62
  %71 = load i32, i32* %17, align 4
  %72 = load <4 x i32>, <4 x i32>* %allocaVec29, align 16
  %Vop41 = add <4 x i32> %72, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop41, <4 x i32>* %allocaVec29
  %73 = add i32 %71, 1
  store i32 %73, i32* %17, align 4
  br label %56

; <label>:74:                                     ; preds = %56
  br label %344

; <label>:75:                                     ; preds = %5
  %76 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %77 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %76, i32 0, i32 17
  %78 = load i32, i32* %77, align 4
  store i32 %78, i32* %17, align 4
  br label %79

; <label>:79:                                     ; preds = %210, %75
  %80 = load i32, i32* %17, align 4
  %81 = icmp ult i32 %80, 12
  br i1 %81, label %82, label %214

; <label>:82:                                     ; preds = %79
  %83 = load i32, i32* %17, align 4
  %84 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %83
  %85 = load i32, i32* %84, align 4
  store i32 %85, i32* %11, align 4
  %86 = load i32, i32* %17, align 4
  %87 = load <4 x i32>, <4 x i32>* %allocaVec29, align 16
  %Vop42 = add <4 x i32> %87, <i32 1, i32 1, i32 1, i32 1>
  %88 = add i32 %86, 1
  %89 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %88
  %90 = load i32, i32* %89, align 4
  store i32 %90, i32* %12, align 4
  %91 = load i32, i32* %12, align 4
  %insertElmt43 = insertelement <4 x i32> undef, i32 %91, i32 0
  %insertElmt44 = insertelement <4 x i32> %insertElmt43, i32 %91, i32 1
  %insertElmt45 = insertelement <4 x i32> %insertElmt44, i32 %91, i32 2
  %insertElmt46 = insertelement <4 x i32> %insertElmt45, i32 %91, i32 3
  store <4 x i32> %insertElmt46, <4 x i32>* %allocaVec24, align 16
  %92 = load i32, i32* %11, align 4
  %insertElmt47 = insertelement <4 x i32> undef, i32 %92, i32 0
  %insertElmt48 = insertelement <4 x i32> %insertElmt47, i32 %92, i32 1
  %insertElmt49 = insertelement <4 x i32> %insertElmt48, i32 %92, i32 2
  %insertElmt50 = insertelement <4 x i32> %insertElmt49, i32 %92, i32 3
  store <4 x i32> %insertElmt50, <4 x i32>* %allocaVec23, align 16
  %93 = load <4 x i32>, <4 x i32>* %allocaVec24, align 16
  %94 = load <4 x i32>, <4 x i32>* %allocaVec23, align 16
  %Vop51 = sub <4 x i32> %93, %94
  store <4 x i32> %Vop51, <4 x i32>* %allocaVec25
  %95 = load <4 x i32>, <4 x i32>* %allocaVec25, align 4
  %extractE = extractelement <4 x i32> %95, i64 0
  %extractE52 = extractelement <4 x i32> %95, i64 1
  %extractE53 = extractelement <4 x i32> %95, i64 2
  %sum = add i32 %extractE, %extractE52
  %sum54 = add i32 %sum, %extractE53
  %96 = sub nsw i32 %91, %92
  %Fmul = mul i32 %96, 3
  store i32 %96, i32* %Recovery
  %Fcmp = icmp ne i32 %sum54, %Fmul
  br i1 %Fcmp, label %97, label %101

; <label>:97:                                     ; preds = %82
  %remThree = sdiv i32 %sum54, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %98, label %99

; <label>:98:                                     ; preds = %97
  store i32 %96, i32* %Recovery, align 4
  br label %100

; <label>:99:                                     ; preds = %97
  store i32 %extractE, i32* %Recovery, align 4
  br label %100

; <label>:100:                                    ; preds = %99, %98
  br label %101

; <label>:101:                                    ; preds = %82, %100
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %13, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec27
  store i32 0, i32* %15, align 4
  br label %102

; <label>:102:                                    ; preds = %208, %101
  %103 = load i32, i32* %15, align 4
  %104 = icmp slt i32 %103, 3
  br i1 %104, label %105, label %209

; <label>:105:                                    ; preds = %102
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec30
  store double 0.000000e+00, double* %18, align 8
  %106 = load i32, i32* %11, align 4
  store i32 %106, i32* %14, align 4
  br label %107

; <label>:107:                                    ; preds = %131, %105
  %108 = load i32, i32* %14, align 4
  %109 = load i32, i32* %12, align 4
  %110 = icmp slt i32 %108, %109
  br i1 %110, label %111, label %135

; <label>:111:                                    ; preds = %107
  %112 = load double*, double** %7, align 4
  %113 = load i32, i32* %14, align 4
  %insertElmt55 = insertelement <4 x i32> undef, i32 %113, i32 0
  %insertElmt56 = insertelement <4 x i32> %insertElmt55, i32 %113, i32 1
  %insertElmt57 = insertelement <4 x i32> %insertElmt56, i32 %113, i32 2
  %insertElmt58 = insertelement <4 x i32> %insertElmt57, i32 %113, i32 3
  store <4 x i32> %insertElmt58, <4 x i32>* %allocaVec26, align 16
  %114 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop59 = mul <4 x i32> %114, <i32 3, i32 3, i32 3, i32 3>
  %115 = mul nsw i32 %113, 3
  %116 = load i32, i32* %15, align 4
  %117 = load <4 x i32>, <4 x i32>* %allocaVec27, align 16
  %Vop60 = add <4 x i32> %Vop59, %117
  %118 = add nsw i32 %115, %116
  %119 = getelementptr inbounds double, double* %112, i32 %118
  %120 = load double, double* %119, align 8
  store double %120, double* %20, align 8
  %121 = load double, double* %20, align 8
  %insertElmt61 = insertelement <2 x double> undef, double %121, i32 0
  %insertElmt62 = insertelement <2 x double> %insertElmt61, double %121, i32 1
  store <2 x double> %insertElmt62, <2 x double>* %allocaVec32, align 16
  %122 = load double, double* %20, align 8
  %insertElmt63 = insertelement <2 x double> undef, double %122, i32 0
  %insertElmt64 = insertelement <2 x double> %insertElmt63, double %122, i32 1
  store <2 x double> %insertElmt64, <2 x double>* %allocaVec32, align 16
  %123 = load <2 x double>, <2 x double>* %allocaVec32, align 16
  %124 = load <2 x double>, <2 x double>* %allocaVec32, align 16
  %Vop65 = fmul <2 x double> %123, %124
  store <2 x double> %Vop65, <2 x double>* %allocaVec32
  %125 = fmul double %121, %122
  store double %125, double* %20, align 8
  %126 = load double, double* %20, align 8
  %127 = load double, double* %18, align 8
  %insertElmt66 = insertelement <2 x double> undef, double %127, i32 0
  %insertElmt67 = insertelement <2 x double> %insertElmt66, double %127, i32 1
  store <2 x double> %insertElmt67, <2 x double>* %allocaVec30, align 16
  %128 = load <2 x double>, <2 x double>* %allocaVec30, align 16
  %129 = load <2 x double>, <2 x double>* %allocaVec32, align 16
  %Vop68 = fadd <2 x double> %128, %129
  store <2 x double> %Vop68, <2 x double>* %allocaVec30
  %130 = fadd double %127, %126
  store double %130, double* %18, align 8
  br label %131

; <label>:131:                                    ; preds = %111
  %132 = load i32, i32* %14, align 4
  %insertElmt69 = insertelement <4 x i32> undef, i32 %132, i32 0
  %insertElmt70 = insertelement <4 x i32> %insertElmt69, i32 %132, i32 1
  %insertElmt71 = insertelement <4 x i32> %insertElmt70, i32 %132, i32 2
  %insertElmt72 = insertelement <4 x i32> %insertElmt71, i32 %132, i32 3
  store <4 x i32> %insertElmt72, <4 x i32>* %allocaVec26, align 16
  %133 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop73 = add <4 x i32> %133, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop73, <4 x i32>* %allocaVec26
  %134 = add nsw i32 %132, 1
  store i32 %134, i32* %14, align 4
  br label %107

; <label>:135:                                    ; preds = %107
  %136 = load i32, i32* %13, align 4
  %137 = sitofp i32 %136 to double
  %138 = load double, double* %18, align 8
  %139 = load <2 x double>, <2 x double>* %allocaVec30, align 16
  store double %137, double* %CastInst
  %140 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %140, i32 0
  %insertCast74 = insertelement <2 x double> %insertCast, double %140, i32 1
  store <2 x double> %insertCast74, <2 x double>* %CastInstVec, align 4
  %141 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %Vop75 = fdiv <2 x double> %139, %141
  store <2 x double> %Vop75, <2 x double>* %allocaVec30
  %142 = fdiv double %138, %137
  store double %142, double* %18, align 8
  %143 = load %struct.III_psy_ratio*, %struct.III_psy_ratio** %8, align 4
  %144 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %143, i32 0, i32 1
  %145 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %144, i32 0, i32 1
  %146 = load i32, i32* %17, align 4
  %147 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %145, i32 0, i32 %146
  %148 = load i32, i32* %15, align 4
  %149 = getelementptr inbounds [3 x double], [3 x double]* %147, i32 0, i32 %148
  %150 = load double, double* %149, align 8
  store double %150, double* %19, align 8
  %151 = load double, double* %19, align 8
  %152 = fcmp ogt double %151, 0.000000e+00
  br i1 %152, label %153, label %169

; <label>:153:                                    ; preds = %135
  %154 = load double, double* %18, align 8
  %155 = load %struct.III_psy_ratio*, %struct.III_psy_ratio** %8, align 4
  %156 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %155, i32 0, i32 0
  %157 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %156, i32 0, i32 1
  %158 = load i32, i32* %17, align 4
  %159 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %157, i32 0, i32 %158
  %160 = load i32, i32* %15, align 4
  %161 = getelementptr inbounds [3 x double], [3 x double]* %159, i32 0, i32 %160
  %162 = load double, double* %161, align 8
  %163 = fmul double %154, %162
  %164 = load float, float* @masking_lower, align 4
  %165 = fpext float %164 to double
  %166 = fmul double %163, %165
  %167 = load double, double* %19, align 8
  %168 = fdiv double %166, %167
  store double %168, double* %19, align 8
  br label %169

; <label>:169:                                    ; preds = %153, %135
  %170 = load i32, i32* %17, align 4
  %171 = getelementptr inbounds [21 x double], [21 x double]* @ATH_s, i32 0, i32 %170
  %172 = load double, double* %171, align 8
  %173 = load double, double* %19, align 8
  %174 = fcmp ogt double %172, %173
  br i1 %174, label %175, label %179

; <label>:175:                                    ; preds = %169
  %176 = load i32, i32* %17, align 4
  %177 = getelementptr inbounds [21 x double], [21 x double]* @ATH_s, i32 0, i32 %176
  %178 = load double, double* %177, align 8
  br label %181

; <label>:179:                                    ; preds = %169
  %180 = load double, double* %19, align 8
  br label %181

; <label>:181:                                    ; preds = %179, %175
  %182 = phi double [ %178, %175 ], [ %180, %179 ]
  %183 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %10, align 4
  %184 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %183, i32 0, i32 1
  %185 = load i32, i32* %17, align 4
  %186 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %184, i32 0, i32 %185
  %187 = load i32, i32* %15, align 4
  %188 = getelementptr inbounds [3 x double], [3 x double]* %186, i32 0, i32 %187
  store double %182, double* %188, align 8
  %189 = load double, double* %18, align 8
  %190 = load i32, i32* %17, align 4
  %191 = getelementptr inbounds [21 x double], [21 x double]* @ATH_s, i32 0, i32 %190
  %192 = load double, double* %191, align 8
  %193 = fcmp ogt double %189, %192
  br i1 %193, label %194, label %198

; <label>:194:                                    ; preds = %181
  %195 = load i32, i32* %16, align 4
  %insertElmt76 = insertelement <4 x i32> undef, i32 %195, i32 0
  %insertElmt77 = insertelement <4 x i32> %insertElmt76, i32 %195, i32 1
  %insertElmt78 = insertelement <4 x i32> %insertElmt77, i32 %195, i32 2
  %insertElmt79 = insertelement <4 x i32> %insertElmt78, i32 %195, i32 3
  store <4 x i32> %insertElmt79, <4 x i32>* %allocaVec28, align 16
  %196 = load <4 x i32>, <4 x i32>* %allocaVec28, align 16
  %Vop80 = add <4 x i32> %196, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop80, <4 x i32>* %allocaVec28
  %197 = add nsw i32 %195, 1
  store i32 %197, i32* %16, align 4
  br label %198

; <label>:198:                                    ; preds = %194, %181
  br label %199

; <label>:199:                                    ; preds = %198
  %200 = load i32, i32* %15, align 4
  %201 = load <4 x i32>, <4 x i32>* %allocaVec27, align 16
  %Vop81 = add <4 x i32> %201, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop81, <4 x i32>* %allocaVec27
  %202 = load <4 x i32>, <4 x i32>* %allocaVec27, align 4
  %extractE83 = extractelement <4 x i32> %202, i64 0
  %extractE84 = extractelement <4 x i32> %202, i64 1
  %extractE85 = extractelement <4 x i32> %202, i64 2
  %sum86 = add i32 %extractE83, %extractE84
  %sum87 = add i32 %sum86, %extractE85
  %203 = add nsw i32 %200, 1
  %Fmul82 = mul i32 %203, 3
  store i32 %203, i32* %Recovery1
  %Fcmp88 = icmp ne i32 %sum87, %Fmul82
  br i1 %Fcmp88, label %204, label %208

; <label>:204:                                    ; preds = %199
  %remThree134 = sdiv i32 %sum87, %extractE83
  %FcmpThree135 = icmp ne i32 %remThree134, 3
  br i1 %FcmpThree135, label %205, label %206

; <label>:205:                                    ; preds = %204
  store i32 %203, i32* %Recovery1, align 4
  br label %207

; <label>:206:                                    ; preds = %204
  store i32 %extractE83, i32* %Recovery1, align 4
  br label %207

; <label>:207:                                    ; preds = %206, %205
  br label %208

; <label>:208:                                    ; preds = %199, %207
  %ReplaceInst144 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst144, i32* %15, align 4
  br label %102

; <label>:209:                                    ; preds = %102
  br label %210

; <label>:210:                                    ; preds = %209
  %211 = load i32, i32* %17, align 4
  %212 = load <4 x i32>, <4 x i32>* %allocaVec29, align 16
  %Vop89 = add <4 x i32> %212, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop89, <4 x i32>* %allocaVec29
  %213 = add i32 %211, 1
  store i32 %213, i32* %17, align 4
  br label %79

; <label>:214:                                    ; preds = %79
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec29
  store i32 0, i32* %17, align 4
  br label %215

; <label>:215:                                    ; preds = %342, %214
  %216 = load i32, i32* %17, align 4
  %217 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %218 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %217, i32 0, i32 16
  %219 = load i32, i32* %218, align 4
  %220 = icmp ult i32 %216, %219
  br i1 %220, label %221, label %343

; <label>:221:                                    ; preds = %215
  %222 = load i32, i32* %17, align 4
  %223 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %222
  %224 = load i32, i32* %223, align 4
  store i32 %224, i32* %11, align 4
  %225 = load i32, i32* %17, align 4
  %226 = load <4 x i32>, <4 x i32>* %allocaVec29, align 16
  %Vop90 = add <4 x i32> %226, <i32 1, i32 1, i32 1, i32 1>
  %227 = add i32 %225, 1
  %228 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %227
  %229 = load i32, i32* %228, align 4
  store i32 %229, i32* %12, align 4
  %230 = load i32, i32* %12, align 4
  %insertElmt91 = insertelement <4 x i32> undef, i32 %230, i32 0
  %insertElmt92 = insertelement <4 x i32> %insertElmt91, i32 %230, i32 1
  %insertElmt93 = insertelement <4 x i32> %insertElmt92, i32 %230, i32 2
  %insertElmt94 = insertelement <4 x i32> %insertElmt93, i32 %230, i32 3
  store <4 x i32> %insertElmt94, <4 x i32>* %allocaVec24, align 16
  %231 = load i32, i32* %11, align 4
  %insertElmt95 = insertelement <4 x i32> undef, i32 %231, i32 0
  %insertElmt96 = insertelement <4 x i32> %insertElmt95, i32 %231, i32 1
  %insertElmt97 = insertelement <4 x i32> %insertElmt96, i32 %231, i32 2
  %insertElmt98 = insertelement <4 x i32> %insertElmt97, i32 %231, i32 3
  store <4 x i32> %insertElmt98, <4 x i32>* %allocaVec23, align 16
  %232 = load <4 x i32>, <4 x i32>* %allocaVec24, align 16
  %233 = load <4 x i32>, <4 x i32>* %allocaVec23, align 16
  %Vop99 = sub <4 x i32> %232, %233
  store <4 x i32> %Vop99, <4 x i32>* %allocaVec25
  %234 = load <4 x i32>, <4 x i32>* %allocaVec25, align 4
  %extractE101 = extractelement <4 x i32> %234, i64 0
  %extractE102 = extractelement <4 x i32> %234, i64 1
  %extractE103 = extractelement <4 x i32> %234, i64 2
  %sum104 = add i32 %extractE101, %extractE102
  %sum105 = add i32 %sum104, %extractE103
  %235 = sub nsw i32 %230, %231
  %Fmul100 = mul i32 %235, 3
  store i32 %235, i32* %Recovery2
  %Fcmp106 = icmp ne i32 %sum105, %Fmul100
  br i1 %Fcmp106, label %236, label %240

; <label>:236:                                    ; preds = %221
  %remThree136 = sdiv i32 %sum105, %extractE101
  %FcmpThree137 = icmp ne i32 %remThree136, 3
  br i1 %FcmpThree137, label %237, label %238

; <label>:237:                                    ; preds = %236
  store i32 %235, i32* %Recovery2, align 4
  br label %239

; <label>:238:                                    ; preds = %236
  store i32 %extractE101, i32* %Recovery2, align 4
  br label %239

; <label>:239:                                    ; preds = %238, %237
  br label %240

; <label>:240:                                    ; preds = %221, %239
  %ReplaceInst145 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst145, i32* %13, align 4
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec30
  store double 0.000000e+00, double* %18, align 8
  %241 = load i32, i32* %11, align 4
  store i32 %241, i32* %14, align 4
  br label %242

; <label>:242:                                    ; preds = %268, %240
  %243 = load i32, i32* %14, align 4
  %244 = load i32, i32* %12, align 4
  %245 = icmp slt i32 %243, %244
  br i1 %245, label %246, label %269

; <label>:246:                                    ; preds = %242
  %247 = load double*, double** %7, align 4
  %248 = load i32, i32* %14, align 4
  %249 = getelementptr inbounds double, double* %247, i32 %248
  %250 = load double, double* %249, align 8
  %251 = load double*, double** %7, align 4
  %252 = load i32, i32* %14, align 4
  %253 = getelementptr inbounds double, double* %251, i32 %252
  %254 = load double, double* %253, align 8
  %255 = fmul double %250, %254
  store double %255, double* %20, align 8
  %256 = load double, double* %20, align 8
  %257 = load double, double* %18, align 8
  %258 = fadd double %257, %256
  store double %258, double* %18, align 8
  br label %259

; <label>:259:                                    ; preds = %246
  %260 = load i32, i32* %14, align 4
  %261 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop107 = add <4 x i32> %261, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop107, <4 x i32>* %allocaVec26
  %262 = load <4 x i32>, <4 x i32>* %allocaVec26, align 4
  %extractE109 = extractelement <4 x i32> %262, i64 0
  %extractE110 = extractelement <4 x i32> %262, i64 1
  %extractE111 = extractelement <4 x i32> %262, i64 2
  %sum112 = add i32 %extractE109, %extractE110
  %sum113 = add i32 %sum112, %extractE111
  %263 = add nsw i32 %260, 1
  %Fmul108 = mul i32 %263, 3
  store i32 %263, i32* %Recovery3
  %Fcmp114 = icmp ne i32 %sum113, %Fmul108
  br i1 %Fcmp114, label %264, label %268

; <label>:264:                                    ; preds = %259
  %remThree138 = sdiv i32 %sum113, %extractE109
  %FcmpThree139 = icmp ne i32 %remThree138, 3
  br i1 %FcmpThree139, label %265, label %266

; <label>:265:                                    ; preds = %264
  store i32 %263, i32* %Recovery3, align 4
  br label %267

; <label>:266:                                    ; preds = %264
  store i32 %extractE109, i32* %Recovery3, align 4
  br label %267

; <label>:267:                                    ; preds = %266, %265
  br label %268

; <label>:268:                                    ; preds = %259, %267
  %ReplaceInst146 = load i32, i32* %Recovery3, align 4
  store i32 %ReplaceInst146, i32* %14, align 4
  br label %242

; <label>:269:                                    ; preds = %242
  %270 = load i32, i32* %13, align 4
  %271 = sitofp i32 %270 to double
  %272 = load double, double* %18, align 8
  %273 = load <2 x double>, <2 x double>* %allocaVec30, align 16
  store double %271, double* %CastInst9
  %274 = load double, double* %CastInst9, align 4
  %insertCast115 = insertelement <2 x double> undef, double %274, i32 0
  %insertCast116 = insertelement <2 x double> %insertCast115, double %274, i32 1
  store <2 x double> %insertCast116, <2 x double>* %CastInstVec10, align 4
  %275 = load <2 x double>, <2 x double>* %CastInstVec10, align 4
  %Vop117 = fdiv <2 x double> %273, %275
  store <2 x double> %Vop117, <2 x double>* %allocaVec30
  %276 = fdiv double %272, %271
  store double %276, double* %18, align 8
  %277 = load %struct.III_psy_ratio*, %struct.III_psy_ratio** %8, align 4
  %278 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %277, i32 0, i32 1
  %279 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %278, i32 0, i32 0
  %280 = load i32, i32* %17, align 4
  %281 = getelementptr inbounds [22 x double], [22 x double]* %279, i32 0, i32 %280
  %282 = load double, double* %281, align 8
  store double %282, double* %19, align 8
  %283 = load double, double* %19, align 8
  %284 = fcmp ogt double %283, 0.000000e+00
  br i1 %284, label %285, label %299

; <label>:285:                                    ; preds = %269
  %286 = load double, double* %18, align 8
  %287 = load %struct.III_psy_ratio*, %struct.III_psy_ratio** %8, align 4
  %288 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %287, i32 0, i32 0
  %289 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %288, i32 0, i32 0
  %290 = load i32, i32* %17, align 4
  %291 = getelementptr inbounds [22 x double], [22 x double]* %289, i32 0, i32 %290
  %292 = load double, double* %291, align 8
  %293 = fmul double %286, %292
  %294 = load float, float* @masking_lower, align 4
  %295 = fpext float %294 to double
  %296 = fmul double %293, %295
  %297 = load double, double* %19, align 8
  %298 = fdiv double %296, %297
  store double %298, double* %19, align 8
  br label %299

; <label>:299:                                    ; preds = %285, %269
  %300 = load i32, i32* %17, align 4
  %301 = getelementptr inbounds [21 x double], [21 x double]* @ATH_l, i32 0, i32 %300
  %302 = load double, double* %301, align 8
  %303 = load double, double* %19, align 8
  %304 = fcmp ogt double %302, %303
  br i1 %304, label %305, label %309

; <label>:305:                                    ; preds = %299
  %306 = load i32, i32* %17, align 4
  %307 = getelementptr inbounds [21 x double], [21 x double]* @ATH_l, i32 0, i32 %306
  %308 = load double, double* %307, align 8
  br label %311

; <label>:309:                                    ; preds = %299
  %310 = load double, double* %19, align 8
  br label %311

; <label>:311:                                    ; preds = %309, %305
  %312 = phi double [ %308, %305 ], [ %310, %309 ]
  %313 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %10, align 4
  %314 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %313, i32 0, i32 0
  %315 = load i32, i32* %17, align 4
  %316 = getelementptr inbounds [22 x double], [22 x double]* %314, i32 0, i32 %315
  store double %312, double* %316, align 8
  %317 = load double, double* %18, align 8
  %318 = load i32, i32* %17, align 4
  %319 = getelementptr inbounds [21 x double], [21 x double]* @ATH_l, i32 0, i32 %318
  %320 = load double, double* %319, align 8
  %321 = fcmp ogt double %317, %320
  br i1 %321, label %322, label %332

; <label>:322:                                    ; preds = %311
  %323 = load i32, i32* %16, align 4
  %324 = load <4 x i32>, <4 x i32>* %allocaVec28, align 16
  %Vop118 = add <4 x i32> %324, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop118, <4 x i32>* %allocaVec28
  %325 = load <4 x i32>, <4 x i32>* %allocaVec28, align 4
  %extractE120 = extractelement <4 x i32> %325, i64 0
  %extractE121 = extractelement <4 x i32> %325, i64 1
  %extractE122 = extractelement <4 x i32> %325, i64 2
  %sum123 = add i32 %extractE120, %extractE121
  %sum124 = add i32 %sum123, %extractE122
  %326 = add nsw i32 %323, 1
  %Fmul119 = mul i32 %326, 3
  store i32 %326, i32* %Recovery5
  %Fcmp125 = icmp ne i32 %sum124, %Fmul119
  br i1 %Fcmp125, label %327, label %331

; <label>:327:                                    ; preds = %322
  %remThree140 = sdiv i32 %sum124, %extractE120
  %FcmpThree141 = icmp ne i32 %remThree140, 3
  br i1 %FcmpThree141, label %328, label %329

; <label>:328:                                    ; preds = %327
  store i32 %326, i32* %Recovery5, align 4
  br label %330

; <label>:329:                                    ; preds = %327
  store i32 %extractE120, i32* %Recovery5, align 4
  br label %330

; <label>:330:                                    ; preds = %329, %328
  br label %331

; <label>:331:                                    ; preds = %322, %330
  %ReplaceInst147 = load i32, i32* %Recovery5, align 4
  store i32 %ReplaceInst147, i32* %16, align 4
  br label %332

; <label>:332:                                    ; preds = %331, %311
  br label %333

; <label>:333:                                    ; preds = %332
  %334 = load i32, i32* %17, align 4
  %335 = load <4 x i32>, <4 x i32>* %allocaVec29, align 16
  %Vop126 = add <4 x i32> %335, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop126, <4 x i32>* %allocaVec29
  %336 = load <4 x i32>, <4 x i32>* %allocaVec29, align 4
  %extractE128 = extractelement <4 x i32> %336, i64 0
  %extractE129 = extractelement <4 x i32> %336, i64 1
  %extractE130 = extractelement <4 x i32> %336, i64 2
  %sum131 = add i32 %extractE128, %extractE129
  %sum132 = add i32 %sum131, %extractE130
  %337 = add i32 %334, 1
  %Fmul127 = mul i32 %337, 3
  store i32 %337, i32* %Recovery6
  %Fcmp133 = icmp ne i32 %sum132, %Fmul127
  br i1 %Fcmp133, label %338, label %342

; <label>:338:                                    ; preds = %333
  %remThree142 = sdiv i32 %sum132, %extractE128
  %FcmpThree143 = icmp ne i32 %remThree142, 3
  br i1 %FcmpThree143, label %339, label %340

; <label>:339:                                    ; preds = %338
  store i32 %337, i32* %Recovery6, align 4
  br label %341

; <label>:340:                                    ; preds = %338
  store i32 %extractE128, i32* %Recovery6, align 4
  br label %341

; <label>:341:                                    ; preds = %340, %339
  br label %342

; <label>:342:                                    ; preds = %333, %341
  %ReplaceInst148 = load i32, i32* %Recovery6, align 4
  store i32 %ReplaceInst148, i32* %17, align 4
  br label %215

; <label>:343:                                    ; preds = %215
  br label %344

; <label>:344:                                    ; preds = %343, %74
  %345 = load i32, i32* %16, align 4
  ret i32 %345
}

; Function Attrs: nounwind
define arm_aapcscc i32 @loop_break(%struct.III_scalefac_t*, %struct.gr_info*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %4 = alloca %struct.III_scalefac_t*, align 4
  %5 = alloca %struct.gr_info*, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  store %struct.III_scalefac_t* %0, %struct.III_scalefac_t** %4, align 4
  store %struct.gr_info* %1, %struct.gr_info** %5, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec5
  store i32 0, i32* %7, align 4
  br label %8

; <label>:8:                                      ; preds = %23, %2
  %9 = load i32, i32* %7, align 4
  %10 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %11 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %10, i32 0, i32 16
  %12 = load i32, i32* %11, align 4
  %13 = icmp ult i32 %9, %12
  br i1 %13, label %14, label %27

; <label>:14:                                     ; preds = %8
  %15 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %4, align 4
  %16 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %15, i32 0, i32 0
  %17 = load i32, i32* %7, align 4
  %18 = getelementptr inbounds [22 x i32], [22 x i32]* %16, i32 0, i32 %17
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %14
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec3
  store i32 0, i32* %3, align 4
  br label %71

; <label>:22:                                     ; preds = %14
  br label %23

; <label>:23:                                     ; preds = %22
  %24 = load i32, i32* %7, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %24, i32 0
  %insertElmt6 = insertelement <4 x i32> %insertElmt, i32 %24, i32 1
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %24, i32 2
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %24, i32 3
  store <4 x i32> %insertElmt8, <4 x i32>* %allocaVec5, align 16
  %25 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop = add <4 x i32> %25, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec5
  %26 = add i32 %24, 1
  store i32 %26, i32* %7, align 4
  br label %8

; <label>:27:                                     ; preds = %8
  %28 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %29 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %28, i32 0, i32 17
  %30 = load i32, i32* %29, align 4
  store i32 %30, i32* %7, align 4
  br label %31

; <label>:31:                                     ; preds = %69, %27
  %32 = load i32, i32* %7, align 4
  %33 = icmp ult i32 %32, 12
  br i1 %33, label %34, label %70

; <label>:34:                                     ; preds = %31
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec4
  store i32 0, i32* %6, align 4
  br label %35

; <label>:35:                                     ; preds = %58, %34
  %36 = load i32, i32* %6, align 4
  %37 = icmp slt i32 %36, 3
  br i1 %37, label %38, label %59

; <label>:38:                                     ; preds = %35
  %39 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %4, align 4
  %40 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %39, i32 0, i32 1
  %41 = load i32, i32* %7, align 4
  %42 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %40, i32 0, i32 %41
  %43 = load i32, i32* %6, align 4
  %44 = getelementptr inbounds [3 x i32], [3 x i32]* %42, i32 0, i32 %43
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %48

; <label>:47:                                     ; preds = %38
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec3
  store i32 0, i32* %3, align 4
  br label %71

; <label>:48:                                     ; preds = %38
  br label %49

; <label>:49:                                     ; preds = %48
  %50 = load i32, i32* %6, align 4
  %insertElmt9 = insertelement <4 x i32> undef, i32 %50, i32 0
  %insertElmt10 = insertelement <4 x i32> %insertElmt9, i32 %50, i32 1
  %insertElmt11 = insertelement <4 x i32> %insertElmt10, i32 %50, i32 2
  %insertElmt12 = insertelement <4 x i32> %insertElmt11, i32 %50, i32 3
  store <4 x i32> %insertElmt12, <4 x i32>* %allocaVec4, align 16
  %51 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop13 = add <4 x i32> %51, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop13, <4 x i32>* %allocaVec4
  %52 = load <4 x i32>, <4 x i32>* %allocaVec4, align 4
  %extractE = extractelement <4 x i32> %52, i64 0
  %extractE14 = extractelement <4 x i32> %52, i64 1
  %extractE15 = extractelement <4 x i32> %52, i64 2
  %sum = add i32 %extractE, %extractE14
  %sum16 = add i32 %sum, %extractE15
  %53 = add nsw i32 %50, 1
  %Fmul = mul i32 %53, 3
  store i32 %53, i32* %Recovery
  %Fcmp = icmp ne i32 %sum16, %Fmul
  br i1 %Fcmp, label %54, label %58

; <label>:54:                                     ; preds = %49
  %remThree = sdiv i32 %sum16, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %55, label %56

; <label>:55:                                     ; preds = %54
  store i32 %53, i32* %Recovery, align 4
  br label %57

; <label>:56:                                     ; preds = %54
  store i32 %extractE, i32* %Recovery, align 4
  br label %57

; <label>:57:                                     ; preds = %56, %55
  br label %58

; <label>:58:                                     ; preds = %49, %57
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %6, align 4
  br label %35

; <label>:59:                                     ; preds = %35
  br label %60

; <label>:60:                                     ; preds = %59
  %61 = load i32, i32* %7, align 4
  %62 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop17 = add <4 x i32> %62, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop17, <4 x i32>* %allocaVec5
  %63 = load <4 x i32>, <4 x i32>* %allocaVec5, align 4
  %extractE19 = extractelement <4 x i32> %63, i64 0
  %extractE20 = extractelement <4 x i32> %63, i64 1
  %extractE21 = extractelement <4 x i32> %63, i64 2
  %sum22 = add i32 %extractE19, %extractE20
  %sum23 = add i32 %sum22, %extractE21
  %64 = add i32 %61, 1
  %Fmul18 = mul i32 %64, 3
  store i32 %64, i32* %Recovery1
  %Fcmp24 = icmp ne i32 %sum23, %Fmul18
  br i1 %Fcmp24, label %65, label %69

; <label>:65:                                     ; preds = %60
  %remThree25 = sdiv i32 %sum23, %extractE19
  %FcmpThree26 = icmp ne i32 %remThree25, 3
  br i1 %FcmpThree26, label %66, label %67

; <label>:66:                                     ; preds = %65
  store i32 %64, i32* %Recovery1, align 4
  br label %68

; <label>:67:                                     ; preds = %65
  store i32 %extractE19, i32* %Recovery1, align 4
  br label %68

; <label>:68:                                     ; preds = %67, %66
  br label %69

; <label>:69:                                     ; preds = %60, %68
  %ReplaceInst27 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst27, i32* %7, align 4
  br label %31

; <label>:70:                                     ; preds = %31
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec3
  store i32 1, i32* %3, align 4
  br label %71

; <label>:71:                                     ; preds = %70, %47, %21
  %72 = load i32, i32* %3, align 4
  ret i32 %72
}

; Function Attrs: nounwind
define arm_aapcscc i32 @bin_search_StepSize2(%struct.lame_global_flags*, i32, i32, i32*, double*, %struct.gr_info*) #0 {
  %7 = alloca %struct.lame_global_flags*, align 4
  %allocaVec = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 4
  %11 = alloca double*, align 4
  %12 = alloca %struct.gr_info*, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32* %3, i32** %10, align 4
  store double* %4, double** %11, align 4
  store %struct.gr_info* %5, %struct.gr_info** %12, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec3
  store i32 0, i32* %14, align 4
  %17 = load i32, i32* %9, align 4
  store i32 %17, i32* %15, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec5
  store i32 0, i32* %16, align 4
  br label %18

; <label>:18:                                     ; preds = %81, %6
  %19 = load i32, i32* %15, align 4
  %20 = load %struct.gr_info*, %struct.gr_info** %12, align 4
  %21 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %20, i32 0, i32 3
  store i32 %19, i32* %21, align 4
  %22 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %23 = load i32*, i32** %10, align 4
  %24 = load double*, double** %11, align 4
  %25 = load %struct.gr_info*, %struct.gr_info** %12, align 4
  %26 = call arm_aapcscc i32 @count_bits(%struct.lame_global_flags* %22, i32* %23, double* %24, %struct.gr_info* %25)
  store i32 %26, i32* %13, align 4
  %27 = load i32, i32* @bin_search_StepSize2.CurrentStep, align 4
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %30

; <label>:29:                                     ; preds = %18
  br label %82

; <label>:30:                                     ; preds = %18
  %31 = load i32, i32* %14, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %36

; <label>:33:                                     ; preds = %30
  %34 = load i32, i32* @bin_search_StepSize2.CurrentStep, align 4
  %35 = sdiv i32 %34, 2
  store i32 %35, i32* @bin_search_StepSize2.CurrentStep, align 4
  br label %36

; <label>:36:                                     ; preds = %33, %30
  %37 = load i32, i32* %13, align 4
  %38 = load i32, i32* %8, align 4
  %39 = icmp sgt i32 %37, %38
  br i1 %39, label %40, label %57

; <label>:40:                                     ; preds = %36
  %41 = load i32, i32* %16, align 4
  %42 = icmp eq i32 %41, 2
  br i1 %42, label %43, label %49

; <label>:43:                                     ; preds = %40
  %44 = load i32, i32* %14, align 4
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %49, label %46

; <label>:46:                                     ; preds = %43
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec3
  store i32 1, i32* %14, align 4
  %47 = load i32, i32* @bin_search_StepSize2.CurrentStep, align 4
  %48 = sdiv i32 %47, 2
  store i32 %48, i32* @bin_search_StepSize2.CurrentStep, align 4
  br label %49

; <label>:49:                                     ; preds = %46, %43, %40
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec5
  store i32 1, i32* %16, align 4
  %50 = load i32, i32* @bin_search_StepSize2.CurrentStep, align 4
  %51 = load i32, i32* %15, align 4
  %52 = add nsw i32 %51, %50
  store i32 %52, i32* %15, align 4
  %53 = load i32, i32* %15, align 4
  %54 = icmp sgt i32 %53, 255
  br i1 %54, label %55, label %56

; <label>:55:                                     ; preds = %49
  br label %82

; <label>:56:                                     ; preds = %49
  br label %80

; <label>:57:                                     ; preds = %36
  %58 = load i32, i32* %13, align 4
  %59 = load i32, i32* %8, align 4
  %60 = icmp slt i32 %58, %59
  br i1 %60, label %61, label %78

; <label>:61:                                     ; preds = %57
  %62 = load i32, i32* %16, align 4
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %64, label %70

; <label>:64:                                     ; preds = %61
  %65 = load i32, i32* %14, align 4
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %70, label %67

; <label>:67:                                     ; preds = %64
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec3
  store i32 1, i32* %14, align 4
  %68 = load i32, i32* @bin_search_StepSize2.CurrentStep, align 4
  %69 = sdiv i32 %68, 2
  store i32 %69, i32* @bin_search_StepSize2.CurrentStep, align 4
  br label %70

; <label>:70:                                     ; preds = %67, %64, %61
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %allocaVec5
  store i32 2, i32* %16, align 4
  %71 = load i32, i32* @bin_search_StepSize2.CurrentStep, align 4
  %72 = load i32, i32* %15, align 4
  %73 = sub nsw i32 %72, %71
  store i32 %73, i32* %15, align 4
  %74 = load i32, i32* %15, align 4
  %75 = icmp slt i32 %74, 0
  br i1 %75, label %76, label %77

; <label>:76:                                     ; preds = %70
  br label %82

; <label>:77:                                     ; preds = %70
  br label %79

; <label>:78:                                     ; preds = %57
  br label %82

; <label>:79:                                     ; preds = %77
  br label %80

; <label>:80:                                     ; preds = %79, %56
  br label %81

; <label>:81:                                     ; preds = %80
  br i1 true, label %18, label %82

; <label>:82:                                     ; preds = %81, %78, %76, %55, %29
  %83 = load i32, i32* %9, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %83, i32 0
  %insertElmt6 = insertelement <4 x i32> %insertElmt, i32 %83, i32 1
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %83, i32 2
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %83, i32 3
  store <4 x i32> %insertElmt8, <4 x i32>* %allocaVec1, align 16
  %84 = load i32, i32* %15, align 4
  %insertElmt9 = insertelement <4 x i32> undef, i32 %84, i32 0
  %insertElmt10 = insertelement <4 x i32> %insertElmt9, i32 %84, i32 1
  %insertElmt11 = insertelement <4 x i32> %insertElmt10, i32 %84, i32 2
  %insertElmt12 = insertelement <4 x i32> %insertElmt11, i32 %84, i32 3
  store <4 x i32> %insertElmt12, <4 x i32>* %allocaVec4, align 16
  %85 = load <4 x i32>, <4 x i32>* %allocaVec1, align 16
  %86 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop = sub <4 x i32> %85, %86
  %87 = sub nsw i32 %83, %84
  %88 = call arm_aapcscc i32 @abs(i32 %87) #9
  store i32 %88, i32* @bin_search_StepSize2.CurrentStep, align 4
  %89 = load i32, i32* @bin_search_StepSize2.CurrentStep, align 4
  %90 = icmp sge i32 %89, 4
  br i1 %90, label %91, label %92

; <label>:91:                                     ; preds = %82
  store i32 4, i32* @bin_search_StepSize2.CurrentStep, align 4
  br label %93

; <label>:92:                                     ; preds = %82
  store i32 2, i32* @bin_search_StepSize2.CurrentStep, align 4
  br label %93

; <label>:93:                                     ; preds = %92, %91
  %94 = load i32, i32* %13, align 4
  ret i32 %94
}

; Function Attrs: nounwind readnone
declare arm_aapcscc i32 @abs(i32) #6

; Function Attrs: nounwind
define arm_aapcscc void @quantize_xrpow(double*, i32*, %struct.gr_info*) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %Recovery = alloca double, align 8
  %allocaVec9 = alloca <2 x double>, align 16
  %Recovery1 = alloca double, align 8
  %allocaVec10 = alloca <2 x double>, align 16
  %Recovery2 = alloca double, align 8
  %allocaVec11 = alloca <2 x double>, align 16
  %Recovery3 = alloca double, align 8
  %allocaVec12 = alloca <2 x double>, align 16
  %Recovery4 = alloca double, align 8
  %allocaVec13 = alloca <2 x double>, align 16
  %Recovery5 = alloca double, align 8
  %allocaVec14 = alloca <2 x double>, align 16
  %Recovery6 = alloca double, align 8
  %allocaVec15 = alloca <2 x double>, align 16
  %Recovery7 = alloca double, align 8
  %allocaVec16 = alloca <4 x i32>, align 16
  %Recovery8 = alloca i32, align 4
  %4 = alloca double*, align 4
  %5 = alloca i32*, align 4
  %6 = alloca %struct.gr_info*, align 4
  %allocaVec17 = alloca <2 x double>, align 16
  %7 = alloca double, align 8
  %allocaVec18 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec19 = alloca <2 x double>, align 16
  %9 = alloca double, align 8
  %allocaVec20 = alloca <2 x double>, align 16
  %10 = alloca double, align 8
  %allocaVec21 = alloca <2 x double>, align 16
  %11 = alloca double, align 8
  %allocaVec22 = alloca <2 x double>, align 16
  %12 = alloca double, align 8
  %allocaVec23 = alloca <2 x double>, align 16
  %13 = alloca double, align 8
  %allocaVec24 = alloca <2 x double>, align 16
  %14 = alloca double, align 8
  %allocaVec25 = alloca <2 x double>, align 16
  %15 = alloca double, align 8
  %allocaVec26 = alloca <2 x double>, align 16
  %16 = alloca double, align 8
  %allocaVec27 = alloca <4 x i32>, align 16
  %17 = alloca i32, align 4
  %allocaVec28 = alloca <4 x i32>, align 16
  %18 = alloca i32, align 4
  %allocaVec29 = alloca <4 x i32>, align 16
  %19 = alloca i32, align 4
  %allocaVec30 = alloca <4 x i32>, align 16
  %20 = alloca i32, align 4
  %allocaVec31 = alloca <4 x i32>, align 16
  %21 = alloca i32, align 4
  %allocaVec32 = alloca <4 x i32>, align 16
  %22 = alloca i32, align 4
  %allocaVec33 = alloca <4 x i32>, align 16
  %23 = alloca i32, align 4
  %allocaVec34 = alloca <4 x i32>, align 16
  %24 = alloca i32, align 4
  store double* %0, double** %4, align 4
  store i32* %1, i32** %5, align 4
  store %struct.gr_info* %2, %struct.gr_info** %6, align 4
  %25 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %26 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %25, i32 0, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds [256 x double], [256 x double]* @ipow20, i32 0, i32 %27
  %29 = load double, double* %28, align 8
  store double %29, double* %7, align 8
  store <4 x i32> <i32 72, i32 72, i32 72, i32 72>, <4 x i32>* %allocaVec18
  store i32 72, i32* %8, align 4
  br label %30

; <label>:30:                                     ; preds = %171, %3
  %31 = load i32, i32* %8, align 4
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %33, label %172

; <label>:33:                                     ; preds = %30
  %34 = load double*, double** %4, align 4
  %35 = getelementptr inbounds double, double* %34, i32 1
  store double* %35, double** %4, align 4
  %36 = load double, double* %34, align 8
  %37 = load double, double* %7, align 8
  %38 = fmul double %36, %37
  store double %38, double* %9, align 8
  %39 = load double*, double** %4, align 4
  %40 = getelementptr inbounds double, double* %39, i32 1
  store double* %40, double** %4, align 4
  %41 = load double, double* %39, align 8
  %42 = load double, double* %7, align 8
  %43 = fmul double %41, %42
  store double %43, double* %10, align 8
  %44 = load double, double* %9, align 8
  %45 = fptosi double %44 to i32
  store i32 %45, i32* %17, align 4
  %46 = load double*, double** %4, align 4
  %47 = getelementptr inbounds double, double* %46, i32 1
  store double* %47, double** %4, align 4
  %48 = load double, double* %46, align 8
  %49 = load double, double* %7, align 8
  %50 = fmul double %48, %49
  store double %50, double* %11, align 8
  %51 = load double, double* %10, align 8
  %52 = fptosi double %51 to i32
  store i32 %52, i32* %18, align 4
  %53 = load double*, double** %4, align 4
  %54 = getelementptr inbounds double, double* %53, i32 1
  store double* %54, double** %4, align 4
  %55 = load double, double* %53, align 8
  %56 = load double, double* %7, align 8
  %57 = fmul double %55, %56
  store double %57, double* %12, align 8
  %58 = load double, double* %11, align 8
  %59 = fptosi double %58 to i32
  store i32 %59, i32* %19, align 4
  %60 = load double*, double** %4, align 4
  %61 = getelementptr inbounds double, double* %60, i32 1
  store double* %61, double** %4, align 4
  %62 = load double, double* %60, align 8
  %63 = load double, double* %7, align 8
  %64 = fmul double %62, %63
  store double %64, double* %13, align 8
  %65 = load double, double* %12, align 8
  %66 = fptosi double %65 to i32
  store i32 %66, i32* %20, align 4
  %67 = load double*, double** %4, align 4
  %68 = getelementptr inbounds double, double* %67, i32 1
  store double* %68, double** %4, align 4
  %69 = load double, double* %67, align 8
  %70 = load double, double* %7, align 8
  %71 = fmul double %69, %70
  store double %71, double* %14, align 8
  %72 = load double, double* %13, align 8
  %73 = fptosi double %72 to i32
  store i32 %73, i32* %21, align 4
  %74 = load double*, double** %4, align 4
  %75 = getelementptr inbounds double, double* %74, i32 1
  store double* %75, double** %4, align 4
  %76 = load double, double* %74, align 8
  %77 = load double, double* %7, align 8
  %78 = fmul double %76, %77
  store double %78, double* %15, align 8
  %79 = load double, double* %14, align 8
  %80 = fptosi double %79 to i32
  store i32 %80, i32* %22, align 4
  %81 = load double*, double** %4, align 4
  %82 = getelementptr inbounds double, double* %81, i32 1
  store double* %82, double** %4, align 4
  %83 = load double, double* %81, align 8
  %84 = load double, double* %7, align 8
  %85 = fmul double %83, %84
  store double %85, double* %16, align 8
  %86 = load double, double* %15, align 8
  %87 = fptosi double %86 to i32
  store i32 %87, i32* %23, align 4
  %88 = load i32, i32* %17, align 4
  %89 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %88
  %90 = load double, double* %89, align 8
  %91 = load double, double* %9, align 8
  %92 = fadd double %91, %90
  store double %92, double* %9, align 8
  %93 = load double, double* %16, align 8
  %94 = fptosi double %93 to i32
  store i32 %94, i32* %24, align 4
  %95 = load i32, i32* %18, align 4
  %96 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %95
  %97 = load double, double* %96, align 8
  %98 = load double, double* %10, align 8
  %99 = fadd double %98, %97
  store double %99, double* %10, align 8
  %100 = load double, double* %9, align 8
  %101 = fptosi double %100 to i32
  %102 = load i32*, i32** %5, align 4
  %103 = getelementptr inbounds i32, i32* %102, i32 1
  store i32* %103, i32** %5, align 4
  store i32 %101, i32* %102, align 4
  %104 = load i32, i32* %19, align 4
  %105 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %104
  %106 = load double, double* %105, align 8
  %107 = load double, double* %11, align 8
  %108 = fadd double %107, %106
  store double %108, double* %11, align 8
  %109 = load double, double* %10, align 8
  %110 = fptosi double %109 to i32
  %111 = load i32*, i32** %5, align 4
  %112 = getelementptr inbounds i32, i32* %111, i32 1
  store i32* %112, i32** %5, align 4
  store i32 %110, i32* %111, align 4
  %113 = load i32, i32* %20, align 4
  %114 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %113
  %115 = load double, double* %114, align 8
  %116 = load double, double* %12, align 8
  %117 = fadd double %116, %115
  store double %117, double* %12, align 8
  %118 = load double, double* %11, align 8
  %119 = fptosi double %118 to i32
  %120 = load i32*, i32** %5, align 4
  %121 = getelementptr inbounds i32, i32* %120, i32 1
  store i32* %121, i32** %5, align 4
  store i32 %119, i32* %120, align 4
  %122 = load i32, i32* %21, align 4
  %123 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %122
  %124 = load double, double* %123, align 8
  %125 = load double, double* %13, align 8
  %126 = fadd double %125, %124
  store double %126, double* %13, align 8
  %127 = load double, double* %12, align 8
  %128 = fptosi double %127 to i32
  %129 = load i32*, i32** %5, align 4
  %130 = getelementptr inbounds i32, i32* %129, i32 1
  store i32* %130, i32** %5, align 4
  store i32 %128, i32* %129, align 4
  %131 = load i32, i32* %22, align 4
  %132 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %131
  %133 = load double, double* %132, align 8
  %134 = load double, double* %14, align 8
  %135 = fadd double %134, %133
  store double %135, double* %14, align 8
  %136 = load double, double* %13, align 8
  %137 = fptosi double %136 to i32
  %138 = load i32*, i32** %5, align 4
  %139 = getelementptr inbounds i32, i32* %138, i32 1
  store i32* %139, i32** %5, align 4
  store i32 %137, i32* %138, align 4
  %140 = load i32, i32* %23, align 4
  %141 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %140
  %142 = load double, double* %141, align 8
  %143 = load double, double* %15, align 8
  %144 = fadd double %143, %142
  store double %144, double* %15, align 8
  %145 = load double, double* %14, align 8
  %146 = fptosi double %145 to i32
  %147 = load i32*, i32** %5, align 4
  %148 = getelementptr inbounds i32, i32* %147, i32 1
  store i32* %148, i32** %5, align 4
  store i32 %146, i32* %147, align 4
  %149 = load i32, i32* %24, align 4
  %150 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %149
  %151 = load double, double* %150, align 8
  %152 = load double, double* %16, align 8
  %153 = fadd double %152, %151
  store double %153, double* %16, align 8
  %154 = load double, double* %15, align 8
  %155 = fptosi double %154 to i32
  %156 = load i32*, i32** %5, align 4
  %157 = getelementptr inbounds i32, i32* %156, i32 1
  store i32* %157, i32** %5, align 4
  store i32 %155, i32* %156, align 4
  %158 = load double, double* %16, align 8
  %159 = fptosi double %158 to i32
  %160 = load i32*, i32** %5, align 4
  %161 = getelementptr inbounds i32, i32* %160, i32 1
  store i32* %161, i32** %5, align 4
  store i32 %159, i32* %160, align 4
  br label %162

; <label>:162:                                    ; preds = %33
  %163 = load i32, i32* %8, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %163, i32 0
  %insertElmt35 = insertelement <4 x i32> %insertElmt, i32 %163, i32 1
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %163, i32 2
  %insertElmt37 = insertelement <4 x i32> %insertElmt36, i32 %163, i32 3
  store <4 x i32> %insertElmt37, <4 x i32>* %allocaVec18, align 16
  %164 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop = add <4 x i32> %164, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec18
  %165 = load <4 x i32>, <4 x i32>* %allocaVec18, align 4
  %extractE = extractelement <4 x i32> %165, i64 0
  %extractE38 = extractelement <4 x i32> %165, i64 1
  %extractE39 = extractelement <4 x i32> %165, i64 2
  %sum = add i32 %extractE, %extractE38
  %sum40 = add i32 %sum, %extractE39
  %166 = add nsw i32 %163, -1
  %Fmul = mul i32 %166, 3
  store i32 %166, i32* %Recovery8
  %Fcmp = icmp ne i32 %sum40, %Fmul
  br i1 %Fcmp, label %167, label %171

; <label>:167:                                    ; preds = %162
  %remThree = sdiv i32 %sum40, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %168, label %169

; <label>:168:                                    ; preds = %167
  store i32 %166, i32* %Recovery8, align 4
  br label %170

; <label>:169:                                    ; preds = %167
  store i32 %extractE, i32* %Recovery8, align 4
  br label %170

; <label>:170:                                    ; preds = %169, %168
  br label %171

; <label>:171:                                    ; preds = %162, %170
  %ReplaceInst = load i32, i32* %Recovery8, align 4
  store i32 %ReplaceInst, i32* %8, align 4
  br label %30

; <label>:172:                                    ; preds = %30
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @quantize_xrpow_ISO(double*, i32*, %struct.gr_info*) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %Recovery = alloca double, align 8
  %allocaVec2 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %4 = alloca double*, align 4
  %5 = alloca i32*, align 4
  %6 = alloca %struct.gr_info*, align 4
  %allocaVec3 = alloca <2 x double>, align 16
  %7 = alloca double, align 8
  %allocaVec4 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec5 = alloca <2 x double>, align 16
  %9 = alloca double, align 8
  store double* %0, double** %4, align 4
  store i32* %1, i32** %5, align 4
  store %struct.gr_info* %2, %struct.gr_info** %6, align 4
  %10 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %11 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %10, i32 0, i32 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [256 x double], [256 x double]* @ipow20, i32 0, i32 %12
  %14 = load double, double* %13, align 8
  store double %14, double* %7, align 8
  %15 = load double, double* %7, align 8
  %insertElmt = insertelement <2 x double> undef, double %15, i32 0
  %insertElmt6 = insertelement <2 x double> %insertElmt, double %15, i32 1
  store <2 x double> %insertElmt6, <2 x double>* %allocaVec3, align 16
  %16 = load <2 x double>, <2 x double>* %allocaVec3, align 16
  %Vop = fdiv <2 x double> <double 5.946000e-01, double 5.946000e-01>, %16
  store <2 x double> %Vop, <2 x double>* %allocaVec5
  %17 = load <2 x double>, <2 x double>* %allocaVec5, align 4
  %extractE = extractelement <2 x double> %17, i64 0
  %extractE7 = extractelement <2 x double> %17, i64 1
  %sum = fadd double %extractE, %extractE7
  %sum8 = fadd double %sum, %extractE7
  %18 = fdiv double 5.946000e-01, %15
  %Fmul = fmul double %18, 3.000000e+00
  store double %18, double* %Recovery
  %Fcmp = fcmp une double %sum8, %Fmul
  br i1 %Fcmp, label %19, label %23

; <label>:19:                                     ; preds = %3
  %remThree = fdiv double %sum8, %extractE
  %FcmpThree = fcmp une double %remThree, 3.000000e+00
  br i1 %FcmpThree, label %20, label %21

; <label>:20:                                     ; preds = %19
  store double %18, double* %Recovery, align 8
  br label %22

; <label>:21:                                     ; preds = %19
  store double %extractE, double* %Recovery, align 8
  br label %22

; <label>:22:                                     ; preds = %21, %20
  br label %23

; <label>:23:                                     ; preds = %3, %22
  %ReplaceInst = load double, double* %Recovery, align 8
  store double %ReplaceInst, double* %9, align 8
  store <4 x i32> <i32 576, i32 576, i32 576, i32 576>, <4 x i32>* %allocaVec4
  store i32 576, i32* %8, align 4
  br label %24

; <label>:24:                                     ; preds = %57, %23
  %25 = load i32, i32* %8, align 4
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %27, label %58

; <label>:27:                                     ; preds = %24
  %28 = load double, double* %9, align 8
  %29 = load double*, double** %4, align 4
  %30 = load double, double* %29, align 8
  %31 = fcmp ogt double %28, %30
  br i1 %31, label %32, label %37

; <label>:32:                                     ; preds = %27
  %33 = load i32*, i32** %5, align 4
  %34 = getelementptr inbounds i32, i32* %33, i32 1
  store i32* %34, i32** %5, align 4
  store i32 0, i32* %33, align 4
  %35 = load double*, double** %4, align 4
  %36 = getelementptr inbounds double, double* %35, i32 1
  store double* %36, double** %4, align 4
  br label %47

; <label>:37:                                     ; preds = %27
  %38 = load double, double* %7, align 8
  %insertElmt9 = insertelement <2 x double> undef, double %38, i32 0
  %insertElmt10 = insertelement <2 x double> %insertElmt9, double %38, i32 1
  store <2 x double> %insertElmt10, <2 x double>* %allocaVec3, align 16
  %39 = load double*, double** %4, align 4
  %40 = getelementptr inbounds double, double* %39, i32 1
  store double* %40, double** %4, align 4
  %41 = load double, double* %39, align 8
  %42 = fmul double %38, %41
  %43 = fadd double %42, 4.054000e-01
  %44 = fptosi double %43 to i32
  %45 = load i32*, i32** %5, align 4
  %46 = getelementptr inbounds i32, i32* %45, i32 1
  store i32* %46, i32** %5, align 4
  store i32 %44, i32* %45, align 4
  br label %47

; <label>:47:                                     ; preds = %37, %32
  br label %48

; <label>:48:                                     ; preds = %47
  %49 = load i32, i32* %8, align 4
  %insertElmt11 = insertelement <4 x i32> undef, i32 %49, i32 0
  %insertElmt12 = insertelement <4 x i32> %insertElmt11, i32 %49, i32 1
  %insertElmt13 = insertelement <4 x i32> %insertElmt12, i32 %49, i32 2
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %49, i32 3
  store <4 x i32> %insertElmt14, <4 x i32>* %allocaVec4, align 16
  %50 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop15 = add <4 x i32> %50, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop15, <4 x i32>* %allocaVec4
  %51 = load <4 x i32>, <4 x i32>* %allocaVec4, align 4
  %extractE17 = extractelement <4 x i32> %51, i64 0
  %extractE18 = extractelement <4 x i32> %51, i64 1
  %extractE19 = extractelement <4 x i32> %51, i64 2
  %sum20 = add i32 %extractE17, %extractE18
  %sum21 = add i32 %sum20, %extractE19
  %52 = add nsw i32 %49, -1
  %Fmul16 = mul i32 %52, 3
  store i32 %52, i32* %Recovery1
  %Fcmp22 = icmp ne i32 %sum21, %Fmul16
  br i1 %Fcmp22, label %53, label %57

; <label>:53:                                     ; preds = %48
  %remThree23 = sdiv i32 %sum21, %extractE17
  %FcmpThree24 = icmp ne i32 %remThree23, 3
  br i1 %FcmpThree24, label %54, label %55

; <label>:54:                                     ; preds = %53
  store i32 %52, i32* %Recovery1, align 4
  br label %56

; <label>:55:                                     ; preds = %53
  store i32 %extractE17, i32* %Recovery1, align 4
  br label %56

; <label>:56:                                     ; preds = %55, %54
  br label %57

; <label>:57:                                     ; preds = %48, %56
  %ReplaceInst25 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst25, i32* %8, align 4
  br label %24

; <label>:58:                                     ; preds = %24
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @ResvFrameBegin(%struct.lame_global_flags*, %struct.III_side_info_t*, i32, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %5 = alloca %struct.lame_global_flags*, align 4
  %6 = alloca %struct.III_side_info_t*, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %5, align 4
  store %struct.III_side_info_t* %1, %struct.III_side_info_t** %6, align 4
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %11 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %12 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %11, i32 0, i32 39
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %4
  store i32 0, i32* @ResvSize, align 4
  br label %16

; <label>:16:                                     ; preds = %15, %4
  %17 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %18 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %17, i32 0, i32 43
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %16
  store <4 x i32> <i32 4088, i32 4088, i32 4088, i32 4088>, <4 x i32>* %allocaVec4
  store i32 4088, i32* %10, align 4
  br label %23

; <label>:22:                                     ; preds = %16
  store <4 x i32> <i32 2040, i32 2040, i32 2040, i32 2040>, <4 x i32>* %allocaVec4
  store i32 2040, i32* %10, align 4
  br label %23

; <label>:23:                                     ; preds = %22, %21
  %24 = load %struct.III_side_info_t*, %struct.III_side_info_t** %6, align 4
  %25 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = mul nsw i32 %26, 8
  %28 = load i32, i32* @ResvSize, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %31, label %30

; <label>:30:                                     ; preds = %23
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.270, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1.271, i32 0, i32 0), i32 68, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__.ResvFrameBegin, i32 0, i32 0))
  br label %31

; <label>:31:                                     ; preds = %30, %23
  %32 = phi i1 [ true, %23 ], [ false, %30 ]
  %33 = zext i1 %32 to i32
  %34 = load i32, i32* %7, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %34, i32 0
  %insertElmt5 = insertelement <4 x i32> %insertElmt, i32 %34, i32 1
  %insertElmt6 = insertelement <4 x i32> %insertElmt5, i32 %34, i32 2
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %34, i32 3
  store <4 x i32> %insertElmt7, <4 x i32>* %allocaVec1, align 16
  %35 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %36 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %35, i32 0, i32 45
  %37 = load i32, i32* %36, align 4
  %38 = mul nsw i32 %34, %37
  %39 = load i32, i32* @ResvSize, align 4
  %40 = add nsw i32 %38, %39
  store i32 %40, i32* %9, align 4
  %41 = load i32, i32* %8, align 4
  %42 = icmp sgt i32 %41, 7680
  br i1 %42, label %43, label %44

; <label>:43:                                     ; preds = %31
  store i32 0, i32* @ResvMax, align 4
  br label %48

; <label>:44:                                     ; preds = %31
  %45 = load i32, i32* %8, align 4
  %insertElmt8 = insertelement <4 x i32> undef, i32 %45, i32 0
  %insertElmt9 = insertelement <4 x i32> %insertElmt8, i32 %45, i32 1
  %insertElmt10 = insertelement <4 x i32> %insertElmt9, i32 %45, i32 2
  %insertElmt11 = insertelement <4 x i32> %insertElmt10, i32 %45, i32 3
  store <4 x i32> %insertElmt11, <4 x i32>* %allocaVec2, align 16
  %46 = load <4 x i32>, <4 x i32>* %allocaVec2, align 16
  %Vop = sub <4 x i32> <i32 7680, i32 7680, i32 7680, i32 7680>, %46
  %47 = sub nsw i32 7680, %45
  store i32 %47, i32* @ResvMax, align 4
  br label %48

; <label>:48:                                     ; preds = %44, %43
  %49 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %50 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %49, i32 0, i32 17
  %51 = load i32, i32* %50, align 4
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %54

; <label>:53:                                     ; preds = %48
  store i32 0, i32* @ResvMax, align 4
  br label %54

; <label>:54:                                     ; preds = %53, %48
  %55 = load i32, i32* @ResvMax, align 4
  %56 = load i32, i32* %10, align 4
  %57 = icmp sgt i32 %55, %56
  br i1 %57, label %58, label %60

; <label>:58:                                     ; preds = %54
  %59 = load i32, i32* %10, align 4
  store i32 %59, i32* @ResvMax, align 4
  br label %60

; <label>:60:                                     ; preds = %58, %54
  %61 = load i32, i32* %9, align 4
  ret i32 %61
}

; Function Attrs: nounwind
define arm_aapcscc void @ResvMaxBits(i32, i32*, i32*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec7 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec8 = alloca <4 x i32>, align 16
  %CastInst3 = alloca i32, align 4
  %CastInstVec4 = alloca <4 x i32>, align 16
  %allocaVec9 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 4
  %7 = alloca i32*, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32* %1, i32** %6, align 4
  store i32* %2, i32** %7, align 4
  store i32 %3, i32* %8, align 4
  %10 = load i32, i32* %5, align 4
  %11 = load i32*, i32** %6, align 4
  store i32 %10, i32* %11, align 4
  %12 = load i32, i32* @ResvSize, align 4
  %13 = load i32, i32* @ResvMax, align 4
  %14 = mul nsw i32 %13, 9
  %15 = sdiv i32 %14, 10
  %16 = icmp sgt i32 %12, %15
  br i1 %16, label %17, label %27

; <label>:17:                                     ; preds = %4
  %18 = load i32, i32* @ResvSize, align 4
  %19 = load i32, i32* @ResvMax, align 4
  %20 = mul nsw i32 %19, 9
  %21 = sdiv i32 %20, 10
  %22 = sub nsw i32 %18, %21
  store i32 %22, i32* %9, align 4
  %23 = load i32, i32* %9, align 4
  %24 = load i32*, i32** %6, align 4
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, %23
  store i32 %26, i32* %24, align 4
  br label %37

; <label>:27:                                     ; preds = %4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec11
  store i32 0, i32* %9, align 4
  %28 = load i32, i32* %5, align 4
  %29 = sitofp i32 %28 to double
  store double %29, double* %CastInst
  %30 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %30, i32 0
  %insertCast12 = insertelement <2 x double> %insertCast, double %30, i32 1
  store <2 x double> %insertCast12, <2 x double>* %CastInstVec, align 4
  %31 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %Vop = fdiv <2 x double> %31, <double 1.520000e+01, double 1.520000e+01>
  %32 = fdiv double %29, 1.520000e+01
  %33 = fptosi double %32 to i32
  %34 = load i32*, i32** %6, align 4
  %35 = load i32, i32* %34, align 4
  %36 = sub nsw i32 %35, %33
  store i32 %36, i32* %34, align 4
  br label %37

; <label>:37:                                     ; preds = %27, %17
  %38 = load i32, i32* @ResvSize, align 4
  %39 = load i32, i32* @ResvMax, align 4
  %40 = mul nsw i32 %39, 6
  %41 = sdiv i32 %40, 10
  %42 = icmp slt i32 %38, %41
  br i1 %42, label %43, label %45

; <label>:43:                                     ; preds = %37
  %44 = load i32, i32* @ResvSize, align 4
  br label %49

; <label>:45:                                     ; preds = %37
  %46 = load i32, i32* @ResvMax, align 4
  %47 = mul nsw i32 %46, 6
  %48 = sdiv i32 %47, 10
  br label %49

; <label>:49:                                     ; preds = %45, %43
  %50 = phi i32 [ %44, %43 ], [ %48, %45 ]
  %51 = load i32*, i32** %7, align 4
  store i32 %50, i32* %51, align 4
  %52 = load i32, i32* %9, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %52, i32 0
  %insertElmt13 = insertelement <4 x i32> %insertElmt, i32 %52, i32 1
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %52, i32 2
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %52, i32 3
  store <4 x i32> %insertElmt15, <4 x i32>* %allocaVec11, align 16
  %53 = load i32*, i32** %7, align 4
  %54 = load i32, i32* %53, align 4
  %55 = sub nsw i32 %54, %52
  store i32 %55, i32* %53, align 4
  %56 = load i32*, i32** %7, align 4
  %57 = load i32, i32* %56, align 4
  %58 = icmp slt i32 %57, 0
  br i1 %58, label %59, label %61

; <label>:59:                                     ; preds = %49
  %60 = load i32*, i32** %7, align 4
  store i32 0, i32* %60, align 4
  br label %61

; <label>:61:                                     ; preds = %59, %49
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @ResvAdjust(%struct.lame_global_flags*, %struct.gr_info*, %struct.III_side_info_t*, i32) #0 {
  %5 = alloca %struct.lame_global_flags*, align 4
  %6 = alloca %struct.gr_info*, align 4
  %7 = alloca %struct.III_side_info_t*, align 4
  %allocaVec = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %5, align 4
  store %struct.gr_info* %1, %struct.gr_info** %6, align 4
  store %struct.III_side_info_t* %2, %struct.III_side_info_t** %7, align 4
  store i32 %3, i32* %8, align 4
  %9 = load i32, i32* %8, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %9, i32 0
  %insertElmt1 = insertelement <4 x i32> %insertElmt, i32 %9, i32 1
  %insertElmt2 = insertelement <4 x i32> %insertElmt1, i32 %9, i32 2
  %insertElmt3 = insertelement <4 x i32> %insertElmt2, i32 %9, i32 3
  store <4 x i32> %insertElmt3, <4 x i32>* %allocaVec, align 16
  %10 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %11 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %10, i32 0, i32 46
  %12 = load i32, i32* %11, align 4
  %13 = sdiv i32 %9, %12
  %14 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %15 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %14, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = sub i32 %13, %16
  %18 = load i32, i32* @ResvSize, align 4
  %19 = add i32 %18, %17
  store i32 %19, i32* @ResvSize, align 4
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @ResvFrameEnd(%struct.lame_global_flags*, %struct.III_side_info_t*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %4 = alloca %struct.lame_global_flags*, align 4
  %5 = alloca %struct.III_side_info_t*, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %4, align 4
  store %struct.III_side_info_t* %1, %struct.III_side_info_t** %5, align 4
  store i32 %2, i32* %6, align 4
  %9 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %10 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %9, i32 0, i32 46
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 2
  br i1 %12, label %13, label %21

; <label>:13:                                     ; preds = %3
  %14 = load i32, i32* %6, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %14, i32 0
  %insertElmt4 = insertelement <4 x i32> %insertElmt, i32 %14, i32 1
  %insertElmt5 = insertelement <4 x i32> %insertElmt4, i32 %14, i32 2
  %insertElmt6 = insertelement <4 x i32> %insertElmt5, i32 %14, i32 3
  store <4 x i32> %insertElmt6, <4 x i32>* %allocaVec1, align 16
  %15 = load <4 x i32>, <4 x i32>* %allocaVec1, align 16
  %Vop = and <4 x i32> %15, <i32 1, i32 1, i32 1, i32 1>
  %16 = and i32 %14, 1
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %21

; <label>:18:                                     ; preds = %13
  %19 = load i32, i32* @ResvSize, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* @ResvSize, align 4
  br label %21

; <label>:21:                                     ; preds = %18, %13, %3
  %22 = load i32, i32* @ResvSize, align 4
  %23 = load i32, i32* @ResvMax, align 4
  %24 = sub nsw i32 %22, %23
  store i32 %24, i32* %8, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %27, label %28

; <label>:27:                                     ; preds = %21
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec3
  store i32 0, i32* %8, align 4
  br label %28

; <label>:28:                                     ; preds = %27, %21
  %29 = load i32, i32* %8, align 4
  %insertElmt7 = insertelement <4 x i32> undef, i32 %29, i32 0
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %29, i32 1
  %insertElmt9 = insertelement <4 x i32> %insertElmt8, i32 %29, i32 2
  %insertElmt10 = insertelement <4 x i32> %insertElmt9, i32 %29, i32 3
  store <4 x i32> %insertElmt10, <4 x i32>* %allocaVec3, align 16
  %30 = load i32, i32* @ResvSize, align 4
  %31 = sub nsw i32 %30, %29
  store i32 %31, i32* @ResvSize, align 4
  %32 = load i32, i32* %8, align 4
  store i32 %32, i32* %7, align 4
  %33 = load i32, i32* @ResvSize, align 4
  %34 = srem i32 %33, 8
  store i32 %34, i32* %8, align 4
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %51

; <label>:36:                                     ; preds = %28
  %37 = load i32, i32* %8, align 4
  %insertElmt11 = insertelement <4 x i32> undef, i32 %37, i32 0
  %insertElmt12 = insertelement <4 x i32> %insertElmt11, i32 %37, i32 1
  %insertElmt13 = insertelement <4 x i32> %insertElmt12, i32 %37, i32 2
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %37, i32 3
  store <4 x i32> %insertElmt14, <4 x i32>* %allocaVec3, align 16
  %38 = load i32, i32* %7, align 4
  %insertElmt15 = insertelement <4 x i32> undef, i32 %38, i32 0
  %insertElmt16 = insertelement <4 x i32> %insertElmt15, i32 %38, i32 1
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %38, i32 2
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %38, i32 3
  store <4 x i32> %insertElmt18, <4 x i32>* %allocaVec2, align 16
  %39 = load <4 x i32>, <4 x i32>* %allocaVec2, align 16
  %40 = load <4 x i32>, <4 x i32>* %allocaVec3, align 16
  %Vop19 = add <4 x i32> %39, %40
  store <4 x i32> %Vop19, <4 x i32>* %allocaVec2
  %41 = load <4 x i32>, <4 x i32>* %allocaVec2, align 4
  %extractE = extractelement <4 x i32> %41, i64 0
  %extractE20 = extractelement <4 x i32> %41, i64 1
  %extractE21 = extractelement <4 x i32> %41, i64 2
  %sum = add i32 %extractE, %extractE20
  %sum22 = add i32 %sum, %extractE21
  %42 = add nsw i32 %38, %37
  %Fmul = mul i32 %42, 3
  store i32 %42, i32* %Recovery
  %Fcmp = icmp ne i32 %sum22, %Fmul
  br i1 %Fcmp, label %43, label %47

; <label>:43:                                     ; preds = %36
  %remThree = sdiv i32 %sum22, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %44, label %45

; <label>:44:                                     ; preds = %43
  store i32 %42, i32* %Recovery, align 4
  br label %46

; <label>:45:                                     ; preds = %43
  store i32 %extractE, i32* %Recovery, align 4
  br label %46

; <label>:46:                                     ; preds = %45, %44
  br label %47

; <label>:47:                                     ; preds = %36, %46
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %7, align 4
  %48 = load i32, i32* %8, align 4
  %insertElmt23 = insertelement <4 x i32> undef, i32 %48, i32 0
  %insertElmt24 = insertelement <4 x i32> %insertElmt23, i32 %48, i32 1
  %insertElmt25 = insertelement <4 x i32> %insertElmt24, i32 %48, i32 2
  %insertElmt26 = insertelement <4 x i32> %insertElmt25, i32 %48, i32 3
  store <4 x i32> %insertElmt26, <4 x i32>* %allocaVec3, align 16
  %49 = load i32, i32* @ResvSize, align 4
  %50 = sub nsw i32 %49, %48
  store i32 %50, i32* @ResvSize, align 4
  br label %51

; <label>:51:                                     ; preds = %47, %28
  %52 = load i32, i32* %7, align 4
  %53 = load %struct.III_side_info_t*, %struct.III_side_info_t** %5, align 4
  %54 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %53, i32 0, i32 2
  store i32 %52, i32* %54, align 4
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @initrtp(%struct.rtpheader*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %Recovery5 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %Recovery6 = alloca i32, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %CallInst = alloca i32, align 4
  %CallInstVec = alloca <4 x i32>, align 16
  %2 = alloca %struct.rtpheader*, align 4
  store %struct.rtpheader* %0, %struct.rtpheader** %2, align 4
  %3 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %4 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %3, i32 0, i32 0
  %5 = bitcast %struct.rtpbits* %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1073741823
  %8 = or i32 %7, -2147483648
  store i32 %8, i32* %5, align 4
  %9 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %10 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %9, i32 0, i32 0
  %11 = bitcast %struct.rtpbits* %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, -536870913
  store i32 %13, i32* %11, align 4
  %14 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %15 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %14, i32 0, i32 0
  %16 = bitcast %struct.rtpbits* %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = and i32 %17, -268435457
  store i32 %18, i32* %16, align 4
  %19 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %20 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %19, i32 0, i32 0
  %21 = bitcast %struct.rtpbits* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %22, -251658241
  store i32 %23, i32* %21, align 4
  %24 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %25 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %24, i32 0, i32 0
  %26 = bitcast %struct.rtpbits* %25 to i32*
  %27 = load i32, i32* %26, align 4
  %28 = and i32 %27, -8388609
  store i32 %28, i32* %26, align 4
  %29 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %30 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %29, i32 0, i32 0
  %31 = bitcast %struct.rtpbits* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %32, -8323073
  %34 = or i32 %33, 917504
  store i32 %34, i32* %31, align 4
  %35 = call arm_aapcscc i32 @rand()
  %36 = and i32 %35, 65535
  %37 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %38 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %37, i32 0, i32 0
  %39 = bitcast %struct.rtpbits* %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = and i32 %36, 65535
  %42 = and i32 %40, -65536
  %43 = or i32 %42, %41
  store i32 %43, i32* %39, align 4
  %44 = shl i32 %41, 16
  %45 = ashr i32 %44, 16
  %46 = call arm_aapcscc i32 @rand()
  %47 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %48 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %47, i32 0, i32 1
  store i32 %46, i32* %48, align 4
  %49 = call arm_aapcscc i32 @rand()
  %50 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %51 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %50, i32 0, i32 2
  store i32 %49, i32* %51, align 4
  %52 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %53 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %52, i32 0, i32 3
  store i32 0, i32* %53, align 4
  ret void
}

declare arm_aapcscc i32 @rand() #3

; Function Attrs: nounwind
define arm_aapcscc i32 @sendrtp(i32, %struct.sockaddr_in*, %struct.rtpheader*, i8*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr_in*, align 4
  %8 = alloca %struct.rtpheader*, align 4
  %9 = alloca i8*, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 4
  %12 = alloca i32*, align 4
  %13 = alloca i32*, align 4
  store i32 %0, i32* %6, align 4
  store %struct.sockaddr_in* %1, %struct.sockaddr_in** %7, align 4
  store %struct.rtpheader* %2, %struct.rtpheader** %8, align 4
  store i8* %3, i8** %9, align 4
  store i32 %4, i32* %10, align 4
  %14 = load i32, i32* %10, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %14, i32 0
  %insertElmt2 = insertelement <4 x i32> %insertElmt, i32 %14, i32 1
  %insertElmt3 = insertelement <4 x i32> %insertElmt2, i32 %14, i32 2
  %insertElmt4 = insertelement <4 x i32> %insertElmt3, i32 %14, i32 3
  store <4 x i32> %insertElmt4, <4 x i32>* %allocaVec1, align 16
  %15 = load <4 x i32>, <4 x i32>* %allocaVec1, align 16
  %Vop = add <4 x i32> %15, <i32 16, i32 16, i32 16, i32 16>
  %16 = add i32 %14, 16
  %allocaVec5 = alloca <4 x i8>, align 16
  %17 = alloca i8, i32 %16
  store i8* %17, i8** %11, align 4
  %18 = load %struct.rtpheader*, %struct.rtpheader** %8, align 4
  %19 = bitcast %struct.rtpheader* %18 to i32*
  store i32* %19, i32** %12, align 4
  %20 = load i8*, i8** %11, align 4
  %21 = bitcast i8* %20 to i32*
  store i32* %21, i32** %13, align 4
  %22 = load i32*, i32** %12, align 4
  %23 = getelementptr inbounds i32, i32* %22, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = call arm_aapcscc i32 @htonl(i32 %24)
  %26 = load i32*, i32** %13, align 4
  %27 = getelementptr inbounds i32, i32* %26, i32 0
  store i32 %25, i32* %27, align 4
  %28 = load i32*, i32** %12, align 4
  %29 = getelementptr inbounds i32, i32* %28, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = call arm_aapcscc i32 @htonl(i32 %30)
  %32 = load i32*, i32** %13, align 4
  %33 = getelementptr inbounds i32, i32* %32, i32 1
  store i32 %31, i32* %33, align 4
  %34 = load i32*, i32** %12, align 4
  %35 = getelementptr inbounds i32, i32* %34, i32 2
  %36 = load i32, i32* %35, align 4
  %37 = call arm_aapcscc i32 @htonl(i32 %36)
  %38 = load i32*, i32** %13, align 4
  %39 = getelementptr inbounds i32, i32* %38, i32 2
  store i32 %37, i32* %39, align 4
  %40 = load i32*, i32** %12, align 4
  %41 = getelementptr inbounds i32, i32* %40, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = call arm_aapcscc i32 @htonl(i32 %42)
  %44 = load i32*, i32** %13, align 4
  %45 = getelementptr inbounds i32, i32* %44, i32 3
  store i32 %43, i32* %45, align 4
  %46 = load i8*, i8** %11, align 4
  %47 = getelementptr inbounds i8, i8* %46, i32 16
  %48 = load i8*, i8** %9, align 4
  %49 = load i32, i32* %10, align 4
  call void @llvm.memmove.p0i8.p0i8.i32(i8* %47, i8* %48, i32 %49, i32 1, i1 false)
  %50 = load i32, i32* %6, align 4
  %51 = load i8*, i8** %11, align 4
  %52 = load i32, i32* %10, align 4
  %insertElmt6 = insertelement <4 x i32> undef, i32 %52, i32 0
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %52, i32 1
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %52, i32 2
  %insertElmt9 = insertelement <4 x i32> %insertElmt8, i32 %52, i32 3
  store <4 x i32> %insertElmt9, <4 x i32>* %allocaVec1, align 16
  %53 = load <4 x i32>, <4 x i32>* %allocaVec1, align 16
  %Vop10 = add <4 x i32> %53, <i32 16, i32 16, i32 16, i32 16>
  %54 = add i32 %52, 16
  %55 = load %struct.sockaddr_in*, %struct.sockaddr_in** %7, align 4
  %56 = bitcast %struct.sockaddr_in* %55 to %struct.sockaddr*
  %57 = call arm_aapcscc i32 @sendto(i32 %50, i8* %51, i32 %54, i32 0, %struct.sockaddr* %56, i32 16)
  ret i32 %57
}

declare arm_aapcscc i32 @htonl(i32) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture, i8* nocapture readonly, i32, i32, i1) #5

declare arm_aapcscc i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #3

; Function Attrs: nounwind
define arm_aapcscc i32 @makesocket(i8*, i16 zeroext, i32, %struct.sockaddr_in*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %CallInst = alloca i32, align 4
  %CallInstVec = alloca <4 x i32>, align 16
  %5 = alloca i8*, align 4
  %allocaVec1 = alloca <4 x i16>, align 16
  %6 = alloca i16, align 2
  %allocaVec2 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in*, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %11 = alloca %struct.sockaddr_in, align 4
  %allocaVec5 = alloca <4 x i8>, align 16
  %12 = alloca i8, align 1
  %allocaVec6 = alloca <4 x i8>, align 16
  %13 = alloca i8, align 1
  %allocaVec7 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  store i8* %0, i8** %5, align 4
  store i16 %1, i16* %6, align 2
  store i32 %2, i32* %7, align 4
  store %struct.sockaddr_in* %3, %struct.sockaddr_in** %8, align 4
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec4
  store i32 1, i32* %10, align 4
  %16 = load i32, i32* %7, align 4
  %17 = trunc i32 %16 to i8
  store i8 %17, i8* %12, align 1
  store <4 x i8> zeroinitializer, <4 x i8>* %allocaVec6
  store i8 0, i8* %13, align 1
  %18 = call arm_aapcscc i32 @socket(i32 2, i32 2, i32 0)
  store i32 %18, i32* %15, align 4
  %19 = load i32, i32* %15, align 4
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %24

; <label>:21:                                     ; preds = %4
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %23 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.278, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:24:                                     ; preds = %4
  %25 = load i8*, i8** %5, align 4
  %26 = call arm_aapcscc i32 @inet_addr(i8* %25)
  store i32 %26, i32* %14, align 4
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  store i16 2, i16* %27, align 4
  %28 = load %struct.sockaddr_in*, %struct.sockaddr_in** %8, align 4
  %29 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %28, i32 0, i32 0
  store i16 2, i16* %29, align 4
  %30 = load i16, i16* %6, align 2
  %31 = call arm_aapcscc zeroext i16 @htons(i16 zeroext %30)
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  store i16 %31, i16* %32, align 2
  %33 = load %struct.sockaddr_in*, %struct.sockaddr_in** %8, align 4
  %34 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %33, i32 0, i32 1
  store i16 %31, i16* %34, align 2
  %35 = load i32, i32* %14, align 4
  %36 = load %struct.sockaddr_in*, %struct.sockaddr_in** %8, align 4
  %37 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %36, i32 0, i32 2
  %38 = getelementptr inbounds %struct.rtpbits, %struct.rtpbits* %37, i32 0, i32 0
  store i32 %35, i32* %38, align 4
  %39 = load i32, i32* %15, align 4
  %40 = bitcast i32* %10 to i8*
  %41 = call arm_aapcscc i32 @setsockopt(i32 %39, i32 1, i32 2, i8* %40, i32 4)
  store i32 %41, i32* %9, align 4
  %42 = load i32, i32* %9, align 4
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %44, label %47

; <label>:44:                                     ; preds = %24
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %46 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1.279, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:47:                                     ; preds = %24
  %48 = load i32, i32* %14, align 4
  %49 = call arm_aapcscc i32 @ntohl(i32 %48)
  store i32 %49, i32* %CallInst
  %50 = load i32, i32* %CallInst, align 4
  %insertCall = insertelement <4 x i32> undef, i32 %50, i32 0
  %insertCall9 = insertelement <4 x i32> %insertCall, i32 %50, i32 1
  %insertCall10 = insertelement <4 x i32> %insertCall9, i32 %50, i32 2
  %insertCall11 = insertelement <4 x i32> %insertCall10, i32 %50, i32 3
  store <4 x i32> %insertCall11, <4 x i32>* %CallInstVec, align 4
  %51 = load <4 x i32>, <4 x i32>* %CallInstVec, align 4
  %Vop = lshr <4 x i32> %51, <i32 28, i32 28, i32 28, i32 28>
  %52 = lshr i32 %49, 28
  %53 = icmp eq i32 %52, 14
  br i1 %53, label %54, label %71

; <label>:54:                                     ; preds = %47
  %55 = load i32, i32* %15, align 4
  %56 = call arm_aapcscc i32 @setsockopt(i32 %55, i32 0, i32 33, i8* %12, i32 1)
  store i32 %56, i32* %9, align 4
  %57 = load i32, i32* %9, align 4
  %58 = icmp slt i32 %57, 0
  br i1 %58, label %59, label %62

; <label>:59:                                     ; preds = %54
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %61 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.2.280, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:62:                                     ; preds = %54
  store <4 x i8> <i8 1, i8 1, i8 1, i8 1>, <4 x i8>* %allocaVec6
  store i8 1, i8* %13, align 1
  %63 = load i32, i32* %15, align 4
  %64 = call arm_aapcscc i32 @setsockopt(i32 %63, i32 0, i32 34, i8* %13, i32 1)
  store i32 %64, i32* %9, align 4
  %65 = load i32, i32* %9, align 4
  %66 = icmp slt i32 %65, 0
  br i1 %66, label %67, label %70

; <label>:67:                                     ; preds = %62
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %69 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3.281, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:70:                                     ; preds = %62
  br label %71

; <label>:71:                                     ; preds = %70, %47
  %72 = load i32, i32* %15, align 4
  ret i32 %72
}

declare arm_aapcscc i32 @socket(i32, i32, i32) #3

declare arm_aapcscc i32 @inet_addr(i8*) #3

declare arm_aapcscc zeroext i16 @htons(i16 zeroext) #3

declare arm_aapcscc i32 @setsockopt(i32, i32, i32, i8*, i32) #3

declare arm_aapcscc i32 @ntohl(i32) #3

; Function Attrs: nounwind
define arm_aapcscc i32 @count_bits(%struct.lame_global_flags*, i32*, double*, %struct.gr_info*) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %Recovery = alloca double, align 8
  %allocaVec3 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %6 = alloca %struct.lame_global_flags*, align 4
  %7 = alloca i32*, align 4
  %8 = alloca double*, align 4
  %9 = alloca %struct.gr_info*, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec8 = alloca <2 x double>, align 16
  %12 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %6, align 4
  store i32* %1, i32** %7, align 4
  store double* %2, double** %8, align 4
  store %struct.gr_info* %3, %struct.gr_info** %9, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec6
  store i32 0, i32* %10, align 4
  %13 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %14 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %13, i32 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [256 x double], [256 x double]* @ipow20, i32 0, i32 %15
  %17 = load double, double* %16, align 8
  %18 = fdiv double 8.206000e+03, %17
  store double %18, double* %12, align 8
  store i32 0, i32* %11, align 4
  br label %19

; <label>:19:                                     ; preds = %40, %4
  %20 = load i32, i32* %11, align 4
  %21 = icmp slt i32 %20, 576
  br i1 %21, label %22, label %41

; <label>:22:                                     ; preds = %19
  %23 = load double*, double** %8, align 4
  %24 = load i32, i32* %11, align 4
  %25 = getelementptr inbounds double, double* %23, i32 %24
  %26 = load double, double* %25, align 8
  %27 = load double, double* %12, align 8
  %28 = fcmp ogt double %26, %27
  br i1 %28, label %29, label %30

; <label>:29:                                     ; preds = %22
  store <4 x i32> <i32 100000, i32 100000, i32 100000, i32 100000>, <4 x i32>* %allocaVec5
  store i32 100000, i32* %5, align 4
  br label %97

; <label>:30:                                     ; preds = %22
  br label %31

; <label>:31:                                     ; preds = %30
  %32 = load i32, i32* %11, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %32, i32 0
  %insertElmt9 = insertelement <4 x i32> %insertElmt, i32 %32, i32 1
  %insertElmt10 = insertelement <4 x i32> %insertElmt9, i32 %32, i32 2
  %insertElmt11 = insertelement <4 x i32> %insertElmt10, i32 %32, i32 3
  store <4 x i32> %insertElmt11, <4 x i32>* %allocaVec7, align 16
  %33 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop = add <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec7
  %34 = load <4 x i32>, <4 x i32>* %allocaVec7, align 4
  %extractE = extractelement <4 x i32> %34, i64 0
  %extractE12 = extractelement <4 x i32> %34, i64 1
  %extractE13 = extractelement <4 x i32> %34, i64 2
  %sum = add i32 %extractE, %extractE12
  %sum14 = add i32 %sum, %extractE13
  %35 = add nsw i32 %32, 1
  %Fmul = mul i32 %35, 3
  store i32 %35, i32* %Recovery1
  %Fcmp = icmp ne i32 %sum14, %Fmul
  br i1 %Fcmp, label %36, label %40

; <label>:36:                                     ; preds = %31
  %remThree = sdiv i32 %sum14, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %37, label %38

; <label>:37:                                     ; preds = %36
  store i32 %35, i32* %Recovery1, align 4
  br label %39

; <label>:38:                                     ; preds = %36
  store i32 %extractE, i32* %Recovery1, align 4
  br label %39

; <label>:39:                                     ; preds = %38, %37
  br label %40

; <label>:40:                                     ; preds = %31, %39
  %ReplaceInst = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst, i32* %11, align 4
  br label %19

; <label>:41:                                     ; preds = %19
  %42 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %43 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %42, i32 0, i32 60
  %44 = load i32, i32* %43, align 4
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %50

; <label>:46:                                     ; preds = %41
  %47 = load double*, double** %8, align 4
  %48 = load i32*, i32** %7, align 4
  %49 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  call arm_aapcscc void @quantize_xrpow(double* %47, i32* %48, %struct.gr_info* %49)
  br label %54

; <label>:50:                                     ; preds = %41
  %51 = load double*, double** %8, align 4
  %52 = load i32*, i32** %7, align 4
  %53 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  call arm_aapcscc void @quantize_xrpow_ISO(double* %51, i32* %52, %struct.gr_info* %53)
  br label %54

; <label>:54:                                     ; preds = %50, %46
  %55 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %56 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %55, i32 0, i32 6
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 2
  br i1 %58, label %59, label %77

; <label>:59:                                     ; preds = %54
  %60 = load i32*, i32** %7, align 4
  %61 = load i32*, i32** %7, align 4
  %62 = getelementptr inbounds i32, i32* %61, i32 36
  %63 = call arm_aapcscc i32 @choose_table_short(i32* %60, i32* %62, i32* %10)
  %64 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %65 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %64, i32 0, i32 8
  %66 = getelementptr inbounds [3 x i32], [3 x i32]* %65, i32 0, i32 0
  store i32 %63, i32* %66, align 4
  %67 = load i32*, i32** %7, align 4
  %68 = getelementptr inbounds i32, i32* %67, i32 36
  %69 = load i32*, i32** %7, align 4
  %70 = getelementptr inbounds i32, i32* %69, i32 576
  %71 = call arm_aapcscc i32 @choose_table_short(i32* %68, i32* %70, i32* %10)
  %72 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %73 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %72, i32 0, i32 8
  %74 = getelementptr inbounds [3 x i32], [3 x i32]* %73, i32 0, i32 1
  store i32 %71, i32* %74, align 4
  %75 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %76 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %75, i32 0, i32 1
  store i32 288, i32* %76, align 4
  br label %95

; <label>:77:                                     ; preds = %54
  %78 = load i32*, i32** %7, align 4
  %79 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %80 = call arm_aapcscc i32 @count_bits_long(i32* %78, %struct.gr_info* %79)
  store i32 %80, i32* %10, align 4
  %81 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %82 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %81, i32 0, i32 2
  %83 = load i32, i32* %82, align 4
  %84 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %85 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %84, i32 0, i32 1
  %86 = load i32, i32* %85, align 4
  %87 = sub i32 %83, %86
  %88 = udiv i32 %87, 4
  %89 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %90 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %89, i32 0, i32 2
  store i32 %88, i32* %90, align 4
  %91 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %92 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %91, i32 0, i32 1
  %93 = load i32, i32* %92, align 4
  %94 = udiv i32 %93, 2
  store i32 %94, i32* %92, align 4
  br label %95

; <label>:95:                                     ; preds = %77, %59
  %96 = load i32, i32* %10, align 4
  store i32 %96, i32* %5, align 4
  br label %97

; <label>:97:                                     ; preds = %95, %29
  %98 = load i32, i32* %5, align 4
  ret i32 %98
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @choose_table_short(i32*, i32*, i32*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 4
  %6 = alloca i32*, align 4
  %7 = alloca i32*, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  store i32* %0, i32** %5, align 4
  store i32* %1, i32** %6, align 4
  store i32* %2, i32** %7, align 4
  %13 = load i32*, i32** %5, align 4
  %14 = load i32*, i32** %6, align 4
  %15 = call arm_aapcscc i32 @ix_max(i32* %13, i32* %14)
  store i32 %15, i32* %8, align 4
  %16 = load i32, i32* %8, align 4
  %17 = icmp sgt i32 %16, 8206
  br i1 %17, label %18, label %20

; <label>:18:                                     ; preds = %3
  %19 = load i32*, i32** %7, align 4
  store i32 100000, i32* %19, align 4
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec5
  store i32 -1, i32* %4, align 4
  br label %145

; <label>:20:                                     ; preds = %3
  %21 = load i32, i32* %8, align 4
  %22 = icmp sle i32 %21, 15
  br i1 %22, label %23, label %84

; <label>:23:                                     ; preds = %20
  %24 = load i32, i32* %8, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %23
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec5
  store i32 0, i32* %4, align 4
  br label %145

; <label>:27:                                     ; preds = %23
  %28 = load i32, i32* %8, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %28, i32 0
  %insertElmt11 = insertelement <4 x i32> %insertElmt, i32 %28, i32 1
  %insertElmt12 = insertelement <4 x i32> %insertElmt11, i32 %28, i32 2
  %insertElmt13 = insertelement <4 x i32> %insertElmt12, i32 %28, i32 3
  store <4 x i32> %insertElmt13, <4 x i32>* %allocaVec6, align 16
  %29 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop = sub <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %30 = sub nsw i32 %28, 1
  %31 = getelementptr inbounds [15 x i32], [15 x i32]* @huf_tbl_noESC, i32 0, i32 %30
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %9, align 4
  %33 = load i32*, i32** %5, align 4
  %34 = load i32*, i32** %6, align 4
  %35 = load i32, i32* %9, align 4
  %36 = call arm_aapcscc i32 @count_bit_short_noESC(i32* %33, i32* %34, i32 %35)
  store i32 %36, i32* %10, align 4
  %37 = load i32, i32* %9, align 4
  store i32 %37, i32* %11, align 4
  %38 = load i32, i32* %9, align 4
  switch i32 %38, label %78 [
    i32 7, label %39
    i32 10, label %39
    i32 2, label %52
    i32 5, label %52
    i32 13, label %65
  ]

; <label>:39:                                     ; preds = %27, %27
  %40 = load i32, i32* %11, align 4
  %insertElmt14 = insertelement <4 x i32> undef, i32 %40, i32 0
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %40, i32 1
  %insertElmt16 = insertelement <4 x i32> %insertElmt15, i32 %40, i32 2
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %40, i32 3
  store <4 x i32> %insertElmt17, <4 x i32>* %allocaVec9, align 16
  %41 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop18 = add <4 x i32> %41, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop18, <4 x i32>* %allocaVec9
  %42 = add nsw i32 %40, 1
  store i32 %42, i32* %11, align 4
  %43 = load i32, i32* %11, align 4
  %44 = call arm_aapcscc i32 @count_bit_noESC2(i32 %43)
  store i32 %44, i32* %12, align 4
  %45 = load i32, i32* %10, align 4
  %46 = load i32, i32* %12, align 4
  %47 = icmp sgt i32 %45, %46
  br i1 %47, label %48, label %51

; <label>:48:                                     ; preds = %39
  %49 = load i32, i32* %12, align 4
  store i32 %49, i32* %10, align 4
  %50 = load i32, i32* %11, align 4
  store i32 %50, i32* %9, align 4
  br label %51

; <label>:51:                                     ; preds = %48, %39
  br label %52

; <label>:52:                                     ; preds = %51, %27, %27
  %53 = load i32, i32* %11, align 4
  %54 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop19 = add <4 x i32> %54, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop19, <4 x i32>* %allocaVec9
  %55 = add nsw i32 %53, 1
  store i32 %55, i32* %11, align 4
  %56 = load i32, i32* %11, align 4
  %57 = call arm_aapcscc i32 @count_bit_noESC2(i32 %56)
  store i32 %57, i32* %12, align 4
  %58 = load i32, i32* %10, align 4
  %59 = load i32, i32* %12, align 4
  %60 = icmp sgt i32 %58, %59
  br i1 %60, label %61, label %64

; <label>:61:                                     ; preds = %52
  %62 = load i32, i32* %12, align 4
  store i32 %62, i32* %10, align 4
  %63 = load i32, i32* %11, align 4
  store i32 %63, i32* %9, align 4
  br label %64

; <label>:64:                                     ; preds = %61, %52
  br label %79

; <label>:65:                                     ; preds = %27
  %66 = load i32, i32* %11, align 4
  %67 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop20 = add <4 x i32> %67, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %Vop20, <4 x i32>* %allocaVec9
  %68 = add nsw i32 %66, 2
  store i32 %68, i32* %11, align 4
  %69 = load i32, i32* %11, align 4
  %70 = call arm_aapcscc i32 @count_bit_noESC2(i32 %69)
  store i32 %70, i32* %12, align 4
  %71 = load i32, i32* %10, align 4
  %72 = load i32, i32* %12, align 4
  %73 = icmp sgt i32 %71, %72
  br i1 %73, label %74, label %77

; <label>:74:                                     ; preds = %65
  %75 = load i32, i32* %12, align 4
  store i32 %75, i32* %10, align 4
  %76 = load i32, i32* %11, align 4
  store i32 %76, i32* %9, align 4
  br label %77

; <label>:77:                                     ; preds = %74, %65
  br label %79

; <label>:78:                                     ; preds = %27
  br label %79

; <label>:79:                                     ; preds = %78, %77, %64
  %80 = load i32, i32* %10, align 4
  %insertElmt21 = insertelement <4 x i32> undef, i32 %80, i32 0
  %insertElmt22 = insertelement <4 x i32> %insertElmt21, i32 %80, i32 1
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %80, i32 2
  %insertElmt24 = insertelement <4 x i32> %insertElmt23, i32 %80, i32 3
  store <4 x i32> %insertElmt24, <4 x i32>* %allocaVec8, align 16
  %81 = load i32*, i32** %7, align 4
  %82 = load i32, i32* %81, align 4
  %83 = add nsw i32 %82, %80
  store i32 %83, i32* %81, align 4
  br label %143

; <label>:84:                                     ; preds = %20
  %85 = load i32, i32* %8, align 4
  %insertElmt25 = insertelement <4 x i32> undef, i32 %85, i32 0
  %insertElmt26 = insertelement <4 x i32> %insertElmt25, i32 %85, i32 1
  %insertElmt27 = insertelement <4 x i32> %insertElmt26, i32 %85, i32 2
  %insertElmt28 = insertelement <4 x i32> %insertElmt27, i32 %85, i32 3
  store <4 x i32> %insertElmt28, <4 x i32>* %allocaVec6, align 16
  %86 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop29 = sub <4 x i32> %86, <i32 15, i32 15, i32 15, i32 15>
  store <4 x i32> %Vop29, <4 x i32>* %allocaVec6
  %87 = load <4 x i32>, <4 x i32>* %allocaVec6, align 4
  %extractE = extractelement <4 x i32> %87, i64 0
  %extractE30 = extractelement <4 x i32> %87, i64 1
  %extractE31 = extractelement <4 x i32> %87, i64 2
  %sum = add i32 %extractE, %extractE30
  %sum32 = add i32 %sum, %extractE31
  %88 = sub nsw i32 %85, 15
  %Fmul = mul i32 %88, 3
  store i32 %88, i32* %Recovery1
  %Fcmp = icmp ne i32 %sum32, %Fmul
  br i1 %Fcmp, label %89, label %93

; <label>:89:                                     ; preds = %84
  %remThree = sdiv i32 %sum32, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %90, label %91

; <label>:90:                                     ; preds = %89
  store i32 %88, i32* %Recovery1, align 4
  br label %92

; <label>:91:                                     ; preds = %89
  store i32 %extractE, i32* %Recovery1, align 4
  br label %92

; <label>:92:                                     ; preds = %91, %90
  br label %93

; <label>:93:                                     ; preds = %84, %92
  %ReplaceInst = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst, i32* %8, align 4
  store <4 x i32> <i32 24, i32 24, i32 24, i32 24>, <4 x i32>* %allocaVec9
  store i32 24, i32* %11, align 4
  br label %94

; <label>:94:                                     ; preds = %106, %93
  %95 = load i32, i32* %11, align 4
  %96 = icmp slt i32 %95, 32
  br i1 %96, label %97, label %110

; <label>:97:                                     ; preds = %94
  %98 = load i32, i32* %11, align 4
  %99 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %98
  %100 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %99, i32 0, i32 1
  %101 = load i32, i32* %100, align 4
  %102 = load i32, i32* %8, align 4
  %103 = icmp sge i32 %101, %102
  br i1 %103, label %104, label %105

; <label>:104:                                    ; preds = %97
  br label %110

; <label>:105:                                    ; preds = %97
  br label %106

; <label>:106:                                    ; preds = %105
  %107 = load i32, i32* %11, align 4
  %108 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop33 = add <4 x i32> %108, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop33, <4 x i32>* %allocaVec9
  %109 = add nsw i32 %107, 1
  store i32 %109, i32* %11, align 4
  br label %94

; <label>:110:                                    ; preds = %104, %94
  %111 = load i32, i32* %11, align 4
  %112 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop34 = sub <4 x i32> %112, <i32 8, i32 8, i32 8, i32 8>
  store <4 x i32> %Vop34, <4 x i32>* %allocaVec7
  %113 = sub nsw i32 %111, 8
  store i32 %113, i32* %9, align 4
  br label %114

; <label>:114:                                    ; preds = %135, %110
  %115 = load i32, i32* %9, align 4
  %116 = icmp slt i32 %115, 24
  br i1 %116, label %117, label %136

; <label>:117:                                    ; preds = %114
  %118 = load i32, i32* %9, align 4
  %119 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %118
  %120 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %119, i32 0, i32 1
  %121 = load i32, i32* %120, align 4
  %122 = load i32, i32* %8, align 4
  %123 = icmp sge i32 %121, %122
  br i1 %123, label %124, label %125

; <label>:124:                                    ; preds = %117
  br label %136

; <label>:125:                                    ; preds = %117
  br label %126

; <label>:126:                                    ; preds = %125
  %127 = load i32, i32* %9, align 4
  %128 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop35 = add <4 x i32> %128, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop35, <4 x i32>* %allocaVec7
  %129 = load <4 x i32>, <4 x i32>* %allocaVec7, align 4
  %extractE37 = extractelement <4 x i32> %129, i64 0
  %extractE38 = extractelement <4 x i32> %129, i64 1
  %extractE39 = extractelement <4 x i32> %129, i64 2
  %sum40 = add i32 %extractE37, %extractE38
  %sum41 = add i32 %sum40, %extractE39
  %130 = add nsw i32 %127, 1
  %Fmul36 = mul i32 %130, 3
  store i32 %130, i32* %Recovery2
  %Fcmp42 = icmp ne i32 %sum41, %Fmul36
  br i1 %Fcmp42, label %131, label %135

; <label>:131:                                    ; preds = %126
  %remThree43 = sdiv i32 %sum41, %extractE37
  %FcmpThree44 = icmp ne i32 %remThree43, 3
  br i1 %FcmpThree44, label %132, label %133

; <label>:132:                                    ; preds = %131
  store i32 %130, i32* %Recovery2, align 4
  br label %134

; <label>:133:                                    ; preds = %131
  store i32 %extractE37, i32* %Recovery2, align 4
  br label %134

; <label>:134:                                    ; preds = %133, %132
  br label %135

; <label>:135:                                    ; preds = %126, %134
  %ReplaceInst45 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst45, i32* %9, align 4
  br label %114

; <label>:136:                                    ; preds = %124, %114
  %137 = load i32*, i32** %5, align 4
  %138 = load i32*, i32** %6, align 4
  %139 = load i32, i32* %9, align 4
  %140 = load i32, i32* %11, align 4
  %141 = load i32*, i32** %7, align 4
  %142 = call arm_aapcscc i32 @count_bit_short_ESC(i32* %137, i32* %138, i32 %139, i32 %140, i32* %141)
  store i32 %142, i32* %9, align 4
  br label %143

; <label>:143:                                    ; preds = %136, %79
  %144 = load i32, i32* %9, align 4
  store i32 %144, i32* %4, align 4
  br label %145

; <label>:145:                                    ; preds = %143, %26, %18
  %146 = load i32, i32* %4, align 4
  ret i32 %146
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @count_bits_long(i32*, %struct.gr_info*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec6 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %4 = alloca i32*, align 4
  %5 = alloca %struct.gr_info*, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %allocaVec14 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  store i32* %0, i32** %4, align 4
  store %struct.gr_info* %1, %struct.gr_info** %5, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec10
  store i32 0, i32* %9, align 4
  store <4 x i32> <i32 576, i32 576, i32 576, i32 576>, <4 x i32>* %allocaVec7
  store i32 576, i32* %6, align 4
  br label %14

; <label>:14:                                     ; preds = %33, %2
  %15 = load i32, i32* %6, align 4
  %16 = icmp sgt i32 %15, 1
  br i1 %16, label %17, label %37

; <label>:17:                                     ; preds = %14
  %18 = load i32*, i32** %4, align 4
  %19 = load i32, i32* %6, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %19, i32 0
  %insertElmt15 = insertelement <4 x i32> %insertElmt, i32 %19, i32 1
  %insertElmt16 = insertelement <4 x i32> %insertElmt15, i32 %19, i32 2
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %19, i32 3
  store <4 x i32> %insertElmt17, <4 x i32>* %allocaVec7, align 16
  %20 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop = sub <4 x i32> %20, <i32 1, i32 1, i32 1, i32 1>
  %21 = sub nsw i32 %19, 1
  %22 = getelementptr inbounds i32, i32* %18, i32 %21
  %23 = load i32, i32* %22, align 4
  %24 = load i32*, i32** %4, align 4
  %25 = load i32, i32* %6, align 4
  %26 = sub nsw i32 %25, 2
  %27 = getelementptr inbounds i32, i32* %24, i32 %26
  %28 = load i32, i32* %27, align 4
  %29 = or i32 %23, %28
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %32

; <label>:31:                                     ; preds = %17
  br label %37

; <label>:32:                                     ; preds = %17
  br label %33

; <label>:33:                                     ; preds = %32
  %34 = load i32, i32* %6, align 4
  %insertElmt18 = insertelement <4 x i32> undef, i32 %34, i32 0
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %34, i32 1
  %insertElmt20 = insertelement <4 x i32> %insertElmt19, i32 %34, i32 2
  %insertElmt21 = insertelement <4 x i32> %insertElmt20, i32 %34, i32 3
  store <4 x i32> %insertElmt21, <4 x i32>* %allocaVec7, align 16
  %35 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop22 = sub <4 x i32> %35, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %Vop22, <4 x i32>* %allocaVec7
  %36 = sub nsw i32 %34, 2
  store i32 %36, i32* %6, align 4
  br label %14

; <label>:37:                                     ; preds = %31, %14
  %38 = load i32, i32* %6, align 4
  %39 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %40 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %39, i32 0, i32 2
  store i32 %38, i32* %40, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec8
  store i32 0, i32* %7, align 4
  br label %41

; <label>:41:                                     ; preds = %148, %37
  %42 = load i32, i32* %6, align 4
  %43 = icmp sgt i32 %42, 3
  br i1 %43, label %44, label %152

; <label>:44:                                     ; preds = %41
  %45 = load i32*, i32** %4, align 4
  %46 = load i32, i32* %6, align 4
  %47 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop23 = sub <4 x i32> %47, <i32 1, i32 1, i32 1, i32 1>
  %48 = sub nsw i32 %46, 1
  %49 = getelementptr inbounds i32, i32* %45, i32 %48
  %50 = load i32, i32* %49, align 4
  %51 = load i32*, i32** %4, align 4
  %52 = load i32, i32* %6, align 4
  %53 = sub nsw i32 %52, 2
  %54 = getelementptr inbounds i32, i32* %51, i32 %53
  %55 = load i32, i32* %54, align 4
  %56 = or i32 %50, %55
  %57 = load i32*, i32** %4, align 4
  %58 = load i32, i32* %6, align 4
  %59 = sub nsw i32 %58, 3
  %60 = getelementptr inbounds i32, i32* %57, i32 %59
  %61 = load i32, i32* %60, align 4
  %62 = or i32 %56, %61
  %63 = load i32*, i32** %4, align 4
  %64 = load i32, i32* %6, align 4
  %65 = sub nsw i32 %64, 4
  %66 = getelementptr inbounds i32, i32* %63, i32 %65
  %67 = load i32, i32* %66, align 4
  %68 = or i32 %62, %67
  %69 = icmp ugt i32 %68, 1
  br i1 %69, label %70, label %71

; <label>:70:                                     ; preds = %44
  br label %152

; <label>:71:                                     ; preds = %44
  %72 = load i32*, i32** %4, align 4
  %73 = load i32, i32* %6, align 4
  %74 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop24 = sub <4 x i32> %74, <i32 1, i32 1, i32 1, i32 1>
  %75 = sub nsw i32 %73, 1
  %76 = getelementptr inbounds i32, i32* %72, i32 %75
  %77 = load i32, i32* %76, align 4
  store i32 %77, i32* %11, align 4
  %78 = load i32, i32* %11, align 4
  store i32 %78, i32* %10, align 4
  %79 = load i32, i32* %11, align 4
  %insertElmt25 = insertelement <4 x i32> undef, i32 %79, i32 0
  %insertElmt26 = insertelement <4 x i32> %insertElmt25, i32 %79, i32 1
  %insertElmt27 = insertelement <4 x i32> %insertElmt26, i32 %79, i32 2
  %insertElmt28 = insertelement <4 x i32> %insertElmt27, i32 %79, i32 3
  store <4 x i32> %insertElmt28, <4 x i32>* %allocaVec12, align 16
  %80 = load i32, i32* %9, align 4
  %insertElmt29 = insertelement <4 x i32> undef, i32 %80, i32 0
  %insertElmt30 = insertelement <4 x i32> %insertElmt29, i32 %80, i32 1
  %insertElmt31 = insertelement <4 x i32> %insertElmt30, i32 %80, i32 2
  %insertElmt32 = insertelement <4 x i32> %insertElmt31, i32 %80, i32 3
  store <4 x i32> %insertElmt32, <4 x i32>* %allocaVec10, align 16
  %81 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %82 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop33 = add <4 x i32> %81, %82
  store <4 x i32> %Vop33, <4 x i32>* %allocaVec10
  %83 = add nsw i32 %80, %79
  store i32 %83, i32* %9, align 4
  %84 = load i32*, i32** %4, align 4
  %85 = load i32, i32* %6, align 4
  %86 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop34 = sub <4 x i32> %86, <i32 2, i32 2, i32 2, i32 2>
  %87 = sub nsw i32 %85, 2
  %88 = getelementptr inbounds i32, i32* %84, i32 %87
  %89 = load i32, i32* %88, align 4
  store i32 %89, i32* %11, align 4
  %90 = load i32, i32* %11, align 4
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %92, label %99

; <label>:92:                                     ; preds = %71
  %93 = load i32, i32* %10, align 4
  %insertElmt35 = insertelement <4 x i32> undef, i32 %93, i32 0
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %93, i32 1
  %insertElmt37 = insertelement <4 x i32> %insertElmt36, i32 %93, i32 2
  %insertElmt38 = insertelement <4 x i32> %insertElmt37, i32 %93, i32 3
  store <4 x i32> %insertElmt38, <4 x i32>* %allocaVec11, align 16
  %94 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop39 = add <4 x i32> %94, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %Vop39, <4 x i32>* %allocaVec11
  %95 = add nsw i32 %93, 2
  store i32 %95, i32* %10, align 4
  %96 = load i32, i32* %9, align 4
  %97 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop40 = add <4 x i32> %97, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop40, <4 x i32>* %allocaVec10
  %98 = add nsw i32 %96, 1
  store i32 %98, i32* %9, align 4
  br label %99

; <label>:99:                                     ; preds = %92, %71
  %100 = load i32*, i32** %4, align 4
  %101 = load i32, i32* %6, align 4
  %102 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop41 = sub <4 x i32> %102, <i32 3, i32 3, i32 3, i32 3>
  %103 = sub nsw i32 %101, 3
  %104 = getelementptr inbounds i32, i32* %100, i32 %103
  %105 = load i32, i32* %104, align 4
  store i32 %105, i32* %11, align 4
  %106 = load i32, i32* %11, align 4
  %107 = icmp ne i32 %106, 0
  br i1 %107, label %108, label %115

; <label>:108:                                    ; preds = %99
  %109 = load i32, i32* %10, align 4
  %110 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop42 = add <4 x i32> %110, <i32 4, i32 4, i32 4, i32 4>
  store <4 x i32> %Vop42, <4 x i32>* %allocaVec11
  %111 = add nsw i32 %109, 4
  store i32 %111, i32* %10, align 4
  %112 = load i32, i32* %9, align 4
  %113 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop43 = add <4 x i32> %113, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop43, <4 x i32>* %allocaVec10
  %114 = add nsw i32 %112, 1
  store i32 %114, i32* %9, align 4
  br label %115

; <label>:115:                                    ; preds = %108, %99
  %116 = load i32*, i32** %4, align 4
  %117 = load i32, i32* %6, align 4
  %118 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop44 = sub <4 x i32> %118, <i32 4, i32 4, i32 4, i32 4>
  %119 = sub nsw i32 %117, 4
  %120 = getelementptr inbounds i32, i32* %116, i32 %119
  %121 = load i32, i32* %120, align 4
  store i32 %121, i32* %11, align 4
  %122 = load i32, i32* %11, align 4
  %123 = icmp ne i32 %122, 0
  br i1 %123, label %124, label %137

; <label>:124:                                    ; preds = %115
  %125 = load i32, i32* %10, align 4
  %126 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop45 = add <4 x i32> %126, <i32 8, i32 8, i32 8, i32 8>
  store <4 x i32> %Vop45, <4 x i32>* %allocaVec11
  %127 = load <4 x i32>, <4 x i32>* %allocaVec11, align 4
  %extractE = extractelement <4 x i32> %127, i64 0
  %extractE46 = extractelement <4 x i32> %127, i64 1
  %extractE47 = extractelement <4 x i32> %127, i64 2
  %sum = add i32 %extractE, %extractE46
  %sum48 = add i32 %sum, %extractE47
  %128 = add nsw i32 %125, 8
  %Fmul = mul i32 %128, 3
  store i32 %128, i32* %Recovery
  %Fcmp = icmp ne i32 %sum48, %Fmul
  br i1 %Fcmp, label %129, label %133

; <label>:129:                                    ; preds = %124
  %remThree = sdiv i32 %sum48, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %130, label %131

; <label>:130:                                    ; preds = %129
  store i32 %128, i32* %Recovery, align 4
  br label %132

; <label>:131:                                    ; preds = %129
  store i32 %extractE, i32* %Recovery, align 4
  br label %132

; <label>:132:                                    ; preds = %131, %130
  br label %133

; <label>:133:                                    ; preds = %124, %132
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %10, align 4
  %134 = load i32, i32* %9, align 4
  %135 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop49 = add <4 x i32> %135, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop49, <4 x i32>* %allocaVec10
  %136 = add nsw i32 %134, 1
  store i32 %136, i32* %9, align 4
  br label %137

; <label>:137:                                    ; preds = %133, %115
  %138 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 32, i32 3), align 4
  %139 = load i32, i32* %10, align 4
  %140 = getelementptr inbounds i8, i8* %138, i32 %139
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = load i32, i32* %7, align 4
  %insertElmt50 = insertelement <4 x i32> undef, i32 %143, i32 0
  %insertElmt51 = insertelement <4 x i32> %insertElmt50, i32 %143, i32 1
  %insertElmt52 = insertelement <4 x i32> %insertElmt51, i32 %143, i32 2
  %insertElmt53 = insertelement <4 x i32> %insertElmt52, i32 %143, i32 3
  store <4 x i32> %insertElmt53, <4 x i32>* %allocaVec8, align 16
  %144 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  store i32 %142, i32* %CastInst
  %145 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %145, i32 0
  %insertCast54 = insertelement <4 x i32> %insertCast, i32 %145, i32 1
  %insertCast55 = insertelement <4 x i32> %insertCast54, i32 %145, i32 2
  %insertCast56 = insertelement <4 x i32> %insertCast55, i32 %145, i32 3
  store <4 x i32> %insertCast56, <4 x i32>* %CastInstVec, align 4
  %146 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop57 = add <4 x i32> %144, %146
  store <4 x i32> %Vop57, <4 x i32>* %allocaVec8
  %147 = add nsw i32 %143, %142
  store i32 %147, i32* %7, align 4
  br label %148

; <label>:148:                                    ; preds = %137
  %149 = load i32, i32* %6, align 4
  %150 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop58 = sub <4 x i32> %150, <i32 4, i32 4, i32 4, i32 4>
  store <4 x i32> %Vop58, <4 x i32>* %allocaVec7
  %151 = sub nsw i32 %149, 4
  store i32 %151, i32* %6, align 4
  br label %41

; <label>:152:                                    ; preds = %70, %41
  %153 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %154 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %153, i32 0, i32 2
  %155 = load i32, i32* %154, align 4
  %156 = load i32, i32* %6, align 4
  %157 = sub i32 %155, %156
  store i32 %157, i32* %8, align 4
  %158 = load i32, i32* %7, align 4
  %159 = load i32, i32* %8, align 4
  %160 = icmp slt i32 %158, %159
  br i1 %160, label %161, label %169

; <label>:161:                                    ; preds = %152
  %162 = load i32, i32* %7, align 4
  %163 = load i32, i32* %9, align 4
  %164 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %165 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %Vop59 = add <4 x i32> %164, %165
  store <4 x i32> %Vop59, <4 x i32>* %allocaVec10
  %166 = add nsw i32 %163, %162
  store i32 %166, i32* %9, align 4
  %167 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %168 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %167, i32 0, i32 14
  store i32 0, i32* %168, align 4
  br label %183

; <label>:169:                                    ; preds = %152
  %170 = load i32, i32* %8, align 4
  %insertElmt60 = insertelement <4 x i32> undef, i32 %170, i32 0
  %insertElmt61 = insertelement <4 x i32> %insertElmt60, i32 %170, i32 1
  %insertElmt62 = insertelement <4 x i32> %insertElmt61, i32 %170, i32 2
  %insertElmt63 = insertelement <4 x i32> %insertElmt62, i32 %170, i32 3
  store <4 x i32> %insertElmt63, <4 x i32>* %allocaVec9, align 16
  %171 = load i32, i32* %9, align 4
  %172 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %173 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop64 = add <4 x i32> %172, %173
  store <4 x i32> %Vop64, <4 x i32>* %allocaVec10
  %174 = load <4 x i32>, <4 x i32>* %allocaVec10, align 4
  %extractE66 = extractelement <4 x i32> %174, i64 0
  %extractE67 = extractelement <4 x i32> %174, i64 1
  %extractE68 = extractelement <4 x i32> %174, i64 2
  %sum69 = add i32 %extractE66, %extractE67
  %sum70 = add i32 %sum69, %extractE68
  %175 = add nsw i32 %171, %170
  %Fmul65 = mul i32 %175, 3
  store i32 %175, i32* %Recovery1
  %Fcmp71 = icmp ne i32 %sum70, %Fmul65
  br i1 %Fcmp71, label %176, label %180

; <label>:176:                                    ; preds = %169
  %remThree95 = sdiv i32 %sum70, %extractE66
  %FcmpThree96 = icmp ne i32 %remThree95, 3
  br i1 %FcmpThree96, label %177, label %178

; <label>:177:                                    ; preds = %176
  store i32 %175, i32* %Recovery1, align 4
  br label %179

; <label>:178:                                    ; preds = %176
  store i32 %extractE66, i32* %Recovery1, align 4
  br label %179

; <label>:179:                                    ; preds = %178, %177
  br label %180

; <label>:180:                                    ; preds = %169, %179
  %ReplaceInst99 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst99, i32* %9, align 4
  %181 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %182 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %181, i32 0, i32 14
  store i32 1, i32* %182, align 4
  br label %183

; <label>:183:                                    ; preds = %180, %161
  %184 = load i32, i32* %9, align 4
  %185 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %186 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %185, i32 0, i32 18
  store i32 %184, i32* %186, align 4
  %187 = load i32, i32* %6, align 4
  %188 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %189 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %188, i32 0, i32 1
  store i32 %187, i32* %189, align 4
  %190 = load i32, i32* %6, align 4
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %192, label %194

; <label>:192:                                    ; preds = %183
  %193 = load i32, i32* %9, align 4
  store i32 %193, i32* %3, align 4
  br label %316

; <label>:194:                                    ; preds = %183
  %195 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %196 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %195, i32 0, i32 6
  %197 = load i32, i32* %196, align 4
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %283

; <label>:199:                                    ; preds = %194
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec14
  store i32 0, i32* %13, align 4
  br label %200

; <label>:200:                                    ; preds = %214, %199
  %201 = load i32, i32* %13, align 4
  %insertElmt72 = insertelement <4 x i32> undef, i32 %201, i32 0
  %insertElmt73 = insertelement <4 x i32> %insertElmt72, i32 %201, i32 1
  %insertElmt74 = insertelement <4 x i32> %insertElmt73, i32 %201, i32 2
  %insertElmt75 = insertelement <4 x i32> %insertElmt74, i32 %201, i32 3
  store <4 x i32> %insertElmt75, <4 x i32>* %allocaVec14, align 16
  %202 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %Vop76 = add <4 x i32> %202, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop76, <4 x i32>* %allocaVec14
  %203 = load <4 x i32>, <4 x i32>* %allocaVec14, align 4
  %extractE78 = extractelement <4 x i32> %203, i64 0
  %extractE79 = extractelement <4 x i32> %203, i64 1
  %extractE80 = extractelement <4 x i32> %203, i64 2
  %sum81 = add i32 %extractE78, %extractE79
  %sum82 = add i32 %sum81, %extractE80
  %204 = add nsw i32 %201, 1
  %Fmul77 = mul i32 %204, 3
  store i32 %204, i32* %Recovery2
  %Fcmp83 = icmp ne i32 %sum82, %Fmul77
  br i1 %Fcmp83, label %205, label %209

; <label>:205:                                    ; preds = %200
  %remThree97 = sdiv i32 %sum82, %extractE78
  %FcmpThree98 = icmp ne i32 %remThree97, 3
  br i1 %FcmpThree98, label %206, label %207

; <label>:206:                                    ; preds = %205
  store i32 %204, i32* %Recovery2, align 4
  br label %208

; <label>:207:                                    ; preds = %205
  store i32 %extractE78, i32* %Recovery2, align 4
  br label %208

; <label>:208:                                    ; preds = %207, %206
  br label %209

; <label>:209:                                    ; preds = %200, %208
  %ReplaceInst100 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst100, i32* %13, align 4
  %210 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %204
  %211 = load i32, i32* %210, align 4
  %212 = load i32, i32* %6, align 4
  %213 = icmp slt i32 %211, %212
  br i1 %213, label %214, label %215

; <label>:214:                                    ; preds = %209
  br label %200

; <label>:215:                                    ; preds = %209
  %216 = load i32, i32* %13, align 4
  %217 = getelementptr inbounds [23 x %struct.anon.55], [23 x %struct.anon.55]* @subdv_table, i32 0, i32 %216
  %218 = getelementptr inbounds %struct.anon.55, %struct.anon.55* %217, i32 0, i32 0
  %219 = load i32, i32* %218, align 4
  store i32 %219, i32* %12, align 4
  br label %220

; <label>:220:                                    ; preds = %228, %215
  %221 = load i32, i32* %12, align 4
  %insertElmt84 = insertelement <4 x i32> undef, i32 %221, i32 0
  %insertElmt85 = insertelement <4 x i32> %insertElmt84, i32 %221, i32 1
  %insertElmt86 = insertelement <4 x i32> %insertElmt85, i32 %221, i32 2
  %insertElmt87 = insertelement <4 x i32> %insertElmt86, i32 %221, i32 3
  store <4 x i32> %insertElmt87, <4 x i32>* %allocaVec13, align 16
  %222 = load <4 x i32>, <4 x i32>* %allocaVec13, align 16
  %Vop88 = add <4 x i32> %222, <i32 1, i32 1, i32 1, i32 1>
  %223 = add nsw i32 %221, 1
  %224 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %223
  %225 = load i32, i32* %224, align 4
  %226 = load i32, i32* %6, align 4
  %227 = icmp sgt i32 %225, %226
  br i1 %227, label %228, label %232

; <label>:228:                                    ; preds = %220
  %229 = load i32, i32* %12, align 4
  %insertElmt89 = insertelement <4 x i32> undef, i32 %229, i32 0
  %insertElmt90 = insertelement <4 x i32> %insertElmt89, i32 %229, i32 1
  %insertElmt91 = insertelement <4 x i32> %insertElmt90, i32 %229, i32 2
  %insertElmt92 = insertelement <4 x i32> %insertElmt91, i32 %229, i32 3
  store <4 x i32> %insertElmt92, <4 x i32>* %allocaVec13, align 16
  %230 = load <4 x i32>, <4 x i32>* %allocaVec13, align 16
  %Vop93 = add <4 x i32> %230, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop93, <4 x i32>* %allocaVec13
  %231 = add nsw i32 %229, -1
  store i32 %231, i32* %12, align 4
  br label %220

; <label>:232:                                    ; preds = %220
  %233 = load i32, i32* %12, align 4
  %234 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %235 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %234, i32 0, i32 10
  store i32 %233, i32* %235, align 4
  %236 = load i32, i32* %13, align 4
  %237 = getelementptr inbounds [23 x %struct.anon.55], [23 x %struct.anon.55]* @subdv_table, i32 0, i32 %236
  %238 = getelementptr inbounds %struct.anon.55, %struct.anon.55* %237, i32 0, i32 1
  %239 = load i32, i32* %238, align 4
  store i32 %239, i32* %12, align 4
  br label %240

; <label>:240:                                    ; preds = %251, %232
  %241 = load i32, i32* %12, align 4
  %242 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %243 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %242, i32 0, i32 10
  %244 = load i32, i32* %243, align 4
  %245 = add i32 %241, %244
  %246 = add i32 %245, 2
  %247 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %246
  %248 = load i32, i32* %247, align 4
  %249 = load i32, i32* %6, align 4
  %250 = icmp sgt i32 %248, %249
  br i1 %250, label %251, label %255

; <label>:251:                                    ; preds = %240
  %252 = load i32, i32* %12, align 4
  %253 = load <4 x i32>, <4 x i32>* %allocaVec13, align 16
  %Vop94 = add <4 x i32> %253, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop94, <4 x i32>* %allocaVec13
  %254 = add nsw i32 %252, -1
  store i32 %254, i32* %12, align 4
  br label %240

; <label>:255:                                    ; preds = %240
  %256 = load i32, i32* %12, align 4
  %257 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %258 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %257, i32 0, i32 11
  store i32 %256, i32* %258, align 4
  %259 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %260 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %259, i32 0, i32 10
  %261 = load i32, i32* %260, align 4
  %262 = add i32 %261, 1
  %263 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %262
  %264 = load i32, i32* %263, align 4
  store i32 %264, i32* %7, align 4
  %265 = load i32, i32* %12, align 4
  %266 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %267 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %266, i32 0, i32 10
  %268 = load i32, i32* %267, align 4
  %269 = add i32 %265, %268
  %270 = add i32 %269, 2
  %271 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %270
  %272 = load i32, i32* %271, align 4
  store i32 %272, i32* %8, align 4
  %273 = load i32*, i32** %4, align 4
  %274 = load i32, i32* %8, align 4
  %275 = getelementptr inbounds i32, i32* %273, i32 %274
  %276 = load i32*, i32** %4, align 4
  %277 = load i32, i32* %6, align 4
  %278 = getelementptr inbounds i32, i32* %276, i32 %277
  %279 = call arm_aapcscc i32 @choose_table(i32* %275, i32* %278, i32* %9)
  %280 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %281 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %280, i32 0, i32 8
  %282 = getelementptr inbounds [3 x i32], [3 x i32]* %281, i32 0, i32 2
  store i32 %279, i32* %282, align 4
  br label %296

; <label>:283:                                    ; preds = %194
  %284 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %285 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %284, i32 0, i32 10
  store i32 7, i32* %285, align 4
  %286 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %287 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %286, i32 0, i32 11
  store i32 13, i32* %287, align 4
  %288 = load i32, i32* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0, i32 8), align 4
  store i32 %288, i32* %7, align 4
  %289 = load i32, i32* %6, align 4
  store i32 %289, i32* %8, align 4
  %290 = load i32, i32* %7, align 4
  %291 = load i32, i32* %8, align 4
  %292 = icmp sgt i32 %290, %291
  br i1 %292, label %293, label %295

; <label>:293:                                    ; preds = %283
  %294 = load i32, i32* %8, align 4
  store i32 %294, i32* %7, align 4
  br label %295

; <label>:295:                                    ; preds = %293, %283
  br label %296

; <label>:296:                                    ; preds = %295, %255
  %297 = load i32*, i32** %4, align 4
  %298 = load i32*, i32** %4, align 4
  %299 = load i32, i32* %7, align 4
  %300 = getelementptr inbounds i32, i32* %298, i32 %299
  %301 = call arm_aapcscc i32 @choose_table(i32* %297, i32* %300, i32* %9)
  %302 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %303 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %302, i32 0, i32 8
  %304 = getelementptr inbounds [3 x i32], [3 x i32]* %303, i32 0, i32 0
  store i32 %301, i32* %304, align 4
  %305 = load i32*, i32** %4, align 4
  %306 = load i32, i32* %7, align 4
  %307 = getelementptr inbounds i32, i32* %305, i32 %306
  %308 = load i32*, i32** %4, align 4
  %309 = load i32, i32* %8, align 4
  %310 = getelementptr inbounds i32, i32* %308, i32 %309
  %311 = call arm_aapcscc i32 @choose_table(i32* %307, i32* %310, i32* %9)
  %312 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %313 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %312, i32 0, i32 8
  %314 = getelementptr inbounds [3 x i32], [3 x i32]* %313, i32 0, i32 1
  store i32 %311, i32* %314, align 4
  %315 = load i32, i32* %9, align 4
  store i32 %315, i32* %3, align 4
  br label %316

; <label>:316:                                    ; preds = %296, %192
  %317 = load i32, i32* %3, align 4
  ret i32 %317
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @choose_table(i32*, i32*, i32*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 4
  %6 = alloca i32*, align 4
  %7 = alloca i32*, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  store i32* %0, i32** %5, align 4
  store i32* %1, i32** %6, align 4
  store i32* %2, i32** %7, align 4
  %13 = load i32*, i32** %5, align 4
  %14 = load i32*, i32** %6, align 4
  %15 = call arm_aapcscc i32 @ix_max(i32* %13, i32* %14)
  store i32 %15, i32* %8, align 4
  %16 = load i32, i32* %8, align 4
  %17 = icmp sgt i32 %16, 8206
  br i1 %17, label %18, label %20

; <label>:18:                                     ; preds = %3
  %19 = load i32*, i32** %7, align 4
  store i32 100000, i32* %19, align 4
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec5
  store i32 -1, i32* %4, align 4
  br label %145

; <label>:20:                                     ; preds = %3
  %21 = load i32, i32* %8, align 4
  %22 = icmp sle i32 %21, 15
  br i1 %22, label %23, label %84

; <label>:23:                                     ; preds = %20
  %24 = load i32, i32* %8, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %23
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec5
  store i32 0, i32* %4, align 4
  br label %145

; <label>:27:                                     ; preds = %23
  %28 = load i32, i32* %8, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %28, i32 0
  %insertElmt11 = insertelement <4 x i32> %insertElmt, i32 %28, i32 1
  %insertElmt12 = insertelement <4 x i32> %insertElmt11, i32 %28, i32 2
  %insertElmt13 = insertelement <4 x i32> %insertElmt12, i32 %28, i32 3
  store <4 x i32> %insertElmt13, <4 x i32>* %allocaVec6, align 16
  %29 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop = sub <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  %30 = sub nsw i32 %28, 1
  %31 = getelementptr inbounds [15 x i32], [15 x i32]* @huf_tbl_noESC, i32 0, i32 %30
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %9, align 4
  %33 = load i32*, i32** %5, align 4
  %34 = load i32*, i32** %6, align 4
  %35 = load i32, i32* %9, align 4
  %36 = call arm_aapcscc i32 @count_bit_noESC(i32* %33, i32* %34, i32 %35)
  store i32 %36, i32* %10, align 4
  %37 = load i32, i32* %9, align 4
  store i32 %37, i32* %11, align 4
  %38 = load i32, i32* %9, align 4
  switch i32 %38, label %78 [
    i32 7, label %39
    i32 10, label %39
    i32 2, label %52
    i32 5, label %52
    i32 13, label %65
  ]

; <label>:39:                                     ; preds = %27, %27
  %40 = load i32, i32* %11, align 4
  %insertElmt14 = insertelement <4 x i32> undef, i32 %40, i32 0
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %40, i32 1
  %insertElmt16 = insertelement <4 x i32> %insertElmt15, i32 %40, i32 2
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %40, i32 3
  store <4 x i32> %insertElmt17, <4 x i32>* %allocaVec9, align 16
  %41 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop18 = add <4 x i32> %41, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop18, <4 x i32>* %allocaVec9
  %42 = add nsw i32 %40, 1
  store i32 %42, i32* %11, align 4
  %43 = load i32, i32* %11, align 4
  %44 = call arm_aapcscc i32 @count_bit_noESC2(i32 %43)
  store i32 %44, i32* %12, align 4
  %45 = load i32, i32* %10, align 4
  %46 = load i32, i32* %12, align 4
  %47 = icmp sgt i32 %45, %46
  br i1 %47, label %48, label %51

; <label>:48:                                     ; preds = %39
  %49 = load i32, i32* %12, align 4
  store i32 %49, i32* %10, align 4
  %50 = load i32, i32* %11, align 4
  store i32 %50, i32* %9, align 4
  br label %51

; <label>:51:                                     ; preds = %48, %39
  br label %52

; <label>:52:                                     ; preds = %51, %27, %27
  %53 = load i32, i32* %11, align 4
  %54 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop19 = add <4 x i32> %54, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop19, <4 x i32>* %allocaVec9
  %55 = add nsw i32 %53, 1
  store i32 %55, i32* %11, align 4
  %56 = load i32, i32* %11, align 4
  %57 = call arm_aapcscc i32 @count_bit_noESC2(i32 %56)
  store i32 %57, i32* %12, align 4
  %58 = load i32, i32* %10, align 4
  %59 = load i32, i32* %12, align 4
  %60 = icmp sgt i32 %58, %59
  br i1 %60, label %61, label %64

; <label>:61:                                     ; preds = %52
  %62 = load i32, i32* %12, align 4
  store i32 %62, i32* %10, align 4
  %63 = load i32, i32* %11, align 4
  store i32 %63, i32* %9, align 4
  br label %64

; <label>:64:                                     ; preds = %61, %52
  br label %79

; <label>:65:                                     ; preds = %27
  %66 = load i32, i32* %11, align 4
  %67 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop20 = add <4 x i32> %67, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %Vop20, <4 x i32>* %allocaVec9
  %68 = add nsw i32 %66, 2
  store i32 %68, i32* %11, align 4
  %69 = load i32, i32* %11, align 4
  %70 = call arm_aapcscc i32 @count_bit_noESC2(i32 %69)
  store i32 %70, i32* %12, align 4
  %71 = load i32, i32* %10, align 4
  %72 = load i32, i32* %12, align 4
  %73 = icmp sgt i32 %71, %72
  br i1 %73, label %74, label %77

; <label>:74:                                     ; preds = %65
  %75 = load i32, i32* %12, align 4
  store i32 %75, i32* %10, align 4
  %76 = load i32, i32* %11, align 4
  store i32 %76, i32* %9, align 4
  br label %77

; <label>:77:                                     ; preds = %74, %65
  br label %79

; <label>:78:                                     ; preds = %27
  br label %79

; <label>:79:                                     ; preds = %78, %77, %64
  %80 = load i32, i32* %10, align 4
  %insertElmt21 = insertelement <4 x i32> undef, i32 %80, i32 0
  %insertElmt22 = insertelement <4 x i32> %insertElmt21, i32 %80, i32 1
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %80, i32 2
  %insertElmt24 = insertelement <4 x i32> %insertElmt23, i32 %80, i32 3
  store <4 x i32> %insertElmt24, <4 x i32>* %allocaVec8, align 16
  %81 = load i32*, i32** %7, align 4
  %82 = load i32, i32* %81, align 4
  %83 = add nsw i32 %82, %80
  store i32 %83, i32* %81, align 4
  br label %143

; <label>:84:                                     ; preds = %20
  %85 = load i32, i32* %8, align 4
  %insertElmt25 = insertelement <4 x i32> undef, i32 %85, i32 0
  %insertElmt26 = insertelement <4 x i32> %insertElmt25, i32 %85, i32 1
  %insertElmt27 = insertelement <4 x i32> %insertElmt26, i32 %85, i32 2
  %insertElmt28 = insertelement <4 x i32> %insertElmt27, i32 %85, i32 3
  store <4 x i32> %insertElmt28, <4 x i32>* %allocaVec6, align 16
  %86 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop29 = sub <4 x i32> %86, <i32 15, i32 15, i32 15, i32 15>
  store <4 x i32> %Vop29, <4 x i32>* %allocaVec6
  %87 = load <4 x i32>, <4 x i32>* %allocaVec6, align 4
  %extractE = extractelement <4 x i32> %87, i64 0
  %extractE30 = extractelement <4 x i32> %87, i64 1
  %extractE31 = extractelement <4 x i32> %87, i64 2
  %sum = add i32 %extractE, %extractE30
  %sum32 = add i32 %sum, %extractE31
  %88 = sub nsw i32 %85, 15
  %Fmul = mul i32 %88, 3
  store i32 %88, i32* %Recovery1
  %Fcmp = icmp ne i32 %sum32, %Fmul
  br i1 %Fcmp, label %89, label %93

; <label>:89:                                     ; preds = %84
  %remThree = sdiv i32 %sum32, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %90, label %91

; <label>:90:                                     ; preds = %89
  store i32 %88, i32* %Recovery1, align 4
  br label %92

; <label>:91:                                     ; preds = %89
  store i32 %extractE, i32* %Recovery1, align 4
  br label %92

; <label>:92:                                     ; preds = %91, %90
  br label %93

; <label>:93:                                     ; preds = %84, %92
  %ReplaceInst = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst, i32* %8, align 4
  store <4 x i32> <i32 24, i32 24, i32 24, i32 24>, <4 x i32>* %allocaVec9
  store i32 24, i32* %11, align 4
  br label %94

; <label>:94:                                     ; preds = %106, %93
  %95 = load i32, i32* %11, align 4
  %96 = icmp slt i32 %95, 32
  br i1 %96, label %97, label %110

; <label>:97:                                     ; preds = %94
  %98 = load i32, i32* %11, align 4
  %99 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %98
  %100 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %99, i32 0, i32 1
  %101 = load i32, i32* %100, align 4
  %102 = load i32, i32* %8, align 4
  %103 = icmp sge i32 %101, %102
  br i1 %103, label %104, label %105

; <label>:104:                                    ; preds = %97
  br label %110

; <label>:105:                                    ; preds = %97
  br label %106

; <label>:106:                                    ; preds = %105
  %107 = load i32, i32* %11, align 4
  %108 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop33 = add <4 x i32> %108, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop33, <4 x i32>* %allocaVec9
  %109 = add nsw i32 %107, 1
  store i32 %109, i32* %11, align 4
  br label %94

; <label>:110:                                    ; preds = %104, %94
  %111 = load i32, i32* %11, align 4
  %112 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop34 = sub <4 x i32> %112, <i32 8, i32 8, i32 8, i32 8>
  store <4 x i32> %Vop34, <4 x i32>* %allocaVec7
  %113 = sub nsw i32 %111, 8
  store i32 %113, i32* %9, align 4
  br label %114

; <label>:114:                                    ; preds = %135, %110
  %115 = load i32, i32* %9, align 4
  %116 = icmp slt i32 %115, 24
  br i1 %116, label %117, label %136

; <label>:117:                                    ; preds = %114
  %118 = load i32, i32* %9, align 4
  %119 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %118
  %120 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %119, i32 0, i32 1
  %121 = load i32, i32* %120, align 4
  %122 = load i32, i32* %8, align 4
  %123 = icmp sge i32 %121, %122
  br i1 %123, label %124, label %125

; <label>:124:                                    ; preds = %117
  br label %136

; <label>:125:                                    ; preds = %117
  br label %126

; <label>:126:                                    ; preds = %125
  %127 = load i32, i32* %9, align 4
  %128 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop35 = add <4 x i32> %128, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop35, <4 x i32>* %allocaVec7
  %129 = load <4 x i32>, <4 x i32>* %allocaVec7, align 4
  %extractE37 = extractelement <4 x i32> %129, i64 0
  %extractE38 = extractelement <4 x i32> %129, i64 1
  %extractE39 = extractelement <4 x i32> %129, i64 2
  %sum40 = add i32 %extractE37, %extractE38
  %sum41 = add i32 %sum40, %extractE39
  %130 = add nsw i32 %127, 1
  %Fmul36 = mul i32 %130, 3
  store i32 %130, i32* %Recovery2
  %Fcmp42 = icmp ne i32 %sum41, %Fmul36
  br i1 %Fcmp42, label %131, label %135

; <label>:131:                                    ; preds = %126
  %remThree43 = sdiv i32 %sum41, %extractE37
  %FcmpThree44 = icmp ne i32 %remThree43, 3
  br i1 %FcmpThree44, label %132, label %133

; <label>:132:                                    ; preds = %131
  store i32 %130, i32* %Recovery2, align 4
  br label %134

; <label>:133:                                    ; preds = %131
  store i32 %extractE37, i32* %Recovery2, align 4
  br label %134

; <label>:134:                                    ; preds = %133, %132
  br label %135

; <label>:135:                                    ; preds = %126, %134
  %ReplaceInst45 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst45, i32* %9, align 4
  br label %114

; <label>:136:                                    ; preds = %124, %114
  %137 = load i32*, i32** %5, align 4
  %138 = load i32*, i32** %6, align 4
  %139 = load i32, i32* %9, align 4
  %140 = load i32, i32* %11, align 4
  %141 = load i32*, i32** %7, align 4
  %142 = call arm_aapcscc i32 @count_bit_ESC(i32* %137, i32* %138, i32 %139, i32 %140, i32* %141)
  store i32 %142, i32* %9, align 4
  br label %143

; <label>:143:                                    ; preds = %136, %79
  %144 = load i32, i32* %9, align 4
  store i32 %144, i32* %4, align 4
  br label %145

; <label>:145:                                    ; preds = %143, %26, %18
  %146 = load i32, i32* %4, align 4
  ret i32 %146
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @ix_max(i32*, i32*) #0 {
  %3 = alloca i32*, align 4
  %4 = alloca i32*, align 4
  %allocaVec = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  store i32* %0, i32** %3, align 4
  store i32* %1, i32** %4, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec
  store i32 0, i32* %5, align 4
  br label %7

; <label>:7:                                      ; preds = %29, %2
  %8 = load i32*, i32** %3, align 4
  %9 = load i32*, i32** %4, align 4
  %10 = icmp ult i32* %8, %9
  br i1 %10, label %11, label %30

; <label>:11:                                     ; preds = %7
  %12 = load i32*, i32** %3, align 4
  %13 = getelementptr inbounds i32, i32* %12, i32 1
  store i32* %13, i32** %3, align 4
  %14 = load i32, i32* %12, align 4
  store i32 %14, i32* %6, align 4
  %15 = load i32, i32* %5, align 4
  %16 = load i32, i32* %6, align 4
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %18, label %20

; <label>:18:                                     ; preds = %11
  %19 = load i32, i32* %6, align 4
  store i32 %19, i32* %5, align 4
  br label %20

; <label>:20:                                     ; preds = %18, %11
  %21 = load i32*, i32** %3, align 4
  %22 = getelementptr inbounds i32, i32* %21, i32 1
  store i32* %22, i32** %3, align 4
  %23 = load i32, i32* %21, align 4
  store i32 %23, i32* %6, align 4
  %24 = load i32, i32* %5, align 4
  %25 = load i32, i32* %6, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %29

; <label>:27:                                     ; preds = %20
  %28 = load i32, i32* %6, align 4
  store i32 %28, i32* %5, align 4
  br label %29

; <label>:29:                                     ; preds = %27, %20
  br label %7

; <label>:30:                                     ; preds = %7
  %31 = load i32, i32* %5, align 4
  ret i32 %31
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @count_bit_noESC(i32*, i32*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %4 = alloca i32*, align 4
  %5 = alloca i32*, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 4
  %10 = alloca i32*, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  store i32* %0, i32** %4, align 4
  store i32* %1, i32** %5, align 4
  store i32 %2, i32* %6, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec3
  store i32 0, i32* %7, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec4
  store i32 0, i32* %8, align 4
  %13 = load i32, i32* %6, align 4
  %14 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %13
  %15 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %14, i32 0, i32 3
  %16 = load i8*, i8** %15, align 4
  store i8* %16, i8** %9, align 4
  store i32* getelementptr inbounds ([288 x i32], [288 x i32]* @cb_esc_buf, i32 0, i32 0), i32** %10, align 4
  br label %17

; <label>:17:                                     ; preds = %65, %3
  %18 = load i32*, i32** %4, align 4
  %19 = getelementptr inbounds i32, i32* %18, i32 1
  store i32* %19, i32** %4, align 4
  %20 = load i32, i32* %18, align 4
  store i32 %20, i32* %11, align 4
  %21 = load i32*, i32** %4, align 4
  %22 = getelementptr inbounds i32, i32* %21, i32 1
  store i32* %22, i32** %4, align 4
  %23 = load i32, i32* %21, align 4
  store i32 %23, i32* %12, align 4
  %24 = load i32, i32* %11, align 4
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %33

; <label>:26:                                     ; preds = %17
  %27 = load i32, i32* %8, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %27, i32 0
  %insertElmt7 = insertelement <4 x i32> %insertElmt, i32 %27, i32 1
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %27, i32 2
  %insertElmt9 = insertelement <4 x i32> %insertElmt8, i32 %27, i32 3
  store <4 x i32> %insertElmt9, <4 x i32>* %allocaVec4, align 16
  %28 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop = add <4 x i32> %28, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec4
  %29 = add nsw i32 %27, 1
  store i32 %29, i32* %8, align 4
  %30 = load i32, i32* %11, align 4
  %insertElmt10 = insertelement <4 x i32> undef, i32 %30, i32 0
  %insertElmt11 = insertelement <4 x i32> %insertElmt10, i32 %30, i32 1
  %insertElmt12 = insertelement <4 x i32> %insertElmt11, i32 %30, i32 2
  %insertElmt13 = insertelement <4 x i32> %insertElmt12, i32 %30, i32 3
  store <4 x i32> %insertElmt13, <4 x i32>* %allocaVec5, align 16
  %31 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop14 = mul <4 x i32> %31, <i32 16, i32 16, i32 16, i32 16>
  store <4 x i32> %Vop14, <4 x i32>* %allocaVec5
  %32 = mul nsw i32 %30, 16
  store i32 %32, i32* %11, align 4
  br label %33

; <label>:33:                                     ; preds = %26, %17
  %34 = load i32, i32* %12, align 4
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %51

; <label>:36:                                     ; preds = %33
  %37 = load i32, i32* %8, align 4
  %38 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop15 = add <4 x i32> %38, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop15, <4 x i32>* %allocaVec4
  %39 = add nsw i32 %37, 1
  store i32 %39, i32* %8, align 4
  %40 = load i32, i32* %12, align 4
  %insertElmt16 = insertelement <4 x i32> undef, i32 %40, i32 0
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %40, i32 1
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %40, i32 2
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %40, i32 3
  store <4 x i32> %insertElmt19, <4 x i32>* %allocaVec6, align 16
  %41 = load i32, i32* %11, align 4
  %42 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %43 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop20 = add <4 x i32> %42, %43
  store <4 x i32> %Vop20, <4 x i32>* %allocaVec5
  %44 = load <4 x i32>, <4 x i32>* %allocaVec5, align 4
  %extractE = extractelement <4 x i32> %44, i64 0
  %extractE21 = extractelement <4 x i32> %44, i64 1
  %extractE22 = extractelement <4 x i32> %44, i64 2
  %sum = add i32 %extractE, %extractE21
  %sum23 = add i32 %sum, %extractE22
  %45 = add nsw i32 %41, %40
  %Fmul = mul i32 %45, 3
  store i32 %45, i32* %Recovery
  %Fcmp = icmp ne i32 %sum23, %Fmul
  br i1 %Fcmp, label %46, label %50

; <label>:46:                                     ; preds = %36
  %remThree = sdiv i32 %sum23, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %47, label %48

; <label>:47:                                     ; preds = %46
  store i32 %45, i32* %Recovery, align 4
  br label %49

; <label>:48:                                     ; preds = %46
  store i32 %extractE, i32* %Recovery, align 4
  br label %49

; <label>:49:                                     ; preds = %48, %47
  br label %50

; <label>:50:                                     ; preds = %36, %49
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %11, align 4
  br label %51

; <label>:51:                                     ; preds = %50, %33
  %52 = load i32, i32* %11, align 4
  %53 = load i32*, i32** %10, align 4
  %54 = getelementptr inbounds i32, i32* %53, i32 1
  store i32* %54, i32** %10, align 4
  store i32 %52, i32* %53, align 4
  %55 = load i8*, i8** %9, align 4
  %56 = load i32, i32* %11, align 4
  %57 = getelementptr inbounds i8, i8* %55, i32 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = load i32, i32* %7, align 4
  %insertElmt24 = insertelement <4 x i32> undef, i32 %60, i32 0
  %insertElmt25 = insertelement <4 x i32> %insertElmt24, i32 %60, i32 1
  %insertElmt26 = insertelement <4 x i32> %insertElmt25, i32 %60, i32 2
  %insertElmt27 = insertelement <4 x i32> %insertElmt26, i32 %60, i32 3
  store <4 x i32> %insertElmt27, <4 x i32>* %allocaVec3, align 16
  %61 = load <4 x i32>, <4 x i32>* %allocaVec3, align 16
  store i32 %59, i32* %CastInst
  %62 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %62, i32 0
  %insertCast28 = insertelement <4 x i32> %insertCast, i32 %62, i32 1
  %insertCast29 = insertelement <4 x i32> %insertCast28, i32 %62, i32 2
  %insertCast30 = insertelement <4 x i32> %insertCast29, i32 %62, i32 3
  store <4 x i32> %insertCast30, <4 x i32>* %CastInstVec, align 4
  %63 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop31 = add <4 x i32> %61, %63
  store <4 x i32> %Vop31, <4 x i32>* %allocaVec3
  %64 = add nsw i32 %60, %59
  store i32 %64, i32* %7, align 4
  br label %65

; <label>:65:                                     ; preds = %51
  %66 = load i32*, i32** %4, align 4
  %67 = load i32*, i32** %5, align 4
  %68 = icmp ult i32* %66, %67
  br i1 %68, label %17, label %69

; <label>:69:                                     ; preds = %65
  %70 = load i32, i32* %8, align 4
  store i32 %70, i32* @cb_esc_sign, align 4
  %71 = load i32*, i32** %10, align 4
  store i32* %71, i32** @cb_esc_end, align 4
  %72 = load i32, i32* %7, align 4
  %73 = load i32, i32* %8, align 4
  %74 = load <4 x i32>, <4 x i32>* %allocaVec3, align 16
  %75 = load <4 x i32>, <4 x i32>* %allocaVec4, align 16
  %Vop32 = add <4 x i32> %74, %75
  %76 = add nsw i32 %72, %73
  ret i32 %76
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @count_bit_noESC2(i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec2 = alloca <4 x i32>, align 16
  %2 = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %4 = alloca i32*, align 4
  store i32 %0, i32* %2, align 4
  %5 = load i32, i32* @cb_esc_sign, align 4
  store i32 %5, i32* %3, align 4
  store i32* getelementptr inbounds ([288 x i32], [288 x i32]* @cb_esc_buf, i32 0, i32 0), i32** %4, align 4
  br label %6

; <label>:6:                                      ; preds = %28, %1
  %7 = load i32, i32* %2, align 4
  %8 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %7
  %9 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %8, i32 0, i32 3
  %10 = load i8*, i8** %9, align 4
  %11 = load i32*, i32** %4, align 4
  %12 = getelementptr inbounds i32, i32* %11, i32 1
  store i32* %12, i32** %4, align 4
  %13 = load i32, i32* %11, align 4
  %14 = getelementptr inbounds i8, i8* %10, i32 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = load i32, i32* %3, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %17, i32 0
  %insertElmt4 = insertelement <4 x i32> %insertElmt, i32 %17, i32 1
  %insertElmt5 = insertelement <4 x i32> %insertElmt4, i32 %17, i32 2
  %insertElmt6 = insertelement <4 x i32> %insertElmt5, i32 %17, i32 3
  store <4 x i32> %insertElmt6, <4 x i32>* %allocaVec3, align 16
  %18 = load <4 x i32>, <4 x i32>* %allocaVec3, align 16
  store i32 %16, i32* %CastInst
  %19 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %19, i32 0
  %insertCast7 = insertelement <4 x i32> %insertCast, i32 %19, i32 1
  %insertCast8 = insertelement <4 x i32> %insertCast7, i32 %19, i32 2
  %insertCast9 = insertelement <4 x i32> %insertCast8, i32 %19, i32 3
  store <4 x i32> %insertCast9, <4 x i32>* %CastInstVec, align 4
  %20 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop = add <4 x i32> %18, %20
  store <4 x i32> %Vop, <4 x i32>* %allocaVec3
  %21 = load <4 x i32>, <4 x i32>* %allocaVec3, align 4
  %extractE = extractelement <4 x i32> %21, i64 0
  %extractE10 = extractelement <4 x i32> %21, i64 1
  %extractE11 = extractelement <4 x i32> %21, i64 2
  %sum = add i32 %extractE, %extractE10
  %sum12 = add i32 %sum, %extractE11
  %22 = add nsw i32 %17, %16
  %Fmul = mul i32 %22, 3
  store i32 %22, i32* %Recovery
  %Fcmp = icmp ne i32 %sum12, %Fmul
  br i1 %Fcmp, label %23, label %27

; <label>:23:                                     ; preds = %6
  %remThree = sdiv i32 %sum12, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %24, label %25

; <label>:24:                                     ; preds = %23
  store i32 %22, i32* %Recovery, align 4
  br label %26

; <label>:25:                                     ; preds = %23
  store i32 %extractE, i32* %Recovery, align 4
  br label %26

; <label>:26:                                     ; preds = %25, %24
  br label %27

; <label>:27:                                     ; preds = %6, %26
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %3, align 4
  br label %28

; <label>:28:                                     ; preds = %27
  %29 = load i32*, i32** %4, align 4
  %30 = load i32*, i32** @cb_esc_end, align 4
  %31 = icmp ult i32* %29, %30
  br i1 %31, label %6, label %32

; <label>:32:                                     ; preds = %28
  %33 = load i32, i32* %3, align 4
  ret i32 %33
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @count_bit_ESC(i32*, i32*, i32, i32, i32*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec8 = alloca <4 x i32>, align 16
  %CastInst3 = alloca i32, align 4
  %CastInstVec4 = alloca <4 x i32>, align 16
  %6 = alloca i32*, align 4
  %7 = alloca i32*, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %allocaVec14 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %17 = alloca i32, align 4
  store i32* %0, i32** %6, align 4
  store i32* %1, i32** %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32* %4, i32** %10, align 4
  %18 = load i32, i32* %8, align 4
  %19 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %18
  %20 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %19, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %11, align 4
  %22 = load i32, i32* %9, align 4
  %23 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %22
  %24 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %23, i32 0, i32 0
  %25 = load i32, i32* %24, align 4
  store i32 %25, i32* %12, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec13
  store i32 0, i32* %13, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec14
  store i32 0, i32* %14, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %15, align 4
  br label %26

; <label>:26:                                     ; preds = %118, %5
  %27 = load i32*, i32** %6, align 4
  %28 = load i32*, i32** %7, align 4
  %29 = icmp ult i32* %27, %28
  br i1 %29, label %30, label %119

; <label>:30:                                     ; preds = %26
  %31 = load i32*, i32** %6, align 4
  %32 = getelementptr inbounds i32, i32* %31, i32 1
  store i32* %32, i32** %6, align 4
  %33 = load i32, i32* %31, align 4
  store i32 %33, i32* %16, align 4
  %34 = load i32*, i32** %6, align 4
  %35 = getelementptr inbounds i32, i32* %34, i32 1
  store i32* %35, i32** %6, align 4
  %36 = load i32, i32* %34, align 4
  store i32 %36, i32* %17, align 4
  %37 = load i32, i32* %16, align 4
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %60

; <label>:39:                                     ; preds = %30
  %40 = load i32, i32* %13, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %40, i32 0
  %insertElmt18 = insertelement <4 x i32> %insertElmt, i32 %40, i32 1
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %40, i32 2
  %insertElmt20 = insertelement <4 x i32> %insertElmt19, i32 %40, i32 3
  store <4 x i32> %insertElmt20, <4 x i32>* %allocaVec13, align 16
  %41 = load <4 x i32>, <4 x i32>* %allocaVec13, align 16
  %Vop = add <4 x i32> %41, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec13
  %42 = add nsw i32 %40, 1
  store i32 %42, i32* %13, align 4
  %43 = load i32, i32* %16, align 4
  %44 = icmp sgt i32 %43, 14
  br i1 %44, label %45, label %56

; <label>:45:                                     ; preds = %39
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %allocaVec16
  store i32 15, i32* %16, align 4
  %46 = load i32, i32* %11, align 4
  %insertElmt21 = insertelement <4 x i32> undef, i32 %46, i32 0
  %insertElmt22 = insertelement <4 x i32> %insertElmt21, i32 %46, i32 1
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %46, i32 2
  %insertElmt24 = insertelement <4 x i32> %insertElmt23, i32 %46, i32 3
  store <4 x i32> %insertElmt24, <4 x i32>* %allocaVec11, align 16
  %47 = load i32, i32* %14, align 4
  %insertElmt25 = insertelement <4 x i32> undef, i32 %47, i32 0
  %insertElmt26 = insertelement <4 x i32> %insertElmt25, i32 %47, i32 1
  %insertElmt27 = insertelement <4 x i32> %insertElmt26, i32 %47, i32 2
  %insertElmt28 = insertelement <4 x i32> %insertElmt27, i32 %47, i32 3
  store <4 x i32> %insertElmt28, <4 x i32>* %allocaVec14, align 16
  %48 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %49 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop29 = add <4 x i32> %48, %49
  store <4 x i32> %Vop29, <4 x i32>* %allocaVec14
  %50 = add nsw i32 %47, %46
  store i32 %50, i32* %14, align 4
  %51 = load i32, i32* %12, align 4
  %insertElmt30 = insertelement <4 x i32> undef, i32 %51, i32 0
  %insertElmt31 = insertelement <4 x i32> %insertElmt30, i32 %51, i32 1
  %insertElmt32 = insertelement <4 x i32> %insertElmt31, i32 %51, i32 2
  %insertElmt33 = insertelement <4 x i32> %insertElmt32, i32 %51, i32 3
  store <4 x i32> %insertElmt33, <4 x i32>* %allocaVec12, align 16
  %52 = load i32, i32* %15, align 4
  %insertElmt34 = insertelement <4 x i32> undef, i32 %52, i32 0
  %insertElmt35 = insertelement <4 x i32> %insertElmt34, i32 %52, i32 1
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %52, i32 2
  %insertElmt37 = insertelement <4 x i32> %insertElmt36, i32 %52, i32 3
  store <4 x i32> %insertElmt37, <4 x i32>* %allocaVec15, align 16
  %53 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %54 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop38 = add <4 x i32> %53, %54
  store <4 x i32> %Vop38, <4 x i32>* %allocaVec15
  %55 = add nsw i32 %52, %51
  store i32 %55, i32* %15, align 4
  br label %56

; <label>:56:                                     ; preds = %45, %39
  %57 = load i32, i32* %16, align 4
  %insertElmt39 = insertelement <4 x i32> undef, i32 %57, i32 0
  %insertElmt40 = insertelement <4 x i32> %insertElmt39, i32 %57, i32 1
  %insertElmt41 = insertelement <4 x i32> %insertElmt40, i32 %57, i32 2
  %insertElmt42 = insertelement <4 x i32> %insertElmt41, i32 %57, i32 3
  store <4 x i32> %insertElmt42, <4 x i32>* %allocaVec16, align 16
  %58 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop43 = mul <4 x i32> %58, <i32 16, i32 16, i32 16, i32 16>
  store <4 x i32> %Vop43, <4 x i32>* %allocaVec16
  %59 = mul nsw i32 %57, 16
  store i32 %59, i32* %16, align 4
  br label %60

; <label>:60:                                     ; preds = %56, %30
  %61 = load i32, i32* %17, align 4
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %63, label %92

; <label>:63:                                     ; preds = %60
  %64 = load i32, i32* %13, align 4
  %65 = load <4 x i32>, <4 x i32>* %allocaVec13, align 16
  %Vop44 = add <4 x i32> %65, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop44, <4 x i32>* %allocaVec13
  %66 = add nsw i32 %64, 1
  store i32 %66, i32* %13, align 4
  %67 = load i32, i32* %17, align 4
  %68 = icmp sgt i32 %67, 14
  br i1 %68, label %69, label %80

; <label>:69:                                     ; preds = %63
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %allocaVec17
  store i32 15, i32* %17, align 4
  %70 = load i32, i32* %11, align 4
  %insertElmt45 = insertelement <4 x i32> undef, i32 %70, i32 0
  %insertElmt46 = insertelement <4 x i32> %insertElmt45, i32 %70, i32 1
  %insertElmt47 = insertelement <4 x i32> %insertElmt46, i32 %70, i32 2
  %insertElmt48 = insertelement <4 x i32> %insertElmt47, i32 %70, i32 3
  store <4 x i32> %insertElmt48, <4 x i32>* %allocaVec11, align 16
  %71 = load i32, i32* %14, align 4
  %72 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %73 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop49 = add <4 x i32> %72, %73
  store <4 x i32> %Vop49, <4 x i32>* %allocaVec14
  %74 = add nsw i32 %71, %70
  store i32 %74, i32* %14, align 4
  %75 = load i32, i32* %12, align 4
  %insertElmt50 = insertelement <4 x i32> undef, i32 %75, i32 0
  %insertElmt51 = insertelement <4 x i32> %insertElmt50, i32 %75, i32 1
  %insertElmt52 = insertelement <4 x i32> %insertElmt51, i32 %75, i32 2
  %insertElmt53 = insertelement <4 x i32> %insertElmt52, i32 %75, i32 3
  store <4 x i32> %insertElmt53, <4 x i32>* %allocaVec12, align 16
  %76 = load i32, i32* %15, align 4
  %77 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %78 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop54 = add <4 x i32> %77, %78
  store <4 x i32> %Vop54, <4 x i32>* %allocaVec15
  %79 = add nsw i32 %76, %75
  store i32 %79, i32* %15, align 4
  br label %80

; <label>:80:                                     ; preds = %69, %63
  %81 = load i32, i32* %17, align 4
  %insertElmt55 = insertelement <4 x i32> undef, i32 %81, i32 0
  %insertElmt56 = insertelement <4 x i32> %insertElmt55, i32 %81, i32 1
  %insertElmt57 = insertelement <4 x i32> %insertElmt56, i32 %81, i32 2
  %insertElmt58 = insertelement <4 x i32> %insertElmt57, i32 %81, i32 3
  store <4 x i32> %insertElmt58, <4 x i32>* %allocaVec17, align 16
  %82 = load i32, i32* %16, align 4
  %83 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %84 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop59 = add <4 x i32> %83, %84
  store <4 x i32> %Vop59, <4 x i32>* %allocaVec16
  %85 = load <4 x i32>, <4 x i32>* %allocaVec16, align 4
  %extractE = extractelement <4 x i32> %85, i64 0
  %extractE60 = extractelement <4 x i32> %85, i64 1
  %extractE61 = extractelement <4 x i32> %85, i64 2
  %sum = add i32 %extractE, %extractE60
  %sum62 = add i32 %sum, %extractE61
  %86 = add nsw i32 %82, %81
  %Fmul = mul i32 %86, 3
  store i32 %86, i32* %Recovery
  %Fcmp = icmp ne i32 %sum62, %Fmul
  br i1 %Fcmp, label %87, label %91

; <label>:87:                                     ; preds = %80
  %remThree = sdiv i32 %sum62, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %88, label %89

; <label>:88:                                     ; preds = %87
  store i32 %86, i32* %Recovery, align 4
  br label %90

; <label>:89:                                     ; preds = %87
  store i32 %extractE, i32* %Recovery, align 4
  br label %90

; <label>:90:                                     ; preds = %89, %88
  br label %91

; <label>:91:                                     ; preds = %80, %90
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %16, align 4
  br label %92

; <label>:92:                                     ; preds = %91, %60
  %93 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 16, i32 3), align 4
  %94 = load i32, i32* %16, align 4
  %95 = getelementptr inbounds i8, i8* %93, i32 %94
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = load i32, i32* %14, align 4
  %99 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  store i32 %97, i32* %CastInst
  %100 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %100, i32 0
  %insertCast63 = insertelement <4 x i32> %insertCast, i32 %100, i32 1
  %insertCast64 = insertelement <4 x i32> %insertCast63, i32 %100, i32 2
  %insertCast65 = insertelement <4 x i32> %insertCast64, i32 %100, i32 3
  store <4 x i32> %insertCast65, <4 x i32>* %CastInstVec, align 4
  %101 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop66 = add <4 x i32> %99, %101
  store <4 x i32> %Vop66, <4 x i32>* %allocaVec14
  %102 = add nsw i32 %98, %97
  store i32 %102, i32* %14, align 4
  %103 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 24, i32 3), align 4
  %104 = load i32, i32* %16, align 4
  %105 = getelementptr inbounds i8, i8* %103, i32 %104
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = load i32, i32* %15, align 4
  %109 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  store i32 %107, i32* %CastInst3
  %110 = load i32, i32* %CastInst3, align 4
  %insertCast67 = insertelement <4 x i32> undef, i32 %110, i32 0
  %insertCast68 = insertelement <4 x i32> %insertCast67, i32 %110, i32 1
  %insertCast69 = insertelement <4 x i32> %insertCast68, i32 %110, i32 2
  %insertCast70 = insertelement <4 x i32> %insertCast69, i32 %110, i32 3
  store <4 x i32> %insertCast70, <4 x i32>* %CastInstVec4, align 4
  %111 = load <4 x i32>, <4 x i32>* %CastInstVec4, align 4
  %Vop71 = add <4 x i32> %109, %111
  store <4 x i32> %Vop71, <4 x i32>* %allocaVec15
  %112 = load <4 x i32>, <4 x i32>* %allocaVec15, align 4
  %extractE73 = extractelement <4 x i32> %112, i64 0
  %extractE74 = extractelement <4 x i32> %112, i64 1
  %extractE75 = extractelement <4 x i32> %112, i64 2
  %sum76 = add i32 %extractE73, %extractE74
  %sum77 = add i32 %sum76, %extractE75
  %113 = add nsw i32 %108, %107
  %Fmul72 = mul i32 %113, 3
  store i32 %113, i32* %Recovery1
  %Fcmp78 = icmp ne i32 %sum77, %Fmul72
  br i1 %Fcmp78, label %114, label %118

; <label>:114:                                    ; preds = %92
  %remThree80 = sdiv i32 %sum77, %extractE73
  %FcmpThree81 = icmp ne i32 %remThree80, 3
  br i1 %FcmpThree81, label %115, label %116

; <label>:115:                                    ; preds = %114
  store i32 %113, i32* %Recovery1, align 4
  br label %117

; <label>:116:                                    ; preds = %114
  store i32 %extractE73, i32* %Recovery1, align 4
  br label %117

; <label>:117:                                    ; preds = %116, %115
  br label %118

; <label>:118:                                    ; preds = %92, %117
  %ReplaceInst82 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst82, i32* %15, align 4
  br label %26

; <label>:119:                                    ; preds = %26
  %120 = load i32, i32* %14, align 4
  %121 = load i32, i32* %15, align 4
  %122 = icmp sgt i32 %120, %121
  br i1 %122, label %123, label %126

; <label>:123:                                    ; preds = %119
  %124 = load i32, i32* %15, align 4
  store i32 %124, i32* %14, align 4
  %125 = load i32, i32* %9, align 4
  store i32 %125, i32* %8, align 4
  br label %126

; <label>:126:                                    ; preds = %123, %119
  %127 = load i32, i32* %13, align 4
  %128 = load i32, i32* %14, align 4
  %129 = load <4 x i32>, <4 x i32>* %allocaVec13, align 16
  %130 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %Vop79 = add <4 x i32> %129, %130
  %131 = add nsw i32 %127, %128
  %132 = load i32*, i32** %10, align 4
  %133 = load i32, i32* %132, align 4
  %134 = add nsw i32 %133, %131
  store i32 %134, i32* %132, align 4
  %135 = load i32, i32* %8, align 4
  ret i32 %135
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @count_bit_short_noESC(i32*, i32*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %4 = alloca i32*, align 4
  %5 = alloca i32*, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 4
  %10 = alloca i32*, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  store i32* %0, i32** %4, align 4
  store i32* %1, i32** %5, align 4
  store i32 %2, i32* %6, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec5
  store i32 0, i32* %7, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec6
  store i32 0, i32* %8, align 4
  %14 = load i32, i32* %6, align 4
  %15 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %14
  %16 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %15, i32 0, i32 3
  %17 = load i8*, i8** %16, align 4
  store i8* %17, i8** %9, align 4
  store i32* getelementptr inbounds ([288 x i32], [288 x i32]* @cb_esc_buf, i32 0, i32 0), i32** %10, align 4
  br label %18

; <label>:18:                                     ; preds = %83, %3
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec7
  store i32 0, i32* %11, align 4
  br label %19

; <label>:19:                                     ; preds = %79, %18
  %20 = load i32, i32* %11, align 4
  %21 = icmp slt i32 %20, 3
  br i1 %21, label %22, label %80

; <label>:22:                                     ; preds = %19
  %23 = load i32*, i32** %4, align 4
  %24 = getelementptr inbounds i32, i32* %23, i32 3
  %25 = load i32, i32* %24, align 4
  store i32 %25, i32* %12, align 4
  %26 = load i32*, i32** %4, align 4
  %27 = getelementptr inbounds i32, i32* %26, i32 1
  store i32* %27, i32** %4, align 4
  %28 = load i32, i32* %26, align 4
  store i32 %28, i32* %13, align 4
  %29 = load i32, i32* %13, align 4
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %38

; <label>:31:                                     ; preds = %22
  %32 = load i32, i32* %8, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %32, i32 0
  %insertElmt10 = insertelement <4 x i32> %insertElmt, i32 %32, i32 1
  %insertElmt11 = insertelement <4 x i32> %insertElmt10, i32 %32, i32 2
  %insertElmt12 = insertelement <4 x i32> %insertElmt11, i32 %32, i32 3
  store <4 x i32> %insertElmt12, <4 x i32>* %allocaVec6, align 16
  %33 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop = add <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec6
  %34 = add nsw i32 %32, 1
  store i32 %34, i32* %8, align 4
  %35 = load i32, i32* %13, align 4
  %insertElmt13 = insertelement <4 x i32> undef, i32 %35, i32 0
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %35, i32 1
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %35, i32 2
  %insertElmt16 = insertelement <4 x i32> %insertElmt15, i32 %35, i32 3
  store <4 x i32> %insertElmt16, <4 x i32>* %allocaVec9, align 16
  %36 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop17 = mul <4 x i32> %36, <i32 16, i32 16, i32 16, i32 16>
  store <4 x i32> %Vop17, <4 x i32>* %allocaVec9
  %37 = mul nsw i32 %35, 16
  store i32 %37, i32* %13, align 4
  br label %38

; <label>:38:                                     ; preds = %31, %22
  %39 = load i32, i32* %12, align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %56

; <label>:41:                                     ; preds = %38
  %42 = load i32, i32* %8, align 4
  %43 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop18 = add <4 x i32> %43, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop18, <4 x i32>* %allocaVec6
  %44 = add nsw i32 %42, 1
  store i32 %44, i32* %8, align 4
  %45 = load i32, i32* %12, align 4
  %insertElmt19 = insertelement <4 x i32> undef, i32 %45, i32 0
  %insertElmt20 = insertelement <4 x i32> %insertElmt19, i32 %45, i32 1
  %insertElmt21 = insertelement <4 x i32> %insertElmt20, i32 %45, i32 2
  %insertElmt22 = insertelement <4 x i32> %insertElmt21, i32 %45, i32 3
  store <4 x i32> %insertElmt22, <4 x i32>* %allocaVec8, align 16
  %46 = load i32, i32* %13, align 4
  %47 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %48 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %Vop23 = add <4 x i32> %47, %48
  store <4 x i32> %Vop23, <4 x i32>* %allocaVec9
  %49 = load <4 x i32>, <4 x i32>* %allocaVec9, align 4
  %extractE = extractelement <4 x i32> %49, i64 0
  %extractE24 = extractelement <4 x i32> %49, i64 1
  %extractE25 = extractelement <4 x i32> %49, i64 2
  %sum = add i32 %extractE, %extractE24
  %sum26 = add i32 %sum, %extractE25
  %50 = add nsw i32 %46, %45
  %Fmul = mul i32 %50, 3
  store i32 %50, i32* %Recovery
  %Fcmp = icmp ne i32 %sum26, %Fmul
  br i1 %Fcmp, label %51, label %55

; <label>:51:                                     ; preds = %41
  %remThree = sdiv i32 %sum26, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %52, label %53

; <label>:52:                                     ; preds = %51
  store i32 %50, i32* %Recovery, align 4
  br label %54

; <label>:53:                                     ; preds = %51
  store i32 %extractE, i32* %Recovery, align 4
  br label %54

; <label>:54:                                     ; preds = %53, %52
  br label %55

; <label>:55:                                     ; preds = %41, %54
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %13, align 4
  br label %56

; <label>:56:                                     ; preds = %55, %38
  %57 = load i32, i32* %13, align 4
  %58 = load i32*, i32** %10, align 4
  %59 = getelementptr inbounds i32, i32* %58, i32 1
  store i32* %59, i32** %10, align 4
  store i32 %57, i32* %58, align 4
  %60 = load i8*, i8** %9, align 4
  %61 = load i32, i32* %13, align 4
  %62 = getelementptr inbounds i8, i8* %60, i32 %61
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = load i32, i32* %7, align 4
  %insertElmt27 = insertelement <4 x i32> undef, i32 %65, i32 0
  %insertElmt28 = insertelement <4 x i32> %insertElmt27, i32 %65, i32 1
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %65, i32 2
  %insertElmt30 = insertelement <4 x i32> %insertElmt29, i32 %65, i32 3
  store <4 x i32> %insertElmt30, <4 x i32>* %allocaVec5, align 16
  %66 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  store i32 %64, i32* %CastInst
  %67 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %67, i32 0
  %insertCast31 = insertelement <4 x i32> %insertCast, i32 %67, i32 1
  %insertCast32 = insertelement <4 x i32> %insertCast31, i32 %67, i32 2
  %insertCast33 = insertelement <4 x i32> %insertCast32, i32 %67, i32 3
  store <4 x i32> %insertCast33, <4 x i32>* %CastInstVec, align 4
  %68 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop34 = add <4 x i32> %66, %68
  store <4 x i32> %Vop34, <4 x i32>* %allocaVec5
  %69 = add nsw i32 %65, %64
  store i32 %69, i32* %7, align 4
  br label %70

; <label>:70:                                     ; preds = %56
  %71 = load i32, i32* %11, align 4
  %insertElmt35 = insertelement <4 x i32> undef, i32 %71, i32 0
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %71, i32 1
  %insertElmt37 = insertelement <4 x i32> %insertElmt36, i32 %71, i32 2
  %insertElmt38 = insertelement <4 x i32> %insertElmt37, i32 %71, i32 3
  store <4 x i32> %insertElmt38, <4 x i32>* %allocaVec7, align 16
  %72 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop39 = add <4 x i32> %72, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop39, <4 x i32>* %allocaVec7
  %73 = load <4 x i32>, <4 x i32>* %allocaVec7, align 4
  %extractE41 = extractelement <4 x i32> %73, i64 0
  %extractE42 = extractelement <4 x i32> %73, i64 1
  %extractE43 = extractelement <4 x i32> %73, i64 2
  %sum44 = add i32 %extractE41, %extractE42
  %sum45 = add i32 %sum44, %extractE43
  %74 = add nsw i32 %71, 1
  %Fmul40 = mul i32 %74, 3
  store i32 %74, i32* %Recovery1
  %Fcmp46 = icmp ne i32 %sum45, %Fmul40
  br i1 %Fcmp46, label %75, label %79

; <label>:75:                                     ; preds = %70
  %remThree48 = sdiv i32 %sum45, %extractE41
  %FcmpThree49 = icmp ne i32 %remThree48, 3
  br i1 %FcmpThree49, label %76, label %77

; <label>:76:                                     ; preds = %75
  store i32 %74, i32* %Recovery1, align 4
  br label %78

; <label>:77:                                     ; preds = %75
  store i32 %extractE41, i32* %Recovery1, align 4
  br label %78

; <label>:78:                                     ; preds = %77, %76
  br label %79

; <label>:79:                                     ; preds = %70, %78
  %ReplaceInst50 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst50, i32* %11, align 4
  br label %19

; <label>:80:                                     ; preds = %19
  %81 = load i32*, i32** %4, align 4
  %82 = getelementptr inbounds i32, i32* %81, i32 3
  store i32* %82, i32** %4, align 4
  br label %83

; <label>:83:                                     ; preds = %80
  %84 = load i32*, i32** %4, align 4
  %85 = load i32*, i32** %5, align 4
  %86 = icmp ult i32* %84, %85
  br i1 %86, label %18, label %87

; <label>:87:                                     ; preds = %83
  %88 = load i32, i32* %8, align 4
  store i32 %88, i32* @cb_esc_sign, align 4
  %89 = load i32*, i32** %10, align 4
  store i32* %89, i32** @cb_esc_end, align 4
  %90 = load i32, i32* %7, align 4
  %91 = load i32, i32* %8, align 4
  %92 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %93 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop47 = add <4 x i32> %92, %93
  %94 = add nsw i32 %90, %91
  ret i32 %94
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @count_bit_short_ESC(i32*, i32*, i32, i32, i32*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec10 = alloca <4 x i32>, align 16
  %CastInst4 = alloca i32, align 4
  %CastInstVec5 = alloca <4 x i32>, align 16
  %6 = alloca i32*, align 4
  %7 = alloca i32*, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec14 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %allocaVec18 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %allocaVec19 = alloca <4 x i32>, align 16
  %17 = alloca i32, align 4
  %allocaVec20 = alloca <4 x i32>, align 16
  %18 = alloca i32, align 4
  store i32* %0, i32** %6, align 4
  store i32* %1, i32** %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32* %4, i32** %10, align 4
  %19 = load i32, i32* %8, align 4
  %20 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %19
  %21 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %20, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  store i32 %22, i32* %11, align 4
  %23 = load i32, i32* %9, align 4
  %24 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %23
  %25 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  store i32 %26, i32* %12, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %13, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %14, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec17
  store i32 0, i32* %15, align 4
  br label %27

; <label>:27:                                     ; preds = %133, %5
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec18
  store i32 0, i32* %16, align 4
  br label %28

; <label>:28:                                     ; preds = %129, %27
  %29 = load i32, i32* %16, align 4
  %30 = icmp slt i32 %29, 3
  br i1 %30, label %31, label %130

; <label>:31:                                     ; preds = %28
  %32 = load i32*, i32** %6, align 4
  %33 = getelementptr inbounds i32, i32* %32, i32 3
  %34 = load i32, i32* %33, align 4
  store i32 %34, i32* %17, align 4
  %35 = load i32*, i32** %6, align 4
  %36 = getelementptr inbounds i32, i32* %35, i32 1
  store i32* %36, i32** %6, align 4
  %37 = load i32, i32* %35, align 4
  store i32 %37, i32* %18, align 4
  %38 = load i32, i32* %18, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %61

; <label>:40:                                     ; preds = %31
  %41 = load i32, i32* %13, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %41, i32 0
  %insertElmt21 = insertelement <4 x i32> %insertElmt, i32 %41, i32 1
  %insertElmt22 = insertelement <4 x i32> %insertElmt21, i32 %41, i32 2
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %41, i32 3
  store <4 x i32> %insertElmt23, <4 x i32>* %allocaVec15, align 16
  %42 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop = add <4 x i32> %42, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec15
  %43 = add nsw i32 %41, 1
  store i32 %43, i32* %13, align 4
  %44 = load i32, i32* %18, align 4
  %45 = icmp sgt i32 %44, 14
  br i1 %45, label %46, label %57

; <label>:46:                                     ; preds = %40
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %allocaVec20
  store i32 15, i32* %18, align 4
  %47 = load i32, i32* %11, align 4
  %insertElmt24 = insertelement <4 x i32> undef, i32 %47, i32 0
  %insertElmt25 = insertelement <4 x i32> %insertElmt24, i32 %47, i32 1
  %insertElmt26 = insertelement <4 x i32> %insertElmt25, i32 %47, i32 2
  %insertElmt27 = insertelement <4 x i32> %insertElmt26, i32 %47, i32 3
  store <4 x i32> %insertElmt27, <4 x i32>* %allocaVec13, align 16
  %48 = load i32, i32* %14, align 4
  %insertElmt28 = insertelement <4 x i32> undef, i32 %48, i32 0
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %48, i32 1
  %insertElmt30 = insertelement <4 x i32> %insertElmt29, i32 %48, i32 2
  %insertElmt31 = insertelement <4 x i32> %insertElmt30, i32 %48, i32 3
  store <4 x i32> %insertElmt31, <4 x i32>* %allocaVec16, align 16
  %49 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %50 = load <4 x i32>, <4 x i32>* %allocaVec13, align 16
  %Vop32 = add <4 x i32> %49, %50
  store <4 x i32> %Vop32, <4 x i32>* %allocaVec16
  %51 = add nsw i32 %48, %47
  store i32 %51, i32* %14, align 4
  %52 = load i32, i32* %12, align 4
  %insertElmt33 = insertelement <4 x i32> undef, i32 %52, i32 0
  %insertElmt34 = insertelement <4 x i32> %insertElmt33, i32 %52, i32 1
  %insertElmt35 = insertelement <4 x i32> %insertElmt34, i32 %52, i32 2
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %52, i32 3
  store <4 x i32> %insertElmt36, <4 x i32>* %allocaVec14, align 16
  %53 = load i32, i32* %15, align 4
  %insertElmt37 = insertelement <4 x i32> undef, i32 %53, i32 0
  %insertElmt38 = insertelement <4 x i32> %insertElmt37, i32 %53, i32 1
  %insertElmt39 = insertelement <4 x i32> %insertElmt38, i32 %53, i32 2
  %insertElmt40 = insertelement <4 x i32> %insertElmt39, i32 %53, i32 3
  store <4 x i32> %insertElmt40, <4 x i32>* %allocaVec17, align 16
  %54 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %55 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %Vop41 = add <4 x i32> %54, %55
  store <4 x i32> %Vop41, <4 x i32>* %allocaVec17
  %56 = add nsw i32 %53, %52
  store i32 %56, i32* %15, align 4
  br label %57

; <label>:57:                                     ; preds = %46, %40
  %58 = load i32, i32* %18, align 4
  %insertElmt42 = insertelement <4 x i32> undef, i32 %58, i32 0
  %insertElmt43 = insertelement <4 x i32> %insertElmt42, i32 %58, i32 1
  %insertElmt44 = insertelement <4 x i32> %insertElmt43, i32 %58, i32 2
  %insertElmt45 = insertelement <4 x i32> %insertElmt44, i32 %58, i32 3
  store <4 x i32> %insertElmt45, <4 x i32>* %allocaVec20, align 16
  %59 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop46 = mul <4 x i32> %59, <i32 16, i32 16, i32 16, i32 16>
  store <4 x i32> %Vop46, <4 x i32>* %allocaVec20
  %60 = mul nsw i32 %58, 16
  store i32 %60, i32* %18, align 4
  br label %61

; <label>:61:                                     ; preds = %57, %31
  %62 = load i32, i32* %17, align 4
  %63 = icmp ne i32 %62, 0
  br i1 %63, label %64, label %93

; <label>:64:                                     ; preds = %61
  %65 = load i32, i32* %13, align 4
  %66 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop47 = add <4 x i32> %66, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop47, <4 x i32>* %allocaVec15
  %67 = add nsw i32 %65, 1
  store i32 %67, i32* %13, align 4
  %68 = load i32, i32* %17, align 4
  %69 = icmp sgt i32 %68, 14
  br i1 %69, label %70, label %81

; <label>:70:                                     ; preds = %64
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %allocaVec19
  store i32 15, i32* %17, align 4
  %71 = load i32, i32* %11, align 4
  %insertElmt48 = insertelement <4 x i32> undef, i32 %71, i32 0
  %insertElmt49 = insertelement <4 x i32> %insertElmt48, i32 %71, i32 1
  %insertElmt50 = insertelement <4 x i32> %insertElmt49, i32 %71, i32 2
  %insertElmt51 = insertelement <4 x i32> %insertElmt50, i32 %71, i32 3
  store <4 x i32> %insertElmt51, <4 x i32>* %allocaVec13, align 16
  %72 = load i32, i32* %14, align 4
  %73 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %74 = load <4 x i32>, <4 x i32>* %allocaVec13, align 16
  %Vop52 = add <4 x i32> %73, %74
  store <4 x i32> %Vop52, <4 x i32>* %allocaVec16
  %75 = add nsw i32 %72, %71
  store i32 %75, i32* %14, align 4
  %76 = load i32, i32* %12, align 4
  %insertElmt53 = insertelement <4 x i32> undef, i32 %76, i32 0
  %insertElmt54 = insertelement <4 x i32> %insertElmt53, i32 %76, i32 1
  %insertElmt55 = insertelement <4 x i32> %insertElmt54, i32 %76, i32 2
  %insertElmt56 = insertelement <4 x i32> %insertElmt55, i32 %76, i32 3
  store <4 x i32> %insertElmt56, <4 x i32>* %allocaVec14, align 16
  %77 = load i32, i32* %15, align 4
  %78 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %79 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %Vop57 = add <4 x i32> %78, %79
  store <4 x i32> %Vop57, <4 x i32>* %allocaVec17
  %80 = add nsw i32 %77, %76
  store i32 %80, i32* %15, align 4
  br label %81

; <label>:81:                                     ; preds = %70, %64
  %82 = load i32, i32* %17, align 4
  %insertElmt58 = insertelement <4 x i32> undef, i32 %82, i32 0
  %insertElmt59 = insertelement <4 x i32> %insertElmt58, i32 %82, i32 1
  %insertElmt60 = insertelement <4 x i32> %insertElmt59, i32 %82, i32 2
  %insertElmt61 = insertelement <4 x i32> %insertElmt60, i32 %82, i32 3
  store <4 x i32> %insertElmt61, <4 x i32>* %allocaVec19, align 16
  %83 = load i32, i32* %18, align 4
  %84 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %85 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop62 = add <4 x i32> %84, %85
  store <4 x i32> %Vop62, <4 x i32>* %allocaVec20
  %86 = load <4 x i32>, <4 x i32>* %allocaVec20, align 4
  %extractE = extractelement <4 x i32> %86, i64 0
  %extractE63 = extractelement <4 x i32> %86, i64 1
  %extractE64 = extractelement <4 x i32> %86, i64 2
  %sum = add i32 %extractE, %extractE63
  %sum65 = add i32 %sum, %extractE64
  %87 = add nsw i32 %83, %82
  %Fmul = mul i32 %87, 3
  store i32 %87, i32* %Recovery
  %Fcmp = icmp ne i32 %sum65, %Fmul
  br i1 %Fcmp, label %88, label %92

; <label>:88:                                     ; preds = %81
  %remThree = sdiv i32 %sum65, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %89, label %90

; <label>:89:                                     ; preds = %88
  store i32 %87, i32* %Recovery, align 4
  br label %91

; <label>:90:                                     ; preds = %88
  store i32 %extractE, i32* %Recovery, align 4
  br label %91

; <label>:91:                                     ; preds = %90, %89
  br label %92

; <label>:92:                                     ; preds = %81, %91
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %18, align 4
  br label %93

; <label>:93:                                     ; preds = %92, %61
  %94 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 16, i32 3), align 4
  %95 = load i32, i32* %18, align 4
  %96 = getelementptr inbounds i8, i8* %94, i32 %95
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = load i32, i32* %14, align 4
  %100 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  store i32 %98, i32* %CastInst
  %101 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %101, i32 0
  %insertCast66 = insertelement <4 x i32> %insertCast, i32 %101, i32 1
  %insertCast67 = insertelement <4 x i32> %insertCast66, i32 %101, i32 2
  %insertCast68 = insertelement <4 x i32> %insertCast67, i32 %101, i32 3
  store <4 x i32> %insertCast68, <4 x i32>* %CastInstVec, align 4
  %102 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop69 = add <4 x i32> %100, %102
  store <4 x i32> %Vop69, <4 x i32>* %allocaVec16
  %103 = add nsw i32 %99, %98
  store i32 %103, i32* %14, align 4
  %104 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 24, i32 3), align 4
  %105 = load i32, i32* %18, align 4
  %106 = getelementptr inbounds i8, i8* %104, i32 %105
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = load i32, i32* %15, align 4
  %110 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  store i32 %108, i32* %CastInst4
  %111 = load i32, i32* %CastInst4, align 4
  %insertCast70 = insertelement <4 x i32> undef, i32 %111, i32 0
  %insertCast71 = insertelement <4 x i32> %insertCast70, i32 %111, i32 1
  %insertCast72 = insertelement <4 x i32> %insertCast71, i32 %111, i32 2
  %insertCast73 = insertelement <4 x i32> %insertCast72, i32 %111, i32 3
  store <4 x i32> %insertCast73, <4 x i32>* %CastInstVec5, align 4
  %112 = load <4 x i32>, <4 x i32>* %CastInstVec5, align 4
  %Vop74 = add <4 x i32> %110, %112
  store <4 x i32> %Vop74, <4 x i32>* %allocaVec17
  %113 = load <4 x i32>, <4 x i32>* %allocaVec17, align 4
  %extractE76 = extractelement <4 x i32> %113, i64 0
  %extractE77 = extractelement <4 x i32> %113, i64 1
  %extractE78 = extractelement <4 x i32> %113, i64 2
  %sum79 = add i32 %extractE76, %extractE77
  %sum80 = add i32 %sum79, %extractE78
  %114 = add nsw i32 %109, %108
  %Fmul75 = mul i32 %114, 3
  store i32 %114, i32* %Recovery1
  %Fcmp81 = icmp ne i32 %sum80, %Fmul75
  br i1 %Fcmp81, label %115, label %119

; <label>:115:                                    ; preds = %93
  %remThree95 = sdiv i32 %sum80, %extractE76
  %FcmpThree96 = icmp ne i32 %remThree95, 3
  br i1 %FcmpThree96, label %116, label %117

; <label>:116:                                    ; preds = %115
  store i32 %114, i32* %Recovery1, align 4
  br label %118

; <label>:117:                                    ; preds = %115
  store i32 %extractE76, i32* %Recovery1, align 4
  br label %118

; <label>:118:                                    ; preds = %117, %116
  br label %119

; <label>:119:                                    ; preds = %93, %118
  %ReplaceInst99 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst99, i32* %15, align 4
  br label %120

; <label>:120:                                    ; preds = %119
  %121 = load i32, i32* %16, align 4
  %insertElmt82 = insertelement <4 x i32> undef, i32 %121, i32 0
  %insertElmt83 = insertelement <4 x i32> %insertElmt82, i32 %121, i32 1
  %insertElmt84 = insertelement <4 x i32> %insertElmt83, i32 %121, i32 2
  %insertElmt85 = insertelement <4 x i32> %insertElmt84, i32 %121, i32 3
  store <4 x i32> %insertElmt85, <4 x i32>* %allocaVec18, align 16
  %122 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop86 = add <4 x i32> %122, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop86, <4 x i32>* %allocaVec18
  %123 = load <4 x i32>, <4 x i32>* %allocaVec18, align 4
  %extractE88 = extractelement <4 x i32> %123, i64 0
  %extractE89 = extractelement <4 x i32> %123, i64 1
  %extractE90 = extractelement <4 x i32> %123, i64 2
  %sum91 = add i32 %extractE88, %extractE89
  %sum92 = add i32 %sum91, %extractE90
  %124 = add nsw i32 %121, 1
  %Fmul87 = mul i32 %124, 3
  store i32 %124, i32* %Recovery2
  %Fcmp93 = icmp ne i32 %sum92, %Fmul87
  br i1 %Fcmp93, label %125, label %129

; <label>:125:                                    ; preds = %120
  %remThree97 = sdiv i32 %sum92, %extractE88
  %FcmpThree98 = icmp ne i32 %remThree97, 3
  br i1 %FcmpThree98, label %126, label %127

; <label>:126:                                    ; preds = %125
  store i32 %124, i32* %Recovery2, align 4
  br label %128

; <label>:127:                                    ; preds = %125
  store i32 %extractE88, i32* %Recovery2, align 4
  br label %128

; <label>:128:                                    ; preds = %127, %126
  br label %129

; <label>:129:                                    ; preds = %120, %128
  %ReplaceInst100 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst100, i32* %16, align 4
  br label %28

; <label>:130:                                    ; preds = %28
  %131 = load i32*, i32** %6, align 4
  %132 = getelementptr inbounds i32, i32* %131, i32 3
  store i32* %132, i32** %6, align 4
  br label %133

; <label>:133:                                    ; preds = %130
  %134 = load i32*, i32** %6, align 4
  %135 = load i32*, i32** %7, align 4
  %136 = icmp ult i32* %134, %135
  br i1 %136, label %27, label %137

; <label>:137:                                    ; preds = %133
  %138 = load i32, i32* %14, align 4
  %139 = load i32, i32* %15, align 4
  %140 = icmp sgt i32 %138, %139
  br i1 %140, label %141, label %144

; <label>:141:                                    ; preds = %137
  %142 = load i32, i32* %15, align 4
  store i32 %142, i32* %14, align 4
  %143 = load i32, i32* %9, align 4
  store i32 %143, i32* %8, align 4
  br label %144

; <label>:144:                                    ; preds = %141, %137
  %145 = load i32, i32* %13, align 4
  %146 = load i32, i32* %14, align 4
  %147 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %148 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop94 = add <4 x i32> %147, %148
  %149 = add nsw i32 %145, %146
  %150 = load i32*, i32** %10, align 4
  %151 = load i32, i32* %150, align 4
  %152 = add nsw i32 %151, %149
  store i32 %152, i32* %150, align 4
  %153 = load i32, i32* %8, align 4
  ret i32 %153
}

; Function Attrs: nounwind
define arm_aapcscc void @best_huffman_divide(i32, i32, %struct.gr_info*, i32*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %7 = alloca %struct.gr_info*, align 4
  %8 = alloca i32*, align 4
  %9 = alloca i32*, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %16 = alloca [25 x i32], align 4
  %17 = alloca [25 x i32], align 4
  %18 = alloca %struct.gr_info, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store %struct.gr_info* %2, %struct.gr_info** %7, align 4
  store i32* %3, i32** %8, align 4
  %19 = bitcast %struct.gr_info* %18 to i8*
  %20 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %21 = bitcast %struct.gr_info* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %19, i8* %21, i32 112, i32 4, i1 false)
  %22 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = mul i32 %23, 2
  store i32 %24, i32* %14, align 4
  %25 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 0
  store i32* %25, i32** %9, align 4
  store i32 2, i32* %10, align 4
  br label %26

; <label>:26:                                     ; preds = %56, %4
  %27 = load i32, i32* %10, align 4
  %28 = icmp slt i32 %27, 23
  br i1 %28, label %29, label %60

; <label>:29:                                     ; preds = %26
  %30 = load i32, i32* %10, align 4
  %31 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %30
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %13, align 4
  %33 = load i32, i32* %13, align 4
  %34 = load i32, i32* %14, align 4
  %35 = icmp sgt i32 %33, %34
  br i1 %35, label %36, label %37

; <label>:36:                                     ; preds = %29
  br label %60

; <label>:37:                                     ; preds = %29
  %38 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 18
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 15
  %41 = load i32, i32* %40, align 4
  %42 = add i32 %39, %41
  %43 = load i32, i32* %10, align 4
  %44 = getelementptr inbounds [25 x i32], [25 x i32]* %16, i32 0, i32 %43
  store i32 %42, i32* %44, align 4
  %45 = load i32*, i32** %8, align 4
  %46 = load i32, i32* %13, align 4
  %47 = getelementptr inbounds i32, i32* %45, i32 %46
  %48 = load i32*, i32** %8, align 4
  %49 = load i32, i32* %14, align 4
  %50 = getelementptr inbounds i32, i32* %48, i32 %49
  %51 = load i32, i32* %10, align 4
  %52 = getelementptr inbounds [25 x i32], [25 x i32]* %16, i32 0, i32 %51
  %53 = call arm_aapcscc i32 @choose_table(i32* %47, i32* %50, i32* %52)
  %54 = load i32, i32* %10, align 4
  %55 = getelementptr inbounds [25 x i32], [25 x i32]* %17, i32 0, i32 %54
  store i32 %53, i32* %55, align 4
  br label %56

; <label>:56:                                     ; preds = %37
  %57 = load i32, i32* %10, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %57, i32 0
  %insertElmt13 = insertelement <4 x i32> %insertElmt, i32 %57, i32 1
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %57, i32 2
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %57, i32 3
  store <4 x i32> %insertElmt15, <4 x i32>* %allocaVec7, align 16
  %58 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop = add <4 x i32> %58, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec7
  %59 = add nsw i32 %57, 1
  store i32 %59, i32* %10, align 4
  br label %26

; <label>:60:                                     ; preds = %36, %26
  br label %61

; <label>:61:                                     ; preds = %67, %60
  %62 = load i32, i32* %10, align 4
  %63 = icmp sle i32 %62, 24
  br i1 %63, label %64, label %71

; <label>:64:                                     ; preds = %61
  %65 = load i32, i32* %10, align 4
  %66 = getelementptr inbounds [25 x i32], [25 x i32]* %16, i32 0, i32 %65
  store i32 100000, i32* %66, align 4
  br label %67

; <label>:67:                                     ; preds = %64
  %68 = load i32, i32* %10, align 4
  %69 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop16 = add <4 x i32> %69, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop16, <4 x i32>* %allocaVec7
  %70 = add nsw i32 %68, 1
  store i32 %70, i32* %10, align 4
  br label %61

; <label>:71:                                     ; preds = %61
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec7
  store i32 0, i32* %10, align 4
  br label %72

; <label>:72:                                     ; preds = %186, %71
  %73 = load i32, i32* %10, align 4
  %74 = icmp slt i32 %73, 16
  br i1 %74, label %75, label %187

; <label>:75:                                     ; preds = %72
  %76 = load i32, i32* %10, align 4
  %77 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop17 = add <4 x i32> %77, <i32 1, i32 1, i32 1, i32 1>
  %78 = add nsw i32 %76, 1
  %79 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %78
  %80 = load i32, i32* %79, align 4
  store i32 %80, i32* %12, align 4
  %81 = load i32, i32* %12, align 4
  %82 = load i32, i32* %14, align 4
  %83 = icmp sgt i32 %81, %82
  br i1 %83, label %84, label %85

; <label>:84:                                     ; preds = %75
  br label %187

; <label>:85:                                     ; preds = %75
  %86 = load i32, i32* %10, align 4
  %87 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 10
  store i32 %86, i32* %87, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec12
  store i32 0, i32* %15, align 4
  %88 = load i32*, i32** %8, align 4
  %89 = load i32*, i32** %8, align 4
  %90 = load i32, i32* %12, align 4
  %91 = getelementptr inbounds i32, i32* %89, i32 %90
  %92 = call arm_aapcscc i32 @choose_table(i32* %88, i32* %91, i32* %15)
  %93 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 8
  %94 = getelementptr inbounds [3 x i32], [3 x i32]* %93, i32 0, i32 0
  store i32 %92, i32* %94, align 4
  %95 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %96 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %95, i32 0, i32 0
  %97 = load i32, i32* %96, align 4
  %98 = load i32, i32* %15, align 4
  %99 = icmp slt i32 %97, %98
  br i1 %99, label %100, label %101

; <label>:100:                                    ; preds = %85
  br label %187

; <label>:101:                                    ; preds = %85
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec8
  store i32 0, i32* %11, align 4
  br label %102

; <label>:102:                                    ; preds = %175, %101
  %103 = load i32, i32* %11, align 4
  %104 = icmp slt i32 %103, 8
  br i1 %104, label %105, label %176

; <label>:105:                                    ; preds = %102
  %106 = load i32, i32* %15, align 4
  %insertElmt18 = insertelement <4 x i32> undef, i32 %106, i32 0
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %106, i32 1
  %insertElmt20 = insertelement <4 x i32> %insertElmt19, i32 %106, i32 2
  %insertElmt21 = insertelement <4 x i32> %insertElmt20, i32 %106, i32 3
  store <4 x i32> %insertElmt21, <4 x i32>* %allocaVec12, align 16
  %107 = load i32, i32* %10, align 4
  %108 = load i32, i32* %11, align 4
  %insertElmt22 = insertelement <4 x i32> undef, i32 %108, i32 0
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %108, i32 1
  %insertElmt24 = insertelement <4 x i32> %insertElmt23, i32 %108, i32 2
  %insertElmt25 = insertelement <4 x i32> %insertElmt24, i32 %108, i32 3
  store <4 x i32> %insertElmt25, <4 x i32>* %allocaVec8, align 16
  %109 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %110 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %Vop26 = add <4 x i32> %109, %110
  %111 = add nsw i32 %107, %108
  %Vop27 = add <4 x i32> %Vop26, <i32 2, i32 2, i32 2, i32 2>
  %112 = add nsw i32 %111, 2
  %113 = getelementptr inbounds [25 x i32], [25 x i32]* %16, i32 0, i32 %112
  %114 = load i32, i32* %113, align 4
  %115 = add nsw i32 %106, %114
  %116 = load i32*, i32** %9, align 4
  store i32 %115, i32* %116, align 4
  %117 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %118 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %117, i32 0, i32 0
  %119 = load i32, i32* %118, align 4
  %120 = load i32*, i32** %9, align 4
  %121 = load i32, i32* %120, align 4
  %122 = icmp slt i32 %119, %121
  br i1 %122, label %123, label %124

; <label>:123:                                    ; preds = %105
  br label %166

; <label>:124:                                    ; preds = %105
  %125 = load i32, i32* %10, align 4
  %126 = load i32, i32* %11, align 4
  %insertElmt28 = insertelement <4 x i32> undef, i32 %126, i32 0
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %126, i32 1
  %insertElmt30 = insertelement <4 x i32> %insertElmt29, i32 %126, i32 2
  %insertElmt31 = insertelement <4 x i32> %insertElmt30, i32 %126, i32 3
  store <4 x i32> %insertElmt31, <4 x i32>* %allocaVec8, align 16
  %127 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %128 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %Vop32 = add <4 x i32> %127, %128
  %129 = add nsw i32 %125, %126
  %Vop33 = add <4 x i32> %Vop32, <i32 2, i32 2, i32 2, i32 2>
  %130 = add nsw i32 %129, 2
  %131 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %130
  %132 = load i32, i32* %131, align 4
  store i32 %132, i32* %13, align 4
  %133 = load i32*, i32** %8, align 4
  %134 = load i32, i32* %12, align 4
  %135 = getelementptr inbounds i32, i32* %133, i32 %134
  %136 = load i32*, i32** %8, align 4
  %137 = load i32, i32* %13, align 4
  %138 = getelementptr inbounds i32, i32* %136, i32 %137
  %139 = load i32*, i32** %9, align 4
  %140 = call arm_aapcscc i32 @choose_table(i32* %135, i32* %138, i32* %139)
  %141 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 8
  %142 = getelementptr inbounds [3 x i32], [3 x i32]* %141, i32 0, i32 1
  store i32 %140, i32* %142, align 4
  %143 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %144 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %143, i32 0, i32 0
  %145 = load i32, i32* %144, align 4
  %146 = load i32*, i32** %9, align 4
  %147 = load i32, i32* %146, align 4
  %148 = icmp slt i32 %145, %147
  br i1 %148, label %149, label %150

; <label>:149:                                    ; preds = %124
  br label %166

; <label>:150:                                    ; preds = %124
  %151 = load i32, i32* %11, align 4
  %152 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 11
  store i32 %151, i32* %152, align 4
  %153 = load i32, i32* %10, align 4
  %154 = load i32, i32* %11, align 4
  %insertElmt34 = insertelement <4 x i32> undef, i32 %154, i32 0
  %insertElmt35 = insertelement <4 x i32> %insertElmt34, i32 %154, i32 1
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %154, i32 2
  %insertElmt37 = insertelement <4 x i32> %insertElmt36, i32 %154, i32 3
  store <4 x i32> %insertElmt37, <4 x i32>* %allocaVec8, align 16
  %155 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %156 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %Vop38 = add <4 x i32> %155, %156
  %157 = add nsw i32 %153, %154
  %Vop39 = add <4 x i32> %Vop38, <i32 2, i32 2, i32 2, i32 2>
  %158 = add nsw i32 %157, 2
  %159 = getelementptr inbounds [25 x i32], [25 x i32]* %17, i32 0, i32 %158
  %160 = load i32, i32* %159, align 4
  %161 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 8
  %162 = getelementptr inbounds [3 x i32], [3 x i32]* %161, i32 0, i32 2
  store i32 %160, i32* %162, align 4
  %163 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %164 = bitcast %struct.gr_info* %163 to i8*
  %165 = bitcast %struct.gr_info* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %164, i8* %165, i32 112, i32 4, i1 false)
  br label %166

; <label>:166:                                    ; preds = %150, %149, %123
  %167 = load i32, i32* %11, align 4
  %insertElmt40 = insertelement <4 x i32> undef, i32 %167, i32 0
  %insertElmt41 = insertelement <4 x i32> %insertElmt40, i32 %167, i32 1
  %insertElmt42 = insertelement <4 x i32> %insertElmt41, i32 %167, i32 2
  %insertElmt43 = insertelement <4 x i32> %insertElmt42, i32 %167, i32 3
  store <4 x i32> %insertElmt43, <4 x i32>* %allocaVec8, align 16
  %168 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %Vop44 = add <4 x i32> %168, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop44, <4 x i32>* %allocaVec8
  %169 = load <4 x i32>, <4 x i32>* %allocaVec8, align 4
  %extractE = extractelement <4 x i32> %169, i64 0
  %extractE45 = extractelement <4 x i32> %169, i64 1
  %extractE46 = extractelement <4 x i32> %169, i64 2
  %sum = add i32 %extractE, %extractE45
  %sum47 = add i32 %sum, %extractE46
  %170 = add nsw i32 %167, 1
  %Fmul = mul i32 %170, 3
  store i32 %170, i32* %Recovery1
  %Fcmp = icmp ne i32 %sum47, %Fmul
  br i1 %Fcmp, label %171, label %175

; <label>:171:                                    ; preds = %166
  %remThree = sdiv i32 %sum47, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %172, label %173

; <label>:172:                                    ; preds = %171
  store i32 %170, i32* %Recovery1, align 4
  br label %174

; <label>:173:                                    ; preds = %171
  store i32 %extractE, i32* %Recovery1, align 4
  br label %174

; <label>:174:                                    ; preds = %173, %172
  br label %175

; <label>:175:                                    ; preds = %166, %174
  %ReplaceInst = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst, i32* %11, align 4
  br label %102

; <label>:176:                                    ; preds = %102
  br label %177

; <label>:177:                                    ; preds = %176
  %178 = load i32, i32* %10, align 4
  %179 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop48 = add <4 x i32> %179, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop48, <4 x i32>* %allocaVec7
  %180 = load <4 x i32>, <4 x i32>* %allocaVec7, align 4
  %extractE50 = extractelement <4 x i32> %180, i64 0
  %extractE51 = extractelement <4 x i32> %180, i64 1
  %extractE52 = extractelement <4 x i32> %180, i64 2
  %sum53 = add i32 %extractE50, %extractE51
  %sum54 = add i32 %sum53, %extractE52
  %181 = add nsw i32 %178, 1
  %Fmul49 = mul i32 %181, 3
  store i32 %181, i32* %Recovery2
  %Fcmp55 = icmp ne i32 %sum54, %Fmul49
  br i1 %Fcmp55, label %182, label %186

; <label>:182:                                    ; preds = %177
  %remThree56 = sdiv i32 %sum54, %extractE50
  %FcmpThree57 = icmp ne i32 %remThree56, 3
  br i1 %FcmpThree57, label %183, label %184

; <label>:183:                                    ; preds = %182
  store i32 %181, i32* %Recovery2, align 4
  br label %185

; <label>:184:                                    ; preds = %182
  store i32 %extractE50, i32* %Recovery2, align 4
  br label %185

; <label>:185:                                    ; preds = %184, %183
  br label %186

; <label>:186:                                    ; preds = %177, %185
  %ReplaceInst58 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst58, i32* %10, align 4
  br label %72

; <label>:187:                                    ; preds = %100, %84, %72
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @best_scalefac_store(%struct.lame_global_flags*, i32, i32, [2 x [576 x i32]]*, %struct.III_side_info_t*, [2 x %struct.III_scalefac_t]*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %Recovery5 = alloca i32, align 4
  %allocaVec14 = alloca <4 x i32>, align 16
  %Recovery6 = alloca i32, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %Recovery7 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %Recovery8 = alloca i32, align 4
  %7 = alloca %struct.lame_global_flags*, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec18 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %10 = alloca [2 x [576 x i32]]*, align 4
  %11 = alloca %struct.III_side_info_t*, align 4
  %12 = alloca [2 x %struct.III_scalefac_t]*, align 4
  %13 = alloca %struct.gr_info*, align 4
  %allocaVec19 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  %allocaVec20 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %allocaVec21 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %allocaVec22 = alloca <4 x i32>, align 16
  %17 = alloca i32, align 4
  %allocaVec23 = alloca <4 x i32>, align 16
  %18 = alloca i32, align 4
  %allocaVec24 = alloca <4 x i32>, align 16
  %19 = alloca i32, align 4
  %allocaVec25 = alloca <4 x i32>, align 16
  %20 = alloca i32, align 4
  %allocaVec26 = alloca <4 x i32>, align 16
  %21 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store [2 x [576 x i32]]* %3, [2 x [576 x i32]]** %10, align 4
  store %struct.III_side_info_t* %4, %struct.III_side_info_t** %11, align 4
  store [2 x %struct.III_scalefac_t]* %5, [2 x %struct.III_scalefac_t]** %12, align 4
  %22 = load %struct.III_side_info_t*, %struct.III_side_info_t** %11, align 4
  %23 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %22, i32 0, i32 4
  %24 = load i32, i32* %8, align 4
  %25 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %23, i32 0, i32 %24
  %26 = getelementptr inbounds %struct.anon, %struct.anon* %25, i32 0, i32 0
  %27 = load i32, i32* %9, align 4
  %28 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %26, i32 0, i32 %27
  %29 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %28, i32 0, i32 0
  store %struct.gr_info* %29, %struct.gr_info** %13, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec19
  store i32 0, i32* %14, align 4
  br label %30

; <label>:30:                                     ; preds = %92, %6
  %31 = load i32, i32* %14, align 4
  %32 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %33 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %32, i32 0, i32 16
  %34 = load i32, i32* %33, align 4
  %35 = icmp ult i32 %31, %34
  br i1 %35, label %36, label %96

; <label>:36:                                     ; preds = %30
  %37 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %38 = load i32, i32* %8, align 4
  %39 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %37, i32 %38
  %40 = load i32, i32* %9, align 4
  %41 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %39, i32 0, i32 %40
  %42 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %41, i32 0, i32 0
  %43 = load i32, i32* %14, align 4
  %44 = getelementptr inbounds [22 x i32], [22 x i32]* %42, i32 0, i32 %43
  %45 = load i32, i32* %44, align 4
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %47, label %91

; <label>:47:                                     ; preds = %36
  %48 = load i32, i32* %14, align 4
  %49 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %48
  %50 = load i32, i32* %49, align 4
  store i32 %50, i32* %17, align 4
  %51 = load i32, i32* %14, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %51, i32 0
  %insertElmt27 = insertelement <4 x i32> %insertElmt, i32 %51, i32 1
  %insertElmt28 = insertelement <4 x i32> %insertElmt27, i32 %51, i32 2
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %51, i32 3
  store <4 x i32> %insertElmt29, <4 x i32>* %allocaVec19, align 16
  %52 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop = add <4 x i32> %52, <i32 1, i32 1, i32 1, i32 1>
  %53 = add nsw i32 %51, 1
  %54 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %53
  %55 = load i32, i32* %54, align 4
  store i32 %55, i32* %18, align 4
  %56 = load i32, i32* %17, align 4
  store i32 %56, i32* %16, align 4
  br label %57

; <label>:57:                                     ; preds = %73, %47
  %58 = load i32, i32* %16, align 4
  %59 = load i32, i32* %18, align 4
  %60 = icmp slt i32 %58, %59
  br i1 %60, label %61, label %77

; <label>:61:                                     ; preds = %57
  %62 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %10, align 4
  %63 = load i32, i32* %8, align 4
  %64 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %62, i32 %63
  %65 = load i32, i32* %9, align 4
  %66 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %64, i32 0, i32 %65
  %67 = load i32, i32* %16, align 4
  %68 = getelementptr inbounds [576 x i32], [576 x i32]* %66, i32 0, i32 %67
  %69 = load i32, i32* %68, align 4
  %70 = icmp ne i32 %69, 0
  br i1 %70, label %71, label %72

; <label>:71:                                     ; preds = %61
  br label %77

; <label>:72:                                     ; preds = %61
  br label %73

; <label>:73:                                     ; preds = %72
  %74 = load i32, i32* %16, align 4
  %insertElmt30 = insertelement <4 x i32> undef, i32 %74, i32 0
  %insertElmt31 = insertelement <4 x i32> %insertElmt30, i32 %74, i32 1
  %insertElmt32 = insertelement <4 x i32> %insertElmt31, i32 %74, i32 2
  %insertElmt33 = insertelement <4 x i32> %insertElmt32, i32 %74, i32 3
  store <4 x i32> %insertElmt33, <4 x i32>* %allocaVec21, align 16
  %75 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop34 = add <4 x i32> %75, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop34, <4 x i32>* %allocaVec21
  %76 = add nsw i32 %74, 1
  store i32 %76, i32* %16, align 4
  br label %57

; <label>:77:                                     ; preds = %71, %57
  %78 = load i32, i32* %16, align 4
  %79 = load i32, i32* %18, align 4
  %80 = icmp eq i32 %78, %79
  br i1 %80, label %81, label %90

; <label>:81:                                     ; preds = %77
  %82 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %83 = load i32, i32* %8, align 4
  %84 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %82, i32 %83
  %85 = load i32, i32* %9, align 4
  %86 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %84, i32 0, i32 %85
  %87 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %86, i32 0, i32 0
  %88 = load i32, i32* %14, align 4
  %89 = getelementptr inbounds [22 x i32], [22 x i32]* %87, i32 0, i32 %88
  store i32 0, i32* %89, align 4
  br label %90

; <label>:90:                                     ; preds = %81, %77
  br label %91

; <label>:91:                                     ; preds = %90, %36
  br label %92

; <label>:92:                                     ; preds = %91
  %93 = load i32, i32* %14, align 4
  %insertElmt35 = insertelement <4 x i32> undef, i32 %93, i32 0
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %93, i32 1
  %insertElmt37 = insertelement <4 x i32> %insertElmt36, i32 %93, i32 2
  %insertElmt38 = insertelement <4 x i32> %insertElmt37, i32 %93, i32 3
  store <4 x i32> %insertElmt38, <4 x i32>* %allocaVec19, align 16
  %94 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop39 = add <4 x i32> %94, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop39, <4 x i32>* %allocaVec19
  %95 = add nsw i32 %93, 1
  store i32 %95, i32* %14, align 4
  br label %30

; <label>:96:                                     ; preds = %30
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec20
  store i32 0, i32* %15, align 4
  br label %97

; <label>:97:                                     ; preds = %198, %96
  %98 = load i32, i32* %15, align 4
  %99 = icmp slt i32 %98, 3
  br i1 %99, label %100, label %199

; <label>:100:                                    ; preds = %97
  %101 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %102 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %101, i32 0, i32 17
  %103 = load i32, i32* %102, align 4
  store i32 %103, i32* %14, align 4
  br label %104

; <label>:104:                                    ; preds = %187, %100
  %105 = load i32, i32* %14, align 4
  %106 = icmp slt i32 %105, 12
  br i1 %106, label %107, label %188

; <label>:107:                                    ; preds = %104
  %108 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %109 = load i32, i32* %8, align 4
  %110 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %108, i32 %109
  %111 = load i32, i32* %9, align 4
  %112 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %110, i32 0, i32 %111
  %113 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %112, i32 0, i32 1
  %114 = load i32, i32* %14, align 4
  %115 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %113, i32 0, i32 %114
  %116 = load i32, i32* %15, align 4
  %117 = getelementptr inbounds [3 x i32], [3 x i32]* %115, i32 0, i32 %116
  %118 = load i32, i32* %117, align 4
  %119 = icmp sgt i32 %118, 0
  br i1 %119, label %120, label %177

; <label>:120:                                    ; preds = %107
  %121 = load i32, i32* %14, align 4
  %122 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %121
  %123 = load i32, i32* %122, align 4
  store i32 %123, i32* %17, align 4
  %124 = load i32, i32* %14, align 4
  %125 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop40 = add <4 x i32> %125, <i32 1, i32 1, i32 1, i32 1>
  %126 = add nsw i32 %124, 1
  %127 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %126
  %128 = load i32, i32* %127, align 4
  store i32 %128, i32* %18, align 4
  %129 = load i32, i32* %17, align 4
  store i32 %129, i32* %16, align 4
  br label %130

; <label>:130:                                    ; preds = %160, %120
  %131 = load i32, i32* %16, align 4
  %132 = load i32, i32* %18, align 4
  %133 = icmp slt i32 %131, %132
  br i1 %133, label %134, label %161

; <label>:134:                                    ; preds = %130
  %135 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %10, align 4
  %136 = load i32, i32* %8, align 4
  %137 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %135, i32 %136
  %138 = load i32, i32* %9, align 4
  %139 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %137, i32 0, i32 %138
  %140 = load i32, i32* %16, align 4
  %141 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop41 = mul <4 x i32> <i32 3, i32 3, i32 3, i32 3>, %141
  %142 = mul nsw i32 3, %140
  %143 = load i32, i32* %15, align 4
  %insertElmt42 = insertelement <4 x i32> undef, i32 %143, i32 0
  %insertElmt43 = insertelement <4 x i32> %insertElmt42, i32 %143, i32 1
  %insertElmt44 = insertelement <4 x i32> %insertElmt43, i32 %143, i32 2
  %insertElmt45 = insertelement <4 x i32> %insertElmt44, i32 %143, i32 3
  store <4 x i32> %insertElmt45, <4 x i32>* %allocaVec20, align 16
  %144 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop46 = add <4 x i32> %Vop41, %144
  %145 = add nsw i32 %142, %143
  %146 = getelementptr inbounds [576 x i32], [576 x i32]* %139, i32 0, i32 %145
  %147 = load i32, i32* %146, align 4
  %148 = icmp ne i32 %147, 0
  br i1 %148, label %149, label %150

; <label>:149:                                    ; preds = %134
  br label %161

; <label>:150:                                    ; preds = %134
  br label %151

; <label>:151:                                    ; preds = %150
  %152 = load i32, i32* %16, align 4
  %153 = load <4 x i32>, <4 x i32>* %allocaVec21, align 16
  %Vop47 = add <4 x i32> %153, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop47, <4 x i32>* %allocaVec21
  %154 = load <4 x i32>, <4 x i32>* %allocaVec21, align 4
  %extractE = extractelement <4 x i32> %154, i64 0
  %extractE48 = extractelement <4 x i32> %154, i64 1
  %extractE49 = extractelement <4 x i32> %154, i64 2
  %sum = add i32 %extractE, %extractE48
  %sum50 = add i32 %sum, %extractE49
  %155 = add nsw i32 %152, 1
  %Fmul = mul i32 %155, 3
  store i32 %155, i32* %Recovery
  %Fcmp = icmp ne i32 %sum50, %Fmul
  br i1 %Fcmp, label %156, label %160

; <label>:156:                                    ; preds = %151
  %remThree = sdiv i32 %sum50, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %157, label %158

; <label>:157:                                    ; preds = %156
  store i32 %155, i32* %Recovery, align 4
  br label %159

; <label>:158:                                    ; preds = %156
  store i32 %extractE, i32* %Recovery, align 4
  br label %159

; <label>:159:                                    ; preds = %158, %157
  br label %160

; <label>:160:                                    ; preds = %151, %159
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %16, align 4
  br label %130

; <label>:161:                                    ; preds = %149, %130
  %162 = load i32, i32* %16, align 4
  %163 = load i32, i32* %18, align 4
  %164 = icmp eq i32 %162, %163
  br i1 %164, label %165, label %176

; <label>:165:                                    ; preds = %161
  %166 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %167 = load i32, i32* %8, align 4
  %168 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %166, i32 %167
  %169 = load i32, i32* %9, align 4
  %170 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %168, i32 0, i32 %169
  %171 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %170, i32 0, i32 1
  %172 = load i32, i32* %14, align 4
  %173 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %171, i32 0, i32 %172
  %174 = load i32, i32* %15, align 4
  %175 = getelementptr inbounds [3 x i32], [3 x i32]* %173, i32 0, i32 %174
  store i32 0, i32* %175, align 4
  br label %176

; <label>:176:                                    ; preds = %165, %161
  br label %177

; <label>:177:                                    ; preds = %176, %107
  br label %178

; <label>:178:                                    ; preds = %177
  %179 = load i32, i32* %14, align 4
  %180 = load <4 x i32>, <4 x i32>* %allocaVec19, align 16
  %Vop51 = add <4 x i32> %180, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop51, <4 x i32>* %allocaVec19
  %181 = load <4 x i32>, <4 x i32>* %allocaVec19, align 4
  %extractE53 = extractelement <4 x i32> %181, i64 0
  %extractE54 = extractelement <4 x i32> %181, i64 1
  %extractE55 = extractelement <4 x i32> %181, i64 2
  %sum56 = add i32 %extractE53, %extractE54
  %sum57 = add i32 %sum56, %extractE55
  %182 = add nsw i32 %179, 1
  %Fmul52 = mul i32 %182, 3
  store i32 %182, i32* %Recovery1
  %Fcmp58 = icmp ne i32 %sum57, %Fmul52
  br i1 %Fcmp58, label %183, label %187

; <label>:183:                                    ; preds = %178
  %remThree104 = sdiv i32 %sum57, %extractE53
  %FcmpThree105 = icmp ne i32 %remThree104, 3
  br i1 %FcmpThree105, label %184, label %185

; <label>:184:                                    ; preds = %183
  store i32 %182, i32* %Recovery1, align 4
  br label %186

; <label>:185:                                    ; preds = %183
  store i32 %extractE53, i32* %Recovery1, align 4
  br label %186

; <label>:186:                                    ; preds = %185, %184
  br label %187

; <label>:187:                                    ; preds = %178, %186
  %ReplaceInst112 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst112, i32* %14, align 4
  br label %104

; <label>:188:                                    ; preds = %104
  br label %189

; <label>:189:                                    ; preds = %188
  %190 = load i32, i32* %15, align 4
  %insertElmt59 = insertelement <4 x i32> undef, i32 %190, i32 0
  %insertElmt60 = insertelement <4 x i32> %insertElmt59, i32 %190, i32 1
  %insertElmt61 = insertelement <4 x i32> %insertElmt60, i32 %190, i32 2
  %insertElmt62 = insertelement <4 x i32> %insertElmt61, i32 %190, i32 3
  store <4 x i32> %insertElmt62, <4 x i32>* %allocaVec20, align 16
  %191 = load <4 x i32>, <4 x i32>* %allocaVec20, align 16
  %Vop63 = add <4 x i32> %191, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop63, <4 x i32>* %allocaVec20
  %192 = load <4 x i32>, <4 x i32>* %allocaVec20, align 4
  %extractE65 = extractelement <4 x i32> %192, i64 0
  %extractE66 = extractelement <4 x i32> %192, i64 1
  %extractE67 = extractelement <4 x i32> %192, i64 2
  %sum68 = add i32 %extractE65, %extractE66
  %sum69 = add i32 %sum68, %extractE67
  %193 = add nsw i32 %190, 1
  %Fmul64 = mul i32 %193, 3
  store i32 %193, i32* %Recovery2
  %Fcmp70 = icmp ne i32 %sum69, %Fmul64
  br i1 %Fcmp70, label %194, label %198

; <label>:194:                                    ; preds = %189
  %remThree106 = sdiv i32 %sum69, %extractE65
  %FcmpThree107 = icmp ne i32 %remThree106, 3
  br i1 %FcmpThree107, label %195, label %196

; <label>:195:                                    ; preds = %194
  store i32 %193, i32* %Recovery2, align 4
  br label %197

; <label>:196:                                    ; preds = %194
  store i32 %extractE65, i32* %Recovery2, align 4
  br label %197

; <label>:197:                                    ; preds = %196, %195
  br label %198

; <label>:198:                                    ; preds = %189, %197
  %ReplaceInst113 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst113, i32* %15, align 4
  br label %97

; <label>:199:                                    ; preds = %97
  %200 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %201 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %200, i32 0, i32 15
  %202 = load i32, i32* %201, align 4
  %203 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %204 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %203, i32 0, i32 0
  %205 = load i32, i32* %204, align 4
  %206 = sub i32 %205, %202
  store i32 %206, i32* %204, align 4
  %207 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %208 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %207, i32 0, i32 13
  %209 = load i32, i32* %208, align 4
  %210 = icmp ne i32 %209, 0
  br i1 %210, label %375, label %211

; <label>:211:                                    ; preds = %199
  %212 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %213 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %212, i32 0, i32 12
  %214 = load i32, i32* %213, align 4
  %215 = icmp ne i32 %214, 0
  br i1 %215, label %375, label %216

; <label>:216:                                    ; preds = %211
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec26
  store i32 0, i32* %21, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec24
  store i32 0, i32* %19, align 4
  br label %217

; <label>:217:                                    ; preds = %235, %216
  %218 = load i32, i32* %19, align 4
  %219 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %220 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %219, i32 0, i32 16
  %221 = load i32, i32* %220, align 4
  %222 = icmp ult i32 %218, %221
  br i1 %222, label %223, label %239

; <label>:223:                                    ; preds = %217
  %224 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %225 = load i32, i32* %8, align 4
  %226 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %224, i32 %225
  %227 = load i32, i32* %9, align 4
  %228 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %226, i32 0, i32 %227
  %229 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %228, i32 0, i32 0
  %230 = load i32, i32* %19, align 4
  %231 = getelementptr inbounds [22 x i32], [22 x i32]* %229, i32 0, i32 %230
  %232 = load i32, i32* %231, align 4
  %233 = load i32, i32* %21, align 4
  %234 = or i32 %233, %232
  store i32 %234, i32* %21, align 4
  br label %235

; <label>:235:                                    ; preds = %223
  %236 = load i32, i32* %19, align 4
  %insertElmt71 = insertelement <4 x i32> undef, i32 %236, i32 0
  %insertElmt72 = insertelement <4 x i32> %insertElmt71, i32 %236, i32 1
  %insertElmt73 = insertelement <4 x i32> %insertElmt72, i32 %236, i32 2
  %insertElmt74 = insertelement <4 x i32> %insertElmt73, i32 %236, i32 3
  store <4 x i32> %insertElmt74, <4 x i32>* %allocaVec24, align 16
  %237 = load <4 x i32>, <4 x i32>* %allocaVec24, align 16
  %Vop75 = add <4 x i32> %237, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop75, <4 x i32>* %allocaVec24
  %238 = add i32 %236, 1
  store i32 %238, i32* %19, align 4
  br label %217

; <label>:239:                                    ; preds = %217
  %240 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %241 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %240, i32 0, i32 17
  %242 = load i32, i32* %241, align 4
  store i32 %242, i32* %19, align 4
  br label %243

; <label>:243:                                    ; preds = %269, %239
  %244 = load i32, i32* %19, align 4
  %245 = icmp ult i32 %244, 12
  br i1 %245, label %246, label %273

; <label>:246:                                    ; preds = %243
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec25
  store i32 0, i32* %20, align 4
  br label %247

; <label>:247:                                    ; preds = %264, %246
  %248 = load i32, i32* %20, align 4
  %249 = icmp slt i32 %248, 3
  br i1 %249, label %250, label %268

; <label>:250:                                    ; preds = %247
  %251 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %252 = load i32, i32* %8, align 4
  %253 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %251, i32 %252
  %254 = load i32, i32* %9, align 4
  %255 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %253, i32 0, i32 %254
  %256 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %255, i32 0, i32 1
  %257 = load i32, i32* %19, align 4
  %258 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %256, i32 0, i32 %257
  %259 = load i32, i32* %20, align 4
  %260 = getelementptr inbounds [3 x i32], [3 x i32]* %258, i32 0, i32 %259
  %261 = load i32, i32* %260, align 4
  %262 = load i32, i32* %21, align 4
  %263 = or i32 %262, %261
  store i32 %263, i32* %21, align 4
  br label %264

; <label>:264:                                    ; preds = %250
  %265 = load i32, i32* %20, align 4
  %insertElmt76 = insertelement <4 x i32> undef, i32 %265, i32 0
  %insertElmt77 = insertelement <4 x i32> %insertElmt76, i32 %265, i32 1
  %insertElmt78 = insertelement <4 x i32> %insertElmt77, i32 %265, i32 2
  %insertElmt79 = insertelement <4 x i32> %insertElmt78, i32 %265, i32 3
  store <4 x i32> %insertElmt79, <4 x i32>* %allocaVec25, align 16
  %266 = load <4 x i32>, <4 x i32>* %allocaVec25, align 16
  %Vop80 = add <4 x i32> %266, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop80, <4 x i32>* %allocaVec25
  %267 = add nsw i32 %265, 1
  store i32 %267, i32* %20, align 4
  br label %247

; <label>:268:                                    ; preds = %247
  br label %269

; <label>:269:                                    ; preds = %268
  %270 = load i32, i32* %19, align 4
  %271 = load <4 x i32>, <4 x i32>* %allocaVec24, align 16
  %Vop81 = add <4 x i32> %271, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop81, <4 x i32>* %allocaVec24
  %272 = add i32 %270, 1
  store i32 %272, i32* %19, align 4
  br label %243

; <label>:273:                                    ; preds = %243
  %274 = load i32, i32* %21, align 4
  %insertElmt82 = insertelement <4 x i32> undef, i32 %274, i32 0
  %insertElmt83 = insertelement <4 x i32> %insertElmt82, i32 %274, i32 1
  %insertElmt84 = insertelement <4 x i32> %insertElmt83, i32 %274, i32 2
  %insertElmt85 = insertelement <4 x i32> %insertElmt84, i32 %274, i32 3
  store <4 x i32> %insertElmt85, <4 x i32>* %allocaVec26, align 16
  %275 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop86 = and <4 x i32> %275, <i32 1, i32 1, i32 1, i32 1>
  %276 = and i32 %274, 1
  %277 = icmp ne i32 %276, 0
  br i1 %277, label %374, label %278

; <label>:278:                                    ; preds = %273
  %279 = load i32, i32* %21, align 4
  %280 = icmp ne i32 %279, 0
  br i1 %280, label %281, label %374

; <label>:281:                                    ; preds = %278
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec24
  store i32 0, i32* %19, align 4
  br label %282

; <label>:282:                                    ; preds = %299, %281
  %283 = load i32, i32* %19, align 4
  %284 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %285 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %284, i32 0, i32 16
  %286 = load i32, i32* %285, align 4
  %287 = icmp ult i32 %283, %286
  br i1 %287, label %288, label %303

; <label>:288:                                    ; preds = %282
  %289 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %290 = load i32, i32* %8, align 4
  %291 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %289, i32 %290
  %292 = load i32, i32* %9, align 4
  %293 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %291, i32 0, i32 %292
  %294 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %293, i32 0, i32 0
  %295 = load i32, i32* %19, align 4
  %296 = getelementptr inbounds [22 x i32], [22 x i32]* %294, i32 0, i32 %295
  %297 = load i32, i32* %296, align 4
  %298 = sdiv i32 %297, 2
  store i32 %298, i32* %296, align 4
  br label %299

; <label>:299:                                    ; preds = %288
  %300 = load i32, i32* %19, align 4
  %301 = load <4 x i32>, <4 x i32>* %allocaVec24, align 16
  %Vop87 = add <4 x i32> %301, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop87, <4 x i32>* %allocaVec24
  %302 = add i32 %300, 1
  store i32 %302, i32* %19, align 4
  br label %282

; <label>:303:                                    ; preds = %282
  %304 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %305 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %304, i32 0, i32 17
  %306 = load i32, i32* %305, align 4
  store i32 %306, i32* %19, align 4
  br label %307

; <label>:307:                                    ; preds = %347, %303
  %308 = load i32, i32* %19, align 4
  %309 = icmp ult i32 %308, 12
  br i1 %309, label %310, label %348

; <label>:310:                                    ; preds = %307
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec25
  store i32 0, i32* %20, align 4
  br label %311

; <label>:311:                                    ; preds = %336, %310
  %312 = load i32, i32* %20, align 4
  %313 = icmp slt i32 %312, 3
  br i1 %313, label %314, label %337

; <label>:314:                                    ; preds = %311
  %315 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %316 = load i32, i32* %8, align 4
  %317 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %315, i32 %316
  %318 = load i32, i32* %9, align 4
  %319 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %317, i32 0, i32 %318
  %320 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %319, i32 0, i32 1
  %321 = load i32, i32* %19, align 4
  %322 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %320, i32 0, i32 %321
  %323 = load i32, i32* %20, align 4
  %324 = getelementptr inbounds [3 x i32], [3 x i32]* %322, i32 0, i32 %323
  %325 = load i32, i32* %324, align 4
  %326 = sdiv i32 %325, 2
  store i32 %326, i32* %324, align 4
  br label %327

; <label>:327:                                    ; preds = %314
  %328 = load i32, i32* %20, align 4
  %329 = load <4 x i32>, <4 x i32>* %allocaVec25, align 16
  %Vop88 = add <4 x i32> %329, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop88, <4 x i32>* %allocaVec25
  %330 = load <4 x i32>, <4 x i32>* %allocaVec25, align 4
  %extractE90 = extractelement <4 x i32> %330, i64 0
  %extractE91 = extractelement <4 x i32> %330, i64 1
  %extractE92 = extractelement <4 x i32> %330, i64 2
  %sum93 = add i32 %extractE90, %extractE91
  %sum94 = add i32 %sum93, %extractE92
  %331 = add nsw i32 %328, 1
  %Fmul89 = mul i32 %331, 3
  store i32 %331, i32* %Recovery6
  %Fcmp95 = icmp ne i32 %sum94, %Fmul89
  br i1 %Fcmp95, label %332, label %336

; <label>:332:                                    ; preds = %327
  %remThree108 = sdiv i32 %sum94, %extractE90
  %FcmpThree109 = icmp ne i32 %remThree108, 3
  br i1 %FcmpThree109, label %333, label %334

; <label>:333:                                    ; preds = %332
  store i32 %331, i32* %Recovery6, align 4
  br label %335

; <label>:334:                                    ; preds = %332
  store i32 %extractE90, i32* %Recovery6, align 4
  br label %335

; <label>:335:                                    ; preds = %334, %333
  br label %336

; <label>:336:                                    ; preds = %327, %335
  %ReplaceInst114 = load i32, i32* %Recovery6, align 4
  store i32 %ReplaceInst114, i32* %20, align 4
  br label %311

; <label>:337:                                    ; preds = %311
  br label %338

; <label>:338:                                    ; preds = %337
  %339 = load i32, i32* %19, align 4
  %340 = load <4 x i32>, <4 x i32>* %allocaVec24, align 16
  %Vop96 = add <4 x i32> %340, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop96, <4 x i32>* %allocaVec24
  %341 = load <4 x i32>, <4 x i32>* %allocaVec24, align 4
  %extractE98 = extractelement <4 x i32> %341, i64 0
  %extractE99 = extractelement <4 x i32> %341, i64 1
  %extractE100 = extractelement <4 x i32> %341, i64 2
  %sum101 = add i32 %extractE98, %extractE99
  %sum102 = add i32 %sum101, %extractE100
  %342 = add i32 %339, 1
  %Fmul97 = mul i32 %342, 3
  store i32 %342, i32* %Recovery7
  %Fcmp103 = icmp ne i32 %sum102, %Fmul97
  br i1 %Fcmp103, label %343, label %347

; <label>:343:                                    ; preds = %338
  %remThree110 = sdiv i32 %sum102, %extractE98
  %FcmpThree111 = icmp ne i32 %remThree110, 3
  br i1 %FcmpThree111, label %344, label %345

; <label>:344:                                    ; preds = %343
  store i32 %342, i32* %Recovery7, align 4
  br label %346

; <label>:345:                                    ; preds = %343
  store i32 %extractE98, i32* %Recovery7, align 4
  br label %346

; <label>:346:                                    ; preds = %345, %344
  br label %347

; <label>:347:                                    ; preds = %338, %346
  %ReplaceInst115 = load i32, i32* %Recovery7, align 4
  store i32 %ReplaceInst115, i32* %19, align 4
  br label %307

; <label>:348:                                    ; preds = %307
  %349 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %350 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %349, i32 0, i32 13
  store i32 1, i32* %350, align 4
  %351 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %352 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %351, i32 0, i32 15
  store i32 99999999, i32* %352, align 4
  %353 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %354 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %353, i32 0, i32 45
  %355 = load i32, i32* %354, align 4
  %356 = icmp eq i32 %355, 2
  br i1 %356, label %357, label %365

; <label>:357:                                    ; preds = %348
  %358 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %359 = load i32, i32* %8, align 4
  %360 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %358, i32 %359
  %361 = load i32, i32* %9, align 4
  %362 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %360, i32 0, i32 %361
  %363 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %364 = call arm_aapcscc i32 @scale_bitcount(%struct.III_scalefac_t* %362, %struct.gr_info* %363)
  br label %373

; <label>:365:                                    ; preds = %348
  %366 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %367 = load i32, i32* %8, align 4
  %368 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %366, i32 %367
  %369 = load i32, i32* %9, align 4
  %370 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %368, i32 0, i32 %369
  %371 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %372 = call arm_aapcscc i32 @scale_bitcount_lsf(%struct.III_scalefac_t* %370, %struct.gr_info* %371)
  br label %373

; <label>:373:                                    ; preds = %365, %357
  br label %374

; <label>:374:                                    ; preds = %373, %278, %273
  br label %375

; <label>:375:                                    ; preds = %374, %211, %199
  %376 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %377 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %376, i32 0, i32 45
  %378 = load i32, i32* %377, align 4
  %379 = icmp eq i32 %378, 2
  br i1 %379, label %380, label %449

; <label>:380:                                    ; preds = %375
  %381 = load i32, i32* %8, align 4
  %382 = icmp eq i32 %381, 1
  br i1 %382, label %383, label %449

; <label>:383:                                    ; preds = %380
  %384 = load %struct.III_side_info_t*, %struct.III_side_info_t** %11, align 4
  %385 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %384, i32 0, i32 4
  %386 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %385, i32 0, i32 0
  %387 = getelementptr inbounds %struct.anon, %struct.anon* %386, i32 0, i32 0
  %388 = load i32, i32* %9, align 4
  %389 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %387, i32 0, i32 %388
  %390 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %389, i32 0, i32 0
  %391 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %390, i32 0, i32 6
  %392 = load i32, i32* %391, align 4
  %393 = icmp ne i32 %392, 2
  br i1 %393, label %394, label %449

; <label>:394:                                    ; preds = %383
  %395 = load %struct.III_side_info_t*, %struct.III_side_info_t** %11, align 4
  %396 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %395, i32 0, i32 4
  %397 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %396, i32 0, i32 1
  %398 = getelementptr inbounds %struct.anon, %struct.anon* %397, i32 0, i32 0
  %399 = load i32, i32* %9, align 4
  %400 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %398, i32 0, i32 %399
  %401 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %400, i32 0, i32 0
  %402 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %401, i32 0, i32 6
  %403 = load i32, i32* %402, align 4
  %404 = icmp ne i32 %403, 2
  br i1 %404, label %405, label %449

; <label>:405:                                    ; preds = %394
  %406 = load %struct.III_side_info_t*, %struct.III_side_info_t** %11, align 4
  %407 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %406, i32 0, i32 4
  %408 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %407, i32 0, i32 0
  %409 = getelementptr inbounds %struct.anon, %struct.anon* %408, i32 0, i32 0
  %410 = load i32, i32* %9, align 4
  %411 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %409, i32 0, i32 %410
  %412 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %411, i32 0, i32 0
  %413 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %412, i32 0, i32 13
  %414 = load i32, i32* %413, align 4
  %415 = load %struct.III_side_info_t*, %struct.III_side_info_t** %11, align 4
  %416 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %415, i32 0, i32 4
  %417 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %416, i32 0, i32 1
  %418 = getelementptr inbounds %struct.anon, %struct.anon* %417, i32 0, i32 0
  %419 = load i32, i32* %9, align 4
  %420 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %418, i32 0, i32 %419
  %421 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %420, i32 0, i32 0
  %422 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %421, i32 0, i32 13
  %423 = load i32, i32* %422, align 4
  %424 = icmp eq i32 %414, %423
  br i1 %424, label %425, label %449

; <label>:425:                                    ; preds = %405
  %426 = load %struct.III_side_info_t*, %struct.III_side_info_t** %11, align 4
  %427 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %426, i32 0, i32 4
  %428 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %427, i32 0, i32 0
  %429 = getelementptr inbounds %struct.anon, %struct.anon* %428, i32 0, i32 0
  %430 = load i32, i32* %9, align 4
  %431 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %429, i32 0, i32 %430
  %432 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %431, i32 0, i32 0
  %433 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %432, i32 0, i32 12
  %434 = load i32, i32* %433, align 4
  %435 = load %struct.III_side_info_t*, %struct.III_side_info_t** %11, align 4
  %436 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %435, i32 0, i32 4
  %437 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %436, i32 0, i32 1
  %438 = getelementptr inbounds %struct.anon, %struct.anon* %437, i32 0, i32 0
  %439 = load i32, i32* %9, align 4
  %440 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %438, i32 0, i32 %439
  %441 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %440, i32 0, i32 0
  %442 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %441, i32 0, i32 12
  %443 = load i32, i32* %442, align 4
  %444 = icmp eq i32 %434, %443
  br i1 %444, label %445, label %449

; <label>:445:                                    ; preds = %425
  %446 = load i32, i32* %9, align 4
  %447 = load %struct.III_side_info_t*, %struct.III_side_info_t** %11, align 4
  %448 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  call arm_aapcscc void @scfsi_calc(i32 %446, %struct.III_side_info_t* %447, [2 x %struct.III_scalefac_t]* %448)
  br label %449

; <label>:449:                                    ; preds = %445, %425, %405, %394, %383, %380, %375
  %450 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %451 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %450, i32 0, i32 15
  %452 = load i32, i32* %451, align 4
  %453 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %454 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %453, i32 0, i32 0
  %455 = load i32, i32* %454, align 4
  %456 = add i32 %455, %452
  store i32 %456, i32* %454, align 4
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @scfsi_calc(i32, %struct.III_side_info_t*, [2 x %struct.III_scalefac_t]*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %5 = alloca %struct.III_side_info_t*, align 4
  %6 = alloca [2 x %struct.III_scalefac_t]*, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %13 = alloca %struct.gr_info*, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %14 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store %struct.III_side_info_t* %1, %struct.III_side_info_t** %5, align 4
  store [2 x %struct.III_scalefac_t]* %2, [2 x %struct.III_scalefac_t]** %6, align 4
  %15 = load %struct.III_side_info_t*, %struct.III_side_info_t** %5, align 4
  %16 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %15, i32 0, i32 4
  %17 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.anon, %struct.anon* %17, i32 0, i32 0
  %19 = load i32, i32* %4, align 4
  %20 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %18, i32 0, i32 %19
  %21 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %20, i32 0, i32 0
  store %struct.gr_info* %21, %struct.gr_info** %13, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec6
  store i32 0, i32* %7, align 4
  br label %22

; <label>:22:                                     ; preds = %32, %3
  %23 = load i32, i32* %7, align 4
  %24 = icmp slt i32 %23, 4
  br i1 %24, label %25, label %36

; <label>:25:                                     ; preds = %22
  %26 = load %struct.III_side_info_t*, %struct.III_side_info_t** %5, align 4
  %27 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %26, i32 0, i32 3
  %28 = load i32, i32* %4, align 4
  %29 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %27, i32 0, i32 %28
  %30 = load i32, i32* %7, align 4
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %29, i32 0, i32 %30
  store i32 0, i32* %31, align 4
  br label %32

; <label>:32:                                     ; preds = %25
  %33 = load i32, i32* %7, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %33, i32 0
  %insertElmt13 = insertelement <4 x i32> %insertElmt, i32 %33, i32 1
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %33, i32 2
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %33, i32 3
  store <4 x i32> %insertElmt15, <4 x i32>* %allocaVec6, align 16
  %34 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop = add <4 x i32> %34, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec6
  %35 = add nsw i32 %33, 1
  store i32 %35, i32* %7, align 4
  br label %22

; <label>:36:                                     ; preds = %22
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec6
  store i32 0, i32* %7, align 4
  br label %37

; <label>:37:                                     ; preds = %116, %36
  %38 = load i32, i32* %7, align 4
  %39 = icmp slt i32 %38, 4
  br i1 %39, label %40, label %120

; <label>:40:                                     ; preds = %37
  %41 = load i32, i32* %7, align 4
  %42 = getelementptr inbounds [5 x i32], [5 x i32]* @scfsi_calc.scfsi_band, i32 0, i32 %41
  %43 = load i32, i32* %42, align 4
  store i32 %43, i32* %12, align 4
  br label %44

; <label>:44:                                     ; preds = %72, %40
  %45 = load i32, i32* %12, align 4
  %46 = load i32, i32* %7, align 4
  %47 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop16 = add <4 x i32> %47, <i32 1, i32 1, i32 1, i32 1>
  %48 = add nsw i32 %46, 1
  %49 = getelementptr inbounds [5 x i32], [5 x i32]* @scfsi_calc.scfsi_band, i32 0, i32 %48
  %50 = load i32, i32* %49, align 4
  %51 = icmp slt i32 %45, %50
  br i1 %51, label %52, label %76

; <label>:52:                                     ; preds = %44
  %53 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %54 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %53, i32 0
  %55 = load i32, i32* %4, align 4
  %56 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %54, i32 0, i32 %55
  %57 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %56, i32 0, i32 0
  %58 = load i32, i32* %12, align 4
  %59 = getelementptr inbounds [22 x i32], [22 x i32]* %57, i32 0, i32 %58
  %60 = load i32, i32* %59, align 4
  %61 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %62 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %61, i32 1
  %63 = load i32, i32* %4, align 4
  %64 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %62, i32 0, i32 %63
  %65 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %64, i32 0, i32 0
  %66 = load i32, i32* %12, align 4
  %67 = getelementptr inbounds [22 x i32], [22 x i32]* %65, i32 0, i32 %66
  %68 = load i32, i32* %67, align 4
  %69 = icmp ne i32 %60, %68
  br i1 %69, label %70, label %71

; <label>:70:                                     ; preds = %52
  br label %76

; <label>:71:                                     ; preds = %52
  br label %72

; <label>:72:                                     ; preds = %71
  %73 = load i32, i32* %12, align 4
  %insertElmt17 = insertelement <4 x i32> undef, i32 %73, i32 0
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %73, i32 1
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %73, i32 2
  %insertElmt20 = insertelement <4 x i32> %insertElmt19, i32 %73, i32 3
  store <4 x i32> %insertElmt20, <4 x i32>* %allocaVec11, align 16
  %74 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop21 = add <4 x i32> %74, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop21, <4 x i32>* %allocaVec11
  %75 = add nsw i32 %73, 1
  store i32 %75, i32* %12, align 4
  br label %44

; <label>:76:                                     ; preds = %70, %44
  %77 = load i32, i32* %12, align 4
  %78 = load i32, i32* %7, align 4
  %79 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop22 = add <4 x i32> %79, <i32 1, i32 1, i32 1, i32 1>
  %80 = add nsw i32 %78, 1
  %81 = getelementptr inbounds [5 x i32], [5 x i32]* @scfsi_calc.scfsi_band, i32 0, i32 %80
  %82 = load i32, i32* %81, align 4
  %83 = icmp eq i32 %77, %82
  br i1 %83, label %84, label %115

; <label>:84:                                     ; preds = %76
  %85 = load i32, i32* %7, align 4
  %86 = getelementptr inbounds [5 x i32], [5 x i32]* @scfsi_calc.scfsi_band, i32 0, i32 %85
  %87 = load i32, i32* %86, align 4
  store i32 %87, i32* %12, align 4
  br label %88

; <label>:88:                                     ; preds = %104, %84
  %89 = load i32, i32* %12, align 4
  %90 = load i32, i32* %7, align 4
  %91 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop23 = add <4 x i32> %91, <i32 1, i32 1, i32 1, i32 1>
  %92 = add nsw i32 %90, 1
  %93 = getelementptr inbounds [5 x i32], [5 x i32]* @scfsi_calc.scfsi_band, i32 0, i32 %92
  %94 = load i32, i32* %93, align 4
  %95 = icmp slt i32 %89, %94
  br i1 %95, label %96, label %108

; <label>:96:                                     ; preds = %88
  %97 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %98 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %97, i32 1
  %99 = load i32, i32* %4, align 4
  %100 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %98, i32 0, i32 %99
  %101 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %100, i32 0, i32 0
  %102 = load i32, i32* %12, align 4
  %103 = getelementptr inbounds [22 x i32], [22 x i32]* %101, i32 0, i32 %102
  store i32 -1, i32* %103, align 4
  br label %104

; <label>:104:                                    ; preds = %96
  %105 = load i32, i32* %12, align 4
  %106 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop24 = add <4 x i32> %106, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop24, <4 x i32>* %allocaVec11
  %107 = add nsw i32 %105, 1
  store i32 %107, i32* %12, align 4
  br label %88

; <label>:108:                                    ; preds = %88
  %109 = load %struct.III_side_info_t*, %struct.III_side_info_t** %5, align 4
  %110 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %109, i32 0, i32 3
  %111 = load i32, i32* %4, align 4
  %112 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %110, i32 0, i32 %111
  %113 = load i32, i32* %7, align 4
  %114 = getelementptr inbounds [4 x i32], [4 x i32]* %112, i32 0, i32 %113
  store i32 1, i32* %114, align 4
  br label %115

; <label>:115:                                    ; preds = %108, %76
  br label %116

; <label>:116:                                    ; preds = %115
  %117 = load i32, i32* %7, align 4
  %118 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop25 = add <4 x i32> %118, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop25, <4 x i32>* %allocaVec6
  %119 = add nsw i32 %117, 1
  store i32 %119, i32* %7, align 4
  br label %37

; <label>:120:                                    ; preds = %37
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec9
  store i32 0, i32* %10, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec7
  store i32 0, i32* %8, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec11
  store i32 0, i32* %12, align 4
  br label %121

; <label>:121:                                    ; preds = %159, %120
  %122 = load i32, i32* %12, align 4
  %123 = icmp slt i32 %122, 11
  br i1 %123, label %124, label %163

; <label>:124:                                    ; preds = %121
  %125 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %126 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %125, i32 1
  %127 = load i32, i32* %4, align 4
  %128 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %126, i32 0, i32 %127
  %129 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %128, i32 0, i32 0
  %130 = load i32, i32* %12, align 4
  %131 = getelementptr inbounds [22 x i32], [22 x i32]* %129, i32 0, i32 %130
  %132 = load i32, i32* %131, align 4
  %133 = icmp slt i32 %132, 0
  br i1 %133, label %134, label %135

; <label>:134:                                    ; preds = %124
  br label %159

; <label>:135:                                    ; preds = %124
  %136 = load i32, i32* %10, align 4
  %insertElmt26 = insertelement <4 x i32> undef, i32 %136, i32 0
  %insertElmt27 = insertelement <4 x i32> %insertElmt26, i32 %136, i32 1
  %insertElmt28 = insertelement <4 x i32> %insertElmt27, i32 %136, i32 2
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %136, i32 3
  store <4 x i32> %insertElmt29, <4 x i32>* %allocaVec9, align 16
  %137 = load <4 x i32>, <4 x i32>* %allocaVec9, align 16
  %Vop30 = add <4 x i32> %137, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop30, <4 x i32>* %allocaVec9
  %138 = add nsw i32 %136, 1
  store i32 %138, i32* %10, align 4
  %139 = load i32, i32* %8, align 4
  %140 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %141 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %140, i32 1
  %142 = load i32, i32* %4, align 4
  %143 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %141, i32 0, i32 %142
  %144 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %143, i32 0, i32 0
  %145 = load i32, i32* %12, align 4
  %146 = getelementptr inbounds [22 x i32], [22 x i32]* %144, i32 0, i32 %145
  %147 = load i32, i32* %146, align 4
  %148 = icmp slt i32 %139, %147
  br i1 %148, label %149, label %158

; <label>:149:                                    ; preds = %135
  %150 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %151 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %150, i32 1
  %152 = load i32, i32* %4, align 4
  %153 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %151, i32 0, i32 %152
  %154 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %153, i32 0, i32 0
  %155 = load i32, i32* %12, align 4
  %156 = getelementptr inbounds [22 x i32], [22 x i32]* %154, i32 0, i32 %155
  %157 = load i32, i32* %156, align 4
  store i32 %157, i32* %8, align 4
  br label %158

; <label>:158:                                    ; preds = %149, %135
  br label %159

; <label>:159:                                    ; preds = %158, %134
  %160 = load i32, i32* %12, align 4
  %161 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop31 = add <4 x i32> %161, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop31, <4 x i32>* %allocaVec11
  %162 = add nsw i32 %160, 1
  store i32 %162, i32* %12, align 4
  br label %121

; <label>:163:                                    ; preds = %121
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec10
  store i32 0, i32* %11, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec8
  store i32 0, i32* %9, align 4
  br label %164

; <label>:164:                                    ; preds = %211, %163
  %165 = load i32, i32* %12, align 4
  %166 = icmp slt i32 %165, 21
  br i1 %166, label %167, label %212

; <label>:167:                                    ; preds = %164
  %168 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %169 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %168, i32 1
  %170 = load i32, i32* %4, align 4
  %171 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %169, i32 0, i32 %170
  %172 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %171, i32 0, i32 0
  %173 = load i32, i32* %12, align 4
  %174 = getelementptr inbounds [22 x i32], [22 x i32]* %172, i32 0, i32 %173
  %175 = load i32, i32* %174, align 4
  %176 = icmp slt i32 %175, 0
  br i1 %176, label %177, label %178

; <label>:177:                                    ; preds = %167
  br label %202

; <label>:178:                                    ; preds = %167
  %179 = load i32, i32* %11, align 4
  %insertElmt32 = insertelement <4 x i32> undef, i32 %179, i32 0
  %insertElmt33 = insertelement <4 x i32> %insertElmt32, i32 %179, i32 1
  %insertElmt34 = insertelement <4 x i32> %insertElmt33, i32 %179, i32 2
  %insertElmt35 = insertelement <4 x i32> %insertElmt34, i32 %179, i32 3
  store <4 x i32> %insertElmt35, <4 x i32>* %allocaVec10, align 16
  %180 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %Vop36 = add <4 x i32> %180, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop36, <4 x i32>* %allocaVec10
  %181 = add nsw i32 %179, 1
  store i32 %181, i32* %11, align 4
  %182 = load i32, i32* %9, align 4
  %183 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %184 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %183, i32 1
  %185 = load i32, i32* %4, align 4
  %186 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %184, i32 0, i32 %185
  %187 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %186, i32 0, i32 0
  %188 = load i32, i32* %12, align 4
  %189 = getelementptr inbounds [22 x i32], [22 x i32]* %187, i32 0, i32 %188
  %190 = load i32, i32* %189, align 4
  %191 = icmp slt i32 %182, %190
  br i1 %191, label %192, label %201

; <label>:192:                                    ; preds = %178
  %193 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %194 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %193, i32 1
  %195 = load i32, i32* %4, align 4
  %196 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %194, i32 0, i32 %195
  %197 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %196, i32 0, i32 0
  %198 = load i32, i32* %12, align 4
  %199 = getelementptr inbounds [22 x i32], [22 x i32]* %197, i32 0, i32 %198
  %200 = load i32, i32* %199, align 4
  store i32 %200, i32* %9, align 4
  br label %201

; <label>:201:                                    ; preds = %192, %178
  br label %202

; <label>:202:                                    ; preds = %201, %177
  %203 = load i32, i32* %12, align 4
  %204 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop37 = add <4 x i32> %204, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop37, <4 x i32>* %allocaVec11
  %205 = load <4 x i32>, <4 x i32>* %allocaVec11, align 4
  %extractE = extractelement <4 x i32> %205, i64 0
  %extractE38 = extractelement <4 x i32> %205, i64 1
  %extractE39 = extractelement <4 x i32> %205, i64 2
  %sum = add i32 %extractE, %extractE38
  %sum40 = add i32 %sum, %extractE39
  %206 = add nsw i32 %203, 1
  %Fmul = mul i32 %206, 3
  store i32 %206, i32* %Recovery
  %Fcmp = icmp ne i32 %sum40, %Fmul
  br i1 %Fcmp, label %207, label %211

; <label>:207:                                    ; preds = %202
  %remThree = sdiv i32 %sum40, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %208, label %209

; <label>:208:                                    ; preds = %207
  store i32 %206, i32* %Recovery, align 4
  br label %210

; <label>:209:                                    ; preds = %207
  store i32 %extractE, i32* %Recovery, align 4
  br label %210

; <label>:210:                                    ; preds = %209, %208
  br label %211

; <label>:211:                                    ; preds = %202, %210
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %12, align 4
  br label %164

; <label>:212:                                    ; preds = %164
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec6
  store i32 0, i32* %7, align 4
  br label %213

; <label>:213:                                    ; preds = %263, %212
  %214 = load i32, i32* %7, align 4
  %215 = icmp slt i32 %214, 16
  br i1 %215, label %216, label %264

; <label>:216:                                    ; preds = %213
  %217 = load i32, i32* %8, align 4
  %218 = load i32, i32* %7, align 4
  %219 = getelementptr inbounds [16 x i32], [16 x i32]* @scfsi_calc.slen1_n, i32 0, i32 %218
  %220 = load i32, i32* %219, align 4
  %221 = icmp slt i32 %217, %220
  br i1 %221, label %222, label %253

; <label>:222:                                    ; preds = %216
  %223 = load i32, i32* %9, align 4
  %224 = load i32, i32* %7, align 4
  %225 = getelementptr inbounds [16 x i32], [16 x i32]* @scfsi_calc.slen2_n, i32 0, i32 %224
  %226 = load i32, i32* %225, align 4
  %227 = icmp slt i32 %223, %226
  br i1 %227, label %228, label %253

; <label>:228:                                    ; preds = %222
  %229 = load i32, i32* %7, align 4
  %230 = getelementptr inbounds [16 x i32], [16 x i32]* @scfsi_calc.slen1_tab, i32 0, i32 %229
  %231 = load i32, i32* %230, align 4
  %232 = load i32, i32* %10, align 4
  %233 = mul nsw i32 %231, %232
  %234 = load i32, i32* %7, align 4
  %235 = getelementptr inbounds [16 x i32], [16 x i32]* @scfsi_calc.slen2_tab, i32 0, i32 %234
  %236 = load i32, i32* %235, align 4
  %237 = load i32, i32* %11, align 4
  %238 = mul nsw i32 %236, %237
  %239 = add nsw i32 %233, %238
  store i32 %239, i32* %14, align 4
  %240 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %241 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %240, i32 0, i32 15
  %242 = load i32, i32* %241, align 4
  %243 = load i32, i32* %14, align 4
  %244 = icmp sgt i32 %242, %243
  br i1 %244, label %245, label %252

; <label>:245:                                    ; preds = %228
  %246 = load i32, i32* %14, align 4
  %247 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %248 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %247, i32 0, i32 15
  store i32 %246, i32* %248, align 4
  %249 = load i32, i32* %7, align 4
  %250 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %251 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %250, i32 0, i32 4
  store i32 %249, i32* %251, align 4
  br label %252

; <label>:252:                                    ; preds = %245, %228
  br label %253

; <label>:253:                                    ; preds = %252, %222, %216
  br label %254

; <label>:254:                                    ; preds = %253
  %255 = load i32, i32* %7, align 4
  %256 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop41 = add <4 x i32> %256, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop41, <4 x i32>* %allocaVec6
  %257 = load <4 x i32>, <4 x i32>* %allocaVec6, align 4
  %extractE43 = extractelement <4 x i32> %257, i64 0
  %extractE44 = extractelement <4 x i32> %257, i64 1
  %extractE45 = extractelement <4 x i32> %257, i64 2
  %sum46 = add i32 %extractE43, %extractE44
  %sum47 = add i32 %sum46, %extractE45
  %258 = add nsw i32 %255, 1
  %Fmul42 = mul i32 %258, 3
  store i32 %258, i32* %Recovery2
  %Fcmp48 = icmp ne i32 %sum47, %Fmul42
  br i1 %Fcmp48, label %259, label %263

; <label>:259:                                    ; preds = %254
  %remThree49 = sdiv i32 %sum47, %extractE43
  %FcmpThree50 = icmp ne i32 %remThree49, 3
  br i1 %FcmpThree50, label %260, label %261

; <label>:260:                                    ; preds = %259
  store i32 %258, i32* %Recovery2, align 4
  br label %262

; <label>:261:                                    ; preds = %259
  store i32 %extractE43, i32* %Recovery2, align 4
  br label %262

; <label>:262:                                    ; preds = %261, %260
  br label %263

; <label>:263:                                    ; preds = %254, %262
  %ReplaceInst51 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst51, i32* %7, align 4
  br label %213

; <label>:264:                                    ; preds = %213
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc float @ts_real_time(i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %2 = alloca i32, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = call arm_aapcscc i32 @time(i32* %3)
  %5 = load i32, i32* %2, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %9

; <label>:7:                                      ; preds = %1
  %8 = load i32, i32* %3, align 4
  store i32 %8, i32* @ts_real_time.initial_time, align 4
  br label %9

; <label>:9:                                      ; preds = %7, %1
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* @ts_real_time.initial_time, align 4
  %12 = call arm_aapcscc double @difftime(i32 %10, i32 %11)
  %13 = fptrunc double %12 to float
  ret float %13
}

declare arm_aapcscc i32 @time(i32*) #3

declare arm_aapcscc double @difftime(i32, i32) #3

; Function Attrs: nounwind
define arm_aapcscc float @ts_process_time(i32) #0 {
  %allocaVec = alloca <4 x float>, align 16
  %CastInst = alloca float, align 4
  %CastInstVec = alloca <4 x float>, align 16
  %allocaVec1 = alloca <4 x i32>, align 16
  %2 = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = call arm_aapcscc i32 @clock()
  store i32 %4, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %9

; <label>:7:                                      ; preds = %1
  %8 = load i32, i32* %3, align 4
  store i32 %8, i32* @ts_process_time.initial_time, align 4
  br label %9

; <label>:9:                                      ; preds = %7, %1
  %10 = load i32, i32* %3, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %10, i32 0
  %insertElmt3 = insertelement <4 x i32> %insertElmt, i32 %10, i32 1
  %insertElmt4 = insertelement <4 x i32> %insertElmt3, i32 %10, i32 2
  %insertElmt5 = insertelement <4 x i32> %insertElmt4, i32 %10, i32 3
  store <4 x i32> %insertElmt5, <4 x i32>* %allocaVec2, align 16
  %11 = load i32, i32* @ts_process_time.initial_time, align 4
  %12 = sub nsw i32 %10, %11
  %13 = sitofp i32 %12 to float
  %14 = fdiv float %13, 1.000000e+06
  ret float %14
}

declare arm_aapcscc i32 @clock() #3

; Function Attrs: nounwind
define arm_aapcscc void @ts_calc_times(%struct.ts_times*, i32, i32, i32, i32) #0 {
  %allocaVec = alloca <4 x float>, align 16
  %CastInst = alloca float, align 4
  %CastInstVec = alloca <4 x float>, align 16
  %allocaVec9 = alloca <4 x float>, align 16
  %CastInst1 = alloca float, align 4
  %CastInstVec2 = alloca <4 x float>, align 16
  %allocaVec10 = alloca <4 x float>, align 16
  %CastInst3 = alloca float, align 4
  %CastInstVec4 = alloca <4 x float>, align 16
  %allocaVec11 = alloca <4 x float>, align 16
  %CastInst5 = alloca float, align 4
  %CastInstVec6 = alloca <4 x float>, align 16
  %allocaVec12 = alloca <4 x float>, align 16
  %CastInst7 = alloca float, align 4
  %CastInstVec8 = alloca <4 x float>, align 16
  %6 = alloca %struct.ts_times*, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec14 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  store %struct.ts_times* %0, %struct.ts_times** %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32 %4, i32* %10, align 4
  %11 = load i32, i32* %8, align 4
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %61

; <label>:13:                                     ; preds = %5
  %14 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %15 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %14, i32 0, i32 0
  %16 = load float, float* %15, align 4
  %17 = load i32, i32* %9, align 4
  %18 = sitofp i32 %17 to float
  %19 = fmul float %16, %18
  %20 = load i32, i32* %8, align 4
  %21 = sitofp i32 %20 to float
  %22 = fdiv float %19, %21
  %23 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %24 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %23, i32 0, i32 1
  store float %22, float* %24, align 4
  %25 = load i32, i32* %7, align 4
  %26 = sitofp i32 %25 to float
  %27 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %28 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %27, i32 0, i32 1
  %29 = load float, float* %28, align 4
  %30 = fmul float %26, %29
  %31 = fcmp ogt float %30, 0.000000e+00
  br i1 %31, label %32, label %48

; <label>:32:                                     ; preds = %13
  %33 = load i32, i32* %9, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %33, i32 0
  %insertElmt17 = insertelement <4 x i32> %insertElmt, i32 %33, i32 1
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %33, i32 2
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %33, i32 3
  store <4 x i32> %insertElmt19, <4 x i32>* %allocaVec15, align 16
  %34 = load i32, i32* %10, align 4
  %insertElmt20 = insertelement <4 x i32> undef, i32 %34, i32 0
  %insertElmt21 = insertelement <4 x i32> %insertElmt20, i32 %34, i32 1
  %insertElmt22 = insertelement <4 x i32> %insertElmt21, i32 %34, i32 2
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %34, i32 3
  store <4 x i32> %insertElmt23, <4 x i32>* %allocaVec16, align 16
  %35 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %36 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop = mul <4 x i32> %35, %36
  %37 = mul nsw i32 %33, %34
  %38 = sitofp i32 %37 to float
  %39 = load i32, i32* %7, align 4
  %40 = sitofp i32 %39 to float
  %41 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %42 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %41, i32 0, i32 1
  %43 = load float, float* %42, align 4
  %44 = fmul float %40, %43
  %45 = fdiv float %38, %44
  %46 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %47 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %46, i32 0, i32 2
  store float %45, float* %47, align 4
  br label %51

; <label>:48:                                     ; preds = %13
  %49 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %50 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %49, i32 0, i32 2
  store float 0.000000e+00, float* %50, align 4
  br label %51

; <label>:51:                                     ; preds = %48, %32
  %52 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %53 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %52, i32 0, i32 1
  %54 = load float, float* %53, align 4
  %55 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %56 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %55, i32 0, i32 0
  %57 = load float, float* %56, align 4
  %58 = fsub float %54, %57
  %59 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %60 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %59, i32 0, i32 3
  store float %58, float* %60, align 4
  br label %68

; <label>:61:                                     ; preds = %5
  %62 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %63 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %62, i32 0, i32 1
  store float 0.000000e+00, float* %63, align 4
  %64 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %65 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %64, i32 0, i32 2
  store float 0.000000e+00, float* %65, align 4
  %66 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %67 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %66, i32 0, i32 3
  store float 0.000000e+00, float* %67, align 4
  br label %68

; <label>:68:                                     ; preds = %61, %51
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @timestatus(i32, i32, i32, i32) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec63 = alloca <2 x double>, align 16
  %CastInst1 = alloca double, align 4
  %CastInstVec2 = alloca <2 x double>, align 16
  %allocaVec64 = alloca <2 x double>, align 16
  %CastInst3 = alloca double, align 4
  %CastInstVec4 = alloca <2 x double>, align 16
  %allocaVec65 = alloca <4 x i32>, align 16
  %CastInst5 = alloca i32, align 4
  %CastInstVec6 = alloca <4 x i32>, align 16
  %allocaVec66 = alloca <2 x double>, align 16
  %CastInst7 = alloca double, align 4
  %CastInstVec8 = alloca <2 x double>, align 16
  %allocaVec67 = alloca <4 x i32>, align 16
  %CastInst9 = alloca i32, align 4
  %CastInstVec10 = alloca <4 x i32>, align 16
  %allocaVec68 = alloca <2 x double>, align 16
  %CastInst11 = alloca double, align 4
  %CastInstVec12 = alloca <2 x double>, align 16
  %allocaVec69 = alloca <4 x i32>, align 16
  %CastInst13 = alloca i32, align 4
  %CastInstVec14 = alloca <4 x i32>, align 16
  %allocaVec70 = alloca <2 x double>, align 16
  %CastInst15 = alloca double, align 4
  %CastInstVec16 = alloca <2 x double>, align 16
  %allocaVec71 = alloca <4 x i32>, align 16
  %CastInst17 = alloca i32, align 4
  %CastInstVec18 = alloca <4 x i32>, align 16
  %allocaVec72 = alloca <2 x double>, align 16
  %CastInst19 = alloca double, align 4
  %CastInstVec20 = alloca <2 x double>, align 16
  %allocaVec73 = alloca <4 x i32>, align 16
  %CastInst21 = alloca i32, align 4
  %CastInstVec22 = alloca <4 x i32>, align 16
  %allocaVec74 = alloca <2 x double>, align 16
  %CastInst23 = alloca double, align 4
  %CastInstVec24 = alloca <2 x double>, align 16
  %allocaVec75 = alloca <4 x i32>, align 16
  %CastInst25 = alloca i32, align 4
  %CastInstVec26 = alloca <4 x i32>, align 16
  %allocaVec76 = alloca <2 x double>, align 16
  %CastInst27 = alloca double, align 4
  %CastInstVec28 = alloca <2 x double>, align 16
  %allocaVec77 = alloca <4 x i32>, align 16
  %CastInst29 = alloca i32, align 4
  %CastInstVec30 = alloca <4 x i32>, align 16
  %allocaVec78 = alloca <2 x double>, align 16
  %CastInst31 = alloca double, align 4
  %CastInstVec32 = alloca <2 x double>, align 16
  %allocaVec79 = alloca <4 x i32>, align 16
  %CastInst33 = alloca i32, align 4
  %CastInstVec34 = alloca <4 x i32>, align 16
  %allocaVec80 = alloca <2 x double>, align 16
  %CastInst35 = alloca double, align 4
  %CastInstVec36 = alloca <2 x double>, align 16
  %allocaVec81 = alloca <4 x i32>, align 16
  %CastInst37 = alloca i32, align 4
  %CastInstVec38 = alloca <4 x i32>, align 16
  %allocaVec82 = alloca <2 x double>, align 16
  %CastInst39 = alloca double, align 4
  %CastInstVec40 = alloca <2 x double>, align 16
  %allocaVec83 = alloca <4 x i32>, align 16
  %CastInst41 = alloca i32, align 4
  %CastInstVec42 = alloca <4 x i32>, align 16
  %allocaVec84 = alloca <2 x double>, align 16
  %CastInst43 = alloca double, align 4
  %CastInstVec44 = alloca <2 x double>, align 16
  %allocaVec85 = alloca <4 x i32>, align 16
  %CastInst45 = alloca i32, align 4
  %CastInstVec46 = alloca <4 x i32>, align 16
  %allocaVec86 = alloca <2 x double>, align 16
  %CastInst47 = alloca double, align 4
  %CastInstVec48 = alloca <2 x double>, align 16
  %allocaVec87 = alloca <4 x i32>, align 16
  %CastInst49 = alloca i32, align 4
  %CastInstVec50 = alloca <4 x i32>, align 16
  %allocaVec88 = alloca <2 x double>, align 16
  %CastInst51 = alloca double, align 4
  %CastInstVec52 = alloca <2 x double>, align 16
  %allocaVec89 = alloca <4 x i32>, align 16
  %CastInst53 = alloca i32, align 4
  %CastInstVec54 = alloca <4 x i32>, align 16
  %allocaVec90 = alloca <2 x double>, align 16
  %CastInst55 = alloca double, align 4
  %CastInstVec56 = alloca <2 x double>, align 16
  %allocaVec91 = alloca <4 x i32>, align 16
  %CastInst57 = alloca i32, align 4
  %CastInstVec58 = alloca <4 x i32>, align 16
  %allocaVec92 = alloca <2 x double>, align 16
  %CastInst59 = alloca double, align 4
  %CastInstVec60 = alloca <2 x double>, align 16
  %allocaVec93 = alloca <4 x i32>, align 16
  %CastInst61 = alloca i32, align 4
  %CastInstVec62 = alloca <4 x i32>, align 16
  %allocaVec94 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec95 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec96 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec97 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %9 = alloca %struct.ts_times, align 4
  %10 = alloca %struct.ts_times, align 4
  %allocaVec98 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %12 = load i32, i32* %6, align 4
  %13 = call arm_aapcscc float @ts_real_time(i32 %12)
  %14 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 0
  store float %13, float* %14, align 4
  %15 = load i32, i32* %6, align 4
  %16 = call arm_aapcscc float @ts_process_time(i32 %15)
  %17 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %10, i32 0, i32 0
  store float %16, float* %17, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

; <label>:20:                                     ; preds = %4
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %22 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.294, i32 0, i32 0))
  br label %217

; <label>:23:                                     ; preds = %4
  %24 = load i32, i32* %5, align 4
  %25 = load i32, i32* %6, align 4
  %26 = load i32, i32* %7, align 4
  %27 = load i32, i32* %8, align 4
  call arm_aapcscc void @ts_calc_times(%struct.ts_times* %9, i32 %24, i32 %25, i32 %26, i32 %27)
  %28 = load i32, i32* %5, align 4
  %29 = load i32, i32* %6, align 4
  %30 = load i32, i32* %7, align 4
  %31 = load i32, i32* %8, align 4
  call arm_aapcscc void @ts_calc_times(%struct.ts_times* %10, i32 %28, i32 %29, i32 %30, i32 %31)
  %32 = load i32, i32* %7, align 4
  %33 = icmp sgt i32 %32, 1
  br i1 %33, label %34, label %48

; <label>:34:                                     ; preds = %23
  %35 = load i32, i32* %6, align 4
  %36 = sitofp i32 %35 to double
  store double %36, double* %CastInst
  %37 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %37, i32 0
  %insertCast99 = insertelement <2 x double> %insertCast, double %37, i32 1
  store <2 x double> %insertCast99, <2 x double>* %CastInstVec, align 4
  %38 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %Vop = fmul <2 x double> <double 1.000000e+02, double 1.000000e+02>, %38
  %39 = fmul double 1.000000e+02, %36
  %40 = load i32, i32* %7, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %40, i32 0
  %insertElmt100 = insertelement <4 x i32> %insertElmt, i32 %40, i32 1
  %insertElmt101 = insertelement <4 x i32> %insertElmt100, i32 %40, i32 2
  %insertElmt102 = insertelement <4 x i32> %insertElmt101, i32 %40, i32 3
  store <4 x i32> %insertElmt102, <4 x i32>* %allocaVec96, align 16
  %41 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop103 = sub <4 x i32> %41, <i32 1, i32 1, i32 1, i32 1>
  %42 = sub nsw i32 %40, 1
  %43 = sitofp i32 %42 to double
  store double %43, double* %CastInst1
  %44 = load double, double* %CastInst1, align 4
  %insertCast104 = insertelement <2 x double> undef, double %44, i32 0
  %insertCast105 = insertelement <2 x double> %insertCast104, double %44, i32 1
  store <2 x double> %insertCast105, <2 x double>* %CastInstVec2, align 4
  %45 = load <2 x double>, <2 x double>* %CastInstVec2, align 4
  %Vop106 = fdiv <2 x double> %Vop, %45
  %46 = fdiv double %39, %43
  %47 = fptosi double %46 to i32
  store i32 %47, i32* %11, align 4
  br label %49

; <label>:48:                                     ; preds = %23
  store <4 x i32> <i32 100, i32 100, i32 100, i32 100>, <4 x i32>* %allocaVec98
  store i32 100, i32* %11, align 4
  br label %49

; <label>:49:                                     ; preds = %48, %34
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %51 = load i32, i32* %6, align 4
  %52 = load i32, i32* %7, align 4
  %insertElmt107 = insertelement <4 x i32> undef, i32 %52, i32 0
  %insertElmt108 = insertelement <4 x i32> %insertElmt107, i32 %52, i32 1
  %insertElmt109 = insertelement <4 x i32> %insertElmt108, i32 %52, i32 2
  %insertElmt110 = insertelement <4 x i32> %insertElmt109, i32 %52, i32 3
  store <4 x i32> %insertElmt110, <4 x i32>* %allocaVec96, align 16
  %53 = load <4 x i32>, <4 x i32>* %allocaVec96, align 16
  %Vop111 = sub <4 x i32> %53, <i32 1, i32 1, i32 1, i32 1>
  %54 = sub nsw i32 %52, 1
  %55 = load i32, i32* %11, align 4
  %56 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %10, i32 0, i32 0
  %57 = load float, float* %56, align 4
  %58 = fpext float %57 to double
  store double %58, double* %CastInst3
  %59 = load double, double* %CastInst3, align 4
  %insertCast112 = insertelement <2 x double> undef, double %59, i32 0
  %insertCast113 = insertelement <2 x double> %insertCast112, double %59, i32 1
  store <2 x double> %insertCast113, <2 x double>* %CastInstVec4, align 4
  %60 = load <2 x double>, <2 x double>* %CastInstVec4, align 4
  %Vop114 = fadd <2 x double> %60, <double 5.000000e-01, double 5.000000e-01>
  %61 = fadd double %58, 5.000000e-01
  %62 = fptosi double %61 to i32
  store i32 %62, i32* %CastInst5
  %63 = load i32, i32* %CastInst5, align 4
  %insertCast115 = insertelement <4 x i32> undef, i32 %63, i32 0
  %insertCast116 = insertelement <4 x i32> %insertCast115, i32 %63, i32 1
  %insertCast117 = insertelement <4 x i32> %insertCast116, i32 %63, i32 2
  %insertCast118 = insertelement <4 x i32> %insertCast117, i32 %63, i32 3
  store <4 x i32> %insertCast118, <4 x i32>* %CastInstVec6, align 4
  %64 = load <4 x i32>, <4 x i32>* %CastInstVec6, align 4
  %Vop119 = sdiv <4 x i32> %64, <i32 3600, i32 3600, i32 3600, i32 3600>
  %65 = sdiv i32 %62, 3600
  %66 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %10, i32 0, i32 0
  %67 = load float, float* %66, align 4
  %68 = fpext float %67 to double
  store double %68, double* %CastInst7
  %69 = load double, double* %CastInst7, align 4
  %insertCast120 = insertelement <2 x double> undef, double %69, i32 0
  %insertCast121 = insertelement <2 x double> %insertCast120, double %69, i32 1
  store <2 x double> %insertCast121, <2 x double>* %CastInstVec8, align 4
  %70 = load <2 x double>, <2 x double>* %CastInstVec8, align 4
  %Vop122 = fadd <2 x double> %70, <double 5.000000e-01, double 5.000000e-01>
  %71 = fadd double %68, 5.000000e-01
  %Vop123 = fdiv <2 x double> %Vop122, <double 6.000000e+01, double 6.000000e+01>
  %72 = fdiv double %71, 6.000000e+01
  %73 = fptosi double %72 to i32
  store i32 %73, i32* %CastInst9
  %74 = load i32, i32* %CastInst9, align 4
  %insertCast124 = insertelement <4 x i32> undef, i32 %74, i32 0
  %insertCast125 = insertelement <4 x i32> %insertCast124, i32 %74, i32 1
  %insertCast126 = insertelement <4 x i32> %insertCast125, i32 %74, i32 2
  %insertCast127 = insertelement <4 x i32> %insertCast126, i32 %74, i32 3
  store <4 x i32> %insertCast127, <4 x i32>* %CastInstVec10, align 4
  %75 = load <4 x i32>, <4 x i32>* %CastInstVec10, align 4
  %Vop128 = srem <4 x i32> %75, <i32 60, i32 60, i32 60, i32 60>
  %76 = srem i32 %73, 60
  %77 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %10, i32 0, i32 0
  %78 = load float, float* %77, align 4
  %79 = fpext float %78 to double
  store double %79, double* %CastInst11
  %80 = load double, double* %CastInst11, align 4
  %insertCast129 = insertelement <2 x double> undef, double %80, i32 0
  %insertCast130 = insertelement <2 x double> %insertCast129, double %80, i32 1
  store <2 x double> %insertCast130, <2 x double>* %CastInstVec12, align 4
  %81 = load <2 x double>, <2 x double>* %CastInstVec12, align 4
  %Vop131 = fadd <2 x double> %81, <double 5.000000e-01, double 5.000000e-01>
  %82 = fadd double %79, 5.000000e-01
  %83 = fptosi double %82 to i32
  store i32 %83, i32* %CastInst13
  %84 = load i32, i32* %CastInst13, align 4
  %insertCast132 = insertelement <4 x i32> undef, i32 %84, i32 0
  %insertCast133 = insertelement <4 x i32> %insertCast132, i32 %84, i32 1
  %insertCast134 = insertelement <4 x i32> %insertCast133, i32 %84, i32 2
  %insertCast135 = insertelement <4 x i32> %insertCast134, i32 %84, i32 3
  store <4 x i32> %insertCast135, <4 x i32>* %CastInstVec14, align 4
  %85 = load <4 x i32>, <4 x i32>* %CastInstVec14, align 4
  %Vop136 = srem <4 x i32> %85, <i32 60, i32 60, i32 60, i32 60>
  %86 = srem i32 %83, 60
  %87 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %10, i32 0, i32 1
  %88 = load float, float* %87, align 4
  %89 = fpext float %88 to double
  store double %89, double* %CastInst15
  %90 = load double, double* %CastInst15, align 4
  %insertCast137 = insertelement <2 x double> undef, double %90, i32 0
  %insertCast138 = insertelement <2 x double> %insertCast137, double %90, i32 1
  store <2 x double> %insertCast138, <2 x double>* %CastInstVec16, align 4
  %91 = load <2 x double>, <2 x double>* %CastInstVec16, align 4
  %Vop139 = fadd <2 x double> %91, <double 5.000000e-01, double 5.000000e-01>
  %92 = fadd double %89, 5.000000e-01
  %93 = fptosi double %92 to i32
  store i32 %93, i32* %CastInst17
  %94 = load i32, i32* %CastInst17, align 4
  %insertCast140 = insertelement <4 x i32> undef, i32 %94, i32 0
  %insertCast141 = insertelement <4 x i32> %insertCast140, i32 %94, i32 1
  %insertCast142 = insertelement <4 x i32> %insertCast141, i32 %94, i32 2
  %insertCast143 = insertelement <4 x i32> %insertCast142, i32 %94, i32 3
  store <4 x i32> %insertCast143, <4 x i32>* %CastInstVec18, align 4
  %95 = load <4 x i32>, <4 x i32>* %CastInstVec18, align 4
  %Vop144 = sdiv <4 x i32> %95, <i32 3600, i32 3600, i32 3600, i32 3600>
  %96 = sdiv i32 %93, 3600
  %97 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %10, i32 0, i32 1
  %98 = load float, float* %97, align 4
  %99 = fpext float %98 to double
  store double %99, double* %CastInst19
  %100 = load double, double* %CastInst19, align 4
  %insertCast145 = insertelement <2 x double> undef, double %100, i32 0
  %insertCast146 = insertelement <2 x double> %insertCast145, double %100, i32 1
  store <2 x double> %insertCast146, <2 x double>* %CastInstVec20, align 4
  %101 = load <2 x double>, <2 x double>* %CastInstVec20, align 4
  %Vop147 = fadd <2 x double> %101, <double 5.000000e-01, double 5.000000e-01>
  %102 = fadd double %99, 5.000000e-01
  %Vop148 = fdiv <2 x double> %Vop147, <double 6.000000e+01, double 6.000000e+01>
  %103 = fdiv double %102, 6.000000e+01
  %104 = fptosi double %103 to i32
  store i32 %104, i32* %CastInst21
  %105 = load i32, i32* %CastInst21, align 4
  %insertCast149 = insertelement <4 x i32> undef, i32 %105, i32 0
  %insertCast150 = insertelement <4 x i32> %insertCast149, i32 %105, i32 1
  %insertCast151 = insertelement <4 x i32> %insertCast150, i32 %105, i32 2
  %insertCast152 = insertelement <4 x i32> %insertCast151, i32 %105, i32 3
  store <4 x i32> %insertCast152, <4 x i32>* %CastInstVec22, align 4
  %106 = load <4 x i32>, <4 x i32>* %CastInstVec22, align 4
  %Vop153 = srem <4 x i32> %106, <i32 60, i32 60, i32 60, i32 60>
  %107 = srem i32 %104, 60
  %108 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %10, i32 0, i32 1
  %109 = load float, float* %108, align 4
  %110 = fpext float %109 to double
  store double %110, double* %CastInst23
  %111 = load double, double* %CastInst23, align 4
  %insertCast154 = insertelement <2 x double> undef, double %111, i32 0
  %insertCast155 = insertelement <2 x double> %insertCast154, double %111, i32 1
  store <2 x double> %insertCast155, <2 x double>* %CastInstVec24, align 4
  %112 = load <2 x double>, <2 x double>* %CastInstVec24, align 4
  %Vop156 = fadd <2 x double> %112, <double 5.000000e-01, double 5.000000e-01>
  %113 = fadd double %110, 5.000000e-01
  %114 = fptosi double %113 to i32
  store i32 %114, i32* %CastInst25
  %115 = load i32, i32* %CastInst25, align 4
  %insertCast157 = insertelement <4 x i32> undef, i32 %115, i32 0
  %insertCast158 = insertelement <4 x i32> %insertCast157, i32 %115, i32 1
  %insertCast159 = insertelement <4 x i32> %insertCast158, i32 %115, i32 2
  %insertCast160 = insertelement <4 x i32> %insertCast159, i32 %115, i32 3
  store <4 x i32> %insertCast160, <4 x i32>* %CastInstVec26, align 4
  %116 = load <4 x i32>, <4 x i32>* %CastInstVec26, align 4
  %Vop161 = srem <4 x i32> %116, <i32 60, i32 60, i32 60, i32 60>
  %117 = srem i32 %114, 60
  %118 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 0
  %119 = load float, float* %118, align 4
  %120 = fpext float %119 to double
  store double %120, double* %CastInst27
  %121 = load double, double* %CastInst27, align 4
  %insertCast162 = insertelement <2 x double> undef, double %121, i32 0
  %insertCast163 = insertelement <2 x double> %insertCast162, double %121, i32 1
  store <2 x double> %insertCast163, <2 x double>* %CastInstVec28, align 4
  %122 = load <2 x double>, <2 x double>* %CastInstVec28, align 4
  %Vop164 = fadd <2 x double> %122, <double 5.000000e-01, double 5.000000e-01>
  %123 = fadd double %120, 5.000000e-01
  %124 = fptosi double %123 to i32
  store i32 %124, i32* %CastInst29
  %125 = load i32, i32* %CastInst29, align 4
  %insertCast165 = insertelement <4 x i32> undef, i32 %125, i32 0
  %insertCast166 = insertelement <4 x i32> %insertCast165, i32 %125, i32 1
  %insertCast167 = insertelement <4 x i32> %insertCast166, i32 %125, i32 2
  %insertCast168 = insertelement <4 x i32> %insertCast167, i32 %125, i32 3
  store <4 x i32> %insertCast168, <4 x i32>* %CastInstVec30, align 4
  %126 = load <4 x i32>, <4 x i32>* %CastInstVec30, align 4
  %Vop169 = sdiv <4 x i32> %126, <i32 3600, i32 3600, i32 3600, i32 3600>
  %127 = sdiv i32 %124, 3600
  %128 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 0
  %129 = load float, float* %128, align 4
  %130 = fpext float %129 to double
  store double %130, double* %CastInst31
  %131 = load double, double* %CastInst31, align 4
  %insertCast170 = insertelement <2 x double> undef, double %131, i32 0
  %insertCast171 = insertelement <2 x double> %insertCast170, double %131, i32 1
  store <2 x double> %insertCast171, <2 x double>* %CastInstVec32, align 4
  %132 = load <2 x double>, <2 x double>* %CastInstVec32, align 4
  %Vop172 = fadd <2 x double> %132, <double 5.000000e-01, double 5.000000e-01>
  %133 = fadd double %130, 5.000000e-01
  %Vop173 = fdiv <2 x double> %Vop172, <double 6.000000e+01, double 6.000000e+01>
  %134 = fdiv double %133, 6.000000e+01
  %135 = fptosi double %134 to i32
  store i32 %135, i32* %CastInst33
  %136 = load i32, i32* %CastInst33, align 4
  %insertCast174 = insertelement <4 x i32> undef, i32 %136, i32 0
  %insertCast175 = insertelement <4 x i32> %insertCast174, i32 %136, i32 1
  %insertCast176 = insertelement <4 x i32> %insertCast175, i32 %136, i32 2
  %insertCast177 = insertelement <4 x i32> %insertCast176, i32 %136, i32 3
  store <4 x i32> %insertCast177, <4 x i32>* %CastInstVec34, align 4
  %137 = load <4 x i32>, <4 x i32>* %CastInstVec34, align 4
  %Vop178 = srem <4 x i32> %137, <i32 60, i32 60, i32 60, i32 60>
  %138 = srem i32 %135, 60
  %139 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 0
  %140 = load float, float* %139, align 4
  %141 = fpext float %140 to double
  store double %141, double* %CastInst35
  %142 = load double, double* %CastInst35, align 4
  %insertCast179 = insertelement <2 x double> undef, double %142, i32 0
  %insertCast180 = insertelement <2 x double> %insertCast179, double %142, i32 1
  store <2 x double> %insertCast180, <2 x double>* %CastInstVec36, align 4
  %143 = load <2 x double>, <2 x double>* %CastInstVec36, align 4
  %Vop181 = fadd <2 x double> %143, <double 5.000000e-01, double 5.000000e-01>
  %144 = fadd double %141, 5.000000e-01
  %145 = fptosi double %144 to i32
  store i32 %145, i32* %CastInst37
  %146 = load i32, i32* %CastInst37, align 4
  %insertCast182 = insertelement <4 x i32> undef, i32 %146, i32 0
  %insertCast183 = insertelement <4 x i32> %insertCast182, i32 %146, i32 1
  %insertCast184 = insertelement <4 x i32> %insertCast183, i32 %146, i32 2
  %insertCast185 = insertelement <4 x i32> %insertCast184, i32 %146, i32 3
  store <4 x i32> %insertCast185, <4 x i32>* %CastInstVec38, align 4
  %147 = load <4 x i32>, <4 x i32>* %CastInstVec38, align 4
  %Vop186 = srem <4 x i32> %147, <i32 60, i32 60, i32 60, i32 60>
  %148 = srem i32 %145, 60
  %149 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 1
  %150 = load float, float* %149, align 4
  %151 = fpext float %150 to double
  store double %151, double* %CastInst39
  %152 = load double, double* %CastInst39, align 4
  %insertCast187 = insertelement <2 x double> undef, double %152, i32 0
  %insertCast188 = insertelement <2 x double> %insertCast187, double %152, i32 1
  store <2 x double> %insertCast188, <2 x double>* %CastInstVec40, align 4
  %153 = load <2 x double>, <2 x double>* %CastInstVec40, align 4
  %Vop189 = fadd <2 x double> %153, <double 5.000000e-01, double 5.000000e-01>
  %154 = fadd double %151, 5.000000e-01
  %155 = fptosi double %154 to i32
  store i32 %155, i32* %CastInst41
  %156 = load i32, i32* %CastInst41, align 4
  %insertCast190 = insertelement <4 x i32> undef, i32 %156, i32 0
  %insertCast191 = insertelement <4 x i32> %insertCast190, i32 %156, i32 1
  %insertCast192 = insertelement <4 x i32> %insertCast191, i32 %156, i32 2
  %insertCast193 = insertelement <4 x i32> %insertCast192, i32 %156, i32 3
  store <4 x i32> %insertCast193, <4 x i32>* %CastInstVec42, align 4
  %157 = load <4 x i32>, <4 x i32>* %CastInstVec42, align 4
  %Vop194 = sdiv <4 x i32> %157, <i32 3600, i32 3600, i32 3600, i32 3600>
  %158 = sdiv i32 %155, 3600
  %159 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 1
  %160 = load float, float* %159, align 4
  %161 = fpext float %160 to double
  store double %161, double* %CastInst43
  %162 = load double, double* %CastInst43, align 4
  %insertCast195 = insertelement <2 x double> undef, double %162, i32 0
  %insertCast196 = insertelement <2 x double> %insertCast195, double %162, i32 1
  store <2 x double> %insertCast196, <2 x double>* %CastInstVec44, align 4
  %163 = load <2 x double>, <2 x double>* %CastInstVec44, align 4
  %Vop197 = fadd <2 x double> %163, <double 5.000000e-01, double 5.000000e-01>
  %164 = fadd double %161, 5.000000e-01
  %Vop198 = fdiv <2 x double> %Vop197, <double 6.000000e+01, double 6.000000e+01>
  %165 = fdiv double %164, 6.000000e+01
  %166 = fptosi double %165 to i32
  store i32 %166, i32* %CastInst45
  %167 = load i32, i32* %CastInst45, align 4
  %insertCast199 = insertelement <4 x i32> undef, i32 %167, i32 0
  %insertCast200 = insertelement <4 x i32> %insertCast199, i32 %167, i32 1
  %insertCast201 = insertelement <4 x i32> %insertCast200, i32 %167, i32 2
  %insertCast202 = insertelement <4 x i32> %insertCast201, i32 %167, i32 3
  store <4 x i32> %insertCast202, <4 x i32>* %CastInstVec46, align 4
  %168 = load <4 x i32>, <4 x i32>* %CastInstVec46, align 4
  %Vop203 = srem <4 x i32> %168, <i32 60, i32 60, i32 60, i32 60>
  %169 = srem i32 %166, 60
  %170 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 1
  %171 = load float, float* %170, align 4
  %172 = fpext float %171 to double
  store double %172, double* %CastInst47
  %173 = load double, double* %CastInst47, align 4
  %insertCast204 = insertelement <2 x double> undef, double %173, i32 0
  %insertCast205 = insertelement <2 x double> %insertCast204, double %173, i32 1
  store <2 x double> %insertCast205, <2 x double>* %CastInstVec48, align 4
  %174 = load <2 x double>, <2 x double>* %CastInstVec48, align 4
  %Vop206 = fadd <2 x double> %174, <double 5.000000e-01, double 5.000000e-01>
  %175 = fadd double %172, 5.000000e-01
  %176 = fptosi double %175 to i32
  store i32 %176, i32* %CastInst49
  %177 = load i32, i32* %CastInst49, align 4
  %insertCast207 = insertelement <4 x i32> undef, i32 %177, i32 0
  %insertCast208 = insertelement <4 x i32> %insertCast207, i32 %177, i32 1
  %insertCast209 = insertelement <4 x i32> %insertCast208, i32 %177, i32 2
  %insertCast210 = insertelement <4 x i32> %insertCast209, i32 %177, i32 3
  store <4 x i32> %insertCast210, <4 x i32>* %CastInstVec50, align 4
  %178 = load <4 x i32>, <4 x i32>* %CastInstVec50, align 4
  %Vop211 = srem <4 x i32> %178, <i32 60, i32 60, i32 60, i32 60>
  %179 = srem i32 %176, 60
  %180 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %10, i32 0, i32 2
  %181 = load float, float* %180, align 4
  %182 = fpext float %181 to double
  %183 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 3
  %184 = load float, float* %183, align 4
  %185 = fpext float %184 to double
  store double %185, double* %CastInst51
  %186 = load double, double* %CastInst51, align 4
  %insertCast212 = insertelement <2 x double> undef, double %186, i32 0
  %insertCast213 = insertelement <2 x double> %insertCast212, double %186, i32 1
  store <2 x double> %insertCast213, <2 x double>* %CastInstVec52, align 4
  %187 = load <2 x double>, <2 x double>* %CastInstVec52, align 4
  %Vop214 = fadd <2 x double> %187, <double 5.000000e-01, double 5.000000e-01>
  %188 = fadd double %185, 5.000000e-01
  %189 = fptosi double %188 to i32
  store i32 %189, i32* %CastInst53
  %190 = load i32, i32* %CastInst53, align 4
  %insertCast215 = insertelement <4 x i32> undef, i32 %190, i32 0
  %insertCast216 = insertelement <4 x i32> %insertCast215, i32 %190, i32 1
  %insertCast217 = insertelement <4 x i32> %insertCast216, i32 %190, i32 2
  %insertCast218 = insertelement <4 x i32> %insertCast217, i32 %190, i32 3
  store <4 x i32> %insertCast218, <4 x i32>* %CastInstVec54, align 4
  %191 = load <4 x i32>, <4 x i32>* %CastInstVec54, align 4
  %Vop219 = sdiv <4 x i32> %191, <i32 3600, i32 3600, i32 3600, i32 3600>
  %192 = sdiv i32 %189, 3600
  %193 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 3
  %194 = load float, float* %193, align 4
  %195 = fpext float %194 to double
  store double %195, double* %CastInst55
  %196 = load double, double* %CastInst55, align 4
  %insertCast220 = insertelement <2 x double> undef, double %196, i32 0
  %insertCast221 = insertelement <2 x double> %insertCast220, double %196, i32 1
  store <2 x double> %insertCast221, <2 x double>* %CastInstVec56, align 4
  %197 = load <2 x double>, <2 x double>* %CastInstVec56, align 4
  %Vop222 = fadd <2 x double> %197, <double 5.000000e-01, double 5.000000e-01>
  %198 = fadd double %195, 5.000000e-01
  %Vop223 = fdiv <2 x double> %Vop222, <double 6.000000e+01, double 6.000000e+01>
  %199 = fdiv double %198, 6.000000e+01
  %200 = fptosi double %199 to i32
  store i32 %200, i32* %CastInst57
  %201 = load i32, i32* %CastInst57, align 4
  %insertCast224 = insertelement <4 x i32> undef, i32 %201, i32 0
  %insertCast225 = insertelement <4 x i32> %insertCast224, i32 %201, i32 1
  %insertCast226 = insertelement <4 x i32> %insertCast225, i32 %201, i32 2
  %insertCast227 = insertelement <4 x i32> %insertCast226, i32 %201, i32 3
  store <4 x i32> %insertCast227, <4 x i32>* %CastInstVec58, align 4
  %202 = load <4 x i32>, <4 x i32>* %CastInstVec58, align 4
  %Vop228 = srem <4 x i32> %202, <i32 60, i32 60, i32 60, i32 60>
  %203 = srem i32 %200, 60
  %204 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 3
  %205 = load float, float* %204, align 4
  %206 = fpext float %205 to double
  store double %206, double* %CastInst59
  %207 = load double, double* %CastInst59, align 4
  %insertCast229 = insertelement <2 x double> undef, double %207, i32 0
  %insertCast230 = insertelement <2 x double> %insertCast229, double %207, i32 1
  store <2 x double> %insertCast230, <2 x double>* %CastInstVec60, align 4
  %208 = load <2 x double>, <2 x double>* %CastInstVec60, align 4
  %Vop231 = fadd <2 x double> %208, <double 5.000000e-01, double 5.000000e-01>
  %209 = fadd double %206, 5.000000e-01
  %210 = fptosi double %209 to i32
  store i32 %210, i32* %CastInst61
  %211 = load i32, i32* %CastInst61, align 4
  %insertCast232 = insertelement <4 x i32> undef, i32 %211, i32 0
  %insertCast233 = insertelement <4 x i32> %insertCast232, i32 %211, i32 1
  %insertCast234 = insertelement <4 x i32> %insertCast233, i32 %211, i32 2
  %insertCast235 = insertelement <4 x i32> %insertCast234, i32 %211, i32 3
  store <4 x i32> %insertCast235, <4 x i32>* %CastInstVec62, align 4
  %212 = load <4 x i32>, <4 x i32>* %CastInstVec62, align 4
  %Vop236 = srem <4 x i32> %212, <i32 60, i32 60, i32 60, i32 60>
  %213 = srem i32 %210, 60
  %214 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.1.295, i32 0, i32 0), i32 %51, i32 %54, i32 %55, i32 %65, i32 %76, i32 %86, i32 %96, i32 %107, i32 %117, i32 %127, i32 %138, i32 %148, i32 %158, i32 %169, i32 %179, double %182, i32 %192, i32 %203, i32 %213)
  %215 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %216 = call arm_aapcscc i32 @fflush(%struct._IO_FILE* %215)
  br label %217

; <label>:217:                                    ; preds = %49, %20
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @getframebits(%struct.lame_global_flags*, i32*, i32*) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec5 = alloca <2 x double>, align 16
  %CastInst1 = alloca double, align 4
  %CastInstVec2 = alloca <2 x double>, align 16
  %allocaVec6 = alloca <2 x double>, align 16
  %CastInst3 = alloca double, align 4
  %CastInstVec4 = alloca <2 x double>, align 16
  %4 = alloca %struct.lame_global_flags*, align 4
  %5 = alloca i32*, align 4
  %6 = alloca i32*, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec8 = alloca <2 x double>, align 16
  %8 = alloca double, align 8
  %allocaVec9 = alloca <2 x double>, align 16
  %9 = alloca double, align 8
  %allocaVec10 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %4, align 4
  store i32* %1, i32** %5, align 4
  store i32* %2, i32** %6, align 4
  %12 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %13 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %12, i32 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = sitofp i32 %14 to double
  store double %15, double* %CastInst
  %16 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %16, i32 0
  %insertCast12 = insertelement <2 x double> %insertCast, double %16, i32 1
  store <2 x double> %insertCast12, <2 x double>* %CastInstVec, align 4
  %17 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %Vop = fdiv <2 x double> %17, <double 1.000000e+03, double 1.000000e+03>
  store <2 x double> %Vop, <2 x double>* %allocaVec9
  %18 = fdiv double %15, 1.000000e+03
  store double %18, double* %9, align 8
  %19 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %20 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %19, i32 0, i32 43
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i32 0, i32 %21
  %23 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %24 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %23, i32 0, i32 50
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds [15 x i32], [15 x i32]* %22, i32 0, i32 %25
  %27 = load i32, i32* %26, align 4
  %28 = sitofp i32 %27 to double
  store double %28, double* %8, align 8
  store <4 x i32> <i32 8, i32 8, i32 8, i32 8>, <4 x i32>* %allocaVec10
  store i32 8, i32* %10, align 4
  store <4 x i32> <i32 32, i32 32, i32 32, i32 32>, <4 x i32>* %allocaVec11
  store i32 32, i32* %11, align 4
  %29 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %30 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %29, i32 0, i32 43
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %47

; <label>:33:                                     ; preds = %3
  %34 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %35 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %34, i32 0, i32 46
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %42

; <label>:38:                                     ; preds = %33
  %39 = load i32, i32* %11, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %39, i32 0
  %insertElmt13 = insertelement <4 x i32> %insertElmt, i32 %39, i32 1
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %39, i32 2
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %39, i32 3
  store <4 x i32> %insertElmt15, <4 x i32>* %allocaVec11, align 16
  %40 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop16 = add <4 x i32> %40, <i32 136, i32 136, i32 136, i32 136>
  store <4 x i32> %Vop16, <4 x i32>* %allocaVec11
  %41 = add nsw i32 %39, 136
  store i32 %41, i32* %11, align 4
  br label %46

; <label>:42:                                     ; preds = %33
  %43 = load i32, i32* %11, align 4
  %44 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop17 = add <4 x i32> %44, <i32 256, i32 256, i32 256, i32 256>
  store <4 x i32> %Vop17, <4 x i32>* %allocaVec11
  %45 = add nsw i32 %43, 256
  store i32 %45, i32* %11, align 4
  br label %46

; <label>:46:                                     ; preds = %42, %38
  br label %61

; <label>:47:                                     ; preds = %3
  %48 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %49 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %48, i32 0, i32 46
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %52, label %56

; <label>:52:                                     ; preds = %47
  %53 = load i32, i32* %11, align 4
  %54 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop18 = add <4 x i32> %54, <i32 72, i32 72, i32 72, i32 72>
  store <4 x i32> %Vop18, <4 x i32>* %allocaVec11
  %55 = add nsw i32 %53, 72
  store i32 %55, i32* %11, align 4
  br label %60

; <label>:56:                                     ; preds = %47
  %57 = load i32, i32* %11, align 4
  %58 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop19 = add <4 x i32> %58, <i32 136, i32 136, i32 136, i32 136>
  store <4 x i32> %Vop19, <4 x i32>* %allocaVec11
  %59 = add nsw i32 %57, 136
  store i32 %59, i32* %11, align 4
  br label %60

; <label>:60:                                     ; preds = %56, %52
  br label %61

; <label>:61:                                     ; preds = %60, %46
  %62 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %63 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %62, i32 0, i32 14
  %64 = load i32, i32* %63, align 4
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %66, label %70

; <label>:66:                                     ; preds = %61
  %67 = load i32, i32* %11, align 4
  %68 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop20 = add <4 x i32> %68, <i32 16, i32 16, i32 16, i32 16>
  store <4 x i32> %Vop20, <4 x i32>* %allocaVec11
  %69 = add nsw i32 %67, 16
  store i32 %69, i32* %11, align 4
  br label %70

; <label>:70:                                     ; preds = %66, %61
  %71 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %72 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %71, i32 0, i32 42
  %73 = load i32, i32* %72, align 4
  %74 = sitofp i32 %73 to double
  %75 = load double, double* %9, align 8
  store double %74, double* %CastInst1
  %76 = load double, double* %CastInst1, align 4
  %insertCast21 = insertelement <2 x double> undef, double %76, i32 0
  %insertCast22 = insertelement <2 x double> %insertCast21, double %76, i32 1
  store <2 x double> %insertCast22, <2 x double>* %CastInstVec2, align 4
  %77 = load <2 x double>, <2 x double>* %CastInstVec2, align 4
  %78 = load <2 x double>, <2 x double>* %allocaVec9, align 16
  %Vop23 = fdiv <2 x double> %77, %78
  %79 = fdiv double %74, %75
  %80 = load double, double* %8, align 8
  %insertElmt24 = insertelement <2 x double> undef, double %80, i32 0
  %insertElmt25 = insertelement <2 x double> %insertElmt24, double %80, i32 1
  store <2 x double> %insertElmt25, <2 x double>* %allocaVec8, align 16
  %81 = load i32, i32* %10, align 4
  %82 = sitofp i32 %81 to double
  %83 = load <2 x double>, <2 x double>* %allocaVec8, align 16
  store double %82, double* %CastInst3
  %84 = load double, double* %CastInst3, align 4
  %insertCast26 = insertelement <2 x double> undef, double %84, i32 0
  %insertCast27 = insertelement <2 x double> %insertCast26, double %84, i32 1
  store <2 x double> %insertCast27, <2 x double>* %CastInstVec4, align 4
  %85 = load <2 x double>, <2 x double>* %CastInstVec4, align 4
  %Vop28 = fdiv <2 x double> %83, %85
  %86 = fdiv double %80, %82
  %Vop29 = fmul <2 x double> %Vop23, %Vop28
  %87 = fmul double %79, %86
  %Vop30 = fadd <2 x double> %Vop29, <double 1.000000e-09, double 1.000000e-09>
  %88 = fadd double %87, 1.000000e-09
  %89 = call arm_aapcscc double @floor(double %88) #9
  %90 = fptosi double %89 to i32
  store i32 %90, i32* %7, align 4
  %91 = load i32, i32* %7, align 4
  %insertElmt31 = insertelement <4 x i32> undef, i32 %91, i32 0
  %insertElmt32 = insertelement <4 x i32> %insertElmt31, i32 %91, i32 1
  %insertElmt33 = insertelement <4 x i32> %insertElmt32, i32 %91, i32 2
  %insertElmt34 = insertelement <4 x i32> %insertElmt33, i32 %91, i32 3
  store <4 x i32> %insertElmt34, <4 x i32>* %allocaVec7, align 16
  %92 = load <4 x i32>, <4 x i32>* %allocaVec7, align 16
  %Vop35 = mul <4 x i32> <i32 8, i32 8, i32 8, i32 8>, %92
  %93 = mul nsw i32 8, %91
  %94 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %95 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %94, i32 0, i32 44
  %96 = load i32, i32* %95, align 4
  %97 = mul nsw i32 %96, 8
  %98 = add nsw i32 %93, %97
  %99 = load i32*, i32** %5, align 4
  store i32 %98, i32* %99, align 4
  %100 = load i32*, i32** %5, align 4
  %101 = load i32, i32* %100, align 4
  %102 = load i32, i32* %11, align 4
  %103 = sub nsw i32 %101, %102
  %104 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %105 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %104, i32 0, i32 45
  %106 = load i32, i32* %105, align 4
  %107 = sdiv i32 %103, %106
  %108 = load i32*, i32** %6, align 4
  store i32 %107, i32* %108, align 4
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @display_bitrates(%struct._IO_FILE*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %2 = alloca %struct._IO_FILE*, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec2
  store i32 1, i32* %4, align 4
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %6 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.302, i32 0, i32 0))
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %8 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1.303, i32 0, i32 0))
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %10 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2.304, i32 0, i32 0))
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec1
  store i32 1, i32* %3, align 4
  br label %11

; <label>:11:                                     ; preds = %22, %1
  %12 = load i32, i32* %3, align 4
  %13 = icmp slt i32 %12, 15
  br i1 %13, label %14, label %26

; <label>:14:                                     ; preds = %11
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %16 = load i32, i32* %4, align 4
  %17 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i32 0, i32 %16
  %18 = load i32, i32* %3, align 4
  %19 = getelementptr inbounds [15 x i32], [15 x i32]* %17, i32 0, i32 %18
  %20 = load i32, i32* %19, align 4
  %21 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.305, i32 0, i32 0), i32 %20)
  br label %22

; <label>:22:                                     ; preds = %14
  %23 = load i32, i32* %3, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %23, i32 0
  %insertElmt3 = insertelement <4 x i32> %insertElmt, i32 %23, i32 1
  %insertElmt4 = insertelement <4 x i32> %insertElmt3, i32 %23, i32 2
  %insertElmt5 = insertelement <4 x i32> %insertElmt4, i32 %23, i32 3
  store <4 x i32> %insertElmt5, <4 x i32>* %allocaVec1, align 16
  %24 = load <4 x i32>, <4 x i32>* %allocaVec1, align 16
  %Vop = add <4 x i32> %24, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec1
  %25 = add nsw i32 %23, 1
  store i32 %25, i32* %3, align 4
  br label %11

; <label>:26:                                     ; preds = %11
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %28 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.302, i32 0, i32 0))
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec2
  store i32 0, i32* %4, align 4
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %30 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.302, i32 0, i32 0))
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %32 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4.306, i32 0, i32 0))
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %34 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2.304, i32 0, i32 0))
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec1
  store i32 1, i32* %3, align 4
  br label %35

; <label>:35:                                     ; preds = %55, %26
  %36 = load i32, i32* %3, align 4
  %37 = icmp slt i32 %36, 15
  br i1 %37, label %38, label %56

; <label>:38:                                     ; preds = %35
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %40 = load i32, i32* %4, align 4
  %41 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i32 0, i32 %40
  %42 = load i32, i32* %3, align 4
  %43 = getelementptr inbounds [15 x i32], [15 x i32]* %41, i32 0, i32 %42
  %44 = load i32, i32* %43, align 4
  %45 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.305, i32 0, i32 0), i32 %44)
  br label %46

; <label>:46:                                     ; preds = %38
  %47 = load i32, i32* %3, align 4
  %48 = load <4 x i32>, <4 x i32>* %allocaVec1, align 16
  %Vop6 = add <4 x i32> %48, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop6, <4 x i32>* %allocaVec1
  %49 = load <4 x i32>, <4 x i32>* %allocaVec1, align 4
  %extractE = extractelement <4 x i32> %49, i64 0
  %extractE7 = extractelement <4 x i32> %49, i64 1
  %extractE8 = extractelement <4 x i32> %49, i64 2
  %sum = add i32 %extractE, %extractE7
  %sum9 = add i32 %sum, %extractE8
  %50 = add nsw i32 %47, 1
  %Fmul = mul i32 %50, 3
  store i32 %50, i32* %Recovery
  %Fcmp = icmp ne i32 %sum9, %Fmul
  br i1 %Fcmp, label %51, label %55

; <label>:51:                                     ; preds = %46
  %remThree = sdiv i32 %sum9, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %52, label %53

; <label>:52:                                     ; preds = %51
  store i32 %50, i32* %Recovery, align 4
  br label %54

; <label>:53:                                     ; preds = %51
  store i32 %extractE, i32* %Recovery, align 4
  br label %54

; <label>:54:                                     ; preds = %53, %52
  br label %55

; <label>:55:                                     ; preds = %46, %54
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %3, align 4
  br label %35

; <label>:56:                                     ; preds = %35
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %58 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.302, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @BitrateIndex(i32, i32, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec5
  store i32 0, i32* %8, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec6
  store i32 0, i32* %9, align 4
  br label %10

; <label>:10:                                     ; preds = %37, %3
  %11 = load i32, i32* %9, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %16, label %13

; <label>:13:                                     ; preds = %10
  %14 = load i32, i32* %8, align 4
  %15 = icmp slt i32 %14, 15
  br label %16

; <label>:16:                                     ; preds = %13, %10
  %17 = phi i1 [ false, %10 ], [ %15, %13 ]
  br i1 %17, label %18, label %38

; <label>:18:                                     ; preds = %16
  %19 = load i32, i32* %6, align 4
  %20 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i32 0, i32 %19
  %21 = load i32, i32* %8, align 4
  %22 = getelementptr inbounds [15 x i32], [15 x i32]* %20, i32 0, i32 %21
  %23 = load i32, i32* %22, align 4
  %24 = load i32, i32* %5, align 4
  %25 = icmp eq i32 %23, %24
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %18
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec6
  store i32 1, i32* %9, align 4
  br label %37

; <label>:27:                                     ; preds = %18
  %28 = load i32, i32* %8, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %28, i32 0
  %insertElmt7 = insertelement <4 x i32> %insertElmt, i32 %28, i32 1
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %28, i32 2
  %insertElmt9 = insertelement <4 x i32> %insertElmt8, i32 %28, i32 3
  store <4 x i32> %insertElmt9, <4 x i32>* %allocaVec5, align 16
  %29 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop = add <4 x i32> %29, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec5
  %30 = load <4 x i32>, <4 x i32>* %allocaVec5, align 4
  %extractE = extractelement <4 x i32> %30, i64 0
  %extractE10 = extractelement <4 x i32> %30, i64 1
  %extractE11 = extractelement <4 x i32> %30, i64 2
  %sum = add i32 %extractE, %extractE10
  %sum12 = add i32 %sum, %extractE11
  %31 = add nsw i32 %28, 1
  %Fmul = mul i32 %31, 3
  store i32 %31, i32* %Recovery
  %Fcmp = icmp ne i32 %sum12, %Fmul
  br i1 %Fcmp, label %32, label %36

; <label>:32:                                     ; preds = %27
  %remThree = sdiv i32 %sum12, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %33, label %34

; <label>:33:                                     ; preds = %32
  store i32 %31, i32* %Recovery, align 4
  br label %35

; <label>:34:                                     ; preds = %32
  store i32 %extractE, i32* %Recovery, align 4
  br label %35

; <label>:35:                                     ; preds = %34, %33
  br label %36

; <label>:36:                                     ; preds = %27, %35
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %8, align 4
  br label %37

; <label>:37:                                     ; preds = %36, %26
  br label %10

; <label>:38:                                     ; preds = %16
  %39 = load i32, i32* %9, align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %43

; <label>:41:                                     ; preds = %38
  %42 = load i32, i32* %8, align 4
  store i32 %42, i32* %4, align 4
  br label %48

; <label>:43:                                     ; preds = %38
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %45 = load i32, i32* %5, align 4
  %46 = load i32, i32* %7, align 4
  %47 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.5.309, i32 0, i32 0), i32 %45, i32 %46)
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec1
  store i32 -1, i32* %4, align 4
  br label %48

; <label>:48:                                     ; preds = %43, %41
  %49 = load i32, i32* %4, align 4
  ret i32 %49
}

; Function Attrs: nounwind
define arm_aapcscc i32 @SmpFrqIndex(i32, i32*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 4
  store i32 %0, i32* %4, align 4
  store i32* %1, i32** %5, align 4
  %6 = load i32*, i32** %5, align 4
  store i32 0, i32* %6, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp eq i32 %7, 44100
  br i1 %8, label %9, label %11

; <label>:9:                                      ; preds = %2
  %10 = load i32*, i32** %5, align 4
  store i32 1, i32* %10, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec
  store i32 0, i32* %3, align 4
  br label %40

; <label>:11:                                     ; preds = %2
  %12 = load i32, i32* %4, align 4
  %13 = icmp eq i32 %12, 48000
  br i1 %13, label %14, label %16

; <label>:14:                                     ; preds = %11
  %15 = load i32*, i32** %5, align 4
  store i32 1, i32* %15, align 4
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec
  store i32 1, i32* %3, align 4
  br label %40

; <label>:16:                                     ; preds = %11
  %17 = load i32, i32* %4, align 4
  %18 = icmp eq i32 %17, 32000
  br i1 %18, label %19, label %21

; <label>:19:                                     ; preds = %16
  %20 = load i32*, i32** %5, align 4
  store i32 1, i32* %20, align 4
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %allocaVec
  store i32 2, i32* %3, align 4
  br label %40

; <label>:21:                                     ; preds = %16
  %22 = load i32, i32* %4, align 4
  %23 = icmp eq i32 %22, 24000
  br i1 %23, label %24, label %26

; <label>:24:                                     ; preds = %21
  %25 = load i32*, i32** %5, align 4
  store i32 0, i32* %25, align 4
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec
  store i32 1, i32* %3, align 4
  br label %40

; <label>:26:                                     ; preds = %21
  %27 = load i32, i32* %4, align 4
  %28 = icmp eq i32 %27, 22050
  br i1 %28, label %29, label %31

; <label>:29:                                     ; preds = %26
  %30 = load i32*, i32** %5, align 4
  store i32 0, i32* %30, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec
  store i32 0, i32* %3, align 4
  br label %40

; <label>:31:                                     ; preds = %26
  %32 = load i32, i32* %4, align 4
  %33 = icmp eq i32 %32, 16000
  br i1 %33, label %34, label %36

; <label>:34:                                     ; preds = %31
  %35 = load i32*, i32** %5, align 4
  store i32 0, i32* %35, align 4
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %allocaVec
  store i32 2, i32* %3, align 4
  br label %40

; <label>:36:                                     ; preds = %31
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %38 = load i32, i32* %4, align 4
  %39 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.6.312, i32 0, i32 0), i32 %38)
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec
  store i32 -1, i32* %3, align 4
  br label %40

; <label>:40:                                     ; preds = %36, %34, %29, %24, %19, %14, %9
  %41 = load i32, i32* %3, align 4
  ret i32 %41
}

; Function Attrs: nounwind
define arm_aapcscc i8* @mem_alloc(i32, i8*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 4
  %5 = alloca i8*, align 4
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call arm_aapcscc i8* @malloc(i32 %6)
  store i8* %7, i8** %5, align 4
  %8 = load i8*, i8** %5, align 4
  %9 = icmp ne i8* %8, null
  br i1 %9, label %10, label %13

; <label>:10:                                     ; preds = %2
  %11 = load i8*, i8** %5, align 4
  %12 = load i32, i32* %3, align 4
  call void @llvm.memset.p0i8.i32(i8* %11, i8 0, i32 %12, i32 1, i1 false)
  br label %17

; <label>:13:                                     ; preds = %2
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %15 = load i8*, i8** %4, align 4
  %16 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.313, i32 0, i32 0), i8* %15)
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:17:                                     ; preds = %10
  %18 = load i8*, i8** %5, align 4
  ret i8* %18
}

; Function Attrs: nounwind
define arm_aapcscc i32 @DetermineByteOrder() #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %1 = alloca i32, align 4
  %2 = alloca [5 x i8], align 1
  %3 = alloca %struct.rtpbits, align 4
  %4 = bitcast %struct.rtpbits* %3 to i32*
  store i32 1094861636, i32* %4, align 4
  %5 = getelementptr inbounds [5 x i8], [5 x i8]* %2, i32 0, i32 0
  %6 = bitcast %struct.rtpbits* %3 to [4 x i8]*
  %7 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i32 0, i32 0
  %8 = call arm_aapcscc i8* @strncpy(i8* %5, i8* %7, i32 4)
  %9 = getelementptr inbounds [5 x i8], [5 x i8]* %2, i32 0, i32 4
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds [5 x i8], [5 x i8]* %2, i32 0, i32 0
  %11 = call arm_aapcscc i32 @strcmp(i8* %10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.314, i32 0, i32 0))
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %0
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec
  store i32 1, i32* %1, align 4
  br label %20

; <label>:14:                                     ; preds = %0
  %15 = getelementptr inbounds [5 x i8], [5 x i8]* %2, i32 0, i32 0
  %16 = call arm_aapcscc i32 @strcmp(i8* %15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9.315, i32 0, i32 0))
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %14
  store <4 x i32> <i32 2, i32 2, i32 2, i32 2>, <4 x i32>* %allocaVec
  store i32 2, i32* %1, align 4
  br label %20

; <label>:19:                                     ; preds = %14
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec
  store i32 0, i32* %1, align 4
  br label %20

; <label>:20:                                     ; preds = %19, %18, %13
  %21 = load i32, i32* %1, align 4
  ret i32 %21
}

; Function Attrs: nounwind
define arm_aapcscc void @SwapBytesInWords(i16*, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %3 = alloca i16*, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec3 = alloca <4 x i16>, align 16
  %6 = alloca i16, align 2
  %7 = alloca i8*, align 4
  %8 = alloca i8*, align 4
  store i16* %0, i16** %3, align 4
  store i32 %1, i32* %4, align 4
  %9 = bitcast i16* %6 to i8*
  store i8* %9, i8** %8, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec2
  store i32 0, i32* %5, align 4
  br label %10

; <label>:10:                                     ; preds = %39, %2
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %4, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %40

; <label>:14:                                     ; preds = %10
  %15 = load i16*, i16** %3, align 4
  %16 = load i16, i16* %15, align 2
  store i16 %16, i16* %6, align 2
  %17 = load i16*, i16** %3, align 4
  %18 = getelementptr inbounds i16, i16* %17, i32 1
  store i16* %18, i16** %3, align 4
  %19 = bitcast i16* %17 to i8*
  store i8* %19, i8** %7, align 4
  %20 = load i8*, i8** %8, align 4
  %21 = getelementptr inbounds i8, i8* %20, i32 1
  %22 = load i8, i8* %21, align 1
  %23 = load i8*, i8** %7, align 4
  %24 = getelementptr inbounds i8, i8* %23, i32 0
  store i8 %22, i8* %24, align 1
  %25 = load i8*, i8** %8, align 4
  %26 = getelementptr inbounds i8, i8* %25, i32 0
  %27 = load i8, i8* %26, align 1
  %28 = load i8*, i8** %7, align 4
  %29 = getelementptr inbounds i8, i8* %28, i32 1
  store i8 %27, i8* %29, align 1
  br label %30

; <label>:30:                                     ; preds = %14
  %31 = load i32, i32* %5, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %31, i32 0
  %insertElmt4 = insertelement <4 x i32> %insertElmt, i32 %31, i32 1
  %insertElmt5 = insertelement <4 x i32> %insertElmt4, i32 %31, i32 2
  %insertElmt6 = insertelement <4 x i32> %insertElmt5, i32 %31, i32 3
  store <4 x i32> %insertElmt6, <4 x i32>* %allocaVec2, align 16
  %32 = load <4 x i32>, <4 x i32>* %allocaVec2, align 16
  %Vop = add <4 x i32> %32, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec2
  %33 = load <4 x i32>, <4 x i32>* %allocaVec2, align 4
  %extractE = extractelement <4 x i32> %33, i64 0
  %extractE7 = extractelement <4 x i32> %33, i64 1
  %extractE8 = extractelement <4 x i32> %33, i64 2
  %sum = add i32 %extractE, %extractE7
  %sum9 = add i32 %sum, %extractE8
  %34 = add nsw i32 %31, 1
  %Fmul = mul i32 %34, 3
  store i32 %34, i32* %Recovery
  %Fcmp = icmp ne i32 %sum9, %Fmul
  br i1 %Fcmp, label %35, label %39

; <label>:35:                                     ; preds = %30
  %remThree = sdiv i32 %sum9, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %36, label %37

; <label>:36:                                     ; preds = %35
  store i32 %34, i32* %Recovery, align 4
  br label %38

; <label>:37:                                     ; preds = %35
  store i32 %extractE, i32* %Recovery, align 4
  br label %38

; <label>:38:                                     ; preds = %37, %36
  br label %39

; <label>:39:                                     ; preds = %30, %38
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %5, align 4
  br label %10

; <label>:40:                                     ; preds = %10
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @empty_buffer(%struct.bit_stream_struc*) #0 {
  %2 = alloca %struct.bit_stream_struc*, align 4
  %allocaVec = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  store %struct.bit_stream_struc* %0, %struct.bit_stream_struc** %2, align 4
  %4 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %5 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %4, i32 0, i32 6
  %6 = load i32, i32* %5, align 4
  %7 = add nsw i32 1, %6
  store i32 %7, i32* %3, align 4
  %8 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %9 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %8, i32 0, i32 4
  %10 = load i32, i32* %9, align 4
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %10, %11
  %13 = icmp sle i32 %12, 0
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %1
  br label %31

; <label>:15:                                     ; preds = %1
  %16 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %17 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %16, i32 0, i32 4
  %18 = load i32, i32* %17, align 4
  %19 = sub nsw i32 %18, 1
  %20 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %21 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %20, i32 0, i32 6
  store i32 %19, i32* %21, align 4
  %22 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %23 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %22, i32 0, i32 7
  store i32 8, i32* %23, align 4
  %24 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %25 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %24, i32 0, i32 3
  %26 = load i8*, i8** %25, align 4
  %27 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %28 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %27, i32 0, i32 6
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds i8, i8* %26, i32 %29
  store i8 0, i8* %30, align 1
  br label %31

; <label>:31:                                     ; preds = %15, %14
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @copy_buffer(i8*, i32, %struct.bit_stream_struc*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %7 = alloca %struct.bit_stream_struc*, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  store i8* %0, i8** %5, align 4
  store i32 %1, i32* %6, align 4
  store %struct.bit_stream_struc* %2, %struct.bit_stream_struc** %7, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec6
  store i32 0, i32* %9, align 4
  %10 = load i32, i32* %6, align 4
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %24

; <label>:12:                                     ; preds = %3
  %13 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %7, align 4
  %14 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %13, i32 0, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = sub nsw i32 %15, 1
  %17 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %7, align 4
  %18 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %17, i32 0, i32 6
  %19 = load i32, i32* %18, align 4
  %20 = sub nsw i32 %16, %19
  %21 = load i32, i32* %6, align 4
  %22 = icmp sgt i32 %20, %21
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %12
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec3
  store i32 -1, i32* %4, align 4
  br label %80

; <label>:24:                                     ; preds = %12, %3
  %25 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %7, align 4
  %26 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %25, i32 0, i32 4
  %27 = load i32, i32* %26, align 4
  %28 = sub nsw i32 %27, 1
  store i32 %28, i32* %8, align 4
  br label %29

; <label>:29:                                     ; preds = %62, %24
  %30 = load i32, i32* %8, align 4
  %31 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %7, align 4
  %32 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %31, i32 0, i32 6
  %33 = load i32, i32* %32, align 4
  %34 = icmp sgt i32 %30, %33
  br i1 %34, label %35, label %63

; <label>:35:                                     ; preds = %29
  %36 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %7, align 4
  %37 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %36, i32 0, i32 3
  %38 = load i8*, i8** %37, align 4
  %39 = load i32, i32* %8, align 4
  %40 = getelementptr inbounds i8, i8* %38, i32 %39
  %41 = load i8, i8* %40, align 1
  %42 = load i8*, i8** %5, align 4
  %43 = load i32, i32* %9, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %43, i32 0
  %insertElmt7 = insertelement <4 x i32> %insertElmt, i32 %43, i32 1
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %43, i32 2
  %insertElmt9 = insertelement <4 x i32> %insertElmt8, i32 %43, i32 3
  store <4 x i32> %insertElmt9, <4 x i32>* %allocaVec6, align 16
  %44 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop = add <4 x i32> %44, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec6
  %45 = load <4 x i32>, <4 x i32>* %allocaVec6, align 4
  %extractE = extractelement <4 x i32> %45, i64 0
  %extractE10 = extractelement <4 x i32> %45, i64 1
  %extractE11 = extractelement <4 x i32> %45, i64 2
  %sum = add i32 %extractE, %extractE10
  %sum12 = add i32 %sum, %extractE11
  %46 = add nsw i32 %43, 1
  %Fmul = mul i32 %46, 3
  store i32 %46, i32* %Recovery
  %Fcmp = icmp ne i32 %sum12, %Fmul
  br i1 %Fcmp, label %47, label %51

; <label>:47:                                     ; preds = %35
  %remThree = sdiv i32 %sum12, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %48, label %49

; <label>:48:                                     ; preds = %47
  store i32 %46, i32* %Recovery, align 4
  br label %50

; <label>:49:                                     ; preds = %47
  store i32 %extractE, i32* %Recovery, align 4
  br label %50

; <label>:50:                                     ; preds = %49, %48
  br label %51

; <label>:51:                                     ; preds = %35, %50
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %9, align 4
  %52 = getelementptr inbounds i8, i8* %42, i32 %43
  store i8 %41, i8* %52, align 1
  br label %53

; <label>:53:                                     ; preds = %51
  %54 = load i32, i32* %8, align 4
  %insertElmt13 = insertelement <4 x i32> undef, i32 %54, i32 0
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %54, i32 1
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %54, i32 2
  %insertElmt16 = insertelement <4 x i32> %insertElmt15, i32 %54, i32 3
  store <4 x i32> %insertElmt16, <4 x i32>* %allocaVec5, align 16
  %55 = load <4 x i32>, <4 x i32>* %allocaVec5, align 16
  %Vop17 = add <4 x i32> %55, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %Vop17, <4 x i32>* %allocaVec5
  %56 = load <4 x i32>, <4 x i32>* %allocaVec5, align 4
  %extractE19 = extractelement <4 x i32> %56, i64 0
  %extractE20 = extractelement <4 x i32> %56, i64 1
  %extractE21 = extractelement <4 x i32> %56, i64 2
  %sum22 = add i32 %extractE19, %extractE20
  %sum23 = add i32 %sum22, %extractE21
  %57 = add nsw i32 %54, -1
  %Fmul18 = mul i32 %57, 3
  store i32 %57, i32* %Recovery1
  %Fcmp24 = icmp ne i32 %sum23, %Fmul18
  br i1 %Fcmp24, label %58, label %62

; <label>:58:                                     ; preds = %53
  %remThree25 = sdiv i32 %sum23, %extractE19
  %FcmpThree26 = icmp ne i32 %remThree25, 3
  br i1 %FcmpThree26, label %59, label %60

; <label>:59:                                     ; preds = %58
  store i32 %57, i32* %Recovery1, align 4
  br label %61

; <label>:60:                                     ; preds = %58
  store i32 %extractE19, i32* %Recovery1, align 4
  br label %61

; <label>:61:                                     ; preds = %60, %59
  br label %62

; <label>:62:                                     ; preds = %53, %61
  %ReplaceInst27 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst27, i32* %8, align 4
  br label %29

; <label>:63:                                     ; preds = %29
  %64 = load i32, i32* %9, align 4
  %65 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %7, align 4
  %66 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %65, i32 0, i32 4
  %67 = load i32, i32* %66, align 4
  %68 = sub nsw i32 %67, 1
  %69 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %7, align 4
  %70 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %69, i32 0, i32 6
  %71 = load i32, i32* %70, align 4
  %72 = sub nsw i32 %68, %71
  %73 = icmp eq i32 %64, %72
  br i1 %73, label %75, label %74

; <label>:74:                                     ; preds = %63
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.10.318, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11.319, i32 0, i32 0), i32 271, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.copy_buffer, i32 0, i32 0))
  br label %75

; <label>:75:                                     ; preds = %74, %63
  %76 = phi i1 [ true, %63 ], [ false, %74 ]
  %77 = zext i1 %76 to i32
  %78 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %7, align 4
  call arm_aapcscc void @empty_buffer(%struct.bit_stream_struc* %78)
  %79 = load i32, i32* %9, align 4
  store i32 %79, i32* %4, align 4
  br label %80

; <label>:80:                                     ; preds = %75, %23
  %81 = load i32, i32* %4, align 4
  ret i32 %81
}

; Function Attrs: nounwind
define arm_aapcscc void @init_bit_stream_w(%struct.bit_stream_struc*) #0 {
  %2 = alloca %struct.bit_stream_struc*, align 4
  store %struct.bit_stream_struc* %0, %struct.bit_stream_struc** %2, align 4
  %3 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  call arm_aapcscc void @alloc_buffer(%struct.bit_stream_struc* %3, i32 16384)
  %4 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %5 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %4, i32 0, i32 6
  store i32 16383, i32* %5, align 4
  %6 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %7 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %6, i32 0, i32 7
  store i32 8, i32* %7, align 4
  %8 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %9 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %8, i32 0, i32 5
  store i32 0, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @alloc_buffer(%struct.bit_stream_struc*, i32) #0 {
  %3 = alloca %struct.bit_stream_struc*, align 4
  %allocaVec = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  store %struct.bit_stream_struc* %0, %struct.bit_stream_struc** %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %5, i32 0
  %insertElmt1 = insertelement <4 x i32> %insertElmt, i32 %5, i32 1
  %insertElmt2 = insertelement <4 x i32> %insertElmt1, i32 %5, i32 2
  %insertElmt3 = insertelement <4 x i32> %insertElmt2, i32 %5, i32 3
  store <4 x i32> %insertElmt3, <4 x i32>* %allocaVec, align 16
  %6 = load <4 x i32>, <4 x i32>* %allocaVec, align 16
  %Vop = mul <4 x i32> %6, <i32 1, i32 1, i32 1, i32 1>
  %7 = mul i32 %5, 1
  %8 = call arm_aapcscc i8* @mem_alloc(i32 %7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12.322, i32 0, i32 0))
  %9 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %3, align 4
  %10 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %9, i32 0, i32 3
  store i8* %8, i8** %10, align 4
  %11 = load i32, i32* %4, align 4
  %12 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %3, align 4
  %13 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %12, i32 0, i32 4
  store i32 %11, i32* %13, align 4
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @desalloc_buffer(%struct.bit_stream_struc*) #0 {
  %2 = alloca %struct.bit_stream_struc*, align 4
  store %struct.bit_stream_struc* %0, %struct.bit_stream_struc** %2, align 4
  %3 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %4 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %3, i32 0, i32 3
  %5 = load i8*, i8** %4, align 4
  call arm_aapcscc void @free(i8* %5)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @putbits(%struct.bit_stream_struc*, i32, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %4 = alloca %struct.bit_stream_struc*, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  store %struct.bit_stream_struc* %0, %struct.bit_stream_struc** %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %10 = load i32, i32* %6, align 4
  store i32 %10, i32* %7, align 4
  %11 = load i32, i32* %6, align 4
  %12 = icmp sgt i32 %11, 32
  br i1 %12, label %13, label %16

; <label>:13:                                     ; preds = %3
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %15 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.13.327, i32 0, i32 0), i32 32)
  br label %16

; <label>:16:                                     ; preds = %13, %3
  %17 = load i32, i32* %6, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %17, i32 0
  %insertElmt13 = insertelement <4 x i32> %insertElmt, i32 %17, i32 1
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %17, i32 2
  %insertElmt15 = insertelement <4 x i32> %insertElmt14, i32 %17, i32 3
  store <4 x i32> %insertElmt15, <4 x i32>* %allocaVec9, align 16
  %18 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %19 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %18, i32 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = add i32 %20, %17
  store i32 %21, i32* %19, align 4
  br label %22

; <label>:22:                                     ; preds = %111, %16
  %23 = load i32, i32* %7, align 4
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %25, label %112

; <label>:25:                                     ; preds = %22
  %26 = load i32, i32* %7, align 4
  %27 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %28 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %27, i32 0, i32 7
  %29 = load i32, i32* %28, align 4
  %30 = icmp slt i32 %26, %29
  br i1 %30, label %31, label %33

; <label>:31:                                     ; preds = %25
  %32 = load i32, i32* %7, align 4
  br label %37

; <label>:33:                                     ; preds = %25
  %34 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %35 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %34, i32 0, i32 7
  %36 = load i32, i32* %35, align 4
  br label %37

; <label>:37:                                     ; preds = %33, %31
  %38 = phi i32 [ %32, %31 ], [ %36, %33 ]
  store i32 %38, i32* %8, align 4
  %39 = load i32, i32* %5, align 4
  %insertElmt16 = insertelement <4 x i32> undef, i32 %39, i32 0
  %insertElmt17 = insertelement <4 x i32> %insertElmt16, i32 %39, i32 1
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %39, i32 2
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %39, i32 3
  store <4 x i32> %insertElmt19, <4 x i32>* %allocaVec8, align 16
  %40 = load i32, i32* %7, align 4
  %insertElmt20 = insertelement <4 x i32> undef, i32 %40, i32 0
  %insertElmt21 = insertelement <4 x i32> %insertElmt20, i32 %40, i32 1
  %insertElmt22 = insertelement <4 x i32> %insertElmt21, i32 %40, i32 2
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %40, i32 3
  store <4 x i32> %insertElmt23, <4 x i32>* %allocaVec10, align 16
  %41 = load i32, i32* %8, align 4
  %insertElmt24 = insertelement <4 x i32> undef, i32 %41, i32 0
  %insertElmt25 = insertelement <4 x i32> %insertElmt24, i32 %41, i32 1
  %insertElmt26 = insertelement <4 x i32> %insertElmt25, i32 %41, i32 2
  %insertElmt27 = insertelement <4 x i32> %insertElmt26, i32 %41, i32 3
  store <4 x i32> %insertElmt27, <4 x i32>* %allocaVec11, align 16
  %42 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %43 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop = sub <4 x i32> %42, %43
  %44 = sub nsw i32 %40, %41
  %45 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %Vop28 = lshr <4 x i32> %45, %Vop
  store <4 x i32> %Vop28, <4 x i32>* %allocaVec12
  %46 = lshr i32 %39, %44
  store i32 %46, i32* %9, align 4
  %47 = load i32, i32* %9, align 4
  %48 = load i32, i32* %8, align 4
  %49 = getelementptr inbounds [9 x i32], [9 x i32]* @putmask, i32 0, i32 %48
  %50 = load i32, i32* %49, align 4
  %51 = and i32 %47, %50
  %52 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %53 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %52, i32 0, i32 7
  %54 = load i32, i32* %53, align 4
  %55 = load i32, i32* %8, align 4
  %56 = sub nsw i32 %54, %55
  %57 = shl i32 %51, %56
  %58 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %59 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %58, i32 0, i32 3
  %60 = load i8*, i8** %59, align 4
  %61 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %62 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %61, i32 0, i32 6
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds i8, i8* %60, i32 %63
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = or i32 %66, %57
  %68 = trunc i32 %67 to i8
  store i8 %68, i8* %64, align 1
  %69 = load i32, i32* %8, align 4
  %70 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %71 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %70, i32 0, i32 7
  %72 = load i32, i32* %71, align 4
  %73 = sub nsw i32 %72, %69
  store i32 %73, i32* %71, align 4
  %74 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %75 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %74, i32 0, i32 7
  %76 = load i32, i32* %75, align 4
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %100, label %78

; <label>:78:                                     ; preds = %37
  %79 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %80 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %79, i32 0, i32 7
  store i32 8, i32* %80, align 4
  %81 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %82 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %81, i32 0, i32 6
  %83 = load i32, i32* %82, align 4
  %84 = add nsw i32 %83, -1
  store i32 %84, i32* %82, align 4
  %85 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %86 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %85, i32 0, i32 6
  %87 = load i32, i32* %86, align 4
  %88 = icmp sge i32 %87, 0
  br i1 %88, label %90, label %89

; <label>:89:                                     ; preds = %78
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14.328, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11.319, i32 0, i32 0), i32 329, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__.putbits, i32 0, i32 0))
  br label %90

; <label>:90:                                     ; preds = %89, %78
  %91 = phi i1 [ true, %78 ], [ false, %89 ]
  %92 = zext i1 %91 to i32
  %93 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %94 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %93, i32 0, i32 3
  %95 = load i8*, i8** %94, align 4
  %96 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %97 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %96, i32 0, i32 6
  %98 = load i32, i32* %97, align 4
  %99 = getelementptr inbounds i8, i8* %95, i32 %98
  store i8 0, i8* %99, align 1
  br label %100

; <label>:100:                                    ; preds = %90, %37
  %101 = load i32, i32* %8, align 4
  %insertElmt29 = insertelement <4 x i32> undef, i32 %101, i32 0
  %insertElmt30 = insertelement <4 x i32> %insertElmt29, i32 %101, i32 1
  %insertElmt31 = insertelement <4 x i32> %insertElmt30, i32 %101, i32 2
  %insertElmt32 = insertelement <4 x i32> %insertElmt31, i32 %101, i32 3
  store <4 x i32> %insertElmt32, <4 x i32>* %allocaVec11, align 16
  %102 = load i32, i32* %7, align 4
  %insertElmt33 = insertelement <4 x i32> undef, i32 %102, i32 0
  %insertElmt34 = insertelement <4 x i32> %insertElmt33, i32 %102, i32 1
  %insertElmt35 = insertelement <4 x i32> %insertElmt34, i32 %102, i32 2
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %102, i32 3
  store <4 x i32> %insertElmt36, <4 x i32>* %allocaVec10, align 16
  %103 = load <4 x i32>, <4 x i32>* %allocaVec10, align 16
  %104 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop37 = sub <4 x i32> %103, %104
  store <4 x i32> %Vop37, <4 x i32>* %allocaVec10
  %105 = load <4 x i32>, <4 x i32>* %allocaVec10, align 4
  %extractE = extractelement <4 x i32> %105, i64 0
  %extractE38 = extractelement <4 x i32> %105, i64 1
  %extractE39 = extractelement <4 x i32> %105, i64 2
  %sum = add i32 %extractE, %extractE38
  %sum40 = add i32 %sum, %extractE39
  %106 = sub nsw i32 %102, %101
  %Fmul = mul i32 %106, 3
  store i32 %106, i32* %Recovery3
  %Fcmp = icmp ne i32 %sum40, %Fmul
  br i1 %Fcmp, label %107, label %111

; <label>:107:                                    ; preds = %100
  %remThree = sdiv i32 %sum40, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %108, label %109

; <label>:108:                                    ; preds = %107
  store i32 %106, i32* %Recovery3, align 4
  br label %110

; <label>:109:                                    ; preds = %107
  store i32 %extractE, i32* %Recovery3, align 4
  br label %110

; <label>:110:                                    ; preds = %109, %108
  br label %111

; <label>:111:                                    ; preds = %100, %110
  %ReplaceInst = load i32, i32* %Recovery3, align 4
  store i32 %ReplaceInst, i32* %7, align 4
  br label %22

; <label>:112:                                    ; preds = %22
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc double @calc_sfb_ave_noise(double*, double*, i32, i32, double) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %Recovery = alloca double, align 8
  %allocaVec5 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec6 = alloca <2 x double>, align 16
  %Recovery2 = alloca double, align 8
  %allocaVec7 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec8 = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %allocaVec9 = alloca <2 x double>, align 16
  %CallInst3 = alloca double, align 4
  %CallInstVec4 = alloca <2 x double>, align 16
  %allocaVec10 = alloca <2 x double>, align 16
  %6 = alloca double, align 8
  %7 = alloca double*, align 4
  %8 = alloca double*, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec13 = alloca <2 x double>, align 16
  %11 = alloca double, align 8
  %allocaVec14 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  %allocaVec15 = alloca <2 x double>, align 16
  %13 = alloca double, align 8
  %allocaVec16 = alloca <2 x double>, align 16
  %14 = alloca double, align 8
  %allocaVec17 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %allocaVec18 = alloca <2 x double>, align 16
  %16 = alloca double, align 8
  %allocaVec19 = alloca <2 x double>, align 16
  %17 = alloca double, align 8
  store double* %0, double** %7, align 4
  store double* %1, double** %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store double %4, double* %11, align 8
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec15
  store double 0.000000e+00, double* %13, align 8
  %18 = load double, double* %11, align 8
  %19 = call arm_aapcscc double @pow(double %18, double 7.500000e-01) #7
  store double %19, double* %14, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec14
  store i32 0, i32* %12, align 4
  br label %20

; <label>:20:                                     ; preds = %96, %5
  %21 = load i32, i32* %12, align 4
  %22 = load i32, i32* %9, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %22, i32 0
  %insertElmt20 = insertelement <4 x i32> %insertElmt, i32 %22, i32 1
  %insertElmt21 = insertelement <4 x i32> %insertElmt20, i32 %22, i32 2
  %insertElmt22 = insertelement <4 x i32> %insertElmt21, i32 %22, i32 3
  store <4 x i32> %insertElmt22, <4 x i32>* %allocaVec11, align 16
  %23 = load i32, i32* %10, align 4
  %insertElmt23 = insertelement <4 x i32> undef, i32 %23, i32 0
  %insertElmt24 = insertelement <4 x i32> %insertElmt23, i32 %23, i32 1
  %insertElmt25 = insertelement <4 x i32> %insertElmt24, i32 %23, i32 2
  %insertElmt26 = insertelement <4 x i32> %insertElmt25, i32 %23, i32 3
  store <4 x i32> %insertElmt26, <4 x i32>* %allocaVec12, align 16
  %24 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %25 = load <4 x i32>, <4 x i32>* %allocaVec12, align 16
  %Vop = mul <4 x i32> %24, %25
  %26 = mul nsw i32 %22, %23
  %27 = icmp slt i32 %21, %26
  br i1 %27, label %28, label %97

; <label>:28:                                     ; preds = %20
  %29 = load double*, double** %8, align 4
  %30 = load i32, i32* %12, align 4
  %31 = getelementptr inbounds double, double* %29, i32 %30
  %32 = load double, double* %31, align 8
  %33 = load double, double* %14, align 8
  %34 = fdiv double %32, %33
  %35 = call arm_aapcscc double @floor(double %34) #9
  %36 = fptosi double %35 to i32
  store i32 %36, i32* %15, align 4
  %37 = load i32, i32* %15, align 4
  %38 = icmp sgt i32 %37, 8206
  br i1 %38, label %39, label %40

; <label>:39:                                     ; preds = %28
  store <2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double>* %allocaVec10
  store double -1.000000e+00, double* %6, align 8
  br label %111

; <label>:40:                                     ; preds = %28
  %41 = load double*, double** %7, align 4
  %42 = load i32, i32* %12, align 4
  %43 = getelementptr inbounds double, double* %41, i32 %42
  %44 = load double, double* %43, align 8
  %45 = call arm_aapcscc double @fabs(double %44) #9
  %46 = load i32, i32* %15, align 4
  %47 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %46
  %48 = load double, double* %47, align 8
  %49 = load double, double* %11, align 8
  %50 = fmul double %48, %49
  %51 = fsub double %45, %50
  store double %51, double* %16, align 8
  %52 = load i32, i32* %15, align 4
  %53 = icmp slt i32 %52, 8206
  br i1 %53, label %54, label %76

; <label>:54:                                     ; preds = %40
  %55 = load double*, double** %7, align 4
  %56 = load i32, i32* %12, align 4
  %57 = getelementptr inbounds double, double* %55, i32 %56
  %58 = load double, double* %57, align 8
  %59 = call arm_aapcscc double @fabs(double %58) #9
  %60 = load i32, i32* %15, align 4
  %insertElmt27 = insertelement <4 x i32> undef, i32 %60, i32 0
  %insertElmt28 = insertelement <4 x i32> %insertElmt27, i32 %60, i32 1
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %60, i32 2
  %insertElmt30 = insertelement <4 x i32> %insertElmt29, i32 %60, i32 3
  store <4 x i32> %insertElmt30, <4 x i32>* %allocaVec17, align 16
  %61 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop31 = add <4 x i32> %61, <i32 1, i32 1, i32 1, i32 1>
  %62 = add nsw i32 %60, 1
  %63 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %62
  %64 = load double, double* %63, align 8
  %65 = load double, double* %11, align 8
  %66 = fmul double %64, %65
  %67 = fsub double %59, %66
  store double %67, double* %17, align 8
  %68 = load double, double* %17, align 8
  %69 = call arm_aapcscc double @fabs(double %68) #9
  %70 = load double, double* %16, align 8
  %71 = call arm_aapcscc double @fabs(double %70) #9
  %72 = fcmp olt double %69, %71
  br i1 %72, label %73, label %75

; <label>:73:                                     ; preds = %54
  %74 = load double, double* %17, align 8
  store double %74, double* %16, align 8
  br label %75

; <label>:75:                                     ; preds = %73, %54
  br label %76

; <label>:76:                                     ; preds = %75, %40
  %77 = load double, double* %16, align 8
  %insertElmt32 = insertelement <2 x double> undef, double %77, i32 0
  %insertElmt33 = insertelement <2 x double> %insertElmt32, double %77, i32 1
  store <2 x double> %insertElmt33, <2 x double>* %allocaVec18, align 16
  %78 = load double, double* %16, align 8
  %insertElmt34 = insertelement <2 x double> undef, double %78, i32 0
  %insertElmt35 = insertelement <2 x double> %insertElmt34, double %78, i32 1
  store <2 x double> %insertElmt35, <2 x double>* %allocaVec18, align 16
  %79 = load <2 x double>, <2 x double>* %allocaVec18, align 16
  %80 = load <2 x double>, <2 x double>* %allocaVec18, align 16
  %Vop36 = fmul <2 x double> %79, %80
  %81 = fmul double %77, %78
  %82 = load double, double* %13, align 8
  %insertElmt37 = insertelement <2 x double> undef, double %82, i32 0
  %insertElmt38 = insertelement <2 x double> %insertElmt37, double %82, i32 1
  store <2 x double> %insertElmt38, <2 x double>* %allocaVec15, align 16
  %83 = load <2 x double>, <2 x double>* %allocaVec15, align 16
  %Vop39 = fadd <2 x double> %83, %Vop36
  store <2 x double> %Vop39, <2 x double>* %allocaVec15
  %84 = fadd double %82, %81
  store double %84, double* %13, align 8
  br label %85

; <label>:85:                                     ; preds = %76
  %86 = load i32, i32* %9, align 4
  %insertElmt40 = insertelement <4 x i32> undef, i32 %86, i32 0
  %insertElmt41 = insertelement <4 x i32> %insertElmt40, i32 %86, i32 1
  %insertElmt42 = insertelement <4 x i32> %insertElmt41, i32 %86, i32 2
  %insertElmt43 = insertelement <4 x i32> %insertElmt42, i32 %86, i32 3
  store <4 x i32> %insertElmt43, <4 x i32>* %allocaVec11, align 16
  %87 = load i32, i32* %12, align 4
  %insertElmt44 = insertelement <4 x i32> undef, i32 %87, i32 0
  %insertElmt45 = insertelement <4 x i32> %insertElmt44, i32 %87, i32 1
  %insertElmt46 = insertelement <4 x i32> %insertElmt45, i32 %87, i32 2
  %insertElmt47 = insertelement <4 x i32> %insertElmt46, i32 %87, i32 3
  store <4 x i32> %insertElmt47, <4 x i32>* %allocaVec14, align 16
  %88 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %89 = load <4 x i32>, <4 x i32>* %allocaVec11, align 16
  %Vop48 = add <4 x i32> %88, %89
  store <4 x i32> %Vop48, <4 x i32>* %allocaVec14
  %90 = load <4 x i32>, <4 x i32>* %allocaVec14, align 4
  %extractE = extractelement <4 x i32> %90, i64 0
  %extractE49 = extractelement <4 x i32> %90, i64 1
  %extractE50 = extractelement <4 x i32> %90, i64 2
  %sum = add i32 %extractE, %extractE49
  %sum51 = add i32 %sum, %extractE50
  %91 = add nsw i32 %87, %86
  %Fmul = mul i32 %91, 3
  store i32 %91, i32* %Recovery1
  %Fcmp = icmp ne i32 %sum51, %Fmul
  br i1 %Fcmp, label %92, label %96

; <label>:92:                                     ; preds = %85
  %remThree = sdiv i32 %sum51, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %93, label %94

; <label>:93:                                     ; preds = %92
  store i32 %91, i32* %Recovery1, align 4
  br label %95

; <label>:94:                                     ; preds = %92
  store i32 %extractE, i32* %Recovery1, align 4
  br label %95

; <label>:95:                                     ; preds = %94, %93
  br label %96

; <label>:96:                                     ; preds = %85, %95
  %ReplaceInst = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst, i32* %12, align 4
  br label %20

; <label>:97:                                     ; preds = %20
  %98 = load double, double* %13, align 8
  %99 = load i32, i32* %10, align 4
  %100 = sitofp i32 %99 to double
  %101 = load <2 x double>, <2 x double>* %allocaVec15, align 16
  store double %100, double* %CastInst
  %102 = load double, double* %CastInst, align 4
  %insertCast = insertelement <2 x double> undef, double %102, i32 0
  %insertCast52 = insertelement <2 x double> %insertCast, double %102, i32 1
  store <2 x double> %insertCast52, <2 x double>* %CastInstVec, align 4
  %103 = load <2 x double>, <2 x double>* %CastInstVec, align 4
  %Vop53 = fdiv <2 x double> %101, %103
  store <2 x double> %Vop53, <2 x double>* %allocaVec10
  %104 = load <2 x double>, <2 x double>* %allocaVec10, align 4
  %extractE55 = extractelement <2 x double> %104, i64 0
  %extractE56 = extractelement <2 x double> %104, i64 1
  %sum57 = fadd double %extractE55, %extractE56
  %sum58 = fadd double %sum57, %extractE56
  %105 = fdiv double %98, %100
  %Fmul54 = fmul double %105, 3.000000e+00
  store double %105, double* %Recovery2
  %Fcmp59 = fcmp une double %sum58, %Fmul54
  br i1 %Fcmp59, label %106, label %110

; <label>:106:                                    ; preds = %97
  %remThree60 = fdiv double %sum58, %extractE55
  %FcmpThree61 = fcmp une double %remThree60, 3.000000e+00
  br i1 %FcmpThree61, label %107, label %108

; <label>:107:                                    ; preds = %106
  store double %105, double* %Recovery2, align 8
  br label %109

; <label>:108:                                    ; preds = %106
  store double %extractE55, double* %Recovery2, align 8
  br label %109

; <label>:109:                                    ; preds = %108, %107
  br label %110

; <label>:110:                                    ; preds = %97, %109
  %ReplaceInst62 = load double, double* %Recovery2, align 8
  store double %ReplaceInst62, double* %6, align 8
  br label %111

; <label>:111:                                    ; preds = %110, %39
  %112 = load double, double* %6, align 8
  ret double %112
}

; Function Attrs: nounwind
define arm_aapcscc double @find_scalefac(double*, double*, i32, i32, double, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec3 = alloca <2 x double>, align 16
  %Recovery1 = alloca double, align 8
  %allocaVec4 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec5 = alloca <2 x double>, align 16
  %7 = alloca double, align 8
  %8 = alloca double*, align 4
  %9 = alloca double*, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec8 = alloca <2 x double>, align 16
  %12 = alloca double, align 8
  %allocaVec9 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %allocaVec10 = alloca <2 x double>, align 16
  %14 = alloca double, align 8
  %allocaVec11 = alloca <2 x double>, align 16
  %15 = alloca double, align 8
  %allocaVec12 = alloca <2 x double>, align 16
  %16 = alloca double, align 8
  %allocaVec13 = alloca <2 x double>, align 16
  %17 = alloca double, align 8
  %allocaVec14 = alloca <2 x double>, align 16
  %18 = alloca double, align 8
  %allocaVec15 = alloca <4 x i32>, align 16
  %19 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %20 = alloca i32, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %21 = alloca i32, align 4
  %allocaVec18 = alloca <4 x i32>, align 16
  %22 = alloca i32, align 4
  store double* %0, double** %8, align 4
  store double* %1, double** %9, align 4
  store i32 %2, i32* %10, align 4
  store i32 %3, i32* %11, align 4
  store double %4, double* %12, align 8
  store i32 %5, i32* %13, align 4
  store <2 x double> <double -2.050000e+01, double -2.050000e+01>, <2 x double>* %allocaVec12
  store double -2.050000e+01, double* %16, align 8
  store <4 x i32> <i32 -82, i32 -82, i32 -82, i32 -82>, <4 x i32>* %allocaVec15
  store i32 -82, i32* %19, align 4
  store <2 x double> <double 3.200000e+01, double 3.200000e+01>, <2 x double>* %allocaVec14
  store double 3.200000e+01, double* %18, align 8
  store <4 x i32> <i32 128, i32 128, i32 128, i32 128>, <4 x i32>* %allocaVec17
  store i32 128, i32* %21, align 4
  store <2 x double> <double 1.000000e+04, double 1.000000e+04>, <2 x double>* %allocaVec13
  store double 1.000000e+04, double* %17, align 8
  store <4 x i32> <i32 10000, i32 10000, i32 10000, i32 10000>, <4 x i32>* %allocaVec16
  store i32 10000, i32* %20, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec18
  store i32 0, i32* %22, align 4
  br label %23

; <label>:23:                                     ; preds = %103, %6
  %24 = load i32, i32* %22, align 4
  %25 = icmp slt i32 %24, 7
  br i1 %25, label %26, label %104

; <label>:26:                                     ; preds = %23
  %27 = load double, double* %18, align 8
  %insertElmt = insertelement <2 x double> undef, double %27, i32 0
  %insertElmt19 = insertelement <2 x double> %insertElmt, double %27, i32 1
  store <2 x double> %insertElmt19, <2 x double>* %allocaVec14, align 16
  %28 = load <2 x double>, <2 x double>* %allocaVec14, align 16
  %Vop = fdiv <2 x double> %28, <double 2.000000e+00, double 2.000000e+00>
  store <2 x double> %Vop, <2 x double>* %allocaVec14
  %29 = fdiv double %27, 2.000000e+00
  store double %29, double* %18, align 8
  %30 = load i32, i32* %21, align 4
  %insertElmt20 = insertelement <4 x i32> undef, i32 %30, i32 0
  %insertElmt21 = insertelement <4 x i32> %insertElmt20, i32 %30, i32 1
  %insertElmt22 = insertelement <4 x i32> %insertElmt21, i32 %30, i32 2
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %30, i32 3
  store <4 x i32> %insertElmt23, <4 x i32>* %allocaVec17, align 16
  %31 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop24 = sdiv <4 x i32> %31, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %Vop24, <4 x i32>* %allocaVec17
  %32 = sdiv i32 %30, 2
  store i32 %32, i32* %21, align 4
  %33 = load double, double* %16, align 8
  %34 = call arm_aapcscc double @pow(double 2.000000e+00, double %33) #7
  store double %34, double* %15, align 8
  %35 = load double*, double** %8, align 4
  %36 = load double*, double** %9, align 4
  %37 = load i32, i32* %10, align 4
  %38 = load i32, i32* %13, align 4
  %39 = load double, double* %15, align 8
  %40 = call arm_aapcscc double @calc_sfb_ave_noise(double* %35, double* %36, i32 %37, i32 %38, double %39)
  store double %40, double* %14, align 8
  %41 = load double, double* %14, align 8
  %42 = fcmp olt double %41, 0.000000e+00
  br i1 %42, label %43, label %54

; <label>:43:                                     ; preds = %26
  %44 = load double, double* %18, align 8
  %45 = load double, double* %16, align 8
  %insertElmt25 = insertelement <2 x double> undef, double %45, i32 0
  %insertElmt26 = insertelement <2 x double> %insertElmt25, double %45, i32 1
  store <2 x double> %insertElmt26, <2 x double>* %allocaVec12, align 16
  %46 = load <2 x double>, <2 x double>* %allocaVec12, align 16
  %47 = load <2 x double>, <2 x double>* %allocaVec14, align 16
  %Vop27 = fadd <2 x double> %46, %47
  store <2 x double> %Vop27, <2 x double>* %allocaVec12
  %48 = fadd double %45, %44
  store double %48, double* %16, align 8
  %49 = load i32, i32* %21, align 4
  %50 = load i32, i32* %19, align 4
  %insertElmt28 = insertelement <4 x i32> undef, i32 %50, i32 0
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %50, i32 1
  %insertElmt30 = insertelement <4 x i32> %insertElmt29, i32 %50, i32 2
  %insertElmt31 = insertelement <4 x i32> %insertElmt30, i32 %50, i32 3
  store <4 x i32> %insertElmt31, <4 x i32>* %allocaVec15, align 16
  %51 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %52 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop32 = add <4 x i32> %51, %52
  store <4 x i32> %Vop32, <4 x i32>* %allocaVec15
  %53 = add nsw i32 %50, %49
  store i32 %53, i32* %19, align 4
  br label %93

; <label>:54:                                     ; preds = %26
  %55 = load double, double* %17, align 8
  %56 = fcmp oeq double %55, 1.000000e+04
  br i1 %56, label %57, label %59

; <label>:57:                                     ; preds = %54
  %58 = load double, double* %16, align 8
  store double %58, double* %17, align 8
  br label %59

; <label>:59:                                     ; preds = %57, %54
  %60 = load i32, i32* %20, align 4
  %61 = icmp eq i32 %60, 10000
  br i1 %61, label %62, label %64

; <label>:62:                                     ; preds = %59
  %63 = load i32, i32* %19, align 4
  store i32 %63, i32* %20, align 4
  br label %64

; <label>:64:                                     ; preds = %62, %59
  %65 = load double, double* %14, align 8
  %66 = load double, double* %12, align 8
  %67 = fcmp ogt double %65, %66
  br i1 %67, label %68, label %79

; <label>:68:                                     ; preds = %64
  %69 = load double, double* %18, align 8
  %70 = load double, double* %16, align 8
  %71 = load <2 x double>, <2 x double>* %allocaVec12, align 16
  %72 = load <2 x double>, <2 x double>* %allocaVec14, align 16
  %Vop33 = fsub <2 x double> %71, %72
  store <2 x double> %Vop33, <2 x double>* %allocaVec12
  %73 = fsub double %70, %69
  store double %73, double* %16, align 8
  %74 = load i32, i32* %21, align 4
  %75 = load i32, i32* %19, align 4
  %76 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %77 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop34 = sub <4 x i32> %76, %77
  store <4 x i32> %Vop34, <4 x i32>* %allocaVec15
  %78 = sub nsw i32 %75, %74
  store i32 %78, i32* %19, align 4
  br label %92

; <label>:79:                                     ; preds = %64
  %80 = load double, double* %16, align 8
  store double %80, double* %17, align 8
  %81 = load i32, i32* %19, align 4
  store i32 %81, i32* %20, align 4
  %82 = load double, double* %18, align 8
  %83 = load double, double* %16, align 8
  %84 = load <2 x double>, <2 x double>* %allocaVec12, align 16
  %85 = load <2 x double>, <2 x double>* %allocaVec14, align 16
  %Vop35 = fadd <2 x double> %84, %85
  store <2 x double> %Vop35, <2 x double>* %allocaVec12
  %86 = fadd double %83, %82
  store double %86, double* %16, align 8
  %87 = load i32, i32* %21, align 4
  %88 = load i32, i32* %19, align 4
  %89 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %90 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop36 = add <4 x i32> %89, %90
  store <4 x i32> %Vop36, <4 x i32>* %allocaVec15
  %91 = add nsw i32 %88, %87
  store i32 %91, i32* %19, align 4
  br label %92

; <label>:92:                                     ; preds = %79, %68
  br label %93

; <label>:93:                                     ; preds = %92, %43
  br label %94

; <label>:94:                                     ; preds = %93
  %95 = load i32, i32* %22, align 4
  %insertElmt37 = insertelement <4 x i32> undef, i32 %95, i32 0
  %insertElmt38 = insertelement <4 x i32> %insertElmt37, i32 %95, i32 1
  %insertElmt39 = insertelement <4 x i32> %insertElmt38, i32 %95, i32 2
  %insertElmt40 = insertelement <4 x i32> %insertElmt39, i32 %95, i32 3
  store <4 x i32> %insertElmt40, <4 x i32>* %allocaVec18, align 16
  %96 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop41 = add <4 x i32> %96, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop41, <4 x i32>* %allocaVec18
  %97 = load <4 x i32>, <4 x i32>* %allocaVec18, align 4
  %extractE = extractelement <4 x i32> %97, i64 0
  %extractE42 = extractelement <4 x i32> %97, i64 1
  %extractE43 = extractelement <4 x i32> %97, i64 2
  %sum = add i32 %extractE, %extractE42
  %sum44 = add i32 %sum, %extractE43
  %98 = add nsw i32 %95, 1
  %Fmul = mul i32 %98, 3
  store i32 %98, i32* %Recovery
  %Fcmp = icmp ne i32 %sum44, %Fmul
  br i1 %Fcmp, label %99, label %103

; <label>:99:                                     ; preds = %94
  %remThree = sdiv i32 %sum44, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %100, label %101

; <label>:100:                                    ; preds = %99
  store i32 %98, i32* %Recovery, align 4
  br label %102

; <label>:101:                                    ; preds = %99
  store i32 %extractE, i32* %Recovery, align 4
  br label %102

; <label>:102:                                    ; preds = %101, %100
  br label %103

; <label>:103:                                    ; preds = %94, %102
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %22, align 4
  br label %23

; <label>:104:                                    ; preds = %23
  %105 = load double, double* %17, align 8
  %106 = fcmp une double %105, 1.000000e+04
  br i1 %106, label %108, label %107

; <label>:107:                                    ; preds = %104
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.329, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.330, i32 0, i32 0), i32 108, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__.find_scalefac, i32 0, i32 0))
  br label %108

; <label>:108:                                    ; preds = %107, %104
  %109 = phi i1 [ true, %104 ], [ false, %107 ]
  %110 = zext i1 %109 to i32
  %111 = load double, double* %17, align 8
  %insertElmt45 = insertelement <2 x double> undef, double %111, i32 0
  %insertElmt46 = insertelement <2 x double> %insertElmt45, double %111, i32 1
  store <2 x double> %insertElmt46, <2 x double>* %allocaVec13, align 16
  %112 = load <2 x double>, <2 x double>* %allocaVec13, align 16
  %Vop47 = fadd <2 x double> %112, <double 7.500000e-01, double 7.500000e-01>
  store <2 x double> %Vop47, <2 x double>* %allocaVec12
  %113 = fadd double %111, 7.500000e-01
  store double %113, double* %16, align 8
  %114 = load i32, i32* %20, align 4
  %insertElmt48 = insertelement <4 x i32> undef, i32 %114, i32 0
  %insertElmt49 = insertelement <4 x i32> %insertElmt48, i32 %114, i32 1
  %insertElmt50 = insertelement <4 x i32> %insertElmt49, i32 %114, i32 2
  %insertElmt51 = insertelement <4 x i32> %insertElmt50, i32 %114, i32 3
  store <4 x i32> %insertElmt51, <4 x i32>* %allocaVec16, align 16
  %115 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop52 = add <4 x i32> %115, <i32 3, i32 3, i32 3, i32 3>
  store <4 x i32> %Vop52, <4 x i32>* %allocaVec15
  %116 = add nsw i32 %114, 3
  store i32 %116, i32* %19, align 4
  br label %117

; <label>:117:                                    ; preds = %188, %108
  %118 = load double, double* %16, align 8
  %119 = load double, double* %17, align 8
  %insertElmt53 = insertelement <2 x double> undef, double %119, i32 0
  %insertElmt54 = insertelement <2 x double> %insertElmt53, double %119, i32 1
  store <2 x double> %insertElmt54, <2 x double>* %allocaVec13, align 16
  %120 = load <2 x double>, <2 x double>* %allocaVec13, align 16
  %Vop55 = fadd <2 x double> %120, <double 1.000000e-02, double 1.000000e-02>
  %121 = fadd double %119, 1.000000e-02
  %122 = fcmp ogt double %118, %121
  br i1 %122, label %123, label %189

; <label>:123:                                    ; preds = %117
  %124 = load double, double* %16, align 8
  %125 = load double, double* %17, align 8
  %insertElmt56 = insertelement <2 x double> undef, double %125, i32 0
  %insertElmt57 = insertelement <2 x double> %insertElmt56, double %125, i32 1
  store <2 x double> %insertElmt57, <2 x double>* %allocaVec13, align 16
  %126 = load double, double* %18, align 8
  %127 = load <2 x double>, <2 x double>* %allocaVec14, align 16
  %Vop58 = fmul <2 x double> <double 2.000000e+00, double 2.000000e+00>, %127
  %128 = fmul double 2.000000e+00, %126
  %129 = load <2 x double>, <2 x double>* %allocaVec13, align 16
  %Vop59 = fadd <2 x double> %129, %Vop58
  %130 = fadd double %125, %128
  %131 = load <2 x double>, <2 x double>* %allocaVec12, align 16
  %Vop60 = fsub <2 x double> %131, %Vop59
  %132 = fsub double %124, %130
  %133 = call arm_aapcscc double @fabs(double %132) #9
  %134 = fcmp olt double %133, 1.000000e-02
  br i1 %134, label %135, label %139

; <label>:135:                                    ; preds = %123
  %136 = load double, double* %16, align 8
  %137 = load <2 x double>, <2 x double>* %allocaVec12, align 16
  %Vop61 = fsub <2 x double> %137, <double 2.500000e-01, double 2.500000e-01>
  store <2 x double> %Vop61, <2 x double>* %allocaVec12
  %138 = fsub double %136, 2.500000e-01
  store double %138, double* %16, align 8
  br label %139

; <label>:139:                                    ; preds = %135, %123
  %140 = load i32, i32* %19, align 4
  %141 = load i32, i32* %20, align 4
  %insertElmt62 = insertelement <4 x i32> undef, i32 %141, i32 0
  %insertElmt63 = insertelement <4 x i32> %insertElmt62, i32 %141, i32 1
  %insertElmt64 = insertelement <4 x i32> %insertElmt63, i32 %141, i32 2
  %insertElmt65 = insertelement <4 x i32> %insertElmt64, i32 %141, i32 3
  store <4 x i32> %insertElmt65, <4 x i32>* %allocaVec16, align 16
  %142 = load i32, i32* %21, align 4
  %143 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop66 = mul <4 x i32> <i32 2, i32 2, i32 2, i32 2>, %143
  %144 = mul nsw i32 2, %142
  %145 = load <4 x i32>, <4 x i32>* %allocaVec16, align 16
  %Vop67 = add <4 x i32> %145, %Vop66
  %146 = add nsw i32 %141, %144
  %147 = icmp eq i32 %140, %146
  br i1 %147, label %148, label %152

; <label>:148:                                    ; preds = %139
  %149 = load i32, i32* %19, align 4
  %150 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop68 = sub <4 x i32> %150, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop68, <4 x i32>* %allocaVec15
  %151 = sub nsw i32 %149, 1
  store i32 %151, i32* %19, align 4
  br label %152

; <label>:152:                                    ; preds = %148, %139
  %153 = load double, double* %16, align 8
  %154 = call arm_aapcscc double @pow(double 2.000000e+00, double %153) #7
  store double %154, double* %15, align 8
  %155 = load double*, double** %8, align 4
  %156 = load double*, double** %9, align 4
  %157 = load i32, i32* %10, align 4
  %158 = load i32, i32* %13, align 4
  %159 = load double, double* %15, align 8
  %160 = call arm_aapcscc double @calc_sfb_ave_noise(double* %155, double* %156, i32 %157, i32 %158, double %159)
  store double %160, double* %14, align 8
  %161 = load double, double* %14, align 8
  %162 = fcmp ogt double %161, 0.000000e+00
  br i1 %162, label %163, label %170

; <label>:163:                                    ; preds = %152
  %164 = load double, double* %14, align 8
  %165 = load double, double* %12, align 8
  %166 = fcmp ole double %164, %165
  br i1 %166, label %167, label %169

; <label>:167:                                    ; preds = %163
  %168 = load double, double* %16, align 8
  store double %168, double* %7, align 8
  br label %191

; <label>:169:                                    ; preds = %163
  br label %170

; <label>:170:                                    ; preds = %169, %152
  %171 = load double, double* %16, align 8
  %172 = load <2 x double>, <2 x double>* %allocaVec12, align 16
  %Vop69 = fsub <2 x double> %172, <double 2.500000e-01, double 2.500000e-01>
  store <2 x double> %Vop69, <2 x double>* %allocaVec12
  %173 = load <2 x double>, <2 x double>* %allocaVec12, align 4
  %extractE71 = extractelement <2 x double> %173, i64 0
  %extractE72 = extractelement <2 x double> %173, i64 1
  %sum73 = fadd double %extractE71, %extractE72
  %sum74 = fadd double %sum73, %extractE72
  %174 = fsub double %171, 2.500000e-01
  %Fmul70 = fmul double %174, 3.000000e+00
  store double %174, double* %Recovery1
  %Fcmp75 = fcmp une double %sum74, %Fmul70
  br i1 %Fcmp75, label %175, label %179

; <label>:175:                                    ; preds = %170
  %remThree84 = fdiv double %sum74, %extractE71
  %FcmpThree85 = fcmp une double %remThree84, 3.000000e+00
  br i1 %FcmpThree85, label %176, label %177

; <label>:176:                                    ; preds = %175
  store double %174, double* %Recovery1, align 8
  br label %178

; <label>:177:                                    ; preds = %175
  store double %extractE71, double* %Recovery1, align 8
  br label %178

; <label>:178:                                    ; preds = %177, %176
  br label %179

; <label>:179:                                    ; preds = %170, %178
  %ReplaceInst88 = load double, double* %Recovery1, align 8
  store double %ReplaceInst88, double* %16, align 8
  %180 = load i32, i32* %19, align 4
  %181 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop76 = sub <4 x i32> %181, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop76, <4 x i32>* %allocaVec15
  %182 = load <4 x i32>, <4 x i32>* %allocaVec15, align 4
  %extractE78 = extractelement <4 x i32> %182, i64 0
  %extractE79 = extractelement <4 x i32> %182, i64 1
  %extractE80 = extractelement <4 x i32> %182, i64 2
  %sum81 = add i32 %extractE78, %extractE79
  %sum82 = add i32 %sum81, %extractE80
  %183 = sub nsw i32 %180, 1
  %Fmul77 = mul i32 %183, 3
  store i32 %183, i32* %Recovery2
  %Fcmp83 = icmp ne i32 %sum82, %Fmul77
  br i1 %Fcmp83, label %184, label %188

; <label>:184:                                    ; preds = %179
  %remThree86 = sdiv i32 %sum82, %extractE78
  %FcmpThree87 = icmp ne i32 %remThree86, 3
  br i1 %FcmpThree87, label %185, label %186

; <label>:185:                                    ; preds = %184
  store i32 %183, i32* %Recovery2, align 4
  br label %187

; <label>:186:                                    ; preds = %184
  store i32 %extractE78, i32* %Recovery2, align 4
  br label %187

; <label>:187:                                    ; preds = %186, %185
  br label %188

; <label>:188:                                    ; preds = %179, %187
  %ReplaceInst89 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst89, i32* %19, align 4
  br label %117

; <label>:189:                                    ; preds = %117
  %190 = load double, double* %17, align 8
  store double %190, double* %7, align 8
  br label %191

; <label>:191:                                    ; preds = %189, %167
  %192 = load double, double* %7, align 8
  ret double %192
}

; Function Attrs: nounwind
define arm_aapcscc double @compute_scalefacs_short([3 x double]*, %struct.gr_info*, [3 x i32]*) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %Recovery = alloca double, align 8
  %allocaVec7 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec9 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec10 = alloca <2 x double>, align 16
  %CastInst3 = alloca double, align 4
  %CastInstVec4 = alloca <2 x double>, align 16
  %allocaVec11 = alloca <2 x double>, align 16
  %CastInst5 = alloca double, align 4
  %CastInstVec6 = alloca <2 x double>, align 16
  %4 = alloca [3 x double]*, align 4
  %5 = alloca %struct.gr_info*, align 4
  %6 = alloca [3 x i32]*, align 4
  %allocaVec12 = alloca <2 x double>, align 16
  %7 = alloca double, align 8
  %allocaVec13 = alloca <2 x double>, align 16
  %8 = alloca double, align 8
  %9 = alloca [12 x [3 x double]], align 8
  %allocaVec14 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %12 = alloca i32, align 4
  store [3 x double]* %0, [3 x double]** %4, align 4
  store %struct.gr_info* %1, %struct.gr_info** %5, align 4
  store [3 x i32]* %2, [3 x i32]** %6, align 4
  %13 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %14 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %13, i32 0, i32 13
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 2, i32 1
  store i32 %17, i32* %12, align 4
  %18 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %9, i32 0, i32 0
  %19 = bitcast [3 x double]* %18 to i8*
  %20 = load [3 x double]*, [3 x double]** %4, align 4
  %21 = bitcast [3 x double]* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %19, i8* %21, i32 288, i32 8, i1 false)
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec13
  store double 0.000000e+00, double* %8, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec14
  store i32 0, i32* %10, align 4
  br label %22

; <label>:22:                                     ; preds = %101, %3
  %23 = load i32, i32* %10, align 4
  %24 = icmp slt i32 %23, 12
  br i1 %24, label %25, label %102

; <label>:25:                                     ; preds = %22
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec15
  store i32 0, i32* %11, align 4
  br label %26

; <label>:26:                                     ; preds = %90, %25
  %27 = load i32, i32* %11, align 4
  %28 = icmp slt i32 %27, 3
  br i1 %28, label %29, label %91

; <label>:29:                                     ; preds = %26
  %30 = load i32, i32* %10, align 4
  %31 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %9, i32 0, i32 %30
  %32 = load i32, i32* %11, align 4
  %33 = getelementptr inbounds [3 x double], [3 x double]* %31, i32 0, i32 %32
  %34 = load double, double* %33, align 8
  %35 = fsub double -0.000000e+00, %34
  %36 = load i32, i32* %12, align 4
  %37 = sitofp i32 %36 to double
  %38 = fmul double %35, %37
  %39 = fadd double %38, 7.500000e-01
  %40 = fadd double %39, 1.000000e-04
  %41 = call arm_aapcscc double @floor(double %40) #9
  %42 = fptosi double %41 to i32
  %43 = load [3 x i32]*, [3 x i32]** %6, align 4
  %44 = load i32, i32* %10, align 4
  %45 = getelementptr inbounds [3 x i32], [3 x i32]* %43, i32 %44
  %46 = load i32, i32* %11, align 4
  %47 = getelementptr inbounds [3 x i32], [3 x i32]* %45, i32 0, i32 %46
  store i32 %42, i32* %47, align 4
  %48 = load i32, i32* %10, align 4
  %49 = icmp slt i32 %48, 6
  br i1 %49, label %50, label %56

; <label>:50:                                     ; preds = %29
  %51 = load i32, i32* %12, align 4
  %52 = sitofp i32 %51 to double
  store double %52, double* %CastInst3
  %53 = load double, double* %CastInst3, align 4
  %insertCast = insertelement <2 x double> undef, double %53, i32 0
  %insertCast17 = insertelement <2 x double> %insertCast, double %53, i32 1
  store <2 x double> %insertCast17, <2 x double>* %CastInstVec4, align 4
  %54 = load <2 x double>, <2 x double>* %CastInstVec4, align 4
  %Vop = fdiv <2 x double> <double 1.500000e+01, double 1.500000e+01>, %54
  store <2 x double> %Vop, <2 x double>* %allocaVec12
  %55 = fdiv double 1.500000e+01, %52
  store double %55, double* %7, align 8
  br label %62

; <label>:56:                                     ; preds = %29
  %57 = load i32, i32* %12, align 4
  %58 = sitofp i32 %57 to double
  store double %58, double* %CastInst5
  %59 = load double, double* %CastInst5, align 4
  %insertCast18 = insertelement <2 x double> undef, double %59, i32 0
  %insertCast19 = insertelement <2 x double> %insertCast18, double %59, i32 1
  store <2 x double> %insertCast19, <2 x double>* %CastInstVec6, align 4
  %60 = load <2 x double>, <2 x double>* %CastInstVec6, align 4
  %Vop20 = fdiv <2 x double> <double 7.000000e+00, double 7.000000e+00>, %60
  store <2 x double> %Vop20, <2 x double>* %allocaVec12
  %61 = fdiv double 7.000000e+00, %58
  store double %61, double* %7, align 8
  br label %62

; <label>:62:                                     ; preds = %56, %50
  %63 = load double, double* %7, align 8
  %64 = load i32, i32* %10, align 4
  %65 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %9, i32 0, i32 %64
  %66 = load i32, i32* %11, align 4
  %67 = getelementptr inbounds [3 x double], [3 x double]* %65, i32 0, i32 %66
  %68 = load double, double* %67, align 8
  %69 = fadd double %63, %68
  %70 = load double, double* %8, align 8
  %71 = fcmp ogt double %69, %70
  br i1 %71, label %72, label %80

; <label>:72:                                     ; preds = %62
  %73 = load double, double* %7, align 8
  %74 = load i32, i32* %10, align 4
  %75 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %9, i32 0, i32 %74
  %76 = load i32, i32* %11, align 4
  %77 = getelementptr inbounds [3 x double], [3 x double]* %75, i32 0, i32 %76
  %78 = load double, double* %77, align 8
  %79 = fadd double %73, %78
  store double %79, double* %8, align 8
  br label %80

; <label>:80:                                     ; preds = %72, %62
  br label %81

; <label>:81:                                     ; preds = %80
  %82 = load i32, i32* %11, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %82, i32 0
  %insertElmt21 = insertelement <4 x i32> %insertElmt, i32 %82, i32 1
  %insertElmt22 = insertelement <4 x i32> %insertElmt21, i32 %82, i32 2
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %82, i32 3
  store <4 x i32> %insertElmt23, <4 x i32>* %allocaVec15, align 16
  %83 = load <4 x i32>, <4 x i32>* %allocaVec15, align 16
  %Vop24 = add <4 x i32> %83, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop24, <4 x i32>* %allocaVec15
  %84 = load <4 x i32>, <4 x i32>* %allocaVec15, align 4
  %extractE = extractelement <4 x i32> %84, i64 0
  %extractE25 = extractelement <4 x i32> %84, i64 1
  %extractE26 = extractelement <4 x i32> %84, i64 2
  %sum = add i32 %extractE, %extractE25
  %sum27 = add i32 %sum, %extractE26
  %85 = add nsw i32 %82, 1
  %Fmul = mul i32 %85, 3
  store i32 %85, i32* %Recovery1
  %Fcmp = icmp ne i32 %sum27, %Fmul
  br i1 %Fcmp, label %86, label %90

; <label>:86:                                     ; preds = %81
  %remThree = sdiv i32 %sum27, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %87, label %88

; <label>:87:                                     ; preds = %86
  store i32 %85, i32* %Recovery1, align 4
  br label %89

; <label>:88:                                     ; preds = %86
  store i32 %extractE, i32* %Recovery1, align 4
  br label %89

; <label>:89:                                     ; preds = %88, %87
  br label %90

; <label>:90:                                     ; preds = %81, %89
  %ReplaceInst = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst, i32* %11, align 4
  br label %26

; <label>:91:                                     ; preds = %26
  br label %92

; <label>:92:                                     ; preds = %91
  %93 = load i32, i32* %10, align 4
  %insertElmt28 = insertelement <4 x i32> undef, i32 %93, i32 0
  %insertElmt29 = insertelement <4 x i32> %insertElmt28, i32 %93, i32 1
  %insertElmt30 = insertelement <4 x i32> %insertElmt29, i32 %93, i32 2
  %insertElmt31 = insertelement <4 x i32> %insertElmt30, i32 %93, i32 3
  store <4 x i32> %insertElmt31, <4 x i32>* %allocaVec14, align 16
  %94 = load <4 x i32>, <4 x i32>* %allocaVec14, align 16
  %Vop32 = add <4 x i32> %94, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop32, <4 x i32>* %allocaVec14
  %95 = load <4 x i32>, <4 x i32>* %allocaVec14, align 4
  %extractE34 = extractelement <4 x i32> %95, i64 0
  %extractE35 = extractelement <4 x i32> %95, i64 1
  %extractE36 = extractelement <4 x i32> %95, i64 2
  %sum37 = add i32 %extractE34, %extractE35
  %sum38 = add i32 %sum37, %extractE36
  %96 = add nsw i32 %93, 1
  %Fmul33 = mul i32 %96, 3
  store i32 %96, i32* %Recovery2
  %Fcmp39 = icmp ne i32 %sum38, %Fmul33
  br i1 %Fcmp39, label %97, label %101

; <label>:97:                                     ; preds = %92
  %remThree40 = sdiv i32 %sum38, %extractE34
  %FcmpThree41 = icmp ne i32 %remThree40, 3
  br i1 %FcmpThree41, label %98, label %99

; <label>:98:                                     ; preds = %97
  store i32 %96, i32* %Recovery2, align 4
  br label %100

; <label>:99:                                     ; preds = %97
  store i32 %extractE34, i32* %Recovery2, align 4
  br label %100

; <label>:100:                                    ; preds = %99, %98
  br label %101

; <label>:101:                                    ; preds = %92, %100
  %ReplaceInst42 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst42, i32* %10, align 4
  br label %22

; <label>:102:                                    ; preds = %22
  %103 = load double, double* %8, align 8
  ret double %103
}

; Function Attrs: nounwind
define arm_aapcscc double @compute_scalefacs_long(double*, %struct.gr_info*, i32*) #0 {
  %allocaVec = alloca <2 x double>, align 16
  %Recovery = alloca double, align 8
  %allocaVec11 = alloca <2 x double>, align 16
  %Recovery1 = alloca double, align 8
  %allocaVec12 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec13 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec14 = alloca <2 x double>, align 16
  %CastInst3 = alloca double, align 4
  %CastInstVec4 = alloca <2 x double>, align 16
  %allocaVec15 = alloca <2 x double>, align 16
  %CastInst5 = alloca double, align 4
  %CastInstVec6 = alloca <2 x double>, align 16
  %allocaVec16 = alloca <2 x double>, align 16
  %CastInst7 = alloca double, align 4
  %CastInstVec8 = alloca <2 x double>, align 16
  %allocaVec17 = alloca <2 x double>, align 16
  %CastInst9 = alloca double, align 4
  %CastInstVec10 = alloca <2 x double>, align 16
  %4 = alloca double*, align 4
  %5 = alloca %struct.gr_info*, align 4
  %6 = alloca i32*, align 4
  %allocaVec18 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %8 = alloca [21 x double], align 8
  %allocaVec19 = alloca <2 x double>, align 16
  %9 = alloca double, align 8
  %allocaVec20 = alloca <2 x double>, align 16
  %10 = alloca double, align 8
  %allocaVec21 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  store double* %0, double** %4, align 4
  store %struct.gr_info* %1, %struct.gr_info** %5, align 4
  store i32* %2, i32** %6, align 4
  %12 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %13 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %12, i32 0, i32 13
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, i32 2, i32 1
  store i32 %16, i32* %11, align 4
  %17 = getelementptr inbounds [21 x double], [21 x double]* %8, i32 0, i32 0
  %18 = bitcast double* %17 to i8*
  %19 = load double*, double** %4, align 4
  %20 = bitcast double* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %18, i8* %20, i32 168, i32 8, i1 false)
  %21 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %22 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %21, i32 0, i32 12
  store i32 0, i32* %22, align 4
  store <4 x i32> <i32 11, i32 11, i32 11, i32 11>, <4 x i32>* %allocaVec18
  store i32 11, i32* %7, align 4
  br label %23

; <label>:23:                                     ; preds = %40, %3
  %24 = load i32, i32* %7, align 4
  %25 = icmp slt i32 %24, 21
  br i1 %25, label %26, label %44

; <label>:26:                                     ; preds = %23
  %27 = load i32, i32* %7, align 4
  %28 = getelementptr inbounds [21 x double], [21 x double]* %8, i32 0, i32 %27
  %29 = load double, double* %28, align 8
  %30 = load i32, i32* %7, align 4
  %31 = getelementptr inbounds [21 x i32], [21 x i32]* @pretab, i32 0, i32 %30
  %32 = load i32, i32* %31, align 4
  %33 = load i32, i32* %11, align 4
  %34 = sdiv i32 %32, %33
  %35 = sitofp i32 %34 to double
  %36 = fadd double %29, %35
  %37 = fcmp ogt double %36, 0.000000e+00
  br i1 %37, label %38, label %39

; <label>:38:                                     ; preds = %26
  br label %44

; <label>:39:                                     ; preds = %26
  br label %40

; <label>:40:                                     ; preds = %39
  %41 = load i32, i32* %7, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %41, i32 0
  %insertElmt22 = insertelement <4 x i32> %insertElmt, i32 %41, i32 1
  %insertElmt23 = insertelement <4 x i32> %insertElmt22, i32 %41, i32 2
  %insertElmt24 = insertelement <4 x i32> %insertElmt23, i32 %41, i32 3
  store <4 x i32> %insertElmt24, <4 x i32>* %allocaVec18, align 16
  %42 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop = add <4 x i32> %42, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec18
  %43 = add nsw i32 %41, 1
  store i32 %43, i32* %7, align 4
  br label %23

; <label>:44:                                     ; preds = %38, %23
  %45 = load i32, i32* %7, align 4
  %46 = icmp eq i32 %45, 21
  br i1 %46, label %47, label %69

; <label>:47:                                     ; preds = %44
  %48 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %49 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %48, i32 0, i32 12
  store i32 1, i32* %49, align 4
  store <4 x i32> <i32 11, i32 11, i32 11, i32 11>, <4 x i32>* %allocaVec18
  store i32 11, i32* %7, align 4
  br label %50

; <label>:50:                                     ; preds = %64, %47
  %51 = load i32, i32* %7, align 4
  %52 = icmp slt i32 %51, 21
  br i1 %52, label %53, label %68

; <label>:53:                                     ; preds = %50
  %54 = load i32, i32* %7, align 4
  %55 = getelementptr inbounds [21 x i32], [21 x i32]* @pretab, i32 0, i32 %54
  %56 = load i32, i32* %55, align 4
  %57 = load i32, i32* %11, align 4
  %58 = sdiv i32 %56, %57
  %59 = sitofp i32 %58 to double
  %60 = load i32, i32* %7, align 4
  %61 = getelementptr inbounds [21 x double], [21 x double]* %8, i32 0, i32 %60
  %62 = load double, double* %61, align 8
  %63 = fadd double %62, %59
  store double %63, double* %61, align 8
  br label %64

; <label>:64:                                     ; preds = %53
  %65 = load i32, i32* %7, align 4
  %66 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop25 = add <4 x i32> %66, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop25, <4 x i32>* %allocaVec18
  %67 = add nsw i32 %65, 1
  store i32 %67, i32* %7, align 4
  br label %50

; <label>:68:                                     ; preds = %50
  br label %69

; <label>:69:                                     ; preds = %68, %44
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec20
  store double 0.000000e+00, double* %10, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec18
  store i32 0, i32* %7, align 4
  br label %70

; <label>:70:                                     ; preds = %126, %69
  %71 = load i32, i32* %7, align 4
  %72 = icmp slt i32 %71, 21
  br i1 %72, label %73, label %127

; <label>:73:                                     ; preds = %70
  %74 = load i32, i32* %7, align 4
  %75 = getelementptr inbounds [21 x double], [21 x double]* %8, i32 0, i32 %74
  %76 = load double, double* %75, align 8
  %77 = fsub double -0.000000e+00, %76
  %78 = load i32, i32* %11, align 4
  %79 = sitofp i32 %78 to double
  %80 = fmul double %77, %79
  %81 = fadd double %80, 7.500000e-01
  %82 = fadd double %81, 1.000000e-04
  %83 = call arm_aapcscc double @floor(double %82) #9
  %84 = fptosi double %83 to i32
  %85 = load i32*, i32** %6, align 4
  %86 = load i32, i32* %7, align 4
  %87 = getelementptr inbounds i32, i32* %85, i32 %86
  store i32 %84, i32* %87, align 4
  %88 = load i32, i32* %7, align 4
  %89 = icmp slt i32 %88, 11
  br i1 %89, label %90, label %96

; <label>:90:                                     ; preds = %73
  %91 = load i32, i32* %11, align 4
  %92 = sitofp i32 %91 to double
  store double %92, double* %CastInst7
  %93 = load double, double* %CastInst7, align 4
  %insertCast = insertelement <2 x double> undef, double %93, i32 0
  %insertCast26 = insertelement <2 x double> %insertCast, double %93, i32 1
  store <2 x double> %insertCast26, <2 x double>* %CastInstVec8, align 4
  %94 = load <2 x double>, <2 x double>* %CastInstVec8, align 4
  %Vop27 = fdiv <2 x double> <double 1.500000e+01, double 1.500000e+01>, %94
  store <2 x double> %Vop27, <2 x double>* %allocaVec19
  %95 = fdiv double 1.500000e+01, %92
  store double %95, double* %9, align 8
  br label %102

; <label>:96:                                     ; preds = %73
  %97 = load i32, i32* %11, align 4
  %98 = sitofp i32 %97 to double
  store double %98, double* %CastInst9
  %99 = load double, double* %CastInst9, align 4
  %insertCast28 = insertelement <2 x double> undef, double %99, i32 0
  %insertCast29 = insertelement <2 x double> %insertCast28, double %99, i32 1
  store <2 x double> %insertCast29, <2 x double>* %CastInstVec10, align 4
  %100 = load <2 x double>, <2 x double>* %CastInstVec10, align 4
  %Vop30 = fdiv <2 x double> <double 7.000000e+00, double 7.000000e+00>, %100
  store <2 x double> %Vop30, <2 x double>* %allocaVec19
  %101 = fdiv double 7.000000e+00, %98
  store double %101, double* %9, align 8
  br label %102

; <label>:102:                                    ; preds = %96, %90
  %103 = load double, double* %9, align 8
  %104 = load i32, i32* %7, align 4
  %105 = getelementptr inbounds [21 x double], [21 x double]* %8, i32 0, i32 %104
  %106 = load double, double* %105, align 8
  %107 = fadd double %103, %106
  %108 = load double, double* %10, align 8
  %109 = fcmp ogt double %107, %108
  br i1 %109, label %110, label %116

; <label>:110:                                    ; preds = %102
  %111 = load double, double* %9, align 8
  %112 = load i32, i32* %7, align 4
  %113 = getelementptr inbounds [21 x double], [21 x double]* %8, i32 0, i32 %112
  %114 = load double, double* %113, align 8
  %115 = fadd double %111, %114
  store double %115, double* %10, align 8
  br label %116

; <label>:116:                                    ; preds = %110, %102
  br label %117

; <label>:117:                                    ; preds = %116
  %118 = load i32, i32* %7, align 4
  %119 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop31 = add <4 x i32> %119, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop31, <4 x i32>* %allocaVec18
  %120 = load <4 x i32>, <4 x i32>* %allocaVec18, align 4
  %extractE = extractelement <4 x i32> %120, i64 0
  %extractE32 = extractelement <4 x i32> %120, i64 1
  %extractE33 = extractelement <4 x i32> %120, i64 2
  %sum = add i32 %extractE, %extractE32
  %sum34 = add i32 %sum, %extractE33
  %121 = add nsw i32 %118, 1
  %Fmul = mul i32 %121, 3
  store i32 %121, i32* %Recovery2
  %Fcmp = icmp ne i32 %sum34, %Fmul
  br i1 %Fcmp, label %122, label %126

; <label>:122:                                    ; preds = %117
  %remThree = sdiv i32 %sum34, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %123, label %124

; <label>:123:                                    ; preds = %122
  store i32 %121, i32* %Recovery2, align 4
  br label %125

; <label>:124:                                    ; preds = %122
  store i32 %extractE, i32* %Recovery2, align 4
  br label %125

; <label>:125:                                    ; preds = %124, %123
  br label %126

; <label>:126:                                    ; preds = %117, %125
  %ReplaceInst = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst, i32* %7, align 4
  br label %70

; <label>:127:                                    ; preds = %70
  %128 = load double, double* %10, align 8
  ret double %128
}

; Function Attrs: nounwind
define arm_aapcscc void @VBR_iteration_loop_new(%struct.lame_global_flags*, [2 x double]*, double*, [2 x [576 x double]]*, [2 x %struct.III_psy_ratio]*, %struct.III_side_info_t*, [2 x [576 x i32]]*, [2 x %struct.III_scalefac_t]*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec11 = alloca <2 x double>, align 16
  %Recovery2 = alloca double, align 8
  %allocaVec12 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec13 = alloca <2 x double>, align 16
  %Recovery4 = alloca double, align 8
  %allocaVec14 = alloca <4 x i32>, align 16
  %Recovery5 = alloca i32, align 4
  %allocaVec15 = alloca <4 x i32>, align 16
  %Recovery6 = alloca i32, align 4
  %allocaVec16 = alloca <4 x i32>, align 16
  %Recovery7 = alloca i32, align 4
  %allocaVec17 = alloca <2 x double>, align 16
  %CastInst = alloca double, align 4
  %CastInstVec = alloca <2 x double>, align 16
  %allocaVec18 = alloca <2 x double>, align 16
  %CastInst8 = alloca double, align 4
  %CastInstVec9 = alloca <2 x double>, align 16
  %allocaVec19 = alloca <2 x double>, align 16
  %CallInst = alloca double, align 4
  %CallInstVec = alloca <2 x double>, align 16
  %9 = alloca %struct.lame_global_flags*, align 4
  %10 = alloca [2 x double]*, align 4
  %11 = alloca double*, align 4
  %12 = alloca [2 x [576 x double]]*, align 4
  %13 = alloca [2 x %struct.III_psy_ratio]*, align 4
  %14 = alloca %struct.III_side_info_t*, align 4
  %15 = alloca [2 x [576 x i32]]*, align 4
  %16 = alloca [2 x %struct.III_scalefac_t]*, align 4
  %17 = alloca [2 x [2 x %struct.III_psy_xmin]], align 8
  %allocaVec20 = alloca <2 x double>, align 16
  %18 = alloca double, align 8
  %allocaVec21 = alloca <2 x double>, align 16
  %19 = alloca double, align 8
  %allocaVec22 = alloca <4 x i32>, align 16
  %20 = alloca i32, align 4
  %allocaVec23 = alloca <4 x i32>, align 16
  %21 = alloca i32, align 4
  %allocaVec24 = alloca <4 x i32>, align 16
  %22 = alloca i32, align 4
  %allocaVec25 = alloca <4 x i32>, align 16
  %23 = alloca i32, align 4
  %allocaVec26 = alloca <4 x i32>, align 16
  %24 = alloca i32, align 4
  %allocaVec27 = alloca <4 x i32>, align 16
  %25 = alloca i32, align 4
  %allocaVec28 = alloca <4 x i32>, align 16
  %26 = alloca i32, align 4
  %allocaVec29 = alloca <4 x i32>, align 16
  %27 = alloca i32, align 4
  %28 = alloca %struct.III_psy_xmin, align 8
  %allocaVec30 = alloca <2 x double>, align 16
  %29 = alloca double, align 8
  %30 = alloca [576 x double], align 8
  %31 = alloca %struct.gr_info*, align 4
  %allocaVec31 = alloca <4 x i32>, align 16
  %32 = alloca i32, align 4
  %allocaVec32 = alloca <2 x double>, align 16
  %33 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %9, align 4
  store [2 x double]* %1, [2 x double]** %10, align 4
  store double* %2, double** %11, align 4
  store [2 x [576 x double]]* %3, [2 x [576 x double]]** %12, align 4
  store [2 x %struct.III_psy_ratio]* %4, [2 x %struct.III_psy_ratio]** %13, align 4
  store %struct.III_side_info_t* %5, %struct.III_side_info_t** %14, align 4
  store [2 x [576 x i32]]* %6, [2 x [576 x i32]]** %15, align 4
  store [2 x %struct.III_scalefac_t]* %7, [2 x %struct.III_scalefac_t]** %16, align 4
  %34 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %35 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %36 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  call arm_aapcscc void @iteration_init(%struct.lame_global_flags* %34, %struct.III_side_info_t* %35, [2 x [576 x i32]]* %36)
  %37 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %38 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %37, i32 0, i32 22
  %39 = load i32, i32* %38, align 4
  %40 = mul nsw i32 2, %39
  %41 = add nsw i32 -10, %40
  %42 = sitofp i32 %41 to double
  store double %42, double* %18, align 8
  %43 = load double, double* %18, align 8
  %44 = fdiv double %43, 1.000000e+01
  %45 = call arm_aapcscc double @pow(double 1.000000e+01, double %44) #7
  %46 = fptrunc double %45 to float
  store float %46, float* @masking_lower, align 4
  store float 1.000000e+00, float* @masking_lower, align 4
  store i32 0, i32* %26, align 4
  br label %47

; <label>:47:                                     ; preds = %447, %8
  %48 = load i32, i32* %26, align 4
  %49 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %50 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %49, i32 0, i32 45
  %51 = load i32, i32* %50, align 4
  %52 = icmp slt i32 %48, %51
  br i1 %52, label %53, label %448

; <label>:53:                                     ; preds = %47
  %54 = load i32, i32* @convert_mdct, align 4
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %65

; <label>:56:                                     ; preds = %53
  %57 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %58 = load i32, i32* %26, align 4
  %59 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %57, i32 %58
  %60 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %59, i32 0, i32 0
  %61 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %62 = load i32, i32* %26, align 4
  %63 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %61, i32 %62
  %64 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %63, i32 0, i32 0
  call arm_aapcscc void @ms_convert([576 x double]* %60, [576 x double]* %64)
  br label %65

; <label>:65:                                     ; preds = %56, %53
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec27
  store i32 0, i32* %25, align 4
  br label %66

; <label>:66:                                     ; preds = %436, %65
  %67 = load i32, i32* %25, align 4
  %68 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %69 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %68, i32 0, i32 46
  %70 = load i32, i32* %69, align 4
  %71 = icmp slt i32 %67, %70
  br i1 %71, label %72, label %437

; <label>:72:                                     ; preds = %66
  %73 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %74 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %73, i32 0, i32 4
  %75 = load i32, i32* %26, align 4
  %76 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %74, i32 0, i32 %75
  %77 = getelementptr inbounds %struct.anon, %struct.anon* %76, i32 0, i32 0
  %78 = load i32, i32* %25, align 4
  %79 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %77, i32 0, i32 %78
  %80 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %79, i32 0, i32 0
  store %struct.gr_info* %80, %struct.gr_info** %31, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec29
  store i32 0, i32* %27, align 4
  %81 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %82 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %81, i32 0, i32 6
  %83 = load i32, i32* %82, align 4
  %84 = icmp eq i32 %83, 2
  %85 = zext i1 %84 to i32
  store i32 %85, i32* %32, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec26
  store i32 0, i32* %24, align 4
  br label %86

; <label>:86:                                     ; preds = %109, %72
  %87 = load i32, i32* %24, align 4
  %88 = icmp slt i32 %87, 576
  br i1 %88, label %89, label %113

; <label>:89:                                     ; preds = %86
  %90 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %91 = load i32, i32* %26, align 4
  %92 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %90, i32 %91
  %93 = load i32, i32* %25, align 4
  %94 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %92, i32 0, i32 %93
  %95 = load i32, i32* %24, align 4
  %96 = getelementptr inbounds [576 x double], [576 x double]* %94, i32 0, i32 %95
  %97 = load double, double* %96, align 8
  %98 = call arm_aapcscc double @fabs(double %97) #9
  store double %98, double* %33, align 8
  %99 = load double, double* %33, align 8
  %100 = call arm_aapcscc double @sqrt(double %99) #7
  %101 = load double, double* %33, align 8
  %insertElmt = insertelement <2 x double> undef, double %101, i32 0
  %insertElmt33 = insertelement <2 x double> %insertElmt, double %101, i32 1
  store <2 x double> %insertElmt33, <2 x double>* %allocaVec32, align 16
  store double %100, double* %CallInst
  %102 = load double, double* %CallInst, align 4
  %insertCall = insertelement <2 x double> undef, double %102, i32 0
  %insertCall34 = insertelement <2 x double> %insertCall, double %102, i32 1
  store <2 x double> %insertCall34, <2 x double>* %CallInstVec, align 4
  %103 = load <2 x double>, <2 x double>* %CallInstVec, align 4
  %104 = load <2 x double>, <2 x double>* %allocaVec32, align 16
  %Vop = fmul <2 x double> %103, %104
  %105 = fmul double %100, %101
  %106 = call arm_aapcscc double @sqrt(double %105) #7
  %107 = load i32, i32* %24, align 4
  %108 = getelementptr inbounds [576 x double], [576 x double]* %30, i32 0, i32 %107
  store double %106, double* %108, align 8
  br label %109

; <label>:109:                                    ; preds = %89
  %110 = load i32, i32* %24, align 4
  %insertElmt35 = insertelement <4 x i32> undef, i32 %110, i32 0
  %insertElmt36 = insertelement <4 x i32> %insertElmt35, i32 %110, i32 1
  %insertElmt37 = insertelement <4 x i32> %insertElmt36, i32 %110, i32 2
  %insertElmt38 = insertelement <4 x i32> %insertElmt37, i32 %110, i32 3
  store <4 x i32> %insertElmt38, <4 x i32>* %allocaVec26, align 16
  %111 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop39 = add <4 x i32> %111, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop39, <4 x i32>* %allocaVec26
  %112 = add nsw i32 %110, 1
  store i32 %112, i32* %24, align 4
  br label %86

; <label>:113:                                    ; preds = %86
  %114 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %115 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %116 = load i32, i32* %26, align 4
  %117 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %115, i32 %116
  %118 = load i32, i32* %25, align 4
  %119 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %117, i32 0, i32 %118
  %120 = getelementptr inbounds [576 x double], [576 x double]* %119, i32 0, i32 0
  %121 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %13, align 4
  %122 = load i32, i32* %26, align 4
  %123 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %121, i32 %122
  %124 = load i32, i32* %25, align 4
  %125 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %123, i32 0, i32 %124
  %126 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %127 = load i32, i32* %26, align 4
  %128 = getelementptr inbounds [2 x [2 x %struct.III_psy_xmin]], [2 x [2 x %struct.III_psy_xmin]]* %17, i32 0, i32 %127
  %129 = load i32, i32* %25, align 4
  %130 = getelementptr inbounds [2 x %struct.III_psy_xmin], [2 x %struct.III_psy_xmin]* %128, i32 0, i32 %129
  %131 = call arm_aapcscc i32 @calc_xmin(%struct.lame_global_flags* %114, double* %120, %struct.III_psy_ratio* %125, %struct.gr_info* %126, %struct.III_psy_xmin* %130)
  store <2 x double> zeroinitializer, <2 x double>* %allocaVec30
  store double 0.000000e+00, double* %29, align 8
  %132 = load i32, i32* %32, align 4
  %133 = icmp ne i32 %132, 0
  br i1 %133, label %134, label %228

; <label>:134:                                    ; preds = %113
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec25
  store i32 0, i32* %23, align 4
  br label %135

; <label>:135:                                    ; preds = %223, %134
  %136 = load i32, i32* %23, align 4
  %137 = icmp slt i32 %136, 12
  br i1 %137, label %138, label %227

; <label>:138:                                    ; preds = %135
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec26
  store i32 0, i32* %24, align 4
  br label %139

; <label>:139:                                    ; preds = %218, %138
  %140 = load i32, i32* %24, align 4
  %141 = icmp slt i32 %140, 3
  br i1 %141, label %142, label %222

; <label>:142:                                    ; preds = %139
  %143 = load i32, i32* %23, align 4
  %144 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %143
  %145 = load i32, i32* %144, align 4
  store i32 %145, i32* %20, align 4
  %146 = load i32, i32* %23, align 4
  %insertElmt40 = insertelement <4 x i32> undef, i32 %146, i32 0
  %insertElmt41 = insertelement <4 x i32> %insertElmt40, i32 %146, i32 1
  %insertElmt42 = insertelement <4 x i32> %insertElmt41, i32 %146, i32 2
  %insertElmt43 = insertelement <4 x i32> %insertElmt42, i32 %146, i32 3
  store <4 x i32> %insertElmt43, <4 x i32>* %allocaVec25, align 16
  %147 = load <4 x i32>, <4 x i32>* %allocaVec25, align 16
  %Vop44 = add <4 x i32> %147, <i32 1, i32 1, i32 1, i32 1>
  %148 = add nsw i32 %146, 1
  %149 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %148
  %150 = load i32, i32* %149, align 4
  store i32 %150, i32* %21, align 4
  %151 = load i32, i32* %21, align 4
  %insertElmt45 = insertelement <4 x i32> undef, i32 %151, i32 0
  %insertElmt46 = insertelement <4 x i32> %insertElmt45, i32 %151, i32 1
  %insertElmt47 = insertelement <4 x i32> %insertElmt46, i32 %151, i32 2
  %insertElmt48 = insertelement <4 x i32> %insertElmt47, i32 %151, i32 3
  store <4 x i32> %insertElmt48, <4 x i32>* %allocaVec23, align 16
  %152 = load i32, i32* %20, align 4
  %insertElmt49 = insertelement <4 x i32> undef, i32 %152, i32 0
  %insertElmt50 = insertelement <4 x i32> %insertElmt49, i32 %152, i32 1
  %insertElmt51 = insertelement <4 x i32> %insertElmt50, i32 %152, i32 2
  %insertElmt52 = insertelement <4 x i32> %insertElmt51, i32 %152, i32 3
  store <4 x i32> %insertElmt52, <4 x i32>* %allocaVec22, align 16
  %153 = load <4 x i32>, <4 x i32>* %allocaVec23, align 16
  %154 = load <4 x i32>, <4 x i32>* %allocaVec22, align 16
  %Vop53 = sub <4 x i32> %153, %154
  store <4 x i32> %Vop53, <4 x i32>* %allocaVec24
  %155 = load <4 x i32>, <4 x i32>* %allocaVec24, align 4
  %extractE = extractelement <4 x i32> %155, i64 0
  %extractE54 = extractelement <4 x i32> %155, i64 1
  %extractE55 = extractelement <4 x i32> %155, i64 2
  %sum = add i32 %extractE, %extractE54
  %sum56 = add i32 %sum, %extractE55
  %156 = sub nsw i32 %151, %152
  %Fmul = mul i32 %156, 3
  store i32 %156, i32* %Recovery
  %Fcmp = icmp ne i32 %sum56, %Fmul
  br i1 %Fcmp, label %157, label %161

; <label>:157:                                    ; preds = %142
  %remThree = sdiv i32 %sum56, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %158, label %159

; <label>:158:                                    ; preds = %157
  store i32 %156, i32* %Recovery, align 4
  br label %160

; <label>:159:                                    ; preds = %157
  store i32 %extractE, i32* %Recovery, align 4
  br label %160

; <label>:160:                                    ; preds = %159, %158
  br label %161

; <label>:161:                                    ; preds = %142, %160
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %22, align 4
  %162 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %163 = load i32, i32* %26, align 4
  %164 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %162, i32 %163
  %165 = load i32, i32* %25, align 4
  %166 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %164, i32 0, i32 %165
  %167 = load i32, i32* %20, align 4
  %insertElmt57 = insertelement <4 x i32> undef, i32 %167, i32 0
  %insertElmt58 = insertelement <4 x i32> %insertElmt57, i32 %167, i32 1
  %insertElmt59 = insertelement <4 x i32> %insertElmt58, i32 %167, i32 2
  %insertElmt60 = insertelement <4 x i32> %insertElmt59, i32 %167, i32 3
  store <4 x i32> %insertElmt60, <4 x i32>* %allocaVec22, align 16
  %168 = load <4 x i32>, <4 x i32>* %allocaVec22, align 16
  %Vop61 = mul <4 x i32> <i32 3, i32 3, i32 3, i32 3>, %168
  %169 = mul nsw i32 3, %167
  %170 = load i32, i32* %24, align 4
  %171 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop62 = add <4 x i32> %Vop61, %171
  %172 = add nsw i32 %169, %170
  %173 = getelementptr inbounds [576 x double], [576 x double]* %166, i32 0, i32 %172
  %174 = load i32, i32* %20, align 4
  %insertElmt63 = insertelement <4 x i32> undef, i32 %174, i32 0
  %insertElmt64 = insertelement <4 x i32> %insertElmt63, i32 %174, i32 1
  %insertElmt65 = insertelement <4 x i32> %insertElmt64, i32 %174, i32 2
  %insertElmt66 = insertelement <4 x i32> %insertElmt65, i32 %174, i32 3
  store <4 x i32> %insertElmt66, <4 x i32>* %allocaVec22, align 16
  %175 = load <4 x i32>, <4 x i32>* %allocaVec22, align 16
  %Vop67 = mul <4 x i32> <i32 3, i32 3, i32 3, i32 3>, %175
  %176 = mul nsw i32 3, %174
  %177 = load i32, i32* %24, align 4
  %178 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop68 = add <4 x i32> %Vop67, %178
  %179 = add nsw i32 %176, %177
  %180 = getelementptr inbounds [576 x double], [576 x double]* %30, i32 0, i32 %179
  %181 = load i32, i32* %23, align 4
  %182 = load float, float* @masking_lower, align 4
  %183 = fpext float %182 to double
  %184 = load i32, i32* %26, align 4
  %185 = getelementptr inbounds [2 x [2 x %struct.III_psy_xmin]], [2 x [2 x %struct.III_psy_xmin]]* %17, i32 0, i32 %184
  %186 = load i32, i32* %25, align 4
  %187 = getelementptr inbounds [2 x %struct.III_psy_xmin], [2 x %struct.III_psy_xmin]* %185, i32 0, i32 %186
  %188 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %187, i32 0, i32 1
  %189 = load i32, i32* %23, align 4
  %190 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %188, i32 0, i32 %189
  %191 = load i32, i32* %24, align 4
  %192 = getelementptr inbounds [3 x double], [3 x double]* %190, i32 0, i32 %191
  %193 = load double, double* %192, align 8
  %194 = fmul double %183, %193
  %195 = load i32, i32* %22, align 4
  %196 = call arm_aapcscc double @find_scalefac(double* %173, double* %180, i32 3, i32 %181, double %194, i32 %195)
  %197 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 1
  %198 = load i32, i32* %23, align 4
  %199 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %197, i32 0, i32 %198
  %200 = load i32, i32* %24, align 4
  %201 = getelementptr inbounds [3 x double], [3 x double]* %199, i32 0, i32 %200
  store double %196, double* %201, align 8
  %202 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 1
  %203 = load i32, i32* %23, align 4
  %204 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %202, i32 0, i32 %203
  %205 = load i32, i32* %24, align 4
  %206 = getelementptr inbounds [3 x double], [3 x double]* %204, i32 0, i32 %205
  %207 = load double, double* %206, align 8
  %208 = load double, double* %29, align 8
  %209 = fcmp ogt double %207, %208
  br i1 %209, label %210, label %217

; <label>:210:                                    ; preds = %161
  %211 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 1
  %212 = load i32, i32* %23, align 4
  %213 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %211, i32 0, i32 %212
  %214 = load i32, i32* %24, align 4
  %215 = getelementptr inbounds [3 x double], [3 x double]* %213, i32 0, i32 %214
  %216 = load double, double* %215, align 8
  store double %216, double* %29, align 8
  br label %217

; <label>:217:                                    ; preds = %210, %161
  br label %218

; <label>:218:                                    ; preds = %217
  %219 = load i32, i32* %24, align 4
  %220 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop69 = add <4 x i32> %220, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop69, <4 x i32>* %allocaVec26
  %221 = add nsw i32 %219, 1
  store i32 %221, i32* %24, align 4
  br label %139

; <label>:222:                                    ; preds = %139
  br label %223

; <label>:223:                                    ; preds = %222
  %224 = load i32, i32* %23, align 4
  %insertElmt70 = insertelement <4 x i32> undef, i32 %224, i32 0
  %insertElmt71 = insertelement <4 x i32> %insertElmt70, i32 %224, i32 1
  %insertElmt72 = insertelement <4 x i32> %insertElmt71, i32 %224, i32 2
  %insertElmt73 = insertelement <4 x i32> %insertElmt72, i32 %224, i32 3
  store <4 x i32> %insertElmt73, <4 x i32>* %allocaVec25, align 16
  %225 = load <4 x i32>, <4 x i32>* %allocaVec25, align 16
  %Vop74 = add <4 x i32> %225, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop74, <4 x i32>* %allocaVec25
  %226 = add nsw i32 %224, 1
  store i32 %226, i32* %23, align 4
  br label %135

; <label>:227:                                    ; preds = %135
  br label %295

; <label>:228:                                    ; preds = %113
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec25
  store i32 0, i32* %23, align 4
  br label %229

; <label>:229:                                    ; preds = %290, %228
  %230 = load i32, i32* %23, align 4
  %231 = icmp slt i32 %230, 21
  br i1 %231, label %232, label %294

; <label>:232:                                    ; preds = %229
  %233 = load i32, i32* %23, align 4
  %234 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %233
  %235 = load i32, i32* %234, align 4
  store i32 %235, i32* %20, align 4
  %236 = load i32, i32* %23, align 4
  %237 = load <4 x i32>, <4 x i32>* %allocaVec25, align 16
  %Vop75 = add <4 x i32> %237, <i32 1, i32 1, i32 1, i32 1>
  %238 = add nsw i32 %236, 1
  %239 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %238
  %240 = load i32, i32* %239, align 4
  store i32 %240, i32* %21, align 4
  %241 = load i32, i32* %21, align 4
  %insertElmt76 = insertelement <4 x i32> undef, i32 %241, i32 0
  %insertElmt77 = insertelement <4 x i32> %insertElmt76, i32 %241, i32 1
  %insertElmt78 = insertelement <4 x i32> %insertElmt77, i32 %241, i32 2
  %insertElmt79 = insertelement <4 x i32> %insertElmt78, i32 %241, i32 3
  store <4 x i32> %insertElmt79, <4 x i32>* %allocaVec23, align 16
  %242 = load i32, i32* %20, align 4
  %insertElmt80 = insertelement <4 x i32> undef, i32 %242, i32 0
  %insertElmt81 = insertelement <4 x i32> %insertElmt80, i32 %242, i32 1
  %insertElmt82 = insertelement <4 x i32> %insertElmt81, i32 %242, i32 2
  %insertElmt83 = insertelement <4 x i32> %insertElmt82, i32 %242, i32 3
  store <4 x i32> %insertElmt83, <4 x i32>* %allocaVec22, align 16
  %243 = load <4 x i32>, <4 x i32>* %allocaVec23, align 16
  %244 = load <4 x i32>, <4 x i32>* %allocaVec22, align 16
  %Vop84 = sub <4 x i32> %243, %244
  store <4 x i32> %Vop84, <4 x i32>* %allocaVec24
  %245 = load <4 x i32>, <4 x i32>* %allocaVec24, align 4
  %extractE86 = extractelement <4 x i32> %245, i64 0
  %extractE87 = extractelement <4 x i32> %245, i64 1
  %extractE88 = extractelement <4 x i32> %245, i64 2
  %sum89 = add i32 %extractE86, %extractE87
  %sum90 = add i32 %sum89, %extractE88
  %246 = sub nsw i32 %241, %242
  %Fmul85 = mul i32 %246, 3
  store i32 %246, i32* %Recovery1
  %Fcmp91 = icmp ne i32 %sum90, %Fmul85
  br i1 %Fcmp91, label %247, label %251

; <label>:247:                                    ; preds = %232
  %remThree143 = sdiv i32 %sum90, %extractE86
  %FcmpThree144 = icmp ne i32 %remThree143, 3
  br i1 %FcmpThree144, label %248, label %249

; <label>:248:                                    ; preds = %247
  store i32 %246, i32* %Recovery1, align 4
  br label %250

; <label>:249:                                    ; preds = %247
  store i32 %extractE86, i32* %Recovery1, align 4
  br label %250

; <label>:250:                                    ; preds = %249, %248
  br label %251

; <label>:251:                                    ; preds = %232, %250
  %ReplaceInst153 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst153, i32* %22, align 4
  %252 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %253 = load i32, i32* %26, align 4
  %254 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %252, i32 %253
  %255 = load i32, i32* %25, align 4
  %256 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %254, i32 0, i32 %255
  %257 = load i32, i32* %20, align 4
  %258 = getelementptr inbounds [576 x double], [576 x double]* %256, i32 0, i32 %257
  %259 = load i32, i32* %20, align 4
  %260 = getelementptr inbounds [576 x double], [576 x double]* %30, i32 0, i32 %259
  %261 = load i32, i32* %23, align 4
  %262 = load float, float* @masking_lower, align 4
  %263 = fpext float %262 to double
  %264 = load i32, i32* %26, align 4
  %265 = getelementptr inbounds [2 x [2 x %struct.III_psy_xmin]], [2 x [2 x %struct.III_psy_xmin]]* %17, i32 0, i32 %264
  %266 = load i32, i32* %25, align 4
  %267 = getelementptr inbounds [2 x %struct.III_psy_xmin], [2 x %struct.III_psy_xmin]* %265, i32 0, i32 %266
  %268 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %267, i32 0, i32 0
  %269 = load i32, i32* %23, align 4
  %270 = getelementptr inbounds [22 x double], [22 x double]* %268, i32 0, i32 %269
  %271 = load double, double* %270, align 8
  %272 = fmul double %263, %271
  %273 = load i32, i32* %22, align 4
  %274 = call arm_aapcscc double @find_scalefac(double* %258, double* %260, i32 1, i32 %261, double %272, i32 %273)
  %275 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 0
  %276 = load i32, i32* %23, align 4
  %277 = getelementptr inbounds [22 x double], [22 x double]* %275, i32 0, i32 %276
  store double %274, double* %277, align 8
  %278 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 0
  %279 = load i32, i32* %23, align 4
  %280 = getelementptr inbounds [22 x double], [22 x double]* %278, i32 0, i32 %279
  %281 = load double, double* %280, align 8
  %282 = load double, double* %29, align 8
  %283 = fcmp ogt double %281, %282
  br i1 %283, label %284, label %289

; <label>:284:                                    ; preds = %251
  %285 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 0
  %286 = load i32, i32* %23, align 4
  %287 = getelementptr inbounds [22 x double], [22 x double]* %285, i32 0, i32 %286
  %288 = load double, double* %287, align 8
  store double %288, double* %29, align 8
  br label %289

; <label>:289:                                    ; preds = %284, %251
  br label %290

; <label>:290:                                    ; preds = %289
  %291 = load i32, i32* %23, align 4
  %292 = load <4 x i32>, <4 x i32>* %allocaVec25, align 16
  %Vop92 = add <4 x i32> %292, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop92, <4 x i32>* %allocaVec25
  %293 = add nsw i32 %291, 1
  store i32 %293, i32* %23, align 4
  br label %229

; <label>:294:                                    ; preds = %229
  br label %295

; <label>:295:                                    ; preds = %294, %227
  %296 = load double, double* %29, align 8
  %insertElmt93 = insertelement <2 x double> undef, double %296, i32 0
  %insertElmt94 = insertelement <2 x double> %insertElmt93, double %296, i32 1
  store <2 x double> %insertElmt94, <2 x double>* %allocaVec30, align 16
  %297 = load <2 x double>, <2 x double>* %allocaVec30, align 16
  %Vop95 = fmul <2 x double> <double 4.000000e+00, double 4.000000e+00>, %297
  %298 = fmul double 4.000000e+00, %296
  %Vop96 = fadd <2 x double> %Vop95, <double 2.100000e+02, double 2.100000e+02>
  %299 = fadd double %298, 2.100000e+02
  %Vop97 = fadd <2 x double> %Vop96, <double 5.000000e-01, double 5.000000e-01>
  %300 = fadd double %299, 5.000000e-01
  %301 = call arm_aapcscc double @floor(double %300) #9
  %302 = fptoui double %301 to i32
  %303 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %304 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %303, i32 0, i32 3
  store i32 %302, i32* %304, align 4
  %305 = load i32, i32* %32, align 4
  %306 = icmp ne i32 %305, 0
  br i1 %306, label %307, label %372

; <label>:307:                                    ; preds = %295
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec25
  store i32 0, i32* %23, align 4
  br label %308

; <label>:308:                                    ; preds = %335, %307
  %309 = load i32, i32* %23, align 4
  %310 = icmp slt i32 %309, 12
  br i1 %310, label %311, label %339

; <label>:311:                                    ; preds = %308
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec26
  store i32 0, i32* %24, align 4
  br label %312

; <label>:312:                                    ; preds = %333, %311
  %313 = load i32, i32* %24, align 4
  %314 = icmp slt i32 %313, 3
  br i1 %314, label %315, label %334

; <label>:315:                                    ; preds = %312
  %316 = load double, double* %29, align 8
  %insertElmt98 = insertelement <2 x double> undef, double %316, i32 0
  %insertElmt99 = insertelement <2 x double> %insertElmt98, double %316, i32 1
  store <2 x double> %insertElmt99, <2 x double>* %allocaVec30, align 16
  %317 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 1
  %318 = load i32, i32* %23, align 4
  %319 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %317, i32 0, i32 %318
  %320 = load i32, i32* %24, align 4
  %321 = getelementptr inbounds [3 x double], [3 x double]* %319, i32 0, i32 %320
  %322 = load double, double* %321, align 8
  %323 = fsub double %322, %316
  store double %323, double* %321, align 8
  br label %324

; <label>:324:                                    ; preds = %315
  %325 = load i32, i32* %24, align 4
  %326 = load <4 x i32>, <4 x i32>* %allocaVec26, align 16
  %Vop100 = add <4 x i32> %326, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop100, <4 x i32>* %allocaVec26
  %327 = load <4 x i32>, <4 x i32>* %allocaVec26, align 4
  %extractE102 = extractelement <4 x i32> %327, i64 0
  %extractE103 = extractelement <4 x i32> %327, i64 1
  %extractE104 = extractelement <4 x i32> %327, i64 2
  %sum105 = add i32 %extractE102, %extractE103
  %sum106 = add i32 %sum105, %extractE104
  %328 = add nsw i32 %325, 1
  %Fmul101 = mul i32 %328, 3
  store i32 %328, i32* %Recovery3
  %Fcmp107 = icmp ne i32 %sum106, %Fmul101
  br i1 %Fcmp107, label %329, label %333

; <label>:329:                                    ; preds = %324
  %remThree145 = sdiv i32 %sum106, %extractE102
  %FcmpThree146 = icmp ne i32 %remThree145, 3
  br i1 %FcmpThree146, label %330, label %331

; <label>:330:                                    ; preds = %329
  store i32 %328, i32* %Recovery3, align 4
  br label %332

; <label>:331:                                    ; preds = %329
  store i32 %extractE102, i32* %Recovery3, align 4
  br label %332

; <label>:332:                                    ; preds = %331, %330
  br label %333

; <label>:333:                                    ; preds = %324, %332
  %ReplaceInst154 = load i32, i32* %Recovery3, align 4
  store i32 %ReplaceInst154, i32* %24, align 4
  br label %312

; <label>:334:                                    ; preds = %312
  br label %335

; <label>:335:                                    ; preds = %334
  %336 = load i32, i32* %23, align 4
  %337 = load <4 x i32>, <4 x i32>* %allocaVec25, align 16
  %Vop108 = add <4 x i32> %337, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop108, <4 x i32>* %allocaVec25
  %338 = add nsw i32 %336, 1
  store i32 %338, i32* %23, align 4
  br label %308

; <label>:339:                                    ; preds = %308
  %340 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %341 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %340, i32 0, i32 13
  store i32 0, i32* %341, align 4
  %342 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 1
  %343 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %342, i32 0, i32 0
  %344 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %345 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %346 = load i32, i32* %26, align 4
  %347 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %345, i32 %346
  %348 = load i32, i32* %25, align 4
  %349 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %347, i32 0, i32 %348
  %350 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %349, i32 0, i32 1
  %351 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %350, i32 0, i32 0
  %352 = call arm_aapcscc double @compute_scalefacs_short([3 x double]* %343, %struct.gr_info* %344, [3 x i32]* %351)
  %353 = fcmp ogt double %352, 0.000000e+00
  br i1 %353, label %354, label %371

; <label>:354:                                    ; preds = %339
  %355 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %356 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %355, i32 0, i32 13
  store i32 1, i32* %356, align 4
  %357 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 1
  %358 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %357, i32 0, i32 0
  %359 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %360 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %361 = load i32, i32* %26, align 4
  %362 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %360, i32 %361
  %363 = load i32, i32* %25, align 4
  %364 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %362, i32 0, i32 %363
  %365 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %364, i32 0, i32 1
  %366 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %365, i32 0, i32 0
  %367 = call arm_aapcscc double @compute_scalefacs_short([3 x double]* %358, %struct.gr_info* %359, [3 x i32]* %366)
  %368 = fcmp ogt double %367, 0.000000e+00
  br i1 %368, label %369, label %370

; <label>:369:                                    ; preds = %354
  call arm_aapcscc void @exit(i32 32) #8
  unreachable

; <label>:370:                                    ; preds = %354
  br label %371

; <label>:371:                                    ; preds = %370, %339
  br label %426

; <label>:372:                                    ; preds = %295
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec25
  store i32 0, i32* %23, align 4
  br label %373

; <label>:373:                                    ; preds = %392, %372
  %374 = load i32, i32* %23, align 4
  %375 = icmp slt i32 %374, 21
  br i1 %375, label %376, label %393

; <label>:376:                                    ; preds = %373
  %377 = load double, double* %29, align 8
  %insertElmt109 = insertelement <2 x double> undef, double %377, i32 0
  %insertElmt110 = insertelement <2 x double> %insertElmt109, double %377, i32 1
  store <2 x double> %insertElmt110, <2 x double>* %allocaVec30, align 16
  %378 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 0
  %379 = load i32, i32* %23, align 4
  %380 = getelementptr inbounds [22 x double], [22 x double]* %378, i32 0, i32 %379
  %381 = load double, double* %380, align 8
  %382 = fsub double %381, %377
  store double %382, double* %380, align 8
  br label %383

; <label>:383:                                    ; preds = %376
  %384 = load i32, i32* %23, align 4
  %385 = load <4 x i32>, <4 x i32>* %allocaVec25, align 16
  %Vop111 = add <4 x i32> %385, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop111, <4 x i32>* %allocaVec25
  %386 = load <4 x i32>, <4 x i32>* %allocaVec25, align 4
  %extractE113 = extractelement <4 x i32> %386, i64 0
  %extractE114 = extractelement <4 x i32> %386, i64 1
  %extractE115 = extractelement <4 x i32> %386, i64 2
  %sum116 = add i32 %extractE113, %extractE114
  %sum117 = add i32 %sum116, %extractE115
  %387 = add nsw i32 %384, 1
  %Fmul112 = mul i32 %387, 3
  store i32 %387, i32* %Recovery5
  %Fcmp118 = icmp ne i32 %sum117, %Fmul112
  br i1 %Fcmp118, label %388, label %392

; <label>:388:                                    ; preds = %383
  %remThree147 = sdiv i32 %sum117, %extractE113
  %FcmpThree148 = icmp ne i32 %remThree147, 3
  br i1 %FcmpThree148, label %389, label %390

; <label>:389:                                    ; preds = %388
  store i32 %387, i32* %Recovery5, align 4
  br label %391

; <label>:390:                                    ; preds = %388
  store i32 %extractE113, i32* %Recovery5, align 4
  br label %391

; <label>:391:                                    ; preds = %390, %389
  br label %392

; <label>:392:                                    ; preds = %383, %391
  %ReplaceInst155 = load i32, i32* %Recovery5, align 4
  store i32 %ReplaceInst155, i32* %23, align 4
  br label %373

; <label>:393:                                    ; preds = %373
  %394 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %395 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %394, i32 0, i32 13
  store i32 0, i32* %395, align 4
  %396 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 0
  %397 = getelementptr inbounds [22 x double], [22 x double]* %396, i32 0, i32 0
  %398 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %399 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %400 = load i32, i32* %26, align 4
  %401 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %399, i32 %400
  %402 = load i32, i32* %25, align 4
  %403 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %401, i32 0, i32 %402
  %404 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %403, i32 0, i32 0
  %405 = getelementptr inbounds [22 x i32], [22 x i32]* %404, i32 0, i32 0
  %406 = call arm_aapcscc double @compute_scalefacs_long(double* %397, %struct.gr_info* %398, i32* %405)
  %407 = fcmp ogt double %406, 0.000000e+00
  br i1 %407, label %408, label %425

; <label>:408:                                    ; preds = %393
  %409 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %410 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %409, i32 0, i32 13
  store i32 1, i32* %410, align 4
  %411 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 0
  %412 = getelementptr inbounds [22 x double], [22 x double]* %411, i32 0, i32 0
  %413 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %414 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %415 = load i32, i32* %26, align 4
  %416 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %414, i32 %415
  %417 = load i32, i32* %25, align 4
  %418 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %416, i32 0, i32 %417
  %419 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %418, i32 0, i32 0
  %420 = getelementptr inbounds [22 x i32], [22 x i32]* %419, i32 0, i32 0
  %421 = call arm_aapcscc double @compute_scalefacs_long(double* %412, %struct.gr_info* %413, i32* %420)
  %422 = fcmp ogt double %421, 0.000000e+00
  br i1 %422, label %423, label %424

; <label>:423:                                    ; preds = %408
  call arm_aapcscc void @exit(i32 32) #8
  unreachable

; <label>:424:                                    ; preds = %408
  br label %425

; <label>:425:                                    ; preds = %424, %393
  br label %426

; <label>:426:                                    ; preds = %425, %371
  br label %427

; <label>:427:                                    ; preds = %426
  %428 = load i32, i32* %25, align 4
  %insertElmt119 = insertelement <4 x i32> undef, i32 %428, i32 0
  %insertElmt120 = insertelement <4 x i32> %insertElmt119, i32 %428, i32 1
  %insertElmt121 = insertelement <4 x i32> %insertElmt120, i32 %428, i32 2
  %insertElmt122 = insertelement <4 x i32> %insertElmt121, i32 %428, i32 3
  store <4 x i32> %insertElmt122, <4 x i32>* %allocaVec27, align 16
  %429 = load <4 x i32>, <4 x i32>* %allocaVec27, align 16
  %Vop123 = add <4 x i32> %429, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop123, <4 x i32>* %allocaVec27
  %430 = load <4 x i32>, <4 x i32>* %allocaVec27, align 4
  %extractE125 = extractelement <4 x i32> %430, i64 0
  %extractE126 = extractelement <4 x i32> %430, i64 1
  %extractE127 = extractelement <4 x i32> %430, i64 2
  %sum128 = add i32 %extractE125, %extractE126
  %sum129 = add i32 %sum128, %extractE127
  %431 = add nsw i32 %428, 1
  %Fmul124 = mul i32 %431, 3
  store i32 %431, i32* %Recovery6
  %Fcmp130 = icmp ne i32 %sum129, %Fmul124
  br i1 %Fcmp130, label %432, label %436

; <label>:432:                                    ; preds = %427
  %remThree149 = sdiv i32 %sum129, %extractE125
  %FcmpThree150 = icmp ne i32 %remThree149, 3
  br i1 %FcmpThree150, label %433, label %434

; <label>:433:                                    ; preds = %432
  store i32 %431, i32* %Recovery6, align 4
  br label %435

; <label>:434:                                    ; preds = %432
  store i32 %extractE125, i32* %Recovery6, align 4
  br label %435

; <label>:435:                                    ; preds = %434, %433
  br label %436

; <label>:436:                                    ; preds = %427, %435
  %ReplaceInst156 = load i32, i32* %Recovery6, align 4
  store i32 %ReplaceInst156, i32* %25, align 4
  br label %66

; <label>:437:                                    ; preds = %66
  br label %438

; <label>:438:                                    ; preds = %437
  %439 = load i32, i32* %26, align 4
  %insertElmt131 = insertelement <4 x i32> undef, i32 %439, i32 0
  %insertElmt132 = insertelement <4 x i32> %insertElmt131, i32 %439, i32 1
  %insertElmt133 = insertelement <4 x i32> %insertElmt132, i32 %439, i32 2
  %insertElmt134 = insertelement <4 x i32> %insertElmt133, i32 %439, i32 3
  store <4 x i32> %insertElmt134, <4 x i32>* %allocaVec28, align 16
  %440 = load <4 x i32>, <4 x i32>* %allocaVec28, align 16
  %Vop135 = add <4 x i32> %440, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop135, <4 x i32>* %allocaVec28
  %441 = load <4 x i32>, <4 x i32>* %allocaVec28, align 4
  %extractE137 = extractelement <4 x i32> %441, i64 0
  %extractE138 = extractelement <4 x i32> %441, i64 1
  %extractE139 = extractelement <4 x i32> %441, i64 2
  %sum140 = add i32 %extractE137, %extractE138
  %sum141 = add i32 %sum140, %extractE139
  %442 = add nsw i32 %439, 1
  %Fmul136 = mul i32 %442, 3
  store i32 %442, i32* %Recovery7
  %Fcmp142 = icmp ne i32 %sum141, %Fmul136
  br i1 %Fcmp142, label %443, label %447

; <label>:443:                                    ; preds = %438
  %remThree151 = sdiv i32 %sum141, %extractE137
  %FcmpThree152 = icmp ne i32 %remThree151, 3
  br i1 %FcmpThree152, label %444, label %445

; <label>:444:                                    ; preds = %443
  store i32 %442, i32* %Recovery7, align 4
  br label %446

; <label>:445:                                    ; preds = %443
  store i32 %extractE137, i32* %Recovery7, align 4
  br label %446

; <label>:446:                                    ; preds = %445, %444
  br label %447

; <label>:447:                                    ; preds = %438, %446
  %ReplaceInst157 = load i32, i32* %Recovery7, align 4
  store i32 %ReplaceInst157, i32* %26, align 4
  br label %47

; <label>:448:                                    ; preds = %47
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @AddVbrFrame(i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec1 = alloca <4 x i32>, align 16
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32*, i32** @pVbrFrames, align 4
  %4 = icmp eq i32* %3, null
  br i1 %4, label %8, label %5

; <label>:5:                                      ; preds = %1
  %6 = load i32, i32* @nVbrFrameBufferSize, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %13

; <label>:8:                                      ; preds = %5, %1
  store i32 100, i32* @nVbrFrameBufferSize, align 4
  %9 = load i32, i32* @nVbrFrameBufferSize, align 4
  %10 = mul i32 %9, 4
  %11 = call arm_aapcscc i8* @malloc(i32 %10)
  %12 = bitcast i8* %11 to i32*
  store i32* %12, i32** @pVbrFrames, align 4
  br label %13

; <label>:13:                                     ; preds = %8, %5
  %14 = load i32, i32* @nVbrNumFrames, align 4
  %15 = load i32, i32* @nVbrFrameBufferSize, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %26

; <label>:17:                                     ; preds = %13
  %18 = load i32, i32* @nVbrFrameBufferSize, align 4
  %19 = mul nsw i32 %18, 2
  store i32 %19, i32* @nVbrFrameBufferSize, align 4
  %20 = load i32*, i32** @pVbrFrames, align 4
  %21 = bitcast i32* %20 to i8*
  %22 = load i32, i32* @nVbrFrameBufferSize, align 4
  %23 = mul i32 %22, 4
  %24 = call arm_aapcscc i8* @realloc(i8* %21, i32 %23)
  %25 = bitcast i8* %24 to i32*
  store i32* %25, i32** @pVbrFrames, align 4
  br label %26

; <label>:26:                                     ; preds = %17, %13
  %27 = load i32, i32* %2, align 4
  %28 = load i32*, i32** @pVbrFrames, align 4
  %29 = load i32, i32* @nVbrNumFrames, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* @nVbrNumFrames, align 4
  %31 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %31, align 4
  ret void
}

declare arm_aapcscc i8* @realloc(i8*, i32) #3

; Function Attrs: nounwind
define arm_aapcscc void @CreateI4(i8*, i32) #0 {
  %3 = alloca i8*, align 4
  %allocaVec = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  store i8* %0, i8** %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %5, i32 0
  %insertElmt1 = insertelement <4 x i32> %insertElmt, i32 %5, i32 1
  %insertElmt2 = insertelement <4 x i32> %insertElmt1, i32 %5, i32 2
  %insertElmt3 = insertelement <4 x i32> %insertElmt2, i32 %5, i32 3
  store <4 x i32> %insertElmt3, <4 x i32>* %allocaVec, align 16
  %6 = load <4 x i32>, <4 x i32>* %allocaVec, align 16
  %Vop = ashr <4 x i32> %6, <i32 24, i32 24, i32 24, i32 24>
  %7 = ashr i32 %5, 24
  %Vop4 = and <4 x i32> %Vop, <i32 255, i32 255, i32 255, i32 255>
  %8 = and i32 %7, 255
  %9 = trunc i32 %8 to i8
  %10 = load i8*, i8** %3, align 4
  %11 = getelementptr inbounds i8, i8* %10, i32 0
  store i8 %9, i8* %11, align 1
  %12 = load i32, i32* %4, align 4
  %insertElmt5 = insertelement <4 x i32> undef, i32 %12, i32 0
  %insertElmt6 = insertelement <4 x i32> %insertElmt5, i32 %12, i32 1
  %insertElmt7 = insertelement <4 x i32> %insertElmt6, i32 %12, i32 2
  %insertElmt8 = insertelement <4 x i32> %insertElmt7, i32 %12, i32 3
  store <4 x i32> %insertElmt8, <4 x i32>* %allocaVec, align 16
  %13 = load <4 x i32>, <4 x i32>* %allocaVec, align 16
  %Vop9 = ashr <4 x i32> %13, <i32 16, i32 16, i32 16, i32 16>
  %14 = ashr i32 %12, 16
  %Vop10 = and <4 x i32> %Vop9, <i32 255, i32 255, i32 255, i32 255>
  %15 = and i32 %14, 255
  %16 = trunc i32 %15 to i8
  %17 = load i8*, i8** %3, align 4
  %18 = getelementptr inbounds i8, i8* %17, i32 1
  store i8 %16, i8* %18, align 1
  %19 = load i32, i32* %4, align 4
  %insertElmt11 = insertelement <4 x i32> undef, i32 %19, i32 0
  %insertElmt12 = insertelement <4 x i32> %insertElmt11, i32 %19, i32 1
  %insertElmt13 = insertelement <4 x i32> %insertElmt12, i32 %19, i32 2
  %insertElmt14 = insertelement <4 x i32> %insertElmt13, i32 %19, i32 3
  store <4 x i32> %insertElmt14, <4 x i32>* %allocaVec, align 16
  %20 = load <4 x i32>, <4 x i32>* %allocaVec, align 16
  %Vop15 = ashr <4 x i32> %20, <i32 8, i32 8, i32 8, i32 8>
  %21 = ashr i32 %19, 8
  %Vop16 = and <4 x i32> %Vop15, <i32 255, i32 255, i32 255, i32 255>
  %22 = and i32 %21, 255
  %23 = trunc i32 %22 to i8
  %24 = load i8*, i8** %3, align 4
  %25 = getelementptr inbounds i8, i8* %24, i32 2
  store i8 %23, i8* %25, align 1
  %26 = load i32, i32* %4, align 4
  %insertElmt17 = insertelement <4 x i32> undef, i32 %26, i32 0
  %insertElmt18 = insertelement <4 x i32> %insertElmt17, i32 %26, i32 1
  %insertElmt19 = insertelement <4 x i32> %insertElmt18, i32 %26, i32 2
  %insertElmt20 = insertelement <4 x i32> %insertElmt19, i32 %26, i32 3
  store <4 x i32> %insertElmt20, <4 x i32>* %allocaVec, align 16
  %27 = load <4 x i32>, <4 x i32>* %allocaVec, align 16
  %Vop21 = and <4 x i32> %27, <i32 255, i32 255, i32 255, i32 255>
  %28 = and i32 %26, 255
  %29 = trunc i32 %28 to i8
  %30 = load i8*, i8** %3, align 4
  %31 = getelementptr inbounds i8, i8* %30, i32 3
  store i8 %29, i8* %31, align 1
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @CheckVbrTag(i8*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec8 = alloca <4 x i32>, align 16
  %CastInst2 = alloca i32, align 4
  %CastInstVec3 = alloca <4 x i32>, align 16
  %allocaVec9 = alloca <4 x i32>, align 16
  %CastInst4 = alloca i32, align 4
  %CastInstVec5 = alloca <4 x i32>, align 16
  %allocaVec10 = alloca <4 x i32>, align 16
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  store i8* %0, i8** %3, align 4
  %7 = load i8*, i8** %3, align 4
  %8 = getelementptr inbounds i8, i8* %7, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  store i32 %10, i32* %CastInst
  %11 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %11, i32 0
  %insertCast14 = insertelement <4 x i32> %insertCast, i32 %11, i32 1
  %insertCast15 = insertelement <4 x i32> %insertCast14, i32 %11, i32 2
  %insertCast16 = insertelement <4 x i32> %insertCast15, i32 %11, i32 3
  store <4 x i32> %insertCast16, <4 x i32>* %CastInstVec, align 4
  %12 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop = ashr <4 x i32> %12, <i32 3, i32 3, i32 3, i32 3>
  %13 = ashr i32 %10, 3
  %Vop17 = and <4 x i32> %Vop, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop17, <4 x i32>* %allocaVec11
  %14 = load <4 x i32>, <4 x i32>* %allocaVec11, align 4
  %extractE = extractelement <4 x i32> %14, i64 0
  %extractE18 = extractelement <4 x i32> %14, i64 1
  %extractE19 = extractelement <4 x i32> %14, i64 2
  %sum = add i32 %extractE, %extractE18
  %sum20 = add i32 %sum, %extractE19
  %15 = and i32 %13, 1
  %Fmul = mul i32 %15, 3
  store i32 %15, i32* %Recovery
  %Fcmp = icmp ne i32 %sum20, %Fmul
  br i1 %Fcmp, label %16, label %20

; <label>:16:                                     ; preds = %1
  %remThree = sdiv i32 %sum20, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %17, label %18

; <label>:17:                                     ; preds = %16
  store i32 %15, i32* %Recovery, align 4
  br label %19

; <label>:18:                                     ; preds = %16
  store i32 %extractE, i32* %Recovery, align 4
  br label %19

; <label>:19:                                     ; preds = %18, %17
  br label %20

; <label>:20:                                     ; preds = %1, %19
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %4, align 4
  %21 = load i8*, i8** %3, align 4
  %22 = getelementptr inbounds i8, i8* %21, i32 2
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  store i32 %24, i32* %CastInst2
  %25 = load i32, i32* %CastInst2, align 4
  %insertCast21 = insertelement <4 x i32> undef, i32 %25, i32 0
  %insertCast22 = insertelement <4 x i32> %insertCast21, i32 %25, i32 1
  %insertCast23 = insertelement <4 x i32> %insertCast22, i32 %25, i32 2
  %insertCast24 = insertelement <4 x i32> %insertCast23, i32 %25, i32 3
  store <4 x i32> %insertCast24, <4 x i32>* %CastInstVec3, align 4
  %26 = load <4 x i32>, <4 x i32>* %CastInstVec3, align 4
  %Vop25 = ashr <4 x i32> %26, <i32 2, i32 2, i32 2, i32 2>
  %27 = ashr i32 %24, 2
  %Vop26 = and <4 x i32> %Vop25, <i32 3, i32 3, i32 3, i32 3>
  store <4 x i32> %Vop26, <4 x i32>* %allocaVec13
  %28 = and i32 %27, 3
  store i32 %28, i32* %6, align 4
  %29 = load i8*, i8** %3, align 4
  %30 = getelementptr inbounds i8, i8* %29, i32 3
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  store i32 %32, i32* %CastInst4
  %33 = load i32, i32* %CastInst4, align 4
  %insertCast27 = insertelement <4 x i32> undef, i32 %33, i32 0
  %insertCast28 = insertelement <4 x i32> %insertCast27, i32 %33, i32 1
  %insertCast29 = insertelement <4 x i32> %insertCast28, i32 %33, i32 2
  %insertCast30 = insertelement <4 x i32> %insertCast29, i32 %33, i32 3
  store <4 x i32> %insertCast30, <4 x i32>* %CastInstVec5, align 4
  %34 = load <4 x i32>, <4 x i32>* %CastInstVec5, align 4
  %Vop31 = ashr <4 x i32> %34, <i32 6, i32 6, i32 6, i32 6>
  %35 = ashr i32 %32, 6
  %Vop32 = and <4 x i32> %Vop31, <i32 3, i32 3, i32 3, i32 3>
  store <4 x i32> %Vop32, <4 x i32>* %allocaVec12
  %36 = load <4 x i32>, <4 x i32>* %allocaVec12, align 4
  %extractE34 = extractelement <4 x i32> %36, i64 0
  %extractE35 = extractelement <4 x i32> %36, i64 1
  %extractE36 = extractelement <4 x i32> %36, i64 2
  %sum37 = add i32 %extractE34, %extractE35
  %sum38 = add i32 %sum37, %extractE36
  %37 = and i32 %35, 3
  %Fmul33 = mul i32 %37, 3
  store i32 %37, i32* %Recovery1
  %Fcmp39 = icmp ne i32 %sum38, %Fmul33
  br i1 %Fcmp39, label %38, label %42

; <label>:38:                                     ; preds = %20
  %remThree40 = sdiv i32 %sum38, %extractE34
  %FcmpThree41 = icmp ne i32 %remThree40, 3
  br i1 %FcmpThree41, label %39, label %40

; <label>:39:                                     ; preds = %38
  store i32 %37, i32* %Recovery1, align 4
  br label %41

; <label>:40:                                     ; preds = %38
  store i32 %extractE34, i32* %Recovery1, align 4
  br label %41

; <label>:41:                                     ; preds = %40, %39
  br label %42

; <label>:42:                                     ; preds = %20, %41
  %ReplaceInst42 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst42, i32* %5, align 4
  %43 = load i32, i32* %4, align 4
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %45, label %55

; <label>:45:                                     ; preds = %42
  %46 = load i32, i32* %5, align 4
  %47 = icmp ne i32 %46, 3
  br i1 %47, label %48, label %51

; <label>:48:                                     ; preds = %45
  %49 = load i8*, i8** %3, align 4
  %50 = getelementptr inbounds i8, i8* %49, i32 36
  store i8* %50, i8** %3, align 4
  br label %54

; <label>:51:                                     ; preds = %45
  %52 = load i8*, i8** %3, align 4
  %53 = getelementptr inbounds i8, i8* %52, i32 21
  store i8* %53, i8** %3, align 4
  br label %54

; <label>:54:                                     ; preds = %51, %48
  br label %65

; <label>:55:                                     ; preds = %42
  %56 = load i32, i32* %5, align 4
  %57 = icmp ne i32 %56, 3
  br i1 %57, label %58, label %61

; <label>:58:                                     ; preds = %55
  %59 = load i8*, i8** %3, align 4
  %60 = getelementptr inbounds i8, i8* %59, i32 21
  store i8* %60, i8** %3, align 4
  br label %64

; <label>:61:                                     ; preds = %55
  %62 = load i8*, i8** %3, align 4
  %63 = getelementptr inbounds i8, i8* %62, i32 13
  store i8* %63, i8** %3, align 4
  br label %64

; <label>:64:                                     ; preds = %61, %58
  br label %65

; <label>:65:                                     ; preds = %64, %54
  %66 = load i8*, i8** %3, align 4
  %67 = getelementptr inbounds i8, i8* %66, i32 0
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 0), align 1
  %71 = zext i8 %70 to i32
  %72 = icmp ne i32 %69, %71
  br i1 %72, label %73, label %74

; <label>:73:                                     ; preds = %65
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec10
  store i32 0, i32* %2, align 4
  br label %102

; <label>:74:                                     ; preds = %65
  %75 = load i8*, i8** %3, align 4
  %76 = getelementptr inbounds i8, i8* %75, i32 1
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 1), align 1
  %80 = zext i8 %79 to i32
  %81 = icmp ne i32 %78, %80
  br i1 %81, label %82, label %83

; <label>:82:                                     ; preds = %74
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec10
  store i32 0, i32* %2, align 4
  br label %102

; <label>:83:                                     ; preds = %74
  %84 = load i8*, i8** %3, align 4
  %85 = getelementptr inbounds i8, i8* %84, i32 2
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 2), align 1
  %89 = zext i8 %88 to i32
  %90 = icmp ne i32 %87, %89
  br i1 %90, label %91, label %92

; <label>:91:                                     ; preds = %83
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec10
  store i32 0, i32* %2, align 4
  br label %102

; <label>:92:                                     ; preds = %83
  %93 = load i8*, i8** %3, align 4
  %94 = getelementptr inbounds i8, i8* %93, i32 3
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 3), align 1
  %98 = zext i8 %97 to i32
  %99 = icmp ne i32 %96, %98
  br i1 %99, label %100, label %101

; <label>:100:                                    ; preds = %92
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec10
  store i32 0, i32* %2, align 4
  br label %102

; <label>:101:                                    ; preds = %92
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec10
  store i32 1, i32* %2, align 4
  br label %102

; <label>:102:                                    ; preds = %101, %100, %91, %82, %73
  %103 = load i32, i32* %2, align 4
  ret i32 %103
}

; Function Attrs: nounwind
define arm_aapcscc i32 @GetVbrTag(%struct.VBRTAGDATA*, i8*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec9 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec10 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec11 = alloca <4 x i32>, align 16
  %Recovery3 = alloca i32, align 4
  %allocaVec12 = alloca <4 x i32>, align 16
  %Recovery4 = alloca i32, align 4
  %allocaVec13 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec14 = alloca <4 x i32>, align 16
  %CastInst5 = alloca i32, align 4
  %CastInstVec6 = alloca <4 x i32>, align 16
  %allocaVec15 = alloca <4 x i32>, align 16
  %CastInst7 = alloca i32, align 4
  %CastInstVec8 = alloca <4 x i32>, align 16
  %allocaVec16 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  %4 = alloca %struct.VBRTAGDATA*, align 4
  %5 = alloca i8*, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec18 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec19 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec20 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec21 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  store %struct.VBRTAGDATA* %0, %struct.VBRTAGDATA** %4, align 4
  store i8* %1, i8** %5, align 4
  %11 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %12 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %11, i32 0, i32 2
  store i32 0, i32* %12, align 4
  %13 = load i8*, i8** %5, align 4
  %14 = getelementptr inbounds i8, i8* %13, i32 1
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  store i32 %16, i32* %CastInst
  %17 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %17, i32 0
  %insertCast22 = insertelement <4 x i32> %insertCast, i32 %17, i32 1
  %insertCast23 = insertelement <4 x i32> %insertCast22, i32 %17, i32 2
  %insertCast24 = insertelement <4 x i32> %insertCast23, i32 %17, i32 3
  store <4 x i32> %insertCast24, <4 x i32>* %CastInstVec, align 4
  %18 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop = ashr <4 x i32> %18, <i32 3, i32 3, i32 3, i32 3>
  %19 = ashr i32 %16, 3
  %Vop25 = and <4 x i32> %Vop, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop25, <4 x i32>* %allocaVec19
  %20 = load <4 x i32>, <4 x i32>* %allocaVec19, align 4
  %extractE = extractelement <4 x i32> %20, i64 0
  %extractE26 = extractelement <4 x i32> %20, i64 1
  %extractE27 = extractelement <4 x i32> %20, i64 2
  %sum = add i32 %extractE, %extractE26
  %sum28 = add i32 %sum, %extractE27
  %21 = and i32 %19, 1
  %Fmul = mul i32 %21, 3
  store i32 %21, i32* %Recovery
  %Fcmp = icmp ne i32 %sum28, %Fmul
  br i1 %Fcmp, label %22, label %26

; <label>:22:                                     ; preds = %2
  %remThree = sdiv i32 %sum28, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %23, label %24

; <label>:23:                                     ; preds = %22
  store i32 %21, i32* %Recovery, align 4
  br label %25

; <label>:24:                                     ; preds = %22
  store i32 %extractE, i32* %Recovery, align 4
  br label %25

; <label>:25:                                     ; preds = %24, %23
  br label %26

; <label>:26:                                     ; preds = %2, %25
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %8, align 4
  %27 = load i8*, i8** %5, align 4
  %28 = getelementptr inbounds i8, i8* %27, i32 2
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  store i32 %30, i32* %CastInst5
  %31 = load i32, i32* %CastInst5, align 4
  %insertCast29 = insertelement <4 x i32> undef, i32 %31, i32 0
  %insertCast30 = insertelement <4 x i32> %insertCast29, i32 %31, i32 1
  %insertCast31 = insertelement <4 x i32> %insertCast30, i32 %31, i32 2
  %insertCast32 = insertelement <4 x i32> %insertCast31, i32 %31, i32 3
  store <4 x i32> %insertCast32, <4 x i32>* %CastInstVec6, align 4
  %32 = load <4 x i32>, <4 x i32>* %CastInstVec6, align 4
  %Vop33 = ashr <4 x i32> %32, <i32 2, i32 2, i32 2, i32 2>
  %33 = ashr i32 %30, 2
  %Vop34 = and <4 x i32> %Vop33, <i32 3, i32 3, i32 3, i32 3>
  store <4 x i32> %Vop34, <4 x i32>* %allocaVec21
  %34 = load <4 x i32>, <4 x i32>* %allocaVec21, align 4
  %extractE36 = extractelement <4 x i32> %34, i64 0
  %extractE37 = extractelement <4 x i32> %34, i64 1
  %extractE38 = extractelement <4 x i32> %34, i64 2
  %sum39 = add i32 %extractE36, %extractE37
  %sum40 = add i32 %sum39, %extractE38
  %35 = and i32 %33, 3
  %Fmul35 = mul i32 %35, 3
  store i32 %35, i32* %Recovery1
  %Fcmp41 = icmp ne i32 %sum40, %Fmul35
  br i1 %Fcmp41, label %36, label %40

; <label>:36:                                     ; preds = %26
  %remThree86 = sdiv i32 %sum40, %extractE36
  %FcmpThree87 = icmp ne i32 %remThree86, 3
  br i1 %FcmpThree87, label %37, label %38

; <label>:37:                                     ; preds = %36
  store i32 %35, i32* %Recovery1, align 4
  br label %39

; <label>:38:                                     ; preds = %36
  store i32 %extractE36, i32* %Recovery1, align 4
  br label %39

; <label>:39:                                     ; preds = %38, %37
  br label %40

; <label>:40:                                     ; preds = %26, %39
  %ReplaceInst92 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst92, i32* %10, align 4
  %41 = load i8*, i8** %5, align 4
  %42 = getelementptr inbounds i8, i8* %41, i32 3
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  store i32 %44, i32* %CastInst7
  %45 = load i32, i32* %CastInst7, align 4
  %insertCast42 = insertelement <4 x i32> undef, i32 %45, i32 0
  %insertCast43 = insertelement <4 x i32> %insertCast42, i32 %45, i32 1
  %insertCast44 = insertelement <4 x i32> %insertCast43, i32 %45, i32 2
  %insertCast45 = insertelement <4 x i32> %insertCast44, i32 %45, i32 3
  store <4 x i32> %insertCast45, <4 x i32>* %CastInstVec8, align 4
  %46 = load <4 x i32>, <4 x i32>* %CastInstVec8, align 4
  %Vop46 = ashr <4 x i32> %46, <i32 6, i32 6, i32 6, i32 6>
  %47 = ashr i32 %44, 6
  %Vop47 = and <4 x i32> %Vop46, <i32 3, i32 3, i32 3, i32 3>
  store <4 x i32> %Vop47, <4 x i32>* %allocaVec20
  %48 = load <4 x i32>, <4 x i32>* %allocaVec20, align 4
  %extractE49 = extractelement <4 x i32> %48, i64 0
  %extractE50 = extractelement <4 x i32> %48, i64 1
  %extractE51 = extractelement <4 x i32> %48, i64 2
  %sum52 = add i32 %extractE49, %extractE50
  %sum53 = add i32 %sum52, %extractE51
  %49 = and i32 %47, 3
  %Fmul48 = mul i32 %49, 3
  store i32 %49, i32* %Recovery2
  %Fcmp54 = icmp ne i32 %sum53, %Fmul48
  br i1 %Fcmp54, label %50, label %54

; <label>:50:                                     ; preds = %40
  %remThree88 = sdiv i32 %sum53, %extractE49
  %FcmpThree89 = icmp ne i32 %remThree88, 3
  br i1 %FcmpThree89, label %51, label %52

; <label>:51:                                     ; preds = %50
  store i32 %49, i32* %Recovery2, align 4
  br label %53

; <label>:52:                                     ; preds = %50
  store i32 %extractE49, i32* %Recovery2, align 4
  br label %53

; <label>:53:                                     ; preds = %52, %51
  br label %54

; <label>:54:                                     ; preds = %40, %53
  %ReplaceInst93 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst93, i32* %9, align 4
  %55 = load i32, i32* %8, align 4
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %57, label %67

; <label>:57:                                     ; preds = %54
  %58 = load i32, i32* %9, align 4
  %59 = icmp ne i32 %58, 3
  br i1 %59, label %60, label %63

; <label>:60:                                     ; preds = %57
  %61 = load i8*, i8** %5, align 4
  %62 = getelementptr inbounds i8, i8* %61, i32 36
  store i8* %62, i8** %5, align 4
  br label %66

; <label>:63:                                     ; preds = %57
  %64 = load i8*, i8** %5, align 4
  %65 = getelementptr inbounds i8, i8* %64, i32 21
  store i8* %65, i8** %5, align 4
  br label %66

; <label>:66:                                     ; preds = %63, %60
  br label %77

; <label>:67:                                     ; preds = %54
  %68 = load i32, i32* %9, align 4
  %69 = icmp ne i32 %68, 3
  br i1 %69, label %70, label %73

; <label>:70:                                     ; preds = %67
  %71 = load i8*, i8** %5, align 4
  %72 = getelementptr inbounds i8, i8* %71, i32 21
  store i8* %72, i8** %5, align 4
  br label %76

; <label>:73:                                     ; preds = %67
  %74 = load i8*, i8** %5, align 4
  %75 = getelementptr inbounds i8, i8* %74, i32 13
  store i8* %75, i8** %5, align 4
  br label %76

; <label>:76:                                     ; preds = %73, %70
  br label %77

; <label>:77:                                     ; preds = %76, %66
  %78 = load i8*, i8** %5, align 4
  %79 = getelementptr inbounds i8, i8* %78, i32 0
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 0), align 1
  %83 = zext i8 %82 to i32
  %84 = icmp ne i32 %81, %83
  br i1 %84, label %85, label %86

; <label>:85:                                     ; preds = %77
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %3, align 4
  br label %213

; <label>:86:                                     ; preds = %77
  %87 = load i8*, i8** %5, align 4
  %88 = getelementptr inbounds i8, i8* %87, i32 1
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 1), align 1
  %92 = zext i8 %91 to i32
  %93 = icmp ne i32 %90, %92
  br i1 %93, label %94, label %95

; <label>:94:                                     ; preds = %86
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %3, align 4
  br label %213

; <label>:95:                                     ; preds = %86
  %96 = load i8*, i8** %5, align 4
  %97 = getelementptr inbounds i8, i8* %96, i32 2
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 2), align 1
  %101 = zext i8 %100 to i32
  %102 = icmp ne i32 %99, %101
  br i1 %102, label %103, label %104

; <label>:103:                                    ; preds = %95
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %3, align 4
  br label %213

; <label>:104:                                    ; preds = %95
  %105 = load i8*, i8** %5, align 4
  %106 = getelementptr inbounds i8, i8* %105, i32 3
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 3), align 1
  %110 = zext i8 %109 to i32
  %111 = icmp ne i32 %108, %110
  br i1 %111, label %112, label %113

; <label>:112:                                    ; preds = %104
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec16
  store i32 0, i32* %3, align 4
  br label %213

; <label>:113:                                    ; preds = %104
  %114 = load i8*, i8** %5, align 4
  %115 = getelementptr inbounds i8, i8* %114, i32 4
  store i8* %115, i8** %5, align 4
  %116 = load i32, i32* %8, align 4
  %117 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %118 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %117, i32 0, i32 0
  store i32 %116, i32* %118, align 4
  %119 = load i32, i32* %10, align 4
  %120 = getelementptr inbounds [4 x i32], [4 x i32]* @GetVbrTag.sr_table, i32 0, i32 %119
  %121 = load i32, i32* %120, align 4
  %122 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %123 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %122, i32 0, i32 1
  store i32 %121, i32* %123, align 4
  %124 = load i32, i32* %8, align 4
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %131

; <label>:126:                                    ; preds = %113
  %127 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %128 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %127, i32 0, i32 1
  %129 = load i32, i32* %128, align 4
  %130 = ashr i32 %129, 1
  store i32 %130, i32* %128, align 4
  br label %131

; <label>:131:                                    ; preds = %126, %113
  %132 = load i8*, i8** %5, align 4
  %133 = call arm_aapcscc i32 @ExtractI4(i8* %132)
  %134 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %135 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %134, i32 0, i32 2
  store i32 %133, i32* %135, align 4
  store i32 %133, i32* %7, align 4
  %136 = load i8*, i8** %5, align 4
  %137 = getelementptr inbounds i8, i8* %136, i32 4
  store i8* %137, i8** %5, align 4
  %138 = load i32, i32* %7, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %138, i32 0
  %insertElmt55 = insertelement <4 x i32> %insertElmt, i32 %138, i32 1
  %insertElmt56 = insertelement <4 x i32> %insertElmt55, i32 %138, i32 2
  %insertElmt57 = insertelement <4 x i32> %insertElmt56, i32 %138, i32 3
  store <4 x i32> %insertElmt57, <4 x i32>* %allocaVec18, align 16
  %139 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop58 = and <4 x i32> %139, <i32 1, i32 1, i32 1, i32 1>
  %140 = and i32 %138, 1
  %141 = icmp ne i32 %140, 0
  br i1 %141, label %142, label %149

; <label>:142:                                    ; preds = %131
  %143 = load i8*, i8** %5, align 4
  %144 = call arm_aapcscc i32 @ExtractI4(i8* %143)
  %145 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %146 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %145, i32 0, i32 3
  store i32 %144, i32* %146, align 4
  %147 = load i8*, i8** %5, align 4
  %148 = getelementptr inbounds i8, i8* %147, i32 4
  store i8* %148, i8** %5, align 4
  br label %149

; <label>:149:                                    ; preds = %142, %131
  %150 = load i32, i32* %7, align 4
  %insertElmt59 = insertelement <4 x i32> undef, i32 %150, i32 0
  %insertElmt60 = insertelement <4 x i32> %insertElmt59, i32 %150, i32 1
  %insertElmt61 = insertelement <4 x i32> %insertElmt60, i32 %150, i32 2
  %insertElmt62 = insertelement <4 x i32> %insertElmt61, i32 %150, i32 3
  store <4 x i32> %insertElmt62, <4 x i32>* %allocaVec18, align 16
  %151 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop63 = and <4 x i32> %151, <i32 2, i32 2, i32 2, i32 2>
  %152 = and i32 %150, 2
  %153 = icmp ne i32 %152, 0
  br i1 %153, label %154, label %161

; <label>:154:                                    ; preds = %149
  %155 = load i8*, i8** %5, align 4
  %156 = call arm_aapcscc i32 @ExtractI4(i8* %155)
  %157 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %158 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %157, i32 0, i32 4
  store i32 %156, i32* %158, align 4
  %159 = load i8*, i8** %5, align 4
  %160 = getelementptr inbounds i8, i8* %159, i32 4
  store i8* %160, i8** %5, align 4
  br label %161

; <label>:161:                                    ; preds = %154, %149
  %162 = load i32, i32* %7, align 4
  %insertElmt64 = insertelement <4 x i32> undef, i32 %162, i32 0
  %insertElmt65 = insertelement <4 x i32> %insertElmt64, i32 %162, i32 1
  %insertElmt66 = insertelement <4 x i32> %insertElmt65, i32 %162, i32 2
  %insertElmt67 = insertelement <4 x i32> %insertElmt66, i32 %162, i32 3
  store <4 x i32> %insertElmt67, <4 x i32>* %allocaVec18, align 16
  %163 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop68 = and <4 x i32> %163, <i32 4, i32 4, i32 4, i32 4>
  %164 = and i32 %162, 4
  %165 = icmp ne i32 %164, 0
  br i1 %165, label %166, label %198

; <label>:166:                                    ; preds = %161
  %167 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %168 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %167, i32 0, i32 6
  %169 = getelementptr inbounds [100 x i8], [100 x i8]* %168, i32 0, i32 0
  %170 = icmp ne i8* %169, null
  br i1 %170, label %171, label %195

; <label>:171:                                    ; preds = %166
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec17
  store i32 0, i32* %6, align 4
  br label %172

; <label>:172:                                    ; preds = %193, %171
  %173 = load i32, i32* %6, align 4
  %174 = icmp slt i32 %173, 100
  br i1 %174, label %175, label %194

; <label>:175:                                    ; preds = %172
  %176 = load i8*, i8** %5, align 4
  %177 = load i32, i32* %6, align 4
  %178 = getelementptr inbounds i8, i8* %176, i32 %177
  %179 = load i8, i8* %178, align 1
  %180 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %181 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %180, i32 0, i32 6
  %182 = load i32, i32* %6, align 4
  %183 = getelementptr inbounds [100 x i8], [100 x i8]* %181, i32 0, i32 %182
  store i8 %179, i8* %183, align 1
  br label %184

; <label>:184:                                    ; preds = %175
  %185 = load i32, i32* %6, align 4
  %insertElmt69 = insertelement <4 x i32> undef, i32 %185, i32 0
  %insertElmt70 = insertelement <4 x i32> %insertElmt69, i32 %185, i32 1
  %insertElmt71 = insertelement <4 x i32> %insertElmt70, i32 %185, i32 2
  %insertElmt72 = insertelement <4 x i32> %insertElmt71, i32 %185, i32 3
  store <4 x i32> %insertElmt72, <4 x i32>* %allocaVec17, align 16
  %186 = load <4 x i32>, <4 x i32>* %allocaVec17, align 16
  %Vop73 = add <4 x i32> %186, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop73, <4 x i32>* %allocaVec17
  %187 = load <4 x i32>, <4 x i32>* %allocaVec17, align 4
  %extractE75 = extractelement <4 x i32> %187, i64 0
  %extractE76 = extractelement <4 x i32> %187, i64 1
  %extractE77 = extractelement <4 x i32> %187, i64 2
  %sum78 = add i32 %extractE75, %extractE76
  %sum79 = add i32 %sum78, %extractE77
  %188 = add nsw i32 %185, 1
  %Fmul74 = mul i32 %188, 3
  store i32 %188, i32* %Recovery4
  %Fcmp80 = icmp ne i32 %sum79, %Fmul74
  br i1 %Fcmp80, label %189, label %193

; <label>:189:                                    ; preds = %184
  %remThree90 = sdiv i32 %sum79, %extractE75
  %FcmpThree91 = icmp ne i32 %remThree90, 3
  br i1 %FcmpThree91, label %190, label %191

; <label>:190:                                    ; preds = %189
  store i32 %188, i32* %Recovery4, align 4
  br label %192

; <label>:191:                                    ; preds = %189
  store i32 %extractE75, i32* %Recovery4, align 4
  br label %192

; <label>:192:                                    ; preds = %191, %190
  br label %193

; <label>:193:                                    ; preds = %184, %192
  %ReplaceInst94 = load i32, i32* %Recovery4, align 4
  store i32 %ReplaceInst94, i32* %6, align 4
  br label %172

; <label>:194:                                    ; preds = %172
  br label %195

; <label>:195:                                    ; preds = %194, %166
  %196 = load i8*, i8** %5, align 4
  %197 = getelementptr inbounds i8, i8* %196, i32 100
  store i8* %197, i8** %5, align 4
  br label %198

; <label>:198:                                    ; preds = %195, %161
  %199 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %200 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %199, i32 0, i32 5
  store i32 -1, i32* %200, align 4
  %201 = load i32, i32* %7, align 4
  %insertElmt81 = insertelement <4 x i32> undef, i32 %201, i32 0
  %insertElmt82 = insertelement <4 x i32> %insertElmt81, i32 %201, i32 1
  %insertElmt83 = insertelement <4 x i32> %insertElmt82, i32 %201, i32 2
  %insertElmt84 = insertelement <4 x i32> %insertElmt83, i32 %201, i32 3
  store <4 x i32> %insertElmt84, <4 x i32>* %allocaVec18, align 16
  %202 = load <4 x i32>, <4 x i32>* %allocaVec18, align 16
  %Vop85 = and <4 x i32> %202, <i32 8, i32 8, i32 8, i32 8>
  %203 = and i32 %201, 8
  %204 = icmp ne i32 %203, 0
  br i1 %204, label %205, label %212

; <label>:205:                                    ; preds = %198
  %206 = load i8*, i8** %5, align 4
  %207 = call arm_aapcscc i32 @ExtractI4(i8* %206)
  %208 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %209 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %208, i32 0, i32 5
  store i32 %207, i32* %209, align 4
  %210 = load i8*, i8** %5, align 4
  %211 = getelementptr inbounds i8, i8* %210, i32 4
  store i8* %211, i8** %5, align 4
  br label %212

; <label>:212:                                    ; preds = %205, %198
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec16
  store i32 1, i32* %3, align 4
  br label %213

; <label>:213:                                    ; preds = %212, %112, %103, %94, %85
  %214 = load i32, i32* %3, align 4
  ret i32 %214
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @ExtractI4(i8*) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec6 = alloca <4 x i32>, align 16
  %CastInst1 = alloca i32, align 4
  %CastInstVec2 = alloca <4 x i32>, align 16
  %allocaVec7 = alloca <4 x i32>, align 16
  %CastInst3 = alloca i32, align 4
  %CastInstVec4 = alloca <4 x i32>, align 16
  %2 = alloca i8*, align 4
  %allocaVec8 = alloca <4 x i32>, align 16
  %3 = alloca i32, align 4
  store i8* %0, i8** %2, align 4
  %4 = load i8*, i8** %2, align 4
  %5 = getelementptr inbounds i8, i8* %4, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  store i32 %7, i32* %3, align 4
  %8 = load i32, i32* %3, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %8, i32 0
  %insertElmt9 = insertelement <4 x i32> %insertElmt, i32 %8, i32 1
  %insertElmt10 = insertelement <4 x i32> %insertElmt9, i32 %8, i32 2
  %insertElmt11 = insertelement <4 x i32> %insertElmt10, i32 %8, i32 3
  store <4 x i32> %insertElmt11, <4 x i32>* %allocaVec8, align 16
  %9 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %Vop = shl <4 x i32> %9, <i32 8, i32 8, i32 8, i32 8>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec8
  %10 = shl i32 %8, 8
  store i32 %10, i32* %3, align 4
  %11 = load i8*, i8** %2, align 4
  %12 = getelementptr inbounds i8, i8* %11, i32 1
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = load i32, i32* %3, align 4
  %16 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  store i32 %14, i32* %CastInst
  %17 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %17, i32 0
  %insertCast12 = insertelement <4 x i32> %insertCast, i32 %17, i32 1
  %insertCast13 = insertelement <4 x i32> %insertCast12, i32 %17, i32 2
  %insertCast14 = insertelement <4 x i32> %insertCast13, i32 %17, i32 3
  store <4 x i32> %insertCast14, <4 x i32>* %CastInstVec, align 4
  %18 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop15 = or <4 x i32> %16, %18
  store <4 x i32> %Vop15, <4 x i32>* %allocaVec8
  %19 = or i32 %15, %14
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* %3, align 4
  %21 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %Vop16 = shl <4 x i32> %21, <i32 8, i32 8, i32 8, i32 8>
  store <4 x i32> %Vop16, <4 x i32>* %allocaVec8
  %22 = shl i32 %20, 8
  store i32 %22, i32* %3, align 4
  %23 = load i8*, i8** %2, align 4
  %24 = getelementptr inbounds i8, i8* %23, i32 2
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = load i32, i32* %3, align 4
  %28 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  store i32 %26, i32* %CastInst1
  %29 = load i32, i32* %CastInst1, align 4
  %insertCast17 = insertelement <4 x i32> undef, i32 %29, i32 0
  %insertCast18 = insertelement <4 x i32> %insertCast17, i32 %29, i32 1
  %insertCast19 = insertelement <4 x i32> %insertCast18, i32 %29, i32 2
  %insertCast20 = insertelement <4 x i32> %insertCast19, i32 %29, i32 3
  store <4 x i32> %insertCast20, <4 x i32>* %CastInstVec2, align 4
  %30 = load <4 x i32>, <4 x i32>* %CastInstVec2, align 4
  %Vop21 = or <4 x i32> %28, %30
  store <4 x i32> %Vop21, <4 x i32>* %allocaVec8
  %31 = or i32 %27, %26
  store i32 %31, i32* %3, align 4
  %32 = load i32, i32* %3, align 4
  %33 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  %Vop22 = shl <4 x i32> %33, <i32 8, i32 8, i32 8, i32 8>
  store <4 x i32> %Vop22, <4 x i32>* %allocaVec8
  %34 = shl i32 %32, 8
  store i32 %34, i32* %3, align 4
  %35 = load i8*, i8** %2, align 4
  %36 = getelementptr inbounds i8, i8* %35, i32 3
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = load i32, i32* %3, align 4
  %40 = load <4 x i32>, <4 x i32>* %allocaVec8, align 16
  store i32 %38, i32* %CastInst3
  %41 = load i32, i32* %CastInst3, align 4
  %insertCast23 = insertelement <4 x i32> undef, i32 %41, i32 0
  %insertCast24 = insertelement <4 x i32> %insertCast23, i32 %41, i32 1
  %insertCast25 = insertelement <4 x i32> %insertCast24, i32 %41, i32 2
  %insertCast26 = insertelement <4 x i32> %insertCast25, i32 %41, i32 3
  store <4 x i32> %insertCast26, <4 x i32>* %CastInstVec4, align 4
  %42 = load <4 x i32>, <4 x i32>* %CastInstVec4, align 4
  %Vop27 = or <4 x i32> %40, %42
  store <4 x i32> %Vop27, <4 x i32>* %allocaVec8
  %43 = load <4 x i32>, <4 x i32>* %allocaVec8, align 4
  %extractE = extractelement <4 x i32> %43, i64 0
  %extractE28 = extractelement <4 x i32> %43, i64 1
  %extractE29 = extractelement <4 x i32> %43, i64 2
  %sum = add i32 %extractE, %extractE28
  %sum30 = add i32 %sum, %extractE29
  %44 = or i32 %39, %38
  %Fmul = mul i32 %44, 3
  store i32 %44, i32* %Recovery
  %Fcmp = icmp ne i32 %sum30, %Fmul
  br i1 %Fcmp, label %45, label %49

; <label>:45:                                     ; preds = %1
  %remThree = sdiv i32 %sum30, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %46, label %47

; <label>:46:                                     ; preds = %45
  store i32 %44, i32* %Recovery, align 4
  br label %48

; <label>:47:                                     ; preds = %45
  store i32 %extractE, i32* %Recovery, align 4
  br label %48

; <label>:48:                                     ; preds = %47, %46
  br label %49

; <label>:49:                                     ; preds = %1, %48
  %ReplaceInst = load i32, i32* %Recovery, align 4
  store i32 %ReplaceInst, i32* %3, align 4
  %50 = load i32, i32* %3, align 4
  ret i32 %50
}

; Function Attrs: nounwind
define arm_aapcscc i32 @InitVbrTag(%struct.bit_stream_struc*, i32, i32, i32) #0 {
  %allocaVec = alloca <4 x i32>, align 16
  %Recovery = alloca i32, align 4
  %allocaVec2 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %5 = alloca %struct.bit_stream_struc*, align 4
  %allocaVec3 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec5 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  store %struct.bit_stream_struc* %0, %struct.bit_stream_struc** %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  store i32* null, i32** @pVbrFrames, align 4
  store i32 0, i32* @nVbrNumFrames, align 4
  store i32 0, i32* @nVbrFrameBufferSize, align 4
  call void @llvm.memset.p0i8.i32(i8* bitcast ([100 x i32]* @g_Position to i8*), i8 0, i32 400, i32 4, i1 false)
  call void @llvm.memset.p0i8.i32(i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 0), i8 0, i32 216, i32 1, i1 false)
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec6
  store i32 0, i32* %9, align 4
  br label %11

; <label>:11:                                     ; preds = %17, %4
  %12 = load i32, i32* %9, align 4
  %13 = icmp slt i32 %12, 100
  br i1 %13, label %14, label %21

; <label>:14:                                     ; preds = %11
  %15 = load i32, i32* %9, align 4
  %16 = getelementptr inbounds [100 x i32], [100 x i32]* @g_Position, i32 0, i32 %15
  store i32 -1, i32* %16, align 4
  br label %17

; <label>:17:                                     ; preds = %14
  %18 = load i32, i32* %9, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %18, i32 0
  %insertElmt8 = insertelement <4 x i32> %insertElmt, i32 %18, i32 1
  %insertElmt9 = insertelement <4 x i32> %insertElmt8, i32 %18, i32 2
  %insertElmt10 = insertelement <4 x i32> %insertElmt9, i32 %18, i32 3
  store <4 x i32> %insertElmt10, <4 x i32>* %allocaVec6, align 16
  %19 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop = add <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop, <4 x i32>* %allocaVec6
  %20 = add nsw i32 %18, 1
  store i32 %20, i32* %9, align 4
  br label %11

; <label>:21:                                     ; preds = %11
  %22 = load i32, i32* %7, align 4
  %23 = icmp eq i32 %22, 3
  br i1 %23, label %24, label %30

; <label>:24:                                     ; preds = %21
  %25 = load i32, i32* %6, align 4
  %26 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @SizeOfEmptyFrame, i32 0, i32 %25
  %27 = getelementptr inbounds [2 x i32], [2 x i32]* %26, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 %28, 4
  store i32 %29, i32* @nZeroStreamSize, align 4
  br label %36

; <label>:30:                                     ; preds = %21
  %31 = load i32, i32* %6, align 4
  %32 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @SizeOfEmptyFrame, i32 0, i32 %31
  %33 = getelementptr inbounds [2 x i32], [2 x i32]* %32, i32 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = add nsw i32 %34, 4
  store i32 %35, i32* @nZeroStreamSize, align 4
  br label %36

; <label>:36:                                     ; preds = %30, %24
  %37 = load i32, i32* %8, align 4
  %38 = icmp sgt i32 %37, 2
  br i1 %38, label %39, label %42

; <label>:39:                                     ; preds = %36
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %41 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.335, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:42:                                     ; preds = %36
  %43 = load i32, i32* %8, align 4
  %44 = getelementptr inbounds [3 x i32], [3 x i32]* @InitVbrTag.framesize, i32 0, i32 %43
  %45 = load i32, i32* %44, align 4
  store i32 %45, i32* @TotalFrameSize, align 4
  %46 = load i32, i32* @nZeroStreamSize, align 4
  %47 = add nsw i32 %46, 120
  store i32 %47, i32* %10, align 4
  %48 = load i32, i32* %10, align 4
  %49 = add nsw i32 %48, 20
  store i32 %49, i32* %10, align 4
  %50 = load i32, i32* @TotalFrameSize, align 4
  %51 = load i32, i32* %10, align 4
  %52 = icmp slt i32 %50, %51
  br i1 %52, label %53, label %56

; <label>:53:                                     ; preds = %42
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %55 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1.336, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:56:                                     ; preds = %42
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec6
  store i32 0, i32* %9, align 4
  br label %57

; <label>:57:                                     ; preds = %72, %56
  %58 = load i32, i32* %9, align 4
  %59 = load i32, i32* @TotalFrameSize, align 4
  %60 = icmp slt i32 %58, %59
  br i1 %60, label %61, label %73

; <label>:61:                                     ; preds = %57
  %62 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %5, align 4
  call arm_aapcscc void @putbits(%struct.bit_stream_struc* %62, i32 0, i32 8)
  br label %63

; <label>:63:                                     ; preds = %61
  %64 = load i32, i32* %9, align 4
  %65 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop11 = add <4 x i32> %65, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop11, <4 x i32>* %allocaVec6
  %66 = load <4 x i32>, <4 x i32>* %allocaVec6, align 4
  %extractE = extractelement <4 x i32> %66, i64 0
  %extractE12 = extractelement <4 x i32> %66, i64 1
  %extractE13 = extractelement <4 x i32> %66, i64 2
  %sum = add i32 %extractE, %extractE12
  %sum14 = add i32 %sum, %extractE13
  %67 = add nsw i32 %64, 1
  %Fmul = mul i32 %67, 3
  store i32 %67, i32* %Recovery1
  %Fcmp = icmp ne i32 %sum14, %Fmul
  br i1 %Fcmp, label %68, label %72

; <label>:68:                                     ; preds = %63
  %remThree = sdiv i32 %sum14, %extractE
  %FcmpThree = icmp ne i32 %remThree, 3
  br i1 %FcmpThree, label %69, label %70

; <label>:69:                                     ; preds = %68
  store i32 %67, i32* %Recovery1, align 4
  br label %71

; <label>:70:                                     ; preds = %68
  store i32 %extractE, i32* %Recovery1, align 4
  br label %71

; <label>:71:                                     ; preds = %70, %69
  br label %72

; <label>:72:                                     ; preds = %63, %71
  %ReplaceInst = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst, i32* %9, align 4
  br label %57

; <label>:73:                                     ; preds = %57
  ret i32 0
}

; Function Attrs: nounwind
define arm_aapcscc i32 @PutVbrTag(i8*, i32, i32) #0 {
  %allocaVec = alloca <4 x float>, align 16
  %Recovery = alloca float, align 4
  %allocaVec17 = alloca <4 x i32>, align 16
  %Recovery1 = alloca i32, align 4
  %allocaVec18 = alloca <4 x i32>, align 16
  %Recovery2 = alloca i32, align 4
  %allocaVec19 = alloca <4 x i32>, align 16
  %CastInst = alloca i32, align 4
  %CastInstVec = alloca <4 x i32>, align 16
  %allocaVec20 = alloca <4 x i32>, align 16
  %CastInst3 = alloca i32, align 4
  %CastInstVec4 = alloca <4 x i32>, align 16
  %allocaVec21 = alloca <4 x i32>, align 16
  %CastInst5 = alloca i32, align 4
  %CastInstVec6 = alloca <4 x i32>, align 16
  %allocaVec22 = alloca <4 x i32>, align 16
  %CastInst7 = alloca i32, align 4
  %CastInstVec8 = alloca <4 x i32>, align 16
  %allocaVec23 = alloca <2 x double>, align 16
  %CastInst9 = alloca double, align 4
  %CastInstVec10 = alloca <2 x double>, align 16
  %allocaVec24 = alloca <2 x double>, align 16
  %CastInst11 = alloca double, align 4
  %CastInstVec12 = alloca <2 x double>, align 16
  %allocaVec25 = alloca <4 x float>, align 16
  %CastInst13 = alloca float, align 4
  %CastInstVec14 = alloca <4 x float>, align 16
  %allocaVec26 = alloca <4 x float>, align 16
  %CastInst15 = alloca float, align 4
  %CastInstVec16 = alloca <4 x float>, align 16
  %allocaVec27 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 4
  %allocaVec28 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %allocaVec29 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec30 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec31 = alloca <4 x i32>, align 16
  %9 = alloca i32, align 4
  %allocaVec32 = alloca <4 x i32>, align 16
  %10 = alloca i32, align 4
  %allocaVec33 = alloca <4 x i8>, align 16
  %11 = alloca i8, align 1
  %12 = alloca [100 x i8], align 1
  %13 = alloca %struct._IO_FILE*, align 4
  %14 = alloca [80 x i8], align 1
  %allocaVec34 = alloca <4 x i32>, align 16
  %15 = alloca i32, align 4
  %allocaVec35 = alloca <4 x float>, align 16
  %16 = alloca float, align 4
  store i8* %0, i8** %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  %17 = load i32, i32* @nVbrNumFrames, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %22, label %19

; <label>:19:                                     ; preds = %3
  %20 = load i32*, i32** @pVbrFrames, align 4
  %21 = icmp eq i32* %20, null
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %19, %3
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec27
  store i32 -1, i32* %4, align 4
  br label %205

; <label>:23:                                     ; preds = %19
  %24 = load i8*, i8** %5, align 4
  %25 = call arm_aapcscc %struct._IO_FILE* @fopen(i8* %24, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.339, i32 0, i32 0))
  store %struct._IO_FILE* %25, %struct._IO_FILE** %13, align 4
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 4
  %27 = icmp eq %struct._IO_FILE* %26, null
  br i1 %27, label %28, label %29

; <label>:28:                                     ; preds = %23
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec27
  store i32 -1, i32* %4, align 4
  br label %205

; <label>:29:                                     ; preds = %23
  call void @llvm.memset.p0i8.i32(i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 0), i8 0, i32 216, i32 1, i1 false)
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 4
  %31 = call arm_aapcscc i32 @fseek(%struct._IO_FILE* %30, i32 0, i32 2)
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 4
  %33 = call arm_aapcscc i32 @ftell(%struct._IO_FILE* %32)
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %37

; <label>:36:                                     ; preds = %29
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec27
  store i32 -1, i32* %4, align 4
  br label %205

; <label>:37:                                     ; preds = %29
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 4
  %39 = load i32, i32* @TotalFrameSize, align 4
  %40 = call arm_aapcscc i32 @fseek(%struct._IO_FILE* %38, i32 %39, i32 0)
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 4
  %42 = call arm_aapcscc i32 @fread(i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 0), i32 4, i32 1, %struct._IO_FILE* %41)
  store i8 -1, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 0), align 1
  %43 = load i32, i32* %7, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %58

; <label>:45:                                     ; preds = %37
  store i8 -5, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 1), align 1
  %46 = load i8, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 2), align 1
  %47 = zext i8 %46 to i32
  store i32 %47, i32* %CastInst
  %48 = load i32, i32* %CastInst, align 4
  %insertCast = insertelement <4 x i32> undef, i32 %48, i32 0
  %insertCast36 = insertelement <4 x i32> %insertCast, i32 %48, i32 1
  %insertCast37 = insertelement <4 x i32> %insertCast36, i32 %48, i32 2
  %insertCast38 = insertelement <4 x i32> %insertCast37, i32 %48, i32 3
  store <4 x i32> %insertCast38, <4 x i32>* %CastInstVec, align 4
  %49 = load <4 x i32>, <4 x i32>* %CastInstVec, align 4
  %Vop = and <4 x i32> %49, <i32 12, i32 12, i32 12, i32 12>
  %50 = and i32 %47, 12
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %11, align 1
  %52 = load i8, i8* %11, align 1
  %53 = zext i8 %52 to i32
  store i32 %53, i32* %CastInst3
  %54 = load i32, i32* %CastInst3, align 4
  %insertCast39 = insertelement <4 x i32> undef, i32 %54, i32 0
  %insertCast40 = insertelement <4 x i32> %insertCast39, i32 %54, i32 1
  %insertCast41 = insertelement <4 x i32> %insertCast40, i32 %54, i32 2
  %insertCast42 = insertelement <4 x i32> %insertCast41, i32 %54, i32 3
  store <4 x i32> %insertCast42, <4 x i32>* %CastInstVec4, align 4
  %55 = load <4 x i32>, <4 x i32>* %CastInstVec4, align 4
  %Vop43 = or <4 x i32> <i32 80, i32 80, i32 80, i32 80>, %55
  %56 = or i32 80, %53
  %57 = trunc i32 %56 to i8
  store i8 %57, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 2), align 1
  br label %71

; <label>:58:                                     ; preds = %37
  store i8 -13, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 1), align 1
  %59 = load i8, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 2), align 1
  %60 = zext i8 %59 to i32
  store i32 %60, i32* %CastInst5
  %61 = load i32, i32* %CastInst5, align 4
  %insertCast44 = insertelement <4 x i32> undef, i32 %61, i32 0
  %insertCast45 = insertelement <4 x i32> %insertCast44, i32 %61, i32 1
  %insertCast46 = insertelement <4 x i32> %insertCast45, i32 %61, i32 2
  %insertCast47 = insertelement <4 x i32> %insertCast46, i32 %61, i32 3
  store <4 x i32> %insertCast47, <4 x i32>* %CastInstVec6, align 4
  %62 = load <4 x i32>, <4 x i32>* %CastInstVec6, align 4
  %Vop48 = and <4 x i32> %62, <i32 12, i32 12, i32 12, i32 12>
  %63 = and i32 %60, 12
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %11, align 1
  %65 = load i8, i8* %11, align 1
  %66 = zext i8 %65 to i32
  store i32 %66, i32* %CastInst7
  %67 = load i32, i32* %CastInst7, align 4
  %insertCast49 = insertelement <4 x i32> undef, i32 %67, i32 0
  %insertCast50 = insertelement <4 x i32> %insertCast49, i32 %67, i32 1
  %insertCast51 = insertelement <4 x i32> %insertCast50, i32 %67, i32 2
  %insertCast52 = insertelement <4 x i32> %insertCast51, i32 %67, i32 3
  store <4 x i32> %insertCast52, <4 x i32>* %CastInstVec8, align 4
  %68 = load <4 x i32>, <4 x i32>* %CastInstVec8, align 4
  %Vop53 = or <4 x i32> <i32 128, i32 128, i32 128, i32 128>, %68
  %69 = or i32 128, %66
  %70 = trunc i32 %69 to i8
  store i8 %70, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 2), align 1
  br label %71

; <label>:71:                                     ; preds = %58, %45
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 4
  %73 = call arm_aapcscc i32 @fseek(%struct._IO_FILE* %72, i32 0, i32 0)
  %74 = getelementptr inbounds [100 x i8], [100 x i8]* %12, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* %74, i8 0, i32 100, i32 1, i1 false)
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %allocaVec30
  store i32 1, i32* %8, align 4
  br label %75

; <label>:75:                                     ; preds = %127, %71
  %76 = load i32, i32* %8, align 4
  %77 = icmp slt i32 %76, 100
  br i1 %77, label %78, label %128

; <label>:78:                                     ; preds = %75
  %79 = load i32, i32* %8, align 4
  %80 = sitofp i32 %79 to double
  store double %80, double* %CastInst9
  %81 = load double, double* %CastInst9, align 4
  %insertCast54 = insertelement <2 x double> undef, double %81, i32 0
  %insertCast55 = insertelement <2 x double> %insertCast54, double %81, i32 1
  store <2 x double> %insertCast55, <2 x double>* %CastInstVec10, align 4
  %82 = load <2 x double>, <2 x double>* %CastInstVec10, align 4
  %Vop56 = fmul <2 x double> <double 1.000000e-02, double 1.000000e-02>, %82
  %83 = fmul double 1.000000e-02, %80
  %84 = load i32, i32* @nVbrNumFrames, align 4
  %85 = sitofp i32 %84 to double
  store double %85, double* %CastInst11
  %86 = load double, double* %CastInst11, align 4
  %insertCast57 = insertelement <2 x double> undef, double %86, i32 0
  %insertCast58 = insertelement <2 x double> %insertCast57, double %86, i32 1
  store <2 x double> %insertCast58, <2 x double>* %CastInstVec12, align 4
  %87 = load <2 x double>, <2 x double>* %CastInstVec12, align 4
  %Vop59 = fmul <2 x double> %Vop56, %87
  %88 = fmul double %83, %85
  %89 = call arm_aapcscc double @floor(double %88) #9
  %90 = fptosi double %89 to i32
  store i32 %90, i32* %15, align 4
  %91 = load i32*, i32** @pVbrFrames, align 4
  %92 = load i32, i32* %15, align 4
  %93 = getelementptr inbounds i32, i32* %91, i32 %92
  %94 = load i32, i32* %93, align 4
  %95 = sitofp i32 %94 to float
  store float %95, float* %CastInst13
  %96 = load float, float* %CastInst13, align 4
  %insertCast60 = insertelement <4 x float> undef, float %96, i32 0
  %insertCast61 = insertelement <4 x float> %insertCast60, float %96, i32 1
  %insertCast62 = insertelement <4 x float> %insertCast61, float %96, i32 2
  %insertCast63 = insertelement <4 x float> %insertCast62, float %96, i32 3
  store <4 x float> %insertCast63, <4 x float>* %CastInstVec14, align 4
  %97 = load <4 x float>, <4 x float>* %CastInstVec14, align 4
  %Vop64 = fmul <4 x float> <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>, %97
  %98 = fmul float 2.560000e+02, %95
  %99 = load i32, i32* %9, align 4
  %100 = sitofp i32 %99 to float
  store float %100, float* %CastInst15
  %101 = load float, float* %CastInst15, align 4
  %insertCast65 = insertelement <4 x float> undef, float %101, i32 0
  %insertCast66 = insertelement <4 x float> %insertCast65, float %101, i32 1
  %insertCast67 = insertelement <4 x float> %insertCast66, float %101, i32 2
  %insertCast68 = insertelement <4 x float> %insertCast67, float %101, i32 3
  store <4 x float> %insertCast68, <4 x float>* %CastInstVec16, align 4
  %102 = load <4 x float>, <4 x float>* %CastInstVec16, align 4
  %Vop69 = fdiv <4 x float> %Vop64, %102
  store <4 x float> %Vop69, <4 x float>* %allocaVec35
  %103 = load <4 x float>, <4 x float>* %allocaVec35, align 4
  %extractE = extractelement <4 x float> %103, i64 0
  %extractE70 = extractelement <4 x float> %103, i64 1
  %extractE71 = extractelement <4 x float> %103, i64 2
  %sum = fadd float %extractE, %extractE70
  %sum72 = fadd float %sum, %extractE71
  %104 = fdiv float %98, %100
  %Fmul = fmul float %104, 3.000000e+00
  store float %104, float* %Recovery
  %Fcmp = fcmp une float %sum72, %Fmul
  br i1 %Fcmp, label %105, label %109

; <label>:105:                                    ; preds = %78
  %remThree = fdiv float %sum72, %extractE
  %FcmpThree = fcmp une float %remThree, 3.000000e+00
  br i1 %FcmpThree, label %106, label %107

; <label>:106:                                    ; preds = %105
  store float %104, float* %Recovery, align 4
  br label %108

; <label>:107:                                    ; preds = %105
  store float %extractE, float* %Recovery, align 4
  br label %108

; <label>:108:                                    ; preds = %107, %106
  br label %109

; <label>:109:                                    ; preds = %78, %108
  %ReplaceInst = load float, float* %Recovery, align 4
  store float %ReplaceInst, float* %16, align 4
  %110 = load float, float* %16, align 4
  %111 = fcmp ogt float %110, 2.550000e+02
  br i1 %111, label %112, label %113

; <label>:112:                                    ; preds = %109
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %allocaVec35
  store float 2.550000e+02, float* %16, align 4
  br label %113

; <label>:113:                                    ; preds = %112, %109
  %114 = load float, float* %16, align 4
  %115 = fptoui float %114 to i8
  %116 = load i32, i32* %8, align 4
  %117 = getelementptr inbounds [100 x i8], [100 x i8]* %12, i32 0, i32 %116
  store i8 %115, i8* %117, align 1
  br label %118

; <label>:118:                                    ; preds = %113
  %119 = load i32, i32* %8, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %119, i32 0
  %insertElmt73 = insertelement <4 x i32> %insertElmt, i32 %119, i32 1
  %insertElmt74 = insertelement <4 x i32> %insertElmt73, i32 %119, i32 2
  %insertElmt75 = insertelement <4 x i32> %insertElmt74, i32 %119, i32 3
  store <4 x i32> %insertElmt75, <4 x i32>* %allocaVec30, align 16
  %120 = load <4 x i32>, <4 x i32>* %allocaVec30, align 16
  %Vop76 = add <4 x i32> %120, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop76, <4 x i32>* %allocaVec30
  %121 = load <4 x i32>, <4 x i32>* %allocaVec30, align 4
  %extractE78 = extractelement <4 x i32> %121, i64 0
  %extractE79 = extractelement <4 x i32> %121, i64 1
  %extractE80 = extractelement <4 x i32> %121, i64 2
  %sum81 = add i32 %extractE78, %extractE79
  %sum82 = add i32 %sum81, %extractE80
  %122 = add nsw i32 %119, 1
  %Fmul77 = mul i32 %122, 3
  store i32 %122, i32* %Recovery1
  %Fcmp83 = icmp ne i32 %sum82, %Fmul77
  br i1 %Fcmp83, label %123, label %127

; <label>:123:                                    ; preds = %118
  %remThree105 = sdiv i32 %sum82, %extractE78
  %FcmpThree106 = icmp ne i32 %remThree105, 3
  br i1 %FcmpThree106, label %124, label %125

; <label>:124:                                    ; preds = %123
  store i32 %122, i32* %Recovery1, align 4
  br label %126

; <label>:125:                                    ; preds = %123
  store i32 %extractE78, i32* %Recovery1, align 4
  br label %126

; <label>:126:                                    ; preds = %125, %124
  br label %127

; <label>:127:                                    ; preds = %118, %126
  %ReplaceInst109 = load i32, i32* %Recovery1, align 4
  store i32 %ReplaceInst109, i32* %8, align 4
  br label %75

; <label>:128:                                    ; preds = %75
  %129 = load i32, i32* @nZeroStreamSize, align 4
  store i32 %129, i32* %10, align 4
  %130 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 0), align 1
  %131 = load i32, i32* %10, align 4
  %insertElmt84 = insertelement <4 x i32> undef, i32 %131, i32 0
  %insertElmt85 = insertelement <4 x i32> %insertElmt84, i32 %131, i32 1
  %insertElmt86 = insertelement <4 x i32> %insertElmt85, i32 %131, i32 2
  %insertElmt87 = insertelement <4 x i32> %insertElmt86, i32 %131, i32 3
  store <4 x i32> %insertElmt87, <4 x i32>* %allocaVec32, align 16
  %132 = load <4 x i32>, <4 x i32>* %allocaVec32, align 16
  %Vop88 = add <4 x i32> %132, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop88, <4 x i32>* %allocaVec32
  %133 = add nsw i32 %131, 1
  store i32 %133, i32* %10, align 4
  %134 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %131
  store i8 %130, i8* %134, align 1
  %135 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 1), align 1
  %136 = load i32, i32* %10, align 4
  %137 = load <4 x i32>, <4 x i32>* %allocaVec32, align 16
  %Vop89 = add <4 x i32> %137, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop89, <4 x i32>* %allocaVec32
  %138 = add nsw i32 %136, 1
  store i32 %138, i32* %10, align 4
  %139 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %136
  store i8 %135, i8* %139, align 1
  %140 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 2), align 1
  %141 = load i32, i32* %10, align 4
  %142 = load <4 x i32>, <4 x i32>* %allocaVec32, align 16
  %Vop90 = add <4 x i32> %142, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop90, <4 x i32>* %allocaVec32
  %143 = add nsw i32 %141, 1
  store i32 %143, i32* %10, align 4
  %144 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %141
  store i8 %140, i8* %144, align 1
  %145 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 3), align 1
  %146 = load i32, i32* %10, align 4
  %147 = load <4 x i32>, <4 x i32>* %allocaVec32, align 16
  %Vop91 = add <4 x i32> %147, <i32 1, i32 1, i32 1, i32 1>
  store <4 x i32> %Vop91, <4 x i32>* %allocaVec32
  %148 = add nsw i32 %146, 1
  store i32 %148, i32* %10, align 4
  %149 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %146
  store i8 %145, i8* %149, align 1
  %150 = load i32, i32* %10, align 4
  %151 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %150
  call arm_aapcscc void @CreateI4(i8* %151, i32 15)
  %152 = load i32, i32* %10, align 4
  %153 = load <4 x i32>, <4 x i32>* %allocaVec32, align 16
  %Vop92 = add <4 x i32> %153, <i32 4, i32 4, i32 4, i32 4>
  store <4 x i32> %Vop92, <4 x i32>* %allocaVec32
  %154 = add nsw i32 %152, 4
  store i32 %154, i32* %10, align 4
  %155 = load i32, i32* %10, align 4
  %156 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %155
  %157 = load i32, i32* @nVbrNumFrames, align 4
  call arm_aapcscc void @CreateI4(i8* %156, i32 %157)
  %158 = load i32, i32* %10, align 4
  %159 = load <4 x i32>, <4 x i32>* %allocaVec32, align 16
  %Vop93 = add <4 x i32> %159, <i32 4, i32 4, i32 4, i32 4>
  store <4 x i32> %Vop93, <4 x i32>* %allocaVec32
  %160 = add nsw i32 %158, 4
  store i32 %160, i32* %10, align 4
  %161 = load i32, i32* %10, align 4
  %162 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %161
  %163 = load i32, i32* %9, align 4
  call arm_aapcscc void @CreateI4(i8* %162, i32 %163)
  %164 = load i32, i32* %10, align 4
  %165 = load <4 x i32>, <4 x i32>* %allocaVec32, align 16
  %Vop94 = add <4 x i32> %165, <i32 4, i32 4, i32 4, i32 4>
  store <4 x i32> %Vop94, <4 x i32>* %allocaVec32
  %166 = add nsw i32 %164, 4
  store i32 %166, i32* %10, align 4
  %167 = load i32, i32* %10, align 4
  %168 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %167
  %169 = getelementptr inbounds [100 x i8], [100 x i8]* %12, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %168, i8* %169, i32 100, i32 1, i1 false)
  %170 = load i32, i32* %10, align 4
  %171 = load <4 x i32>, <4 x i32>* %allocaVec32, align 16
  %Vop95 = add <4 x i32> %171, <i32 100, i32 100, i32 100, i32 100>
  store <4 x i32> %Vop95, <4 x i32>* %allocaVec32
  %172 = add i32 %170, 100
  store i32 %172, i32* %10, align 4
  %173 = load i32, i32* %10, align 4
  %174 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %173
  %175 = load i32, i32* %6, align 4
  call arm_aapcscc void @CreateI4(i8* %174, i32 %175)
  %176 = load i32, i32* %10, align 4
  %177 = load <4 x i32>, <4 x i32>* %allocaVec32, align 16
  %Vop96 = add <4 x i32> %177, <i32 4, i32 4, i32 4, i32 4>
  store <4 x i32> %Vop96, <4 x i32>* %allocaVec32
  %178 = add nsw i32 %176, 4
  store i32 %178, i32* %10, align 4
  %179 = getelementptr inbounds [80 x i8], [80 x i8]* %14, i32 0, i32 0
  %180 = call arm_aapcscc i8* @get_lame_version()
  %181 = call arm_aapcscc i32 (i8*, i8*, ...) @sprintf(i8* %179, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3.340, i32 0, i32 0), i8* %180)
  %182 = load i32, i32* %10, align 4
  %183 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %182
  %184 = getelementptr inbounds [80 x i8], [80 x i8]* %14, i32 0, i32 0
  %185 = call arm_aapcscc i8* @strncpy(i8* %183, i8* %184, i32 20)
  %186 = load i32, i32* %10, align 4
  %187 = load <4 x i32>, <4 x i32>* %allocaVec32, align 16
  %Vop97 = add <4 x i32> %187, <i32 20, i32 20, i32 20, i32 20>
  store <4 x i32> %Vop97, <4 x i32>* %allocaVec32
  %188 = load <4 x i32>, <4 x i32>* %allocaVec32, align 4
  %extractE99 = extractelement <4 x i32> %188, i64 0
  %extractE100 = extractelement <4 x i32> %188, i64 1
  %extractE101 = extractelement <4 x i32> %188, i64 2
  %sum102 = add i32 %extractE99, %extractE100
  %sum103 = add i32 %sum102, %extractE101
  %189 = add nsw i32 %186, 20
  %Fmul98 = mul i32 %189, 3
  store i32 %189, i32* %Recovery2
  %Fcmp104 = icmp ne i32 %sum103, %Fmul98
  br i1 %Fcmp104, label %190, label %194

; <label>:190:                                    ; preds = %128
  %remThree107 = sdiv i32 %sum103, %extractE99
  %FcmpThree108 = icmp ne i32 %remThree107, 3
  br i1 %FcmpThree108, label %191, label %192

; <label>:191:                                    ; preds = %190
  store i32 %189, i32* %Recovery2, align 4
  br label %193

; <label>:192:                                    ; preds = %190
  store i32 %extractE99, i32* %Recovery2, align 4
  br label %193

; <label>:193:                                    ; preds = %192, %191
  br label %194

; <label>:194:                                    ; preds = %128, %193
  %ReplaceInst110 = load i32, i32* %Recovery2, align 4
  store i32 %ReplaceInst110, i32* %10, align 4
  %195 = load i32, i32* @TotalFrameSize, align 4
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 4
  %197 = call arm_aapcscc i32 @fwrite(i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 0), i32 %195, i32 1, %struct._IO_FILE* %196)
  %198 = icmp ne i32 %197, 1
  br i1 %198, label %199, label %200

; <label>:199:                                    ; preds = %194
  store <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32>* %allocaVec27
  store i32 -1, i32* %4, align 4
  br label %205

; <label>:200:                                    ; preds = %194
  %201 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 4
  %202 = call arm_aapcscc i32 @fclose(%struct._IO_FILE* %201)
  %203 = load i32*, i32** @pVbrFrames, align 4
  %204 = bitcast i32* %203 to i8*
  call arm_aapcscc void @free(i8* %204)
  store i32* null, i32** @pVbrFrames, align 4
  store <4 x i32> zeroinitializer, <4 x i32>* %allocaVec27
  store i32 0, i32* %4, align 4
  br label %205

; <label>:205:                                    ; preds = %200, %199, %36, %28, %22
  %206 = load i32, i32* %4, align 4
  ret i32 %206
}

declare arm_aapcscc i32 @ftell(%struct._IO_FILE*) #3

declare arm_aapcscc i32 @fread(i8*, i32, i32, %struct._IO_FILE*) #3

declare arm_aapcscc i32 @sprintf(i8*, i8*, ...) #3

; Function Attrs: nounwind
define arm_aapcscc i32 @SeekPoint(i8*, i32, float) #0 {
  %allocaVec = alloca <4 x float>, align 16
  %CastInst = alloca float, align 4
  %CastInstVec = alloca <4 x float>, align 16
  %allocaVec3 = alloca <4 x float>, align 16
  %CastInst1 = alloca float, align 4
  %CastInstVec2 = alloca <4 x float>, align 16
  %4 = alloca i8*, align 4
  %allocaVec4 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  %allocaVec5 = alloca <4 x float>, align 16
  %6 = alloca float, align 4
  %allocaVec6 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %allocaVec7 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  %allocaVec8 = alloca <4 x float>, align 16
  %9 = alloca float, align 4
  %allocaVec9 = alloca <4 x float>, align 16
  %10 = alloca float, align 4
  %allocaVec10 = alloca <4 x float>, align 16
  %11 = alloca float, align 4
  store i8* %0, i8** %4, align 4
  store i32 %1, i32* %5, align 4
  store float %2, float* %6, align 4
  %12 = load float, float* %6, align 4
  %13 = fcmp olt float %12, 0.000000e+00
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %3
  store <4 x float> zeroinitializer, <4 x float>* %allocaVec5
  store float 0.000000e+00, float* %6, align 4
  br label %15

; <label>:15:                                     ; preds = %14, %3
  %16 = load float, float* %6, align 4
  %17 = fcmp ogt float %16, 1.000000e+02
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %15
  store <4 x float> <float 1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>, <4 x float>* %allocaVec5
  store float 1.000000e+02, float* %6, align 4
  br label %19

; <label>:19:                                     ; preds = %18, %15
  %20 = load float, float* %6, align 4
  %21 = fptosi float %20 to i32
  store i32 %21, i32* %7, align 4
  %22 = load i32, i32* %7, align 4
  %23 = icmp sgt i32 %22, 99
  br i1 %23, label %24, label %25

; <label>:24:                                     ; preds = %19
  store <4 x i32> <i32 99, i32 99, i32 99, i32 99>, <4 x i32>* %allocaVec6
  store i32 99, i32* %7, align 4
  br label %25

; <label>:25:                                     ; preds = %24, %19
  %26 = load i8*, i8** %4, align 4
  %27 = load i32, i32* %7, align 4
  %28 = getelementptr inbounds i8, i8* %26, i32 %27
  %29 = load i8, i8* %28, align 1
  %30 = uitofp i8 %29 to float
  store float %30, float* %9, align 4
  %31 = load i32, i32* %7, align 4
  %32 = icmp slt i32 %31, 99
  br i1 %32, label %33, label %41

; <label>:33:                                     ; preds = %25
  %34 = load i8*, i8** %4, align 4
  %35 = load i32, i32* %7, align 4
  %insertElmt = insertelement <4 x i32> undef, i32 %35, i32 0
  %insertElmt11 = insertelement <4 x i32> %insertElmt, i32 %35, i32 1
  %insertElmt12 = insertelement <4 x i32> %insertElmt11, i32 %35, i32 2
  %insertElmt13 = insertelement <4 x i32> %insertElmt12, i32 %35, i32 3
  store <4 x i32> %insertElmt13, <4 x i32>* %allocaVec6, align 16
  %36 = load <4 x i32>, <4 x i32>* %allocaVec6, align 16
  %Vop = add <4 x i32> %36, <i32 1, i32 1, i32 1, i32 1>
  %37 = add nsw i32 %35, 1
  %38 = getelementptr inbounds i8, i8* %34, i32 %37
  %39 = load i8, i8* %38, align 1
  %40 = uitofp i8 %39 to float
  store float %40, float* %10, align 4
  br label %42

; <label>:41:                                     ; preds = %25
  store <4 x float> <float 2.560000e+02, float 2.560000e+02, float 2.560000e+02, float 2.560000e+02>, <4 x float>* %allocaVec9
  store float 2.560000e+02, float* %10, align 4
  br label %42

; <label>:42:                                     ; preds = %41, %33
  %43 = load float, float* %9, align 4
  %insertElmt14 = insertelement <4 x float> undef, float %43, i32 0
  %insertElmt15 = insertelement <4 x float> %insertElmt14, float %43, i32 1
  %insertElmt16 = insertelement <4 x float> %insertElmt15, float %43, i32 2
  %insertElmt17 = insertelement <4 x float> %insertElmt16, float %43, i32 3
  store <4 x float> %insertElmt17, <4 x float>* %allocaVec8, align 16
  %44 = load float, float* %10, align 4
  %insertElmt18 = insertelement <4 x float> undef, float %44, i32 0
  %insertElmt19 = insertelement <4 x float> %insertElmt18, float %44, i32 1
  %insertElmt20 = insertelement <4 x float> %insertElmt19, float %44, i32 2
  %insertElmt21 = insertelement <4 x float> %insertElmt20, float %44, i32 3
  store <4 x float> %insertElmt21, <4 x float>* %allocaVec9, align 16
  %45 = load float, float* %9, align 4
  %insertElmt22 = insertelement <4 x float> undef, float %45, i32 0
  %insertElmt23 = insertelement <4 x float> %insertElmt22, float %45, i32 1
  %insertElmt24 = insertelement <4 x float> %insertElmt23, float %45, i32 2
  %insertElmt25 = insertelement <4 x float> %insertElmt24, float %45, i32 3
  store <4 x float> %insertElmt25, <4 x float>* %allocaVec8, align 16
  %46 = load <4 x float>, <4 x float>* %allocaVec9, align 16
  %47 = load <4 x float>, <4 x float>* %allocaVec8, align 16
  %Vop26 = fsub <4 x float> %46, %47
  %48 = fsub float %44, %45
  %49 = load float, float* %6, align 4
  %insertElmt27 = insertelement <4 x float> undef, float %49, i32 0
  %insertElmt28 = insertelement <4 x float> %insertElmt27, float %49, i32 1
  %insertElmt29 = insertelement <4 x float> %insertElmt28, float %49, i32 2
  %insertElmt30 = insertelement <4 x float> %insertElmt29, float %49, i32 3
  store <4 x float> %insertElmt30, <4 x float>* %allocaVec5, align 16
  %50 = load i32, i32* %7, align 4
  %51 = sitofp i32 %50 to float
  %52 = load <4 x float>, <4 x float>* %allocaVec5, align 16
  store float %51, float* %CastInst
  %53 = load float, float* %CastInst, align 4
  %insertCast = insertelement <4 x float> undef, float %53, i32 0
  %insertCast31 = insertelement <4 x float> %insertCast, float %53, i32 1
  %insertCast32 = insertelement <4 x float> %insertCast31, float %53, i32 2
  %insertCast33 = insertelement <4 x float> %insertCast32, float %53, i32 3
  store <4 x float> %insertCast33, <4 x float>* %CastInstVec, align 4
  %54 = load <4 x float>, <4 x float>* %CastInstVec, align 4
  %Vop34 = fsub <4 x float> %52, %54
  %55 = fsub float %49, %51
  %Vop35 = fmul <4 x float> %Vop26, %Vop34
  %56 = fmul float %48, %55
  %57 = load <4 x float>, <4 x float>* %allocaVec8, align 16
  %Vop36 = fadd <4 x float> %57, %Vop35
  store <4 x float> %Vop36, <4 x float>* %allocaVec10
  %58 = fadd float %43, %56
  store float %58, float* %11, align 4
  %59 = load float, float* %11, align 4
  %60 = load <4 x float>, <4 x float>* %allocaVec10, align 16
  %Vop37 = fmul <4 x float> <float 3.906250e-03, float 3.906250e-03, float 3.906250e-03, float 3.906250e-03>, %60
  %61 = fmul float 3.906250e-03, %59
  %62 = load i32, i32* %5, align 4
  %63 = sitofp i32 %62 to float
  store float %63, float* %CastInst1
  %64 = load float, float* %CastInst1, align 4
  %insertCast38 = insertelement <4 x float> undef, float %64, i32 0
  %insertCast39 = insertelement <4 x float> %insertCast38, float %64, i32 1
  %insertCast40 = insertelement <4 x float> %insertCast39, float %64, i32 2
  %insertCast41 = insertelement <4 x float> %insertCast40, float %64, i32 3
  store <4 x float> %insertCast41, <4 x float>* %CastInstVec2, align 4
  %65 = load <4 x float>, <4 x float>* %CastInstVec2, align 4
  %Vop42 = fmul <4 x float> %Vop37, %65
  %66 = fmul float %61, %63
  %67 = fptosi float %66 to i32
  store i32 %67, i32* %8, align 4
  %68 = load i32, i32* %8, align 4
  ret i32 %68
}

; Function Attrs: nounwind
define arm_aapcscc void @lame_print_version(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %4 = call arm_aapcscc i8* @get_lame_version()
  %5 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.345, i32 0, i32 0), i8* %4)
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %7 = call arm_aapcscc i8* @get_psy_version()
  %8 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1.346, i32 0, i32 0), i8* %7)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i8* @get_lame_version() #0 {
  %1 = call arm_aapcscc i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2.347, i32 0, i32 0), i32 3, i32 70)
  ret i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i32 0, i32 0)
}

; Function Attrs: nounwind
define arm_aapcscc i8* @get_psy_version() #0 {
  %1 = call arm_aapcscc i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2.347, i32 0, i32 0), i32 0, i32 77)
  ret i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i32 0, i32 0)
}

; Function Attrs: nounwind
define arm_aapcscc i8* @get_mp3x_version() #0 {
  %1 = call arm_aapcscc i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.348, i32 0, i32 0), i32 0, i32 82)
  ret i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i32 0, i32 0)
}

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3,-crypto,-d16,-fp-armv8,-fp-only-sp,-fp16,-vfp4" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3,-crypto,-d16,-fp-armv8,-fp-only-sp,-fp16,-vfp4" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3,-crypto,-d16,-fp-armv8,-fp-only-sp,-fp16,-vfp4" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3,-crypto,-d16,-fp-armv8,-fp-only-sp,-fp16,-vfp4" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3,-crypto,-d16,-fp-armv8,-fp-only-sp,-fp16,-vfp4" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3,-crypto,-d16,-fp-armv8,-fp-only-sp,-fp16,-vfp4" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn }
attributes #9 = { nounwind readnone }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2}

!0 = !{!"clang version 4.0.0 (trunk)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 1, !"min_enum_size", i32 4}

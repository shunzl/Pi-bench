; ModuleID = 'all.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64"
target triple = "armv7-ellcc-linux"

%struct.side_info_link = type { %struct.side_info_link*, %struct.MYSideInfo }
%struct.MYSideInfo = type { i32, i32, i32, i32, %struct.BF_PartHolder*, %struct.BF_PartHolder*, [2 x %struct.BF_PartHolder*], [2 x [2 x %struct.BF_PartHolder*]] }
%struct.BF_PartHolder = type { i32, %struct.BF_BitstreamPart* }
%struct.BF_BitstreamPart = type { i32, %struct.BF_BitstreamElement* }
%struct.BF_BitstreamElement = type { i32, i16 }
%struct._IO_FILE = type opaque
%struct.ID3TAGDATA = type { i32, i32, [31 x i8], [31 x i8], [31 x i8], [5 x i8], [31 x i8], [128 x i8], [1 x i8], i8 }
%struct.BF_FrameData = type { i32, i32, i32, %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart*, [2 x %struct.BF_BitstreamPart*], [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]], %struct.BF_BitstreamPart* }
%struct.BF_FrameResults = type { i32, i32, i32 }
%struct.bit_stream_struc = type { i8*, i32, %struct._IO_FILE*, i8*, i32, i32, i32, i32 }
%struct.III_side_info_t = type { i32, i32, i32, [2 x [4 x i32]], [2 x %struct.anon] }
%struct.anon = type { [2 x %struct.gr_info_ss] }
%struct.gr_info_ss = type { %struct.gr_info }
%struct.gr_info = type { i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, [4 x i32] }
%struct.III_psy_xmin = type { [22 x double], [13 x [3 x double]] }
%struct.scalefac_struct = type { [23 x i32], [14 x i32] }
%struct.huffcodetab = type { i32, i32, i32*, i8* }
%struct.anon.55 = type { i32, i32 }
%struct.lame_global_flags = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.III_scalefac_t = type { [22 x i32], [13 x [3 x i32]] }
%struct.III_psy_ratio = type { %struct.III_psy_xmin, %struct.III_psy_xmin }
%struct.rtpheader = type { %struct.rtpbits, i32, i32, i32 }
%struct.rtpbits = type { i32 }
%struct.sockaddr_in = type { i16, i16, %struct.rtpbits, [8 x i8] }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.ts_times = type { float, float, float, float }
%struct.VBRTAGDATA = type { i32, i32, i32, i32, i32, i32, [100 x i8] }

@rv_tbl = internal constant [128 x i16] [i16 0, i16 128, i16 64, i16 192, i16 32, i16 160, i16 96, i16 224, i16 16, i16 144, i16 80, i16 208, i16 48, i16 176, i16 112, i16 240, i16 8, i16 136, i16 72, i16 200, i16 40, i16 168, i16 104, i16 232, i16 24, i16 152, i16 88, i16 216, i16 56, i16 184, i16 120, i16 248, i16 4, i16 132, i16 68, i16 196, i16 36, i16 164, i16 100, i16 228, i16 20, i16 148, i16 84, i16 212, i16 52, i16 180, i16 116, i16 244, i16 12, i16 140, i16 76, i16 204, i16 44, i16 172, i16 108, i16 236, i16 28, i16 156, i16 92, i16 220, i16 60, i16 188, i16 124, i16 252, i16 2, i16 130, i16 66, i16 194, i16 34, i16 162, i16 98, i16 226, i16 18, i16 146, i16 82, i16 210, i16 50, i16 178, i16 114, i16 242, i16 10, i16 138, i16 74, i16 202, i16 42, i16 170, i16 106, i16 234, i16 26, i16 154, i16 90, i16 218, i16 58, i16 186, i16 122, i16 250, i16 6, i16 134, i16 70, i16 198, i16 38, i16 166, i16 102, i16 230, i16 22, i16 150, i16 86, i16 214, i16 54, i16 182, i16 118, i16 246, i16 14, i16 142, i16 78, i16 206, i16 46, i16 174, i16 110, i16 238, i16 30, i16 158, i16 94, i16 222, i16 62, i16 190, i16 126, i16 254], align 2
@window_s = internal global [128 x float] zeroinitializer, align 4
@costab = internal global [8 x float] zeroinitializer, align 4
@window = internal global [512 x float] zeroinitializer, align 4
@BitCount = internal global i32 0, align 4
@ThisFrameSize = internal global i32 0, align 4
@BitsRemaining = internal global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c"frameInfo->nGranules <= MAX_GRANULES\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"formatBitstream.c\00", align 1
@__func__.BF_BitstreamFrame = private unnamed_addr constant [18 x i8] c"BF_BitstreamFrame\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"frameInfo->nChannels <= MAX_CHANNELS\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"(BitsRemaining % 8) == 0\00", align 1
@forwardFrameLength = internal global i32 0, align 4
@forwardSILength = internal global i32 0, align 4
@elements = internal global i32 0, align 4
@side_queue_head = internal global %struct.side_info_link* null, align 4
@.str.7 = private unnamed_addr constant [8 x i8] c"results\00", align 1
@__func__.writePartMainData = private unnamed_addr constant [18 x i8] c"writePartMainData\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"part\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"nbits <= 32\00", align 1
@__func__.WriteMainDataBits = private unnamed_addr constant [18 x i8] c"WriteMainDataBits\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"BitCount <= ThisFrameSize\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"BitsRemaining >= 0\00", align 1
@.str.12 = private unnamed_addr constant [44 x i8] c"(BitCount + BitsRemaining) == ThisFrameSize\00", align 1
@side_queue_free = internal global %struct.side_info_link* null, align 4
@.str.13 = private unnamed_addr constant [2 x i8] c"l\00", align 1
@__func__.get_side_info = private unnamed_addr constant [14 x i8] c"get_side_info\00", align 1
@__func__.writePartSideInfo = private unnamed_addr constant [18 x i8] c"writePartSideInfo\00", align 1
@stderr = external constant %struct._IO_FILE*, align 4
@.str.14 = private unnamed_addr constant [31 x i8] c"cannot allocate side_info_link\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"newPH\00", align 1
@__func__.BF_newPartHolder = private unnamed_addr constant [17 x i8] c"BF_newPartHolder\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"newPH->part\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"newPH->part->element\00", align 1
@genre_last = global i32 147, align 4
@genre_list = global [148 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.1, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.3, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6.4, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.6, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.7, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10.8, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11.9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12.10, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13.11, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.80, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.82, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.83, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.85, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.90, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.91, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.92, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.93, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.94, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.102, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.103, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.104, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.106, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.108, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.110, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.114, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.116, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.120, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.122, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.124, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.128, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.131, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.133, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.134, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.135, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.138, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.140, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.141, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.142, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.144, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.146, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.148, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.149, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.150, i32 0, i32 0)], align 4
@.str.3.1 = private unnamed_addr constant [6 x i8] c"Blues\00", align 1
@.str.4.2 = private unnamed_addr constant [13 x i8] c"Classic Rock\00", align 1
@.str.5.3 = private unnamed_addr constant [8 x i8] c"Country\00", align 1
@.str.6.4 = private unnamed_addr constant [6 x i8] c"Dance\00", align 1
@.str.7.5 = private unnamed_addr constant [6 x i8] c"Disco\00", align 1
@.str.8.6 = private unnamed_addr constant [5 x i8] c"Funk\00", align 1
@.str.9.7 = private unnamed_addr constant [7 x i8] c"Grunge\00", align 1
@.str.10.8 = private unnamed_addr constant [8 x i8] c"Hip-Hop\00", align 1
@.str.11.9 = private unnamed_addr constant [5 x i8] c"Jazz\00", align 1
@.str.12.10 = private unnamed_addr constant [6 x i8] c"Metal\00", align 1
@.str.13.11 = private unnamed_addr constant [8 x i8] c"New Age\00", align 1
@.str.14.12 = private unnamed_addr constant [7 x i8] c"Oldies\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"Other\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"Pop\00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"R&B\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"Rap\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"Reggae\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"Rock\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"Techno\00", align 1
@.str.22 = private unnamed_addr constant [11 x i8] c"Industrial\00", align 1
@.str.23 = private unnamed_addr constant [12 x i8] c"Alternative\00", align 1
@.str.24 = private unnamed_addr constant [4 x i8] c"Ska\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"Death Metal\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"Pranks\00", align 1
@.str.27 = private unnamed_addr constant [11 x i8] c"Soundtrack\00", align 1
@.str.28 = private unnamed_addr constant [12 x i8] c"Euro-Techno\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"Ambient\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"Trip-Hop\00", align 1
@.str.31 = private unnamed_addr constant [6 x i8] c"Vocal\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"Jazz+Funk\00", align 1
@.str.33 = private unnamed_addr constant [7 x i8] c"Fusion\00", align 1
@.str.34 = private unnamed_addr constant [7 x i8] c"Trance\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"Classical\00", align 1
@.str.36 = private unnamed_addr constant [13 x i8] c"Instrumental\00", align 1
@.str.37 = private unnamed_addr constant [5 x i8] c"Acid\00", align 1
@.str.38 = private unnamed_addr constant [6 x i8] c"House\00", align 1
@.str.39 = private unnamed_addr constant [5 x i8] c"Game\00", align 1
@.str.40 = private unnamed_addr constant [11 x i8] c"Sound Clip\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"Gospel\00", align 1
@.str.42 = private unnamed_addr constant [6 x i8] c"Noise\00", align 1
@.str.43 = private unnamed_addr constant [11 x i8] c"AlternRock\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"Bass\00", align 1
@.str.45 = private unnamed_addr constant [5 x i8] c"Soul\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"Punk\00", align 1
@.str.47 = private unnamed_addr constant [6 x i8] c"Space\00", align 1
@.str.48 = private unnamed_addr constant [11 x i8] c"Meditative\00", align 1
@.str.49 = private unnamed_addr constant [17 x i8] c"Instrumental Pop\00", align 1
@.str.50 = private unnamed_addr constant [18 x i8] c"Instrumental Rock\00", align 1
@.str.51 = private unnamed_addr constant [7 x i8] c"Ethnic\00", align 1
@.str.52 = private unnamed_addr constant [7 x i8] c"Gothic\00", align 1
@.str.53 = private unnamed_addr constant [9 x i8] c"Darkwave\00", align 1
@.str.54 = private unnamed_addr constant [18 x i8] c"Techno-Industrial\00", align 1
@.str.55 = private unnamed_addr constant [11 x i8] c"Electronic\00", align 1
@.str.56 = private unnamed_addr constant [9 x i8] c"Pop-Folk\00", align 1
@.str.57 = private unnamed_addr constant [10 x i8] c"Eurodance\00", align 1
@.str.58 = private unnamed_addr constant [6 x i8] c"Dream\00", align 1
@.str.59 = private unnamed_addr constant [14 x i8] c"Southern Rock\00", align 1
@.str.60 = private unnamed_addr constant [7 x i8] c"Comedy\00", align 1
@.str.61 = private unnamed_addr constant [5 x i8] c"Cult\00", align 1
@.str.62 = private unnamed_addr constant [8 x i8] c"Gangsta\00", align 1
@.str.63 = private unnamed_addr constant [7 x i8] c"Top 40\00", align 1
@.str.64 = private unnamed_addr constant [14 x i8] c"Christian Rap\00", align 1
@.str.65 = private unnamed_addr constant [9 x i8] c"Pop/Funk\00", align 1
@.str.66 = private unnamed_addr constant [7 x i8] c"Jungle\00", align 1
@.str.67 = private unnamed_addr constant [16 x i8] c"Native American\00", align 1
@.str.68 = private unnamed_addr constant [8 x i8] c"Cabaret\00", align 1
@.str.69 = private unnamed_addr constant [9 x i8] c"New Wave\00", align 1
@.str.70 = private unnamed_addr constant [12 x i8] c"Psychadelic\00", align 1
@.str.71 = private unnamed_addr constant [5 x i8] c"Rave\00", align 1
@.str.72 = private unnamed_addr constant [10 x i8] c"Showtunes\00", align 1
@.str.73 = private unnamed_addr constant [8 x i8] c"Trailer\00", align 1
@.str.74 = private unnamed_addr constant [6 x i8] c"Lo-Fi\00", align 1
@.str.75 = private unnamed_addr constant [7 x i8] c"Tribal\00", align 1
@.str.76 = private unnamed_addr constant [10 x i8] c"Acid Punk\00", align 1
@.str.77 = private unnamed_addr constant [10 x i8] c"Acid Jazz\00", align 1
@.str.78 = private unnamed_addr constant [6 x i8] c"Polka\00", align 1
@.str.79 = private unnamed_addr constant [6 x i8] c"Retro\00", align 1
@.str.80 = private unnamed_addr constant [8 x i8] c"Musical\00", align 1
@.str.81 = private unnamed_addr constant [12 x i8] c"Rock & Roll\00", align 1
@.str.82 = private unnamed_addr constant [10 x i8] c"Hard Rock\00", align 1
@.str.83 = private unnamed_addr constant [5 x i8] c"Folk\00", align 1
@.str.84 = private unnamed_addr constant [10 x i8] c"Folk/Rock\00", align 1
@.str.85 = private unnamed_addr constant [14 x i8] c"National Folk\00", align 1
@.str.86 = private unnamed_addr constant [6 x i8] c"Swing\00", align 1
@.str.87 = private unnamed_addr constant [12 x i8] c"Fast-Fusion\00", align 1
@.str.88 = private unnamed_addr constant [6 x i8] c"Bebob\00", align 1
@.str.89 = private unnamed_addr constant [6 x i8] c"Latin\00", align 1
@.str.90 = private unnamed_addr constant [8 x i8] c"Revival\00", align 1
@.str.91 = private unnamed_addr constant [7 x i8] c"Celtic\00", align 1
@.str.92 = private unnamed_addr constant [10 x i8] c"Bluegrass\00", align 1
@.str.93 = private unnamed_addr constant [11 x i8] c"Avantgarde\00", align 1
@.str.94 = private unnamed_addr constant [12 x i8] c"Gothic Rock\00", align 1
@.str.95 = private unnamed_addr constant [17 x i8] c"Progressive Rock\00", align 1
@.str.96 = private unnamed_addr constant [17 x i8] c"Psychedelic Rock\00", align 1
@.str.97 = private unnamed_addr constant [15 x i8] c"Symphonic Rock\00", align 1
@.str.98 = private unnamed_addr constant [10 x i8] c"Slow Rock\00", align 1
@.str.99 = private unnamed_addr constant [9 x i8] c"Big Band\00", align 1
@.str.100 = private unnamed_addr constant [7 x i8] c"Chorus\00", align 1
@.str.101 = private unnamed_addr constant [15 x i8] c"Easy Listening\00", align 1
@.str.102 = private unnamed_addr constant [9 x i8] c"Acoustic\00", align 1
@.str.103 = private unnamed_addr constant [7 x i8] c"Humour\00", align 1
@.str.104 = private unnamed_addr constant [7 x i8] c"Speech\00", align 1
@.str.105 = private unnamed_addr constant [8 x i8] c"Chanson\00", align 1
@.str.106 = private unnamed_addr constant [6 x i8] c"Opera\00", align 1
@.str.107 = private unnamed_addr constant [14 x i8] c"Chamber Music\00", align 1
@.str.108 = private unnamed_addr constant [7 x i8] c"Sonata\00", align 1
@.str.109 = private unnamed_addr constant [9 x i8] c"Symphony\00", align 1
@.str.110 = private unnamed_addr constant [11 x i8] c"Booty Bass\00", align 1
@.str.111 = private unnamed_addr constant [7 x i8] c"Primus\00", align 1
@.str.112 = private unnamed_addr constant [12 x i8] c"Porn Groove\00", align 1
@.str.113 = private unnamed_addr constant [7 x i8] c"Satire\00", align 1
@.str.114 = private unnamed_addr constant [9 x i8] c"Slow Jam\00", align 1
@.str.115 = private unnamed_addr constant [5 x i8] c"Club\00", align 1
@.str.116 = private unnamed_addr constant [6 x i8] c"Tango\00", align 1
@.str.117 = private unnamed_addr constant [6 x i8] c"Samba\00", align 1
@.str.118 = private unnamed_addr constant [9 x i8] c"Folklore\00", align 1
@.str.119 = private unnamed_addr constant [7 x i8] c"Ballad\00", align 1
@.str.120 = private unnamed_addr constant [13 x i8] c"Power Ballad\00", align 1
@.str.121 = private unnamed_addr constant [14 x i8] c"Rhythmic Soul\00", align 1
@.str.122 = private unnamed_addr constant [10 x i8] c"Freestyle\00", align 1
@.str.123 = private unnamed_addr constant [5 x i8] c"Duet\00", align 1
@.str.124 = private unnamed_addr constant [10 x i8] c"Punk Rock\00", align 1
@.str.125 = private unnamed_addr constant [10 x i8] c"Drum Solo\00", align 1
@.str.126 = private unnamed_addr constant [10 x i8] c"A capella\00", align 1
@.str.127 = private unnamed_addr constant [11 x i8] c"Euro-House\00", align 1
@.str.128 = private unnamed_addr constant [11 x i8] c"Dance Hall\00", align 1
@.str.129 = private unnamed_addr constant [4 x i8] c"Goa\00", align 1
@.str.130 = private unnamed_addr constant [12 x i8] c"Drum & Bass\00", align 1
@.str.131 = private unnamed_addr constant [11 x i8] c"Club House\00", align 1
@.str.132 = private unnamed_addr constant [9 x i8] c"Hardcore\00", align 1
@.str.133 = private unnamed_addr constant [7 x i8] c"Terror\00", align 1
@.str.134 = private unnamed_addr constant [6 x i8] c"Indie\00", align 1
@.str.135 = private unnamed_addr constant [8 x i8] c"BritPop\00", align 1
@.str.136 = private unnamed_addr constant [10 x i8] c"NegerPunk\00", align 1
@.str.137 = private unnamed_addr constant [11 x i8] c"Polsk Punk\00", align 1
@.str.138 = private unnamed_addr constant [5 x i8] c"Beat\00", align 1
@.str.139 = private unnamed_addr constant [18 x i8] c"Christian Gangsta\00", align 1
@.str.140 = private unnamed_addr constant [12 x i8] c"Heavy Metal\00", align 1
@.str.141 = private unnamed_addr constant [12 x i8] c"Black Metal\00", align 1
@.str.142 = private unnamed_addr constant [10 x i8] c"Crossover\00", align 1
@.str.143 = private unnamed_addr constant [15 x i8] c"Contemporary C\00", align 1
@.str.144 = private unnamed_addr constant [15 x i8] c"Christian Rock\00", align 1
@.str.145 = private unnamed_addr constant [9 x i8] c"Merengue\00", align 1
@.str.146 = private unnamed_addr constant [6 x i8] c"Salsa\00", align 1
@.str.147 = private unnamed_addr constant [13 x i8] c"Thrash Metal\00", align 1
@.str.148 = private unnamed_addr constant [6 x i8] c"Anime\00", align 1
@.str.149 = private unnamed_addr constant [5 x i8] c"JPop\00", align 1
@.str.150 = private unnamed_addr constant [9 x i8] c"SynthPop\00", align 1
@id3tag = common global %struct.ID3TAGDATA zeroinitializer, align 4
@.str.151 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.152 = private unnamed_addr constant [4 x i8] c"TAG\00", align 1
@.str.2.153 = private unnamed_addr constant [4 x i8] c"rb+\00", align 1
@frameData = global %struct.BF_FrameData* null, align 4
@frameResults = global %struct.BF_FrameResults* null, align 4
@PartHoldersInitialized = global i32 0, align 4
@headerPH = common global %struct.BF_PartHolder* null, align 4
@frameSIPH = common global %struct.BF_PartHolder* null, align 4
@channelSIPH = common global [2 x %struct.BF_PartHolder*] zeroinitializer, align 4
@spectrumSIPH = common global [2 x [2 x %struct.BF_PartHolder*]] zeroinitializer, align 4
@scaleFactorsPH = common global [2 x [2 x %struct.BF_PartHolder*]] zeroinitializer, align 4
@codedDataPH = common global [2 x [2 x %struct.BF_PartHolder*]] zeroinitializer, align 4
@userSpectrumPH = common global [2 x [2 x %struct.BF_PartHolder*]] zeroinitializer, align 4
@userFrameDataPH = common global %struct.BF_PartHolder* null, align 4
@bs = internal global %struct.bit_stream_struc* null, align 4
@.str.156 = private unnamed_addr constant [10 x i8] c"frameData\00", align 1
@.str.1.157 = private unnamed_addr constant [14 x i8] c"l3bitstream.c\00", align 1
@__func__.III_format_bitstream = private unnamed_addr constant [21 x i8] c"III_format_bitstream\00", align 1
@.str.2.158 = private unnamed_addr constant [13 x i8] c"frameResults\00", align 1
@slen1_tab = internal global [16 x i32] [i32 0, i32 0, i32 0, i32 0, i32 3, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 4, i32 4], align 4
@slen2_tab = internal global [16 x i32] [i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 2, i32 3], align 4
@.str.7.159 = private unnamed_addr constant [24 x i8] c"gi->sfb_partition_table\00", align 1
@__func__.encodeMainData = private unnamed_addr constant [15 x i8] c"encodeMainData\00", align 1
@.str.8.160 = private unnamed_addr constant [16 x i8] c"tableindex < 32\00", align 1
@__func__.Huffmancodebits = private unnamed_addr constant [16 x i8] c"Huffmancodebits\00", align 1
@.str.9.161 = private unnamed_addr constant [20 x i8] c"scalefac_index < 23\00", align 1
@.str.10.162 = private unnamed_addr constant [29 x i8] c"(gi->count1table_select < 2)\00", align 1
@.str.11.163 = private unnamed_addr constant [17 x i8] c"count1End <= 576\00", align 1
@.str.12.164 = private unnamed_addr constant [35 x i8] c"opps - adding stuffing bits = %i.\0A\00", align 1
@.str.13.165 = private unnamed_addr constant [27 x i8] c"this should not happen...\0A\00", align 1
@.str.14.166 = private unnamed_addr constant [60 x i8] c"bitsWritten == (int)(gi->part2_3_length - gi->part2_length)\00", align 1
@.str.3.167 = private unnamed_addr constant [22 x i8] c"linbitsx <= h->linmax\00", align 1
@__func__.HuffmanCode = private unnamed_addr constant [12 x i8] c"HuffmanCode\00", align 1
@.str.4.168 = private unnamed_addr constant [22 x i8] c"linbitsy <= h->linmax\00", align 1
@.str.5.169 = private unnamed_addr constant [13 x i8] c"*cbits <= 32\00", align 1
@.str.6.170 = private unnamed_addr constant [13 x i8] c"*xbits <= 32\00", align 1
@crc = internal global i32 0, align 4
@.str.15.171 = private unnamed_addr constant [28 x i8] c"gi->block_type == NORM_TYPE\00", align 1
@__func__.encodeSideInfo = private unnamed_addr constant [15 x i8] c"encodeSideInfo\00", align 1
@bs.172 = internal global %struct.bit_stream_struc zeroinitializer, align 4
@l3_side = internal global %struct.III_side_info_t zeroinitializer, align 4
@.str.173 = private unnamed_addr constant [65 x i8] c"Warning: highpass filter disabled.  highpass frequency to small\0A\00", align 1
@.str.5.174 = private unnamed_addr constant [68 x i8] c"Autoconverting from stereo to mono. Setting encoding to mono mode.\0A\00", align 1
@.str.6.175 = private unnamed_addr constant [40 x i8] c"Resampling:  input=%ikHz  output=%ikHz\0A\00", align 1
@.str.7.176 = private unnamed_addr constant [70 x i8] c"Using polyphase highpass filter, transition band: %.0f Hz -  %.0f Hz\0A\00", align 1
@.str.8.177 = private unnamed_addr constant [70 x i8] c"Using polyphase lowpass filter,  transition band:  %.0f Hz - %.0f Hz\0A\00", align 1
@.str.9.178 = private unnamed_addr constant [15 x i8] c"Analyzing %s \0A\00", align 1
@.str.11.179 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.12.180 = private unnamed_addr constant [6 x i8] c"stdin\00", align 1
@.str.13.181 = private unnamed_addr constant [7 x i8] c"stdout\00", align 1
@.str.10.182 = private unnamed_addr constant [19 x i8] c"Encoding %s to %s\0A\00", align 1
@lame_print_config.mode_names = internal global [4 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.185, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2.186, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.187, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4.188, i32 0, i32 0)], align 4
@.str.14.183 = private unnamed_addr constant [59 x i8] c"Encoding as %.1fkHz VBR(q=%i) %s MPEG%i LayerIII  qval=%i\0A\00", align 1
@.str.15.184 = private unnamed_addr constant [67 x i8] c"Encoding as %.1f kHz %d kbps %s MPEG%i LayerIII (%4.1fx)  qval=%i\0A\00", align 1
@.str.1.185 = private unnamed_addr constant [7 x i8] c"stereo\00", align 1
@.str.2.186 = private unnamed_addr constant [9 x i8] c"j-stereo\00", align 1
@.str.3.187 = private unnamed_addr constant [8 x i8] c"dual-ch\00", align 1
@.str.4.188 = private unnamed_addr constant [10 x i8] c"single-ch\00", align 1
@lame_encode_frame.sentBits = internal global i32 0, align 4
@lame_encode_frame.bitsPerSlot = internal global i32 0, align 4
@lame_encode_frame.frac_SpF = internal global double 0.000000e+00, align 8
@lame_encode_frame.slot_lag = internal global double 0.000000e+00, align 8
@.str.16.189 = private unnamed_addr constant [44 x i8] c"mf_size>=(BLKSIZE+gfp->framesize-FFTOFFSET)\00", align 1
@.str.17.190 = private unnamed_addr constant [7 x i8] c"lame.c\00", align 1
@__func__.lame_encode_frame = private unnamed_addr constant [18 x i8] c"lame_encode_frame\00", align 1
@lame_encode_frame.ms_ratio = internal global [2 x double] zeroinitializer, align 8
@lame_encode_frame.ms_ener_ratio = internal global [2 x double] zeroinitializer, align 8
@lame_encode_frame.frameBits = internal global i32 0, align 4
@.str.18.191 = private unnamed_addr constant [36 x i8] c"Sent %ld bits = %ld slots plus %ld\0A\00", align 1
@fill_buffer_resample.init = internal global [2 x i32] zeroinitializer, align 4
@fill_buffer_resample.itime = internal global [2 x double] zeroinitializer, align 8
@fill_buffer_resample.inbuf_old = internal global [2 x [5 x i16]] zeroinitializer, align 2
@.str.19.192 = private unnamed_addr constant [18 x i8] c"MFSIZE>=mf_needed\00", align 1
@__func__.lame_encode_buffer = private unnamed_addr constant [19 x i8] c"lame_encode_buffer\00", align 1
@lame_encode_buffer.frame_buffered = internal global i32 0, align 4
@mfbuf = internal global [2 x [3056 x i16]] zeroinitializer, align 2
@mf_samples_to_encode = internal global i32 0, align 4
@mf_size = internal global i32 0, align 4
@.str.20.193 = private unnamed_addr constant [16 x i8] c"mf_size<=MFSIZE\00", align 1
@.str.21.194 = private unnamed_addr constant [12 x i8] c"nsamples==0\00", align 1
@__func__.lame_encode_buffer_interleaved = private unnamed_addr constant [31 x i8] c"lame_encode_buffer_interleaved\00", align 1
@lame_encode_buffer_interleaved.frame_buffered = internal global i32 0, align 4
@.str.22.195 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.196 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@stdout = external constant %struct._IO_FILE*, align 4
@.str.1.197 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.2.198 = private unnamed_addr constant [24 x i8] c"Could not create \22%s\22.\0A\00", align 1
@.str.3.199 = private unnamed_addr constant [34 x i8] c"mp3 buffer is not big enough... \0A\00", align 1
@.str.4.200 = private unnamed_addr constant [25 x i8] c"Error writing mp3 output\00", align 1
@mdct_sub48.init = internal global i32 0, align 4
@sb_sample = internal global [2 x [2 x [18 x [32 x double]]]] zeroinitializer, align 8
@win = internal global [4 x [36 x double]] zeroinitializer, align 8
@ca = internal global [8 x double] zeroinitializer, align 8
@cs = internal global [8 x double] zeroinitializer, align 8
@cos_l = internal global [244 x double] zeroinitializer, align 8
@all = internal constant [12 x i32] [i32 0, i32 2, i32 3, i32 5, i32 6, i32 8, i32 9, i32 11, i32 12, i32 14, i32 15, i32 17], align 4
@cos_s = internal global [6 x [6 x double]] zeroinitializer, align 8
@enwindow = internal global [256 x double] [double 0x3FA251E002C5BE4C, double 0x3F924E1FFC2760F6, double 3.134727e-03, double 2.457142e-03, double 9.713170e-04, double 2.188680e-04, double 1.015660e-04, double 1.382800e-05, double 0x3FA24EFFFE8EA200, double 3.401756e-03, double 9.837150e-04, double 9.918200e-05, double -4.770000e-07, double 1.039510e-04, double 9.536740e-04, double 2.841473e-03, double 1.239800e-05, double 1.912120e-04, double 2.283096e-03, double 0x3F9166FFFA87D736, double 0x3F9334FFF82E8B95, double 2.630711e-03, double 2.474780e-04, double 1.478200e-05, double 0x3FA2467FFD4C82A1, double 3.643036e-03, double 9.918210e-04, double 9.632100e-05, double -4.770000e-07, double 1.058580e-04, double 9.307860e-04, double 2.521515e-03, double 1.144400e-05, double 1.654620e-04, double 2.110004e-03, double 0x3F907FDFF8E84D76, double 0x3F941B0002FC8112, double 2.803326e-03, double 2.770420e-04, double 1.668900e-05, double 0x3FA2385FFEFF602E, double 3.858566e-03, double 9.951590e-04, double 9.346000e-05, double -4.770000e-07, double 1.072880e-04, double 9.026530e-04, double 2.174854e-03, double 1.001400e-05, double 1.401900e-04, double 1.937389e-03, double 0x3F8F32C00A8B630F, double 0x3F94FFC002FEA6D3, double 2.974033e-03, double 3.075600e-04, double 1.812000e-05, double 3.543520e-02, double 4.049301e-03, double 9.942050e-04, double 9.059900e-05, double -4.770000e-07, double 1.082420e-04, double 8.687970e-04, double 1.800537e-03, double 9.060000e-06, double 1.163480e-04, double 1.766682e-03, double 0x3F8D680010E953B9, double 0x3F95E29FFB661AF0, double 3.141880e-03, double 3.390310e-04, double 1.955000e-05, double 0x3FA20B4002AD0C1B, double 4.215240e-03, double 9.894370e-04, double 8.726100e-05, double -4.770000e-07, double 1.087190e-04, double 8.292200e-04, double 1.399517e-03, double 8.106000e-06, double 9.393700e-05, double 1.597881e-03, double 0x3F8BA03FF357727A, double 0x3F96C320035E36F6, double 3.306866e-03, double 3.714560e-04, double 2.145800e-05, double 3.500700e-02, double 4.357815e-03, double 9.808540e-04, double 8.392300e-05, double -4.770000e-07, double 1.087190e-04, double 7.839200e-04, double 9.713170e-04, double 7.629000e-06, double 7.295600e-05, double 1.432419e-03, double 0x3F89DC800CEF6B77, double 2.307415e-02, double 3.467083e-03, double 4.043580e-04, double 2.336500e-05, double 0x3FA1C82FFC6969F3, double 4.477024e-03, double 9.689330e-04, double 8.058500e-05, double -9.540000e-07, double 1.082420e-04, double 7.319450e-04, double 5.159380e-04, double 6.676000e-06, double 5.292900e-05, double 1.269817e-03, double 0x3F881D80076614A1, double 0x3F987B2006DB9161, double 3.622532e-03, double 4.382130e-04, double 2.527200e-05, double 0x3FA19E90011D1416, double 4.573822e-03, double 9.541510e-04, double 7.677100e-05, double -9.540000e-07, double 1.068120e-04, double 6.742480e-04, double 3.337900e-05, double 6.199000e-06, double 3.433200e-05, double 1.111031e-03, double 0x3F86643FF91CEA7A, double 0x3F99519FFD2D5F2B, double 3.771782e-03, double 4.725460e-04, double 2.765700e-05, double 3.405571e-02, double 4.649162e-03, double 9.355550e-04, double 7.343300e-05, double -9.540000e-07, double 1.053810e-04, double 6.103520e-04, double -4.758830e-04, double 5.245000e-06, double 1.716600e-05, double 9.565350e-04, double 0x3F84B1400FA0C315, double 2.552700e-02, double 3.914356e-03, double 5.073550e-04, double 3.004100e-05, double 0x3FA13BE000055E64, double 4.703045e-03, double 9.150510e-04, double 7.009500e-05, double -9.540000e-07, double 1.025200e-04, double 5.393030e-04, double -1.011848e-03, double 4.768000e-06, double 9.540000e-07, double 8.068080e-04, double 9.287834e-03, double 0x3F9AF14004E3FBA4, double 4.048824e-03, double 5.421640e-04, double 3.242500e-05, double 0x3FA102EFFD062E20, double 4.737377e-03, double 8.916850e-04, double 6.628000e-05, double -1.431000e-06, double 9.918200e-05, double 4.625320e-04, double -1.573563e-03, double 4.292000e-06, double -1.382800e-05, double 6.618500e-04, double 8.487225e-03, double 2.707386e-02, double 4.174709e-03, double 5.769730e-04, double 3.480900e-05, double 0x3FA0C53FFF633BD3, double 4.752159e-03, double 8.664130e-04, double 6.294300e-05, double -1.431000e-06, double 9.536700e-05, double 3.786090e-04, double -2.161503e-03, double 3.815000e-06, double -2.718000e-05, double 5.221370e-04, double 7.703304e-03, double 0x3F9C7BA000DE43BA, double 4.290581e-03, double 6.117820e-04, double 3.767000e-05, double 3.224802e-02, double 4.748821e-03, double 8.387570e-04, double 5.960500e-05, double -1.907000e-06, double 9.012200e-05, double 2.884860e-04, double -2.774239e-03, double 3.338000e-06, double -3.957700e-05, double 3.881450e-04, double 6.937027e-03, double 0x3F9D37C002307E44, double 4.395962e-03, double 6.465910e-04, double 4.053100e-05, double 3.170681e-02, double 4.728317e-03, double 8.096690e-04, double 5.579000e-05, double -1.907000e-06, double 8.440000e-05, double 1.916890e-04, double -3.411293e-03, double 3.338000e-06, double -5.054500e-05, double 2.598760e-04, double 6.189346e-03, double 0x3F9DED20070F1B84, double 4.489899e-03, double 6.809230e-04, double 4.339200e-05, double 0x3F9FE13FFEFC278C, double 4.691124e-03, double 7.791520e-04, double 5.292900e-05, double -2.384000e-06, double 7.772400e-05, double 8.821500e-05, double -4.072189e-03, double 2.861000e-06, double -6.055800e-05, double 1.373290e-04, double 5.462170e-03, double 2.989006e-02, double 4.570484e-03, double 7.143020e-04, double 4.625300e-05, double 0x3F9F425FFF77A281, double 4.638195e-03, double 7.472040e-04, double 4.959100e-05, double 4.756451e-03, double 2.145800e-05, double -6.961800e-05, double 2.384000e-06], align 8
@mm = internal global [16 x [31 x double]] zeroinitializer, align 8
@mdct_init48.c = internal constant [8 x double] [double -6.000000e-01, double -5.350000e-01, double -3.300000e-01, double -1.850000e-01, double -9.500000e-02, double -4.100000e-02, double -1.420000e-02, double -3.700000e-03], align 8
@mdct_init48.d3 = internal constant [4 x i32] [i32 1, i32 7, i32 10, i32 16], align 4
@mdct_init48.d9 = internal constant [2 x i32] [i32 4, i32 13], align 4
@L3psycho_anal.blocktype_old = internal global [2 x i32] zeroinitializer, align 4
@.str.205 = private unnamed_addr constant [42 x i8] c"error, invalid sampling frequency: %d Hz\0A\00", align 1
@L3psycho_anal.rx_sav = internal global [4 x [2 x [513 x float]]] zeroinitializer, align 4
@L3psycho_anal.ax_sav = internal global [4 x [2 x [513 x float]]] zeroinitializer, align 4
@L3psycho_anal.bx_sav = internal global [4 x [2 x [513 x float]]] zeroinitializer, align 4
@L3psycho_anal.en = internal global [4 x %struct.III_psy_xmin] zeroinitializer, align 8
@L3psycho_anal.thm = internal global [4 x %struct.III_psy_xmin] zeroinitializer, align 8
@L3psycho_anal.cw_lower_index = internal global i32 0, align 4
@L3psycho_anal.cw_upper_index = internal global i32 0, align 4
@L3psycho_anal.cw = internal global [513 x float] zeroinitializer, align 4
@L3psycho_anal.mld_s = internal global [12 x double] zeroinitializer, align 8
@L3psycho_anal.mld_l = internal global [21 x double] zeroinitializer, align 8
@L3psycho_anal.partition_l = internal global [513 x i32] zeroinitializer, align 4
@L3psycho_anal.numlines_l = internal global [63 x i32] zeroinitializer, align 4
@L3psycho_anal.numlines_s = internal global [63 x i32] zeroinitializer, align 4
@L3psycho_anal.minval = internal global [63 x double] zeroinitializer, align 8
@L3psycho_anal.qthr_l = internal global [63 x double] zeroinitializer, align 8
@L3psycho_anal.s3_l = internal global [64 x [64 x double]] zeroinitializer, align 8
@L3psycho_anal.s3_s = internal global [64 x [64 x double]] zeroinitializer, align 8
@L3psycho_anal.qthr_s = internal global [63 x double] zeroinitializer, align 8
@L3psycho_anal.bu_l = internal global [21 x i32] zeroinitializer, align 4
@L3psycho_anal.bo_l = internal global [21 x i32] zeroinitializer, align 4
@L3psycho_anal.w1_l = internal global [21 x double] zeroinitializer, align 8
@L3psycho_anal.w2_l = internal global [21 x double] zeroinitializer, align 8
@L3psycho_anal.bu_s = internal global [12 x i32] zeroinitializer, align 4
@L3psycho_anal.bo_s = internal global [12 x i32] zeroinitializer, align 4
@L3psycho_anal.w1_s = internal global [12 x double] zeroinitializer, align 8
@L3psycho_anal.w2_s = internal global [12 x double] zeroinitializer, align 8
@L3psycho_anal.npart_l_orig = internal global i32 0, align 4
@L3psycho_anal.npart_s_orig = internal global i32 0, align 4
@L3psycho_anal.npart_l = internal global i32 0, align 4
@L3psycho_anal.npart_s = internal global i32 0, align 4
@L3psycho_anal.s3ind = internal global [63 x [2 x i32]] zeroinitializer, align 4
@L3psycho_anal.s3ind_s = internal global [63 x [2 x i32]] zeroinitializer, align 4
@L3psycho_anal.wsamp_S = internal global [2 x [3 x [256 x float]]] zeroinitializer, align 4
@L3psycho_anal.wsamp_L = internal global [2 x [1024 x float]] zeroinitializer, align 4
@L3psycho_anal.pe = internal global [4 x double] zeroinitializer, align 8
@L3psycho_anal.energy = internal global [513 x float] zeroinitializer, align 4
@L3psycho_anal.energy_s = internal global [3 x [129 x float]] zeroinitializer, align 4
@L3psycho_anal.eb = internal global [63 x double] zeroinitializer, align 8
@L3psycho_anal.cb = internal global [63 x double] zeroinitializer, align 8
@L3psycho_anal.nb_1 = internal global [4 x [63 x double]] zeroinitializer, align 8
@L3psycho_anal.nb_2 = internal global [4 x [63 x double]] zeroinitializer, align 8
@L3psycho_anal.thr = internal global [63 x double] zeroinitializer, align 8
@.str.1.206 = private unnamed_addr constant [26 x i8] c"Error in block selecting\0A\00", align 1
@L3psycho_anal.ms_ratio_s_old = internal global double 0.000000e+00, align 8
@L3psycho_anal.ms_ratio_l_old = internal global double 0.000000e+00, align 8
@L3psycho_anal.ms_ener_ratio_old = internal global double 2.500000e-01, align 8
@.str.2.207 = private unnamed_addr constant [27 x i8] c"1. please check \22psy_data\22\00", align 1
@.str.3.208 = private unnamed_addr constant [27 x i8] c"3. please check \22psy_data\22\00", align 1
@.str.4.209 = private unnamed_addr constant [28 x i8] c"30:please check \22psy_data\22\0A\00", align 1
@.str.5.210 = private unnamed_addr constant [31 x i8] c"31l: please check \22psy_data.\22\0A\00", align 1
@.str.6.211 = private unnamed_addr constant [15 x i8] c"w1,w2: %f %f \0A\00", align 1
@.str.7.212 = private unnamed_addr constant [31 x i8] c"31s: please check \22psy_data.\22\0A\00", align 1
@outer_loop.OldValue = internal global [2 x i32] [i32 180, i32 180], align 4
@.str.5.215 = private unnamed_addr constant [15 x i8] c"iteration != 1\00", align 1
@.str.1.216 = private unnamed_addr constant [11 x i8] c"quantize.c\00", align 1
@__func__.outer_loop = private unnamed_addr constant [11 x i8] c"outer_loop\00", align 1
@.str.6.217 = private unnamed_addr constant [28 x i8] c"cod_info->global_gain < 256\00", align 1
@.str.7.218 = private unnamed_addr constant [8 x i8] c"s<Q_MAX\00", align 1
@__func__.calc_noise1 = private unnamed_addr constant [12 x i8] c"calc_noise1\00", align 1
@.str.8.219 = private unnamed_addr constant [5 x i8] c"s>=0\00", align 1
@.str.222 = private unnamed_addr constant [20 x i8] c"this_bits>=min_bits\00", align 1
@__func__.VBR_iteration_loop = private unnamed_addr constant [19 x i8] c"VBR_iteration_loop\00", align 1
@.str.2.223 = private unnamed_addr constant [20 x i8] c"this_bits<=max_bits\00", align 1
@.str.3.224 = private unnamed_addr constant [42 x i8] c"(int)cod_info->part2_3_length <= max_bits\00", align 1
@.str.4.225 = private unnamed_addr constant [18 x i8] c"used_bits <= bits\00", align 1
@masking_lower = global float 1.000000e+00, align 4
@nr_of_sfb_block = global [6 x [3 x [4 x i32]]] [[3 x [4 x i32]] [[4 x i32] [i32 6, i32 5, i32 5, i32 5], [4 x i32] [i32 9, i32 9, i32 9, i32 9], [4 x i32] [i32 6, i32 9, i32 9, i32 9]], [3 x [4 x i32]] [[4 x i32] [i32 6, i32 5, i32 7, i32 3], [4 x i32] [i32 9, i32 9, i32 12, i32 6], [4 x i32] [i32 6, i32 9, i32 12, i32 6]], [3 x [4 x i32]] [[4 x i32] [i32 11, i32 10, i32 0, i32 0], [4 x i32] [i32 18, i32 18, i32 0, i32 0], [4 x i32] [i32 15, i32 18, i32 0, i32 0]], [3 x [4 x i32]] [[4 x i32] [i32 7, i32 7, i32 7, i32 0], [4 x i32] [i32 12, i32 12, i32 12, i32 0], [4 x i32] [i32 6, i32 15, i32 12, i32 0]], [3 x [4 x i32]] [[4 x i32] [i32 6, i32 6, i32 6, i32 3], [4 x i32] [i32 12, i32 9, i32 9, i32 6], [4 x i32] [i32 6, i32 12, i32 9, i32 6]], [3 x [4 x i32]] [[4 x i32] [i32 8, i32 8, i32 5, i32 0], [4 x i32] [i32 15, i32 12, i32 9, i32 0], [4 x i32] [i32 6, i32 18, i32 9, i32 0]]], align 4
@pretab = global [21 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 3, i32 2], align 4
@sfBandIndex = global [6 x %struct.scalefac_struct] [%struct.scalefac_struct { [23 x i32] [i32 0, i32 6, i32 12, i32 18, i32 24, i32 30, i32 36, i32 44, i32 54, i32 66, i32 80, i32 96, i32 116, i32 140, i32 168, i32 200, i32 238, i32 284, i32 336, i32 396, i32 464, i32 522, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 18, i32 24, i32 32, i32 42, i32 56, i32 74, i32 100, i32 132, i32 174, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 6, i32 12, i32 18, i32 24, i32 30, i32 36, i32 44, i32 54, i32 66, i32 80, i32 96, i32 114, i32 136, i32 162, i32 194, i32 232, i32 278, i32 332, i32 394, i32 464, i32 540, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 18, i32 26, i32 36, i32 48, i32 62, i32 80, i32 104, i32 136, i32 180, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 6, i32 12, i32 18, i32 24, i32 30, i32 36, i32 44, i32 54, i32 66, i32 80, i32 96, i32 116, i32 140, i32 168, i32 200, i32 238, i32 284, i32 336, i32 396, i32 464, i32 522, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 18, i32 26, i32 36, i32 48, i32 62, i32 80, i32 104, i32 134, i32 174, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 30, i32 36, i32 44, i32 52, i32 62, i32 74, i32 90, i32 110, i32 134, i32 162, i32 196, i32 238, i32 288, i32 342, i32 418, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 22, i32 30, i32 40, i32 52, i32 66, i32 84, i32 106, i32 136, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 30, i32 36, i32 42, i32 50, i32 60, i32 72, i32 88, i32 106, i32 128, i32 156, i32 190, i32 230, i32 276, i32 330, i32 384, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 22, i32 28, i32 38, i32 50, i32 64, i32 80, i32 100, i32 126, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 30, i32 36, i32 44, i32 54, i32 66, i32 82, i32 102, i32 126, i32 156, i32 194, i32 240, i32 296, i32 364, i32 448, i32 550, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 22, i32 30, i32 42, i32 58, i32 78, i32 104, i32 138, i32 180, i32 192] }], align 4
@scalefac_band = common global %struct.scalefac_struct zeroinitializer, align 4
@pow43 = common global [8208 x double] zeroinitializer, align 8
@ipow20 = common global [256 x double] zeroinitializer, align 8
@pow20 = common global [256 x double] zeroinitializer, align 8
@convert_mdct = common global i32 0, align 4
@reduce_sidechannel = common global i32 0, align 4
@ATH_mdct_long = common global [576 x double] zeroinitializer, align 8
@ATH_mdct_short = common global [192 x double] zeroinitializer, align 8
@ATH_l = internal global [21 x double] zeroinitializer, align 8
@ATH_s = internal global [21 x double] zeroinitializer, align 8
@adj43 = internal global [8208 x double] zeroinitializer, align 8
@adj43asm = internal global [8208 x double] zeroinitializer, align 8
@.str.254 = private unnamed_addr constant [14 x i8] c"max_bits >= 0\00", align 1
@.str.1.255 = private unnamed_addr constant [15 x i8] c"quantize-pvt.c\00", align 1
@__func__.inner_loop = private unnamed_addr constant [11 x i8] c"inner_loop\00", align 1
@scale_bitcount.slen1_tab = internal global [16 x i32] [i32 0, i32 18, i32 36, i32 54, i32 54, i32 36, i32 54, i32 72, i32 54, i32 72, i32 90, i32 72, i32 90, i32 108, i32 108, i32 126], align 4
@scale_bitcount.slen2_tab = internal global [16 x i32] [i32 0, i32 10, i32 20, i32 30, i32 33, i32 21, i32 31, i32 41, i32 32, i32 42, i32 52, i32 43, i32 53, i32 63, i32 64, i32 74], align 4
@scale_bitcount.slen1 = internal global [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 8, i32 2, i32 2, i32 2, i32 4, i32 4, i32 4, i32 8, i32 8, i32 8, i32 16, i32 16], align 4
@scale_bitcount.slen2 = internal global [16 x i32] [i32 1, i32 2, i32 4, i32 8, i32 1, i32 2, i32 4, i32 8, i32 2, i32 4, i32 8, i32 2, i32 4, i32 8, i32 4, i32 8], align 4
@max_range_sfac_tab = internal global [6 x [4 x i32]] [[4 x i32] [i32 15, i32 15, i32 7, i32 7], [4 x i32] [i32 15, i32 15, i32 7, i32 0], [4 x i32] [i32 7, i32 3, i32 0, i32 0], [4 x i32] [i32 15, i32 31, i32 31, i32 0], [4 x i32] [i32 7, i32 7, i32 7, i32 0], [4 x i32] [i32 3, i32 3, i32 0, i32 0]], align 4
@scale_bitcount_lsf.log2tab = internal global [16 x i32] [i32 0, i32 1, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4], align 4
@.str.2.260 = private unnamed_addr constant [38 x i8] c"intensity stereo not implemented yet\0A\00", align 1
@.str.3.261 = private unnamed_addr constant [30 x i8] c"cod_info->sfb_partition_table\00", align 1
@__func__.scale_bitcount_lsf = private unnamed_addr constant [19 x i8] c"scale_bitcount_lsf\00", align 1
@bin_search_StepSize2.CurrentStep = internal global i32 4, align 4
@ResvSize = internal global i32 0, align 4
@.str.270 = private unnamed_addr constant [43 x i8] c"(l3_side->main_data_begin * 8) == ResvSize\00", align 1
@.str.1.271 = private unnamed_addr constant [12 x i8] c"reservoir.c\00", align 1
@__func__.ResvFrameBegin = private unnamed_addr constant [15 x i8] c"ResvFrameBegin\00", align 1
@ResvMax = internal global i32 0, align 4
@.str.278 = private unnamed_addr constant [18 x i8] c"socket() failed.\0A\00", align 1
@.str.1.279 = private unnamed_addr constant [32 x i8] c"setsockopt SO_REUSEADDR failed\0A\00", align 1
@.str.2.280 = private unnamed_addr constant [59 x i8] c"setsockopt IP_MULTICAST_TTL failed.  multicast in kernel?\0A\00", align 1
@.str.3.281 = private unnamed_addr constant [60 x i8] c"setsockopt IP_MULTICAST_LOOP failed.  multicast in kernel?\0A\00", align 1
@hs = global i32 32, align 4
@ht = global [34 x %struct.huffcodetab] [%struct.huffcodetab zeroinitializer, %struct.huffcodetab { i32 2, i32 0, i32* getelementptr inbounds ([18 x i32], [18 x i32]* @t1HB, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @t1l, i32 0, i32 0) }, %struct.huffcodetab { i32 3, i32 0, i32* getelementptr inbounds ([35 x i32], [35 x i32]* @t2HB, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @t2l, i32 0, i32 0) }, %struct.huffcodetab { i32 3, i32 0, i32* getelementptr inbounds ([35 x i32], [35 x i32]* @t3HB, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @t3l, i32 0, i32 0) }, %struct.huffcodetab zeroinitializer, %struct.huffcodetab { i32 4, i32 0, i32* getelementptr inbounds ([52 x i32], [52 x i32]* @t5HB, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @t5l, i32 0, i32 0) }, %struct.huffcodetab { i32 4, i32 0, i32* getelementptr inbounds ([52 x i32], [52 x i32]* @t6HB, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @t6l, i32 0, i32 0) }, %struct.huffcodetab { i32 6, i32 0, i32* getelementptr inbounds ([86 x i32], [86 x i32]* @t7HB, i32 0, i32 0), i8* getelementptr inbounds ([86 x i8], [86 x i8]* @t7l, i32 0, i32 0) }, %struct.huffcodetab { i32 6, i32 0, i32* getelementptr inbounds ([86 x i32], [86 x i32]* @t8HB, i32 0, i32 0), i8* getelementptr inbounds ([86 x i8], [86 x i8]* @t8l, i32 0, i32 0) }, %struct.huffcodetab { i32 6, i32 0, i32* getelementptr inbounds ([86 x i32], [86 x i32]* @t9HB, i32 0, i32 0), i8* getelementptr inbounds ([86 x i8], [86 x i8]* @t9l, i32 0, i32 0) }, %struct.huffcodetab { i32 8, i32 0, i32* getelementptr inbounds ([120 x i32], [120 x i32]* @t10HB, i32 0, i32 0), i8* getelementptr inbounds ([120 x i8], [120 x i8]* @t10l, i32 0, i32 0) }, %struct.huffcodetab { i32 8, i32 0, i32* getelementptr inbounds ([120 x i32], [120 x i32]* @t11HB, i32 0, i32 0), i8* getelementptr inbounds ([120 x i8], [120 x i8]* @t11l, i32 0, i32 0) }, %struct.huffcodetab { i32 8, i32 0, i32* getelementptr inbounds ([120 x i32], [120 x i32]* @t12HB, i32 0, i32 0), i8* getelementptr inbounds ([120 x i8], [120 x i8]* @t12l, i32 0, i32 0) }, %struct.huffcodetab { i32 16, i32 0, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t13HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t13l, i32 0, i32 0) }, %struct.huffcodetab zeroinitializer, %struct.huffcodetab { i32 16, i32 0, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t15HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t15l, i32 0, i32 0) }, %struct.huffcodetab { i32 1, i32 1, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 2, i32 3, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 3, i32 7, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 4, i32 15, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 6, i32 63, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 8, i32 255, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 10, i32 1023, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 13, i32 8191, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 4, i32 15, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 5, i32 31, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 6, i32 63, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 7, i32 127, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 8, i32 255, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 9, i32 511, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 11, i32 2047, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 13, i32 8191, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 0, i32 0, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @t32HB, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @t32l, i32 0, i32 0) }, %struct.huffcodetab { i32 0, i32 0, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @t33HB, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @t33l, i32 0, i32 0) }], align 4
@t1HB = internal global [18 x i32] [i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0], align 4
@t1l = internal global [18 x i8] c"\01\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\03", align 1
@t2HB = internal global [35 x i32] [i32 1, i32 2, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 2, i32 0], align 4
@t2l = internal global [35 x i8] c"\01\03\06\00\00\00\00\00\00\00\00\00\00\00\00\00\03\03\05\00\00\00\00\00\00\00\00\00\00\00\00\00\05\05\06", align 1
@t3HB = internal global [35 x i32] [i32 3, i32 2, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 2, i32 0], align 4
@t3l = internal global [35 x i8] c"\02\02\06\00\00\00\00\00\00\00\00\00\00\00\00\00\03\02\05\00\00\00\00\00\00\00\00\00\00\00\00\00\05\05\06", align 1
@t5HB = internal global [52 x i32] [i32 1, i32 2, i32 6, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 1, i32 4, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 5, i32 7, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i32 1, i32 1, i32 0], align 4
@t5l = internal global [52 x i8] c"\01\03\06\07\00\00\00\00\00\00\00\00\00\00\00\00\03\03\06\07\00\00\00\00\00\00\00\00\00\00\00\00\06\06\07\08\00\00\00\00\00\00\00\00\00\00\00\00\07\06\07\08", align 1
@t6HB = internal global [52 x i32] [i32 7, i32 3, i32 5, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i32 2, i32 3, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 4, i32 4, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 3, i32 2, i32 0], align 4
@t6l = internal global [52 x i8] c"\03\03\05\07\00\00\00\00\00\00\00\00\00\00\00\00\03\02\04\05\00\00\00\00\00\00\00\00\00\00\00\00\04\04\05\06\00\00\00\00\00\00\00\00\00\00\00\00\06\05\06\07", align 1
@t7HB = internal global [86 x i32] [i32 1, i32 2, i32 10, i32 19, i32 16, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 3, i32 7, i32 10, i32 5, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 11, i32 4, i32 13, i32 17, i32 8, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 12, i32 11, i32 18, i32 15, i32 11, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 6, i32 9, i32 14, i32 3, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i32 4, i32 5, i32 3, i32 2, i32 0], align 4
@t7l = internal global [86 x i8] c"\01\03\06\08\08\09\00\00\00\00\00\00\00\00\00\00\03\04\06\07\07\08\00\00\00\00\00\00\00\00\00\00\06\05\07\08\08\09\00\00\00\00\00\00\00\00\00\00\07\07\08\09\09\09\00\00\00\00\00\00\00\00\00\00\07\07\08\09\09\0A\00\00\00\00\00\00\00\00\00\00\08\08\09\0A\0A\0A", align 1
@t8HB = internal global [86 x i32] [i32 3, i32 4, i32 6, i32 18, i32 12, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 1, i32 2, i32 16, i32 9, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 3, i32 5, i32 14, i32 7, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 19, i32 17, i32 15, i32 13, i32 10, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 13, i32 5, i32 8, i32 11, i32 5, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 12, i32 4, i32 4, i32 1, i32 1, i32 0], align 4
@t8l = internal global [86 x i8] c"\02\03\06\08\08\09\00\00\00\00\00\00\00\00\00\00\03\02\04\08\08\08\00\00\00\00\00\00\00\00\00\00\06\04\06\08\08\09\00\00\00\00\00\00\00\00\00\00\08\08\08\09\09\0A\00\00\00\00\00\00\00\00\00\00\08\07\08\09\0A\0A\00\00\00\00\00\00\00\00\00\00\09\08\09\09\0B\0B", align 1
@t9HB = internal global [86 x i32] [i32 7, i32 5, i32 9, i32 14, i32 15, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i32 4, i32 5, i32 5, i32 6, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 6, i32 8, i32 8, i32 8, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 15, i32 6, i32 9, i32 10, i32 5, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 11, i32 7, i32 9, i32 6, i32 4, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 14, i32 4, i32 6, i32 2, i32 6, i32 0], align 4
@t9l = internal global [86 x i8] c"\03\03\05\06\08\09\00\00\00\00\00\00\00\00\00\00\03\03\04\05\06\08\00\00\00\00\00\00\00\00\00\00\04\04\05\06\07\08\00\00\00\00\00\00\00\00\00\00\06\05\06\07\07\08\00\00\00\00\00\00\00\00\00\00\07\06\07\07\08\09\00\00\00\00\00\00\00\00\00\00\08\07\08\08\09\09", align 1
@t10HB = internal global [120 x i32] [i32 1, i32 2, i32 10, i32 23, i32 35, i32 30, i32 12, i32 17, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 3, i32 8, i32 12, i32 18, i32 21, i32 12, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 11, i32 9, i32 15, i32 21, i32 32, i32 40, i32 19, i32 6, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 14, i32 13, i32 22, i32 34, i32 46, i32 23, i32 18, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 19, i32 33, i32 47, i32 27, i32 22, i32 9, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 31, i32 22, i32 41, i32 26, i32 21, i32 20, i32 5, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 14, i32 13, i32 10, i32 11, i32 16, i32 6, i32 5, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 9, i32 8, i32 7, i32 8, i32 4, i32 4, i32 2, i32 0], align 4
@t10l = internal global [120 x i8] c"\01\03\06\08\09\09\09\0A\00\00\00\00\00\00\00\00\03\04\06\07\08\09\08\08\00\00\00\00\00\00\00\00\06\06\07\08\09\0A\09\09\00\00\00\00\00\00\00\00\07\07\08\09\0A\0A\09\0A\00\00\00\00\00\00\00\00\08\08\09\0A\0A\0A\0A\0A\00\00\00\00\00\00\00\00\09\09\0A\0A\0B\0B\0A\0B\00\00\00\00\00\00\00\00\08\08\09\0A\0A\0A\0B\0B\00\00\00\00\00\00\00\00\09\08\09\0A\0A\0B\0B\0B", align 1
@t11HB = internal global [120 x i32] [i32 3, i32 4, i32 10, i32 24, i32 34, i32 33, i32 21, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 3, i32 4, i32 10, i32 32, i32 17, i32 11, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 11, i32 7, i32 13, i32 18, i32 30, i32 31, i32 20, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 25, i32 11, i32 19, i32 59, i32 27, i32 18, i32 12, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 35, i32 33, i32 31, i32 58, i32 30, i32 16, i32 7, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 28, i32 26, i32 32, i32 19, i32 17, i32 15, i32 8, i32 14, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 14, i32 12, i32 9, i32 13, i32 14, i32 9, i32 4, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 11, i32 4, i32 6, i32 6, i32 6, i32 3, i32 2, i32 0], align 4
@t11l = internal global [120 x i8] c"\02\03\05\07\08\09\08\09\00\00\00\00\00\00\00\00\03\03\04\06\08\08\07\08\00\00\00\00\00\00\00\00\05\05\06\07\08\09\08\08\00\00\00\00\00\00\00\00\07\06\07\09\08\0A\08\09\00\00\00\00\00\00\00\00\08\08\08\09\09\0A\09\0A\00\00\00\00\00\00\00\00\08\08\09\0A\0A\0B\0A\0B\00\00\00\00\00\00\00\00\08\07\07\08\09\0A\0A\0A\00\00\00\00\00\00\00\00\08\07\08\09\0A\0A\0A\0A", align 1
@t12HB = internal global [120 x i32] [i32 9, i32 6, i32 16, i32 33, i32 41, i32 39, i32 38, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 5, i32 6, i32 9, i32 23, i32 16, i32 26, i32 11, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 17, i32 7, i32 11, i32 14, i32 21, i32 30, i32 10, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 17, i32 10, i32 15, i32 12, i32 18, i32 28, i32 14, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32, i32 13, i32 22, i32 19, i32 18, i32 16, i32 9, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 40, i32 17, i32 31, i32 29, i32 17, i32 13, i32 4, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 27, i32 12, i32 11, i32 15, i32 10, i32 7, i32 4, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 27, i32 12, i32 8, i32 12, i32 6, i32 3, i32 1, i32 0], align 4
@t12l = internal global [120 x i8] c"\04\03\05\07\08\09\09\09\00\00\00\00\00\00\00\00\03\03\04\05\07\07\08\08\00\00\00\00\00\00\00\00\05\04\05\06\07\08\07\08\00\00\00\00\00\00\00\00\06\05\06\06\07\08\08\08\00\00\00\00\00\00\00\00\07\06\07\07\08\08\08\09\00\00\00\00\00\00\00\00\08\07\08\08\08\09\08\09\00\00\00\00\00\00\00\00\08\07\07\08\08\09\09\0A\00\00\00\00\00\00\00\00\09\08\08\09\09\09\09\0A", align 1
@t13HB = internal global [256 x i32] [i32 1, i32 5, i32 14, i32 21, i32 34, i32 51, i32 46, i32 71, i32 42, i32 52, i32 68, i32 52, i32 67, i32 44, i32 43, i32 19, i32 3, i32 4, i32 12, i32 19, i32 31, i32 26, i32 44, i32 33, i32 31, i32 24, i32 32, i32 24, i32 31, i32 35, i32 22, i32 14, i32 15, i32 13, i32 23, i32 36, i32 59, i32 49, i32 77, i32 65, i32 29, i32 40, i32 30, i32 40, i32 27, i32 33, i32 42, i32 16, i32 22, i32 20, i32 37, i32 61, i32 56, i32 79, i32 73, i32 64, i32 43, i32 76, i32 56, i32 37, i32 26, i32 31, i32 25, i32 14, i32 35, i32 16, i32 60, i32 57, i32 97, i32 75, i32 114, i32 91, i32 54, i32 73, i32 55, i32 41, i32 48, i32 53, i32 23, i32 24, i32 58, i32 27, i32 50, i32 96, i32 76, i32 70, i32 93, i32 84, i32 77, i32 58, i32 79, i32 29, i32 74, i32 49, i32 41, i32 17, i32 47, i32 45, i32 78, i32 74, i32 115, i32 94, i32 90, i32 79, i32 69, i32 83, i32 71, i32 50, i32 59, i32 38, i32 36, i32 15, i32 72, i32 34, i32 56, i32 95, i32 92, i32 85, i32 91, i32 90, i32 86, i32 73, i32 77, i32 65, i32 51, i32 44, i32 43, i32 42, i32 43, i32 20, i32 30, i32 44, i32 55, i32 78, i32 72, i32 87, i32 78, i32 61, i32 46, i32 54, i32 37, i32 30, i32 20, i32 16, i32 53, i32 25, i32 41, i32 37, i32 44, i32 59, i32 54, i32 81, i32 66, i32 76, i32 57, i32 54, i32 37, i32 18, i32 39, i32 11, i32 35, i32 33, i32 31, i32 57, i32 42, i32 82, i32 72, i32 80, i32 47, i32 58, i32 55, i32 21, i32 22, i32 26, i32 38, i32 22, i32 53, i32 25, i32 23, i32 38, i32 70, i32 60, i32 51, i32 36, i32 55, i32 26, i32 34, i32 23, i32 27, i32 14, i32 9, i32 7, i32 34, i32 32, i32 28, i32 39, i32 49, i32 75, i32 30, i32 52, i32 48, i32 40, i32 52, i32 28, i32 18, i32 17, i32 9, i32 5, i32 45, i32 21, i32 34, i32 64, i32 56, i32 50, i32 49, i32 45, i32 31, i32 19, i32 12, i32 15, i32 10, i32 7, i32 6, i32 3, i32 48, i32 23, i32 20, i32 39, i32 36, i32 35, i32 53, i32 21, i32 16, i32 23, i32 13, i32 10, i32 6, i32 1, i32 4, i32 2, i32 16, i32 15, i32 17, i32 27, i32 25, i32 20, i32 29, i32 11, i32 17, i32 12, i32 16, i32 8, i32 1, i32 1, i32 0, i32 1], align 4
@t13l = internal global [256 x i8] c"\01\04\06\07\08\09\09\0A\09\0A\0B\0B\0C\0C\0D\0D\03\04\06\07\08\08\09\09\09\09\0A\0A\0B\0C\0C\0C\06\06\07\08\09\09\0A\0A\09\0A\0A\0B\0B\0C\0D\0D\07\07\08\09\09\0A\0A\0A\0A\0B\0B\0B\0B\0C\0D\0D\08\07\09\09\0A\0A\0B\0B\0A\0B\0B\0C\0C\0D\0D\0E\09\08\09\0A\0A\0A\0B\0B\0B\0B\0C\0B\0D\0D\0E\0E\09\09\0A\0A\0B\0B\0B\0B\0B\0C\0C\0C\0D\0D\0E\0E\0A\09\0A\0B\0B\0B\0C\0C\0C\0C\0D\0D\0D\0E\10\10\09\08\09\0A\0A\0B\0B\0C\0C\0C\0C\0D\0D\0E\0F\0F\0A\09\0A\0A\0B\0B\0B\0D\0C\0D\0D\0E\0E\0E\10\0F\0A\0A\0A\0B\0B\0C\0C\0D\0C\0D\0E\0D\0E\0F\10\11\0B\0A\0A\0B\0C\0C\0C\0C\0D\0D\0D\0E\0F\0F\0F\10\0B\0B\0B\0C\0C\0D\0C\0D\0E\0E\0F\0F\0F\10\10\10\0C\0B\0C\0D\0D\0D\0E\0E\0E\0E\0E\0F\10\0F\10\10\0D\0C\0C\0D\0D\0D\0F\0E\0E\11\0F\0F\0F\11\10\10\0C\0C\0D\0E\0E\0E\0F\0E\0F\0F\10\10\13\12\13\10", align 1
@t15HB = internal global [256 x i32] [i32 7, i32 12, i32 18, i32 53, i32 47, i32 76, i32 124, i32 108, i32 89, i32 123, i32 108, i32 119, i32 107, i32 81, i32 122, i32 63, i32 13, i32 5, i32 16, i32 27, i32 46, i32 36, i32 61, i32 51, i32 42, i32 70, i32 52, i32 83, i32 65, i32 41, i32 59, i32 36, i32 19, i32 17, i32 15, i32 24, i32 41, i32 34, i32 59, i32 48, i32 40, i32 64, i32 50, i32 78, i32 62, i32 80, i32 56, i32 33, i32 29, i32 28, i32 25, i32 43, i32 39, i32 63, i32 55, i32 93, i32 76, i32 59, i32 93, i32 72, i32 54, i32 75, i32 50, i32 29, i32 52, i32 22, i32 42, i32 40, i32 67, i32 57, i32 95, i32 79, i32 72, i32 57, i32 89, i32 69, i32 49, i32 66, i32 46, i32 27, i32 77, i32 37, i32 35, i32 66, i32 58, i32 52, i32 91, i32 74, i32 62, i32 48, i32 79, i32 63, i32 90, i32 62, i32 40, i32 38, i32 125, i32 32, i32 60, i32 56, i32 50, i32 92, i32 78, i32 65, i32 55, i32 87, i32 71, i32 51, i32 73, i32 51, i32 70, i32 30, i32 109, i32 53, i32 49, i32 94, i32 88, i32 75, i32 66, i32 122, i32 91, i32 73, i32 56, i32 42, i32 64, i32 44, i32 21, i32 25, i32 90, i32 43, i32 41, i32 77, i32 73, i32 63, i32 56, i32 92, i32 77, i32 66, i32 47, i32 67, i32 48, i32 53, i32 36, i32 20, i32 71, i32 34, i32 67, i32 60, i32 58, i32 49, i32 88, i32 76, i32 67, i32 106, i32 71, i32 54, i32 38, i32 39, i32 23, i32 15, i32 109, i32 53, i32 51, i32 47, i32 90, i32 82, i32 58, i32 57, i32 48, i32 72, i32 57, i32 41, i32 23, i32 27, i32 62, i32 9, i32 86, i32 42, i32 40, i32 37, i32 70, i32 64, i32 52, i32 43, i32 70, i32 55, i32 42, i32 25, i32 29, i32 18, i32 11, i32 11, i32 118, i32 68, i32 30, i32 55, i32 50, i32 46, i32 74, i32 65, i32 49, i32 39, i32 24, i32 16, i32 22, i32 13, i32 14, i32 7, i32 91, i32 44, i32 39, i32 38, i32 34, i32 63, i32 52, i32 45, i32 31, i32 52, i32 28, i32 19, i32 14, i32 8, i32 9, i32 3, i32 123, i32 60, i32 58, i32 53, i32 47, i32 43, i32 32, i32 22, i32 37, i32 24, i32 17, i32 12, i32 15, i32 10, i32 2, i32 1, i32 71, i32 37, i32 34, i32 30, i32 28, i32 20, i32 17, i32 26, i32 21, i32 16, i32 10, i32 6, i32 8, i32 6, i32 2, i32 0], align 4
@t15l = internal global [256 x i8] calign 1
@t16HB = internal global [256 x i32] [i32 1, i32 5, i32 14, i32 44, i32 74, i32 63, i32 110, i32 93, i32 172, i32 149, i32 138, i32 242, i32 225, i32 195, i32 376, i32 17, i32 3, i32 4, i32 12, i32 20, i32 35, i32 62, i32 53, i32 47, i32 83, i32 75, i32 68, i32 119, i32 201, i32 107, i32 207, i32 9, i32 15, i32 13, i32 23, i32 38, i32 67, i32 58, i32 103, i32 90, i32 161, i32 72, i32 127, i32 117, i32 110, i32 209, i32 206, i32 16, i32 45, i32 21, i32 39, i32 69, i32 64, i32 114, i32 99, i32 87, i32 158, i32 140, i32 252, i32 212, i32 199, i32 387, i32 365, i32 26, i32 75, i32 36, i32 68, i32 65, i32 115, i32 101, i32 179, i32 164, i32 155, i32 264, i32 246, i32 226, i32 395, i32 382, i32 362, i32 9, i32 66, i32 30, i32 59, i32 56, i32 102, i32 185, i32 173, i32 265, i32 142, i32 253, i32 232, i32 400, i32 388, i32 378, i32 445, i32 16, i32 111, i32 54, i32 52, i32 100, i32 184, i32 178, i32 160, i32 133, i32 257, i32 244, i32 228, i32 217, i32 385, i32 366, i32 715, i32 10, i32 98, i32 48, i32 91, i32 88, i32 165, i32 157, i32 148, i32 261, i32 248, i32 407, i32 397, i32 372, i32 380, i32 889, i32 884, i32 8, i32 85, i32 84, i32 81, i32 159, i32 156, i32 143, i32 260, i32 249, i32 427, i32 401, i32 392, i32 383, i32 727, i32 713, i32 708, i32 7, i32 154, i32 76, i32 73, i32 141, i32 131, i32 256, i32 245, i32 426, i32 406, i32 394, i32 384, i32 735, i32 359, i32 710, i32 352, i32 11, i32 139, i32 129, i32 67, i32 125, i32 247, i32 233, i32 229, i32 219, i32 393, i32 743, i32 737, i32 720, i32 885, i32 882, i32 439, i32 4, i32 243, i32 120, i32 118, i32 115, i32 227, i32 223, i32 396, i32 746, i32 742, i32 736, i32 721, i32 712, i32 706, i32 223, i32 436, i32 6, i32 202, i32 224, i32 222, i32 218, i32 216, i32 389, i32 386, i32 381, i32 364, i32 888, i32 443, i32 707, i32 440, i32 437, i32 1728, i32 4, i32 747, i32 211, i32 210, i32 208, i32 370, i32 379, i32 734, i32 723, i32 714, i32 1735, i32 883, i32 877, i32 876, i32 3459, i32 865, i32 2, i32 377, i32 369, i32 102, i32 187, i32 726, i32 722, i32 358, i32 711, i32 709, i32 866, i32 1734, i32 871, i32 3458, i32 870, i32 434, i32 0, i32 12, i32 10, i32 7, i32 11, i32 10, i32 17, i32 11, i32 9, i32 13, i32 12, i32 10, i32 7, i32 5, i32 3, i32 1, i32 3], align 4
@t16l = internal global [256 x i8] c"\01\04\06\08\09\09\0A\0A\0B\0B\0B\0C\0C\0C\0D\09\03\04\06\07\08\09\09\09\0A\0A\0A\0B\0C\0B\0C\08\06\06\07\08\09\09\0A\0A\0B\0A\0B\0B\0B\0C\0C\09\08\07\08\09\09\0A\0A\0A\0B\0B\0C\0C\0C\0D\0D\0A\09\08\09\09\0A\0A\0B\0B\0B\0C\0C\0C\0D\0D\0D\09\09\08\09\09\0A\0B\0B\0C\0B\0C\0C\0D\0D\0D\0E\0A\0A\09\09\0A\0B\0B\0B\0B\0C\0C\0C\0C\0D\0D\0E\0A\0A\09\0A\0A\0B\0B\0B\0C\0C\0D\0D\0D\0D\0F\0F\0A\0A\0A\0A\0B\0B\0B\0C\0C\0D\0D\0D\0D\0E\0E\0E\0A\0B\0A\0A\0B\0B\0C\0C\0D\0D\0D\0D\0E\0D\0E\0D\0B\0B\0B\0A\0B\0C\0C\0C\0C\0D\0E\0E\0E\0F\0F\0E\0A\0C\0B\0B\0B\0C\0C\0D\0E\0E\0E\0E\0E\0E\0D\0E\0B\0C\0C\0C\0C\0C\0D\0D\0D\0D\0F\0E\0E\0E\0E\10\0B\0E\0C\0C\0C\0D\0D\0E\0E\0E\10\0F\0F\0F\11\0F\0B\0D\0D\0B\0C\0E\0E\0D\0E\0E\0F\10\0F\11\0F\0E\0B\09\08\08\09\09\0A\0A\0A\0B\0B\0B\0B\0B\0B\0B\08", align 1
@t24HB = internal global [256 x i32] [i32 15, i32 13, i32 46, i32 80, i32 146, i32 262, i32 248, i32 434, i32 426, i32 669, i32 653, i32 649, i32 621, i32 517, i32 1032, i32 88, i32 14, i32 12, i32 21, i32 38, i32 71, i32 130, i32 122, i32 216, i32 209, i32 198, i32 327, i32 345, i32 319, i32 297, i32 279, i32 42, i32 47, i32 22, i32 41, i32 74, i32 68, i32 128, i32 120, i32 221, i32 207, i32 194, i32 182, i32 340, i32 315, i32 295, i32 541, i32 18, i32 81, i32 39, i32 75, i32 70, i32 134, i32 125, i32 116, i32 220, i32 204, i32 190, i32 178, i32 325, i32 311, i32 293, i32 271, i32 16, i32 147, i32 72, i32 69, i32 135, i32 127, i32 118, i32 112, i32 210, i32 200, i32 188, i32 352, i32 323, i32 306, i32 285, i32 540, i32 14, i32 263, i32 66, i32 129, i32 126, i32 119, i32 114, i32 214, i32 202, i32 192, i32 180, i32 341, i32 317, i32 301, i32 281, i32 262, i32 12, i32 249, i32 123, i32 121, i32 117, i32 113, i32 215, i32 206, i32 195, i32 185, i32 347, i32 330, i32 308, i32 291, i32 272, i32 520, i32 10, i32 435, i32 115, i32 111, i32 109, i32 211, i32 203, i32 196, i32 187, i32 353, i32 332, i32 313, i32 298, i32 283, i32 531, i32 381, i32 17, i32 427, i32 212, i32 208, i32 205, i32 201, i32 193, i32 186, i32 177, i32 169, i32 320, i32 303, i32 286, i32 268, i32 514, i32 377, i32 16, i32 335, i32 199, i32 197, i32 191, i32 189, i32 181, i32 174, i32 333, i32 321, i32 305, i32 289, i32 275, i32 521, i32 379, i32 371, i32 11, i32 668, i32 184, i32 183, i32 179, i32 175, i32 344, i32 331, i32 314, i32 304, i32 290, i32 277, i32 530, i32 383, i32 373, i32 366, i32 10, i32 652, i32 346, i32 171, i32 168, i32 164, i32 318, i32 309, i32 299, i32 287, i32 276, i32 263, i32 513, i32 375, i32 368, i32 362, i32 6, i32 648, i32 322, i32 316, i32 312, i32 307, i32 302, i32 292, i32 284, i32 269, i32 261, i32 512, i32 376, i32 370, i32 364, i32 359, i32 4, i32 620, i32 300, i32 296, i32 294, i32 288, i32 282, i32 273, i32 266, i32 515, i32 380, i32 374, i32 369, i32 365, i32 361, i32 357, i32 2, i32 1033, i32 280, i32 278, i32 274, i32 267, i32 264, i32 259, i32 382, i32 378, i32 372, i32 367, i32 363, i32 360, i32 358, i32 356, i32 0, i32 43, i32 20, i32 19, i32 17, i32 15, i32 13, i32 11, i32 9, i32 7, i32 6, i32 4, i32 7, i32 5, i32 3, i32 1, i32 3], align 4
@t24l = internal global [256 x i8] calign 1
@t32HB = internal global [16 x i32] [i32 1, i32 5, i32 4, i32 5, i32 6, i32 5, i32 4, i32 4, i32 7, i32 3, i32 6, i32 0, i32 7, i32 2, i32 3, i32 1], align 4
@t32l = internal global [16 x i8] c"\01\04\04\05\04\06\05\06\04\05\05\06\05\06\06\06", align 1
@t33HB = internal global [16 x i32] [i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0], align 4
@t33l = internal global [16 x i8] c"\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04", align 1
@psy_data = global [4926 x double] [double 4.800000e+04, double 6.100000e+01, double 0.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 9.700000e-01, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 7.550000e-01, double 4.690000e-01, double 2.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 7.380000e-01, double 9.380000e-01, double 3.000000e+00, double 1.000000e+00, double 2.450000e+01, double 9.040000e-01, double 7.300000e-01, double 1.406000e+00, double 4.000000e+00, double 1.000000e+00, double 2.450000e+01, double 9.040000e-01, double 7.240000e-01, double 1.875000e+00, double 5.000000e+00, double 1.000000e+00, double 2.000000e+01, double 9.000000e-02, double 7.230000e-01, double 2.344000e+00, double 6.000000e+00, double 1.000000e+00, double 2.000000e+01, double 9.000000e-02, double 7.230000e-01, double 2.813000e+00, double 7.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 7.230000e-01, double 3.281000e+00, double 8.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 7.180000e-01, double 3.750000e+00, double 9.000000e+00, double 1.000000e+00, double 2.000000e+01, double 9.000000e-03, double 6.900000e-01, double 4.199000e+00, double 1.000000e+01, double 1.000000e+00, double 2.000000e+01, double 9.000000e-03, double 6.600000e-01, double 4.625000e+00, double 1.100000e+01, double 1.000000e+00, double 1.800000e+01, double 9.000000e-03, double 6.410000e-01, double 5.047000e+00, double 1.200000e+01, double 1.000000e+00, double 1.800000e+01, double 9.000000e-03, double 6.000000e-01, double 5.438000e+00, double 1.300000e+01, double 1.000000e+00, double 1.800000e+01, double 9.000000e-03, double 5.840000e-01, double 5.828000e+00, double 1.400000e+01, double 1.000000e+00, double 1.200000e+01, double 9.000000e-03, double 5.320000e-01, double 6.188000e+00, double 1.500000e+01, double 1.000000e+00, double 1.200000e+01, double 9.000000e-03, double 5.370000e-01, double 6.522000e+00, double 1.600000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 8.570000e-01, double 7.174000e+00, double 1.700000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 8.580000e-01, double 7.801000e+00, double 1.800000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 8.530000e-01, double 8.402000e+00, double 1.900000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 8.240000e-01, double 8.966000e+00, double 2.000000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 7.780000e-01, double 9.484000e+00, double 2.100000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 7.400000e-01, double 9.966000e+00, double 2.200000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 7.090000e-01, double 1.042600e+01, double 2.300000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.760000e-01, double 1.086600e+01, double 2.400000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.320000e-01, double 1.127900e+01, double 2.500000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.920000e-01, double 1.166900e+01, double 2.600000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.530000e-01, double 1.204200e+01, double 2.700000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.100000e-01, double 1.238600e+01, double 2.800000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.130000e-01, double 1.272100e+01, double 2.900000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.080000e-01, double 1.311500e+01, double 3.000000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.730000e-01, double 1.356200e+01, double 3.100000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.370000e-01, double 1.398400e+01, double 3.200000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.860000e-01, double 1.437100e+01, double 3.300000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.710000e-01, double 1.474100e+01, double 3.400000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 6.160000e-01, double 1.514000e+01, double 3.500000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 6.400000e-01, double 1.556300e+01, double 3.600000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.980000e-01, double 1.596200e+01, double 3.700000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.380000e-01, double 1.632400e+01, double 3.800000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.120000e-01, double 1.666500e+01, double 3.900000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.280000e-01, double 1.702000e+01, double 4.000000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.170000e-01, double 1.737300e+01, double 4.100000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 4.930000e-01, double 1.770800e+01, double 4.200000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 4.990000e-01, double 1.804500e+01, double 4.300000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 5.250000e-01, double 1.839800e+01, double 4.400000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 5.410000e-01, double 1.876200e+01, double 4.500000e+01, double 8.000000e+00, double 0.000000e+00, double 7.200000e-02, double 5.280000e-01, double 1.912000e+01, double 4.600000e+01, double 8.000000e+00, double 0.000000e+00, double 7.200000e-02, double 5.100000e-01, double 1.946600e+01, double 4.700000e+01, double 8.000000e+00, double 0.000000e+00, double 7.200000e-02, double 5.060000e-01, double 1.980700e+01, double 4.800000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 5.250000e-01, double 2.015900e+01, double 4.900000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 5.360000e-01, double 2.052200e+01, double 5.000000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 5.180000e-01, double 2.087400e+01, double 5.100000e+01, double 1.300000e+01, double 0.000000e+00, double 3.720000e-01, double 5.010000e-01, double 2.121400e+01, double 5.200000e+01, double 1.300000e+01, double 0.000000e+00, double 3.720000e-01, double 4.970000e-01, double 2.155300e+01, double 5.300000e+01, double 1.400000e+01, double 0.000000e+00, double 4.000000e-01, double 4.970000e-01, double 2.189200e+01, double 5.400000e+01, double 1.800000e+01, double 0.000000e+00, double 1.627000e+00, double 4.950000e-01, double 2.223100e+01, double 5.500000e+01, double 1.800000e+01, double 0.000000e+00, double 1.627000e+00, double 4.940000e-01, double 2.256900e+01, double 5.600000e+01, double 2.000000e+01, double 0.000000e+00, double 1.808000e+00, double 4.970000e-01, double 2.290900e+01, double 5.700000e+01, double 2.500000e+01, double 0.000000e+00, double 2.260700e+01, double 4.940000e-01, double 2.324800e+01, double 5.800000e+01, double 2.500000e+01, double 0.000000e+00, double 2.260700e+01, double 4.870000e-01, double 2.358300e+01, double 5.900000e+01, double 3.500000e+01, double 0.000000e+00, double 3.165000e+01, double 4.830000e-01, double 2.391500e+01, double 6.000000e+01, double 6.700000e+01, double 0.000000e+00, double 6.058670e+02, double 4.820000e-01, double 2.424600e+01, double 6.100000e+01, double 6.700000e+01, double 0.000000e+00, double 6.058670e+02, double 5.240000e-01, double 2.457600e+01, double 4.410000e+04, double 6.200000e+01, double 0.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 9.510000e-01, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 7.000000e-01, double 4.310000e-01, double 2.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 6.810000e-01, double 8.610000e-01, double 3.000000e+00, double 1.000000e+00, double 2.450000e+01, double 9.040000e-01, double 6.750000e-01, double 1.292000e+00, double 4.000000e+00, double 1.000000e+00, double 2.450000e+01, double 9.040000e-01, double 6.670000e-01, double 1.723000e+00, double 5.000000e+00, double 1.000000e+00, double 2.000000e+01, double 9.000000e-02, double 6.650000e-01, double 2.153000e+00, double 6.000000e+00, double 1.000000e+00, double 2.000000e+01, double 9.000000e-02, double 6.640000e-01, double 2.584000e+00, double 7.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 6.640000e-01, double 3.015000e+00, double 8.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 6.640000e-01, double 3.445000e+00, double 9.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 6.550000e-01, double 3.876000e+00, double 1.000000e+01, double 1.000000e+00, double 2.000000e+01, double 9.000000e-03, double 6.160000e-01, double 4.279000e+00, double 1.100000e+01, double 1.000000e+00, double 2.000000e+01, double 9.000000e-03, double 5.970000e-01, double 4.670000e+00, double 1.200000e+01, double 1.000000e+00, double 1.800000e+01, double 9.000000e-03, double 5.780000e-01, double 5.057000e+00, double 1.300000e+01, double 1.000000e+00, double 1.800000e+01, double 9.000000e-03, double 5.410000e-01, double 5.416000e+00, double 1.400000e+01, double 1.000000e+00, double 1.800000e+01, double 9.000000e-03, double 5.750000e-01, double 5.774000e+00, double 1.500000e+01, double 2.000000e+00, double 1.200000e+01, double 1.800000e-02, double 8.560000e-01, double 6.422000e+00, double 1.600000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 8.460000e-01, double 7.026000e+00, double 1.700000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 8.400000e-01, double 7.609000e+00, double 1.800000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 8.220000e-01, double 8.168000e+00, double 1.900000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 8.000000e-01, double 8.710000e+00, double 2.000000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 7.530000e-01, double 9.207000e+00, double 2.100000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 7.040000e-01, double 9.662000e+00, double 2.200000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.740000e-01, double 1.009900e+01, double 2.300000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.400000e-01, double 1.051500e+01, double 2.400000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.090000e-01, double 1.091700e+01, double 2.500000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.660000e-01, double 1.129300e+01, double 2.600000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.350000e-01, double 1.165200e+01, double 2.700000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.310000e-01, double 1.199700e+01, double 2.800000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.150000e-01, double 1.239400e+01, double 2.900000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.860000e-01, double 1.285000e+01, double 3.000000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.500000e-01, double 1.327700e+01, double 3.100000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.120000e-01, double 1.368100e+01, double 3.200000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.670000e-01, double 1.406200e+01, double 3.300000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.200000e-01, double 1.441100e+01, double 3.400000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.130000e-01, double 1.475100e+01, double 3.500000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.570000e-01, double 1.511900e+01, double 3.600000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.840000e-01, double 1.550800e+01, double 3.700000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.700000e-01, double 1.588300e+01, double 3.800000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.790000e-01, double 1.626300e+01, double 3.900000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.850000e-01, double 1.665400e+01, double 4.000000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.480000e-01, double 1.702000e+01, double 4.100000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.360000e-01, double 1.737400e+01, double 4.200000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.500000e-01, double 1.774400e+01, double 4.300000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 5.320000e-01, double 1.810400e+01, double 4.400000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 5.040000e-01, double 1.844700e+01, double 4.500000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 4.960000e-01, double 1.878200e+01, double 4.600000e+01, double 9.000000e+00, double 0.000000e+00, double 8.100000e-02, double 5.170000e-01, double 1.913000e+01, double 4.700000e+01, double 9.000000e+00, double 0.000000e+00, double 8.100000e-02, double 5.270000e-01, double 1.948700e+01, double 4.800000e+01, double 9.000000e+00, double 0.000000e+00, double 8.100000e-02, double 5.160000e-01, double 1.983800e+01, double 4.900000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 4.970000e-01, double 2.017900e+01, double 5.000000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 4.890000e-01, double 2.051000e+01, double 5.100000e+01, double 1.100000e+01, double 0.000000e+00, double 1.980000e-01, double 5.020000e-01, double 2.085200e+01, double 5.200000e+01, double 1.400000e+01, double 0.000000e+00, double 4.000000e-01, double 5.010000e-01, double 2.119600e+01, double 5.300000e+01, double 1.400000e+01, double 0.000000e+00, double 4.000000e-01, double 4.910000e-01, double 2.153100e+01, double 5.400000e+01, double 1.500000e+01, double 0.000000e+00, double 4.290000e-01, double 4.970000e-01, double 2.187000e+01, double 5.500000e+01, double 2.000000e+01, double 0.000000e+00, double 1.808000e+00, double 5.040000e-01, double 2.221400e+01, double 5.600000e+01, double 2.000000e+01, double 0.000000e+00, double 1.808000e+00, double 5.040000e-01, double 2.255800e+01, double 5.700000e+01, double 2.100000e+01, double 0.000000e+00, double 1.898000e+00, double 4.950000e-01, double 2.289800e+01, double 5.800000e+01, double 2.700000e+01, double 0.000000e+00, double 2.441600e+01, double 4.860000e-01, double 2.323200e+01, double 5.900000e+01, double 2.700000e+01, double 0.000000e+00, double 2.441600e+01, double 4.840000e-01, double 2.356400e+01, double 6.000000e+01, double 3.600000e+01, double 0.000000e+00, double 3.255400e+01, double 4.830000e-01, double 2.389700e+01, double 6.100000e+01, double 7.300000e+01, double 0.000000e+00, double 6.601240e+02, double 4.750000e-01, double 2.422900e+01, double 6.200000e+01, double 1.800000e+01, double 0.000000e+00, double 1.627700e+02, double 5.150000e-01, double 2.444200e+01, double 3.200000e+04, double 5.800000e+01, double 0.000000e+00, double 2.000000e+00, double 2.450000e+01, double 4.532000e+00, double 9.970000e-01, double 3.130000e-01, double 1.000000e+00, double 2.000000e+00, double 2.450000e+01, double 4.532000e+00, double 8.930000e-01, double 9.380000e-01, double 2.000000e+00, double 2.000000e+00, double 2.450000e+01, double 1.809000e+00, double 8.810000e-01, double 1.563000e+00, double 3.000000e+00, double 2.000000e+00, double 2.000000e+01, double 1.810000e-01, double 8.730000e-01, double 2.188000e+00, double 4.000000e+00, double 2.000000e+00, double 2.000000e+01, double 1.810000e-01, double 8.720000e-01, double 2.813000e+00, double 5.000000e+00, double 2.000000e+00, double 2.000000e+01, double 5.700000e-02, double 8.710000e-01, double 3.438000e+00, double 6.000000e+00, double 2.000000e+00, double 2.000000e+01, double 1.800000e-02, double 8.600000e-01, double 4.045000e+00, double 7.000000e+00, double 2.000000e+00, double 2.000000e+01, double 1.800000e-02, double 8.390000e-01, double 4.625000e+00, double 8.000000e+00, double 2.000000e+00, double 1.800000e+01, double 1.800000e-02, double 8.120000e-01, double 5.173000e+00, double 9.000000e+00, double 2.000000e+00, double 1.800000e+01, double 1.800000e-02, double 7.840000e-01, double 5.698000e+00, double 1.000000e+01, double 2.000000e+00, double 1.200000e+01, double 1.800000e-02, double 7.410000e-01, double 6.185000e+00, double 1.100000e+01, double 2.000000e+00, double 1.200000e+01, double 1.800000e-02, double 6.970000e-01, double 6.634000e+00, double 1.200000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 6.740000e-01, double 7.070000e+00, double 1.300000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 6.510000e-01, double 7.492000e+00, double 1.400000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 6.330000e-01, double 7.905000e+00, double 1.500000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 6.110000e-01, double 8.305000e+00, double 1.600000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 5.890000e-01, double 8.695000e+00, double 1.700000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 5.750000e-01, double 9.064000e+00, double 1.800000e+01, double 3.000000e+00, double 3.000000e+00, double 2.700000e-02, double 6.540000e-01, double 9.484000e+00, double 1.900000e+01, double 3.000000e+00, double 3.000000e+00, double 2.700000e-02, double 7.240000e-01, double 9.966000e+00, double 2.000000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 7.010000e-01, double 1.042600e+01, double 2.100000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.730000e-01, double 1.086600e+01, double 2.200000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.310000e-01, double 1.127900e+01, double 2.300000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.920000e-01, double 1.166900e+01, double 2.400000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.530000e-01, double 1.204200e+01, double 2.500000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.100000e-01, double 1.238600e+01, double 2.600000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.060000e-01, double 1.272100e+01, double 2.700000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.620000e-01, double 1.309100e+01, double 2.800000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.980000e-01, double 1.348800e+01, double 2.900000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.890000e-01, double 1.387300e+01, double 3.000000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 6.070000e-01, double 1.426800e+01, double 3.100000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 6.200000e-01, double 1.467900e+01, double 3.200000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.800000e-01, double 1.506700e+01, double 3.300000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.320000e-01, double 1.542400e+01, double 3.400000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.170000e-01, double 1.577100e+01, double 3.500000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.170000e-01, double 1.612000e+01, double 3.600000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.090000e-01, double 1.646600e+01, double 3.700000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.060000e-01, double 1.680700e+01, double 3.800000e+01, double 8.000000e+00, double 0.000000e+00, double 7.200000e-02, double 5.220000e-01, double 1.715800e+01, double 3.900000e+01, double 8.000000e+00, double 0.000000e+00, double 7.200000e-02, double 5.310000e-01, double 1.751800e+01, double 4.000000e+01, double 8.000000e+00, double 0.000000e+00, double 7.200000e-02, double 5.190000e-01, double 1.786900e+01, double 4.100000e+01, double 1.000000e+01, double 0.000000e+00, double 9.000000e-02, double 5.120000e-01, double 1.821500e+01, double 4.200000e+01, double 1.000000e+01, double 0.000000e+00, double 9.000000e-02, double 5.090000e-01, double 1.856300e+01, double 4.300000e+01, double 1.000000e+01, double 0.000000e+00, double 9.000000e-02, double 4.980000e-01, double 1.890200e+01, double 4.400000e+01, double 1.200000e+01, double 0.000000e+00, double 1.090000e-01, double 4.940000e-01, double 1.923900e+01, double 4.500000e+01, double 1.200000e+01, double 0.000000e+00, double 1.090000e-01, double 5.010000e-01, double 1.958000e+01, double 4.600000e+01, double 1.300000e+01, double 0.000000e+00, double 1.180000e-01, double 5.080000e-01, double 1.992500e+01, double 4.700000e+01, double 1.400000e+01, double 0.000000e+00, double 2.520000e-01, double 5.020000e-01, double 2.026900e+01, double 4.800000e+01, double 1.400000e+01, double 0.000000e+00, double 2.520000e-01, double 4.930000e-01, double 2.060600e+01, double 4.900000e+01, double 1.600000e+01, double 0.000000e+00, double 2.880000e-01, double 4.970000e-01, double 2.094400e+01, double 5.000000e+01, double 2.000000e+01, double 0.000000e+00, double 5.720000e-01, double 5.060000e-01, double 2.128800e+01, double 5.100000e+01, double 2.000000e+01, double 0.000000e+00, double 5.720000e-01, double 5.100000e-01, double 2.163500e+01, double 5.200000e+01, double 2.300000e+01, double 0.000000e+00, double 6.580000e-01, double 5.040000e-01, double 2.198000e+01, double 5.300000e+01, double 2.700000e+01, double 0.000000e+00, double 2.441000e+00, double 4.960000e-01, double 2.231900e+01, double 5.400000e+01, double 2.700000e+01, double 0.000000e+00, double 2.441000e+00, double 4.930000e-01, double 2.265600e+01, double 5.500000e+01, double 3.200000e+01, double 0.000000e+00, double 2.893000e+00, double 4.900000e-01, double 2.299300e+01, double 5.600000e+01, double 3.700000e+01, double 0.000000e+00, double 3.345800e+01, double 4.820000e-01, double 2.332600e+01, double 5.700000e+01, double 3.700000e+01, double 0.000000e+00, double 3.345800e+01, double 4.580000e-01, double 2.365600e+01, double 5.800000e+01, double 1.200000e+01, double 0.000000e+00, double 1.085100e+01, double 5.000000e-01, double 2.393700e+01, double 2.400000e+04, double 5.900000e+01, double 0.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x4031D3345F831D56, double 0x3FE650E39FF80286, double 0x3FCE51E6FFA05619, double 1.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x4031D3345F831D56, double 0x3FDD1F206061836C, double 0x3FE6B9A39FD7CC2F, double 2.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FDB9CB86036D507, double 0x3FF2E93260D04F63, double 3.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FDB21719F7F8CA8, double 0x3FFA6A9B9F833D8D, double 4.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FC6D0E700DE29F5, double 0x3FDAC3E65FD7115B, double 0x4000EE3C206CB205, double 5.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FC6D0E700DE29F5, double 0x3FDA576A7FD09AB8, double 0x40049D383F6194C5, double 6.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD9F2393FB4176C, double 0x4008403BBF73C8D0, double 7.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD9949C602EA515, double 0x400BD56B9F605804, double 8.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD93340C075B7A3, double 0x400F5B1C407D739E, double 9.000000e+00, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD8CA76FF995B64, double 0x401167EA3FFA40F9, double 1.000000e+01, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD8595E1FF0E129, double 0x4013192760413351, double 1.100000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD7E01D7FA051CD, double 0x4014C0BCBFB968ED, double 1.200000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD75F3E00382B8D, double 0x40165E3AFFDB4206, double 1.300000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD6D769BF9D7582, double 0x4017F14BA01182DF, double 1.400000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD6511C603B879E, double 0x401979AEFFB2524D, double 1.500000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD5C6D2002C3989, double 0x401AF73B7FDDDBBE, double 1.600000e+01, double 2.000000e+00, double 6.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD545135FD92E85, double 0x401C69DAFFEB5D31, double 1.700000e+01, double 2.000000e+00, double 6.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD5264D9FCE9A8B, double 0x401DD18900444884, double 1.800000e+01, double 2.000000e+00, double 6.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD61DCAC01BFE27, double 0x401F2E51400E8DE2, double 1.900000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD82EDA3FF45925, double 0x402068BBC00A1BB8, double 2.000000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD9635C00060A30, double 0x40215A51400E8DE2, double 2.100000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD90A0AA041FF54, double 0x4022404FFFF29407, double 2.200000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD82ACEC06CED13, double 0x40231B20601CCB3D, double 2.300000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD738B7E0094831, double 0x4023EB37BFDFD466, double 2.400000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD65630A07E31AC, double 0x4024B113800F84D8, double 2.500000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5BD35DFA4AF91, double 0x40256D35A1A27C97, double 2.600000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD601917FEFA468, double 0x40262021C044284E, double 2.700000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6C5CC7F975C4A, double 0x4026E51F81A5870E, double 2.800000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6EB2E7FCDC92A, double 0x4027B9BB7EC6AF7C, double 2.900000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD63CB0E05D2270, double 0x402881097FDB8272, double 3.000000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD56F75808212E2, double 0x40293C1B7FB84704, double 3.100000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD539A4A0779E0B, double 0x4029EBF180E13BF0, double 3.200000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD555EA7F879705, double 0x402AA4D3613B843B, double 3.300000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD5449DBFD528CD, double 0x402B6536BED8EE43, double 3.400000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 3.314417e-01, double 0x402C187980F55DE6, double 3.500000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD52E3D20831381, double 0x402CCF83BE6601BD, double 3.600000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD547508039E5EF, double 0x402D89763FF83D94, double 3.700000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD54A18DFC23F4D, double 0x402E43607F9C9852, double 3.800000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD52C81A02012E7, double 0x402EFCF3DF604D48, double 3.900000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4FA2E604BD653, double 0x402FB406FFCE81D9, double 4.000000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4C5CC9FCDB29D, double 0x403034628027D88C, double 4.100000e+01, double 9.000000e+00, double 0.000000e+00, double 0x3FB488CFDFE12D80, double 0x3FD4B98C804DE588, double 0x40308CDBBFAED719, double 4.200000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD4920F5F77118D, double 0x4030E8209FB2B84F, double 4.300000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD45D369FD7D4C6, double 0x403140F3FF40BD5F, double 4.400000e+01, double 1.100000e+01, double 0.000000e+00, double 0x3FB918FDFFED0219, double 0x3FD43843DF8F0278, double 0x40319711805B0433, double 4.500000e+01, double 1.200000e+01, double 0.000000e+00, double 0x3FBB61152157F20D, double 0x3FD4336F1FBFDB44, double 0x4031EE709FA54C55, double 4.600000e+01, double 1.300000e+01, double 0.000000e+00, double 0x3FBDA92C409D2084, double 0x3FD442AE200E684E, double 0x4032466B20098AC3, double 4.700000e+01, double 1.400000e+01, double 0.000000e+00, double 0x3FBFF1435FE24EFB, double 3.165600e-01, double 0x40329E814006804D, double 4.800000e+01, double 1.500000e+01, double 0.000000e+00, double 0x3FC11CAD3F93BEB9, double 0x3FD4309820143EF4, double 0x4032F65120840406, double 4.900000e+01, double 1.600000e+01, double 0.000000e+00, double 0x3FC240B8C02E0B8A, double 0x3FD411A280593CEE, double 0x40334D8EDF2B7422, double 5.000000e+01, double 1.700000e+01, double 0.000000e+00, double 0x3FC364C440C8585A, double 0x3FD3F1D7FFECF0EB, double 0x4033A3FD80C9BEFB, double 5.100000e+01, double 1.800000e+01, double 0.000000e+00, double 0x3FC488CFDF733A01, double 0x3FD3E8846018E6CE, double 0x4033F969C08DFA29, double 5.200000e+01, double 2.000000e+01, double 0.000000e+00, double 0x3FD6C310E03BD939, double 0x3FD3EF0DA037D494, double 0x40344FC47FF73124, double 5.300000e+01, double 2.100000e+01, double 0.000000e+00, double 0x3FD7E66B5FDB98FF, double 0x3FD3F5B5FF80D426, double 0x4034A6997F986694, double 5.400000e+01, double 2.300000e+01, double 0.000000e+00, double 0x3FDA2D203FF7A2F5, double 0x3FD3E7AF807A7D8E, double 0x4034FD347F638D6E, double 5.500000e+01, double 2.400000e+01, double 0.000000e+00, double 0x3FE5A52AA022DBDE, double 0x3FD3CA0F2061FDD5, double 0x4035533ABFEF6EB8, double 5.600000e+01, double 2.600000e+01, double 0.000000e+00, double 0x3FE772EE1FBEF357, double 3.081128e-01, double 0x4035A816BF5F2600, double 5.700000e+01, double 2.800000e+01, double 0.000000e+00, double 0x3FE940B19FE47B2E, double 0x3FD3D725E0532B3A, double 0x4035FCF7C0965DA5, double 5.800000e+01, double 3.100000e+01, double 0.000000e+00, double 0x40061A5FBFD91E6A, double 0x3FD4EF6BC00EF0AB, double 0x403652814006804D, double 5.900000e+01, double 3.400000e+01, double 0.000000e+00, double 0x40083DF55FBE00AC, double 0x3FDAA117DF9218BE, double 0x4036A917BF396653, double 2.205000e+04, double 5.900000e+01, double 0.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x4031D3345F831D56, double 0x3FE513EF9FFA4AA3, double 0x3FCBDB8CDF882188, double 1.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x4031D3345F831D56, double 0x3FDBAEFAC0613FC7, double 0x3FE4E1CCC0266508, double 2.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FD9ED61802B3C21, double 0x3FF1619D00AC4D50, double 3.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FD96C3EDF862F51, double 0x3FF849DF3F153EAC, double 4.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FD917FB1F81B6B5, double 0x3FFF2614BF54BF1F, double 5.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FC6D0E700DE29F5, double 0x3FD8C123A031FDEE, double 0x4002F967003F4007, double 6.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FC6D0E700DE29F5, double 0x3FD85B55C06AAD8D, double 0x40065666FF688072, double 7.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD805133FA2D832, double 0x4009A889006F3BA2, double 8.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD7AF84006EFF81, double 0x400CEE6BBF6BBB3A, double 9.000000e+00, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD755175FA94418, double 0x40101368C032E07D, double 1.000000e+01, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD6F93160307D87, double 0x4011A84FE01223EF, double 1.100000e+01, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD6968A606BA595, double 0x40133570FFC775F6, double 1.200000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 3.465029e-01, double 0x4014BA64401B7902, double 1.300000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD5BD552017F86F, double 0x401636D3DFBB91E7, double 1.400000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD548DA00895F31, double 0x4017AA7B7FFE1214, double 1.500000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD4DD70BFC1DD97, double 0x40191527C03869D4, double 1.600000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD4D40AE0140D8F, double 0x401A76B48024D374, double 1.700000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD5D81AFFF1CE75, double 0x401BCF0C402A3C95, double 1.800000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD7FFBEBFCC66D4, double 0x401D6F0B000E42B9, double 1.900000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD95A53A032875E, double 0x401F50FD9FD36F7E, double 2.000000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD9224F1FCDD0AE, double 0x40208F3C40222EFF, double 2.100000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD85E4A3FB69BAA, double 0x40216BF2000D1613, double 2.200000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD78341DFAF8EB5, double 0x40223EE4FFF46C79, double 2.300000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD6ADB3FF98C95C, double 0x40230866DFDDF696, double 2.400000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5DB460084232A, double 0x4023C8D23FFE47C4, double 2.500000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD559571FDDA721, double 0x4024808821A21137, double 2.600000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5A392DFC9B244, double 0x40252FECA0A7AAD4, double 2.700000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD672990027D441, double 0x4025F1D7C11C9562, double 2.800000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6B0726067155A, double 1.138272e+01, double 2.900000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD618F83FD365D4, double 0x402789BA1E745F4D, double 3.000000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD55D73A0581C18, double 0x4028440DE16A12C3, double 3.100000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD536422024D261, double 0x4028F3C73EEE5259, double 3.200000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD56315605BD7BA, double 0x4029AD2740B6A975, double 3.300000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD560A9C07AA65C, double 0x402A6E9B2159161C, double 3.400000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD55F0C5FB4C671, double 0x402B235A3F10B707, double 3.500000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD563D5FFF3B815, double 0x402BDC5CBF1DB7A1, double 3.600000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD587A9002DBC15, double 0x402C98ACC0BDCAD1, double 3.700000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD592B99FB83077, double 0x402D5547BEDB7282, double 3.800000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD57A873FCFCEB5, double 0x402E11C30171F007, double 3.900000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD547F0A077C067, double 0x402ECBD8E0008638, double 4.000000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4F97D1FF77D61, double 0x402F839B7E7627A5, double 4.100000e+01, double 9.000000e+00, double 0.000000e+00, double 0x3FB488CFDFE12D80, double 0x3FD4A1549FA5B36A, double 0x40301BBC5F973F4C, double 4.200000e+01, double 9.000000e+00, double 0.000000e+00, double 0x3FB488CFDFE12D80, double 0x3FD45326DF790810, double 0x403073EE1F2CEBF1, double 4.300000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD43EBD5FC765DB, double 0x4030C9E260B2C83F, double 4.400000e+01, double 1.100000e+01, double 0.000000e+00, double 0x3FB918FDFFED0219, double 0x3FD4539A9F86A122, double 1.713200e+01, double 4.500000e+01, double 1.200000e+01, double 0.000000e+00, double 0x3FBB61152157F20D, double 0x3FD479FB5F987D20, double 0x40317AC73FC511ED, double 4.600000e+01, double 1.300000e+01, double 0.000000e+00, double 0x3FBDA92C409D2084, double 0x3FD489539FD40A1D, double 0x4031D42A00848A3E, double 4.700000e+01, double 1.400000e+01, double 0.000000e+00, double 0x3FBFF1435FE24EFB, double 0x3FD4808EBFBAAF58, double 0x40322D701F4CCC61, double 4.800000e+01, double 1.500000e+01, double 0.000000e+00, double 0x3FC11CAD3F93BEB9, double 0x3FD46469803B1294, double 0x40328639A034BE4E, double 4.900000e+01, double 1.600000e+01, double 0.000000e+00, double 0x3FC240B8C02E0B8A, double 0x3FD43B67807DFAE9, double 0x4032DE40A0034026, double 5.000000e+01, double 1.700000e+01, double 0.000000e+00, double 0x3FC364C440C8585A, double 0x3FD4146ADFE1964C, double 0x403335515F6E24A1, double 5.100000e+01, double 1.800000e+01, double 0.000000e+00, double 0x3FC488CFDF733A01, double 0x3FD407BAC0410971, double 0x40338B43BF727137, double 5.200000e+01, double 2.000000e+01, double 0.000000e+00, double 0x3FC6D0E700DE29F5, double 0x3FD40CC2FF7721A8, double 0x4033E2189F33368E, double 5.300000e+01, double 2.100000e+01, double 0.000000e+00, double 0x3FD7E66B5FDB98FF, double 0x3FD4143E5F7AFE93, double 0x40343968405B39E2, double 5.400000e+01, double 2.300000e+01, double 0.000000e+00, double 0x3FDA2D203FF7A2F5, double 0x3FD409955FCE1BD7, double 0x4034908B7FFB62E2, double 5.500000e+01, double 2.400000e+01, double 0.000000e+00, double 0x3FDB507AA073ED26, double 0x3FD3F0A2E0145247, double 0x4034E7343FA2AD3F, double 5.600000e+01, double 2.600000e+01, double 0.000000e+00, double 0x3FE772EE1FBEF357, double 0x3FD3DE2DDFD9914E, double 0x40353CD83FC7962C, double 5.700000e+01, double 2.800000e+01, double 0.000000e+00, double 0x3FE940B19FE47B2E, double 0x3FD3ECB51F8703EB, double 0x403592B4004D2CD9, double 5.800000e+01, double 3.000000e+01, double 0.000000e+00, double 0x3FEB0E7540405959, double 0x3FD4F28A00746F13, double 0x4035E81C40A866BC, double 5.900000e+01, double 3.300000e+01, double 0.000000e+00, double 0x4007876E2099FE6E, double 0x3FDA89C9007E43ED, double 0x40363DB9C0808E30, double 1.600000e+04, double 5.500000e+01, double 0.000000e+00, double 3.000000e+00, double 1.500000e+01, double 0x403ABCCE9F34E40D, double 0x3FE650E39FF80286, double 0x3FCE51E6FFA05619, double 1.000000e+00, double 3.000000e+00, double 1.500000e+01, double 0x403ABCCE9F34E40D, double 0x3FDD1F206061836C, double 0x3FE6B9A39FD7CC2F, double 2.000000e+00, double 3.000000e+00, double 1.500000e+01, double 0x400563D87F5D833E, double 0x3FDB9CB86036D507, double 0x3FF2E93260D04F63, double 3.000000e+00, double 3.000000e+00, double 1.500000e+01, double 0x400563D87F5D833E, double 0x3FDB21719F7F8CA8, double 0x3FFA6A9B9F833D8D, double 4.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FD11CAD3F93BEB9, double 0x3FDAC3E65FD7115B, double 0x4000EE3C206CB205, double 5.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FD11CAD3F93BEB9, double 0x3FDA576A7FD09AB8, double 0x40049D383F6194C5, double 6.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FB5A52A9FD0653F, double 0x3FD9F2393FB4176C, double 0x4008403BBF73C8D0, double 7.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FB5A52A9FD0653F, double 0x3FD9949C602EA515, double 0x400BD56B9F605804, double 8.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FB5A52A9FD0653F, double 0x3FD93340C075B7A3, double 0x400F5B1C407D739E, double 9.000000e+00, double 3.000000e+00, double 1.200000e+01, double 0x3F9B61151FA0240F, double 0x3FD8CA76FF995B64, double 0x401167EA3FFA40F9, double 1.000000e+01, double 3.000000e+00, double 1.200000e+01, double 0x3F9B61151FA0240F, double 0x3FD8595E1FF0E129, double 0x4013192760413351, double 1.100000e+01, double 3.000000e+00, double 1.000000e+01, double 0x3F9B61151FA0240F, double 0x3FD7E01D7FA051CD, double 0x4014C0BCBFB968ED, double 1.200000e+01, double 3.000000e+00, double 1.000000e+01, double 0x3F9B61151FA0240F, double 0x3FD75F3E00382B8D, double 0x40165E3AFFDB4206, double 1.300000e+01, double 3.000000e+00, double 1.000000e+01, double 0x3F9B61151FA0240F, double 0x3FD6D769A079FFEE, double 0x4017F14BA01182DF, double 1.400000e+01, double 3.000000e+00, double 9.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD651180051DF71, double 0x401979AEFFB2524D, double 1.500000e+01, double 3.000000e+00, double 9.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5C684606ECD0A, double 0x401AF73B7FDDDBBE, double 1.600000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD540F42011B21E, double 0x401C69DAFFEB5D31, double 1.700000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD502BF4024E6C8, double 0x401DD18900444884, double 1.800000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD58A710025F337, double 0x401F2E51400E8DE2, double 1.900000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6B1C63FD9A38F, double 0x40205B4740057E9A, double 2.000000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD75166BFD29360, double 0x4021332CA01C14B4, double 2.100000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6FFE85F9CC00C, double 0x402201DC9FFE8D8F, double 2.200000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD641F5A04D096B, double 0x4022C79E5FFCEACD, double 2.300000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD579DB803B461F, double 0x402384C1FFEA308B, double 2.400000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD4ED61802B3C21, double 0x4024399D3E69C81B, double 2.500000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD4FD65FFC1CA43, double 0x4024E68A3F8982CB, double 2.600000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD567A4207D9B59, double 0x40259F8BDEC5F395, double 2.700000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD57460BFDE51DA, double 0x40266315E112D4EF, double 2.800000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD518183F91E647, double 0x40271C1FA0AF3791, double 2.900000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD4E860BFBBF5C3, double 0x4027CB567F6895EC, double 3.000000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD4ED58FFB1B7AF, double 0x402881097FDB8272, double 3.100000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD4CDFB9FE2CDAF, double 0x40293C1B7FB84704, double 3.200000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD4B53620561467, double 0x4029EBF180E13BF0, double 3.300000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD4A3BF1FC39D57, double 0x402A9E67E190A930, double 3.400000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD4B2A46024B676, double 0x402B52CD5EC303F6, double 3.500000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4AFD6C0493962, double 0x402C06E51ED329DE, double 3.600000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4A6801FA89A71, double 0x402CBA5B6078E69C, double 3.700000e+01, double 9.000000e+00, double 0.000000e+00, double 0x3FB488CFDFE12D80, double 0x3FD4BD4DFFCE6814, double 0x402D6B71001D5C31, double 3.800000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD4AFC7DFB949C9, double 0x402E2326A15478FE, double 3.900000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD48732C02CE77B, double 0x402ED694BF3F4590, double 4.000000e+01, double 1.100000e+01, double 0.000000e+00, double 0x3FB918FDFFED0219, double 0x3FD4679A007A56E7, double 0x402F84D0BEC9D4CB, double 4.100000e+01, double 1.200000e+01, double 0.000000e+00, double 0x3FBB61152157F20D, double 0x3FD460F8C06806F2, double 0x40301AC43F5F9160, double 4.200000e+01, double 1.300000e+01, double 0.000000e+00, double 0x3FBDA92C409D2084, double 0x3FD46699407224CF, double 0x4030738FFFBCE421, double 4.300000e+01, double 1.400000e+01, double 0.000000e+00, double 0x3FBFF1435FE24EFB, double 0x3FD456F0A0194326, double 0x4030CC2B80B74A85, double 4.400000e+01, double 1.500000e+01, double 0.000000e+00, double 0x3FC11CAD3F93BEB9, double 0x3FD433ABDFD375F0, double 0x4031241F3F606820, double 4.500000e+01, double 1.600000e+01, double 0.000000e+00, double 0x3FC240B8C02E0B8A, double 0x3FD40E3D004CBD2E, double 0x40317B16C035E595, double 4.600000e+01, double 1.700000e+01, double 0.000000e+00, double 0x3FC364C440C8585A, double 0x3FD4003A1FEA08D0, double 0x4031D0D9A019E65B, double 4.700000e+01, double 1.900000e+01, double 0.000000e+00, double 0x3FC5ACDB600D86D1, double 0x3FD404ABE031F331, double 0x403227829F8210E7, double 4.800000e+01, double 2.000000e+01, double 0.000000e+00, double 0x3FC6D0E700DE29F5, double 0x3FD40F5D1FEBADB9, double 0x40327EAF00332BA6, double 4.900000e+01, double 2.200000e+01, double 0.000000e+00, double 0x3FC918FDFFED0219, double 0x3FD40C6E7FDCD174, double 0x4032D5C37F46313D, double 5.000000e+01, double 2.300000e+01, double 0.000000e+00, double 0x3FCA3D09A0BDA53D, double 0x3FD40127601ED739, double 0x40332C8FE0B3339F, double 5.100000e+01, double 2.500000e+01, double 0.000000e+00, double 0x3FCC85209FCC7D60, double 0x3FD401313FB56F05, double 0x403382AABF5BCB02, double 5.200000e+01, double 2.700000e+01, double 0.000000e+00, double 0x3FCECD37BF11ABD8, double 0x3FD408F9DFE69633, double 0x4033D98A6040B278, double 5.300000e+01, double 2.900000e+01, double 0.000000e+00, double 0x3FE0809F80410B97, double 0x3FD429701FE76ACD, double 0x403430A80064A9CE, double 5.400000e+01, double 3.100000e+01, double 0.000000e+00, double 0x3FE1A3F9E033E568, double 0x3FD528C5FFDCA235, double 0x4034878CFF576394, double 5.500000e+01, double 3.300000e+01, double 0.000000e+00, double 0x3FE2C7545FD3A52E, double 0x3FDAC3C7C073781D, double 0x4034DDCEFFACF3E9, double 4.800000e+04, double 3.700000e+01, double 0.000000e+00, double 1.000000e+00, double 4.532000e+00, double 1.000000e+00, double -8.240000e+00, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 9.040000e-01, double 9.890000e-01, double -8.240000e+00, double 1.875000e+00, double 2.000000e+00, double 1.000000e+00, double 2.900000e-02, double 9.890000e-01, double -8.240000e+00, double 3.750000e+00, double 3.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.810000e-01, double -8.240000e+00, double 5.438000e+00, double 4.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.850000e-01, double -8.240000e+00, double 6.857000e+00, double 5.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.840000e-01, double -8.240000e+00, double 8.109000e+00, double 6.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.800000e-01, double -8.240000e+00, double 9.237000e+00, double 7.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.680000e-01, double -8.240000e+00, double 1.020200e+01, double 8.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.540000e-01, double -8.240000e+00, double 1.108300e+01, double 9.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.290000e-01, double -8.240000e+00, double 1.186500e+01, double 1.000000e+01, double 1.000000e+00, double 9.000000e-03, double 9.060000e-01, double -7.447000e+00, double 1.255400e+01, double 1.100000e+01, double 1.000000e+00, double 9.000000e-03, double 8.830000e-01, double -7.447000e+00, double 1.319500e+01, double 1.200000e+01, double 1.000000e+00, double 9.000000e-03, double 8.440000e-01, double -7.447000e+00, double 1.378100e+01, double 1.300000e+01, double 1.000000e+00, double 9.000000e-03, double 7.920000e-01, double -7.447000e+00, double 1.430900e+01, double 1.400000e+01, double 1.000000e+00, double 9.000000e-03, double 7.470000e-01, double -7.447000e+00, double 1.480300e+01, double 1.500000e+01, double 1.000000e+00, double 9.000000e-03, double 6.890000e-01, double -7.447000e+00, double 1.525000e+01, double 1.600000e+01, double 1.000000e+00, double 9.000000e-03, double 6.440000e-01, double -7.447000e+00, double 1.566700e+01, double 1.700000e+01, double 1.000000e+00, double 9.000000e-03, double 5.920000e-01, double -7.447000e+00, double 1.606800e+01, double 1.800000e+01, double 1.000000e+00, double 9.000000e-03, double 5.530000e-01, double -7.447000e+00, double 1.640900e+01, double 1.900000e+01, double 2.000000e+00, double 1.800000e-02, double 8.500000e-01, double -7.447000e+00, double 1.704500e+01, double 2.000000e+01, double 2.000000e+00, double 1.800000e-02, double 8.110000e-01, double -6.990000e+00, double 1.760700e+01, double 2.100000e+01, double 2.000000e+00, double 1.800000e-02, double 7.360000e-01, double -6.990000e+00, double 1.809700e+01, double 2.200000e+01, double 2.000000e+00, double 1.800000e-02, double 6.650000e-01, double -6.990000e+00, double 1.852800e+01, double 2.300000e+01, double 2.000000e+00, double 1.800000e-02, double 6.100000e-01, double -6.990000e+00, double 1.893100e+01, double 2.400000e+01, double 2.000000e+00, double 1.800000e-02, double 5.440000e-01, double -6.990000e+00, double 1.929500e+01, double 2.500000e+01, double 2.000000e+00, double 1.800000e-02, double 5.280000e-01, double -6.990000e+00, double 1.963600e+01, double 2.600000e+01, double 3.000000e+00, double 5.400000e-02, double 6.210000e-01, double -6.990000e+00, double 2.003800e+01, double 2.700000e+01, double 3.000000e+00, double 5.400000e-02, double 6.730000e-01, double -6.990000e+00, double 2.048600e+01, double 2.800000e+01, double 3.000000e+00, double 5.400000e-02, double 6.350000e-01, double -6.990000e+00, double 2.090000e+01, double 2.900000e+01, double 4.000000e+00, double 1.140000e-01, double 6.260000e-01, double -6.990000e+00, double 2.130600e+01, double 3.000000e+01, double 4.000000e+00, double 1.140000e-01, double 6.360000e-01, double -6.020000e+00, double 2.172200e+01, double 3.100000e+01, double 5.000000e+00, double 4.520000e-01, double 6.150000e-01, double -6.020000e+00, double 2.212800e+01, double 3.200000e+01, double 5.000000e+00, double 4.520000e-01, double 5.790000e-01, double -6.020000e+00, double 2.251300e+01, double 3.300000e+01, double 5.000000e+00, double 4.520000e-01, double 5.510000e-01, double -6.020000e+00, double 2.287700e+01, double 3.400000e+01, double 7.000000e+00, double 6.330000e+00, double 5.520000e-01, double -5.229000e+00, double 2.324100e+01, double 3.500000e+01, double 7.000000e+00, double 6.330000e+00, double 5.590000e-01, double -5.229000e+00, double 2.361600e+01, double 3.600000e+01, double 1.100000e+01, double 9.947000e+00, double 5.280000e-01, double -5.229000e+00, double 2.397400e+01, double 3.700000e+01, double 1.700000e+01, double 1.537270e+02, double 4.790000e-01, double -5.229000e+00, double 2.431300e+01, double 4.410000e+04, double 3.800000e+01, double 0.000000e+00, double 1.000000e+00, double 4.532000e+00, double 1.000000e+00, double -8.240000e+00, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 9.040000e-01, double 9.830000e-01, double -8.240000e+00, double 1.723000e+00, double 2.000000e+00, double 1.000000e+00, double 2.900000e-02, double 9.830000e-01, double -8.240000e+00, double 3.445000e+00, double 3.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.820000e-01, double -8.240000e+00, double 5.057000e+00, double 4.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.850000e-01, double -8.240000e+00, double 6.422000e+00, double 5.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.830000e-01, double -8.240000e+00, double 7.609000e+00, double 6.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.780000e-01, double -8.240000e+00, double 8.710000e+00, double 7.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.670000e-01, double -8.240000e+00, double 9.662000e+00, double 8.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.480000e-01, double -8.240000e+00, double 1.051500e+01, double 9.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.300000e-01, double -8.240000e+00, double 1.129300e+01, double 1.000000e+01, double 1.000000e+00, double 9.000000e-03, double 9.140000e-01, double -7.447000e+00, double 1.200900e+01, double 1.100000e+01, double 1.000000e+00, double 9.000000e-03, double 8.700000e-01, double -7.447000e+00, double 1.262500e+01, double 1.200000e+01, double 1.000000e+00, double 9.000000e-03, double 8.450000e-01, double -7.447000e+00, double 1.321000e+01, double 1.300000e+01, double 1.000000e+00, double 9.000000e-03, double 8.000000e-01, double -7.447000e+00, double 1.374800e+01, double 1.400000e+01, double 1.000000e+00, double 9.000000e-03, double 7.490000e-01, double -7.447000e+00, double 1.424100e+01, double 1.500000e+01, double 1.000000e+00, double 9.000000e-03, double 7.010000e-01, double -7.447000e+00, double 1.469500e+01, double 1.600000e+01, double 1.000000e+00, double 9.000000e-03, double 6.530000e-01, double -7.447000e+00, double 1.512500e+01, double 1.700000e+01, double 1.000000e+00, double 9.000000e-03, double 5.900000e-01, double -7.447000e+00, double 1.550800e+01, double 1.800000e+01, double 1.000000e+00, double 9.000000e-03, double 6.160000e-01, double -7.447000e+00, double 1.589100e+01, double 1.900000e+01, double 2.000000e+00, double 1.800000e-02, double 8.600000e-01, double -7.447000e+00, double 1.653700e+01, double 2.000000e+01, double 2.000000e+00, double 1.800000e-02, double 8.230000e-01, double -6.990000e+00, double 1.711200e+01, double 2.100000e+01, double 2.000000e+00, double 1.800000e-02, double 7.620000e-01, double -6.990000e+00, double 1.762100e+01, double 2.200000e+01, double 2.000000e+00, double 1.800000e-02, double 6.880000e-01, double -6.990000e+00, double 1.807300e+01, double 2.300000e+01, double 2.000000e+00, double 1.800000e-02, double 6.120000e-01, double -6.990000e+00, double 1.847000e+01, double 2.400000e+01, double 2.000000e+00, double 1.800000e-02, double 5.940000e-01, double -6.990000e+00, double 1.884900e+01, double 2.500000e+01, double 3.000000e+00, double 2.700000e-02, double 6.580000e-01, double -6.990000e+00, double 1.927100e+01, double 2.600000e+01, double 3.000000e+00, double 2.700000e-02, double 7.060000e-01, double -6.990000e+00, double 1.974100e+01, double 2.700000e+01, double 3.000000e+00, double 5.400000e-02, double 6.600000e-01, double -6.990000e+00, double 2.017700e+01, double 2.800000e+01, double 3.000000e+00, double 5.400000e-02, double 6.060000e-01, double -6.990000e+00, double 2.057600e+01, double 2.900000e+01, double 3.000000e+00, double 5.400000e-02, double 5.650000e-01, double -6.990000e+00, double 2.095000e+01, double 3.000000e+01, double 4.000000e+00, double 1.140000e-01, double 5.600000e-01, double -6.020000e+00, double 2.131600e+01, double 3.100000e+01, double 4.000000e+00, double 1.140000e-01, double 5.790000e-01, double -6.020000e+00, double 2.169900e+01, double 3.200000e+01, double 5.000000e+00, double 4.520000e-01, double 5.670000e-01, double -6.020000e+00, double 2.207800e+01, double 3.300000e+01, double 5.000000e+00, double 4.520000e-01, double 5.340000e-01, double -6.020000e+00, double 2.243800e+01, double 3.400000e+01, double 5.000000e+00, double 4.520000e-01, double 5.140000e-01, double -5.229000e+00, double 2.278200e+01, double 3.500000e+01, double 7.000000e+00, double 6.330000e+00, double 5.200000e-01, double -5.229000e+00, double 2.313300e+01, double 3.600000e+01, double 7.000000e+00, double 6.330000e+00, double 5.180000e-01, double -5.229000e+00, double 2.348400e+01, double 3.700000e+01, double 7.000000e+00, double 6.330000e+00, double 5.070000e-01, double -5.229000e+00, double 2.382800e+01, double 3.800000e+01, double 1.900000e+01, double 1.718130e+02, double 4.470000e-01, double -4.559000e+00, double 2.417300e+01, double 3.200000e+04, double 4.100000e+01, double 0.000000e+00, double 1.000000e+00, double 4.532000e+00, double 1.000000e+00, double -8.240000e+00, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 9.040000e-01, double 9.850000e-01, double -8.240000e+00, double 1.250000e+00, double 2.000000e+00, double 1.000000e+00, double 9.000000e-02, double 9.830000e-01, double -8.240000e+00, double 2.500000e+00, double 3.000000e+00, double 1.000000e+00, double 2.900000e-02, double 9.830000e-01, double -8.240000e+00, double 3.750000e+00, double 4.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.810000e-01, double -8.240000e+00, double 4.909000e+00, double 5.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.750000e-01, double -8.240000e+00, double 5.958000e+00, double 6.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.590000e-01, double -8.240000e+00, double 6.857000e+00, double 7.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.440000e-01, double -8.240000e+00, double 7.700000e+00, double 8.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.330000e-01, double -8.240000e+00, double 8.500000e+00, double 9.000000e+00, double 1.000000e+00, double 9.000000e-03, double 9.200000e-01, double -8.240000e+00, double 9.237000e+00, double 1.000000e+01, double 1.000000e+00, double 9.000000e-03, double 8.920000e-01, double -7.447000e+00, double 9.895000e+00, double 1.100000e+01, double 1.000000e+00, double 9.000000e-03, double 8.630000e-01, double -7.447000e+00, double 1.050000e+01, double 1.200000e+01, double 1.000000e+00, double 9.000000e-03, double 8.390000e-01, double -7.447000e+00, double 1.108300e+01, double 1.300000e+01, double 1.000000e+00, double 9.000000e-03, double 7.860000e-01, double -7.447000e+00, double 1.160400e+01, double 1.400000e+01, double 1.000000e+00, double 9.000000e-03, double 7.550000e-01, double -7.447000e+00, double 1.210700e+01, double 1.500000e+01, double 1.000000e+00, double 9.000000e-03, double 6.980000e-01, double -7.447000e+00, double 1.255400e+01, double 1.600000e+01, double 1.000000e+00, double 9.000000e-03, double 6.730000e-01, double -7.447000e+00, double 1.300000e+01, double 1.700000e+01, double 1.000000e+00, double 9.000000e-03, double 6.050000e-01, double -7.447000e+00, double 1.339100e+01, double 1.800000e+01, double 1.000000e+00, double 9.000000e-03, double 6.290000e-01, double -7.447000e+00, double 1.378100e+01, double 1.900000e+01, double 2.000000e+00, double 1.800000e-02, double 8.830000e-01, double -7.447000e+00, double 1.447400e+01, double 2.000000e+01, double 2.000000e+00, double 1.800000e-02, double 8.580000e-01, double -6.990000e+00, double 1.509600e+01, double 2.100000e+01, double 2.000000e+00, double 1.800000e-02, double 8.290000e-01, double -6.990000e+00, double 1.566700e+01, double 2.200000e+01, double 2.000000e+00, double 1.800000e-02, double 7.670000e-01, double -6.990000e+00, double 1.617700e+01, double 2.300000e+01, double 2.000000e+00, double 1.800000e-02, double 7.050000e-01, double -6.990000e+00, double 1.663600e+01, double 2.400000e+01, double 2.000000e+00, double 1.800000e-02, double 6.370000e-01, double -6.990000e+00, double 1.705700e+01, double 2.500000e+01, double 2.000000e+00, double 1.800000e-02, double 5.640000e-01, double -6.990000e+00, double 1.742900e+01, double 2.600000e+01, double 2.000000e+00, double 1.800000e-02, double 5.500000e-01, double -6.990000e+00, double 1.778600e+01, double 2.700000e+01, double 3.000000e+00, double 2.700000e-02, double 6.030000e-01, double -6.990000e+00, double 1.817700e+01, double 2.800000e+01, double 3.000000e+00, double 2.700000e-02, double 6.350000e-01, double -6.990000e+00, double 1.859700e+01, double 2.900000e+01, double 3.000000e+00, double 2.700000e-02, double 5.920000e-01, double -6.990000e+00, double 1.899400e+01, double 3.000000e+01, double 3.000000e+00, double 2.700000e-02, double 5.330000e-01, double -6.020000e+00, double 1.935200e+01, double 3.100000e+01, double 3.000000e+00, double 2.700000e-02, double 5.180000e-01, double -6.020000e+00, double 1.969300e+01, double 3.200000e+01, double 4.000000e+00, double 7.200000e-02, double 5.680000e-01, double -6.020000e+00, double 2.006600e+01, double 3.300000e+01, double 4.000000e+00, double 7.200000e-02, double 5.940000e-01, double -6.020000e+00, double 2.046200e+01, double 3.400000e+01, double 4.000000e+00, double 7.200000e-02, double 5.680000e-01, double -5.229000e+00, double 2.084100e+01, double 3.500000e+01, double 5.000000e+00, double 1.430000e-01, double 5.360000e-01, double -5.229000e+00, double 2.120100e+01, double 3.600000e+01, double 5.000000e+00, double 1.430000e-01, double 5.220000e-01, double -5.229000e+00, double 2.154900e+01, double 3.700000e+01, double 6.000000e+00, double 1.720000e-01, double 5.420000e-01, double -5.229000e+00, double 2.191100e+01, double 3.800000e+01, double 7.000000e+00, double 6.330000e-01, double 5.390000e-01, double -4.559000e+00, double 2.227500e+01, double 3.900000e+01, double 7.000000e+00, double 6.330000e-01, double 5.190000e-01, double -4.559000e+00, double 2.262500e+01, double 4.000000e+01, double 8.000000e+00, double 7.230000e-01, double 5.140000e-01, double -3.980000e+00, double 2.297100e+01, double 4.100000e+01, double 1.000000e+01, double 9.043000e+00, double 5.180000e-01, double -3.980000e+00, double 2.332100e+01, double 2.400000e+04, double 4.400000e+01, double 0.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEF1965403A7185, double 0x3FC333334015BC21, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEBFDC57FC8DA71, double 0x3FC333334015BC21, double 0x3FEE4A53BFDF6D52, double 2.000000e+00, double 1.000000e+00, double 0x3FEC85209FCC7D60, double 0x3FEB7317FFFBF935, double 0x3FC333334015BC21, double 0x3FFE27FC608E3537, double 3.000000e+00, double 1.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FEADF2E8034DD71, double 0x3FC333334015BC21, double 0x400671F65F6D4DE1, double 4.000000e+00, double 1.000000e+00, double 0x3F9CDC38BF530072, double 0x3FEA52C29FF82D79, double 0x3FC333334015BC21, double 0x400D9C56209E0539, double 5.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE99B1F2000D161, double 0x3FC333334015BC21, double 0x401242E33FAAE5C7, double 6.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE8AFECC00FD899, double 0x3FC333334015BC21, double 0x4015920DDFBC939A, double 7.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE798B2E022D122, double 0x3FC333334015BC21, double 0x4018B82F2029154D, double 8.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE66F80602F0C29, double 0x3FC333334015BC21, double 0x401BB3481FD45BB7, double 9.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE51CE34000CC03, double 0x3FC333334015BC21, double 0x401E82A44010BC3B, double 1.000000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE3AE62FFDD230F, double 0x3FC333334015BC21, double 0x4020934DDFDCC9F0, double 1.100000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE2327260112F1F, double 0x3FC333334015BC21, double 0x4021D02A3FEF8432, double 1.200000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE0B65C000EA136, double 0x3FC70A3D7FAC2175, double 0x4022F8C4202AEDBF, double 1.300000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDEA65940382967, double 0x3FC70A3D7FAC2175, double 0x40240E2901810980, double 1.400000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDC099BE01ADD51, double 0x3FC70A3D7FAC2175, double 0x40251182814F1FF9, double 1.500000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDA667E005861E3, double 0x3FC70A3D7FAC2175, double 0x40260406FFCE81D9, double 1.600000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD9015C005BF06C, double 0x3FC70A3D7FAC2175, double 0x4026E6ED3F331BB6, double 1.700000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7CCFFA06746BF, double 0x3FC70A3D7FAC2175, double 0x4027BB64E054690E, double 1.800000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7870C20164259, double 0x3FC70A3D7FAC2175, double 0x4028829080156415, double 1.900000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDB05A9804A1ADF, double 0x3FC70A3D7FAC2175, double 0x40293D82814F1FF9, double 2.000000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE2146600317590, double 0x3FC70A3D7FAC2175, double 0x402A8DEE3F0D5C09, double 2.100000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE0A163DFC5C53E, double 0x3FC70A3D7FAC2175, double 0x402BBDF9DF548ECE, double 2.200000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDD24A12031DFDD, double 0x3FC99999A00ADE11, double 0x402CCE0C7F6A436B, double 2.300000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDA2AE45F908950, double 0x3FC99999A00ADE11, double 0x402DC3288128898C, double 2.400000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD86B21804726F5, double 0x3FC99999A00ADE11, double 0x402EA1733F92BD07, double 2.500000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD730DD9FFB29FA, double 0x3FC99999A00ADE11, double 0x402F6C58FF759685, double 2.600000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD768379FB21519, double 0x3FC99999A00ADE11, double 0x403013569F490603, double 2.700000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 3.806400e-01, double 0x3FC99999A00ADE11, double 0x40307CFB407D9E91, double 2.800000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD8448A60381B72, double 0x3FC99999A00ADE11, double 0x4030F0EBE08E4AB1, double 2.900000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD71542FFA66049, double 0x3FC99999A00ADE11, double 0x403159F0FFB1FC67, double 3.000000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5F4CAFFE5755D, double 0x3FC99999A00ADE11, double 0x4031B9F81F60EE57, double 3.100000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5B6EE7FB629D9, double 0x3FC99999A00ADE11, double 0x4032127EC0D03F48, double 3.200000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD5F31F407BDFE4, double 0x3FC99999A00ADE11, double 0x40327152007DD441, double 3.300000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD5F5D10040CB2A, double 0x3FC99999A00ADE11, double 0x4032D59BBFE486FE, double 3.400000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD603E86003D454, double 2.500000e-01, double 0x403332117F84449E, double 3.500000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD602EC4051F710, double 2.500000e-01, double 0x403391D7FF2FF668, double 3.600000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD5BAD25F99FFAC, double 2.500000e-01, double 0x4033F482A058D07C, double 3.700000e+01, double 5.000000e+00, double 0x3FB6C310E004DF79, double 0x3FD589E59FB51A31, double 0x3FD1EB851FCB32AA, double 0x40344FC47FF73124, double 3.800000e+01, double 6.000000e+00, double 0x3FBB507A9F610C68, double 0x3FD56FE7C0296189, double 0x3FD1EB851FCB32AA, double 0x4034AC7C7FAD5F49, double 3.900000e+01, double 6.000000e+00, double 0x3FC5A52AA0AC4C3E, double 0x3FD57A7EFFC2F6E9, double 0x3FD333334015BC21, double 0x40350A5DFF8F97B8, double 4.000000e+01, double 7.000000e+00, double 1.972868e-01, double 0x3FD56C005FB27E53, double 0x3FD333334015BC21, double 0x403567F0FFB1FC67, double 4.100000e+01, double 7.000000e+00, double 1.972868e-01, double 0x3FD53A30C008BB88, double 0x3FD333334015BC21, double 0x4035C50A40CBA22A, double 4.200000e+01, double 8.000000e+00, double 0x3FE6D0E6FFCB4936, double 0x3FD506FAA06FA1A3, double 0x3FD99999A00ADE11, double 0x40362070DF662C85, double 4.300000e+01, double 8.000000e+00, double 0x3FE6D0E6FFCB4936, double 0x3FD5B623E0515B5F, double 0x3FD99999A00ADE11, double 0x40367A17C01025E8, double 4.400000e+01, double 9.000000e+00, double 0x3FE9AB03DFE70E75, double 0x3FDB369A001BD9A5, double 0x3FD99999A00ADE11, double 0x4036D10540B1A0F7, double 2.205000e+04, double 4.400000e+01, double 0.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEE878AE0072B06, double 0x3FC333334015BC21, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEAAB10001715E0, double 0x3FC333334015BC21, double 0x3FEBD5D3201A7417, double 2.000000e+00, double 1.000000e+00, double 0x3FEC85209FCC7D60, double 0x3FEA1C3A9FD2DD77, double 0x3FC333334015BC21, double 0x3FFBBB6DDF818551, double 3.000000e+00, double 1.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FE96A73FFDFA74E, double 0x3FC333334015BC21, double 0x4004AA703FAE15D2, double 4.000000e+00, double 1.000000e+00, double 0x3F9CDC38BF530072, double 0x3FE8D8FAA019BB68, double 0x3FC333334015BC21, double 0x400B4EB4202D9CF1, double 5.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE82B17E00A5B12, double 0x3FC333334015BC21, double 0x4010DFBFA0138645, double 6.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE764EEA0426668, double 0x3FC333334015BC21, double 0x4013FA01FFB480A6, double 7.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE674F2A0127BFB, double 0x3FC333334015BC21, double 0x4016F2E12015F50A, double 8.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE55F3DBFCB7EE6, double 0x3FC333334015BC21, double 0x4019C83980544E36, double 9.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE42B4980044FCE, double 0x3FC333334015BC21, double 0x401C78E8FFB35400, double 1.000000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE2E2ACE014CA8A, double 0x3FC333334015BC21, double 0x401F04AA601060F6, double 1.100000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE18FAD004289D7, double 0x3FC333334015BC21, double 0x4020B5F5DFEB8D82, double 1.200000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE03FDC602C7F54, double 0x3FC333334015BC21, double 0x4021D7D2A0207165, double 1.300000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDE0C8B9FED0106, double 0x3FC70A3D7FAC2175, double 0x4022E89A3FDCB9D5, double 1.400000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDBAAAADFA34F61, double 0x3FC70A3D7FAC2175, double 0x4023E91D7FEDA103, double 1.500000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDA4FF91F99ABEC, double 0x3FC70A3D7FAC2175, double 0x4024DA4200559055, double 1.600000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD902669FFABA4E, double 0x3FC70A3D7FAC2175, double 0x4025BCF780D57D75, double 1.700000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7E471408171D2, double 0x3FC70A3D7FAC2175, double 0x4026922FDFC19C17, double 1.800000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7A6E0FFDF9EB7, double 0x3FC70A3D7FAC2175, double 0x40275AD9209825FC, double 1.900000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDB42E39FA21C4A, double 0x3FC70A3D7FAC2175, double 0x402817D9414F55A9, double 2.000000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE275F72007875E, double 0x3FC70A3D7FAC2175, double 0x40296DA1412DC7B9, double 2.100000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE10F469FD52594, double 0x3FC70A3D7FAC2175, double 0x402AA3B480A5ACCD, double 2.200000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDE13F29FB3FEB9, double 0x3FC70A3D7FAC2175, double 0x402BBA1B5FD7D6EC, double 2.300000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDAB4871F884A56, double 0x3FC99999A00ADE11, double 0x402CB579BFDF7E80, double 2.400000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD8EA46DF7C40B2, double 0x3FC99999A00ADE11, double 0x402D99BB7EC6AF7C, double 2.500000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD73885BFBF6A86, double 0x3FC99999A00ADE11, double 0x402E6A2CC1292A9C, double 2.600000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD631FE0006C72B, double 0x3FC99999A00ADE11, double 0x402F2990DEDFF4C8, double 2.700000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD65C91FF79FBCD, double 0x3FC99999A00ADE11, double 0x402FDA393EE5EEDD, double 2.800000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD74C37A0192961, double 0x3FC99999A00ADE11, double 0x403051CA3F53D2E6, double 2.900000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD766103FBE30FE, double 0x3FC99999A00ADE11, double 0x4030C0BE40420F6F, double 3.000000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD6AC721F93546C, double 0x3FC99999A00ADE11, double 0x403125A7206AD993, double 3.100000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD67A61005C2C8D, double 0x3FC99999A00ADE11, double 0x40318234FFBC0D62, double 3.200000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6ADE6BFDF75E9, double 0x3FC99999A00ADE11, double 0x4031E4D100383424, double 3.300000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD654A36041DF1E, double 0x3FC99999A00ADE11, double 0x40324C9E2011177F, double 3.400000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD59C0BFF929CD0, double 0x3FC99999A00ADE11, double 0x4032ABE0C09F97E0, double 3.500000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD540BF5F9E4298, double 2.500000e-01, double 0x403304016052502F, double 3.600000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD52BB6E084EE1A, double 2.500000e-01, double 0x40335F973F4C462A, double 3.700000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD4F6391FE4D560, double 2.500000e-01, double 0x4033BE37C060ADC0, double 3.800000e+01, double 5.000000e+00, double 0x3FB6C310E004DF79, double 0x3FD4D52ADF7CA7C6, double 0x3FD1EB851FCB32AA, double 0x403416018032C047, double 3.900000e+01, double 6.000000e+00, double 0x3FBB507A9F610C68, double 0x3FD4C392BF935BF0, double 0x3FD1EB851FCB32AA, double 0x40346F7CE0256F25, double 4.000000e+01, double 6.000000e+00, double 0x3FBB507A9F610C68, double 0x3FD4DA7B3FD61D9D, double 0x3FD1EB851FCB32AA, double 0x4034CA6200A6182D, double 4.100000e+01, double 7.000000e+00, double 1.972868e-01, double 0x3FD4E0D1805492EE, double 0x3FD333334015BC21, double 0x4035255380B09488, double 4.200000e+01, double 7.000000e+00, double 1.972868e-01, double 0x3FD4DC8B80401B12, double 0x3FD333334015BC21, double 0x40358027001F09B1, double 4.300000e+01, double 8.000000e+00, double 0x3FCCDC38BF530072, double 0x3FD5B27E600AE036, double 0x3FD333334015BC21, double 0x4035D9B73F9CCE02, double 4.400000e+01, double 8.000000e+00, double 0x3FE6D0E6FFCB4936, double 0x3FDB5184204F6F99, double 0x3FD99999A00ADE11, double 0x403631F27FE4BCAE, double 1.600000e+04, double 4.500000e+01, double 0.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEAB62F803179DC, double 0x3FC333334015BC21, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FE3F5D140240771, double 0x3FC333334015BC21, double 0x3FE435666020150D, double 2.000000e+00, double 1.000000e+00, double 0x3FEC85209FCC7D60, double 0x3FE355A36016EC00, double 0x3FC333334015BC21, double 0x3FF42BCABED59345, double 3.000000e+00, double 1.000000e+00, double 0x3FEC85209FCC7D60, double 0x3FE2F173FFC5E23C, double 0x3FC333334015BC21, double 0x3FFE27FC608E3537, double 4.000000e+00, double 1.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FE268DEE0397FED, double 0x3FC333334015BC21, double 0x4004024B1FB902EB, double 5.000000e+00, double 1.000000e+00, double 0x3F9CDC38BF530072, double 0x3FE1F832E0384AB0, double 0x3FC333334015BC21, double 0x4008DBDFDFCF0810, double 6.000000e+00, double 1.000000e+00, double 0x3F9CDC38BF530072, double 0x3FE17E495FD69081, double 0x3FC333334015BC21, double 0x400D9C56209E0539, double 7.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE0F4A63FC53CE1, double 0x3FC333334015BC21, double 0x40111FEF9FB59274, double 8.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE05B9D602B4180, double 0x3FC333334015BC21, double 0x401361A7602BB9C2, double 9.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDF6AF19F83D82B, double 0x3FC333334015BC21, double 0x4015920DDFBC939A, double 1.000000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDE0A595FC2B343, double 0x3FC333334015BC21, double 0x4017B02F9FAAD5AC, double 1.100000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDC9BB5C038364A, double 0x3FC333334015BC21, double 0x4019BB64002FA5B5, double 1.200000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDB6725A06FEEF3, double 0x3FC333334015BC21, double 0x401BB3481FD45BB7, double 1.300000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDA87C49FD7A13C, double 0x3FC333334015BC21, double 0x401D97B65FCDF0E4, double 1.400000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD9AA86A05C7032, double 0x3FC333334015BC21, double 0x401F68BE200BB91C, double 1.500000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD8D190204920B0, double 0x3FC333334015BC21, double 0x4020934DDFDCC9F0, double 1.600000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7F3643F89719D, double 0x3FC333334015BC21, double 8.704772e+00, double 1.700000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD71335E03F4DFC, double 0x3FC70A3D7FAC2175, double 0x4022353C000B6894, double 1.800000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD649D65F95085D, double 0x3FC70A3D7FAC2175, double 0x4022F8C4202AEDBF, double 1.900000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD66BC2001523A9, double 0x3FC70A3D7FAC2175, double 0x4023B3C2600C5A2B, double 2.000000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDA0153001BF36A, double 0x3FC70A3D7FAC2175, double 0x4024668E3EF28416, double 2.100000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE1BB2C3FBDC9E9, double 0x3FC70A3D7FAC2175, double 0x4025B16C3FC43B2E, double 2.200000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE0E7EF9FD7EE8B, double 0x3FC70A3D7FAC2175, double 0x4026E3B8404DCDE9, double 2.300000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDE7F6B1F88B16A, double 0x3FC70A3D7FAC2175, double 0x4027FC557F8E5599, double 2.400000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDB67B8C0144678, double 0x3FC70A3D7FAC2175, double 0x4028FDEC80C73ABD, double 2.500000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD9BED2BF91362F, double 0x3FC70A3D7FAC2175, double 0x4029EAF13E9C1D02, double 2.600000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD8318D5FE93882, double 0x3FC70A3D7FAC2175, double 0x402AC59DC14686CD, double 2.700000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD733F83F9744AB, double 0x3FC70A3D7FAC2175, double 0x402B8FF180E13BF0, double 2.800000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD78E459FE9B736, double 0x3FC99999A00ADE11, double 0x402C4BB360143CCE, double 2.900000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD8B39F3FDCF5F6, double 0x3FC99999A00ADE11, double 0x402D2286BFA241DF, double 3.000000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD8BADCC009F0C5, double 0x3FC99999A00ADE11, double 0x402E0F9BC1920627, double 3.100000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD78A97DF966441, double 0x3FC99999A00ADE11, double 0x402EE7163F06A60C, double 3.200000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD66143BFFBE196, double 0x3FC99999A00ADE11, double 0x402FAC2C7FBACB43, double 3.300000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD6201A3F79F110, double 0x3FC99999A00ADE11, double 0x403030C29F4C6102, double 3.400000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6516A202F4A70, double 0x3FC99999A00ADE11, double 0x4030917F7F3C2042, double 3.500000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD636235F780212, double 0x3FC99999A00ADE11, double 0x4030F74D7FE5936D, double 3.600000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD62A453FF280B3, double 0x3FC99999A00ADE11, double 0x4031549840D405A6, double 3.700000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD60EE2800130F1, double 0x3FC99999A00ADE11, double 0x4031B49F806367AE, double 3.800000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD5AE8F40607E81, double 0x3FC99999A00ADE11, double 0x403217090059C213, double 3.900000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD56EA6FFE7340A, double 0x3FC99999A00ADE11, double 0x403271AD7F29ABCB, double 4.000000e+01, double 6.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD54CC8BF90BDED, double 0x3FC99999A00ADE11, double 0x4032CD91BFB08498, double 4.100000e+01, double 6.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD55BA1006B34D7, double 2.500000e-01, double 0x40332AA18017E854, double 4.200000e+01, double 7.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD5600880798473, double 2.500000e-01, double 0x403387A9DF61FAC7, double 4.300000e+01, double 7.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD56297BFA4C61E, double 2.500000e-01, double 0x4033E4BBBF5E4F41, double 4.400000e+01, double 8.000000e+00, double 0x3FC235A71EF0E48D, double 0x3FD6318CBFEC69A0, double 0x3FD1EB851FCB32AA, double 0x403440EA00BA3A23, double 4.500000e+01, double 8.000000e+00, double 0x3FC235A71EF0E48D, double 0x3FDBEB97E07E51E2, double 0x3FD1EB851FCB32AA, double 0x40349C4E3FFEF391, double 4.800000e+04, double 2.000000e+01, double 0.000000e+00, double 3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 5.600000e-02, double 1.000000e+00, double 3.000000e+00, double 4.000000e+00, double 7.000000e+00, double 9.440000e-01, double 6.110000e-01, double 2.000000e+00, double 4.000000e+00, double 7.000000e+00, double 1.100000e+01, double 3.890000e-01, double 1.670000e-01, double 3.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 8.330000e-01, double 7.220000e-01, double 4.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 2.780000e-01, double 6.390000e-01, double 5.000000e+00, double 2.000000e+00, double 1.700000e+01, double 1.900000e+01, double 3.610000e-01, double 4.170000e-01, double 6.000000e+00, double 3.000000e+00, double 1.900000e+01, double 2.200000e+01, double 5.830000e-01, double 8.300000e-02, double 7.000000e+00, double 2.000000e+00, double 2.200000e+01, double 2.400000e+01, double 9.170000e-01, double 7.500000e-01, double 8.000000e+00, double 3.000000e+00, double 2.400000e+01, double 2.700000e+01, double 2.500000e-01, double 4.170000e-01, double 9.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 5.830000e-01, double 6.480000e-01, double 1.000000e+01, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 3.520000e-01, double 6.110000e-01, double 1.100000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 3.890000e-01, double 6.250000e-01, double 1.200000e+01, double 4.000000e+00, double 3.600000e+01, double 4.000000e+01, double 3.750000e-01, double 1.440000e-01, double 1.300000e+01, double 3.000000e+00, double 4.000000e+01, double 4.300000e+01, double 8.560000e-01, double 3.890000e-01, double 1.400000e+01, double 3.000000e+00, double 4.300000e+01, double 4.600000e+01, double 6.110000e-01, double 1.600000e-01, double 1.500000e+01, double 3.000000e+00, double 4.600000e+01, double 4.900000e+01, double 8.400000e-01, double 2.170000e-01, double 1.600000e+01, double 3.000000e+00, double 4.900000e+01, double 5.200000e+01, double 7.830000e-01, double 1.840000e-01, double 1.700000e+01, double 2.000000e+00, double 5.200000e+01, double 5.400000e+01, double 8.160000e-01, double 8.860000e-01, double 1.800000e+01, double 3.000000e+00, double 5.400000e+01, double 5.700000e+01, double 1.140000e-01, double 3.130000e-01, double 1.900000e+01, double 2.000000e+00, double 5.700000e+01, double 5.900000e+01, double 6.870000e-01, double 4.520000e-01, double 2.000000e+01, double 1.000000e+00, double 5.900000e+01, double 6.000000e+01, double 5.480000e-01, double 9.080000e-01, double 4.410000e+04, double 2.000000e+01, double 0.000000e+00, double 3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 5.600000e-02, double 1.000000e+00, double 3.000000e+00, double 4.000000e+00, double 7.000000e+00, double 9.440000e-01, double 6.110000e-01, double 2.000000e+00, double 4.000000e+00, double 7.000000e+00, double 1.100000e+01, double 3.890000e-01, double 1.670000e-01, double 3.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 8.330000e-01, double 7.220000e-01, double 4.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 2.780000e-01, double 1.390000e-01, double 5.000000e+00, double 1.000000e+00, double 1.700000e+01, double 1.800000e+01, double 8.610000e-01, double 9.170000e-01, double 6.000000e+00, double 3.000000e+00, double 1.800000e+01, double 2.100000e+01, double 8.300000e-02, double 5.830000e-01, double 7.000000e+00, double 3.000000e+00, double 2.100000e+01, double 2.400000e+01, double 4.170000e-01, double 2.500000e-01, double 8.000000e+00, double 3.000000e+00, double 2.400000e+01, double 2.700000e+01, double 7.500000e-01, double 8.050000e-01, double 9.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 1.940000e-01, double 5.740000e-01, double 1.000000e+01, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 4.260000e-01, double 5.370000e-01, double 1.100000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 4.630000e-01, double 8.190000e-01, double 1.200000e+01, double 4.000000e+00, double 3.600000e+01, double 4.000000e+01, double 1.800000e-01, double 1.000000e-01, double 1.300000e+01, double 3.000000e+00, double 4.000000e+01, double 4.300000e+01, double 9.000000e-01, double 4.680000e-01, double 1.400000e+01, double 3.000000e+00, double 4.300000e+01, double 4.600000e+01, double 5.320000e-01, double 6.230000e-01, double 1.500000e+01, double 3.000000e+00, double 4.600000e+01, double 4.900000e+01, double 3.760000e-01, double 4.500000e-01, double 1.600000e+01, double 3.000000e+00, double 4.900000e+01, double 5.200000e+01, double 5.500000e-01, double 5.520000e-01, double 1.700000e+01, double 3.000000e+00, double 5.200000e+01, double 5.500000e+01, double 4.480000e-01, double 4.030000e-01, double 1.800000e+01, double 2.000000e+00, double 5.500000e+01, double 5.700000e+01, double 5.970000e-01, double 6.430000e-01, double 1.900000e+01, double 2.000000e+00, double 5.700000e+01, double 5.900000e+01, double 3.570000e-01, double 7.220000e-01, double 2.000000e+01, double 2.000000e+00, double 5.900000e+01, double 6.100000e+01, double 2.780000e-01, double 9.600000e-01, double 3.200000e+04, double 2.000000e+01, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 5.280000e-01, double 1.000000e+00, double 2.000000e+00, double 2.000000e+00, double 4.000000e+00, double 4.720000e-01, double 3.050000e-01, double 2.000000e+00, double 2.000000e+00, double 4.000000e+00, double 6.000000e+00, double 6.940000e-01, double 8.300000e-02, double 3.000000e+00, double 1.000000e+00, double 6.000000e+00, double 7.000000e+00, double 9.170000e-01, double 8.610000e-01, double 4.000000e+00, double 2.000000e+00, double 7.000000e+00, double 9.000000e+00, double 1.390000e-01, double 6.390000e-01, double 5.000000e+00, double 2.000000e+00, double 9.000000e+00, double 1.100000e+01, double 3.610000e-01, double 4.170000e-01, double 6.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 5.830000e-01, double 8.300000e-02, double 7.000000e+00, double 2.000000e+00, double 1.400000e+01, double 1.600000e+01, double 9.170000e-01, double 7.500000e-01, double 8.000000e+00, double 3.000000e+00, double 1.600000e+01, double 1.900000e+01, double 2.500000e-01, double 8.700000e-01, double 9.000000e+00, double 3.000000e+00, double 1.900000e+01, double 2.200000e+01, double 1.300000e-01, double 8.330000e-01, double 1.000000e+01, double 4.000000e+00, double 2.200000e+01, double 2.600000e+01, double 1.670000e-01, double 3.890000e-01, double 1.100000e+01, double 4.000000e+00, double 2.600000e+01, double 3.000000e+01, double 6.110000e-01, double 4.780000e-01, double 1.200000e+01, double 4.000000e+00, double 3.000000e+01, double 3.400000e+01, double 5.220000e-01, double 3.300000e-02, double 1.300000e+01, double 3.000000e+00, double 3.400000e+01, double 3.700000e+01, double 9.670000e-01, double 9.170000e-01, double 1.400000e+01, double 4.000000e+00, double 3.700000e+01, double 4.100000e+01, double 8.300000e-02, double 6.170000e-01, double 1.500000e+01, double 3.000000e+00, double 4.100000e+01, double 4.400000e+01, double 3.830000e-01, double 9.950000e-01, double 1.600000e+01, double 4.000000e+00, double 4.400000e+01, double 4.800000e+01, double 5.000000e-03, double 2.740000e-01, double 1.700000e+01, double 3.000000e+00, double 4.800000e+01, double 5.100000e+01, double 7.260000e-01, double 4.800000e-01, double 1.800000e+01, double 3.000000e+00, double 5.100000e+01, double 5.400000e+01, double 5.190000e-01, double 2.610000e-01, double 1.900000e+01, double 2.000000e+00, double 5.400000e+01, double 5.600000e+01, double 7.390000e-01, double 8.840000e-01, double 2.000000e+01, double 2.000000e+00, double 5.600000e+01, double 5.800000e+01, double 1.160000e-01, double 1.000000e+00, double 2.400000e+04, double 2.000000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 3.000000e+00, double 1.000000e+00, double 0x3FED55557FECD2DA, double 1.000000e+00, double 3.000000e+00, double 3.000000e+00, double 6.000000e+00, double 0x3FB55554002B75AF, double 0x3FE2AAAAFFD9A5B4, double 2.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FDAAAAA004CB497, double 2.500000e-01, double 3.000000e+00, double 2.000000e+00, double 9.000000e+00, double 1.100000e+01, double 7.500000e-01, double 0x3FED5556003CBBC8, double 4.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 0x3FB5554FFFD1EFBD, double 0x3FE2AAABFFF00731, double 5.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 0x3FDAAAA8001FF19E, double 2.500000e-01, double 6.000000e+00, double 3.000000e+00, double 1.700000e+01, double 2.000000e+01, double 7.500000e-01, double 0x3FE12F6800221760, double 7.000000e+00, double 3.000000e+00, double 2.000000e+01, double 2.300000e+01, double 0x3FDDA12FFFBBD141, double 5.000000e-01, double 8.000000e+00, double 4.000000e+00, double 2.300000e+01, double 2.700000e+01, double 5.000000e-01, double 0x3FAC71D6002E2171, double 9.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 0x3FEE38E2A0265939, double 0x3FD9C71FFF79C843, double 1.000000e+01, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 0x3FE31C7000431BDF, double 0x3FE888899FE29A25, double 1.100000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 0x3FCDDDD9A0ABEDC0, double 0x3FE9C71D5FD9A6C7, double 1.200000e+01, double 3.000000e+00, double 3.600000e+01, double 3.900000e+01, double 0x3FC8E38AA0CFBB36, double 0x3FE8A28B7FC7D8BF, double 1.300000e+01, double 3.000000e+00, double 3.900000e+01, double 4.200000e+01, double 0x3FCD75D23F27882F, double 0x3FE38E38DFBCE0E9, double 1.400000e+01, double 3.000000e+00, double 4.200000e+01, double 4.500000e+01, double 0x3FD8E38E40863E2E, double 0x3FDCC485BFE1C69E, double 1.500000e+01, double 3.000000e+00, double 4.500000e+01, double 4.800000e+01, double 0x3FE19DBD200F1CB1, double 0x3FC8E3927F26AF4A, double 1.600000e+01, double 2.000000e+00, double 4.800000e+01, double 5.000000e+01, double 0x3FE9C71B6036542E, double 0x3FED38E3FFCCDCF1, double 1.700000e+01, double 3.000000e+00, double 5.000000e+01, double 5.300000e+01, double 0x3FB638DFFFE14A7E, double 0x3FE293E99FFD7217, double 1.800000e+01, double 3.000000e+00, double 5.300000e+01, double 5.600000e+01, double 0x3FDAD82CC0051BD1, double 0x3FBD097FFDDE8A06, double 1.900000e+01, double 2.000000e+00, double 5.600000e+01, double 5.800000e+01, double 0x3FEC5ED000442EBF, double 0x3FE114523FF1653B, double 2.000000e+01, double 2.000000e+00, double 5.800000e+01, double 6.000000e+01, double 0x3FDDD75B5FE6DF36, double 0x3FE61E1E1FF306EB, double 2.205000e+04, double 2.000000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 3.000000e+00, double 1.000000e+00, double 0x3FED55557FECD2DA, double 1.000000e+00, double 3.000000e+00, double 3.000000e+00, double 6.000000e+00, double 0x3FB55554002B75AF, double 0x3FE2AAAAFFD9A5B4, double 2.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FDAAAAA004CB497, double 2.500000e-01, double 3.000000e+00, double 2.000000e+00, double 9.000000e+00, double 1.100000e+01, double 7.500000e-01, double 0x3FED5556003CBBC8, double 4.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 0x3FB5554FFFD1EFBD, double 0x3FE2AAABFFF00731, double 5.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 0x3FDAAAA8001FF19E, double 2.500000e-01, double 6.000000e+00, double 3.000000e+00, double 1.700000e+01, double 2.000000e+01, double 7.500000e-01, double 0x3FCA12F57F624F9A, double 7.000000e+00, double 3.000000e+00, double 2.000000e+01, double 2.300000e+01, double 0x3FE97B42A0276C19, double 0x3FC5555580FFB399, double 8.000000e+00, double 3.000000e+00, double 2.300000e+01, double 2.600000e+01, double 0x3FEAAAAA9FC0131A, double 0x3FE71C72C01993AD, double 9.000000e+00, double 4.000000e+00, double 2.600000e+01, double 3.000000e+01, double 0x3FD1C71AA0032EF8, double 0x3FC38E3FFEF39086, double 1.000000e+01, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 0x3FEB1C7000431BDF, double 0x3FE222233FED7835, double 1.100000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 0x3FDBBBB9A05B65E8, double 0x3FEDED0A9FC125FB, double 1.200000e+01, double 4.000000e+00, double 3.600000e+01, double 4.000000e+01, double 0x3FB097AAA009F2B3, double 0x3FBE38EFFEB3AD4A, double 1.300000e+01, double 3.000000e+00, double 4.000000e+01, double 4.300000e+01, double 0x3FEC38E200298A57, double 0x3FB7B43900046548, double 1.400000e+01, double 2.000000e+00, double 4.300000e+01, double 4.500000e+01, double 0x3FED0978E0442B87, double 0x3FEDE625BFBE57A5, double 1.500000e+01, double 3.000000e+00, double 4.500000e+01, double 4.800000e+01, double 0x3FB0CED17FEA0F0B, double 0x3FE269A9200E2C2C, double 1.600000e+01, double 3.000000e+00, double 4.800000e+01, double 5.100000e+01, double 0x3FDB2CADBFE3A7A7, double 0x3FCDB30F00CEDCF2, double 1.700000e+01, double 2.000000e+00, double 5.100000e+01, double 5.300000e+01, double 0x3FE8933C3FCC48C3, double 0x3FE84446602E0A77, double 1.800000e+01, double 3.000000e+00, double 5.300000e+01, double 5.600000e+01, double 0x3FCEEEE65F117FD2, double 0x3FC8000A80A6476C, double 1.900000e+01, double 2.000000e+00, double 5.600000e+01, double 5.800000e+01, double 0x3FE9FFFD5FD66E25, double 0x3FE114548001647B, double 2.000000e+01, double 2.000000e+00, double 5.800000e+01, double 6.000000e+01, double 0x3FDDD756DFC6E0B6, double 0x3FD07C26BFE5E72E, double 1.600000e+04, double 2.000000e+01, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 0x3FEE38E3A03CBAB5, double 1.000000e+00, double 2.000000e+00, double 2.000000e+00, double 4.000000e+00, double 0x3FAC71C55FDE1B86, double 0x3FE71C71FFE66E78, double 2.000000e+00, double 2.000000e+00, double 4.000000e+00, double 6.000000e+00, double 0x3FD1C71C0033230F, double 5.000000e-01, double 3.000000e+00, double 2.000000e+00, double 6.000000e+00, double 8.000000e+00, double 5.000000e-01, double 0x3FD1C71D402CC0D3, double 4.000000e+00, double 2.000000e+00, double 8.000000e+00, double 1.000000e+01, double 0x3FE71C715FE99F96, double 0x3FAC71D6002E2171, double 5.000000e+00, double 1.000000e+00, double 1.000000e+01, double 1.100000e+01, double 0x3FEE38E2A0265939, double 0x3FEAAAAA9FC0131A, double 6.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 0x3FC5555560C95D45, double 0x3FCA12F57F624F9A, double 7.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 0x3FE97B42A0276C19, double 0x3FC5555580FFB399, double 8.000000e+00, double 3.000000e+00, double 1.700000e+01, double 2.000000e+01, double 0x3FEAAAAA9FC0131A, double 0x3FE15555FD8D89EC, double 9.000000e+00, double 3.000000e+00, double 2.000000e+01, double 2.300000e+01, double 0x3FDD5553FF868870, double 0x3FE4E38FFFBCE421, double 1.000000e+01, double 4.000000e+00, double 2.300000e+01, double 2.700000e+01, double 0x3FD638E0008637BD, double 0x3FC555597F33780E, double 1.100000e+01, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 0x3FEAAAA9A03321FD, double 0x3FE71C733FE00C3C, double 1.200000e+01, double 4.000000e+00, double 3.000000e+01, double 3.400000e+01, double 0x3FD1C719A0763DDB, double 0x3FD1C71FFF79C843, double 1.300000e+01, double 3.000000e+00, double 3.400000e+01, double 3.700000e+01, double 0x3FE71C7000431BDF, double 0x3FE35557FFE00E62, double 1.400000e+01, double 3.000000e+00, double 3.700000e+01, double 4.000000e+01, double 0x3FD95550003FE33C, double 0x3FE416C33FD2A043, double 1.500000e+01, double 3.000000e+00, double 4.000000e+01, double 4.300000e+01, double 0x3FD7D2799F7E350F, double 0x3FE15E189FBCA6ED, double 1.600000e+01, double 3.000000e+00, double 4.300000e+01, double 4.600000e+01, double 0x3FDD43CEC086B225, double 0x3FD7C71FFF79C843, double 1.700000e+01, double 3.000000e+00, double 4.600000e+01, double 4.900000e+01, double 0x3FE41C7000431BDF, double 0x3F811198002BE7C2, double 1.800000e+01, double 2.000000e+00, double 4.900000e+01, double 5.100000e+01, double 0x3FEFBBB99FD1F589, double 0x3FE00002BFD677CF, double 1.900000e+01, double 2.000000e+00, double 5.100000e+01, double 5.300000e+01, double 0x3FDFFFFA601CBA0F, double 0x3FEC60EF600E7756, double 2.000000e+01, double 2.000000e+00, double 5.300000e+01, double 5.500000e+01, double 0x3FBCF884BF1F98AA, double 0x3FE4210C5FE85094, double 4.800000e+04, double 1.100000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 1.670000e-01, double 1.000000e+00, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.330000e-01, double 8.330000e-01, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.000000e+00, double 1.670000e-01, double 5.000000e-01, double 3.000000e+00, double 3.000000e+00, double 8.000000e+00, double 1.100000e+01, double 5.000000e-01, double 1.670000e-01, double 4.000000e+00, double 4.000000e+00, double 1.100000e+01, double 1.500000e+01, double 8.330000e-01, double 1.670000e-01, double 5.000000e+00, double 4.000000e+00, double 1.500000e+01, double 1.900000e+01, double 8.330000e-01, double 5.830000e-01, double 6.000000e+00, double 3.000000e+00, double 1.900000e+01, double 2.200000e+01, double 4.170000e-01, double 9.170000e-01, double 7.000000e+00, double 4.000000e+00, double 2.200000e+01, double 2.600000e+01, double 8.300000e-02, double 9.440000e-01, double 8.000000e+00, double 4.000000e+00, double 2.600000e+01, double 3.000000e+01, double 5.500000e-02, double 4.200000e-02, double 9.000000e+00, double 2.000000e+00, double 3.000000e+01, double 3.200000e+01, double 9.580000e-01, double 5.670000e-01, double 1.000000e+01, double 3.000000e+00, double 3.200000e+01, double 3.500000e+01, double 4.330000e-01, double 1.670000e-01, double 1.100000e+01, double 2.000000e+00, double 3.500000e+01, double 3.700000e+01, double 8.330000e-01, double 6.180000e-01, double 4.410000e+04, double 1.100000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 1.670000e-01, double 1.000000e+00, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.330000e-01, double 8.330000e-01, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.000000e+00, double 1.670000e-01, double 5.000000e-01, double 3.000000e+00, double 3.000000e+00, double 8.000000e+00, double 1.100000e+01, double 5.000000e-01, double 1.670000e-01, double 4.000000e+00, double 4.000000e+00, double 1.100000e+01, double 1.500000e+01, double 8.330000e-01, double 1.670000e-01, double 5.000000e+00, double 5.000000e+00, double 1.500000e+01, double 2.000000e+01, double 8.330000e-01, double 2.500000e-01, double 6.000000e+00, double 3.000000e+00, double 2.000000e+01, double 2.300000e+01, double 7.500000e-01, double 5.830000e-01, double 7.000000e+00, double 4.000000e+00, double 2.300000e+01, double 2.700000e+01, double 4.170000e-01, double 5.500000e-02, double 8.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 9.440000e-01, double 3.750000e-01, double 9.000000e+00, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 6.250000e-01, double 3.000000e-01, double 1.000000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 7.000000e-01, double 1.670000e-01, double 1.100000e+01, double 2.000000e+00, double 3.600000e+01, double 3.800000e+01, double 8.330000e-01, double 1.000000e+00, double 3.200000e+04, double 1.100000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 1.670000e-01, double 1.000000e+00, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.330000e-01, double 8.330000e-01, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.000000e+00, double 1.670000e-01, double 5.000000e-01, double 3.000000e+00, double 3.000000e+00, double 8.000000e+00, double 1.100000e+01, double 5.000000e-01, double 1.670000e-01, double 4.000000e+00, double 4.000000e+00, double 1.100000e+01, double 1.500000e+01, double 8.330000e-01, double 1.670000e-01, double 5.000000e+00, double 5.000000e+00, double 1.500000e+01, double 2.000000e+01, double 8.330000e-01, double 2.500000e-01, double 6.000000e+00, double 4.000000e+00, double 2.000000e+01, double 2.400000e+01, double 7.500000e-01, double 2.500000e-01, double 7.000000e+00, double 5.000000e+00, double 2.400000e+01, double 2.900000e+01, double 7.500000e-01, double 5.500000e-02, double 8.000000e+00, double 4.000000e+00, double 2.900000e+01, double 3.300000e+01, double 9.440000e-01, double 3.750000e-01, double 9.000000e+00, double 4.000000e+00, double 3.300000e+01, double 3.700000e+01, double 6.250000e-01, double 4.720000e-01, double 1.000000e+01, double 3.000000e+00, double 3.700000e+01, double 4.000000e+01, double 5.280000e-01, double 9.370000e-01, double 1.100000e+01, double 1.000000e+00, double 4.000000e+01, double 4.100000e+01, double 6.200000e-02, double 1.000000e+00, double 2.400000e+04, double 1.100000e+01, double 0.000000e+00, double 3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3FC55555FFB34B69, double 1.000000e+00, double 2.000000e+00, double 4.000000e+00, double 6.000000e+00, double 0x3FEAAAAA80132D26, double 0x3FEAAAAAFFD9A5B4, double 2.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FC555540099692E, double 5.000000e-01, double 3.000000e+00, double 4.000000e+00, double 9.000000e+00, double 1.300000e+01, double 5.000000e-01, double 5.000000e-01, double 4.000000e+00, double 5.000000e+00, double 1.300000e+01, double 1.800000e+01, double 5.000000e-01, double 0x3FEAAAABFFF00731, double 5.000000e+00, double 5.000000e+00, double 1.800000e+01, double 2.300000e+01, double 0x3FC55550003FE33C, double 2.500000e-01, double 6.000000e+00, double 4.000000e+00, double 2.300000e+01, double 2.700000e+01, double 7.500000e-01, double 2.500000e-01, double 7.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 7.500000e-01, double 0x3FE38E3AC03CBDEE, double 8.000000e+00, double 4.000000e+00, double 3.000000e+01, double 3.400000e+01, double 0x3FD8E38A9FBCDA78, double 0x3FCAAAAFFFC01CC4, double 9.000000e+00, double 3.000000e+00, double 3.400000e+01, double 3.700000e+01, double 0x3FE95554000FF8CF, double 0x3FE888899FE29A25, double 1.000000e+01, double 4.000000e+00, double 3.700000e+01, double 4.100000e+01, double 0x3FCDDDD9A0ABEDC0, double 0x3FDCF3D23F7D6E6B, double 1.100000e+01, double 4.000000e+00, double 4.100000e+01, double 4.500000e+01, double 0x3FE18616E04148CB, double 0x3FD1C71FFF79C843, double 2.205000e+04, double 1.100000e+01, double 0.000000e+00, double 3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3FC55555FFB34B69, double 1.000000e+00, double 2.000000e+00, double 4.000000e+00, double 6.000000e+00, double 0x3FEAAAAA80132D26, double 0x3FEAAAAAFFD9A5B4, double 2.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FC555540099692E, double 5.000000e-01, double 3.000000e+00, double 4.000000e+00, double 9.000000e+00, double 1.300000e+01, double 5.000000e-01, double 5.000000e-01, double 4.000000e+00, double 4.000000e+00, double 1.300000e+01, double 1.700000e+01, double 5.000000e-01, double 5.000000e-01, double 5.000000e+00, double 4.000000e+00, double 1.700000e+01, double 2.100000e+01, double 5.000000e-01, double 0x3FED5556003CBBC8, double 6.000000e+00, double 4.000000e+00, double 2.100000e+01, double 2.500000e+01, double 0x3FB5554FFFD1EFBD, double 2.500000e-01, double 7.000000e+00, double 4.000000e+00, double 2.500000e+01, double 2.900000e+01, double 7.500000e-01, double 0x3FE38E3AC03CBDEE, double 8.000000e+00, double 4.000000e+00, double 2.900000e+01, double 3.300000e+01, double 0x3FD8E38A9FBCDA78, double 0x3FDD5557FFE00E62, double 9.000000e+00, double 4.000000e+00, double 3.300000e+01, double 3.700000e+01, double 0x3FE15554000FF8CF, double 0x3FE44446602E0A77, double 1.000000e+01, double 4.000000e+00, double 3.700000e+01, double 4.100000e+01, double 0x3FD777733FA3EB12, double 0x3FE2AAAD3FE9A4F5, double 1.100000e+01, double 4.000000e+00, double 4.100000e+01, double 4.500000e+01, double 0x3FDAAAA55FF65FC3, double 0x3FDC0004005985F2, double 1.600000e+04, double 1.100000e+01, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3FC55555FFB34B69, double 1.000000e+00, double 0.000000e+00, double 4.000000e+00, double 6.000000e+00, double 0x3FEAAAAA80132D26, double 0x3FEAAAAAFFD9A5B4, double 2.000000e+00, double 0.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FC555540099692E, double 5.000000e-01, double 3.000000e+00, double 0.000000e+00, double 9.000000e+00, double 1.300000e+01, double 5.000000e-01, double 5.000000e-01, double 4.000000e+00, double 0.000000e+00, double 1.300000e+01, double 1.800000e+01, double 5.000000e-01, double 0x3FEAAAABFFF00731, double 5.000000e+00, double 0.000000e+00, double 1.800000e+01, double 2.300000e+01, double 0x3FC55550003FE33C, double 7.500000e-01, double 6.000000e+00, double 0.000000e+00, double 2.300000e+01, double 2.700000e+01, double 2.500000e-01, double 7.500000e-01, double 7.000000e+00, double 0.000000e+00, double 2.700000e+01, double 3.100000e+01, double 2.500000e-01, double 0x3FE38E3AC03CBDEE, double 8.000000e+00, double 0.000000e+00, double 3.100000e+01, double 3.500000e+01, double 0x3FD8E38A9FBCDA78, double 0x3FDD5557FFE00E62, double 9.000000e+00, double 0.000000e+00, double 3.500000e+01, double 3.900000e+01, double 0x3FE15554000FF8CF, double 0x3FC555597F33780E, double 1.000000e+01, double 0.000000e+00, double 3.900000e+01, double 4.200000e+01, double 0x3FEAAAA9A03321FD, double 0x3FE9C71D5FD9A6C7, double 1.100000e+01, double 0.000000e+00, double 4.200000e+01, double 4.600000e+01, double 0x3FC8E38AA0CFBB36, double 4.375000e-01], align 8
@subdv_table = global [23 x %struct.anon.55] [%struct.anon.55 zeroinitializer, %struct.anon.55 zeroinitializer, %struct.anon.55 zeroinitializer, %struct.anon.55 zeroinitializer, %struct.anon.55 zeroinitializer, %struct.anon.55 { i32 0, i32 1 }, %struct.anon.55 { i32 1, i32 1 }, %struct.anon.55 { i32 1, i32 1 }, %struct.anon.55 { i32 1, i32 2 }, %struct.anon.55 { i32 2, i32 2 }, %struct.anon.55 { i32 2, i32 3 }, %struct.anon.55 { i32 2, i32 3 }, %struct.anon.55 { i32 3, i32 4 }, %struct.anon.55 { i32 3, i32 4 }, %struct.anon.55 { i32 3, i32 4 }, %struct.anon.55 { i32 4, i32 5 }, %struct.anon.55 { i32 4, i32 5 }, %struct.anon.55 { i32 4, i32 6 }, %struct.anon.55 { i32 5, i32 6 }, %struct.anon.55 { i32 5, i32 6 }, %struct.anon.55 { i32 5, i32 7 }, %struct.anon.55 { i32 6, i32 7 }, %struct.anon.55 { i32 6, i32 7 }], align 4
@huf_tbl_noESC = internal constant [15 x i32] [i32 1, i32 2, i32 5, i32 7, i32 7, i32 10, i32 10, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13], align 4
@cb_esc_sign = internal global i32 0, align 4
@cb_esc_buf = internal global [288 x i32] zeroinitializer, align 4
@cb_esc_end = internal global i32* null, align 4
@scfsi_calc.scfsi_band = internal constant [5 x i32] [i32 0, i32 6, i32 11, i32 16, i32 21], align 4
@scfsi_calc.slen1_n = internal constant [16 x i32] [i32 0, i32 1, i32 1, i32 1, i32 8, i32 2, i32 2, i32 2, i32 4, i32 4, i32 4, i32 8, i32 8, i32 8, i32 16, i32 16], align 4
@scfsi_calc.slen2_n = internal constant [16 x i32] [i32 0, i32 2, i32 4, i32 8, i32 1, i32 2, i32 4, i32 8, i32 2, i32 4, i32 8, i32 2, i32 4, i32 8, i32 4, i32 8], align 4
@scfsi_calc.slen1_tab = internal constant [16 x i32] [i32 0, i32 0, i32 0, i32 0, i32 3, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 4, i32 4], align 4
@scfsi_calc.slen2_tab = internal constant [16 x i32] [i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 2, i32 3], align 4
@ts_real_time.initial_time = internal global i32 0, align 4
@ts_process_time.initial_time = internal global i32 0, align 4
@.str.294 = private unnamed_addr constant [75 x i8] c"    Frame          |  CPU/estimated  |  time/estimated | play/CPU |   ETA\0A\00", align 1
@.str.1.295 = private unnamed_addr constant [96 x i8] c"\0D%6ld/%6ld(%3d%%)|%2d:%02d:%02d/%2d:%02d:%02d|%2d:%02d:%02d/%2d:%02d:%02d|%10.4f|%2d:%02d:%02d \00", align 1
@s_freq_table = global [2 x [4 x double]] [[4 x double] [double 2.205000e+01, double 2.400000e+01, double 1.600000e+01, double 0.000000e+00], [4 x double] [double 4.410000e+01, double 4.800000e+01, double 3.200000e+01, double 0.000000e+00]], align 8
@bitrate_table = global [2 x [15 x i32]] [[15 x i32] [i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 144, i32 160], [15 x i32] [i32 0, i32 32, i32 40, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 160, i32 192, i32 224, i32 256, i32 320]], align 4
@NativeByteOrder = global i32 0, align 4
@putmask = global [9 x i32] [i32 0, i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127, i32 255], align 4
@.str.302 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1.303 = private unnamed_addr constant [37 x i8] c"MPEG1 samplerates(kHz): 32 44.1 48 \0A\00", align 1
@.str.2.304 = private unnamed_addr constant [16 x i8] c"bitrates(kbs): \00", align 1
@.str.3.305 = private unnamed_addr constant [4 x i8] c"%i \00", align 1
@.str.4.306 = private unnamed_addr constant [38 x i8] c"MPEG2 samplerates(kHz): 16 22.05 24 \0A\00", align 1
@.str.5.309 = private unnamed_addr constant [51 x i8] c"Bitrate %dkbs not legal for %iHz output sampling.\0A\00", align 1
@.str.6.312 = private unnamed_addr constant [47 x i8] c"SmpFrqIndex: %ldHz is not a legal sample rate\0A\00", align 1
@.str.7.313 = private unnamed_addr constant [23 x i8] c"Unable to allocate %s\0A\00", align 1
@.str.8.314 = private unnamed_addr constant [5 x i8] c"ABCD\00", align 1
@.str.9.315 = private unnamed_addr constant [5 x i8] c"DCBA\00", align 1
@.str.10.318 = private unnamed_addr constant [41 x i8] c"j == (bs->buf_size-1 - bs->buf_byte_idx)\00", align 1
@.str.11.319 = private unnamed_addr constant [7 x i8] c"util.c\00", align 1
@__func__.copy_buffer = private unnamed_addr constant [12 x i8] c"copy_buffer\00", align 1
@.str.12.322 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@.str.13.327 = private unnamed_addr constant [51 x i8] c"Cannot read or write more than %d bits at a time.\0A\00", align 1
@.str.14.328 = private unnamed_addr constant [22 x i8] c"bs->buf_byte_idx >= 0\00", align 1
@__func__.putbits = private unnamed_addr constant [8 x i8] c"putbits\00", align 1
@.str.329 = private unnamed_addr constant [13 x i8] c"sf_ok!=10000\00", align 1
@.str.1.330 = private unnamed_addr constant [14 x i8] c"vbrquantize.c\00", align 1
@__func__.find_scalefac = private unnamed_addr constant [14 x i8] c"find_scalefac\00", align 1
@SizeOfEmptyFrame = global [2 x [2 x i32]] [[2 x i32] [i32 32, i32 17], [2 x i32] [i32 17, i32 9]], align 4
@pVbrFrames = global i32* null, align 4
@nVbrNumFrames = global i32 0, align 4
@nVbrFrameBufferSize = global i32 0, align 4
@VBRTag = internal global [5 x i8] c"Xing\00", align 1
@GetVbrTag.sr_table = internal global [4 x i32] [i32 44100, i32 48000, i32 32000, i32 99999], align 4
@g_Position = internal global [100 x i32] zeroinitializer, align 4
@pbtStreamBuffer = internal global [216 x i8] zeroinitializer, align 1
@nZeroStreamSize = internal global i32 0, align 4
@.str.335 = private unnamed_addr constant [34 x i8] c"illegal sampling frequency index\0A\00", align 1
@InitVbrTag.framesize = internal constant [3 x i32] [i32 208, i32 192, i32 288], align 4
@TotalFrameSize = internal global i32 0, align 4
@.str.1.336 = private unnamed_addr constant [34 x i8] c"Xing VBR header problem...use -t\0A\00", align 1
@.str.2.339 = private unnamed_addr constant [4 x i8] c"rb+\00", align 1
@.str.3.340 = private unnamed_addr constant [7 x i8] c"LAME%s\00", align 1
@.str.345 = private unnamed_addr constant [39 x i8] c"LAME version %s (www.sulaco.org/mp3) \0A\00", align 1
@.str.1.346 = private unnamed_addr constant [67 x i8] c"GPSYCHO: GPL psycho-acoustic and noise shaping model version %s. \0A\00", align 1
@lpszVersion = internal global [80 x i8] zeroinitializer, align 1
@.str.2.347 = private unnamed_addr constant [8 x i8] c"%d.%02d\00", align 1
@.str.3.348 = private unnamed_addr constant [8 x i8] c"%d:%02d\00", align 1

; Function Attrs: nounwind
define arm_aapcscc void @fft_short([256 x float]*, i32, i16**) #0 {
  %4 = alloca [256 x float]*, align 4
  %5 = alloca i32, align 4
  %6 = alloca i16**, align 4
  %7 = alloca i16, align 2
  %8 = alloca i16, align 2
  %9 = alloca i16, align 2
  %10 = alloca float*, align 4
  %11 = alloca i16, align 2
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca float, align 4
  %20 = alloca float, align 4
  %21 = alloca float, align 4
  %22 = alloca float, align 4
  %23 = alloca float, align 4
  %24 = alloca float, align 4
  %25 = alloca float, align 4
  %26 = alloca float, align 4
  store [256 x float]* %0, [256 x float]** %4, align 4
  store i32 %1, i32* %5, align 4
  store i16** %2, i16*** %6, align 4
  store i16 0, i16* %9, align 2
  br label %27

; <label>:27:                                     ; preds = %967, %3
  %28 = load i16, i16* %9, align 2
  %29 = sext i16 %28 to i32
  %30 = icmp slt i32 %29, 3
  br i1 %30, label %31, label %970

; <label>:31:                                     ; preds = %27
  %32 = load [256 x float]*, [256 x float]** %4, align 4
  %33 = load i16, i16* %9, align 2
  %34 = sext i16 %33 to i32
  %35 = getelementptr inbounds [256 x float], [256 x float]* %32, i32 %34
  %36 = getelementptr inbounds [256 x float], [256 x float]* %35, i32 0, i32 128
  store float* %36, float** %10, align 4
  %37 = load i16, i16* %9, align 2
  %38 = sext i16 %37 to i32
  %39 = add nsw i32 %38, 1
  %40 = mul nsw i32 192, %39
  %41 = trunc i32 %40 to i16
  store i16 %41, i16* %11, align 2
  store i16 31, i16* %8, align 2
  %42 = load i32, i32* %5, align 4
  %43 = icmp slt i32 %42, 2
  br i1 %43, label %44, label %281

; <label>:44:                                     ; preds = %31
  br label %45

; <label>:45:                                     ; preds = %275, %44
  %46 = load i16, i16* %8, align 2
  %47 = sext i16 %46 to i32
  %48 = shl i32 %47, 2
  %49 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i32 0, i32 %48
  %50 = load i16, i16* %49, align 2
  store i16 %50, i16* %7, align 2
  %51 = load i16, i16* %7, align 2
  %52 = sext i16 %51 to i32
  %53 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %52
  %54 = load float, float* %53, align 4
  %55 = load i16**, i16*** %6, align 4
  %56 = load i32, i32* %5, align 4
  %57 = getelementptr inbounds i16*, i16** %55, i32 %56
  %58 = load i16*, i16** %57, align 4
  %59 = load i16, i16* %7, align 2
  %60 = sext i16 %59 to i32
  %61 = load i16, i16* %11, align 2
  %62 = sext i16 %61 to i32
  %63 = add nsw i32 %60, %62
  %64 = getelementptr inbounds i16, i16* %58, i32 %63
  %65 = load i16, i16* %64, align 2
  %66 = sext i16 %65 to i32
  %67 = sitofp i32 %66 to float
  %68 = fmul float %54, %67
  store float %68, float* %12, align 4
  %69 = load i16, i16* %7, align 2
  %70 = sext i16 %69 to i32
  %71 = sub nsw i32 127, %70
  %72 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %71
  %73 = load float, float* %72, align 4
  %74 = load i16**, i16*** %6, align 4
  %75 = load i32, i32* %5, align 4
  %76 = getelementptr inbounds i16*, i16** %74, i32 %75
  %77 = load i16*, i16** %76, align 4
  %78 = load i16, i16* %7, align 2
  %79 = sext i16 %78 to i32
  %80 = load i16, i16* %11, align 2
  %81 = sext i16 %80 to i32
  %82 = add nsw i32 %79, %81
  %83 = add nsw i32 %82, 128
  %84 = getelementptr inbounds i16, i16* %77, i32 %83
  %85 = load i16, i16* %84, align 2
  %86 = sext i16 %85 to i32
  %87 = sitofp i32 %86 to float
  %88 = fmul float %73, %87
  store float %88, float* %16, align 4
  %89 = load float, float* %12, align 4
  %90 = load float, float* %16, align 4
  %91 = fsub float %89, %90
  store float %91, float* %13, align 4
  %92 = load float, float* %12, align 4
  %93 = load float, float* %16, align 4
  %94 = fadd float %92, %93
  store float %94, float* %12, align 4
  %95 = load i16, i16* %7, align 2
  %96 = sext i16 %95 to i32
  %97 = add nsw i32 %96, 64
  %98 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %97
  %99 = load float, float* %98, align 4
  %100 = load i16**, i16*** %6, align 4
  %101 = load i32, i32* %5, align 4
  %102 = getelementptr inbounds i16*, i16** %100, i32 %101
  %103 = load i16*, i16** %102, align 4
  %104 = load i16, i16* %7, align 2
  %105 = sext i16 %104 to i32
  %106 = load i16, i16* %11, align 2
  %107 = sext i16 %106 to i32
  %108 = add nsw i32 %105, %107
  %109 = add nsw i32 %108, 64
  %110 = getelementptr inbounds i16, i16* %103, i32 %109
  %111 = load i16, i16* %110, align 2
  %112 = sext i16 %111 to i32
  %113 = sitofp i32 %112 to float
  %114 = fmul float %99, %113
  store float %114, float* %14, align 4
  %115 = load i16, i16* %7, align 2
  %116 = sext i16 %115 to i32
  %117 = sub nsw i32 63, %116
  %118 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %117
  %119 = load float, float* %118, align 4
  %120 = load i16**, i16*** %6, align 4
  %121 = load i32, i32* %5, align 4
  %122 = getelementptr inbounds i16*, i16** %120, i32 %121
  %123 = load i16*, i16** %122, align 4
  %124 = load i16, i16* %7, align 2
  %125 = sext i16 %124 to i32
  %126 = load i16, i16* %11, align 2
  %127 = sext i16 %126 to i32
  %128 = add nsw i32 %125, %127
  %129 = add nsw i32 %128, 192
  %130 = getelementptr inbounds i16, i16* %123, i32 %129
  %131 = load i16, i16* %130, align 2
  %132 = sext i16 %131 to i32
  %133 = sitofp i32 %132 to float
  %134 = fmul float %119, %133
  store float %134, float* %16, align 4
  %135 = load float, float* %14, align 4
  %136 = load float, float* %16, align 4
  %137 = fsub float %135, %136
  store float %137, float* %15, align 4
  %138 = load float, float* %14, align 4
  %139 = load float, float* %16, align 4
  %140 = fadd float %138, %139
  store float %140, float* %14, align 4
  %141 = load float*, float** %10, align 4
  %142 = getelementptr inbounds float, float* %141, i32 -4
  store float* %142, float** %10, align 4
  %143 = load float, float* %12, align 4
  %144 = load float, float* %14, align 4
  %145 = fadd float %143, %144
  %146 = load float*, float** %10, align 4
  %147 = getelementptr inbounds float, float* %146, i32 0
  store float %145, float* %147, align 4
  %148 = load float, float* %12, align 4
  %149 = load float, float* %14, align 4
  %150 = fsub float %148, %149
  %151 = load float*, float** %10, align 4
  %152 = getelementptr inbounds float, float* %151, i32 2
  store float %150, float* %152, align 4
  %153 = load float, float* %13, align 4
  %154 = load float, float* %15, align 4
  %155 = fadd float %153, %154
  %156 = load float*, float** %10, align 4
  %157 = getelementptr inbounds float, float* %156, i32 1
  store float %155, float* %157, align 4
  %158 = load float, float* %13, align 4
  %159 = load float, float* %15, align 4
  %160 = fsub float %158, %159
  %161 = load float*, float** %10, align 4
  %162 = getelementptr inbounds float, float* %161, i32 3
  store float %160, float* %162, align 4
  %163 = load i16, i16* %7, align 2
  %164 = sext i16 %163 to i32
  %165 = add nsw i32 %164, 1
  %166 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %165
  %167 = load float, float* %166, align 4
  %168 = load i16**, i16*** %6, align 4
  %169 = load i32, i32* %5, align 4
  %170 = getelementptr inbounds i16*, i16** %168, i32 %169
  %171 = load i16*, i16** %170, align 4
  %172 = load i16, i16* %7, align 2
  %173 = sext i16 %172 to i32
  %174 = load i16, i16* %11, align 2
  %175 = sext i16 %174 to i32
  %176 = add nsw i32 %173, %175
  %177 = add nsw i32 %176, 1
  %178 = getelementptr inbounds i16, i16* %171, i32 %177
  %179 = load i16, i16* %178, align 2
  %180 = sext i16 %179 to i32
  %181 = sitofp i32 %180 to float
  %182 = fmul float %167, %181
  store float %182, float* %12, align 4
  %183 = load i16, i16* %7, align 2
  %184 = sext i16 %183 to i32
  %185 = sub nsw i32 126, %184
  %186 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %185
  %187 = load float, float* %186, align 4
  %188 = load i16**, i16*** %6, align 4
  %189 = load i32, i32* %5, align 4
  %190 = getelementptr inbounds i16*, i16** %188, i32 %189
  %191 = load i16*, i16** %190, align 4
  %192 = load i16, i16* %7, align 2
  %193 = sext i16 %192 to i32
  %194 = load i16, i16* %11, align 2
  %195 = sext i16 %194 to i32
  %196 = add nsw i32 %193, %195
  %197 = add nsw i32 %196, 129
  %198 = getelementptr inbounds i16, i16* %191, i32 %197
  %199 = load i16, i16* %198, align 2
  %200 = sext i16 %199 to i32
  %201 = sitofp i32 %200 to float
  %202 = fmul float %187, %201
  store float %202, float* %16, align 4
  %203 = load float, float* %12, align 4
  %204 = load float, float* %16, align 4
  %205 = fsub float %203, %204
  store float %205, float* %13, align 4
  %206 = load float, float* %12, align 4
  %207 = load float, float* %16, align 4
  %208 = fadd float %206, %207
  store float %208, float* %12, align 4
  %209 = load i16, i16* %7, align 2
  %210 = sext i16 %209 to i32
  %211 = add nsw i32 %210, 65
  %212 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %211
  %213 = load float, float* %212, align 4
  %214 = load i16**, i16*** %6, align 4
  %215 = load i32, i32* %5, align 4
  %216 = getelementptr inbounds i16*, i16** %214, i32 %215
  %217 = load i16*, i16** %216, align 4
  %218 = load i16, i16* %7, align 2
  %219 = sext i16 %218 to i32
  %220 = load i16, i16* %11, align 2
  %221 = sext i16 %220 to i32
  %222 = add nsw i32 %219, %221
  %223 = add nsw i32 %222, 65
  %224 = getelementptr inbounds i16, i16* %217, i32 %223
  %225 = load i16, i16* %224, align 2
  %226 = sext i16 %225 to i32
  %227 = sitofp i32 %226 to float
  %228 = fmul float %213, %227
  store float %228, float* %14, align 4
  %229 = load i16, i16* %7, align 2
  %230 = sext i16 %229 to i32
  %231 = sub nsw i32 62, %230
  %232 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %231
  %233 = load float, float* %232, align 4
  %234 = load i16**, i16*** %6, align 4
  %235 = load i32, i32* %5, align 4
  %236 = getelementptr inbounds i16*, i16** %234, i32 %235
  %237 = load i16*, i16** %236, align 4
  %238 = load i16, i16* %7, align 2
  %239 = sext i16 %238 to i32
  %240 = load i16, i16* %11, align 2
  %241 = sext i16 %240 to i32
  %242 = add nsw i32 %239, %241
  %243 = add nsw i32 %242, 193
  %244 = getelementptr inbounds i16, i16* %237, i32 %243
  %245 = load i16, i16* %244, align 2
  %246 = sext i16 %245 to i32
  %247 = sitofp i32 %246 to float
  %248 = fmul float %233, %247
  store float %248, float* %16, align 4
  %249 = load float, float* %14, align 4
  %250 = load float, float* %16, align 4
  %251 = fsub float %249, %250
  store float %251, float* %15, align 4
  %252 = load float, float* %14, align 4
  %253 = load float, float* %16, align 4
  %254 = fadd float %252, %253
  store float %254, float* %14, align 4
  %255 = load float, float* %12, align 4
  %256 = load float, float* %14, align 4
  %257 = fadd float %255, %256
  %258 = load float*, float** %10, align 4
  %259 = getelementptr inbounds float, float* %258, i32 128
  store float %257, float* %259, align 4
  %260 = load float, float* %12, align 4
  %261 = load float, float* %14, align 4
  %262 = fsub float %260, %261
  %263 = load float*, float** %10, align 4
  %264 = getelementptr inbounds float, float* %263, i32 130
  store float %262, float* %264, align 4
  %265 = load float, float* %13, align 4
  %266 = load float, float* %15, align 4
  %267 = fadd float %265, %266
  %268 = load float*, float** %10, align 4
  %269 = getelementptr inbounds float, float* %268, i32 129
  store float %267, float* %269, align 4
  %270 = load float, float* %13, align 4
  %271 = load float, float* %15, align 4
  %272 = fsub float %270, %271
  %273 = load float*, float** %10, align 4
  %274 = getelementptr inbounds float, float* %273, i32 131
  store float %272, float* %274, align 4
  br label %275

; <label>:275:                                    ; preds = %45
  %276 = load i16, i16* %8, align 2
  %277 = add i16 %276, -1
  store i16 %277, i16* %8, align 2
  %278 = sext i16 %277 to i32
  %279 = icmp sge i32 %278, 0
  br i1 %279, label %45, label %280

; <label>:280:                                    ; preds = %275
  br label %965

; <label>:281:                                    ; preds = %31
  %282 = load i32, i32* %5, align 4
  %283 = icmp eq i32 %282, 2
  br i1 %283, label %284, label %624

; <label>:284:                                    ; preds = %281
  br label %285

; <label>:285:                                    ; preds = %618, %284
  %286 = load i16, i16* %8, align 2
  %287 = sext i16 %286 to i32
  %288 = shl i32 %287, 2
  %289 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i32 0, i32 %288
  %290 = load i16, i16* %289, align 2
  store i16 %290, i16* %7, align 2
  %291 = load i16, i16* %7, align 2
  %292 = sext i16 %291 to i32
  %293 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %292
  %294 = load float, float* %293, align 4
  %295 = load i16**, i16*** %6, align 4
  %296 = getelementptr inbounds i16*, i16** %295, i32 0
  %297 = load i16*, i16** %296, align 4
  %298 = load i16, i16* %7, align 2
  %299 = sext i16 %298 to i32
  %300 = load i16, i16* %11, align 2
  %301 = sext i16 %300 to i32
  %302 = add nsw i32 %299, %301
  %303 = getelementptr inbounds i16, i16* %297, i32 %302
  %304 = load i16, i16* %303, align 2
  %305 = sext i16 %304 to i32
  %306 = load i16**, i16*** %6, align 4
  %307 = getelementptr inbounds i16*, i16** %306, i32 1
  %308 = load i16*, i16** %307, align 4
  %309 = load i16, i16* %7, align 2
  %310 = sext i16 %309 to i32
  %311 = load i16, i16* %11, align 2
  %312 = sext i16 %311 to i32
  %313 = add nsw i32 %310, %312
  %314 = getelementptr inbounds i16, i16* %308, i32 %313
  %315 = load i16, i16* %314, align 2
  %316 = sext i16 %315 to i32
  %317 = add nsw i32 %305, %316
  %318 = sitofp i32 %317 to float
  %319 = fmul float 0x3FE6A09E60000000, %318
  %320 = fmul float %294, %319
  store float %320, float* %17, align 4
  %321 = load i16, i16* %7, align 2
  %322 = sext i16 %321 to i32
  %323 = sub nsw i32 127, %322
  %324 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %323
  %325 = load float, float* %324, align 4
  %326 = load i16**, i16*** %6, align 4
  %327 = getelementptr inbounds i16*, i16** %326, i32 0
  %328 = load i16*, i16** %327, align 4
  %329 = load i16, i16* %7, align 2
  %330 = sext i16 %329 to i32
  %331 = load i16, i16* %11, align 2
  %332 = sext i16 %331 to i32
  %333 = add nsw i32 %330, %332
  %334 = add nsw i32 %333, 128
  %335 = getelementptr inbounds i16, i16* %328, i32 %334
  %336 = load i16, i16* %335, align 2
  %337 = sext i16 %336 to i32
  %338 = load i16**, i16*** %6, align 4
  %339 = getelementptr inbounds i16*, i16** %338, i32 1
  %340 = load i16*, i16** %339, align 4
  %341 = load i16, i16* %7, align 2
  %342 = sext i16 %341 to i32
  %343 = load i16, i16* %11, align 2
  %344 = sext i16 %343 to i32
  %345 = add nsw i32 %342, %344
  %346 = add nsw i32 %345, 128
  %347 = getelementptr inbounds i16, i16* %340, i32 %346
  %348 = load i16, i16* %347, align 2
  %349 = sext i16 %348 to i32
  %350 = add nsw i32 %337, %349
  %351 = sitofp i32 %350 to float
  %352 = fmul float 0x3FE6A09E60000000, %351
  %353 = fmul float %325, %352
  store float %353, float* %21, align 4
  %354 = load float, float* %17, align 4
  %355 = load float, float* %21, align 4
  %356 = fsub float %354, %355
  store float %356, float* %18, align 4
  %357 = load float, float* %17, align 4
  %358 = load float, float* %21, align 4
  %359 = fadd float %357, %358
  store float %359, float* %17, align 4
  %360 = load i16, i16* %7, align 2
  %361 = sext i16 %360 to i32
  %362 = add nsw i32 %361, 64
  %363 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %362
  %364 = load float, float* %363, align 4
  %365 = load i16**, i16*** %6, align 4
  %366 = getelementptr inbounds i16*, i16** %365, i32 0
  %367 = load i16*, i16** %366, align 4
  %368 = load i16, i16* %7, align 2
  %369 = sext i16 %368 to i32
  %370 = load i16, i16* %11, align 2
  %371 = sext i16 %370 to i32
  %372 = add nsw i32 %369, %371
  %373 = add nsw i32 %372, 64
  %374 = getelementptr inbounds i16, i16* %367, i32 %373
  %375 = load i16, i16* %374, align 2
  %376 = sext i16 %375 to i32
  %377 = load i16**, i16*** %6, align 4
  %378 = getelementptr inbounds i16*, i16** %377, i32 1
  %379 = load i16*, i16** %378, align 4
  %380 = load i16, i16* %7, align 2
  %381 = sext i16 %380 to i32
  %382 = load i16, i16* %11, align 2
  %383 = sext i16 %382 to i32
  %384 = add nsw i32 %381, %383
  %385 = add nsw i32 %384, 64
  %386 = getelementptr inbounds i16, i16* %379, i32 %385
  %387 = load i16, i16* %386, align 2
  %388 = sext i16 %387 to i32
  %389 = add nsw i32 %376, %388
  %390 = sitofp i32 %389 to float
  %391 = fmul float 0x3FE6A09E60000000, %390
  %392 = fmul float %364, %391
  store float %392, float* %19, align 4
  %393 = load i16, i16* %7, align 2
  %394 = sext i16 %393 to i32
  %395 = sub nsw i32 63, %394
  %396 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %395
  %397 = load float, float* %396, align 4
  %398 = load i16**, i16*** %6, align 4
  %399 = getelementptr inbounds i16*, i16** %398, i32 0
  %400 = load i16*, i16** %399, align 4
  %401 = load i16, i16* %7, align 2
  %402 = sext i16 %401 to i32
  %403 = load i16, i16* %11, align 2
  %404 = sext i16 %403 to i32
  %405 = add nsw i32 %402, %404
  %406 = add nsw i32 %405, 192
  %407 = getelementptr inbounds i16, i16* %400, i32 %406
  %408 = load i16, i16* %407, align 2
  %409 = sext i16 %408 to i32
  %410 = load i16**, i16*** %6, align 4
  %411 = getelementptr inbounds i16*, i16** %410, i32 1
  %412 = load i16*, i16** %411, align 4
  %413 = load i16, i16* %7, align 2
  %414 = sext i16 %413 to i32
  %415 = load i16, i16* %11, align 2
  %416 = sext i16 %415 to i32
  %417 = add nsw i32 %414, %416
  %418 = add nsw i32 %417, 192
  %419 = getelementptr inbounds i16, i16* %412, i32 %418
  %420 = load i16, i16* %419, align 2
  %421 = sext i16 %420 to i32
  %422 = add nsw i32 %409, %421
  %423 = sitofp i32 %422 to float
  %424 = fmul float 0x3FE6A09E60000000, %423
  %425 = fmul float %397, %424
  store float %425, float* %21, align 4
  %426 = load float, float* %19, align 4
  %427 = load float, float* %21, align 4
  %428 = fsub float %426, %427
  store float %428, float* %20, align 4
  %429 = load float, float* %19, align 4
  %430 = load float, float* %21, align 4
  %431 = fadd float %429, %430
  store float %431, float* %19, align 4
  %432 = load float*, float** %10, align 4
  %433 = getelementptr inbounds float, float* %432, i32 -4
  store float* %433, float** %10, align 4
  %434 = load float, float* %17, align 4
  %435 = load float, float* %19, align 4
  %436 = fadd float %434, %435
  %437 = load float*, float** %10, align 4
  %438 = getelementptr inbounds float, float* %437, i32 0
  store float %436, float* %438, align 4
  %439 = load float, float* %17, align 4
  %440 = load float, float* %19, align 4
  %441 = fsub float %439, %440
  %442 = load float*, float** %10, align 4
  %443 = getelementptr inbounds float, float* %442, i32 2
  store float %441, float* %443, align 4
  %444 = load float, float* %18, align 4
  %445 = load float, float* %20, align 4
  %446 = fadd float %444, %445
  %447 = load float*, float** %10, align 4
  %448 = getelementptr inbounds float, float* %447, i32 1
  store float %446, float* %448, align 4
  %449 = load float, float* %18, align 4
  %450 = load float, float* %20, align 4
  %451 = fsub float %449, %450
  %452 = load float*, float** %10, align 4
  %453 = getelementptr inbounds float, float* %452, i32 3
  store float %451, float* %453, align 4
  %454 = load i16, i16* %7, align 2
  %455 = sext i16 %454 to i32
  %456 = add nsw i32 %455, 1
  %457 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %456
  %458 = load float, float* %457, align 4
  %459 = load i16**, i16*** %6, align 4
  %460 = getelementptr inbounds i16*, i16** %459, i32 0
  %461 = load i16*, i16** %460, align 4
  %462 = load i16, i16* %7, align 2
  %463 = sext i16 %462 to i32
  %464 = load i16, i16* %11, align 2
  %465 = sext i16 %464 to i32
  %466 = add nsw i32 %463, %465
  %467 = add nsw i32 %466, 1
  %468 = getelementptr inbounds i16, i16* %461, i32 %467
  %469 = load i16, i16* %468, align 2
  %470 = sext i16 %469 to i32
  %471 = load i16**, i16*** %6, align 4
  %472 = getelementptr inbounds i16*, i16** %471, i32 1
  %473 = load i16*, i16** %472, align 4
  %474 = load i16, i16* %7, align 2
  %475 = sext i16 %474 to i32
  %476 = load i16, i16* %11, align 2
  %477 = sext i16 %476 to i32
  %478 = add nsw i32 %475, %477
  %479 = add nsw i32 %478, 1
  %480 = getelementptr inbounds i16, i16* %473, i32 %479
  %481 = load i16, i16* %480, align 2
  %482 = sext i16 %481 to i32
  %483 = add nsw i32 %470, %482
  %484 = sitofp i32 %483 to float
  %485 = fmul float 0x3FE6A09E60000000, %484
  %486 = fmul float %458, %485
  store float %486, float* %17, align 4
  %487 = load i16, i16* %7, align 2
  %488 = sext i16 %487 to i32
  %489 = sub nsw i32 126, %488
  %490 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %489
  %491 = load float, float* %490, align 4
  %492 = load i16**, i16*** %6, align 4
  %493 = getelementptr inbounds i16*, i16** %492, i32 0
  %494 = load i16*, i16** %493, align 4
  %495 = load i16, i16* %7, align 2
  %496 = sext i16 %495 to i32
  %497 = load i16, i16* %11, align 2
  %498 = sext i16 %497 to i32
  %499 = add nsw i32 %496, %498
  %500 = add nsw i32 %499, 129
  %501 = getelementptr inbounds i16, i16* %494, i32 %500
  %502 = load i16, i16* %501, align 2
  %503 = sext i16 %502 to i32
  %504 = load i16**, i16*** %6, align 4
  %505 = getelementptr inbounds i16*, i16** %504, i32 1
  %506 = load i16*, i16** %505, align 4
  %507 = load i16, i16* %7, align 2
  %508 = sext i16 %507 to i32
  %509 = load i16, i16* %11, align 2
  %510 = sext i16 %509 to i32
  %511 = add nsw i32 %508, %510
  %512 = add nsw i32 %511, 129
  %513 = getelementptr inbounds i16, i16* %506, i32 %512
  %514 = load i16, i16* %513, align 2
  %515 = sext i16 %514 to i32
  %516 = add nsw i32 %503, %515
  %517 = sitofp i32 %516 to float
  %518 = fmul float 0x3FE6A09E60000000, %517
  %519 = fmul float %491, %518
  store float %519, float* %21, align 4
  %520 = load float, float* %17, align 4
  %521 = load float, float* %21, align 4
  %522 = fsub float %520, %521
  store float %522, float* %18, align 4
  %523 = load float, float* %17, align 4
  %524 = load float, float* %21, align 4
  %525 = fadd float %523, %524
  store float %525, float* %17, align 4
  %526 = load i16, i16* %7, align 2
  %527 = sext i16 %526 to i32
  %528 = add nsw i32 %527, 65
  %529 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %528
  %530 = load float, float* %529, align 4
  %531 = load i16**, i16*** %6, align 4
  %532 = getelementptr inbounds i16*, i16** %531, i32 0
  %533 = load i16*, i16** %532, align 4
  %534 = load i16, i16* %7, align 2
  %535 = sext i16 %534 to i32
  %536 = load i16, i16* %11, align 2
  %537 = sext i16 %536 to i32
  %538 = add nsw i32 %535, %537
  %539 = add nsw i32 %538, 65
  %540 = getelementptr inbounds i16, i16* %533, i32 %539
  %541 = load i16, i16* %540, align 2
  %542 = sext i16 %541 to i32
  %543 = load i16**, i16*** %6, align 4
  %544 = getelementptr inbounds i16*, i16** %543, i32 1
  %545 = load i16*, i16** %544, align 4
  %546 = load i16, i16* %7, align 2
  %547 = sext i16 %546 to i32
  %548 = load i16, i16* %11, align 2
  %549 = sext i16 %548 to i32
  %550 = add nsw i32 %547, %549
  %551 = add nsw i32 %550, 65
  %552 = getelementptr inbounds i16, i16* %545, i32 %551
  %553 = load i16, i16* %552, align 2
  %554 = sext i16 %553 to i32
  %555 = add nsw i32 %542, %554
  %556 = sitofp i32 %555 to float
  %557 = fmul float 0x3FE6A09E60000000, %556
  %558 = fmul float %530, %557
  store float %558, float* %19, align 4
  %559 = load i16, i16* %7, align 2
  %560 = sext i16 %559 to i32
  %561 = sub nsw i32 62, %560
  %562 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %561
  %563 = load float, float* %562, align 4
  %564 = load i16**, i16*** %6, align 4
  %565 = getelementptr inbounds i16*, i16** %564, i32 0
  %566 = load i16*, i16** %565, align 4
  %567 = load i16, i16* %7, align 2
  %568 = sext i16 %567 to i32
  %569 = load i16, i16* %11, align 2
  %570 = sext i16 %569 to i32
  %571 = add nsw i32 %568, %570
  %572 = add nsw i32 %571, 193
  %573 = getelementptr inbounds i16, i16* %566, i32 %572
  %574 = load i16, i16* %573, align 2
  %575 = sext i16 %574 to i32
  %576 = load i16**, i16*** %6, align 4
  %577 = getelementptr inbounds i16*, i16** %576, i32 1
  %578 = load i16*, i16** %577, align 4
  %579 = load i16, i16* %7, align 2
  %580 = sext i16 %579 to i32
  %581 = load i16, i16* %11, align 2
  %582 = sext i16 %581 to i32
  %583 = add nsw i32 %580, %582
  %584 = add nsw i32 %583, 193
  %585 = getelementptr inbounds i16, i16* %578, i32 %584
  %586 = load i16, i16* %585, align 2
  %587 = sext i16 %586 to i32
  %588 = add nsw i32 %575, %587
  %589 = sitofp i32 %588 to float
  %590 = fmul float 0x3FE6A09E60000000, %589
  %591 = fmul float %563, %590
  store float %591, float* %21, align 4
  %592 = load float, float* %19, align 4
  %593 = load float, float* %21, align 4
  %594 = fsub float %592, %593
  store float %594, float* %20, align 4
  %595 = load float, float* %19, align 4
  %596 = load float, float* %21, align 4
  %597 = fadd float %595, %596
  store float %597, float* %19, align 4
  %598 = load float, float* %17, align 4
  %599 = load float, float* %19, align 4
  %600 = fadd float %598, %599
  %601 = load float*, float** %10, align 4
  %602 = getelementptr inbounds float, float* %601, i32 128
  store float %600, float* %602, align 4
  %603 = load float, float* %17, align 4
  %604 = load float, float* %19, align 4
  %605 = fsub float %603, %604
  %606 = load float*, float** %10, align 4
  %607 = getelementptr inbounds float, float* %606, i32 130
  store float %605, float* %607, align 4
  %608 = load float, float* %18, align 4
  %609 = load float, float* %20, align 4
  %610 = fadd float %608, %609
  %611 = load float*, float** %10, align 4
  %612 = getelementptr inbounds float, float* %611, i32 129
  store float %610, float* %612, align 4
  %613 = load float, float* %18, align 4
  %614 = load float, float* %20, align 4
  %615 = fsub float %613, %614
  %616 = load float*, float** %10, align 4
  %617 = getelementptr inbounds float, float* %616, i32 131
  store float %615, float* %617, align 4
  br label %618

; <label>:618:                                    ; preds = %285
  %619 = load i16, i16* %8, align 2
  %620 = add i16 %619, -1
  store i16 %620, i16* %8, align 2
  %621 = sext i16 %620 to i32
  %622 = icmp sge i32 %621, 0
  br i1 %622, label %285, label %623

; <label>:623:                                    ; preds = %618
  br label %964

; <label>:624:                                    ; preds = %281
  br label %625

; <label>:625:                                    ; preds = %958, %624
  %626 = load i16, i16* %8, align 2
  %627 = sext i16 %626 to i32
  %628 = shl i32 %627, 2
  %629 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i32 0, i32 %628
  %630 = load i16, i16* %629, align 2
  store i16 %630, i16* %7, align 2
  %631 = load i16, i16* %7, align 2
  %632 = sext i16 %631 to i32
  %633 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %632
  %634 = load float, float* %633, align 4
  %635 = load i16**, i16*** %6, align 4
  %636 = getelementptr inbounds i16*, i16** %635, i32 0
  %637 = load i16*, i16** %636, align 4
  %638 = load i16, i16* %7, align 2
  %639 = sext i16 %638 to i32
  %640 = load i16, i16* %11, align 2
  %641 = sext i16 %640 to i32
  %642 = add nsw i32 %639, %641
  %643 = getelementptr inbounds i16, i16* %637, i32 %642
  %644 = load i16, i16* %643, align 2
  %645 = sext i16 %644 to i32
  %646 = load i16**, i16*** %6, align 4
  %647 = getelementptr inbounds i16*, i16** %646, i32 1
  %648 = load i16*, i16** %647, align 4
  %649 = load i16, i16* %7, align 2
  %650 = sext i16 %649 to i32
  %651 = load i16, i16* %11, align 2
  %652 = sext i16 %651 to i32
  %653 = add nsw i32 %650, %652
  %654 = getelementptr inbounds i16, i16* %648, i32 %653
  %655 = load i16, i16* %654, align 2
  %656 = sext i16 %655 to i32
  %657 = sub nsw i32 %645, %656
  %658 = sitofp i32 %657 to float
  %659 = fmul float 0x3FE6A09E60000000, %658
  %660 = fmul float %634, %659
  store float %660, float* %22, align 4
  %661 = load i16, i16* %7, align 2
  %662 = sext i16 %661 to i32
  %663 = sub nsw i32 127, %662
  %664 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %663
  %665 = load float, float* %664, align 4
  %666 = load i16**, i16*** %6, align 4
  %667 = getelementptr inbounds i16*, i16** %666, i32 0
  %668 = load i16*, i16** %667, align 4
  %669 = load i16, i16* %7, align 2
  %670 = sext i16 %669 to i32
  %671 = load i16, i16* %11, align 2
  %672 = sext i16 %671 to i32
  %673 = add nsw i32 %670, %672
  %674 = add nsw i32 %673, 128
  %675 = getelementptr inbounds i16, i16* %668, i32 %674
  %676 = load i16, i16* %675, align 2
  %677 = sext i16 %676 to i32
  %678 = load i16**, i16*** %6, align 4
  %679 = getelementptr inbounds i16*, i16** %678, i32 1
  %680 = load i16*, i16** %679, align 4
  %681 = load i16, i16* %7, align 2
  %682 = sext i16 %681 to i32
  %683 = load i16, i16* %11, align 2
  %684 = sext i16 %683 to i32
  %685 = add nsw i32 %682, %684
  %686 = add nsw i32 %685, 128
  %687 = getelementptr inbounds i16, i16* %680, i32 %686
  %688 = load i16, i16* %687, align 2
  %689 = sext i16 %688 to i32
  %690 = sub nsw i32 %677, %689
  %691 = sitofp i32 %690 to float
  %692 = fmul float 0x3FE6A09E60000000, %691
  %693 = fmul float %665, %692
  store float %693, float* %26, align 4
  %694 = load float, float* %22, align 4
  %695 = load float, float* %26, align 4
  %696 = fsub float %694, %695
  store float %696, float* %23, align 4
  %697 = load float, float* %22, align 4
  %698 = load float, float* %26, align 4
  %699 = fadd float %697, %698
  store float %699, float* %22, align 4
  %700 = load i16, i16* %7, align 2
  %701 = sext i16 %700 to i32
  %702 = add nsw i32 %701, 64
  %703 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %702
  %704 = load float, float* %703, align 4
  %705 = load i16**, i16*** %6, align 4
  %706 = getelementptr inbounds i16*, i16** %705, i32 0
  %707 = load i16*, i16** %706, align 4
  %708 = load i16, i16* %7, align 2
  %709 = sext i16 %708 to i32
  %710 = load i16, i16* %11, align 2
  %711 = sext i16 %710 to i32
  %712 = add nsw i32 %709, %711
  %713 = add nsw i32 %712, 64
  %714 = getelementptr inbounds i16, i16* %707, i32 %713
  %715 = load i16, i16* %714, align 2
  %716 = sext i16 %715 to i32
  %717 = load i16**, i16*** %6, align 4
  %718 = getelementptr inbounds i16*, i16** %717, i32 1
  %719 = load i16*, i16** %718, align 4
  %720 = load i16, i16* %7, align 2
  %721 = sext i16 %720 to i32
  %722 = load i16, i16* %11, align 2
  %723 = sext i16 %722 to i32
  %724 = add nsw i32 %721, %723
  %725 = add nsw i32 %724, 64
  %726 = getelementptr inbounds i16, i16* %719, i32 %725
  %727 = load i16, i16* %726, align 2
  %728 = sext i16 %727 to i32
  %729 = sub nsw i32 %716, %728
  %730 = sitofp i32 %729 to float
  %731 = fmul float 0x3FE6A09E60000000, %730
  %732 = fmul float %704, %731
  store float %732, float* %24, align 4
  %733 = load i16, i16* %7, align 2
  %734 = sext i16 %733 to i32
  %735 = sub nsw i32 63, %734
  %736 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %735
  %737 = load float, float* %736, align 4
  %738 = load i16**, i16*** %6, align 4
  %739 = getelementptr inbounds i16*, i16** %738, i32 0
  %740 = load i16*, i16** %739, align 4
  %741 = load i16, i16* %7, align 2
  %742 = sext i16 %741 to i32
  %743 = load i16, i16* %11, align 2
  %744 = sext i16 %743 to i32
  %745 = add nsw i32 %742, %744
  %746 = add nsw i32 %745, 192
  %747 = getelementptr inbounds i16, i16* %740, i32 %746
  %748 = load i16, i16* %747, align 2
  %749 = sext i16 %748 to i32
  %750 = load i16**, i16*** %6, align 4
  %751 = getelementptr inbounds i16*, i16** %750, i32 1
  %752 = load i16*, i16** %751, align 4
  %753 = load i16, i16* %7, align 2
  %754 = sext i16 %753 to i32
  %755 = load i16, i16* %11, align 2
  %756 = sext i16 %755 to i32
  %757 = add nsw i32 %754, %756
  %758 = add nsw i32 %757, 192
  %759 = getelementptr inbounds i16, i16* %752, i32 %758
  %760 = load i16, i16* %759, align 2
  %761 = sext i16 %760 to i32
  %762 = sub nsw i32 %749, %761
  %763 = sitofp i32 %762 to float
  %764 = fmul float 0x3FE6A09E60000000, %763
  %765 = fmul float %737, %764
  store float %765, float* %26, align 4
  %766 = load float, float* %24, align 4
  %767 = load float, float* %26, align 4
  %768 = fsub float %766, %767
  store float %768, float* %25, align 4
  %769 = load float, float* %24, align 4
  %770 = load float, float* %26, align 4
  %771 = fadd float %769, %770
  store float %771, float* %24, align 4
  %772 = load float*, float** %10, align 4
  %773 = getelementptr inbounds float, float* %772, i32 -4
  store float* %773, float** %10, align 4
  %774 = load float, float* %22, align 4
  %775 = load float, float* %24, align 4
  %776 = fadd float %774, %775
  %777 = load float*, float** %10, align 4
  %778 = getelementptr inbounds float, float* %777, i32 0
  store float %776, float* %778, align 4
  %779 = load float, float* %22, align 4
  %780 = load float, float* %24, align 4
  %781 = fsub float %779, %780
  %782 = load float*, float** %10, align 4
  %783 = getelementptr inbounds float, float* %782, i32 2
  store float %781, float* %783, align 4
  %784 = load float, float* %23, align 4
  %785 = load float, float* %25, align 4
  %786 = fadd float %784, %785
  %787 = load float*, float** %10, align 4
  %788 = getelementptr inbounds float, float* %787, i32 1
  store float %786, float* %788, align 4
  %789 = load float, float* %23, align 4
  %790 = load float, float* %25, align 4
  %791 = fsub float %789, %790
  %792 = load float*, float** %10, align 4
  %793 = getelementptr inbounds float, float* %792, i32 3
  store float %791, float* %793, align 4
  %794 = load i16, i16* %7, align 2
  %795 = sext i16 %794 to i32
  %796 = add nsw i32 %795, 1
  %797 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %796
  %798 = load float, float* %797, align 4
  %799 = load i16**, i16*** %6, align 4
  %800 = getelementptr inbounds i16*, i16** %799, i32 0
  %801 = load i16*, i16** %800, align 4
  %802 = load i16, i16* %7, align 2
  %803 = sext i16 %802 to i32
  %804 = load i16, i16* %11, align 2
  %805 = sext i16 %804 to i32
  %806 = add nsw i32 %803, %805
  %807 = add nsw i32 %806, 1
  %808 = getelementptr inbounds i16, i16* %801, i32 %807
  %809 = load i16, i16* %808, align 2
  %810 = sext i16 %809 to i32
  %811 = load i16**, i16*** %6, align 4
  %812 = getelementptr inbounds i16*, i16** %811, i32 1
  %813 = load i16*, i16** %812, align 4
  %814 = load i16, i16* %7, align 2
  %815 = sext i16 %814 to i32
  %816 = load i16, i16* %11, align 2
  %817 = sext i16 %816 to i32
  %818 = add nsw i32 %815, %817
  %819 = add nsw i32 %818, 1
  %820 = getelementptr inbounds i16, i16* %813, i32 %819
  %821 = load i16, i16* %820, align 2
  %822 = sext i16 %821 to i32
  %823 = sub nsw i32 %810, %822
  %824 = sitofp i32 %823 to float
  %825 = fmul float 0x3FE6A09E60000000, %824
  %826 = fmul float %798, %825
  store float %826, float* %22, align 4
  %827 = load i16, i16* %7, align 2
  %828 = sext i16 %827 to i32
  %829 = sub nsw i32 126, %828
  %830 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %829
  %831 = load float, float* %830, align 4
  %832 = load i16**, i16*** %6, align 4
  %833 = getelementptr inbounds i16*, i16** %832, i32 0
  %834 = load i16*, i16** %833, align 4
  %835 = load i16, i16* %7, align 2
  %836 = sext i16 %835 to i32
  %837 = load i16, i16* %11, align 2
  %838 = sext i16 %837 to i32
  %839 = add nsw i32 %836, %838
  %840 = add nsw i32 %839, 129
  %841 = getelementptr inbounds i16, i16* %834, i32 %840
  %842 = load i16, i16* %841, align 2
  %843 = sext i16 %842 to i32
  %844 = load i16**, i16*** %6, align 4
  %845 = getelementptr inbounds i16*, i16** %844, i32 1
  %846 = load i16*, i16** %845, align 4
  %847 = load i16, i16* %7, align 2
  %848 = sext i16 %847 to i32
  %849 = load i16, i16* %11, align 2
  %850 = sext i16 %849 to i32
  %851 = add nsw i32 %848, %850
  %852 = add nsw i32 %851, 129
  %853 = getelementptr inbounds i16, i16* %846, i32 %852
  %854 = load i16, i16* %853, align 2
  %855 = sext i16 %854 to i32
  %856 = sub nsw i32 %843, %855
  %857 = sitofp i32 %856 to float
  %858 = fmul float 0x3FE6A09E60000000, %857
  %859 = fmul float %831, %858
  store float %859, float* %26, align 4
  %860 = load float, float* %22, align 4
  %861 = load float, float* %26, align 4
  %862 = fsub float %860, %861
  store float %862, float* %23, align 4
  %863 = load float, float* %22, align 4
  %864 = load float, float* %26, align 4
  %865 = fadd float %863, %864
  store float %865, float* %22, align 4
  %866 = load i16, i16* %7, align 2
  %867 = sext i16 %866 to i32
  %868 = add nsw i32 %867, 65
  %869 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %868
  %870 = load float, float* %869, align 4
  %871 = load i16**, i16*** %6, align 4
  %872 = getelementptr inbounds i16*, i16** %871, i32 0
  %873 = load i16*, i16** %872, align 4
  %874 = load i16, i16* %7, align 2
  %875 = sext i16 %874 to i32
  %876 = load i16, i16* %11, align 2
  %877 = sext i16 %876 to i32
  %878 = add nsw i32 %875, %877
  %879 = add nsw i32 %878, 65
  %880 = getelementptr inbounds i16, i16* %873, i32 %879
  %881 = load i16, i16* %880, align 2
  %882 = sext i16 %881 to i32
  %883 = load i16**, i16*** %6, align 4
  %884 = getelementptr inbounds i16*, i16** %883, i32 1
  %885 = load i16*, i16** %884, align 4
  %886 = load i16, i16* %7, align 2
  %887 = sext i16 %886 to i32
  %888 = load i16, i16* %11, align 2
  %889 = sext i16 %888 to i32
  %890 = add nsw i32 %887, %889
  %891 = add nsw i32 %890, 65
  %892 = getelementptr inbounds i16, i16* %885, i32 %891
  %893 = load i16, i16* %892, align 2
  %894 = sext i16 %893 to i32
  %895 = sub nsw i32 %882, %894
  %896 = sitofp i32 %895 to float
  %897 = fmul float 0x3FE6A09E60000000, %896
  %898 = fmul float %870, %897
  store float %898, float* %24, align 4
  %899 = load i16, i16* %7, align 2
  %900 = sext i16 %899 to i32
  %901 = sub nsw i32 62, %900
  %902 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %901
  %903 = load float, float* %902, align 4
  %904 = load i16**, i16*** %6, align 4
  %905 = getelementptr inbounds i16*, i16** %904, i32 0
  %906 = load i16*, i16** %905, align 4
  %907 = load i16, i16* %7, align 2
  %908 = sext i16 %907 to i32
  %909 = load i16, i16* %11, align 2
  %910 = sext i16 %909 to i32
  %911 = add nsw i32 %908, %910
  %912 = add nsw i32 %911, 193
  %913 = getelementptr inbounds i16, i16* %906, i32 %912
  %914 = load i16, i16* %913, align 2
  %915 = sext i16 %914 to i32
  %916 = load i16**, i16*** %6, align 4
  %917 = getelementptr inbounds i16*, i16** %916, i32 1
  %918 = load i16*, i16** %917, align 4
  %919 = load i16, i16* %7, align 2
  %920 = sext i16 %919 to i32
  %921 = load i16, i16* %11, align 2
  %922 = sext i16 %921 to i32
  %923 = add nsw i32 %920, %922
  %924 = add nsw i32 %923, 193
  %925 = getelementptr inbounds i16, i16* %918, i32 %924
  %926 = load i16, i16* %925, align 2
  %927 = sext i16 %926 to i32
  %928 = sub nsw i32 %915, %927
  %929 = sitofp i32 %928 to float
  %930 = fmul float 0x3FE6A09E60000000, %929
  %931 = fmul float %903, %930
  store float %931, float* %26, align 4
  %932 = load float, float* %24, align 4
  %933 = load float, float* %26, align 4
  %934 = fsub float %932, %933
  store float %934, float* %25, align 4
  %935 = load float, float* %24, align 4
  %936 = load float, float* %26, align 4
  %937 = fadd float %935, %936
  store float %937, float* %24, align 4
  %938 = load float, float* %22, align 4
  %939 = load float, float* %24, align 4
  %940 = fadd float %938, %939
  %941 = load float*, float** %10, align 4
  %942 = getelementptr inbounds float, float* %941, i32 128
  store float %940, float* %942, align 4
  %943 = load float, float* %22, align 4
  %944 = load float, float* %24, align 4
  %945 = fsub float %943, %944
  %946 = load float*, float** %10, align 4
  %947 = getelementptr inbounds float, float* %946, i32 130
  store float %945, float* %947, align 4
  %948 = load float, float* %23, align 4
  %949 = load float, float* %25, align 4
  %950 = fadd float %948, %949
  %951 = load float*, float** %10, align 4
  %952 = getelementptr inbounds float, float* %951, i32 129
  store float %950, float* %952, align 4
  %953 = load float, float* %23, align 4
  %954 = load float, float* %25, align 4
  %955 = fsub float %953, %954
  %956 = load float*, float** %10, align 4
  %957 = getelementptr inbounds float, float* %956, i32 131
  store float %955, float* %957, align 4
  br label %958

; <label>:958:                                    ; preds = %625
  %959 = load i16, i16* %8, align 2
  %960 = add i16 %959, -1
  store i16 %960, i16* %8, align 2
  %961 = sext i16 %960 to i32
  %962 = icmp sge i32 %961, 0
  br i1 %962, label %625, label %963

; <label>:963:                                    ; preds = %958
  br label %964

; <label>:964:                                    ; preds = %963, %623
  br label %965

; <label>:965:                                    ; preds = %964, %280
  %966 = load float*, float** %10, align 4
  call arm_aapcscc void @fht(float* %966, i16 signext 256)
  br label %967

; <label>:967:                                    ; preds = %965
  %968 = load i16, i16* %9, align 2
  %969 = add i16 %968, 1
  store i16 %969, i16* %9, align 2
  br label %27

; <label>:970:                                    ; preds = %27
  ret void
}

; Function Attrs: inlinehint nounwind
define internal arm_aapcscc void @fht(float*, i16 signext) #1 {
  %3 = alloca float*, align 4
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca float*, align 4
  %7 = alloca float*, align 4
  %8 = alloca float*, align 4
  %9 = alloca float*, align 4
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca i16, align 2
  %13 = alloca i16, align 2
  %14 = alloca i16, align 2
  %15 = alloca i16, align 2
  %16 = alloca i16, align 2
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca float, align 4
  %20 = alloca float, align 4
  %21 = alloca float, align 4
  %22 = alloca float, align 4
  %23 = alloca float, align 4
  %24 = alloca float, align 4
  %25 = alloca float, align 4
  %26 = alloca float, align 4
  %27 = alloca float, align 4
  %28 = alloca float, align 4
  %29 = alloca float, align 4
  %30 = alloca float, align 4
  %31 = alloca float, align 4
  %32 = alloca float, align 4
  store float* %0, float** %3, align 4
  store i16 %1, i16* %4, align 2
  %33 = load float*, float** %3, align 4
  %34 = load i16, i16* %4, align 2
  %35 = sext i16 %34 to i32
  %36 = getelementptr inbounds float, float* %33, i32 %35
  store float* %36, float** %7, align 4
  store float* getelementptr inbounds ([8 x float], [8 x float]* @costab, i32 0, i32 0), float** %9, align 4
  store i16 4, i16* %5, align 2
  br label %37

; <label>:37:                                     ; preds = %467, %2
  %38 = load i16, i16* %5, align 2
  %39 = sext i16 %38 to i32
  %40 = ashr i32 %39, 1
  %41 = trunc i32 %40 to i16
  store i16 %41, i16* %16, align 2
  %42 = load i16, i16* %5, align 2
  store i16 %42, i16* %13, align 2
  %43 = load i16, i16* %5, align 2
  %44 = sext i16 %43 to i32
  %45 = shl i32 %44, 1
  %46 = trunc i32 %45 to i16
  store i16 %46, i16* %14, align 2
  %47 = load i16, i16* %14, align 2
  %48 = sext i16 %47 to i32
  %49 = load i16, i16* %13, align 2
  %50 = sext i16 %49 to i32
  %51 = add nsw i32 %48, %50
  %52 = trunc i32 %51 to i16
  store i16 %52, i16* %15, align 2
  %53 = load i16, i16* %14, align 2
  %54 = sext i16 %53 to i32
  %55 = shl i32 %54, 1
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* %5, align 2
  %57 = load float*, float** %3, align 4
  store float* %57, float** %6, align 4
  %58 = load float*, float** %6, align 4
  %59 = load i16, i16* %16, align 2
  %60 = sext i16 %59 to i32
  %61 = getelementptr inbounds float, float* %58, i32 %60
  store float* %61, float** %8, align 4
  br label %62

; <label>:62:                                     ; preds = %197, %37
  %63 = load float*, float** %6, align 4
  %64 = getelementptr inbounds float, float* %63, i32 0
  %65 = load float, float* %64, align 4
  %66 = load float*, float** %6, align 4
  %67 = load i16, i16* %13, align 2
  %68 = sext i16 %67 to i32
  %69 = getelementptr inbounds float, float* %66, i32 %68
  %70 = load float, float* %69, align 4
  %71 = fsub float %65, %70
  store float %71, float* %18, align 4
  %72 = load float*, float** %6, align 4
  %73 = getelementptr inbounds float, float* %72, i32 0
  %74 = load float, float* %73, align 4
  %75 = load float*, float** %6, align 4
  %76 = load i16, i16* %13, align 2
  %77 = sext i16 %76 to i32
  %78 = getelementptr inbounds float, float* %75, i32 %77
  %79 = load float, float* %78, align 4
  %80 = fadd float %74, %79
  store float %80, float* %17, align 4
  %81 = load float*, float** %6, align 4
  %82 = load i16, i16* %14, align 2
  %83 = sext i16 %82 to i32
  %84 = getelementptr inbounds float, float* %81, i32 %83
  %85 = load float, float* %84, align 4
  %86 = load float*, float** %6, align 4
  %87 = load i16, i16* %15, align 2
  %88 = sext i16 %87 to i32
  %89 = getelementptr inbounds float, float* %86, i32 %88
  %90 = load float, float* %89, align 4
  %91 = fsub float %85, %90
  store float %91, float* %20, align 4
  %92 = load float*, float** %6, align 4
  %93 = load i16, i16* %14, align 2
  %94 = sext i16 %93 to i32
  %95 = getelementptr inbounds float, float* %92, i32 %94
  %96 = load float, float* %95, align 4
  %97 = load float*, float** %6, align 4
  %98 = load i16, i16* %15, align 2
  %99 = sext i16 %98 to i32
  %100 = getelementptr inbounds float, float* %97, i32 %99
  %101 = load float, float* %100, align 4
  %102 = fadd float %96, %101
  store float %102, float* %19, align 4
  %103 = load float, float* %17, align 4
  %104 = load float, float* %19, align 4
  %105 = fsub float %103, %104
  %106 = load float*, float** %6, align 4
  %107 = load i16, i16* %14, align 2
  %108 = sext i16 %107 to i32
  %109 = getelementptr inbounds float, float* %106, i32 %108
  store float %105, float* %109, align 4
  %110 = load float, float* %17, align 4
  %111 = load float, float* %19, align 4
  %112 = fadd float %110, %111
  %113 = load float*, float** %6, align 4
  %114 = getelementptr inbounds float, float* %113, i32 0
  store float %112, float* %114, align 4
  %115 = load float, float* %18, align 4
  %116 = load float, float* %20, align 4
  %117 = fsub float %115, %116
  %118 = load float*, float** %6, align 4
  %119 = load i16, i16* %15, align 2
  %120 = sext i16 %119 to i32
  %121 = getelementptr inbounds float, float* %118, i32 %120
  store float %117, float* %121, align 4
  %122 = load float, float* %18, align 4
  %123 = load float, float* %20, align 4
  %124 = fadd float %122, %123
  %125 = load float*, float** %6, align 4
  %126 = load i16, i16* %13, align 2
  %127 = sext i16 %126 to i32
  %128 = getelementptr inbounds float, float* %125, i32 %127
  store float %124, float* %128, align 4
  %129 = load float*, float** %8, align 4
  %130 = getelementptr inbounds float, float* %129, i32 0
  %131 = load float, float* %130, align 4
  %132 = load float*, float** %8, align 4
  %133 = load i16, i16* %13, align 2
  %134 = sext i16 %133 to i32
  %135 = getelementptr inbounds float, float* %132, i32 %134
  %136 = load float, float* %135, align 4
  %137 = fsub float %131, %136
  store float %137, float* %18, align 4
  %138 = load float*, float** %8, align 4
  %139 = getelementptr inbounds float, float* %138, i32 0
  %140 = load float, float* %139, align 4
  %141 = load float*, float** %8, align 4
  %142 = load i16, i16* %13, align 2
  %143 = sext i16 %142 to i32
  %144 = getelementptr inbounds float, float* %141, i32 %143
  %145 = load float, float* %144, align 4
  %146 = fadd float %140, %145
  store float %146, float* %17, align 4
  %147 = load float*, float** %8, align 4
  %148 = load i16, i16* %15, align 2
  %149 = sext i16 %148 to i32
  %150 = getelementptr inbounds float, float* %147, i32 %149
  %151 = load float, float* %150, align 4
  %152 = fpext float %151 to double
  %153 = fmul double 0x3FF6A09E667F3BCD, %152
  %154 = fptrunc double %153 to float
  store float %154, float* %20, align 4
  %155 = load float*, float** %8, align 4
  %156 = load i16, i16* %14, align 2
  %157 = sext i16 %156 to i32
  %158 = getelementptr inbounds float, float* %155, i32 %157
  %159 = load float, float* %158, align 4
  %160 = fpext float %159 to double
  %161 = fmul double 0x3FF6A09E667F3BCD, %160
  %162 = fptrunc double %161 to float
  store float %162, float* %19, align 4
  %163 = load float, float* %17, align 4
  %164 = load float, float* %19, align 4
  %165 = fsub float %163, %164
  %166 = load float*, float** %8, align 4
  %167 = load i16, i16* %14, align 2
  %168 = sext i16 %167 to i32
  %169 = getelementptr inbounds float, float* %166, i32 %168
  store float %165, float* %169, align 4
  %170 = load float, float* %17, align 4
  %171 = load float, float* %19, align 4
  %172 = fadd float %170, %171
  %173 = load float*, float** %8, align 4
  %174 = getelementptr inbounds float, float* %173, i32 0
  store float %172, float* %174, align 4
  %175 = load float, float* %18, align 4
  %176 = load float, float* %20, align 4
  %177 = fsub float %175, %176
  %178 = load float*, float** %8, align 4
  %179 = load i16, i16* %15, align 2
  %180 = sext i16 %179 to i32
  %181 = getelementptr inbounds float, float* %178, i32 %180
  store float %177, float* %181, align 4
  %182 = load float, float* %18, align 4
  %183 = load float, float* %20, align 4
  %184 = fadd float %182, %183
  %185 = load float*, float** %8, align 4
  %186 = load i16, i16* %13, align 2
  %187 = sext i16 %186 to i32
  %188 = getelementptr inbounds float, float* %185, i32 %187
  store float %184, float* %188, align 4
  %189 = load i16, i16* %5, align 2
  %190 = sext i16 %189 to i32
  %191 = load float*, float** %8, align 4
  %192 = getelementptr inbounds float, float* %191, i32 %190
  store float* %192, float** %8, align 4
  %193 = load i16, i16* %5, align 2
  %194 = sext i16 %193 to i32
  %195 = load float*, float** %6, align 4
  %196 = getelementptr inbounds float, float* %195, i32 %194
  store float* %196, float** %6, align 4
  br label %197

; <label>:197:                                    ; preds = %62
  %198 = load float*, float** %6, align 4
  %199 = load float*, float** %7, align 4
  %200 = icmp ult float* %198, %199
  br i1 %200, label %62, label %201

; <label>:201:                                    ; preds = %197
  %202 = load float*, float** %9, align 4
  %203 = getelementptr inbounds float, float* %202, i32 0
  %204 = load float, float* %203, align 4
  store float %204, float* %11, align 4
  %205 = load float*, float** %9, align 4
  %206 = getelementptr inbounds float, float* %205, i32 1
  %207 = load float, float* %206, align 4
  store float %207, float* %10, align 4
  store i16 1, i16* %12, align 2
  br label %208

; <label>:208:                                    ; preds = %461, %201
  %209 = load i16, i16* %12, align 2
  %210 = sext i16 %209 to i32
  %211 = load i16, i16* %16, align 2
  %212 = sext i16 %211 to i32
  %213 = icmp slt i32 %210, %212
  br i1 %213, label %214, label %464

; <label>:214:                                    ; preds = %208
  %215 = load float, float* %10, align 4
  %216 = fmul float 2.000000e+00, %215
  %217 = load float, float* %10, align 4
  %218 = fmul float %216, %217
  %219 = fsub float 1.000000e+00, %218
  store float %219, float* %21, align 4
  %220 = load float, float* %10, align 4
  %221 = fmul float 2.000000e+00, %220
  %222 = load float, float* %11, align 4
  %223 = fmul float %221, %222
  store float %223, float* %22, align 4
  %224 = load float*, float** %3, align 4
  %225 = load i16, i16* %12, align 2
  %226 = sext i16 %225 to i32
  %227 = getelementptr inbounds float, float* %224, i32 %226
  store float* %227, float** %6, align 4
  %228 = load float*, float** %3, align 4
  %229 = load i16, i16* %13, align 2
  %230 = sext i16 %229 to i32
  %231 = getelementptr inbounds float, float* %228, i32 %230
  %232 = load i16, i16* %12, align 2
  %233 = sext i16 %232 to i32
  %234 = sub i32 0, %233
  %235 = getelementptr inbounds float, float* %231, i32 %234
  store float* %235, float** %8, align 4
  br label %236

; <label>:236:                                    ; preds = %433, %214
  %237 = load float, float* %22, align 4
  %238 = load float*, float** %6, align 4
  %239 = load i16, i16* %13, align 2
  %240 = sext i16 %239 to i32
  %241 = getelementptr inbounds float, float* %238, i32 %240
  %242 = load float, float* %241, align 4
  %243 = fmul float %237, %242
  %244 = load float, float* %21, align 4
  %245 = load float*, float** %8, align 4
  %246 = load i16, i16* %13, align 2
  %247 = sext i16 %246 to i32
  %248 = getelementptr inbounds float, float* %245, i32 %247
  %249 = load float, float* %248, align 4
  %250 = fmul float %244, %249
  %251 = fsub float %243, %250
  store float %251, float* %24, align 4
  %252 = load float, float* %21, align 4
  %253 = load float*, float** %6, align 4
  %254 = load i16, i16* %13, align 2
  %255 = sext i16 %254 to i32
  %256 = getelementptr inbounds float, float* %253, i32 %255
  %257 = load float, float* %256, align 4
  %258 = fmul float %252, %257
  %259 = load float, float* %22, align 4
  %260 = load float*, float** %8, align 4
  %261 = load i16, i16* %13, align 2
  %262 = sext i16 %261 to i32
  %263 = getelementptr inbounds float, float* %260, i32 %262
  %264 = load float, float* %263, align 4
  %265 = fmul float %259, %264
  %266 = fadd float %258, %265
  store float %266, float* %23, align 4
  %267 = load float*, float** %6, align 4
  %268 = getelementptr inbounds float, float* %267, i32 0
  %269 = load float, float* %268, align 4
  %270 = load float, float* %23, align 4
  %271 = fsub float %269, %270
  store float %271, float* %27, align 4
  %272 = load float*, float** %6, align 4
  %273 = getelementptr inbounds float, float* %272, i32 0
  %274 = load float, float* %273, align 4
  %275 = load float, float* %23, align 4
  %276 = fadd float %274, %275
  store float %276, float* %26, align 4
  %277 = load float*, float** %8, align 4
  %278 = getelementptr inbounds float, float* %277, i32 0
  %279 = load float, float* %278, align 4
  %280 = load float, float* %24, align 4
  %281 = fsub float %279, %280
  store float %281, float* %28, align 4
  %282 = load float*, float** %8, align 4
  %283 = getelementptr inbounds float, float* %282, i32 0
  %284 = load float, float* %283, align 4
  %285 = load float, float* %24, align 4
  %286 = fadd float %284, %285
  store float %286, float* %25, align 4
  %287 = load float, float* %22, align 4
  %288 = load float*, float** %6, align 4
  %289 = load i16, i16* %15, align 2
  %290 = sext i16 %289 to i32
  %291 = getelementptr inbounds float, float* %288, i32 %290
  %292 = load float, float* %291, align 4
  %293 = fmul float %287, %292
  %294 = load float, float* %21, align 4
  %295 = load float*, float** %8, align 4
  %296 = load i16, i16* %15, align 2
  %297 = sext i16 %296 to i32
  %298 = getelementptr inbounds float, float* %295, i32 %297
  %299 = load float, float* %298, align 4
  %300 = fmul float %294, %299
  %301 = fsub float %293, %300
  store float %301, float* %24, align 4
  %302 = load float, float* %21, align 4
  %303 = load float*, float** %6, align 4
  %304 = load i16, i16* %15, align 2
  %305 = sext i16 %304 to i32
  %306 = getelementptr inbounds float, float* %303, i32 %305
  %307 = load float, float* %306, align 4
  %308 = fmul float %302, %307
  %309 = load float, float* %22, align 4
  %310 = load float*, float** %8, align 4
  %311 = load i16, i16* %15, align 2
  %312 = sext i16 %311 to i32
  %313 = getelementptr inbounds float, float* %310, i32 %312
  %314 = load float, float* %313, align 4
  %315 = fmul float %309, %314
  %316 = fadd float %308, %315
  store float %316, float* %23, align 4
  %317 = load float*, float** %6, align 4
  %318 = load i16, i16* %14, align 2
  %319 = sext i16 %318 to i32
  %320 = getelementptr inbounds float, float* %317, i32 %319
  %321 = load float, float* %320, align 4
  %322 = load float, float* %23, align 4
  %323 = fsub float %321, %322
  store float %323, float* %31, align 4
  %324 = load float*, float** %6, align 4
  %325 = load i16, i16* %14, align 2
  %326 = sext i16 %325 to i32
  %327 = getelementptr inbounds float, float* %324, i32 %326
  %328 = load float, float* %327, align 4
  %329 = load float, float* %23, align 4
  %330 = fadd float %328, %329
  store float %330, float* %29, align 4
  %331 = load float*, float** %8, align 4
  %332 = load i16, i16* %14, align 2
  %333 = sext i16 %332 to i32
  %334 = getelementptr inbounds float, float* %331, i32 %333
  %335 = load float, float* %334, align 4
  %336 = load float, float* %24, align 4
  %337 = fsub float %335, %336
  store float %337, float* %32, align 4
  %338 = load float*, float** %8, align 4
  %339 = load i16, i16* %14, align 2
  %340 = sext i16 %339 to i32
  %341 = getelementptr inbounds float, float* %338, i32 %340
  %342 = load float, float* %341, align 4
  %343 = load float, float* %24, align 4
  %344 = fadd float %342, %343
  store float %344, float* %30, align 4
  %345 = load float, float* %10, align 4
  %346 = load float, float* %29, align 4
  %347 = fmul float %345, %346
  %348 = load float, float* %11, align 4
  %349 = load float, float* %32, align 4
  %350 = fmul float %348, %349
  %351 = fsub float %347, %350
  store float %351, float* %24, align 4
  %352 = load float, float* %11, align 4
  %353 = load float, float* %29, align 4
  %354 = fmul float %352, %353
  %355 = load float, float* %10, align 4
  %356 = load float, float* %32, align 4
  %357 = fmul float %355, %356
  %358 = fadd float %354, %357
  store float %358, float* %23, align 4
  %359 = load float, float* %26, align 4
  %360 = load float, float* %23, align 4
  %361 = fsub float %359, %360
  %362 = load float*, float** %6, align 4
  %363 = load i16, i16* %14, align 2
  %364 = sext i16 %363 to i32
  %365 = getelementptr inbounds float, float* %362, i32 %364
  store float %361, float* %365, align 4
  %366 = load float, float* %26, align 4
  %367 = load float, float* %23, align 4
  %368 = fadd float %366, %367
  %369 = load float*, float** %6, align 4
  %370 = getelementptr inbounds float, float* %369, i32 0
  store float %368, float* %370, align 4
  %371 = load float, float* %28, align 4
  %372 = load float, float* %24, align 4
  %373 = fsub float %371, %372
  %374 = load float*, float** %8, align 4
  %375 = load i16, i16* %15, align 2
  %376 = sext i16 %375 to i32
  %377 = getelementptr inbounds float, float* %374, i32 %376
  store float %373, float* %377, align 4
  %378 = load float, float* %28, align 4
  %379 = load float, float* %24, align 4
  %380 = fadd float %378, %379
  %381 = load float*, float** %8, align 4
  %382 = load i16, i16* %13, align 2
  %383 = sext i16 %382 to i32
  %384 = getelementptr inbounds float, float* %381, i32 %383
  store float %380, float* %384, align 4
  %385 = load float, float* %11, align 4
  %386 = load float, float* %30, align 4
  %387 = fmul float %385, %386
  %388 = load float, float* %10, align 4
  %389 = load float, float* %31, align 4
  %390 = fmul float %388, %389
  %391 = fsub float %387, %390
  store float %391, float* %24, align 4
  %392 = load float, float* %10, align 4
  %393 = load float, float* %30, align 4
  %394 = fmul float %392, %393
  %395 = load float, float* %11, align 4
  %396 = load float, float* %31, align 4
  %397 = fmul float %395, %396
  %398 = fadd float %394, %397
  store float %398, float* %23, align 4
  %399 = load float, float* %25, align 4
  %400 = load float, float* %23, align 4
  %401 = fsub float %399, %400
  %402 = load float*, float** %8, align 4
  %403 = load i16, i16* %14, align 2
  %404 = sext i16 %403 to i32
  %405 = getelementptr inbounds float, float* %402, i32 %404
  store float %401, float* %405, align 4
  %406 = load float, float* %25, align 4
  %407 = load float, float* %23, align 4
  %408 = fadd float %406, %407
  %409 = load float*, float** %8, align 4
  %410 = getelementptr inbounds float, float* %409, i32 0
  store float %408, float* %410, align 4
  %411 = load float, float* %27, align 4
  %412 = load float, float* %24, align 4
  %413 = fsub float %411, %412
  %414 = load float*, float** %6, align 4
  %415 = load i16, i16* %15, align 2
  %416 = sext i16 %415 to i32
  %417 = getelementptr inbounds float, float* %414, i32 %416
  store float %413, float* %417, align 4
  %418 = load float, float* %27, align 4
  %419 = load float, float* %24, align 4
  %420 = fadd float %418, %419
  %421 = load float*, float** %6, align 4
  %422 = load i16, i16* %13, align 2
  %423 = sext i16 %422 to i32
  %424 = getelementptr inbounds float, float* %421, i32 %423
  store float %420, float* %424, align 4
  %425 = load i16, i16* %5, align 2
  %426 = sext i16 %425 to i32
  %427 = load float*, float** %8, align 4
  %428 = getelementptr inbounds float, float* %427, i32 %426
  store float* %428, float** %8, align 4
  %429 = load i16, i16* %5, align 2
  %430 = sext i16 %429 to i32
  %431 = load float*, float** %6, align 4
  %432 = getelementptr inbounds float, float* %431, i32 %430
  store float* %432, float** %6, align 4
  br label %433

; <label>:433:                                    ; preds = %236
  %434 = load float*, float** %6, align 4
  %435 = load float*, float** %7, align 4
  %436 = icmp ult float* %434, %435
  br i1 %436, label %236, label %437

; <label>:437:                                    ; preds = %433
  %438 = load float, float* %11, align 4
  store float %438, float* %21, align 4
  %439 = load float, float* %21, align 4
  %440 = load float*, float** %9, align 4
  %441 = getelementptr inbounds float, float* %440, i32 0
  %442 = load float, float* %441, align 4
  %443 = fmul float %439, %442
  %444 = load float, float* %10, align 4
  %445 = load float*, float** %9, align 4
  %446 = getelementptr inbounds float, float* %445, i32 1
  %447 = load float, float* %446, align 4
  %448 = fmul float %444, %447
  %449 = fsub float %443, %448
  store float %449, float* %11, align 4
  %450 = load float, float* %21, align 4
  %451 = load float*, float** %9, align 4
  %452 = getelementptr inbounds float, float* %451, i32 1
  %453 = load float, float* %452, align 4
  %454 = fmul float %450, %453
  %455 = load float, float* %10, align 4
  %456 = load float*, float** %9, align 4
  %457 = getelementptr inbounds float, float* %456, i32 0
  %458 = load float, float* %457, align 4
  %459 = fmul float %455, %458
  %460 = fadd float %454, %459
  store float %460, float* %10, align 4
  br label %461

; <label>:461:                                    ; preds = %437
  %462 = load i16, i16* %12, align 2
  %463 = add i16 %462, 1
  store i16 %463, i16* %12, align 2
  br label %208

; <label>:464:                                    ; preds = %208
  %465 = load float*, float** %9, align 4
  %466 = getelementptr inbounds float, float* %465, i32 2
  store float* %466, float** %9, align 4
  br label %467

; <label>:467:                                    ; preds = %464
  %468 = load i16, i16* %5, align 2
  %469 = sext i16 %468 to i32
  %470 = load i16, i16* %4, align 2
  %471 = sext i16 %470 to i32
  %472 = icmp slt i32 %469, %471
  br i1 %472, label %37, label %473

; <label>:473:                                    ; preds = %467
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @fft_long(float*, i32, i16**) #0 {
  %4 = alloca float*, align 4
  %5 = alloca i32, align 4
  %6 = alloca i16**, align 4
  %7 = alloca i16, align 2
  %8 = alloca i16, align 2
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca float, align 4
  %20 = alloca float, align 4
  %21 = alloca float, align 4
  %22 = alloca float, align 4
  %23 = alloca float, align 4
  store float* %0, float** %4, align 4
  store i32 %1, i32* %5, align 4
  store i16** %2, i16*** %6, align 4
  store i16 127, i16* %8, align 2
  %24 = load float*, float** %4, align 4
  %25 = getelementptr inbounds float, float* %24, i32 512
  store float* %25, float** %4, align 4
  %26 = load i32, i32* %5, align 4
  %27 = icmp slt i32 %26, 2
  br i1 %27, label %28, label %240

; <label>:28:                                     ; preds = %3
  br label %29

; <label>:29:                                     ; preds = %234, %28
  %30 = load i16, i16* %8, align 2
  %31 = sext i16 %30 to i32
  %32 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i32 0, i32 %31
  %33 = load i16, i16* %32, align 2
  store i16 %33, i16* %7, align 2
  %34 = load i16, i16* %7, align 2
  %35 = sext i16 %34 to i32
  %36 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %35
  %37 = load float, float* %36, align 4
  %38 = load i16**, i16*** %6, align 4
  %39 = load i32, i32* %5, align 4
  %40 = getelementptr inbounds i16*, i16** %38, i32 %39
  %41 = load i16*, i16** %40, align 4
  %42 = load i16, i16* %7, align 2
  %43 = sext i16 %42 to i32
  %44 = getelementptr inbounds i16, i16* %41, i32 %43
  %45 = load i16, i16* %44, align 2
  %46 = sext i16 %45 to i32
  %47 = sitofp i32 %46 to float
  %48 = fmul float %37, %47
  store float %48, float* %9, align 4
  %49 = load i16, i16* %7, align 2
  %50 = sext i16 %49 to i32
  %51 = sub nsw i32 511, %50
  %52 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %51
  %53 = load float, float* %52, align 4
  %54 = load i16**, i16*** %6, align 4
  %55 = load i32, i32* %5, align 4
  %56 = getelementptr inbounds i16*, i16** %54, i32 %55
  %57 = load i16*, i16** %56, align 4
  %58 = load i16, i16* %7, align 2
  %59 = sext i16 %58 to i32
  %60 = add nsw i32 %59, 512
  %61 = getelementptr inbounds i16, i16* %57, i32 %60
  %62 = load i16, i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = sitofp i32 %63 to float
  %65 = fmul float %53, %64
  store float %65, float* %13, align 4
  %66 = load float, float* %9, align 4
  %67 = load float, float* %13, align 4
  %68 = fsub float %66, %67
  store float %68, float* %10, align 4
  %69 = load float, float* %9, align 4
  %70 = load float, float* %13, align 4
  %71 = fadd float %69, %70
  store float %71, float* %9, align 4
  %72 = load i16, i16* %7, align 2
  %73 = sext i16 %72 to i32
  %74 = add nsw i32 %73, 256
  %75 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %74
  %76 = load float, float* %75, align 4
  %77 = load i16**, i16*** %6, align 4
  %78 = load i32, i32* %5, align 4
  %79 = getelementptr inbounds i16*, i16** %77, i32 %78
  %80 = load i16*, i16** %79, align 4
  %81 = load i16, i16* %7, align 2
  %82 = sext i16 %81 to i32
  %83 = add nsw i32 %82, 256
  %84 = getelementptr inbounds i16, i16* %80, i32 %83
  %85 = load i16, i16* %84, align 2
  %86 = sext i16 %85 to i32
  %87 = sitofp i32 %86 to float
  %88 = fmul float %76, %87
  store float %88, float* %11, align 4
  %89 = load i16, i16* %7, align 2
  %90 = sext i16 %89 to i32
  %91 = sub nsw i32 255, %90
  %92 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %91
  %93 = load float, float* %92, align 4
  %94 = load i16**, i16*** %6, align 4
  %95 = load i32, i32* %5, align 4
  %96 = getelementptr inbounds i16*, i16** %94, i32 %95
  %97 = load i16*, i16** %96, align 4
  %98 = load i16, i16* %7, align 2
  %99 = sext i16 %98 to i32
  %100 = add nsw i32 %99, 768
  %101 = getelementptr inbounds i16, i16* %97, i32 %100
  %102 = load i16, i16* %101, align 2
  %103 = sext i16 %102 to i32
  %104 = sitofp i32 %103 to float
  %105 = fmul float %93, %104
  store float %105, float* %13, align 4
  %106 = load float, float* %11, align 4
  %107 = load float, float* %13, align 4
  %108 = fsub float %106, %107
  store float %108, float* %12, align 4
  %109 = load float, float* %11, align 4
  %110 = load float, float* %13, align 4
  %111 = fadd float %109, %110
  store float %111, float* %11, align 4
  %112 = load float*, float** %4, align 4
  %113 = getelementptr inbounds float, float* %112, i32 -4
  store float* %113, float** %4, align 4
  %114 = load float, float* %9, align 4
  %115 = load float, float* %11, align 4
  %116 = fadd float %114, %115
  %117 = load float*, float** %4, align 4
  %118 = getelementptr inbounds float, float* %117, i32 0
  store float %116, float* %118, align 4
  %119 = load float, float* %9, align 4
  %120 = load float, float* %11, align 4
  %121 = fsub float %119, %120
  %122 = load float*, float** %4, align 4
  %123 = getelementptr inbounds float, float* %122, i32 2
  store float %121, float* %123, align 4
  %124 = load float, float* %10, align 4
  %125 = load float, float* %12, align 4
  %126 = fadd float %124, %125
  %127 = load float*, float** %4, align 4
  %128 = getelementptr inbounds float, float* %127, i32 1
  store float %126, float* %128, align 4
  %129 = load float, float* %10, align 4
  %130 = load float, float* %12, align 4
  %131 = fsub float %129, %130
  %132 = load float*, float** %4, align 4
  %133 = getelementptr inbounds float, float* %132, i32 3
  store float %131, float* %133, align 4
  %134 = load i16, i16* %7, align 2
  %135 = sext i16 %134 to i32
  %136 = add nsw i32 %135, 1
  %137 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %136
  %138 = load float, float* %137, align 4
  %139 = load i16**, i16*** %6, align 4
  %140 = load i32, i32* %5, align 4
  %141 = getelementptr inbounds i16*, i16** %139, i32 %140
  %142 = load i16*, i16** %141, align 4
  %143 = load i16, i16* %7, align 2
  %144 = sext i16 %143 to i32
  %145 = add nsw i32 %144, 1
  %146 = getelementptr inbounds i16, i16* %142, i32 %145
  %147 = load i16, i16* %146, align 2
  %148 = sext i16 %147 to i32
  %149 = sitofp i32 %148 to float
  %150 = fmul float %138, %149
  store float %150, float* %9, align 4
  %151 = load i16, i16* %7, align 2
  %152 = sext i16 %151 to i32
  %153 = sub nsw i32 510, %152
  %154 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %153
  %155 = load float, float* %154, align 4
  %156 = load i16**, i16*** %6, align 4
  %157 = load i32, i32* %5, align 4
  %158 = getelementptr inbounds i16*, i16** %156, i32 %157
  %159 = load i16*, i16** %158, align 4
  %160 = load i16, i16* %7, align 2
  %161 = sext i16 %160 to i32
  %162 = add nsw i32 %161, 513
  %163 = getelementptr inbounds i16, i16* %159, i32 %162
  %164 = load i16, i16* %163, align 2
  %165 = sext i16 %164 to i32
  %166 = sitofp i32 %165 to float
  %167 = fmul float %155, %166
  store float %167, float* %13, align 4
  %168 = load float, float* %9, align 4
  %169 = load float, float* %13, align 4
  %170 = fsub float %168, %169
  store float %170, float* %10, align 4
  %171 = load float, float* %9, align 4
  %172 = load float, float* %13, align 4
  %173 = fadd float %171, %172
  store float %173, float* %9, align 4
  %174 = load i16, i16* %7, align 2
  %175 = sext i16 %174 to i32
  %176 = add nsw i32 %175, 257
  %177 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %176
  %178 = load float, float* %177, align 4
  %179 = load i16**, i16*** %6, align 4
  %180 = load i32, i32* %5, align 4
  %181 = getelementptr inbounds i16*, i16** %179, i32 %180
  %182 = load i16*, i16** %181, align 4
  %183 = load i16, i16* %7, align 2
  %184 = sext i16 %183 to i32
  %185 = add nsw i32 %184, 257
  %186 = getelementptr inbounds i16, i16* %182, i32 %185
  %187 = load i16, i16* %186, align 2
  %188 = sext i16 %187 to i32
  %189 = sitofp i32 %188 to float
  %190 = fmul float %178, %189
  store float %190, float* %11, align 4
  %191 = load i16, i16* %7, align 2
  %192 = sext i16 %191 to i32
  %193 = sub nsw i32 254, %192
  %194 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %193
  %195 = load float, float* %194, align 4
  %196 = load i16**, i16*** %6, align 4
  %197 = load i32, i32* %5, align 4
  %198 = getelementptr inbounds i16*, i16** %196, i32 %197
  %199 = load i16*, i16** %198, align 4
  %200 = load i16, i16* %7, align 2
  %201 = sext i16 %200 to i32
  %202 = add nsw i32 %201, 769
  %203 = getelementptr inbounds i16, i16* %199, i32 %202
  %204 = load i16, i16* %203, align 2
  %205 = sext i16 %204 to i32
  %206 = sitofp i32 %205 to float
  %207 = fmul float %195, %206
  store float %207, float* %13, align 4
  %208 = load float, float* %11, align 4
  %209 = load float, float* %13, align 4
  %210 = fsub float %208, %209
  store float %210, float* %12, align 4
  %211 = load float, float* %11, align 4
  %212 = load float, float* %13, align 4
  %213 = fadd float %211, %212
  store float %213, float* %11, align 4
  %214 = load float, float* %9, align 4
  %215 = load float, float* %11, align 4
  %216 = fadd float %214, %215
  %217 = load float*, float** %4, align 4
  %218 = getelementptr inbounds float, float* %217, i32 512
  store float %216, float* %218, align 4
  %219 = load float, float* %9, align 4
  %220 = load float, float* %11, align 4
  %221 = fsub float %219, %220
  %222 = load float*, float** %4, align 4
  %223 = getelementptr inbounds float, float* %222, i32 514
  store float %221, float* %223, align 4
  %224 = load float, float* %10, align 4
  %225 = load float, float* %12, align 4
  %226 = fadd float %224, %225
  %227 = load float*, float** %4, align 4
  %228 = getelementptr inbounds float, float* %227, i32 513
  store float %226, float* %228, align 4
  %229 = load float, float* %10, align 4
  %230 = load float, float* %12, align 4
  %231 = fsub float %229, %230
  %232 = load float*, float** %4, align 4
  %233 = getelementptr inbounds float, float* %232, i32 515
  store float %231, float* %233, align 4
  br label %234

; <label>:234:                                    ; preds = %29
  %235 = load i16, i16* %8, align 2
  %236 = add i16 %235, -1
  store i16 %236, i16* %8, align 2
  %237 = sext i16 %236 to i32
  %238 = icmp sge i32 %237, 0
  br i1 %238, label %29, label %239

; <label>:239:                                    ; preds = %234
  br label %826

; <label>:240:                                    ; preds = %3
  %241 = load i32, i32* %5, align 4
  %242 = icmp eq i32 %241, 2
  br i1 %242, label %243, label %534

; <label>:243:                                    ; preds = %240
  br label %244

; <label>:244:                                    ; preds = %528, %243
  %245 = load i16, i16* %8, align 2
  %246 = sext i16 %245 to i32
  %247 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i32 0, i32 %246
  %248 = load i16, i16* %247, align 2
  store i16 %248, i16* %7, align 2
  %249 = load i16, i16* %7, align 2
  %250 = sext i16 %249 to i32
  %251 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %250
  %252 = load float, float* %251, align 4
  %253 = load i16**, i16*** %6, align 4
  %254 = getelementptr inbounds i16*, i16** %253, i32 0
  %255 = load i16*, i16** %254, align 4
  %256 = load i16, i16* %7, align 2
  %257 = sext i16 %256 to i32
  %258 = getelementptr inbounds i16, i16* %255, i32 %257
  %259 = load i16, i16* %258, align 2
  %260 = sext i16 %259 to i32
  %261 = load i16**, i16*** %6, align 4
  %262 = getelementptr inbounds i16*, i16** %261, i32 1
  %263 = load i16*, i16** %262, align 4
  %264 = load i16, i16* %7, align 2
  %265 = sext i16 %264 to i32
  %266 = getelementptr inbounds i16, i16* %263, i32 %265
  %267 = load i16, i16* %266, align 2
  %268 = sext i16 %267 to i32
  %269 = add nsw i32 %260, %268
  %270 = sitofp i32 %269 to float
  %271 = fmul float 0x3FE6A09E60000000, %270
  %272 = fmul float %252, %271
  store float %272, float* %14, align 4
  %273 = load i16, i16* %7, align 2
  %274 = sext i16 %273 to i32
  %275 = sub nsw i32 511, %274
  %276 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %275
  %277 = load float, float* %276, align 4
  %278 = load i16**, i16*** %6, align 4
  %279 = getelementptr inbounds i16*, i16** %278, i32 0
  %280 = load i16*, i16** %279, align 4
  %281 = load i16, i16* %7, align 2
  %282 = sext i16 %281 to i32
  %283 = add nsw i32 %282, 512
  %284 = getelementptr inbounds i16, i16* %280, i32 %283
  %285 = load i16, i16* %284, align 2
  %286 = sext i16 %285 to i32
  %287 = load i16**, i16*** %6, align 4
  %288 = getelementptr inbounds i16*, i16** %287, i32 1
  %289 = load i16*, i16** %288, align 4
  %290 = load i16, i16* %7, align 2
  %291 = sext i16 %290 to i32
  %292 = add nsw i32 %291, 512
  %293 = getelementptr inbounds i16, i16* %289, i32 %292
  %294 = load i16, i16* %293, align 2
  %295 = sext i16 %294 to i32
  %296 = add nsw i32 %286, %295
  %297 = sitofp i32 %296 to float
  %298 = fmul float 0x3FE6A09E60000000, %297
  %299 = fmul float %277, %298
  store float %299, float* %18, align 4
  %300 = load float, float* %14, align 4
  %301 = load float, float* %18, align 4
  %302 = fsub float %300, %301
  store float %302, float* %15, align 4
  %303 = load float, float* %14, align 4
  %304 = load float, float* %18, align 4
  %305 = fadd float %303, %304
  store float %305, float* %14, align 4
  %306 = load i16, i16* %7, align 2
  %307 = sext i16 %306 to i32
  %308 = add nsw i32 %307, 256
  %309 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %308
  %310 = load float, float* %309, align 4
  %311 = load i16**, i16*** %6, align 4
  %312 = getelementptr inbounds i16*, i16** %311, i32 0
  %313 = load i16*, i16** %312, align 4
  %314 = load i16, i16* %7, align 2
  %315 = sext i16 %314 to i32
  %316 = add nsw i32 %315, 256
  %317 = getelementptr inbounds i16, i16* %313, i32 %316
  %318 = load i16, i16* %317, align 2
  %319 = sext i16 %318 to i32
  %320 = load i16**, i16*** %6, align 4
  %321 = getelementptr inbounds i16*, i16** %320, i32 1
  %322 = load i16*, i16** %321, align 4
  %323 = load i16, i16* %7, align 2
  %324 = sext i16 %323 to i32
  %325 = add nsw i32 %324, 256
  %326 = getelementptr inbounds i16, i16* %322, i32 %325
  %327 = load i16, i16* %326, align 2
  %328 = sext i16 %327 to i32
  %329 = add nsw i32 %319, %328
  %330 = sitofp i32 %329 to float
  %331 = fmul float 0x3FE6A09E60000000, %330
  %332 = fmul float %310, %331
  store float %332, float* %16, align 4
  %333 = load i16, i16* %7, align 2
  %334 = sext i16 %333 to i32
  %335 = sub nsw i32 255, %334
  %336 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %335
  %337 = load float, float* %336, align 4
  %338 = load i16**, i16*** %6, align 4
  %339 = getelementptr inbounds i16*, i16** %338, i32 0
  %340 = load i16*, i16** %339, align 4
  %341 = load i16, i16* %7, align 2
  %342 = sext i16 %341 to i32
  %343 = add nsw i32 %342, 768
  %344 = getelementptr inbounds i16, i16* %340, i32 %343
  %345 = load i16, i16* %344, align 2
  %346 = sext i16 %345 to i32
  %347 = load i16**, i16*** %6, align 4
  %348 = getelementptr inbounds i16*, i16** %347, i32 1
  %349 = load i16*, i16** %348, align 4
  %350 = load i16, i16* %7, align 2
  %351 = sext i16 %350 to i32
  %352 = add nsw i32 %351, 768
  %353 = getelementptr inbounds i16, i16* %349, i32 %352
  %354 = load i16, i16* %353, align 2
  %355 = sext i16 %354 to i32
  %356 = add nsw i32 %346, %355
  %357 = sitofp i32 %356 to float
  %358 = fmul float 0x3FE6A09E60000000, %357
  %359 = fmul float %337, %358
  store float %359, float* %18, align 4
  %360 = load float, float* %16, align 4
  %361 = load float, float* %18, align 4
  %362 = fsub float %360, %361
  store float %362, float* %17, align 4
  %363 = load float, float* %16, align 4
  %364 = load float, float* %18, align 4
  %365 = fadd float %363, %364
  store float %365, float* %16, align 4
  %366 = load float*, float** %4, align 4
  %367 = getelementptr inbounds float, float* %366, i32 -4
  store float* %367, float** %4, align 4
  %368 = load float, float* %14, align 4
  %369 = load float, float* %16, align 4
  %370 = fadd float %368, %369
  %371 = load float*, float** %4, align 4
  %372 = getelementptr inbounds float, float* %371, i32 0
  store float %370, float* %372, align 4
  %373 = load float, float* %14, align 4
  %374 = load float, float* %16, align 4
  %375 = fsub float %373, %374
  %376 = load float*, float** %4, align 4
  %377 = getelementptr inbounds float, float* %376, i32 2
  store float %375, float* %377, align 4
  %378 = load float, float* %15, align 4
  %379 = load float, float* %17, align 4
  %380 = fadd float %378, %379
  %381 = load float*, float** %4, align 4
  %382 = getelementptr inbounds float, float* %381, i32 1
  store float %380, float* %382, align 4
  %383 = load float, float* %15, align 4
  %384 = load float, float* %17, align 4
  %385 = fsub float %383, %384
  %386 = load float*, float** %4, align 4
  %387 = getelementptr inbounds float, float* %386, i32 3
  store float %385, float* %387, align 4
  %388 = load i16, i16* %7, align 2
  %389 = sext i16 %388 to i32
  %390 = add nsw i32 %389, 1
  %391 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %390
  %392 = load float, float* %391, align 4
  %393 = load i16**, i16*** %6, align 4
  %394 = getelementptr inbounds i16*, i16** %393, i32 0
  %395 = load i16*, i16** %394, align 4
  %396 = load i16, i16* %7, align 2
  %397 = sext i16 %396 to i32
  %398 = add nsw i32 %397, 1
  %399 = getelementptr inbounds i16, i16* %395, i32 %398
  %400 = load i16, i16* %399, align 2
  %401 = sext i16 %400 to i32
  %402 = load i16**, i16*** %6, align 4
  %403 = getelementptr inbounds i16*, i16** %402, i32 1
  %404 = load i16*, i16** %403, align 4
  %405 = load i16, i16* %7, align 2
  %406 = sext i16 %405 to i32
  %407 = add nsw i32 %406, 1
  %408 = getelementptr inbounds i16, i16* %404, i32 %407
  %409 = load i16, i16* %408, align 2
  %410 = sext i16 %409 to i32
  %411 = add nsw i32 %401, %410
  %412 = sitofp i32 %411 to float
  %413 = fmul float 0x3FE6A09E60000000, %412
  %414 = fmul float %392, %413
  store float %414, float* %14, align 4
  %415 = load i16, i16* %7, align 2
  %416 = sext i16 %415 to i32
  %417 = sub nsw i32 510, %416
  %418 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %417
  %419 = load float, float* %418, align 4
  %420 = load i16**, i16*** %6, align 4
  %421 = getelementptr inbounds i16*, i16** %420, i32 0
  %422 = load i16*, i16** %421, align 4
  %423 = load i16, i16* %7, align 2
  %424 = sext i16 %423 to i32
  %425 = add nsw i32 %424, 513
  %426 = getelementptr inbounds i16, i16* %422, i32 %425
  %427 = load i16, i16* %426, align 2
  %428 = sext i16 %427 to i32
  %429 = load i16**, i16*** %6, align 4
  %430 = getelementptr inbounds i16*, i16** %429, i32 1
  %431 = load i16*, i16** %430, align 4
  %432 = load i16, i16* %7, align 2
  %433 = sext i16 %432 to i32
  %434 = add nsw i32 %433, 513
  %435 = getelementptr inbounds i16, i16* %431, i32 %434
  %436 = load i16, i16* %435, align 2
  %437 = sext i16 %436 to i32
  %438 = add nsw i32 %428, %437
  %439 = sitofp i32 %438 to float
  %440 = fmul float 0x3FE6A09E60000000, %439
  %441 = fmul float %419, %440
  store float %441, float* %18, align 4
  %442 = load float, float* %14, align 4
  %443 = load float, float* %18, align 4
  %444 = fsub float %442, %443
  store float %444, float* %15, align 4
  %445 = load float, float* %14, align 4
  %446 = load float, float* %18, align 4
  %447 = fadd float %445, %446
  store float %447, float* %14, align 4
  %448 = load i16, i16* %7, align 2
  %449 = sext i16 %448 to i32
  %450 = add nsw i32 %449, 257
  %451 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %450
  %452 = load float, float* %451, align 4
  %453 = load i16**, i16*** %6, align 4
  %454 = getelementptr inbounds i16*, i16** %453, i32 0
  %455 = load i16*, i16** %454, align 4
  %456 = load i16, i16* %7, align 2
  %457 = sext i16 %456 to i32
  %458 = add nsw i32 %457, 257
  %459 = getelementptr inbounds i16, i16* %455, i32 %458
  %460 = load i16, i16* %459, align 2
  %461 = sext i16 %460 to i32
  %462 = load i16**, i16*** %6, align 4
  %463 = getelementptr inbounds i16*, i16** %462, i32 1
  %464 = load i16*, i16** %463, align 4
  %465 = load i16, i16* %7, align 2
  %466 = sext i16 %465 to i32
  %467 = add nsw i32 %466, 257
  %468 = getelementptr inbounds i16, i16* %464, i32 %467
  %469 = load i16, i16* %468, align 2
  %470 = sext i16 %469 to i32
  %471 = add nsw i32 %461, %470
  %472 = sitofp i32 %471 to float
  %473 = fmul float 0x3FE6A09E60000000, %472
  %474 = fmul float %452, %473
  store float %474, float* %16, align 4
  %475 = load i16, i16* %7, align 2
  %476 = sext i16 %475 to i32
  %477 = sub nsw i32 254, %476
  %478 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %477
  %479 = load float, float* %478, align 4
  %480 = load i16**, i16*** %6, align 4
  %481 = getelementptr inbounds i16*, i16** %480, i32 0
  %482 = load i16*, i16** %481, align 4
  %483 = load i16, i16* %7, align 2
  %484 = sext i16 %483 to i32
  %485 = add nsw i32 %484, 769
  %486 = getelementptr inbounds i16, i16* %482, i32 %485
  %487 = load i16, i16* %486, align 2
  %488 = sext i16 %487 to i32
  %489 = load i16**, i16*** %6, align 4
  %490 = getelementptr inbounds i16*, i16** %489, i32 1
  %491 = load i16*, i16** %490, align 4
  %492 = load i16, i16* %7, align 2
  %493 = sext i16 %492 to i32
  %494 = add nsw i32 %493, 769
  %495 = getelementptr inbounds i16, i16* %491, i32 %494
  %496 = load i16, i16* %495, align 2
  %497 = sext i16 %496 to i32
  %498 = add nsw i32 %488, %497
  %499 = sitofp i32 %498 to float
  %500 = fmul float 0x3FE6A09E60000000, %499
  %501 = fmul float %479, %500
  store float %501, float* %18, align 4
  %502 = load float, float* %16, align 4
  %503 = load float, float* %18, align 4
  %504 = fsub float %502, %503
  store float %504, float* %17, align 4
  %505 = load float, float* %16, align 4
  %506 = load float, float* %18, align 4
  %507 = fadd float %505, %506
  store float %507, float* %16, align 4
  %508 = load float, float* %14, align 4
  %509 = load float, float* %16, align 4
  %510 = fadd float %508, %509
  %511 = load float*, float** %4, align 4
  %512 = getelementptr inbounds float, float* %511, i32 512
  store float %510, float* %512, align 4
  %513 = load float, float* %14, align 4
  %514 = load float, float* %16, align 4
  %515 = fsub float %513, %514
  %516 = load float*, float** %4, align 4
  %517 = getelementptr inbounds float, float* %516, i32 514
  store float %515, float* %517, align 4
  %518 = load float, float* %15, align 4
  %519 = load float, float* %17, align 4
  %520 = fadd float %518, %519
  %521 = load float*, float** %4, align 4
  %522 = getelementptr inbounds float, float* %521, i32 513
  store float %520, float* %522, align 4
  %523 = load float, float* %15, align 4
  %524 = load float, float* %17, align 4
  %525 = fsub float %523, %524
  %526 = load float*, float** %4, align 4
  %527 = getelementptr inbounds float, float* %526, i32 515
  store float %525, float* %527, align 4
  br label %528

; <label>:528:                                    ; preds = %244
  %529 = load i16, i16* %8, align 2
  %530 = add i16 %529, -1
  store i16 %530, i16* %8, align 2
  %531 = sext i16 %530 to i32
  %532 = icmp sge i32 %531, 0
  br i1 %532, label %244, label %533

; <label>:533:                                    ; preds = %528
  br label %825

; <label>:534:                                    ; preds = %240
  br label %535

; <label>:535:                                    ; preds = %819, %534
  %536 = load i16, i16* %8, align 2
  %537 = sext i16 %536 to i32
  %538 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i32 0, i32 %537
  %539 = load i16, i16* %538, align 2
  store i16 %539, i16* %7, align 2
  %540 = load i16, i16* %7, align 2
  %541 = sext i16 %540 to i32
  %542 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %541
  %543 = load float, float* %542, align 4
  %544 = load i16**, i16*** %6, align 4
  %545 = getelementptr inbounds i16*, i16** %544, i32 0
  %546 = load i16*, i16** %545, align 4
  %547 = load i16, i16* %7, align 2
  %548 = sext i16 %547 to i32
  %549 = getelementptr inbounds i16, i16* %546, i32 %548
  %550 = load i16, i16* %549, align 2
  %551 = sext i16 %550 to i32
  %552 = load i16**, i16*** %6, align 4
  %553 = getelementptr inbounds i16*, i16** %552, i32 1
  %554 = load i16*, i16** %553, align 4
  %555 = load i16, i16* %7, align 2
  %556 = sext i16 %555 to i32
  %557 = getelementptr inbounds i16, i16* %554, i32 %556
  %558 = load i16, i16* %557, align 2
  %559 = sext i16 %558 to i32
  %560 = sub nsw i32 %551, %559
  %561 = sitofp i32 %560 to float
  %562 = fmul float 0x3FE6A09E60000000, %561
  %563 = fmul float %543, %562
  store float %563, float* %19, align 4
  %564 = load i16, i16* %7, align 2
  %565 = sext i16 %564 to i32
  %566 = sub nsw i32 511, %565
  %567 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %566
  %568 = load float, float* %567, align 4
  %569 = load i16**, i16*** %6, align 4
  %570 = getelementptr inbounds i16*, i16** %569, i32 0
  %571 = load i16*, i16** %570, align 4
  %572 = load i16, i16* %7, align 2
  %573 = sext i16 %572 to i32
  %574 = add nsw i32 %573, 512
  %575 = getelementptr inbounds i16, i16* %571, i32 %574
  %576 = load i16, i16* %575, align 2
  %577 = sext i16 %576 to i32
  %578 = load i16**, i16*** %6, align 4
  %579 = getelementptr inbounds i16*, i16** %578, i32 1
  %580 = load i16*, i16** %579, align 4
  %581 = load i16, i16* %7, align 2
  %582 = sext i16 %581 to i32
  %583 = add nsw i32 %582, 512
  %584 = getelementptr inbounds i16, i16* %580, i32 %583
  %585 = load i16, i16* %584, align 2
  %586 = sext i16 %585 to i32
  %587 = sub nsw i32 %577, %586
  %588 = sitofp i32 %587 to float
  %589 = fmul float 0x3FE6A09E60000000, %588
  %590 = fmul float %568, %589
  store float %590, float* %23, align 4
  %591 = load float, float* %19, align 4
  %592 = load float, float* %23, align 4
  %593 = fsub float %591, %592
  store float %593, float* %20, align 4
  %594 = load float, float* %19, align 4
  %595 = load float, float* %23, align 4
  %596 = fadd float %594, %595
  store float %596, float* %19, align 4
  %597 = load i16, i16* %7, align 2
  %598 = sext i16 %597 to i32
  %599 = add nsw i32 %598, 256
  %600 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %599
  %601 = load float, float* %600, align 4
  %602 = load i16**, i16*** %6, align 4
  %603 = getelementptr inbounds i16*, i16** %602, i32 0
  %604 = load i16*, i16** %603, align 4
  %605 = load i16, i16* %7, align 2
  %606 = sext i16 %605 to i32
  %607 = add nsw i32 %606, 256
  %608 = getelementptr inbounds i16, i16* %604, i32 %607
  %609 = load i16, i16* %608, align 2
  %610 = sext i16 %609 to i32
  %611 = load i16**, i16*** %6, align 4
  %612 = getelementptr inbounds i16*, i16** %611, i32 1
  %613 = load i16*, i16** %612, align 4
  %614 = load i16, i16* %7, align 2
  %615 = sext i16 %614 to i32
  %616 = add nsw i32 %615, 256
  %617 = getelementptr inbounds i16, i16* %613, i32 %616
  %618 = load i16, i16* %617, align 2
  %619 = sext i16 %618 to i32
  %620 = sub nsw i32 %610, %619
  %621 = sitofp i32 %620 to float
  %622 = fmul float 0x3FE6A09E60000000, %621
  %623 = fmul float %601, %622
  store float %623, float* %21, align 4
  %624 = load i16, i16* %7, align 2
  %625 = sext i16 %624 to i32
  %626 = sub nsw i32 255, %625
  %627 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %626
  %628 = load float, float* %627, align 4
  %629 = load i16**, i16*** %6, align 4
  %630 = getelementptr inbounds i16*, i16** %629, i32 0
  %631 = load i16*, i16** %630, align 4
  %632 = load i16, i16* %7, align 2
  %633 = sext i16 %632 to i32
  %634 = add nsw i32 %633, 768
  %635 = getelementptr inbounds i16, i16* %631, i32 %634
  %636 = load i16, i16* %635, align 2
  %637 = sext i16 %636 to i32
  %638 = load i16**, i16*** %6, align 4
  %639 = getelementptr inbounds i16*, i16** %638, i32 1
  %640 = load i16*, i16** %639, align 4
  %641 = load i16, i16* %7, align 2
  %642 = sext i16 %641 to i32
  %643 = add nsw i32 %642, 768
  %644 = getelementptr inbounds i16, i16* %640, i32 %643
  %645 = load i16, i16* %644, align 2
  %646 = sext i16 %645 to i32
  %647 = sub nsw i32 %637, %646
  %648 = sitofp i32 %647 to float
  %649 = fmul float 0x3FE6A09E60000000, %648
  %650 = fmul float %628, %649
  store float %650, float* %23, align 4
  %651 = load float, float* %21, align 4
  %652 = load float, float* %23, align 4
  %653 = fsub float %651, %652
  store float %653, float* %22, align 4
  %654 = load float, float* %21, align 4
  %655 = load float, float* %23, align 4
  %656 = fadd float %654, %655
  store float %656, float* %21, align 4
  %657 = load float*, float** %4, align 4
  %658 = getelementptr inbounds float, float* %657, i32 -4
  store float* %658, float** %4, align 4
  %659 = load float, float* %19, align 4
  %660 = load float, float* %21, align 4
  %661 = fadd float %659, %660
  %662 = load float*, float** %4, align 4
  %663 = getelementptr inbounds float, float* %662, i32 0
  store float %661, float* %663, align 4
  %664 = load float, float* %19, align 4
  %665 = load float, float* %21, align 4
  %666 = fsub float %664, %665
  %667 = load float*, float** %4, align 4
  %668 = getelementptr inbounds float, float* %667, i32 2
  store float %666, float* %668, align 4
  %669 = load float, float* %20, align 4
  %670 = load float, float* %22, align 4
  %671 = fadd float %669, %670
  %672 = load float*, float** %4, align 4
  %673 = getelementptr inbounds float, float* %672, i32 1
  store float %671, float* %673, align 4
  %674 = load float, float* %20, align 4
  %675 = load float, float* %22, align 4
  %676 = fsub float %674, %675
  %677 = load float*, float** %4, align 4
  %678 = getelementptr inbounds float, float* %677, i32 3
  store float %676, float* %678, align 4
  %679 = load i16, i16* %7, align 2
  %680 = sext i16 %679 to i32
  %681 = add nsw i32 %680, 1
  %682 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %681
  %683 = load float, float* %682, align 4
  %684 = load i16**, i16*** %6, align 4
  %685 = getelementptr inbounds i16*, i16** %684, i32 0
  %686 = load i16*, i16** %685, align 4
  %687 = load i16, i16* %7, align 2
  %688 = sext i16 %687 to i32
  %689 = add nsw i32 %688, 1
  %690 = getelementptr inbounds i16, i16* %686, i32 %689
  %691 = load i16, i16* %690, align 2
  %692 = sext i16 %691 to i32
  %693 = load i16**, i16*** %6, align 4
  %694 = getelementptr inbounds i16*, i16** %693, i32 1
  %695 = load i16*, i16** %694, align 4
  %696 = load i16, i16* %7, align 2
  %697 = sext i16 %696 to i32
  %698 = add nsw i32 %697, 1
  %699 = getelementptr inbounds i16, i16* %695, i32 %698
  %700 = load i16, i16* %699, align 2
  %701 = sext i16 %700 to i32
  %702 = sub nsw i32 %692, %701
  %703 = sitofp i32 %702 to float
  %704 = fmul float 0x3FE6A09E60000000, %703
  %705 = fmul float %683, %704
  store float %705, float* %19, align 4
  %706 = load i16, i16* %7, align 2
  %707 = sext i16 %706 to i32
  %708 = sub nsw i32 510, %707
  %709 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %708
  %710 = load float, float* %709, align 4
  %711 = load i16**, i16*** %6, align 4
  %712 = getelementptr inbounds i16*, i16** %711, i32 0
  %713 = load i16*, i16** %712, align 4
  %714 = load i16, i16* %7, align 2
  %715 = sext i16 %714 to i32
  %716 = add nsw i32 %715, 513
  %717 = getelementptr inbounds i16, i16* %713, i32 %716
  %718 = load i16, i16* %717, align 2
  %719 = sext i16 %718 to i32
  %720 = load i16**, i16*** %6, align 4
  %721 = getelementptr inbounds i16*, i16** %720, i32 1
  %722 = load i16*, i16** %721, align 4
  %723 = load i16, i16* %7, align 2
  %724 = sext i16 %723 to i32
  %725 = add nsw i32 %724, 513
  %726 = getelementptr inbounds i16, i16* %722, i32 %725
  %727 = load i16, i16* %726, align 2
  %728 = sext i16 %727 to i32
  %729 = sub nsw i32 %719, %728
  %730 = sitofp i32 %729 to float
  %731 = fmul float 0x3FE6A09E60000000, %730
  %732 = fmul float %710, %731
  store float %732, float* %23, align 4
  %733 = load float, float* %19, align 4
  %734 = load float, float* %23, align 4
  %735 = fsub float %733, %734
  store float %735, float* %20, align 4
  %736 = load float, float* %19, align 4
  %737 = load float, float* %23, align 4
  %738 = fadd float %736, %737
  store float %738, float* %19, align 4
  %739 = load i16, i16* %7, align 2
  %740 = sext i16 %739 to i32
  %741 = add nsw i32 %740, 257
  %742 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %741
  %743 = load float, float* %742, align 4
  %744 = load i16**, i16*** %6, align 4
  %745 = getelementptr inbounds i16*, i16** %744, i32 0
  %746 = load i16*, i16** %745, align 4
  %747 = load i16, i16* %7, align 2
  %748 = sext i16 %747 to i32
  %749 = add nsw i32 %748, 257
  %750 = getelementptr inbounds i16, i16* %746, i32 %749
  %751 = load i16, i16* %750, align 2
  %752 = sext i16 %751 to i32
  %753 = load i16**, i16*** %6, align 4
  %754 = getelementptr inbounds i16*, i16** %753, i32 1
  %755 = load i16*, i16** %754, align 4
  %756 = load i16, i16* %7, align 2
  %757 = sext i16 %756 to i32
  %758 = add nsw i32 %757, 257
  %759 = getelementptr inbounds i16, i16* %755, i32 %758
  %760 = load i16, i16* %759, align 2
  %761 = sext i16 %760 to i32
  %762 = sub nsw i32 %752, %761
  %763 = sitofp i32 %762 to float
  %764 = fmul float 0x3FE6A09E60000000, %763
  %765 = fmul float %743, %764
  store float %765, float* %21, align 4
  %766 = load i16, i16* %7, align 2
  %767 = sext i16 %766 to i32
  %768 = sub nsw i32 254, %767
  %769 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %768
  %770 = load float, float* %769, align 4
  %771 = load i16**, i16*** %6, align 4
  %772 = getelementptr inbounds i16*, i16** %771, i32 0
  %773 = load i16*, i16** %772, align 4
  %774 = load i16, i16* %7, align 2
  %775 = sext i16 %774 to i32
  %776 = add nsw i32 %775, 769
  %777 = getelementptr inbounds i16, i16* %773, i32 %776
  %778 = load i16, i16* %777, align 2
  %779 = sext i16 %778 to i32
  %780 = load i16**, i16*** %6, align 4
  %781 = getelementptr inbounds i16*, i16** %780, i32 1
  %782 = load i16*, i16** %781, align 4
  %783 = load i16, i16* %7, align 2
  %784 = sext i16 %783 to i32
  %785 = add nsw i32 %784, 769
  %786 = getelementptr inbounds i16, i16* %782, i32 %785
  %787 = load i16, i16* %786, align 2
  %788 = sext i16 %787 to i32
  %789 = sub nsw i32 %779, %788
  %790 = sitofp i32 %789 to float
  %791 = fmul float 0x3FE6A09E60000000, %790
  %792 = fmul float %770, %791
  store float %792, float* %23, align 4
  %793 = load float, float* %21, align 4
  %794 = load float, float* %23, align 4
  %795 = fsub float %793, %794
  store float %795, float* %22, align 4
  %796 = load float, float* %21, align 4
  %797 = load float, float* %23, align 4
  %798 = fadd float %796, %797
  store float %798, float* %21, align 4
  %799 = load float, float* %19, align 4
  %800 = load float, float* %21, align 4
  %801 = fadd float %799, %800
  %802 = load float*, float** %4, align 4
  %803 = getelementptr inbounds float, float* %802, i32 512
  store float %801, float* %803, align 4
  %804 = load float, float* %19, align 4
  %805 = load float, float* %21, align 4
  %806 = fsub float %804, %805
  %807 = load float*, float** %4, align 4
  %808 = getelementptr inbounds float, float* %807, i32 514
  store float %806, float* %808, align 4
  %809 = load float, float* %20, align 4
  %810 = load float, float* %22, align 4
  %811 = fadd float %809, %810
  %812 = load float*, float** %4, align 4
  %813 = getelementptr inbounds float, float* %812, i32 513
  store float %811, float* %813, align 4
  %814 = load float, float* %20, align 4
  %815 = load float, float* %22, align 4
  %816 = fsub float %814, %815
  %817 = load float*, float** %4, align 4
  %818 = getelementptr inbounds float, float* %817, i32 515
  store float %816, float* %818, align 4
  br label %819

; <label>:819:                                    ; preds = %535
  %820 = load i16, i16* %8, align 2
  %821 = add i16 %820, -1
  store i16 %821, i16* %8, align 2
  %822 = sext i16 %821 to i32
  %823 = icmp sge i32 %822, 0
  br i1 %823, label %535, label %824

; <label>:824:                                    ; preds = %819
  br label %825

; <label>:825:                                    ; preds = %824, %533
  br label %826

; <label>:826:                                    ; preds = %825, %239
  %827 = load float*, float** %4, align 4
  call arm_aapcscc void @fht(float* %827, i16 signext 1024)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @init_fft() #0 {
  %1 = alloca i32, align 4
  %2 = alloca float, align 4
  store float 0x3FD921FB60000000, float* %2, align 4
  store i32 0, i32* %1, align 4
  br label %3

; <label>:3:                                      ; preds = %26, %0
  %4 = load i32, i32* %1, align 4
  %5 = icmp slt i32 %4, 4
  br i1 %5, label %6, label %29

; <label>:6:                                      ; preds = %3
  %7 = load float, float* %2, align 4
  %8 = fpext float %7 to double
  %9 = call arm_aapcscc double @cos(double %8) #7
  %10 = fptrunc double %9 to float
  %11 = load i32, i32* %1, align 4
  %12 = mul nsw i32 %11, 2
  %13 = getelementptr inbounds [8 x float], [8 x float]* @costab, i32 0, i32 %12
  store float %10, float* %13, align 4
  %14 = load float, float* %2, align 4
  %15 = fpext float %14 to double
  %16 = call arm_aapcscc double @sin(double %15) #7
  %17 = fptrunc double %16 to float
  %18 = load i32, i32* %1, align 4
  %19 = mul nsw i32 %18, 2
  %20 = add nsw i32 %19, 1
  %21 = getelementptr inbounds [8 x float], [8 x float]* @costab, i32 0, i32 %20
  store float %17, float* %21, align 4
  %22 = load float, float* %2, align 4
  %23 = fpext float %22 to double
  %24 = fmul double %23, 2.500000e-01
  %25 = fptrunc double %24 to float
  store float %25, float* %2, align 4
  br label %26

; <label>:26:                                     ; preds = %6
  %27 = load i32, i32* %1, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %1, align 4
  br label %3

; <label>:29:                                     ; preds = %3
  store i32 0, i32* %1, align 4
  br label %30

; <label>:30:                                     ; preds = %45, %29
  %31 = load i32, i32* %1, align 4
  %32 = icmp slt i32 %31, 512
  br i1 %32, label %33, label %48

; <label>:33:                                     ; preds = %30
  %34 = load i32, i32* %1, align 4
  %35 = sitofp i32 %34 to double
  %36 = fadd double %35, 5.000000e-01
  %37 = fmul double 0x401921FB54442D18, %36
  %38 = fdiv double %37, 1.024000e+03
  %39 = call arm_aapcscc double @cos(double %38) #7
  %40 = fsub double 1.000000e+00, %39
  %41 = fmul double 5.000000e-01, %40
  %42 = fptrunc double %41 to float
  %43 = load i32, i32* %1, align 4
  %44 = getelementptr inbounds [512 x float], [512 x float]* @window, i32 0, i32 %43
  store float %42, float* %44, align 4
  br label %45

; <label>:45:                                     ; preds = %33
  %46 = load i32, i32* %1, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %1, align 4
  br label %30

; <label>:48:                                     ; preds = %30
  store i32 0, i32* %1, align 4
  br label %49

; <label>:49:                                     ; preds = %64, %48
  %50 = load i32, i32* %1, align 4
  %51 = icmp slt i32 %50, 128
  br i1 %51, label %52, label %67

; <label>:52:                                     ; preds = %49
  %53 = load i32, i32* %1, align 4
  %54 = sitofp i32 %53 to double
  %55 = fadd double %54, 5.000000e-01
  %56 = fmul double 0x401921FB54442D18, %55
  %57 = fdiv double %56, 2.560000e+02
  %58 = call arm_aapcscc double @cos(double %57) #7
  %59 = fsub double 1.000000e+00, %58
  %60 = fmul double 5.000000e-01, %59
  %61 = fptrunc double %60 to float
  %62 = load i32, i32* %1, align 4
  %63 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i32 0, i32 %62
  store float %61, float* %63, align 4
  br label %64

; <label>:64:                                     ; preds = %52
  %65 = load i32, i32* %1, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %1, align 4
  br label %49

; <label>:67:                                     ; preds = %49
  ret void
}

; Function Attrs: nounwind
declare arm_aapcscc double @cos(double) #2

; Function Attrs: nounwind
declare arm_aapcscc double @sin(double) #2

; Function Attrs: nounwind
define arm_aapcscc void @InitFormatBitStream() #0 {
  store i32 0, i32* @BitCount, align 4
  store i32 0, i32* @ThisFrameSize, align 4
  store i32 0, i32* @BitsRemaining, align 4
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @BF_BitstreamFrame(%struct.BF_FrameData*, %struct.BF_FrameResults*) #0 {
  %3 = alloca %struct.BF_FrameData*, align 4
  %4 = alloca %struct.BF_FrameResults*, align 4
  store %struct.BF_FrameData* %0, %struct.BF_FrameData** %3, align 4
  store %struct.BF_FrameResults* %1, %struct.BF_FrameResults** %4, align 4
  %5 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %6 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %5, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp sle i32 %7, 2
  br i1 %8, label %10, label %9

; <label>:9:                                      ; preds = %2
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 59, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.BF_BitstreamFrame, i32 0, i32 0))
  br label %10

; <label>:10:                                     ; preds = %9, %2
  %11 = phi i1 [ true, %2 ], [ false, %9 ]
  %12 = zext i1 %11 to i32
  %13 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %14 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %13, i32 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp sle i32 %15, 2
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %10
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 60, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.BF_BitstreamFrame, i32 0, i32 0))
  br label %18

; <label>:18:                                     ; preds = %17, %10
  %19 = phi i1 [ true, %10 ], [ false, %17 ]
  %20 = zext i1 %19 to i32
  %21 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %22 = call arm_aapcscc i32 @store_side_info(%struct.BF_FrameData* %21)
  %23 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %24 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %23, i32 0, i32 0
  store i32 %22, i32* %24, align 4
  %25 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %26 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %27 = call arm_aapcscc i32 @main_data(%struct.BF_FrameData* %25, %struct.BF_FrameResults* %26)
  %28 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %29 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %28, i32 0, i32 1
  store i32 %27, i32* %29, align 4
  %30 = load i32, i32* @BitsRemaining, align 4
  %31 = srem i32 %30, 8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %34, label %33

; <label>:33:                                     ; preds = %18
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 74, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.BF_BitstreamFrame, i32 0, i32 0))
  br label %34

; <label>:34:                                     ; preds = %33, %18
  %35 = phi i1 [ true, %18 ], [ false, %33 ]
  %36 = zext i1 %35 to i32
  %37 = call arm_aapcscc i32 @side_queue_elements(i32* @forwardFrameLength, i32* @forwardSILength)
  store i32 %37, i32* @elements, align 4
  %38 = load i32, i32* @BitsRemaining, align 4
  %39 = sdiv i32 %38, 8
  %40 = load i32, i32* @forwardFrameLength, align 4
  %41 = sdiv i32 %40, 8
  %42 = add nsw i32 %39, %41
  %43 = load i32, i32* @forwardSILength, align 4
  %44 = sdiv i32 %43, 8
  %45 = sub nsw i32 %42, %44
  %46 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %47 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %46, i32 0, i32 2
  store i32 %45, i32* %47, align 4
  ret void
}

declare arm_aapcscc void @__assert_fail(i8*, i8*, i32, i8*) #3

; Function Attrs: nounwind
define internal arm_aapcscc i32 @store_side_info(%struct.BF_FrameData*) #0 {
  %2 = alloca %struct.BF_FrameData*, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.side_info_link*, align 4
  %6 = alloca %struct.side_info_link*, align 4
  %7 = alloca i32, align 4
  store %struct.BF_FrameData* %0, %struct.BF_FrameData** %2, align 4
  %8 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_free, align 4
  store %struct.side_info_link* %8, %struct.side_info_link** %6, align 4
  store i32 0, i32* %7, align 4
  %9 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %10 = icmp eq %struct.side_info_link* %9, null
  br i1 %10, label %11, label %103

; <label>:11:                                     ; preds = %1
  %12 = call arm_aapcscc i8* @calloc(i32 1, i32 52)
  %13 = bitcast i8* %12 to %struct.side_info_link*
  store %struct.side_info_link* %13, %struct.side_info_link** %5, align 4
  %14 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %15 = icmp eq %struct.side_info_link* %14, null
  br i1 %15, label %16, label %19

; <label>:16:                                     ; preds = %11
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %18 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.14, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:19:                                     ; preds = %11
  %20 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %21 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %20, i32 0, i32 0
  store %struct.side_info_link* null, %struct.side_info_link** %21, align 4
  %22 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %23 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %22, i32 0, i32 3
  %24 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %23, align 4
  %25 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 %26)
  %28 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %29 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %28, i32 0, i32 1
  %30 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %29, i32 0, i32 4
  store %struct.BF_PartHolder* %27, %struct.BF_PartHolder** %30, align 4
  %31 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %32 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %31, i32 0, i32 4
  %33 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %32, align 4
  %34 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %33, i32 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 %35)
  %37 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %38 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %37, i32 0, i32 1
  %39 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %38, i32 0, i32 5
  store %struct.BF_PartHolder* %36, %struct.BF_PartHolder** %39, align 4
  store i32 0, i32* %3, align 4
  br label %40

; <label>:40:                                     ; preds = %60, %19
  %41 = load i32, i32* %3, align 4
  %42 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %43 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %42, i32 0, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = icmp slt i32 %41, %44
  br i1 %45, label %46, label %63

; <label>:46:                                     ; preds = %40
  %47 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %48 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %47, i32 0, i32 5
  %49 = load i32, i32* %3, align 4
  %50 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %48, i32 0, i32 %49
  %51 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %50, align 4
  %52 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %51, i32 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 %53)
  %55 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %56 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %55, i32 0, i32 1
  %57 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %56, i32 0, i32 6
  %58 = load i32, i32* %3, align 4
  %59 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %57, i32 0, i32 %58
  store %struct.BF_PartHolder* %54, %struct.BF_PartHolder** %59, align 4
  br label %60

; <label>:60:                                     ; preds = %46
  %61 = load i32, i32* %3, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %3, align 4
  br label %40

; <label>:63:                                     ; preds = %40
  store i32 0, i32* %4, align 4
  br label %64

; <label>:64:                                     ; preds = %99, %63
  %65 = load i32, i32* %4, align 4
  %66 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %67 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %66, i32 0, i32 1
  %68 = load i32, i32* %67, align 4
  %69 = icmp slt i32 %65, %68
  br i1 %69, label %70, label %102

; <label>:70:                                     ; preds = %64
  store i32 0, i32* %3, align 4
  br label %71

; <label>:71:                                     ; preds = %95, %70
  %72 = load i32, i32* %3, align 4
  %73 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %74 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %73, i32 0, i32 2
  %75 = load i32, i32* %74, align 4
  %76 = icmp slt i32 %72, %75
  br i1 %76, label %77, label %98

; <label>:77:                                     ; preds = %71
  %78 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %79 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %78, i32 0, i32 6
  %80 = load i32, i32* %4, align 4
  %81 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %79, i32 0, i32 %80
  %82 = load i32, i32* %3, align 4
  %83 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %81, i32 0, i32 %82
  %84 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %83, align 4
  %85 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %84, i32 0, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 %86)
  %88 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %89 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %88, i32 0, i32 1
  %90 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %89, i32 0, i32 7
  %91 = load i32, i32* %4, align 4
  %92 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* %90, i32 0, i32 %91
  %93 = load i32, i32* %3, align 4
  %94 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %92, i32 0, i32 %93
  store %struct.BF_PartHolder* %87, %struct.BF_PartHolder** %94, align 4
  br label %95

; <label>:95:                                     ; preds = %77
  %96 = load i32, i32* %3, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %3, align 4
  br label %71

; <label>:98:                                     ; preds = %71
  br label %99

; <label>:99:                                     ; preds = %98
  %100 = load i32, i32* %4, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %4, align 4
  br label %64

; <label>:102:                                    ; preds = %64
  br label %110

; <label>:103:                                    ; preds = %1
  %104 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %105 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %104, i32 0, i32 0
  %106 = load %struct.side_info_link*, %struct.side_info_link** %105, align 4
  store %struct.side_info_link* %106, %struct.side_info_link** @side_queue_free, align 4
  %107 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %108 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %107, i32 0, i32 0
  store %struct.side_info_link* null, %struct.side_info_link** %108, align 4
  %109 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  store %struct.side_info_link* %109, %struct.side_info_link** %5, align 4
  br label %110

; <label>:110:                                    ; preds = %103, %102
  %111 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %112 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %111, i32 0, i32 0
  %113 = load i32, i32* %112, align 4
  %114 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %115 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %114, i32 0, i32 1
  %116 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %115, i32 0, i32 0
  store i32 %113, i32* %116, align 4
  %117 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %118 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %117, i32 0, i32 1
  %119 = load i32, i32* %118, align 4
  %120 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %121 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %120, i32 0, i32 1
  %122 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %121, i32 0, i32 2
  store i32 %119, i32* %122, align 4
  %123 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %124 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %123, i32 0, i32 2
  %125 = load i32, i32* %124, align 4
  %126 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %127 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %126, i32 0, i32 1
  %128 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %127, i32 0, i32 3
  store i32 %125, i32* %128, align 4
  %129 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %130 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %129, i32 0, i32 1
  %131 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %130, i32 0, i32 4
  %132 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %131, align 4
  %133 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %134 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %133, i32 0, i32 3
  %135 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %134, align 4
  %136 = call arm_aapcscc %struct.BF_PartHolder* @BF_LoadHolderFromBitstreamPart(%struct.BF_PartHolder* %132, %struct.BF_BitstreamPart* %135)
  %137 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %138 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %137, i32 0, i32 1
  %139 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %138, i32 0, i32 4
  store %struct.BF_PartHolder* %136, %struct.BF_PartHolder** %139, align 4
  %140 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %141 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %140, i32 0, i32 1
  %142 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %141, i32 0, i32 5
  %143 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %142, align 4
  %144 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %145 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %144, i32 0, i32 4
  %146 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %145, align 4
  %147 = call arm_aapcscc %struct.BF_PartHolder* @BF_LoadHolderFromBitstreamPart(%struct.BF_PartHolder* %143, %struct.BF_BitstreamPart* %146)
  %148 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %149 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %148, i32 0, i32 1
  %150 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %149, i32 0, i32 5
  store %struct.BF_PartHolder* %147, %struct.BF_PartHolder** %150, align 4
  %151 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %152 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %151, i32 0, i32 3
  %153 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %152, align 4
  %154 = call arm_aapcscc i32 @BF_PartLength(%struct.BF_BitstreamPart* %153)
  %155 = load i32, i32* %7, align 4
  %156 = add nsw i32 %155, %154
  store i32 %156, i32* %7, align 4
  %157 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %158 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %157, i32 0, i32 4
  %159 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %158, align 4
  %160 = call arm_aapcscc i32 @BF_PartLength(%struct.BF_BitstreamPart* %159)
  %161 = load i32, i32* %7, align 4
  %162 = add nsw i32 %161, %160
  store i32 %162, i32* %7, align 4
  store i32 0, i32* %3, align 4
  br label %163

; <label>:163:                                    ; preds = %195, %110
  %164 = load i32, i32* %3, align 4
  %165 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %166 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %165, i32 0, i32 2
  %167 = load i32, i32* %166, align 4
  %168 = icmp slt i32 %164, %167
  br i1 %168, label %169, label %198

; <label>:169:                                    ; preds = %163
  %170 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %171 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %170, i32 0, i32 1
  %172 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %171, i32 0, i32 6
  %173 = load i32, i32* %3, align 4
  %174 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %172, i32 0, i32 %173
  %175 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %174, align 4
  %176 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %177 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %176, i32 0, i32 5
  %178 = load i32, i32* %3, align 4
  %179 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %177, i32 0, i32 %178
  %180 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %179, align 4
  %181 = call arm_aapcscc %struct.BF_PartHolder* @BF_LoadHolderFromBitstreamPart(%struct.BF_PartHolder* %175, %struct.BF_BitstreamPart* %180)
  %182 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %183 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %182, i32 0, i32 1
  %184 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %183, i32 0, i32 6
  %185 = load i32, i32* %3, align 4
  %186 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %184, i32 0, i32 %185
  store %struct.BF_PartHolder* %181, %struct.BF_PartHolder** %186, align 4
  %187 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %188 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %187, i32 0, i32 5
  %189 = load i32, i32* %3, align 4
  %190 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %188, i32 0, i32 %189
  %191 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %190, align 4
  %192 = call arm_aapcscc i32 @BF_PartLength(%struct.BF_BitstreamPart* %191)
  %193 = load i32, i32* %7, align 4
  %194 = add nsw i32 %193, %192
  store i32 %194, i32* %7, align 4
  br label %195

; <label>:195:                                    ; preds = %169
  %196 = load i32, i32* %3, align 4
  %197 = add nsw i32 %196, 1
  store i32 %197, i32* %3, align 4
  br label %163

; <label>:198:                                    ; preds = %163
  store i32 0, i32* %4, align 4
  br label %199

; <label>:199:                                    ; preds = %250, %198
  %200 = load i32, i32* %4, align 4
  %201 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %202 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %201, i32 0, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = icmp slt i32 %200, %203
  br i1 %204, label %205, label %253

; <label>:205:                                    ; preds = %199
  store i32 0, i32* %3, align 4
  br label %206

; <label>:206:                                    ; preds = %246, %205
  %207 = load i32, i32* %3, align 4
  %208 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %209 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %208, i32 0, i32 2
  %210 = load i32, i32* %209, align 4
  %211 = icmp slt i32 %207, %210
  br i1 %211, label %212, label %249

; <label>:212:                                    ; preds = %206
  %213 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %214 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %213, i32 0, i32 1
  %215 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %214, i32 0, i32 7
  %216 = load i32, i32* %4, align 4
  %217 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* %215, i32 0, i32 %216
  %218 = load i32, i32* %3, align 4
  %219 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %217, i32 0, i32 %218
  %220 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %219, align 4
  %221 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %222 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %221, i32 0, i32 6
  %223 = load i32, i32* %4, align 4
  %224 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %222, i32 0, i32 %223
  %225 = load i32, i32* %3, align 4
  %226 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %224, i32 0, i32 %225
  %227 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %226, align 4
  %228 = call arm_aapcscc %struct.BF_PartHolder* @BF_LoadHolderFromBitstreamPart(%struct.BF_PartHolder* %220, %struct.BF_BitstreamPart* %227)
  %229 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %230 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %229, i32 0, i32 1
  %231 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %230, i32 0, i32 7
  %232 = load i32, i32* %4, align 4
  %233 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* %231, i32 0, i32 %232
  %234 = load i32, i32* %3, align 4
  %235 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %233, i32 0, i32 %234
  store %struct.BF_PartHolder* %228, %struct.BF_PartHolder** %235, align 4
  %236 = load %struct.BF_FrameData*, %struct.BF_FrameData** %2, align 4
  %237 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %236, i32 0, i32 6
  %238 = load i32, i32* %4, align 4
  %239 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %237, i32 0, i32 %238
  %240 = load i32, i32* %3, align 4
  %241 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %239, i32 0, i32 %240
  %242 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %241, align 4
  %243 = call arm_aapcscc i32 @BF_PartLength(%struct.BF_BitstreamPart* %242)
  %244 = load i32, i32* %7, align 4
  %245 = add nsw i32 %244, %243
  store i32 %245, i32* %7, align 4
  br label %246

; <label>:246:                                    ; preds = %212
  %247 = load i32, i32* %3, align 4
  %248 = add nsw i32 %247, 1
  store i32 %248, i32* %3, align 4
  br label %206

; <label>:249:                                    ; preds = %206
  br label %250

; <label>:250:                                    ; preds = %249
  %251 = load i32, i32* %4, align 4
  %252 = add nsw i32 %251, 1
  store i32 %252, i32* %4, align 4
  br label %199

; <label>:253:                                    ; preds = %199
  %254 = load i32, i32* %7, align 4
  %255 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %256 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %255, i32 0, i32 1
  %257 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %256, i32 0, i32 1
  store i32 %254, i32* %257, align 4
  %258 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_head, align 4
  store %struct.side_info_link* %258, %struct.side_info_link** %6, align 4
  %259 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %260 = icmp eq %struct.side_info_link* %259, null
  br i1 %260, label %261, label %263

; <label>:261:                                    ; preds = %253
  %262 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  store %struct.side_info_link* %262, %struct.side_info_link** @side_queue_head, align 4
  br label %277

; <label>:263:                                    ; preds = %253
  br label %264

; <label>:264:                                    ; preds = %269, %263
  %265 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %266 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %265, i32 0, i32 0
  %267 = load %struct.side_info_link*, %struct.side_info_link** %266, align 4
  %268 = icmp ne %struct.side_info_link* %267, null
  br i1 %268, label %269, label %273

; <label>:269:                                    ; preds = %264
  %270 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %271 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %270, i32 0, i32 0
  %272 = load %struct.side_info_link*, %struct.side_info_link** %271, align 4
  store %struct.side_info_link* %272, %struct.side_info_link** %6, align 4
  br label %264

; <label>:273:                                    ; preds = %264
  %274 = load %struct.side_info_link*, %struct.side_info_link** %5, align 4
  %275 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %276 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %275, i32 0, i32 0
  store %struct.side_info_link* %274, %struct.side_info_link** %276, align 4
  br label %277

; <label>:277:                                    ; preds = %273, %261
  %278 = load i32, i32* %7, align 4
  ret i32 %278
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @main_data(%struct.BF_FrameData*, %struct.BF_FrameResults*) #0 {
  %3 = alloca %struct.BF_FrameData*, align 4
  %4 = alloca %struct.BF_FrameResults*, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, align 4
  store %struct.BF_FrameData* %0, %struct.BF_FrameData** %3, align 4
  store %struct.BF_FrameResults* %1, %struct.BF_FrameResults** %4, align 4
  store i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)* @writePartMainData, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %8, align 4
  store i32 0, i32* %7, align 4
  %9 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %10 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %9, i32 0, i32 1
  store i32 0, i32* %10, align 4
  store i32 0, i32* %5, align 4
  br label %11

; <label>:11:                                     ; preds = %65, %2
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %14 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %13, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %12, %15
  br i1 %16, label %17, label %68

; <label>:17:                                     ; preds = %11
  store i32 0, i32* %6, align 4
  br label %18

; <label>:18:                                     ; preds = %61, %17
  %19 = load i32, i32* %6, align 4
  %20 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %21 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %20, i32 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %19, %22
  br i1 %23, label %24, label %64

; <label>:24:                                     ; preds = %18
  %25 = load i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %8, align 4
  %26 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %27 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %26, i32 0, i32 7
  %28 = load i32, i32* %5, align 4
  %29 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %27, i32 0, i32 %28
  %30 = load i32, i32* %6, align 4
  %31 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %29, i32 0, i32 %30
  %32 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %31, align 4
  %33 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %34 = call arm_aapcscc i32 %25(%struct.BF_BitstreamPart* %32, %struct.BF_FrameResults* %33)
  %35 = load i32, i32* %7, align 4
  %36 = add nsw i32 %35, %34
  store i32 %36, i32* %7, align 4
  %37 = load i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %8, align 4
  %38 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %39 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %38, i32 0, i32 8
  %40 = load i32, i32* %5, align 4
  %41 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %39, i32 0, i32 %40
  %42 = load i32, i32* %6, align 4
  %43 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %41, i32 0, i32 %42
  %44 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %43, align 4
  %45 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %46 = call arm_aapcscc i32 %37(%struct.BF_BitstreamPart* %44, %struct.BF_FrameResults* %45)
  %47 = load i32, i32* %7, align 4
  %48 = add nsw i32 %47, %46
  store i32 %48, i32* %7, align 4
  %49 = load i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %8, align 4
  %50 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %51 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %50, i32 0, i32 9
  %52 = load i32, i32* %5, align 4
  %53 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %51, i32 0, i32 %52
  %54 = load i32, i32* %6, align 4
  %55 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %53, i32 0, i32 %54
  %56 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %55, align 4
  %57 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %58 = call arm_aapcscc i32 %49(%struct.BF_BitstreamPart* %56, %struct.BF_FrameResults* %57)
  %59 = load i32, i32* %7, align 4
  %60 = add nsw i32 %59, %58
  store i32 %60, i32* %7, align 4
  br label %61

; <label>:61:                                     ; preds = %24
  %62 = load i32, i32* %6, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %6, align 4
  br label %18

; <label>:64:                                     ; preds = %18
  br label %65

; <label>:65:                                     ; preds = %64
  %66 = load i32, i32* %5, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %5, align 4
  br label %11

; <label>:68:                                     ; preds = %11
  %69 = load i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %8, align 4
  %70 = load %struct.BF_FrameData*, %struct.BF_FrameData** %3, align 4
  %71 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %70, i32 0, i32 10
  %72 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %71, align 4
  %73 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %74 = call arm_aapcscc i32 %69(%struct.BF_BitstreamPart* %72, %struct.BF_FrameResults* %73)
  %75 = load i32, i32* %7, align 4
  %76 = add nsw i32 %75, %74
  store i32 %76, i32* %7, align 4
  %77 = load i32, i32* %7, align 4
  ret i32 %77
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @side_queue_elements(i32*, i32*) #0 {
  %3 = alloca i32*, align 4
  %4 = alloca i32*, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.side_info_link*, align 4
  store i32* %0, i32** %3, align 4
  store i32* %1, i32** %4, align 4
  store i32 0, i32* %5, align 4
  %7 = load i32*, i32** %3, align 4
  store i32 0, i32* %7, align 4
  %8 = load i32*, i32** %4, align 4
  store i32 0, i32* %8, align 4
  %9 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_head, align 4
  store %struct.side_info_link* %9, %struct.side_info_link** %6, align 4
  br label %10

; <label>:10:                                     ; preds = %30, %2
  %11 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %12 = icmp ne %struct.side_info_link* %11, null
  br i1 %12, label %13, label %34

; <label>:13:                                     ; preds = %10
  %14 = load i32, i32* %5, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %5, align 4
  %16 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %17 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %17, i32 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = load i32*, i32** %3, align 4
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, %19
  store i32 %22, i32* %20, align 4
  %23 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %24 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %24, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = load i32*, i32** %4, align 4
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 %28, %26
  store i32 %29, i32* %27, align 4
  br label %30

; <label>:30:                                     ; preds = %13
  %31 = load %struct.side_info_link*, %struct.side_info_link** %6, align 4
  %32 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %31, i32 0, i32 0
  %33 = load %struct.side_info_link*, %struct.side_info_link** %32, align 4
  store %struct.side_info_link* %33, %struct.side_info_link** %6, align 4
  br label %10

; <label>:34:                                     ; preds = %10
  %35 = load i32, i32* %5, align 4
  ret i32 %35
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @writePartMainData(%struct.BF_BitstreamPart*, %struct.BF_FrameResults*) #0 {
  %3 = alloca %struct.BF_BitstreamPart*, align 4
  %4 = alloca %struct.BF_FrameResults*, align 4
  %5 = alloca %struct.BF_BitstreamElement*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store %struct.BF_BitstreamPart* %0, %struct.BF_BitstreamPart** %3, align 4
  store %struct.BF_FrameResults* %1, %struct.BF_FrameResults** %4, align 4
  store i32 0, i32* %7, align 4
  %8 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %9 = icmp ne %struct.BF_FrameResults* %8, null
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %2
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 157, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.writePartMainData, i32 0, i32 0))
  br label %11

; <label>:11:                                     ; preds = %10, %2
  %12 = phi i1 [ true, %2 ], [ false, %10 ]
  %13 = zext i1 %12 to i32
  %14 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %3, align 4
  %15 = icmp ne %struct.BF_BitstreamPart* %14, null
  br i1 %15, label %17, label %16

; <label>:16:                                     ; preds = %11
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 158, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.writePartMainData, i32 0, i32 0))
  br label %17

; <label>:17:                                     ; preds = %16, %11
  %18 = phi i1 [ true, %11 ], [ false, %16 ]
  %19 = zext i1 %18 to i32
  %20 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %3, align 4
  %21 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %20, i32 0, i32 1
  %22 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %21, align 4
  store %struct.BF_BitstreamElement* %22, %struct.BF_BitstreamElement** %5, align 4
  store i32 0, i32* %6, align 4
  br label %23

; <label>:23:                                     ; preds = %44, %17
  %24 = load i32, i32* %6, align 4
  %25 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %3, align 4
  %26 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %25, i32 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = icmp ult i32 %24, %27
  br i1 %28, label %29, label %49

; <label>:29:                                     ; preds = %23
  %30 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %31 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %30, i32 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %34 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %33, i32 0, i32 1
  %35 = load i16, i16* %34, align 4
  %36 = zext i16 %35 to i32
  %37 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  call arm_aapcscc void @WriteMainDataBits(i32 %32, i32 %36, %struct.BF_FrameResults* %37)
  %38 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %39 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %38, i32 0, i32 1
  %40 = load i16, i16* %39, align 4
  %41 = zext i16 %40 to i32
  %42 = load i32, i32* %7, align 4
  %43 = add nsw i32 %42, %41
  store i32 %43, i32* %7, align 4
  br label %44

; <label>:44:                                     ; preds = %29
  %45 = load i32, i32* %6, align 4
  %46 = add i32 %45, 1
  store i32 %46, i32* %6, align 4
  %47 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %48 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %47, i32 1
  store %struct.BF_BitstreamElement* %48, %struct.BF_BitstreamElement** %5, align 4
  br label %23

; <label>:49:                                     ; preds = %23
  %50 = load i32, i32* %7, align 4
  ret i32 %50
}

; Function Attrs: nounwind
define internal arm_aapcscc void @WriteMainDataBits(i32, i32, %struct.BF_FrameResults*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.BF_FrameResults*, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.BF_FrameResults* %2, %struct.BF_FrameResults** %6, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp ule i32 %8, 32
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %3
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 217, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.WriteMainDataBits, i32 0, i32 0))
  br label %11

; <label>:11:                                     ; preds = %10, %3
  %12 = phi i1 [ true, %3 ], [ false, %10 ]
  %13 = zext i1 %12 to i32
  %14 = load i32, i32* %5, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %17

; <label>:16:                                     ; preds = %11
  br label %79

; <label>:17:                                     ; preds = %11
  %18 = load i32, i32* @BitCount, align 4
  %19 = load i32, i32* @ThisFrameSize, align 4
  %20 = icmp eq i32 %18, %19
  br i1 %20, label %21, label %26

; <label>:21:                                     ; preds = %17
  %22 = call arm_aapcscc i32 @write_side_info()
  store i32 %22, i32* @BitCount, align 4
  %23 = load i32, i32* @ThisFrameSize, align 4
  %24 = load i32, i32* @BitCount, align 4
  %25 = sub nsw i32 %23, %24
  store i32 %25, i32* @BitsRemaining, align 4
  br label %26

; <label>:26:                                     ; preds = %21, %17
  %27 = load i32, i32* %5, align 4
  %28 = load i32, i32* @BitsRemaining, align 4
  %29 = icmp ugt i32 %27, %28
  br i1 %29, label %30, label %47

; <label>:30:                                     ; preds = %26
  %31 = load i32, i32* %4, align 4
  %32 = load i32, i32* %5, align 4
  %33 = load i32, i32* @BitsRemaining, align 4
  %34 = sub i32 %32, %33
  %35 = lshr i32 %31, %34
  store i32 %35, i32* %7, align 4
  %36 = load i32, i32* @BitsRemaining, align 4
  %37 = load i32, i32* %5, align 4
  %38 = sub i32 %37, %36
  store i32 %38, i32* %5, align 4
  %39 = load i32, i32* %7, align 4
  %40 = load i32, i32* @BitsRemaining, align 4
  call arm_aapcscc void @putMyBits(i32 %39, i32 %40)
  %41 = call arm_aapcscc i32 @write_side_info()
  store i32 %41, i32* @BitCount, align 4
  %42 = load i32, i32* @ThisFrameSize, align 4
  %43 = load i32, i32* @BitCount, align 4
  %44 = sub nsw i32 %42, %43
  store i32 %44, i32* @BitsRemaining, align 4
  %45 = load i32, i32* %4, align 4
  %46 = load i32, i32* %5, align 4
  call arm_aapcscc void @putMyBits(i32 %45, i32 %46)
  br label %50

; <label>:47:                                     ; preds = %26
  %48 = load i32, i32* %4, align 4
  %49 = load i32, i32* %5, align 4
  call arm_aapcscc void @putMyBits(i32 %48, i32 %49)
  br label %50

; <label>:50:                                     ; preds = %47, %30
  %51 = load i32, i32* %5, align 4
  %52 = load i32, i32* @BitCount, align 4
  %53 = add i32 %52, %51
  store i32 %53, i32* @BitCount, align 4
  %54 = load i32, i32* %5, align 4
  %55 = load i32, i32* @BitsRemaining, align 4
  %56 = sub i32 %55, %54
  store i32 %56, i32* @BitsRemaining, align 4
  %57 = load i32, i32* @BitCount, align 4
  %58 = load i32, i32* @ThisFrameSize, align 4
  %59 = icmp sle i32 %57, %58
  br i1 %59, label %61, label %60

; <label>:60:                                     ; preds = %50
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 238, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.WriteMainDataBits, i32 0, i32 0))
  br label %61

; <label>:61:                                     ; preds = %60, %50
  %62 = phi i1 [ true, %50 ], [ false, %60 ]
  %63 = zext i1 %62 to i32
  %64 = load i32, i32* @BitsRemaining, align 4
  %65 = icmp sge i32 %64, 0
  br i1 %65, label %67, label %66

; <label>:66:                                     ; preds = %61
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 239, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.WriteMainDataBits, i32 0, i32 0))
  br label %67

; <label>:67:                                     ; preds = %66, %61
  %68 = phi i1 [ true, %61 ], [ false, %66 ]
  %69 = zext i1 %68 to i32
  %70 = load i32, i32* @BitCount, align 4
  %71 = load i32, i32* @BitsRemaining, align 4
  %72 = add nsw i32 %70, %71
  %73 = load i32, i32* @ThisFrameSize, align 4
  %74 = icmp eq i32 %72, %73
  br i1 %74, label %76, label %75

; <label>:75:                                     ; preds = %67
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 240, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.WriteMainDataBits, i32 0, i32 0))
  br label %76

; <label>:76:                                     ; preds = %75, %67
  %77 = phi i1 [ true, %67 ], [ false, %75 ]
  %78 = zext i1 %77 to i32
  br label %79

; <label>:79:                                     ; preds = %76, %16
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @write_side_info() #0 {
  %1 = alloca %struct.MYSideInfo*, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, align 4
  store i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)* @writePartSideInfo, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %5, align 4
  store i32 0, i32* %2, align 4
  %6 = call arm_aapcscc %struct.MYSideInfo* @get_side_info()
  store %struct.MYSideInfo* %6, %struct.MYSideInfo** %1, align 4
  %7 = load %struct.MYSideInfo*, %struct.MYSideInfo** %1, align 4
  %8 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %7, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* @ThisFrameSize, align 4
  %10 = load i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %5, align 4
  %11 = load %struct.MYSideInfo*, %struct.MYSideInfo** %1, align 4
  %12 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %11, i32 0, i32 4
  %13 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %12, align 4
  %14 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %13, i32 0, i32 1
  %15 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %14, align 4
  %16 = call arm_aapcscc i32 %10(%struct.BF_BitstreamPart* %15, %struct.BF_FrameResults* null)
  %17 = load i32, i32* %2, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, i32* %2, align 4
  %19 = load i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %5, align 4
  %20 = load %struct.MYSideInfo*, %struct.MYSideInfo** %1, align 4
  %21 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %20, i32 0, i32 5
  %22 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %21, align 4
  %23 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %22, i32 0, i32 1
  %24 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %23, align 4
  %25 = call arm_aapcscc i32 %19(%struct.BF_BitstreamPart* %24, %struct.BF_FrameResults* null)
  %26 = load i32, i32* %2, align 4
  %27 = add nsw i32 %26, %25
  store i32 %27, i32* %2, align 4
  store i32 0, i32* %3, align 4
  br label %28

; <label>:28:                                     ; preds = %46, %0
  %29 = load i32, i32* %3, align 4
  %30 = load %struct.MYSideInfo*, %struct.MYSideInfo** %1, align 4
  %31 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %30, i32 0, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %29, %32
  br i1 %33, label %34, label %49

; <label>:34:                                     ; preds = %28
  %35 = load i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %5, align 4
  %36 = load %struct.MYSideInfo*, %struct.MYSideInfo** %1, align 4
  %37 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %36, i32 0, i32 6
  %38 = load i32, i32* %3, align 4
  %39 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %37, i32 0, i32 %38
  %40 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %39, align 4
  %41 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %40, i32 0, i32 1
  %42 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %41, align 4
  %43 = call arm_aapcscc i32 %35(%struct.BF_BitstreamPart* %42, %struct.BF_FrameResults* null)
  %44 = load i32, i32* %2, align 4
  %45 = add nsw i32 %44, %43
  store i32 %45, i32* %2, align 4
  br label %46

; <label>:46:                                     ; preds = %34
  %47 = load i32, i32* %3, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %3, align 4
  br label %28

; <label>:49:                                     ; preds = %28
  store i32 0, i32* %4, align 4
  br label %50

; <label>:50:                                     ; preds = %81, %49
  %51 = load i32, i32* %4, align 4
  %52 = load %struct.MYSideInfo*, %struct.MYSideInfo** %1, align 4
  %53 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %52, i32 0, i32 2
  %54 = load i32, i32* %53, align 4
  %55 = icmp slt i32 %51, %54
  br i1 %55, label %56, label %84

; <label>:56:                                     ; preds = %50
  store i32 0, i32* %3, align 4
  br label %57

; <label>:57:                                     ; preds = %77, %56
  %58 = load i32, i32* %3, align 4
  %59 = load %struct.MYSideInfo*, %struct.MYSideInfo** %1, align 4
  %60 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %59, i32 0, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = icmp slt i32 %58, %61
  br i1 %62, label %63, label %80

; <label>:63:                                     ; preds = %57
  %64 = load i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)*, i32 (%struct.BF_BitstreamPart*, %struct.BF_FrameResults*)** %5, align 4
  %65 = load %struct.MYSideInfo*, %struct.MYSideInfo** %1, align 4
  %66 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %65, i32 0, i32 7
  %67 = load i32, i32* %4, align 4
  %68 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* %66, i32 0, i32 %67
  %69 = load i32, i32* %3, align 4
  %70 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %68, i32 0, i32 %69
  %71 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %70, align 4
  %72 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %71, i32 0, i32 1
  %73 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %72, align 4
  %74 = call arm_aapcscc i32 %64(%struct.BF_BitstreamPart* %73, %struct.BF_FrameResults* null)
  %75 = load i32, i32* %2, align 4
  %76 = add nsw i32 %75, %74
  store i32 %76, i32* %2, align 4
  br label %77

; <label>:77:                                     ; preds = %63
  %78 = load i32, i32* %3, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %3, align 4
  br label %57

; <label>:80:                                     ; preds = %57
  br label %81

; <label>:81:                                     ; preds = %80
  %82 = load i32, i32* %4, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %4, align 4
  br label %50

; <label>:84:                                     ; preds = %50
  %85 = load i32, i32* %2, align 4
  ret i32 %85
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @writePartSideInfo(%struct.BF_BitstreamPart*, %struct.BF_FrameResults*) #0 {
  %3 = alloca %struct.BF_BitstreamPart*, align 4
  %4 = alloca %struct.BF_FrameResults*, align 4
  %5 = alloca %struct.BF_BitstreamElement*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store %struct.BF_BitstreamPart* %0, %struct.BF_BitstreamPart** %3, align 4
  store %struct.BF_FrameResults* %1, %struct.BF_FrameResults** %4, align 4
  store i32 0, i32* %7, align 4
  %8 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %3, align 4
  %9 = icmp ne %struct.BF_BitstreamPart* %8, null
  br i1 %9, label %11, label %10

; <label>:10:                                     ; preds = %2
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 176, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.writePartSideInfo, i32 0, i32 0))
  br label %11

; <label>:11:                                     ; preds = %10, %2
  %12 = phi i1 [ true, %2 ], [ false, %10 ]
  %13 = zext i1 %12 to i32
  %14 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %3, align 4
  %15 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %14, i32 0, i32 1
  %16 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %15, align 4
  store %struct.BF_BitstreamElement* %16, %struct.BF_BitstreamElement** %5, align 4
  store i32 0, i32* %6, align 4
  br label %17

; <label>:17:                                     ; preds = %37, %11
  %18 = load i32, i32* %6, align 4
  %19 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %3, align 4
  %20 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %19, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp ult i32 %18, %21
  br i1 %22, label %23, label %42

; <label>:23:                                     ; preds = %17
  %24 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %25 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %28 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %27, i32 0, i32 1
  %29 = load i16, i16* %28, align 4
  %30 = zext i16 %29 to i32
  call arm_aapcscc void @putMyBits(i32 %26, i32 %30)
  %31 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %32 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %31, i32 0, i32 1
  %33 = load i16, i16* %32, align 4
  %34 = zext i16 %33 to i32
  %35 = load i32, i32* %7, align 4
  %36 = add nsw i32 %35, %34
  store i32 %36, i32* %7, align 4
  br label %37

; <label>:37:                                     ; preds = %23
  %38 = load i32, i32* %6, align 4
  %39 = add i32 %38, 1
  store i32 %39, i32* %6, align 4
  %40 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %41 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %40, i32 1
  store %struct.BF_BitstreamElement* %41, %struct.BF_BitstreamElement** %5, align 4
  br label %17

; <label>:42:                                     ; preds = %17
  %43 = load i32, i32* %7, align 4
  ret i32 %43
}

; Function Attrs: nounwind
define internal arm_aapcscc %struct.MYSideInfo* @get_side_info() #0 {
  %1 = alloca %struct.side_info_link*, align 4
  %2 = alloca %struct.side_info_link*, align 4
  %3 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_free, align 4
  store %struct.side_info_link* %3, %struct.side_info_link** %1, align 4
  %4 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_head, align 4
  store %struct.side_info_link* %4, %struct.side_info_link** %2, align 4
  %5 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %6 = icmp ne %struct.side_info_link* %5, null
  br i1 %6, label %8, label %7

; <label>:7:                                      ; preds = %0
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 384, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__.get_side_info, i32 0, i32 0))
  br label %8

; <label>:8:                                      ; preds = %7, %0
  %9 = phi i1 [ true, %0 ], [ false, %7 ]
  %10 = zext i1 %9 to i32
  %11 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %12 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %11, i32 0, i32 0
  %13 = load %struct.side_info_link*, %struct.side_info_link** %12, align 4
  store %struct.side_info_link* %13, %struct.side_info_link** @side_queue_head, align 4
  %14 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  store %struct.side_info_link* %14, %struct.side_info_link** @side_queue_free, align 4
  %15 = load %struct.side_info_link*, %struct.side_info_link** %1, align 4
  %16 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %17 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %16, i32 0, i32 0
  store %struct.side_info_link* %15, %struct.side_info_link** %17, align 4
  %18 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %19 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %18, i32 0, i32 1
  ret %struct.MYSideInfo* %19
}

declare arm_aapcscc i8* @calloc(i32, i32) #3

declare arm_aapcscc i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: noreturn
declare arm_aapcscc void @exit(i32) #4

; Function Attrs: nounwind
define arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.BF_PartHolder*, align 4
  store i32 %0, i32* %2, align 4
  %4 = call arm_aapcscc i8* @calloc(i32 1, i32 8)
  %5 = bitcast i8* %4 to %struct.BF_PartHolder*
  store %struct.BF_PartHolder* %5, %struct.BF_PartHolder** %3, align 4
  %6 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %7 = icmp ne %struct.BF_PartHolder* %6, null
  br i1 %7, label %9, label %8

; <label>:8:                                      ; preds = %1
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 443, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__func__.BF_newPartHolder, i32 0, i32 0))
  br label %9

; <label>:9:                                      ; preds = %8, %1
  %10 = phi i1 [ true, %1 ], [ false, %8 ]
  %11 = zext i1 %10 to i32
  %12 = load i32, i32* %2, align 4
  %13 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %14 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %13, i32 0, i32 0
  store i32 %12, i32* %14, align 4
  %15 = call arm_aapcscc i8* @calloc(i32 1, i32 8)
  %16 = bitcast i8* %15 to %struct.BF_BitstreamPart*
  %17 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %18 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %17, i32 0, i32 1
  store %struct.BF_BitstreamPart* %16, %struct.BF_BitstreamPart** %18, align 4
  %19 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %20 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %19, i32 0, i32 1
  %21 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %20, align 4
  %22 = icmp ne %struct.BF_BitstreamPart* %21, null
  br i1 %22, label %24, label %23

; <label>:23:                                     ; preds = %9
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 446, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__func__.BF_newPartHolder, i32 0, i32 0))
  br label %24

; <label>:24:                                     ; preds = %23, %9
  %25 = phi i1 [ true, %9 ], [ false, %23 ]
  %26 = zext i1 %25 to i32
  %27 = load i32, i32* %2, align 4
  %28 = call arm_aapcscc i8* @calloc(i32 %27, i32 8)
  %29 = bitcast i8* %28 to %struct.BF_BitstreamElement*
  %30 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %31 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %30, i32 0, i32 1
  %32 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %31, align 4
  %33 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %32, i32 0, i32 1
  store %struct.BF_BitstreamElement* %29, %struct.BF_BitstreamElement** %33, align 4
  %34 = load i32, i32* %2, align 4
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %47

; <label>:36:                                     ; preds = %24
  %37 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %38 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %37, i32 0, i32 1
  %39 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %38, align 4
  %40 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %39, i32 0, i32 1
  %41 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %40, align 4
  %42 = icmp ne %struct.BF_BitstreamElement* %41, null
  br i1 %42, label %44, label %43

; <label>:43:                                     ; preds = %36
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i32 0, i32 0), i32 448, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__func__.BF_newPartHolder, i32 0, i32 0))
  br label %44

; <label>:44:                                     ; preds = %43, %36
  %45 = phi i1 [ true, %36 ], [ false, %43 ]
  %46 = zext i1 %45 to i32
  br label %47

; <label>:47:                                     ; preds = %44, %24
  %48 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %49 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %48, i32 0, i32 1
  %50 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %49, align 4
  %51 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %50, i32 0, i32 0
  store i32 0, i32* %51, align 4
  %52 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  ret %struct.BF_PartHolder* %52
}

; Function Attrs: nounwind
define arm_aapcscc %struct.BF_PartHolder* @BF_LoadHolderFromBitstreamPart(%struct.BF_PartHolder*, %struct.BF_BitstreamPart*) #0 {
  %3 = alloca %struct.BF_PartHolder*, align 4
  %4 = alloca %struct.BF_BitstreamPart*, align 4
  %5 = alloca %struct.BF_BitstreamElement*, align 4
  %6 = alloca i32, align 4
  store %struct.BF_PartHolder* %0, %struct.BF_PartHolder** %3, align 4
  store %struct.BF_BitstreamPart* %1, %struct.BF_BitstreamPart** %4, align 4
  %7 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %8 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %7, i32 0, i32 1
  %9 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %8, align 4
  %10 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %9, i32 0, i32 0
  store i32 0, i32* %10, align 4
  store i32 0, i32* %6, align 4
  br label %11

; <label>:11:                                     ; preds = %26, %2
  %12 = load i32, i32* %6, align 4
  %13 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %4, align 4
  %14 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %13, i32 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp ult i32 %12, %15
  br i1 %16, label %17, label %29

; <label>:17:                                     ; preds = %11
  %18 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %4, align 4
  %19 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %18, i32 0, i32 1
  %20 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %19, align 4
  %21 = load i32, i32* %6, align 4
  %22 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %20, i32 %21
  store %struct.BF_BitstreamElement* %22, %struct.BF_BitstreamElement** %5, align 4
  %23 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %24 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %5, align 4
  %25 = call arm_aapcscc %struct.BF_PartHolder* @BF_addElement(%struct.BF_PartHolder* %23, %struct.BF_BitstreamElement* %24)
  store %struct.BF_PartHolder* %25, %struct.BF_PartHolder** %3, align 4
  br label %26

; <label>:26:                                     ; preds = %17
  %27 = load i32, i32* %6, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* %6, align 4
  br label %11

; <label>:29:                                     ; preds = %11
  %30 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  ret %struct.BF_PartHolder* %30
}

; Function Attrs: nounwind
define arm_aapcscc i32 @BF_PartLength(%struct.BF_BitstreamPart*) #0 {
  %2 = alloca %struct.BF_BitstreamPart*, align 4
  %3 = alloca %struct.BF_BitstreamElement*, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store %struct.BF_BitstreamPart* %0, %struct.BF_BitstreamPart** %2, align 4
  %6 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2, align 4
  %7 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %6, i32 0, i32 1
  %8 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %7, align 4
  store %struct.BF_BitstreamElement* %8, %struct.BF_BitstreamElement** %3, align 4
  store i32 0, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %9

; <label>:9:                                      ; preds = %22, %1
  %10 = load i32, i32* %4, align 4
  %11 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2, align 4
  %12 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %11, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %10, %13
  br i1 %14, label %15, label %27

; <label>:15:                                     ; preds = %9
  %16 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %3, align 4
  %17 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %16, i32 0, i32 1
  %18 = load i16, i16* %17, align 4
  %19 = zext i16 %18 to i32
  %20 = load i32, i32* %5, align 4
  %21 = add nsw i32 %20, %19
  store i32 %21, i32* %5, align 4
  br label %22

; <label>:22:                                     ; preds = %15
  %23 = load i32, i32* %4, align 4
  %24 = add i32 %23, 1
  store i32 %24, i32* %4, align 4
  %25 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %3, align 4
  %26 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %25, i32 1
  store %struct.BF_BitstreamElement* %26, %struct.BF_BitstreamElement** %3, align 4
  br label %9

; <label>:27:                                     ; preds = %9
  %28 = load i32, i32* %5, align 4
  ret i32 %28
}

; Function Attrs: nounwind
define arm_aapcscc %struct.BF_PartHolder* @BF_addElement(%struct.BF_PartHolder*, %struct.BF_BitstreamElement*) #0 {
  %3 = alloca %struct.BF_PartHolder*, align 4
  %4 = alloca %struct.BF_BitstreamElement*, align 4
  %5 = alloca %struct.BF_PartHolder*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store %struct.BF_PartHolder* %0, %struct.BF_PartHolder** %3, align 4
  store %struct.BF_BitstreamElement* %1, %struct.BF_BitstreamElement** %4, align 4
  %8 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  store %struct.BF_PartHolder* %8, %struct.BF_PartHolder** %5, align 4
  %9 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %10 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %9, i32 0, i32 1
  %11 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %10, align 4
  %12 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %11, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, 1
  store i32 %14, i32* %6, align 4
  store i32 8, i32* %7, align 4
  %15 = load i32, i32* %6, align 4
  %16 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %17 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %16, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %15, %18
  br i1 %19, label %20, label %26

; <label>:20:                                     ; preds = %2
  %21 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %22 = load i32, i32* %6, align 4
  %23 = load i32, i32* %7, align 4
  %24 = add nsw i32 %22, %23
  %25 = call arm_aapcscc %struct.BF_PartHolder* @BF_resizePartHolder(%struct.BF_PartHolder* %21, i32 %24)
  store %struct.BF_PartHolder* %25, %struct.BF_PartHolder** %5, align 4
  br label %26

; <label>:26:                                     ; preds = %20, %2
  %27 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %5, align 4
  %28 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %27, i32 0, i32 1
  %29 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %28, align 4
  %30 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %29, i32 0, i32 1
  %31 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %30, align 4
  %32 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %5, align 4
  %33 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %32, i32 0, i32 1
  %34 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %33, align 4
  %35 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %34, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = add i32 %36, 1
  store i32 %37, i32* %35, align 4
  %38 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %31, i32 %36
  %39 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %4, align 4
  %40 = bitcast %struct.BF_BitstreamElement* %38 to i8*
  %41 = bitcast %struct.BF_BitstreamElement* %39 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %40, i8* %41, i32 8, i32 4, i1 false)
  %42 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %5, align 4
  ret %struct.BF_PartHolder* %42
}

; Function Attrs: nounwind
define arm_aapcscc %struct.BF_PartHolder* @BF_resizePartHolder(%struct.BF_PartHolder*, i32) #0 {
  %3 = alloca %struct.BF_PartHolder*, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.BF_PartHolder*, align 4
  store %struct.BF_PartHolder* %0, %struct.BF_PartHolder** %3, align 4
  store i32 %1, i32* %4, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 %8)
  store %struct.BF_PartHolder* %9, %struct.BF_PartHolder** %7, align 4
  %10 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %11 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %10, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = load i32, i32* %4, align 4
  %14 = icmp sgt i32 %12, %13
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %2
  %16 = load i32, i32* %4, align 4
  br label %21

; <label>:17:                                     ; preds = %2
  %18 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %19 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %18, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  br label %21

; <label>:21:                                     ; preds = %17, %15
  %22 = phi i32 [ %16, %15 ], [ %20, %17 ]
  store i32 %22, i32* %5, align 4
  %23 = load i32, i32* %5, align 4
  %24 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %7, align 4
  %25 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %24, i32 0, i32 1
  %26 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %25, align 4
  %27 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %26, i32 0, i32 0
  store i32 %23, i32* %27, align 4
  store i32 0, i32* %6, align 4
  br label %28

; <label>:28:                                     ; preds = %49, %21
  %29 = load i32, i32* %6, align 4
  %30 = load i32, i32* %5, align 4
  %31 = icmp slt i32 %29, %30
  br i1 %31, label %32, label %52

; <label>:32:                                     ; preds = %28
  %33 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %7, align 4
  %34 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %33, i32 0, i32 1
  %35 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %34, align 4
  %36 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %35, i32 0, i32 1
  %37 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %36, align 4
  %38 = load i32, i32* %6, align 4
  %39 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %37, i32 %38
  %40 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %41 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %40, i32 0, i32 1
  %42 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %41, align 4
  %43 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %42, i32 0, i32 1
  %44 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %43, align 4
  %45 = load i32, i32* %6, align 4
  %46 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %44, i32 %45
  %47 = bitcast %struct.BF_BitstreamElement* %39 to i8*
  %48 = bitcast %struct.BF_BitstreamElement* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %47, i8* %48, i32 8, i32 4, i1 false)
  br label %49

; <label>:49:                                     ; preds = %32
  %50 = load i32, i32* %6, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %6, align 4
  br label %28

; <label>:52:                                     ; preds = %28
  %53 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %54 = call arm_aapcscc %struct.BF_PartHolder* @BF_freePartHolder(%struct.BF_PartHolder* %53)
  %55 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %7, align 4
  ret %struct.BF_PartHolder* %55
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #5

; Function Attrs: nounwind
define arm_aapcscc %struct.BF_PartHolder* @BF_freePartHolder(%struct.BF_PartHolder*) #0 {
  %2 = alloca %struct.BF_PartHolder*, align 4
  store %struct.BF_PartHolder* %0, %struct.BF_PartHolder** %2, align 4
  %3 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2, align 4
  %4 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %3, i32 0, i32 1
  %5 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %4, align 4
  %6 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %5, i32 0, i32 1
  %7 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %6, align 4
  %8 = bitcast %struct.BF_BitstreamElement* %7 to i8*
  call arm_aapcscc void @free(i8* %8)
  %9 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2, align 4
  %10 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %9, i32 0, i32 1
  %11 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %10, align 4
  %12 = bitcast %struct.BF_BitstreamPart* %11 to i8*
  call arm_aapcscc void @free(i8* %12)
  %13 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2, align 4
  %14 = bitcast %struct.BF_PartHolder* %13 to i8*
  call arm_aapcscc void @free(i8* %14)
  ret %struct.BF_PartHolder* null
}

declare arm_aapcscc void @free(i8*) #3

; Function Attrs: nounwind
define arm_aapcscc void @BF_FlushBitstream(%struct.BF_FrameData*, %struct.BF_FrameResults*) #0 {
  %3 = alloca %struct.BF_FrameData*, align 4
  %4 = alloca %struct.BF_FrameResults*, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct.BF_FrameData* %0, %struct.BF_FrameData** %3, align 4
  store %struct.BF_FrameResults* %1, %struct.BF_FrameResults** %4, align 4
  %7 = load i32, i32* @elements, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %25

; <label>:9:                                      ; preds = %2
  %10 = load i32, i32* @forwardFrameLength, align 4
  %11 = load i32, i32* @forwardSILength, align 4
  %12 = sub nsw i32 %10, %11
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  %14 = sdiv i32 %13, 32
  store i32 %14, i32* %6, align 4
  br label %15

; <label>:15:                                     ; preds = %19, %9
  %16 = load i32, i32* %6, align 4
  %17 = add nsw i32 %16, -1
  store i32 %17, i32* %6, align 4
  %18 = icmp ne i32 %16, 0
  br i1 %18, label %19, label %21

; <label>:19:                                     ; preds = %15
  %20 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  call arm_aapcscc void @WriteMainDataBits(i32 0, i32 32, %struct.BF_FrameResults* %20)
  br label %15

; <label>:21:                                     ; preds = %15
  %22 = load i32, i32* %5, align 4
  %23 = srem i32 %22, 32
  %24 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  call arm_aapcscc void @WriteMainDataBits(i32 0, i32 %23, %struct.BF_FrameResults* %24)
  br label %25

; <label>:25:                                     ; preds = %21, %2
  %26 = load i32, i32* @forwardFrameLength, align 4
  %27 = load i32, i32* @forwardSILength, align 4
  %28 = sub nsw i32 %26, %27
  %29 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %30 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %29, i32 0, i32 1
  store i32 %28, i32* %30, align 4
  %31 = load i32, i32* @forwardSILength, align 4
  %32 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %33 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %32, i32 0, i32 0
  store i32 %31, i32* %33, align 4
  %34 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** %4, align 4
  %35 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %34, i32 0, i32 2
  store i32 0, i32* %35, align 4
  call arm_aapcscc void @free_side_queues()
  store i32 0, i32* @BitCount, align 4
  store i32 0, i32* @ThisFrameSize, align 4
  store i32 0, i32* @BitsRemaining, align 4
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @free_side_queues() #0 {
  %1 = alloca %struct.side_info_link*, align 4
  %2 = alloca %struct.side_info_link*, align 4
  %3 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_head, align 4
  store %struct.side_info_link* %3, %struct.side_info_link** %1, align 4
  br label %4

; <label>:4:                                      ; preds = %12, %0
  %5 = load %struct.side_info_link*, %struct.side_info_link** %1, align 4
  %6 = icmp ne %struct.side_info_link* %5, null
  br i1 %6, label %7, label %14

; <label>:7:                                      ; preds = %4
  %8 = load %struct.side_info_link*, %struct.side_info_link** %1, align 4
  %9 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %8, i32 0, i32 0
  %10 = load %struct.side_info_link*, %struct.side_info_link** %9, align 4
  store %struct.side_info_link* %10, %struct.side_info_link** %2, align 4
  %11 = load %struct.side_info_link*, %struct.side_info_link** %1, align 4
  call arm_aapcscc void @free_side_info_link(%struct.side_info_link* %11)
  br label %12

; <label>:12:                                     ; preds = %7
  %13 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  store %struct.side_info_link* %13, %struct.side_info_link** %1, align 4
  br label %4

; <label>:14:                                     ; preds = %4
  store %struct.side_info_link* null, %struct.side_info_link** @side_queue_head, align 4
  %15 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_free, align 4
  store %struct.side_info_link* %15, %struct.side_info_link** %1, align 4
  br label %16

; <label>:16:                                     ; preds = %24, %14
  %17 = load %struct.side_info_link*, %struct.side_info_link** %1, align 4
  %18 = icmp ne %struct.side_info_link* %17, null
  br i1 %18, label %19, label %26

; <label>:19:                                     ; preds = %16
  %20 = load %struct.side_info_link*, %struct.side_info_link** %1, align 4
  %21 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %20, i32 0, i32 0
  %22 = load %struct.side_info_link*, %struct.side_info_link** %21, align 4
  store %struct.side_info_link* %22, %struct.side_info_link** %2, align 4
  %23 = load %struct.side_info_link*, %struct.side_info_link** %1, align 4
  call arm_aapcscc void @free_side_info_link(%struct.side_info_link* %23)
  br label %24

; <label>:24:                                     ; preds = %19
  %25 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  store %struct.side_info_link* %25, %struct.side_info_link** %1, align 4
  br label %16

; <label>:26:                                     ; preds = %16
  store %struct.side_info_link* null, %struct.side_info_link** @side_queue_free, align 4
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @free_side_info_link(%struct.side_info_link*) #0 {
  %2 = alloca %struct.side_info_link*, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store %struct.side_info_link* %0, %struct.side_info_link** %2, align 4
  %5 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %6 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %5, i32 0, i32 1
  %7 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %6, i32 0, i32 4
  %8 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %7, align 4
  %9 = call arm_aapcscc %struct.BF_PartHolder* @BF_freePartHolder(%struct.BF_PartHolder* %8)
  %10 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %11 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %11, i32 0, i32 4
  store %struct.BF_PartHolder* %9, %struct.BF_PartHolder** %12, align 4
  %13 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %14 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %13, i32 0, i32 1
  %15 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %14, i32 0, i32 5
  %16 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %15, align 4
  %17 = call arm_aapcscc %struct.BF_PartHolder* @BF_freePartHolder(%struct.BF_PartHolder* %16)
  %18 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %19 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %19, i32 0, i32 5
  store %struct.BF_PartHolder* %17, %struct.BF_PartHolder** %20, align 4
  store i32 0, i32* %4, align 4
  br label %21

; <label>:21:                                     ; preds = %41, %1
  %22 = load i32, i32* %4, align 4
  %23 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %24 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %24, i32 0, i32 3
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %22, %26
  br i1 %27, label %28, label %44

; <label>:28:                                     ; preds = %21
  %29 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %30 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %29, i32 0, i32 1
  %31 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %30, i32 0, i32 6
  %32 = load i32, i32* %4, align 4
  %33 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %31, i32 0, i32 %32
  %34 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %33, align 4
  %35 = call arm_aapcscc %struct.BF_PartHolder* @BF_freePartHolder(%struct.BF_PartHolder* %34)
  %36 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %37 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %36, i32 0, i32 1
  %38 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %37, i32 0, i32 6
  %39 = load i32, i32* %4, align 4
  %40 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %38, i32 0, i32 %39
  store %struct.BF_PartHolder* %35, %struct.BF_PartHolder** %40, align 4
  br label %41

; <label>:41:                                     ; preds = %28
  %42 = load i32, i32* %4, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %4, align 4
  br label %21

; <label>:44:                                     ; preds = %21
  store i32 0, i32* %3, align 4
  br label %45

; <label>:45:                                     ; preds = %81, %44
  %46 = load i32, i32* %3, align 4
  %47 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %48 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %47, i32 0, i32 1
  %49 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %48, i32 0, i32 2
  %50 = load i32, i32* %49, align 4
  %51 = icmp slt i32 %46, %50
  br i1 %51, label %52, label %84

; <label>:52:                                     ; preds = %45
  store i32 0, i32* %4, align 4
  br label %53

; <label>:53:                                     ; preds = %77, %52
  %54 = load i32, i32* %4, align 4
  %55 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %56 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %55, i32 0, i32 1
  %57 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %56, i32 0, i32 3
  %58 = load i32, i32* %57, align 4
  %59 = icmp slt i32 %54, %58
  br i1 %59, label %60, label %80

; <label>:60:                                     ; preds = %53
  %61 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %62 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %61, i32 0, i32 1
  %63 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %62, i32 0, i32 7
  %64 = load i32, i32* %3, align 4
  %65 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* %63, i32 0, i32 %64
  %66 = load i32, i32* %4, align 4
  %67 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %65, i32 0, i32 %66
  %68 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %67, align 4
  %69 = call arm_aapcscc %struct.BF_PartHolder* @BF_freePartHolder(%struct.BF_PartHolder* %68)
  %70 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %71 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %70, i32 0, i32 1
  %72 = getelementptr inbounds %struct.MYSideInfo, %struct.MYSideInfo* %71, i32 0, i32 7
  %73 = load i32, i32* %3, align 4
  %74 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* %72, i32 0, i32 %73
  %75 = load i32, i32* %4, align 4
  %76 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %74, i32 0, i32 %75
  store %struct.BF_PartHolder* %69, %struct.BF_PartHolder** %76, align 4
  br label %77

; <label>:77:                                     ; preds = %60
  %78 = load i32, i32* %4, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %4, align 4
  br label %53

; <label>:80:                                     ; preds = %53
  br label %81

; <label>:81:                                     ; preds = %80
  %82 = load i32, i32* %3, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %3, align 4
  br label %45

; <label>:84:                                     ; preds = %45
  %85 = load %struct.side_info_link*, %struct.side_info_link** %2, align 4
  %86 = bitcast %struct.side_info_link* %85 to i8*
  call arm_aapcscc void @free(i8* %86)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc %struct.BF_PartHolder* @BF_NewHolderFromBitstreamPart(%struct.BF_BitstreamPart*) #0 {
  %2 = alloca %struct.BF_BitstreamPart*, align 4
  %3 = alloca %struct.BF_PartHolder*, align 4
  store %struct.BF_BitstreamPart* %0, %struct.BF_BitstreamPart** %2, align 4
  %4 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2, align 4
  %5 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %4, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 %6)
  store %struct.BF_PartHolder* %7, %struct.BF_PartHolder** %3, align 4
  %8 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %3, align 4
  %9 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2, align 4
  %10 = call arm_aapcscc %struct.BF_PartHolder* @BF_LoadHolderFromBitstreamPart(%struct.BF_PartHolder* %8, %struct.BF_BitstreamPart* %9)
  ret %struct.BF_PartHolder* %10
}

; Function Attrs: nounwind
define arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder*, i32, i32) #0 {
  %4 = alloca %struct.BF_PartHolder*, align 4
  %5 = alloca %struct.BF_PartHolder*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.BF_BitstreamElement, align 4
  store %struct.BF_PartHolder* %0, %struct.BF_PartHolder** %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  %9 = load i32, i32* %6, align 4
  %10 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %8, i32 0, i32 0
  store i32 %9, i32* %10, align 4
  %11 = load i32, i32* %7, align 4
  %12 = trunc i32 %11 to i16
  %13 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %8, i32 0, i32 1
  store i16 %12, i16* %13, align 4
  %14 = load i32, i32* %7, align 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %19

; <label>:16:                                     ; preds = %3
  %17 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %5, align 4
  %18 = call arm_aapcscc %struct.BF_PartHolder* @BF_addElement(%struct.BF_PartHolder* %17, %struct.BF_BitstreamElement* %8)
  store %struct.BF_PartHolder* %18, %struct.BF_PartHolder** %4, align 4
  br label %21

; <label>:19:                                     ; preds = %3
  %20 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %5, align 4
  store %struct.BF_PartHolder* %20, %struct.BF_PartHolder** %4, align 4
  br label %21

; <label>:21:                                     ; preds = %19, %16
  %22 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %4, align 4
  ret %struct.BF_PartHolder* %22
}

; Function Attrs: nounwind
define arm_aapcscc void @id3_inittag(%struct.ID3TAGDATA*) #0 {
  %2 = alloca %struct.ID3TAGDATA*, align 4
  store %struct.ID3TAGDATA* %0, %struct.ID3TAGDATA** %2, align 4
  %3 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %4 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %3, i32 0, i32 2
  %5 = getelementptr inbounds [31 x i8], [31 x i8]* %4, i32 0, i32 0
  %6 = call arm_aapcscc i8* @strcpy(i8* %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.151, i32 0, i32 0))
  %7 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %8 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %7, i32 0, i32 3
  %9 = getelementptr inbounds [31 x i8], [31 x i8]* %8, i32 0, i32 0
  %10 = call arm_aapcscc i8* @strcpy(i8* %9, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.151, i32 0, i32 0))
  %11 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %12 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %11, i32 0, i32 4
  %13 = getelementptr inbounds [31 x i8], [31 x i8]* %12, i32 0, i32 0
  %14 = call arm_aapcscc i8* @strcpy(i8* %13, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.151, i32 0, i32 0))
  %15 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %16 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %15, i32 0, i32 5
  %17 = getelementptr inbounds [5 x i8], [5 x i8]* %16, i32 0, i32 0
  %18 = call arm_aapcscc i8* @strcpy(i8* %17, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.151, i32 0, i32 0))
  %19 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %20 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %19, i32 0, i32 6
  %21 = getelementptr inbounds [31 x i8], [31 x i8]* %20, i32 0, i32 0
  %22 = call arm_aapcscc i8* @strcpy(i8* %21, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.151, i32 0, i32 0))
  %23 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %24 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %23, i32 0, i32 8
  %25 = getelementptr inbounds [1 x i8], [1 x i8]* %24, i32 0, i32 0
  store i8 -1, i8* %25, align 1
  %26 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %27 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %26, i32 0, i32 9
  store i8 0, i8* %27, align 2
  %28 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %29 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %28, i32 0, i32 1
  store i32 0, i32* %29, align 4
  ret void
}

declare arm_aapcscc i8* @strcpy(i8*, i8*) #3

; Function Attrs: nounwind
define arm_aapcscc void @id3_buildtag(%struct.ID3TAGDATA*) #0 {
  %2 = alloca %struct.ID3TAGDATA*, align 4
  store %struct.ID3TAGDATA* %0, %struct.ID3TAGDATA** %2, align 4
  %3 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %4 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %3, i32 0, i32 7
  %5 = getelementptr inbounds [128 x i8], [128 x i8]* %4, i32 0, i32 0
  %6 = call arm_aapcscc i8* @strcpy(i8* %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1.152, i32 0, i32 0))
  %7 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %8 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %7, i32 0, i32 2
  %9 = getelementptr inbounds [31 x i8], [31 x i8]* %8, i32 0, i32 0
  call arm_aapcscc void @id3_pad(i8* %9, i32 30)
  %10 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %11 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %10, i32 0, i32 7
  %12 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i32 0, i32 0
  %13 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %14 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %13, i32 0, i32 2
  %15 = getelementptr inbounds [31 x i8], [31 x i8]* %14, i32 0, i32 0
  %16 = call arm_aapcscc i8* @strncat(i8* %12, i8* %15, i32 30)
  %17 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %18 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %17, i32 0, i32 3
  %19 = getelementptr inbounds [31 x i8], [31 x i8]* %18, i32 0, i32 0
  call arm_aapcscc void @id3_pad(i8* %19, i32 30)
  %20 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %21 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %20, i32 0, i32 7
  %22 = getelementptr inbounds [128 x i8], [128 x i8]* %21, i32 0, i32 0
  %23 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %24 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %23, i32 0, i32 3
  %25 = getelementptr inbounds [31 x i8], [31 x i8]* %24, i32 0, i32 0
  %26 = call arm_aapcscc i8* @strncat(i8* %22, i8* %25, i32 30)
  %27 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %28 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %27, i32 0, i32 4
  %29 = getelementptr inbounds [31 x i8], [31 x i8]* %28, i32 0, i32 0
  call arm_aapcscc void @id3_pad(i8* %29, i32 30)
  %30 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %31 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %30, i32 0, i32 7
  %32 = getelementptr inbounds [128 x i8], [128 x i8]* %31, i32 0, i32 0
  %33 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %34 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %33, i32 0, i32 4
  %35 = getelementptr inbounds [31 x i8], [31 x i8]* %34, i32 0, i32 0
  %36 = call arm_aapcscc i8* @strncat(i8* %32, i8* %35, i32 30)
  %37 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %38 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %37, i32 0, i32 5
  %39 = getelementptr inbounds [5 x i8], [5 x i8]* %38, i32 0, i32 0
  call arm_aapcscc void @id3_pad(i8* %39, i32 4)
  %40 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %41 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %40, i32 0, i32 7
  %42 = getelementptr inbounds [128 x i8], [128 x i8]* %41, i32 0, i32 0
  %43 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %44 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %43, i32 0, i32 5
  %45 = getelementptr inbounds [5 x i8], [5 x i8]* %44, i32 0, i32 0
  %46 = call arm_aapcscc i8* @strncat(i8* %42, i8* %45, i32 4)
  %47 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %48 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %47, i32 0, i32 6
  %49 = getelementptr inbounds [31 x i8], [31 x i8]* %48, i32 0, i32 0
  call arm_aapcscc void @id3_pad(i8* %49, i32 30)
  %50 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %51 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %50, i32 0, i32 7
  %52 = getelementptr inbounds [128 x i8], [128 x i8]* %51, i32 0, i32 0
  %53 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %54 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %53, i32 0, i32 6
  %55 = getelementptr inbounds [31 x i8], [31 x i8]* %54, i32 0, i32 0
  %56 = call arm_aapcscc i8* @strncat(i8* %52, i8* %55, i32 30)
  %57 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %58 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %57, i32 0, i32 8
  %59 = getelementptr inbounds [1 x i8], [1 x i8]* %58, i32 0, i32 0
  call arm_aapcscc void @id3_pad(i8* %59, i32 1)
  %60 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %61 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %60, i32 0, i32 7
  %62 = getelementptr inbounds [128 x i8], [128 x i8]* %61, i32 0, i32 0
  %63 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %64 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %63, i32 0, i32 8
  %65 = getelementptr inbounds [1 x i8], [1 x i8]* %64, i32 0, i32 0
  %66 = call arm_aapcscc i8* @strncat(i8* %62, i8* %65, i32 1)
  %67 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %68 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %67, i32 0, i32 9
  %69 = load i8, i8* %68, align 2
  %70 = zext i8 %69 to i32
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %72, label %82

; <label>:72:                                     ; preds = %1
  %73 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %74 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %73, i32 0, i32 7
  %75 = getelementptr inbounds [128 x i8], [128 x i8]* %74, i32 0, i32 125
  store i8 0, i8* %75, align 1
  %76 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %77 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %76, i32 0, i32 9
  %78 = load i8, i8* %77, align 2
  %79 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %80 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %79, i32 0, i32 7
  %81 = getelementptr inbounds [128 x i8], [128 x i8]* %80, i32 0, i32 126
  store i8 %78, i8* %81, align 1
  br label %82

; <label>:82:                                     ; preds = %72, %1
  %83 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %2, align 4
  %84 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %83, i32 0, i32 1
  store i32 1, i32* %84, align 4
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @id3_pad(i8*, i32) #0 {
  %3 = alloca i8*, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i8* %0, i8** %3, align 4
  store i32 %1, i32* %4, align 4
  %6 = load i8*, i8** %3, align 4
  %7 = call arm_aapcscc i32 @strlen(i8* %6)
  store i32 %7, i32* %5, align 4
  br label %8

; <label>:8:                                      ; preds = %12, %2
  %9 = load i32, i32* %5, align 4
  %10 = load i32, i32* %4, align 4
  %11 = icmp slt i32 %9, %10
  br i1 %11, label %12, label %18

; <label>:12:                                     ; preds = %8
  %13 = load i8*, i8** %3, align 4
  %14 = load i32, i32* %5, align 4
  %15 = getelementptr inbounds i8, i8* %13, i32 %14
  store i8 32, i8* %15, align 1
  %16 = load i32, i32* %5, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %5, align 4
  br label %8

; <label>:18:                                     ; preds = %8
  %19 = load i8*, i8** %3, align 4
  %20 = load i32, i32* %5, align 4
  %21 = getelementptr inbounds i8, i8* %19, i32 %20
  store i8 0, i8* %21, align 1
  ret void
}

declare arm_aapcscc i8* @strncat(i8*, i8*, i32) #3

declare arm_aapcscc i32 @strlen(i8*) #3

; Function Attrs: nounwind
define arm_aapcscc i32 @id3_writetag(i8*, %struct.ID3TAGDATA*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 4
  %5 = alloca %struct.ID3TAGDATA*, align 4
  %6 = alloca %struct._IO_FILE*, align 4
  store i8* %0, i8** %4, align 4
  store %struct.ID3TAGDATA* %1, %struct.ID3TAGDATA** %5, align 4
  %7 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %5, align 4
  %8 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %7, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %12, label %11

; <label>:11:                                     ; preds = %2
  store i32 -1, i32* %3, align 4
  br label %28

; <label>:12:                                     ; preds = %2
  %13 = load i8*, i8** %4, align 4
  %14 = call arm_aapcscc %struct._IO_FILE* @fopen(i8* %13, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.153, i32 0, i32 0))
  store %struct._IO_FILE* %14, %struct._IO_FILE** %6, align 4
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 4
  %16 = icmp ne %struct._IO_FILE* %15, null
  br i1 %16, label %18, label %17

; <label>:17:                                     ; preds = %12
  store i32 -1, i32* %3, align 4
  br label %28

; <label>:18:                                     ; preds = %12
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 4
  %20 = call arm_aapcscc i32 @fseek(%struct._IO_FILE* %19, i32 0, i32 2)
  %21 = load %struct.ID3TAGDATA*, %struct.ID3TAGDATA** %5, align 4
  %22 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %21, i32 0, i32 7
  %23 = getelementptr inbounds [128 x i8], [128 x i8]* %22, i32 0, i32 0
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 4
  %25 = call arm_aapcscc i32 @fwrite(i8* %23, i32 1, i32 128, %struct._IO_FILE* %24)
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 4
  %27 = call arm_aapcscc i32 @fclose(%struct._IO_FILE* %26)
  store i32 0, i32* %3, align 4
  br label %28

; <label>:28:                                     ; preds = %18, %17, %11
  %29 = load i32, i32* %3, align 4
  ret i32 %29
}

declare arm_aapcscc %struct._IO_FILE* @fopen(i8*, i8*) #3

declare arm_aapcscc i32 @fseek(%struct._IO_FILE*, i32, i32) #3

declare arm_aapcscc i32 @fwrite(i8*, i32, i32, %struct._IO_FILE*) #3

declare arm_aapcscc i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
define arm_aapcscc double @ConvertFromIeeeSingle(i8*) #0 {
  %2 = alloca double, align 8
  %3 = alloca i8*, align 4
  %4 = alloca double, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i8* %0, i8** %3, align 4
  %8 = load i8*, i8** %3, align 4
  %9 = getelementptr inbounds i8, i8* %8, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = and i32 %11, 255
  %13 = shl i32 %12, 24
  %14 = load i8*, i8** %3, align 4
  %15 = getelementptr inbounds i8, i8* %14, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = and i32 %17, 255
  %19 = shl i32 %18, 16
  %20 = or i32 %13, %19
  %21 = load i8*, i8** %3, align 4
  %22 = getelementptr inbounds i8, i8* %21, i32 2
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = and i32 %24, 255
  %26 = shl i32 %25, 8
  %27 = or i32 %20, %26
  %28 = load i8*, i8** %3, align 4
  %29 = getelementptr inbounds i8, i8* %28, i32 3
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = and i32 %31, 255
  %33 = or i32 %27, %32
  store i32 %33, i32* %7, align 4
  %34 = load i32, i32* %7, align 4
  %35 = and i32 %34, 2147483647
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %38

; <label>:37:                                     ; preds = %1
  store double 0.000000e+00, double* %4, align 8
  br label %70

; <label>:38:                                     ; preds = %1
  %39 = load i32, i32* %7, align 4
  %40 = and i32 %39, 2139095040
  %41 = ashr i32 %40, 23
  store i32 %41, i32* %6, align 4
  %42 = load i32, i32* %6, align 4
  %43 = icmp eq i32 %42, 255
  br i1 %43, label %44, label %45

; <label>:44:                                     ; preds = %38
  store double 0x7FF0000000000000, double* %4, align 8
  br label %69

; <label>:45:                                     ; preds = %38
  %46 = load i32, i32* %6, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %58

; <label>:48:                                     ; preds = %45
  %49 = load i32, i32* %7, align 4
  %50 = and i32 %49, 8388607
  store i32 %50, i32* %5, align 4
  %51 = load i32, i32* %5, align 4
  %52 = sitofp i32 %51 to double
  %53 = load i32, i32* %6, align 4
  %54 = sub nsw i32 %53, 127
  %55 = sub nsw i32 %54, 23
  %56 = add nsw i32 %55, 1
  %57 = call arm_aapcscc double @ldexp(double %52, i32 %56) #7
  store double %57, double* %4, align 8
  br label %68

; <label>:58:                                     ; preds = %45
  %59 = load i32, i32* %7, align 4
  %60 = and i32 %59, 8388607
  %61 = add nsw i32 %60, 8388608
  store i32 %61, i32* %5, align 4
  %62 = load i32, i32* %5, align 4
  %63 = sitofp i32 %62 to double
  %64 = load i32, i32* %6, align 4
  %65 = sub nsw i32 %64, 127
  %66 = sub nsw i32 %65, 23
  %67 = call arm_aapcscc double @ldexp(double %63, i32 %66) #7
  store double %67, double* %4, align 8
  br label %68

; <label>:68:                                     ; preds = %58, %48
  br label %69

; <label>:69:                                     ; preds = %68, %44
  br label %70

; <label>:70:                                     ; preds = %69, %37
  %71 = load i32, i32* %7, align 4
  %72 = and i32 %71, -2147483648
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %74, label %77

; <label>:74:                                     ; preds = %70
  %75 = load double, double* %4, align 8
  %76 = fsub double -0.000000e+00, %75
  store double %76, double* %2, align 8
  br label %79

; <label>:77:                                     ; preds = %70
  %78 = load double, double* %4, align 8
  store double %78, double* %2, align 8
  br label %79

; <label>:79:                                     ; preds = %77, %74
  %80 = load double, double* %2, align 8
  ret double %80
}

; Function Attrs: nounwind
declare arm_aapcscc double @ldexp(double, i32) #2

; Function Attrs: nounwind
define arm_aapcscc void @ConvertToIeeeSingle(double, i8*) #0 {
  %3 = alloca double, align 8
  %4 = alloca i8*, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store double %0, double* %3, align 8
  store i8* %1, i8** %4, align 4
  %11 = load double, double* %3, align 8
  %12 = fcmp olt double %11, 0.000000e+00
  br i1 %12, label %13, label %16

; <label>:13:                                     ; preds = %2
  store i32 -2147483648, i32* %5, align 4
  %14 = load double, double* %3, align 8
  %15 = fmul double %14, -1.000000e+00
  store double %15, double* %3, align 8
  br label %17

; <label>:16:                                     ; preds = %2
  store i32 0, i32* %5, align 4
  br label %17

; <label>:17:                                     ; preds = %16, %13
  %18 = load double, double* %3, align 8
  %19 = fcmp oeq double %18, 0.000000e+00
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %17
  store i32 0, i32* %6, align 4
  br label %70

; <label>:21:                                     ; preds = %17
  %22 = load double, double* %3, align 8
  %23 = call arm_aapcscc double @frexp(double %22, i32* %8) #7
  store double %23, double* %7, align 8
  %24 = load i32, i32* %8, align 4
  %25 = icmp sgt i32 %24, 129
  br i1 %25, label %29, label %26

; <label>:26:                                     ; preds = %21
  %27 = load double, double* %7, align 8
  %28 = fcmp olt double %27, 1.000000e+00
  br i1 %28, label %32, label %29

; <label>:29:                                     ; preds = %26, %21
  %30 = load i32, i32* %5, align 4
  %31 = or i32 %30, 2139095040
  store i32 %31, i32* %6, align 4
  br label %69

; <label>:32:                                     ; preds = %26
  %33 = load i32, i32* %8, align 4
  %34 = icmp slt i32 %33, -125
  br i1 %34, label %35, label %53

; <label>:35:                                     ; preds = %32
  %36 = load i32, i32* %8, align 4
  %37 = add nsw i32 149, %36
  store i32 %37, i32* %10, align 4
  %38 = load i32, i32* %10, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %42

; <label>:40:                                     ; preds = %35
  %41 = load i32, i32* %5, align 4
  store i32 %41, i32* %6, align 4
  br label %52

; <label>:42:                                     ; preds = %35
  %43 = load double, double* %7, align 8
  %44 = load i32, i32* %10, align 4
  %45 = shl i32 1, %44
  %46 = sitofp i32 %45 to double
  %47 = fmul double %43, %46
  %48 = fptosi double %47 to i32
  store i32 %48, i32* %9, align 4
  %49 = load i32, i32* %5, align 4
  %50 = load i32, i32* %9, align 4
  %51 = or i32 %49, %50
  store i32 %51, i32* %6, align 4
  br label %52

; <label>:52:                                     ; preds = %42, %40
  br label %68

; <label>:53:                                     ; preds = %32
  %54 = load double, double* %7, align 8
  %55 = fmul double %54, 0x4170000000000000
  %56 = call arm_aapcscc double @floor(double %55) #9
  %57 = fptosi double %56 to i32
  store i32 %57, i32* %9, align 4
  %58 = load i32, i32* %9, align 4
  %59 = sub nsw i32 %58, 8388608
  store i32 %59, i32* %9, align 4
  %60 = load i32, i32* %5, align 4
  %61 = load i32, i32* %8, align 4
  %62 = add nsw i32 %61, 127
  %63 = sub nsw i32 %62, 1
  %64 = shl i32 %63, 23
  %65 = or i32 %60, %64
  %66 = load i32, i32* %9, align 4
  %67 = or i32 %65, %66
  store i32 %67, i32* %6, align 4
  br label %68

; <label>:68:                                     ; preds = %53, %52
  br label %69

; <label>:69:                                     ; preds = %68, %29
  br label %70

; <label>:70:                                     ; preds = %69, %20
  %71 = load i32, i32* %6, align 4
  %72 = ashr i32 %71, 24
  %73 = trunc i32 %72 to i8
  %74 = load i8*, i8** %4, align 4
  %75 = getelementptr inbounds i8, i8* %74, i32 0
  store i8 %73, i8* %75, align 1
  %76 = load i32, i32* %6, align 4
  %77 = ashr i32 %76, 16
  %78 = trunc i32 %77 to i8
  %79 = load i8*, i8** %4, align 4
  %80 = getelementptr inbounds i8, i8* %79, i32 1
  store i8 %78, i8* %80, align 1
  %81 = load i32, i32* %6, align 4
  %82 = ashr i32 %81, 8
  %83 = trunc i32 %82 to i8
  %84 = load i8*, i8** %4, align 4
  %85 = getelementptr inbounds i8, i8* %84, i32 2
  store i8 %83, i8* %85, align 1
  %86 = load i32, i32* %6, align 4
  %87 = trunc i32 %86 to i8
  %88 = load i8*, i8** %4, align 4
  %89 = getelementptr inbounds i8, i8* %88, i32 3
  store i8 %87, i8* %89, align 1
  ret void
}

; Function Attrs: nounwind
declare arm_aapcscc double @frexp(double, i32*) #2

; Function Attrs: nounwind readnone
declare arm_aapcscc double @floor(double) #6

; Function Attrs: nounwind
define arm_aapcscc double @ConvertFromIeeeDouble(i8*) #0 {
  %2 = alloca double, align 8
  %3 = alloca i8*, align 4
  %4 = alloca double, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i8* %0, i8** %3, align 4
  %9 = load i8*, i8** %3, align 4
  %10 = getelementptr inbounds i8, i8* %9, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = and i32 %12, 255
  %14 = shl i32 %13, 24
  %15 = load i8*, i8** %3, align 4
  %16 = getelementptr inbounds i8, i8* %15, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = and i32 %18, 255
  %20 = shl i32 %19, 16
  %21 = or i32 %14, %20
  %22 = load i8*, i8** %3, align 4
  %23 = getelementptr inbounds i8, i8* %22, i32 2
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = and i32 %25, 255
  %27 = shl i32 %26, 8
  %28 = or i32 %21, %27
  %29 = load i8*, i8** %3, align 4
  %30 = getelementptr inbounds i8, i8* %29, i32 3
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = and i32 %32, 255
  %34 = or i32 %28, %33
  store i32 %34, i32* %7, align 4
  %35 = load i8*, i8** %3, align 4
  %36 = getelementptr inbounds i8, i8* %35, i32 4
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = and i32 %38, 255
  %40 = shl i32 %39, 24
  %41 = load i8*, i8** %3, align 4
  %42 = getelementptr inbounds i8, i8* %41, i32 5
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = and i32 %44, 255
  %46 = shl i32 %45, 16
  %47 = or i32 %40, %46
  %48 = load i8*, i8** %3, align 4
  %49 = getelementptr inbounds i8, i8* %48, i32 6
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = and i32 %51, 255
  %53 = shl i32 %52, 8
  %54 = or i32 %47, %53
  %55 = load i8*, i8** %3, align 4
  %56 = getelementptr inbounds i8, i8* %55, i32 7
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = and i32 %58, 255
  %60 = or i32 %54, %59
  store i32 %60, i32* %8, align 4
  %61 = load i32, i32* %7, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %67

; <label>:63:                                     ; preds = %1
  %64 = load i32, i32* %8, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

; <label>:66:                                     ; preds = %63
  store double 0.000000e+00, double* %4, align 8
  br label %124

; <label>:67:                                     ; preds = %63, %1
  %68 = load i32, i32* %7, align 4
  %69 = and i32 %68, 2146435072
  %70 = lshr i32 %69, 20
  store i32 %70, i32* %6, align 4
  %71 = load i32, i32* %6, align 4
  %72 = icmp eq i32 %71, 2047
  br i1 %72, label %73, label %74

; <label>:73:                                     ; preds = %67
  store double 0x7FF0000000000000, double* %4, align 8
  br label %123

; <label>:74:                                     ; preds = %67
  %75 = load i32, i32* %6, align 4
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %100

; <label>:77:                                     ; preds = %74
  %78 = load i32, i32* %7, align 4
  %79 = and i32 %78, 1048575
  store i32 %79, i32* %5, align 4
  %80 = load i32, i32* %5, align 4
  %81 = sitofp i32 %80 to double
  %82 = load i32, i32* %6, align 4
  %83 = sub nsw i32 %82, 1023
  %84 = sub nsw i32 %83, 20
  %85 = add nsw i32 %84, 1
  %86 = call arm_aapcscc double @ldexp(double %81, i32 %85) #7
  store double %86, double* %4, align 8
  %87 = load i32, i32* %8, align 4
  %88 = sub i32 %87, 2147483647
  %89 = sub i32 %88, 1
  %90 = sitofp i32 %89 to double
  %91 = fadd double %90, 0x41E0000000000000
  %92 = load i32, i32* %6, align 4
  %93 = sub nsw i32 %92, 1023
  %94 = sub nsw i32 %93, 20
  %95 = add nsw i32 %94, 1
  %96 = sub nsw i32 %95, 32
  %97 = call arm_aapcscc double @ldexp(double %91, i32 %96) #7
  %98 = load double, double* %4, align 8
  %99 = fadd double %98, %97
  store double %99, double* %4, align 8
  br label %122

; <label>:100:                                    ; preds = %74
  %101 = load i32, i32* %7, align 4
  %102 = and i32 %101, 1048575
  %103 = add i32 %102, 1048576
  store i32 %103, i32* %5, align 4
  %104 = load i32, i32* %5, align 4
  %105 = sitofp i32 %104 to double
  %106 = load i32, i32* %6, align 4
  %107 = sub nsw i32 %106, 1023
  %108 = sub nsw i32 %107, 20
  %109 = call arm_aapcscc double @ldexp(double %105, i32 %108) #7
  store double %109, double* %4, align 8
  %110 = load i32, i32* %8, align 4
  %111 = sub i32 %110, 2147483647
  %112 = sub i32 %111, 1
  %113 = sitofp i32 %112 to double
  %114 = fadd double %113, 0x41E0000000000000
  %115 = load i32, i32* %6, align 4
  %116 = sub nsw i32 %115, 1023
  %117 = sub nsw i32 %116, 20
  %118 = sub nsw i32 %117, 32
  %119 = call arm_aapcscc double @ldexp(double %114, i32 %118) #7
  %120 = load double, double* %4, align 8
  %121 = fadd double %120, %119
  store double %121, double* %4, align 8
  br label %122

; <label>:122:                                    ; preds = %100, %77
  br label %123

; <label>:123:                                    ; preds = %122, %73
  br label %124

; <label>:124:                                    ; preds = %123, %66
  %125 = load i32, i32* %7, align 4
  %126 = and i32 %125, -2147483648
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %128, label %131

; <label>:128:                                    ; preds = %124
  %129 = load double, double* %4, align 8
  %130 = fsub double -0.000000e+00, %129
  store double %130, double* %2, align 8
  br label %133

; <label>:131:                                    ; preds = %124
  %132 = load double, double* %4, align 8
  store double %132, double* %2, align 8
  br label %133

; <label>:133:                                    ; preds = %131, %128
  %134 = load double, double* %2, align 8
  ret double %134
}

; Function Attrs: nounwind
define arm_aapcscc void @ConvertToIeeeDouble(double, i8*) #0 {
  %3 = alloca double, align 8
  %4 = alloca i8*, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store double %0, double* %3, align 8
  store i8* %1, i8** %4, align 4
  %13 = load double, double* %3, align 8
  %14 = fcmp olt double %13, 0.000000e+00
  br i1 %14, label %15, label %18

; <label>:15:                                     ; preds = %2
  store i32 -2147483648, i32* %5, align 4
  %16 = load double, double* %3, align 8
  %17 = fmul double %16, -1.000000e+00
  store double %17, double* %3, align 8
  br label %19

; <label>:18:                                     ; preds = %2
  store i32 0, i32* %5, align 4
  br label %19

; <label>:19:                                     ; preds = %18, %15
  %20 = load double, double* %3, align 8
  %21 = fcmp oeq double %20, 0.000000e+00
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %19
  store i32 0, i32* %6, align 4
  store i32 0, i32* %7, align 4
  br label %110

; <label>:23:                                     ; preds = %19
  %24 = load double, double* %3, align 8
  %25 = call arm_aapcscc double @frexp(double %24, i32* %10) #7
  store double %25, double* %8, align 8
  %26 = load i32, i32* %10, align 4
  %27 = icmp sgt i32 %26, 1025
  br i1 %27, label %31, label %28

; <label>:28:                                     ; preds = %23
  %29 = load double, double* %8, align 8
  %30 = fcmp olt double %29, 1.000000e+00
  br i1 %30, label %34, label %31

; <label>:31:                                     ; preds = %28, %23
  %32 = load i32, i32* %5, align 4
  %33 = or i32 %32, 2146435072
  store i32 %33, i32* %6, align 4
  store i32 0, i32* %7, align 4
  br label %109

; <label>:34:                                     ; preds = %28
  %35 = load i32, i32* %10, align 4
  %36 = icmp slt i32 %35, -1021
  br i1 %36, label %37, label %80

; <label>:37:                                     ; preds = %34
  %38 = load i32, i32* %10, align 4
  %39 = add nsw i32 1042, %38
  store i32 %39, i32* %12, align 4
  %40 = load i32, i32* %12, align 4
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %42, label %59

; <label>:42:                                     ; preds = %37
  %43 = load i32, i32* %5, align 4
  store i32 %43, i32* %6, align 4
  %44 = load i32, i32* %12, align 4
  %45 = add nsw i32 %44, 32
  store i32 %45, i32* %12, align 4
  %46 = load i32, i32* %12, align 4
  %47 = icmp slt i32 %46, 0
  br i1 %47, label %48, label %49

; <label>:48:                                     ; preds = %42
  store i32 0, i32* %7, align 4
  br label %58

; <label>:49:                                     ; preds = %42
  %50 = load double, double* %8, align 8
  %51 = load i32, i32* %12, align 4
  %52 = call arm_aapcscc double @ldexp(double %50, i32 %51) #7
  %53 = call arm_aapcscc double @floor(double %52) #9
  %54 = fsub double %53, 0x41E0000000000000
  %55 = fptosi double %54 to i32
  %56 = add nsw i32 %55, 2147483647
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %7, align 4
  br label %58

; <label>:58:                                     ; preds = %49, %48
  br label %79

; <label>:59:                                     ; preds = %37
  %60 = load double, double* %8, align 8
  %61 = load i32, i32* %12, align 4
  %62 = call arm_aapcscc double @ldexp(double %60, i32 %61) #7
  store double %62, double* %9, align 8
  %63 = load double, double* %9, align 8
  %64 = call arm_aapcscc double @floor(double %63) #9
  %65 = fptosi double %64 to i32
  store i32 %65, i32* %11, align 4
  %66 = load i32, i32* %5, align 4
  %67 = load i32, i32* %11, align 4
  %68 = or i32 %66, %67
  store i32 %68, i32* %6, align 4
  %69 = load double, double* %9, align 8
  %70 = load i32, i32* %11, align 4
  %71 = sitofp i32 %70 to double
  %72 = fsub double %69, %71
  %73 = call arm_aapcscc double @ldexp(double %72, i32 32) #7
  %74 = call arm_aapcscc double @floor(double %73) #9
  %75 = fsub double %74, 0x41E0000000000000
  %76 = fptosi double %75 to i32
  %77 = add nsw i32 %76, 2147483647
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %7, align 4
  br label %79

; <label>:79:                                     ; preds = %59, %58
  br label %108

; <label>:80:                                     ; preds = %34
  %81 = load double, double* %8, align 8
  %82 = call arm_aapcscc double @ldexp(double %81, i32 21) #7
  store double %82, double* %9, align 8
  %83 = load double, double* %9, align 8
  %84 = call arm_aapcscc double @floor(double %83) #9
  %85 = fptosi double %84 to i32
  store i32 %85, i32* %11, align 4
  %86 = load i32, i32* %11, align 4
  %87 = sub nsw i32 %86, 1048576
  store i32 %87, i32* %11, align 4
  %88 = load double, double* %9, align 8
  %89 = fsub double %88, 1.048576e+06
  store double %89, double* %9, align 8
  %90 = load i32, i32* %5, align 4
  %91 = load i32, i32* %10, align 4
  %92 = add nsw i32 %91, 1023
  %93 = sub nsw i32 %92, 1
  %94 = shl i32 %93, 20
  %95 = or i32 %90, %94
  %96 = load i32, i32* %11, align 4
  %97 = or i32 %95, %96
  store i32 %97, i32* %6, align 4
  %98 = load double, double* %9, align 8
  %99 = load i32, i32* %11, align 4
  %100 = sitofp i32 %99 to double
  %101 = fsub double %98, %100
  %102 = call arm_aapcscc double @ldexp(double %101, i32 32) #7
  %103 = call arm_aapcscc double @floor(double %102) #9
  %104 = fsub double %103, 0x41E0000000000000
  %105 = fptosi double %104 to i32
  %106 = add nsw i32 %105, 2147483647
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %7, align 4
  br label %108

; <label>:108:                                    ; preds = %80, %79
  br label %109

; <label>:109:                                    ; preds = %108, %31
  br label %110

; <label>:110:                                    ; preds = %109, %22
  %111 = load i32, i32* %6, align 4
  %112 = ashr i32 %111, 24
  %113 = trunc i32 %112 to i8
  %114 = load i8*, i8** %4, align 4
  %115 = getelementptr inbounds i8, i8* %114, i32 0
  store i8 %113, i8* %115, align 1
  %116 = load i32, i32* %6, align 4
  %117 = ashr i32 %116, 16
  %118 = trunc i32 %117 to i8
  %119 = load i8*, i8** %4, align 4
  %120 = getelementptr inbounds i8, i8* %119, i32 1
  store i8 %118, i8* %120, align 1
  %121 = load i32, i32* %6, align 4
  %122 = ashr i32 %121, 8
  %123 = trunc i32 %122 to i8
  %124 = load i8*, i8** %4, align 4
  %125 = getelementptr inbounds i8, i8* %124, i32 2
  store i8 %123, i8* %125, align 1
  %126 = load i32, i32* %6, align 4
  %127 = trunc i32 %126 to i8
  %128 = load i8*, i8** %4, align 4
  %129 = getelementptr inbounds i8, i8* %128, i32 3
  store i8 %127, i8* %129, align 1
  %130 = load i32, i32* %7, align 4
  %131 = ashr i32 %130, 24
  %132 = trunc i32 %131 to i8
  %133 = load i8*, i8** %4, align 4
  %134 = getelementptr inbounds i8, i8* %133, i32 4
  store i8 %132, i8* %134, align 1
  %135 = load i32, i32* %7, align 4
  %136 = ashr i32 %135, 16
  %137 = trunc i32 %136 to i8
  %138 = load i8*, i8** %4, align 4
  %139 = getelementptr inbounds i8, i8* %138, i32 5
  store i8 %137, i8* %139, align 1
  %140 = load i32, i32* %7, align 4
  %141 = ashr i32 %140, 8
  %142 = trunc i32 %141 to i8
  %143 = load i8*, i8** %4, align 4
  %144 = getelementptr inbounds i8, i8* %143, i32 6
  store i8 %142, i8* %144, align 1
  %145 = load i32, i32* %7, align 4
  %146 = trunc i32 %145 to i8
  %147 = load i8*, i8** %4, align 4
  %148 = getelementptr inbounds i8, i8* %147, i32 7
  store i8 %146, i8* %148, align 1
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc double @ConvertFromIeeeExtended(i8*) #0 {
  %2 = alloca double, align 8
  %3 = alloca i8*, align 4
  %4 = alloca double, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i8* %0, i8** %3, align 4
  %8 = load i8*, i8** %3, align 4
  %9 = getelementptr inbounds i8, i8* %8, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = and i32 %11, 127
  %13 = shl i32 %12, 8
  %14 = load i8*, i8** %3, align 4
  %15 = getelementptr inbounds i8, i8* %14, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = and i32 %17, 255
  %19 = or i32 %13, %18
  store i32 %19, i32* %5, align 4
  %20 = load i8*, i8** %3, align 4
  %21 = getelementptr inbounds i8, i8* %20, i32 2
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = and i32 %23, 255
  %25 = shl i32 %24, 24
  %26 = load i8*, i8** %3, align 4
  %27 = getelementptr inbounds i8, i8* %26, i32 3
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = and i32 %29, 255
  %31 = shl i32 %30, 16
  %32 = or i32 %25, %31
  %33 = load i8*, i8** %3, align 4
  %34 = getelementptr inbounds i8, i8* %33, i32 4
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = and i32 %36, 255
  %38 = shl i32 %37, 8
  %39 = or i32 %32, %38
  %40 = load i8*, i8** %3, align 4
  %41 = getelementptr inbounds i8, i8* %40, i32 5
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = and i32 %43, 255
  %45 = or i32 %39, %44
  store i32 %45, i32* %6, align 4
  %46 = load i8*, i8** %3, align 4
  %47 = getelementptr inbounds i8, i8* %46, i32 6
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = and i32 %49, 255
  %51 = shl i32 %50, 24
  %52 = load i8*, i8** %3, align 4
  %53 = getelementptr inbounds i8, i8* %52, i32 7
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  %56 = and i32 %55, 255
  %57 = shl i32 %56, 16
  %58 = or i32 %51, %57
  %59 = load i8*, i8** %3, align 4
  %60 = getelementptr inbounds i8, i8* %59, i32 8
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = and i32 %62, 255
  %64 = shl i32 %63, 8
  %65 = or i32 %58, %64
  %66 = load i8*, i8** %3, align 4
  %67 = getelementptr inbounds i8, i8* %66, i32 9
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = and i32 %69, 255
  %71 = or i32 %65, %70
  store i32 %71, i32* %7, align 4
  %72 = load i32, i32* %5, align 4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %81

; <label>:74:                                     ; preds = %1
  %75 = load i32, i32* %6, align 4
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %81

; <label>:77:                                     ; preds = %74
  %78 = load i32, i32* %7, align 4
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %81

; <label>:80:                                     ; preds = %77
  store double 0.000000e+00, double* %4, align 8
  br label %107

; <label>:81:                                     ; preds = %77, %74, %1
  %82 = load i32, i32* %5, align 4
  %83 = icmp eq i32 %82, 32767
  br i1 %83, label %84, label %85

; <label>:84:                                     ; preds = %81
  store double 0x7FF0000000000000, double* %4, align 8
  br label %106

; <label>:85:                                     ; preds = %81
  %86 = load i32, i32* %5, align 4
  %87 = sub nsw i32 %86, 16383
  store i32 %87, i32* %5, align 4
  %88 = load i32, i32* %6, align 4
  %89 = sub i32 %88, 2147483647
  %90 = sub i32 %89, 1
  %91 = sitofp i32 %90 to double
  %92 = fadd double %91, 0x41E0000000000000
  %93 = load i32, i32* %5, align 4
  %94 = sub nsw i32 %93, 31
  store i32 %94, i32* %5, align 4
  %95 = call arm_aapcscc double @ldexp(double %92, i32 %94) #7
  store double %95, double* %4, align 8
  %96 = load i32, i32* %7, align 4
  %97 = sub i32 %96, 2147483647
  %98 = sub i32 %97, 1
  %99 = sitofp i32 %98 to double
  %100 = fadd double %99, 0x41E0000000000000
  %101 = load i32, i32* %5, align 4
  %102 = sub nsw i32 %101, 32
  store i32 %102, i32* %5, align 4
  %103 = call arm_aapcscc double @ldexp(double %100, i32 %102) #7
  %104 = load double, double* %4, align 8
  %105 = fadd double %104, %103
  store double %105, double* %4, align 8
  br label %106

; <label>:106:                                    ; preds = %85, %84
  br label %107

; <label>:107:                                    ; preds = %106, %80
  %108 = load i8*, i8** %3, align 4
  %109 = getelementptr inbounds i8, i8* %108, i32 0
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = and i32 %111, 128
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %117

; <label>:114:                                    ; preds = %107
  %115 = load double, double* %4, align 8
  %116 = fsub double -0.000000e+00, %115
  store double %116, double* %2, align 8
  br label %119

; <label>:117:                                    ; preds = %107
  %118 = load double, double* %4, align 8
  store double %118, double* %2, align 8
  br label %119

; <label>:119:                                    ; preds = %117, %114
  %120 = load double, double* %2, align 8
  ret double %120
}

; Function Attrs: nounwind
define arm_aapcscc void @ConvertToIeeeExtended(double, i8*) #0 {
  %3 = alloca double, align 8
  %4 = alloca i8*, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store double %0, double* %3, align 8
  store i8* %1, i8** %4, align 4
  %11 = load double, double* %3, align 8
  %12 = fcmp olt double %11, 0.000000e+00
  br i1 %12, label %13, label %16

; <label>:13:                                     ; preds = %2
  store i32 32768, i32* %5, align 4
  %14 = load double, double* %3, align 8
  %15 = fmul double %14, -1.000000e+00
  store double %15, double* %3, align 8
  br label %17

; <label>:16:                                     ; preds = %2
  store i32 0, i32* %5, align 4
  br label %17

; <label>:17:                                     ; preds = %16, %13
  %18 = load double, double* %3, align 8
  %19 = fcmp oeq double %18, 0.000000e+00
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %17
  store i32 0, i32* %6, align 4
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  br label %66

; <label>:21:                                     ; preds = %17
  %22 = load double, double* %3, align 8
  %23 = call arm_aapcscc double @frexp(double %22, i32* %6) #7
  store double %23, double* %7, align 8
  %24 = load i32, i32* %6, align 4
  %25 = icmp sgt i32 %24, 16384
  br i1 %25, label %29, label %26

; <label>:26:                                     ; preds = %21
  %27 = load double, double* %7, align 8
  %28 = fcmp olt double %27, 1.000000e+00
  br i1 %28, label %32, label %29

; <label>:29:                                     ; preds = %26, %21
  %30 = load i32, i32* %5, align 4
  %31 = or i32 %30, 32767
  store i32 %31, i32* %6, align 4
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  br label %65

; <label>:32:                                     ; preds = %26
  %33 = load i32, i32* %6, align 4
  %34 = add nsw i32 %33, 16382
  store i32 %34, i32* %6, align 4
  %35 = load i32, i32* %6, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %37, label %41

; <label>:37:                                     ; preds = %32
  %38 = load double, double* %7, align 8
  %39 = load i32, i32* %6, align 4
  %40 = call arm_aapcscc double @ldexp(double %38, i32 %39) #7
  store double %40, double* %7, align 8
  store i32 0, i32* %6, align 4
  br label %41

; <label>:41:                                     ; preds = %37, %32
  %42 = load i32, i32* %5, align 4
  %43 = load i32, i32* %6, align 4
  %44 = or i32 %43, %42
  store i32 %44, i32* %6, align 4
  %45 = load double, double* %7, align 8
  %46 = call arm_aapcscc double @ldexp(double %45, i32 32) #7
  store double %46, double* %7, align 8
  %47 = load double, double* %7, align 8
  %48 = call arm_aapcscc double @floor(double %47) #9
  store double %48, double* %8, align 8
  %49 = load double, double* %8, align 8
  %50 = fsub double %49, 0x41E0000000000000
  %51 = fptosi double %50 to i32
  %52 = add nsw i32 %51, 2147483647
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %9, align 4
  %54 = load double, double* %7, align 8
  %55 = load double, double* %8, align 8
  %56 = fsub double %54, %55
  %57 = call arm_aapcscc double @ldexp(double %56, i32 32) #7
  store double %57, double* %7, align 8
  %58 = load double, double* %7, align 8
  %59 = call arm_aapcscc double @floor(double %58) #9
  store double %59, double* %8, align 8
  %60 = load double, double* %8, align 8
  %61 = fsub double %60, 0x41E0000000000000
  %62 = fptosi double %61 to i32
  %63 = add nsw i32 %62, 2147483647
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %10, align 4
  br label %65

; <label>:65:                                     ; preds = %41, %29
  br label %66

; <label>:66:                                     ; preds = %65, %20
  %67 = load i32, i32* %6, align 4
  %68 = ashr i32 %67, 8
  %69 = trunc i32 %68 to i8
  %70 = load i8*, i8** %4, align 4
  %71 = getelementptr inbounds i8, i8* %70, i32 0
  store i8 %69, i8* %71, align 1
  %72 = load i32, i32* %6, align 4
  %73 = trunc i32 %72 to i8
  %74 = load i8*, i8** %4, align 4
  %75 = getelementptr inbounds i8, i8* %74, i32 1
  store i8 %73, i8* %75, align 1
  %76 = load i32, i32* %9, align 4
  %77 = lshr i32 %76, 24
  %78 = trunc i32 %77 to i8
  %79 = load i8*, i8** %4, align 4
  %80 = getelementptr inbounds i8, i8* %79, i32 2
  store i8 %78, i8* %80, align 1
  %81 = load i32, i32* %9, align 4
  %82 = lshr i32 %81, 16
  %83 = trunc i32 %82 to i8
  %84 = load i8*, i8** %4, align 4
  %85 = getelementptr inbounds i8, i8* %84, i32 3
  store i8 %83, i8* %85, align 1
  %86 = load i32, i32* %9, align 4
  %87 = lshr i32 %86, 8
  %88 = trunc i32 %87 to i8
  %89 = load i8*, i8** %4, align 4
  %90 = getelementptr inbounds i8, i8* %89, i32 4
  store i8 %88, i8* %90, align 1
  %91 = load i32, i32* %9, align 4
  %92 = trunc i32 %91 to i8
  %93 = load i8*, i8** %4, align 4
  %94 = getelementptr inbounds i8, i8* %93, i32 5
  store i8 %92, i8* %94, align 1
  %95 = load i32, i32* %10, align 4
  %96 = lshr i32 %95, 24
  %97 = trunc i32 %96 to i8
  %98 = load i8*, i8** %4, align 4
  %99 = getelementptr inbounds i8, i8* %98, i32 6
  store i8 %97, i8* %99, align 1
  %100 = load i32, i32* %10, align 4
  %101 = lshr i32 %100, 16
  %102 = trunc i32 %101 to i8
  %103 = load i8*, i8** %4, align 4
  %104 = getelementptr inbounds i8, i8* %103, i32 7
  store i8 %102, i8* %104, align 1
  %105 = load i32, i32* %10, align 4
  %106 = lshr i32 %105, 8
  %107 = trunc i32 %106 to i8
  %108 = load i8*, i8** %4, align 4
  %109 = getelementptr inbounds i8, i8* %108, i32 8
  store i8 %107, i8* %109, align 1
  %110 = load i32, i32* %10, align 4
  %111 = trunc i32 %110 to i8
  %112 = load i8*, i8** %4, align 4
  %113 = getelementptr inbounds i8, i8* %112, i32 9
  store i8 %111, i8* %113, align 1
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @putMyBits(i32, i32) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** @bs, align 4
  %6 = load i32, i32* %3, align 4
  %7 = load i32, i32* %4, align 4
  call arm_aapcscc void @putbits(%struct.bit_stream_struc* %5, i32 %6, i32 %7)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @III_format_bitstream(%struct.lame_global_flags*, i32, [2 x [576 x i32]]*, %struct.III_side_info_t*, [2 x %struct.III_scalefac_t]*, %struct.bit_stream_struc*) #0 {
  %7 = alloca %struct.lame_global_flags*, align 4
  %8 = alloca i32, align 4
  %9 = alloca [2 x [576 x i32]]*, align 4
  %10 = alloca %struct.III_side_info_t*, align 4
  %11 = alloca [2 x %struct.III_scalefac_t]*, align 4
  %12 = alloca %struct.bit_stream_struc*, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %7, align 4
  store i32 %1, i32* %8, align 4
  store [2 x [576 x i32]]* %2, [2 x [576 x i32]]** %9, align 4
  store %struct.III_side_info_t* %3, %struct.III_side_info_t** %10, align 4
  store [2 x %struct.III_scalefac_t]* %4, [2 x %struct.III_scalefac_t]** %11, align 4
  store %struct.bit_stream_struc* %5, %struct.bit_stream_struc** %12, align 4
  %15 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %12, align 4
  store %struct.bit_stream_struc* %15, %struct.bit_stream_struc** @bs, align 4
  %16 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %17 = icmp eq %struct.BF_FrameData* %16, null
  br i1 %17, label %18, label %27

; <label>:18:                                     ; preds = %6
  %19 = call arm_aapcscc i8* @calloc(i32 1, i32 96)
  %20 = bitcast i8* %19 to %struct.BF_FrameData*
  store %struct.BF_FrameData* %20, %struct.BF_FrameData** @frameData, align 4
  %21 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %22 = icmp ne %struct.BF_FrameData* %21, null
  br i1 %22, label %24, label %23

; <label>:23:                                     ; preds = %18
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.156, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 73, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__func__.III_format_bitstream, i32 0, i32 0))
  br label %24

; <label>:24:                                     ; preds = %23, %18
  %25 = phi i1 [ true, %18 ], [ false, %23 ]
  %26 = zext i1 %25 to i32
  br label %27

; <label>:27:                                     ; preds = %24, %6
  %28 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** @frameResults, align 4
  %29 = icmp eq %struct.BF_FrameResults* %28, null
  br i1 %29, label %30, label %39

; <label>:30:                                     ; preds = %27
  %31 = call arm_aapcscc i8* @calloc(i32 1, i32 12)
  %32 = bitcast i8* %31 to %struct.BF_FrameResults*
  store %struct.BF_FrameResults* %32, %struct.BF_FrameResults** @frameResults, align 4
  %33 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** @frameResults, align 4
  %34 = icmp ne %struct.BF_FrameResults* %33, null
  br i1 %34, label %36, label %35

; <label>:35:                                     ; preds = %30
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.158, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 78, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__func__.III_format_bitstream, i32 0, i32 0))
  br label %36

; <label>:36:                                     ; preds = %35, %30
  %37 = phi i1 [ true, %30 ], [ false, %35 ]
  %38 = zext i1 %37 to i32
  br label %39

; <label>:39:                                     ; preds = %36, %27
  %40 = load i32, i32* @PartHoldersInitialized, align 4
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %93, label %42

; <label>:42:                                     ; preds = %39
  %43 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 14)
  store %struct.BF_PartHolder* %43, %struct.BF_PartHolder** @headerPH, align 4
  %44 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 12)
  store %struct.BF_PartHolder* %44, %struct.BF_PartHolder** @frameSIPH, align 4
  store i32 0, i32* %14, align 4
  br label %45

; <label>:45:                                     ; preds = %52, %42
  %46 = load i32, i32* %14, align 4
  %47 = icmp slt i32 %46, 2
  br i1 %47, label %48, label %55

; <label>:48:                                     ; preds = %45
  %49 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 8)
  %50 = load i32, i32* %14, align 4
  %51 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i32 0, i32 %50
  store %struct.BF_PartHolder* %49, %struct.BF_PartHolder** %51, align 4
  br label %52

; <label>:52:                                     ; preds = %48
  %53 = load i32, i32* %14, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %14, align 4
  br label %45

; <label>:55:                                     ; preds = %45
  store i32 0, i32* %13, align 4
  br label %56

; <label>:56:                                     ; preds = %88, %55
  %57 = load i32, i32* %13, align 4
  %58 = icmp slt i32 %57, 2
  br i1 %58, label %59, label %91

; <label>:59:                                     ; preds = %56
  store i32 0, i32* %14, align 4
  br label %60

; <label>:60:                                     ; preds = %84, %59
  %61 = load i32, i32* %14, align 4
  %62 = icmp slt i32 %61, 2
  br i1 %62, label %63, label %87

; <label>:63:                                     ; preds = %60
  %64 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 32)
  %65 = load i32, i32* %13, align 4
  %66 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i32 0, i32 %65
  %67 = load i32, i32* %14, align 4
  %68 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %66, i32 0, i32 %67
  store %struct.BF_PartHolder* %64, %struct.BF_PartHolder** %68, align 4
  %69 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 64)
  %70 = load i32, i32* %13, align 4
  %71 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i32 0, i32 %70
  %72 = load i32, i32* %14, align 4
  %73 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %71, i32 0, i32 %72
  store %struct.BF_PartHolder* %69, %struct.BF_PartHolder** %73, align 4
  %74 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 576)
  %75 = load i32, i32* %13, align 4
  %76 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i32 0, i32 %75
  %77 = load i32, i32* %14, align 4
  %78 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %76, i32 0, i32 %77
  store %struct.BF_PartHolder* %74, %struct.BF_PartHolder** %78, align 4
  %79 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 4)
  %80 = load i32, i32* %13, align 4
  %81 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @userSpectrumPH, i32 0, i32 %80
  %82 = load i32, i32* %14, align 4
  %83 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %81, i32 0, i32 %82
  store %struct.BF_PartHolder* %79, %struct.BF_PartHolder** %83, align 4
  br label %84

; <label>:84:                                     ; preds = %63
  %85 = load i32, i32* %14, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %14, align 4
  br label %60

; <label>:87:                                     ; preds = %60
  br label %88

; <label>:88:                                     ; preds = %87
  %89 = load i32, i32* %13, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %13, align 4
  br label %56

; <label>:91:                                     ; preds = %56
  %92 = call arm_aapcscc %struct.BF_PartHolder* @BF_newPartHolder(i32 8)
  store %struct.BF_PartHolder* %92, %struct.BF_PartHolder** @userFrameDataPH, align 4
  store i32 1, i32* @PartHoldersInitialized, align 4
  br label %93

; <label>:93:                                     ; preds = %91, %39
  %94 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %95 = load %struct.III_side_info_t*, %struct.III_side_info_t** %10, align 4
  %96 = call arm_aapcscc i32 @encodeSideInfo(%struct.lame_global_flags* %94, %struct.III_side_info_t* %95)
  %97 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %98 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %9, align 4
  %99 = load %struct.III_side_info_t*, %struct.III_side_info_t** %10, align 4
  %100 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %11, align 4
  call arm_aapcscc void @encodeMainData(%struct.lame_global_flags* %97, [2 x [576 x i32]]* %98, %struct.III_side_info_t* %99, [2 x %struct.III_scalefac_t]* %100)
  %101 = load %struct.III_side_info_t*, %struct.III_side_info_t** %10, align 4
  %102 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %101, i32 0, i32 2
  %103 = load i32, i32* %102, align 4
  call arm_aapcscc void @drain_into_ancillary_data(i32 %103)
  %104 = load i32, i32* %8, align 4
  %105 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %106 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %105, i32 0, i32 0
  store i32 %104, i32* %106, align 4
  %107 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %108 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %107, i32 0, i32 45
  %109 = load i32, i32* %108, align 4
  %110 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %111 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %110, i32 0, i32 1
  store i32 %109, i32* %111, align 4
  %112 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %113 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %112, i32 0, i32 46
  %114 = load i32, i32* %113, align 4
  %115 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %116 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %115, i32 0, i32 2
  store i32 %114, i32* %116, align 4
  %117 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %118 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %117, i32 0, i32 1
  %119 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %118, align 4
  %120 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %121 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %120, i32 0, i32 3
  store %struct.BF_BitstreamPart* %119, %struct.BF_BitstreamPart** %121, align 4
  %122 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 4
  %123 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %122, i32 0, i32 1
  %124 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %123, align 4
  %125 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %126 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %125, i32 0, i32 4
  store %struct.BF_BitstreamPart* %124, %struct.BF_BitstreamPart** %126, align 4
  store i32 0, i32* %14, align 4
  br label %127

; <label>:127:                                    ; preds = %143, %93
  %128 = load i32, i32* %14, align 4
  %129 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %130 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %129, i32 0, i32 46
  %131 = load i32, i32* %130, align 4
  %132 = icmp slt i32 %128, %131
  br i1 %132, label %133, label %146

; <label>:133:                                    ; preds = %127
  %134 = load i32, i32* %14, align 4
  %135 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i32 0, i32 %134
  %136 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %135, align 4
  %137 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %136, i32 0, i32 1
  %138 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %137, align 4
  %139 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %140 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %139, i32 0, i32 5
  %141 = load i32, i32* %14, align 4
  %142 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %140, i32 0, i32 %141
  store %struct.BF_BitstreamPart* %138, %struct.BF_BitstreamPart** %142, align 4
  br label %143

; <label>:143:                                    ; preds = %133
  %144 = load i32, i32* %14, align 4
  %145 = add nsw i32 %144, 1
  store i32 %145, i32* %14, align 4
  br label %127

; <label>:146:                                    ; preds = %127
  store i32 0, i32* %13, align 4
  br label %147

; <label>:147:                                    ; preds = %217, %146
  %148 = load i32, i32* %13, align 4
  %149 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %150 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %149, i32 0, i32 45
  %151 = load i32, i32* %150, align 4
  %152 = icmp slt i32 %148, %151
  br i1 %152, label %153, label %220

; <label>:153:                                    ; preds = %147
  store i32 0, i32* %14, align 4
  br label %154

; <label>:154:                                    ; preds = %213, %153
  %155 = load i32, i32* %14, align 4
  %156 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %157 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %156, i32 0, i32 46
  %158 = load i32, i32* %157, align 4
  %159 = icmp slt i32 %155, %158
  br i1 %159, label %160, label %216

; <label>:160:                                    ; preds = %154
  %161 = load i32, i32* %13, align 4
  %162 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i32 0, i32 %161
  %163 = load i32, i32* %14, align 4
  %164 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %162, i32 0, i32 %163
  %165 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %164, align 4
  %166 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %165, i32 0, i32 1
  %167 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %166, align 4
  %168 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %169 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %168, i32 0, i32 6
  %170 = load i32, i32* %13, align 4
  %171 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %169, i32 0, i32 %170
  %172 = load i32, i32* %14, align 4
  %173 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %171, i32 0, i32 %172
  store %struct.BF_BitstreamPart* %167, %struct.BF_BitstreamPart** %173, align 4
  %174 = load i32, i32* %13, align 4
  %175 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i32 0, i32 %174
  %176 = load i32, i32* %14, align 4
  %177 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %175, i32 0, i32 %176
  %178 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %177, align 4
  %179 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %178, i32 0, i32 1
  %180 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %179, align 4
  %181 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %182 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %181, i32 0, i32 7
  %183 = load i32, i32* %13, align 4
  %184 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %182, i32 0, i32 %183
  %185 = load i32, i32* %14, align 4
  %186 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %184, i32 0, i32 %185
  store %struct.BF_BitstreamPart* %180, %struct.BF_BitstreamPart** %186, align 4
  %187 = load i32, i32* %13, align 4
  %188 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i32 0, i32 %187
  %189 = load i32, i32* %14, align 4
  %190 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %188, i32 0, i32 %189
  %191 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %190, align 4
  %192 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %191, i32 0, i32 1
  %193 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %192, align 4
  %194 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %195 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %194, i32 0, i32 8
  %196 = load i32, i32* %13, align 4
  %197 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %195, i32 0, i32 %196
  %198 = load i32, i32* %14, align 4
  %199 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %197, i32 0, i32 %198
  store %struct.BF_BitstreamPart* %193, %struct.BF_BitstreamPart** %199, align 4
  %200 = load i32, i32* %13, align 4
  %201 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @userSpectrumPH, i32 0, i32 %200
  %202 = load i32, i32* %14, align 4
  %203 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %201, i32 0, i32 %202
  %204 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %203, align 4
  %205 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %204, i32 0, i32 1
  %206 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %205, align 4
  %207 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %208 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %207, i32 0, i32 9
  %209 = load i32, i32* %13, align 4
  %210 = getelementptr inbounds [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]]* %208, i32 0, i32 %209
  %211 = load i32, i32* %14, align 4
  %212 = getelementptr inbounds [2 x %struct.BF_BitstreamPart*], [2 x %struct.BF_BitstreamPart*]* %210, i32 0, i32 %211
  store %struct.BF_BitstreamPart* %206, %struct.BF_BitstreamPart** %212, align 4
  br label %213

; <label>:213:                                    ; preds = %160
  %214 = load i32, i32* %14, align 4
  %215 = add nsw i32 %214, 1
  store i32 %215, i32* %14, align 4
  br label %154

; <label>:216:                                    ; preds = %154
  br label %217

; <label>:217:                                    ; preds = %216
  %218 = load i32, i32* %13, align 4
  %219 = add nsw i32 %218, 1
  store i32 %219, i32* %13, align 4
  br label %147

; <label>:220:                                    ; preds = %147
  %221 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @userFrameDataPH, align 4
  %222 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %221, i32 0, i32 1
  %223 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %222, align 4
  %224 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %225 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %224, i32 0, i32 10
  store %struct.BF_BitstreamPart* %223, %struct.BF_BitstreamPart** %225, align 4
  %226 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %227 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** @frameResults, align 4
  call arm_aapcscc void @BF_BitstreamFrame(%struct.BF_FrameData* %226, %struct.BF_FrameResults* %227)
  %228 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** @frameResults, align 4
  %229 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %228, i32 0, i32 2
  %230 = load i32, i32* %229, align 4
  %231 = load %struct.III_side_info_t*, %struct.III_side_info_t** %10, align 4
  %232 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %231, i32 0, i32 0
  store i32 %230, i32* %232, align 4
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @encodeSideInfo(%struct.lame_global_flags*, %struct.III_side_info_t*) #0 {
  %3 = alloca %struct.lame_global_flags*, align 4
  %4 = alloca %struct.III_side_info_t*, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.BF_PartHolder**, align 4
  %12 = alloca %struct.BF_PartHolder**, align 4
  %13 = alloca %struct.gr_info*, align 4
  %14 = alloca %struct.BF_PartHolder**, align 4
  %15 = alloca %struct.gr_info*, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %3, align 4
  store %struct.III_side_info_t* %1, %struct.III_side_info_t** %4, align 4
  store i32 65535, i32* @crc, align 4
  %16 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %17 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %16, i32 0, i32 1
  %18 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %17, align 4
  %19 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %18, i32 0, i32 0
  store i32 0, i32* %19, align 4
  %20 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %21 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %20, i32 4095, i32 12)
  store %struct.BF_PartHolder* %21, %struct.BF_PartHolder** @headerPH, align 4
  %22 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %23 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %24 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %23, i32 0, i32 43
  %25 = load i32, i32* %24, align 4
  %26 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %22, i32 %25, i32 1)
  store %struct.BF_PartHolder* %26, %struct.BF_PartHolder** @headerPH, align 4
  %27 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %28 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %27, i32 1, i32 2)
  store %struct.BF_PartHolder* %28, %struct.BF_PartHolder** @headerPH, align 4
  %29 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %30 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %31 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %30, i32 0, i32 14
  %32 = load i32, i32* %31, align 4
  %33 = icmp ne i32 %32, 0
  %34 = xor i1 %33, true
  %35 = zext i1 %34 to i32
  %36 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %29, i32 %35, i32 1)
  store %struct.BF_PartHolder* %36, %struct.BF_PartHolder** @headerPH, align 4
  %37 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %38 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %39 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %38, i32 0, i32 50
  %40 = load i32, i32* %39, align 4
  %41 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %37, i32 %40, i32 4)
  store %struct.BF_PartHolder* %41, %struct.BF_PartHolder** @headerPH, align 4
  %42 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %43 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %44 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %43, i32 0, i32 51
  %45 = load i32, i32* %44, align 4
  %46 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %42, i32 %45, i32 2)
  store %struct.BF_PartHolder* %46, %struct.BF_PartHolder** @headerPH, align 4
  %47 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %48 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %49 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %48, i32 0, i32 44
  %50 = load i32, i32* %49, align 4
  %51 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %47, i32 %50, i32 1)
  store %struct.BF_PartHolder* %51, %struct.BF_PartHolder** @headerPH, align 4
  %52 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %53 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %54 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %53, i32 0, i32 16
  %55 = load i32, i32* %54, align 4
  %56 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %52, i32 %55, i32 1)
  store %struct.BF_PartHolder* %56, %struct.BF_PartHolder** @headerPH, align 4
  %57 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %58 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %59 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %58, i32 0, i32 8
  %60 = load i32, i32* %59, align 4
  %61 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %57, i32 %60, i32 2)
  store %struct.BF_PartHolder* %61, %struct.BF_PartHolder** @headerPH, align 4
  %62 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %63 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %64 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %63, i32 0, i32 52
  %65 = load i32, i32* %64, align 4
  %66 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %62, i32 %65, i32 2)
  store %struct.BF_PartHolder* %66, %struct.BF_PartHolder** @headerPH, align 4
  %67 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %68 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %69 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %68, i32 0, i32 12
  %70 = load i32, i32* %69, align 4
  %71 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %67, i32 %70, i32 1)
  store %struct.BF_PartHolder* %71, %struct.BF_PartHolder** @headerPH, align 4
  %72 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %73 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %74 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %73, i32 0, i32 13
  %75 = load i32, i32* %74, align 4
  %76 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %72, i32 %75, i32 1)
  store %struct.BF_PartHolder* %76, %struct.BF_PartHolder** @headerPH, align 4
  %77 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %78 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %79 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %78, i32 0, i32 38
  %80 = load i32, i32* %79, align 4
  %81 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %77, i32 %80, i32 2)
  store %struct.BF_PartHolder* %81, %struct.BF_PartHolder** @headerPH, align 4
  store i32 32, i32* %10, align 4
  %82 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 4
  %83 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %82, i32 0, i32 1
  %84 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %83, align 4
  %85 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %84, i32 0, i32 0
  store i32 0, i32* %85, align 4
  store i32 0, i32* %6, align 4
  br label %86

; <label>:86:                                     ; preds = %99, %2
  %87 = load i32, i32* %6, align 4
  %88 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %89 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %88, i32 0, i32 46
  %90 = load i32, i32* %89, align 4
  %91 = icmp slt i32 %87, %90
  br i1 %91, label %92, label %102

; <label>:92:                                     ; preds = %86
  %93 = load i32, i32* %6, align 4
  %94 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i32 0, i32 %93
  %95 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %94, align 4
  %96 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %95, i32 0, i32 1
  %97 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %96, align 4
  %98 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %97, i32 0, i32 0
  store i32 0, i32* %98, align 4
  br label %99

; <label>:99:                                     ; preds = %92
  %100 = load i32, i32* %6, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %6, align 4
  br label %86

; <label>:102:                                    ; preds = %86
  store i32 0, i32* %5, align 4
  br label %103

; <label>:103:                                    ; preds = %129, %102
  %104 = load i32, i32* %5, align 4
  %105 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %106 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %105, i32 0, i32 45
  %107 = load i32, i32* %106, align 4
  %108 = icmp slt i32 %104, %107
  br i1 %108, label %109, label %132

; <label>:109:                                    ; preds = %103
  store i32 0, i32* %6, align 4
  br label %110

; <label>:110:                                    ; preds = %125, %109
  %111 = load i32, i32* %6, align 4
  %112 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %113 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %112, i32 0, i32 46
  %114 = load i32, i32* %113, align 4
  %115 = icmp slt i32 %111, %114
  br i1 %115, label %116, label %128

; <label>:116:                                    ; preds = %110
  %117 = load i32, i32* %5, align 4
  %118 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i32 0, i32 %117
  %119 = load i32, i32* %6, align 4
  %120 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %118, i32 0, i32 %119
  %121 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %120, align 4
  %122 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %121, i32 0, i32 1
  %123 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %122, align 4
  %124 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %123, i32 0, i32 0
  store i32 0, i32* %124, align 4
  br label %125

; <label>:125:                                    ; preds = %116
  %126 = load i32, i32* %6, align 4
  %127 = add nsw i32 %126, 1
  store i32 %127, i32* %6, align 4
  br label %110

; <label>:128:                                    ; preds = %110
  br label %129

; <label>:129:                                    ; preds = %128
  %130 = load i32, i32* %5, align 4
  %131 = add nsw i32 %130, 1
  store i32 %131, i32* %5, align 4
  br label %103

; <label>:132:                                    ; preds = %103
  %133 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %134 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %133, i32 0, i32 43
  %135 = load i32, i32* %134, align 4
  %136 = icmp eq i32 %135, 1
  br i1 %136, label %137, label %384

; <label>:137:                                    ; preds = %132
  %138 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 4
  %139 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %140 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %139, i32 0, i32 0
  %141 = load i32, i32* %140, align 4
  %142 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %138, i32 %141, i32 9)
  store %struct.BF_PartHolder* %142, %struct.BF_PartHolder** @frameSIPH, align 4
  %143 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %144 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %143, i32 0, i32 46
  %145 = load i32, i32* %144, align 4
  %146 = icmp eq i32 %145, 2
  br i1 %146, label %147, label %153

; <label>:147:                                    ; preds = %137
  %148 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 4
  %149 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %150 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %149, i32 0, i32 1
  %151 = load i32, i32* %150, align 4
  %152 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %148, i32 %151, i32 3)
  store %struct.BF_PartHolder* %152, %struct.BF_PartHolder** @frameSIPH, align 4
  br label %159

; <label>:153:                                    ; preds = %137
  %154 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 4
  %155 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %156 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %155, i32 0, i32 1
  %157 = load i32, i32* %156, align 4
  %158 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %154, i32 %157, i32 5)
  store %struct.BF_PartHolder* %158, %struct.BF_PartHolder** @frameSIPH, align 4
  br label %159

; <label>:159:                                    ; preds = %153, %147
  store i32 0, i32* %6, align 4
  br label %160

; <label>:160:                                    ; preds = %188, %159
  %161 = load i32, i32* %6, align 4
  %162 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %163 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %162, i32 0, i32 46
  %164 = load i32, i32* %163, align 4
  %165 = icmp slt i32 %161, %164
  br i1 %165, label %166, label %191

; <label>:166:                                    ; preds = %160
  store i32 0, i32* %7, align 4
  br label %167

; <label>:167:                                    ; preds = %184, %166
  %168 = load i32, i32* %7, align 4
  %169 = icmp slt i32 %168, 4
  br i1 %169, label %170, label %187

; <label>:170:                                    ; preds = %167
  %171 = load i32, i32* %6, align 4
  %172 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i32 0, i32 %171
  store %struct.BF_PartHolder** %172, %struct.BF_PartHolder*** %11, align 4
  %173 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %11, align 4
  %174 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %173, align 4
  %175 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %176 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %175, i32 0, i32 3
  %177 = load i32, i32* %6, align 4
  %178 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %176, i32 0, i32 %177
  %179 = load i32, i32* %7, align 4
  %180 = getelementptr inbounds [4 x i32], [4 x i32]* %178, i32 0, i32 %179
  %181 = load i32, i32* %180, align 4
  %182 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %174, i32 %181, i32 1)
  %183 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %11, align 4
  store %struct.BF_PartHolder* %182, %struct.BF_PartHolder** %183, align 4
  br label %184

; <label>:184:                                    ; preds = %170
  %185 = load i32, i32* %7, align 4
  %186 = add nsw i32 %185, 1
  store i32 %186, i32* %7, align 4
  br label %167

; <label>:187:                                    ; preds = %167
  br label %188

; <label>:188:                                    ; preds = %187
  %189 = load i32, i32* %6, align 4
  %190 = add nsw i32 %189, 1
  store i32 %190, i32* %6, align 4
  br label %160

; <label>:191:                                    ; preds = %160
  store i32 0, i32* %5, align 4
  br label %192

; <label>:192:                                    ; preds = %369, %191
  %193 = load i32, i32* %5, align 4
  %194 = icmp slt i32 %193, 2
  br i1 %194, label %195, label %372

; <label>:195:                                    ; preds = %192
  store i32 0, i32* %6, align 4
  br label %196

; <label>:196:                                    ; preds = %365, %195
  %197 = load i32, i32* %6, align 4
  %198 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %199 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %198, i32 0, i32 46
  %200 = load i32, i32* %199, align 4
  %201 = icmp slt i32 %197, %200
  br i1 %201, label %202, label %368

; <label>:202:                                    ; preds = %196
  %203 = load i32, i32* %5, align 4
  %204 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i32 0, i32 %203
  %205 = load i32, i32* %6, align 4
  %206 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %204, i32 0, i32 %205
  store %struct.BF_PartHolder** %206, %struct.BF_PartHolder*** %12, align 4
  %207 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %208 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %207, i32 0, i32 4
  %209 = load i32, i32* %5, align 4
  %210 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %208, i32 0, i32 %209
  %211 = getelementptr inbounds %struct.anon, %struct.anon* %210, i32 0, i32 0
  %212 = load i32, i32* %6, align 4
  %213 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %211, i32 0, i32 %212
  %214 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %213, i32 0, i32 0
  store %struct.gr_info* %214, %struct.gr_info** %13, align 4
  %215 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %216 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %215, align 4
  %217 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %218 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %217, i32 0, i32 0
  %219 = load i32, i32* %218, align 4
  %220 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %216, i32 %219, i32 12)
  %221 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %220, %struct.BF_PartHolder** %221, align 4
  %222 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %223 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %222, align 4
  %224 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %225 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %224, i32 0, i32 1
  %226 = load i32, i32* %225, align 4
  %227 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %223, i32 %226, i32 9)
  %228 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %227, %struct.BF_PartHolder** %228, align 4
  %229 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %230 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %229, align 4
  %231 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %232 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %231, i32 0, i32 3
  %233 = load i32, i32* %232, align 4
  %234 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %230, i32 %233, i32 8)
  %235 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %234, %struct.BF_PartHolder** %235, align 4
  %236 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %237 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %236, align 4
  %238 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %239 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %238, i32 0, i32 4
  %240 = load i32, i32* %239, align 4
  %241 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %237, i32 %240, i32 4)
  %242 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %241, %struct.BF_PartHolder** %242, align 4
  %243 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %244 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %243, align 4
  %245 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %246 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %245, i32 0, i32 5
  %247 = load i32, i32* %246, align 4
  %248 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %244, i32 %247, i32 1)
  %249 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %248, %struct.BF_PartHolder** %249, align 4
  %250 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %251 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %250, i32 0, i32 5
  %252 = load i32, i32* %251, align 4
  %253 = icmp ne i32 %252, 0
  br i1 %253, label %254, label %303

; <label>:254:                                    ; preds = %202
  %255 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %256 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %255, align 4
  %257 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %258 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %257, i32 0, i32 6
  %259 = load i32, i32* %258, align 4
  %260 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %256, i32 %259, i32 2)
  %261 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %260, %struct.BF_PartHolder** %261, align 4
  %262 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %263 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %262, align 4
  %264 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %265 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %264, i32 0, i32 7
  %266 = load i32, i32* %265, align 4
  %267 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %263, i32 %266, i32 1)
  %268 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %267, %struct.BF_PartHolder** %268, align 4
  store i32 0, i32* %8, align 4
  br label %269

; <label>:269:                                    ; preds = %282, %254
  %270 = load i32, i32* %8, align 4
  %271 = icmp slt i32 %270, 2
  br i1 %271, label %272, label %285

; <label>:272:                                    ; preds = %269
  %273 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %274 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %273, align 4
  %275 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %276 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %275, i32 0, i32 8
  %277 = load i32, i32* %8, align 4
  %278 = getelementptr inbounds [3 x i32], [3 x i32]* %276, i32 0, i32 %277
  %279 = load i32, i32* %278, align 4
  %280 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %274, i32 %279, i32 5)
  %281 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %280, %struct.BF_PartHolder** %281, align 4
  br label %282

; <label>:282:                                    ; preds = %272
  %283 = load i32, i32* %8, align 4
  %284 = add nsw i32 %283, 1
  store i32 %284, i32* %8, align 4
  br label %269

; <label>:285:                                    ; preds = %269
  store i32 0, i32* %9, align 4
  br label %286

; <label>:286:                                    ; preds = %299, %285
  %287 = load i32, i32* %9, align 4
  %288 = icmp slt i32 %287, 3
  br i1 %288, label %289, label %302

; <label>:289:                                    ; preds = %286
  %290 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %291 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %290, align 4
  %292 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %293 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %292, i32 0, i32 9
  %294 = load i32, i32* %9, align 4
  %295 = getelementptr inbounds [3 x i32], [3 x i32]* %293, i32 0, i32 %294
  %296 = load i32, i32* %295, align 4
  %297 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %291, i32 %296, i32 3)
  %298 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %297, %struct.BF_PartHolder** %298, align 4
  br label %299

; <label>:299:                                    ; preds = %289
  %300 = load i32, i32* %9, align 4
  %301 = add nsw i32 %300, 1
  store i32 %301, i32* %9, align 4
  br label %286

; <label>:302:                                    ; preds = %286
  br label %343

; <label>:303:                                    ; preds = %202
  %304 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %305 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %304, i32 0, i32 6
  %306 = load i32, i32* %305, align 4
  %307 = icmp eq i32 %306, 0
  br i1 %307, label %309, label %308

; <label>:308:                                    ; preds = %303
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.171, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 380, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__.encodeSideInfo, i32 0, i32 0))
  br label %309

; <label>:309:                                    ; preds = %308, %303
  %310 = phi i1 [ true, %303 ], [ false, %308 ]
  %311 = zext i1 %310 to i32
  store i32 0, i32* %8, align 4
  br label %312

; <label>:312:                                    ; preds = %325, %309
  %313 = load i32, i32* %8, align 4
  %314 = icmp slt i32 %313, 3
  br i1 %314, label %315, label %328

; <label>:315:                                    ; preds = %312
  %316 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %317 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %316, align 4
  %318 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %319 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %318, i32 0, i32 8
  %320 = load i32, i32* %8, align 4
  %321 = getelementptr inbounds [3 x i32], [3 x i32]* %319, i32 0, i32 %320
  %322 = load i32, i32* %321, align 4
  %323 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %317, i32 %322, i32 5)
  %324 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %323, %struct.BF_PartHolder** %324, align 4
  br label %325

; <label>:325:                                    ; preds = %315
  %326 = load i32, i32* %8, align 4
  %327 = add nsw i32 %326, 1
  store i32 %327, i32* %8, align 4
  br label %312

; <label>:328:                                    ; preds = %312
  %329 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %330 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %329, align 4
  %331 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %332 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %331, i32 0, i32 10
  %333 = load i32, i32* %332, align 4
  %334 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %330, i32 %333, i32 4)
  %335 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %334, %struct.BF_PartHolder** %335, align 4
  %336 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %337 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %336, align 4
  %338 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %339 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %338, i32 0, i32 11
  %340 = load i32, i32* %339, align 4
  %341 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %337, i32 %340, i32 3)
  %342 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %341, %struct.BF_PartHolder** %342, align 4
  br label %343

; <label>:343:                                    ; preds = %328, %302
  %344 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %345 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %344, align 4
  %346 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %347 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %346, i32 0, i32 12
  %348 = load i32, i32* %347, align 4
  %349 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %345, i32 %348, i32 1)
  %350 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %349, %struct.BF_PartHolder** %350, align 4
  %351 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %352 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %351, align 4
  %353 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %354 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %353, i32 0, i32 13
  %355 = load i32, i32* %354, align 4
  %356 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %352, i32 %355, i32 1)
  %357 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %356, %struct.BF_PartHolder** %357, align 4
  %358 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  %359 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %358, align 4
  %360 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %361 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %360, i32 0, i32 14
  %362 = load i32, i32* %361, align 4
  %363 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %359, i32 %362, i32 1)
  %364 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %12, align 4
  store %struct.BF_PartHolder* %363, %struct.BF_PartHolder** %364, align 4
  br label %365

; <label>:365:                                    ; preds = %343
  %366 = load i32, i32* %6, align 4
  %367 = add nsw i32 %366, 1
  store i32 %367, i32* %6, align 4
  br label %196

; <label>:368:                                    ; preds = %196
  br label %369

; <label>:369:                                    ; preds = %368
  %370 = load i32, i32* %5, align 4
  %371 = add nsw i32 %370, 1
  store i32 %371, i32* %5, align 4
  br label %192

; <label>:372:                                    ; preds = %192
  %373 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %374 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %373, i32 0, i32 46
  %375 = load i32, i32* %374, align 4
  %376 = icmp eq i32 %375, 2
  br i1 %376, label %377, label %380

; <label>:377:                                    ; preds = %372
  %378 = load i32, i32* %10, align 4
  %379 = add nsw i32 %378, 256
  store i32 %379, i32* %10, align 4
  br label %383

; <label>:380:                                    ; preds = %372
  %381 = load i32, i32* %10, align 4
  %382 = add nsw i32 %381, 136
  store i32 %382, i32* %10, align 4
  br label %383

; <label>:383:                                    ; preds = %380, %377
  br label %576

; <label>:384:                                    ; preds = %132
  %385 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 4
  %386 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %387 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %386, i32 0, i32 0
  %388 = load i32, i32* %387, align 4
  %389 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %385, i32 %388, i32 8)
  store %struct.BF_PartHolder* %389, %struct.BF_PartHolder** @frameSIPH, align 4
  %390 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %391 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %390, i32 0, i32 46
  %392 = load i32, i32* %391, align 4
  %393 = icmp eq i32 %392, 2
  br i1 %393, label %394, label %400

; <label>:394:                                    ; preds = %384
  %395 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 4
  %396 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %397 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %396, i32 0, i32 1
  %398 = load i32, i32* %397, align 4
  %399 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %395, i32 %398, i32 2)
  store %struct.BF_PartHolder* %399, %struct.BF_PartHolder** @frameSIPH, align 4
  br label %406

; <label>:400:                                    ; preds = %384
  %401 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 4
  %402 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %403 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %402, i32 0, i32 1
  %404 = load i32, i32* %403, align 4
  %405 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %401, i32 %404, i32 1)
  store %struct.BF_PartHolder* %405, %struct.BF_PartHolder** @frameSIPH, align 4
  br label %406

; <label>:406:                                    ; preds = %400, %394
  store i32 0, i32* %5, align 4
  store i32 0, i32* %6, align 4
  br label %407

; <label>:407:                                    ; preds = %561, %406
  %408 = load i32, i32* %6, align 4
  %409 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %410 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %409, i32 0, i32 46
  %411 = load i32, i32* %410, align 4
  %412 = icmp slt i32 %408, %411
  br i1 %412, label %413, label %564

; <label>:413:                                    ; preds = %407
  %414 = load i32, i32* %5, align 4
  %415 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i32 0, i32 %414
  %416 = load i32, i32* %6, align 4
  %417 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %415, i32 0, i32 %416
  store %struct.BF_PartHolder** %417, %struct.BF_PartHolder*** %14, align 4
  %418 = load %struct.III_side_info_t*, %struct.III_side_info_t** %4, align 4
  %419 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %418, i32 0, i32 4
  %420 = load i32, i32* %5, align 4
  %421 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %419, i32 0, i32 %420
  %422 = getelementptr inbounds %struct.anon, %struct.anon* %421, i32 0, i32 0
  %423 = load i32, i32* %6, align 4
  %424 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %422, i32 0, i32 %423
  %425 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %424, i32 0, i32 0
  store %struct.gr_info* %425, %struct.gr_info** %15, align 4
  %426 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %427 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %426, align 4
  %428 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %429 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %428, i32 0, i32 0
  %430 = load i32, i32* %429, align 4
  %431 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %427, i32 %430, i32 12)
  %432 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %431, %struct.BF_PartHolder** %432, align 4
  %433 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %434 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %433, align 4
  %435 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %436 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %435, i32 0, i32 1
  %437 = load i32, i32* %436, align 4
  %438 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %434, i32 %437, i32 9)
  %439 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %438, %struct.BF_PartHolder** %439, align 4
  %440 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %441 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %440, align 4
  %442 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %443 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %442, i32 0, i32 3
  %444 = load i32, i32* %443, align 4
  %445 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %441, i32 %444, i32 8)
  %446 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %445, %struct.BF_PartHolder** %446, align 4
  %447 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %448 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %447, align 4
  %449 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %450 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %449, i32 0, i32 4
  %451 = load i32, i32* %450, align 4
  %452 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %448, i32 %451, i32 9)
  %453 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %452, %struct.BF_PartHolder** %453, align 4
  %454 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %455 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %454, align 4
  %456 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %457 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %456, i32 0, i32 5
  %458 = load i32, i32* %457, align 4
  %459 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %455, i32 %458, i32 1)
  %460 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %459, %struct.BF_PartHolder** %460, align 4
  %461 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %462 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %461, i32 0, i32 5
  %463 = load i32, i32* %462, align 4
  %464 = icmp ne i32 %463, 0
  br i1 %464, label %465, label %514

; <label>:465:                                    ; preds = %413
  %466 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %467 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %466, align 4
  %468 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %469 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %468, i32 0, i32 6
  %470 = load i32, i32* %469, align 4
  %471 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %467, i32 %470, i32 2)
  %472 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %471, %struct.BF_PartHolder** %472, align 4
  %473 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %474 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %473, align 4
  %475 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %476 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %475, i32 0, i32 7
  %477 = load i32, i32* %476, align 4
  %478 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %474, i32 %477, i32 1)
  %479 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %478, %struct.BF_PartHolder** %479, align 4
  store i32 0, i32* %8, align 4
  br label %480

; <label>:480:                                    ; preds = %493, %465
  %481 = load i32, i32* %8, align 4
  %482 = icmp slt i32 %481, 2
  br i1 %482, label %483, label %496

; <label>:483:                                    ; preds = %480
  %484 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %485 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %484, align 4
  %486 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %487 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %486, i32 0, i32 8
  %488 = load i32, i32* %8, align 4
  %489 = getelementptr inbounds [3 x i32], [3 x i32]* %487, i32 0, i32 %488
  %490 = load i32, i32* %489, align 4
  %491 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %485, i32 %490, i32 5)
  %492 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %491, %struct.BF_PartHolder** %492, align 4
  br label %493

; <label>:493:                                    ; preds = %483
  %494 = load i32, i32* %8, align 4
  %495 = add nsw i32 %494, 1
  store i32 %495, i32* %8, align 4
  br label %480

; <label>:496:                                    ; preds = %480
  store i32 0, i32* %9, align 4
  br label %497

; <label>:497:                                    ; preds = %510, %496
  %498 = load i32, i32* %9, align 4
  %499 = icmp slt i32 %498, 3
  br i1 %499, label %500, label %513

; <label>:500:                                    ; preds = %497
  %501 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %502 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %501, align 4
  %503 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %504 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %503, i32 0, i32 9
  %505 = load i32, i32* %9, align 4
  %506 = getelementptr inbounds [3 x i32], [3 x i32]* %504, i32 0, i32 %505
  %507 = load i32, i32* %506, align 4
  %508 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %502, i32 %507, i32 3)
  %509 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %508, %struct.BF_PartHolder** %509, align 4
  br label %510

; <label>:510:                                    ; preds = %500
  %511 = load i32, i32* %9, align 4
  %512 = add nsw i32 %511, 1
  store i32 %512, i32* %9, align 4
  br label %497

; <label>:513:                                    ; preds = %497
  br label %546

; <label>:514:                                    ; preds = %413
  store i32 0, i32* %8, align 4
  br label %515

; <label>:515:                                    ; preds = %528, %514
  %516 = load i32, i32* %8, align 4
  %517 = icmp slt i32 %516, 3
  br i1 %517, label %518, label %531

; <label>:518:                                    ; preds = %515
  %519 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %520 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %519, align 4
  %521 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %522 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %521, i32 0, i32 8
  %523 = load i32, i32* %8, align 4
  %524 = getelementptr inbounds [3 x i32], [3 x i32]* %522, i32 0, i32 %523
  %525 = load i32, i32* %524, align 4
  %526 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %520, i32 %525, i32 5)
  %527 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %526, %struct.BF_PartHolder** %527, align 4
  br label %528

; <label>:528:                                    ; preds = %518
  %529 = load i32, i32* %8, align 4
  %530 = add nsw i32 %529, 1
  store i32 %530, i32* %8, align 4
  br label %515

; <label>:531:                                    ; preds = %515
  %532 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %533 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %532, align 4
  %534 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %535 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %534, i32 0, i32 10
  %536 = load i32, i32* %535, align 4
  %537 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %533, i32 %536, i32 4)
  %538 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %537, %struct.BF_PartHolder** %538, align 4
  %539 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %540 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %539, align 4
  %541 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %542 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %541, i32 0, i32 11
  %543 = load i32, i32* %542, align 4
  %544 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %540, i32 %543, i32 3)
  %545 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %544, %struct.BF_PartHolder** %545, align 4
  br label %546

; <label>:546:                                    ; preds = %531, %513
  %547 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %548 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %547, align 4
  %549 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %550 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %549, i32 0, i32 13
  %551 = load i32, i32* %550, align 4
  %552 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %548, i32 %551, i32 1)
  %553 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %552, %struct.BF_PartHolder** %553, align 4
  %554 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %555 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %554, align 4
  %556 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %557 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %556, i32 0, i32 14
  %558 = load i32, i32* %557, align 4
  %559 = call arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder* %555, i32 %558, i32 1)
  %560 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %559, %struct.BF_PartHolder** %560, align 4
  br label %561

; <label>:561:                                    ; preds = %546
  %562 = load i32, i32* %6, align 4
  %563 = add nsw i32 %562, 1
  store i32 %563, i32* %6, align 4
  br label %407

; <label>:564:                                    ; preds = %407
  %565 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %566 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %565, i32 0, i32 46
  %567 = load i32, i32* %566, align 4
  %568 = icmp eq i32 %567, 2
  br i1 %568, label %569, label %572

; <label>:569:                                    ; preds = %564
  %570 = load i32, i32* %10, align 4
  %571 = add nsw i32 %570, 136
  store i32 %571, i32* %10, align 4
  br label %575

; <label>:572:                                    ; preds = %564
  %573 = load i32, i32* %10, align 4
  %574 = add nsw i32 %573, 72
  store i32 %574, i32* %10, align 4
  br label %575

; <label>:575:                                    ; preds = %572, %569
  br label %576

; <label>:576:                                    ; preds = %575, %383
  %577 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %578 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %577, i32 0, i32 14
  %579 = load i32, i32* %578, align 4
  %580 = icmp ne i32 %579, 0
  br i1 %580, label %581, label %587

; <label>:581:                                    ; preds = %576
  %582 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 4
  %583 = load i32, i32* @crc, align 4
  %584 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %582, i32 %583, i32 16)
  store %struct.BF_PartHolder* %584, %struct.BF_PartHolder** @headerPH, align 4
  %585 = load i32, i32* %10, align 4
  %586 = add nsw i32 %585, 16
  store i32 %586, i32* %10, align 4
  br label %587

; <label>:587:                                    ; preds = %581, %576
  %588 = load i32, i32* %10, align 4
  ret i32 %588
}

; Function Attrs: nounwind
define internal arm_aapcscc void @encodeMainData(%struct.lame_global_flags*, [2 x [576 x i32]]*, %struct.III_side_info_t*, [2 x %struct.III_scalefac_t]*) #0 {
  %5 = alloca %struct.lame_global_flags*, align 4
  %6 = alloca [2 x [576 x i32]]*, align 4
  %7 = alloca %struct.III_side_info_t*, align 4
  %8 = alloca [2 x %struct.III_scalefac_t]*, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.BF_PartHolder**, align 4
  %15 = alloca %struct.gr_info*, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32*, align 4
  %19 = alloca %struct.BF_PartHolder**, align 4
  %20 = alloca %struct.gr_info*, align 4
  %21 = alloca i32*, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %5, align 4
  store [2 x [576 x i32]]* %1, [2 x [576 x i32]]** %6, align 4
  store %struct.III_side_info_t* %2, %struct.III_side_info_t** %7, align 4
  store [2 x %struct.III_scalefac_t]* %3, [2 x %struct.III_scalefac_t]** %8, align 4
  store i32 0, i32* %10, align 4
  br label %27

; <label>:27:                                     ; preds = %53, %4
  %28 = load i32, i32* %10, align 4
  %29 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %30 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %29, i32 0, i32 45
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %28, %31
  br i1 %32, label %33, label %56

; <label>:33:                                     ; preds = %27
  store i32 0, i32* %11, align 4
  br label %34

; <label>:34:                                     ; preds = %49, %33
  %35 = load i32, i32* %11, align 4
  %36 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %37 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %36, i32 0, i32 46
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %35, %38
  br i1 %39, label %40, label %52

; <label>:40:                                     ; preds = %34
  %41 = load i32, i32* %10, align 4
  %42 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i32 0, i32 %41
  %43 = load i32, i32* %11, align 4
  %44 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %42, i32 0, i32 %43
  %45 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %44, align 4
  %46 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %45, i32 0, i32 1
  %47 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %46, align 4
  %48 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %47, i32 0, i32 0
  store i32 0, i32* %48, align 4
  br label %49

; <label>:49:                                     ; preds = %40
  %50 = load i32, i32* %11, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %11, align 4
  br label %34

; <label>:52:                                     ; preds = %34
  br label %53

; <label>:53:                                     ; preds = %52
  %54 = load i32, i32* %10, align 4
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %10, align 4
  br label %27

; <label>:56:                                     ; preds = %27
  store i32 0, i32* %10, align 4
  br label %57

; <label>:57:                                     ; preds = %83, %56
  %58 = load i32, i32* %10, align 4
  %59 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %60 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %59, i32 0, i32 45
  %61 = load i32, i32* %60, align 4
  %62 = icmp slt i32 %58, %61
  br i1 %62, label %63, label %86

; <label>:63:                                     ; preds = %57
  store i32 0, i32* %11, align 4
  br label %64

; <label>:64:                                     ; preds = %79, %63
  %65 = load i32, i32* %11, align 4
  %66 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %67 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %66, i32 0, i32 46
  %68 = load i32, i32* %67, align 4
  %69 = icmp slt i32 %65, %68
  br i1 %69, label %70, label %82

; <label>:70:                                     ; preds = %64
  %71 = load i32, i32* %10, align 4
  %72 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i32 0, i32 %71
  %73 = load i32, i32* %11, align 4
  %74 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %72, i32 0, i32 %73
  %75 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %74, align 4
  %76 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %75, i32 0, i32 1
  %77 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %76, align 4
  %78 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %77, i32 0, i32 0
  store i32 0, i32* %78, align 4
  br label %79

; <label>:79:                                     ; preds = %70
  %80 = load i32, i32* %11, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %11, align 4
  br label %64

; <label>:82:                                     ; preds = %64
  br label %83

; <label>:83:                                     ; preds = %82
  %84 = load i32, i32* %10, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %10, align 4
  br label %57

; <label>:86:                                     ; preds = %57
  %87 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %88 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %87, i32 0, i32 43
  %89 = load i32, i32* %88, align 4
  %90 = icmp eq i32 %89, 1
  br i1 %90, label %91, label %352

; <label>:91:                                     ; preds = %86
  store i32 0, i32* %10, align 4
  br label %92

; <label>:92:                                     ; preds = %348, %91
  %93 = load i32, i32* %10, align 4
  %94 = icmp slt i32 %93, 2
  br i1 %94, label %95, label %351

; <label>:95:                                     ; preds = %92
  store i32 0, i32* %11, align 4
  br label %96

; <label>:96:                                     ; preds = %344, %95
  %97 = load i32, i32* %11, align 4
  %98 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %99 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %98, i32 0, i32 46
  %100 = load i32, i32* %99, align 4
  %101 = icmp slt i32 %97, %100
  br i1 %101, label %102, label %347

; <label>:102:                                    ; preds = %96
  %103 = load i32, i32* %10, align 4
  %104 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i32 0, i32 %103
  %105 = load i32, i32* %11, align 4
  %106 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %104, i32 0, i32 %105
  store %struct.BF_PartHolder** %106, %struct.BF_PartHolder*** %14, align 4
  %107 = load %struct.III_side_info_t*, %struct.III_side_info_t** %7, align 4
  %108 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %107, i32 0, i32 4
  %109 = load i32, i32* %10, align 4
  %110 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %108, i32 0, i32 %109
  %111 = getelementptr inbounds %struct.anon, %struct.anon* %110, i32 0, i32 0
  %112 = load i32, i32* %11, align 4
  %113 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %111, i32 0, i32 %112
  %114 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %113, i32 0, i32 0
  store %struct.gr_info* %114, %struct.gr_info** %15, align 4
  %115 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %116 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %115, i32 0, i32 4
  %117 = load i32, i32* %116, align 4
  %118 = getelementptr inbounds [16 x i32], [16 x i32]* @slen1_tab, i32 0, i32 %117
  %119 = load i32, i32* %118, align 4
  store i32 %119, i32* %16, align 4
  %120 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %121 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %120, i32 0, i32 4
  %122 = load i32, i32* %121, align 4
  %123 = getelementptr inbounds [16 x i32], [16 x i32]* @slen2_tab, i32 0, i32 %122
  %124 = load i32, i32* %123, align 4
  store i32 %124, i32* %17, align 4
  %125 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %6, align 4
  %126 = load i32, i32* %10, align 4
  %127 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %125, i32 %126
  %128 = load i32, i32* %11, align 4
  %129 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %127, i32 0, i32 %128
  %130 = getelementptr inbounds [576 x i32], [576 x i32]* %129, i32 0, i32 0
  store i32* %130, i32** %18, align 4
  %131 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  %132 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %131, i32 0, i32 6
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 2
  br i1 %134, label %135, label %200

; <label>:135:                                    ; preds = %102
  store i32 0, i32* %12, align 4
  br label %136

; <label>:136:                                    ; preds = %164, %135
  %137 = load i32, i32* %12, align 4
  %138 = icmp slt i32 %137, 6
  br i1 %138, label %139, label %167

; <label>:139:                                    ; preds = %136
  store i32 0, i32* %13, align 4
  br label %140

; <label>:140:                                    ; preds = %160, %139
  %141 = load i32, i32* %13, align 4
  %142 = icmp slt i32 %141, 3
  br i1 %142, label %143, label %163

; <label>:143:                                    ; preds = %140
  %144 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %145 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %144, align 4
  %146 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %8, align 4
  %147 = load i32, i32* %10, align 4
  %148 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %146, i32 %147
  %149 = load i32, i32* %11, align 4
  %150 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %148, i32 0, i32 %149
  %151 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %150, i32 0, i32 1
  %152 = load i32, i32* %12, align 4
  %153 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %151, i32 0, i32 %152
  %154 = load i32, i32* %13, align 4
  %155 = getelementptr inbounds [3 x i32], [3 x i32]* %153, i32 0, i32 %154
  %156 = load i32, i32* %155, align 4
  %157 = load i32, i32* %16, align 4
  %158 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %145, i32 %156, i32 %157)
  %159 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %158, %struct.BF_PartHolder** %159, align 4
  br label %160

; <label>:160:                                    ; preds = %143
  %161 = load i32, i32* %13, align 4
  %162 = add nsw i32 %161, 1
  store i32 %162, i32* %13, align 4
  br label %140

; <label>:163:                                    ; preds = %140
  br label %164

; <label>:164:                                    ; preds = %163
  %165 = load i32, i32* %12, align 4
  %166 = add nsw i32 %165, 1
  store i32 %166, i32* %12, align 4
  br label %136

; <label>:167:                                    ; preds = %136
  store i32 6, i32* %12, align 4
  br label %168

; <label>:168:                                    ; preds = %196, %167
  %169 = load i32, i32* %12, align 4
  %170 = icmp slt i32 %169, 12
  br i1 %170, label %171, label %199

; <label>:171:                                    ; preds = %168
  store i32 0, i32* %13, align 4
  br label %172

; <label>:172:                                    ; preds = %192, %171
  %173 = load i32, i32* %13, align 4
  %174 = icmp slt i32 %173, 3
  br i1 %174, label %175, label %195

; <label>:175:                                    ; preds = %172
  %176 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %177 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %176, align 4
  %178 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %8, align 4
  %179 = load i32, i32* %10, align 4
  %180 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %178, i32 %179
  %181 = load i32, i32* %11, align 4
  %182 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %180, i32 0, i32 %181
  %183 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %182, i32 0, i32 1
  %184 = load i32, i32* %12, align 4
  %185 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %183, i32 0, i32 %184
  %186 = load i32, i32* %13, align 4
  %187 = getelementptr inbounds [3 x i32], [3 x i32]* %185, i32 0, i32 %186
  %188 = load i32, i32* %187, align 4
  %189 = load i32, i32* %17, align 4
  %190 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %177, i32 %188, i32 %189)
  %191 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %190, %struct.BF_PartHolder** %191, align 4
  br label %192

; <label>:192:                                    ; preds = %175
  %193 = load i32, i32* %13, align 4
  %194 = add nsw i32 %193, 1
  store i32 %194, i32* %13, align 4
  br label %172

; <label>:195:                                    ; preds = %172
  br label %196

; <label>:196:                                    ; preds = %195
  %197 = load i32, i32* %12, align 4
  %198 = add nsw i32 %197, 1
  store i32 %198, i32* %12, align 4
  br label %168

; <label>:199:                                    ; preds = %168
  br label %337

; <label>:200:                                    ; preds = %102
  %201 = load i32, i32* %10, align 4
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %211, label %203

; <label>:203:                                    ; preds = %200
  %204 = load %struct.III_side_info_t*, %struct.III_side_info_t** %7, align 4
  %205 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %204, i32 0, i32 3
  %206 = load i32, i32* %11, align 4
  %207 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %205, i32 0, i32 %206
  %208 = getelementptr inbounds [4 x i32], [4 x i32]* %207, i32 0, i32 0
  %209 = load i32, i32* %208, align 4
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %234

; <label>:211:                                    ; preds = %203, %200
  store i32 0, i32* %12, align 4
  br label %212

; <label>:212:                                    ; preds = %230, %211
  %213 = load i32, i32* %12, align 4
  %214 = icmp slt i32 %213, 6
  br i1 %214, label %215, label %233

; <label>:215:                                    ; preds = %212
  %216 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %217 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %216, align 4
  %218 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %8, align 4
  %219 = load i32, i32* %10, align 4
  %220 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %218, i32 %219
  %221 = load i32, i32* %11, align 4
  %222 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %220, i32 0, i32 %221
  %223 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %222, i32 0, i32 0
  %224 = load i32, i32* %12, align 4
  %225 = getelementptr inbounds [22 x i32], [22 x i32]* %223, i32 0, i32 %224
  %226 = load i32, i32* %225, align 4
  %227 = load i32, i32* %16, align 4
  %228 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %217, i32 %226, i32 %227)
  %229 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %228, %struct.BF_PartHolder** %229, align 4
  br label %230

; <label>:230:                                    ; preds = %215
  %231 = load i32, i32* %12, align 4
  %232 = add nsw i32 %231, 1
  store i32 %232, i32* %12, align 4
  br label %212

; <label>:233:                                    ; preds = %212
  br label %234

; <label>:234:                                    ; preds = %233, %203
  %235 = load i32, i32* %10, align 4
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %245, label %237

; <label>:237:                                    ; preds = %234
  %238 = load %struct.III_side_info_t*, %struct.III_side_info_t** %7, align 4
  %239 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %238, i32 0, i32 3
  %240 = load i32, i32* %11, align 4
  %241 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %239, i32 0, i32 %240
  %242 = getelementptr inbounds [4 x i32], [4 x i32]* %241, i32 0, i32 1
  %243 = load i32, i32* %242, align 4
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %245, label %268

; <label>:245:                                    ; preds = %237, %234
  store i32 6, i32* %12, align 4
  br label %246

; <label>:246:                                    ; preds = %264, %245
  %247 = load i32, i32* %12, align 4
  %248 = icmp slt i32 %247, 11
  br i1 %248, label %249, label %267

; <label>:249:                                    ; preds = %246
  %250 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %251 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %250, align 4
  %252 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %8, align 4
  %253 = load i32, i32* %10, align 4
  %254 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %252, i32 %253
  %255 = load i32, i32* %11, align 4
  %256 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %254, i32 0, i32 %255
  %257 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %256, i32 0, i32 0
  %258 = load i32, i32* %12, align 4
  %259 = getelementptr inbounds [22 x i32], [22 x i32]* %257, i32 0, i32 %258
  %260 = load i32, i32* %259, align 4
  %261 = load i32, i32* %16, align 4
  %262 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %251, i32 %260, i32 %261)
  %263 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %262, %struct.BF_PartHolder** %263, align 4
  br label %264

; <label>:264:                                    ; preds = %249
  %265 = load i32, i32* %12, align 4
  %266 = add nsw i32 %265, 1
  store i32 %266, i32* %12, align 4
  br label %246

; <label>:267:                                    ; preds = %246
  br label %268

; <label>:268:                                    ; preds = %267, %237
  %269 = load i32, i32* %10, align 4
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %279, label %271

; <label>:271:                                    ; preds = %268
  %272 = load %struct.III_side_info_t*, %struct.III_side_info_t** %7, align 4
  %273 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %272, i32 0, i32 3
  %274 = load i32, i32* %11, align 4
  %275 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %273, i32 0, i32 %274
  %276 = getelementptr inbounds [4 x i32], [4 x i32]* %275, i32 0, i32 2
  %277 = load i32, i32* %276, align 4
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %279, label %302

; <label>:279:                                    ; preds = %271, %268
  store i32 11, i32* %12, align 4
  br label %280

; <label>:280:                                    ; preds = %298, %279
  %281 = load i32, i32* %12, align 4
  %282 = icmp slt i32 %281, 16
  br i1 %282, label %283, label %301

; <label>:283:                                    ; preds = %280
  %284 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %285 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %284, align 4
  %286 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %8, align 4
  %287 = load i32, i32* %10, align 4
  %288 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %286, i32 %287
  %289 = load i32, i32* %11, align 4
  %290 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %288, i32 0, i32 %289
  %291 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %290, i32 0, i32 0
  %292 = load i32, i32* %12, align 4
  %293 = getelementptr inbounds [22 x i32], [22 x i32]* %291, i32 0, i32 %292
  %294 = load i32, i32* %293, align 4
  %295 = load i32, i32* %17, align 4
  %296 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %285, i32 %294, i32 %295)
  %297 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %296, %struct.BF_PartHolder** %297, align 4
  br label %298

; <label>:298:                                    ; preds = %283
  %299 = load i32, i32* %12, align 4
  %300 = add nsw i32 %299, 1
  store i32 %300, i32* %12, align 4
  br label %280

; <label>:301:                                    ; preds = %280
  br label %302

; <label>:302:                                    ; preds = %301, %271
  %303 = load i32, i32* %10, align 4
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %313, label %305

; <label>:305:                                    ; preds = %302
  %306 = load %struct.III_side_info_t*, %struct.III_side_info_t** %7, align 4
  %307 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %306, i32 0, i32 3
  %308 = load i32, i32* %11, align 4
  %309 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %307, i32 0, i32 %308
  %310 = getelementptr inbounds [4 x i32], [4 x i32]* %309, i32 0, i32 3
  %311 = load i32, i32* %310, align 4
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %313, label %336

; <label>:313:                                    ; preds = %305, %302
  store i32 16, i32* %12, align 4
  br label %314

; <label>:314:                                    ; preds = %332, %313
  %315 = load i32, i32* %12, align 4
  %316 = icmp slt i32 %315, 21
  br i1 %316, label %317, label %335

; <label>:317:                                    ; preds = %314
  %318 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  %319 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %318, align 4
  %320 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %8, align 4
  %321 = load i32, i32* %10, align 4
  %322 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %320, i32 %321
  %323 = load i32, i32* %11, align 4
  %324 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %322, i32 0, i32 %323
  %325 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %324, i32 0, i32 0
  %326 = load i32, i32* %12, align 4
  %327 = getelementptr inbounds [22 x i32], [22 x i32]* %325, i32 0, i32 %326
  %328 = load i32, i32* %327, align 4
  %329 = load i32, i32* %17, align 4
  %330 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %319, i32 %328, i32 %329)
  %331 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %14, align 4
  store %struct.BF_PartHolder* %330, %struct.BF_PartHolder** %331, align 4
  br label %332

; <label>:332:                                    ; preds = %317
  %333 = load i32, i32* %12, align 4
  %334 = add nsw i32 %333, 1
  store i32 %334, i32* %12, align 4
  br label %314

; <label>:335:                                    ; preds = %314
  br label %336

; <label>:336:                                    ; preds = %335, %305
  br label %337

; <label>:337:                                    ; preds = %336, %199
  %338 = load i32, i32* %10, align 4
  %339 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i32 0, i32 %338
  %340 = load i32, i32* %11, align 4
  %341 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %339, i32 0, i32 %340
  %342 = load i32*, i32** %18, align 4
  %343 = load %struct.gr_info*, %struct.gr_info** %15, align 4
  call arm_aapcscc void @Huffmancodebits(%struct.BF_PartHolder** %341, i32* %342, %struct.gr_info* %343)
  br label %344

; <label>:344:                                    ; preds = %337
  %345 = load i32, i32* %11, align 4
  %346 = add nsw i32 %345, 1
  store i32 %346, i32* %11, align 4
  br label %96

; <label>:347:                                    ; preds = %96
  br label %348

; <label>:348:                                    ; preds = %347
  %349 = load i32, i32* %10, align 4
  %350 = add nsw i32 %349, 1
  store i32 %350, i32* %10, align 4
  br label %92

; <label>:351:                                    ; preds = %92
  br label %502

; <label>:352:                                    ; preds = %86
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  br label %353

; <label>:353:                                    ; preds = %498, %352
  %354 = load i32, i32* %11, align 4
  %355 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %356 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %355, i32 0, i32 46
  %357 = load i32, i32* %356, align 4
  %358 = icmp slt i32 %354, %357
  br i1 %358, label %359, label %501

; <label>:359:                                    ; preds = %353
  %360 = load i32, i32* %10, align 4
  %361 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i32 0, i32 %360
  %362 = load i32, i32* %11, align 4
  %363 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %361, i32 0, i32 %362
  store %struct.BF_PartHolder** %363, %struct.BF_PartHolder*** %19, align 4
  %364 = load %struct.III_side_info_t*, %struct.III_side_info_t** %7, align 4
  %365 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %364, i32 0, i32 4
  %366 = load i32, i32* %10, align 4
  %367 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %365, i32 0, i32 %366
  %368 = getelementptr inbounds %struct.anon, %struct.anon* %367, i32 0, i32 0
  %369 = load i32, i32* %11, align 4
  %370 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %368, i32 0, i32 %369
  %371 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %370, i32 0, i32 0
  store %struct.gr_info* %371, %struct.gr_info** %20, align 4
  %372 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %6, align 4
  %373 = load i32, i32* %10, align 4
  %374 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %372, i32 %373
  %375 = load i32, i32* %11, align 4
  %376 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %374, i32 0, i32 %375
  %377 = getelementptr inbounds [576 x i32], [576 x i32]* %376, i32 0, i32 0
  store i32* %377, i32** %21, align 4
  %378 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %379 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %378, i32 0, i32 19
  %380 = load i32*, i32** %379, align 4
  %381 = icmp ne i32* %380, null
  br i1 %381, label %383, label %382

; <label>:382:                                    ; preds = %359
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7.159, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 236, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__.encodeMainData, i32 0, i32 0))
  br label %383

; <label>:383:                                    ; preds = %382, %359
  %384 = phi i1 [ true, %359 ], [ false, %382 ]
  %385 = zext i1 %384 to i32
  %386 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %387 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %386, i32 0, i32 6
  %388 = load i32, i32* %387, align 4
  %389 = icmp eq i32 %388, 2
  br i1 %389, label %390, label %446

; <label>:390:                                    ; preds = %383
  store i32 0, i32* %12, align 4
  store i32 0, i32* %22, align 4
  br label %391

; <label>:391:                                    ; preds = %442, %390
  %392 = load i32, i32* %22, align 4
  %393 = icmp slt i32 %392, 4
  br i1 %393, label %394, label %445

; <label>:394:                                    ; preds = %391
  %395 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %396 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %395, i32 0, i32 19
  %397 = load i32*, i32** %396, align 4
  %398 = load i32, i32* %22, align 4
  %399 = getelementptr inbounds i32, i32* %397, i32 %398
  %400 = load i32, i32* %399, align 4
  %401 = udiv i32 %400, 3
  store i32 %401, i32* %23, align 4
  %402 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %403 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %402, i32 0, i32 20
  %404 = load i32, i32* %22, align 4
  %405 = getelementptr inbounds [4 x i32], [4 x i32]* %403, i32 0, i32 %404
  %406 = load i32, i32* %405, align 4
  store i32 %406, i32* %24, align 4
  store i32 0, i32* %9, align 4
  br label %407

; <label>:407:                                    ; preds = %436, %394
  %408 = load i32, i32* %9, align 4
  %409 = load i32, i32* %23, align 4
  %410 = icmp slt i32 %408, %409
  br i1 %410, label %411, label %441

; <label>:411:                                    ; preds = %407
  store i32 0, i32* %13, align 4
  br label %412

; <label>:412:                                    ; preds = %432, %411
  %413 = load i32, i32* %13, align 4
  %414 = icmp slt i32 %413, 3
  br i1 %414, label %415, label %435

; <label>:415:                                    ; preds = %412
  %416 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %19, align 4
  %417 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %416, align 4
  %418 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %8, align 4
  %419 = load i32, i32* %10, align 4
  %420 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %418, i32 %419
  %421 = load i32, i32* %11, align 4
  %422 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %420, i32 0, i32 %421
  %423 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %422, i32 0, i32 1
  %424 = load i32, i32* %12, align 4
  %425 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %423, i32 0, i32 %424
  %426 = load i32, i32* %13, align 4
  %427 = getelementptr inbounds [3 x i32], [3 x i32]* %425, i32 0, i32 %426
  %428 = load i32, i32* %427, align 4
  %429 = load i32, i32* %24, align 4
  %430 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %417, i32 %428, i32 %429)
  %431 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %19, align 4
  store %struct.BF_PartHolder* %430, %struct.BF_PartHolder** %431, align 4
  br label %432

; <label>:432:                                    ; preds = %415
  %433 = load i32, i32* %13, align 4
  %434 = add nsw i32 %433, 1
  store i32 %434, i32* %13, align 4
  br label %412

; <label>:435:                                    ; preds = %412
  br label %436

; <label>:436:                                    ; preds = %435
  %437 = load i32, i32* %9, align 4
  %438 = add nsw i32 %437, 1
  store i32 %438, i32* %9, align 4
  %439 = load i32, i32* %12, align 4
  %440 = add nsw i32 %439, 1
  store i32 %440, i32* %12, align 4
  br label %407

; <label>:441:                                    ; preds = %407
  br label %442

; <label>:442:                                    ; preds = %441
  %443 = load i32, i32* %22, align 4
  %444 = add nsw i32 %443, 1
  store i32 %444, i32* %22, align 4
  br label %391

; <label>:445:                                    ; preds = %391
  br label %491

; <label>:446:                                    ; preds = %383
  store i32 0, i32* %12, align 4
  store i32 0, i32* %22, align 4
  br label %447

; <label>:447:                                    ; preds = %487, %446
  %448 = load i32, i32* %22, align 4
  %449 = icmp slt i32 %448, 4
  br i1 %449, label %450, label %490

; <label>:450:                                    ; preds = %447
  %451 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %452 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %451, i32 0, i32 19
  %453 = load i32*, i32** %452, align 4
  %454 = load i32, i32* %22, align 4
  %455 = getelementptr inbounds i32, i32* %453, i32 %454
  %456 = load i32, i32* %455, align 4
  store i32 %456, i32* %25, align 4
  %457 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %458 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %457, i32 0, i32 20
  %459 = load i32, i32* %22, align 4
  %460 = getelementptr inbounds [4 x i32], [4 x i32]* %458, i32 0, i32 %459
  %461 = load i32, i32* %460, align 4
  store i32 %461, i32* %26, align 4
  store i32 0, i32* %9, align 4
  br label %462

; <label>:462:                                    ; preds = %481, %450
  %463 = load i32, i32* %9, align 4
  %464 = load i32, i32* %25, align 4
  %465 = icmp slt i32 %463, %464
  br i1 %465, label %466, label %486

; <label>:466:                                    ; preds = %462
  %467 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %19, align 4
  %468 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %467, align 4
  %469 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %8, align 4
  %470 = load i32, i32* %10, align 4
  %471 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %469, i32 %470
  %472 = load i32, i32* %11, align 4
  %473 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %471, i32 0, i32 %472
  %474 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %473, i32 0, i32 0
  %475 = load i32, i32* %12, align 4
  %476 = getelementptr inbounds [22 x i32], [22 x i32]* %474, i32 0, i32 %475
  %477 = load i32, i32* %476, align 4
  %478 = load i32, i32* %26, align 4
  %479 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %468, i32 %477, i32 %478)
  %480 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %19, align 4
  store %struct.BF_PartHolder* %479, %struct.BF_PartHolder** %480, align 4
  br label %481

; <label>:481:                                    ; preds = %466
  %482 = load i32, i32* %9, align 4
  %483 = add nsw i32 %482, 1
  store i32 %483, i32* %9, align 4
  %484 = load i32, i32* %12, align 4
  %485 = add nsw i32 %484, 1
  store i32 %485, i32* %12, align 4
  br label %462

; <label>:486:                                    ; preds = %462
  br label %487

; <label>:487:                                    ; preds = %486
  %488 = load i32, i32* %22, align 4
  %489 = add nsw i32 %488, 1
  store i32 %489, i32* %22, align 4
  br label %447

; <label>:490:                                    ; preds = %447
  br label %491

; <label>:491:                                    ; preds = %490, %445
  %492 = load i32, i32* %10, align 4
  %493 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i32 0, i32 %492
  %494 = load i32, i32* %11, align 4
  %495 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %493, i32 0, i32 %494
  %496 = load i32*, i32** %21, align 4
  %497 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  call arm_aapcscc void @Huffmancodebits(%struct.BF_PartHolder** %495, i32* %496, %struct.gr_info* %497)
  br label %498

; <label>:498:                                    ; preds = %491
  %499 = load i32, i32* %11, align 4
  %500 = add nsw i32 %499, 1
  store i32 %500, i32* %11, align 4
  br label %353

; <label>:501:                                    ; preds = %353
  br label %502

; <label>:502:                                    ; preds = %501, %351
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @drain_into_ancillary_data(i32) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = sdiv i32 %6, 32
  store i32 %7, i32* %3, align 4
  %8 = load i32, i32* %2, align 4
  %9 = srem i32 %8, 32
  store i32 %9, i32* %4, align 4
  %10 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @userFrameDataPH, align 4
  %11 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %10, i32 0, i32 1
  %12 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %11, align 4
  %13 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %12, i32 0, i32 0
  store i32 0, i32* %13, align 4
  store i32 0, i32* %5, align 4
  br label %14

; <label>:14:                                     ; preds = %21, %1
  %15 = load i32, i32* %5, align 4
  %16 = load i32, i32* %3, align 4
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %18, label %24

; <label>:18:                                     ; preds = %14
  %19 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @userFrameDataPH, align 4
  %20 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %19, i32 0, i32 32)
  store %struct.BF_PartHolder* %20, %struct.BF_PartHolder** @userFrameDataPH, align 4
  br label %21

; <label>:21:                                     ; preds = %18
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %14

; <label>:24:                                     ; preds = %14
  %25 = load i32, i32* %4, align 4
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %31

; <label>:27:                                     ; preds = %24
  %28 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @userFrameDataPH, align 4
  %29 = load i32, i32* %4, align 4
  %30 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %28, i32 0, i32 %29)
  store %struct.BF_PartHolder* %30, %struct.BF_PartHolder** @userFrameDataPH, align 4
  br label %31

; <label>:31:                                     ; preds = %27, %24
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @Huffmancodebits(%struct.BF_PartHolder**, i32*, %struct.gr_info*) #0 {
  %4 = alloca %struct.BF_PartHolder**, align 4
  %5 = alloca i32*, align 4
  %6 = alloca %struct.gr_info*, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca [192 x [3 x i32]]*, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  store %struct.BF_PartHolder** %0, %struct.BF_PartHolder*** %4, align 4
  store i32* %1, i32** %5, align 4
  store %struct.gr_info* %2, %struct.gr_info** %6, align 4
  store i32 0, i32* %22, align 4
  %34 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %35 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %34, i32 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = mul i32 %36, 2
  store i32 %37, i32* %10, align 4
  %38 = load i32, i32* %10, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %246

; <label>:40:                                     ; preds = %3
  %41 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %42 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %41, i32 0, i32 7
  %43 = load i32, i32* %42, align 4
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %138, label %45

; <label>:45:                                     ; preds = %40
  %46 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %47 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %46, i32 0, i32 6
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 2
  br i1 %49, label %50, label %138

; <label>:50:                                     ; preds = %45
  %51 = load i32*, i32** %5, align 4
  %52 = bitcast i32* %51 to [192 x [3 x i32]]*
  store [192 x [3 x i32]]* %52, [192 x [3 x i32]]** %28, align 4
  store i32 12, i32* %7, align 4
  store i32 576, i32* %8, align 4
  store i32 0, i32* %23, align 4
  br label %53

; <label>:53:                                     ; preds = %134, %50
  %54 = load i32, i32* %23, align 4
  %55 = icmp slt i32 %54, 13
  br i1 %55, label %56, label %137

; <label>:56:                                     ; preds = %53
  store i32 100, i32* %29, align 4
  %57 = load i32, i32* %23, align 4
  %58 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %57
  %59 = load i32, i32* %58, align 4
  store i32 %59, i32* %26, align 4
  %60 = load i32, i32* %23, align 4
  %61 = add nsw i32 %60, 1
  %62 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %61
  %63 = load i32, i32* %62, align 4
  store i32 %63, i32* %27, align 4
  %64 = load i32, i32* %26, align 4
  %65 = load i32, i32* %7, align 4
  %66 = icmp slt i32 %64, %65
  br i1 %66, label %67, label %72

; <label>:67:                                     ; preds = %56
  %68 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %69 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %68, i32 0, i32 8
  %70 = getelementptr inbounds [3 x i32], [3 x i32]* %69, i32 0, i32 0
  %71 = load i32, i32* %70, align 4
  store i32 %71, i32* %29, align 4
  br label %77

; <label>:72:                                     ; preds = %56
  %73 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %74 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %73, i32 0, i32 8
  %75 = getelementptr inbounds [3 x i32], [3 x i32]* %74, i32 0, i32 1
  %76 = load i32, i32* %75, align 4
  store i32 %76, i32* %29, align 4
  br label %77

; <label>:77:                                     ; preds = %72, %67
  %78 = load i32, i32* %29, align 4
  %79 = icmp ult i32 %78, 32
  br i1 %79, label %81, label %80

; <label>:80:                                     ; preds = %77
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8.160, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 532, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.Huffmancodebits, i32 0, i32 0))
  br label %81

; <label>:81:                                     ; preds = %80, %77
  %82 = phi i1 [ true, %77 ], [ false, %80 ]
  %83 = zext i1 %82 to i32
  store i32 0, i32* %24, align 4
  br label %84

; <label>:84:                                     ; preds = %130, %81
  %85 = load i32, i32* %24, align 4
  %86 = icmp slt i32 %85, 3
  br i1 %86, label %87, label %133

; <label>:87:                                     ; preds = %84
  %88 = load i32, i32* %26, align 4
  store i32 %88, i32* %25, align 4
  br label %89

; <label>:89:                                     ; preds = %126, %87
  %90 = load i32, i32* %25, align 4
  %91 = load i32, i32* %27, align 4
  %92 = icmp slt i32 %90, %91
  br i1 %92, label %93, label %129

; <label>:93:                                     ; preds = %89
  %94 = load [192 x [3 x i32]]*, [192 x [3 x i32]]** %28, align 4
  %95 = load i32, i32* %25, align 4
  %96 = getelementptr inbounds [192 x [3 x i32]], [192 x [3 x i32]]* %94, i32 0, i32 %95
  %97 = load i32, i32* %24, align 4
  %98 = getelementptr inbounds [3 x i32], [3 x i32]* %96, i32 0, i32 %97
  %99 = load i32, i32* %98, align 4
  store i32 %99, i32* %14, align 4
  %100 = load [192 x [3 x i32]]*, [192 x [3 x i32]]** %28, align 4
  %101 = load i32, i32* %25, align 4
  %102 = add nsw i32 %101, 1
  %103 = getelementptr inbounds [192 x [3 x i32]], [192 x [3 x i32]]* %100, i32 0, i32 %102
  %104 = load i32, i32* %24, align 4
  %105 = getelementptr inbounds [3 x i32], [3 x i32]* %103, i32 0, i32 %104
  %106 = load i32, i32* %105, align 4
  store i32 %106, i32* %15, align 4
  %107 = load i32, i32* %29, align 4
  %108 = load i32, i32* %14, align 4
  %109 = load i32, i32* %15, align 4
  %110 = call arm_aapcscc i32 @HuffmanCode(i32 %107, i32 %108, i32 %109, i32* %20, i32* %21, i32* %17, i32* %18)
  store i32 %110, i32* %16, align 4
  %111 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  %112 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %111, align 4
  %113 = load i32, i32* %20, align 4
  %114 = load i32, i32* %17, align 4
  %115 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %112, i32 %113, i32 %114)
  %116 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  store %struct.BF_PartHolder* %115, %struct.BF_PartHolder** %116, align 4
  %117 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  %118 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %117, align 4
  %119 = load i32, i32* %21, align 4
  %120 = load i32, i32* %18, align 4
  %121 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %118, i32 %119, i32 %120)
  %122 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  store %struct.BF_PartHolder* %121, %struct.BF_PartHolder** %122, align 4
  %123 = load i32, i32* %16, align 4
  %124 = load i32, i32* %22, align 4
  %125 = add nsw i32 %124, %123
  store i32 %125, i32* %22, align 4
  br label %126

; <label>:126:                                    ; preds = %93
  %127 = load i32, i32* %25, align 4
  %128 = add nsw i32 %127, 2
  store i32 %128, i32* %25, align 4
  br label %89

; <label>:129:                                    ; preds = %89
  br label %130

; <label>:130:                                    ; preds = %129
  %131 = load i32, i32* %24, align 4
  %132 = add nsw i32 %131, 1
  store i32 %132, i32* %24, align 4
  br label %84

; <label>:133:                                    ; preds = %84
  br label %134

; <label>:134:                                    ; preds = %133
  %135 = load i32, i32* %23, align 4
  %136 = add nsw i32 %135, 1
  store i32 %136, i32* %23, align 4
  br label %53

; <label>:137:                                    ; preds = %53
  br label %245

; <label>:138:                                    ; preds = %45, %40
  store i32 100, i32* %30, align 4
  %139 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %140 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %139, i32 0, i32 7
  %141 = load i32, i32* %140, align 4
  %142 = icmp ne i32 %141, 0
  br i1 %142, label %143, label %144

; <label>:143:                                    ; preds = %138
  store i32 36, i32* %7, align 4
  store i32 576, i32* %8, align 4
  br label %173

; <label>:144:                                    ; preds = %138
  %145 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %146 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %145, i32 0, i32 10
  %147 = load i32, i32* %146, align 4
  %148 = add i32 %147, 1
  store i32 %148, i32* %30, align 4
  %149 = load i32, i32* %30, align 4
  %150 = icmp ult i32 %149, 23
  br i1 %150, label %152, label %151

; <label>:151:                                    ; preds = %144
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9.161, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 605, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.Huffmancodebits, i32 0, i32 0))
  br label %152

; <label>:152:                                    ; preds = %151, %144
  %153 = phi i1 [ true, %144 ], [ false, %151 ]
  %154 = zext i1 %153 to i32
  %155 = load i32, i32* %30, align 4
  %156 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %155
  %157 = load i32, i32* %156, align 4
  store i32 %157, i32* %7, align 4
  %158 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %159 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %158, i32 0, i32 11
  %160 = load i32, i32* %159, align 4
  %161 = add i32 %160, 1
  %162 = load i32, i32* %30, align 4
  %163 = add i32 %162, %161
  store i32 %163, i32* %30, align 4
  %164 = load i32, i32* %30, align 4
  %165 = icmp ult i32 %164, 23
  br i1 %165, label %167, label %166

; <label>:166:                                    ; preds = %152
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9.161, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 608, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.Huffmancodebits, i32 0, i32 0))
  br label %167

; <label>:167:                                    ; preds = %166, %152
  %168 = phi i1 [ true, %152 ], [ false, %166 ]
  %169 = zext i1 %168 to i32
  %170 = load i32, i32* %30, align 4
  %171 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %170
  %172 = load i32, i32* %171, align 4
  store i32 %172, i32* %8, align 4
  br label %173

; <label>:173:                                    ; preds = %167, %143
  store i32 0, i32* %9, align 4
  br label %174

; <label>:174:                                    ; preds = %241, %173
  %175 = load i32, i32* %9, align 4
  %176 = load i32, i32* %10, align 4
  %177 = icmp slt i32 %175, %176
  br i1 %177, label %178, label %244

; <label>:178:                                    ; preds = %174
  store i32 100, i32* %31, align 4
  %179 = load i32, i32* %9, align 4
  %180 = load i32, i32* %7, align 4
  %181 = icmp slt i32 %179, %180
  br i1 %181, label %182, label %187

; <label>:182:                                    ; preds = %178
  %183 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %184 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %183, i32 0, i32 8
  %185 = getelementptr inbounds [3 x i32], [3 x i32]* %184, i32 0, i32 0
  %186 = load i32, i32* %185, align 4
  store i32 %186, i32* %31, align 4
  br label %202

; <label>:187:                                    ; preds = %178
  %188 = load i32, i32* %9, align 4
  %189 = load i32, i32* %8, align 4
  %190 = icmp slt i32 %188, %189
  br i1 %190, label %191, label %196

; <label>:191:                                    ; preds = %187
  %192 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %193 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %192, i32 0, i32 8
  %194 = getelementptr inbounds [3 x i32], [3 x i32]* %193, i32 0, i32 1
  %195 = load i32, i32* %194, align 4
  store i32 %195, i32* %31, align 4
  br label %201

; <label>:196:                                    ; preds = %187
  %197 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %198 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %197, i32 0, i32 8
  %199 = getelementptr inbounds [3 x i32], [3 x i32]* %198, i32 0, i32 2
  %200 = load i32, i32* %199, align 4
  store i32 %200, i32* %31, align 4
  br label %201

; <label>:201:                                    ; preds = %196, %191
  br label %202

; <label>:202:                                    ; preds = %201, %182
  %203 = load i32, i32* %31, align 4
  %204 = icmp ult i32 %203, 32
  br i1 %204, label %206, label %205

; <label>:205:                                    ; preds = %202
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8.160, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 629, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.Huffmancodebits, i32 0, i32 0))
  br label %206

; <label>:206:                                    ; preds = %205, %202
  %207 = phi i1 [ true, %202 ], [ false, %205 ]
  %208 = zext i1 %207 to i32
  %209 = load i32*, i32** %5, align 4
  %210 = load i32, i32* %9, align 4
  %211 = getelementptr inbounds i32, i32* %209, i32 %210
  %212 = load i32, i32* %211, align 4
  store i32 %212, i32* %14, align 4
  %213 = load i32*, i32** %5, align 4
  %214 = load i32, i32* %9, align 4
  %215 = add nsw i32 %214, 1
  %216 = getelementptr inbounds i32, i32* %213, i32 %215
  %217 = load i32, i32* %216, align 4
  store i32 %217, i32* %15, align 4
  %218 = load i32, i32* %31, align 4
  %219 = icmp ne i32 %218, 0
  br i1 %219, label %220, label %240

; <label>:220:                                    ; preds = %206
  %221 = load i32, i32* %31, align 4
  %222 = load i32, i32* %14, align 4
  %223 = load i32, i32* %15, align 4
  %224 = call arm_aapcscc i32 @HuffmanCode(i32 %221, i32 %222, i32 %223, i32* %20, i32* %21, i32* %17, i32* %18)
  store i32 %224, i32* %16, align 4
  %225 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  %226 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %225, align 4
  %227 = load i32, i32* %20, align 4
  %228 = load i32, i32* %17, align 4
  %229 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %226, i32 %227, i32 %228)
  %230 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  store %struct.BF_PartHolder* %229, %struct.BF_PartHolder** %230, align 4
  %231 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  %232 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %231, align 4
  %233 = load i32, i32* %21, align 4
  %234 = load i32, i32* %18, align 4
  %235 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %232, i32 %233, i32 %234)
  %236 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  store %struct.BF_PartHolder* %235, %struct.BF_PartHolder** %236, align 4
  %237 = load i32, i32* %16, align 4
  %238 = load i32, i32* %22, align 4
  %239 = add nsw i32 %238, %237
  store i32 %239, i32* %22, align 4
  br label %240

; <label>:240:                                    ; preds = %220, %206
  br label %241

; <label>:241:                                    ; preds = %240
  %242 = load i32, i32* %9, align 4
  %243 = add nsw i32 %242, 2
  store i32 %243, i32* %9, align 4
  br label %174

; <label>:244:                                    ; preds = %174
  br label %245

; <label>:245:                                    ; preds = %244, %137
  br label %246

; <label>:246:                                    ; preds = %245, %3
  %247 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %248 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %247, i32 0, i32 14
  %249 = load i32, i32* %248, align 4
  %250 = icmp ult i32 %249, 2
  br i1 %250, label %252, label %251

; <label>:251:                                    ; preds = %246
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.10.162, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 649, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.Huffmancodebits, i32 0, i32 0))
  br label %252

; <label>:252:                                    ; preds = %251, %246
  %253 = phi i1 [ true, %246 ], [ false, %251 ]
  %254 = zext i1 %253 to i32
  %255 = load i32, i32* %10, align 4
  %256 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %257 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %256, i32 0, i32 2
  %258 = load i32, i32* %257, align 4
  %259 = mul i32 %258, 4
  %260 = add i32 %255, %259
  store i32 %260, i32* %11, align 4
  %261 = load i32, i32* %11, align 4
  %262 = icmp sle i32 %261, 576
  br i1 %262, label %264, label %263

; <label>:263:                                    ; preds = %252
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11.163, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 652, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.Huffmancodebits, i32 0, i32 0))
  br label %264

; <label>:264:                                    ; preds = %263, %252
  %265 = phi i1 [ true, %252 ], [ false, %263 ]
  %266 = zext i1 %265 to i32
  %267 = load i32, i32* %10, align 4
  store i32 %267, i32* %9, align 4
  br label %268

; <label>:268:                                    ; preds = %305, %264
  %269 = load i32, i32* %9, align 4
  %270 = load i32, i32* %11, align 4
  %271 = icmp slt i32 %269, %270
  br i1 %271, label %272, label %308

; <label>:272:                                    ; preds = %268
  %273 = load i32*, i32** %5, align 4
  %274 = load i32, i32* %9, align 4
  %275 = getelementptr inbounds i32, i32* %273, i32 %274
  %276 = load i32, i32* %275, align 4
  store i32 %276, i32* %12, align 4
  %277 = load i32*, i32** %5, align 4
  %278 = load i32, i32* %9, align 4
  %279 = add nsw i32 %278, 1
  %280 = getelementptr inbounds i32, i32* %277, i32 %279
  %281 = load i32, i32* %280, align 4
  store i32 %281, i32* %13, align 4
  %282 = load i32*, i32** %5, align 4
  %283 = load i32, i32* %9, align 4
  %284 = add nsw i32 %283, 2
  %285 = getelementptr inbounds i32, i32* %282, i32 %284
  %286 = load i32, i32* %285, align 4
  store i32 %286, i32* %14, align 4
  %287 = load i32*, i32** %5, align 4
  %288 = load i32, i32* %9, align 4
  %289 = add nsw i32 %288, 3
  %290 = getelementptr inbounds i32, i32* %287, i32 %289
  %291 = load i32, i32* %290, align 4
  store i32 %291, i32* %15, align 4
  %292 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  %293 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %294 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %293, i32 0, i32 14
  %295 = load i32, i32* %294, align 4
  %296 = add i32 %295, 32
  %297 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %296
  %298 = load i32, i32* %12, align 4
  %299 = load i32, i32* %13, align 4
  %300 = load i32, i32* %14, align 4
  %301 = load i32, i32* %15, align 4
  %302 = call arm_aapcscc i32 @L3_huffman_coder_count1(%struct.BF_PartHolder** %292, %struct.huffcodetab* %297, i32 %298, i32 %299, i32 %300, i32 %301)
  %303 = load i32, i32* %22, align 4
  %304 = add nsw i32 %303, %302
  store i32 %304, i32* %22, align 4
  br label %305

; <label>:305:                                    ; preds = %272
  %306 = load i32, i32* %9, align 4
  %307 = add nsw i32 %306, 4
  store i32 %307, i32* %9, align 4
  br label %268

; <label>:308:                                    ; preds = %268
  %309 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %310 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %309, i32 0, i32 0
  %311 = load i32, i32* %310, align 4
  %312 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %313 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %312, i32 0, i32 15
  %314 = load i32, i32* %313, align 4
  %315 = sub i32 %311, %314
  %316 = load i32, i32* %22, align 4
  %317 = sub i32 %315, %316
  store i32 %317, i32* %19, align 4
  %318 = icmp ne i32 %317, 0
  br i1 %318, label %319, label %351

; <label>:319:                                    ; preds = %308
  %320 = load i32, i32* %19, align 4
  %321 = sdiv i32 %320, 32
  store i32 %321, i32* %32, align 4
  %322 = load i32, i32* %19, align 4
  %323 = srem i32 %322, 32
  store i32 %323, i32* %33, align 4
  %324 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %325 = load i32, i32* %19, align 4
  %326 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %324, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.12.164, i32 0, i32 0), i32 %325)
  %327 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %328 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %327, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13.165, i32 0, i32 0))
  br label %329

; <label>:329:                                    ; preds = %333, %319
  %330 = load i32, i32* %32, align 4
  %331 = add nsw i32 %330, -1
  store i32 %331, i32* %32, align 4
  %332 = icmp ne i32 %330, 0
  br i1 %332, label %333, label %338

; <label>:333:                                    ; preds = %329
  %334 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  %335 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %334, align 4
  %336 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %335, i32 -1, i32 32)
  %337 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  store %struct.BF_PartHolder* %336, %struct.BF_PartHolder** %337, align 4
  br label %329

; <label>:338:                                    ; preds = %329
  %339 = load i32, i32* %33, align 4
  %340 = icmp ne i32 %339, 0
  br i1 %340, label %341, label %347

; <label>:341:                                    ; preds = %338
  %342 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  %343 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %342, align 4
  %344 = load i32, i32* %33, align 4
  %345 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %343, i32 -1, i32 %344)
  %346 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %4, align 4
  store %struct.BF_PartHolder* %345, %struct.BF_PartHolder** %346, align 4
  br label %347

; <label>:347:                                    ; preds = %341, %338
  %348 = load i32, i32* %19, align 4
  %349 = load i32, i32* %22, align 4
  %350 = add nsw i32 %349, %348
  store i32 %350, i32* %22, align 4
  br label %351

; <label>:351:                                    ; preds = %347, %308
  %352 = load i32, i32* %22, align 4
  %353 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %354 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %353, i32 0, i32 0
  %355 = load i32, i32* %354, align 4
  %356 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %357 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %356, i32 0, i32 15
  %358 = load i32, i32* %357, align 4
  %359 = sub i32 %355, %358
  %360 = icmp eq i32 %352, %359
  br i1 %360, label %362, label %361

; <label>:361:                                    ; preds = %351
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.14.166, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 683, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.Huffmancodebits, i32 0, i32 0))
  br label %362

; <label>:362:                                    ; preds = %361, %351
  %363 = phi i1 [ true, %351 ], [ false, %361 ]
  %364 = zext i1 %363 to i32
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @HuffmanCode(i32, i32, i32, i32*, i32*, i32*, i32*) #0 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32*, align 4
  %13 = alloca i32*, align 4
  %14 = alloca i32*, align 4
  %15 = alloca i32*, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca %struct.huffcodetab*, align 4
  store i32 %0, i32* %9, align 4
  store i32 %1, i32* %10, align 4
  store i32 %2, i32* %11, align 4
  store i32* %3, i32** %12, align 4
  store i32* %4, i32** %13, align 4
  store i32* %5, i32** %14, align 4
  store i32* %6, i32** %15, align 4
  %23 = load i32*, i32** %14, align 4
  store i32 0, i32* %23, align 4
  %24 = load i32*, i32** %15, align 4
  store i32 0, i32* %24, align 4
  %25 = load i32*, i32** %12, align 4
  store i32 0, i32* %25, align 4
  %26 = load i32*, i32** %13, align 4
  store i32 0, i32* %26, align 4
  %27 = load i32, i32* %9, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %30

; <label>:29:                                     ; preds = %7
  store i32 0, i32* %8, align 4
  br label %216

; <label>:30:                                     ; preds = %7
  %31 = call arm_aapcscc i32 @abs_and_sign(i32* %10)
  store i32 %31, i32* %16, align 4
  %32 = call arm_aapcscc i32 @abs_and_sign(i32* %11)
  store i32 %32, i32* %17, align 4
  %33 = load i32, i32* %9, align 4
  %34 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %33
  store %struct.huffcodetab* %34, %struct.huffcodetab** %22, align 4
  %35 = load i32, i32* %9, align 4
  %36 = icmp sgt i32 %35, 15
  br i1 %36, label %37, label %146

; <label>:37:                                     ; preds = %30
  %38 = load %struct.huffcodetab*, %struct.huffcodetab** %22, align 4
  %39 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %38, i32 0, i32 0
  %40 = load i32, i32* %39, align 4
  store i32 %40, i32* %20, align 4
  store i32 0, i32* %19, align 4
  store i32 0, i32* %18, align 4
  %41 = load i32, i32* %10, align 4
  %42 = icmp sgt i32 %41, 14
  br i1 %42, label %43, label %55

; <label>:43:                                     ; preds = %37
  %44 = load i32, i32* %10, align 4
  %45 = sub nsw i32 %44, 15
  store i32 %45, i32* %18, align 4
  %46 = load i32, i32* %18, align 4
  %47 = load %struct.huffcodetab*, %struct.huffcodetab** %22, align 4
  %48 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %47, i32 0, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = icmp ule i32 %46, %49
  br i1 %50, label %52, label %51

; <label>:51:                                     ; preds = %43
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3.167, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 797, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.HuffmanCode, i32 0, i32 0))
  br label %52

; <label>:52:                                     ; preds = %51, %43
  %53 = phi i1 [ true, %43 ], [ false, %51 ]
  %54 = zext i1 %53 to i32
  store i32 15, i32* %10, align 4
  br label %55

; <label>:55:                                     ; preds = %52, %37
  %56 = load i32, i32* %11, align 4
  %57 = icmp sgt i32 %56, 14
  br i1 %57, label %58, label %70

; <label>:58:                                     ; preds = %55
  %59 = load i32, i32* %11, align 4
  %60 = sub nsw i32 %59, 15
  store i32 %60, i32* %19, align 4
  %61 = load i32, i32* %19, align 4
  %62 = load %struct.huffcodetab*, %struct.huffcodetab** %22, align 4
  %63 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %62, i32 0, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = icmp ule i32 %61, %64
  br i1 %65, label %67, label %66

; <label>:66:                                     ; preds = %58
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4.168, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 803, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.HuffmanCode, i32 0, i32 0))
  br label %67

; <label>:67:                                     ; preds = %66, %58
  %68 = phi i1 [ true, %58 ], [ false, %66 ]
  %69 = zext i1 %68 to i32
  store i32 15, i32* %11, align 4
  br label %70

; <label>:70:                                     ; preds = %67, %55
  %71 = load i32, i32* %10, align 4
  %72 = mul nsw i32 %71, 16
  %73 = load i32, i32* %11, align 4
  %74 = add nsw i32 %72, %73
  store i32 %74, i32* %21, align 4
  %75 = load %struct.huffcodetab*, %struct.huffcodetab** %22, align 4
  %76 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %75, i32 0, i32 2
  %77 = load i32*, i32** %76, align 4
  %78 = load i32, i32* %21, align 4
  %79 = getelementptr inbounds i32, i32* %77, i32 %78
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %12, align 4
  store i32 %80, i32* %81, align 4
  %82 = load %struct.huffcodetab*, %struct.huffcodetab** %22, align 4
  %83 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %82, i32 0, i32 3
  %84 = load i8*, i8** %83, align 4
  %85 = load i32, i32* %21, align 4
  %86 = getelementptr inbounds i8, i8* %84, i32 %85
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = load i32*, i32** %14, align 4
  store i32 %88, i32* %89, align 4
  %90 = load i32, i32* %10, align 4
  %91 = icmp sgt i32 %90, 14
  br i1 %91, label %92, label %101

; <label>:92:                                     ; preds = %70
  %93 = load i32, i32* %18, align 4
  %94 = load i32*, i32** %13, align 4
  %95 = load i32, i32* %94, align 4
  %96 = or i32 %95, %93
  store i32 %96, i32* %94, align 4
  %97 = load i32, i32* %20, align 4
  %98 = load i32*, i32** %15, align 4
  %99 = load i32, i32* %98, align 4
  %100 = add i32 %99, %97
  store i32 %100, i32* %98, align 4
  br label %101

; <label>:101:                                    ; preds = %92, %70
  %102 = load i32, i32* %10, align 4
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %104, label %115

; <label>:104:                                    ; preds = %101
  %105 = load i32*, i32** %13, align 4
  %106 = load i32, i32* %105, align 4
  %107 = shl i32 %106, 1
  store i32 %107, i32* %105, align 4
  %108 = load i32, i32* %16, align 4
  %109 = load i32*, i32** %13, align 4
  %110 = load i32, i32* %109, align 4
  %111 = or i32 %110, %108
  store i32 %111, i32* %109, align 4
  %112 = load i32*, i32** %15, align 4
  %113 = load i32, i32* %112, align 4
  %114 = add nsw i32 %113, 1
  store i32 %114, i32* %112, align 4
  br label %115

; <label>:115:                                    ; preds = %104, %101
  %116 = load i32, i32* %11, align 4
  %117 = icmp sgt i32 %116, 14
  br i1 %117, label %118, label %131

; <label>:118:                                    ; preds = %115
  %119 = load i32, i32* %20, align 4
  %120 = load i32*, i32** %13, align 4
  %121 = load i32, i32* %120, align 4
  %122 = shl i32 %121, %119
  store i32 %122, i32* %120, align 4
  %123 = load i32, i32* %19, align 4
  %124 = load i32*, i32** %13, align 4
  %125 = load i32, i32* %124, align 4
  %126 = or i32 %125, %123
  store i32 %126, i32* %124, align 4
  %127 = load i32, i32* %20, align 4
  %128 = load i32*, i32** %15, align 4
  %129 = load i32, i32* %128, align 4
  %130 = add i32 %129, %127
  store i32 %130, i32* %128, align 4
  br label %131

; <label>:131:                                    ; preds = %118, %115
  %132 = load i32, i32* %11, align 4
  %133 = icmp ne i32 %132, 0
  br i1 %133, label %134, label %145

; <label>:134:                                    ; preds = %131
  %135 = load i32*, i32** %13, align 4
  %136 = load i32, i32* %135, align 4
  %137 = shl i32 %136, 1
  store i32 %137, i32* %135, align 4
  %138 = load i32, i32* %17, align 4
  %139 = load i32*, i32** %13, align 4
  %140 = load i32, i32* %139, align 4
  %141 = or i32 %140, %138
  store i32 %141, i32* %139, align 4
  %142 = load i32*, i32** %15, align 4
  %143 = load i32, i32* %142, align 4
  %144 = add nsw i32 %143, 1
  store i32 %144, i32* %142, align 4
  br label %145

; <label>:145:                                    ; preds = %134, %131
  br label %196

; <label>:146:                                    ; preds = %30
  %147 = load i32, i32* %10, align 4
  %148 = mul nsw i32 %147, 16
  %149 = load i32, i32* %11, align 4
  %150 = add nsw i32 %148, %149
  store i32 %150, i32* %21, align 4
  %151 = load %struct.huffcodetab*, %struct.huffcodetab** %22, align 4
  %152 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %151, i32 0, i32 2
  %153 = load i32*, i32** %152, align 4
  %154 = load i32, i32* %21, align 4
  %155 = getelementptr inbounds i32, i32* %153, i32 %154
  %156 = load i32, i32* %155, align 4
  %157 = load i32*, i32** %12, align 4
  store i32 %156, i32* %157, align 4
  %158 = load %struct.huffcodetab*, %struct.huffcodetab** %22, align 4
  %159 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %158, i32 0, i32 3
  %160 = load i8*, i8** %159, align 4
  %161 = load i32, i32* %21, align 4
  %162 = getelementptr inbounds i8, i8* %160, i32 %161
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = load i32*, i32** %14, align 4
  %166 = load i32, i32* %165, align 4
  %167 = add nsw i32 %166, %164
  store i32 %167, i32* %165, align 4
  %168 = load i32, i32* %10, align 4
  %169 = icmp ne i32 %168, 0
  br i1 %169, label %170, label %181

; <label>:170:                                    ; preds = %146
  %171 = load i32*, i32** %12, align 4
  %172 = load i32, i32* %171, align 4
  %173 = shl i32 %172, 1
  store i32 %173, i32* %171, align 4
  %174 = load i32, i32* %16, align 4
  %175 = load i32*, i32** %12, align 4
  %176 = load i32, i32* %175, align 4
  %177 = or i32 %176, %174
  store i32 %177, i32* %175, align 4
  %178 = load i32*, i32** %14, align 4
  %179 = load i32, i32* %178, align 4
  %180 = add nsw i32 %179, 1
  store i32 %180, i32* %178, align 4
  br label %181

; <label>:181:                                    ; preds = %170, %146
  %182 = load i32, i32* %11, align 4
  %183 = icmp ne i32 %182, 0
  br i1 %183, label %184, label %195

; <label>:184:                                    ; preds = %181
  %185 = load i32*, i32** %12, align 4
  %186 = load i32, i32* %185, align 4
  %187 = shl i32 %186, 1
  store i32 %187, i32* %185, align 4
  %188 = load i32, i32* %17, align 4
  %189 = load i32*, i32** %12, align 4
  %190 = load i32, i32* %189, align 4
  %191 = or i32 %190, %188
  store i32 %191, i32* %189, align 4
  %192 = load i32*, i32** %14, align 4
  %193 = load i32, i32* %192, align 4
  %194 = add nsw i32 %193, 1
  store i32 %194, i32* %192, align 4
  br label %195

; <label>:195:                                    ; preds = %184, %181
  br label %196

; <label>:196:                                    ; preds = %195, %145
  %197 = load i32*, i32** %14, align 4
  %198 = load i32, i32* %197, align 4
  %199 = icmp sle i32 %198, 32
  br i1 %199, label %201, label %200

; <label>:200:                                    ; preds = %196
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.169, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 851, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.HuffmanCode, i32 0, i32 0))
  br label %201

; <label>:201:                                    ; preds = %200, %196
  %202 = phi i1 [ true, %196 ], [ false, %200 ]
  %203 = zext i1 %202 to i32
  %204 = load i32*, i32** %15, align 4
  %205 = load i32, i32* %204, align 4
  %206 = icmp sle i32 %205, 32
  br i1 %206, label %208, label %207

; <label>:207:                                    ; preds = %201
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.170, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.157, i32 0, i32 0), i32 852, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.HuffmanCode, i32 0, i32 0))
  br label %208

; <label>:208:                                    ; preds = %207, %201
  %209 = phi i1 [ true, %201 ], [ false, %207 ]
  %210 = zext i1 %209 to i32
  %211 = load i32*, i32** %14, align 4
  %212 = load i32, i32* %211, align 4
  %213 = load i32*, i32** %15, align 4
  %214 = load i32, i32* %213, align 4
  %215 = add nsw i32 %212, %214
  store i32 %215, i32* %8, align 4
  br label %216

; <label>:216:                                    ; preds = %208, %29
  %217 = load i32, i32* %8, align 4
  ret i32 %217
}

; Function Attrs: nounwind
define arm_aapcscc i32 @L3_huffman_coder_count1(%struct.BF_PartHolder**, %struct.huffcodetab*, i32, i32, i32, i32) #0 {
  %7 = alloca %struct.BF_PartHolder**, align 4
  %8 = alloca %struct.huffcodetab*, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  store %struct.BF_PartHolder** %0, %struct.BF_PartHolder*** %7, align 4
  store %struct.huffcodetab* %1, %struct.huffcodetab** %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i32 %4, i32* %11, align 4
  store i32 %5, i32* %12, align 4
  store i32 0, i32* %20, align 4
  %21 = call arm_aapcscc i32 @abs_and_sign(i32* %9)
  store i32 %21, i32* %14, align 4
  %22 = call arm_aapcscc i32 @abs_and_sign(i32* %10)
  store i32 %22, i32* %15, align 4
  %23 = call arm_aapcscc i32 @abs_and_sign(i32* %11)
  store i32 %23, i32* %16, align 4
  %24 = call arm_aapcscc i32 @abs_and_sign(i32* %12)
  store i32 %24, i32* %17, align 4
  %25 = load i32, i32* %9, align 4
  %26 = shl i32 %25, 3
  %27 = load i32, i32* %10, align 4
  %28 = shl i32 %27, 2
  %29 = add nsw i32 %26, %28
  %30 = load i32, i32* %11, align 4
  %31 = shl i32 %30, 1
  %32 = add nsw i32 %29, %31
  %33 = load i32, i32* %12, align 4
  %34 = add nsw i32 %32, %33
  store i32 %34, i32* %18, align 4
  %35 = load %struct.huffcodetab*, %struct.huffcodetab** %8, align 4
  %36 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %35, i32 0, i32 2
  %37 = load i32*, i32** %36, align 4
  %38 = load i32, i32* %18, align 4
  %39 = getelementptr inbounds i32, i32* %37, i32 %38
  %40 = load i32, i32* %39, align 4
  store i32 %40, i32* %13, align 4
  %41 = load %struct.huffcodetab*, %struct.huffcodetab** %8, align 4
  %42 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %41, i32 0, i32 3
  %43 = load i8*, i8** %42, align 4
  %44 = load i32, i32* %18, align 4
  %45 = getelementptr inbounds i8, i8* %43, i32 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  store i32 %47, i32* %19, align 4
  %48 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %7, align 4
  %49 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %48, align 4
  %50 = load i32, i32* %13, align 4
  %51 = load i32, i32* %19, align 4
  %52 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %49, i32 %50, i32 %51)
  %53 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %7, align 4
  store %struct.BF_PartHolder* %52, %struct.BF_PartHolder** %53, align 4
  store i32 0, i32* %20, align 4
  store i32 0, i32* %18, align 4
  %54 = load i32, i32* %9, align 4
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %60

; <label>:56:                                     ; preds = %6
  %57 = load i32, i32* %14, align 4
  store i32 %57, i32* %18, align 4
  %58 = load i32, i32* %20, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %20, align 4
  br label %60

; <label>:60:                                     ; preds = %56, %6
  %61 = load i32, i32* %10, align 4
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %63, label %70

; <label>:63:                                     ; preds = %60
  %64 = load i32, i32* %18, align 4
  %65 = mul i32 2, %64
  %66 = load i32, i32* %15, align 4
  %67 = add i32 %65, %66
  store i32 %67, i32* %18, align 4
  %68 = load i32, i32* %20, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %20, align 4
  br label %70

; <label>:70:                                     ; preds = %63, %60
  %71 = load i32, i32* %11, align 4
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %73, label %80

; <label>:73:                                     ; preds = %70
  %74 = load i32, i32* %18, align 4
  %75 = mul i32 2, %74
  %76 = load i32, i32* %16, align 4
  %77 = add i32 %75, %76
  store i32 %77, i32* %18, align 4
  %78 = load i32, i32* %20, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %20, align 4
  br label %80

; <label>:80:                                     ; preds = %73, %70
  %81 = load i32, i32* %12, align 4
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %83, label %90

; <label>:83:                                     ; preds = %80
  %84 = load i32, i32* %18, align 4
  %85 = mul i32 2, %84
  %86 = load i32, i32* %17, align 4
  %87 = add i32 %85, %86
  store i32 %87, i32* %18, align 4
  %88 = load i32, i32* %20, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %20, align 4
  br label %90

; <label>:90:                                     ; preds = %83, %80
  %91 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %7, align 4
  %92 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %91, align 4
  %93 = load i32, i32* %18, align 4
  %94 = load i32, i32* %20, align 4
  %95 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %92, i32 %93, i32 %94)
  %96 = load %struct.BF_PartHolder**, %struct.BF_PartHolder*** %7, align 4
  store %struct.BF_PartHolder* %95, %struct.BF_PartHolder** %96, align 4
  %97 = load i32, i32* %20, align 4
  %98 = load i32, i32* %19, align 4
  %99 = add nsw i32 %97, %98
  ret i32 %99
}

; Function Attrs: nounwind
define arm_aapcscc i32 @abs_and_sign(i32*) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 4
  store i32* %0, i32** %3, align 4
  %4 = load i32*, i32** %3, align 4
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %8

; <label>:7:                                      ; preds = %1
  store i32 0, i32* %2, align 4
  br label %12

; <label>:8:                                      ; preds = %1
  %9 = load i32*, i32** %3, align 4
  %10 = load i32, i32* %9, align 4
  %11 = mul nsw i32 %10, -1
  store i32 %11, i32* %9, align 4
  store i32 1, i32* %2, align 4
  br label %12

; <label>:12:                                     ; preds = %8, %7
  %13 = load i32, i32* %2, align 4
  ret i32 %13
}

; Function Attrs: nounwind
define internal arm_aapcscc %struct.BF_PartHolder* @CRC_BF_addEntry(%struct.BF_PartHolder*, i32, i32) #0 {
  %4 = alloca %struct.BF_PartHolder*, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store %struct.BF_PartHolder* %0, %struct.BF_PartHolder** %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %8 = load i32, i32* %6, align 4
  %9 = shl i32 1, %8
  store i32 %9, i32* %7, align 4
  br label %10

; <label>:10:                                     ; preds = %33, %3
  %11 = load i32, i32* %7, align 4
  %12 = lshr i32 %11, 1
  store i32 %12, i32* %7, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %34

; <label>:14:                                     ; preds = %10
  %15 = load i32, i32* @crc, align 4
  %16 = shl i32 %15, 1
  store i32 %16, i32* @crc, align 4
  %17 = load i32, i32* @crc, align 4
  %18 = and i32 %17, 65536
  %19 = icmp ne i32 %18, 0
  %20 = xor i1 %19, true
  %21 = zext i1 %20 to i32
  %22 = load i32, i32* %5, align 4
  %23 = load i32, i32* %7, align 4
  %24 = and i32 %22, %23
  %25 = icmp ne i32 %24, 0
  %26 = xor i1 %25, true
  %27 = zext i1 %26 to i32
  %28 = xor i32 %21, %27
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %33

; <label>:30:                                     ; preds = %14
  %31 = load i32, i32* @crc, align 4
  %32 = xor i32 %31, 32773
  store i32 %32, i32* @crc, align 4
  br label %33

; <label>:33:                                     ; preds = %30, %14
  br label %10

; <label>:34:                                     ; preds = %10
  %35 = load i32, i32* @crc, align 4
  %36 = and i32 %35, 65535
  store i32 %36, i32* @crc, align 4
  %37 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %4, align 4
  %38 = load i32, i32* %5, align 4
  %39 = load i32, i32* %6, align 4
  %40 = call arm_aapcscc %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %37, i32 %38, i32 %39)
  ret %struct.BF_PartHolder* %40
}

; Function Attrs: nounwind
define arm_aapcscc void @III_FlushBitstream() #0 {
  %1 = load i32, i32* @PartHoldersInitialized, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %3, label %6

; <label>:3:                                      ; preds = %0
  %4 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 4
  %5 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** @frameResults, align 4
  call arm_aapcscc void @BF_FlushBitstream(%struct.BF_FrameData* %4, %struct.BF_FrameResults* %5)
  br label %6

; <label>:6:                                      ; preds = %3, %0
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @lame_init_params(%struct.lame_global_flags*) #0 {
  %2 = alloca %struct.lame_global_flags*, align 4
  %3 = alloca i32, align 4
  %4 = alloca float, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %2, align 4
  call void @llvm.memset.p0i8.i32(i8* bitcast (%struct.bit_stream_struc* @bs.172 to i8*), i8 0, i32 32, i32 4, i1 false)
  call void @llvm.memset.p0i8.i32(i8* bitcast (%struct.III_side_info_t* @l3_side to i8*), i8 0, i32 492, i32 4, i1 false)
  %11 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %12 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %11, i32 0, i32 39
  store i32 0, i32* %12, align 4
  call arm_aapcscc void @InitFormatBitStream()
  %13 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %14 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %13, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %17, label %20

; <label>:17:                                     ; preds = %1
  %18 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %19 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %18, i32 0, i32 8
  store i32 3, i32* %19, align 4
  br label %20

; <label>:20:                                     ; preds = %17, %1
  %21 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %22 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %21, i32 0, i32 46
  store i32 2, i32* %22, align 4
  %23 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %24 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %23, i32 0, i32 8
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 3
  br i1 %26, label %27, label %30

; <label>:27:                                     ; preds = %20
  %28 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %29 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %28, i32 0, i32 46
  store i32 1, i32* %29, align 4
  br label %30

; <label>:30:                                     ; preds = %27, %20
  %31 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %32 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %31, i32 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %180

; <label>:35:                                     ; preds = %30
  %36 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %37 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %36, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %40 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %39, i32 0, i32 3
  store i32 %38, i32* %40, align 4
  %41 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %42 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %41, i32 0, i32 3
  %43 = load i32, i32* %42, align 4
  %44 = icmp sge i32 %43, 48000
  br i1 %44, label %45, label %48

; <label>:45:                                     ; preds = %35
  %46 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %47 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %46, i32 0, i32 3
  store i32 48000, i32* %47, align 4
  br label %87

; <label>:48:                                     ; preds = %35
  %49 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %50 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %49, i32 0, i32 3
  %51 = load i32, i32* %50, align 4
  %52 = icmp sge i32 %51, 44100
  br i1 %52, label %53, label %56

; <label>:53:                                     ; preds = %48
  %54 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %55 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %54, i32 0, i32 3
  store i32 44100, i32* %55, align 4
  br label %86

; <label>:56:                                     ; preds = %48
  %57 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %58 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %57, i32 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = icmp sge i32 %59, 32000
  br i1 %60, label %61, label %64

; <label>:61:                                     ; preds = %56
  %62 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %63 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %62, i32 0, i32 3
  store i32 32000, i32* %63, align 4
  br label %85

; <label>:64:                                     ; preds = %56
  %65 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %66 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %65, i32 0, i32 3
  %67 = load i32, i32* %66, align 4
  %68 = icmp sge i32 %67, 24000
  br i1 %68, label %69, label %72

; <label>:69:                                     ; preds = %64
  %70 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %71 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %70, i32 0, i32 3
  store i32 24000, i32* %71, align 4
  br label %84

; <label>:72:                                     ; preds = %64
  %73 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %74 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %73, i32 0, i32 3
  %75 = load i32, i32* %74, align 4
  %76 = icmp sge i32 %75, 22050
  br i1 %76, label %77, label %80

; <label>:77:                                     ; preds = %72
  %78 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %79 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %78, i32 0, i32 3
  store i32 22050, i32* %79, align 4
  br label %83

; <label>:80:                                     ; preds = %72
  %81 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %82 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %81, i32 0, i32 3
  store i32 16000, i32* %82, align 4
  br label %83

; <label>:83:                                     ; preds = %80, %77
  br label %84

; <label>:84:                                     ; preds = %83, %69
  br label %85

; <label>:85:                                     ; preds = %84, %61
  br label %86

; <label>:86:                                     ; preds = %85, %53
  br label %87

; <label>:87:                                     ; preds = %86, %45
  %88 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %89 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %88, i32 0, i32 11
  %90 = load i32, i32* %89, align 4
  %91 = icmp sgt i32 %90, 0
  br i1 %91, label %92, label %179

; <label>:92:                                     ; preds = %87
  %93 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %94 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %93, i32 0, i32 3
  %95 = load i32, i32* %94, align 4
  %96 = mul nsw i32 %95, 16
  %97 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %98 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %97, i32 0, i32 46
  %99 = load i32, i32* %98, align 4
  %100 = mul nsw i32 %96, %99
  %101 = sitofp i32 %100 to double
  %102 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %103 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %102, i32 0, i32 11
  %104 = load i32, i32* %103, align 4
  %105 = sitofp i32 %104 to double
  %106 = fmul double 1.000000e+03, %105
  %107 = fdiv double %101, %106
  %108 = fptrunc double %107 to float
  store float %108, float* %4, align 4
  %109 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %110 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %109, i32 0, i32 21
  %111 = load i32, i32* %110, align 4
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %178, label %113

; <label>:113:                                    ; preds = %92
  %114 = load float, float* %4, align 4
  %115 = fcmp ogt float %114, 1.300000e+01
  br i1 %115, label %116, label %178

; <label>:116:                                    ; preds = %113
  %117 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %118 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %117, i32 0, i32 11
  %119 = load i32, i32* %118, align 4
  %120 = sitofp i32 %119 to double
  %121 = fmul double 1.000000e+04, %120
  %122 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %123 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %122, i32 0, i32 46
  %124 = load i32, i32* %123, align 4
  %125 = mul nsw i32 16, %124
  %126 = sitofp i32 %125 to double
  %127 = fdiv double %121, %126
  %128 = fptosi double %127 to i32
  %129 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %130 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %129, i32 0, i32 3
  store i32 %128, i32* %130, align 4
  %131 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %132 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %131, i32 0, i32 3
  %133 = load i32, i32* %132, align 4
  %134 = icmp sle i32 %133, 16000
  br i1 %134, label %135, label %138

; <label>:135:                                    ; preds = %116
  %136 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %137 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %136, i32 0, i32 3
  store i32 16000, i32* %137, align 4
  br label %177

; <label>:138:                                    ; preds = %116
  %139 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %140 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %139, i32 0, i32 3
  %141 = load i32, i32* %140, align 4
  %142 = icmp sle i32 %141, 22050
  br i1 %142, label %143, label %146

; <label>:143:                                    ; preds = %138
  %144 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %145 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %144, i32 0, i32 3
  store i32 22050, i32* %145, align 4
  br label %176

; <label>:146:                                    ; preds = %138
  %147 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %148 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %147, i32 0, i32 3
  %149 = load i32, i32* %148, align 4
  %150 = icmp sle i32 %149, 24000
  br i1 %150, label %151, label %154

; <label>:151:                                    ; preds = %146
  %152 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %153 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %152, i32 0, i32 3
  store i32 24000, i32* %153, align 4
  br label %175

; <label>:154:                                    ; preds = %146
  %155 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %156 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %155, i32 0, i32 3
  %157 = load i32, i32* %156, align 4
  %158 = icmp sle i32 %157, 32000
  br i1 %158, label %159, label %162

; <label>:159:                                    ; preds = %154
  %160 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %161 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %160, i32 0, i32 3
  store i32 32000, i32* %161, align 4
  br label %174

; <label>:162:                                    ; preds = %154
  %163 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %164 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %163, i32 0, i32 3
  %165 = load i32, i32* %164, align 4
  %166 = icmp sle i32 %165, 44100
  br i1 %166, label %167, label %170

; <label>:167:                                    ; preds = %162
  %168 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %169 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %168, i32 0, i32 3
  store i32 44100, i32* %169, align 4
  br label %173

; <label>:170:                                    ; preds = %162
  %171 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %172 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %171, i32 0, i32 3
  store i32 48000, i32* %172, align 4
  br label %173

; <label>:173:                                    ; preds = %170, %167
  br label %174

; <label>:174:                                    ; preds = %173, %159
  br label %175

; <label>:175:                                    ; preds = %174, %151
  br label %176

; <label>:176:                                    ; preds = %175, %143
  br label %177

; <label>:177:                                    ; preds = %176, %135
  br label %178

; <label>:178:                                    ; preds = %177, %113, %92
  br label %179

; <label>:179:                                    ; preds = %178, %87
  br label %180

; <label>:180:                                    ; preds = %179, %30
  %181 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %182 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %181, i32 0, i32 3
  %183 = load i32, i32* %182, align 4
  %184 = icmp sle i32 %183, 24000
  %185 = select i1 %184, i32 1, i32 2
  %186 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %187 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %186, i32 0, i32 45
  store i32 %185, i32* %187, align 4
  %188 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %189 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %188, i32 0, i32 41
  store i32 800, i32* %189, align 4
  %190 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %191 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %190, i32 0, i32 45
  %192 = load i32, i32* %191, align 4
  %193 = mul nsw i32 %192, 576
  %194 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %195 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %194, i32 0, i32 42
  store i32 %193, i32* %195, align 4
  %196 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %197 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %196, i32 0, i32 11
  %198 = load i32, i32* %197, align 4
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %211

; <label>:200:                                    ; preds = %180
  %201 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %202 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %201, i32 0, i32 11
  store i32 128, i32* %202, align 4
  %203 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %204 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %203, i32 0, i32 45
  %205 = load i32, i32* %204, align 4
  %206 = icmp eq i32 %205, 1
  br i1 %206, label %207, label %210

; <label>:207:                                    ; preds = %200
  %208 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %209 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %208, i32 0, i32 11
  store i32 64, i32* %209, align 4
  br label %210

; <label>:210:                                    ; preds = %207, %200
  br label %211

; <label>:211:                                    ; preds = %210, %180
  %212 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %213 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %212, i32 0, i32 49
  store float 1.000000e+00, float* %213, align 4
  %214 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %215 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %214, i32 0, i32 3
  %216 = load i32, i32* %215, align 4
  %217 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %218 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %217, i32 0, i32 2
  %219 = load i32, i32* %218, align 4
  %220 = icmp ne i32 %216, %219
  br i1 %220, label %221, label %233

; <label>:221:                                    ; preds = %211
  %222 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %223 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %222, i32 0, i32 2
  %224 = load i32, i32* %223, align 4
  %225 = sitofp i32 %224 to float
  %226 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %227 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %226, i32 0, i32 3
  %228 = load i32, i32* %227, align 4
  %229 = sitofp i32 %228 to float
  %230 = fdiv float %225, %229
  %231 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %232 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %231, i32 0, i32 49
  store float %230, float* %232, align 4
  br label %233

; <label>:233:                                    ; preds = %221, %211
  %234 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %235 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %234, i32 0, i32 40
  store i32 0, i32* %235, align 4
  %236 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %237 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %236, i32 0, i32 0
  %238 = load i32, i32* %237, align 4
  %239 = uitofp i32 %238 to float
  %240 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %241 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %240, i32 0, i32 49
  %242 = load float, float* %241, align 4
  %243 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %244 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %243, i32 0, i32 42
  %245 = load i32, i32* %244, align 4
  %246 = sitofp i32 %245 to float
  %247 = fmul float %242, %246
  %248 = fdiv float %239, %247
  %249 = fadd float 2.000000e+00, %248
  %250 = fptosi float %249 to i32
  %251 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %252 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %251, i32 0, i32 40
  store i32 %250, i32* %252, align 4
  %253 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %254 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %253, i32 0, i32 11
  %255 = load i32, i32* %254, align 4
  %256 = icmp sge i32 %255, 320
  br i1 %256, label %257, label %260

; <label>:257:                                    ; preds = %233
  %258 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %259 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %258, i32 0, i32 21
  store i32 0, i32* %259, align 4
  br label %260

; <label>:260:                                    ; preds = %257, %233
  %261 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %262 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %261, i32 0, i32 3
  %263 = load i32, i32* %262, align 4
  %264 = mul nsw i32 %263, 16
  %265 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %266 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %265, i32 0, i32 46
  %267 = load i32, i32* %266, align 4
  %268 = mul nsw i32 %264, %267
  %269 = sitofp i32 %268 to double
  %270 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %271 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %270, i32 0, i32 11
  %272 = load i32, i32* %271, align 4
  %273 = sitofp i32 %272 to double
  %274 = fmul double 1.000000e+03, %273
  %275 = fdiv double %269, %274
  %276 = fptrunc double %275 to float
  store float %276, float* %4, align 4
  %277 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %278 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %277, i32 0, i32 21
  %279 = load i32, i32* %278, align 4
  %280 = icmp ne i32 %279, 0
  br i1 %280, label %281, label %291

; <label>:281:                                    ; preds = %260
  %282 = load float, float* %4, align 4
  %283 = fcmp ogt float %282, 1.100000e+01
  br i1 %283, label %284, label %291

; <label>:284:                                    ; preds = %281
  %285 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %286 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %285, i32 0, i32 22
  %287 = load i32, i32* %286, align 4
  %288 = sitofp i32 %287 to double
  %289 = fadd double 4.400000e+00, %288
  %290 = fptrunc double %289 to float
  store float %290, float* %4, align 4
  br label %291

; <label>:291:                                    ; preds = %284, %281, %260
  %292 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %293 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %292, i32 0, i32 9
  %294 = load i32, i32* %293, align 4
  %295 = icmp ne i32 %294, 0
  br i1 %295, label %308, label %296

; <label>:296:                                    ; preds = %291
  %297 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %298 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %297, i32 0, i32 8
  %299 = load i32, i32* %298, align 4
  %300 = icmp ne i32 %299, 3
  br i1 %300, label %301, label %308

; <label>:301:                                    ; preds = %296
  %302 = load float, float* %4, align 4
  %303 = fcmp olt float %302, 9.000000e+00
  br i1 %303, label %304, label %307

; <label>:304:                                    ; preds = %301
  %305 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %306 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %305, i32 0, i32 8
  store i32 0, i32* %306, align 4
  br label %307

; <label>:307:                                    ; preds = %304, %301
  br label %308

; <label>:308:                                    ; preds = %307, %296, %291
  %309 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %310 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %309, i32 0, i32 25
  %311 = load i32, i32* %310, align 4
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %313, label %339

; <label>:313:                                    ; preds = %308
  %314 = load float, float* %4, align 4
  %315 = fpext float %314 to double
  %316 = fdiv double %315, 1.600000e+01
  %317 = call arm_aapcscc double @log(double %316) #7
  %318 = fmul double 1.800000e+01, %317
  %319 = fsub double 1.450000e+01, %318
  %320 = call arm_aapcscc double @floor(double %319) #9
  %321 = fadd double 1.000000e+00, %320
  %322 = fptosi double %321 to i32
  store i32 %322, i32* %5, align 4
  %323 = load i32, i32* %5, align 4
  %324 = icmp slt i32 %323, 31
  br i1 %324, label %325, label %338

; <label>:325:                                    ; preds = %313
  %326 = load i32, i32* %5, align 4
  %327 = sitofp i32 %326 to double
  %328 = fdiv double %327, 3.100000e+01
  %329 = fptrunc double %328 to float
  %330 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %331 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %330, i32 0, i32 53
  store float %329, float* %331, align 4
  %332 = load i32, i32* %5, align 4
  %333 = sitofp i32 %332 to double
  %334 = fdiv double %333, 3.100000e+01
  %335 = fptrunc double %334 to float
  %336 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %337 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %336, i32 0, i32 54
  store float %335, float* %337, align 4
  br label %338

; <label>:338:                                    ; preds = %325, %313
  br label %339

; <label>:339:                                    ; preds = %338, %308
  %340 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %341 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %340, i32 0, i32 26
  %342 = load i32, i32* %341, align 4
  %343 = icmp sgt i32 %342, 0
  br i1 %343, label %344, label %421

; <label>:344:                                    ; preds = %339
  %345 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %346 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %345, i32 0, i32 26
  %347 = load i32, i32* %346, align 4
  %348 = sitofp i32 %347 to double
  %349 = fmul double 2.000000e+00, %348
  %350 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %351 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %350, i32 0, i32 3
  %352 = load i32, i32* %351, align 4
  %353 = sitofp i32 %352 to double
  %354 = fdiv double %349, %353
  %355 = fptrunc double %354 to float
  %356 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %357 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %356, i32 0, i32 55
  store float %355, float* %357, align 4
  %358 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %359 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %358, i32 0, i32 28
  %360 = load i32, i32* %359, align 4
  %361 = icmp sge i32 %360, 0
  br i1 %361, label %362, label %380

; <label>:362:                                    ; preds = %344
  %363 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %364 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %363, i32 0, i32 26
  %365 = load i32, i32* %364, align 4
  %366 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %367 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %366, i32 0, i32 28
  %368 = load i32, i32* %367, align 4
  %369 = add nsw i32 %365, %368
  %370 = sitofp i32 %369 to double
  %371 = fmul double 2.000000e+00, %370
  %372 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %373 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %372, i32 0, i32 3
  %374 = load i32, i32* %373, align 4
  %375 = sitofp i32 %374 to double
  %376 = fdiv double %371, %375
  %377 = fptrunc double %376 to float
  %378 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %379 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %378, i32 0, i32 56
  store float %377, float* %379, align 4
  br label %394

; <label>:380:                                    ; preds = %344
  %381 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %382 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %381, i32 0, i32 26
  %383 = load i32, i32* %382, align 4
  %384 = sitofp i32 %383 to double
  %385 = fmul double 2.000000e+00, %384
  %386 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %387 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %386, i32 0, i32 3
  %388 = load i32, i32* %387, align 4
  %389 = sitofp i32 %388 to double
  %390 = fdiv double %385, %389
  %391 = fptrunc double %390 to float
  %392 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %393 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %392, i32 0, i32 56
  store float %391, float* %393, align 4
  br label %394

; <label>:394:                                    ; preds = %380, %362
  %395 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %396 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %395, i32 0, i32 55
  %397 = load float, float* %396, align 4
  %398 = fcmp olt float 1.000000e+00, %397
  br i1 %398, label %399, label %400

; <label>:399:                                    ; preds = %394
  br label %404

; <label>:400:                                    ; preds = %394
  %401 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %402 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %401, i32 0, i32 55
  %403 = load float, float* %402, align 4
  br label %404

; <label>:404:                                    ; preds = %400, %399
  %405 = phi float [ 1.000000e+00, %399 ], [ %403, %400 ]
  %406 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %407 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %406, i32 0, i32 55
  store float %405, float* %407, align 4
  %408 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %409 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %408, i32 0, i32 56
  %410 = load float, float* %409, align 4
  %411 = fcmp olt float 1.000000e+00, %410
  br i1 %411, label %412, label %413

; <label>:412:                                    ; preds = %404
  br label %417

; <label>:413:                                    ; preds = %404
  %414 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %415 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %414, i32 0, i32 56
  %416 = load float, float* %415, align 4
  br label %417

; <label>:417:                                    ; preds = %413, %412
  %418 = phi float [ 1.000000e+00, %412 ], [ %416, %413 ]
  %419 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %420 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %419, i32 0, i32 56
  store float %418, float* %420, align 4
  br label %421

; <label>:421:                                    ; preds = %417, %339
  %422 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %423 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %422, i32 0, i32 25
  %424 = load i32, i32* %423, align 4
  %425 = icmp sgt i32 %424, 0
  br i1 %425, label %426, label %511

; <label>:426:                                    ; preds = %421
  %427 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %428 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %427, i32 0, i32 25
  %429 = load i32, i32* %428, align 4
  %430 = sitofp i32 %429 to double
  %431 = fmul double 2.000000e+00, %430
  %432 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %433 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %432, i32 0, i32 3
  %434 = load i32, i32* %433, align 4
  %435 = sitofp i32 %434 to double
  %436 = fdiv double %431, %435
  %437 = fptrunc double %436 to float
  %438 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %439 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %438, i32 0, i32 54
  store float %437, float* %439, align 4
  %440 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %441 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %440, i32 0, i32 27
  %442 = load i32, i32* %441, align 4
  %443 = icmp sge i32 %442, 0
  br i1 %443, label %444, label %470

; <label>:444:                                    ; preds = %426
  %445 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %446 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %445, i32 0, i32 25
  %447 = load i32, i32* %446, align 4
  %448 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %449 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %448, i32 0, i32 27
  %450 = load i32, i32* %449, align 4
  %451 = sub nsw i32 %447, %450
  %452 = sitofp i32 %451 to double
  %453 = fmul double 2.000000e+00, %452
  %454 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %455 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %454, i32 0, i32 3
  %456 = load i32, i32* %455, align 4
  %457 = sitofp i32 %456 to double
  %458 = fdiv double %453, %457
  %459 = fptrunc double %458 to float
  %460 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %461 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %460, i32 0, i32 53
  store float %459, float* %461, align 4
  %462 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %463 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %462, i32 0, i32 53
  %464 = load float, float* %463, align 4
  %465 = fcmp olt float %464, 0.000000e+00
  br i1 %465, label %466, label %469

; <label>:466:                                    ; preds = %444
  %467 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %468 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %467, i32 0, i32 53
  store float 0.000000e+00, float* %468, align 4
  br label %469

; <label>:469:                                    ; preds = %466, %444
  br label %484

; <label>:470:                                    ; preds = %426
  %471 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %472 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %471, i32 0, i32 25
  %473 = load i32, i32* %472, align 4
  %474 = sitofp i32 %473 to double
  %475 = fmul double 2.000000e+00, %474
  %476 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %477 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %476, i32 0, i32 3
  %478 = load i32, i32* %477, align 4
  %479 = sitofp i32 %478 to double
  %480 = fdiv double %475, %479
  %481 = fptrunc double %480 to float
  %482 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %483 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %482, i32 0, i32 53
  store float %481, float* %483, align 4
  br label %484

; <label>:484:                                    ; preds = %470, %469
  %485 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %486 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %485, i32 0, i32 53
  %487 = load float, float* %486, align 4
  %488 = fcmp olt float 1.000000e+00, %487
  br i1 %488, label %489, label %490

; <label>:489:                                    ; preds = %484
  br label %494

; <label>:490:                                    ; preds = %484
  %491 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %492 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %491, i32 0, i32 53
  %493 = load float, float* %492, align 4
  br label %494

; <label>:494:                                    ; preds = %490, %489
  %495 = phi float [ 1.000000e+00, %489 ], [ %493, %490 ]
  %496 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %497 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %496, i32 0, i32 53
  store float %495, float* %497, align 4
  %498 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %499 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %498, i32 0, i32 54
  %500 = load float, float* %499, align 4
  %501 = fcmp olt float 1.000000e+00, %500
  br i1 %501, label %502, label %503

; <label>:502:                                    ; preds = %494
  br label %507

; <label>:503:                                    ; preds = %494
  %504 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %505 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %504, i32 0, i32 54
  %506 = load float, float* %505, align 4
  br label %507

; <label>:507:                                    ; preds = %503, %502
  %508 = phi float [ 1.000000e+00, %502 ], [ %506, %503 ]
  %509 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %510 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %509, i32 0, i32 54
  store float %508, float* %510, align 4
  br label %511

; <label>:511:                                    ; preds = %507, %421
  %512 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %513 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %512, i32 0, i32 59
  %514 = load i32, i32* %513, align 4
  %515 = icmp eq i32 %514, 0
  br i1 %515, label %516, label %774

; <label>:516:                                    ; preds = %511
  %517 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %518 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %517, i32 0, i32 53
  %519 = load float, float* %518, align 4
  %520 = fcmp ogt float %519, 0.000000e+00
  br i1 %520, label %521, label %635

; <label>:521:                                    ; preds = %516
  store i32 999, i32* %8, align 4
  store i32 -1, i32* %7, align 4
  store i32 0, i32* %6, align 4
  br label %522

; <label>:522:                                    ; preds = %602, %521
  %523 = load i32, i32* %6, align 4
  %524 = icmp sle i32 %523, 31
  br i1 %524, label %525, label %605

; <label>:525:                                    ; preds = %522
  %526 = load i32, i32* %6, align 4
  %527 = sitofp i32 %526 to double
  %528 = fdiv double %527, 3.100000e+01
  store double %528, double* %10, align 8
  store double 1.000000e+00, double* %9, align 8
  %529 = load double, double* %10, align 8
  %530 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %531 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %530, i32 0, i32 54
  %532 = load float, float* %531, align 4
  %533 = fpext float %532 to double
  %534 = fcmp oge double %529, %533
  br i1 %534, label %535, label %551

; <label>:535:                                    ; preds = %525
  %536 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %537 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %536, i32 0, i32 57
  %538 = load i32, i32* %537, align 4
  %539 = load i32, i32* %6, align 4
  %540 = icmp slt i32 %538, %539
  br i1 %540, label %541, label %545

; <label>:541:                                    ; preds = %535
  %542 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %543 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %542, i32 0, i32 57
  %544 = load i32, i32* %543, align 4
  br label %547

; <label>:545:                                    ; preds = %535
  %546 = load i32, i32* %6, align 4
  br label %547

; <label>:547:                                    ; preds = %545, %541
  %548 = phi i32 [ %544, %541 ], [ %546, %545 ]
  %549 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %550 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %549, i32 0, i32 57
  store i32 %548, i32* %550, align 4
  store double 0.000000e+00, double* %9, align 8
  br label %551

; <label>:551:                                    ; preds = %547, %525
  %552 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %553 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %552, i32 0, i32 53
  %554 = load float, float* %553, align 4
  %555 = fpext float %554 to double
  %556 = load double, double* %10, align 8
  %557 = fcmp olt double %555, %556
  br i1 %557, label %558, label %601

; <label>:558:                                    ; preds = %551
  %559 = load double, double* %10, align 8
  %560 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %561 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %560, i32 0, i32 54
  %562 = load float, float* %561, align 4
  %563 = fpext float %562 to double
  %564 = fcmp olt double %559, %563
  br i1 %564, label %565, label %601

; <label>:565:                                    ; preds = %558
  %566 = load i32, i32* %8, align 4
  %567 = load i32, i32* %6, align 4
  %568 = icmp slt i32 %566, %567
  br i1 %568, label %569, label %571

; <label>:569:                                    ; preds = %565
  %570 = load i32, i32* %8, align 4
  br label %573

; <label>:571:                                    ; preds = %565
  %572 = load i32, i32* %6, align 4
  br label %573

; <label>:573:                                    ; preds = %571, %569
  %574 = phi i32 [ %570, %569 ], [ %572, %571 ]
  store i32 %574, i32* %8, align 4
  %575 = load i32, i32* %7, align 4
  %576 = load i32, i32* %6, align 4
  %577 = icmp sgt i32 %575, %576
  br i1 %577, label %578, label %580

; <label>:578:                                    ; preds = %573
  %579 = load i32, i32* %7, align 4
  br label %582

; <label>:580:                                    ; preds = %573
  %581 = load i32, i32* %6, align 4
  br label %582

; <label>:582:                                    ; preds = %580, %578
  %583 = phi i32 [ %579, %578 ], [ %581, %580 ]
  store i32 %583, i32* %7, align 4
  %584 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %585 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %584, i32 0, i32 53
  %586 = load float, float* %585, align 4
  %587 = fpext float %586 to double
  %588 = load double, double* %10, align 8
  %589 = fsub double %587, %588
  %590 = fmul double 0x3FF921FB54442D18, %589
  %591 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %592 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %591, i32 0, i32 54
  %593 = load float, float* %592, align 4
  %594 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %595 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %594, i32 0, i32 53
  %596 = load float, float* %595, align 4
  %597 = fsub float %593, %596
  %598 = fpext float %597 to double
  %599 = fdiv double %590, %598
  %600 = call arm_aapcscc double @cos(double %599) #7
  store double %600, double* %9, align 8
  br label %601

; <label>:601:                                    ; preds = %582, %558, %551
  br label %602

; <label>:602:                                    ; preds = %601
  %603 = load i32, i32* %6, align 4
  %604 = add nsw i32 %603, 1
  store i32 %604, i32* %6, align 4
  br label %522

; <label>:605:                                    ; preds = %522
  %606 = load i32, i32* %8, align 4
  %607 = icmp eq i32 %606, 999
  br i1 %607, label %608, label %618

; <label>:608:                                    ; preds = %605
  %609 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %610 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %609, i32 0, i32 57
  %611 = load i32, i32* %610, align 4
  %612 = sitofp i32 %611 to double
  %613 = fsub double %612, 7.500000e-01
  %614 = fdiv double %613, 3.100000e+01
  %615 = fptrunc double %614 to float
  %616 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %617 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %616, i32 0, i32 53
  store float %615, float* %617, align 4
  br label %626

; <label>:618:                                    ; preds = %605
  %619 = load i32, i32* %8, align 4
  %620 = sitofp i32 %619 to double
  %621 = fsub double %620, 7.500000e-01
  %622 = fdiv double %621, 3.100000e+01
  %623 = fptrunc double %622 to float
  %624 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %625 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %624, i32 0, i32 53
  store float %623, float* %625, align 4
  br label %626

; <label>:626:                                    ; preds = %618, %608
  %627 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %628 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %627, i32 0, i32 57
  %629 = load i32, i32* %628, align 4
  %630 = sitofp i32 %629 to double
  %631 = fdiv double %630, 3.100000e+01
  %632 = fptrunc double %631 to float
  %633 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %634 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %633, i32 0, i32 54
  store float %632, float* %634, align 4
  br label %635

; <label>:635:                                    ; preds = %626, %516
  %636 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %637 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %636, i32 0, i32 56
  %638 = load float, float* %637, align 4
  %639 = fcmp ogt float %638, 0.000000e+00
  br i1 %639, label %640, label %654

; <label>:640:                                    ; preds = %635
  %641 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %642 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %641, i32 0, i32 56
  %643 = load float, float* %642, align 4
  %644 = fpext float %643 to double
  %645 = fcmp olt double %644, 0x3F964BF964BF964C
  br i1 %645, label %646, label %653

; <label>:646:                                    ; preds = %640
  %647 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %648 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %647, i32 0, i32 55
  store float 0.000000e+00, float* %648, align 4
  %649 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %650 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %649, i32 0, i32 56
  store float 0.000000e+00, float* %650, align 4
  %651 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %652 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %651, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.173, i32 0, i32 0))
  br label %653

; <label>:653:                                    ; preds = %646, %640
  br label %654

; <label>:654:                                    ; preds = %653, %635
  %655 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %656 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %655, i32 0, i32 56
  %657 = load float, float* %656, align 4
  %658 = fcmp ogt float %657, 0.000000e+00
  br i1 %658, label %659, label %773

; <label>:659:                                    ; preds = %654
  store i32 999, i32* %8, align 4
  store i32 -1, i32* %7, align 4
  store i32 0, i32* %6, align 4
  br label %660

; <label>:660:                                    ; preds = %740, %659
  %661 = load i32, i32* %6, align 4
  %662 = icmp sle i32 %661, 31
  br i1 %662, label %663, label %743

; <label>:663:                                    ; preds = %660
  %664 = load i32, i32* %6, align 4
  %665 = sitofp i32 %664 to double
  %666 = fdiv double %665, 3.100000e+01
  store double %666, double* %10, align 8
  store double 1.000000e+00, double* %9, align 8
  %667 = load double, double* %10, align 8
  %668 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %669 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %668, i32 0, i32 55
  %670 = load float, float* %669, align 4
  %671 = fpext float %670 to double
  %672 = fcmp ole double %667, %671
  br i1 %672, label %673, label %689

; <label>:673:                                    ; preds = %663
  %674 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %675 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %674, i32 0, i32 58
  %676 = load i32, i32* %675, align 4
  %677 = load i32, i32* %6, align 4
  %678 = icmp sgt i32 %676, %677
  br i1 %678, label %679, label %683

; <label>:679:                                    ; preds = %673
  %680 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %681 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %680, i32 0, i32 58
  %682 = load i32, i32* %681, align 4
  br label %685

; <label>:683:                                    ; preds = %673
  %684 = load i32, i32* %6, align 4
  br label %685

; <label>:685:                                    ; preds = %683, %679
  %686 = phi i32 [ %682, %679 ], [ %684, %683 ]
  %687 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %688 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %687, i32 0, i32 58
  store i32 %686, i32* %688, align 4
  store double 0.000000e+00, double* %9, align 8
  br label %689

; <label>:689:                                    ; preds = %685, %663
  %690 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %691 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %690, i32 0, i32 55
  %692 = load float, float* %691, align 4
  %693 = fpext float %692 to double
  %694 = load double, double* %10, align 8
  %695 = fcmp olt double %693, %694
  br i1 %695, label %696, label %739

; <label>:696:                                    ; preds = %689
  %697 = load double, double* %10, align 8
  %698 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %699 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %698, i32 0, i32 56
  %700 = load float, float* %699, align 4
  %701 = fpext float %700 to double
  %702 = fcmp olt double %697, %701
  br i1 %702, label %703, label %739

; <label>:703:                                    ; preds = %696
  %704 = load i32, i32* %8, align 4
  %705 = load i32, i32* %6, align 4
  %706 = icmp slt i32 %704, %705
  br i1 %706, label %707, label %709

; <label>:707:                                    ; preds = %703
  %708 = load i32, i32* %8, align 4
  br label %711

; <label>:709:                                    ; preds = %703
  %710 = load i32, i32* %6, align 4
  br label %711

; <label>:711:                                    ; preds = %709, %707
  %712 = phi i32 [ %708, %707 ], [ %710, %709 ]
  store i32 %712, i32* %8, align 4
  %713 = load i32, i32* %7, align 4
  %714 = load i32, i32* %6, align 4
  %715 = icmp sgt i32 %713, %714
  br i1 %715, label %716, label %718

; <label>:716:                                    ; preds = %711
  %717 = load i32, i32* %7, align 4
  br label %720

; <label>:718:                                    ; preds = %711
  %719 = load i32, i32* %6, align 4
  br label %720

; <label>:720:                                    ; preds = %718, %716
  %721 = phi i32 [ %717, %716 ], [ %719, %718 ]
  store i32 %721, i32* %7, align 4
  %722 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %723 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %722, i32 0, i32 56
  %724 = load float, float* %723, align 4
  %725 = fpext float %724 to double
  %726 = load double, double* %10, align 8
  %727 = fsub double %725, %726
  %728 = fmul double 0x3FF921FB54442D18, %727
  %729 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %730 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %729, i32 0, i32 56
  %731 = load float, float* %730, align 4
  %732 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %733 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %732, i32 0, i32 55
  %734 = load float, float* %733, align 4
  %735 = fsub float %731, %734
  %736 = fpext float %735 to double
  %737 = fdiv double %728, %736
  %738 = call arm_aapcscc double @cos(double %737) #7
  store double %738, double* %9, align 8
  br label %739

; <label>:739:                                    ; preds = %720, %696, %689
  br label %740

; <label>:740:                                    ; preds = %739
  %741 = load i32, i32* %6, align 4
  %742 = add nsw i32 %741, 1
  store i32 %742, i32* %6, align 4
  br label %660

; <label>:743:                                    ; preds = %660
  %744 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %745 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %744, i32 0, i32 58
  %746 = load i32, i32* %745, align 4
  %747 = sitofp i32 %746 to double
  %748 = fdiv double %747, 3.100000e+01
  %749 = fptrunc double %748 to float
  %750 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %751 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %750, i32 0, i32 55
  store float %749, float* %751, align 4
  %752 = load i32, i32* %7, align 4
  %753 = icmp eq i32 %752, -1
  br i1 %753, label %754, label %764

; <label>:754:                                    ; preds = %743
  %755 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %756 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %755, i32 0, i32 58
  %757 = load i32, i32* %756, align 4
  %758 = sitofp i32 %757 to double
  %759 = fadd double %758, 7.500000e-01
  %760 = fdiv double %759, 3.100000e+01
  %761 = fptrunc double %760 to float
  %762 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %763 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %762, i32 0, i32 56
  store float %761, float* %763, align 4
  br label %772

; <label>:764:                                    ; preds = %743
  %765 = load i32, i32* %7, align 4
  %766 = sitofp i32 %765 to double
  %767 = fadd double %766, 7.500000e-01
  %768 = fdiv double %767, 3.100000e+01
  %769 = fptrunc double %768 to float
  %770 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %771 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %770, i32 0, i32 56
  store float %769, float* %771, align 4
  br label %772

; <label>:772:                                    ; preds = %764, %754
  br label %773

; <label>:773:                                    ; preds = %772, %654
  br label %774

; <label>:774:                                    ; preds = %773, %511
  %775 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %776 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %775, i32 0, i32 59
  %777 = load i32, i32* %776, align 4
  %778 = icmp eq i32 %777, 1
  br i1 %778, label %779, label %780

; <label>:779:                                    ; preds = %774
  br label %780

; <label>:780:                                    ; preds = %779, %774
  %781 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %782 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %781, i32 0, i32 52
  store i32 0, i32* %782, align 4
  %783 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %784 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %783, i32 0, i32 8
  %785 = load i32, i32* %784, align 4
  %786 = icmp eq i32 %785, 3
  %787 = select i1 %786, i32 1, i32 2
  %788 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %789 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %788, i32 0, i32 46
  store i32 %787, i32* %789, align 4
  %790 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %791 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %790, i32 0, i32 3
  %792 = load i32, i32* %791, align 4
  %793 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %794 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %793, i32 0, i32 43
  %795 = call arm_aapcscc i32 @SmpFrqIndex(i32 %792, i32* %794)
  %796 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %797 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %796, i32 0, i32 51
  store i32 %795, i32* %797, align 4
  %798 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %799 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %798, i32 0, i32 51
  %800 = load i32, i32* %799, align 4
  %801 = icmp slt i32 %800, 0
  br i1 %801, label %802, label %804

; <label>:802:                                    ; preds = %780
  %803 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  call arm_aapcscc void @display_bitrates(%struct._IO_FILE* %803)
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:804:                                    ; preds = %780
  %805 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %806 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %805, i32 0, i32 11
  %807 = load i32, i32* %806, align 4
  %808 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %809 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %808, i32 0, i32 43
  %810 = load i32, i32* %809, align 4
  %811 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %812 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %811, i32 0, i32 3
  %813 = load i32, i32* %812, align 4
  %814 = call arm_aapcscc i32 @BitrateIndex(i32 %807, i32 %810, i32 %813)
  %815 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %816 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %815, i32 0, i32 50
  store i32 %814, i32* %816, align 4
  %817 = icmp slt i32 %814, 0
  br i1 %817, label %818, label %820

; <label>:818:                                    ; preds = %804
  %819 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  call arm_aapcscc void @display_bitrates(%struct._IO_FILE* %819)
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:820:                                    ; preds = %804
  %821 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %822 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %821, i32 0, i32 21
  %823 = load i32, i32* %822, align 4
  %824 = icmp ne i32 %823, 0
  br i1 %824, label %825, label %908

; <label>:825:                                    ; preds = %820
  %826 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %827 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %826, i32 0, i32 24
  %828 = load i32, i32* %827, align 4
  %829 = icmp eq i32 0, %828
  br i1 %829, label %830, label %865

; <label>:830:                                    ; preds = %825
  %831 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %832 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %831, i32 0, i32 48
  store i32 13, i32* %832, align 4
  %833 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %834 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %833, i32 0, i32 23
  %835 = load i32, i32* %834, align 4
  %836 = icmp sge i32 %835, 256
  br i1 %836, label %837, label %840

; <label>:837:                                    ; preds = %830
  %838 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %839 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %838, i32 0, i32 48
  store i32 14, i32* %839, align 4
  br label %840

; <label>:840:                                    ; preds = %837, %830
  %841 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %842 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %841, i32 0, i32 22
  %843 = load i32, i32* %842, align 4
  %844 = icmp eq i32 %843, 0
  br i1 %844, label %845, label %848

; <label>:845:                                    ; preds = %840
  %846 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %847 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %846, i32 0, i32 48
  store i32 14, i32* %847, align 4
  br label %848

; <label>:848:                                    ; preds = %845, %840
  %849 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %850 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %849, i32 0, i32 22
  %851 = load i32, i32* %850, align 4
  %852 = icmp sge i32 %851, 4
  br i1 %852, label %853, label %856

; <label>:853:                                    ; preds = %848
  %854 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %855 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %854, i32 0, i32 48
  store i32 12, i32* %855, align 4
  br label %856

; <label>:856:                                    ; preds = %853, %848
  %857 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %858 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %857, i32 0, i32 22
  %859 = load i32, i32* %858, align 4
  %860 = icmp sge i32 %859, 8
  br i1 %860, label %861, label %864

; <label>:861:                                    ; preds = %856
  %862 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %863 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %862, i32 0, i32 48
  store i32 9, i32* %863, align 4
  br label %864

; <label>:864:                                    ; preds = %861, %856
  br label %882

; <label>:865:                                    ; preds = %825
  %866 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %867 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %866, i32 0, i32 24
  %868 = load i32, i32* %867, align 4
  %869 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %870 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %869, i32 0, i32 43
  %871 = load i32, i32* %870, align 4
  %872 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %873 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %872, i32 0, i32 3
  %874 = load i32, i32* %873, align 4
  %875 = call arm_aapcscc i32 @BitrateIndex(i32 %868, i32 %871, i32 %874)
  %876 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %877 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %876, i32 0, i32 48
  store i32 %875, i32* %877, align 4
  %878 = icmp slt i32 %875, 0
  br i1 %878, label %879, label %881

; <label>:879:                                    ; preds = %865
  %880 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  call arm_aapcscc void @display_bitrates(%struct._IO_FILE* %880)
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:881:                                    ; preds = %865
  br label %882

; <label>:882:                                    ; preds = %881, %864
  %883 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %884 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %883, i32 0, i32 23
  %885 = load i32, i32* %884, align 4
  %886 = icmp eq i32 0, %885
  br i1 %886, label %887, label %890

; <label>:887:                                    ; preds = %882
  %888 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %889 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %888, i32 0, i32 47
  store i32 1, i32* %889, align 4
  br label %907

; <label>:890:                                    ; preds = %882
  %891 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %892 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %891, i32 0, i32 23
  %893 = load i32, i32* %892, align 4
  %894 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %895 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %894, i32 0, i32 43
  %896 = load i32, i32* %895, align 4
  %897 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %898 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %897, i32 0, i32 3
  %899 = load i32, i32* %898, align 4
  %900 = call arm_aapcscc i32 @BitrateIndex(i32 %893, i32 %896, i32 %899)
  %901 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %902 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %901, i32 0, i32 47
  store i32 %900, i32* %902, align 4
  %903 = icmp slt i32 %900, 0
  br i1 %903, label %904, label %906

; <label>:904:                                    ; preds = %890
  %905 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  call arm_aapcscc void @display_bitrates(%struct._IO_FILE* %905)
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:906:                                    ; preds = %890
  br label %907

; <label>:907:                                    ; preds = %906, %887
  br label %908

; <label>:908:                                    ; preds = %907, %820
  %909 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %910 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %909, i32 0, i32 21
  %911 = load i32, i32* %910, align 4
  %912 = icmp ne i32 %911, 0
  br i1 %912, label %913, label %927

; <label>:913:                                    ; preds = %908
  %914 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %915 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %914, i32 0, i32 6
  %916 = load i32, i32* %915, align 4
  %917 = icmp slt i32 %916, 2
  br i1 %917, label %918, label %922

; <label>:918:                                    ; preds = %913
  %919 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %920 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %919, i32 0, i32 6
  %921 = load i32, i32* %920, align 4
  br label %923

; <label>:922:                                    ; preds = %913
  br label %923

; <label>:923:                                    ; preds = %922, %918
  %924 = phi i32 [ %921, %918 ], [ 2, %922 ]
  %925 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %926 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %925, i32 0, i32 6
  store i32 %924, i32* %926, align 4
  br label %927

; <label>:927:                                    ; preds = %923, %908
  %928 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %929 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %928, i32 0, i32 8
  %930 = load i32, i32* %929, align 4
  %931 = icmp eq i32 %930, 3
  br i1 %931, label %932, label %935

; <label>:932:                                    ; preds = %927
  %933 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %934 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %933, i32 0, i32 10
  store i32 0, i32* %934, align 4
  br label %935

; <label>:935:                                    ; preds = %932, %927
  %936 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %937 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %936, i32 0, i32 21
  %938 = load i32, i32* %937, align 4
  %939 = icmp eq i32 %938, 0
  br i1 %939, label %940, label %943

; <label>:940:                                    ; preds = %935
  %941 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %942 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %941, i32 0, i32 5
  store i32 0, i32* %942, align 4
  br label %943

; <label>:943:                                    ; preds = %940, %935
  %944 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %945 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %944, i32 0, i32 32
  %946 = load i8*, i8** %945, align 4
  %947 = icmp ne i8* %946, null
  br i1 %947, label %948, label %959

; <label>:948:                                    ; preds = %943
  %949 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %950 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %949, i32 0, i32 32
  %951 = load i8*, i8** %950, align 4
  %952 = getelementptr inbounds i8, i8* %951, i32 0
  %953 = load i8, i8* %952, align 1
  %954 = zext i8 %953 to i32
  %955 = icmp eq i32 %954, 45
  br i1 %955, label %956, label %959

; <label>:956:                                    ; preds = %948
  %957 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %958 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %957, i32 0, i32 5
  store i32 0, i32* %958, align 4
  br label %959

; <label>:959:                                    ; preds = %956, %948, %943
  %960 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %961 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %960, i32 0, i32 32
  %962 = load i8*, i8** %961, align 4
  %963 = icmp eq i8* %962, null
  br i1 %963, label %972, label %964

; <label>:964:                                    ; preds = %959
  %965 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %966 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %965, i32 0, i32 32
  %967 = load i8*, i8** %966, align 4
  %968 = getelementptr inbounds i8, i8* %967, i32 0
  %969 = load i8, i8* %968, align 1
  %970 = zext i8 %969 to i32
  %971 = icmp eq i32 %970, 45
  br i1 %971, label %972, label %973

; <label>:972:                                    ; preds = %964, %959
  store i32 0, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i32 0, i32 0), align 4
  br label %973

; <label>:973:                                    ; preds = %972, %964
  %974 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %975 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %974, i32 0, i32 4
  %976 = load i32, i32* %975, align 4
  %977 = icmp ne i32 %976, 0
  br i1 %977, label %978, label %981

; <label>:978:                                    ; preds = %973
  %979 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %980 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %979, i32 0, i32 5
  store i32 0, i32* %980, align 4
  br label %981

; <label>:981:                                    ; preds = %978, %973
  call arm_aapcscc void @init_bit_stream_w(%struct.bit_stream_struc* @bs.172)
  %982 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %983 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %982, i32 0, i32 6
  %984 = load i32, i32* %983, align 4
  %985 = icmp eq i32 %984, 9
  br i1 %985, label %986, label %999

; <label>:986:                                    ; preds = %981
  %987 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %988 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %987, i32 0, i32 59
  store i32 0, i32* %988, align 4
  %989 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %990 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %989, i32 0, i32 63
  store i32 0, i32* %990, align 4
  %991 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %992 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %991, i32 0, i32 60
  store i32 0, i32* %992, align 4
  %993 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %994 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %993, i32 0, i32 61
  store i32 0, i32* %994, align 4
  %995 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %996 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %995, i32 0, i32 62
  store i32 0, i32* %996, align 4
  %997 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %998 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %997, i32 0, i32 64
  store i32 0, i32* %998, align 4
  br label %999

; <label>:999:                                    ; preds = %986, %981
  %1000 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1001 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1000, i32 0, i32 6
  %1002 = load i32, i32* %1001, align 4
  %1003 = icmp eq i32 %1002, 8
  br i1 %1003, label %1004, label %1007

; <label>:1004:                                   ; preds = %999
  %1005 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1006 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1005, i32 0, i32 6
  store i32 7, i32* %1006, align 4
  br label %1007

; <label>:1007:                                   ; preds = %1004, %999
  %1008 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1009 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1008, i32 0, i32 6
  %1010 = load i32, i32* %1009, align 4
  %1011 = icmp eq i32 %1010, 7
  br i1 %1011, label %1012, label %1025

; <label>:1012:                                   ; preds = %1007
  %1013 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1014 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1013, i32 0, i32 59
  store i32 0, i32* %1014, align 4
  %1015 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1016 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1015, i32 0, i32 63
  store i32 1, i32* %1016, align 4
  %1017 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1018 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1017, i32 0, i32 60
  store i32 0, i32* %1018, align 4
  %1019 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1020 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1019, i32 0, i32 61
  store i32 0, i32* %1020, align 4
  %1021 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1022 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1021, i32 0, i32 62
  store i32 0, i32* %1022, align 4
  %1023 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1024 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1023, i32 0, i32 64
  store i32 0, i32* %1024, align 4
  br label %1025

; <label>:1025:                                   ; preds = %1012, %1007
  %1026 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1027 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1026, i32 0, i32 6
  %1028 = load i32, i32* %1027, align 4
  %1029 = icmp eq i32 %1028, 6
  br i1 %1029, label %1030, label %1033

; <label>:1030:                                   ; preds = %1025
  %1031 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1032 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1031, i32 0, i32 6
  store i32 5, i32* %1032, align 4
  br label %1033

; <label>:1033:                                   ; preds = %1030, %1025
  %1034 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1035 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1034, i32 0, i32 6
  %1036 = load i32, i32* %1035, align 4
  %1037 = icmp eq i32 %1036, 5
  br i1 %1037, label %1038, label %1051

; <label>:1038:                                   ; preds = %1033
  %1039 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1040 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1039, i32 0, i32 59
  store i32 0, i32* %1040, align 4
  %1041 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1042 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1041, i32 0, i32 63
  store i32 1, i32* %1042, align 4
  %1043 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1044 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1043, i32 0, i32 60
  store i32 0, i32* %1044, align 4
  %1045 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1046 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1045, i32 0, i32 61
  store i32 1, i32* %1046, align 4
  %1047 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1048 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1047, i32 0, i32 62
  store i32 0, i32* %1048, align 4
  %1049 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1050 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1049, i32 0, i32 64
  store i32 0, i32* %1050, align 4
  br label %1051

; <label>:1051:                                   ; preds = %1038, %1033
  %1052 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1053 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1052, i32 0, i32 6
  %1054 = load i32, i32* %1053, align 4
  %1055 = icmp eq i32 %1054, 4
  br i1 %1055, label %1056, label %1059

; <label>:1056:                                   ; preds = %1051
  %1057 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1058 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1057, i32 0, i32 6
  store i32 2, i32* %1058, align 4
  br label %1059

; <label>:1059:                                   ; preds = %1056, %1051
  %1060 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1061 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1060, i32 0, i32 6
  %1062 = load i32, i32* %1061, align 4
  %1063 = icmp eq i32 %1062, 3
  br i1 %1063, label %1064, label %1067

; <label>:1064:                                   ; preds = %1059
  %1065 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1066 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1065, i32 0, i32 6
  store i32 2, i32* %1066, align 4
  br label %1067

; <label>:1067:                                   ; preds = %1064, %1059
  %1068 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1069 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1068, i32 0, i32 6
  %1070 = load i32, i32* %1069, align 4
  %1071 = icmp eq i32 %1070, 2
  br i1 %1071, label %1072, label %1085

; <label>:1072:                                   ; preds = %1067
  %1073 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1074 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1073, i32 0, i32 59
  store i32 0, i32* %1074, align 4
  %1075 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1076 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1075, i32 0, i32 63
  store i32 1, i32* %1076, align 4
  %1077 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1078 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1077, i32 0, i32 60
  store i32 1, i32* %1078, align 4
  %1079 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1080 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1079, i32 0, i32 61
  store i32 1, i32* %1080, align 4
  %1081 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1082 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1081, i32 0, i32 62
  store i32 0, i32* %1082, align 4
  %1083 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1084 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1083, i32 0, i32 64
  store i32 1, i32* %1084, align 4
  br label %1085

; <label>:1085:                                   ; preds = %1072, %1067
  %1086 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1087 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1086, i32 0, i32 6
  %1088 = load i32, i32* %1087, align 4
  %1089 = icmp eq i32 %1088, 1
  br i1 %1089, label %1090, label %1103

; <label>:1090:                                   ; preds = %1085
  %1091 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1092 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1091, i32 0, i32 59
  store i32 0, i32* %1092, align 4
  %1093 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1094 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1093, i32 0, i32 63
  store i32 1, i32* %1094, align 4
  %1095 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1096 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1095, i32 0, i32 60
  store i32 1, i32* %1096, align 4
  %1097 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1098 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1097, i32 0, i32 61
  store i32 1, i32* %1098, align 4
  %1099 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1100 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1099, i32 0, i32 62
  store i32 1, i32* %1100, align 4
  %1101 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1102 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1101, i32 0, i32 64
  store i32 1, i32* %1102, align 4
  br label %1103

; <label>:1103:                                   ; preds = %1090, %1085
  %1104 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1105 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1104, i32 0, i32 6
  %1106 = load i32, i32* %1105, align 4
  %1107 = icmp eq i32 %1106, 0
  br i1 %1107, label %1108, label %1121

; <label>:1108:                                   ; preds = %1103
  %1109 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1110 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1109, i32 0, i32 59
  store i32 1, i32* %1110, align 4
  %1111 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1112 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1111, i32 0, i32 63
  store i32 1, i32* %1112, align 4
  %1113 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1114 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1113, i32 0, i32 60
  store i32 1, i32* %1114, align 4
  %1115 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1116 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1115, i32 0, i32 61
  store i32 3, i32* %1116, align 4
  %1117 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1118 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1117, i32 0, i32 62
  store i32 2, i32* %1118, align 4
  %1119 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1120 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1119, i32 0, i32 64
  store i32 2, i32* %1120, align 4
  call arm_aapcscc void @exit(i32 -99) #8
  unreachable

; <label>:1121:                                   ; preds = %1103
  store i32 0, i32* %3, align 4
  br label %1122

; <label>:1122:                                   ; preds = %1141, %1121
  %1123 = load i32, i32* %3, align 4
  %1124 = icmp slt i32 %1123, 23
  br i1 %1124, label %1125, label %1144

; <label>:1125:                                   ; preds = %1122
  %1126 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1127 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1126, i32 0, i32 51
  %1128 = load i32, i32* %1127, align 4
  %1129 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1130 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1129, i32 0, i32 43
  %1131 = load i32, i32* %1130, align 4
  %1132 = mul nsw i32 %1131, 3
  %1133 = add nsw i32 %1128, %1132
  %1134 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i32 0, i32 %1133
  %1135 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* %1134, i32 0, i32 0
  %1136 = load i32, i32* %3, align 4
  %1137 = getelementptr inbounds [23 x i32], [23 x i32]* %1135, i32 0, i32 %1136
  %1138 = load i32, i32* %1137, align 4
  %1139 = load i32, i32* %3, align 4
  %1140 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %1139
  store i32 %1138, i32* %1140, align 4
  br label %1141

; <label>:1141:                                   ; preds = %1125
  %1142 = load i32, i32* %3, align 4
  %1143 = add nsw i32 %1142, 1
  store i32 %1143, i32* %3, align 4
  br label %1122

; <label>:1144:                                   ; preds = %1122
  store i32 0, i32* %3, align 4
  br label %1145

; <label>:1145:                                   ; preds = %1164, %1144
  %1146 = load i32, i32* %3, align 4
  %1147 = icmp slt i32 %1146, 14
  br i1 %1147, label %1148, label %1167

; <label>:1148:                                   ; preds = %1145
  %1149 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1150 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1149, i32 0, i32 51
  %1151 = load i32, i32* %1150, align 4
  %1152 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1153 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1152, i32 0, i32 43
  %1154 = load i32, i32* %1153, align 4
  %1155 = mul nsw i32 %1154, 3
  %1156 = add nsw i32 %1151, %1155
  %1157 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i32 0, i32 %1156
  %1158 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* %1157, i32 0, i32 1
  %1159 = load i32, i32* %3, align 4
  %1160 = getelementptr inbounds [14 x i32], [14 x i32]* %1158, i32 0, i32 %1159
  %1161 = load i32, i32* %1160, align 4
  %1162 = load i32, i32* %3, align 4
  %1163 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %1162
  store i32 %1161, i32* %1163, align 4
  br label %1164

; <label>:1164:                                   ; preds = %1148
  %1165 = load i32, i32* %3, align 4
  %1166 = add nsw i32 %1165, 1
  store i32 %1166, i32* %3, align 4
  br label %1145

; <label>:1167:                                   ; preds = %1145
  %1168 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1169 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1168, i32 0, i32 5
  %1170 = load i32, i32* %1169, align 4
  %1171 = icmp ne i32 %1170, 0
  br i1 %1171, label %1172, label %1184

; <label>:1172:                                   ; preds = %1167
  %1173 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1174 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1173, i32 0, i32 43
  %1175 = load i32, i32* %1174, align 4
  %1176 = sub nsw i32 1, %1175
  %1177 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1178 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1177, i32 0, i32 8
  %1179 = load i32, i32* %1178, align 4
  %1180 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %1181 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1180, i32 0, i32 51
  %1182 = load i32, i32* %1181, align 4
  %1183 = call arm_aapcscc i32 @InitVbrTag(%struct.bit_stream_struc* @bs.172, i32 %1176, i32 %1179, i32 %1182)
  br label %1184

; <label>:1184:                                   ; preds = %1172, %1167
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i32, i1) #5

; Function Attrs: nounwind
declare arm_aapcscc double @log(double) #2

; Function Attrs: nounwind
define arm_aapcscc void @lame_print_config(%struct.lame_global_flags*) #0 {
  %2 = alloca %struct.lame_global_flags*, align 4
  %3 = alloca float, align 4
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %2, align 4
  %6 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %7 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %6, i32 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = sitofp i32 %8 to double
  %10 = fdiv double %9, 1.000000e+03
  %11 = fptrunc double %10 to float
  store float %11, float* %3, align 4
  %12 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %13 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %12, i32 0, i32 49
  %14 = load float, float* %13, align 4
  %15 = load float, float* %3, align 4
  %16 = fmul float %14, %15
  store float %16, float* %4, align 4
  %17 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %18 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %17, i32 0, i32 46
  %19 = load i32, i32* %18, align 4
  %20 = mul nsw i32 %19, 16
  %21 = sitofp i32 %20 to float
  %22 = load float, float* %3, align 4
  %23 = fmul float %21, %22
  %24 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %25 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %24, i32 0, i32 11
  %26 = load i32, i32* %25, align 4
  %27 = sitofp i32 %26 to float
  %28 = fdiv float %23, %27
  store float %28, float* %5, align 4
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  call arm_aapcscc void @lame_print_version(%struct._IO_FILE* %29)
  %30 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %31 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %30, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 2
  br i1 %33, label %34, label %42

; <label>:34:                                     ; preds = %1
  %35 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %36 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %35, i32 0, i32 46
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %42

; <label>:39:                                     ; preds = %34
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %41 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.5.174, i32 0, i32 0))
  br label %42

; <label>:42:                                     ; preds = %39, %34, %1
  %43 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %44 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %43, i32 0, i32 49
  %45 = load float, float* %44, align 4
  %46 = fcmp une float %45, 1.000000e+00
  br i1 %46, label %47, label %54

; <label>:47:                                     ; preds = %42
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %49 = load float, float* %4, align 4
  %50 = fptosi float %49 to i32
  %51 = load float, float* %3, align 4
  %52 = fptosi float %51 to i32
  %53 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6.175, i32 0, i32 0), i32 %50, i32 %52)
  br label %54

; <label>:54:                                     ; preds = %47, %42
  %55 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %56 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %55, i32 0, i32 56
  %57 = load float, float* %56, align 4
  %58 = fpext float %57 to double
  %59 = fcmp ogt double %58, 0.000000e+00
  br i1 %59, label %60, label %77

; <label>:60:                                     ; preds = %54
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %62 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %63 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %62, i32 0, i32 55
  %64 = load float, float* %63, align 4
  %65 = load float, float* %3, align 4
  %66 = fmul float %64, %65
  %67 = fmul float %66, 5.000000e+02
  %68 = fpext float %67 to double
  %69 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %70 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %69, i32 0, i32 56
  %71 = load float, float* %70, align 4
  %72 = load float, float* %3, align 4
  %73 = fmul float %71, %72
  %74 = fmul float %73, 5.000000e+02
  %75 = fpext float %74 to double
  %76 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %61, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.7.176, i32 0, i32 0), double %68, double %75)
  br label %77

; <label>:77:                                     ; preds = %60, %54
  %78 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %79 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %78, i32 0, i32 53
  %80 = load float, float* %79, align 4
  %81 = fpext float %80 to double
  %82 = fcmp ogt double %81, 0.000000e+00
  br i1 %82, label %83, label %100

; <label>:83:                                     ; preds = %77
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %85 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %86 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %85, i32 0, i32 53
  %87 = load float, float* %86, align 4
  %88 = load float, float* %3, align 4
  %89 = fmul float %87, %88
  %90 = fmul float %89, 5.000000e+02
  %91 = fpext float %90 to double
  %92 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %93 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %92, i32 0, i32 54
  %94 = load float, float* %93, align 4
  %95 = load float, float* %3, align 4
  %96 = fmul float %94, %95
  %97 = fmul float %96, 5.000000e+02
  %98 = fpext float %97 to double
  %99 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %84, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8.177, i32 0, i32 0), double %91, double %98)
  br label %100

; <label>:100:                                    ; preds = %83, %77
  %101 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %102 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %101, i32 0, i32 4
  %103 = load i32, i32* %102, align 4
  %104 = icmp ne i32 %103, 0
  br i1 %104, label %105, label %111

; <label>:105:                                    ; preds = %100
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %107 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %108 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %107, i32 0, i32 31
  %109 = load i8*, i8** %108, align 4
  %110 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %106, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9.178, i32 0, i32 0), i8* %109)
  br label %193

; <label>:111:                                    ; preds = %100
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %113 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %114 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %113, i32 0, i32 31
  %115 = load i8*, i8** %114, align 4
  %116 = call arm_aapcscc i32 @strcmp(i8* %115, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.179, i32 0, i32 0))
  %117 = icmp ne i32 %116, 0
  br i1 %117, label %118, label %123

; <label>:118:                                    ; preds = %111
  %119 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %120 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %119, i32 0, i32 31
  %121 = load i8*, i8** %120, align 4
  %122 = call arm_aapcscc i8* @mybasename(i8* %121)
  br label %124

; <label>:123:                                    ; preds = %111
  br label %124

; <label>:124:                                    ; preds = %123, %118
  %125 = phi i8* [ %122, %118 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12.180, i32 0, i32 0), %123 ]
  %126 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %127 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %126, i32 0, i32 32
  %128 = load i8*, i8** %127, align 4
  %129 = call arm_aapcscc i32 @strcmp(i8* %128, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.179, i32 0, i32 0))
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %131, label %136

; <label>:131:                                    ; preds = %124
  %132 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %133 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %132, i32 0, i32 32
  %134 = load i8*, i8** %133, align 4
  %135 = call arm_aapcscc i8* @mybasename(i8* %134)
  br label %137

; <label>:136:                                    ; preds = %124
  br label %137

; <label>:137:                                    ; preds = %136, %131
  %138 = phi i8* [ %135, %131 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13.181, i32 0, i32 0), %136 ]
  %139 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %112, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10.182, i32 0, i32 0), i8* %125, i8* %138)
  %140 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %141 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %140, i32 0, i32 21
  %142 = load i32, i32* %141, align 4
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %144, label %167

; <label>:144:                                    ; preds = %137
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %146 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %147 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %146, i32 0, i32 3
  %148 = load i32, i32* %147, align 4
  %149 = sitofp i32 %148 to double
  %150 = fdiv double %149, 1.000000e+03
  %151 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %152 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %151, i32 0, i32 22
  %153 = load i32, i32* %152, align 4
  %154 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %155 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %154, i32 0, i32 8
  %156 = load i32, i32* %155, align 4
  %157 = getelementptr inbounds [4 x i8*], [4 x i8*]* @lame_print_config.mode_names, i32 0, i32 %156
  %158 = load i8*, i8** %157, align 4
  %159 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %160 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %159, i32 0, i32 43
  %161 = load i32, i32* %160, align 4
  %162 = sub nsw i32 2, %161
  %163 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %164 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %163, i32 0, i32 6
  %165 = load i32, i32* %164, align 4
  %166 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %145, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.14.183, i32 0, i32 0), double %150, i32 %153, i8* %158, i32 %162, i32 %165)
  br label %192

; <label>:167:                                    ; preds = %137
  %168 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %169 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %170 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %169, i32 0, i32 3
  %171 = load i32, i32* %170, align 4
  %172 = sitofp i32 %171 to double
  %173 = fdiv double %172, 1.000000e+03
  %174 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %175 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %174, i32 0, i32 11
  %176 = load i32, i32* %175, align 4
  %177 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %178 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %177, i32 0, i32 8
  %179 = load i32, i32* %178, align 4
  %180 = getelementptr inbounds [4 x i8*], [4 x i8*]* @lame_print_config.mode_names, i32 0, i32 %179
  %181 = load i8*, i8** %180, align 4
  %182 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %183 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %182, i32 0, i32 43
  %184 = load i32, i32* %183, align 4
  %185 = sub nsw i32 2, %184
  %186 = load float, float* %5, align 4
  %187 = fpext float %186 to double
  %188 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %189 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %188, i32 0, i32 6
  %190 = load i32, i32* %189, align 4
  %191 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %168, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.15.184, i32 0, i32 0), double %173, i32 %176, i8* %181, i32 %185, double %187, i32 %190)
  br label %192

; <label>:192:                                    ; preds = %167, %144
  br label %193

; <label>:193:                                    ; preds = %192, %105
  %194 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %195 = call arm_aapcscc i32 @fflush(%struct._IO_FILE* %194)
  ret void
}

declare arm_aapcscc i32 @strcmp(i8*, i8*) #3

; Function Attrs: nounwind
define internal arm_aapcscc i8* @mybasename(i8*) #0 {
  %2 = alloca i8*, align 4
  %3 = alloca i8*, align 4
  store i8* %0, i8** %2, align 4
  %4 = load i8*, i8** %2, align 4
  %5 = call arm_aapcscc i8* @strrchr(i8* %4, i32 47)
  store i8* %5, i8** %3, align 4
  %6 = load i8*, i8** %3, align 4
  %7 = icmp ne i8* %6, null
  br i1 %7, label %8, label %11

; <label>:8:                                      ; preds = %1
  %9 = load i8*, i8** %3, align 4
  %10 = getelementptr inbounds i8, i8* %9, i32 1
  br label %13

; <label>:11:                                     ; preds = %1
  %12 = load i8*, i8** %2, align 4
  br label %13

; <label>:13:                                     ; preds = %11, %8
  %14 = phi i8* [ %10, %8 ], [ %12, %11 ]
  ret i8* %14
}

declare arm_aapcscc i32 @fflush(%struct._IO_FILE*) #3

declare arm_aapcscc i8* @strrchr(i8*, i32) #3

; Function Attrs: nounwind
define arm_aapcscc i32 @lame_encode_frame(%struct.lame_global_flags*, i16*, i16*, i32, i8*, i32) #0 {
  %7 = alloca %struct.lame_global_flags*, align 4
  %8 = alloca i16*, align 4
  %9 = alloca i16*, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 4
  %12 = alloca i32, align 4
  %13 = alloca [2 x [2 x [576 x double]]], align 8
  %14 = alloca [2 x [2 x [576 x i32]]], align 4
  %15 = alloca i32, align 4
  %16 = alloca [2 x [2 x %struct.III_psy_ratio]], align 8
  %17 = alloca [2 x [2 x %struct.III_psy_ratio]], align 8
  %18 = alloca [2 x [2 x %struct.III_psy_ratio]]*, align 4
  %19 = alloca [2 x [2 x %struct.III_scalefac_t]], align 4
  %20 = alloca [2 x i16*], align 4
  %21 = alloca [2 x [2 x double]], align 8
  %22 = alloca [2 x [2 x double]], align 8
  %23 = alloca [2 x [2 x double]]*, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca double, align 8
  %30 = alloca double, align 8
  %31 = alloca double, align 8
  %32 = alloca double, align 8
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca [2 x i16*], align 4
  %36 = alloca [2 x i32], align 4
  %37 = alloca %struct.gr_info*, align 4
  %38 = alloca double, align 8
  %39 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %7, align 4
  store i16* %1, i16** %8, align 4
  store i16* %2, i16** %9, align 4
  store i32 %3, i32* %10, align 4
  store i8* %4, i8** %11, align 4
  store i32 %5, i32* %12, align 4
  store double 0.000000e+00, double* %29, align 8
  store double 0.000000e+00, double* %30, align 8
  %40 = getelementptr inbounds [2 x [2 x %struct.III_psy_ratio]], [2 x [2 x %struct.III_psy_ratio]]* %16, i32 0, i32 0
  %41 = bitcast [2 x %struct.III_psy_ratio]* %40 to i8*
  call void @llvm.memset.p0i8.i32(i8* %41, i8 0, i32 3904, i32 8, i1 false)
  %42 = getelementptr inbounds [2 x [2 x %struct.III_psy_ratio]], [2 x [2 x %struct.III_psy_ratio]]* %17, i32 0, i32 0
  %43 = bitcast [2 x %struct.III_psy_ratio]* %42 to i8*
  call void @llvm.memset.p0i8.i32(i8* %43, i8 0, i32 3904, i32 8, i1 false)
  %44 = getelementptr inbounds [2 x [2 x %struct.III_scalefac_t]], [2 x [2 x %struct.III_scalefac_t]]* %19, i32 0, i32 0
  %45 = bitcast [2 x %struct.III_scalefac_t]* %44 to i8*
  call void @llvm.memset.p0i8.i32(i8* %45, i8 0, i32 976, i32 4, i1 false)
  %46 = load i16*, i16** %8, align 4
  %47 = getelementptr inbounds [2 x i16*], [2 x i16*]* %20, i32 0, i32 0
  store i16* %46, i16** %47, align 4
  %48 = load i16*, i16** %9, align 4
  %49 = getelementptr inbounds [2 x i16*], [2 x i16*]* %20, i32 0, i32 1
  store i16* %48, i16** %49, align 4
  %50 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %51 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %50, i32 0, i32 52
  store i32 0, i32* %51, align 4
  %52 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %53 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %52, i32 0, i32 39
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %107

; <label>:56:                                     ; preds = %6
  %57 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %58 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %57, i32 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = sitofp i32 %59 to double
  %61 = fdiv double %60, 1.000000e+03
  store double %61, double* %32, align 8
  %62 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %63 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %62, i32 0, i32 11
  %64 = load i32, i32* %63, align 4
  store i32 %64, i32* %33, align 4
  store i32 0, i32* @lame_encode_frame.sentBits, align 4
  store i32 8, i32* @lame_encode_frame.bitsPerSlot, align 4
  %65 = load i32, i32* %33, align 4
  %66 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %67 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %66, i32 0, i32 42
  %68 = load i32, i32* %67, align 4
  %69 = mul nsw i32 %65, %68
  %70 = sitofp i32 %69 to double
  %71 = load double, double* %32, align 8
  %72 = load i32, i32* @lame_encode_frame.bitsPerSlot, align 4
  %73 = uitofp i32 %72 to double
  %74 = fmul double %71, %73
  %75 = fdiv double %70, %74
  store double %75, double* %31, align 8
  %76 = load double, double* %31, align 8
  %77 = load double, double* %31, align 8
  %78 = fadd double %77, 1.000000e-09
  %79 = call arm_aapcscc double @floor(double %78) #9
  %80 = fsub double %76, %79
  store double %80, double* @lame_encode_frame.frac_SpF, align 8
  %81 = load double, double* @lame_encode_frame.frac_SpF, align 8
  %82 = call arm_aapcscc double @fabs(double %81) #9
  %83 = fcmp olt double %82, 1.000000e-09
  br i1 %83, label %84, label %85

; <label>:84:                                     ; preds = %56
  store double 0.000000e+00, double* @lame_encode_frame.frac_SpF, align 8
  br label %85

; <label>:85:                                     ; preds = %84, %56
  %86 = load double, double* @lame_encode_frame.frac_SpF, align 8
  %87 = fsub double -0.000000e+00, %86
  store double %87, double* @lame_encode_frame.slot_lag, align 8
  %88 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %89 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %88, i32 0, i32 44
  store i32 1, i32* %89, align 4
  %90 = load double, double* @lame_encode_frame.frac_SpF, align 8
  %91 = fcmp oeq double %90, 0.000000e+00
  br i1 %91, label %92, label %95

; <label>:92:                                     ; preds = %85
  %93 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %94 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %93, i32 0, i32 44
  store i32 0, i32* %94, align 4
  br label %95

; <label>:95:                                     ; preds = %92, %85
  %96 = load i32, i32* %10, align 4
  %97 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %98 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %97, i32 0, i32 42
  %99 = load i32, i32* %98, align 4
  %100 = add nsw i32 1024, %99
  %101 = sub nsw i32 %100, 272
  %102 = icmp sge i32 %96, %101
  br i1 %102, label %104, label %103

; <label>:103:                                    ; preds = %95
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.16.189, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.190, i32 0, i32 0), i32 666, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.lame_encode_frame, i32 0, i32 0))
  br label %104

; <label>:104:                                    ; preds = %103, %95
  %105 = phi i1 [ true, %95 ], [ false, %103 ]
  %106 = zext i1 %105 to i32
  br label %107

; <label>:107:                                    ; preds = %104, %6
  %108 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %109 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %108, i32 0, i32 15
  %110 = load i32, i32* %109, align 4
  switch i32 %110, label %118 [
    i32 0, label %111
    i32 1, label %114
    i32 2, label %117
  ]

; <label>:111:                                    ; preds = %107
  %112 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %113 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %112, i32 0, i32 44
  store i32 0, i32* %113, align 4
  br label %159

; <label>:114:                                    ; preds = %107
  %115 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %116 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %115, i32 0, i32 44
  store i32 1, i32* %116, align 4
  br label %159

; <label>:117:                                    ; preds = %107
  br label %118

; <label>:118:                                    ; preds = %117, %107
  %119 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %120 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %119, i32 0, i32 21
  %121 = load i32, i32* %120, align 4
  %122 = icmp ne i32 %121, 0
  br i1 %122, label %123, label %126

; <label>:123:                                    ; preds = %118
  %124 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %125 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %124, i32 0, i32 44
  store i32 0, i32* %125, align 4
  br label %158

; <label>:126:                                    ; preds = %118
  %127 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %128 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %127, i32 0, i32 17
  %129 = load i32, i32* %128, align 4
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %131, label %134

; <label>:131:                                    ; preds = %126
  %132 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %133 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %132, i32 0, i32 44
  store i32 0, i32* %133, align 4
  br label %157

; <label>:134:                                    ; preds = %126
  %135 = load double, double* @lame_encode_frame.frac_SpF, align 8
  %136 = fcmp une double %135, 0.000000e+00
  br i1 %136, label %137, label %156

; <label>:137:                                    ; preds = %134
  %138 = load double, double* @lame_encode_frame.slot_lag, align 8
  %139 = load double, double* @lame_encode_frame.frac_SpF, align 8
  %140 = fsub double %139, 1.000000e+00
  %141 = fcmp ogt double %138, %140
  br i1 %141, label %142, label %148

; <label>:142:                                    ; preds = %137
  %143 = load double, double* @lame_encode_frame.frac_SpF, align 8
  %144 = load double, double* @lame_encode_frame.slot_lag, align 8
  %145 = fsub double %144, %143
  store double %145, double* @lame_encode_frame.slot_lag, align 8
  %146 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %147 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %146, i32 0, i32 44
  store i32 0, i32* %147, align 4
  br label %155

; <label>:148:                                    ; preds = %137
  %149 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %150 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %149, i32 0, i32 44
  store i32 1, i32* %150, align 4
  %151 = load double, double* @lame_encode_frame.frac_SpF, align 8
  %152 = fsub double 1.000000e+00, %151
  %153 = load double, double* @lame_encode_frame.slot_lag, align 8
  %154 = fadd double %153, %152
  store double %154, double* @lame_encode_frame.slot_lag, align 8
  br label %155

; <label>:155:                                    ; preds = %148, %142
  br label %156

; <label>:156:                                    ; preds = %155, %134
  br label %157

; <label>:157:                                    ; preds = %156, %131
  br label %158

; <label>:158:                                    ; preds = %157, %123
  br label %159

; <label>:159:                                    ; preds = %158, %114, %111
  %160 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %161 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %160, i32 0, i32 4
  %162 = load i32, i32* %161, align 4
  %163 = icmp ne i32 %162, 0
  br i1 %163, label %195, label %164

; <label>:164:                                    ; preds = %159
  %165 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %166 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %165, i32 0, i32 7
  %167 = load i32, i32* %166, align 4
  %168 = icmp ne i32 %167, 0
  br i1 %168, label %195, label %169

; <label>:169:                                    ; preds = %164
  %170 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %171 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %170, i32 0, i32 43
  %172 = load i32, i32* %171, align 4
  %173 = icmp eq i32 %172, 0
  %174 = select i1 %173, i32 200, i32 50
  store i32 %174, i32* %34, align 4
  %175 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %176 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %175, i32 0, i32 39
  %177 = load i32, i32* %176, align 4
  %178 = load i32, i32* %34, align 4
  %179 = srem i32 %177, %178
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %194

; <label>:181:                                    ; preds = %169
  %182 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %183 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %182, i32 0, i32 3
  %184 = load i32, i32* %183, align 4
  %185 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %186 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %185, i32 0, i32 39
  %187 = load i32, i32* %186, align 4
  %188 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %189 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %188, i32 0, i32 40
  %190 = load i32, i32* %189, align 4
  %191 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %192 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %191, i32 0, i32 42
  %193 = load i32, i32* %192, align 4
  call arm_aapcscc void @timestatus(i32 %184, i32 %187, i32 %190, i32 %193)
  br label %194

; <label>:194:                                    ; preds = %181, %169
  br label %195

; <label>:195:                                    ; preds = %194, %164, %159
  %196 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %197 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %196, i32 0, i32 63
  %198 = load i32, i32* %197, align 4
  %199 = icmp ne i32 %198, 0
  br i1 %199, label %200, label %276

; <label>:200:                                    ; preds = %195
  %201 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %202 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %201, i32 0, i32 45
  %203 = load i32, i32* %202, align 4
  %204 = sub nsw i32 %203, 1
  %205 = getelementptr inbounds [2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i32 0, i32 %204
  %206 = load double, double* %205, align 8
  store double %206, double* %30, align 8
  store i32 0, i32* %25, align 4
  br label %207

; <label>:207:                                    ; preds = %272, %200
  %208 = load i32, i32* %25, align 4
  %209 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %210 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %209, i32 0, i32 45
  %211 = load i32, i32* %210, align 4
  %212 = icmp slt i32 %208, %211
  br i1 %212, label %213, label %275

; <label>:213:                                    ; preds = %207
  store i32 0, i32* %24, align 4
  br label %214

; <label>:214:                                    ; preds = %231, %213
  %215 = load i32, i32* %24, align 4
  %216 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %217 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %216, i32 0, i32 46
  %218 = load i32, i32* %217, align 4
  %219 = icmp slt i32 %215, %218
  br i1 %219, label %220, label %234

; <label>:220:                                    ; preds = %214
  %221 = load i32, i32* %24, align 4
  %222 = getelementptr inbounds [2 x i16*], [2 x i16*]* %20, i32 0, i32 %221
  %223 = load i16*, i16** %222, align 4
  %224 = load i32, i32* %25, align 4
  %225 = mul nsw i32 %224, 576
  %226 = add nsw i32 576, %225
  %227 = sub nsw i32 %226, 272
  %228 = getelementptr inbounds i16, i16* %223, i32 %227
  %229 = load i32, i32* %24, align 4
  %230 = getelementptr inbounds [2 x i16*], [2 x i16*]* %35, i32 0, i32 %229
  store i16* %228, i16** %230, align 4
  br label %231

; <label>:231:                                    ; preds = %220
  %232 = load i32, i32* %24, align 4
  %233 = add nsw i32 %232, 1
  store i32 %233, i32* %24, align 4
  br label %214

; <label>:234:                                    ; preds = %214
  %235 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %236 = getelementptr inbounds [2 x i16*], [2 x i16*]* %35, i32 0, i32 0
  %237 = load i32, i32* %25, align 4
  %238 = load i32, i32* %25, align 4
  %239 = getelementptr inbounds [2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i32 0, i32 %238
  %240 = load i32, i32* %25, align 4
  %241 = getelementptr inbounds [2 x double], [2 x double]* @lame_encode_frame.ms_ener_ratio, i32 0, i32 %240
  %242 = getelementptr inbounds [2 x [2 x %struct.III_psy_ratio]], [2 x [2 x %struct.III_psy_ratio]]* %16, i32 0, i32 0
  %243 = getelementptr inbounds [2 x [2 x %struct.III_psy_ratio]], [2 x [2 x %struct.III_psy_ratio]]* %17, i32 0, i32 0
  %244 = load i32, i32* %25, align 4
  %245 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %21, i32 0, i32 %244
  %246 = getelementptr inbounds [2 x double], [2 x double]* %245, i32 0, i32 0
  %247 = load i32, i32* %25, align 4
  %248 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %22, i32 0, i32 %247
  %249 = getelementptr inbounds [2 x double], [2 x double]* %248, i32 0, i32 0
  %250 = getelementptr inbounds [2 x i32], [2 x i32]* %36, i32 0, i32 0
  call arm_aapcscc void @L3psycho_anal(%struct.lame_global_flags* %235, i16** %236, i32 %237, double* %239, double* %29, double* %241, [2 x %struct.III_psy_ratio]* %242, [2 x %struct.III_psy_ratio]* %243, double* %246, double* %249, i32* %250)
  store i32 0, i32* %24, align 4
  br label %251

; <label>:251:                                    ; preds = %268, %234
  %252 = load i32, i32* %24, align 4
  %253 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %254 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %253, i32 0, i32 46
  %255 = load i32, i32* %254, align 4
  %256 = icmp slt i32 %252, %255
  br i1 %256, label %257, label %271

; <label>:257:                                    ; preds = %251
  %258 = load i32, i32* %24, align 4
  %259 = getelementptr inbounds [2 x i32], [2 x i32]* %36, i32 0, i32 %258
  %260 = load i32, i32* %259, align 4
  %261 = load i32, i32* %25, align 4
  %262 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i32 0, i32 4), i32 0, i32 %261
  %263 = getelementptr inbounds %struct.anon, %struct.anon* %262, i32 0, i32 0
  %264 = load i32, i32* %24, align 4
  %265 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %263, i32 0, i32 %264
  %266 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %265, i32 0, i32 0
  %267 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %266, i32 0, i32 6
  store i32 %260, i32* %267, align 4
  br label %268

; <label>:268:                                    ; preds = %257
  %269 = load i32, i32* %24, align 4
  %270 = add nsw i32 %269, 1
  store i32 %270, i32* %24, align 4
  br label %251

; <label>:271:                                    ; preds = %251
  br label %272

; <label>:272:                                    ; preds = %271
  %273 = load i32, i32* %25, align 4
  %274 = add nsw i32 %273, 1
  store i32 %274, i32* %25, align 4
  br label %207

; <label>:275:                                    ; preds = %207
  br label %310

; <label>:276:                                    ; preds = %195
  store i32 0, i32* %25, align 4
  br label %277

; <label>:277:                                    ; preds = %306, %276
  %278 = load i32, i32* %25, align 4
  %279 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %280 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %279, i32 0, i32 45
  %281 = load i32, i32* %280, align 4
  %282 = icmp slt i32 %278, %281
  br i1 %282, label %283, label %309

; <label>:283:                                    ; preds = %277
  store i32 0, i32* %24, align 4
  br label %284

; <label>:284:                                    ; preds = %302, %283
  %285 = load i32, i32* %24, align 4
  %286 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %287 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %286, i32 0, i32 46
  %288 = load i32, i32* %287, align 4
  %289 = icmp slt i32 %285, %288
  br i1 %289, label %290, label %305

; <label>:290:                                    ; preds = %284
  %291 = load i32, i32* %25, align 4
  %292 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i32 0, i32 4), i32 0, i32 %291
  %293 = getelementptr inbounds %struct.anon, %struct.anon* %292, i32 0, i32 0
  %294 = load i32, i32* %24, align 4
  %295 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %293, i32 0, i32 %294
  %296 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %295, i32 0, i32 0
  %297 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %296, i32 0, i32 6
  store i32 0, i32* %297, align 4
  %298 = load i32, i32* %25, align 4
  %299 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %21, i32 0, i32 %298
  %300 = load i32, i32* %24, align 4
  %301 = getelementptr inbounds [2 x double], [2 x double]* %299, i32 0, i32 %300
  store double 7.000000e+02, double* %301, align 8
  br label %302

; <label>:302:                                    ; preds = %290
  %303 = load i32, i32* %24, align 4
  %304 = add nsw i32 %303, 1
  store i32 %304, i32* %24, align 4
  br label %284

; <label>:305:                                    ; preds = %284
  br label %306

; <label>:306:                                    ; preds = %305
  %307 = load i32, i32* %25, align 4
  %308 = add nsw i32 %307, 1
  store i32 %308, i32* %25, align 4
  br label %277

; <label>:309:                                    ; preds = %277
  br label %310

; <label>:310:                                    ; preds = %309, %275
  store i32 0, i32* %25, align 4
  br label %311

; <label>:311:                                    ; preds = %348, %310
  %312 = load i32, i32* %25, align 4
  %313 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %314 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %313, i32 0, i32 45
  %315 = load i32, i32* %314, align 4
  %316 = icmp slt i32 %312, %315
  br i1 %316, label %317, label %351

; <label>:317:                                    ; preds = %311
  store i32 0, i32* %24, align 4
  br label %318

; <label>:318:                                    ; preds = %344, %317
  %319 = load i32, i32* %24, align 4
  %320 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %321 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %320, i32 0, i32 46
  %322 = load i32, i32* %321, align 4
  %323 = icmp slt i32 %319, %322
  br i1 %323, label %324, label %347

; <label>:324:                                    ; preds = %318
  %325 = load i32, i32* %25, align 4
  %326 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i32 0, i32 4), i32 0, i32 %325
  %327 = getelementptr inbounds %struct.anon, %struct.anon* %326, i32 0, i32 0
  %328 = load i32, i32* %24, align 4
  %329 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %327, i32 0, i32 %328
  %330 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %329, i32 0, i32 0
  store %struct.gr_info* %330, %struct.gr_info** %37, align 4
  %331 = load %struct.gr_info*, %struct.gr_info** %37, align 4
  %332 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %331, i32 0, i32 7
  store i32 0, i32* %332, align 4
  %333 = load %struct.gr_info*, %struct.gr_info** %37, align 4
  %334 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %333, i32 0, i32 6
  %335 = load i32, i32* %334, align 4
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %337, label %340

; <label>:337:                                    ; preds = %324
  %338 = load %struct.gr_info*, %struct.gr_info** %37, align 4
  %339 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %338, i32 0, i32 5
  store i32 0, i32* %339, align 4
  br label %343

; <label>:340:                                    ; preds = %324
  %341 = load %struct.gr_info*, %struct.gr_info** %37, align 4
  %342 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %341, i32 0, i32 5
  store i32 1, i32* %342, align 4
  br label %343

; <label>:343:                                    ; preds = %340, %337
  br label %344

; <label>:344:                                    ; preds = %343
  %345 = load i32, i32* %24, align 4
  %346 = add nsw i32 %345, 1
  store i32 %346, i32* %24, align 4
  br label %318

; <label>:347:                                    ; preds = %318
  br label %348

; <label>:348:                                    ; preds = %347
  %349 = load i32, i32* %25, align 4
  %350 = add nsw i32 %349, 1
  store i32 %350, i32* %25, align 4
  br label %311

; <label>:351:                                    ; preds = %311
  %352 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %353 = getelementptr inbounds [2 x i16*], [2 x i16*]* %20, i32 0, i32 0
  %354 = load i16*, i16** %353, align 4
  %355 = getelementptr inbounds [2 x i16*], [2 x i16*]* %20, i32 0, i32 1
  %356 = load i16*, i16** %355, align 4
  %357 = getelementptr inbounds [2 x [2 x [576 x double]]], [2 x [2 x [576 x double]]]* %13, i32 0, i32 0
  call arm_aapcscc void @mdct_sub48(%struct.lame_global_flags* %352, i16* %354, i16* %356, [2 x [576 x double]]* %357, %struct.III_side_info_t* @l3_side)
  %358 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %359 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %358, i32 0, i32 8
  %360 = load i32, i32* %359, align 4
  %361 = icmp eq i32 %360, 1
  %362 = zext i1 %361 to i32
  store i32 %362, i32* %28, align 4
  %363 = load i32, i32* %28, align 4
  %364 = icmp ne i32 %363, 0
  br i1 %364, label %365, label %376

; <label>:365:                                    ; preds = %351
  %366 = load i32, i32* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i32 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 6), align 4
  %367 = load i32, i32* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i32 0, i32 4, i32 0, i32 0, i32 1, i32 0, i32 6), align 4
  %368 = icmp eq i32 %366, %367
  br i1 %368, label %369, label %373

; <label>:369:                                    ; preds = %365
  %370 = load i32, i32* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i32 0, i32 4, i32 1, i32 0, i32 0, i32 0, i32 6), align 4
  %371 = load i32, i32* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i32 0, i32 4, i32 1, i32 0, i32 1, i32 0, i32 6), align 4
  %372 = icmp eq i32 %370, %371
  br label %373

; <label>:373:                                    ; preds = %369, %365
  %374 = phi i1 [ false, %365 ], [ %372, %369 ]
  %375 = zext i1 %374 to i32
  store i32 %375, i32* %28, align 4
  br label %376

; <label>:376:                                    ; preds = %373, %351
  %377 = load i32, i32* %28, align 4
  %378 = icmp ne i32 %377, 0
  br i1 %378, label %379, label %398

; <label>:379:                                    ; preds = %376
  %380 = load double, double* getelementptr inbounds ([2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i32 0, i32 0), align 8
  %381 = load double, double* getelementptr inbounds ([2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i32 0, i32 1), align 8
  %382 = fadd double %380, %381
  %383 = load double, double* %30, align 8
  %384 = fadd double %382, %383
  %385 = load double, double* %29, align 8
  %386 = fadd double %384, %385
  %387 = fmul double 2.500000e-01, %386
  store double %387, double* %38, align 8
  %388 = load double, double* getelementptr inbounds ([2 x double], [2 x double]* @lame_encode_frame.ms_ener_ratio, i32 0, i32 0), align 8
  %389 = load double, double* getelementptr inbounds ([2 x double], [2 x double]* @lame_encode_frame.ms_ener_ratio, i32 0, i32 1), align 8
  %390 = fadd double %388, %389
  %391 = fmul double 5.000000e-01, %390
  store double %391, double* %39, align 8
  %392 = load double, double* %38, align 8
  %393 = fcmp olt double %392, 3.500000e-01
  br i1 %393, label %394, label %397

; <label>:394:                                    ; preds = %379
  %395 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %396 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %395, i32 0, i32 52
  store i32 2, i32* %396, align 4
  br label %397

; <label>:397:                                    ; preds = %394, %379
  br label %398

; <label>:398:                                    ; preds = %397, %376
  %399 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %400 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %399, i32 0, i32 10
  %401 = load i32, i32* %400, align 4
  %402 = icmp ne i32 %401, 0
  br i1 %402, label %403, label %406

; <label>:403:                                    ; preds = %398
  %404 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %405 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %404, i32 0, i32 52
  store i32 2, i32* %405, align 4
  br label %406

; <label>:406:                                    ; preds = %403, %398
  %407 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %408 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %407, i32 0, i32 52
  %409 = load i32, i32* %408, align 4
  %410 = icmp eq i32 2, %409
  br i1 %410, label %411, label %412

; <label>:411:                                    ; preds = %406
  store [2 x [2 x %struct.III_psy_ratio]]* %17, [2 x [2 x %struct.III_psy_ratio]]** %18, align 4
  store [2 x [2 x double]]* %22, [2 x [2 x double]]** %23, align 4
  br label %413

; <label>:412:                                    ; preds = %406
  store [2 x [2 x %struct.III_psy_ratio]]* %16, [2 x [2 x %struct.III_psy_ratio]]** %18, align 4
  store [2 x [2 x double]]* %21, [2 x [2 x double]]** %23, align 4
  br label %413

; <label>:413:                                    ; preds = %412, %411
  %414 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %415 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %414, i32 0, i32 21
  %416 = load i32, i32* %415, align 4
  %417 = icmp ne i32 %416, 0
  br i1 %417, label %418, label %427

; <label>:418:                                    ; preds = %413
  %419 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %420 = load [2 x [2 x double]]*, [2 x [2 x double]]** %23, align 4
  %421 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %420, i32 0, i32 0
  %422 = getelementptr inbounds [2 x [2 x [576 x double]]], [2 x [2 x [576 x double]]]* %13, i32 0, i32 0
  %423 = load [2 x [2 x %struct.III_psy_ratio]]*, [2 x [2 x %struct.III_psy_ratio]]** %18, align 4
  %424 = getelementptr inbounds [2 x [2 x %struct.III_psy_ratio]], [2 x [2 x %struct.III_psy_ratio]]* %423, i32 0, i32 0
  %425 = getelementptr inbounds [2 x [2 x [576 x i32]]], [2 x [2 x [576 x i32]]]* %14, i32 0, i32 0
  %426 = getelementptr inbounds [2 x [2 x %struct.III_scalefac_t]], [2 x [2 x %struct.III_scalefac_t]]* %19, i32 0, i32 0
  call arm_aapcscc void @VBR_iteration_loop(%struct.lame_global_flags* %419, [2 x double]* %421, double* getelementptr inbounds ([2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i32 0, i32 0), [2 x [576 x double]]* %422, [2 x %struct.III_psy_ratio]* %424, %struct.III_side_info_t* @l3_side, [2 x [576 x i32]]* %425, [2 x %struct.III_scalefac_t]* %426)
  br label %436

; <label>:427:                                    ; preds = %413
  %428 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %429 = load [2 x [2 x double]]*, [2 x [2 x double]]** %23, align 4
  %430 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %429, i32 0, i32 0
  %431 = getelementptr inbounds [2 x [2 x [576 x double]]], [2 x [2 x [576 x double]]]* %13, i32 0, i32 0
  %432 = load [2 x [2 x %struct.III_psy_ratio]]*, [2 x [2 x %struct.III_psy_ratio]]** %18, align 4
  %433 = getelementptr inbounds [2 x [2 x %struct.III_psy_ratio]], [2 x [2 x %struct.III_psy_ratio]]* %432, i32 0, i32 0
  %434 = getelementptr inbounds [2 x [2 x [576 x i32]]], [2 x [2 x [576 x i32]]]* %14, i32 0, i32 0
  %435 = getelementptr inbounds [2 x [2 x %struct.III_scalefac_t]], [2 x [2 x %struct.III_scalefac_t]]* %19, i32 0, i32 0
  call arm_aapcscc void @iteration_loop(%struct.lame_global_flags* %428, [2 x double]* %430, double* getelementptr inbounds ([2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i32 0, i32 0), [2 x [576 x double]]* %431, [2 x %struct.III_psy_ratio]* %433, %struct.III_side_info_t* @l3_side, [2 x [576 x i32]]* %434, [2 x %struct.III_scalefac_t]* %435)
  br label %436

; <label>:436:                                    ; preds = %427, %418
  %437 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  call arm_aapcscc void @getframebits(%struct.lame_global_flags* %437, i32* %27, i32* %26)
  %438 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %439 = load i32, i32* %27, align 4
  %440 = getelementptr inbounds [2 x [2 x [576 x i32]]], [2 x [2 x [576 x i32]]]* %14, i32 0, i32 0
  %441 = getelementptr inbounds [2 x [2 x %struct.III_scalefac_t]], [2 x [2 x %struct.III_scalefac_t]]* %19, i32 0, i32 0
  call arm_aapcscc void @III_format_bitstream(%struct.lame_global_flags* %438, i32 %439, [2 x [576 x i32]]* %440, %struct.III_side_info_t* @l3_side, [2 x %struct.III_scalefac_t]* %441, %struct.bit_stream_struc* @bs.172)
  %442 = load i32, i32* getelementptr inbounds (%struct.bit_stream_struc, %struct.bit_stream_struc* @bs.172, i32 0, i32 5), align 4
  %443 = load i32, i32* @lame_encode_frame.sentBits, align 4
  %444 = sub i32 %442, %443
  store i32 %444, i32* @lame_encode_frame.frameBits, align 4
  %445 = load i32, i32* @lame_encode_frame.frameBits, align 4
  %446 = load i32, i32* @lame_encode_frame.bitsPerSlot, align 4
  %447 = urem i32 %445, %446
  %448 = icmp ne i32 %447, 0
  br i1 %448, label %449, label %459

; <label>:449:                                    ; preds = %436
  %450 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %451 = load i32, i32* @lame_encode_frame.frameBits, align 4
  %452 = load i32, i32* @lame_encode_frame.frameBits, align 4
  %453 = load i32, i32* @lame_encode_frame.bitsPerSlot, align 4
  %454 = udiv i32 %452, %453
  %455 = load i32, i32* @lame_encode_frame.frameBits, align 4
  %456 = load i32, i32* @lame_encode_frame.bitsPerSlot, align 4
  %457 = urem i32 %455, %456
  %458 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %450, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.18.191, i32 0, i32 0), i32 %451, i32 %454, i32 %457)
  br label %459

; <label>:459:                                    ; preds = %449, %436
  %460 = load i32, i32* @lame_encode_frame.frameBits, align 4
  %461 = load i32, i32* @lame_encode_frame.sentBits, align 4
  %462 = add i32 %461, %460
  store i32 %462, i32* @lame_encode_frame.sentBits, align 4
  %463 = load i8*, i8** %11, align 4
  %464 = load i32, i32* %12, align 4
  %465 = call arm_aapcscc i32 @copy_buffer(i8* %463, i32 %464, %struct.bit_stream_struc* @bs.172)
  store i32 %465, i32* %15, align 4
  %466 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %467 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %466, i32 0, i32 5
  %468 = load i32, i32* %467, align 4
  %469 = icmp ne i32 %468, 0
  br i1 %469, label %470, label %473

; <label>:470:                                    ; preds = %459
  %471 = load i32, i32* @lame_encode_frame.sentBits, align 4
  %472 = udiv i32 %471, 8
  call arm_aapcscc void @AddVbrFrame(i32 %472)
  br label %473

; <label>:473:                                    ; preds = %470, %459
  %474 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %475 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %474, i32 0, i32 39
  %476 = load i32, i32* %475, align 4
  %477 = add nsw i32 %476, 1
  store i32 %477, i32* %475, align 4
  %478 = load i32, i32* %15, align 4
  ret i32 %478
}

; Function Attrs: nounwind readnone
declare arm_aapcscc double @fabs(double) #6

; Function Attrs: nounwind
define arm_aapcscc i32 @fill_buffer_resample(%struct.lame_global_flags*, i16*, i32, i16*, i32, i32*, i32) #0 {
  %8 = alloca %struct.lame_global_flags*, align 4
  %9 = alloca i16*, align 4
  %10 = alloca i32, align 4
  %11 = alloca i16*, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32*, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca double, align 8
  %25 = alloca double, align 8
  %26 = alloca double, align 8
  %27 = alloca double, align 8
  %28 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %8, align 4
  store i16* %1, i16** %9, align 4
  store i32 %2, i32* %10, align 4
  store i16* %3, i16** %11, align 4
  store i32 %4, i32* %12, align 4
  store i32* %5, i32** %13, align 4
  store i32 %6, i32* %14, align 4
  store i32 0, i32* %16, align 4
  %29 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %30 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %29, i32 0, i32 39
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %47

; <label>:33:                                     ; preds = %7
  %34 = load i32, i32* %14, align 4
  %35 = getelementptr inbounds [2 x i32], [2 x i32]* @fill_buffer_resample.init, i32 0, i32 %34
  %36 = load i32, i32* %35, align 4
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %47, label %38

; <label>:38:                                     ; preds = %33
  %39 = load i32, i32* %14, align 4
  %40 = getelementptr inbounds [2 x i32], [2 x i32]* @fill_buffer_resample.init, i32 0, i32 %39
  store i32 1, i32* %40, align 4
  %41 = load i32, i32* %14, align 4
  %42 = getelementptr inbounds [2 x double], [2 x double]* @fill_buffer_resample.itime, i32 0, i32 %41
  store double 0.000000e+00, double* %42, align 8
  %43 = load i32, i32* %14, align 4
  %44 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i32 0, i32 %43
  %45 = getelementptr inbounds [5 x i16], [5 x i16]* %44, i32 0, i32 0
  %46 = bitcast i16* %45 to i8*
  call void @llvm.memset.p0i8.i32(i8* %46, i8 0, i32 10, i32 2, i1 false)
  br label %47

; <label>:47:                                     ; preds = %38, %33, %7
  %48 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %49 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %48, i32 0, i32 39
  %50 = load i32, i32* %49, align 4
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %55

; <label>:52:                                     ; preds = %47
  %53 = load i32, i32* %14, align 4
  %54 = getelementptr inbounds [2 x i32], [2 x i32]* @fill_buffer_resample.init, i32 0, i32 %53
  store i32 0, i32* %54, align 4
  br label %55

; <label>:55:                                     ; preds = %52, %47
  %56 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %57 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %56, i32 0, i32 49
  %58 = load float, float* %57, align 4
  %59 = fpext float %58 to double
  %60 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %61 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %60, i32 0, i32 49
  %62 = load float, float* %61, align 4
  %63 = fpext float %62 to double
  %64 = fadd double 5.000000e-01, %63
  %65 = call arm_aapcscc double @floor(double %64) #9
  %66 = fsub double %59, %65
  %67 = call arm_aapcscc double @fabs(double %66) #9
  %68 = fcmp olt double %67, 1.000000e-04
  %69 = zext i1 %68 to i32
  store i32 %69, i32* %18, align 4
  store i32 0, i32* %17, align 4
  br label %70

; <label>:70:                                     ; preds = %273, %55
  %71 = load i32, i32* %17, align 4
  %72 = load i32, i32* %10, align 4
  %73 = icmp slt i32 %71, %72
  br i1 %73, label %74, label %276

; <label>:74:                                     ; preds = %70
  %75 = load i32, i32* %17, align 4
  %76 = sitofp i32 %75 to float
  %77 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %78 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %77, i32 0, i32 49
  %79 = load float, float* %78, align 4
  %80 = fmul float %76, %79
  %81 = fpext float %80 to double
  store double %81, double* %28, align 8
  %82 = load double, double* %28, align 8
  %83 = load i32, i32* %14, align 4
  %84 = getelementptr inbounds [2 x double], [2 x double]* @fill_buffer_resample.itime, i32 0, i32 %83
  %85 = load double, double* %84, align 8
  %86 = fsub double %82, %85
  %87 = call arm_aapcscc double @floor(double %86) #9
  %88 = fptosi double %87 to i32
  store i32 %88, i32* %16, align 4
  %89 = load i32, i32* %16, align 4
  %90 = add nsw i32 %89, 2
  %91 = load i32, i32* %12, align 4
  %92 = icmp sge i32 %90, %91
  br i1 %92, label %93, label %94

; <label>:93:                                     ; preds = %74
  br label %276

; <label>:94:                                     ; preds = %74
  %95 = load double, double* %28, align 8
  %96 = load i32, i32* %14, align 4
  %97 = getelementptr inbounds [2 x double], [2 x double]* @fill_buffer_resample.itime, i32 0, i32 %96
  %98 = load double, double* %97, align 8
  %99 = load i32, i32* %16, align 4
  %100 = sitofp i32 %99 to double
  %101 = fadd double %98, %100
  %102 = fsub double %95, %101
  store double %102, double* %25, align 8
  %103 = load double, double* %25, align 8
  %104 = fsub double %103, 1.000000e+00
  store double %104, double* %26, align 8
  %105 = load i32, i32* %16, align 4
  %106 = icmp slt i32 %105, 0
  br i1 %106, label %107, label %115

; <label>:107:                                    ; preds = %94
  %108 = load i32, i32* %14, align 4
  %109 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i32 0, i32 %108
  %110 = load i32, i32* %16, align 4
  %111 = add nsw i32 5, %110
  %112 = getelementptr inbounds [5 x i16], [5 x i16]* %109, i32 0, i32 %111
  %113 = load i16, i16* %112, align 2
  %114 = sext i16 %113 to i32
  br label %121

; <label>:115:                                    ; preds = %94
  %116 = load i16*, i16** %11, align 4
  %117 = load i32, i32* %16, align 4
  %118 = getelementptr inbounds i16, i16* %116, i32 %117
  %119 = load i16, i16* %118, align 2
  %120 = sext i16 %119 to i32
  br label %121

; <label>:121:                                    ; preds = %115, %107
  %122 = phi i32 [ %114, %107 ], [ %120, %115 ]
  store i32 %122, i32* %21, align 4
  %123 = load i32, i32* %16, align 4
  %124 = add nsw i32 1, %123
  %125 = icmp slt i32 %124, 0
  br i1 %125, label %126, label %134

; <label>:126:                                    ; preds = %121
  %127 = load i32, i32* %14, align 4
  %128 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i32 0, i32 %127
  %129 = load i32, i32* %16, align 4
  %130 = add nsw i32 6, %129
  %131 = getelementptr inbounds [5 x i16], [5 x i16]* %128, i32 0, i32 %130
  %132 = load i16, i16* %131, align 2
  %133 = sext i16 %132 to i32
  br label %141

; <label>:134:                                    ; preds = %121
  %135 = load i16*, i16** %11, align 4
  %136 = load i32, i32* %16, align 4
  %137 = add nsw i32 1, %136
  %138 = getelementptr inbounds i16, i16* %135, i32 %137
  %139 = load i16, i16* %138, align 2
  %140 = sext i16 %139 to i32
  br label %141

; <label>:141:                                    ; preds = %134, %126
  %142 = phi i32 [ %133, %126 ], [ %140, %134 ]
  store i32 %142, i32* %22, align 4
  %143 = load i32, i32* %18, align 4
  %144 = icmp ne i32 %143, 0
  br i1 %144, label %145, label %161

; <label>:145:                                    ; preds = %141
  %146 = load i32, i32* %22, align 4
  %147 = sitofp i32 %146 to double
  %148 = load double, double* %25, align 8
  %149 = fmul double %147, %148
  %150 = load i32, i32* %21, align 4
  %151 = sitofp i32 %150 to double
  %152 = load double, double* %26, align 8
  %153 = fmul double %151, %152
  %154 = fsub double %149, %153
  %155 = fadd double 5.000000e-01, %154
  %156 = call arm_aapcscc double @floor(double %155) #9
  %157 = fptosi double %156 to i16
  %158 = load i16*, i16** %9, align 4
  %159 = load i32, i32* %17, align 4
  %160 = getelementptr inbounds i16, i16* %158, i32 %159
  store i16 %157, i16* %160, align 2
  br label %272

; <label>:161:                                    ; preds = %141
  %162 = load double, double* %25, align 8
  %163 = fadd double %162, 1.000000e+00
  store double %163, double* %24, align 8
  %164 = load double, double* %25, align 8
  %165 = fsub double %164, 2.000000e+00
  store double %165, double* %27, align 8
  %166 = load i32, i32* %16, align 4
  %167 = sub nsw i32 %166, 1
  %168 = icmp slt i32 %167, 0
  br i1 %168, label %169, label %178

; <label>:169:                                    ; preds = %161
  %170 = load i32, i32* %14, align 4
  %171 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i32 0, i32 %170
  %172 = load i32, i32* %16, align 4
  %173 = sub nsw i32 %172, 1
  %174 = add nsw i32 5, %173
  %175 = getelementptr inbounds [5 x i16], [5 x i16]* %171, i32 0, i32 %174
  %176 = load i16, i16* %175, align 2
  %177 = sext i16 %176 to i32
  br label %185

; <label>:178:                                    ; preds = %161
  %179 = load i16*, i16** %11, align 4
  %180 = load i32, i32* %16, align 4
  %181 = sub nsw i32 %180, 1
  %182 = getelementptr inbounds i16, i16* %179, i32 %181
  %183 = load i16, i16* %182, align 2
  %184 = sext i16 %183 to i32
  br label %185

; <label>:185:                                    ; preds = %178, %169
  %186 = phi i32 [ %177, %169 ], [ %184, %178 ]
  store i32 %186, i32* %20, align 4
  %187 = load i32, i32* %16, align 4
  %188 = add nsw i32 %187, 2
  %189 = icmp slt i32 %188, 0
  br i1 %189, label %190, label %199

; <label>:190:                                    ; preds = %185
  %191 = load i32, i32* %14, align 4
  %192 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i32 0, i32 %191
  %193 = load i32, i32* %16, align 4
  %194 = add nsw i32 %193, 2
  %195 = add nsw i32 5, %194
  %196 = getelementptr inbounds [5 x i16], [5 x i16]* %192, i32 0, i32 %195
  %197 = load i16, i16* %196, align 2
  %198 = sext i16 %197 to i32
  br label %206

; <label>:199:                                    ; preds = %185
  %200 = load i16*, i16** %11, align 4
  %201 = load i32, i32* %16, align 4
  %202 = add nsw i32 %201, 2
  %203 = getelementptr inbounds i16, i16* %200, i32 %202
  %204 = load i16, i16* %203, align 2
  %205 = sext i16 %204 to i32
  br label %206

; <label>:206:                                    ; preds = %199, %190
  %207 = phi i32 [ %198, %190 ], [ %205, %199 ]
  store i32 %207, i32* %23, align 4
  %208 = load i32, i32* %20, align 4
  %209 = sub nsw i32 0, %208
  %210 = sitofp i32 %209 to double
  %211 = load double, double* %25, align 8
  %212 = fmul double %210, %211
  %213 = load double, double* %26, align 8
  %214 = fmul double %212, %213
  %215 = load double, double* %27, align 8
  %216 = fmul double %214, %215
  %217 = fdiv double %216, 6.000000e+00
  %218 = fadd double 5.000000e-01, %217
  %219 = load i32, i32* %21, align 4
  %220 = sitofp i32 %219 to double
  %221 = load double, double* %24, align 8
  %222 = fmul double %220, %221
  %223 = load double, double* %26, align 8
  %224 = fmul double %222, %223
  %225 = load double, double* %27, align 8
  %226 = fmul double %224, %225
  %227 = fdiv double %226, 2.000000e+00
  %228 = fadd double %218, %227
  %229 = load i32, i32* %22, align 4
  %230 = sitofp i32 %229 to double
  %231 = load double, double* %24, align 8
  %232 = fmul double %230, %231
  %233 = load double, double* %25, align 8
  %234 = fmul double %232, %233
  %235 = load double, double* %27, align 8
  %236 = fmul double %234, %235
  %237 = fdiv double %236, 2.000000e+00
  %238 = fsub double %228, %237
  %239 = load i32, i32* %23, align 4
  %240 = sitofp i32 %239 to double
  %241 = load double, double* %24, align 8
  %242 = fmul double %240, %241
  %243 = load double, double* %25, align 8
  %244 = fmul double %242, %243
  %245 = load double, double* %26, align 8
  %246 = fmul double %244, %245
  %247 = fdiv double %246, 6.000000e+00
  %248 = fadd double %238, %247
  %249 = call arm_aapcscc double @floor(double %248) #9
  %250 = fptosi double %249 to i32
  store i32 %250, i32* %19, align 4
  %251 = load i32, i32* %19, align 4
  %252 = icmp sgt i32 %251, 32767
  br i1 %252, label %253, label %257

; <label>:253:                                    ; preds = %206
  %254 = load i16*, i16** %9, align 4
  %255 = load i32, i32* %17, align 4
  %256 = getelementptr inbounds i16, i16* %254, i32 %255
  store i16 32767, i16* %256, align 2
  br label %271

; <label>:257:                                    ; preds = %206
  %258 = load i32, i32* %19, align 4
  %259 = icmp slt i32 %258, -32767
  br i1 %259, label %260, label %264

; <label>:260:                                    ; preds = %257
  %261 = load i16*, i16** %9, align 4
  %262 = load i32, i32* %17, align 4
  %263 = getelementptr inbounds i16, i16* %261, i32 %262
  store i16 -32767, i16* %263, align 2
  br label %270

; <label>:264:                                    ; preds = %257
  %265 = load i32, i32* %19, align 4
  %266 = trunc i32 %265 to i16
  %267 = load i16*, i16** %9, align 4
  %268 = load i32, i32* %17, align 4
  %269 = getelementptr inbounds i16, i16* %267, i32 %268
  store i16 %266, i16* %269, align 2
  br label %270

; <label>:270:                                    ; preds = %264, %260
  br label %271

; <label>:271:                                    ; preds = %270, %253
  br label %272

; <label>:272:                                    ; preds = %271, %145
  br label %273

; <label>:273:                                    ; preds = %272
  %274 = load i32, i32* %17, align 4
  %275 = add nsw i32 %274, 1
  store i32 %275, i32* %17, align 4
  br label %70

; <label>:276:                                    ; preds = %93, %70
  %277 = load i32, i32* %12, align 4
  %278 = load i32, i32* %16, align 4
  %279 = add nsw i32 %278, 2
  %280 = icmp slt i32 %277, %279
  br i1 %280, label %281, label %283

; <label>:281:                                    ; preds = %276
  %282 = load i32, i32* %12, align 4
  br label %286

; <label>:283:                                    ; preds = %276
  %284 = load i32, i32* %16, align 4
  %285 = add nsw i32 %284, 2
  br label %286

; <label>:286:                                    ; preds = %283, %281
  %287 = phi i32 [ %282, %281 ], [ %285, %283 ]
  %288 = load i32*, i32** %13, align 4
  store i32 %287, i32* %288, align 4
  %289 = load i32*, i32** %13, align 4
  %290 = load i32, i32* %289, align 4
  %291 = sitofp i32 %290 to float
  %292 = load i32, i32* %17, align 4
  %293 = sitofp i32 %292 to float
  %294 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %295 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %294, i32 0, i32 49
  %296 = load float, float* %295, align 4
  %297 = fmul float %293, %296
  %298 = fsub float %291, %297
  %299 = fpext float %298 to double
  %300 = load i32, i32* %14, align 4
  %301 = getelementptr inbounds [2 x double], [2 x double]* @fill_buffer_resample.itime, i32 0, i32 %300
  %302 = load double, double* %301, align 8
  %303 = fadd double %302, %299
  store double %303, double* %301, align 8
  store i32 0, i32* %15, align 4
  br label %304

; <label>:304:                                    ; preds = %320, %286
  %305 = load i32, i32* %15, align 4
  %306 = icmp slt i32 %305, 5
  br i1 %306, label %307, label %323

; <label>:307:                                    ; preds = %304
  %308 = load i16*, i16** %11, align 4
  %309 = load i32*, i32** %13, align 4
  %310 = load i32, i32* %309, align 4
  %311 = load i32, i32* %15, align 4
  %312 = add nsw i32 %310, %311
  %313 = sub nsw i32 %312, 5
  %314 = getelementptr inbounds i16, i16* %308, i32 %313
  %315 = load i16, i16* %314, align 2
  %316 = load i32, i32* %14, align 4
  %317 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i32 0, i32 %316
  %318 = load i32, i32* %15, align 4
  %319 = getelementptr inbounds [5 x i16], [5 x i16]* %317, i32 0, i32 %318
  store i16 %315, i16* %319, align 2
  br label %320

; <label>:320:                                    ; preds = %307
  %321 = load i32, i32* %15, align 4
  %322 = add nsw i32 %321, 1
  store i32 %322, i32* %15, align 4
  br label %304

; <label>:323:                                    ; preds = %304
  %324 = load i32, i32* %17, align 4
  ret i32 %324
}

; Function Attrs: nounwind
define arm_aapcscc i32 @fill_buffer(%struct.lame_global_flags*, i16*, i32, i16*, i32) #0 {
  %6 = alloca %struct.lame_global_flags*, align 4
  %7 = alloca i16*, align 4
  %8 = alloca i32, align 4
  %9 = alloca i16*, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %6, align 4
  store i16* %1, i16** %7, align 4
  store i32 %2, i32* %8, align 4
  store i16* %3, i16** %9, align 4
  store i32 %4, i32* %10, align 4
  %12 = load i32, i32* %8, align 4
  %13 = load i32, i32* %10, align 4
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %15, label %17

; <label>:15:                                     ; preds = %5
  %16 = load i32, i32* %8, align 4
  br label %19

; <label>:17:                                     ; preds = %5
  %18 = load i32, i32* %10, align 4
  br label %19

; <label>:19:                                     ; preds = %17, %15
  %20 = phi i32 [ %16, %15 ], [ %18, %17 ]
  store i32 %20, i32* %11, align 4
  %21 = load i16*, i16** %7, align 4
  %22 = bitcast i16* %21 to i8*
  %23 = load i16*, i16** %9, align 4
  %24 = bitcast i16* %23 to i8*
  %25 = load i32, i32* %11, align 4
  %26 = mul i32 2, %25
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %22, i8* %24, i32 %26, i32 1, i1 false)
  %27 = load i32, i32* %11, align 4
  ret i32 %27
}

; Function Attrs: nounwind
define arm_aapcscc i32 @lame_encode_buffer(%struct.lame_global_flags*, i16*, i16*, i32, i8*, i32) #0 {
  %7 = alloca i32, align 4
  %8 = alloca %struct.lame_global_flags*, align 4
  %9 = alloca i16*, align 4
  %10 = alloca i16*, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca [2 x i16*], align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %8, align 4
  store i16* %1, i16** %9, align 4
  store i16* %2, i16** %10, align 4
  store i32 %3, i32* %11, align 4
  store i8* %4, i8** %12, align 4
  store i32 %5, i32* %13, align 4
  store i32 0, i32* %14, align 4
  %22 = load i16*, i16** %9, align 4
  %23 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 0
  store i16* %22, i16** %23, align 4
  %24 = load i16*, i16** %10, align 4
  %25 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 1
  store i16* %24, i16** %25, align 4
  %26 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %27 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %26, i32 0, i32 42
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 1024, %28
  %30 = sub nsw i32 %29, 272
  store i32 %30, i32* %18, align 4
  %31 = load i32, i32* %18, align 4
  %32 = icmp sge i32 3056, %31
  br i1 %32, label %34, label %33

; <label>:33:                                     ; preds = %6
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.19.192, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.190, i32 0, i32 0), i32 995, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.lame_encode_buffer, i32 0, i32 0))
  br label %34

; <label>:34:                                     ; preds = %33, %6
  %35 = phi i1 [ true, %6 ], [ false, %33 ]
  %36 = zext i1 %35 to i32
  %37 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %38 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %37, i32 0, i32 39
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %45

; <label>:41:                                     ; preds = %34
  %42 = load i32, i32* @lame_encode_buffer.frame_buffered, align 4
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %45, label %44

; <label>:44:                                     ; preds = %41
  call void @llvm.memset.p0i8.i32(i8* bitcast ([2 x [3056 x i16]]* @mfbuf to i8*), i8 0, i32 12224, i32 2, i1 false)
  store i32 1, i32* @lame_encode_buffer.frame_buffered, align 4
  store i32 1088, i32* @mf_samples_to_encode, align 4
  store i32 752, i32* @mf_size, align 4
  br label %45

; <label>:45:                                     ; preds = %44, %41, %34
  %46 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %47 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %46, i32 0, i32 39
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 1
  br i1 %49, label %50, label %51

; <label>:50:                                     ; preds = %45
  store i32 0, i32* @lame_encode_buffer.frame_buffered, align 4
  br label %51

; <label>:51:                                     ; preds = %50, %45
  %52 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %53 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %52, i32 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 2
  br i1 %55, label %56, label %94

; <label>:56:                                     ; preds = %51
  %57 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %58 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %57, i32 0, i32 46
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 1
  br i1 %60, label %61, label %94

; <label>:61:                                     ; preds = %56
  store i32 0, i32* %16, align 4
  br label %62

; <label>:62:                                     ; preds = %90, %61
  %63 = load i32, i32* %16, align 4
  %64 = load i32, i32* %11, align 4
  %65 = icmp slt i32 %63, %64
  br i1 %65, label %66, label %93

; <label>:66:                                     ; preds = %62
  %67 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 0
  %68 = load i16*, i16** %67, align 4
  %69 = load i32, i32* %16, align 4
  %70 = getelementptr inbounds i16, i16* %68, i32 %69
  %71 = load i16, i16* %70, align 2
  %72 = sext i16 %71 to i32
  %73 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 1
  %74 = load i16*, i16** %73, align 4
  %75 = load i32, i32* %16, align 4
  %76 = getelementptr inbounds i16, i16* %74, i32 %75
  %77 = load i16, i16* %76, align 2
  %78 = sext i16 %77 to i32
  %79 = add nsw i32 %72, %78
  %80 = sdiv i32 %79, 2
  %81 = trunc i32 %80 to i16
  %82 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 0
  %83 = load i16*, i16** %82, align 4
  %84 = load i32, i32* %16, align 4
  %85 = getelementptr inbounds i16, i16* %83, i32 %84
  store i16 %81, i16* %85, align 2
  %86 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 1
  %87 = load i16*, i16** %86, align 4
  %88 = load i32, i32* %16, align 4
  %89 = getelementptr inbounds i16, i16* %87, i32 %88
  store i16 0, i16* %89, align 2
  br label %90

; <label>:90:                                     ; preds = %66
  %91 = load i32, i32* %16, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %16, align 4
  br label %62

; <label>:93:                                     ; preds = %62
  br label %94

; <label>:94:                                     ; preds = %93, %56, %51
  br label %95

; <label>:95:                                     ; preds = %227, %94
  %96 = load i32, i32* %11, align 4
  %97 = icmp sgt i32 %96, 0
  br i1 %97, label %98, label %228

; <label>:98:                                     ; preds = %95
  store i32 0, i32* %20, align 4
  store i32 0, i32* %21, align 4
  store i32 0, i32* %17, align 4
  br label %99

; <label>:99:                                     ; preds = %146, %98
  %100 = load i32, i32* %17, align 4
  %101 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %102 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %101, i32 0, i32 46
  %103 = load i32, i32* %102, align 4
  %104 = icmp slt i32 %100, %103
  br i1 %104, label %105, label %149

; <label>:105:                                    ; preds = %99
  %106 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %107 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %106, i32 0, i32 49
  %108 = load float, float* %107, align 4
  %109 = fcmp une float %108, 1.000000e+00
  br i1 %109, label %110, label %125

; <label>:110:                                    ; preds = %105
  %111 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %112 = load i32, i32* %17, align 4
  %113 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 %112
  %114 = load i32, i32* @mf_size, align 4
  %115 = getelementptr inbounds [3056 x i16], [3056 x i16]* %113, i32 0, i32 %114
  %116 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %117 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %116, i32 0, i32 42
  %118 = load i32, i32* %117, align 4
  %119 = load i32, i32* %17, align 4
  %120 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 %119
  %121 = load i16*, i16** %120, align 4
  %122 = load i32, i32* %11, align 4
  %123 = load i32, i32* %17, align 4
  %124 = call arm_aapcscc i32 @fill_buffer_resample(%struct.lame_global_flags* %111, i16* %115, i32 %118, i16* %121, i32 %122, i32* %20, i32 %123)
  store i32 %124, i32* %21, align 4
  br label %140

; <label>:125:                                    ; preds = %105
  %126 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %127 = load i32, i32* %17, align 4
  %128 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 %127
  %129 = load i32, i32* @mf_size, align 4
  %130 = getelementptr inbounds [3056 x i16], [3056 x i16]* %128, i32 0, i32 %129
  %131 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %132 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %131, i32 0, i32 42
  %133 = load i32, i32* %132, align 4
  %134 = load i32, i32* %17, align 4
  %135 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 %134
  %136 = load i16*, i16** %135, align 4
  %137 = load i32, i32* %11, align 4
  %138 = call arm_aapcscc i32 @fill_buffer(%struct.lame_global_flags* %126, i16* %130, i32 %133, i16* %136, i32 %137)
  store i32 %138, i32* %21, align 4
  %139 = load i32, i32* %21, align 4
  store i32 %139, i32* %20, align 4
  br label %140

; <label>:140:                                    ; preds = %125, %110
  %141 = load i32, i32* %20, align 4
  %142 = load i32, i32* %17, align 4
  %143 = getelementptr inbounds [2 x i16*], [2 x i16*]* %19, i32 0, i32 %142
  %144 = load i16*, i16** %143, align 4
  %145 = getelementptr inbounds i16, i16* %144, i32 %141
  store i16* %145, i16** %143, align 4
  br label %146

; <label>:146:                                    ; preds = %140
  %147 = load i32, i32* %17, align 4
  %148 = add nsw i32 %147, 1
  store i32 %148, i32* %17, align 4
  br label %99

; <label>:149:                                    ; preds = %99
  %150 = load i32, i32* %20, align 4
  %151 = load i32, i32* %11, align 4
  %152 = sub nsw i32 %151, %150
  store i32 %152, i32* %11, align 4
  %153 = load i32, i32* %21, align 4
  %154 = load i32, i32* @mf_size, align 4
  %155 = add nsw i32 %154, %153
  store i32 %155, i32* @mf_size, align 4
  %156 = load i32, i32* @mf_size, align 4
  %157 = icmp sle i32 %156, 3056
  br i1 %157, label %159, label %158

; <label>:158:                                    ; preds = %149
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20.193, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.190, i32 0, i32 0), i32 1045, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.lame_encode_buffer, i32 0, i32 0))
  br label %159

; <label>:159:                                    ; preds = %158, %149
  %160 = phi i1 [ true, %149 ], [ false, %158 ]
  %161 = zext i1 %160 to i32
  %162 = load i32, i32* %21, align 4
  %163 = load i32, i32* @mf_samples_to_encode, align 4
  %164 = add nsw i32 %163, %162
  store i32 %164, i32* @mf_samples_to_encode, align 4
  %165 = load i32, i32* @mf_size, align 4
  %166 = load i32, i32* %18, align 4
  %167 = icmp sge i32 %165, %166
  br i1 %167, label %168, label %227

; <label>:168:                                    ; preds = %159
  %169 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %170 = load i32, i32* @mf_size, align 4
  %171 = load i8*, i8** %12, align 4
  %172 = load i32, i32* %13, align 4
  %173 = call arm_aapcscc i32 @lame_encode_frame(%struct.lame_global_flags* %169, i16* getelementptr inbounds ([2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 0, i32 0), i16* getelementptr inbounds ([2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 1, i32 0), i32 %170, i8* %171, i32 %172)
  store i32 %173, i32* %15, align 4
  %174 = load i32, i32* %15, align 4
  %175 = icmp eq i32 %174, -1
  br i1 %175, label %176, label %177

; <label>:176:                                    ; preds = %168
  store i32 -1, i32* %7, align 4
  br label %236

; <label>:177:                                    ; preds = %168
  %178 = load i32, i32* %15, align 4
  %179 = load i8*, i8** %12, align 4
  %180 = getelementptr inbounds i8, i8* %179, i32 %178
  store i8* %180, i8** %12, align 4
  %181 = load i32, i32* %15, align 4
  %182 = load i32, i32* %14, align 4
  %183 = add nsw i32 %182, %181
  store i32 %183, i32* %14, align 4
  %184 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %185 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %184, i32 0, i32 42
  %186 = load i32, i32* %185, align 4
  %187 = load i32, i32* @mf_size, align 4
  %188 = sub nsw i32 %187, %186
  store i32 %188, i32* @mf_size, align 4
  %189 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %190 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %189, i32 0, i32 42
  %191 = load i32, i32* %190, align 4
  %192 = load i32, i32* @mf_samples_to_encode, align 4
  %193 = sub nsw i32 %192, %191
  store i32 %193, i32* @mf_samples_to_encode, align 4
  store i32 0, i32* %17, align 4
  br label %194

; <label>:194:                                    ; preds = %223, %177
  %195 = load i32, i32* %17, align 4
  %196 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %197 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %196, i32 0, i32 46
  %198 = load i32, i32* %197, align 4
  %199 = icmp slt i32 %195, %198
  br i1 %199, label %200, label %226

; <label>:200:                                    ; preds = %194
  store i32 0, i32* %16, align 4
  br label %201

; <label>:201:                                    ; preds = %219, %200
  %202 = load i32, i32* %16, align 4
  %203 = load i32, i32* @mf_size, align 4
  %204 = icmp slt i32 %202, %203
  br i1 %204, label %205, label %222

; <label>:205:                                    ; preds = %201
  %206 = load i32, i32* %17, align 4
  %207 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 %206
  %208 = load i32, i32* %16, align 4
  %209 = load %struct.lame_global_flags*, %struct.lame_global_flags** %8, align 4
  %210 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %209, i32 0, i32 42
  %211 = load i32, i32* %210, align 4
  %212 = add nsw i32 %208, %211
  %213 = getelementptr inbounds [3056 x i16], [3056 x i16]* %207, i32 0, i32 %212
  %214 = load i16, i16* %213, align 2
  %215 = load i32, i32* %17, align 4
  %216 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 %215
  %217 = load i32, i32* %16, align 4
  %218 = getelementptr inbounds [3056 x i16], [3056 x i16]* %216, i32 0, i32 %217
  store i16 %214, i16* %218, align 2
  br label %219

; <label>:219:                                    ; preds = %205
  %220 = load i32, i32* %16, align 4
  %221 = add nsw i32 %220, 1
  store i32 %221, i32* %16, align 4
  br label %201

; <label>:222:                                    ; preds = %201
  br label %223

; <label>:223:                                    ; preds = %222
  %224 = load i32, i32* %17, align 4
  %225 = add nsw i32 %224, 1
  store i32 %225, i32* %17, align 4
  br label %194

; <label>:226:                                    ; preds = %194
  br label %227

; <label>:227:                                    ; preds = %226, %159
  br label %95

; <label>:228:                                    ; preds = %95
  %229 = load i32, i32* %11, align 4
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %232, label %231

; <label>:231:                                    ; preds = %228
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21.194, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.190, i32 0, i32 0), i32 1066, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.lame_encode_buffer, i32 0, i32 0))
  br label %232

; <label>:232:                                    ; preds = %231, %228
  %233 = phi i1 [ true, %228 ], [ false, %231 ]
  %234 = zext i1 %233 to i32
  %235 = load i32, i32* %14, align 4
  store i32 %235, i32* %7, align 4
  br label %236

; <label>:236:                                    ; preds = %232, %176
  %237 = load i32, i32* %7, align 4
  ret i32 %237
}

; Function Attrs: nounwind
define arm_aapcscc i32 @lame_encode_buffer_interleaved(%struct.lame_global_flags*, i16*, i32, i8*, i32) #0 {
  %6 = alloca i32, align 4
  %7 = alloca %struct.lame_global_flags*, align 4
  %8 = alloca i16*, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i16*, align 4
  %18 = alloca i16*, align 4
  %19 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %7, align 4
  store i16* %1, i16** %8, align 4
  store i32 %2, i32* %9, align 4
  store i8* %3, i8** %10, align 4
  store i32 %4, i32* %11, align 4
  store i32 0, i32* %12, align 4
  %20 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %21 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %20, i32 0, i32 42
  %22 = load i32, i32* %21, align 4
  %23 = add nsw i32 1024, %22
  %24 = sub nsw i32 %23, 272
  store i32 %24, i32* %16, align 4
  %25 = load i32, i32* %16, align 4
  %26 = icmp sge i32 3056, %25
  br i1 %26, label %28, label %27

; <label>:27:                                     ; preds = %5
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.19.192, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.190, i32 0, i32 0), i32 1083, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__func__.lame_encode_buffer_interleaved, i32 0, i32 0))
  br label %28

; <label>:28:                                     ; preds = %27, %5
  %29 = phi i1 [ true, %5 ], [ false, %27 ]
  %30 = zext i1 %29 to i32
  %31 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %32 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %31, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 1
  br i1 %34, label %35, label %42

; <label>:35:                                     ; preds = %28
  %36 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %37 = load i16*, i16** %8, align 4
  %38 = load i32, i32* %9, align 4
  %39 = load i8*, i8** %10, align 4
  %40 = load i32, i32* %11, align 4
  %41 = call arm_aapcscc i32 @lame_encode_buffer(%struct.lame_global_flags* %36, i16* %37, i16* null, i32 %38, i8* %39, i32 %40)
  store i32 %41, i32* %6, align 4
  br label %297

; <label>:42:                                     ; preds = %28
  %43 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %44 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %43, i32 0, i32 49
  %45 = load float, float* %44, align 4
  %46 = fcmp une float %45, 1.000000e+00
  br i1 %46, label %47, label %101

; <label>:47:                                     ; preds = %42
  %48 = load i32, i32* %9, align 4
  %49 = mul i32 2, %48
  %50 = call arm_aapcscc i8* @malloc(i32 %49)
  %51 = bitcast i8* %50 to i16*
  store i16* %51, i16** %17, align 4
  %52 = load i32, i32* %9, align 4
  %53 = mul i32 2, %52
  %54 = call arm_aapcscc i8* @malloc(i32 %53)
  %55 = bitcast i8* %54 to i16*
  store i16* %55, i16** %18, align 4
  %56 = load i16*, i16** %17, align 4
  %57 = icmp eq i16* %56, null
  br i1 %57, label %61, label %58

; <label>:58:                                     ; preds = %47
  %59 = load i16*, i16** %18, align 4
  %60 = icmp eq i16* %59, null
  br i1 %60, label %61, label %62

; <label>:61:                                     ; preds = %58, %47
  store i32 -1, i32* %6, align 4
  br label %297

; <label>:62:                                     ; preds = %58
  store i32 0, i32* %14, align 4
  br label %63

; <label>:63:                                     ; preds = %85, %62
  %64 = load i32, i32* %14, align 4
  %65 = load i32, i32* %9, align 4
  %66 = icmp slt i32 %64, %65
  br i1 %66, label %67, label %88

; <label>:67:                                     ; preds = %63
  %68 = load i16*, i16** %8, align 4
  %69 = load i32, i32* %14, align 4
  %70 = mul nsw i32 2, %69
  %71 = getelementptr inbounds i16, i16* %68, i32 %70
  %72 = load i16, i16* %71, align 2
  %73 = load i16*, i16** %17, align 4
  %74 = load i32, i32* %14, align 4
  %75 = getelementptr inbounds i16, i16* %73, i32 %74
  store i16 %72, i16* %75, align 2
  %76 = load i16*, i16** %8, align 4
  %77 = load i32, i32* %14, align 4
  %78 = mul nsw i32 2, %77
  %79 = add nsw i32 %78, 1
  %80 = getelementptr inbounds i16, i16* %76, i32 %79
  %81 = load i16, i16* %80, align 2
  %82 = load i16*, i16** %18, align 4
  %83 = load i32, i32* %14, align 4
  %84 = getelementptr inbounds i16, i16* %82, i32 %83
  store i16 %81, i16* %84, align 2
  br label %85

; <label>:85:                                     ; preds = %67
  %86 = load i32, i32* %14, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %14, align 4
  br label %63

; <label>:88:                                     ; preds = %63
  %89 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %90 = load i16*, i16** %17, align 4
  %91 = load i16*, i16** %18, align 4
  %92 = load i32, i32* %9, align 4
  %93 = load i8*, i8** %10, align 4
  %94 = load i32, i32* %11, align 4
  %95 = call arm_aapcscc i32 @lame_encode_buffer(%struct.lame_global_flags* %89, i16* %90, i16* %91, i32 %92, i8* %93, i32 %94)
  store i32 %95, i32* %13, align 4
  %96 = load i16*, i16** %17, align 4
  %97 = bitcast i16* %96 to i8*
  call arm_aapcscc void @free(i8* %97)
  %98 = load i16*, i16** %18, align 4
  %99 = bitcast i16* %98 to i8*
  call arm_aapcscc void @free(i8* %99)
  %100 = load i32, i32* %13, align 4
  store i32 %100, i32* %6, align 4
  br label %297

; <label>:101:                                    ; preds = %42
  %102 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %103 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %102, i32 0, i32 39
  %104 = load i32, i32* %103, align 4
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %110

; <label>:106:                                    ; preds = %101
  %107 = load i32, i32* @lame_encode_buffer_interleaved.frame_buffered, align 4
  %108 = icmp ne i32 %107, 0
  br i1 %108, label %110, label %109

; <label>:109:                                    ; preds = %106
  call void @llvm.memset.p0i8.i32(i8* bitcast ([2 x [3056 x i16]]* @mfbuf to i8*), i8 0, i32 12224, i32 2, i1 false)
  store i32 1, i32* @lame_encode_buffer_interleaved.frame_buffered, align 4
  store i32 1088, i32* @mf_samples_to_encode, align 4
  store i32 752, i32* @mf_size, align 4
  br label %110

; <label>:110:                                    ; preds = %109, %106, %101
  %111 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %112 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %111, i32 0, i32 39
  %113 = load i32, i32* %112, align 4
  %114 = icmp eq i32 %113, 1
  br i1 %114, label %115, label %116

; <label>:115:                                    ; preds = %110
  store i32 0, i32* @lame_encode_buffer_interleaved.frame_buffered, align 4
  br label %116

; <label>:116:                                    ; preds = %115, %110
  %117 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %118 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %117, i32 0, i32 1
  %119 = load i32, i32* %118, align 4
  %120 = icmp eq i32 %119, 2
  br i1 %120, label %121, label %161

; <label>:121:                                    ; preds = %116
  %122 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %123 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %122, i32 0, i32 46
  %124 = load i32, i32* %123, align 4
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %126, label %161

; <label>:126:                                    ; preds = %121
  store i32 0, i32* %14, align 4
  br label %127

; <label>:127:                                    ; preds = %157, %126
  %128 = load i32, i32* %14, align 4
  %129 = load i32, i32* %9, align 4
  %130 = icmp slt i32 %128, %129
  br i1 %130, label %131, label %160

; <label>:131:                                    ; preds = %127
  %132 = load i16*, i16** %8, align 4
  %133 = load i32, i32* %14, align 4
  %134 = mul nsw i32 2, %133
  %135 = getelementptr inbounds i16, i16* %132, i32 %134
  %136 = load i16, i16* %135, align 2
  %137 = sext i16 %136 to i32
  %138 = load i16*, i16** %8, align 4
  %139 = load i32, i32* %14, align 4
  %140 = mul nsw i32 2, %139
  %141 = add nsw i32 %140, 1
  %142 = getelementptr inbounds i16, i16* %138, i32 %141
  %143 = load i16, i16* %142, align 2
  %144 = sext i16 %143 to i32
  %145 = add nsw i32 %137, %144
  %146 = sdiv i32 %145, 2
  %147 = trunc i32 %146 to i16
  %148 = load i16*, i16** %8, align 4
  %149 = load i32, i32* %14, align 4
  %150 = mul nsw i32 2, %149
  %151 = getelementptr inbounds i16, i16* %148, i32 %150
  store i16 %147, i16* %151, align 2
  %152 = load i16*, i16** %8, align 4
  %153 = load i32, i32* %14, align 4
  %154 = mul nsw i32 2, %153
  %155 = add nsw i32 %154, 1
  %156 = getelementptr inbounds i16, i16* %152, i32 %155
  store i16 0, i16* %156, align 2
  br label %157

; <label>:157:                                    ; preds = %131
  %158 = load i32, i32* %14, align 4
  %159 = add nsw i32 %158, 1
  store i32 %159, i32* %14, align 4
  br label %127

; <label>:160:                                    ; preds = %127
  br label %161

; <label>:161:                                    ; preds = %160, %121, %116
  br label %162

; <label>:162:                                    ; preds = %288, %161
  %163 = load i32, i32* %9, align 4
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %165, label %289

; <label>:165:                                    ; preds = %162
  %166 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %167 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %166, i32 0, i32 42
  %168 = load i32, i32* %167, align 4
  %169 = load i32, i32* %9, align 4
  %170 = icmp slt i32 %168, %169
  br i1 %170, label %171, label %175

; <label>:171:                                    ; preds = %165
  %172 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %173 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %172, i32 0, i32 42
  %174 = load i32, i32* %173, align 4
  br label %177

; <label>:175:                                    ; preds = %165
  %176 = load i32, i32* %9, align 4
  br label %177

; <label>:177:                                    ; preds = %175, %171
  %178 = phi i32 [ %174, %171 ], [ %176, %175 ]
  store i32 %178, i32* %19, align 4
  store i32 0, i32* %14, align 4
  br label %179

; <label>:179:                                    ; preds = %203, %177
  %180 = load i32, i32* %14, align 4
  %181 = load i32, i32* %19, align 4
  %182 = icmp slt i32 %180, %181
  br i1 %182, label %183, label %206

; <label>:183:                                    ; preds = %179
  %184 = load i16*, i16** %8, align 4
  %185 = load i32, i32* %14, align 4
  %186 = mul nsw i32 2, %185
  %187 = getelementptr inbounds i16, i16* %184, i32 %186
  %188 = load i16, i16* %187, align 2
  %189 = load i32, i32* @mf_size, align 4
  %190 = load i32, i32* %14, align 4
  %191 = add nsw i32 %189, %190
  %192 = getelementptr inbounds [3056 x i16], [3056 x i16]* getelementptr inbounds ([2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 0), i32 0, i32 %191
  store i16 %188, i16* %192, align 2
  %193 = load i16*, i16** %8, align 4
  %194 = load i32, i32* %14, align 4
  %195 = mul nsw i32 2, %194
  %196 = add nsw i32 %195, 1
  %197 = getelementptr inbounds i16, i16* %193, i32 %196
  %198 = load i16, i16* %197, align 2
  %199 = load i32, i32* @mf_size, align 4
  %200 = load i32, i32* %14, align 4
  %201 = add nsw i32 %199, %200
  %202 = getelementptr inbounds [3056 x i16], [3056 x i16]* getelementptr inbounds ([2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 1), i32 0, i32 %201
  store i16 %198, i16* %202, align 2
  br label %203

; <label>:203:                                    ; preds = %183
  %204 = load i32, i32* %14, align 4
  %205 = add nsw i32 %204, 1
  store i32 %205, i32* %14, align 4
  br label %179

; <label>:206:                                    ; preds = %179
  %207 = load i32, i32* %19, align 4
  %208 = mul nsw i32 2, %207
  %209 = load i16*, i16** %8, align 4
  %210 = getelementptr inbounds i16, i16* %209, i32 %208
  store i16* %210, i16** %8, align 4
  %211 = load i32, i32* %19, align 4
  %212 = load i32, i32* %9, align 4
  %213 = sub nsw i32 %212, %211
  store i32 %213, i32* %9, align 4
  %214 = load i32, i32* %19, align 4
  %215 = load i32, i32* @mf_size, align 4
  %216 = add nsw i32 %215, %214
  store i32 %216, i32* @mf_size, align 4
  %217 = load i32, i32* @mf_size, align 4
  %218 = icmp sle i32 %217, 3056
  br i1 %218, label %220, label %219

; <label>:219:                                    ; preds = %206
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20.193, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.190, i32 0, i32 0), i32 1140, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__func__.lame_encode_buffer_interleaved, i32 0, i32 0))
  br label %220

; <label>:220:                                    ; preds = %219, %206
  %221 = phi i1 [ true, %206 ], [ false, %219 ]
  %222 = zext i1 %221 to i32
  %223 = load i32, i32* %19, align 4
  %224 = load i32, i32* @mf_samples_to_encode, align 4
  %225 = add nsw i32 %224, %223
  store i32 %225, i32* @mf_samples_to_encode, align 4
  %226 = load i32, i32* @mf_size, align 4
  %227 = load i32, i32* %16, align 4
  %228 = icmp sge i32 %226, %227
  br i1 %228, label %229, label %288

; <label>:229:                                    ; preds = %220
  %230 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %231 = load i32, i32* @mf_size, align 4
  %232 = load i8*, i8** %10, align 4
  %233 = load i32, i32* %11, align 4
  %234 = call arm_aapcscc i32 @lame_encode_frame(%struct.lame_global_flags* %230, i16* getelementptr inbounds ([2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 0, i32 0), i16* getelementptr inbounds ([2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 1, i32 0), i32 %231, i8* %232, i32 %233)
  store i32 %234, i32* %13, align 4
  %235 = load i32, i32* %13, align 4
  %236 = icmp eq i32 %235, -1
  br i1 %236, label %237, label %238

; <label>:237:                                    ; preds = %229
  store i32 -1, i32* %6, align 4
  br label %297

; <label>:238:                                    ; preds = %229
  %239 = load i32, i32* %13, align 4
  %240 = load i8*, i8** %10, align 4
  %241 = getelementptr inbounds i8, i8* %240, i32 %239
  store i8* %241, i8** %10, align 4
  %242 = load i32, i32* %13, align 4
  %243 = load i32, i32* %12, align 4
  %244 = add nsw i32 %243, %242
  store i32 %244, i32* %12, align 4
  %245 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %246 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %245, i32 0, i32 42
  %247 = load i32, i32* %246, align 4
  %248 = load i32, i32* @mf_size, align 4
  %249 = sub nsw i32 %248, %247
  store i32 %249, i32* @mf_size, align 4
  %250 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %251 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %250, i32 0, i32 42
  %252 = load i32, i32* %251, align 4
  %253 = load i32, i32* @mf_samples_to_encode, align 4
  %254 = sub nsw i32 %253, %252
  store i32 %254, i32* @mf_samples_to_encode, align 4
  store i32 0, i32* %15, align 4
  br label %255

; <label>:255:                                    ; preds = %284, %238
  %256 = load i32, i32* %15, align 4
  %257 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %258 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %257, i32 0, i32 46
  %259 = load i32, i32* %258, align 4
  %260 = icmp slt i32 %256, %259
  br i1 %260, label %261, label %287

; <label>:261:                                    ; preds = %255
  store i32 0, i32* %14, align 4
  br label %262

; <label>:262:                                    ; preds = %280, %261
  %263 = load i32, i32* %14, align 4
  %264 = load i32, i32* @mf_size, align 4
  %265 = icmp slt i32 %263, %264
  br i1 %265, label %266, label %283

; <label>:266:                                    ; preds = %262
  %267 = load i32, i32* %15, align 4
  %268 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 %267
  %269 = load i32, i32* %14, align 4
  %270 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %271 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %270, i32 0, i32 42
  %272 = load i32, i32* %271, align 4
  %273 = add nsw i32 %269, %272
  %274 = getelementptr inbounds [3056 x i16], [3056 x i16]* %268, i32 0, i32 %273
  %275 = load i16, i16* %274, align 2
  %276 = load i32, i32* %15, align 4
  %277 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i32 0, i32 %276
  %278 = load i32, i32* %14, align 4
  %279 = getelementptr inbounds [3056 x i16], [3056 x i16]* %277, i32 0, i32 %278
  store i16 %275, i16* %279, align 2
  br label %280

; <label>:280:                                    ; preds = %266
  %281 = load i32, i32* %14, align 4
  %282 = add nsw i32 %281, 1
  store i32 %282, i32* %14, align 4
  br label %262

; <label>:283:                                    ; preds = %262
  br label %284

; <label>:284:                                    ; preds = %283
  %285 = load i32, i32* %15, align 4
  %286 = add nsw i32 %285, 1
  store i32 %286, i32* %15, align 4
  br label %255

; <label>:287:                                    ; preds = %255
  br label %288

; <label>:288:                                    ; preds = %287, %220
  br label %162

; <label>:289:                                    ; preds = %162
  %290 = load i32, i32* %9, align 4
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %293, label %292

; <label>:292:                                    ; preds = %289
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21.194, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.190, i32 0, i32 0), i32 1161, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__func__.lame_encode_buffer_interleaved, i32 0, i32 0))
  br label %293

; <label>:293:                                    ; preds = %292, %289
  %294 = phi i1 [ true, %289 ], [ false, %292 ]
  %295 = zext i1 %294 to i32
  %296 = load i32, i32* %12, align 4
  store i32 %296, i32* %6, align 4
  br label %297

; <label>:297:                                    ; preds = %293, %237, %88, %61, %35
  %298 = load i32, i32* %6, align 4
  ret i32 %298
}

declare arm_aapcscc i8* @malloc(i32) #3

; Function Attrs: nounwind
define arm_aapcscc i32 @lame_encode(%struct.lame_global_flags*, [1152 x i16]*, i8*, i32) #0 {
  %5 = alloca %struct.lame_global_flags*, align 4
  %6 = alloca [1152 x i16]*, align 4
  %7 = alloca i8*, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %5, align 4
  store [1152 x i16]* %1, [1152 x i16]** %6, align 4
  store i8* %2, i8** %7, align 4
  store i32 %3, i32* %8, align 4
  %11 = load i32, i32* @mf_samples_to_encode, align 4
  store i32 %11, i32* %10, align 4
  %12 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %13 = load [1152 x i16]*, [1152 x i16]** %6, align 4
  %14 = getelementptr inbounds [1152 x i16], [1152 x i16]* %13, i32 0
  %15 = getelementptr inbounds [1152 x i16], [1152 x i16]* %14, i32 0, i32 0
  %16 = load [1152 x i16]*, [1152 x i16]** %6, align 4
  %17 = getelementptr inbounds [1152 x i16], [1152 x i16]* %16, i32 1
  %18 = getelementptr inbounds [1152 x i16], [1152 x i16]* %17, i32 0, i32 0
  %19 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %20 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %19, i32 0, i32 45
  %21 = load i32, i32* %20, align 4
  %22 = mul nsw i32 576, %21
  %23 = load i8*, i8** %7, align 4
  %24 = load i32, i32* %8, align 4
  %25 = call arm_aapcscc i32 @lame_encode_buffer(%struct.lame_global_flags* %12, i16* %15, i16* %18, i32 %22, i8* %23, i32 %24)
  store i32 %25, i32* %9, align 4
  %26 = load i32, i32* %10, align 4
  store i32 %26, i32* @mf_samples_to_encode, align 4
  %27 = load i32, i32* %9, align 4
  ret i32 %27
}

; Function Attrs: nounwind
define arm_aapcscc void @lame_init(%struct.lame_global_flags*) #0 {
  %2 = alloca %struct.lame_global_flags*, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %2, align 4
  %3 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %4 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %3, i32 0, i32 36
  store i32 0, i32* %4, align 4
  %5 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %6 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %5, i32 0, i32 33
  store i32 0, i32* %6, align 4
  %7 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %8 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %7, i32 0, i32 34
  store i32 0, i32* %8, align 4
  %9 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %10 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %9, i32 0, i32 5
  store i32 1, i32* %10, align 4
  %11 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %12 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %11, i32 0, i32 35
  store float 0.000000e+00, float* %12, align 4
  %13 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %14 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %13, i32 0, i32 17
  store i32 0, i32* %14, align 4
  %15 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %16 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %15, i32 0, i32 18
  store i32 0, i32* %16, align 4
  %17 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %18 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %17, i32 0, i32 19
  store i32 0, i32* %18, align 4
  %19 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %20 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %19, i32 0, i32 20
  store i32 0, i32* %20, align 4
  %21 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %22 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %21, i32 0, i32 39
  store i32 0, i32* %22, align 4
  %23 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %24 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %23, i32 0, i32 4
  store i32 0, i32* %24, align 4
  %25 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %26 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %25, i32 0, i32 6
  store i32 5, i32* %26, align 4
  %27 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %28 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %27, i32 0, i32 29
  store i32 0, i32* %28, align 4
  %29 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %30 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %29, i32 0, i32 59
  store i32 0, i32* %30, align 4
  %31 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %32 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %31, i32 0, i32 25
  store i32 0, i32* %32, align 4
  %33 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %34 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %33, i32 0, i32 26
  store i32 0, i32* %34, align 4
  %35 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %36 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %35, i32 0, i32 27
  store i32 -1, i32* %36, align 4
  %37 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %38 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %37, i32 0, i32 28
  store i32 -1, i32* %38, align 4
  %39 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %40 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %39, i32 0, i32 53
  store float 0.000000e+00, float* %40, align 4
  %41 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %42 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %41, i32 0, i32 54
  store float 0.000000e+00, float* %42, align 4
  %43 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %44 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %43, i32 0, i32 55
  store float 0.000000e+00, float* %44, align 4
  %45 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %46 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %45, i32 0, i32 56
  store float 0.000000e+00, float* %46, align 4
  %47 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %48 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %47, i32 0, i32 57
  store i32 32, i32* %48, align 4
  %49 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %50 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %49, i32 0, i32 58
  store i32 -1, i32* %50, align 4
  %51 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %52 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %51, i32 0, i32 37
  store i32 0, i32* %52, align 4
  %53 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %54 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %53, i32 0, i32 49
  store float 1.000000e+00, float* %54, align 4
  %55 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %56 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %55, i32 0, i32 15
  store i32 2, i32* %56, align 4
  %57 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %58 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %57, i32 0, i32 44
  store i32 0, i32* %58, align 4
  %59 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %60 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %59, i32 0, i32 30
  store i32 0, i32* %60, align 4
  %61 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %62 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %61, i32 0, i32 7
  store i32 0, i32* %62, align 4
  %63 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %64 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %63, i32 0, i32 40
  store i32 0, i32* %64, align 4
  %65 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %66 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %65, i32 0, i32 21
  store i32 0, i32* %66, align 4
  %67 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %68 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %67, i32 0, i32 22
  store i32 4, i32* %68, align 4
  %69 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %70 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %69, i32 0, i32 23
  store i32 0, i32* %70, align 4
  %71 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %72 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %71, i32 0, i32 24
  store i32 0, i32* %72, align 4
  %73 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %74 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %73, i32 0, i32 47
  store i32 1, i32* %74, align 4
  %75 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %76 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %75, i32 0, i32 48
  store i32 13, i32* %76, align 4
  %77 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %78 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %77, i32 0, i32 43
  store i32 1, i32* %78, align 4
  %79 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %80 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %79, i32 0, i32 8
  store i32 1, i32* %80, align 4
  %81 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %82 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %81, i32 0, i32 9
  store i32 0, i32* %82, align 4
  %83 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %84 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %83, i32 0, i32 10
  store i32 0, i32* %84, align 4
  %85 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %86 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %85, i32 0, i32 11
  store i32 0, i32* %86, align 4
  %87 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %88 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %87, i32 0, i32 12
  store i32 0, i32* %88, align 4
  %89 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %90 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %89, i32 0, i32 13
  store i32 1, i32* %90, align 4
  %91 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %92 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %91, i32 0, i32 16
  store i32 0, i32* %92, align 4
  %93 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %94 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %93, i32 0, i32 14
  store i32 0, i32* %94, align 4
  %95 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %96 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %95, i32 0, i32 38
  store i32 0, i32* %96, align 4
  %97 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %98 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %97, i32 0, i32 2
  store i32 44100, i32* %98, align 4
  %99 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %100 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %99, i32 0, i32 3
  store i32 0, i32* %100, align 4
  %101 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %102 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %101, i32 0, i32 1
  store i32 2, i32* %102, align 4
  %103 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %104 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %103, i32 0, i32 0
  store i32 -1, i32* %104, align 4
  %105 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %106 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %105, i32 0, i32 31
  store i8* null, i8** %106, align 4
  %107 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %108 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %107, i32 0, i32 32
  store i8* null, i8** %108, align 4
  store i32 0, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i32 0, i32 0), align 4
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @lame_encode_finish(%struct.lame_global_flags*, i8*, i32) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.lame_global_flags*, align 4
  %6 = alloca i8*, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [2 x [1152 x i16]], align 2
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %5, align 4
  store i8* %1, i8** %6, align 4
  store i32 %2, i32* %7, align 4
  %12 = getelementptr inbounds [2 x [1152 x i16]], [2 x [1152 x i16]]* %11, i32 0, i32 0
  %13 = bitcast [1152 x i16]* %12 to i8*
  call void @llvm.memset.p0i8.i32(i8* %13, i8 0, i32 4608, i32 2, i1 false)
  store i32 0, i32* %9, align 4
  br label %14

; <label>:14:                                     ; preds = %33, %3
  %15 = load i32, i32* @mf_samples_to_encode, align 4
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %45

; <label>:17:                                     ; preds = %14
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %9, align 4
  %20 = sub nsw i32 %18, %19
  store i32 %20, i32* %10, align 4
  %21 = load i32, i32* %7, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %17
  store i32 0, i32* %10, align 4
  br label %24

; <label>:24:                                     ; preds = %23, %17
  %25 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %26 = getelementptr inbounds [2 x [1152 x i16]], [2 x [1152 x i16]]* %11, i32 0, i32 0
  %27 = load i8*, i8** %6, align 4
  %28 = load i32, i32* %10, align 4
  %29 = call arm_aapcscc i32 @lame_encode(%struct.lame_global_flags* %25, [1152 x i16]* %26, i8* %27, i32 %28)
  store i32 %29, i32* %8, align 4
  %30 = load i32, i32* %8, align 4
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %33

; <label>:32:                                     ; preds = %24
  call arm_aapcscc void @desalloc_buffer(%struct.bit_stream_struc* @bs.172)
  store i32 -1, i32* %4, align 4
  br label %95

; <label>:33:                                     ; preds = %24
  %34 = load i32, i32* %8, align 4
  %35 = load i8*, i8** %6, align 4
  %36 = getelementptr inbounds i8, i8* %35, i32 %34
  store i8* %36, i8** %6, align 4
  %37 = load i32, i32* %8, align 4
  %38 = load i32, i32* %9, align 4
  %39 = add nsw i32 %38, %37
  store i32 %39, i32* %9, align 4
  %40 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %41 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %40, i32 0, i32 42
  %42 = load i32, i32* %41, align 4
  %43 = load i32, i32* @mf_samples_to_encode, align 4
  %44 = sub nsw i32 %43, %42
  store i32 %44, i32* @mf_samples_to_encode, align 4
  br label %14

; <label>:45:                                     ; preds = %14
  %46 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %47 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %46, i32 0, i32 39
  %48 = load i32, i32* %47, align 4
  %49 = add nsw i32 %48, -1
  store i32 %49, i32* %47, align 4
  %50 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %51 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %50, i32 0, i32 4
  %52 = load i32, i32* %51, align 4
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %76, label %54

; <label>:54:                                     ; preds = %45
  %55 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %56 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %55, i32 0, i32 7
  %57 = load i32, i32* %56, align 4
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %76, label %59

; <label>:59:                                     ; preds = %54
  %60 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %61 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %60, i32 0, i32 3
  %62 = load i32, i32* %61, align 4
  %63 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %64 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %63, i32 0, i32 39
  %65 = load i32, i32* %64, align 4
  %66 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %67 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %66, i32 0, i32 40
  %68 = load i32, i32* %67, align 4
  %69 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %70 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %69, i32 0, i32 42
  %71 = load i32, i32* %70, align 4
  call arm_aapcscc void @timestatus(i32 %62, i32 %65, i32 %68, i32 %71)
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %73 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.195, i32 0, i32 0))
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %75 = call arm_aapcscc i32 @fflush(%struct._IO_FILE* %74)
  br label %76

; <label>:76:                                     ; preds = %59, %54, %45
  call arm_aapcscc void @III_FlushBitstream()
  %77 = load i32, i32* %7, align 4
  %78 = load i32, i32* %9, align 4
  %79 = sub nsw i32 %77, %78
  store i32 %79, i32* %10, align 4
  %80 = load i32, i32* %7, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %83

; <label>:82:                                     ; preds = %76
  store i32 0, i32* %10, align 4
  br label %83

; <label>:83:                                     ; preds = %82, %76
  %84 = load i8*, i8** %6, align 4
  %85 = load i32, i32* %10, align 4
  %86 = call arm_aapcscc i32 @copy_buffer(i8* %84, i32 %85, %struct.bit_stream_struc* @bs.172)
  store i32 %86, i32* %8, align 4
  %87 = load i32, i32* %8, align 4
  %88 = icmp eq i32 %87, -1
  br i1 %88, label %89, label %90

; <label>:89:                                     ; preds = %83
  call arm_aapcscc void @desalloc_buffer(%struct.bit_stream_struc* @bs.172)
  store i32 -1, i32* %4, align 4
  br label %95

; <label>:90:                                     ; preds = %83
  %91 = load i32, i32* %8, align 4
  %92 = load i32, i32* %9, align 4
  %93 = add nsw i32 %92, %91
  store i32 %93, i32* %9, align 4
  call arm_aapcscc void @desalloc_buffer(%struct.bit_stream_struc* @bs.172)
  %94 = load i32, i32* %9, align 4
  store i32 %94, i32* %4, align 4
  br label %95

; <label>:95:                                     ; preds = %90, %89, %32
  %96 = load i32, i32* %4, align 4
  ret i32 %96
}

; Function Attrs: nounwind
define arm_aapcscc void @lame_mp3_tags(%struct.lame_global_flags*) #0 {
  %2 = alloca %struct.lame_global_flags*, align 4
  %3 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %2, align 4
  %4 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %5 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %4, i32 0, i32 5
  %6 = load i32, i32* %5, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %23

; <label>:8:                                      ; preds = %1
  %9 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %10 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %9, i32 0, i32 22
  %11 = load i32, i32* %10, align 4
  %12 = mul nsw i32 %11, 100
  %13 = sdiv i32 %12, 9
  store i32 %13, i32* %3, align 4
  %14 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %15 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %14, i32 0, i32 32
  %16 = load i8*, i8** %15, align 4
  %17 = load i32, i32* %3, align 4
  %18 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %19 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %18, i32 0, i32 43
  %20 = load i32, i32* %19, align 4
  %21 = sub nsw i32 1, %20
  %22 = call arm_aapcscc i32 @PutVbrTag(i8* %16, i32 %17, i32 %21)
  br label %23

; <label>:23:                                     ; preds = %8, %1
  %24 = load i32, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i32 0, i32 0), align 4
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %31

; <label>:26:                                     ; preds = %23
  call arm_aapcscc void @id3_buildtag(%struct.ID3TAGDATA* @id3tag)
  %27 = load %struct.lame_global_flags*, %struct.lame_global_flags** %2, align 4
  %28 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %27, i32 0, i32 32
  %29 = load i8*, i8** %28, align 4
  %30 = call arm_aapcscc i32 @id3_writetag(i8* %29, %struct.ID3TAGDATA* @id3tag)
  br label %31

; <label>:31:                                     ; preds = %26, %23
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @lame_version(%struct.lame_global_flags*, i8*) #0 {
  %3 = alloca %struct.lame_global_flags*, align 4
  %4 = alloca i8*, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %3, align 4
  store i8* %1, i8** %4, align 4
  %5 = load i8*, i8** %4, align 4
  %6 = call arm_aapcscc i8* @get_lame_version()
  %7 = call arm_aapcscc i8* @strncpy(i8* %5, i8* %6, i32 20)
  ret void
}

declare arm_aapcscc i8* @strncpy(i8*, i8*, i32) #3

; Function Attrs: nounwind
define arm_aapcscc i32 @main(i32, i8**) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 4
  %6 = alloca [16384 x i8], align 1
  %7 = alloca [2 x [1152 x i16]], align 2
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.lame_global_flags, align 4
  %11 = alloca %struct._IO_FILE*, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 4
  call arm_aapcscc void @lame_init(%struct.lame_global_flags* %10)
  %12 = load i32, i32* %4, align 4
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %18

; <label>:14:                                     ; preds = %2
  %15 = load i8**, i8*** %5, align 4
  %16 = getelementptr inbounds i8*, i8** %15, i32 0
  %17 = load i8*, i8** %16, align 4
  call arm_aapcscc void @lame_usage(%struct.lame_global_flags* %10, i8* %17)
  br label %18

; <label>:18:                                     ; preds = %14, %2
  %19 = load i32, i32* %4, align 4
  %20 = load i8**, i8*** %5, align 4
  call arm_aapcscc void @lame_parse_args(%struct.lame_global_flags* %10, i32 %19, i8** %20)
  %21 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %10, i32 0, i32 4
  %22 = load i32, i32* %21, align 4
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %43, label %24

; <label>:24:                                     ; preds = %18
  %25 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %10, i32 0, i32 32
  %26 = load i8*, i8** %25, align 4
  %27 = call arm_aapcscc i32 @strcmp(i8* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.196, i32 0, i32 0))
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %31, label %29

; <label>:29:                                     ; preds = %24
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 4
  store %struct._IO_FILE* %30, %struct._IO_FILE** %11, align 4
  br label %42

; <label>:31:                                     ; preds = %24
  %32 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %10, i32 0, i32 32
  %33 = load i8*, i8** %32, align 4
  %34 = call arm_aapcscc %struct._IO_FILE* @fopen(i8* %33, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.197, i32 0, i32 0))
  store %struct._IO_FILE* %34, %struct._IO_FILE** %11, align 4
  %35 = icmp eq %struct._IO_FILE* %34, null
  br i1 %35, label %36, label %41

; <label>:36:                                     ; preds = %31
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %38 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %10, i32 0, i32 32
  %39 = load i8*, i8** %38, align 4
  %40 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.198, i32 0, i32 0), i8* %39)
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:41:                                     ; preds = %31
  br label %42

; <label>:42:                                     ; preds = %41, %29
  br label %43

; <label>:43:                                     ; preds = %42, %18
  call arm_aapcscc void @lame_init_infile(%struct.lame_global_flags* %10)
  call arm_aapcscc void @lame_init_params(%struct.lame_global_flags* %10)
  call arm_aapcscc void @lame_print_config(%struct.lame_global_flags* %10)
  br label %44

; <label>:44:                                     ; preds = %70, %43
  %45 = getelementptr inbounds [2 x [1152 x i16]], [2 x [1152 x i16]]* %7, i32 0, i32 0
  %46 = call arm_aapcscc i32 @lame_readframe(%struct.lame_global_flags* %10, [1152 x i16]* %45)
  store i32 %46, i32* %8, align 4
  %47 = getelementptr inbounds [2 x [1152 x i16]], [2 x [1152 x i16]]* %7, i32 0, i32 0
  %48 = getelementptr inbounds [1152 x i16], [1152 x i16]* %47, i32 0, i32 0
  %49 = getelementptr inbounds [2 x [1152 x i16]], [2 x [1152 x i16]]* %7, i32 0, i32 1
  %50 = getelementptr inbounds [1152 x i16], [1152 x i16]* %49, i32 0, i32 0
  %51 = load i32, i32* %8, align 4
  %52 = getelementptr inbounds [16384 x i8], [16384 x i8]* %6, i32 0, i32 0
  %53 = call arm_aapcscc i32 @lame_encode_buffer(%struct.lame_global_flags* %10, i16* %48, i16* %50, i32 %51, i8* %52, i32 16384)
  store i32 %53, i32* %9, align 4
  %54 = load i32, i32* %9, align 4
  %55 = icmp eq i32 %54, -1
  br i1 %55, label %56, label %59

; <label>:56:                                     ; preds = %44
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %58 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3.199, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:59:                                     ; preds = %44
  %60 = getelementptr inbounds [16384 x i8], [16384 x i8]* %6, i32 0, i32 0
  %61 = load i32, i32* %9, align 4
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 4
  %63 = call arm_aapcscc i32 @fwrite(i8* %60, i32 1, i32 %61, %struct._IO_FILE* %62)
  %64 = load i32, i32* %9, align 4
  %65 = icmp ne i32 %63, %64
  br i1 %65, label %66, label %69

; <label>:66:                                     ; preds = %59
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %68 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4.200, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:69:                                     ; preds = %59
  br label %70

; <label>:70:                                     ; preds = %69
  %71 = load i32, i32* %8, align 4
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %44, label %73

; <label>:73:                                     ; preds = %70
  %74 = getelementptr inbounds [16384 x i8], [16384 x i8]* %6, i32 0, i32 0
  %75 = call arm_aapcscc i32 @lame_encode_finish(%struct.lame_global_flags* %10, i8* %74, i32 16384)
  store i32 %75, i32* %9, align 4
  %76 = getelementptr inbounds [16384 x i8], [16384 x i8]* %6, i32 0, i32 0
  %77 = load i32, i32* %9, align 4
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 4
  %79 = call arm_aapcscc i32 @fwrite(i8* %76, i32 1, i32 %77, %struct._IO_FILE* %78)
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 4
  %81 = call arm_aapcscc i32 @fclose(%struct._IO_FILE* %80)
  call arm_aapcscc void @lame_close_infile(%struct.lame_global_flags* %10)
  call arm_aapcscc void @lame_mp3_tags(%struct.lame_global_flags* %10)
  ret i32 0
}

declare arm_aapcscc void @lame_usage(%struct.lame_global_flags*, i8*) #3

declare arm_aapcscc void @lame_parse_args(%struct.lame_global_flags*, i32, i8**) #3

declare arm_aapcscc void @lame_init_infile(%struct.lame_global_flags*) #3

declare arm_aapcscc i32 @lame_readframe(%struct.lame_global_flags*, [1152 x i16]*) #3

declare arm_aapcscc void @lame_close_infile(%struct.lame_global_flags*) #3

; Function Attrs: nounwind
define arm_aapcscc void @mdct_sub48(%struct.lame_global_flags*, i16*, i16*, [2 x [576 x double]]*, %struct.III_side_info_t*) #0 {
  %6 = alloca %struct.lame_global_flags*, align 4
  %7 = alloca i16*, align 4
  %8 = alloca i16*, align 4
  %9 = alloca [2 x [576 x double]]*, align 4
  %10 = alloca %struct.III_side_info_t*, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i16*, align 4
  %15 = alloca i32, align 4
  %16 = alloca double*, align 4
  %17 = alloca %struct.gr_info*, align 4
  %18 = alloca double*, align 4
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  %21 = alloca i32, align 4
  %22 = alloca double, align 8
  %23 = alloca double, align 8
  %24 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %6, align 4
  store i16* %1, i16** %7, align 4
  store i16* %2, i16** %8, align 4
  store [2 x [576 x double]]* %3, [2 x [576 x double]]** %9, align 4
  store %struct.III_side_info_t* %4, %struct.III_side_info_t** %10, align 4
  %25 = load i32, i32* @mdct_sub48.init, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %30

; <label>:27:                                     ; preds = %5
  call arm_aapcscc void @mdct_init48()
  %28 = load i32, i32* @mdct_sub48.init, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* @mdct_sub48.init, align 4
  br label %30

; <label>:30:                                     ; preds = %27, %5
  %31 = load i16*, i16** %7, align 4
  store i16* %31, i16** %14, align 4
  store i32 0, i32* %13, align 4
  br label %32

; <label>:32:                                     ; preds = %597, %30
  %33 = load i32, i32* %13, align 4
  %34 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %35 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %34, i32 0, i32 46
  %36 = load i32, i32* %35, align 4
  %37 = icmp slt i32 %33, %36
  br i1 %37, label %38, label %600

; <label>:38:                                     ; preds = %32
  store i32 0, i32* %11, align 4
  br label %39

; <label>:39:                                     ; preds = %576, %38
  %40 = load i32, i32* %11, align 4
  %41 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %42 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %41, i32 0, i32 45
  %43 = load i32, i32* %42, align 4
  %44 = icmp slt i32 %40, %43
  br i1 %44, label %45, label %579

; <label>:45:                                     ; preds = %39
  %46 = load [2 x [576 x double]]*, [2 x [576 x double]]** %9, align 4
  %47 = load i32, i32* %11, align 4
  %48 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %46, i32 %47
  %49 = load i32, i32* %13, align 4
  %50 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %48, i32 0, i32 %49
  %51 = getelementptr inbounds [576 x double], [576 x double]* %50, i32 0, i32 0
  store double* %51, double** %16, align 4
  %52 = load %struct.III_side_info_t*, %struct.III_side_info_t** %10, align 4
  %53 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %52, i32 0, i32 4
  %54 = load i32, i32* %11, align 4
  %55 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %53, i32 0, i32 %54
  %56 = getelementptr inbounds %struct.anon, %struct.anon* %55, i32 0, i32 0
  %57 = load i32, i32* %13, align 4
  %58 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %56, i32 0, i32 %57
  %59 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %58, i32 0, i32 0
  store %struct.gr_info* %59, %struct.gr_info** %17, align 4
  %60 = load i32, i32* %13, align 4
  %61 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %60
  %62 = load i32, i32* %11, align 4
  %63 = sub nsw i32 1, %62
  %64 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %61, i32 0, i32 %63
  %65 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %64, i32 0, i32 0
  %66 = getelementptr inbounds [32 x double], [32 x double]* %65, i32 0, i32 0
  store double* %66, double** %18, align 4
  store i32 0, i32* %12, align 4
  br label %67

; <label>:67:                                     ; preds = %95, %45
  %68 = load i32, i32* %12, align 4
  %69 = icmp slt i32 %68, 9
  br i1 %69, label %70, label %98

; <label>:70:                                     ; preds = %67
  %71 = load i16*, i16** %14, align 4
  %72 = load double*, double** %18, align 4
  call arm_aapcscc void @window_subband(i16* %71, double* %72, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4))
  %73 = load i16*, i16** %14, align 4
  %74 = getelementptr inbounds i16, i16* %73, i32 32
  %75 = load double*, double** %18, align 4
  %76 = getelementptr inbounds double, double* %75, i32 32
  call arm_aapcscc void @window_subband(i16* %74, double* %76, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4))
  store i32 1, i32* %15, align 4
  br label %77

; <label>:77:                                     ; preds = %87, %70
  %78 = load i32, i32* %15, align 4
  %79 = icmp slt i32 %78, 32
  br i1 %79, label %80, label %90

; <label>:80:                                     ; preds = %77
  %81 = load double*, double** %18, align 4
  %82 = load i32, i32* %15, align 4
  %83 = add nsw i32 %82, 32
  %84 = getelementptr inbounds double, double* %81, i32 %83
  %85 = load double, double* %84, align 8
  %86 = fmul double %85, -1.000000e+00
  store double %86, double* %84, align 8
  br label %87

; <label>:87:                                     ; preds = %80
  %88 = load i32, i32* %15, align 4
  %89 = add nsw i32 %88, 2
  store i32 %89, i32* %15, align 4
  br label %77

; <label>:90:                                     ; preds = %77
  %91 = load double*, double** %18, align 4
  %92 = getelementptr inbounds double, double* %91, i32 64
  store double* %92, double** %18, align 4
  %93 = load i16*, i16** %14, align 4
  %94 = getelementptr inbounds i16, i16* %93, i32 64
  store i16* %94, i16** %14, align 4
  br label %95

; <label>:95:                                     ; preds = %90
  %96 = load i32, i32* %12, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %12, align 4
  br label %67

; <label>:98:                                     ; preds = %67
  %99 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %100 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %99, i32 0, i32 59
  %101 = load i32, i32* %100, align 4
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %226

; <label>:103:                                    ; preds = %98
  %104 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %105 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %104, i32 0, i32 58
  %106 = load i32, i32* %105, align 4
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %15, align 4
  br label %108

; <label>:108:                                    ; preds = %222, %103
  %109 = load i32, i32* %15, align 4
  %110 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %111 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %110, i32 0, i32 57
  %112 = load i32, i32* %111, align 4
  %113 = icmp slt i32 %109, %112
  br i1 %113, label %114, label %225

; <label>:114:                                    ; preds = %108
  %115 = load i32, i32* %15, align 4
  %116 = sitofp i32 %115 to double
  %117 = fdiv double %116, 3.100000e+01
  store double %117, double* %20, align 8
  %118 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %119 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %118, i32 0, i32 53
  %120 = load float, float* %119, align 4
  %121 = fpext float %120 to double
  %122 = load double, double* %20, align 8
  %123 = fcmp olt double %121, %122
  br i1 %123, label %124, label %169

; <label>:124:                                    ; preds = %114
  %125 = load double, double* %20, align 8
  %126 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %127 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %126, i32 0, i32 54
  %128 = load float, float* %127, align 4
  %129 = fpext float %128 to double
  %130 = fcmp olt double %125, %129
  br i1 %130, label %131, label %169

; <label>:131:                                    ; preds = %124
  %132 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %133 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %132, i32 0, i32 53
  %134 = load float, float* %133, align 4
  %135 = fpext float %134 to double
  %136 = load double, double* %20, align 8
  %137 = fsub double %135, %136
  %138 = fmul double 0x3FF921FB54442D18, %137
  %139 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %140 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %139, i32 0, i32 54
  %141 = load float, float* %140, align 4
  %142 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %143 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %142, i32 0, i32 53
  %144 = load float, float* %143, align 4
  %145 = fsub float %141, %144
  %146 = fpext float %145 to double
  %147 = fdiv double %138, %146
  %148 = call arm_aapcscc double @cos(double %147) #7
  store double %148, double* %19, align 8
  store i32 0, i32* %12, align 4
  br label %149

; <label>:149:                                    ; preds = %165, %131
  %150 = load i32, i32* %12, align 4
  %151 = icmp slt i32 %150, 18
  br i1 %151, label %152, label %168

; <label>:152:                                    ; preds = %149
  %153 = load double, double* %19, align 8
  %154 = load i32, i32* %13, align 4
  %155 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %154
  %156 = load i32, i32* %11, align 4
  %157 = sub nsw i32 1, %156
  %158 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %155, i32 0, i32 %157
  %159 = load i32, i32* %12, align 4
  %160 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %158, i32 0, i32 %159
  %161 = load i32, i32* %15, align 4
  %162 = getelementptr inbounds [32 x double], [32 x double]* %160, i32 0, i32 %161
  %163 = load double, double* %162, align 8
  %164 = fmul double %163, %153
  store double %164, double* %162, align 8
  br label %165

; <label>:165:                                    ; preds = %152
  %166 = load i32, i32* %12, align 4
  %167 = add nsw i32 %166, 1
  store i32 %167, i32* %12, align 4
  br label %149

; <label>:168:                                    ; preds = %149
  br label %169

; <label>:169:                                    ; preds = %168, %124, %114
  %170 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %171 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %170, i32 0, i32 55
  %172 = load float, float* %171, align 4
  %173 = fpext float %172 to double
  %174 = load double, double* %20, align 8
  %175 = fcmp olt double %173, %174
  br i1 %175, label %176, label %221

; <label>:176:                                    ; preds = %169
  %177 = load double, double* %20, align 8
  %178 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %179 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %178, i32 0, i32 56
  %180 = load float, float* %179, align 4
  %181 = fpext float %180 to double
  %182 = fcmp olt double %177, %181
  br i1 %182, label %183, label %221

; <label>:183:                                    ; preds = %176
  %184 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %185 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %184, i32 0, i32 56
  %186 = load float, float* %185, align 4
  %187 = fpext float %186 to double
  %188 = load double, double* %20, align 8
  %189 = fsub double %187, %188
  %190 = fmul double 0x3FF921FB54442D18, %189
  %191 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %192 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %191, i32 0, i32 56
  %193 = load float, float* %192, align 4
  %194 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %195 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %194, i32 0, i32 55
  %196 = load float, float* %195, align 4
  %197 = fsub float %193, %196
  %198 = fpext float %197 to double
  %199 = fdiv double %190, %198
  %200 = call arm_aapcscc double @cos(double %199) #7
  store double %200, double* %19, align 8
  store i32 0, i32* %12, align 4
  br label %201

; <label>:201:                                    ; preds = %217, %183
  %202 = load i32, i32* %12, align 4
  %203 = icmp slt i32 %202, 18
  br i1 %203, label %204, label %220

; <label>:204:                                    ; preds = %201
  %205 = load double, double* %19, align 8
  %206 = load i32, i32* %13, align 4
  %207 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %206
  %208 = load i32, i32* %11, align 4
  %209 = sub nsw i32 1, %208
  %210 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %207, i32 0, i32 %209
  %211 = load i32, i32* %12, align 4
  %212 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %210, i32 0, i32 %211
  %213 = load i32, i32* %15, align 4
  %214 = getelementptr inbounds [32 x double], [32 x double]* %212, i32 0, i32 %213
  %215 = load double, double* %214, align 8
  %216 = fmul double %215, %205
  store double %216, double* %214, align 8
  br label %217

; <label>:217:                                    ; preds = %204
  %218 = load i32, i32* %12, align 4
  %219 = add nsw i32 %218, 1
  store i32 %219, i32* %12, align 4
  br label %201

; <label>:220:                                    ; preds = %201
  br label %221

; <label>:221:                                    ; preds = %220, %176, %169
  br label %222

; <label>:222:                                    ; preds = %221
  %223 = load i32, i32* %15, align 4
  %224 = add nsw i32 %223, 1
  store i32 %224, i32* %15, align 4
  br label %108

; <label>:225:                                    ; preds = %108
  br label %226

; <label>:226:                                    ; preds = %225, %98
  store i32 0, i32* %15, align 4
  br label %227

; <label>:227:                                    ; preds = %570, %226
  %228 = load i32, i32* %15, align 4
  %229 = icmp slt i32 %228, 32
  br i1 %229, label %230, label %575

; <label>:230:                                    ; preds = %227
  %231 = load %struct.gr_info*, %struct.gr_info** %17, align 4
  %232 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %231, i32 0, i32 6
  %233 = load i32, i32* %232, align 4
  store i32 %233, i32* %21, align 4
  %234 = load i32, i32* %15, align 4
  %235 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %236 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %235, i32 0, i32 57
  %237 = load i32, i32* %236, align 4
  %238 = icmp sge i32 %234, %237
  br i1 %238, label %245, label %239

; <label>:239:                                    ; preds = %230
  %240 = load i32, i32* %15, align 4
  %241 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %242 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %241, i32 0, i32 58
  %243 = load i32, i32* %242, align 4
  %244 = icmp sle i32 %240, %243
  br i1 %244, label %245, label %248

; <label>:245:                                    ; preds = %239, %230
  %246 = load double*, double** %16, align 4
  %247 = bitcast double* %246 to i8*
  call void @llvm.memset.p0i8.i32(i8* %247, i8 0, i32 144, i32 1, i1 false)
  br label %508

; <label>:248:                                    ; preds = %239
  %249 = load i32, i32* %21, align 4
  %250 = icmp eq i32 %249, 2
  br i1 %250, label %251, label %423

; <label>:251:                                    ; preds = %248
  store i32 2, i32* %12, align 4
  br label %252

; <label>:252:                                    ; preds = %418, %251
  %253 = load i32, i32* %12, align 4
  %254 = icmp sge i32 %253, 0
  br i1 %254, label %255, label %421

; <label>:255:                                    ; preds = %252
  %256 = load i32, i32* %12, align 4
  %257 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2), i32 0, i32 %256
  %258 = load double, double* %257, align 8
  store double %258, double* %22, align 8
  %259 = load i32, i32* %13, align 4
  %260 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %259
  %261 = load i32, i32* %11, align 4
  %262 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %260, i32 0, i32 %261
  %263 = load i32, i32* %12, align 4
  %264 = add nsw i32 %263, 6
  %265 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %262, i32 0, i32 %264
  %266 = load i32, i32* %15, align 4
  %267 = getelementptr inbounds [32 x double], [32 x double]* %265, i32 0, i32 %266
  %268 = load double, double* %267, align 8
  %269 = load double, double* %22, align 8
  %270 = fmul double %268, %269
  %271 = load i32, i32* %13, align 4
  %272 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %271
  %273 = load i32, i32* %11, align 4
  %274 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %272, i32 0, i32 %273
  %275 = load i32, i32* %12, align 4
  %276 = sub nsw i32 11, %275
  %277 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %274, i32 0, i32 %276
  %278 = load i32, i32* %15, align 4
  %279 = getelementptr inbounds [32 x double], [32 x double]* %277, i32 0, i32 %278
  %280 = load double, double* %279, align 8
  %281 = fsub double %270, %280
  %282 = load i32, i32* %12, align 4
  %283 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4), i32 %282
  store double %281, double* %283, align 8
  %284 = load i32, i32* %13, align 4
  %285 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %284
  %286 = load i32, i32* %11, align 4
  %287 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %285, i32 0, i32 %286
  %288 = load i32, i32* %12, align 4
  %289 = add nsw i32 %288, 12
  %290 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %287, i32 0, i32 %289
  %291 = load i32, i32* %15, align 4
  %292 = getelementptr inbounds [32 x double], [32 x double]* %290, i32 0, i32 %291
  %293 = load double, double* %292, align 8
  %294 = load i32, i32* %13, align 4
  %295 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %294
  %296 = load i32, i32* %11, align 4
  %297 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %295, i32 0, i32 %296
  %298 = load i32, i32* %12, align 4
  %299 = sub nsw i32 17, %298
  %300 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %297, i32 0, i32 %299
  %301 = load i32, i32* %15, align 4
  %302 = getelementptr inbounds [32 x double], [32 x double]* %300, i32 0, i32 %301
  %303 = load double, double* %302, align 8
  %304 = load double, double* %22, align 8
  %305 = fmul double %303, %304
  %306 = fadd double %293, %305
  %307 = load i32, i32* %12, align 4
  %308 = add nsw i32 %307, 3
  %309 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4), i32 %308
  store double %306, double* %309, align 8
  %310 = load i32, i32* %13, align 4
  %311 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %310
  %312 = load i32, i32* %11, align 4
  %313 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %311, i32 0, i32 %312
  %314 = load i32, i32* %12, align 4
  %315 = add nsw i32 %314, 12
  %316 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %313, i32 0, i32 %315
  %317 = load i32, i32* %15, align 4
  %318 = getelementptr inbounds [32 x double], [32 x double]* %316, i32 0, i32 %317
  %319 = load double, double* %318, align 8
  %320 = load double, double* %22, align 8
  %321 = fmul double %319, %320
  %322 = load i32, i32* %13, align 4
  %323 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %322
  %324 = load i32, i32* %11, align 4
  %325 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %323, i32 0, i32 %324
  %326 = load i32, i32* %12, align 4
  %327 = sub nsw i32 17, %326
  %328 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %325, i32 0, i32 %327
  %329 = load i32, i32* %15, align 4
  %330 = getelementptr inbounds [32 x double], [32 x double]* %328, i32 0, i32 %329
  %331 = load double, double* %330, align 8
  %332 = fsub double %321, %331
  %333 = load i32, i32* %12, align 4
  %334 = add nsw i32 %333, 6
  %335 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4), i32 %334
  store double %332, double* %335, align 8
  %336 = load i32, i32* %13, align 4
  %337 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %336
  %338 = load i32, i32* %11, align 4
  %339 = sub nsw i32 1, %338
  %340 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %337, i32 0, i32 %339
  %341 = load i32, i32* %12, align 4
  %342 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %340, i32 0, i32 %341
  %343 = load i32, i32* %15, align 4
  %344 = getelementptr inbounds [32 x double], [32 x double]* %342, i32 0, i32 %343
  %345 = load double, double* %344, align 8
  %346 = load i32, i32* %13, align 4
  %347 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %346
  %348 = load i32, i32* %11, align 4
  %349 = sub nsw i32 1, %348
  %350 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %347, i32 0, i32 %349
  %351 = load i32, i32* %12, align 4
  %352 = sub nsw i32 5, %351
  %353 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %350, i32 0, i32 %352
  %354 = load i32, i32* %15, align 4
  %355 = getelementptr inbounds [32 x double], [32 x double]* %353, i32 0, i32 %354
  %356 = load double, double* %355, align 8
  %357 = load double, double* %22, align 8
  %358 = fmul double %356, %357
  %359 = fadd double %345, %358
  %360 = load i32, i32* %12, align 4
  %361 = add nsw i32 %360, 9
  %362 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4), i32 %361
  store double %359, double* %362, align 8
  %363 = load i32, i32* %13, align 4
  %364 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %363
  %365 = load i32, i32* %11, align 4
  %366 = sub nsw i32 1, %365
  %367 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %364, i32 0, i32 %366
  %368 = load i32, i32* %12, align 4
  %369 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %367, i32 0, i32 %368
  %370 = load i32, i32* %15, align 4
  %371 = getelementptr inbounds [32 x double], [32 x double]* %369, i32 0, i32 %370
  %372 = load double, double* %371, align 8
  %373 = load double, double* %22, align 8
  %374 = fmul double %372, %373
  %375 = load i32, i32* %13, align 4
  %376 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %375
  %377 = load i32, i32* %11, align 4
  %378 = sub nsw i32 1, %377
  %379 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %376, i32 0, i32 %378
  %380 = load i32, i32* %12, align 4
  %381 = sub nsw i32 5, %380
  %382 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %379, i32 0, i32 %381
  %383 = load i32, i32* %15, align 4
  %384 = getelementptr inbounds [32 x double], [32 x double]* %382, i32 0, i32 %383
  %385 = load double, double* %384, align 8
  %386 = fsub double %374, %385
  %387 = load i32, i32* %12, align 4
  %388 = add nsw i32 %387, 12
  %389 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4), i32 %388
  store double %386, double* %389, align 8
  %390 = load i32, i32* %13, align 4
  %391 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %390
  %392 = load i32, i32* %11, align 4
  %393 = sub nsw i32 1, %392
  %394 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %391, i32 0, i32 %393
  %395 = load i32, i32* %12, align 4
  %396 = add nsw i32 %395, 6
  %397 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %394, i32 0, i32 %396
  %398 = load i32, i32* %15, align 4
  %399 = getelementptr inbounds [32 x double], [32 x double]* %397, i32 0, i32 %398
  %400 = load double, double* %399, align 8
  %401 = load i32, i32* %13, align 4
  %402 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %401
  %403 = load i32, i32* %11, align 4
  %404 = sub nsw i32 1, %403
  %405 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %402, i32 0, i32 %404
  %406 = load i32, i32* %12, align 4
  %407 = sub nsw i32 11, %406
  %408 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %405, i32 0, i32 %407
  %409 = load i32, i32* %15, align 4
  %410 = getelementptr inbounds [32 x double], [32 x double]* %408, i32 0, i32 %409
  %411 = load double, double* %410, align 8
  %412 = load double, double* %22, align 8
  %413 = fmul double %411, %412
  %414 = fadd double %400, %413
  %415 = load i32, i32* %12, align 4
  %416 = add nsw i32 %415, 15
  %417 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4), i32 %416
  store double %414, double* %417, align 8
  br label %418

; <label>:418:                                    ; preds = %255
  %419 = load i32, i32* %12, align 4
  %420 = add nsw i32 %419, -1
  store i32 %420, i32* %12, align 4
  br label %252

; <label>:421:                                    ; preds = %252
  %422 = load double*, double** %16, align 4
  call arm_aapcscc void @mdct_short(double* %422, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4))
  br label %507

; <label>:423:                                    ; preds = %248
  store i32 8, i32* %12, align 4
  br label %424

; <label>:424:                                    ; preds = %502, %423
  %425 = load i32, i32* %12, align 4
  %426 = icmp sge i32 %425, 0
  br i1 %426, label %427, label %505

; <label>:427:                                    ; preds = %424
  %428 = load i32, i32* %21, align 4
  %429 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 %428
  %430 = load i32, i32* %12, align 4
  %431 = getelementptr inbounds [36 x double], [36 x double]* %429, i32 0, i32 %430
  %432 = load double, double* %431, align 8
  %433 = load i32, i32* %13, align 4
  %434 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %433
  %435 = load i32, i32* %11, align 4
  %436 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %434, i32 0, i32 %435
  %437 = load i32, i32* %12, align 4
  %438 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %436, i32 0, i32 %437
  %439 = load i32, i32* %15, align 4
  %440 = getelementptr inbounds [32 x double], [32 x double]* %438, i32 0, i32 %439
  %441 = load double, double* %440, align 8
  %442 = fmul double %432, %441
  %443 = load i32, i32* %21, align 4
  %444 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 %443
  %445 = load i32, i32* %12, align 4
  %446 = add nsw i32 %445, 9
  %447 = getelementptr inbounds [36 x double], [36 x double]* %444, i32 0, i32 %446
  %448 = load double, double* %447, align 8
  %449 = load i32, i32* %13, align 4
  %450 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %449
  %451 = load i32, i32* %11, align 4
  %452 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %450, i32 0, i32 %451
  %453 = load i32, i32* %12, align 4
  %454 = sub nsw i32 17, %453
  %455 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %452, i32 0, i32 %454
  %456 = load i32, i32* %15, align 4
  %457 = getelementptr inbounds [32 x double], [32 x double]* %455, i32 0, i32 %456
  %458 = load double, double* %457, align 8
  %459 = fmul double %448, %458
  %460 = fsub double %442, %459
  %461 = load i32, i32* %12, align 4
  %462 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4), i32 %461
  store double %460, double* %462, align 8
  %463 = load i32, i32* %21, align 4
  %464 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 %463
  %465 = load i32, i32* %12, align 4
  %466 = add nsw i32 %465, 18
  %467 = getelementptr inbounds [36 x double], [36 x double]* %464, i32 0, i32 %466
  %468 = load double, double* %467, align 8
  %469 = load i32, i32* %13, align 4
  %470 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %469
  %471 = load i32, i32* %11, align 4
  %472 = sub nsw i32 1, %471
  %473 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %470, i32 0, i32 %472
  %474 = load i32, i32* %12, align 4
  %475 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %473, i32 0, i32 %474
  %476 = load i32, i32* %15, align 4
  %477 = getelementptr inbounds [32 x double], [32 x double]* %475, i32 0, i32 %476
  %478 = load double, double* %477, align 8
  %479 = fmul double %468, %478
  %480 = load i32, i32* %21, align 4
  %481 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 %480
  %482 = load i32, i32* %12, align 4
  %483 = add nsw i32 %482, 27
  %484 = getelementptr inbounds [36 x double], [36 x double]* %481, i32 0, i32 %483
  %485 = load double, double* %484, align 8
  %486 = load i32, i32* %13, align 4
  %487 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %486
  %488 = load i32, i32* %11, align 4
  %489 = sub nsw i32 1, %488
  %490 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %487, i32 0, i32 %489
  %491 = load i32, i32* %12, align 4
  %492 = sub nsw i32 17, %491
  %493 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %490, i32 0, i32 %492
  %494 = load i32, i32* %15, align 4
  %495 = getelementptr inbounds [32 x double], [32 x double]* %493, i32 0, i32 %494
  %496 = load double, double* %495, align 8
  %497 = fmul double %485, %496
  %498 = fadd double %479, %497
  %499 = load i32, i32* %12, align 4
  %500 = add nsw i32 9, %499
  %501 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4), i32 %500
  store double %498, double* %501, align 8
  br label %502

; <label>:502:                                    ; preds = %427
  %503 = load i32, i32* %12, align 4
  %504 = add nsw i32 %503, -1
  store i32 %504, i32* %12, align 4
  br label %424

; <label>:505:                                    ; preds = %424
  %506 = load double*, double** %16, align 4
  call arm_aapcscc void @mdct_long(double* %506, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2, i32 4))
  br label %507

; <label>:507:                                    ; preds = %505, %421
  br label %508

; <label>:508:                                    ; preds = %507, %245
  %509 = load i32, i32* %21, align 4
  %510 = icmp ne i32 %509, 2
  br i1 %510, label %511, label %569

; <label>:511:                                    ; preds = %508
  %512 = load i32, i32* %15, align 4
  %513 = icmp eq i32 %512, 0
  br i1 %513, label %514, label %515

; <label>:514:                                    ; preds = %511
  br label %570

; <label>:515:                                    ; preds = %511
  store i32 7, i32* %12, align 4
  br label %516

; <label>:516:                                    ; preds = %565, %515
  %517 = load i32, i32* %12, align 4
  %518 = icmp sge i32 %517, 0
  br i1 %518, label %519, label %568

; <label>:519:                                    ; preds = %516
  %520 = load double*, double** %16, align 4
  %521 = load i32, i32* %12, align 4
  %522 = getelementptr inbounds double, double* %520, i32 %521
  %523 = load double, double* %522, align 8
  %524 = load i32, i32* %12, align 4
  %525 = getelementptr inbounds [8 x double], [8 x double]* @ca, i32 0, i32 %524
  %526 = load double, double* %525, align 8
  %527 = fmul double %523, %526
  %528 = load double*, double** %16, align 4
  %529 = load i32, i32* %12, align 4
  %530 = sub nsw i32 -1, %529
  %531 = getelementptr inbounds double, double* %528, i32 %530
  %532 = load double, double* %531, align 8
  %533 = load i32, i32* %12, align 4
  %534 = getelementptr inbounds [8 x double], [8 x double]* @cs, i32 0, i32 %533
  %535 = load double, double* %534, align 8
  %536 = fmul double %532, %535
  %537 = fadd double %527, %536
  store double %537, double* %23, align 8
  %538 = load double*, double** %16, align 4
  %539 = load i32, i32* %12, align 4
  %540 = getelementptr inbounds double, double* %538, i32 %539
  %541 = load double, double* %540, align 8
  %542 = load i32, i32* %12, align 4
  %543 = getelementptr inbounds [8 x double], [8 x double]* @cs, i32 0, i32 %542
  %544 = load double, double* %543, align 8
  %545 = fmul double %541, %544
  %546 = load double*, double** %16, align 4
  %547 = load i32, i32* %12, align 4
  %548 = sub nsw i32 -1, %547
  %549 = getelementptr inbounds double, double* %546, i32 %548
  %550 = load double, double* %549, align 8
  %551 = load i32, i32* %12, align 4
  %552 = getelementptr inbounds [8 x double], [8 x double]* @ca, i32 0, i32 %551
  %553 = load double, double* %552, align 8
  %554 = fmul double %550, %553
  %555 = fsub double %545, %554
  store double %555, double* %24, align 8
  %556 = load double, double* %23, align 8
  %557 = load double*, double** %16, align 4
  %558 = load i32, i32* %12, align 4
  %559 = sub nsw i32 -1, %558
  %560 = getelementptr inbounds double, double* %557, i32 %559
  store double %556, double* %560, align 8
  %561 = load double, double* %24, align 8
  %562 = load double*, double** %16, align 4
  %563 = load i32, i32* %12, align 4
  %564 = getelementptr inbounds double, double* %562, i32 %563
  store double %561, double* %564, align 8
  br label %565

; <label>:565:                                    ; preds = %519
  %566 = load i32, i32* %12, align 4
  %567 = add nsw i32 %566, -1
  store i32 %567, i32* %12, align 4
  br label %516

; <label>:568:                                    ; preds = %516
  br label %569

; <label>:569:                                    ; preds = %568, %508
  br label %570

; <label>:570:                                    ; preds = %569, %514
  %571 = load i32, i32* %15, align 4
  %572 = add nsw i32 %571, 1
  store i32 %572, i32* %15, align 4
  %573 = load double*, double** %16, align 4
  %574 = getelementptr inbounds double, double* %573, i32 18
  store double* %574, double** %16, align 4
  br label %227

; <label>:575:                                    ; preds = %227
  br label %576

; <label>:576:                                    ; preds = %575
  %577 = load i32, i32* %11, align 4
  %578 = add nsw i32 %577, 1
  store i32 %578, i32* %11, align 4
  br label %39

; <label>:579:                                    ; preds = %39
  %580 = load i16*, i16** %8, align 4
  store i16* %580, i16** %14, align 4
  %581 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %582 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %581, i32 0, i32 45
  %583 = load i32, i32* %582, align 4
  %584 = icmp eq i32 %583, 1
  br i1 %584, label %585, label %596

; <label>:585:                                    ; preds = %579
  %586 = load i32, i32* %13, align 4
  %587 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %586
  %588 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %587, i32 0, i32 0
  %589 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %588, i32 0, i32 0
  %590 = bitcast [32 x double]* %589 to i8*
  %591 = load i32, i32* %13, align 4
  %592 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i32 0, i32 %591
  %593 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* %592, i32 0, i32 1
  %594 = getelementptr inbounds [18 x [32 x double]], [18 x [32 x double]]* %593, i32 0, i32 0
  %595 = bitcast [32 x double]* %594 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %590, i8* %595, i32 4608, i32 8, i1 false)
  br label %596

; <label>:596:                                    ; preds = %585, %579
  br label %597

; <label>:597:                                    ; preds = %596
  %598 = load i32, i32* %13, align 4
  %599 = add nsw i32 %598, 1
  store i32 %599, i32* %13, align 4
  br label %32

; <label>:600:                                    ; preds = %32
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @mdct_init48() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double*, align 4
  %7 = alloca i32, align 4
  %8 = alloca double*, align 4
  %9 = alloca double*, align 4
  %10 = alloca [31 x double], align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  store i32 0, i32* %2, align 4
  br label %15

; <label>:15:                                     ; preds = %40, %0
  %16 = load i32, i32* %2, align 4
  %17 = icmp slt i32 %16, 8
  br i1 %17, label %18, label %43

; <label>:18:                                     ; preds = %15
  %19 = load i32, i32* %2, align 4
  %20 = getelementptr inbounds [8 x double], [8 x double]* @mdct_init48.c, i32 0, i32 %19
  %21 = load double, double* %20, align 8
  %22 = load i32, i32* %2, align 4
  %23 = getelementptr inbounds [8 x double], [8 x double]* @mdct_init48.c, i32 0, i32 %22
  %24 = load double, double* %23, align 8
  %25 = fmul double %21, %24
  %26 = fadd double 1.000000e+00, %25
  store double %26, double* %4, align 8
  %27 = load double, double* %4, align 8
  %28 = call arm_aapcscc double @sqrt(double %27) #7
  store double %28, double* %4, align 8
  %29 = load i32, i32* %2, align 4
  %30 = getelementptr inbounds [8 x double], [8 x double]* @mdct_init48.c, i32 0, i32 %29
  %31 = load double, double* %30, align 8
  %32 = load double, double* %4, align 8
  %33 = fdiv double %31, %32
  %34 = load i32, i32* %2, align 4
  %35 = getelementptr inbounds [8 x double], [8 x double]* @ca, i32 0, i32 %34
  store double %33, double* %35, align 8
  %36 = load double, double* %4, align 8
  %37 = fdiv double 1.000000e+00, %36
  %38 = load i32, i32* %2, align 4
  %39 = getelementptr inbounds [8 x double], [8 x double]* @cs, i32 0, i32 %38
  store double %37, double* %39, align 8
  br label %40

; <label>:40:                                     ; preds = %18
  %41 = load i32, i32* %2, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %2, align 4
  br label %15

; <label>:43:                                     ; preds = %15
  store i32 0, i32* %1, align 4
  br label %44

; <label>:44:                                     ; preds = %55, %43
  %45 = load i32, i32* %1, align 4
  %46 = icmp slt i32 %45, 36
  br i1 %46, label %47, label %58

; <label>:47:                                     ; preds = %44
  %48 = load i32, i32* %1, align 4
  %49 = sitofp i32 %48 to double
  %50 = fadd double %49, 5.000000e-01
  %51 = fmul double 0x3FB657184AE74487, %50
  %52 = call arm_aapcscc double @sin(double %51) #7
  %53 = load i32, i32* %1, align 4
  %54 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %53
  store double %52, double* %54, align 8
  br label %55

; <label>:55:                                     ; preds = %47
  %56 = load i32, i32* %1, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %1, align 4
  br label %44

; <label>:58:                                     ; preds = %44
  store i32 0, i32* %1, align 4
  br label %59

; <label>:59:                                     ; preds = %68, %58
  %60 = load i32, i32* %1, align 4
  %61 = icmp slt i32 %60, 18
  br i1 %61, label %62, label %71

; <label>:62:                                     ; preds = %59
  %63 = load i32, i32* %1, align 4
  %64 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %63
  %65 = load double, double* %64, align 8
  %66 = load i32, i32* %1, align 4
  %67 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %66
  store double %65, double* %67, align 8
  br label %68

; <label>:68:                                     ; preds = %62
  %69 = load i32, i32* %1, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %1, align 4
  br label %59

; <label>:71:                                     ; preds = %59
  br label %72

; <label>:72:                                     ; preds = %78, %71
  %73 = load i32, i32* %1, align 4
  %74 = icmp slt i32 %73, 24
  br i1 %74, label %75, label %81

; <label>:75:                                     ; preds = %72
  %76 = load i32, i32* %1, align 4
  %77 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %76
  store double 1.000000e+00, double* %77, align 8
  br label %78

; <label>:78:                                     ; preds = %75
  %79 = load i32, i32* %1, align 4
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %1, align 4
  br label %72

; <label>:81:                                     ; preds = %72
  br label %82

; <label>:82:                                     ; preds = %93, %81
  %83 = load i32, i32* %1, align 4
  %84 = icmp slt i32 %83, 30
  br i1 %84, label %85, label %96

; <label>:85:                                     ; preds = %82
  %86 = load i32, i32* %1, align 4
  %87 = sitofp i32 %86 to double
  %88 = fadd double %87, 5.000000e-01
  %89 = fmul double 0x3FD0C152382D7365, %88
  %90 = call arm_aapcscc double @cos(double %89) #7
  %91 = load i32, i32* %1, align 4
  %92 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %91
  store double %90, double* %92, align 8
  br label %93

; <label>:93:                                     ; preds = %85
  %94 = load i32, i32* %1, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %1, align 4
  br label %82

; <label>:96:                                     ; preds = %82
  br label %97

; <label>:97:                                     ; preds = %103, %96
  %98 = load i32, i32* %1, align 4
  %99 = icmp slt i32 %98, 36
  br i1 %99, label %100, label %106

; <label>:100:                                    ; preds = %97
  %101 = load i32, i32* %1, align 4
  %102 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %101
  store double 0.000000e+00, double* %102, align 8
  br label %103

; <label>:103:                                    ; preds = %100
  %104 = load i32, i32* %1, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %1, align 4
  br label %97

; <label>:106:                                    ; preds = %97
  store i32 0, i32* %1, align 4
  br label %107

; <label>:107:                                    ; preds = %117, %106
  %108 = load i32, i32* %1, align 4
  %109 = icmp slt i32 %108, 36
  br i1 %109, label %110, label %120

; <label>:110:                                    ; preds = %107
  %111 = load i32, i32* %1, align 4
  %112 = sub nsw i32 35, %111
  %113 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %112
  %114 = load double, double* %113, align 8
  %115 = load i32, i32* %1, align 4
  %116 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %115
  store double %114, double* %116, align 8
  br label %117

; <label>:117:                                    ; preds = %110
  %118 = load i32, i32* %1, align 4
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %1, align 4
  br label %107

; <label>:120:                                    ; preds = %107
  store double 0x3FBC71C71C71C71C, double* %4, align 8
  store double* getelementptr inbounds ([244 x double], [244 x double]* @cos_l, i32 0, i32 0), double** %6, align 4
  store i32 11, i32* %7, align 4
  br label %121

; <label>:121:                                    ; preds = %173, %120
  %122 = load i32, i32* %7, align 4
  %123 = getelementptr inbounds [12 x i32], [12 x i32]* @all, i32 0, i32 %122
  %124 = load i32, i32* %123, align 4
  store i32 %124, i32* %3, align 4
  store i32 0, i32* %2, align 4
  br label %125

; <label>:125:                                    ; preds = %145, %121
  %126 = load i32, i32* %2, align 4
  %127 = icmp slt i32 %126, 9
  br i1 %127, label %128, label %148

; <label>:128:                                    ; preds = %125
  %129 = load double, double* %4, align 8
  %130 = load i32, i32* %3, align 4
  %131 = mul nsw i32 2, %130
  %132 = add nsw i32 %131, 1
  %133 = sitofp i32 %132 to double
  %134 = fmul double 0x3F9657184AE74487, %133
  %135 = load i32, i32* %2, align 4
  %136 = mul nsw i32 4, %135
  %137 = add nsw i32 %136, 2
  %138 = add nsw i32 %137, 36
  %139 = sitofp i32 %138 to double
  %140 = fmul double %134, %139
  %141 = call arm_aapcscc double @cos(double %140) #7
  %142 = fmul double %129, %141
  %143 = load double*, double** %6, align 4
  %144 = getelementptr inbounds double, double* %143, i32 1
  store double* %144, double** %6, align 4
  store double %142, double* %143, align 8
  br label %145

; <label>:145:                                    ; preds = %128
  %146 = load i32, i32* %2, align 4
  %147 = add nsw i32 %146, 1
  store i32 %147, i32* %2, align 4
  br label %125

; <label>:148:                                    ; preds = %125
  store i32 0, i32* %2, align 4
  br label %149

; <label>:149:                                    ; preds = %169, %148
  %150 = load i32, i32* %2, align 4
  %151 = icmp slt i32 %150, 9
  br i1 %151, label %152, label %172

; <label>:152:                                    ; preds = %149
  %153 = load double, double* %4, align 8
  %154 = load i32, i32* %3, align 4
  %155 = mul nsw i32 2, %154
  %156 = add nsw i32 %155, 1
  %157 = sitofp i32 %156 to double
  %158 = fmul double 0x3F9657184AE74487, %157
  %159 = load i32, i32* %2, align 4
  %160 = mul nsw i32 4, %159
  %161 = add nsw i32 %160, 2
  %162 = add nsw i32 %161, 108
  %163 = sitofp i32 %162 to double
  %164 = fmul double %158, %163
  %165 = call arm_aapcscc double @cos(double %164) #7
  %166 = fmul double %153, %165
  %167 = load double*, double** %6, align 4
  %168 = getelementptr inbounds double, double* %167, i32 1
  store double* %168, double** %6, align 4
  store double %166, double* %167, align 8
  br label %169

; <label>:169:                                    ; preds = %152
  %170 = load i32, i32* %2, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %2, align 4
  br label %149

; <label>:172:                                    ; preds = %149
  br label %173

; <label>:173:                                    ; preds = %172
  %174 = load i32, i32* %7, align 4
  %175 = add nsw i32 %174, -1
  store i32 %175, i32* %7, align 4
  %176 = icmp sge i32 %175, 0
  br i1 %176, label %121, label %177

; <label>:177:                                    ; preds = %173
  store i32 3, i32* %7, align 4
  br label %178

; <label>:178:                                    ; preds = %230, %177
  %179 = load i32, i32* %7, align 4
  %180 = getelementptr inbounds [4 x i32], [4 x i32]* @mdct_init48.d3, i32 0, i32 %179
  %181 = load i32, i32* %180, align 4
  store i32 %181, i32* %3, align 4
  store i32 0, i32* %2, align 4
  br label %182

; <label>:182:                                    ; preds = %202, %178
  %183 = load i32, i32* %2, align 4
  %184 = icmp slt i32 %183, 3
  br i1 %184, label %185, label %205

; <label>:185:                                    ; preds = %182
  %186 = load double, double* %4, align 8
  %187 = load i32, i32* %3, align 4
  %188 = mul nsw i32 2, %187
  %189 = add nsw i32 %188, 1
  %190 = sitofp i32 %189 to double
  %191 = fmul double 0x3F9657184AE74487, %190
  %192 = load i32, i32* %2, align 4
  %193 = mul nsw i32 4, %192
  %194 = add nsw i32 %193, 2
  %195 = add nsw i32 %194, 36
  %196 = sitofp i32 %195 to double
  %197 = fmul double %191, %196
  %198 = call arm_aapcscc double @cos(double %197) #7
  %199 = fmul double %186, %198
  %200 = load double*, double** %6, align 4
  %201 = getelementptr inbounds double, double* %200, i32 1
  store double* %201, double** %6, align 4
  store double %199, double* %200, align 8
  br label %202

; <label>:202:                                    ; preds = %185
  %203 = load i32, i32* %2, align 4
  %204 = add nsw i32 %203, 1
  store i32 %204, i32* %2, align 4
  br label %182

; <label>:205:                                    ; preds = %182
  store i32 6, i32* %2, align 4
  br label %206

; <label>:206:                                    ; preds = %226, %205
  %207 = load i32, i32* %2, align 4
  %208 = icmp slt i32 %207, 9
  br i1 %208, label %209, label %229

; <label>:209:                                    ; preds = %206
  %210 = load double, double* %4, align 8
  %211 = load i32, i32* %3, align 4
  %212 = mul nsw i32 2, %211
  %213 = add nsw i32 %212, 1
  %214 = sitofp i32 %213 to double
  %215 = fmul double 0x3F9657184AE74487, %214
  %216 = load i32, i32* %2, align 4
  %217 = mul nsw i32 4, %216
  %218 = add nsw i32 %217, 2
  %219 = add nsw i32 %218, 36
  %220 = sitofp i32 %219 to double
  %221 = fmul double %215, %220
  %222 = call arm_aapcscc double @cos(double %221) #7
  %223 = fmul double %210, %222
  %224 = load double*, double** %6, align 4
  %225 = getelementptr inbounds double, double* %224, i32 1
  store double* %225, double** %6, align 4
  store double %223, double* %224, align 8
  br label %226

; <label>:226:                                    ; preds = %209
  %227 = load i32, i32* %2, align 4
  %228 = add nsw i32 %227, 1
  store i32 %228, i32* %2, align 4
  br label %206

; <label>:229:                                    ; preds = %206
  br label %230

; <label>:230:                                    ; preds = %229
  %231 = load i32, i32* %7, align 4
  %232 = add nsw i32 %231, -1
  store i32 %232, i32* %7, align 4
  %233 = icmp sge i32 %232, 0
  br i1 %233, label %178, label %234

; <label>:234:                                    ; preds = %230
  store i32 1, i32* %7, align 4
  br label %235

; <label>:235:                                    ; preds = %261, %234
  %236 = load i32, i32* %7, align 4
  %237 = getelementptr inbounds [2 x i32], [2 x i32]* @mdct_init48.d9, i32 0, i32 %236
  %238 = load i32, i32* %237, align 4
  store i32 %238, i32* %3, align 4
  %239 = load double, double* %4, align 8
  %240 = load i32, i32* %3, align 4
  %241 = mul nsw i32 2, %240
  %242 = add nsw i32 %241, 1
  %243 = sitofp i32 %242 to double
  %244 = fmul double 0x3F9657184AE74487, %243
  %245 = fmul double %244, 3.800000e+01
  %246 = call arm_aapcscc double @cos(double %245) #7
  %247 = fmul double %239, %246
  %248 = load double*, double** %6, align 4
  %249 = getelementptr inbounds double, double* %248, i32 1
  store double* %249, double** %6, align 4
  store double %247, double* %248, align 8
  %250 = load double, double* %4, align 8
  %251 = load i32, i32* %3, align 4
  %252 = mul nsw i32 2, %251
  %253 = add nsw i32 %252, 1
  %254 = sitofp i32 %253 to double
  %255 = fmul double 0x3F9657184AE74487, %254
  %256 = fmul double %255, 4.600000e+01
  %257 = call arm_aapcscc double @cos(double %256) #7
  %258 = fmul double %250, %257
  %259 = load double*, double** %6, align 4
  %260 = getelementptr inbounds double, double* %259, i32 1
  store double* %260, double** %6, align 4
  store double %258, double* %259, align 8
  br label %261

; <label>:261:                                    ; preds = %235
  %262 = load i32, i32* %7, align 4
  %263 = add nsw i32 %262, -1
  store i32 %263, i32* %7, align 4
  %264 = icmp sge i32 %263, 0
  br i1 %264, label %235, label %265

; <label>:265:                                    ; preds = %261
  %266 = load double, double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i32 0, i32 248), align 8
  store double %266, double* %5, align 8
  store double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i32 0, i32 0), double** %8, align 4
  store double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i32 0, i32 0), double** %9, align 4
  %267 = load double*, double** %8, align 4
  %268 = getelementptr inbounds double, double* %267, i32 1
  store double* %268, double** %8, align 4
  %269 = load double, double* %267, align 8
  store double %269, double* %11, align 8
  %270 = load double, double* %11, align 8
  %271 = load double, double* %5, align 8
  %272 = fdiv double %270, %271
  %273 = getelementptr inbounds [31 x double], [31 x double]* %10, i32 0, i32 15
  store double %272, double* %273, align 8
  store i32 0, i32* %2, align 4
  br label %274

; <label>:274:                                    ; preds = %285, %265
  %275 = load i32, i32* %2, align 4
  %276 = icmp slt i32 %275, 7
  br i1 %276, label %277, label %288

; <label>:277:                                    ; preds = %274
  %278 = load double*, double** %8, align 4
  %279 = getelementptr inbounds double, double* %278, i32 1
  store double* %279, double** %8, align 4
  %280 = load double, double* %278, align 8
  %281 = load double, double* %11, align 8
  %282 = fdiv double %280, %281
  %283 = load double*, double** %9, align 4
  %284 = getelementptr inbounds double, double* %283, i32 1
  store double* %284, double** %9, align 4
  store double %282, double* %283, align 8
  br label %285

; <label>:285:                                    ; preds = %277
  %286 = load i32, i32* %2, align 4
  %287 = add nsw i32 %286, 1
  store i32 %287, i32* %2, align 4
  br label %274

; <label>:288:                                    ; preds = %274
  store i32 14, i32* %1, align 4
  br label %289

; <label>:289:                                    ; preds = %319, %288
  %290 = load i32, i32* %1, align 4
  %291 = icmp sge i32 %290, 0
  br i1 %291, label %292, label %322

; <label>:292:                                    ; preds = %289
  %293 = load double*, double** %8, align 4
  %294 = getelementptr inbounds double, double* %293, i32 1
  store double* %294, double** %8, align 4
  %295 = load double, double* %293, align 8
  store double %295, double* %12, align 8
  %296 = load double, double* %12, align 8
  %297 = load double, double* %5, align 8
  %298 = fdiv double %296, %297
  %299 = load i32, i32* %1, align 4
  %300 = sub nsw i32 30, %299
  %301 = getelementptr inbounds [31 x double], [31 x double]* %10, i32 0, i32 %300
  store double %298, double* %301, align 8
  %302 = load i32, i32* %1, align 4
  %303 = getelementptr inbounds [31 x double], [31 x double]* %10, i32 0, i32 %302
  store double %298, double* %303, align 8
  store i32 0, i32* %2, align 4
  br label %304

; <label>:304:                                    ; preds = %315, %292
  %305 = load i32, i32* %2, align 4
  %306 = icmp slt i32 %305, 15
  br i1 %306, label %307, label %318

; <label>:307:                                    ; preds = %304
  %308 = load double*, double** %8, align 4
  %309 = getelementptr inbounds double, double* %308, i32 1
  store double* %309, double** %8, align 4
  %310 = load double, double* %308, align 8
  %311 = load double, double* %12, align 8
  %312 = fdiv double %310, %311
  %313 = load double*, double** %9, align 4
  %314 = getelementptr inbounds double, double* %313, i32 1
  store double* %314, double** %9, align 4
  store double %312, double* %313, align 8
  br label %315

; <label>:315:                                    ; preds = %307
  %316 = load i32, i32* %2, align 4
  %317 = add nsw i32 %316, 1
  store i32 %317, i32* %2, align 4
  br label %304

; <label>:318:                                    ; preds = %304
  br label %319

; <label>:319:                                    ; preds = %318
  %320 = load i32, i32* %1, align 4
  %321 = add nsw i32 %320, -1
  store i32 %321, i32* %1, align 4
  br label %289

; <label>:322:                                    ; preds = %289
  %323 = load double*, double** %8, align 4
  %324 = getelementptr inbounds double, double* %323, i32 1
  store double* %324, double** %8, align 4
  store i32 0, i32* %2, align 4
  br label %325

; <label>:325:                                    ; preds = %336, %322
  %326 = load i32, i32* %2, align 4
  %327 = icmp slt i32 %326, 7
  br i1 %327, label %328, label %339

; <label>:328:                                    ; preds = %325
  %329 = load double*, double** %8, align 4
  %330 = getelementptr inbounds double, double* %329, i32 1
  store double* %330, double** %8, align 4
  %331 = load double, double* %329, align 8
  %332 = load double, double* %5, align 8
  %333 = fdiv double %331, %332
  %334 = load double*, double** %9, align 4
  %335 = getelementptr inbounds double, double* %334, i32 1
  store double* %335, double** %9, align 4
  store double %333, double* %334, align 8
  br label %336

; <label>:336:                                    ; preds = %328
  %337 = load i32, i32* %2, align 4
  %338 = add nsw i32 %337, 1
  store i32 %338, i32* %2, align 4
  br label %325

; <label>:339:                                    ; preds = %325
  store double* getelementptr inbounds ([16 x [31 x double]], [16 x [31 x double]]* @mm, i32 0, i32 0, i32 0), double** %8, align 4
  store i32 15, i32* %1, align 4
  br label %340

; <label>:340:                                    ; preds = %368, %339
  %341 = load i32, i32* %1, align 4
  %342 = icmp sge i32 %341, 0
  br i1 %342, label %343, label %371

; <label>:343:                                    ; preds = %340
  store i32 1, i32* %2, align 4
  br label %344

; <label>:344:                                    ; preds = %364, %343
  %345 = load i32, i32* %2, align 4
  %346 = icmp slt i32 %345, 32
  br i1 %346, label %347, label %367

; <label>:347:                                    ; preds = %344
  %348 = load i32, i32* %1, align 4
  %349 = mul nsw i32 2, %348
  %350 = add nsw i32 %349, 1
  %351 = load i32, i32* %2, align 4
  %352 = mul nsw i32 %350, %351
  %353 = sitofp i32 %352 to double
  %354 = fmul double %353, 0x400921FB54442D18
  %355 = fdiv double %354, 6.400000e+01
  %356 = call arm_aapcscc double @cos(double %355) #7
  %357 = load i32, i32* %2, align 4
  %358 = sub nsw i32 %357, 1
  %359 = getelementptr inbounds [31 x double], [31 x double]* %10, i32 0, i32 %358
  %360 = load double, double* %359, align 8
  %361 = fmul double %356, %360
  %362 = load double*, double** %8, align 4
  %363 = getelementptr inbounds double, double* %362, i32 1
  store double* %363, double** %8, align 4
  store double %361, double* %362, align 8
  br label %364

; <label>:364:                                    ; preds = %347
  %365 = load i32, i32* %2, align 4
  %366 = add nsw i32 %365, 1
  store i32 %366, i32* %2, align 4
  br label %344

; <label>:367:                                    ; preds = %344
  br label %368

; <label>:368:                                    ; preds = %367
  %369 = load i32, i32* %1, align 4
  %370 = add nsw i32 %369, -1
  store i32 %370, i32* %1, align 4
  br label %340

; <label>:371:                                    ; preds = %340
  store i32 0, i32* %2, align 4
  br label %372

; <label>:372:                                    ; preds = %466, %371
  %373 = load i32, i32* %2, align 4
  %374 = icmp slt i32 %373, 4
  br i1 %374, label %375, label %469

; <label>:375:                                    ; preds = %372
  %376 = load i32, i32* %2, align 4
  %377 = sub nsw i32 17, %376
  %378 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %377
  %379 = load double, double* %378, align 8
  store double %379, double* %13, align 8
  %380 = load i32, i32* %2, align 4
  %381 = add nsw i32 9, %380
  %382 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %381
  %383 = load double, double* %382, align 8
  %384 = load i32, i32* %2, align 4
  %385 = sub nsw i32 17, %384
  %386 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %385
  store double %383, double* %386, align 8
  %387 = load double, double* %13, align 8
  %388 = load i32, i32* %2, align 4
  %389 = add nsw i32 9, %388
  %390 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %389
  store double %387, double* %390, align 8
  %391 = load i32, i32* %2, align 4
  %392 = sub nsw i32 35, %391
  %393 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %392
  %394 = load double, double* %393, align 8
  store double %394, double* %13, align 8
  %395 = load i32, i32* %2, align 4
  %396 = add nsw i32 27, %395
  %397 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %396
  %398 = load double, double* %397, align 8
  %399 = load i32, i32* %2, align 4
  %400 = sub nsw i32 35, %399
  %401 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %400
  store double %398, double* %401, align 8
  %402 = load double, double* %13, align 8
  %403 = load i32, i32* %2, align 4
  %404 = add nsw i32 27, %403
  %405 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %404
  store double %402, double* %405, align 8
  %406 = load i32, i32* %2, align 4
  %407 = sub nsw i32 17, %406
  %408 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %407
  %409 = load double, double* %408, align 8
  store double %409, double* %13, align 8
  %410 = load i32, i32* %2, align 4
  %411 = add nsw i32 9, %410
  %412 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %411
  %413 = load double, double* %412, align 8
  %414 = load i32, i32* %2, align 4
  %415 = sub nsw i32 17, %414
  %416 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %415
  store double %413, double* %416, align 8
  %417 = load double, double* %13, align 8
  %418 = load i32, i32* %2, align 4
  %419 = add nsw i32 9, %418
  %420 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %419
  store double %417, double* %420, align 8
  %421 = load i32, i32* %2, align 4
  %422 = sub nsw i32 35, %421
  %423 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %422
  %424 = load double, double* %423, align 8
  store double %424, double* %13, align 8
  %425 = load i32, i32* %2, align 4
  %426 = add nsw i32 27, %425
  %427 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %426
  %428 = load double, double* %427, align 8
  %429 = load i32, i32* %2, align 4
  %430 = sub nsw i32 35, %429
  %431 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %430
  store double %428, double* %431, align 8
  %432 = load double, double* %13, align 8
  %433 = load i32, i32* %2, align 4
  %434 = add nsw i32 27, %433
  %435 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %434
  store double %432, double* %435, align 8
  %436 = load i32, i32* %2, align 4
  %437 = sub nsw i32 17, %436
  %438 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %437
  %439 = load double, double* %438, align 8
  store double %439, double* %13, align 8
  %440 = load i32, i32* %2, align 4
  %441 = add nsw i32 9, %440
  %442 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %441
  %443 = load double, double* %442, align 8
  %444 = load i32, i32* %2, align 4
  %445 = sub nsw i32 17, %444
  %446 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %445
  store double %443, double* %446, align 8
  %447 = load double, double* %13, align 8
  %448 = load i32, i32* %2, align 4
  %449 = add nsw i32 9, %448
  %450 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %449
  store double %447, double* %450, align 8
  %451 = load i32, i32* %2, align 4
  %452 = sub nsw i32 35, %451
  %453 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %452
  %454 = load double, double* %453, align 8
  store double %454, double* %13, align 8
  %455 = load i32, i32* %2, align 4
  %456 = add nsw i32 27, %455
  %457 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %456
  %458 = load double, double* %457, align 8
  %459 = load i32, i32* %2, align 4
  %460 = sub nsw i32 35, %459
  %461 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %460
  store double %458, double* %461, align 8
  %462 = load double, double* %13, align 8
  %463 = load i32, i32* %2, align 4
  %464 = add nsw i32 27, %463
  %465 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %464
  store double %462, double* %465, align 8
  br label %466

; <label>:466:                                    ; preds = %375
  %467 = load i32, i32* %2, align 4
  %468 = add nsw i32 %467, 1
  store i32 %468, i32* %2, align 4
  br label %372

; <label>:469:                                    ; preds = %372
  store i32 0, i32* %1, align 4
  br label %470

; <label>:470:                                    ; preds = %492, %469
  %471 = load i32, i32* %1, align 4
  %472 = icmp slt i32 %471, 36
  br i1 %472, label %473, label %495

; <label>:473:                                    ; preds = %470
  %474 = load double, double* %5, align 8
  %475 = fdiv double %474, 3.276800e+04
  %476 = load i32, i32* %1, align 4
  %477 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 0), i32 0, i32 %476
  %478 = load double, double* %477, align 8
  %479 = fmul double %478, %475
  store double %479, double* %477, align 8
  %480 = load double, double* %5, align 8
  %481 = fdiv double %480, 3.276800e+04
  %482 = load i32, i32* %1, align 4
  %483 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 1), i32 0, i32 %482
  %484 = load double, double* %483, align 8
  %485 = fmul double %484, %481
  store double %485, double* %483, align 8
  %486 = load double, double* %5, align 8
  %487 = fdiv double %486, 3.276800e+04
  %488 = load i32, i32* %1, align 4
  %489 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 3), i32 0, i32 %488
  %490 = load double, double* %489, align 8
  %491 = fmul double %490, %487
  store double %491, double* %489, align 8
  br label %492

; <label>:492:                                    ; preds = %473
  %493 = load i32, i32* %1, align 4
  %494 = add nsw i32 %493, 1
  store i32 %494, i32* %1, align 4
  br label %470

; <label>:495:                                    ; preds = %470
  store double 0x3FD5555555555555, double* %4, align 8
  store i32 0, i32* %1, align 4
  br label %496

; <label>:496:                                    ; preds = %562, %495
  %497 = load i32, i32* %1, align 4
  %498 = icmp slt i32 %497, 3
  br i1 %498, label %499, label %565

; <label>:499:                                    ; preds = %496
  %500 = load i32, i32* %1, align 4
  %501 = sitofp i32 %500 to double
  %502 = fadd double %501, 5.000000e-01
  %503 = fmul double 0x3FD0C152382D7365, %502
  %504 = call arm_aapcscc double @cos(double %503) #7
  %505 = load double, double* %5, align 8
  %506 = fmul double %504, %505
  %507 = fdiv double %506, 3.276800e+04
  %508 = load double, double* %4, align 8
  %509 = fmul double %507, %508
  store double %509, double* %14, align 8
  %510 = load i32, i32* %1, align 4
  %511 = sitofp i32 %510 to double
  %512 = fadd double %511, 5.000000e-01
  %513 = fmul double 0x3FD0C152382D7365, %512
  %514 = call arm_aapcscc double @tan(double %513) #7
  %515 = load i32, i32* %1, align 4
  %516 = getelementptr inbounds [36 x double], [36 x double]* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i32 0, i32 2), i32 0, i32 %515
  store double %514, double* %516, align 8
  store i32 0, i32* %3, align 4
  br label %517

; <label>:517:                                    ; preds = %558, %499
  %518 = load i32, i32* %3, align 4
  %519 = icmp slt i32 %518, 6
  br i1 %519, label %520, label %561

; <label>:520:                                    ; preds = %517
  %521 = load double, double* %14, align 8
  %522 = load i32, i32* %3, align 4
  %523 = mul nsw i32 2, %522
  %524 = add nsw i32 %523, 1
  %525 = sitofp i32 %524 to double
  %526 = fmul double 0x3FB0C152382D7365, %525
  %527 = load i32, i32* %1, align 4
  %528 = mul nsw i32 4, %527
  %529 = add nsw i32 %528, 2
  %530 = add nsw i32 %529, 12
  %531 = sitofp i32 %530 to double
  %532 = fmul double %526, %531
  %533 = call arm_aapcscc double @cos(double %532) #7
  %534 = fmul double %521, %533
  %535 = load i32, i32* %3, align 4
  %536 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i32 0, i32 %535
  %537 = load i32, i32* %1, align 4
  %538 = getelementptr inbounds [6 x double], [6 x double]* %536, i32 0, i32 %537
  store double %534, double* %538, align 8
  %539 = load double, double* %14, align 8
  %540 = load i32, i32* %3, align 4
  %541 = mul nsw i32 2, %540
  %542 = add nsw i32 %541, 1
  %543 = sitofp i32 %542 to double
  %544 = fmul double 0x3FB0C152382D7365, %543
  %545 = load i32, i32* %1, align 4
  %546 = mul nsw i32 4, %545
  %547 = add nsw i32 %546, 2
  %548 = add nsw i32 %547, 36
  %549 = sitofp i32 %548 to double
  %550 = fmul double %544, %549
  %551 = call arm_aapcscc double @cos(double %550) #7
  %552 = fmul double %539, %551
  %553 = load i32, i32* %3, align 4
  %554 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i32 0, i32 %553
  %555 = load i32, i32* %1, align 4
  %556 = add nsw i32 %555, 3
  %557 = getelementptr inbounds [6 x double], [6 x double]* %554, i32 0, i32 %556
  store double %552, double* %557, align 8
  br label %558

; <label>:558:                                    ; preds = %520
  %559 = load i32, i32* %3, align 4
  %560 = add nsw i32 %559, 1
  store i32 %560, i32* %3, align 4
  br label %517

; <label>:561:                                    ; preds = %517
  br label %562

; <label>:562:                                    ; preds = %561
  %563 = load i32, i32* %1, align 4
  %564 = add nsw i32 %563, 1
  store i32 %564, i32* %1, align 4
  br label %496

; <label>:565:                                    ; preds = %496
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @window_subband(i16*, double*, double*) #0 {
  %4 = alloca i16*, align 4
  %5 = alloca double*, align 4
  %6 = alloca double*, align 4
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double*, align 4
  %11 = alloca i16*, align 4
  %12 = alloca i16*, align 4
  %13 = alloca double, align 8
  %14 = alloca i32, align 4
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  store i16* %0, i16** %4, align 4
  store double* %1, double** %5, align 4
  store double* %2, double** %6, align 4
  store double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i32 0, i32 0), double** %10, align 4
  %17 = load i16*, i16** %4, align 4
  %18 = getelementptr inbounds i16, i16* %17, i32 255
  %19 = load i16, i16* %18, align 2
  %20 = sitofp i16 %19 to double
  store double %20, double* %9, align 8
  %21 = load i16*, i16** %4, align 4
  %22 = getelementptr inbounds i16, i16* %21, i32 223
  %23 = load i16, i16* %22, align 2
  %24 = sext i16 %23 to i32
  %25 = load i16*, i16** %4, align 4
  %26 = getelementptr inbounds i16, i16* %25, i32 287
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  %29 = sub nsw i32 %24, %28
  %30 = sitofp i32 %29 to double
  %31 = load double*, double** %10, align 4
  %32 = getelementptr inbounds double, double* %31, i32 1
  store double* %32, double** %10, align 4
  %33 = load double, double* %31, align 8
  %34 = fmul double %30, %33
  %35 = load double, double* %9, align 8
  %36 = fadd double %35, %34
  store double %36, double* %9, align 8
  %37 = load i16*, i16** %4, align 4
  %38 = getelementptr inbounds i16, i16* %37, i32 191
  %39 = load i16, i16* %38, align 2
  %40 = sext i16 %39 to i32
  %41 = load i16*, i16** %4, align 4
  %42 = getelementptr inbounds i16, i16* %41, i32 319
  %43 = load i16, i16* %42, align 2
  %44 = sext i16 %43 to i32
  %45 = add nsw i32 %40, %44
  %46 = sitofp i32 %45 to double
  %47 = load double*, double** %10, align 4
  %48 = getelementptr inbounds double, double* %47, i32 1
  store double* %48, double** %10, align 4
  %49 = load double, double* %47, align 8
  %50 = fmul double %46, %49
  %51 = load double, double* %9, align 8
  %52 = fadd double %51, %50
  store double %52, double* %9, align 8
  %53 = load i16*, i16** %4, align 4
  %54 = getelementptr inbounds i16, i16* %53, i32 159
  %55 = load i16, i16* %54, align 2
  %56 = sext i16 %55 to i32
  %57 = load i16*, i16** %4, align 4
  %58 = getelementptr inbounds i16, i16* %57, i32 351
  %59 = load i16, i16* %58, align 2
  %60 = sext i16 %59 to i32
  %61 = sub nsw i32 %56, %60
  %62 = sitofp i32 %61 to double
  %63 = load double*, double** %10, align 4
  %64 = getelementptr inbounds double, double* %63, i32 1
  store double* %64, double** %10, align 4
  %65 = load double, double* %63, align 8
  %66 = fmul double %62, %65
  %67 = load double, double* %9, align 8
  %68 = fadd double %67, %66
  store double %68, double* %9, align 8
  %69 = load i16*, i16** %4, align 4
  %70 = getelementptr inbounds i16, i16* %69, i32 127
  %71 = load i16, i16* %70, align 2
  %72 = sext i16 %71 to i32
  %73 = load i16*, i16** %4, align 4
  %74 = getelementptr inbounds i16, i16* %73, i32 383
  %75 = load i16, i16* %74, align 2
  %76 = sext i16 %75 to i32
  %77 = add nsw i32 %72, %76
  %78 = sitofp i32 %77 to double
  %79 = load double*, double** %10, align 4
  %80 = getelementptr inbounds double, double* %79, i32 1
  store double* %80, double** %10, align 4
  %81 = load double, double* %79, align 8
  %82 = fmul double %78, %81
  %83 = load double, double* %9, align 8
  %84 = fadd double %83, %82
  store double %84, double* %9, align 8
  %85 = load i16*, i16** %4, align 4
  %86 = getelementptr inbounds i16, i16* %85, i32 95
  %87 = load i16, i16* %86, align 2
  %88 = sext i16 %87 to i32
  %89 = load i16*, i16** %4, align 4
  %90 = getelementptr inbounds i16, i16* %89, i32 415
  %91 = load i16, i16* %90, align 2
  %92 = sext i16 %91 to i32
  %93 = sub nsw i32 %88, %92
  %94 = sitofp i32 %93 to double
  %95 = load double*, double** %10, align 4
  %96 = getelementptr inbounds double, double* %95, i32 1
  store double* %96, double** %10, align 4
  %97 = load double, double* %95, align 8
  %98 = fmul double %94, %97
  %99 = load double, double* %9, align 8
  %100 = fadd double %99, %98
  store double %100, double* %9, align 8
  %101 = load i16*, i16** %4, align 4
  %102 = getelementptr inbounds i16, i16* %101, i32 63
  %103 = load i16, i16* %102, align 2
  %104 = sext i16 %103 to i32
  %105 = load i16*, i16** %4, align 4
  %106 = getelementptr inbounds i16, i16* %105, i32 447
  %107 = load i16, i16* %106, align 2
  %108 = sext i16 %107 to i32
  %109 = add nsw i32 %104, %108
  %110 = sitofp i32 %109 to double
  %111 = load double*, double** %10, align 4
  %112 = getelementptr inbounds double, double* %111, i32 1
  store double* %112, double** %10, align 4
  %113 = load double, double* %111, align 8
  %114 = fmul double %110, %113
  %115 = load double, double* %9, align 8
  %116 = fadd double %115, %114
  store double %116, double* %9, align 8
  %117 = load i16*, i16** %4, align 4
  %118 = getelementptr inbounds i16, i16* %117, i32 31
  %119 = load i16, i16* %118, align 2
  %120 = sext i16 %119 to i32
  %121 = load i16*, i16** %4, align 4
  %122 = getelementptr inbounds i16, i16* %121, i32 479
  %123 = load i16, i16* %122, align 2
  %124 = sext i16 %123 to i32
  %125 = sub nsw i32 %120, %124
  %126 = sitofp i32 %125 to double
  %127 = load double*, double** %10, align 4
  %128 = getelementptr inbounds double, double* %127, i32 1
  store double* %128, double** %10, align 4
  %129 = load double, double* %127, align 8
  %130 = fmul double %126, %129
  %131 = load double, double* %9, align 8
  %132 = fadd double %131, %130
  store double %132, double* %9, align 8
  %133 = load double, double* %9, align 8
  %134 = load double*, double** %6, align 4
  %135 = getelementptr inbounds double, double* %134, i32 15
  store double %133, double* %135, align 8
  store i32 14, i32* %7, align 4
  br label %136

; <label>:136:                                    ; preds = %479, %3
  %137 = load i32, i32* %7, align 4
  %138 = icmp sge i32 %137, 0
  br i1 %138, label %139, label %482

; <label>:139:                                    ; preds = %136
  %140 = load i16*, i16** %4, align 4
  %141 = load i32, i32* %7, align 4
  %142 = getelementptr inbounds i16, i16* %140, i32 %141
  store i16* %142, i16** %11, align 4
  %143 = load i16*, i16** %4, align 4
  %144 = load i32, i32* %7, align 4
  %145 = sub nsw i32 0, %144
  %146 = getelementptr inbounds i16, i16* %143, i32 %145
  store i16* %146, i16** %12, align 4
  %147 = load i16*, i16** %12, align 4
  %148 = getelementptr inbounds i16, i16* %147, i32 270
  %149 = load i16, i16* %148, align 2
  %150 = sitofp i16 %149 to double
  store double %150, double* %8, align 8
  %151 = load i16*, i16** %11, align 4
  %152 = getelementptr inbounds i16, i16* %151, i32 240
  %153 = load i16, i16* %152, align 2
  %154 = sitofp i16 %153 to double
  store double %154, double* %9, align 8
  %155 = load double*, double** %10, align 4
  %156 = getelementptr inbounds double, double* %155, i32 1
  store double* %156, double** %10, align 4
  %157 = load double, double* %155, align 8
  store double %157, double* %13, align 8
  %158 = load i16*, i16** %12, align 4
  %159 = getelementptr inbounds i16, i16* %158, i32 334
  %160 = load i16, i16* %159, align 2
  %161 = sext i16 %160 to i32
  %162 = sitofp i32 %161 to double
  %163 = load double, double* %13, align 8
  %164 = fmul double %162, %163
  %165 = load double, double* %8, align 8
  %166 = fadd double %165, %164
  store double %166, double* %8, align 8
  %167 = load i16*, i16** %11, align 4
  %168 = getelementptr inbounds i16, i16* %167, i32 176
  %169 = load i16, i16* %168, align 2
  %170 = sext i16 %169 to i32
  %171 = sitofp i32 %170 to double
  %172 = load double, double* %13, align 8
  %173 = fmul double %171, %172
  %174 = load double, double* %9, align 8
  %175 = fadd double %174, %173
  store double %175, double* %9, align 8
  %176 = load double*, double** %10, align 4
  %177 = getelementptr inbounds double, double* %176, i32 1
  store double* %177, double** %10, align 4
  %178 = load double, double* %176, align 8
  store double %178, double* %13, align 8
  %179 = load i16*, i16** %12, align 4
  %180 = getelementptr inbounds i16, i16* %179, i32 398
  %181 = load i16, i16* %180, align 2
  %182 = sext i16 %181 to i32
  %183 = sitofp i32 %182 to double
  %184 = load double, double* %13, align 8
  %185 = fmul double %183, %184
  %186 = load double, double* %8, align 8
  %187 = fadd double %186, %185
  store double %187, double* %8, align 8
  %188 = load i16*, i16** %11, align 4
  %189 = getelementptr inbounds i16, i16* %188, i32 112
  %190 = load i16, i16* %189, align 2
  %191 = sext i16 %190 to i32
  %192 = sitofp i32 %191 to double
  %193 = load double, double* %13, align 8
  %194 = fmul double %192, %193
  %195 = load double, double* %9, align 8
  %196 = fadd double %195, %194
  store double %196, double* %9, align 8
  %197 = load double*, double** %10, align 4
  %198 = getelementptr inbounds double, double* %197, i32 1
  store double* %198, double** %10, align 4
  %199 = load double, double* %197, align 8
  store double %199, double* %13, align 8
  %200 = load i16*, i16** %12, align 4
  %201 = getelementptr inbounds i16, i16* %200, i32 462
  %202 = load i16, i16* %201, align 2
  %203 = sext i16 %202 to i32
  %204 = sitofp i32 %203 to double
  %205 = load double, double* %13, align 8
  %206 = fmul double %204, %205
  %207 = load double, double* %8, align 8
  %208 = fadd double %207, %206
  store double %208, double* %8, align 8
  %209 = load i16*, i16** %11, align 4
  %210 = getelementptr inbounds i16, i16* %209, i32 48
  %211 = load i16, i16* %210, align 2
  %212 = sext i16 %211 to i32
  %213 = sitofp i32 %212 to double
  %214 = load double, double* %13, align 8
  %215 = fmul double %213, %214
  %216 = load double, double* %9, align 8
  %217 = fadd double %216, %215
  store double %217, double* %9, align 8
  %218 = load double*, double** %10, align 4
  %219 = getelementptr inbounds double, double* %218, i32 1
  store double* %219, double** %10, align 4
  %220 = load double, double* %218, align 8
  store double %220, double* %13, align 8
  %221 = load i16*, i16** %12, align 4
  %222 = getelementptr inbounds i16, i16* %221, i32 14
  %223 = load i16, i16* %222, align 2
  %224 = sext i16 %223 to i32
  %225 = sitofp i32 %224 to double
  %226 = load double, double* %13, align 8
  %227 = fmul double %225, %226
  %228 = load double, double* %8, align 8
  %229 = fadd double %228, %227
  store double %229, double* %8, align 8
  %230 = load i16*, i16** %11, align 4
  %231 = getelementptr inbounds i16, i16* %230, i32 496
  %232 = load i16, i16* %231, align 2
  %233 = sext i16 %232 to i32
  %234 = sitofp i32 %233 to double
  %235 = load double, double* %13, align 8
  %236 = fmul double %234, %235
  %237 = load double, double* %9, align 8
  %238 = fadd double %237, %236
  store double %238, double* %9, align 8
  %239 = load double*, double** %10, align 4
  %240 = getelementptr inbounds double, double* %239, i32 1
  store double* %240, double** %10, align 4
  %241 = load double, double* %239, align 8
  store double %241, double* %13, align 8
  %242 = load i16*, i16** %12, align 4
  %243 = getelementptr inbounds i16, i16* %242, i32 78
  %244 = load i16, i16* %243, align 2
  %245 = sext i16 %244 to i32
  %246 = sitofp i32 %245 to double
  %247 = load double, double* %13, align 8
  %248 = fmul double %246, %247
  %249 = load double, double* %8, align 8
  %250 = fadd double %249, %248
  store double %250, double* %8, align 8
  %251 = load i16*, i16** %11, align 4
  %252 = getelementptr inbounds i16, i16* %251, i32 432
  %253 = load i16, i16* %252, align 2
  %254 = sext i16 %253 to i32
  %255 = sitofp i32 %254 to double
  %256 = load double, double* %13, align 8
  %257 = fmul double %255, %256
  %258 = load double, double* %9, align 8
  %259 = fadd double %258, %257
  store double %259, double* %9, align 8
  %260 = load double*, double** %10, align 4
  %261 = getelementptr inbounds double, double* %260, i32 1
  store double* %261, double** %10, align 4
  %262 = load double, double* %260, align 8
  store double %262, double* %13, align 8
  %263 = load i16*, i16** %12, align 4
  %264 = getelementptr inbounds i16, i16* %263, i32 142
  %265 = load i16, i16* %264, align 2
  %266 = sext i16 %265 to i32
  %267 = sitofp i32 %266 to double
  %268 = load double, double* %13, align 8
  %269 = fmul double %267, %268
  %270 = load double, double* %8, align 8
  %271 = fadd double %270, %269
  store double %271, double* %8, align 8
  %272 = load i16*, i16** %11, align 4
  %273 = getelementptr inbounds i16, i16* %272, i32 368
  %274 = load i16, i16* %273, align 2
  %275 = sext i16 %274 to i32
  %276 = sitofp i32 %275 to double
  %277 = load double, double* %13, align 8
  %278 = fmul double %276, %277
  %279 = load double, double* %9, align 8
  %280 = fadd double %279, %278
  store double %280, double* %9, align 8
  %281 = load double*, double** %10, align 4
  %282 = getelementptr inbounds double, double* %281, i32 1
  store double* %282, double** %10, align 4
  %283 = load double, double* %281, align 8
  store double %283, double* %13, align 8
  %284 = load i16*, i16** %12, align 4
  %285 = getelementptr inbounds i16, i16* %284, i32 206
  %286 = load i16, i16* %285, align 2
  %287 = sext i16 %286 to i32
  %288 = sitofp i32 %287 to double
  %289 = load double, double* %13, align 8
  %290 = fmul double %288, %289
  %291 = load double, double* %8, align 8
  %292 = fadd double %291, %290
  store double %292, double* %8, align 8
  %293 = load i16*, i16** %11, align 4
  %294 = getelementptr inbounds i16, i16* %293, i32 304
  %295 = load i16, i16* %294, align 2
  %296 = sext i16 %295 to i32
  %297 = sitofp i32 %296 to double
  %298 = load double, double* %13, align 8
  %299 = fmul double %297, %298
  %300 = load double, double* %9, align 8
  %301 = fadd double %300, %299
  store double %301, double* %9, align 8
  %302 = load double*, double** %10, align 4
  %303 = getelementptr inbounds double, double* %302, i32 1
  store double* %303, double** %10, align 4
  %304 = load double, double* %302, align 8
  store double %304, double* %13, align 8
  %305 = load i16*, i16** %11, align 4
  %306 = getelementptr inbounds i16, i16* %305, i32 16
  %307 = load i16, i16* %306, align 2
  %308 = sext i16 %307 to i32
  %309 = sitofp i32 %308 to double
  %310 = load double, double* %13, align 8
  %311 = fmul double %309, %310
  %312 = load double, double* %8, align 8
  %313 = fadd double %312, %311
  store double %313, double* %8, align 8
  %314 = load i16*, i16** %12, align 4
  %315 = getelementptr inbounds i16, i16* %314, i32 494
  %316 = load i16, i16* %315, align 2
  %317 = sext i16 %316 to i32
  %318 = sitofp i32 %317 to double
  %319 = load double, double* %13, align 8
  %320 = fmul double %318, %319
  %321 = load double, double* %9, align 8
  %322 = fsub double %321, %320
  store double %322, double* %9, align 8
  %323 = load double*, double** %10, align 4
  %324 = getelementptr inbounds double, double* %323, i32 1
  store double* %324, double** %10, align 4
  %325 = load double, double* %323, align 8
  store double %325, double* %13, align 8
  %326 = load i16*, i16** %11, align 4
  %327 = getelementptr inbounds i16, i16* %326, i32 80
  %328 = load i16, i16* %327, align 2
  %329 = sext i16 %328 to i32
  %330 = sitofp i32 %329 to double
  %331 = load double, double* %13, align 8
  %332 = fmul double %330, %331
  %333 = load double, double* %8, align 8
  %334 = fadd double %333, %332
  store double %334, double* %8, align 8
  %335 = load i16*, i16** %12, align 4
  %336 = getelementptr inbounds i16, i16* %335, i32 430
  %337 = load i16, i16* %336, align 2
  %338 = sext i16 %337 to i32
  %339 = sitofp i32 %338 to double
  %340 = load double, double* %13, align 8
  %341 = fmul double %339, %340
  %342 = load double, double* %9, align 8
  %343 = fsub double %342, %341
  store double %343, double* %9, align 8
  %344 = load double*, double** %10, align 4
  %345 = getelementptr inbounds double, double* %344, i32 1
  store double* %345, double** %10, align 4
  %346 = load double, double* %344, align 8
  store double %346, double* %13, align 8
  %347 = load i16*, i16** %11, align 4
  %348 = getelementptr inbounds i16, i16* %347, i32 144
  %349 = load i16, i16* %348, align 2
  %350 = sext i16 %349 to i32
  %351 = sitofp i32 %350 to double
  %352 = load double, double* %13, align 8
  %353 = fmul double %351, %352
  %354 = load double, double* %8, align 8
  %355 = fadd double %354, %353
  store double %355, double* %8, align 8
  %356 = load i16*, i16** %12, align 4
  %357 = getelementptr inbounds i16, i16* %356, i32 366
  %358 = load i16, i16* %357, align 2
  %359 = sext i16 %358 to i32
  %360 = sitofp i32 %359 to double
  %361 = load double, double* %13, align 8
  %362 = fmul double %360, %361
  %363 = load double, double* %9, align 8
  %364 = fsub double %363, %362
  store double %364, double* %9, align 8
  %365 = load double*, double** %10, align 4
  %366 = getelementptr inbounds double, double* %365, i32 1
  store double* %366, double** %10, align 4
  %367 = load double, double* %365, align 8
  store double %367, double* %13, align 8
  %368 = load i16*, i16** %11, align 4
  %369 = getelementptr inbounds i16, i16* %368, i32 208
  %370 = load i16, i16* %369, align 2
  %371 = sext i16 %370 to i32
  %372 = sitofp i32 %371 to double
  %373 = load double, double* %13, align 8
  %374 = fmul double %372, %373
  %375 = load double, double* %8, align 8
  %376 = fadd double %375, %374
  store double %376, double* %8, align 8
  %377 = load i16*, i16** %12, align 4
  %378 = getelementptr inbounds i16, i16* %377, i32 302
  %379 = load i16, i16* %378, align 2
  %380 = sext i16 %379 to i32
  %381 = sitofp i32 %380 to double
  %382 = load double, double* %13, align 8
  %383 = fmul double %381, %382
  %384 = load double, double* %9, align 8
  %385 = fsub double %384, %383
  store double %385, double* %9, align 8
  %386 = load double*, double** %10, align 4
  %387 = getelementptr inbounds double, double* %386, i32 1
  store double* %387, double** %10, align 4
  %388 = load double, double* %386, align 8
  store double %388, double* %13, align 8
  %389 = load i16*, i16** %11, align 4
  %390 = getelementptr inbounds i16, i16* %389, i32 272
  %391 = load i16, i16* %390, align 2
  %392 = sext i16 %391 to i32
  %393 = sitofp i32 %392 to double
  %394 = load double, double* %13, align 8
  %395 = fmul double %393, %394
  %396 = load double, double* %8, align 8
  %397 = fsub double %396, %395
  store double %397, double* %8, align 8
  %398 = load i16*, i16** %12, align 4
  %399 = getelementptr inbounds i16, i16* %398, i32 238
  %400 = load i16, i16* %399, align 2
  %401 = sext i16 %400 to i32
  %402 = sitofp i32 %401 to double
  %403 = load double, double* %13, align 8
  %404 = fmul double %402, %403
  %405 = load double, double* %9, align 8
  %406 = fadd double %405, %404
  store double %406, double* %9, align 8
  %407 = load double*, double** %10, align 4
  %408 = getelementptr inbounds double, double* %407, i32 1
  store double* %408, double** %10, align 4
  %409 = load double, double* %407, align 8
  store double %409, double* %13, align 8
  %410 = load i16*, i16** %11, align 4
  %411 = getelementptr inbounds i16, i16* %410, i32 336
  %412 = load i16, i16* %411, align 2
  %413 = sext i16 %412 to i32
  %414 = sitofp i32 %413 to double
  %415 = load double, double* %13, align 8
  %416 = fmul double %414, %415
  %417 = load double, double* %8, align 8
  %418 = fsub double %417, %416
  store double %418, double* %8, align 8
  %419 = load i16*, i16** %12, align 4
  %420 = getelementptr inbounds i16, i16* %419, i32 174
  %421 = load i16, i16* %420, align 2
  %422 = sext i16 %421 to i32
  %423 = sitofp i32 %422 to double
  %424 = load double, double* %13, align 8
  %425 = fmul double %423, %424
  %426 = load double, double* %9, align 8
  %427 = fadd double %426, %425
  store double %427, double* %9, align 8
  %428 = load double*, double** %10, align 4
  %429 = getelementptr inbounds double, double* %428, i32 1
  store double* %429, double** %10, align 4
  %430 = load double, double* %428, align 8
  store double %430, double* %13, align 8
  %431 = load i16*, i16** %11, align 4
  %432 = getelementptr inbounds i16, i16* %431, i32 400
  %433 = load i16, i16* %432, align 2
  %434 = sext i16 %433 to i32
  %435 = sitofp i32 %434 to double
  %436 = load double, double* %13, align 8
  %437 = fmul double %435, %436
  %438 = load double, double* %8, align 8
  %439 = fsub double %438, %437
  store double %439, double* %8, align 8
  %440 = load i16*, i16** %12, align 4
  %441 = getelementptr inbounds i16, i16* %440, i32 110
  %442 = load i16, i16* %441, align 2
  %443 = sext i16 %442 to i32
  %444 = sitofp i32 %443 to double
  %445 = load double, double* %13, align 8
  %446 = fmul double %444, %445
  %447 = load double, double* %9, align 8
  %448 = fadd double %447, %446
  store double %448, double* %9, align 8
  %449 = load double*, double** %10, align 4
  %450 = getelementptr inbounds double, double* %449, i32 1
  store double* %450, double** %10, align 4
  %451 = load double, double* %449, align 8
  store double %451, double* %13, align 8
  %452 = load i16*, i16** %11, align 4
  %453 = getelementptr inbounds i16, i16* %452, i32 464
  %454 = load i16, i16* %453, align 2
  %455 = sext i16 %454 to i32
  %456 = sitofp i32 %455 to double
  %457 = load double, double* %13, align 8
  %458 = fmul double %456, %457
  %459 = load double, double* %8, align 8
  %460 = fsub double %459, %458
  store double %460, double* %8, align 8
  %461 = load i16*, i16** %12, align 4
  %462 = getelementptr inbounds i16, i16* %461, i32 46
  %463 = load i16, i16* %462, align 2
  %464 = sext i16 %463 to i32
  %465 = sitofp i32 %464 to double
  %466 = load double, double* %13, align 8
  %467 = fmul double %465, %466
  %468 = load double, double* %9, align 8
  %469 = fadd double %468, %467
  store double %469, double* %9, align 8
  %470 = load double, double* %8, align 8
  %471 = load double*, double** %6, align 4
  %472 = load i32, i32* %7, align 4
  %473 = sub nsw i32 30, %472
  %474 = getelementptr inbounds double, double* %471, i32 %473
  store double %470, double* %474, align 8
  %475 = load double, double* %9, align 8
  %476 = load double*, double** %6, align 4
  %477 = load i32, i32* %7, align 4
  %478 = getelementptr inbounds double, double* %476, i32 %477
  store double %475, double* %478, align 8
  br label %479

; <label>:479:                                    ; preds = %139
  %480 = load i32, i32* %7, align 4
  %481 = add nsw i32 %480, -1
  store i32 %481, i32* %7, align 4
  br label %136

; <label>:482:                                    ; preds = %136
  %483 = load i16*, i16** %4, align 4
  %484 = getelementptr inbounds i16, i16* %483, i32 239
  %485 = load i16, i16* %484, align 2
  %486 = sitofp i16 %485 to double
  store double %486, double* %8, align 8
  %487 = load i16*, i16** %4, align 4
  %488 = getelementptr inbounds i16, i16* %487, i32 175
  %489 = load i16, i16* %488, align 2
  %490 = sext i16 %489 to i32
  %491 = sitofp i32 %490 to double
  %492 = load double*, double** %10, align 4
  %493 = getelementptr inbounds double, double* %492, i32 1
  store double* %493, double** %10, align 4
  %494 = load double, double* %492, align 8
  %495 = fmul double %491, %494
  %496 = load double, double* %8, align 8
  %497 = fadd double %496, %495
  store double %497, double* %8, align 8
  %498 = load i16*, i16** %4, align 4
  %499 = getelementptr inbounds i16, i16* %498, i32 111
  %500 = load i16, i16* %499, align 2
  %501 = sext i16 %500 to i32
  %502 = sitofp i32 %501 to double
  %503 = load double*, double** %10, align 4
  %504 = getelementptr inbounds double, double* %503, i32 1
  store double* %504, double** %10, align 4
  %505 = load double, double* %503, align 8
  %506 = fmul double %502, %505
  %507 = load double, double* %8, align 8
  %508 = fadd double %507, %506
  store double %508, double* %8, align 8
  %509 = load i16*, i16** %4, align 4
  %510 = getelementptr inbounds i16, i16* %509, i32 47
  %511 = load i16, i16* %510, align 2
  %512 = sext i16 %511 to i32
  %513 = sitofp i32 %512 to double
  %514 = load double*, double** %10, align 4
  %515 = getelementptr inbounds double, double* %514, i32 1
  store double* %515, double** %10, align 4
  %516 = load double, double* %514, align 8
  %517 = fmul double %513, %516
  %518 = load double, double* %8, align 8
  %519 = fadd double %518, %517
  store double %519, double* %8, align 8
  %520 = load i16*, i16** %4, align 4
  %521 = getelementptr inbounds i16, i16* %520, i32 303
  %522 = load i16, i16* %521, align 2
  %523 = sext i16 %522 to i32
  %524 = sitofp i32 %523 to double
  %525 = load double*, double** %10, align 4
  %526 = getelementptr inbounds double, double* %525, i32 1
  store double* %526, double** %10, align 4
  %527 = load double, double* %525, align 8
  %528 = fmul double %524, %527
  %529 = load double, double* %8, align 8
  %530 = fsub double %529, %528
  store double %530, double* %8, align 8
  %531 = load i16*, i16** %4, align 4
  %532 = getelementptr inbounds i16, i16* %531, i32 367
  %533 = load i16, i16* %532, align 2
  %534 = sext i16 %533 to i32
  %535 = sitofp i32 %534 to double
  %536 = load double*, double** %10, align 4
  %537 = getelementptr inbounds double, double* %536, i32 1
  store double* %537, double** %10, align 4
  %538 = load double, double* %536, align 8
  %539 = fmul double %535, %538
  %540 = load double, double* %8, align 8
  %541 = fsub double %540, %539
  store double %541, double* %8, align 8
  %542 = load i16*, i16** %4, align 4
  %543 = getelementptr inbounds i16, i16* %542, i32 431
  %544 = load i16, i16* %543, align 2
  %545 = sext i16 %544 to i32
  %546 = sitofp i32 %545 to double
  %547 = load double*, double** %10, align 4
  %548 = getelementptr inbounds double, double* %547, i32 1
  store double* %548, double** %10, align 4
  %549 = load double, double* %547, align 8
  %550 = fmul double %546, %549
  %551 = load double, double* %8, align 8
  %552 = fsub double %551, %550
  store double %552, double* %8, align 8
  %553 = load i16*, i16** %4, align 4
  %554 = getelementptr inbounds i16, i16* %553, i32 495
  %555 = load i16, i16* %554, align 2
  %556 = sext i16 %555 to i32
  %557 = sitofp i32 %556 to double
  %558 = load double*, double** %10, align 4
  %559 = getelementptr inbounds double, double* %558, i32 1
  store double* %559, double** %10, align 4
  %560 = load double, double* %558, align 8
  %561 = fmul double %557, %560
  %562 = load double, double* %8, align 8
  %563 = fsub double %562, %561
  store double %563, double* %8, align 8
  %564 = load double*, double** %6, align 4
  %565 = getelementptr inbounds double, double* %564, i32 1
  store double* %565, double** %6, align 4
  store double* getelementptr inbounds ([16 x [31 x double]], [16 x [31 x double]]* @mm, i32 0, i32 0, i32 0), double** %10, align 4
  store i32 15, i32* %7, align 4
  br label %566

; <label>:566:                                    ; preds = %617, %482
  %567 = load i32, i32* %7, align 4
  %568 = icmp sge i32 %567, 0
  br i1 %568, label %569, label %620

; <label>:569:                                    ; preds = %566
  %570 = load double, double* %8, align 8
  store double %570, double* %15, align 8
  %571 = load double, double* %9, align 8
  %572 = load double*, double** %10, align 4
  %573 = getelementptr inbounds double, double* %572, i32 1
  store double* %573, double** %10, align 4
  %574 = load double, double* %572, align 8
  %575 = fmul double %571, %574
  store double %575, double* %16, align 8
  store i32 14, i32* %14, align 4
  br label %576

; <label>:576:                                    ; preds = %598, %569
  %577 = load i32, i32* %14, align 4
  %578 = icmp sge i32 %577, 0
  br i1 %578, label %579, label %601

; <label>:579:                                    ; preds = %576
  %580 = load double*, double** %10, align 4
  %581 = getelementptr inbounds double, double* %580, i32 1
  store double* %581, double** %10, align 4
  %582 = load double, double* %580, align 8
  %583 = load double*, double** %6, align 4
  %584 = getelementptr inbounds double, double* %583, i32 1
  store double* %584, double** %6, align 4
  %585 = load double, double* %583, align 8
  %586 = fmul double %582, %585
  %587 = load double, double* %15, align 8
  %588 = fadd double %587, %586
  store double %588, double* %15, align 8
  %589 = load double*, double** %10, align 4
  %590 = getelementptr inbounds double, double* %589, i32 1
  store double* %590, double** %10, align 4
  %591 = load double, double* %589, align 8
  %592 = load double*, double** %6, align 4
  %593 = getelementptr inbounds double, double* %592, i32 1
  store double* %593, double** %6, align 4
  %594 = load double, double* %592, align 8
  %595 = fmul double %591, %594
  %596 = load double, double* %16, align 8
  %597 = fadd double %596, %595
  store double %597, double* %16, align 8
  br label %598

; <label>:598:                                    ; preds = %579
  %599 = load i32, i32* %14, align 4
  %600 = add nsw i32 %599, -1
  store i32 %600, i32* %14, align 4
  br label %576

; <label>:601:                                    ; preds = %576
  %602 = load double*, double** %6, align 4
  %603 = getelementptr inbounds double, double* %602, i32 -30
  store double* %603, double** %6, align 4
  %604 = load double, double* %15, align 8
  %605 = load double, double* %16, align 8
  %606 = fadd double %604, %605
  %607 = load double*, double** %5, align 4
  %608 = load i32, i32* %7, align 4
  %609 = getelementptr inbounds double, double* %607, i32 %608
  store double %606, double* %609, align 8
  %610 = load double, double* %15, align 8
  %611 = load double, double* %16, align 8
  %612 = fsub double %610, %611
  %613 = load double*, double** %5, align 4
  %614 = load i32, i32* %7, align 4
  %615 = sub nsw i32 31, %614
  %616 = getelementptr inbounds double, double* %613, i32 %615
  store double %612, double* %616, align 8
  br label %617

; <label>:617:                                    ; preds = %601
  %618 = load i32, i32* %7, align 4
  %619 = add nsw i32 %618, -1
  store i32 %619, i32* %7, align 4
  br label %566

; <label>:620:                                    ; preds = %566
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @mdct_short(double*, double*) #0 {
  %3 = alloca double*, align 4
  %4 = alloca double*, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  store double* %0, double** %3, align 4
  store double* %1, double** %4, align 4
  store i32 5, i32* %5, align 4
  br label %13

; <label>:13:                                     ; preds = %107, %2
  %14 = load i32, i32* %5, align 4
  %15 = icmp sge i32 %14, 0
  br i1 %15, label %16, label %110

; <label>:16:                                     ; preds = %13
  %17 = load i32, i32* %5, align 4
  %18 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i32 0, i32 %17
  %19 = getelementptr inbounds [6 x double], [6 x double]* %18, i32 0, i32 0
  %20 = load double, double* %19, align 8
  store double %20, double* %7, align 8
  %21 = load i32, i32* %5, align 4
  %22 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i32 0, i32 %21
  %23 = getelementptr inbounds [6 x double], [6 x double]* %22, i32 0, i32 1
  %24 = load double, double* %23, align 8
  store double %24, double* %8, align 8
  %25 = load i32, i32* %5, align 4
  %26 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i32 0, i32 %25
  %27 = getelementptr inbounds [6 x double], [6 x double]* %26, i32 0, i32 2
  %28 = load double, double* %27, align 8
  store double %28, double* %9, align 8
  %29 = load i32, i32* %5, align 4
  %30 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i32 0, i32 %29
  %31 = getelementptr inbounds [6 x double], [6 x double]* %30, i32 0, i32 3
  %32 = load double, double* %31, align 8
  store double %32, double* %10, align 8
  %33 = load i32, i32* %5, align 4
  %34 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i32 0, i32 %33
  %35 = getelementptr inbounds [6 x double], [6 x double]* %34, i32 0, i32 4
  %36 = load double, double* %35, align 8
  store double %36, double* %11, align 8
  %37 = load i32, i32* %5, align 4
  %38 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i32 0, i32 %37
  %39 = getelementptr inbounds [6 x double], [6 x double]* %38, i32 0, i32 5
  %40 = load double, double* %39, align 8
  store double %40, double* %12, align 8
  store i32 2, i32* %6, align 4
  br label %41

; <label>:41:                                     ; preds = %103, %16
  %42 = load i32, i32* %6, align 4
  %43 = icmp sge i32 %42, 0
  br i1 %43, label %44, label %106

; <label>:44:                                     ; preds = %41
  %45 = load double, double* %7, align 8
  %46 = load double*, double** %4, align 4
  %47 = load i32, i32* %6, align 4
  %48 = mul nsw i32 6, %47
  %49 = getelementptr inbounds double, double* %46, i32 %48
  %50 = load double, double* %49, align 8
  %51 = fmul double %45, %50
  %52 = load double, double* %8, align 8
  %53 = load double*, double** %4, align 4
  %54 = load i32, i32* %6, align 4
  %55 = mul nsw i32 6, %54
  %56 = add nsw i32 %55, 1
  %57 = getelementptr inbounds double, double* %53, i32 %56
  %58 = load double, double* %57, align 8
  %59 = fmul double %52, %58
  %60 = fadd double %51, %59
  %61 = load double, double* %9, align 8
  %62 = load double*, double** %4, align 4
  %63 = load i32, i32* %6, align 4
  %64 = mul nsw i32 6, %63
  %65 = add nsw i32 %64, 2
  %66 = getelementptr inbounds double, double* %62, i32 %65
  %67 = load double, double* %66, align 8
  %68 = fmul double %61, %67
  %69 = fadd double %60, %68
  %70 = load double, double* %10, align 8
  %71 = load double*, double** %4, align 4
  %72 = load i32, i32* %6, align 4
  %73 = mul nsw i32 6, %72
  %74 = add nsw i32 %73, 3
  %75 = getelementptr inbounds double, double* %71, i32 %74
  %76 = load double, double* %75, align 8
  %77 = fmul double %70, %76
  %78 = fadd double %69, %77
  %79 = load double, double* %11, align 8
  %80 = load double*, double** %4, align 4
  %81 = load i32, i32* %6, align 4
  %82 = mul nsw i32 6, %81
  %83 = add nsw i32 %82, 4
  %84 = getelementptr inbounds double, double* %80, i32 %83
  %85 = load double, double* %84, align 8
  %86 = fmul double %79, %85
  %87 = fadd double %78, %86
  %88 = load double, double* %12, align 8
  %89 = load double*, double** %4, align 4
  %90 = load i32, i32* %6, align 4
  %91 = mul nsw i32 6, %90
  %92 = add nsw i32 %91, 5
  %93 = getelementptr inbounds double, double* %89, i32 %92
  %94 = load double, double* %93, align 8
  %95 = fmul double %88, %94
  %96 = fadd double %87, %95
  %97 = load double*, double** %3, align 4
  %98 = load i32, i32* %5, align 4
  %99 = mul nsw i32 3, %98
  %100 = load i32, i32* %6, align 4
  %101 = add nsw i32 %99, %100
  %102 = getelementptr inbounds double, double* %97, i32 %101
  store double %96, double* %102, align 8
  br label %103

; <label>:103:                                    ; preds = %44
  %104 = load i32, i32* %6, align 4
  %105 = add nsw i32 %104, -1
  store i32 %105, i32* %6, align 4
  br label %41

; <label>:106:                                    ; preds = %41
  br label %107

; <label>:107:                                    ; preds = %106
  %108 = load i32, i32* %5, align 4
  %109 = add nsw i32 %108, -1
  store i32 %109, i32* %5, align 4
  br label %13

; <label>:110:                                    ; preds = %13
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @mdct_long(double*, double*) #0 {
  %3 = alloca double*, align 4
  %4 = alloca double*, align 4
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca i32, align 4
  %12 = alloca double*, align 4
  store double* %0, double** %3, align 4
  store double* %1, double** %4, align 4
  store i32 11, i32* %11, align 4
  store double* getelementptr inbounds ([244 x double], [244 x double]* @cos_l, i32 0, i32 0), double** %12, align 4
  br label %13

; <label>:13:                                     ; preds = %164, %2
  %14 = load double*, double** %4, align 4
  %15 = getelementptr inbounds double, double* %14, i32 0
  %16 = load double, double* %15, align 8
  %17 = load double*, double** %12, align 4
  %18 = getelementptr inbounds double, double* %17, i32 0
  %19 = load double, double* %18, align 8
  %20 = fmul double %16, %19
  %21 = load double*, double** %4, align 4
  %22 = getelementptr inbounds double, double* %21, i32 1
  %23 = load double, double* %22, align 8
  %24 = load double*, double** %12, align 4
  %25 = getelementptr inbounds double, double* %24, i32 1
  %26 = load double, double* %25, align 8
  %27 = fmul double %23, %26
  %28 = fadd double %20, %27
  %29 = load double*, double** %4, align 4
  %30 = getelementptr inbounds double, double* %29, i32 2
  %31 = load double, double* %30, align 8
  %32 = load double*, double** %12, align 4
  %33 = getelementptr inbounds double, double* %32, i32 2
  %34 = load double, double* %33, align 8
  %35 = fmul double %31, %34
  %36 = fadd double %28, %35
  %37 = load double*, double** %4, align 4
  %38 = getelementptr inbounds double, double* %37, i32 3
  %39 = load double, double* %38, align 8
  %40 = load double*, double** %12, align 4
  %41 = getelementptr inbounds double, double* %40, i32 3
  %42 = load double, double* %41, align 8
  %43 = fmul double %39, %42
  %44 = fadd double %36, %43
  %45 = load double*, double** %4, align 4
  %46 = getelementptr inbounds double, double* %45, i32 4
  %47 = load double, double* %46, align 8
  %48 = load double*, double** %12, align 4
  %49 = getelementptr inbounds double, double* %48, i32 4
  %50 = load double, double* %49, align 8
  %51 = fmul double %47, %50
  %52 = fadd double %44, %51
  %53 = load double*, double** %4, align 4
  %54 = getelementptr inbounds double, double* %53, i32 5
  %55 = load double, double* %54, align 8
  %56 = load double*, double** %12, align 4
  %57 = getelementptr inbounds double, double* %56, i32 5
  %58 = load double, double* %57, align 8
  %59 = fmul double %55, %58
  %60 = fadd double %52, %59
  %61 = load double*, double** %4, align 4
  %62 = getelementptr inbounds double, double* %61, i32 6
  %63 = load double, double* %62, align 8
  %64 = load double*, double** %12, align 4
  %65 = getelementptr inbounds double, double* %64, i32 6
  %66 = load double, double* %65, align 8
  %67 = fmul double %63, %66
  %68 = fadd double %60, %67
  %69 = load double*, double** %4, align 4
  %70 = getelementptr inbounds double, double* %69, i32 7
  %71 = load double, double* %70, align 8
  %72 = load double*, double** %12, align 4
  %73 = getelementptr inbounds double, double* %72, i32 7
  %74 = load double, double* %73, align 8
  %75 = fmul double %71, %74
  %76 = fadd double %68, %75
  %77 = load double*, double** %4, align 4
  %78 = getelementptr inbounds double, double* %77, i32 8
  %79 = load double, double* %78, align 8
  %80 = load double*, double** %12, align 4
  %81 = getelementptr inbounds double, double* %80, i32 8
  %82 = load double, double* %81, align 8
  %83 = fmul double %79, %82
  %84 = fadd double %76, %83
  %85 = load double*, double** %4, align 4
  %86 = getelementptr inbounds double, double* %85, i32 9
  %87 = load double, double* %86, align 8
  %88 = load double*, double** %12, align 4
  %89 = getelementptr inbounds double, double* %88, i32 9
  %90 = load double, double* %89, align 8
  %91 = fmul double %87, %90
  %92 = fadd double %84, %91
  %93 = load double*, double** %4, align 4
  %94 = getelementptr inbounds double, double* %93, i32 10
  %95 = load double, double* %94, align 8
  %96 = load double*, double** %12, align 4
  %97 = getelementptr inbounds double, double* %96, i32 10
  %98 = load double, double* %97, align 8
  %99 = fmul double %95, %98
  %100 = fadd double %92, %99
  %101 = load double*, double** %4, align 4
  %102 = getelementptr inbounds double, double* %101, i32 11
  %103 = load double, double* %102, align 8
  %104 = load double*, double** %12, align 4
  %105 = getelementptr inbounds double, double* %104, i32 11
  %106 = load double, double* %105, align 8
  %107 = fmul double %103, %106
  %108 = fadd double %100, %107
  %109 = load double*, double** %4, align 4
  %110 = getelementptr inbounds double, double* %109, i32 12
  %111 = load double, double* %110, align 8
  %112 = load double*, double** %12, align 4
  %113 = getelementptr inbounds double, double* %112, i32 12
  %114 = load double, double* %113, align 8
  %115 = fmul double %111, %114
  %116 = fadd double %108, %115
  %117 = load double*, double** %4, align 4
  %118 = getelementptr inbounds double, double* %117, i32 13
  %119 = load double, double* %118, align 8
  %120 = load double*, double** %12, align 4
  %121 = getelementptr inbounds double, double* %120, i32 13
  %122 = load double, double* %121, align 8
  %123 = fmul double %119, %122
  %124 = fadd double %116, %123
  %125 = load double*, double** %4, align 4
  %126 = getelementptr inbounds double, double* %125, i32 14
  %127 = load double, double* %126, align 8
  %128 = load double*, double** %12, align 4
  %129 = getelementptr inbounds double, double* %128, i32 14
  %130 = load double, double* %129, align 8
  %131 = fmul double %127, %130
  %132 = fadd double %124, %131
  %133 = load double*, double** %4, align 4
  %134 = getelementptr inbounds double, double* %133, i32 15
  %135 = load double, double* %134, align 8
  %136 = load double*, double** %12, align 4
  %137 = getelementptr inbounds double, double* %136, i32 15
  %138 = load double, double* %137, align 8
  %139 = fmul double %135, %138
  %140 = fadd double %132, %139
  %141 = load double*, double** %4, align 4
  %142 = getelementptr inbounds double, double* %141, i32 16
  %143 = load double, double* %142, align 8
  %144 = load double*, double** %12, align 4
  %145 = getelementptr inbounds double, double* %144, i32 16
  %146 = load double, double* %145, align 8
  %147 = fmul double %143, %146
  %148 = fadd double %140, %147
  %149 = load double*, double** %4, align 4
  %150 = getelementptr inbounds double, double* %149, i32 17
  %151 = load double, double* %150, align 8
  %152 = load double*, double** %12, align 4
  %153 = getelementptr inbounds double, double* %152, i32 17
  %154 = load double, double* %153, align 8
  %155 = fmul double %151, %154
  %156 = fadd double %148, %155
  %157 = load double*, double** %3, align 4
  %158 = load i32, i32* %11, align 4
  %159 = getelementptr inbounds [12 x i32], [12 x i32]* @all, i32 0, i32 %158
  %160 = load i32, i32* %159, align 4
  %161 = getelementptr inbounds double, double* %157, i32 %160
  store double %156, double* %161, align 8
  %162 = load double*, double** %12, align 4
  %163 = getelementptr inbounds double, double* %162, i32 18
  store double* %163, double** %12, align 4
  br label %164

; <label>:164:                                    ; preds = %13
  %165 = load i32, i32* %11, align 4
  %166 = add nsw i32 %165, -1
  store i32 %166, i32* %11, align 4
  %167 = icmp sge i32 %166, 0
  br i1 %167, label %13, label %168

; <label>:168:                                    ; preds = %164
  %169 = load double*, double** %4, align 4
  %170 = getelementptr inbounds double, double* %169, i32 0
  %171 = load double, double* %170, align 8
  %172 = load double*, double** %4, align 4
  %173 = getelementptr inbounds double, double* %172, i32 5
  %174 = load double, double* %173, align 8
  %175 = fadd double %171, %174
  %176 = load double*, double** %4, align 4
  %177 = getelementptr inbounds double, double* %176, i32 15
  %178 = load double, double* %177, align 8
  %179 = fadd double %175, %178
  store double %179, double* %5, align 8
  %180 = load double*, double** %4, align 4
  %181 = getelementptr inbounds double, double* %180, i32 1
  %182 = load double, double* %181, align 8
  %183 = load double*, double** %4, align 4
  %184 = getelementptr inbounds double, double* %183, i32 4
  %185 = load double, double* %184, align 8
  %186 = fadd double %182, %185
  %187 = load double*, double** %4, align 4
  %188 = getelementptr inbounds double, double* %187, i32 16
  %189 = load double, double* %188, align 8
  %190 = fadd double %186, %189
  store double %190, double* %6, align 8
  %191 = load double*, double** %4, align 4
  %192 = getelementptr inbounds double, double* %191, i32 2
  %193 = load double, double* %192, align 8
  %194 = load double*, double** %4, align 4
  %195 = getelementptr inbounds double, double* %194, i32 3
  %196 = load double, double* %195, align 8
  %197 = fadd double %193, %196
  %198 = load double*, double** %4, align 4
  %199 = getelementptr inbounds double, double* %198, i32 17
  %200 = load double, double* %199, align 8
  %201 = fadd double %197, %200
  store double %201, double* %7, align 8
  %202 = load double*, double** %4, align 4
  %203 = getelementptr inbounds double, double* %202, i32 6
  %204 = load double, double* %203, align 8
  %205 = load double*, double** %4, align 4
  %206 = getelementptr inbounds double, double* %205, i32 9
  %207 = load double, double* %206, align 8
  %208 = fsub double %204, %207
  %209 = load double*, double** %4, align 4
  %210 = getelementptr inbounds double, double* %209, i32 14
  %211 = load double, double* %210, align 8
  %212 = fadd double %208, %211
  store double %212, double* %8, align 8
  %213 = load double*, double** %4, align 4
  %214 = getelementptr inbounds double, double* %213, i32 7
  %215 = load double, double* %214, align 8
  %216 = load double*, double** %4, align 4
  %217 = getelementptr inbounds double, double* %216, i32 10
  %218 = load double, double* %217, align 8
  %219 = fsub double %215, %218
  %220 = load double*, double** %4, align 4
  %221 = getelementptr inbounds double, double* %220, i32 13
  %222 = load double, double* %221, align 8
  %223 = fadd double %219, %222
  store double %223, double* %9, align 8
  %224 = load double*, double** %4, align 4
  %225 = getelementptr inbounds double, double* %224, i32 8
  %226 = load double, double* %225, align 8
  %227 = load double*, double** %4, align 4
  %228 = getelementptr inbounds double, double* %227, i32 11
  %229 = load double, double* %228, align 8
  %230 = fsub double %226, %229
  %231 = load double*, double** %4, align 4
  %232 = getelementptr inbounds double, double* %231, i32 12
  %233 = load double, double* %232, align 8
  %234 = fadd double %230, %233
  store double %234, double* %10, align 8
  %235 = load double, double* %5, align 8
  %236 = load double*, double** %12, align 4
  %237 = getelementptr inbounds double, double* %236, i32 0
  %238 = load double, double* %237, align 8
  %239 = fmul double %235, %238
  %240 = load double, double* %6, align 8
  %241 = load double*, double** %12, align 4
  %242 = getelementptr inbounds double, double* %241, i32 1
  %243 = load double, double* %242, align 8
  %244 = fmul double %240, %243
  %245 = fadd double %239, %244
  %246 = load double, double* %7, align 8
  %247 = load double*, double** %12, align 4
  %248 = getelementptr inbounds double, double* %247, i32 2
  %249 = load double, double* %248, align 8
  %250 = fmul double %246, %249
  %251 = fadd double %245, %250
  %252 = load double, double* %8, align 8
  %253 = load double*, double** %12, align 4
  %254 = getelementptr inbounds double, double* %253, i32 3
  %255 = load double, double* %254, align 8
  %256 = fmul double %252, %255
  %257 = fadd double %251, %256
  %258 = load double, double* %9, align 8
  %259 = load double*, double** %12, align 4
  %260 = getelementptr inbounds double, double* %259, i32 4
  %261 = load double, double* %260, align 8
  %262 = fmul double %258, %261
  %263 = fadd double %257, %262
  %264 = load double, double* %10, align 8
  %265 = load double*, double** %12, align 4
  %266 = getelementptr inbounds double, double* %265, i32 5
  %267 = load double, double* %266, align 8
  %268 = fmul double %264, %267
  %269 = fadd double %263, %268
  %270 = load double*, double** %3, align 4
  %271 = getelementptr inbounds double, double* %270, i32 16
  store double %269, double* %271, align 8
  %272 = load double*, double** %12, align 4
  %273 = getelementptr inbounds double, double* %272, i32 6
  store double* %273, double** %12, align 4
  %274 = load double, double* %5, align 8
  %275 = load double*, double** %12, align 4
  %276 = getelementptr inbounds double, double* %275, i32 0
  %277 = load double, double* %276, align 8
  %278 = fmul double %274, %277
  %279 = load double, double* %6, align 8
  %280 = load double*, double** %12, align 4
  %281 = getelementptr inbounds double, double* %280, i32 1
  %282 = load double, double* %281, align 8
  %283 = fmul double %279, %282
  %284 = fadd double %278, %283
  %285 = load double, double* %7, align 8
  %286 = load double*, double** %12, align 4
  %287 = getelementptr inbounds double, double* %286, i32 2
  %288 = load double, double* %287, align 8
  %289 = fmul double %285, %288
  %290 = fadd double %284, %289
  %291 = load double, double* %8, align 8
  %292 = load double*, double** %12, align 4
  %293 = getelementptr inbounds double, double* %292, i32 3
  %294 = load double, double* %293, align 8
  %295 = fmul double %291, %294
  %296 = fadd double %290, %295
  %297 = load double, double* %9, align 8
  %298 = load double*, double** %12, align 4
  %299 = getelementptr inbounds double, double* %298, i32 4
  %300 = load double, double* %299, align 8
  %301 = fmul double %297, %300
  %302 = fadd double %296, %301
  %303 = load double, double* %10, align 8
  %304 = load double*, double** %12, align 4
  %305 = getelementptr inbounds double, double* %304, i32 5
  %306 = load double, double* %305, align 8
  %307 = fmul double %303, %306
  %308 = fadd double %302, %307
  %309 = load double*, double** %3, align 4
  %310 = getelementptr inbounds double, double* %309, i32 10
  store double %308, double* %310, align 8
  %311 = load double*, double** %12, align 4
  %312 = getelementptr inbounds double, double* %311, i32 6
  store double* %312, double** %12, align 4
  %313 = load double, double* %5, align 8
  %314 = load double*, double** %12, align 4
  %315 = getelementptr inbounds double, double* %314, i32 0
  %316 = load double, double* %315, align 8
  %317 = fmul double %313, %316
  %318 = load double, double* %6, align 8
  %319 = load double*, double** %12, align 4
  %320 = getelementptr inbounds double, double* %319, i32 1
  %321 = load double, double* %320, align 8
  %322 = fmul double %318, %321
  %323 = fadd double %317, %322
  %324 = load double, double* %7, align 8
  %325 = load double*, double** %12, align 4
  %326 = getelementptr inbounds double, double* %325, i32 2
  %327 = load double, double* %326, align 8
  %328 = fmul double %324, %327
  %329 = fadd double %323, %328
  %330 = load double, double* %8, align 8
  %331 = load double*, double** %12, align 4
  %332 = getelementptr inbounds double, double* %331, i32 3
  %333 = load double, double* %332, align 8
  %334 = fmul double %330, %333
  %335 = fadd double %329, %334
  %336 = load double, double* %9, align 8
  %337 = load double*, double** %12, align 4
  %338 = getelementptr inbounds double, double* %337, i32 4
  %339 = load double, double* %338, align 8
  %340 = fmul double %336, %339
  %341 = fadd double %335, %340
  %342 = load double, double* %10, align 8
  %343 = load double*, double** %12, align 4
  %344 = getelementptr inbounds double, double* %343, i32 5
  %345 = load double, double* %344, align 8
  %346 = fmul double %342, %345
  %347 = fadd double %341, %346
  %348 = load double*, double** %3, align 4
  %349 = getelementptr inbounds double, double* %348, i32 7
  store double %347, double* %349, align 8
  %350 = load double*, double** %12, align 4
  %351 = getelementptr inbounds double, double* %350, i32 6
  store double* %351, double** %12, align 4
  %352 = load double, double* %5, align 8
  %353 = load double*, double** %12, align 4
  %354 = getelementptr inbounds double, double* %353, i32 0
  %355 = load double, double* %354, align 8
  %356 = fmul double %352, %355
  %357 = load double, double* %6, align 8
  %358 = load double*, double** %12, align 4
  %359 = getelementptr inbounds double, double* %358, i32 1
  %360 = load double, double* %359, align 8
  %361 = fmul double %357, %360
  %362 = fadd double %356, %361
  %363 = load double, double* %7, align 8
  %364 = load double*, double** %12, align 4
  %365 = getelementptr inbounds double, double* %364, i32 2
  %366 = load double, double* %365, align 8
  %367 = fmul double %363, %366
  %368 = fadd double %362, %367
  %369 = load double, double* %8, align 8
  %370 = load double*, double** %12, align 4
  %371 = getelementptr inbounds double, double* %370, i32 3
  %372 = load double, double* %371, align 8
  %373 = fmul double %369, %372
  %374 = fadd double %368, %373
  %375 = load double, double* %9, align 8
  %376 = load double*, double** %12, align 4
  %377 = getelementptr inbounds double, double* %376, i32 4
  %378 = load double, double* %377, align 8
  %379 = fmul double %375, %378
  %380 = fadd double %374, %379
  %381 = load double, double* %10, align 8
  %382 = load double*, double** %12, align 4
  %383 = getelementptr inbounds double, double* %382, i32 5
  %384 = load double, double* %383, align 8
  %385 = fmul double %381, %384
  %386 = fadd double %380, %385
  %387 = load double*, double** %3, align 4
  %388 = getelementptr inbounds double, double* %387, i32 1
  store double %386, double* %388, align 8
  %389 = load double*, double** %12, align 4
  %390 = getelementptr inbounds double, double* %389, i32 6
  store double* %390, double** %12, align 4
  %391 = load double, double* %5, align 8
  %392 = load double, double* %6, align 8
  %393 = fsub double %391, %392
  %394 = load double, double* %10, align 8
  %395 = fadd double %393, %394
  store double %395, double* %5, align 8
  %396 = load double, double* %7, align 8
  %397 = load double, double* %8, align 8
  %398 = fsub double %396, %397
  %399 = load double, double* %9, align 8
  %400 = fsub double %398, %399
  store double %400, double* %7, align 8
  %401 = load double, double* %5, align 8
  %402 = load double*, double** %12, align 4
  %403 = getelementptr inbounds double, double* %402, i32 0
  %404 = load double, double* %403, align 8
  %405 = fmul double %401, %404
  %406 = load double, double* %7, align 8
  %407 = load double*, double** %12, align 4
  %408 = getelementptr inbounds double, double* %407, i32 1
  %409 = load double, double* %408, align 8
  %410 = fmul double %406, %409
  %411 = fadd double %405, %410
  %412 = load double*, double** %3, align 4
  %413 = getelementptr inbounds double, double* %412, i32 13
  store double %411, double* %413, align 8
  %414 = load double, double* %5, align 8
  %415 = load double*, double** %12, align 4
  %416 = getelementptr inbounds double, double* %415, i32 2
  %417 = load double, double* %416, align 8
  %418 = fmul double %414, %417
  %419 = load double, double* %7, align 8
  %420 = load double*, double** %12, align 4
  %421 = getelementptr inbounds double, double* %420, i32 3
  %422 = load double, double* %421, align 8
  %423 = fmul double %419, %422
  %424 = fadd double %418, %423
  %425 = load double*, double** %3, align 4
  %426 = getelementptr inbounds double, double* %425, i32 4
  store double %424, double* %426, align 8
  ret void
}

; Function Attrs: nounwind
declare arm_aapcscc double @sqrt(double) #2

; Function Attrs: nounwind
declare arm_aapcscc double @tan(double) #2

; Function Attrs: nounwind
define arm_aapcscc i32 @ReadByte(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %5 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %4)
  %6 = and i32 %5, 255
  store i32 %6, i32* %3, align 4
  %7 = load i32, i32* %3, align 4
  %8 = and i32 %7, 128
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %13

; <label>:10:                                     ; preds = %1
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %11, 256
  store i32 %12, i32* %3, align 4
  br label %13

; <label>:13:                                     ; preds = %10, %1
  %14 = load i32, i32* %3, align 4
  ret i32 %14
}

declare arm_aapcscc i32 @getc(%struct._IO_FILE*) #3

; Function Attrs: nounwind
define arm_aapcscc i32 @Read16BitsLowHigh(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %7 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %6)
  %8 = and i32 255, %7
  store i32 %8, i32* %3, align 4
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %10 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %9)
  %11 = and i32 255, %10
  store i32 %11, i32* %4, align 4
  %12 = load i32, i32* %4, align 4
  %13 = shl i32 %12, 8
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %5, align 4
  %16 = load i32, i32* %5, align 4
  %17 = and i32 %16, 32768
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %22

; <label>:19:                                     ; preds = %1
  %20 = load i32, i32* %5, align 4
  %21 = sub nsw i32 %20, 65536
  store i32 %21, i32* %5, align 4
  br label %22

; <label>:22:                                     ; preds = %19, %1
  %23 = load i32, i32* %5, align 4
  ret i32 %23
}

; Function Attrs: nounwind
define arm_aapcscc i32 @Read16BitsHighLow(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %7 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %6)
  %8 = and i32 255, %7
  store i32 %8, i32* %3, align 4
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %10 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %9)
  %11 = and i32 255, %10
  store i32 %11, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = shl i32 %12, 8
  %14 = load i32, i32* %4, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %5, align 4
  %16 = load i32, i32* %5, align 4
  %17 = and i32 %16, 32768
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %22

; <label>:19:                                     ; preds = %1
  %20 = load i32, i32* %5, align 4
  %21 = sub nsw i32 %20, 65536
  store i32 %21, i32* %5, align 4
  br label %22

; <label>:22:                                     ; preds = %19, %1
  %23 = load i32, i32* %5, align 4
  ret i32 %23
}

; Function Attrs: nounwind
define arm_aapcscc void @Write8Bits(%struct._IO_FILE*, i32) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %4 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 255
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %8 = call arm_aapcscc i32 @putc(i32 %6, %struct._IO_FILE* %7)
  ret void
}

declare arm_aapcscc i32 @putc(i32, %struct._IO_FILE*) #3

; Function Attrs: nounwind
define arm_aapcscc void @Write16BitsLowHigh(%struct._IO_FILE*, i32) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %4 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 255
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %8 = call arm_aapcscc i32 @putc(i32 %6, %struct._IO_FILE* %7)
  %9 = load i32, i32* %4, align 4
  %10 = ashr i32 %9, 8
  %11 = and i32 %10, 255
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %13 = call arm_aapcscc i32 @putc(i32 %11, %struct._IO_FILE* %12)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @Write16BitsHighLow(%struct._IO_FILE*, i32) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %4 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = ashr i32 %5, 8
  %7 = and i32 %6, 255
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = call arm_aapcscc i32 @putc(i32 %7, %struct._IO_FILE* %8)
  %10 = load i32, i32* %4, align 4
  %11 = and i32 %10, 255
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %13 = call arm_aapcscc i32 @putc(i32 %11, %struct._IO_FILE* %12)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @Read24BitsHighLow(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %8 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %7)
  %9 = and i32 255, %8
  store i32 %9, i32* %3, align 4
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %11 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %10)
  %12 = and i32 255, %11
  store i32 %12, i32* %4, align 4
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %14 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %13)
  %15 = and i32 255, %14
  store i32 %15, i32* %5, align 4
  %16 = load i32, i32* %3, align 4
  %17 = shl i32 %16, 16
  %18 = load i32, i32* %4, align 4
  %19 = shl i32 %18, 8
  %20 = add nsw i32 %17, %19
  %21 = load i32, i32* %5, align 4
  %22 = add nsw i32 %20, %21
  store i32 %22, i32* %6, align 4
  %23 = load i32, i32* %6, align 4
  %24 = and i32 %23, 8388608
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %29

; <label>:26:                                     ; preds = %1
  %27 = load i32, i32* %6, align 4
  %28 = sub nsw i32 %27, 16777216
  store i32 %28, i32* %6, align 4
  br label %29

; <label>:29:                                     ; preds = %26, %1
  %30 = load i32, i32* %6, align 4
  ret i32 %30
}

; Function Attrs: nounwind
define arm_aapcscc i32 @Read32Bits(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %7 = call arm_aapcscc i32 @Read16BitsLowHigh(%struct._IO_FILE* %6)
  %8 = and i32 65535, %7
  store i32 %8, i32* %3, align 4
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %10 = call arm_aapcscc i32 @Read16BitsLowHigh(%struct._IO_FILE* %9)
  %11 = and i32 65535, %10
  store i32 %11, i32* %4, align 4
  %12 = load i32, i32* %4, align 4
  %13 = shl i32 %12, 16
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %5, align 4
  %16 = load i32, i32* %5, align 4
  ret i32 %16
}

; Function Attrs: nounwind
define arm_aapcscc i32 @Read32BitsHighLow(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %7 = call arm_aapcscc i32 @Read16BitsHighLow(%struct._IO_FILE* %6)
  %8 = and i32 65535, %7
  store i32 %8, i32* %3, align 4
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %10 = call arm_aapcscc i32 @Read16BitsHighLow(%struct._IO_FILE* %9)
  %11 = and i32 65535, %10
  store i32 %11, i32* %4, align 4
  %12 = load i32, i32* %3, align 4
  %13 = shl i32 %12, 16
  %14 = load i32, i32* %4, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %5, align 4
  %16 = load i32, i32* %5, align 4
  ret i32 %16
}

; Function Attrs: nounwind
define arm_aapcscc void @Write32Bits(%struct._IO_FILE*, i32) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %4 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = and i32 %6, 65535
  call arm_aapcscc void @Write16BitsLowHigh(%struct._IO_FILE* %5, i32 %7)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = load i32, i32* %4, align 4
  %10 = ashr i32 %9, 16
  %11 = and i32 %10, 65535
  call arm_aapcscc void @Write16BitsLowHigh(%struct._IO_FILE* %8, i32 %11)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @Write32BitsLowHigh(%struct._IO_FILE*, i32) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %4 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = and i32 %6, 65535
  call arm_aapcscc void @Write16BitsLowHigh(%struct._IO_FILE* %5, i32 %7)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = load i32, i32* %4, align 4
  %10 = ashr i32 %9, 16
  %11 = and i32 %10, 65535
  call arm_aapcscc void @Write16BitsLowHigh(%struct._IO_FILE* %8, i32 %11)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @Write32BitsHighLow(%struct._IO_FILE*, i32) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %4 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = ashr i32 %6, 16
  %8 = and i32 %7, 65535
  call arm_aapcscc void @Write16BitsHighLow(%struct._IO_FILE* %5, i32 %8)
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %10 = load i32, i32* %4, align 4
  %11 = and i32 %10, 65535
  call arm_aapcscc void @Write16BitsHighLow(%struct._IO_FILE* %9, i32 %11)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @ReadBytes(%struct._IO_FILE*, i8*, i32) #0 {
  %4 = alloca %struct._IO_FILE*, align 4
  %5 = alloca i8*, align 4
  %6 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %4, align 4
  store i8* %1, i8** %5, align 4
  store i32 %2, i32* %6, align 4
  br label %7

; <label>:7:                                      ; preds = %19, %3
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 4
  %9 = call arm_aapcscc i32 @feof(%struct._IO_FILE* %8)
  %10 = icmp ne i32 %9, 0
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i32
  %13 = load i32, i32* %6, align 4
  %14 = add nsw i32 %13, -1
  store i32 %14, i32* %6, align 4
  %15 = icmp sgt i32 %13, 0
  %16 = zext i1 %15 to i32
  %17 = and i32 %12, %16
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %25

; <label>:19:                                     ; preds = %7
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 4
  %21 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %20)
  %22 = trunc i32 %21 to i8
  %23 = load i8*, i8** %5, align 4
  %24 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %24, i8** %5, align 4
  store i8 %22, i8* %23, align 1
  br label %7

; <label>:25:                                     ; preds = %7
  ret void
}

declare arm_aapcscc i32 @feof(%struct._IO_FILE*) #3

; Function Attrs: nounwind
define arm_aapcscc void @ReadBytesSwapped(%struct._IO_FILE*, i8*, i32) #0 {
  %4 = alloca %struct._IO_FILE*, align 4
  %5 = alloca i8*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %4, align 4
  store i8* %1, i8** %5, align 4
  store i32 %2, i32* %6, align 4
  %8 = load i8*, i8** %5, align 4
  store i8* %8, i8** %7, align 4
  br label %9

; <label>:9:                                      ; preds = %21, %3
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 4
  %11 = call arm_aapcscc i32 @feof(%struct._IO_FILE* %10)
  %12 = icmp ne i32 %11, 0
  %13 = xor i1 %12, true
  %14 = zext i1 %13 to i32
  %15 = load i32, i32* %6, align 4
  %16 = add nsw i32 %15, -1
  store i32 %16, i32* %6, align 4
  %17 = icmp sgt i32 %15, 0
  %18 = zext i1 %17 to i32
  %19 = and i32 %14, %18
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %27

; <label>:21:                                     ; preds = %9
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 4
  %23 = call arm_aapcscc i32 @getc(%struct._IO_FILE* %22)
  %24 = trunc i32 %23 to i8
  %25 = load i8*, i8** %7, align 4
  %26 = getelementptr inbounds i8, i8* %25, i32 1
  store i8* %26, i8** %7, align 4
  store i8 %24, i8* %25, align 1
  br label %9

; <label>:27:                                     ; preds = %9
  %28 = load i8*, i8** %7, align 4
  %29 = getelementptr inbounds i8, i8* %28, i32 -1
  store i8* %29, i8** %7, align 4
  br label %30

; <label>:30:                                     ; preds = %44, %27
  %31 = load i8*, i8** %5, align 4
  %32 = load i8*, i8** %7, align 4
  %33 = icmp ult i8* %31, %32
  br i1 %33, label %34, label %49

; <label>:34:                                     ; preds = %30
  %35 = load i8*, i8** %5, align 4
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  store i32 %37, i32* %6, align 4
  %38 = load i8*, i8** %7, align 4
  %39 = load i8, i8* %38, align 1
  %40 = load i8*, i8** %5, align 4
  store i8 %39, i8* %40, align 1
  %41 = load i32, i32* %6, align 4
  %42 = trunc i32 %41 to i8
  %43 = load i8*, i8** %7, align 4
  store i8 %42, i8* %43, align 1
  br label %44

; <label>:44:                                     ; preds = %34
  %45 = load i8*, i8** %5, align 4
  %46 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %46, i8** %5, align 4
  %47 = load i8*, i8** %7, align 4
  %48 = getelementptr inbounds i8, i8* %47, i32 -1
  store i8* %48, i8** %7, align 4
  br label %30

; <label>:49:                                     ; preds = %30
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @WriteBytes(%struct._IO_FILE*, i8*, i32) #0 {
  %4 = alloca %struct._IO_FILE*, align 4
  %5 = alloca i8*, align 4
  %6 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %4, align 4
  store i8* %1, i8** %5, align 4
  store i32 %2, i32* %6, align 4
  br label %7

; <label>:7:                                      ; preds = %11, %3
  %8 = load i32, i32* %6, align 4
  %9 = add nsw i32 %8, -1
  store i32 %9, i32* %6, align 4
  %10 = icmp sgt i32 %8, 0
  br i1 %10, label %11, label %18

; <label>:11:                                     ; preds = %7
  %12 = load i8*, i8** %5, align 4
  %13 = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %13, i8** %5, align 4
  %14 = load i8, i8* %12, align 1
  %15 = zext i8 %14 to i32
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 4
  %17 = call arm_aapcscc i32 @putc(i32 %15, %struct._IO_FILE* %16)
  br label %7

; <label>:18:                                     ; preds = %7
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @WriteBytesSwapped(%struct._IO_FILE*, i8*, i32) #0 {
  %4 = alloca %struct._IO_FILE*, align 4
  %5 = alloca i8*, align 4
  %6 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %4, align 4
  store i8* %1, i8** %5, align 4
  store i32 %2, i32* %6, align 4
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %7, 1
  %9 = load i8*, i8** %5, align 4
  %10 = getelementptr inbounds i8, i8* %9, i32 %8
  store i8* %10, i8** %5, align 4
  br label %11

; <label>:11:                                     ; preds = %15, %3
  %12 = load i32, i32* %6, align 4
  %13 = add nsw i32 %12, -1
  store i32 %13, i32* %6, align 4
  %14 = icmp sgt i32 %12, 0
  br i1 %14, label %15, label %22

; <label>:15:                                     ; preds = %11
  %16 = load i8*, i8** %5, align 4
  %17 = getelementptr inbounds i8, i8* %16, i32 -1
  store i8* %17, i8** %5, align 4
  %18 = load i8, i8* %16, align 1
  %19 = zext i8 %18 to i32
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 4
  %21 = call arm_aapcscc i32 @putc(i32 %19, %struct._IO_FILE* %20)
  br label %11

; <label>:22:                                     ; preds = %11
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc double @ReadIeeeFloatHighLow(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca [4 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %5 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i32 0, i32 0
  call arm_aapcscc void @ReadBytes(%struct._IO_FILE* %4, i8* %5, i32 4)
  %6 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i32 0, i32 0
  %7 = call arm_aapcscc double @ConvertFromIeeeSingle(i8* %6)
  ret double %7
}

; Function Attrs: nounwind
define arm_aapcscc double @ReadIeeeFloatLowHigh(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca [4 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %5 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i32 0, i32 0
  call arm_aapcscc void @ReadBytesSwapped(%struct._IO_FILE* %4, i8* %5, i32 4)
  %6 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i32 0, i32 0
  %7 = call arm_aapcscc double @ConvertFromIeeeSingle(i8* %6)
  ret double %7
}

; Function Attrs: nounwind
define arm_aapcscc double @ReadIeeeDoubleHighLow(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca [8 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %5 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i32 0, i32 0
  call arm_aapcscc void @ReadBytes(%struct._IO_FILE* %4, i8* %5, i32 8)
  %6 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i32 0, i32 0
  %7 = call arm_aapcscc double @ConvertFromIeeeDouble(i8* %6)
  ret double %7
}

; Function Attrs: nounwind
define arm_aapcscc double @ReadIeeeDoubleLowHigh(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca [8 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %5 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i32 0, i32 0
  call arm_aapcscc void @ReadBytesSwapped(%struct._IO_FILE* %4, i8* %5, i32 8)
  %6 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i32 0, i32 0
  %7 = call arm_aapcscc double @ConvertFromIeeeDouble(i8* %6)
  ret double %7
}

; Function Attrs: nounwind
define arm_aapcscc double @ReadIeeeExtendedHighLow(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca [10 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %5 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i32 0, i32 0
  call arm_aapcscc void @ReadBytes(%struct._IO_FILE* %4, i8* %5, i32 10)
  %6 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i32 0, i32 0
  %7 = call arm_aapcscc double @ConvertFromIeeeExtended(i8* %6)
  ret double %7
}

; Function Attrs: nounwind
define arm_aapcscc double @ReadIeeeExtendedLowHigh(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca [10 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %5 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i32 0, i32 0
  call arm_aapcscc void @ReadBytesSwapped(%struct._IO_FILE* %4, i8* %5, i32 10)
  %6 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i32 0, i32 0
  %7 = call arm_aapcscc double @ConvertFromIeeeExtended(i8* %6)
  ret double %7
}

; Function Attrs: nounwind
define arm_aapcscc void @WriteIeeeFloatLowHigh(%struct._IO_FILE*, double) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %4 = alloca double, align 8
  %5 = alloca [4 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store double %1, double* %4, align 8
  %6 = load double, double* %4, align 8
  %7 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @ConvertToIeeeSingle(double %6, i8* %7)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @WriteBytesSwapped(%struct._IO_FILE* %8, i8* %9, i32 4)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @WriteIeeeFloatHighLow(%struct._IO_FILE*, double) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %4 = alloca double, align 8
  %5 = alloca [4 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store double %1, double* %4, align 8
  %6 = load double, double* %4, align 8
  %7 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @ConvertToIeeeSingle(double %6, i8* %7)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @WriteBytes(%struct._IO_FILE* %8, i8* %9, i32 4)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @WriteIeeeDoubleLowHigh(%struct._IO_FILE*, double) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %4 = alloca double, align 8
  %5 = alloca [8 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store double %1, double* %4, align 8
  %6 = load double, double* %4, align 8
  %7 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @ConvertToIeeeDouble(double %6, i8* %7)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @WriteBytesSwapped(%struct._IO_FILE* %8, i8* %9, i32 8)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @WriteIeeeDoubleHighLow(%struct._IO_FILE*, double) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %4 = alloca double, align 8
  %5 = alloca [8 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store double %1, double* %4, align 8
  %6 = load double, double* %4, align 8
  %7 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @ConvertToIeeeDouble(double %6, i8* %7)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = getelementptr inbounds [8 x i8], [8 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @WriteBytes(%struct._IO_FILE* %8, i8* %9, i32 8)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @WriteIeeeExtendedLowHigh(%struct._IO_FILE*, double) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %4 = alloca double, align 8
  %5 = alloca [10 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store double %1, double* %4, align 8
  %6 = load double, double* %4, align 8
  %7 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @ConvertToIeeeExtended(double %6, i8* %7)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @WriteBytesSwapped(%struct._IO_FILE* %8, i8* %9, i32 10)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @WriteIeeeExtendedHighLow(%struct._IO_FILE*, double) #0 {
  %3 = alloca %struct._IO_FILE*, align 4
  %4 = alloca double, align 8
  %5 = alloca [10 x i8], align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 4
  store double %1, double* %4, align 8
  %6 = load double, double* %4, align 8
  %7 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @ConvertToIeeeExtended(double %6, i8* %7)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 4
  %9 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i32 0, i32 0
  call arm_aapcscc void @WriteBytes(%struct._IO_FILE* %8, i8* %9, i32 10)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @L3psycho_anal(%struct.lame_global_flags*, i16**, i32, double*, double*, double*, [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]*, double*, double*, i32*) #0 {
  %12 = alloca %struct.lame_global_flags*, align 4
  %13 = alloca i16**, align 4
  %14 = alloca i32, align 4
  %15 = alloca double*, align 4
  %16 = alloca double*, align 4
  %17 = alloca double*, align 4
  %18 = alloca [2 x %struct.III_psy_ratio]*, align 4
  %19 = alloca [2 x %struct.III_psy_ratio]*, align 4
  %20 = alloca double*, align 4
  %21 = alloca double*, align 4
  %22 = alloca i32*, align 4
  %23 = alloca [1024 x float]*, align 4
  %24 = alloca [3 x [256 x float]]*, align 4
  %25 = alloca [4 x float], align 4
  %26 = alloca double, align 8
  %27 = alloca double, align 8
  %28 = alloca [2 x i32], align 4
  %29 = alloca [2 x i32], align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca float, align 4
  %39 = alloca [63 x double], align 8
  %40 = alloca double, align 8
  %41 = alloca double, align 8
  %42 = alloca double, align 8
  %43 = alloca double, align 8
  %44 = alloca float, align 4
  %45 = alloca float, align 4
  %46 = alloca float, align 4
  %47 = alloca float, align 4
  %48 = alloca float, align 4
  %49 = alloca float, align 4
  %50 = alloca float, align 4
  %51 = alloca float, align 4
  %52 = alloca float, align 4
  %53 = alloca float, align 4
  %54 = alloca float, align 4
  %55 = alloca float, align 4
  %56 = alloca float, align 4
  %57 = alloca float, align 4
  %58 = alloca float, align 4
  %59 = alloca float, align 4
  %60 = alloca float, align 4
  %61 = alloca float, align 4
  %62 = alloca float, align 4
  %63 = alloca float, align 4
  %64 = alloca float, align 4
  %65 = alloca float, align 4
  %66 = alloca float, align 4
  %67 = alloca float, align 4
  %68 = alloca float, align 4
  %69 = alloca float, align 4
  %70 = alloca float, align 4
  %71 = alloca float, align 4
  %72 = alloca float, align 4
  %73 = alloca float, align 4
  %74 = alloca float, align 4
  %75 = alloca float, align 4
  %76 = alloca float, align 4
  %77 = alloca float, align 4
  %78 = alloca float, align 4
  %79 = alloca float, align 4
  %80 = alloca float, align 4
  %81 = alloca float, align 4
  %82 = alloca double, align 8
  %83 = alloca double, align 8
  %84 = alloca i32, align 4
  %85 = alloca i32, align 4
  %86 = alloca double, align 8
  %87 = alloca double, align 8
  %88 = alloca double, align 8
  %89 = alloca double, align 8
  %90 = alloca double, align 8
  %91 = alloca float, align 4
  %92 = alloca float, align 4
  %93 = alloca float, align 4
  %94 = alloca float, align 4
  %95 = alloca float, align 4
  %96 = alloca double, align 8
  %97 = alloca double, align 8
  %98 = alloca i32, align 4
  %99 = alloca float, align 4
  %100 = alloca double, align 8
  %101 = alloca double, align 8
  %102 = alloca double, align 8
  %103 = alloca double, align 8
  %104 = alloca double, align 8
  %105 = alloca double, align 8
  %106 = alloca i32, align 4
  %107 = alloca i32, align 4
  %108 = alloca double, align 8
  %109 = alloca double, align 8
  %110 = alloca double, align 8
  %111 = alloca double, align 8
  %112 = alloca double, align 8
  %113 = alloca i32, align 4
  %114 = alloca float, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %12, align 4
  store i16** %1, i16*** %13, align 4
  store i32 %2, i32* %14, align 4
  store double* %3, double** %15, align 4
  store double* %4, double** %16, align 4
  store double* %5, double** %17, align 4
  store [2 x %struct.III_psy_ratio]* %6, [2 x %struct.III_psy_ratio]** %18, align 4
  store [2 x %struct.III_psy_ratio]* %7, [2 x %struct.III_psy_ratio]** %19, align 4
  store double* %8, double** %20, align 4
  store double* %9, double** %21, align 4
  store i32* %10, i32** %22, align 4
  store double 0.000000e+00, double* %26, align 8
  store double 0.000000e+00, double* %27, align 8
  %115 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %116 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %115, i32 0, i32 39
  %117 = load i32, i32* %116, align 4
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %530

; <label>:119:                                    ; preds = %11
  %120 = load i32, i32* %14, align 4
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %530

; <label>:122:                                    ; preds = %119
  store i32 3, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 0), align 4
  store i32 3, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 1), align 4
  %123 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %124 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %123, i32 0, i32 3
  %125 = load i32, i32* %124, align 4
  store i32 %125, i32* %33, align 4
  %126 = load i32, i32* %33, align 4
  switch i32 %126, label %133 [
    i32 32000, label %127
    i32 44100, label %128
    i32 48000, label %129
    i32 16000, label %130
    i32 22050, label %131
    i32 24000, label %132
  ]

; <label>:127:                                    ; preds = %122
  br label %137

; <label>:128:                                    ; preds = %122
  br label %137

; <label>:129:                                    ; preds = %122
  br label %137

; <label>:130:                                    ; preds = %122
  br label %137

; <label>:131:                                    ; preds = %122
  br label %137

; <label>:132:                                    ; preds = %122
  br label %137

; <label>:133:                                    ; preds = %122
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %135 = load i32, i32* %33, align 4
  %136 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %134, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.205, i32 0, i32 0), i32 %135)
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:137:                                    ; preds = %132, %131, %130, %129, %128, %127
  call void @llvm.memset.p0i8.i32(i8* bitcast ([4 x [2 x [513 x float]]]* @L3psycho_anal.rx_sav to i8*), i8 0, i32 16416, i32 4, i1 false)
  call void @llvm.memset.p0i8.i32(i8* bitcast ([4 x [2 x [513 x float]]]* @L3psycho_anal.ax_sav to i8*), i8 0, i32 16416, i32 4, i1 false)
  call void @llvm.memset.p0i8.i32(i8* bitcast ([4 x [2 x [513 x float]]]* @L3psycho_anal.bx_sav to i8*), i8 0, i32 16416, i32 4, i1 false)
  call void @llvm.memset.p0i8.i32(i8* bitcast ([4 x %struct.III_psy_xmin]* @L3psycho_anal.en to i8*), i8 0, i32 1952, i32 8, i1 false)
  call void @llvm.memset.p0i8.i32(i8* bitcast ([4 x %struct.III_psy_xmin]* @L3psycho_anal.thm to i8*), i8 0, i32 1952, i32 8, i1 false)
  store i32 6, i32* @L3psycho_anal.cw_lower_index, align 4
  %138 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %139 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %138, i32 0, i32 35
  %140 = load float, float* %139, align 4
  %141 = fcmp ogt float %140, 0.000000e+00
  br i1 %141, label %142, label %146

; <label>:142:                                    ; preds = %137
  %143 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %144 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %143, i32 0, i32 35
  %145 = load float, float* %144, align 4
  store float %145, float* %38, align 4
  br label %147

; <label>:146:                                    ; preds = %137
  store float 0x4021BE4F80000000, float* %38, align 4
  br label %147

; <label>:147:                                    ; preds = %146, %142
  %148 = load float, float* %38, align 4
  %149 = fpext float %148 to double
  %150 = fmul double %149, 1.000000e+03
  %151 = fmul double %150, 1.024000e+03
  %152 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %153 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %152, i32 0, i32 3
  %154 = load i32, i32* %153, align 4
  %155 = sitofp i32 %154 to double
  %156 = fdiv double %151, %155
  %157 = fptosi double %156 to i32
  store i32 %157, i32* @L3psycho_anal.cw_upper_index, align 4
  %158 = load i32, i32* @L3psycho_anal.cw_upper_index, align 4
  %159 = icmp slt i32 509, %158
  br i1 %159, label %160, label %161

; <label>:160:                                    ; preds = %147
  br label %163

; <label>:161:                                    ; preds = %147
  %162 = load i32, i32* @L3psycho_anal.cw_upper_index, align 4
  br label %163

; <label>:163:                                    ; preds = %161, %160
  %164 = phi i32 [ 509, %160 ], [ %162, %161 ]
  store i32 %164, i32* @L3psycho_anal.cw_upper_index, align 4
  %165 = load i32, i32* @L3psycho_anal.cw_upper_index, align 4
  %166 = icmp sgt i32 6, %165
  br i1 %166, label %167, label %168

; <label>:167:                                    ; preds = %163
  br label %170

; <label>:168:                                    ; preds = %163
  %169 = load i32, i32* @L3psycho_anal.cw_upper_index, align 4
  br label %170

; <label>:170:                                    ; preds = %168, %167
  %171 = phi i32 [ 6, %167 ], [ %169, %168 ]
  store i32 %171, i32* @L3psycho_anal.cw_upper_index, align 4
  store i32 0, i32* %34, align 4
  br label %172

; <label>:172:                                    ; preds = %178, %170
  %173 = load i32, i32* %34, align 4
  %174 = icmp slt i32 %173, 513
  br i1 %174, label %175, label %181

; <label>:175:                                    ; preds = %172
  %176 = load i32, i32* %34, align 4
  %177 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i32 0, i32 %176
  store float 0x3FD99999A0000000, float* %177, align 4
  br label %178

; <label>:178:                                    ; preds = %175
  %179 = load i32, i32* %34, align 4
  %180 = add nsw i32 %179, 1
  store i32 %180, i32* %34, align 4
  br label %172

; <label>:181:                                    ; preds = %172
  store i32 0, i32* %36, align 4
  br label %182

; <label>:182:                                    ; preds = %198, %181
  %183 = load i32, i32* %36, align 4
  %184 = icmp slt i32 %183, 12
  br i1 %184, label %185, label %201

; <label>:185:                                    ; preds = %182
  %186 = load i32, i32* %36, align 4
  %187 = sitofp i32 %186 to double
  %188 = fmul double 0x400921FB54442D18, %187
  %189 = fdiv double %188, 1.200000e+01
  %190 = call arm_aapcscc double @cos(double %189) #7
  %191 = fsub double 1.000000e+00, %190
  %192 = fmul double 1.250000e+00, %191
  %193 = fsub double %192, 2.500000e+00
  store double %193, double* %40, align 8
  %194 = load double, double* %40, align 8
  %195 = call arm_aapcscc double @pow(double 1.000000e+01, double %194) #7
  %196 = load i32, i32* %36, align 4
  %197 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.mld_s, i32 0, i32 %196
  store double %195, double* %197, align 8
  br label %198

; <label>:198:                                    ; preds = %185
  %199 = load i32, i32* %36, align 4
  %200 = add nsw i32 %199, 1
  store i32 %200, i32* %36, align 4
  br label %182

; <label>:201:                                    ; preds = %182
  store i32 0, i32* %36, align 4
  br label %202

; <label>:202:                                    ; preds = %218, %201
  %203 = load i32, i32* %36, align 4
  %204 = icmp slt i32 %203, 21
  br i1 %204, label %205, label %221

; <label>:205:                                    ; preds = %202
  %206 = load i32, i32* %36, align 4
  %207 = sitofp i32 %206 to double
  %208 = fmul double 0x400921FB54442D18, %207
  %209 = fdiv double %208, 2.100000e+01
  %210 = call arm_aapcscc double @cos(double %209) #7
  %211 = fsub double 1.000000e+00, %210
  %212 = fmul double 1.250000e+00, %211
  %213 = fsub double %212, 2.500000e+00
  store double %213, double* %41, align 8
  %214 = load double, double* %41, align 8
  %215 = call arm_aapcscc double @pow(double 1.000000e+01, double %214) #7
  %216 = load i32, i32* %36, align 4
  %217 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.mld_l, i32 0, i32 %216
  store double %215, double* %217, align 8
  br label %218

; <label>:218:                                    ; preds = %205
  %219 = load i32, i32* %36, align 4
  %220 = add nsw i32 %219, 1
  store i32 %220, i32* %36, align 4
  br label %202

; <label>:221:                                    ; preds = %202
  store i32 0, i32* %33, align 4
  br label %222

; <label>:222:                                    ; preds = %228, %221
  %223 = load i32, i32* %33, align 4
  %224 = icmp slt i32 %223, 513
  br i1 %224, label %225, label %231

; <label>:225:                                    ; preds = %222
  %226 = load i32, i32* %33, align 4
  %227 = getelementptr inbounds [513 x i32], [513 x i32]* @L3psycho_anal.partition_l, i32 0, i32 %226
  store i32 -1, i32* %227, align 4
  br label %228

; <label>:228:                                    ; preds = %225
  %229 = load i32, i32* %33, align 4
  %230 = add nsw i32 %229, 1
  store i32 %230, i32* %33, align 4
  br label %222

; <label>:231:                                    ; preds = %222
  %232 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %233 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %232, i32 0, i32 3
  %234 = load i32, i32* %233, align 4
  %235 = sitofp i32 %234 to double
  %236 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 0
  call arm_aapcscc void @L3para_read(double %235, i32* getelementptr inbounds ([63 x i32], [63 x i32]* @L3psycho_anal.numlines_l, i32 0, i32 0), i32* getelementptr inbounds ([63 x i32], [63 x i32]* @L3psycho_anal.numlines_s, i32 0, i32 0), i32* getelementptr inbounds ([513 x i32], [513 x i32]* @L3psycho_anal.partition_l, i32 0, i32 0), double* getelementptr inbounds ([63 x double], [63 x double]* @L3psycho_anal.minval, i32 0, i32 0), double* getelementptr inbounds ([63 x double], [63 x double]* @L3psycho_anal.qthr_l, i32 0, i32 0), [64 x double]* getelementptr inbounds ([64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i32 0, i32 0), [64 x double]* getelementptr inbounds ([64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i32 0, i32 0), double* getelementptr inbounds ([63 x double], [63 x double]* @L3psycho_anal.qthr_s, i32 0, i32 0), double* %236, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @L3psycho_anal.bu_l, i32 0, i32 0), i32* getelementptr inbounds ([21 x i32], [21 x i32]* @L3psycho_anal.bo_l, i32 0, i32 0), double* getelementptr inbounds ([21 x double], [21 x double]* @L3psycho_anal.w1_l, i32 0, i32 0), double* getelementptr inbounds ([21 x double], [21 x double]* @L3psycho_anal.w2_l, i32 0, i32 0), i32* getelementptr inbounds ([12 x i32], [12 x i32]* @L3psycho_anal.bu_s, i32 0, i32 0), i32* getelementptr inbounds ([12 x i32], [12 x i32]* @L3psycho_anal.bo_s, i32 0, i32 0), double* getelementptr inbounds ([12 x double], [12 x double]* @L3psycho_anal.w1_s, i32 0, i32 0), double* getelementptr inbounds ([12 x double], [12 x double]* @L3psycho_anal.w2_s, i32 0, i32 0))
  store i32 0, i32* @L3psycho_anal.npart_l_orig, align 4
  store i32 0, i32* @L3psycho_anal.npart_s_orig, align 4
  store i32 0, i32* %33, align 4
  br label %237

; <label>:237:                                    ; preds = %251, %231
  %238 = load i32, i32* %33, align 4
  %239 = icmp slt i32 %238, 513
  br i1 %239, label %240, label %254

; <label>:240:                                    ; preds = %237
  %241 = load i32, i32* %33, align 4
  %242 = getelementptr inbounds [513 x i32], [513 x i32]* @L3psycho_anal.partition_l, i32 0, i32 %241
  %243 = load i32, i32* %242, align 4
  %244 = load i32, i32* @L3psycho_anal.npart_l_orig, align 4
  %245 = icmp sgt i32 %243, %244
  br i1 %245, label %246, label %250

; <label>:246:                                    ; preds = %240
  %247 = load i32, i32* %33, align 4
  %248 = getelementptr inbounds [513 x i32], [513 x i32]* @L3psycho_anal.partition_l, i32 0, i32 %247
  %249 = load i32, i32* %248, align 4
  store i32 %249, i32* @L3psycho_anal.npart_l_orig, align 4
  br label %250

; <label>:250:                                    ; preds = %246, %240
  br label %251

; <label>:251:                                    ; preds = %250
  %252 = load i32, i32* %33, align 4
  %253 = add nsw i32 %252, 1
  store i32 %253, i32* %33, align 4
  br label %237

; <label>:254:                                    ; preds = %237
  %255 = load i32, i32* @L3psycho_anal.npart_l_orig, align 4
  %256 = add nsw i32 %255, 1
  store i32 %256, i32* @L3psycho_anal.npart_l_orig, align 4
  store i32 0, i32* %33, align 4
  br label %257

; <label>:257:                                    ; preds = %263, %254
  %258 = load i32, i32* %33, align 4
  %259 = getelementptr inbounds [63 x i32], [63 x i32]* @L3psycho_anal.numlines_s, i32 0, i32 %258
  %260 = load i32, i32* %259, align 4
  %261 = icmp sge i32 %260, 0
  br i1 %261, label %262, label %266

; <label>:262:                                    ; preds = %257
  br label %263

; <label>:263:                                    ; preds = %262
  %264 = load i32, i32* %33, align 4
  %265 = add nsw i32 %264, 1
  store i32 %265, i32* %33, align 4
  br label %257

; <label>:266:                                    ; preds = %257
  %267 = load i32, i32* %33, align 4
  store i32 %267, i32* @L3psycho_anal.npart_s_orig, align 4
  %268 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @L3psycho_anal.bo_l, i32 0, i32 20), align 4
  %269 = add nsw i32 %268, 1
  store i32 %269, i32* @L3psycho_anal.npart_l, align 4
  %270 = load i32, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @L3psycho_anal.bo_s, i32 0, i32 11), align 4
  %271 = add nsw i32 %270, 1
  store i32 %271, i32* @L3psycho_anal.npart_s, align 4
  %272 = load i32, i32* @L3psycho_anal.npart_l, align 4
  %273 = load i32, i32* @L3psycho_anal.npart_l_orig, align 4
  %274 = icmp sgt i32 %272, %273
  br i1 %274, label %275, label %279

; <label>:275:                                    ; preds = %266
  %276 = load i32, i32* @L3psycho_anal.npart_l_orig, align 4
  store i32 %276, i32* @L3psycho_anal.npart_l, align 4
  %277 = load i32, i32* @L3psycho_anal.npart_l, align 4
  %278 = sub nsw i32 %277, 1
  store i32 %278, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @L3psycho_anal.bo_l, i32 0, i32 20), align 4
  store double 1.000000e+00, double* getelementptr inbounds ([21 x double], [21 x double]* @L3psycho_anal.w2_l, i32 0, i32 20), align 8
  br label %279

; <label>:279:                                    ; preds = %275, %266
  %280 = load i32, i32* @L3psycho_anal.npart_s, align 4
  %281 = load i32, i32* @L3psycho_anal.npart_s_orig, align 4
  %282 = icmp sgt i32 %280, %281
  br i1 %282, label %283, label %287

; <label>:283:                                    ; preds = %279
  %284 = load i32, i32* @L3psycho_anal.npart_s_orig, align 4
  store i32 %284, i32* @L3psycho_anal.npart_s, align 4
  %285 = load i32, i32* @L3psycho_anal.npart_s, align 4
  %286 = sub nsw i32 %285, 1
  store i32 %286, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @L3psycho_anal.bo_s, i32 0, i32 11), align 4
  store double 1.000000e+00, double* getelementptr inbounds ([12 x double], [12 x double]* @L3psycho_anal.w2_s, i32 0, i32 11), align 8
  br label %287

; <label>:287:                                    ; preds = %283, %279
  store i32 0, i32* %33, align 4
  br label %288

; <label>:288:                                    ; preds = %336, %287
  %289 = load i32, i32* %33, align 4
  %290 = load i32, i32* @L3psycho_anal.npart_l, align 4
  %291 = icmp slt i32 %289, %290
  br i1 %291, label %292, label %339

; <label>:292:                                    ; preds = %288
  store i32 0, i32* %34, align 4
  br label %293

; <label>:293:                                    ; preds = %306, %292
  %294 = load i32, i32* %34, align 4
  %295 = load i32, i32* @L3psycho_anal.npart_l_orig, align 4
  %296 = icmp slt i32 %294, %295
  br i1 %296, label %297, label %309

; <label>:297:                                    ; preds = %293
  %298 = load i32, i32* %33, align 4
  %299 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i32 0, i32 %298
  %300 = load i32, i32* %34, align 4
  %301 = getelementptr inbounds [64 x double], [64 x double]* %299, i32 0, i32 %300
  %302 = load double, double* %301, align 8
  %303 = fcmp une double %302, 0.000000e+00
  br i1 %303, label %304, label %305

; <label>:304:                                    ; preds = %297
  br label %309

; <label>:305:                                    ; preds = %297
  br label %306

; <label>:306:                                    ; preds = %305
  %307 = load i32, i32* %34, align 4
  %308 = add nsw i32 %307, 1
  store i32 %308, i32* %34, align 4
  br label %293

; <label>:309:                                    ; preds = %304, %293
  %310 = load i32, i32* %34, align 4
  %311 = load i32, i32* %33, align 4
  %312 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i32 0, i32 %311
  %313 = getelementptr inbounds [2 x i32], [2 x i32]* %312, i32 0, i32 0
  store i32 %310, i32* %313, align 4
  %314 = load i32, i32* @L3psycho_anal.npart_l_orig, align 4
  %315 = sub nsw i32 %314, 1
  store i32 %315, i32* %34, align 4
  br label %316

; <label>:316:                                    ; preds = %328, %309
  %317 = load i32, i32* %34, align 4
  %318 = icmp sgt i32 %317, 0
  br i1 %318, label %319, label %331

; <label>:319:                                    ; preds = %316
  %320 = load i32, i32* %33, align 4
  %321 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i32 0, i32 %320
  %322 = load i32, i32* %34, align 4
  %323 = getelementptr inbounds [64 x double], [64 x double]* %321, i32 0, i32 %322
  %324 = load double, double* %323, align 8
  %325 = fcmp une double %324, 0.000000e+00
  br i1 %325, label %326, label %327

; <label>:326:                                    ; preds = %319
  br label %331

; <label>:327:                                    ; preds = %319
  br label %328

; <label>:328:                                    ; preds = %327
  %329 = load i32, i32* %34, align 4
  %330 = add nsw i32 %329, -1
  store i32 %330, i32* %34, align 4
  br label %316

; <label>:331:                                    ; preds = %326, %316
  %332 = load i32, i32* %34, align 4
  %333 = load i32, i32* %33, align 4
  %334 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i32 0, i32 %333
  %335 = getelementptr inbounds [2 x i32], [2 x i32]* %334, i32 0, i32 1
  store i32 %332, i32* %335, align 4
  br label %336

; <label>:336:                                    ; preds = %331
  %337 = load i32, i32* %33, align 4
  %338 = add nsw i32 %337, 1
  store i32 %338, i32* %33, align 4
  br label %288

; <label>:339:                                    ; preds = %288
  store i32 0, i32* %33, align 4
  br label %340

; <label>:340:                                    ; preds = %388, %339
  %341 = load i32, i32* %33, align 4
  %342 = load i32, i32* @L3psycho_anal.npart_s, align 4
  %343 = icmp slt i32 %341, %342
  br i1 %343, label %344, label %391

; <label>:344:                                    ; preds = %340
  store i32 0, i32* %34, align 4
  br label %345

; <label>:345:                                    ; preds = %358, %344
  %346 = load i32, i32* %34, align 4
  %347 = load i32, i32* @L3psycho_anal.npart_s_orig, align 4
  %348 = icmp slt i32 %346, %347
  br i1 %348, label %349, label %361

; <label>:349:                                    ; preds = %345
  %350 = load i32, i32* %33, align 4
  %351 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i32 0, i32 %350
  %352 = load i32, i32* %34, align 4
  %353 = getelementptr inbounds [64 x double], [64 x double]* %351, i32 0, i32 %352
  %354 = load double, double* %353, align 8
  %355 = fcmp une double %354, 0.000000e+00
  br i1 %355, label %356, label %357

; <label>:356:                                    ; preds = %349
  br label %361

; <label>:357:                                    ; preds = %349
  br label %358

; <label>:358:                                    ; preds = %357
  %359 = load i32, i32* %34, align 4
  %360 = add nsw i32 %359, 1
  store i32 %360, i32* %34, align 4
  br label %345

; <label>:361:                                    ; preds = %356, %345
  %362 = load i32, i32* %34, align 4
  %363 = load i32, i32* %33, align 4
  %364 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i32 0, i32 %363
  %365 = getelementptr inbounds [2 x i32], [2 x i32]* %364, i32 0, i32 0
  store i32 %362, i32* %365, align 4
  %366 = load i32, i32* @L3psycho_anal.npart_s_orig, align 4
  %367 = sub nsw i32 %366, 1
  store i32 %367, i32* %34, align 4
  br label %368

; <label>:368:                                    ; preds = %380, %361
  %369 = load i32, i32* %34, align 4
  %370 = icmp sgt i32 %369, 0
  br i1 %370, label %371, label %383

; <label>:371:                                    ; preds = %368
  %372 = load i32, i32* %33, align 4
  %373 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i32 0, i32 %372
  %374 = load i32, i32* %34, align 4
  %375 = getelementptr inbounds [64 x double], [64 x double]* %373, i32 0, i32 %374
  %376 = load double, double* %375, align 8
  %377 = fcmp une double %376, 0.000000e+00
  br i1 %377, label %378, label %379

; <label>:378:                                    ; preds = %371
  br label %383

; <label>:379:                                    ; preds = %371
  br label %380

; <label>:380:                                    ; preds = %379
  %381 = load i32, i32* %34, align 4
  %382 = add nsw i32 %381, -1
  store i32 %382, i32* %34, align 4
  br label %368

; <label>:383:                                    ; preds = %378, %368
  %384 = load i32, i32* %34, align 4
  %385 = load i32, i32* %33, align 4
  %386 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i32 0, i32 %385
  %387 = getelementptr inbounds [2 x i32], [2 x i32]* %386, i32 0, i32 1
  store i32 %384, i32* %387, align 4
  br label %388

; <label>:388:                                    ; preds = %383
  %389 = load i32, i32* %33, align 4
  %390 = add nsw i32 %389, 1
  store i32 %390, i32* %33, align 4
  br label %340

; <label>:391:                                    ; preds = %340
  store i32 0, i32* %32, align 4
  br label %392

; <label>:392:                                    ; preds = %445, %391
  %393 = load i32, i32* %32, align 4
  %394 = load i32, i32* @L3psycho_anal.npart_l, align 4
  %395 = icmp slt i32 %393, %394
  br i1 %395, label %396, label %448

; <label>:396:                                    ; preds = %392
  store double 0.000000e+00, double* %42, align 8
  %397 = load i32, i32* %32, align 4
  %398 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i32 0, i32 %397
  %399 = getelementptr inbounds [2 x i32], [2 x i32]* %398, i32 0, i32 0
  %400 = load i32, i32* %399, align 4
  store i32 %400, i32* %35, align 4
  br label %401

; <label>:401:                                    ; preds = %416, %396
  %402 = load i32, i32* %35, align 4
  %403 = load i32, i32* %32, align 4
  %404 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i32 0, i32 %403
  %405 = getelementptr inbounds [2 x i32], [2 x i32]* %404, i32 0, i32 1
  %406 = load i32, i32* %405, align 4
  %407 = icmp sle i32 %402, %406
  br i1 %407, label %408, label %419

; <label>:408:                                    ; preds = %401
  %409 = load i32, i32* %32, align 4
  %410 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i32 0, i32 %409
  %411 = load i32, i32* %35, align 4
  %412 = getelementptr inbounds [64 x double], [64 x double]* %410, i32 0, i32 %411
  %413 = load double, double* %412, align 8
  %414 = load double, double* %42, align 8
  %415 = fadd double %414, %413
  store double %415, double* %42, align 8
  br label %416

; <label>:416:                                    ; preds = %408
  %417 = load i32, i32* %35, align 4
  %418 = add nsw i32 %417, 1
  store i32 %418, i32* %35, align 4
  br label %401

; <label>:419:                                    ; preds = %401
  %420 = load i32, i32* %32, align 4
  %421 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i32 0, i32 %420
  %422 = getelementptr inbounds [2 x i32], [2 x i32]* %421, i32 0, i32 0
  %423 = load i32, i32* %422, align 4
  store i32 %423, i32* %35, align 4
  br label %424

; <label>:424:                                    ; preds = %441, %419
  %425 = load i32, i32* %35, align 4
  %426 = load i32, i32* %32, align 4
  %427 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i32 0, i32 %426
  %428 = getelementptr inbounds [2 x i32], [2 x i32]* %427, i32 0, i32 1
  %429 = load i32, i32* %428, align 4
  %430 = icmp sle i32 %425, %429
  br i1 %430, label %431, label %444

; <label>:431:                                    ; preds = %424
  %432 = call arm_aapcscc double @exp(double 0xBFF61AD547A6661A) #7
  %433 = load double, double* %42, align 8
  %434 = fdiv double %432, %433
  %435 = load i32, i32* %32, align 4
  %436 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i32 0, i32 %435
  %437 = load i32, i32* %35, align 4
  %438 = getelementptr inbounds [64 x double], [64 x double]* %436, i32 0, i32 %437
  %439 = load double, double* %438, align 8
  %440 = fmul double %439, %434
  store double %440, double* %438, align 8
  br label %441

; <label>:441:                                    ; preds = %431
  %442 = load i32, i32* %35, align 4
  %443 = add nsw i32 %442, 1
  store i32 %443, i32* %35, align 4
  br label %424

; <label>:444:                                    ; preds = %424
  br label %445

; <label>:445:                                    ; preds = %444
  %446 = load i32, i32* %32, align 4
  %447 = add nsw i32 %446, 1
  store i32 %447, i32* %32, align 4
  br label %392

; <label>:448:                                    ; preds = %392
  %449 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %450 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %449, i32 0, i32 43
  %451 = load i32, i32* %450, align 4
  %452 = icmp eq i32 %451, 1
  br i1 %452, label %453, label %470

; <label>:453:                                    ; preds = %448
  store i32 0, i32* %32, align 4
  br label %454

; <label>:454:                                    ; preds = %466, %453
  %455 = load i32, i32* %32, align 4
  %456 = load i32, i32* @L3psycho_anal.npart_s, align 4
  %457 = icmp slt i32 %455, %456
  br i1 %457, label %458, label %469

; <label>:458:                                    ; preds = %454
  %459 = load i32, i32* %32, align 4
  %460 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %459
  %461 = load double, double* %460, align 8
  %462 = fmul double %461, 0x3FCD791C5F888823
  %463 = call arm_aapcscc double @exp(double %462) #7
  %464 = load i32, i32* %32, align 4
  %465 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %464
  store double %463, double* %465, align 8
  br label %466

; <label>:466:                                    ; preds = %458
  %467 = load i32, i32* %32, align 4
  %468 = add nsw i32 %467, 1
  store i32 %468, i32* %32, align 4
  br label %454

; <label>:469:                                    ; preds = %454
  br label %470

; <label>:470:                                    ; preds = %469, %448
  store i32 0, i32* %32, align 4
  br label %471

; <label>:471:                                    ; preds = %526, %470
  %472 = load i32, i32* %32, align 4
  %473 = load i32, i32* @L3psycho_anal.npart_s, align 4
  %474 = icmp slt i32 %472, %473
  br i1 %474, label %475, label %529

; <label>:475:                                    ; preds = %471
  store double 0.000000e+00, double* %43, align 8
  %476 = load i32, i32* %32, align 4
  %477 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i32 0, i32 %476
  %478 = getelementptr inbounds [2 x i32], [2 x i32]* %477, i32 0, i32 0
  %479 = load i32, i32* %478, align 4
  store i32 %479, i32* %35, align 4
  br label %480

; <label>:480:                                    ; preds = %495, %475
  %481 = load i32, i32* %35, align 4
  %482 = load i32, i32* %32, align 4
  %483 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i32 0, i32 %482
  %484 = getelementptr inbounds [2 x i32], [2 x i32]* %483, i32 0, i32 1
  %485 = load i32, i32* %484, align 4
  %486 = icmp sle i32 %481, %485
  br i1 %486, label %487, label %498

; <label>:487:                                    ; preds = %480
  %488 = load i32, i32* %32, align 4
  %489 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i32 0, i32 %488
  %490 = load i32, i32* %35, align 4
  %491 = getelementptr inbounds [64 x double], [64 x double]* %489, i32 0, i32 %490
  %492 = load double, double* %491, align 8
  %493 = load double, double* %43, align 8
  %494 = fadd double %493, %492
  store double %494, double* %43, align 8
  br label %495

; <label>:495:                                    ; preds = %487
  %496 = load i32, i32* %35, align 4
  %497 = add nsw i32 %496, 1
  store i32 %497, i32* %35, align 4
  br label %480

; <label>:498:                                    ; preds = %480
  %499 = load i32, i32* %32, align 4
  %500 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i32 0, i32 %499
  %501 = getelementptr inbounds [2 x i32], [2 x i32]* %500, i32 0, i32 0
  %502 = load i32, i32* %501, align 4
  store i32 %502, i32* %35, align 4
  br label %503

; <label>:503:                                    ; preds = %522, %498
  %504 = load i32, i32* %35, align 4
  %505 = load i32, i32* %32, align 4
  %506 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i32 0, i32 %505
  %507 = getelementptr inbounds [2 x i32], [2 x i32]* %506, i32 0, i32 1
  %508 = load i32, i32* %507, align 4
  %509 = icmp sle i32 %504, %508
  br i1 %509, label %510, label %525

; <label>:510:                                    ; preds = %503
  %511 = load i32, i32* %32, align 4
  %512 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %511
  %513 = load double, double* %512, align 8
  %514 = load double, double* %43, align 8
  %515 = fdiv double %513, %514
  %516 = load i32, i32* %32, align 4
  %517 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i32 0, i32 %516
  %518 = load i32, i32* %35, align 4
  %519 = getelementptr inbounds [64 x double], [64 x double]* %517, i32 0, i32 %518
  %520 = load double, double* %519, align 8
  %521 = fmul double %520, %515
  store double %521, double* %519, align 8
  br label %522

; <label>:522:                                    ; preds = %510
  %523 = load i32, i32* %35, align 4
  %524 = add nsw i32 %523, 1
  store i32 %524, i32* %35, align 4
  br label %503

; <label>:525:                                    ; preds = %503
  br label %526

; <label>:526:                                    ; preds = %525
  %527 = load i32, i32* %32, align 4
  %528 = add nsw i32 %527, 1
  store i32 %528, i32* %32, align 4
  br label %471

; <label>:529:                                    ; preds = %471
  call arm_aapcscc void @init_fft()
  br label %530

; <label>:530:                                    ; preds = %529, %119, %11
  %531 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %532 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %531, i32 0, i32 46
  %533 = load i32, i32* %532, align 4
  store i32 %533, i32* %30, align 4
  %534 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %535 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %534, i32 0, i32 8
  %536 = load i32, i32* %535, align 4
  %537 = icmp eq i32 %536, 1
  br i1 %537, label %538, label %539

; <label>:538:                                    ; preds = %530
  store i32 4, i32* %30, align 4
  br label %539

; <label>:539:                                    ; preds = %538, %530
  store i32 0, i32* %31, align 4
  br label %540

; <label>:540:                                    ; preds = %1853, %539
  %541 = load i32, i32* %31, align 4
  %542 = load i32, i32* %30, align 4
  %543 = icmp slt i32 %541, %542
  br i1 %543, label %544, label %1856

; <label>:544:                                    ; preds = %540
  %545 = load i32, i32* %31, align 4
  %546 = and i32 %545, 1
  %547 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* getelementptr inbounds ([2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i32 0, i32 0), i32 %546
  store [3 x [256 x float]]* %547, [3 x [256 x float]]** %24, align 4
  %548 = load i32, i32* %31, align 4
  %549 = and i32 %548, 1
  %550 = getelementptr inbounds [1024 x float], [1024 x float]* getelementptr inbounds ([2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i32 0, i32 0), i32 %549
  store [1024 x float]* %550, [1024 x float]** %23, align 4
  %551 = load i32, i32* %31, align 4
  %552 = icmp slt i32 %551, 2
  br i1 %552, label %553, label %588

; <label>:553:                                    ; preds = %544
  %554 = load [1024 x float]*, [1024 x float]** %23, align 4
  %555 = getelementptr inbounds [1024 x float], [1024 x float]* %554, i32 0, i32 0
  %556 = load i32, i32* %31, align 4
  %557 = load i16**, i16*** %13, align 4
  call arm_aapcscc void @fft_long(float* %555, i32 %556, i16** %557)
  %558 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %559 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %558, i32 0, i32 0
  %560 = load i32, i32* %31, align 4
  %561 = load i16**, i16*** %13, align 4
  call arm_aapcscc void @fft_short([256 x float]* %559, i32 %560, i16** %561)
  %562 = load i32, i32* %31, align 4
  %563 = getelementptr inbounds [4 x double], [4 x double]* @L3psycho_anal.pe, i32 0, i32 %562
  %564 = load double, double* %563, align 8
  %565 = load double*, double** %20, align 4
  %566 = load i32, i32* %31, align 4
  %567 = getelementptr inbounds double, double* %565, i32 %566
  store double %564, double* %567, align 8
  %568 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %18, align 4
  %569 = load i32, i32* %14, align 4
  %570 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %568, i32 %569
  %571 = load i32, i32* %31, align 4
  %572 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %570, i32 0, i32 %571
  %573 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %572, i32 0, i32 0
  %574 = load i32, i32* %31, align 4
  %575 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %574
  %576 = bitcast %struct.III_psy_xmin* %573 to i8*
  %577 = bitcast %struct.III_psy_xmin* %575 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %576, i8* %577, i32 488, i32 8, i1 false)
  %578 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %18, align 4
  %579 = load i32, i32* %14, align 4
  %580 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %578, i32 %579
  %581 = load i32, i32* %31, align 4
  %582 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %580, i32 0, i32 %581
  %583 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %582, i32 0, i32 1
  %584 = load i32, i32* %31, align 4
  %585 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i32 0, i32 %584
  %586 = bitcast %struct.III_psy_xmin* %583 to i8*
  %587 = bitcast %struct.III_psy_xmin* %585 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %586, i8* %587, i32 488, i32 8, i1 false)
  br label %690

; <label>:588:                                    ; preds = %544
  %589 = load i32, i32* %31, align 4
  %590 = getelementptr inbounds [4 x double], [4 x double]* @L3psycho_anal.pe, i32 0, i32 %589
  %591 = load double, double* %590, align 8
  %592 = load double*, double** %21, align 4
  %593 = load i32, i32* %31, align 4
  %594 = sub nsw i32 %593, 2
  %595 = getelementptr inbounds double, double* %592, i32 %594
  store double %591, double* %595, align 8
  %596 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %19, align 4
  %597 = load i32, i32* %14, align 4
  %598 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %596, i32 %597
  %599 = load i32, i32* %31, align 4
  %600 = sub nsw i32 %599, 2
  %601 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %598, i32 0, i32 %600
  %602 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %601, i32 0, i32 1
  %603 = load i32, i32* %31, align 4
  %604 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i32 0, i32 %603
  %605 = bitcast %struct.III_psy_xmin* %602 to i8*
  %606 = bitcast %struct.III_psy_xmin* %604 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %605, i8* %606, i32 488, i32 8, i1 false)
  %607 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %19, align 4
  %608 = load i32, i32* %14, align 4
  %609 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %607, i32 %608
  %610 = load i32, i32* %31, align 4
  %611 = sub nsw i32 %610, 2
  %612 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %609, i32 0, i32 %611
  %613 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %612, i32 0, i32 0
  %614 = load i32, i32* %31, align 4
  %615 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %614
  %616 = bitcast %struct.III_psy_xmin* %613 to i8*
  %617 = bitcast %struct.III_psy_xmin* %615 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %616, i8* %617, i32 488, i32 8, i1 false)
  %618 = load i32, i32* %31, align 4
  %619 = icmp eq i32 %618, 2
  br i1 %619, label %620, label %689

; <label>:620:                                    ; preds = %588
  store i32 1023, i32* %34, align 4
  br label %621

; <label>:621:                                    ; preds = %643, %620
  %622 = load i32, i32* %34, align 4
  %623 = icmp sge i32 %622, 0
  br i1 %623, label %624, label %646

; <label>:624:                                    ; preds = %621
  %625 = load i32, i32* %34, align 4
  %626 = getelementptr inbounds [1024 x float], [1024 x float]* getelementptr inbounds ([2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i32 0, i32 0), i32 0, i32 %625
  %627 = load float, float* %626, align 4
  store float %627, float* %44, align 4
  %628 = load i32, i32* %34, align 4
  %629 = getelementptr inbounds [1024 x float], [1024 x float]* getelementptr inbounds ([2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i32 0, i32 1), i32 0, i32 %628
  %630 = load float, float* %629, align 4
  store float %630, float* %45, align 4
  %631 = load float, float* %44, align 4
  %632 = load float, float* %45, align 4
  %633 = fadd float %631, %632
  %634 = fmul float %633, 0x3FE6A09E60000000
  %635 = load i32, i32* %34, align 4
  %636 = getelementptr inbounds [1024 x float], [1024 x float]* getelementptr inbounds ([2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i32 0, i32 0), i32 0, i32 %635
  store float %634, float* %636, align 4
  %637 = load float, float* %44, align 4
  %638 = load float, float* %45, align 4
  %639 = fsub float %637, %638
  %640 = fmul float %639, 0x3FE6A09E60000000
  %641 = load i32, i32* %34, align 4
  %642 = getelementptr inbounds [1024 x float], [1024 x float]* getelementptr inbounds ([2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i32 0, i32 1), i32 0, i32 %641
  store float %640, float* %642, align 4
  br label %643

; <label>:643:                                    ; preds = %624
  %644 = load i32, i32* %34, align 4
  %645 = add nsw i32 %644, -1
  store i32 %645, i32* %34, align 4
  br label %621

; <label>:646:                                    ; preds = %621
  store i32 2, i32* %32, align 4
  br label %647

; <label>:647:                                    ; preds = %685, %646
  %648 = load i32, i32* %32, align 4
  %649 = icmp sge i32 %648, 0
  br i1 %649, label %650, label %688

; <label>:650:                                    ; preds = %647
  store i32 255, i32* %34, align 4
  br label %651

; <label>:651:                                    ; preds = %681, %650
  %652 = load i32, i32* %34, align 4
  %653 = icmp sge i32 %652, 0
  br i1 %653, label %654, label %684

; <label>:654:                                    ; preds = %651
  %655 = load i32, i32* %32, align 4
  %656 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* getelementptr inbounds ([2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i32 0, i32 0), i32 0, i32 %655
  %657 = load i32, i32* %34, align 4
  %658 = getelementptr inbounds [256 x float], [256 x float]* %656, i32 0, i32 %657
  %659 = load float, float* %658, align 4
  store float %659, float* %46, align 4
  %660 = load i32, i32* %32, align 4
  %661 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* getelementptr inbounds ([2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i32 0, i32 1), i32 0, i32 %660
  %662 = load i32, i32* %34, align 4
  %663 = getelementptr inbounds [256 x float], [256 x float]* %661, i32 0, i32 %662
  %664 = load float, float* %663, align 4
  store float %664, float* %47, align 4
  %665 = load float, float* %46, align 4
  %666 = load float, float* %47, align 4
  %667 = fadd float %665, %666
  %668 = fmul float %667, 0x3FE6A09E60000000
  %669 = load i32, i32* %32, align 4
  %670 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* getelementptr inbounds ([2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i32 0, i32 0), i32 0, i32 %669
  %671 = load i32, i32* %34, align 4
  %672 = getelementptr inbounds [256 x float], [256 x float]* %670, i32 0, i32 %671
  store float %668, float* %672, align 4
  %673 = load float, float* %46, align 4
  %674 = load float, float* %47, align 4
  %675 = fsub float %673, %674
  %676 = fmul float %675, 0x3FE6A09E60000000
  %677 = load i32, i32* %32, align 4
  %678 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* getelementptr inbounds ([2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i32 0, i32 1), i32 0, i32 %677
  %679 = load i32, i32* %34, align 4
  %680 = getelementptr inbounds [256 x float], [256 x float]* %678, i32 0, i32 %679
  store float %676, float* %680, align 4
  br label %681

; <label>:681:                                    ; preds = %654
  %682 = load i32, i32* %34, align 4
  %683 = add nsw i32 %682, -1
  store i32 %683, i32* %34, align 4
  br label %651

; <label>:684:                                    ; preds = %651
  br label %685

; <label>:685:                                    ; preds = %684
  %686 = load i32, i32* %32, align 4
  %687 = add nsw i32 %686, -1
  store i32 %687, i32* %32, align 4
  br label %647

; <label>:688:                                    ; preds = %647
  br label %689

; <label>:689:                                    ; preds = %688, %588
  br label %690

; <label>:690:                                    ; preds = %689, %553
  %691 = load [1024 x float]*, [1024 x float]** %23, align 4
  %692 = getelementptr inbounds [1024 x float], [1024 x float]* %691, i32 0, i32 0
  %693 = load float, float* %692, align 4
  store float %693, float* getelementptr inbounds ([513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 0), align 4
  %694 = load float, float* getelementptr inbounds ([513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 0), align 4
  %695 = load float, float* getelementptr inbounds ([513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 0), align 4
  %696 = fmul float %695, %694
  store float %696, float* getelementptr inbounds ([513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 0), align 4
  %697 = load float, float* getelementptr inbounds ([513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 0), align 4
  %698 = load i32, i32* %31, align 4
  %699 = getelementptr inbounds [4 x float], [4 x float]* %25, i32 0, i32 %698
  store float %697, float* %699, align 4
  store i32 511, i32* %34, align 4
  br label %700

; <label>:700:                                    ; preds = %733, %690
  %701 = load i32, i32* %34, align 4
  %702 = icmp sge i32 %701, 0
  br i1 %702, label %703, label %736

; <label>:703:                                    ; preds = %700
  %704 = load [1024 x float]*, [1024 x float]** %23, align 4
  %705 = load i32, i32* %34, align 4
  %706 = sub nsw i32 512, %705
  %707 = getelementptr inbounds [1024 x float], [1024 x float]* %704, i32 0, i32 %706
  %708 = load float, float* %707, align 4
  store float %708, float* %48, align 4
  %709 = load [1024 x float]*, [1024 x float]** %23, align 4
  %710 = load i32, i32* %34, align 4
  %711 = add nsw i32 512, %710
  %712 = getelementptr inbounds [1024 x float], [1024 x float]* %709, i32 0, i32 %711
  %713 = load float, float* %712, align 4
  store float %713, float* %49, align 4
  %714 = load float, float* %48, align 4
  %715 = load float, float* %48, align 4
  %716 = fmul float %714, %715
  %717 = load float, float* %49, align 4
  %718 = load float, float* %49, align 4
  %719 = fmul float %717, %718
  %720 = fadd float %716, %719
  %721 = fmul float %720, 5.000000e-01
  %722 = load i32, i32* %34, align 4
  %723 = sub nsw i32 512, %722
  %724 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %723
  store float %721, float* %724, align 4
  %725 = load i32, i32* %34, align 4
  %726 = sub nsw i32 512, %725
  %727 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %726
  %728 = load float, float* %727, align 4
  %729 = load i32, i32* %31, align 4
  %730 = getelementptr inbounds [4 x float], [4 x float]* %25, i32 0, i32 %729
  %731 = load float, float* %730, align 4
  %732 = fadd float %731, %728
  store float %732, float* %730, align 4
  br label %733

; <label>:733:                                    ; preds = %703
  %734 = load i32, i32* %34, align 4
  %735 = add nsw i32 %734, -1
  store i32 %735, i32* %34, align 4
  br label %700

; <label>:736:                                    ; preds = %700
  store i32 2, i32* %32, align 4
  br label %737

; <label>:737:                                    ; preds = %793, %736
  %738 = load i32, i32* %32, align 4
  %739 = icmp sge i32 %738, 0
  br i1 %739, label %740, label %796

; <label>:740:                                    ; preds = %737
  %741 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %742 = load i32, i32* %32, align 4
  %743 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %741, i32 0, i32 %742
  %744 = getelementptr inbounds [256 x float], [256 x float]* %743, i32 0, i32 0
  %745 = load float, float* %744, align 4
  %746 = load i32, i32* %32, align 4
  %747 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 %746
  %748 = getelementptr inbounds [129 x float], [129 x float]* %747, i32 0, i32 0
  store float %745, float* %748, align 4
  %749 = load i32, i32* %32, align 4
  %750 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 %749
  %751 = getelementptr inbounds [129 x float], [129 x float]* %750, i32 0, i32 0
  %752 = load float, float* %751, align 4
  %753 = load i32, i32* %32, align 4
  %754 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 %753
  %755 = getelementptr inbounds [129 x float], [129 x float]* %754, i32 0, i32 0
  %756 = load float, float* %755, align 4
  %757 = fmul float %756, %752
  store float %757, float* %755, align 4
  store i32 127, i32* %34, align 4
  br label %758

; <label>:758:                                    ; preds = %789, %740
  %759 = load i32, i32* %34, align 4
  %760 = icmp sge i32 %759, 0
  br i1 %760, label %761, label %792

; <label>:761:                                    ; preds = %758
  %762 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %763 = load i32, i32* %32, align 4
  %764 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %762, i32 0, i32 %763
  %765 = load i32, i32* %34, align 4
  %766 = sub nsw i32 128, %765
  %767 = getelementptr inbounds [256 x float], [256 x float]* %764, i32 0, i32 %766
  %768 = load float, float* %767, align 4
  store float %768, float* %50, align 4
  %769 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %770 = load i32, i32* %32, align 4
  %771 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %769, i32 0, i32 %770
  %772 = load i32, i32* %34, align 4
  %773 = add nsw i32 128, %772
  %774 = getelementptr inbounds [256 x float], [256 x float]* %771, i32 0, i32 %773
  %775 = load float, float* %774, align 4
  store float %775, float* %51, align 4
  %776 = load float, float* %50, align 4
  %777 = load float, float* %50, align 4
  %778 = fmul float %776, %777
  %779 = load float, float* %51, align 4
  %780 = load float, float* %51, align 4
  %781 = fmul float %779, %780
  %782 = fadd float %778, %781
  %783 = fmul float %782, 5.000000e-01
  %784 = load i32, i32* %32, align 4
  %785 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 %784
  %786 = load i32, i32* %34, align 4
  %787 = sub nsw i32 128, %786
  %788 = getelementptr inbounds [129 x float], [129 x float]* %785, i32 0, i32 %787
  store float %783, float* %788, align 4
  br label %789

; <label>:789:                                    ; preds = %761
  %790 = load i32, i32* %34, align 4
  %791 = add nsw i32 %790, -1
  store i32 %791, i32* %34, align 4
  br label %758

; <label>:792:                                    ; preds = %758
  br label %793

; <label>:793:                                    ; preds = %792
  %794 = load i32, i32* %32, align 4
  %795 = add nsw i32 %794, -1
  store i32 %795, i32* %32, align 4
  br label %737

; <label>:796:                                    ; preds = %737
  store i32 0, i32* %34, align 4
  br label %797

; <label>:797:                                    ; preds = %994, %796
  %798 = load i32, i32* %34, align 4
  %799 = load i32, i32* @L3psycho_anal.cw_lower_index, align 4
  %800 = icmp slt i32 %798, %799
  br i1 %800, label %801, label %997

; <label>:801:                                    ; preds = %797
  %802 = load i32, i32* %31, align 4
  %803 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.ax_sav, i32 0, i32 %802
  %804 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %803, i32 0, i32 1
  %805 = load i32, i32* %34, align 4
  %806 = getelementptr inbounds [513 x float], [513 x float]* %804, i32 0, i32 %805
  %807 = load float, float* %806, align 4
  store float %807, float* %54, align 4
  %808 = load i32, i32* %31, align 4
  %809 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.bx_sav, i32 0, i32 %808
  %810 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %809, i32 0, i32 1
  %811 = load i32, i32* %34, align 4
  %812 = getelementptr inbounds [513 x float], [513 x float]* %810, i32 0, i32 %811
  %813 = load float, float* %812, align 4
  store float %813, float* %57, align 4
  %814 = load i32, i32* %31, align 4
  %815 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.rx_sav, i32 0, i32 %814
  %816 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %815, i32 0, i32 1
  %817 = load i32, i32* %34, align 4
  %818 = getelementptr inbounds [513 x float], [513 x float]* %816, i32 0, i32 %817
  %819 = load float, float* %818, align 4
  store float %819, float* %60, align 4
  %820 = load i32, i32* %31, align 4
  %821 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.ax_sav, i32 0, i32 %820
  %822 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %821, i32 0, i32 0
  %823 = load i32, i32* %34, align 4
  %824 = getelementptr inbounds [513 x float], [513 x float]* %822, i32 0, i32 %823
  %825 = load float, float* %824, align 4
  %826 = load i32, i32* %31, align 4
  %827 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.ax_sav, i32 0, i32 %826
  %828 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %827, i32 0, i32 1
  %829 = load i32, i32* %34, align 4
  %830 = getelementptr inbounds [513 x float], [513 x float]* %828, i32 0, i32 %829
  store float %825, float* %830, align 4
  store float %825, float* %53, align 4
  %831 = load i32, i32* %31, align 4
  %832 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.bx_sav, i32 0, i32 %831
  %833 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %832, i32 0, i32 0
  %834 = load i32, i32* %34, align 4
  %835 = getelementptr inbounds [513 x float], [513 x float]* %833, i32 0, i32 %834
  %836 = load float, float* %835, align 4
  %837 = load i32, i32* %31, align 4
  %838 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.bx_sav, i32 0, i32 %837
  %839 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %838, i32 0, i32 1
  %840 = load i32, i32* %34, align 4
  %841 = getelementptr inbounds [513 x float], [513 x float]* %839, i32 0, i32 %840
  store float %836, float* %841, align 4
  store float %836, float* %56, align 4
  %842 = load i32, i32* %31, align 4
  %843 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.rx_sav, i32 0, i32 %842
  %844 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %843, i32 0, i32 0
  %845 = load i32, i32* %34, align 4
  %846 = getelementptr inbounds [513 x float], [513 x float]* %844, i32 0, i32 %845
  %847 = load float, float* %846, align 4
  %848 = load i32, i32* %31, align 4
  %849 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.rx_sav, i32 0, i32 %848
  %850 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %849, i32 0, i32 1
  %851 = load i32, i32* %34, align 4
  %852 = getelementptr inbounds [513 x float], [513 x float]* %850, i32 0, i32 %851
  store float %847, float* %852, align 4
  store float %847, float* %59, align 4
  %853 = load [1024 x float]*, [1024 x float]** %23, align 4
  %854 = load i32, i32* %34, align 4
  %855 = getelementptr inbounds [1024 x float], [1024 x float]* %853, i32 0, i32 %854
  %856 = load float, float* %855, align 4
  %857 = load i32, i32* %31, align 4
  %858 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.ax_sav, i32 0, i32 %857
  %859 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %858, i32 0, i32 0
  %860 = load i32, i32* %34, align 4
  %861 = getelementptr inbounds [513 x float], [513 x float]* %859, i32 0, i32 %860
  store float %856, float* %861, align 4
  store float %856, float* %52, align 4
  %862 = load i32, i32* %34, align 4
  %863 = icmp eq i32 %862, 0
  br i1 %863, label %864, label %868

; <label>:864:                                    ; preds = %801
  %865 = load [1024 x float]*, [1024 x float]** %23, align 4
  %866 = getelementptr inbounds [1024 x float], [1024 x float]* %865, i32 0, i32 0
  %867 = load float, float* %866, align 4
  br label %874

; <label>:868:                                    ; preds = %801
  %869 = load [1024 x float]*, [1024 x float]** %23, align 4
  %870 = load i32, i32* %34, align 4
  %871 = sub nsw i32 1024, %870
  %872 = getelementptr inbounds [1024 x float], [1024 x float]* %869, i32 0, i32 %871
  %873 = load float, float* %872, align 4
  br label %874

; <label>:874:                                    ; preds = %868, %864
  %875 = phi float [ %867, %864 ], [ %873, %868 ]
  %876 = load i32, i32* %31, align 4
  %877 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.bx_sav, i32 0, i32 %876
  %878 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %877, i32 0, i32 0
  %879 = load i32, i32* %34, align 4
  %880 = getelementptr inbounds [513 x float], [513 x float]* %878, i32 0, i32 %879
  store float %875, float* %880, align 4
  store float %875, float* %55, align 4
  %881 = load i32, i32* %34, align 4
  %882 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %881
  %883 = load float, float* %882, align 4
  %884 = fpext float %883 to double
  %885 = call arm_aapcscc double @sqrt(double %884) #7
  %886 = fptrunc double %885 to float
  %887 = load i32, i32* %31, align 4
  %888 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.rx_sav, i32 0, i32 %887
  %889 = getelementptr inbounds [2 x [513 x float]], [2 x [513 x float]]* %888, i32 0, i32 0
  %890 = load i32, i32* %34, align 4
  %891 = getelementptr inbounds [513 x float], [513 x float]* %889, i32 0, i32 %890
  store float %886, float* %891, align 4
  store float %886, float* %58, align 4
  %892 = load float, float* %59, align 4
  %893 = fcmp une float %892, 0.000000e+00
  br i1 %893, label %894, label %909

; <label>:894:                                    ; preds = %874
  %895 = load float, float* %53, align 4
  %896 = load float, float* %56, align 4
  %897 = fmul float %895, %896
  store float %897, float* %61, align 4
  %898 = load float, float* %53, align 4
  %899 = load float, float* %53, align 4
  %900 = fmul float %898, %899
  %901 = load float, float* %56, align 4
  %902 = load float, float* %56, align 4
  %903 = fmul float %901, %902
  %904 = fsub float %900, %903
  %905 = fmul float %904, 5.000000e-01
  store float %905, float* %62, align 4
  %906 = load float, float* %59, align 4
  %907 = load float, float* %59, align 4
  %908 = fmul float %906, %907
  store float %908, float* %63, align 4
  br label %910

; <label>:909:                                    ; preds = %874
  store float 1.000000e+00, float* %61, align 4
  store float 0.000000e+00, float* %62, align 4
  store float 1.000000e+00, float* %63, align 4
  br label %910

; <label>:910:                                    ; preds = %909, %894
  %911 = load float, float* %60, align 4
  %912 = fcmp une float %911, 0.000000e+00
  br i1 %912, label %913, label %938

; <label>:913:                                    ; preds = %910
  %914 = load float, float* %62, align 4
  %915 = load float, float* %61, align 4
  %916 = fadd float %914, %915
  %917 = load float, float* %54, align 4
  %918 = load float, float* %57, align 4
  %919 = fadd float %917, %918
  %920 = fmul float %916, %919
  %921 = fmul float %920, 5.000000e-01
  store float %921, float* %64, align 4
  %922 = load float, float* %54, align 4
  %923 = fsub float -0.000000e+00, %922
  %924 = load float, float* %61, align 4
  %925 = fmul float %923, %924
  %926 = load float, float* %64, align 4
  %927 = fadd float %925, %926
  store float %927, float* %65, align 4
  %928 = load float, float* %57, align 4
  %929 = fsub float -0.000000e+00, %928
  %930 = load float, float* %62, align 4
  %931 = fmul float %929, %930
  %932 = load float, float* %64, align 4
  %933 = fadd float %931, %932
  store float %933, float* %61, align 4
  %934 = load float, float* %65, align 4
  store float %934, float* %62, align 4
  %935 = load float, float* %60, align 4
  %936 = load float, float* %63, align 4
  %937 = fmul float %936, %935
  store float %937, float* %63, align 4
  br label %939

; <label>:938:                                    ; preds = %910
  br label %939

; <label>:939:                                    ; preds = %938, %913
  %940 = load float, float* %59, align 4
  %941 = fmul float 2.000000e+00, %940
  %942 = load float, float* %60, align 4
  %943 = fsub float %941, %942
  %944 = load float, float* %63, align 4
  %945 = fdiv float %943, %944
  store float %945, float* %66, align 4
  %946 = load float, float* %66, align 4
  %947 = load float, float* %61, align 4
  %948 = fmul float %947, %946
  store float %948, float* %61, align 4
  %949 = load float, float* %66, align 4
  %950 = load float, float* %62, align 4
  %951 = fmul float %950, %949
  store float %951, float* %62, align 4
  %952 = load float, float* %58, align 4
  %953 = fpext float %952 to double
  %954 = load float, float* %59, align 4
  %955 = fmul float 2.000000e+00, %954
  %956 = load float, float* %60, align 4
  %957 = fsub float %955, %956
  %958 = fpext float %957 to double
  %959 = call arm_aapcscc double @fabs(double %958) #9
  %960 = fadd double %953, %959
  %961 = fptrunc double %960 to float
  store float %961, float* %63, align 4
  %962 = load float, float* %63, align 4
  %963 = fcmp une float %962, 0.000000e+00
  br i1 %963, label %964, label %990

; <label>:964:                                    ; preds = %939
  %965 = load float, float* %52, align 4
  %966 = load float, float* %55, align 4
  %967 = fadd float %965, %966
  %968 = fmul float %967, 5.000000e-01
  %969 = load float, float* %61, align 4
  %970 = fsub float %968, %969
  store float %970, float* %61, align 4
  %971 = load float, float* %52, align 4
  %972 = load float, float* %55, align 4
  %973 = fsub float %971, %972
  %974 = fmul float %973, 5.000000e-01
  %975 = load float, float* %62, align 4
  %976 = fsub float %974, %975
  store float %976, float* %62, align 4
  %977 = load float, float* %61, align 4
  %978 = load float, float* %61, align 4
  %979 = fmul float %977, %978
  %980 = load float, float* %62, align 4
  %981 = load float, float* %62, align 4
  %982 = fmul float %980, %981
  %983 = fadd float %979, %982
  %984 = fpext float %983 to double
  %985 = call arm_aapcscc double @sqrt(double %984) #7
  %986 = load float, float* %63, align 4
  %987 = fpext float %986 to double
  %988 = fdiv double %985, %987
  %989 = fptrunc double %988 to float
  store float %989, float* %63, align 4
  br label %990

; <label>:990:                                    ; preds = %964, %939
  %991 = load float, float* %63, align 4
  %992 = load i32, i32* %34, align 4
  %993 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i32 0, i32 %992
  store float %991, float* %993, align 4
  br label %994

; <label>:994:                                    ; preds = %990
  %995 = load i32, i32* %34, align 4
  %996 = add nsw i32 %995, 1
  store i32 %996, i32* %34, align 4
  br label %797

; <label>:997:                                    ; preds = %797
  %998 = load i32, i32* @L3psycho_anal.cw_lower_index, align 4
  store i32 %998, i32* %34, align 4
  br label %999

; <label>:999:                                    ; preds = %1169, %997
  %1000 = load i32, i32* %34, align 4
  %1001 = load i32, i32* @L3psycho_anal.cw_upper_index, align 4
  %1002 = icmp slt i32 %1000, %1001
  br i1 %1002, label %1003, label %1172

; <label>:1003:                                   ; preds = %999
  %1004 = load i32, i32* %34, align 4
  %1005 = add nsw i32 %1004, 2
  %1006 = sdiv i32 %1005, 4
  store i32 %1006, i32* %35, align 4
  %1007 = load i32, i32* %35, align 4
  %1008 = getelementptr inbounds [129 x float], [129 x float]* getelementptr inbounds ([3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 0), i32 0, i32 %1007
  %1009 = load float, float* %1008, align 4
  store float %1009, float* %68, align 4
  %1010 = load float, float* %68, align 4
  %1011 = fcmp une float %1010, 0.000000e+00
  br i1 %1011, label %1012, label %1040

; <label>:1012:                                   ; preds = %1003
  %1013 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %1014 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %1013, i32 0, i32 0
  %1015 = load i32, i32* %35, align 4
  %1016 = getelementptr inbounds [256 x float], [256 x float]* %1014, i32 0, i32 %1015
  %1017 = load float, float* %1016, align 4
  store float %1017, float* %73, align 4
  %1018 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %1019 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %1018, i32 0, i32 0
  %1020 = load i32, i32* %35, align 4
  %1021 = sub nsw i32 256, %1020
  %1022 = getelementptr inbounds [256 x float], [256 x float]* %1019, i32 0, i32 %1021
  %1023 = load float, float* %1022, align 4
  store float %1023, float* %74, align 4
  %1024 = load float, float* %73, align 4
  %1025 = load float, float* %74, align 4
  %1026 = fmul float %1024, %1025
  store float %1026, float* %70, align 4
  %1027 = load float, float* %73, align 4
  %1028 = load float, float* %73, align 4
  %1029 = fmul float %1027, %1028
  %1030 = load float, float* %74, align 4
  %1031 = load float, float* %74, align 4
  %1032 = fmul float %1030, %1031
  %1033 = fsub float %1029, %1032
  %1034 = fmul float %1033, 5.000000e-01
  store float %1034, float* %71, align 4
  %1035 = load float, float* %68, align 4
  store float %1035, float* %72, align 4
  %1036 = load float, float* %68, align 4
  %1037 = fpext float %1036 to double
  %1038 = call arm_aapcscc double @sqrt(double %1037) #7
  %1039 = fptrunc double %1038 to float
  store float %1039, float* %68, align 4
  br label %1041

; <label>:1040:                                   ; preds = %1003
  store float 1.000000e+00, float* %70, align 4
  store float 0.000000e+00, float* %71, align 4
  store float 1.000000e+00, float* %72, align 4
  br label %1041

; <label>:1041:                                   ; preds = %1040, %1012
  %1042 = load i32, i32* %35, align 4
  %1043 = getelementptr inbounds [129 x float], [129 x float]* getelementptr inbounds ([3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 2), i32 0, i32 %1042
  %1044 = load float, float* %1043, align 4
  store float %1044, float* %69, align 4
  %1045 = load float, float* %69, align 4
  %1046 = fcmp une float %1045, 0.000000e+00
  br i1 %1046, label %1047, label %1087

; <label>:1047:                                   ; preds = %1041
  %1048 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %1049 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %1048, i32 0, i32 2
  %1050 = load i32, i32* %35, align 4
  %1051 = getelementptr inbounds [256 x float], [256 x float]* %1049, i32 0, i32 %1050
  %1052 = load float, float* %1051, align 4
  store float %1052, float* %75, align 4
  %1053 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %1054 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %1053, i32 0, i32 2
  %1055 = load i32, i32* %35, align 4
  %1056 = sub nsw i32 256, %1055
  %1057 = getelementptr inbounds [256 x float], [256 x float]* %1054, i32 0, i32 %1056
  %1058 = load float, float* %1057, align 4
  store float %1058, float* %76, align 4
  %1059 = load float, float* %71, align 4
  %1060 = load float, float* %70, align 4
  %1061 = fadd float %1059, %1060
  %1062 = load float, float* %75, align 4
  %1063 = load float, float* %76, align 4
  %1064 = fadd float %1062, %1063
  %1065 = fmul float %1061, %1064
  %1066 = fmul float %1065, 5.000000e-01
  store float %1066, float* %77, align 4
  %1067 = load float, float* %75, align 4
  %1068 = fsub float -0.000000e+00, %1067
  %1069 = load float, float* %70, align 4
  %1070 = fmul float %1068, %1069
  %1071 = load float, float* %77, align 4
  %1072 = fadd float %1070, %1071
  store float %1072, float* %78, align 4
  %1073 = load float, float* %76, align 4
  %1074 = fsub float -0.000000e+00, %1073
  %1075 = load float, float* %71, align 4
  %1076 = fmul float %1074, %1075
  %1077 = load float, float* %77, align 4
  %1078 = fadd float %1076, %1077
  store float %1078, float* %70, align 4
  %1079 = load float, float* %78, align 4
  store float %1079, float* %71, align 4
  %1080 = load float, float* %69, align 4
  %1081 = fpext float %1080 to double
  %1082 = call arm_aapcscc double @sqrt(double %1081) #7
  %1083 = fptrunc double %1082 to float
  store float %1083, float* %69, align 4
  %1084 = load float, float* %69, align 4
  %1085 = load float, float* %72, align 4
  %1086 = fmul float %1085, %1084
  store float %1086, float* %72, align 4
  br label %1088

; <label>:1087:                                   ; preds = %1041
  br label %1088

; <label>:1088:                                   ; preds = %1087, %1047
  %1089 = load float, float* %68, align 4
  %1090 = fmul float 2.000000e+00, %1089
  %1091 = load float, float* %69, align 4
  %1092 = fsub float %1090, %1091
  %1093 = load float, float* %72, align 4
  %1094 = fdiv float %1092, %1093
  store float %1094, float* %79, align 4
  %1095 = load float, float* %79, align 4
  %1096 = load float, float* %70, align 4
  %1097 = fmul float %1096, %1095
  store float %1097, float* %70, align 4
  %1098 = load float, float* %79, align 4
  %1099 = load float, float* %71, align 4
  %1100 = fmul float %1099, %1098
  store float %1100, float* %71, align 4
  %1101 = load i32, i32* %35, align 4
  %1102 = getelementptr inbounds [129 x float], [129 x float]* getelementptr inbounds ([3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 1), i32 0, i32 %1101
  %1103 = load float, float* %1102, align 4
  %1104 = fpext float %1103 to double
  %1105 = call arm_aapcscc double @sqrt(double %1104) #7
  %1106 = fptrunc double %1105 to float
  store float %1106, float* %67, align 4
  %1107 = load float, float* %67, align 4
  %1108 = fpext float %1107 to double
  %1109 = load float, float* %68, align 4
  %1110 = fmul float 2.000000e+00, %1109
  %1111 = load float, float* %69, align 4
  %1112 = fsub float %1110, %1111
  %1113 = fpext float %1112 to double
  %1114 = call arm_aapcscc double @fabs(double %1113) #9
  %1115 = fadd double %1108, %1114
  %1116 = fptrunc double %1115 to float
  store float %1116, float* %72, align 4
  %1117 = load float, float* %72, align 4
  %1118 = fcmp une float %1117, 0.000000e+00
  br i1 %1118, label %1119, label %1156

; <label>:1119:                                   ; preds = %1088
  %1120 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %1121 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %1120, i32 0, i32 1
  %1122 = load i32, i32* %35, align 4
  %1123 = getelementptr inbounds [256 x float], [256 x float]* %1121, i32 0, i32 %1122
  %1124 = load float, float* %1123, align 4
  store float %1124, float* %80, align 4
  %1125 = load [3 x [256 x float]]*, [3 x [256 x float]]** %24, align 4
  %1126 = getelementptr inbounds [3 x [256 x float]], [3 x [256 x float]]* %1125, i32 0, i32 1
  %1127 = load i32, i32* %35, align 4
  %1128 = sub nsw i32 256, %1127
  %1129 = getelementptr inbounds [256 x float], [256 x float]* %1126, i32 0, i32 %1128
  %1130 = load float, float* %1129, align 4
  store float %1130, float* %81, align 4
  %1131 = load float, float* %80, align 4
  %1132 = load float, float* %81, align 4
  %1133 = fadd float %1131, %1132
  %1134 = fmul float %1133, 5.000000e-01
  %1135 = load float, float* %70, align 4
  %1136 = fsub float %1134, %1135
  store float %1136, float* %70, align 4
  %1137 = load float, float* %80, align 4
  %1138 = load float, float* %81, align 4
  %1139 = fsub float %1137, %1138
  %1140 = fmul float %1139, 5.000000e-01
  %1141 = load float, float* %71, align 4
  %1142 = fsub float %1140, %1141
  store float %1142, float* %71, align 4
  %1143 = load float, float* %70, align 4
  %1144 = load float, float* %70, align 4
  %1145 = fmul float %1143, %1144
  %1146 = load float, float* %71, align 4
  %1147 = load float, float* %71, align 4
  %1148 = fmul float %1146, %1147
  %1149 = fadd float %1145, %1148
  %1150 = fpext float %1149 to double
  %1151 = call arm_aapcscc double @sqrt(double %1150) #7
  %1152 = load float, float* %72, align 4
  %1153 = fpext float %1152 to double
  %1154 = fdiv double %1151, %1153
  %1155 = fptrunc double %1154 to float
  store float %1155, float* %72, align 4
  br label %1156

; <label>:1156:                                   ; preds = %1119, %1088
  %1157 = load float, float* %72, align 4
  %1158 = load i32, i32* %34, align 4
  %1159 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i32 0, i32 %1158
  store float %1157, float* %1159, align 4
  %1160 = load i32, i32* %34, align 4
  %1161 = add nsw i32 %1160, 3
  %1162 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i32 0, i32 %1161
  store float %1157, float* %1162, align 4
  %1163 = load i32, i32* %34, align 4
  %1164 = add nsw i32 %1163, 2
  %1165 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i32 0, i32 %1164
  store float %1157, float* %1165, align 4
  %1166 = load i32, i32* %34, align 4
  %1167 = add nsw i32 %1166, 1
  %1168 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i32 0, i32 %1167
  store float %1157, float* %1168, align 4
  br label %1169

; <label>:1169:                                   ; preds = %1156
  %1170 = load i32, i32* %34, align 4
  %1171 = add nsw i32 %1170, 4
  store i32 %1171, i32* %34, align 4
  br label %999

; <label>:1172:                                   ; preds = %999
  store i32 0, i32* %32, align 4
  store i32 0, i32* %34, align 4
  br label %1173

; <label>:1173:                                   ; preds = %1221, %1172
  %1174 = load i32, i32* %34, align 4
  %1175 = load i32, i32* @L3psycho_anal.cw_upper_index, align 4
  %1176 = icmp slt i32 %1174, %1175
  br i1 %1176, label %1177, label %1230

; <label>:1177:                                   ; preds = %1173
  %1178 = load i32, i32* %34, align 4
  %1179 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %1178
  %1180 = load float, float* %1179, align 4
  %1181 = fpext float %1180 to double
  store double %1181, double* %82, align 8
  %1182 = load i32, i32* %34, align 4
  %1183 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %1182
  %1184 = load float, float* %1183, align 4
  %1185 = load i32, i32* %34, align 4
  %1186 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i32 0, i32 %1185
  %1187 = load float, float* %1186, align 4
  %1188 = fmul float %1184, %1187
  %1189 = fpext float %1188 to double
  store double %1189, double* %83, align 8
  %1190 = load i32, i32* %34, align 4
  %1191 = add nsw i32 %1190, 1
  store i32 %1191, i32* %34, align 4
  %1192 = load i32, i32* %32, align 4
  %1193 = getelementptr inbounds [63 x i32], [63 x i32]* @L3psycho_anal.numlines_l, i32 0, i32 %1192
  %1194 = load i32, i32* %1193, align 4
  %1195 = sub nsw i32 %1194, 1
  store i32 %1195, i32* %84, align 4
  br label %1196

; <label>:1196:                                   ; preds = %1218, %1177
  %1197 = load i32, i32* %84, align 4
  %1198 = icmp sgt i32 %1197, 0
  br i1 %1198, label %1199, label %1221

; <label>:1199:                                   ; preds = %1196
  %1200 = load i32, i32* %34, align 4
  %1201 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %1200
  %1202 = load float, float* %1201, align 4
  %1203 = fpext float %1202 to double
  %1204 = load double, double* %82, align 8
  %1205 = fadd double %1204, %1203
  store double %1205, double* %82, align 8
  %1206 = load i32, i32* %34, align 4
  %1207 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %1206
  %1208 = load float, float* %1207, align 4
  %1209 = load i32, i32* %34, align 4
  %1210 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i32 0, i32 %1209
  %1211 = load float, float* %1210, align 4
  %1212 = fmul float %1208, %1211
  %1213 = fpext float %1212 to double
  %1214 = load double, double* %83, align 8
  %1215 = fadd double %1214, %1213
  store double %1215, double* %83, align 8
  %1216 = load i32, i32* %34, align 4
  %1217 = add nsw i32 %1216, 1
  store i32 %1217, i32* %34, align 4
  br label %1218

; <label>:1218:                                   ; preds = %1199
  %1219 = load i32, i32* %84, align 4
  %1220 = add nsw i32 %1219, -1
  store i32 %1220, i32* %84, align 4
  br label %1196

; <label>:1221:                                   ; preds = %1196
  %1222 = load double, double* %82, align 8
  %1223 = load i32, i32* %32, align 4
  %1224 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1223
  store double %1222, double* %1224, align 8
  %1225 = load double, double* %83, align 8
  %1226 = load i32, i32* %32, align 4
  %1227 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.cb, i32 0, i32 %1226
  store double %1225, double* %1227, align 8
  %1228 = load i32, i32* %32, align 4
  %1229 = add nsw i32 %1228, 1
  store i32 %1229, i32* %32, align 4
  br label %1173

; <label>:1230:                                   ; preds = %1173
  br label %1231

; <label>:1231:                                   ; preds = %1267, %1230
  %1232 = load i32, i32* %32, align 4
  %1233 = load i32, i32* @L3psycho_anal.npart_l_orig, align 4
  %1234 = icmp slt i32 %1232, %1233
  br i1 %1234, label %1235, label %1270

; <label>:1235:                                   ; preds = %1231
  %1236 = load i32, i32* %34, align 4
  %1237 = add nsw i32 %1236, 1
  store i32 %1237, i32* %34, align 4
  %1238 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %1236
  %1239 = load float, float* %1238, align 4
  %1240 = fpext float %1239 to double
  store double %1240, double* %86, align 8
  %1241 = load i32, i32* %32, align 4
  %1242 = getelementptr inbounds [63 x i32], [63 x i32]* @L3psycho_anal.numlines_l, i32 0, i32 %1241
  %1243 = load i32, i32* %1242, align 4
  %1244 = sub nsw i32 %1243, 1
  store i32 %1244, i32* %85, align 4
  br label %1245

; <label>:1245:                                   ; preds = %1256, %1235
  %1246 = load i32, i32* %85, align 4
  %1247 = icmp sgt i32 %1246, 0
  br i1 %1247, label %1248, label %1259

; <label>:1248:                                   ; preds = %1245
  %1249 = load i32, i32* %34, align 4
  %1250 = add nsw i32 %1249, 1
  store i32 %1250, i32* %34, align 4
  %1251 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i32 0, i32 %1249
  %1252 = load float, float* %1251, align 4
  %1253 = fpext float %1252 to double
  %1254 = load double, double* %86, align 8
  %1255 = fadd double %1254, %1253
  store double %1255, double* %86, align 8
  br label %1256

; <label>:1256:                                   ; preds = %1248
  %1257 = load i32, i32* %85, align 4
  %1258 = add nsw i32 %1257, -1
  store i32 %1258, i32* %85, align 4
  br label %1245

; <label>:1259:                                   ; preds = %1245
  %1260 = load double, double* %86, align 8
  %1261 = load i32, i32* %32, align 4
  %1262 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1261
  store double %1260, double* %1262, align 8
  %1263 = load double, double* %86, align 8
  %1264 = fmul double %1263, 4.000000e-01
  %1265 = load i32, i32* %32, align 4
  %1266 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.cb, i32 0, i32 %1265
  store double %1264, double* %1266, align 8
  br label %1267

; <label>:1267:                                   ; preds = %1259
  %1268 = load i32, i32* %32, align 4
  %1269 = add nsw i32 %1268, 1
  store i32 %1269, i32* %32, align 4
  br label %1231

; <label>:1270:                                   ; preds = %1231
  %1271 = load i32, i32* %31, align 4
  %1272 = getelementptr inbounds [4 x double], [4 x double]* @L3psycho_anal.pe, i32 0, i32 %1271
  store double 0.000000e+00, double* %1272, align 8
  store i32 0, i32* %32, align 4
  br label %1273

; <label>:1273:                                   ; preds = %1477, %1270
  %1274 = load i32, i32* %32, align 4
  %1275 = load i32, i32* @L3psycho_anal.npart_l, align 4
  %1276 = icmp slt i32 %1274, %1275
  br i1 %1276, label %1277, label %1480

; <label>:1277:                                   ; preds = %1273
  store double 0.000000e+00, double* %88, align 8
  store double 0.000000e+00, double* %89, align 8
  %1278 = load i32, i32* %32, align 4
  %1279 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i32 0, i32 %1278
  %1280 = getelementptr inbounds [2 x i32], [2 x i32]* %1279, i32 0, i32 0
  %1281 = load i32, i32* %1280, align 4
  store i32 %1281, i32* %35, align 4
  br label %1282

; <label>:1282:                                   ; preds = %1312, %1277
  %1283 = load i32, i32* %35, align 4
  %1284 = load i32, i32* %32, align 4
  %1285 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i32 0, i32 %1284
  %1286 = getelementptr inbounds [2 x i32], [2 x i32]* %1285, i32 0, i32 1
  %1287 = load i32, i32* %1286, align 4
  %1288 = icmp sle i32 %1283, %1287
  br i1 %1288, label %1289, label %1315

; <label>:1289:                                   ; preds = %1282
  %1290 = load i32, i32* %32, align 4
  %1291 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i32 0, i32 %1290
  %1292 = load i32, i32* %35, align 4
  %1293 = getelementptr inbounds [64 x double], [64 x double]* %1291, i32 0, i32 %1292
  %1294 = load double, double* %1293, align 8
  %1295 = load i32, i32* %35, align 4
  %1296 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1295
  %1297 = load double, double* %1296, align 8
  %1298 = fmul double %1294, %1297
  %1299 = load double, double* %88, align 8
  %1300 = fadd double %1299, %1298
  store double %1300, double* %88, align 8
  %1301 = load i32, i32* %32, align 4
  %1302 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i32 0, i32 %1301
  %1303 = load i32, i32* %35, align 4
  %1304 = getelementptr inbounds [64 x double], [64 x double]* %1302, i32 0, i32 %1303
  %1305 = load double, double* %1304, align 8
  %1306 = load i32, i32* %35, align 4
  %1307 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.cb, i32 0, i32 %1306
  %1308 = load double, double* %1307, align 8
  %1309 = fmul double %1305, %1308
  %1310 = load double, double* %89, align 8
  %1311 = fadd double %1310, %1309
  store double %1311, double* %89, align 8
  br label %1312

; <label>:1312:                                   ; preds = %1289
  %1313 = load i32, i32* %35, align 4
  %1314 = add nsw i32 %1313, 1
  store i32 %1314, i32* %35, align 4
  br label %1282

; <label>:1315:                                   ; preds = %1282
  %1316 = load double, double* %88, align 8
  store double %1316, double* %87, align 8
  %1317 = load double, double* %87, align 8
  %1318 = fcmp une double %1317, 0.000000e+00
  br i1 %1318, label %1319, label %1340

; <label>:1319:                                   ; preds = %1315
  %1320 = load double, double* %89, align 8
  %1321 = load double, double* %87, align 8
  %1322 = fdiv double %1320, %1321
  store double %1322, double* %87, align 8
  %1323 = load double, double* %87, align 8
  %1324 = fcmp ole double %1323, 0x3FA8F6869E6F084D
  br i1 %1324, label %1325, label %1327

; <label>:1325:                                   ; preds = %1319
  %1326 = call arm_aapcscc double @exp(double 0xC0061AD547A6661A) #7
  store double %1326, double* %87, align 8
  br label %1339

; <label>:1327:                                   ; preds = %1319
  %1328 = load double, double* %87, align 8
  %1329 = fcmp ogt double %1328, 0x3FDFEDFBDEEA22F7
  br i1 %1329, label %1330, label %1331

; <label>:1330:                                   ; preds = %1327
  store double 1.000000e+00, double* %87, align 8
  br label %1338

; <label>:1331:                                   ; preds = %1327
  %1332 = load double, double* %87, align 8
  %1333 = call arm_aapcscc double @log(double %1332) #7
  store double %1333, double* %87, align 8
  %1334 = load double, double* %87, align 8
  %1335 = fmul double 0x3FF30298B36105E3, %1334
  %1336 = fadd double 0x3FEA6FF6E4078667, %1335
  %1337 = call arm_aapcscc double @exp(double %1336) #7
  store double %1337, double* %87, align 8
  br label %1338

; <label>:1338:                                   ; preds = %1331, %1330
  br label %1339

; <label>:1339:                                   ; preds = %1338, %1325
  br label %1340

; <label>:1340:                                   ; preds = %1339, %1315
  %1341 = load i32, i32* %32, align 4
  %1342 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.minval, i32 0, i32 %1341
  %1343 = load double, double* %1342, align 8
  %1344 = load double, double* %87, align 8
  %1345 = fcmp olt double %1343, %1344
  br i1 %1345, label %1346, label %1350

; <label>:1346:                                   ; preds = %1340
  %1347 = load i32, i32* %32, align 4
  %1348 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.minval, i32 0, i32 %1347
  %1349 = load double, double* %1348, align 8
  br label %1352

; <label>:1350:                                   ; preds = %1340
  %1351 = load double, double* %87, align 8
  br label %1352

; <label>:1352:                                   ; preds = %1350, %1346
  %1353 = phi double [ %1349, %1346 ], [ %1351, %1350 ]
  store double %1353, double* %87, align 8
  %1354 = load double, double* %87, align 8
  %1355 = load double, double* %88, align 8
  %1356 = fmul double %1355, %1354
  store double %1356, double* %88, align 8
  %1357 = load double, double* %88, align 8
  %1358 = load i32, i32* %31, align 4
  %1359 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_1, i32 0, i32 %1358
  %1360 = load i32, i32* %32, align 4
  %1361 = getelementptr inbounds [63 x double], [63 x double]* %1359, i32 0, i32 %1360
  %1362 = load double, double* %1361, align 8
  %1363 = fmul double 2.000000e+00, %1362
  %1364 = load i32, i32* %31, align 4
  %1365 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_2, i32 0, i32 %1364
  %1366 = load i32, i32* %32, align 4
  %1367 = getelementptr inbounds [63 x double], [63 x double]* %1365, i32 0, i32 %1366
  %1368 = load double, double* %1367, align 8
  %1369 = fmul double 1.600000e+01, %1368
  %1370 = fcmp olt double %1363, %1369
  br i1 %1370, label %1371, label %1378

; <label>:1371:                                   ; preds = %1352
  %1372 = load i32, i32* %31, align 4
  %1373 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_1, i32 0, i32 %1372
  %1374 = load i32, i32* %32, align 4
  %1375 = getelementptr inbounds [63 x double], [63 x double]* %1373, i32 0, i32 %1374
  %1376 = load double, double* %1375, align 8
  %1377 = fmul double 2.000000e+00, %1376
  br label %1385

; <label>:1378:                                   ; preds = %1352
  %1379 = load i32, i32* %31, align 4
  %1380 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_2, i32 0, i32 %1379
  %1381 = load i32, i32* %32, align 4
  %1382 = getelementptr inbounds [63 x double], [63 x double]* %1380, i32 0, i32 %1381
  %1383 = load double, double* %1382, align 8
  %1384 = fmul double 1.600000e+01, %1383
  br label %1385

; <label>:1385:                                   ; preds = %1378, %1371
  %1386 = phi double [ %1377, %1371 ], [ %1384, %1378 ]
  %1387 = fcmp olt double %1357, %1386
  br i1 %1387, label %1388, label %1390

; <label>:1388:                                   ; preds = %1385
  %1389 = load double, double* %88, align 8
  br label %1420

; <label>:1390:                                   ; preds = %1385
  %1391 = load i32, i32* %31, align 4
  %1392 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_1, i32 0, i32 %1391
  %1393 = load i32, i32* %32, align 4
  %1394 = getelementptr inbounds [63 x double], [63 x double]* %1392, i32 0, i32 %1393
  %1395 = load double, double* %1394, align 8
  %1396 = fmul double 2.000000e+00, %1395
  %1397 = load i32, i32* %31, align 4
  %1398 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_2, i32 0, i32 %1397
  %1399 = load i32, i32* %32, align 4
  %1400 = getelementptr inbounds [63 x double], [63 x double]* %1398, i32 0, i32 %1399
  %1401 = load double, double* %1400, align 8
  %1402 = fmul double 1.600000e+01, %1401
  %1403 = fcmp olt double %1396, %1402
  br i1 %1403, label %1404, label %1411

; <label>:1404:                                   ; preds = %1390
  %1405 = load i32, i32* %31, align 4
  %1406 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_1, i32 0, i32 %1405
  %1407 = load i32, i32* %32, align 4
  %1408 = getelementptr inbounds [63 x double], [63 x double]* %1406, i32 0, i32 %1407
  %1409 = load double, double* %1408, align 8
  %1410 = fmul double 2.000000e+00, %1409
  br label %1418

; <label>:1411:                                   ; preds = %1390
  %1412 = load i32, i32* %31, align 4
  %1413 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_2, i32 0, i32 %1412
  %1414 = load i32, i32* %32, align 4
  %1415 = getelementptr inbounds [63 x double], [63 x double]* %1413, i32 0, i32 %1414
  %1416 = load double, double* %1415, align 8
  %1417 = fmul double 1.600000e+01, %1416
  br label %1418

; <label>:1418:                                   ; preds = %1411, %1404
  %1419 = phi double [ %1410, %1404 ], [ %1417, %1411 ]
  br label %1420

; <label>:1420:                                   ; preds = %1418, %1388
  %1421 = phi double [ %1389, %1388 ], [ %1419, %1418 ]
  store double %1421, double* %90, align 8
  %1422 = load i32, i32* %32, align 4
  %1423 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.qthr_l, i32 0, i32 %1422
  %1424 = load double, double* %1423, align 8
  %1425 = load double, double* %90, align 8
  %1426 = fcmp ogt double %1424, %1425
  br i1 %1426, label %1427, label %1431

; <label>:1427:                                   ; preds = %1420
  %1428 = load i32, i32* %32, align 4
  %1429 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.qthr_l, i32 0, i32 %1428
  %1430 = load double, double* %1429, align 8
  br label %1433

; <label>:1431:                                   ; preds = %1420
  %1432 = load double, double* %90, align 8
  br label %1433

; <label>:1433:                                   ; preds = %1431, %1427
  %1434 = phi double [ %1430, %1427 ], [ %1432, %1431 ]
  %1435 = load i32, i32* %32, align 4
  %1436 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %1435
  store double %1434, double* %1436, align 8
  %1437 = load i32, i32* %31, align 4
  %1438 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_1, i32 0, i32 %1437
  %1439 = load i32, i32* %32, align 4
  %1440 = getelementptr inbounds [63 x double], [63 x double]* %1438, i32 0, i32 %1439
  %1441 = load double, double* %1440, align 8
  %1442 = load i32, i32* %31, align 4
  %1443 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_2, i32 0, i32 %1442
  %1444 = load i32, i32* %32, align 4
  %1445 = getelementptr inbounds [63 x double], [63 x double]* %1443, i32 0, i32 %1444
  store double %1441, double* %1445, align 8
  %1446 = load double, double* %88, align 8
  %1447 = load i32, i32* %31, align 4
  %1448 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_1, i32 0, i32 %1447
  %1449 = load i32, i32* %32, align 4
  %1450 = getelementptr inbounds [63 x double], [63 x double]* %1448, i32 0, i32 %1449
  store double %1446, double* %1450, align 8
  %1451 = load i32, i32* %32, align 4
  %1452 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %1451
  %1453 = load double, double* %1452, align 8
  %1454 = load i32, i32* %32, align 4
  %1455 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1454
  %1456 = load double, double* %1455, align 8
  %1457 = fcmp olt double %1453, %1456
  br i1 %1457, label %1458, label %1476

; <label>:1458:                                   ; preds = %1433
  %1459 = load i32, i32* %32, align 4
  %1460 = getelementptr inbounds [63 x i32], [63 x i32]* @L3psycho_anal.numlines_l, i32 0, i32 %1459
  %1461 = load i32, i32* %1460, align 4
  %1462 = sitofp i32 %1461 to double
  %1463 = load i32, i32* %32, align 4
  %1464 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %1463
  %1465 = load double, double* %1464, align 8
  %1466 = load i32, i32* %32, align 4
  %1467 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1466
  %1468 = load double, double* %1467, align 8
  %1469 = fdiv double %1465, %1468
  %1470 = call arm_aapcscc double @log(double %1469) #7
  %1471 = fmul double %1462, %1470
  %1472 = load i32, i32* %31, align 4
  %1473 = getelementptr inbounds [4 x double], [4 x double]* @L3psycho_anal.pe, i32 0, i32 %1472
  %1474 = load double, double* %1473, align 8
  %1475 = fsub double %1474, %1471
  store double %1475, double* %1473, align 8
  br label %1476

; <label>:1476:                                   ; preds = %1458, %1433
  br label %1477

; <label>:1477:                                   ; preds = %1476
  %1478 = load i32, i32* %32, align 4
  %1479 = add nsw i32 %1478, 1
  store i32 %1479, i32* %32, align 4
  br label %1273

; <label>:1480:                                   ; preds = %1273
  %1481 = load i32, i32* %31, align 4
  %1482 = icmp slt i32 %1481, 2
  br i1 %1482, label %1483, label %1585

; <label>:1483:                                   ; preds = %1480
  %1484 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %1485 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %1484, i32 0, i32 37
  %1486 = load i32, i32* %1485, align 4
  %1487 = icmp ne i32 %1486, 0
  br i1 %1487, label %1488, label %1491

; <label>:1488:                                   ; preds = %1483
  %1489 = load i32, i32* %31, align 4
  %1490 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 %1489
  store i32 1, i32* %1490, align 4
  br label %1584

; <label>:1491:                                   ; preds = %1483
  %1492 = load i32, i32* %31, align 4
  %1493 = getelementptr inbounds [4 x double], [4 x double]* @L3psycho_anal.pe, i32 0, i32 %1492
  %1494 = load double, double* %1493, align 8
  %1495 = fcmp ogt double %1494, 3.000000e+03
  br i1 %1495, label %1496, label %1499

; <label>:1496:                                   ; preds = %1491
  %1497 = load i32, i32* %31, align 4
  %1498 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 %1497
  store i32 0, i32* %1498, align 4
  br label %1583

; <label>:1499:                                   ; preds = %1491
  store float 0.000000e+00, float* %93, align 4
  store float 0.000000e+00, float* %94, align 4
  store float 0.000000e+00, float* %95, align 4
  store i32 64, i32* %34, align 4
  br label %1500

; <label>:1500:                                   ; preds = %1519, %1499
  %1501 = load i32, i32* %34, align 4
  %1502 = icmp slt i32 %1501, 129
  br i1 %1502, label %1503, label %1522

; <label>:1503:                                   ; preds = %1500
  %1504 = load i32, i32* %34, align 4
  %1505 = getelementptr inbounds [129 x float], [129 x float]* getelementptr inbounds ([3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 0), i32 0, i32 %1504
  %1506 = load float, float* %1505, align 4
  %1507 = load float, float* %93, align 4
  %1508 = fadd float %1507, %1506
  store float %1508, float* %93, align 4
  %1509 = load i32, i32* %34, align 4
  %1510 = getelementptr inbounds [129 x float], [129 x float]* getelementptr inbounds ([3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 1), i32 0, i32 %1509
  %1511 = load float, float* %1510, align 4
  %1512 = load float, float* %94, align 4
  %1513 = fadd float %1512, %1511
  store float %1513, float* %94, align 4
  %1514 = load i32, i32* %34, align 4
  %1515 = getelementptr inbounds [129 x float], [129 x float]* getelementptr inbounds ([3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 2), i32 0, i32 %1514
  %1516 = load float, float* %1515, align 4
  %1517 = load float, float* %95, align 4
  %1518 = fadd float %1517, %1516
  store float %1518, float* %95, align 4
  br label %1519

; <label>:1519:                                   ; preds = %1503
  %1520 = load i32, i32* %34, align 4
  %1521 = add nsw i32 %1520, 1
  store i32 %1521, i32* %34, align 4
  br label %1500

; <label>:1522:                                   ; preds = %1500
  %1523 = load float, float* %93, align 4
  %1524 = load float, float* %94, align 4
  %1525 = fcmp olt float %1523, %1524
  br i1 %1525, label %1526, label %1528

; <label>:1526:                                   ; preds = %1522
  %1527 = load float, float* %93, align 4
  br label %1530

; <label>:1528:                                   ; preds = %1522
  %1529 = load float, float* %94, align 4
  br label %1530

; <label>:1530:                                   ; preds = %1528, %1526
  %1531 = phi float [ %1527, %1526 ], [ %1529, %1528 ]
  store float %1531, float* %91, align 4
  %1532 = load float, float* %91, align 4
  %1533 = load float, float* %95, align 4
  %1534 = fcmp olt float %1532, %1533
  br i1 %1534, label %1535, label %1537

; <label>:1535:                                   ; preds = %1530
  %1536 = load float, float* %91, align 4
  br label %1539

; <label>:1537:                                   ; preds = %1530
  %1538 = load float, float* %95, align 4
  br label %1539

; <label>:1539:                                   ; preds = %1537, %1535
  %1540 = phi float [ %1536, %1535 ], [ %1538, %1537 ]
  store float %1540, float* %91, align 4
  %1541 = load float, float* %93, align 4
  %1542 = load float, float* %94, align 4
  %1543 = fcmp ogt float %1541, %1542
  br i1 %1543, label %1544, label %1546

; <label>:1544:                                   ; preds = %1539
  %1545 = load float, float* %93, align 4
  br label %1548

; <label>:1546:                                   ; preds = %1539
  %1547 = load float, float* %94, align 4
  br label %1548

; <label>:1548:                                   ; preds = %1546, %1544
  %1549 = phi float [ %1545, %1544 ], [ %1547, %1546 ]
  store float %1549, float* %92, align 4
  %1550 = load float, float* %92, align 4
  %1551 = load float, float* %95, align 4
  %1552 = fcmp ogt float %1550, %1551
  br i1 %1552, label %1553, label %1555

; <label>:1553:                                   ; preds = %1548
  %1554 = load float, float* %92, align 4
  br label %1557

; <label>:1555:                                   ; preds = %1548
  %1556 = load float, float* %95, align 4
  br label %1557

; <label>:1557:                                   ; preds = %1555, %1553
  %1558 = phi float [ %1554, %1553 ], [ %1556, %1555 ]
  store float %1558, float* %92, align 4
  %1559 = load i32, i32* %31, align 4
  %1560 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 %1559
  store i32 1, i32* %1560, align 4
  %1561 = load float, float* %92, align 4
  %1562 = load float, float* %91, align 4
  %1563 = fmul float 3.000000e+01, %1562
  %1564 = fcmp ogt float %1561, %1563
  br i1 %1564, label %1565, label %1568

; <label>:1565:                                   ; preds = %1557
  %1566 = load i32, i32* %31, align 4
  %1567 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 %1566
  store i32 0, i32* %1567, align 4
  br label %1582

; <label>:1568:                                   ; preds = %1557
  %1569 = load float, float* %92, align 4
  %1570 = load float, float* %91, align 4
  %1571 = fmul float 1.000000e+01, %1570
  %1572 = fcmp ogt float %1569, %1571
  br i1 %1572, label %1573, label %1581

; <label>:1573:                                   ; preds = %1568
  %1574 = load i32, i32* %31, align 4
  %1575 = getelementptr inbounds [4 x double], [4 x double]* @L3psycho_anal.pe, i32 0, i32 %1574
  %1576 = load double, double* %1575, align 8
  %1577 = fcmp ogt double %1576, 1.000000e+03
  br i1 %1577, label %1578, label %1581

; <label>:1578:                                   ; preds = %1573
  %1579 = load i32, i32* %31, align 4
  %1580 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 %1579
  store i32 0, i32* %1580, align 4
  br label %1581

; <label>:1581:                                   ; preds = %1578, %1573, %1568
  br label %1582

; <label>:1582:                                   ; preds = %1581, %1565
  br label %1583

; <label>:1583:                                   ; preds = %1582, %1496
  br label %1584

; <label>:1584:                                   ; preds = %1583, %1488
  br label %1585

; <label>:1585:                                   ; preds = %1584, %1480
  store i32 0, i32* %36, align 4
  br label %1586

; <label>:1586:                                   ; preds = %1665, %1585
  %1587 = load i32, i32* %36, align 4
  %1588 = icmp slt i32 %1587, 21
  br i1 %1588, label %1589, label %1668

; <label>:1589:                                   ; preds = %1586
  %1590 = load i32, i32* %36, align 4
  %1591 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.w1_l, i32 0, i32 %1590
  %1592 = load double, double* %1591, align 8
  %1593 = load i32, i32* %36, align 4
  %1594 = getelementptr inbounds [21 x i32], [21 x i32]* @L3psycho_anal.bu_l, i32 0, i32 %1593
  %1595 = load i32, i32* %1594, align 4
  %1596 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1595
  %1597 = load double, double* %1596, align 8
  %1598 = fmul double %1592, %1597
  %1599 = load i32, i32* %36, align 4
  %1600 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.w2_l, i32 0, i32 %1599
  %1601 = load double, double* %1600, align 8
  %1602 = load i32, i32* %36, align 4
  %1603 = getelementptr inbounds [21 x i32], [21 x i32]* @L3psycho_anal.bo_l, i32 0, i32 %1602
  %1604 = load i32, i32* %1603, align 4
  %1605 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1604
  %1606 = load double, double* %1605, align 8
  %1607 = fmul double %1601, %1606
  %1608 = fadd double %1598, %1607
  store double %1608, double* %96, align 8
  %1609 = load i32, i32* %36, align 4
  %1610 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.w1_l, i32 0, i32 %1609
  %1611 = load double, double* %1610, align 8
  %1612 = load i32, i32* %36, align 4
  %1613 = getelementptr inbounds [21 x i32], [21 x i32]* @L3psycho_anal.bu_l, i32 0, i32 %1612
  %1614 = load i32, i32* %1613, align 4
  %1615 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %1614
  %1616 = load double, double* %1615, align 8
  %1617 = fmul double %1611, %1616
  %1618 = load i32, i32* %36, align 4
  %1619 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.w2_l, i32 0, i32 %1618
  %1620 = load double, double* %1619, align 8
  %1621 = load i32, i32* %36, align 4
  %1622 = getelementptr inbounds [21 x i32], [21 x i32]* @L3psycho_anal.bo_l, i32 0, i32 %1621
  %1623 = load i32, i32* %1622, align 4
  %1624 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %1623
  %1625 = load double, double* %1624, align 8
  %1626 = fmul double %1620, %1625
  %1627 = fadd double %1617, %1626
  store double %1627, double* %97, align 8
  %1628 = load i32, i32* %36, align 4
  %1629 = getelementptr inbounds [21 x i32], [21 x i32]* @L3psycho_anal.bu_l, i32 0, i32 %1628
  %1630 = load i32, i32* %1629, align 4
  %1631 = add nsw i32 %1630, 1
  store i32 %1631, i32* %32, align 4
  br label %1632

; <label>:1632:                                   ; preds = %1649, %1589
  %1633 = load i32, i32* %32, align 4
  %1634 = load i32, i32* %36, align 4
  %1635 = getelementptr inbounds [21 x i32], [21 x i32]* @L3psycho_anal.bo_l, i32 0, i32 %1634
  %1636 = load i32, i32* %1635, align 4
  %1637 = icmp slt i32 %1633, %1636
  br i1 %1637, label %1638, label %1652

; <label>:1638:                                   ; preds = %1632
  %1639 = load i32, i32* %32, align 4
  %1640 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1639
  %1641 = load double, double* %1640, align 8
  %1642 = load double, double* %96, align 8
  %1643 = fadd double %1642, %1641
  store double %1643, double* %96, align 8
  %1644 = load i32, i32* %32, align 4
  %1645 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %1644
  %1646 = load double, double* %1645, align 8
  %1647 = load double, double* %97, align 8
  %1648 = fadd double %1647, %1646
  store double %1648, double* %97, align 8
  br label %1649

; <label>:1649:                                   ; preds = %1638
  %1650 = load i32, i32* %32, align 4
  %1651 = add nsw i32 %1650, 1
  store i32 %1651, i32* %32, align 4
  br label %1632

; <label>:1652:                                   ; preds = %1632
  %1653 = load double, double* %96, align 8
  %1654 = load i32, i32* %31, align 4
  %1655 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i32 0, i32 %1654
  %1656 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1655, i32 0, i32 0
  %1657 = load i32, i32* %36, align 4
  %1658 = getelementptr inbounds [22 x double], [22 x double]* %1656, i32 0, i32 %1657
  store double %1653, double* %1658, align 8
  %1659 = load double, double* %97, align 8
  %1660 = load i32, i32* %31, align 4
  %1661 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %1660
  %1662 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1661, i32 0, i32 0
  %1663 = load i32, i32* %36, align 4
  %1664 = getelementptr inbounds [22 x double], [22 x double]* %1662, i32 0, i32 %1663
  store double %1659, double* %1664, align 8
  br label %1665

; <label>:1665:                                   ; preds = %1652
  %1666 = load i32, i32* %36, align 4
  %1667 = add nsw i32 %1666, 1
  store i32 %1667, i32* %36, align 4
  br label %1586

; <label>:1668:                                   ; preds = %1586
  store i32 0, i32* %37, align 4
  br label %1669

; <label>:1669:                                   ; preds = %1849, %1668
  %1670 = load i32, i32* %37, align 4
  %1671 = icmp slt i32 %1670, 3
  br i1 %1671, label %1672, label %1852

; <label>:1672:                                   ; preds = %1669
  store i32 0, i32* %34, align 4
  store i32 0, i32* %32, align 4
  br label %1673

; <label>:1673:                                   ; preds = %1707, %1672
  %1674 = load i32, i32* %32, align 4
  %1675 = load i32, i32* @L3psycho_anal.npart_s_orig, align 4
  %1676 = icmp slt i32 %1674, %1675
  br i1 %1676, label %1677, label %1710

; <label>:1677:                                   ; preds = %1673
  %1678 = load i32, i32* %37, align 4
  %1679 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 %1678
  %1680 = load i32, i32* %34, align 4
  %1681 = add nsw i32 %1680, 1
  store i32 %1681, i32* %34, align 4
  %1682 = getelementptr inbounds [129 x float], [129 x float]* %1679, i32 0, i32 %1680
  %1683 = load float, float* %1682, align 4
  store float %1683, float* %99, align 4
  %1684 = load i32, i32* %32, align 4
  %1685 = getelementptr inbounds [63 x i32], [63 x i32]* @L3psycho_anal.numlines_s, i32 0, i32 %1684
  %1686 = load i32, i32* %1685, align 4
  store i32 %1686, i32* %98, align 4
  br label %1687

; <label>:1687:                                   ; preds = %1699, %1677
  %1688 = load i32, i32* %98, align 4
  %1689 = icmp sgt i32 %1688, 0
  br i1 %1689, label %1690, label %1702

; <label>:1690:                                   ; preds = %1687
  %1691 = load i32, i32* %37, align 4
  %1692 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i32 0, i32 %1691
  %1693 = load i32, i32* %34, align 4
  %1694 = add nsw i32 %1693, 1
  store i32 %1694, i32* %34, align 4
  %1695 = getelementptr inbounds [129 x float], [129 x float]* %1692, i32 0, i32 %1693
  %1696 = load float, float* %1695, align 4
  %1697 = load float, float* %99, align 4
  %1698 = fadd float %1697, %1696
  store float %1698, float* %99, align 4
  br label %1699

; <label>:1699:                                   ; preds = %1690
  %1700 = load i32, i32* %98, align 4
  %1701 = add nsw i32 %1700, -1
  store i32 %1701, i32* %98, align 4
  br label %1687

; <label>:1702:                                   ; preds = %1687
  %1703 = load float, float* %99, align 4
  %1704 = fpext float %1703 to double
  %1705 = load i32, i32* %32, align 4
  %1706 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1705
  store double %1704, double* %1706, align 8
  br label %1707

; <label>:1707:                                   ; preds = %1702
  %1708 = load i32, i32* %32, align 4
  %1709 = add nsw i32 %1708, 1
  store i32 %1709, i32* %32, align 4
  br label %1673

; <label>:1710:                                   ; preds = %1673
  store i32 0, i32* %32, align 4
  br label %1711

; <label>:1711:                                   ; preds = %1758, %1710
  %1712 = load i32, i32* %32, align 4
  %1713 = load i32, i32* @L3psycho_anal.npart_s, align 4
  %1714 = icmp slt i32 %1712, %1713
  br i1 %1714, label %1715, label %1761

; <label>:1715:                                   ; preds = %1711
  store double 0.000000e+00, double* %100, align 8
  %1716 = load i32, i32* %32, align 4
  %1717 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i32 0, i32 %1716
  %1718 = getelementptr inbounds [2 x i32], [2 x i32]* %1717, i32 0, i32 0
  %1719 = load i32, i32* %1718, align 4
  store i32 %1719, i32* %35, align 4
  br label %1720

; <label>:1720:                                   ; preds = %1739, %1715
  %1721 = load i32, i32* %35, align 4
  %1722 = load i32, i32* %32, align 4
  %1723 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i32 0, i32 %1722
  %1724 = getelementptr inbounds [2 x i32], [2 x i32]* %1723, i32 0, i32 1
  %1725 = load i32, i32* %1724, align 4
  %1726 = icmp sle i32 %1721, %1725
  br i1 %1726, label %1727, label %1742

; <label>:1727:                                   ; preds = %1720
  %1728 = load i32, i32* %32, align 4
  %1729 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i32 0, i32 %1728
  %1730 = load i32, i32* %35, align 4
  %1731 = getelementptr inbounds [64 x double], [64 x double]* %1729, i32 0, i32 %1730
  %1732 = load double, double* %1731, align 8
  %1733 = load i32, i32* %35, align 4
  %1734 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1733
  %1735 = load double, double* %1734, align 8
  %1736 = fmul double %1732, %1735
  %1737 = load double, double* %100, align 8
  %1738 = fadd double %1737, %1736
  store double %1738, double* %100, align 8
  br label %1739

; <label>:1739:                                   ; preds = %1727
  %1740 = load i32, i32* %35, align 4
  %1741 = add nsw i32 %1740, 1
  store i32 %1741, i32* %35, align 4
  br label %1720

; <label>:1742:                                   ; preds = %1720
  %1743 = load i32, i32* %32, align 4
  %1744 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.qthr_s, i32 0, i32 %1743
  %1745 = load double, double* %1744, align 8
  %1746 = load double, double* %100, align 8
  %1747 = fcmp ogt double %1745, %1746
  br i1 %1747, label %1748, label %1752

; <label>:1748:                                   ; preds = %1742
  %1749 = load i32, i32* %32, align 4
  %1750 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.qthr_s, i32 0, i32 %1749
  %1751 = load double, double* %1750, align 8
  br label %1754

; <label>:1752:                                   ; preds = %1742
  %1753 = load double, double* %100, align 8
  br label %1754

; <label>:1754:                                   ; preds = %1752, %1748
  %1755 = phi double [ %1751, %1748 ], [ %1753, %1752 ]
  %1756 = load i32, i32* %32, align 4
  %1757 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %1756
  store double %1755, double* %1757, align 8
  br label %1758

; <label>:1758:                                   ; preds = %1754
  %1759 = load i32, i32* %32, align 4
  %1760 = add nsw i32 %1759, 1
  store i32 %1760, i32* %32, align 4
  br label %1711

; <label>:1761:                                   ; preds = %1711
  store i32 0, i32* %36, align 4
  br label %1762

; <label>:1762:                                   ; preds = %1845, %1761
  %1763 = load i32, i32* %36, align 4
  %1764 = icmp slt i32 %1763, 12
  br i1 %1764, label %1765, label %1848

; <label>:1765:                                   ; preds = %1762
  %1766 = load i32, i32* %36, align 4
  %1767 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.w1_s, i32 0, i32 %1766
  %1768 = load double, double* %1767, align 8
  %1769 = load i32, i32* %36, align 4
  %1770 = getelementptr inbounds [12 x i32], [12 x i32]* @L3psycho_anal.bu_s, i32 0, i32 %1769
  %1771 = load i32, i32* %1770, align 4
  %1772 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1771
  %1773 = load double, double* %1772, align 8
  %1774 = fmul double %1768, %1773
  %1775 = load i32, i32* %36, align 4
  %1776 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.w2_s, i32 0, i32 %1775
  %1777 = load double, double* %1776, align 8
  %1778 = load i32, i32* %36, align 4
  %1779 = getelementptr inbounds [12 x i32], [12 x i32]* @L3psycho_anal.bo_s, i32 0, i32 %1778
  %1780 = load i32, i32* %1779, align 4
  %1781 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1780
  %1782 = load double, double* %1781, align 8
  %1783 = fmul double %1777, %1782
  %1784 = fadd double %1774, %1783
  store double %1784, double* %101, align 8
  %1785 = load i32, i32* %36, align 4
  %1786 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.w1_s, i32 0, i32 %1785
  %1787 = load double, double* %1786, align 8
  %1788 = load i32, i32* %36, align 4
  %1789 = getelementptr inbounds [12 x i32], [12 x i32]* @L3psycho_anal.bu_s, i32 0, i32 %1788
  %1790 = load i32, i32* %1789, align 4
  %1791 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %1790
  %1792 = load double, double* %1791, align 8
  %1793 = fmul double %1787, %1792
  %1794 = load i32, i32* %36, align 4
  %1795 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.w2_s, i32 0, i32 %1794
  %1796 = load double, double* %1795, align 8
  %1797 = load i32, i32* %36, align 4
  %1798 = getelementptr inbounds [12 x i32], [12 x i32]* @L3psycho_anal.bo_s, i32 0, i32 %1797
  %1799 = load i32, i32* %1798, align 4
  %1800 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %1799
  %1801 = load double, double* %1800, align 8
  %1802 = fmul double %1796, %1801
  %1803 = fadd double %1793, %1802
  store double %1803, double* %102, align 8
  %1804 = load i32, i32* %36, align 4
  %1805 = getelementptr inbounds [12 x i32], [12 x i32]* @L3psycho_anal.bu_s, i32 0, i32 %1804
  %1806 = load i32, i32* %1805, align 4
  %1807 = add nsw i32 %1806, 1
  store i32 %1807, i32* %32, align 4
  br label %1808

; <label>:1808:                                   ; preds = %1825, %1765
  %1809 = load i32, i32* %32, align 4
  %1810 = load i32, i32* %36, align 4
  %1811 = getelementptr inbounds [12 x i32], [12 x i32]* @L3psycho_anal.bo_s, i32 0, i32 %1810
  %1812 = load i32, i32* %1811, align 4
  %1813 = icmp slt i32 %1809, %1812
  br i1 %1813, label %1814, label %1828

; <label>:1814:                                   ; preds = %1808
  %1815 = load i32, i32* %32, align 4
  %1816 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i32 0, i32 %1815
  %1817 = load double, double* %1816, align 8
  %1818 = load double, double* %101, align 8
  %1819 = fadd double %1818, %1817
  store double %1819, double* %101, align 8
  %1820 = load i32, i32* %32, align 4
  %1821 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i32 0, i32 %1820
  %1822 = load double, double* %1821, align 8
  %1823 = load double, double* %102, align 8
  %1824 = fadd double %1823, %1822
  store double %1824, double* %102, align 8
  br label %1825

; <label>:1825:                                   ; preds = %1814
  %1826 = load i32, i32* %32, align 4
  %1827 = add nsw i32 %1826, 1
  store i32 %1827, i32* %32, align 4
  br label %1808

; <label>:1828:                                   ; preds = %1808
  %1829 = load double, double* %101, align 8
  %1830 = load i32, i32* %31, align 4
  %1831 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i32 0, i32 %1830
  %1832 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1831, i32 0, i32 1
  %1833 = load i32, i32* %36, align 4
  %1834 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %1832, i32 0, i32 %1833
  %1835 = load i32, i32* %37, align 4
  %1836 = getelementptr inbounds [3 x double], [3 x double]* %1834, i32 0, i32 %1835
  store double %1829, double* %1836, align 8
  %1837 = load double, double* %102, align 8
  %1838 = load i32, i32* %31, align 4
  %1839 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %1838
  %1840 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1839, i32 0, i32 1
  %1841 = load i32, i32* %36, align 4
  %1842 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %1840, i32 0, i32 %1841
  %1843 = load i32, i32* %37, align 4
  %1844 = getelementptr inbounds [3 x double], [3 x double]* %1842, i32 0, i32 %1843
  store double %1837, double* %1844, align 8
  br label %1845

; <label>:1845:                                   ; preds = %1828
  %1846 = load i32, i32* %36, align 4
  %1847 = add nsw i32 %1846, 1
  store i32 %1847, i32* %36, align 4
  br label %1762

; <label>:1848:                                   ; preds = %1762
  br label %1849

; <label>:1849:                                   ; preds = %1848
  %1850 = load i32, i32* %37, align 4
  %1851 = add nsw i32 %1850, 1
  store i32 %1851, i32* %37, align 4
  br label %1669

; <label>:1852:                                   ; preds = %1669
  br label %1853

; <label>:1853:                                   ; preds = %1852
  %1854 = load i32, i32* %31, align 4
  %1855 = add nsw i32 %1854, 1
  store i32 %1855, i32* %31, align 4
  br label %540

; <label>:1856:                                   ; preds = %540
  %1857 = load i32, i32* %30, align 4
  %1858 = icmp eq i32 %1857, 4
  br i1 %1858, label %1859, label %2246

; <label>:1859:                                   ; preds = %1856
  store i32 2, i32* %106, align 4
  store i32 3, i32* %107, align 4
  store i32 0, i32* %36, align 4
  br label %1860

; <label>:1860:                                   ; preds = %2025, %1859
  %1861 = load i32, i32* %36, align 4
  %1862 = icmp slt i32 %1861, 21
  br i1 %1862, label %1863, label %2028

; <label>:1863:                                   ; preds = %1860
  %1864 = load i32, i32* %36, align 4
  %1865 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 0), i32 0, i32 %1864
  %1866 = load double, double* %1865, align 8
  %1867 = load i32, i32* %36, align 4
  %1868 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 0), i32 0, i32 %1867
  %1869 = load double, double* %1868, align 8
  %1870 = fmul double 1.580000e+00, %1869
  %1871 = fcmp ole double %1866, %1870
  br i1 %1871, label %1872, label %2024

; <label>:1872:                                   ; preds = %1863
  %1873 = load i32, i32* %36, align 4
  %1874 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 0), i32 0, i32 %1873
  %1875 = load double, double* %1874, align 8
  %1876 = load i32, i32* %36, align 4
  %1877 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 0), i32 0, i32 %1876
  %1878 = load double, double* %1877, align 8
  %1879 = fmul double 1.580000e+00, %1878
  %1880 = fcmp ole double %1875, %1879
  br i1 %1880, label %1881, label %2024

; <label>:1881:                                   ; preds = %1872
  %1882 = load i32, i32* %36, align 4
  %1883 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.mld_l, i32 0, i32 %1882
  %1884 = load double, double* %1883, align 8
  %1885 = load i32, i32* %107, align 4
  %1886 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i32 0, i32 %1885
  %1887 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1886, i32 0, i32 0
  %1888 = load i32, i32* %36, align 4
  %1889 = getelementptr inbounds [22 x double], [22 x double]* %1887, i32 0, i32 %1888
  %1890 = load double, double* %1889, align 8
  %1891 = fmul double %1884, %1890
  store double %1891, double* %105, align 8
  %1892 = load i32, i32* %106, align 4
  %1893 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %1892
  %1894 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1893, i32 0, i32 0
  %1895 = load i32, i32* %36, align 4
  %1896 = getelementptr inbounds [22 x double], [22 x double]* %1894, i32 0, i32 %1895
  %1897 = load double, double* %1896, align 8
  %1898 = load i32, i32* %107, align 4
  %1899 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %1898
  %1900 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1899, i32 0, i32 0
  %1901 = load i32, i32* %36, align 4
  %1902 = getelementptr inbounds [22 x double], [22 x double]* %1900, i32 0, i32 %1901
  %1903 = load double, double* %1902, align 8
  %1904 = load double, double* %105, align 8
  %1905 = fcmp olt double %1903, %1904
  br i1 %1905, label %1906, label %1913

; <label>:1906:                                   ; preds = %1881
  %1907 = load i32, i32* %107, align 4
  %1908 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %1907
  %1909 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1908, i32 0, i32 0
  %1910 = load i32, i32* %36, align 4
  %1911 = getelementptr inbounds [22 x double], [22 x double]* %1909, i32 0, i32 %1910
  %1912 = load double, double* %1911, align 8
  br label %1915

; <label>:1913:                                   ; preds = %1881
  %1914 = load double, double* %105, align 8
  br label %1915

; <label>:1915:                                   ; preds = %1913, %1906
  %1916 = phi double [ %1912, %1906 ], [ %1914, %1913 ]
  %1917 = fcmp ogt double %1897, %1916
  br i1 %1917, label %1918, label %1925

; <label>:1918:                                   ; preds = %1915
  %1919 = load i32, i32* %106, align 4
  %1920 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %1919
  %1921 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1920, i32 0, i32 0
  %1922 = load i32, i32* %36, align 4
  %1923 = getelementptr inbounds [22 x double], [22 x double]* %1921, i32 0, i32 %1922
  %1924 = load double, double* %1923, align 8
  br label %1945

; <label>:1925:                                   ; preds = %1915
  %1926 = load i32, i32* %107, align 4
  %1927 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %1926
  %1928 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1927, i32 0, i32 0
  %1929 = load i32, i32* %36, align 4
  %1930 = getelementptr inbounds [22 x double], [22 x double]* %1928, i32 0, i32 %1929
  %1931 = load double, double* %1930, align 8
  %1932 = load double, double* %105, align 8
  %1933 = fcmp olt double %1931, %1932
  br i1 %1933, label %1934, label %1941

; <label>:1934:                                   ; preds = %1925
  %1935 = load i32, i32* %107, align 4
  %1936 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %1935
  %1937 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1936, i32 0, i32 0
  %1938 = load i32, i32* %36, align 4
  %1939 = getelementptr inbounds [22 x double], [22 x double]* %1937, i32 0, i32 %1938
  %1940 = load double, double* %1939, align 8
  br label %1943

; <label>:1941:                                   ; preds = %1925
  %1942 = load double, double* %105, align 8
  br label %1943

; <label>:1943:                                   ; preds = %1941, %1934
  %1944 = phi double [ %1940, %1934 ], [ %1942, %1941 ]
  br label %1945

; <label>:1945:                                   ; preds = %1943, %1918
  %1946 = phi double [ %1924, %1918 ], [ %1944, %1943 ]
  store double %1946, double* %104, align 8
  %1947 = load i32, i32* %36, align 4
  %1948 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.mld_l, i32 0, i32 %1947
  %1949 = load double, double* %1948, align 8
  %1950 = load i32, i32* %106, align 4
  %1951 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i32 0, i32 %1950
  %1952 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1951, i32 0, i32 0
  %1953 = load i32, i32* %36, align 4
  %1954 = getelementptr inbounds [22 x double], [22 x double]* %1952, i32 0, i32 %1953
  %1955 = load double, double* %1954, align 8
  %1956 = fmul double %1949, %1955
  store double %1956, double* %105, align 8
  %1957 = load i32, i32* %107, align 4
  %1958 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %1957
  %1959 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1958, i32 0, i32 0
  %1960 = load i32, i32* %36, align 4
  %1961 = getelementptr inbounds [22 x double], [22 x double]* %1959, i32 0, i32 %1960
  %1962 = load double, double* %1961, align 8
  %1963 = load i32, i32* %106, align 4
  %1964 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %1963
  %1965 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1964, i32 0, i32 0
  %1966 = load i32, i32* %36, align 4
  %1967 = getelementptr inbounds [22 x double], [22 x double]* %1965, i32 0, i32 %1966
  %1968 = load double, double* %1967, align 8
  %1969 = load double, double* %105, align 8
  %1970 = fcmp olt double %1968, %1969
  br i1 %1970, label %1971, label %1978

; <label>:1971:                                   ; preds = %1945
  %1972 = load i32, i32* %106, align 4
  %1973 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %1972
  %1974 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1973, i32 0, i32 0
  %1975 = load i32, i32* %36, align 4
  %1976 = getelementptr inbounds [22 x double], [22 x double]* %1974, i32 0, i32 %1975
  %1977 = load double, double* %1976, align 8
  br label %1980

; <label>:1978:                                   ; preds = %1945
  %1979 = load double, double* %105, align 8
  br label %1980

; <label>:1980:                                   ; preds = %1978, %1971
  %1981 = phi double [ %1977, %1971 ], [ %1979, %1978 ]
  %1982 = fcmp ogt double %1962, %1981
  br i1 %1982, label %1983, label %1990

; <label>:1983:                                   ; preds = %1980
  %1984 = load i32, i32* %107, align 4
  %1985 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %1984
  %1986 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1985, i32 0, i32 0
  %1987 = load i32, i32* %36, align 4
  %1988 = getelementptr inbounds [22 x double], [22 x double]* %1986, i32 0, i32 %1987
  %1989 = load double, double* %1988, align 8
  br label %2010

; <label>:1990:                                   ; preds = %1980
  %1991 = load i32, i32* %106, align 4
  %1992 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %1991
  %1993 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %1992, i32 0, i32 0
  %1994 = load i32, i32* %36, align 4
  %1995 = getelementptr inbounds [22 x double], [22 x double]* %1993, i32 0, i32 %1994
  %1996 = load double, double* %1995, align 8
  %1997 = load double, double* %105, align 8
  %1998 = fcmp olt double %1996, %1997
  br i1 %1998, label %1999, label %2006

; <label>:1999:                                   ; preds = %1990
  %2000 = load i32, i32* %106, align 4
  %2001 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2000
  %2002 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2001, i32 0, i32 0
  %2003 = load i32, i32* %36, align 4
  %2004 = getelementptr inbounds [22 x double], [22 x double]* %2002, i32 0, i32 %2003
  %2005 = load double, double* %2004, align 8
  br label %2008

; <label>:2006:                                   ; preds = %1990
  %2007 = load double, double* %105, align 8
  br label %2008

; <label>:2008:                                   ; preds = %2006, %1999
  %2009 = phi double [ %2005, %1999 ], [ %2007, %2006 ]
  br label %2010

; <label>:2010:                                   ; preds = %2008, %1983
  %2011 = phi double [ %1989, %1983 ], [ %2009, %2008 ]
  store double %2011, double* %103, align 8
  %2012 = load double, double* %104, align 8
  %2013 = load i32, i32* %106, align 4
  %2014 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2013
  %2015 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2014, i32 0, i32 0
  %2016 = load i32, i32* %36, align 4
  %2017 = getelementptr inbounds [22 x double], [22 x double]* %2015, i32 0, i32 %2016
  store double %2012, double* %2017, align 8
  %2018 = load double, double* %103, align 8
  %2019 = load i32, i32* %107, align 4
  %2020 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2019
  %2021 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2020, i32 0, i32 0
  %2022 = load i32, i32* %36, align 4
  %2023 = getelementptr inbounds [22 x double], [22 x double]* %2021, i32 0, i32 %2022
  store double %2018, double* %2023, align 8
  br label %2024

; <label>:2024:                                   ; preds = %2010, %1872, %1863
  br label %2025

; <label>:2025:                                   ; preds = %2024
  %2026 = load i32, i32* %36, align 4
  %2027 = add nsw i32 %2026, 1
  store i32 %2027, i32* %36, align 4
  br label %1860

; <label>:2028:                                   ; preds = %1860
  store i32 0, i32* %36, align 4
  br label %2029

; <label>:2029:                                   ; preds = %2242, %2028
  %2030 = load i32, i32* %36, align 4
  %2031 = icmp slt i32 %2030, 12
  br i1 %2031, label %2032, label %2245

; <label>:2032:                                   ; preds = %2029
  store i32 0, i32* %37, align 4
  br label %2033

; <label>:2033:                                   ; preds = %2238, %2032
  %2034 = load i32, i32* %37, align 4
  %2035 = icmp slt i32 %2034, 3
  br i1 %2035, label %2036, label %2241

; <label>:2036:                                   ; preds = %2033
  %2037 = load i32, i32* %36, align 4
  %2038 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 1), i32 0, i32 %2037
  %2039 = load i32, i32* %37, align 4
  %2040 = getelementptr inbounds [3 x double], [3 x double]* %2038, i32 0, i32 %2039
  %2041 = load double, double* %2040, align 8
  %2042 = load i32, i32* %36, align 4
  %2043 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 1), i32 0, i32 %2042
  %2044 = load i32, i32* %37, align 4
  %2045 = getelementptr inbounds [3 x double], [3 x double]* %2043, i32 0, i32 %2044
  %2046 = load double, double* %2045, align 8
  %2047 = fmul double 1.580000e+00, %2046
  %2048 = fcmp ole double %2041, %2047
  br i1 %2048, label %2049, label %2237

; <label>:2049:                                   ; preds = %2036
  %2050 = load i32, i32* %36, align 4
  %2051 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 1), i32 0, i32 %2050
  %2052 = load i32, i32* %37, align 4
  %2053 = getelementptr inbounds [3 x double], [3 x double]* %2051, i32 0, i32 %2052
  %2054 = load double, double* %2053, align 8
  %2055 = load i32, i32* %36, align 4
  %2056 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 1), i32 0, i32 %2055
  %2057 = load i32, i32* %37, align 4
  %2058 = getelementptr inbounds [3 x double], [3 x double]* %2056, i32 0, i32 %2057
  %2059 = load double, double* %2058, align 8
  %2060 = fmul double 1.580000e+00, %2059
  %2061 = fcmp ole double %2054, %2060
  br i1 %2061, label %2062, label %2237

; <label>:2062:                                   ; preds = %2049
  %2063 = load i32, i32* %36, align 4
  %2064 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.mld_s, i32 0, i32 %2063
  %2065 = load double, double* %2064, align 8
  %2066 = load i32, i32* %107, align 4
  %2067 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i32 0, i32 %2066
  %2068 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2067, i32 0, i32 1
  %2069 = load i32, i32* %36, align 4
  %2070 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2068, i32 0, i32 %2069
  %2071 = load i32, i32* %37, align 4
  %2072 = getelementptr inbounds [3 x double], [3 x double]* %2070, i32 0, i32 %2071
  %2073 = load double, double* %2072, align 8
  %2074 = fmul double %2065, %2073
  store double %2074, double* %105, align 8
  %2075 = load i32, i32* %106, align 4
  %2076 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2075
  %2077 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2076, i32 0, i32 1
  %2078 = load i32, i32* %36, align 4
  %2079 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2077, i32 0, i32 %2078
  %2080 = load i32, i32* %37, align 4
  %2081 = getelementptr inbounds [3 x double], [3 x double]* %2079, i32 0, i32 %2080
  %2082 = load double, double* %2081, align 8
  %2083 = load i32, i32* %107, align 4
  %2084 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2083
  %2085 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2084, i32 0, i32 1
  %2086 = load i32, i32* %36, align 4
  %2087 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2085, i32 0, i32 %2086
  %2088 = load i32, i32* %37, align 4
  %2089 = getelementptr inbounds [3 x double], [3 x double]* %2087, i32 0, i32 %2088
  %2090 = load double, double* %2089, align 8
  %2091 = load double, double* %105, align 8
  %2092 = fcmp olt double %2090, %2091
  br i1 %2092, label %2093, label %2102

; <label>:2093:                                   ; preds = %2062
  %2094 = load i32, i32* %107, align 4
  %2095 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2094
  %2096 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2095, i32 0, i32 1
  %2097 = load i32, i32* %36, align 4
  %2098 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2096, i32 0, i32 %2097
  %2099 = load i32, i32* %37, align 4
  %2100 = getelementptr inbounds [3 x double], [3 x double]* %2098, i32 0, i32 %2099
  %2101 = load double, double* %2100, align 8
  br label %2104

; <label>:2102:                                   ; preds = %2062
  %2103 = load double, double* %105, align 8
  br label %2104

; <label>:2104:                                   ; preds = %2102, %2093
  %2105 = phi double [ %2101, %2093 ], [ %2103, %2102 ]
  %2106 = fcmp ogt double %2082, %2105
  br i1 %2106, label %2107, label %2116

; <label>:2107:                                   ; preds = %2104
  %2108 = load i32, i32* %106, align 4
  %2109 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2108
  %2110 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2109, i32 0, i32 1
  %2111 = load i32, i32* %36, align 4
  %2112 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2110, i32 0, i32 %2111
  %2113 = load i32, i32* %37, align 4
  %2114 = getelementptr inbounds [3 x double], [3 x double]* %2112, i32 0, i32 %2113
  %2115 = load double, double* %2114, align 8
  br label %2140

; <label>:2116:                                   ; preds = %2104
  %2117 = load i32, i32* %107, align 4
  %2118 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2117
  %2119 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2118, i32 0, i32 1
  %2120 = load i32, i32* %36, align 4
  %2121 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2119, i32 0, i32 %2120
  %2122 = load i32, i32* %37, align 4
  %2123 = getelementptr inbounds [3 x double], [3 x double]* %2121, i32 0, i32 %2122
  %2124 = load double, double* %2123, align 8
  %2125 = load double, double* %105, align 8
  %2126 = fcmp olt double %2124, %2125
  br i1 %2126, label %2127, label %2136

; <label>:2127:                                   ; preds = %2116
  %2128 = load i32, i32* %107, align 4
  %2129 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2128
  %2130 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2129, i32 0, i32 1
  %2131 = load i32, i32* %36, align 4
  %2132 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2130, i32 0, i32 %2131
  %2133 = load i32, i32* %37, align 4
  %2134 = getelementptr inbounds [3 x double], [3 x double]* %2132, i32 0, i32 %2133
  %2135 = load double, double* %2134, align 8
  br label %2138

; <label>:2136:                                   ; preds = %2116
  %2137 = load double, double* %105, align 8
  br label %2138

; <label>:2138:                                   ; preds = %2136, %2127
  %2139 = phi double [ %2135, %2127 ], [ %2137, %2136 ]
  br label %2140

; <label>:2140:                                   ; preds = %2138, %2107
  %2141 = phi double [ %2115, %2107 ], [ %2139, %2138 ]
  store double %2141, double* %104, align 8
  %2142 = load i32, i32* %36, align 4
  %2143 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.mld_s, i32 0, i32 %2142
  %2144 = load double, double* %2143, align 8
  %2145 = load i32, i32* %106, align 4
  %2146 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i32 0, i32 %2145
  %2147 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2146, i32 0, i32 1
  %2148 = load i32, i32* %36, align 4
  %2149 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2147, i32 0, i32 %2148
  %2150 = load i32, i32* %37, align 4
  %2151 = getelementptr inbounds [3 x double], [3 x double]* %2149, i32 0, i32 %2150
  %2152 = load double, double* %2151, align 8
  %2153 = fmul double %2144, %2152
  store double %2153, double* %105, align 8
  %2154 = load i32, i32* %107, align 4
  %2155 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2154
  %2156 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2155, i32 0, i32 1
  %2157 = load i32, i32* %36, align 4
  %2158 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2156, i32 0, i32 %2157
  %2159 = load i32, i32* %37, align 4
  %2160 = getelementptr inbounds [3 x double], [3 x double]* %2158, i32 0, i32 %2159
  %2161 = load double, double* %2160, align 8
  %2162 = load i32, i32* %106, align 4
  %2163 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2162
  %2164 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2163, i32 0, i32 1
  %2165 = load i32, i32* %36, align 4
  %2166 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2164, i32 0, i32 %2165
  %2167 = load i32, i32* %37, align 4
  %2168 = getelementptr inbounds [3 x double], [3 x double]* %2166, i32 0, i32 %2167
  %2169 = load double, double* %2168, align 8
  %2170 = load double, double* %105, align 8
  %2171 = fcmp olt double %2169, %2170
  br i1 %2171, label %2172, label %2181

; <label>:2172:                                   ; preds = %2140
  %2173 = load i32, i32* %106, align 4
  %2174 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2173
  %2175 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2174, i32 0, i32 1
  %2176 = load i32, i32* %36, align 4
  %2177 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2175, i32 0, i32 %2176
  %2178 = load i32, i32* %37, align 4
  %2179 = getelementptr inbounds [3 x double], [3 x double]* %2177, i32 0, i32 %2178
  %2180 = load double, double* %2179, align 8
  br label %2183

; <label>:2181:                                   ; preds = %2140
  %2182 = load double, double* %105, align 8
  br label %2183

; <label>:2183:                                   ; preds = %2181, %2172
  %2184 = phi double [ %2180, %2172 ], [ %2182, %2181 ]
  %2185 = fcmp ogt double %2161, %2184
  br i1 %2185, label %2186, label %2195

; <label>:2186:                                   ; preds = %2183
  %2187 = load i32, i32* %107, align 4
  %2188 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2187
  %2189 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2188, i32 0, i32 1
  %2190 = load i32, i32* %36, align 4
  %2191 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2189, i32 0, i32 %2190
  %2192 = load i32, i32* %37, align 4
  %2193 = getelementptr inbounds [3 x double], [3 x double]* %2191, i32 0, i32 %2192
  %2194 = load double, double* %2193, align 8
  br label %2219

; <label>:2195:                                   ; preds = %2183
  %2196 = load i32, i32* %106, align 4
  %2197 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2196
  %2198 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2197, i32 0, i32 1
  %2199 = load i32, i32* %36, align 4
  %2200 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2198, i32 0, i32 %2199
  %2201 = load i32, i32* %37, align 4
  %2202 = getelementptr inbounds [3 x double], [3 x double]* %2200, i32 0, i32 %2201
  %2203 = load double, double* %2202, align 8
  %2204 = load double, double* %105, align 8
  %2205 = fcmp olt double %2203, %2204
  br i1 %2205, label %2206, label %2215

; <label>:2206:                                   ; preds = %2195
  %2207 = load i32, i32* %106, align 4
  %2208 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2207
  %2209 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2208, i32 0, i32 1
  %2210 = load i32, i32* %36, align 4
  %2211 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2209, i32 0, i32 %2210
  %2212 = load i32, i32* %37, align 4
  %2213 = getelementptr inbounds [3 x double], [3 x double]* %2211, i32 0, i32 %2212
  %2214 = load double, double* %2213, align 8
  br label %2217

; <label>:2215:                                   ; preds = %2195
  %2216 = load double, double* %105, align 8
  br label %2217

; <label>:2217:                                   ; preds = %2215, %2206
  %2218 = phi double [ %2214, %2206 ], [ %2216, %2215 ]
  br label %2219

; <label>:2219:                                   ; preds = %2217, %2186
  %2220 = phi double [ %2194, %2186 ], [ %2218, %2217 ]
  store double %2220, double* %103, align 8
  %2221 = load double, double* %104, align 8
  %2222 = load i32, i32* %106, align 4
  %2223 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2222
  %2224 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2223, i32 0, i32 1
  %2225 = load i32, i32* %36, align 4
  %2226 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2224, i32 0, i32 %2225
  %2227 = load i32, i32* %37, align 4
  %2228 = getelementptr inbounds [3 x double], [3 x double]* %2226, i32 0, i32 %2227
  store double %2221, double* %2228, align 8
  %2229 = load double, double* %103, align 8
  %2230 = load i32, i32* %107, align 4
  %2231 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 %2230
  %2232 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %2231, i32 0, i32 1
  %2233 = load i32, i32* %36, align 4
  %2234 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %2232, i32 0, i32 %2233
  %2235 = load i32, i32* %37, align 4
  %2236 = getelementptr inbounds [3 x double], [3 x double]* %2234, i32 0, i32 %2235
  store double %2229, double* %2236, align 8
  br label %2237

; <label>:2237:                                   ; preds = %2219, %2049, %2036
  br label %2238

; <label>:2238:                                   ; preds = %2237
  %2239 = load i32, i32* %37, align 4
  %2240 = add nsw i32 %2239, 1
  store i32 %2240, i32* %37, align 4
  br label %2033

; <label>:2241:                                   ; preds = %2033
  br label %2242

; <label>:2242:                                   ; preds = %2241
  %2243 = load i32, i32* %36, align 4
  %2244 = add nsw i32 %2243, 1
  store i32 %2244, i32* %36, align 4
  br label %2029

; <label>:2245:                                   ; preds = %2029
  br label %2246

; <label>:2246:                                   ; preds = %2245, %1856
  %2247 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %2248 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %2247, i32 0, i32 8
  %2249 = load i32, i32* %2248, align 4
  %2250 = icmp eq i32 %2249, 1
  br i1 %2250, label %2251, label %2414

; <label>:2251:                                   ; preds = %2246
  store double 0.000000e+00, double* %111, align 8
  store double 0.000000e+00, double* %112, align 8
  store i32 5, i32* %36, align 4
  br label %2252

; <label>:2252:                                   ; preds = %2306, %2251
  %2253 = load i32, i32* %36, align 4
  %2254 = icmp slt i32 %2253, 21
  br i1 %2254, label %2255, label %2309

; <label>:2255:                                   ; preds = %2252
  %2256 = load i32, i32* %36, align 4
  %2257 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 0), i32 0, i32 %2256
  %2258 = load double, double* %2257, align 8
  %2259 = load i32, i32* %36, align 4
  %2260 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 0), i32 0, i32 %2259
  %2261 = load double, double* %2260, align 8
  %2262 = fcmp olt double %2258, %2261
  br i1 %2262, label %2263, label %2267

; <label>:2263:                                   ; preds = %2255
  %2264 = load i32, i32* %36, align 4
  %2265 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 0), i32 0, i32 %2264
  %2266 = load double, double* %2265, align 8
  br label %2271

; <label>:2267:                                   ; preds = %2255
  %2268 = load i32, i32* %36, align 4
  %2269 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 0), i32 0, i32 %2268
  %2270 = load double, double* %2269, align 8
  br label %2271

; <label>:2271:                                   ; preds = %2267, %2263
  %2272 = phi double [ %2266, %2263 ], [ %2270, %2267 ]
  store double %2272, double* %109, align 8
  %2273 = load i32, i32* %36, align 4
  %2274 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 0), i32 0, i32 %2273
  %2275 = load double, double* %2274, align 8
  %2276 = load i32, i32* %36, align 4
  %2277 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 0), i32 0, i32 %2276
  %2278 = load double, double* %2277, align 8
  %2279 = fcmp ogt double %2275, %2278
  br i1 %2279, label %2280, label %2284

; <label>:2280:                                   ; preds = %2271
  %2281 = load i32, i32* %36, align 4
  %2282 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 0), i32 0, i32 %2281
  %2283 = load double, double* %2282, align 8
  br label %2288

; <label>:2284:                                   ; preds = %2271
  %2285 = load i32, i32* %36, align 4
  %2286 = getelementptr inbounds [22 x double], [22 x double]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 0), i32 0, i32 %2285
  %2287 = load double, double* %2286, align 8
  br label %2288

; <label>:2288:                                   ; preds = %2284, %2280
  %2289 = phi double [ %2283, %2280 ], [ %2287, %2284 ]
  store double %2289, double* %110, align 8
  %2290 = load double, double* %110, align 8
  %2291 = load double, double* %109, align 8
  %2292 = fmul double 1.000000e+03, %2291
  %2293 = fcmp oge double %2290, %2292
  br i1 %2293, label %2294, label %2295

; <label>:2294:                                   ; preds = %2288
  store double 3.000000e+00, double* %108, align 8
  br label %2300

; <label>:2295:                                   ; preds = %2288
  %2296 = load double, double* %110, align 8
  %2297 = load double, double* %109, align 8
  %2298 = fdiv double %2296, %2297
  %2299 = call arm_aapcscc double @log10(double %2298) #7
  store double %2299, double* %108, align 8
  br label %2300

; <label>:2300:                                   ; preds = %2295, %2294
  %2301 = load double, double* %108, align 8
  %2302 = load double, double* %111, align 8
  %2303 = fadd double %2302, %2301
  store double %2303, double* %111, align 8
  %2304 = load double, double* %112, align 8
  %2305 = fadd double %2304, 1.000000e+00
  store double %2305, double* %112, align 8
  br label %2306

; <label>:2306:                                   ; preds = %2300
  %2307 = load i32, i32* %36, align 4
  %2308 = add nsw i32 %2307, 1
  store i32 %2308, i32* %36, align 4
  br label %2252

; <label>:2309:                                   ; preds = %2252
  %2310 = load double, double* %111, align 8
  %2311 = load double, double* %112, align 8
  %2312 = fdiv double %2310, %2311
  %2313 = fmul double %2312, 7.000000e-01
  store double %2313, double* %26, align 8
  %2314 = load double, double* %26, align 8
  %2315 = fcmp olt double %2314, 5.000000e-01
  br i1 %2315, label %2316, label %2318

; <label>:2316:                                   ; preds = %2309
  %2317 = load double, double* %26, align 8
  br label %2319

; <label>:2318:                                   ; preds = %2309
  br label %2319

; <label>:2319:                                   ; preds = %2318, %2316
  %2320 = phi double [ %2317, %2316 ], [ 5.000000e-01, %2318 ]
  store double %2320, double* %26, align 8
  store double 0.000000e+00, double* %111, align 8
  store double 0.000000e+00, double* %112, align 8
  store i32 0, i32* %37, align 4
  br label %2321

; <label>:2321:                                   ; preds = %2399, %2319
  %2322 = load i32, i32* %37, align 4
  %2323 = icmp slt i32 %2322, 3
  br i1 %2323, label %2324, label %2402

; <label>:2324:                                   ; preds = %2321
  store i32 3, i32* %36, align 4
  br label %2325

; <label>:2325:                                   ; preds = %2395, %2324
  %2326 = load i32, i32* %36, align 4
  %2327 = icmp slt i32 %2326, 12
  br i1 %2327, label %2328, label %2398

; <label>:2328:                                   ; preds = %2325
  %2329 = load i32, i32* %36, align 4
  %2330 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 1), i32 0, i32 %2329
  %2331 = load i32, i32* %37, align 4
  %2332 = getelementptr inbounds [3 x double], [3 x double]* %2330, i32 0, i32 %2331
  %2333 = load double, double* %2332, align 8
  %2334 = load i32, i32* %36, align 4
  %2335 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 1), i32 0, i32 %2334
  %2336 = load i32, i32* %37, align 4
  %2337 = getelementptr inbounds [3 x double], [3 x double]* %2335, i32 0, i32 %2336
  %2338 = load double, double* %2337, align 8
  %2339 = fcmp olt double %2333, %2338
  br i1 %2339, label %2340, label %2346

; <label>:2340:                                   ; preds = %2328
  %2341 = load i32, i32* %36, align 4
  %2342 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 1), i32 0, i32 %2341
  %2343 = load i32, i32* %37, align 4
  %2344 = getelementptr inbounds [3 x double], [3 x double]* %2342, i32 0, i32 %2343
  %2345 = load double, double* %2344, align 8
  br label %2352

; <label>:2346:                                   ; preds = %2328
  %2347 = load i32, i32* %36, align 4
  %2348 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 1), i32 0, i32 %2347
  %2349 = load i32, i32* %37, align 4
  %2350 = getelementptr inbounds [3 x double], [3 x double]* %2348, i32 0, i32 %2349
  %2351 = load double, double* %2350, align 8
  br label %2352

; <label>:2352:                                   ; preds = %2346, %2340
  %2353 = phi double [ %2345, %2340 ], [ %2351, %2346 ]
  store double %2353, double* %109, align 8
  %2354 = load i32, i32* %36, align 4
  %2355 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 1), i32 0, i32 %2354
  %2356 = load i32, i32* %37, align 4
  %2357 = getelementptr inbounds [3 x double], [3 x double]* %2355, i32 0, i32 %2356
  %2358 = load double, double* %2357, align 8
  %2359 = load i32, i32* %36, align 4
  %2360 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 1), i32 0, i32 %2359
  %2361 = load i32, i32* %37, align 4
  %2362 = getelementptr inbounds [3 x double], [3 x double]* %2360, i32 0, i32 %2361
  %2363 = load double, double* %2362, align 8
  %2364 = fcmp ogt double %2358, %2363
  br i1 %2364, label %2365, label %2371

; <label>:2365:                                   ; preds = %2352
  %2366 = load i32, i32* %36, align 4
  %2367 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 0, i32 1), i32 0, i32 %2366
  %2368 = load i32, i32* %37, align 4
  %2369 = getelementptr inbounds [3 x double], [3 x double]* %2367, i32 0, i32 %2368
  %2370 = load double, double* %2369, align 8
  br label %2377

; <label>:2371:                                   ; preds = %2352
  %2372 = load i32, i32* %36, align 4
  %2373 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* getelementptr inbounds ([4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i32 0, i32 1, i32 1), i32 0, i32 %2372
  %2374 = load i32, i32* %37, align 4
  %2375 = getelementptr inbounds [3 x double], [3 x double]* %2373, i32 0, i32 %2374
  %2376 = load double, double* %2375, align 8
  br label %2377

; <label>:2377:                                   ; preds = %2371, %2365
  %2378 = phi double [ %2370, %2365 ], [ %2376, %2371 ]
  store double %2378, double* %110, align 8
  %2379 = load double, double* %110, align 8
  %2380 = load double, double* %109, align 8
  %2381 = fmul double 1.000000e+03, %2380
  %2382 = fcmp oge double %2379, %2381
  br i1 %2382, label %2383, label %2384

; <label>:2383:                                   ; preds = %2377
  store double 3.000000e+00, double* %108, align 8
  br label %2389

; <label>:2384:                                   ; preds = %2377
  %2385 = load double, double* %110, align 8
  %2386 = load double, double* %109, align 8
  %2387 = fdiv double %2385, %2386
  %2388 = call arm_aapcscc double @log10(double %2387) #7
  store double %2388, double* %108, align 8
  br label %2389

; <label>:2389:                                   ; preds = %2384, %2383
  %2390 = load double, double* %108, align 8
  %2391 = load double, double* %111, align 8
  %2392 = fadd double %2391, %2390
  store double %2392, double* %111, align 8
  %2393 = load double, double* %112, align 8
  %2394 = fadd double %2393, 1.000000e+00
  store double %2394, double* %112, align 8
  br label %2395

; <label>:2395:                                   ; preds = %2389
  %2396 = load i32, i32* %36, align 4
  %2397 = add nsw i32 %2396, 1
  store i32 %2397, i32* %36, align 4
  br label %2325

; <label>:2398:                                   ; preds = %2325
  br label %2399

; <label>:2399:                                   ; preds = %2398
  %2400 = load i32, i32* %37, align 4
  %2401 = add nsw i32 %2400, 1
  store i32 %2401, i32* %37, align 4
  br label %2321

; <label>:2402:                                   ; preds = %2321
  %2403 = load double, double* %111, align 8
  %2404 = load double, double* %112, align 8
  %2405 = fdiv double %2403, %2404
  %2406 = fmul double %2405, 7.000000e-01
  store double %2406, double* %27, align 8
  %2407 = load double, double* %27, align 8
  %2408 = fcmp olt double %2407, 5.000000e-01
  br i1 %2408, label %2409, label %2411

; <label>:2409:                                   ; preds = %2402
  %2410 = load double, double* %27, align 8
  br label %2412

; <label>:2411:                                   ; preds = %2402
  br label %2412

; <label>:2412:                                   ; preds = %2411, %2409
  %2413 = phi double [ %2410, %2409 ], [ 5.000000e-01, %2411 ]
  store double %2413, double* %27, align 8
  br label %2414

; <label>:2414:                                   ; preds = %2412, %2246
  store i32 0, i32* %31, align 4
  br label %2415

; <label>:2415:                                   ; preds = %2424, %2414
  %2416 = load i32, i32* %31, align 4
  %2417 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %2418 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %2417, i32 0, i32 46
  %2419 = load i32, i32* %2418, align 4
  %2420 = icmp slt i32 %2416, %2419
  br i1 %2420, label %2421, label %2427

; <label>:2421:                                   ; preds = %2415
  %2422 = load i32, i32* %31, align 4
  %2423 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i32 0, i32 %2422
  store i32 0, i32* %2423, align 4
  br label %2424

; <label>:2424:                                   ; preds = %2421
  %2425 = load i32, i32* %31, align 4
  %2426 = add nsw i32 %2425, 1
  store i32 %2426, i32* %31, align 4
  br label %2415

; <label>:2427:                                   ; preds = %2415
  %2428 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %2429 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %2428, i32 0, i32 46
  %2430 = load i32, i32* %2429, align 4
  %2431 = icmp eq i32 %2430, 2
  br i1 %2431, label %2432, label %2460

; <label>:2432:                                   ; preds = %2427
  %2433 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %2434 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %2433, i32 0, i32 36
  %2435 = load i32, i32* %2434, align 4
  %2436 = icmp ne i32 %2435, 0
  br i1 %2436, label %2437, label %2442

; <label>:2437:                                   ; preds = %2432
  %2438 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %2439 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %2438, i32 0, i32 8
  %2440 = load i32, i32* %2439, align 4
  %2441 = icmp eq i32 %2440, 1
  br i1 %2441, label %2442, label %2459

; <label>:2442:                                   ; preds = %2437, %2432
  %2443 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 0
  %2444 = load i32, i32* %2443, align 4
  %2445 = icmp ne i32 %2444, 0
  br i1 %2445, label %2446, label %2450

; <label>:2446:                                   ; preds = %2442
  %2447 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 1
  %2448 = load i32, i32* %2447, align 4
  %2449 = icmp ne i32 %2448, 0
  br label %2450

; <label>:2450:                                   ; preds = %2446, %2442
  %2451 = phi i1 [ false, %2442 ], [ %2449, %2446 ]
  %2452 = zext i1 %2451 to i32
  store i32 %2452, i32* %113, align 4
  %2453 = load i32, i32* %113, align 4
  %2454 = icmp ne i32 %2453, 0
  br i1 %2454, label %2458, label %2455

; <label>:2455:                                   ; preds = %2450
  %2456 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 0
  store i32 0, i32* %2456, align 4
  %2457 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 1
  store i32 0, i32* %2457, align 4
  br label %2458

; <label>:2458:                                   ; preds = %2455, %2450
  br label %2459

; <label>:2459:                                   ; preds = %2458, %2437
  br label %2460

; <label>:2460:                                   ; preds = %2459, %2427
  store i32 0, i32* %31, align 4
  br label %2461

; <label>:2461:                                   ; preds = %2517, %2460
  %2462 = load i32, i32* %31, align 4
  %2463 = load %struct.lame_global_flags*, %struct.lame_global_flags** %12, align 4
  %2464 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %2463, i32 0, i32 46
  %2465 = load i32, i32* %2464, align 4
  %2466 = icmp slt i32 %2462, %2465
  br i1 %2466, label %2467, label %2520

; <label>:2467:                                   ; preds = %2461
  %2468 = load i32, i32* %31, align 4
  %2469 = getelementptr inbounds [2 x i32], [2 x i32]* %29, i32 0, i32 %2468
  %2470 = load i32, i32* %2469, align 4
  %2471 = icmp ne i32 %2470, 0
  br i1 %2471, label %2472, label %2486

; <label>:2472:                                   ; preds = %2467
  %2473 = load i32, i32* %31, align 4
  %2474 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 %2473
  %2475 = load i32, i32* %2474, align 4
  switch i32 %2475, label %2485 [
    i32 0, label %2476
    i32 3, label %2476
    i32 2, label %2479
    i32 1, label %2482
  ]

; <label>:2476:                                   ; preds = %2472, %2472
  %2477 = load i32, i32* %31, align 4
  %2478 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i32 0, i32 %2477
  store i32 0, i32* %2478, align 4
  br label %2485

; <label>:2479:                                   ; preds = %2472
  %2480 = load i32, i32* %31, align 4
  %2481 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i32 0, i32 %2480
  store i32 3, i32* %2481, align 4
  br label %2485

; <label>:2482:                                   ; preds = %2472
  %2483 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %2484 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2483, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1.206, i32 0, i32 0))
  call arm_aapcscc void @abort() #8
  unreachable

; <label>:2485:                                   ; preds = %2479, %2476, %2472
  br label %2505

; <label>:2486:                                   ; preds = %2467
  %2487 = load i32, i32* %31, align 4
  %2488 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i32 0, i32 %2487
  store i32 2, i32* %2488, align 4
  %2489 = load i32, i32* %31, align 4
  %2490 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 %2489
  %2491 = load i32, i32* %2490, align 4
  %2492 = icmp eq i32 %2491, 0
  br i1 %2492, label %2493, label %2496

; <label>:2493:                                   ; preds = %2486
  %2494 = load i32, i32* %31, align 4
  %2495 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 %2494
  store i32 1, i32* %2495, align 4
  br label %2496

; <label>:2496:                                   ; preds = %2493, %2486
  %2497 = load i32, i32* %31, align 4
  %2498 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 %2497
  %2499 = load i32, i32* %2498, align 4
  %2500 = icmp eq i32 %2499, 3
  br i1 %2500, label %2501, label %2504

; <label>:2501:                                   ; preds = %2496
  %2502 = load i32, i32* %31, align 4
  %2503 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 %2502
  store i32 2, i32* %2503, align 4
  br label %2504

; <label>:2504:                                   ; preds = %2501, %2496
  br label %2505

; <label>:2505:                                   ; preds = %2504, %2485
  %2506 = load i32, i32* %31, align 4
  %2507 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 %2506
  %2508 = load i32, i32* %2507, align 4
  %2509 = load i32*, i32** %22, align 4
  %2510 = load i32, i32* %31, align 4
  %2511 = getelementptr inbounds i32, i32* %2509, i32 %2510
  store i32 %2508, i32* %2511, align 4
  %2512 = load i32, i32* %31, align 4
  %2513 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i32 0, i32 %2512
  %2514 = load i32, i32* %2513, align 4
  %2515 = load i32, i32* %31, align 4
  %2516 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i32 0, i32 %2515
  store i32 %2514, i32* %2516, align 4
  br label %2517

; <label>:2517:                                   ; preds = %2505
  %2518 = load i32, i32* %31, align 4
  %2519 = add nsw i32 %2518, 1
  store i32 %2519, i32* %31, align 4
  br label %2461

; <label>:2520:                                   ; preds = %2461
  %2521 = load i32*, i32** %22, align 4
  %2522 = getelementptr inbounds i32, i32* %2521, i32 0
  %2523 = load i32, i32* %2522, align 4
  %2524 = icmp eq i32 %2523, 2
  br i1 %2524, label %2525, label %2528

; <label>:2525:                                   ; preds = %2520
  %2526 = load double, double* @L3psycho_anal.ms_ratio_s_old, align 8
  %2527 = load double*, double** %15, align 4
  store double %2526, double* %2527, align 8
  br label %2531

; <label>:2528:                                   ; preds = %2520
  %2529 = load double, double* @L3psycho_anal.ms_ratio_l_old, align 8
  %2530 = load double*, double** %15, align 4
  store double %2529, double* %2530, align 8
  br label %2531

; <label>:2531:                                   ; preds = %2528, %2525
  %2532 = load double, double* %27, align 8
  store double %2532, double* @L3psycho_anal.ms_ratio_s_old, align 8
  %2533 = load double, double* %26, align 8
  store double %2533, double* @L3psycho_anal.ms_ratio_l_old, align 8
  %2534 = load double, double* %26, align 8
  %2535 = load double*, double** %16, align 4
  store double %2534, double* %2535, align 8
  %2536 = load i32, i32* %30, align 4
  %2537 = icmp eq i32 %2536, 4
  br i1 %2537, label %2538, label %2555

; <label>:2538:                                   ; preds = %2531
  %2539 = getelementptr inbounds [4 x float], [4 x float]* %25, i32 0, i32 3
  %2540 = load float, float* %2539, align 4
  %2541 = getelementptr inbounds [4 x float], [4 x float]* %25, i32 0, i32 2
  %2542 = load float, float* %2541, align 4
  %2543 = fadd float %2540, %2542
  store float %2543, float* %114, align 4
  %2544 = load double, double* @L3psycho_anal.ms_ener_ratio_old, align 8
  %2545 = load double*, double** %17, align 4
  store double %2544, double* %2545, align 8
  store double 0.000000e+00, double* @L3psycho_anal.ms_ener_ratio_old, align 8
  %2546 = load float, float* %114, align 4
  %2547 = fcmp ogt float %2546, 0.000000e+00
  br i1 %2547, label %2548, label %2554

; <label>:2548:                                   ; preds = %2538
  %2549 = getelementptr inbounds [4 x float], [4 x float]* %25, i32 0, i32 3
  %2550 = load float, float* %2549, align 4
  %2551 = load float, float* %114, align 4
  %2552 = fdiv float %2550, %2551
  %2553 = fpext float %2552 to double
  store double %2553, double* @L3psycho_anal.ms_ener_ratio_old, align 8
  br label %2554

; <label>:2554:                                   ; preds = %2548, %2538
  br label %2557

; <label>:2555:                                   ; preds = %2531
  %2556 = load double*, double** %17, align 4
  store double 0.000000e+00, double* %2556, align 8
  br label %2557

; <label>:2557:                                   ; preds = %2555, %2554
  ret void
}

; Function Attrs: nounwind
declare arm_aapcscc double @pow(double, double) #2

; Function Attrs: nounwind
define arm_aapcscc void @L3para_read(double, i32*, i32*, i32*, double*, double*, [64 x double]*, [64 x double]*, double*, double*, i32*, i32*, double*, double*, i32*, i32*, double*, double*) #0 {
  %19 = alloca double, align 8
  %20 = alloca i32*, align 4
  %21 = alloca i32*, align 4
  %22 = alloca i32*, align 4
  %23 = alloca double*, align 4
  %24 = alloca double*, align 4
  %25 = alloca [64 x double]*, align 4
  %26 = alloca [64 x double]*, align 4
  %27 = alloca double*, align 4
  %28 = alloca double*, align 4
  %29 = alloca i32*, align 4
  %30 = alloca i32*, align 4
  %31 = alloca double*, align 4
  %32 = alloca double*, align 4
  %33 = alloca i32*, align 4
  %34 = alloca i32*, align 4
  %35 = alloca double*, align 4
  %36 = alloca double*, align 4
  %37 = alloca double, align 8
  %38 = alloca [63 x double], align 8
  %39 = alloca [63 x double], align 8
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca double*, align 4
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca double, align 8
  %52 = alloca double, align 8
  %53 = alloca double, align 8
  %54 = alloca double, align 8
  %55 = alloca double, align 8
  %56 = alloca double, align 8
  %57 = alloca double, align 8
  %58 = alloca double, align 8
  store double %0, double* %19, align 8
  store i32* %1, i32** %20, align 4
  store i32* %2, i32** %21, align 4
  store i32* %3, i32** %22, align 4
  store double* %4, double** %23, align 4
  store double* %5, double** %24, align 4
  store [64 x double]* %6, [64 x double]** %25, align 4
  store [64 x double]* %7, [64 x double]** %26, align 4
  store double* %8, double** %27, align 4
  store double* %9, double** %28, align 4
  store i32* %10, i32** %29, align 4
  store i32* %11, i32** %30, align 4
  store double* %12, double** %31, align 4
  store double* %13, double** %32, align 4
  store i32* %14, i32** %33, align 4
  store i32* %15, i32** %34, align 4
  store double* %16, double** %35, align 4
  store double* %17, double** %36, align 4
  store i32 0, i32* %40, align 4
  store double* getelementptr inbounds ([4926 x double], [4926 x double]* @psy_data, i32 0, i32 0), double** %42, align 4
  store i32 1, i32* %50, align 4
  store i32 0, i32* %48, align 4
  br label %59

; <label>:59:                                     ; preds = %153, %18
  %60 = load i32, i32* %48, align 4
  %61 = icmp slt i32 %60, 6
  br i1 %61, label %62, label %156

; <label>:62:                                     ; preds = %59
  %63 = load double*, double** %42, align 4
  %64 = getelementptr inbounds double, double* %63, i32 1
  store double* %64, double** %42, align 4
  %65 = load double, double* %63, align 8
  store double %65, double* %37, align 8
  %66 = load double*, double** %42, align 4
  %67 = getelementptr inbounds double, double* %66, i32 1
  store double* %67, double** %42, align 4
  %68 = load double, double* %66, align 8
  %69 = fptosi double %68 to i32
  store i32 %69, i32* %41, align 4
  %70 = load i32, i32* %41, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %41, align 4
  %72 = load double, double* %19, align 8
  %73 = load double, double* %37, align 8
  %74 = load i32, i32* %50, align 4
  %75 = sitofp i32 %74 to double
  %76 = fdiv double %73, %75
  %77 = fcmp oeq double %72, %76
  br i1 %77, label %78, label %147

; <label>:78:                                     ; preds = %62
  %79 = load i32, i32* %41, align 4
  store i32 %79, i32* %40, align 4
  store i32 0, i32* %44, align 4
  store i32 0, i32* %47, align 4
  br label %80

; <label>:80:                                     ; preds = %143, %78
  %81 = load i32, i32* %44, align 4
  %82 = load i32, i32* %41, align 4
  %83 = icmp slt i32 %81, %82
  br i1 %83, label %84, label %146

; <label>:84:                                     ; preds = %80
  %85 = load double*, double** %42, align 4
  %86 = getelementptr inbounds double, double* %85, i32 1
  store double* %86, double** %42, align 4
  %87 = load double, double* %85, align 8
  %88 = fptosi double %87 to i32
  store i32 %88, i32* %45, align 4
  %89 = load double*, double** %42, align 4
  %90 = getelementptr inbounds double, double* %89, i32 1
  store double* %90, double** %42, align 4
  %91 = load double, double* %89, align 8
  %92 = fptosi double %91 to i32
  %93 = load i32*, i32** %20, align 4
  %94 = load i32, i32* %44, align 4
  %95 = getelementptr inbounds i32, i32* %93, i32 %94
  store i32 %92, i32* %95, align 4
  %96 = load double*, double** %42, align 4
  %97 = getelementptr inbounds double, double* %96, i32 1
  store double* %97, double** %42, align 4
  %98 = load double, double* %96, align 8
  %99 = fsub double %98, 6.000000e+00
  %100 = fsub double -0.000000e+00, %99
  %101 = fmul double %100, 0x3FCD791C5F888823
  %102 = call arm_aapcscc double @exp(double %101) #7
  %103 = load double*, double** %23, align 4
  %104 = load i32, i32* %44, align 4
  %105 = getelementptr inbounds double, double* %103, i32 %104
  store double %102, double* %105, align 8
  %106 = load double*, double** %42, align 4
  %107 = getelementptr inbounds double, double* %106, i32 1
  store double* %107, double** %42, align 4
  %108 = load double, double* %106, align 8
  %109 = load double*, double** %24, align 4
  %110 = load i32, i32* %44, align 4
  %111 = getelementptr inbounds double, double* %109, i32 %110
  store double %108, double* %111, align 8
  %112 = load double*, double** %42, align 4
  %113 = getelementptr inbounds double, double* %112, i32 1
  store double* %113, double** %42, align 4
  %114 = load double*, double** %42, align 4
  %115 = getelementptr inbounds double, double* %114, i32 1
  store double* %115, double** %42, align 4
  %116 = load double, double* %114, align 8
  %117 = load i32, i32* %44, align 4
  %118 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %117
  store double %116, double* %118, align 8
  %119 = load i32, i32* %45, align 4
  %120 = load i32, i32* %44, align 4
  %121 = icmp ne i32 %119, %120
  br i1 %121, label %122, label %125

; <label>:122:                                    ; preds = %84
  %123 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %124 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %123, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2.207, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:125:                                    ; preds = %84
  store i32 0, i32* %46, align 4
  br label %126

; <label>:126:                                    ; preds = %139, %125
  %127 = load i32, i32* %46, align 4
  %128 = load i32*, i32** %20, align 4
  %129 = load i32, i32* %44, align 4
  %130 = getelementptr inbounds i32, i32* %128, i32 %129
  %131 = load i32, i32* %130, align 4
  %132 = icmp slt i32 %127, %131
  br i1 %132, label %133, label %142

; <label>:133:                                    ; preds = %126
  %134 = load i32, i32* %44, align 4
  %135 = load i32*, i32** %22, align 4
  %136 = load i32, i32* %47, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %47, align 4
  %138 = getelementptr inbounds i32, i32* %135, i32 %136
  store i32 %134, i32* %138, align 4
  br label %139

; <label>:139:                                    ; preds = %133
  %140 = load i32, i32* %46, align 4
  %141 = add nsw i32 %140, 1
  store i32 %141, i32* %46, align 4
  br label %126

; <label>:142:                                    ; preds = %126
  br label %143

; <label>:143:                                    ; preds = %142
  %144 = load i32, i32* %44, align 4
  %145 = add nsw i32 %144, 1
  store i32 %145, i32* %44, align 4
  br label %80

; <label>:146:                                    ; preds = %80
  br label %152

; <label>:147:                                    ; preds = %62
  %148 = load i32, i32* %41, align 4
  %149 = mul nsw i32 %148, 6
  %150 = load double*, double** %42, align 4
  %151 = getelementptr inbounds double, double* %150, i32 %149
  store double* %151, double** %42, align 4
  br label %152

; <label>:152:                                    ; preds = %147, %146
  br label %153

; <label>:153:                                    ; preds = %152
  %154 = load i32, i32* %48, align 4
  %155 = add nsw i32 %154, 1
  store i32 %155, i32* %48, align 4
  br label %59

; <label>:156:                                    ; preds = %59
  %157 = load i32, i32* %40, align 4
  store i32 %157, i32* %49, align 4
  store i32 0, i32* %44, align 4
  br label %158

; <label>:158:                                    ; preds = %265, %156
  %159 = load i32, i32* %44, align 4
  %160 = load i32, i32* %49, align 4
  %161 = icmp slt i32 %159, %160
  br i1 %161, label %162, label %268

; <label>:162:                                    ; preds = %158
  store i32 0, i32* %45, align 4
  br label %163

; <label>:163:                                    ; preds = %261, %162
  %164 = load i32, i32* %45, align 4
  %165 = load i32, i32* %49, align 4
  %166 = icmp slt i32 %164, %165
  br i1 %166, label %167, label %264

; <label>:167:                                    ; preds = %163
  %168 = load i32, i32* %45, align 4
  %169 = load i32, i32* %44, align 4
  %170 = icmp sge i32 %168, %169
  br i1 %170, label %171, label %180

; <label>:171:                                    ; preds = %167
  %172 = load i32, i32* %44, align 4
  %173 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %172
  %174 = load double, double* %173, align 8
  %175 = load i32, i32* %45, align 4
  %176 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %175
  %177 = load double, double* %176, align 8
  %178 = fsub double %174, %177
  %179 = fmul double %178, 3.000000e+00
  store double %179, double* %51, align 8
  br label %189

; <label>:180:                                    ; preds = %167
  %181 = load i32, i32* %44, align 4
  %182 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %181
  %183 = load double, double* %182, align 8
  %184 = load i32, i32* %45, align 4
  %185 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %184
  %186 = load double, double* %185, align 8
  %187 = fsub double %183, %186
  %188 = fmul double %187, 1.500000e+00
  store double %188, double* %51, align 8
  br label %189

; <label>:189:                                    ; preds = %180, %171
  %190 = load i32, i32* %44, align 4
  %191 = load i32, i32* %45, align 4
  %192 = icmp sge i32 %190, %191
  br i1 %192, label %193, label %202

; <label>:193:                                    ; preds = %189
  %194 = load i32, i32* %44, align 4
  %195 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %194
  %196 = load double, double* %195, align 8
  %197 = load i32, i32* %45, align 4
  %198 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %197
  %199 = load double, double* %198, align 8
  %200 = fsub double %196, %199
  %201 = fmul double %200, 3.000000e+00
  store double %201, double* %51, align 8
  br label %211

; <label>:202:                                    ; preds = %189
  %203 = load i32, i32* %44, align 4
  %204 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %203
  %205 = load double, double* %204, align 8
  %206 = load i32, i32* %45, align 4
  %207 = getelementptr inbounds [63 x double], [63 x double]* %38, i32 0, i32 %206
  %208 = load double, double* %207, align 8
  %209 = fsub double %205, %208
  %210 = fmul double %209, 1.500000e+00
  store double %210, double* %51, align 8
  br label %211

; <label>:211:                                    ; preds = %202, %193
  %212 = load double, double* %51, align 8
  %213 = fcmp oge double %212, 5.000000e-01
  br i1 %213, label %214, label %227

; <label>:214:                                    ; preds = %211
  %215 = load double, double* %51, align 8
  %216 = fcmp ole double %215, 2.500000e+00
  br i1 %216, label %217, label %227

; <label>:217:                                    ; preds = %214
  %218 = load double, double* %51, align 8
  %219 = fsub double %218, 5.000000e-01
  store double %219, double* %54, align 8
  %220 = load double, double* %54, align 8
  %221 = load double, double* %54, align 8
  %222 = fmul double %220, %221
  %223 = load double, double* %54, align 8
  %224 = fmul double 2.000000e+00, %223
  %225 = fsub double %222, %224
  %226 = fmul double 8.000000e+00, %225
  store double %226, double* %52, align 8
  br label %228

; <label>:227:                                    ; preds = %214, %211
  store double 0.000000e+00, double* %52, align 8
  br label %228

; <label>:228:                                    ; preds = %227, %217
  %229 = load double, double* %51, align 8
  %230 = fadd double %229, 4.740000e-01
  store double %230, double* %51, align 8
  %231 = load double, double* %51, align 8
  %232 = fmul double 7.500000e+00, %231
  %233 = fadd double 0x402F9F6E6106AB15, %232
  %234 = load double, double* %51, align 8
  %235 = load double, double* %51, align 8
  %236 = fmul double %234, %235
  %237 = fadd double 1.000000e+00, %236
  %238 = call arm_aapcscc double @sqrt(double %237) #7
  %239 = fmul double 1.750000e+01, %238
  %240 = fsub double %233, %239
  store double %240, double* %53, align 8
  %241 = load double, double* %53, align 8
  %242 = fcmp ole double %241, -6.000000e+01
  br i1 %242, label %243, label %249

; <label>:243:                                    ; preds = %228
  %244 = load [64 x double]*, [64 x double]** %25, align 4
  %245 = load i32, i32* %44, align 4
  %246 = getelementptr inbounds [64 x double], [64 x double]* %244, i32 %245
  %247 = load i32, i32* %45, align 4
  %248 = getelementptr inbounds [64 x double], [64 x double]* %246, i32 0, i32 %247
  store double 0.000000e+00, double* %248, align 8
  br label %260

; <label>:249:                                    ; preds = %228
  %250 = load double, double* %52, align 8
  %251 = load double, double* %53, align 8
  %252 = fadd double %250, %251
  %253 = fmul double %252, 0x3FCD791C5F888823
  %254 = call arm_aapcscc double @exp(double %253) #7
  %255 = load [64 x double]*, [64 x double]** %25, align 4
  %256 = load i32, i32* %44, align 4
  %257 = getelementptr inbounds [64 x double], [64 x double]* %255, i32 %256
  %258 = load i32, i32* %45, align 4
  %259 = getelementptr inbounds [64 x double], [64 x double]* %257, i32 0, i32 %258
  store double %254, double* %259, align 8
  br label %260

; <label>:260:                                    ; preds = %249, %243
  br label %261

; <label>:261:                                    ; preds = %260
  %262 = load i32, i32* %45, align 4
  %263 = add nsw i32 %262, 1
  store i32 %263, i32* %45, align 4
  br label %163

; <label>:264:                                    ; preds = %163
  br label %265

; <label>:265:                                    ; preds = %264
  %266 = load i32, i32* %44, align 4
  %267 = add nsw i32 %266, 1
  store i32 %267, i32* %44, align 4
  br label %158

; <label>:268:                                    ; preds = %158
  store i32 0, i32* %48, align 4
  br label %269

; <label>:269:                                    ; preds = %350, %268
  %270 = load i32, i32* %48, align 4
  %271 = icmp slt i32 %270, 6
  br i1 %271, label %272, label %353

; <label>:272:                                    ; preds = %269
  %273 = load double*, double** %42, align 4
  %274 = getelementptr inbounds double, double* %273, i32 1
  store double* %274, double** %42, align 4
  %275 = load double, double* %273, align 8
  store double %275, double* %37, align 8
  %276 = load double*, double** %42, align 4
  %277 = getelementptr inbounds double, double* %276, i32 1
  store double* %277, double** %42, align 4
  %278 = load double, double* %276, align 8
  %279 = fptosi double %278 to i32
  store i32 %279, i32* %41, align 4
  %280 = load i32, i32* %41, align 4
  %281 = add nsw i32 %280, 1
  store i32 %281, i32* %41, align 4
  %282 = load double, double* %19, align 8
  %283 = load double, double* %37, align 8
  %284 = load i32, i32* %50, align 4
  %285 = sitofp i32 %284 to double
  %286 = fdiv double %283, %285
  %287 = fcmp oeq double %282, %286
  br i1 %287, label %288, label %344

; <label>:288:                                    ; preds = %272
  %289 = load i32, i32* %41, align 4
  store i32 %289, i32* %40, align 4
  store i32 0, i32* %44, align 4
  store i32 0, i32* %47, align 4
  br label %290

; <label>:290:                                    ; preds = %337, %288
  %291 = load i32, i32* %44, align 4
  %292 = load i32, i32* %41, align 4
  %293 = icmp slt i32 %291, %292
  br i1 %293, label %294, label %340

; <label>:294:                                    ; preds = %290
  %295 = load double*, double** %42, align 4
  %296 = getelementptr inbounds double, double* %295, i32 1
  store double* %296, double** %42, align 4
  %297 = load double, double* %295, align 8
  %298 = fptosi double %297 to i32
  store i32 %298, i32* %45, align 4
  %299 = load double*, double** %42, align 4
  %300 = getelementptr inbounds double, double* %299, i32 1
  store double* %300, double** %42, align 4
  %301 = load double, double* %299, align 8
  %302 = fptosi double %301 to i32
  %303 = load i32*, i32** %21, align 4
  %304 = load i32, i32* %44, align 4
  %305 = getelementptr inbounds i32, i32* %303, i32 %304
  store i32 %302, i32* %305, align 4
  %306 = load double*, double** %42, align 4
  %307 = getelementptr inbounds double, double* %306, i32 1
  store double* %307, double** %42, align 4
  %308 = load double, double* %306, align 8
  %309 = load double*, double** %27, align 4
  %310 = load i32, i32* %44, align 4
  %311 = getelementptr inbounds double, double* %309, i32 %310
  store double %308, double* %311, align 8
  %312 = load double*, double** %42, align 4
  %313 = getelementptr inbounds double, double* %312, i32 1
  store double* %313, double** %42, align 4
  %314 = load double*, double** %42, align 4
  %315 = getelementptr inbounds double, double* %314, i32 1
  store double* %315, double** %42, align 4
  %316 = load double, double* %314, align 8
  %317 = load double*, double** %28, align 4
  %318 = load i32, i32* %44, align 4
  %319 = getelementptr inbounds double, double* %317, i32 %318
  store double %316, double* %319, align 8
  %320 = load double*, double** %42, align 4
  %321 = getelementptr inbounds double, double* %320, i32 1
  store double* %321, double** %42, align 4
  %322 = load double, double* %320, align 8
  %323 = load i32, i32* %44, align 4
  %324 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %323
  store double %322, double* %324, align 8
  %325 = load i32, i32* %45, align 4
  %326 = load i32, i32* %44, align 4
  %327 = icmp ne i32 %325, %326
  br i1 %327, label %328, label %331

; <label>:328:                                    ; preds = %294
  %329 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %330 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %329, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3.208, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:331:                                    ; preds = %294
  %332 = load i32*, i32** %21, align 4
  %333 = load i32, i32* %44, align 4
  %334 = getelementptr inbounds i32, i32* %332, i32 %333
  %335 = load i32, i32* %334, align 4
  %336 = add nsw i32 %335, -1
  store i32 %336, i32* %334, align 4
  br label %337

; <label>:337:                                    ; preds = %331
  %338 = load i32, i32* %44, align 4
  %339 = add nsw i32 %338, 1
  store i32 %339, i32* %44, align 4
  br label %290

; <label>:340:                                    ; preds = %290
  %341 = load i32*, i32** %21, align 4
  %342 = load i32, i32* %44, align 4
  %343 = getelementptr inbounds i32, i32* %341, i32 %342
  store i32 -1, i32* %343, align 4
  br label %349

; <label>:344:                                    ; preds = %272
  %345 = load i32, i32* %41, align 4
  %346 = mul nsw i32 %345, 6
  %347 = load double*, double** %42, align 4
  %348 = getelementptr inbounds double, double* %347, i32 %346
  store double* %348, double** %42, align 4
  br label %349

; <label>:349:                                    ; preds = %344, %340
  br label %350

; <label>:350:                                    ; preds = %349
  %351 = load i32, i32* %48, align 4
  %352 = add nsw i32 %351, 1
  store i32 %352, i32* %48, align 4
  br label %269

; <label>:353:                                    ; preds = %269
  %354 = load i32, i32* %40, align 4
  store i32 %354, i32* %49, align 4
  store i32 0, i32* %44, align 4
  br label %355

; <label>:355:                                    ; preds = %462, %353
  %356 = load i32, i32* %44, align 4
  %357 = load i32, i32* %49, align 4
  %358 = icmp slt i32 %356, %357
  br i1 %358, label %359, label %465

; <label>:359:                                    ; preds = %355
  store i32 0, i32* %45, align 4
  br label %360

; <label>:360:                                    ; preds = %458, %359
  %361 = load i32, i32* %45, align 4
  %362 = load i32, i32* %49, align 4
  %363 = icmp slt i32 %361, %362
  br i1 %363, label %364, label %461

; <label>:364:                                    ; preds = %360
  %365 = load i32, i32* %45, align 4
  %366 = load i32, i32* %44, align 4
  %367 = icmp sge i32 %365, %366
  br i1 %367, label %368, label %377

; <label>:368:                                    ; preds = %364
  %369 = load i32, i32* %44, align 4
  %370 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %369
  %371 = load double, double* %370, align 8
  %372 = load i32, i32* %45, align 4
  %373 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %372
  %374 = load double, double* %373, align 8
  %375 = fsub double %371, %374
  %376 = fmul double %375, 3.000000e+00
  store double %376, double* %55, align 8
  br label %386

; <label>:377:                                    ; preds = %364
  %378 = load i32, i32* %44, align 4
  %379 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %378
  %380 = load double, double* %379, align 8
  %381 = load i32, i32* %45, align 4
  %382 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %381
  %383 = load double, double* %382, align 8
  %384 = fsub double %380, %383
  %385 = fmul double %384, 1.500000e+00
  store double %385, double* %55, align 8
  br label %386

; <label>:386:                                    ; preds = %377, %368
  %387 = load i32, i32* %44, align 4
  %388 = load i32, i32* %45, align 4
  %389 = icmp sge i32 %387, %388
  br i1 %389, label %390, label %399

; <label>:390:                                    ; preds = %386
  %391 = load i32, i32* %44, align 4
  %392 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %391
  %393 = load double, double* %392, align 8
  %394 = load i32, i32* %45, align 4
  %395 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %394
  %396 = load double, double* %395, align 8
  %397 = fsub double %393, %396
  %398 = fmul double %397, 3.000000e+00
  store double %398, double* %55, align 8
  br label %408

; <label>:399:                                    ; preds = %386
  %400 = load i32, i32* %44, align 4
  %401 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %400
  %402 = load double, double* %401, align 8
  %403 = load i32, i32* %45, align 4
  %404 = getelementptr inbounds [63 x double], [63 x double]* %39, i32 0, i32 %403
  %405 = load double, double* %404, align 8
  %406 = fsub double %402, %405
  %407 = fmul double %406, 1.500000e+00
  store double %407, double* %55, align 8
  br label %408

; <label>:408:                                    ; preds = %399, %390
  %409 = load double, double* %55, align 8
  %410 = fcmp oge double %409, 5.000000e-01
  br i1 %410, label %411, label %424

; <label>:411:                                    ; preds = %408
  %412 = load double, double* %55, align 8
  %413 = fcmp ole double %412, 2.500000e+00
  br i1 %413, label %414, label %424

; <label>:414:                                    ; preds = %411
  %415 = load double, double* %55, align 8
  %416 = fsub double %415, 5.000000e-01
  store double %416, double* %58, align 8
  %417 = load double, double* %58, align 8
  %418 = load double, double* %58, align 8
  %419 = fmul double %417, %418
  %420 = load double, double* %58, align 8
  %421 = fmul double 2.000000e+00, %420
  %422 = fsub double %419, %421
  %423 = fmul double 8.000000e+00, %422
  store double %423, double* %56, align 8
  br label %425

; <label>:424:                                    ; preds = %411, %408
  store double 0.000000e+00, double* %56, align 8
  br label %425

; <label>:425:                                    ; preds = %424, %414
  %426 = load double, double* %55, align 8
  %427 = fadd double %426, 4.740000e-01
  store double %427, double* %55, align 8
  %428 = load double, double* %55, align 8
  %429 = fmul double 7.500000e+00, %428
  %430 = fadd double 0x402F9F6E6106AB15, %429
  %431 = load double, double* %55, align 8
  %432 = load double, double* %55, align 8
  %433 = fmul double %431, %432
  %434 = fadd double 1.000000e+00, %433
  %435 = call arm_aapcscc double @sqrt(double %434) #7
  %436 = fmul double 1.750000e+01, %435
  %437 = fsub double %430, %436
  store double %437, double* %57, align 8
  %438 = load double, double* %57, align 8
  %439 = fcmp ole double %438, -6.000000e+01
  br i1 %439, label %440, label %446

; <label>:440:                                    ; preds = %425
  %441 = load [64 x double]*, [64 x double]** %26, align 4
  %442 = load i32, i32* %44, align 4
  %443 = getelementptr inbounds [64 x double], [64 x double]* %441, i32 %442
  %444 = load i32, i32* %45, align 4
  %445 = getelementptr inbounds [64 x double], [64 x double]* %443, i32 0, i32 %444
  store double 0.000000e+00, double* %445, align 8
  br label %457

; <label>:446:                                    ; preds = %425
  %447 = load double, double* %56, align 8
  %448 = load double, double* %57, align 8
  %449 = fadd double %447, %448
  %450 = fmul double %449, 0x3FCD791C5F888823
  %451 = call arm_aapcscc double @exp(double %450) #7
  %452 = load [64 x double]*, [64 x double]** %26, align 4
  %453 = load i32, i32* %44, align 4
  %454 = getelementptr inbounds [64 x double], [64 x double]* %452, i32 %453
  %455 = load i32, i32* %45, align 4
  %456 = getelementptr inbounds [64 x double], [64 x double]* %454, i32 0, i32 %455
  store double %451, double* %456, align 8
  br label %457

; <label>:457:                                    ; preds = %446, %440
  br label %458

; <label>:458:                                    ; preds = %457
  %459 = load i32, i32* %45, align 4
  %460 = add nsw i32 %459, 1
  store i32 %460, i32* %45, align 4
  br label %360

; <label>:461:                                    ; preds = %360
  br label %462

; <label>:462:                                    ; preds = %461
  %463 = load i32, i32* %44, align 4
  %464 = add nsw i32 %463, 1
  store i32 %464, i32* %44, align 4
  br label %355

; <label>:465:                                    ; preds = %355
  store i32 0, i32* %48, align 4
  br label %466

; <label>:466:                                    ; preds = %572, %465
  %467 = load i32, i32* %48, align 4
  %468 = icmp slt i32 %467, 6
  br i1 %468, label %469, label %575

; <label>:469:                                    ; preds = %466
  %470 = load double*, double** %42, align 4
  %471 = getelementptr inbounds double, double* %470, i32 1
  store double* %471, double** %42, align 4
  %472 = load double, double* %470, align 8
  store double %472, double* %37, align 8
  %473 = load double*, double** %42, align 4
  %474 = getelementptr inbounds double, double* %473, i32 1
  store double* %474, double** %42, align 4
  %475 = load double, double* %473, align 8
  %476 = fptosi double %475 to i32
  store i32 %476, i32* %43, align 4
  %477 = load i32, i32* %43, align 4
  %478 = add nsw i32 %477, 1
  store i32 %478, i32* %43, align 4
  %479 = load double, double* %19, align 8
  %480 = load double, double* %37, align 8
  %481 = load i32, i32* %50, align 4
  %482 = sitofp i32 %481 to double
  %483 = fdiv double %480, %482
  %484 = fcmp oeq double %479, %483
  br i1 %484, label %485, label %566

; <label>:485:                                    ; preds = %469
  store i32 0, i32* %44, align 4
  br label %486

; <label>:486:                                    ; preds = %562, %485
  %487 = load i32, i32* %44, align 4
  %488 = load i32, i32* %43, align 4
  %489 = icmp slt i32 %487, %488
  br i1 %489, label %490, label %565

; <label>:490:                                    ; preds = %486
  %491 = load double*, double** %42, align 4
  %492 = getelementptr inbounds double, double* %491, i32 1
  store double* %492, double** %42, align 4
  %493 = load double, double* %491, align 8
  %494 = fptosi double %493 to i32
  store i32 %494, i32* %45, align 4
  %495 = load double*, double** %42, align 4
  %496 = getelementptr inbounds double, double* %495, i32 1
  store double* %496, double** %42, align 4
  %497 = load double*, double** %42, align 4
  %498 = getelementptr inbounds double, double* %497, i32 1
  store double* %498, double** %42, align 4
  %499 = load double, double* %497, align 8
  %500 = fptosi double %499 to i32
  %501 = load i32*, i32** %29, align 4
  %502 = load i32, i32* %44, align 4
  %503 = getelementptr inbounds i32, i32* %501, i32 %502
  store i32 %500, i32* %503, align 4
  %504 = load double*, double** %42, align 4
  %505 = getelementptr inbounds double, double* %504, i32 1
  store double* %505, double** %42, align 4
  %506 = load double, double* %504, align 8
  %507 = fptosi double %506 to i32
  %508 = load i32*, i32** %30, align 4
  %509 = load i32, i32* %44, align 4
  %510 = getelementptr inbounds i32, i32* %508, i32 %509
  store i32 %507, i32* %510, align 4
  %511 = load double*, double** %42, align 4
  %512 = getelementptr inbounds double, double* %511, i32 1
  store double* %512, double** %42, align 4
  %513 = load double, double* %511, align 8
  %514 = load double*, double** %31, align 4
  %515 = load i32, i32* %44, align 4
  %516 = getelementptr inbounds double, double* %514, i32 %515
  store double %513, double* %516, align 8
  %517 = load double*, double** %42, align 4
  %518 = getelementptr inbounds double, double* %517, i32 1
  store double* %518, double** %42, align 4
  %519 = load double, double* %517, align 8
  %520 = load double*, double** %32, align 4
  %521 = load i32, i32* %44, align 4
  %522 = getelementptr inbounds double, double* %520, i32 %521
  store double %519, double* %522, align 8
  %523 = load i32, i32* %45, align 4
  %524 = load i32, i32* %44, align 4
  %525 = icmp ne i32 %523, %524
  br i1 %525, label %526, label %529

; <label>:526:                                    ; preds = %490
  %527 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %528 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %527, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4.209, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:529:                                    ; preds = %490
  %530 = load i32, i32* %44, align 4
  %531 = icmp ne i32 %530, 0
  br i1 %531, label %532, label %561

; <label>:532:                                    ; preds = %529
  %533 = load double*, double** %31, align 4
  %534 = load i32, i32* %44, align 4
  %535 = getelementptr inbounds double, double* %533, i32 %534
  %536 = load double, double* %535, align 8
  %537 = fsub double 1.000000e+00, %536
  %538 = load double*, double** %32, align 4
  %539 = load i32, i32* %44, align 4
  %540 = sub nsw i32 %539, 1
  %541 = getelementptr inbounds double, double* %538, i32 %540
  %542 = load double, double* %541, align 8
  %543 = fsub double %537, %542
  %544 = call arm_aapcscc double @fabs(double %543) #9
  %545 = fcmp ogt double %544, 1.000000e-02
  br i1 %545, label %546, label %560

; <label>:546:                                    ; preds = %532
  %547 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %548 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %547, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5.210, i32 0, i32 0))
  %549 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %550 = load double*, double** %31, align 4
  %551 = load i32, i32* %44, align 4
  %552 = getelementptr inbounds double, double* %550, i32 %551
  %553 = load double, double* %552, align 8
  %554 = load double*, double** %32, align 4
  %555 = load i32, i32* %44, align 4
  %556 = sub nsw i32 %555, 1
  %557 = getelementptr inbounds double, double* %554, i32 %556
  %558 = load double, double* %557, align 8
  %559 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %549, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6.211, i32 0, i32 0), double %553, double %558)
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:560:                                    ; preds = %532
  br label %561

; <label>:561:                                    ; preds = %560, %529
  br label %562

; <label>:562:                                    ; preds = %561
  %563 = load i32, i32* %44, align 4
  %564 = add nsw i32 %563, 1
  store i32 %564, i32* %44, align 4
  br label %486

; <label>:565:                                    ; preds = %486
  br label %571

; <label>:566:                                    ; preds = %469
  %567 = load i32, i32* %43, align 4
  %568 = mul nsw i32 %567, 6
  %569 = load double*, double** %42, align 4
  %570 = getelementptr inbounds double, double* %569, i32 %568
  store double* %570, double** %42, align 4
  br label %571

; <label>:571:                                    ; preds = %566, %565
  br label %572

; <label>:572:                                    ; preds = %571
  %573 = load i32, i32* %48, align 4
  %574 = add nsw i32 %573, 1
  store i32 %574, i32* %48, align 4
  br label %466

; <label>:575:                                    ; preds = %466
  store i32 0, i32* %48, align 4
  br label %576

; <label>:576:                                    ; preds = %682, %575
  %577 = load i32, i32* %48, align 4
  %578 = icmp slt i32 %577, 6
  br i1 %578, label %579, label %685

; <label>:579:                                    ; preds = %576
  %580 = load double*, double** %42, align 4
  %581 = getelementptr inbounds double, double* %580, i32 1
  store double* %581, double** %42, align 4
  %582 = load double, double* %580, align 8
  store double %582, double* %37, align 8
  %583 = load double*, double** %42, align 4
  %584 = getelementptr inbounds double, double* %583, i32 1
  store double* %584, double** %42, align 4
  %585 = load double, double* %583, align 8
  %586 = fptosi double %585 to i32
  store i32 %586, i32* %43, align 4
  %587 = load i32, i32* %43, align 4
  %588 = add nsw i32 %587, 1
  store i32 %588, i32* %43, align 4
  %589 = load double, double* %19, align 8
  %590 = load double, double* %37, align 8
  %591 = load i32, i32* %50, align 4
  %592 = sitofp i32 %591 to double
  %593 = fdiv double %590, %592
  %594 = fcmp oeq double %589, %593
  br i1 %594, label %595, label %676

; <label>:595:                                    ; preds = %579
  store i32 0, i32* %44, align 4
  br label %596

; <label>:596:                                    ; preds = %672, %595
  %597 = load i32, i32* %44, align 4
  %598 = load i32, i32* %43, align 4
  %599 = icmp slt i32 %597, %598
  br i1 %599, label %600, label %675

; <label>:600:                                    ; preds = %596
  %601 = load double*, double** %42, align 4
  %602 = getelementptr inbounds double, double* %601, i32 1
  store double* %602, double** %42, align 4
  %603 = load double, double* %601, align 8
  %604 = fptosi double %603 to i32
  store i32 %604, i32* %45, align 4
  %605 = load double*, double** %42, align 4
  %606 = getelementptr inbounds double, double* %605, i32 1
  store double* %606, double** %42, align 4
  %607 = load double*, double** %42, align 4
  %608 = getelementptr inbounds double, double* %607, i32 1
  store double* %608, double** %42, align 4
  %609 = load double, double* %607, align 8
  %610 = fptosi double %609 to i32
  %611 = load i32*, i32** %33, align 4
  %612 = load i32, i32* %44, align 4
  %613 = getelementptr inbounds i32, i32* %611, i32 %612
  store i32 %610, i32* %613, align 4
  %614 = load double*, double** %42, align 4
  %615 = getelementptr inbounds double, double* %614, i32 1
  store double* %615, double** %42, align 4
  %616 = load double, double* %614, align 8
  %617 = fptosi double %616 to i32
  %618 = load i32*, i32** %34, align 4
  %619 = load i32, i32* %44, align 4
  %620 = getelementptr inbounds i32, i32* %618, i32 %619
  store i32 %617, i32* %620, align 4
  %621 = load double*, double** %42, align 4
  %622 = getelementptr inbounds double, double* %621, i32 1
  store double* %622, double** %42, align 4
  %623 = load double, double* %621, align 8
  %624 = load double*, double** %35, align 4
  %625 = load i32, i32* %44, align 4
  %626 = getelementptr inbounds double, double* %624, i32 %625
  store double %623, double* %626, align 8
  %627 = load double*, double** %42, align 4
  %628 = getelementptr inbounds double, double* %627, i32 1
  store double* %628, double** %42, align 4
  %629 = load double, double* %627, align 8
  %630 = load double*, double** %36, align 4
  %631 = load i32, i32* %44, align 4
  %632 = getelementptr inbounds double, double* %630, i32 %631
  store double %629, double* %632, align 8
  %633 = load i32, i32* %45, align 4
  %634 = load i32, i32* %44, align 4
  %635 = icmp ne i32 %633, %634
  br i1 %635, label %636, label %639

; <label>:636:                                    ; preds = %600
  %637 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %638 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %637, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4.209, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:639:                                    ; preds = %600
  %640 = load i32, i32* %44, align 4
  %641 = icmp ne i32 %640, 0
  br i1 %641, label %642, label %671

; <label>:642:                                    ; preds = %639
  %643 = load double*, double** %35, align 4
  %644 = load i32, i32* %44, align 4
  %645 = getelementptr inbounds double, double* %643, i32 %644
  %646 = load double, double* %645, align 8
  %647 = fsub double 1.000000e+00, %646
  %648 = load double*, double** %36, align 4
  %649 = load i32, i32* %44, align 4
  %650 = sub nsw i32 %649, 1
  %651 = getelementptr inbounds double, double* %648, i32 %650
  %652 = load double, double* %651, align 8
  %653 = fsub double %647, %652
  %654 = call arm_aapcscc double @fabs(double %653) #9
  %655 = fcmp ogt double %654, 1.000000e-02
  br i1 %655, label %656, label %670

; <label>:656:                                    ; preds = %642
  %657 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %658 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %657, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.7.212, i32 0, i32 0))
  %659 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %660 = load double*, double** %35, align 4
  %661 = load i32, i32* %44, align 4
  %662 = getelementptr inbounds double, double* %660, i32 %661
  %663 = load double, double* %662, align 8
  %664 = load double*, double** %36, align 4
  %665 = load i32, i32* %44, align 4
  %666 = sub nsw i32 %665, 1
  %667 = getelementptr inbounds double, double* %664, i32 %666
  %668 = load double, double* %667, align 8
  %669 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %659, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6.211, i32 0, i32 0), double %663, double %668)
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:670:                                    ; preds = %642
  br label %671

; <label>:671:                                    ; preds = %670, %639
  br label %672

; <label>:672:                                    ; preds = %671
  %673 = load i32, i32* %44, align 4
  %674 = add nsw i32 %673, 1
  store i32 %674, i32* %44, align 4
  br label %596

; <label>:675:                                    ; preds = %596
  br label %681

; <label>:676:                                    ; preds = %579
  %677 = load i32, i32* %43, align 4
  %678 = mul nsw i32 %677, 6
  %679 = load double*, double** %42, align 4
  %680 = getelementptr inbounds double, double* %679, i32 %678
  store double* %680, double** %42, align 4
  br label %681

; <label>:681:                                    ; preds = %676, %675
  br label %682

; <label>:682:                                    ; preds = %681
  %683 = load i32, i32* %48, align 4
  %684 = add nsw i32 %683, 1
  store i32 %684, i32* %48, align 4
  br label %576

; <label>:685:                                    ; preds = %576
  ret void
}

; Function Attrs: nounwind
declare arm_aapcscc double @exp(double) #2

; Function Attrs: nounwind
declare arm_aapcscc double @log10(double) #2

; Function Attrs: noreturn
declare arm_aapcscc void @abort() #4

; Function Attrs: nounwind
define arm_aapcscc void @iteration_loop(%struct.lame_global_flags*, [2 x double]*, double*, [2 x [576 x double]]*, [2 x %struct.III_psy_ratio]*, %struct.III_side_info_t*, [2 x [576 x i32]]*, [2 x %struct.III_scalefac_t]*) #0 {
  %9 = alloca %struct.lame_global_flags*, align 4
  %10 = alloca [2 x double]*, align 4
  %11 = alloca double*, align 4
  %12 = alloca [2 x [576 x double]]*, align 4
  %13 = alloca [2 x %struct.III_psy_ratio]*, align 4
  %14 = alloca %struct.III_side_info_t*, align 4
  %15 = alloca [2 x [576 x i32]]*, align 4
  %16 = alloca [2 x %struct.III_scalefac_t]*, align 4
  %17 = alloca [4 x [21 x double]], align 8
  %18 = alloca [4 x double], align 8
  %19 = alloca [2 x %struct.III_psy_xmin], align 8
  %20 = alloca %struct.gr_info*, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca [2 x i32], align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %9, align 4
  store [2 x double]* %1, [2 x double]** %10, align 4
  store double* %2, double** %11, align 4
  store [2 x [576 x double]]* %3, [2 x [576 x double]]** %12, align 4
  store [2 x %struct.III_psy_ratio]* %4, [2 x %struct.III_psy_ratio]** %13, align 4
  store %struct.III_side_info_t* %5, %struct.III_side_info_t** %14, align 4
  store [2 x [576 x i32]]* %6, [2 x [576 x i32]]** %15, align 4
  store [2 x %struct.III_scalefac_t]* %7, [2 x %struct.III_scalefac_t]** %16, align 4
  %28 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %29 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %30 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  call arm_aapcscc void @iteration_init(%struct.lame_global_flags* %28, %struct.III_side_info_t* %29, [2 x [576 x i32]]* %30)
  %31 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %32 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %31, i32 0, i32 43
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i32 0, i32 %33
  %35 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %36 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %35, i32 0, i32 50
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds [15 x i32], [15 x i32]* %34, i32 0, i32 %37
  %39 = load i32, i32* %38, align 4
  store i32 %39, i32* %26, align 4
  %40 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  call arm_aapcscc void @getframebits(%struct.lame_global_flags* %40, i32* %21, i32* %22)
  %41 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %42 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %43 = load i32, i32* %22, align 4
  %44 = load i32, i32* %21, align 4
  %45 = call arm_aapcscc i32 @ResvFrameBegin(%struct.lame_global_flags* %41, %struct.III_side_info_t* %42, i32 %43, i32 %44)
  store i32 0, i32* %24, align 4
  br label %46

; <label>:46:                                     ; preds = %231, %8
  %47 = load i32, i32* %24, align 4
  %48 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %49 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %48, i32 0, i32 45
  %50 = load i32, i32* %49, align 4
  %51 = icmp slt i32 %47, %50
  br i1 %51, label %52, label %234

; <label>:52:                                     ; preds = %46
  %53 = load i32, i32* @convert_mdct, align 4
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %55, label %64

; <label>:55:                                     ; preds = %52
  %56 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %57 = load i32, i32* %24, align 4
  %58 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %56, i32 %57
  %59 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %58, i32 0, i32 0
  %60 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %61 = load i32, i32* %24, align 4
  %62 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %60, i32 %61
  %63 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %62, i32 0, i32 0
  call arm_aapcscc void @ms_convert([576 x double]* %59, [576 x double]* %63)
  br label %64

; <label>:64:                                     ; preds = %55, %52
  %65 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %66 = load [2 x double]*, [2 x double]** %10, align 4
  %67 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %68 = getelementptr inbounds [2 x i32], [2 x i32]* %27, i32 0, i32 0
  %69 = load i32, i32* %22, align 4
  %70 = load i32, i32* %24, align 4
  call arm_aapcscc void @on_pe(%struct.lame_global_flags* %65, [2 x double]* %66, %struct.III_side_info_t* %67, i32* %68, i32 %69, i32 %70)
  %71 = load i32, i32* @reduce_sidechannel, align 4
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %73, label %80

; <label>:73:                                     ; preds = %64
  %74 = getelementptr inbounds [2 x i32], [2 x i32]* %27, i32 0, i32 0
  %75 = load double*, double** %11, align 4
  %76 = load i32, i32* %24, align 4
  %77 = getelementptr inbounds double, double* %75, i32 %76
  %78 = load double, double* %77, align 8
  %79 = load i32, i32* %22, align 4
  call arm_aapcscc void @reduce_side(i32* %74, double %78, i32 %79)
  br label %80

; <label>:80:                                     ; preds = %73, %64
  store i32 0, i32* %23, align 4
  br label %81

; <label>:81:                                     ; preds = %227, %80
  %82 = load i32, i32* %23, align 4
  %83 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %84 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %83, i32 0, i32 46
  %85 = load i32, i32* %84, align 4
  %86 = icmp slt i32 %82, %85
  br i1 %86, label %87, label %230

; <label>:87:                                     ; preds = %81
  %88 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %89 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %88, i32 0, i32 4
  %90 = load i32, i32* %24, align 4
  %91 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %89, i32 0, i32 %90
  %92 = getelementptr inbounds %struct.anon, %struct.anon* %91, i32 0, i32 0
  %93 = load i32, i32* %23, align 4
  %94 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %92, i32 0, i32 %93
  %95 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %94, i32 0, i32 0
  store %struct.gr_info* %95, %struct.gr_info** %20, align 4
  %96 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %97 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %98 = load i32, i32* %24, align 4
  %99 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %97, i32 %98
  %100 = load i32, i32* %23, align 4
  %101 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %99, i32 0, i32 %100
  %102 = getelementptr inbounds [576 x double], [576 x double]* %101, i32 0, i32 0
  %103 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %104 = call arm_aapcscc i32 @init_outer_loop(%struct.lame_global_flags* %96, double* %102, %struct.gr_info* %103)
  %105 = icmp ne i32 %104, 0
  br i1 %105, label %124, label %106

; <label>:106:                                    ; preds = %87
  %107 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %108 = load i32, i32* %24, align 4
  %109 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %107, i32 %108
  %110 = load i32, i32* %23, align 4
  %111 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %109, i32 0, i32 %110
  %112 = bitcast %struct.III_scalefac_t* %111 to i8*
  call void @llvm.memset.p0i8.i32(i8* %112, i8 0, i32 244, i32 4, i1 false)
  %113 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %114 = load i32, i32* %24, align 4
  %115 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %113, i32 %114
  %116 = load i32, i32* %23, align 4
  %117 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %115, i32 0, i32 %116
  %118 = getelementptr inbounds [576 x i32], [576 x i32]* %117, i32 0, i32 0
  %119 = bitcast i32* %118 to i8*
  call void @llvm.memset.p0i8.i32(i8* %119, i8 0, i32 2304, i32 4, i1 false)
  %120 = getelementptr inbounds [4 x double], [4 x double]* %18, i32 0, i32 3
  store double 0.000000e+00, double* %120, align 8
  %121 = getelementptr inbounds [4 x double], [4 x double]* %18, i32 0, i32 2
  store double 0.000000e+00, double* %121, align 8
  %122 = getelementptr inbounds [4 x double], [4 x double]* %18, i32 0, i32 1
  store double 0.000000e+00, double* %122, align 8
  %123 = getelementptr inbounds [4 x double], [4 x double]* %18, i32 0, i32 0
  store double 0.000000e+00, double* %123, align 8
  br label %168

; <label>:124:                                    ; preds = %87
  %125 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %126 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %127 = load i32, i32* %24, align 4
  %128 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %126, i32 %127
  %129 = load i32, i32* %23, align 4
  %130 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %128, i32 0, i32 %129
  %131 = getelementptr inbounds [576 x double], [576 x double]* %130, i32 0, i32 0
  %132 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %13, align 4
  %133 = load i32, i32* %24, align 4
  %134 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %132, i32 %133
  %135 = load i32, i32* %23, align 4
  %136 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %134, i32 0, i32 %135
  %137 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %138 = load i32, i32* %23, align 4
  %139 = getelementptr inbounds [2 x %struct.III_psy_xmin], [2 x %struct.III_psy_xmin]* %19, i32 0, i32 %138
  %140 = call arm_aapcscc i32 @calc_xmin(%struct.lame_global_flags* %125, double* %131, %struct.III_psy_ratio* %136, %struct.gr_info* %137, %struct.III_psy_xmin* %139)
  %141 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %142 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %143 = load i32, i32* %24, align 4
  %144 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %142, i32 %143
  %145 = load i32, i32* %23, align 4
  %146 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %144, i32 0, i32 %145
  %147 = getelementptr inbounds [576 x double], [576 x double]* %146, i32 0, i32 0
  %148 = load i32, i32* %23, align 4
  %149 = getelementptr inbounds [2 x i32], [2 x i32]* %27, i32 0, i32 %148
  %150 = load i32, i32* %149, align 4
  %151 = getelementptr inbounds [4 x double], [4 x double]* %18, i32 0, i32 0
  %152 = load i32, i32* %23, align 4
  %153 = getelementptr inbounds [2 x %struct.III_psy_xmin], [2 x %struct.III_psy_xmin]* %19, i32 0, i32 %152
  %154 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %155 = load i32, i32* %24, align 4
  %156 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %154, i32 %155
  %157 = load i32, i32* %23, align 4
  %158 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %156, i32 0, i32 %157
  %159 = getelementptr inbounds [576 x i32], [576 x i32]* %158, i32 0, i32 0
  %160 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %161 = load i32, i32* %24, align 4
  %162 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %160, i32 %161
  %163 = load i32, i32* %23, align 4
  %164 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %162, i32 0, i32 %163
  %165 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %166 = getelementptr inbounds [4 x [21 x double]], [4 x [21 x double]]* %17, i32 0, i32 0
  %167 = load i32, i32* %23, align 4
  call arm_aapcscc void @outer_loop(%struct.lame_global_flags* %141, double* %147, i32 %150, double* %151, %struct.III_psy_xmin* %153, i32* %159, %struct.III_scalefac_t* %164, %struct.gr_info* %165, [21 x double]* %166, i32 %167)
  br label %168

; <label>:168:                                    ; preds = %124, %106
  %169 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %170 = load i32, i32* %24, align 4
  %171 = load i32, i32* %23, align 4
  %172 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %173 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %174 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  call arm_aapcscc void @best_scalefac_store(%struct.lame_global_flags* %169, i32 %170, i32 %171, [2 x [576 x i32]]* %172, %struct.III_side_info_t* %173, [2 x %struct.III_scalefac_t]* %174)
  %175 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %176 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %175, i32 0, i32 64
  %177 = load i32, i32* %176, align 4
  %178 = icmp eq i32 %177, 1
  br i1 %178, label %179, label %194

; <label>:179:                                    ; preds = %168
  %180 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %181 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %180, i32 0, i32 6
  %182 = load i32, i32* %181, align 4
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %194

; <label>:184:                                    ; preds = %179
  %185 = load i32, i32* %24, align 4
  %186 = load i32, i32* %23, align 4
  %187 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %188 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %189 = load i32, i32* %24, align 4
  %190 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %188, i32 %189
  %191 = load i32, i32* %23, align 4
  %192 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %190, i32 0, i32 %191
  %193 = getelementptr inbounds [576 x i32], [576 x i32]* %192, i32 0, i32 0
  call arm_aapcscc void @best_huffman_divide(i32 %185, i32 %186, %struct.gr_info* %187, i32* %193)
  br label %194

; <label>:194:                                    ; preds = %184, %179, %168
  %195 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %196 = load %struct.gr_info*, %struct.gr_info** %20, align 4
  %197 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %198 = load i32, i32* %22, align 4
  call arm_aapcscc void @ResvAdjust(%struct.lame_global_flags* %195, %struct.gr_info* %196, %struct.III_side_info_t* %197, i32 %198)
  store i32 0, i32* %25, align 4
  br label %199

; <label>:199:                                    ; preds = %223, %194
  %200 = load i32, i32* %25, align 4
  %201 = icmp slt i32 %200, 576
  br i1 %201, label %202, label %226

; <label>:202:                                    ; preds = %199
  %203 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %204 = load i32, i32* %24, align 4
  %205 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %203, i32 %204
  %206 = load i32, i32* %23, align 4
  %207 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %205, i32 0, i32 %206
  %208 = load i32, i32* %25, align 4
  %209 = getelementptr inbounds [576 x double], [576 x double]* %207, i32 0, i32 %208
  %210 = load double, double* %209, align 8
  %211 = fcmp olt double %210, 0.000000e+00
  br i1 %211, label %212, label %222

; <label>:212:                                    ; preds = %202
  %213 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %214 = load i32, i32* %24, align 4
  %215 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %213, i32 %214
  %216 = load i32, i32* %23, align 4
  %217 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %215, i32 0, i32 %216
  %218 = load i32, i32* %25, align 4
  %219 = getelementptr inbounds [576 x i32], [576 x i32]* %217, i32 0, i32 %218
  %220 = load i32, i32* %219, align 4
  %221 = mul nsw i32 %220, -1
  store i32 %221, i32* %219, align 4
  br label %222

; <label>:222:                                    ; preds = %212, %202
  br label %223

; <label>:223:                                    ; preds = %222
  %224 = load i32, i32* %25, align 4
  %225 = add nsw i32 %224, 1
  store i32 %225, i32* %25, align 4
  br label %199

; <label>:226:                                    ; preds = %199
  br label %227

; <label>:227:                                    ; preds = %226
  %228 = load i32, i32* %23, align 4
  %229 = add nsw i32 %228, 1
  store i32 %229, i32* %23, align 4
  br label %81

; <label>:230:                                    ; preds = %81
  br label %231

; <label>:231:                                    ; preds = %230
  %232 = load i32, i32* %24, align 4
  %233 = add nsw i32 %232, 1
  store i32 %233, i32* %24, align 4
  br label %46

; <label>:234:                                    ; preds = %46
  %235 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %236 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %237 = load i32, i32* %22, align 4
  call arm_aapcscc void @ResvFrameEnd(%struct.lame_global_flags* %235, %struct.III_side_info_t* %236, i32 %237)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @init_outer_loop(%struct.lame_global_flags*, double*, %struct.gr_info*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.lame_global_flags*, align 4
  %6 = alloca double*, align 4
  %7 = alloca %struct.gr_info*, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [3 x double], align 8
  %12 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %5, align 4
  store double* %1, double** %6, align 4
  store %struct.gr_info* %2, %struct.gr_info** %7, align 4
  store i32 0, i32* %8, align 4
  br label %13

; <label>:13:                                     ; preds = %21, %3
  %14 = load i32, i32* %8, align 4
  %15 = icmp slt i32 %14, 4
  br i1 %15, label %16, label %24

; <label>:16:                                     ; preds = %13
  %17 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %18 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %17, i32 0, i32 20
  %19 = load i32, i32* %8, align 4
  %20 = getelementptr inbounds [4 x i32], [4 x i32]* %18, i32 0, i32 %19
  store i32 0, i32* %20, align 4
  br label %21

; <label>:21:                                     ; preds = %16
  %22 = load i32, i32* %8, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %8, align 4
  br label %13

; <label>:24:                                     ; preds = %13
  %25 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %26 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %25, i32 0, i32 19
  store i32* getelementptr inbounds ([6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i32 0, i32 0, i32 0, i32 0), i32** %26, align 4
  %27 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %28 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %27, i32 0, i32 0
  store i32 0, i32* %28, align 4
  %29 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %30 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %29, i32 0, i32 1
  store i32 0, i32* %30, align 4
  %31 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %32 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %31, i32 0, i32 2
  store i32 0, i32* %32, align 4
  %33 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %34 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %33, i32 0, i32 4
  store i32 0, i32* %34, align 4
  %35 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %36 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %35, i32 0, i32 8
  %37 = getelementptr inbounds [3 x i32], [3 x i32]* %36, i32 0, i32 0
  store i32 0, i32* %37, align 4
  %38 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %39 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %38, i32 0, i32 8
  %40 = getelementptr inbounds [3 x i32], [3 x i32]* %39, i32 0, i32 1
  store i32 0, i32* %40, align 4
  %41 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %42 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %41, i32 0, i32 8
  %43 = getelementptr inbounds [3 x i32], [3 x i32]* %42, i32 0, i32 2
  store i32 0, i32* %43, align 4
  %44 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %45 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %44, i32 0, i32 9
  %46 = getelementptr inbounds [3 x i32], [3 x i32]* %45, i32 0, i32 0
  store i32 0, i32* %46, align 4
  %47 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %48 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %47, i32 0, i32 9
  %49 = getelementptr inbounds [3 x i32], [3 x i32]* %48, i32 0, i32 1
  store i32 0, i32* %49, align 4
  %50 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %51 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %50, i32 0, i32 9
  %52 = getelementptr inbounds [3 x i32], [3 x i32]* %51, i32 0, i32 2
  store i32 0, i32* %52, align 4
  %53 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %54 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %53, i32 0, i32 10
  store i32 0, i32* %54, align 4
  %55 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %56 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %55, i32 0, i32 11
  store i32 0, i32* %56, align 4
  %57 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %58 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %57, i32 0, i32 15
  store i32 0, i32* %58, align 4
  %59 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %60 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %59, i32 0, i32 12
  store i32 0, i32* %60, align 4
  %61 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %62 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %61, i32 0, i32 13
  store i32 0, i32* %62, align 4
  %63 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %64 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %63, i32 0, i32 3
  store i32 210, i32* %64, align 4
  %65 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %66 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %65, i32 0, i32 14
  store i32 0, i32* %66, align 4
  %67 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %68 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %67, i32 0, i32 18
  store i32 0, i32* %68, align 4
  %69 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %70 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %69, i32 0, i32 20
  %71 = load i32, i32* %70, align 4
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %73, label %220

; <label>:73:                                     ; preds = %24
  %74 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %75 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %74, i32 0, i32 6
  %76 = load i32, i32* %75, align 4
  %77 = icmp eq i32 %76, 2
  br i1 %77, label %78, label %219

; <label>:78:                                     ; preds = %73
  store i32 0, i32* %10, align 4
  br label %79

; <label>:79:                                     ; preds = %85, %78
  %80 = load i32, i32* %10, align 4
  %81 = icmp slt i32 %80, 3
  br i1 %81, label %82, label %88

; <label>:82:                                     ; preds = %79
  %83 = load i32, i32* %10, align 4
  %84 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 %83
  store double 0.000000e+00, double* %84, align 8
  br label %85

; <label>:85:                                     ; preds = %82
  %86 = load i32, i32* %10, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %10, align 4
  br label %79

; <label>:88:                                     ; preds = %79
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  br label %89

; <label>:89:                                     ; preds = %116, %88
  %90 = load i32, i32* %9, align 4
  %91 = icmp slt i32 %90, 192
  br i1 %91, label %92, label %119

; <label>:92:                                     ; preds = %89
  store i32 0, i32* %10, align 4
  br label %93

; <label>:93:                                     ; preds = %112, %92
  %94 = load i32, i32* %10, align 4
  %95 = icmp slt i32 %94, 3
  br i1 %95, label %96, label %115

; <label>:96:                                     ; preds = %93
  %97 = load double*, double** %6, align 4
  %98 = load i32, i32* %8, align 4
  %99 = getelementptr inbounds double, double* %97, i32 %98
  %100 = load double, double* %99, align 8
  %101 = load double*, double** %6, align 4
  %102 = load i32, i32* %8, align 4
  %103 = getelementptr inbounds double, double* %101, i32 %102
  %104 = load double, double* %103, align 8
  %105 = fmul double %100, %104
  %106 = load i32, i32* %10, align 4
  %107 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 %106
  %108 = load double, double* %107, align 8
  %109 = fadd double %108, %105
  store double %109, double* %107, align 8
  %110 = load i32, i32* %8, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %8, align 4
  br label %112

; <label>:112:                                    ; preds = %96
  %113 = load i32, i32* %10, align 4
  %114 = add nsw i32 %113, 1
  store i32 %114, i32* %10, align 4
  br label %93

; <label>:115:                                    ; preds = %93
  br label %116

; <label>:116:                                    ; preds = %115
  %117 = load i32, i32* %9, align 4
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %9, align 4
  br label %89

; <label>:119:                                    ; preds = %89
  store double 1.000000e-12, double* %12, align 8
  store i32 0, i32* %10, align 4
  br label %120

; <label>:120:                                    ; preds = %137, %119
  %121 = load i32, i32* %10, align 4
  %122 = icmp slt i32 %121, 3
  br i1 %122, label %123, label %140

; <label>:123:                                    ; preds = %120
  %124 = load double, double* %12, align 8
  %125 = load i32, i32* %10, align 4
  %126 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 %125
  %127 = load double, double* %126, align 8
  %128 = fcmp ogt double %124, %127
  br i1 %128, label %129, label %131

; <label>:129:                                    ; preds = %123
  %130 = load double, double* %12, align 8
  br label %135

; <label>:131:                                    ; preds = %123
  %132 = load i32, i32* %10, align 4
  %133 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 %132
  %134 = load double, double* %133, align 8
  br label %135

; <label>:135:                                    ; preds = %131, %129
  %136 = phi double [ %130, %129 ], [ %134, %131 ]
  store double %136, double* %12, align 8
  br label %137

; <label>:137:                                    ; preds = %135
  %138 = load i32, i32* %10, align 4
  %139 = add nsw i32 %138, 1
  store i32 %139, i32* %10, align 4
  br label %120

; <label>:140:                                    ; preds = %120
  store i32 0, i32* %10, align 4
  br label %141

; <label>:141:                                    ; preds = %160, %140
  %142 = load i32, i32* %10, align 4
  %143 = icmp slt i32 %142, 3
  br i1 %143, label %144, label %163

; <label>:144:                                    ; preds = %141
  %145 = load i32, i32* %10, align 4
  %146 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 %145
  %147 = load double, double* %146, align 8
  %148 = fcmp ogt double %147, 1.000000e-12
  br i1 %148, label %149, label %153

; <label>:149:                                    ; preds = %144
  %150 = load i32, i32* %10, align 4
  %151 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 %150
  %152 = load double, double* %151, align 8
  br label %154

; <label>:153:                                    ; preds = %144
  br label %154

; <label>:154:                                    ; preds = %153, %149
  %155 = phi double [ %152, %149 ], [ 1.000000e-12, %153 ]
  %156 = load double, double* %12, align 8
  %157 = fdiv double %155, %156
  %158 = load i32, i32* %10, align 4
  %159 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 %158
  store double %157, double* %159, align 8
  br label %160

; <label>:160:                                    ; preds = %154
  %161 = load i32, i32* %10, align 4
  %162 = add nsw i32 %161, 1
  store i32 %162, i32* %10, align 4
  br label %141

; <label>:163:                                    ; preds = %141
  store i32 0, i32* %10, align 4
  br label %164

; <label>:164:                                    ; preds = %204, %163
  %165 = load i32, i32* %10, align 4
  %166 = icmp slt i32 %165, 3
  br i1 %166, label %167, label %207

; <label>:167:                                    ; preds = %164
  %168 = load i32, i32* %10, align 4
  %169 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 %168
  %170 = load double, double* %169, align 8
  %171 = call arm_aapcscc double @log(double %170) #7
  %172 = fmul double -5.000000e-01, %171
  %173 = fdiv double %172, 0x3FE62E42FEFA39EF
  %174 = fadd double %173, 5.000000e-01
  %175 = fptosi double %174 to i32
  %176 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %177 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %176, i32 0, i32 9
  %178 = load i32, i32* %10, align 4
  %179 = getelementptr inbounds [3 x i32], [3 x i32]* %177, i32 0, i32 %178
  store i32 %175, i32* %179, align 4
  %180 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %181 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %180, i32 0, i32 9
  %182 = load i32, i32* %10, align 4
  %183 = getelementptr inbounds [3 x i32], [3 x i32]* %181, i32 0, i32 %182
  %184 = load i32, i32* %183, align 4
  %185 = icmp sgt i32 %184, 2
  br i1 %185, label %186, label %191

; <label>:186:                                    ; preds = %167
  %187 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %188 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %187, i32 0, i32 9
  %189 = load i32, i32* %10, align 4
  %190 = getelementptr inbounds [3 x i32], [3 x i32]* %188, i32 0, i32 %189
  store i32 2, i32* %190, align 4
  br label %191

; <label>:191:                                    ; preds = %186, %167
  %192 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %193 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %192, i32 0, i32 9
  %194 = load i32, i32* %10, align 4
  %195 = getelementptr inbounds [3 x i32], [3 x i32]* %193, i32 0, i32 %194
  %196 = load i32, i32* %195, align 4
  %197 = icmp slt i32 %196, 0
  br i1 %197, label %198, label %203

; <label>:198:                                    ; preds = %191
  %199 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %200 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %199, i32 0, i32 9
  %201 = load i32, i32* %10, align 4
  %202 = getelementptr inbounds [3 x i32], [3 x i32]* %200, i32 0, i32 %201
  store i32 0, i32* %202, align 4
  br label %203

; <label>:203:                                    ; preds = %198, %191
  br label %204

; <label>:204:                                    ; preds = %203
  %205 = load i32, i32* %10, align 4
  %206 = add nsw i32 %205, 1
  store i32 %206, i32* %10, align 4
  br label %164

; <label>:207:                                    ; preds = %164
  %208 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 0
  %209 = load double, double* %208, align 8
  %210 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 1
  %211 = load double, double* %210, align 8
  %212 = fadd double %209, %211
  %213 = getelementptr inbounds [3 x double], [3 x double]* %11, i32 0, i32 2
  %214 = load double, double* %213, align 8
  %215 = fadd double %212, %214
  %216 = fcmp olt double 1.000000e-99, %215
  br i1 %216, label %217, label %218

; <label>:217:                                    ; preds = %207
  store i32 1, i32* %4, align 4
  br label %237

; <label>:218:                                    ; preds = %207
  store i32 0, i32* %4, align 4
  br label %237

; <label>:219:                                    ; preds = %73
  br label %220

; <label>:220:                                    ; preds = %219, %24
  store i32 0, i32* %8, align 4
  br label %221

; <label>:221:                                    ; preds = %233, %220
  %222 = load i32, i32* %8, align 4
  %223 = icmp slt i32 %222, 576
  br i1 %223, label %224, label %236

; <label>:224:                                    ; preds = %221
  %225 = load double*, double** %6, align 4
  %226 = load i32, i32* %8, align 4
  %227 = getelementptr inbounds double, double* %225, i32 %226
  %228 = load double, double* %227, align 8
  %229 = call arm_aapcscc double @fabs(double %228) #9
  %230 = fcmp olt double 1.000000e-99, %229
  br i1 %230, label %231, label %232

; <label>:231:                                    ; preds = %224
  store i32 1, i32* %4, align 4
  br label %237

; <label>:232:                                    ; preds = %224
  br label %233

; <label>:233:                                    ; preds = %232
  %234 = load i32, i32* %8, align 4
  %235 = add nsw i32 %234, 1
  store i32 %235, i32* %8, align 4
  br label %221

; <label>:236:                                    ; preds = %221
  store i32 0, i32* %4, align 4
  br label %237

; <label>:237:                                    ; preds = %236, %231, %218, %217
  %238 = load i32, i32* %4, align 4
  ret i32 %238
}

; Function Attrs: nounwind
define arm_aapcscc void @outer_loop(%struct.lame_global_flags*, double*, i32, double*, %struct.III_psy_xmin*, i32*, %struct.III_scalefac_t*, %struct.gr_info*, [21 x double]*, i32) #0 {
  %11 = alloca %struct.lame_global_flags*, align 4
  %12 = alloca double*, align 4
  %13 = alloca i32, align 4
  %14 = alloca double*, align 4
  %15 = alloca %struct.III_psy_xmin*, align 4
  %16 = alloca i32*, align 4
  %17 = alloca %struct.III_scalefac_t*, align 4
  %18 = alloca %struct.gr_info*, align 4
  %19 = alloca [21 x double]*, align 4
  %20 = alloca i32, align 4
  %21 = alloca %struct.III_scalefac_t, align 4
  %22 = alloca %struct.gr_info, align 4
  %23 = alloca [576 x i32], align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca [576 x double], align 8
  %30 = alloca double, align 8
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca double, align 8
  %34 = alloca double, align 8
  %35 = alloca double, align 8
  %36 = alloca i32, align 4
  %37 = alloca double, align 8
  %38 = alloca double, align 8
  %39 = alloca double, align 8
  %40 = alloca [4 x [21 x double]], align 8
  %41 = alloca [4 x [21 x double]], align 8
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %11, align 4
  store double* %1, double** %12, align 4
  store i32 %2, i32* %13, align 4
  store double* %3, double** %14, align 4
  store %struct.III_psy_xmin* %4, %struct.III_psy_xmin** %15, align 4
  store i32* %5, i32** %16, align 4
  store %struct.III_scalefac_t* %6, %struct.III_scalefac_t** %17, align 4
  store %struct.gr_info* %7, %struct.gr_info** %18, align 4
  store [21 x double]* %8, [21 x double]** %19, align 4
  store i32 %9, i32* %20, align 4
  store i32 0, i32* %27, align 4
  store i32 0, i32* %32, align 4
  store i32 100, i32* %36, align 4
  store double 0.000000e+00, double* %37, align 8
  store double 0.000000e+00, double* %38, align 8
  store double 0.000000e+00, double* %39, align 8
  store i32 1, i32* %42, align 4
  store i32 1, i32* %43, align 4
  store i32 0, i32* %25, align 4
  br label %46

; <label>:46:                                     ; preds = %247, %10
  %47 = load i32, i32* %43, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %248

; <label>:49:                                     ; preds = %46
  store i32 0, i32* %44, align 4
  %50 = load i32, i32* %25, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %25, align 4
  %52 = load i32, i32* %42, align 4
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %90

; <label>:54:                                     ; preds = %49
  store i32 0, i32* %42, align 4
  %55 = bitcast %struct.III_scalefac_t* %21 to i8*
  call void @llvm.memset.p0i8.i32(i8* %55, i8 0, i32 244, i32 4, i1 false)
  store i32 0, i32* %24, align 4
  br label %56

; <label>:56:                                     ; preds = %72, %54
  %57 = load i32, i32* %24, align 4
  %58 = icmp slt i32 %57, 576
  br i1 %58, label %59, label %75

; <label>:59:                                     ; preds = %56
  %60 = load double*, double** %12, align 4
  %61 = load i32, i32* %24, align 4
  %62 = getelementptr inbounds double, double* %60, i32 %61
  %63 = load double, double* %62, align 8
  %64 = call arm_aapcscc double @fabs(double %63) #9
  store double %64, double* %30, align 8
  %65 = load double, double* %30, align 8
  %66 = call arm_aapcscc double @sqrt(double %65) #7
  %67 = load double, double* %30, align 8
  %68 = fmul double %66, %67
  %69 = call arm_aapcscc double @sqrt(double %68) #7
  %70 = load i32, i32* %24, align 4
  %71 = getelementptr inbounds [576 x double], [576 x double]* %29, i32 0, i32 %70
  store double %69, double* %71, align 8
  br label %72

; <label>:72:                                     ; preds = %59
  %73 = load i32, i32* %24, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %24, align 4
  br label %56

; <label>:75:                                     ; preds = %56
  %76 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %77 = load i32, i32* %13, align 4
  %78 = load i32, i32* %20, align 4
  %79 = getelementptr inbounds [2 x i32], [2 x i32]* @outer_loop.OldValue, i32 0, i32 %78
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds [576 x i32], [576 x i32]* %23, i32 0, i32 0
  %82 = getelementptr inbounds [576 x double], [576 x double]* %29, i32 0, i32 0
  %83 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %84 = call arm_aapcscc i32 @bin_search_StepSize2(%struct.lame_global_flags* %76, i32 %77, i32 %80, i32* %81, double* %82, %struct.gr_info* %83)
  store i32 %84, i32* %27, align 4
  %85 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %86 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %85, i32 0, i32 3
  %87 = load i32, i32* %86, align 4
  %88 = load i32, i32* %20, align 4
  %89 = getelementptr inbounds [2 x i32], [2 x i32]* @outer_loop.OldValue, i32 0, i32 %88
  store i32 %87, i32* %89, align 4
  br label %90

; <label>:90:                                     ; preds = %75, %49
  %91 = load i32, i32* %13, align 4
  %92 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %93 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %92, i32 0, i32 15
  %94 = load i32, i32* %93, align 4
  %95 = sub i32 %91, %94
  store i32 %95, i32* %28, align 4
  %96 = load i32, i32* %28, align 4
  %97 = icmp slt i32 %96, 0
  br i1 %97, label %98, label %105

; <label>:98:                                     ; preds = %90
  %99 = load i32, i32* %25, align 4
  %100 = icmp ne i32 %99, 1
  br i1 %100, label %102, label %101

; <label>:101:                                    ; preds = %98
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5.215, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 805, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__.outer_loop, i32 0, i32 0))
  br label %102

; <label>:102:                                    ; preds = %101, %98
  %103 = phi i1 [ true, %98 ], [ false, %101 ]
  %104 = zext i1 %103 to i32
  store i32 0, i32* %43, align 4
  br label %186

; <label>:105:                                    ; preds = %90
  %106 = load i32, i32* %25, align 4
  %107 = icmp eq i32 %106, 1
  br i1 %107, label %108, label %126

; <label>:108:                                    ; preds = %105
  %109 = load i32, i32* %27, align 4
  %110 = load i32, i32* %28, align 4
  %111 = icmp sgt i32 %109, %110
  br i1 %111, label %112, label %123

; <label>:112:                                    ; preds = %108
  %113 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %114 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %113, i32 0, i32 3
  %115 = load i32, i32* %114, align 4
  %116 = add i32 %115, 1
  store i32 %116, i32* %114, align 4
  %117 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %118 = getelementptr inbounds [576 x double], [576 x double]* %29, i32 0, i32 0
  %119 = getelementptr inbounds [576 x i32], [576 x i32]* %23, i32 0, i32 0
  %120 = load i32, i32* %28, align 4
  %121 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %122 = call arm_aapcscc i32 @inner_loop(%struct.lame_global_flags* %117, double* %118, i32* %119, i32 %120, %struct.gr_info* %121)
  store i32 %122, i32* %45, align 4
  br label %125

; <label>:123:                                    ; preds = %108
  %124 = load i32, i32* %27, align 4
  store i32 %124, i32* %45, align 4
  br label %125

; <label>:125:                                    ; preds = %123, %112
  br label %133

; <label>:126:                                    ; preds = %105
  %127 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %128 = getelementptr inbounds [576 x double], [576 x double]* %29, i32 0, i32 0
  %129 = getelementptr inbounds [576 x i32], [576 x i32]* %23, i32 0, i32 0
  %130 = load i32, i32* %28, align 4
  %131 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %132 = call arm_aapcscc i32 @inner_loop(%struct.lame_global_flags* %127, double* %128, i32* %129, i32 %130, %struct.gr_info* %131)
  store i32 %132, i32* %45, align 4
  br label %133

; <label>:133:                                    ; preds = %126, %125
  %134 = load i32, i32* %45, align 4
  %135 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %136 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %135, i32 0, i32 0
  store i32 %134, i32* %136, align 4
  %137 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %138 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %137, i32 0, i32 61
  %139 = load i32, i32* %138, align 4
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %142

; <label>:141:                                    ; preds = %133
  store i32 0, i32* %32, align 4
  br label %150

; <label>:142:                                    ; preds = %133
  %143 = load double*, double** %12, align 4
  %144 = getelementptr inbounds [576 x i32], [576 x i32]* %23, i32 0, i32 0
  %145 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %146 = getelementptr inbounds [4 x [21 x double]], [4 x [21 x double]]* %40, i32 0, i32 0
  %147 = getelementptr inbounds [4 x [21 x double]], [4 x [21 x double]]* %41, i32 0, i32 0
  %148 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %15, align 4
  %149 = call arm_aapcscc i32 @calc_noise1(double* %143, i32* %144, %struct.gr_info* %145, [21 x double]* %146, [21 x double]* %147, %struct.III_psy_xmin* %148, %struct.III_scalefac_t* %21, double* %34, double* %35, double* %33)
  store i32 %149, i32* %32, align 4
  br label %150

; <label>:150:                                    ; preds = %142, %141
  %151 = load i32, i32* %25, align 4
  %152 = icmp eq i32 %151, 1
  br i1 %152, label %153, label %154

; <label>:153:                                    ; preds = %150
  store i32 1, i32* %31, align 4
  br label %167

; <label>:154:                                    ; preds = %150
  %155 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %156 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %155, i32 0, i32 18
  %157 = load i32, i32* %156, align 4
  %158 = load i32, i32* %36, align 4
  %159 = load double, double* %39, align 8
  %160 = load double, double* %38, align 8
  %161 = load double, double* %37, align 8
  %162 = load i32, i32* %32, align 4
  %163 = load double, double* %35, align 8
  %164 = load double, double* %34, align 8
  %165 = load double, double* %33, align 8
  %166 = call arm_aapcscc i32 @quant_compare(i32 %157, i32 %158, double %159, double %160, double %161, i32 %162, double %163, double %164, double %165)
  store i32 %166, i32* %31, align 4
  br label %167

; <label>:167:                                    ; preds = %154, %153
  %168 = load i32, i32* %31, align 4
  %169 = icmp ne i32 %168, 0
  br i1 %169, label %170, label %185

; <label>:170:                                    ; preds = %167
  %171 = load i32, i32* %32, align 4
  store i32 %171, i32* %36, align 4
  %172 = load double, double* %33, align 8
  store double %172, double* %37, align 8
  %173 = load double, double* %34, align 8
  store double %173, double* %38, align 8
  %174 = load double, double* %35, align 8
  store double %174, double* %39, align 8
  %175 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %17, align 4
  %176 = bitcast %struct.III_scalefac_t* %175 to i8*
  %177 = bitcast %struct.III_scalefac_t* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %176, i8* %177, i32 244, i32 4, i1 false)
  %178 = load i32*, i32** %16, align 4
  %179 = bitcast i32* %178 to i8*
  %180 = getelementptr inbounds [576 x i32], [576 x i32]* %23, i32 0, i32 0
  %181 = bitcast i32* %180 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %179, i8* %181, i32 2304, i32 4, i1 false)
  %182 = bitcast %struct.gr_info* %22 to i8*
  %183 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %184 = bitcast %struct.gr_info* %183 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %182, i8* %184, i32 112, i32 4, i1 false)
  br label %185

; <label>:185:                                    ; preds = %170, %167
  br label %186

; <label>:186:                                    ; preds = %185, %102
  %187 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %188 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %187, i32 0, i32 62
  %189 = load i32, i32* %188, align 4
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %191, label %196

; <label>:191:                                    ; preds = %186
  %192 = load i32, i32* %32, align 4
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %194, label %195

; <label>:194:                                    ; preds = %191
  store i32 0, i32* %43, align 4
  br label %195

; <label>:195:                                    ; preds = %194, %191
  br label %196

; <label>:196:                                    ; preds = %195, %186
  %197 = load i32, i32* %43, align 4
  %198 = icmp ne i32 %197, 0
  br i1 %198, label %199, label %232

; <label>:199:                                    ; preds = %196
  %200 = getelementptr inbounds [576 x double], [576 x double]* %29, i32 0, i32 0
  %201 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %202 = getelementptr inbounds [4 x [21 x double]], [4 x [21 x double]]* %41, i32 0, i32 0
  call arm_aapcscc void @amp_scalefac_bands(double* %200, %struct.gr_info* %201, %struct.III_scalefac_t* %21, [21 x double]* %202)
  %203 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %204 = call arm_aapcscc i32 @loop_break(%struct.III_scalefac_t* %21, %struct.gr_info* %203)
  store i32 %204, i32* %26, align 4
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %206, label %227

; <label>:206:                                    ; preds = %199
  %207 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %208 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %207, i32 0, i32 43
  %209 = load i32, i32* %208, align 4
  %210 = icmp eq i32 %209, 1
  br i1 %210, label %211, label %214

; <label>:211:                                    ; preds = %206
  %212 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %213 = call arm_aapcscc i32 @scale_bitcount(%struct.III_scalefac_t* %21, %struct.gr_info* %212)
  store i32 %213, i32* %26, align 4
  br label %217

; <label>:214:                                    ; preds = %206
  %215 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %216 = call arm_aapcscc i32 @scale_bitcount_lsf(%struct.III_scalefac_t* %21, %struct.gr_info* %215)
  store i32 %216, i32* %26, align 4
  br label %217

; <label>:217:                                    ; preds = %214, %211
  %218 = load i32, i32* %26, align 4
  %219 = icmp ne i32 %218, 0
  br i1 %219, label %220, label %226

; <label>:220:                                    ; preds = %217
  %221 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %222 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %221, i32 0, i32 13
  %223 = load i32, i32* %222, align 4
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %226

; <label>:225:                                    ; preds = %220
  store i32 1, i32* %44, align 4
  br label %226

; <label>:226:                                    ; preds = %225, %220, %217
  br label %227

; <label>:227:                                    ; preds = %226, %199
  %228 = load i32, i32* %26, align 4
  %229 = icmp ne i32 %228, 0
  %230 = xor i1 %229, true
  %231 = zext i1 %230 to i32
  store i32 %231, i32* %43, align 4
  br label %232

; <label>:232:                                    ; preds = %227, %196
  %233 = load i32, i32* %44, align 4
  %234 = icmp ne i32 %233, 0
  br i1 %234, label %235, label %247

; <label>:235:                                    ; preds = %232
  %236 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %237 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %236, i32 0, i32 19
  %238 = load i32, i32* %237, align 4
  %239 = icmp ne i32 %238, 0
  br i1 %239, label %240, label %247

; <label>:240:                                    ; preds = %235
  %241 = load %struct.lame_global_flags*, %struct.lame_global_flags** %11, align 4
  %242 = load double*, double** %12, align 4
  %243 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %244 = call arm_aapcscc i32 @init_outer_loop(%struct.lame_global_flags* %241, double* %242, %struct.gr_info* %243)
  store i32 1, i32* %42, align 4
  store i32 1, i32* %43, align 4
  %245 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %246 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %245, i32 0, i32 13
  store i32 1, i32* %246, align 4
  br label %247

; <label>:247:                                    ; preds = %240, %235, %232
  br label %46

; <label>:248:                                    ; preds = %46
  %249 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %250 = bitcast %struct.gr_info* %249 to i8*
  %251 = bitcast %struct.gr_info* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %250, i8* %251, i32 112, i32 4, i1 false)
  %252 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %253 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %252, i32 0, i32 15
  %254 = load i32, i32* %253, align 4
  %255 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %256 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %255, i32 0, i32 0
  %257 = load i32, i32* %256, align 4
  %258 = add i32 %257, %254
  store i32 %258, i32* %256, align 4
  %259 = load %struct.gr_info*, %struct.gr_info** %18, align 4
  %260 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %259, i32 0, i32 3
  %261 = load i32, i32* %260, align 4
  %262 = icmp ult i32 %261, 256
  br i1 %262, label %264, label %263

; <label>:263:                                    ; preds = %248
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6.217, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 891, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__.outer_loop, i32 0, i32 0))
  br label %264

; <label>:264:                                    ; preds = %263, %248
  %265 = phi i1 [ true, %248 ], [ false, %263 ]
  %266 = zext i1 %265 to i32
  %267 = load i32, i32* %36, align 4
  %268 = sitofp i32 %267 to double
  %269 = load double*, double** %14, align 4
  %270 = getelementptr inbounds double, double* %269, i32 0
  store double %268, double* %270, align 8
  %271 = load double, double* %37, align 8
  %272 = load double*, double** %14, align 4
  %273 = getelementptr inbounds double, double* %272, i32 1
  store double %271, double* %273, align 8
  %274 = load double, double* %38, align 8
  %275 = load double*, double** %14, align 4
  %276 = getelementptr inbounds double, double* %275, i32 2
  store double %274, double* %276, align 8
  %277 = load double, double* %39, align 8
  %278 = load double*, double** %14, align 4
  %279 = getelementptr inbounds double, double* %278, i32 3
  store double %277, double* %279, align 8
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @calc_noise1(double*, i32*, %struct.gr_info*, [21 x double]*, [21 x double]*, %struct.III_psy_xmin*, %struct.III_scalefac_t*, double*, double*, double*) #0 {
  %11 = alloca double*, align 4
  %12 = alloca i32*, align 4
  %13 = alloca %struct.gr_info*, align 4
  %14 = alloca [21 x double]*, align 4
  %15 = alloca [21 x double]*, align 4
  %16 = alloca %struct.III_psy_xmin*, align 4
  %17 = alloca %struct.III_scalefac_t*, align 4
  %18 = alloca double*, align 4
  %19 = alloca double*, align 4
  %20 = alloca double*, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca double, align 8
  %28 = alloca double, align 8
  %29 = alloca double, align 8
  %30 = alloca i32, align 4
  %31 = alloca double, align 8
  %32 = alloca double, align 8
  %33 = alloca i32, align 4
  %34 = alloca double, align 8
  %35 = alloca i32, align 4
  %36 = alloca double, align 8
  store double* %0, double** %11, align 4
  store i32* %1, i32** %12, align 4
  store %struct.gr_info* %2, %struct.gr_info** %13, align 4
  store [21 x double]* %3, [21 x double]** %14, align 4
  store [21 x double]* %4, [21 x double]** %15, align 4
  store %struct.III_psy_xmin* %5, %struct.III_psy_xmin** %16, align 4
  store %struct.III_scalefac_t* %6, %struct.III_scalefac_t** %17, align 4
  store double* %7, double** %18, align 4
  store double* %8, double** %19, align 4
  store double* %9, double** %20, align 4
  store i32 0, i32* %25, align 4
  store i32 0, i32* %30, align 4
  %37 = load double*, double** %18, align 4
  store double 0.000000e+00, double* %37, align 8
  %38 = load double*, double** %19, align 4
  store double 0.000000e+00, double* %38, align 8
  %39 = load double*, double** %20, align 4
  store double -9.990000e+02, double* %39, align 8
  store i32 0, i32* %26, align 4
  br label %40

; <label>:40:                                     ; preds = %197, %10
  %41 = load i32, i32* %26, align 4
  %42 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %43 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %42, i32 0, i32 16
  %44 = load i32, i32* %43, align 4
  %45 = icmp ult i32 %41, %44
  br i1 %45, label %46, label %200

; <label>:46:                                     ; preds = %40
  %47 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %17, align 4
  %48 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %47, i32 0, i32 0
  %49 = load i32, i32* %26, align 4
  %50 = getelementptr inbounds [22 x i32], [22 x i32]* %48, i32 0, i32 %49
  %51 = load i32, i32* %50, align 4
  store i32 %51, i32* %33, align 4
  %52 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %53 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %52, i32 0, i32 12
  %54 = load i32, i32* %53, align 4
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %62

; <label>:56:                                     ; preds = %46
  %57 = load i32, i32* %26, align 4
  %58 = getelementptr inbounds [21 x i32], [21 x i32]* @pretab, i32 0, i32 %57
  %59 = load i32, i32* %58, align 4
  %60 = load i32, i32* %33, align 4
  %61 = add nsw i32 %60, %59
  store i32 %61, i32* %33, align 4
  br label %62

; <label>:62:                                     ; preds = %56, %46
  %63 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %64 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %63, i32 0, i32 3
  %65 = load i32, i32* %64, align 4
  %66 = load i32, i32* %33, align 4
  %67 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %68 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %67, i32 0, i32 13
  %69 = load i32, i32* %68, align 4
  %70 = add i32 %69, 1
  %71 = shl i32 %66, %70
  %72 = sub i32 %65, %71
  store i32 %72, i32* %33, align 4
  %73 = load i32, i32* %33, align 4
  %74 = icmp slt i32 %73, 256
  br i1 %74, label %76, label %75

; <label>:75:                                     ; preds = %62
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7.218, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 945, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.calc_noise1, i32 0, i32 0))
  br label %76

; <label>:76:                                     ; preds = %75, %62
  %77 = phi i1 [ true, %62 ], [ false, %75 ]
  %78 = zext i1 %77 to i32
  %79 = load i32, i32* %33, align 4
  %80 = icmp sge i32 %79, 0
  br i1 %80, label %82, label %81

; <label>:81:                                     ; preds = %76
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.219, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 946, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.calc_noise1, i32 0, i32 0))
  br label %82

; <label>:82:                                     ; preds = %81, %76
  %83 = phi i1 [ true, %76 ], [ false, %81 ]
  %84 = zext i1 %83 to i32
  %85 = load i32, i32* %33, align 4
  %86 = getelementptr inbounds [256 x double], [256 x double]* @pow20, i32 0, i32 %85
  %87 = load double, double* %86, align 8
  store double %87, double* %32, align 8
  %88 = load i32, i32* %26, align 4
  %89 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %88
  %90 = load i32, i32* %89, align 4
  store i32 %90, i32* %21, align 4
  %91 = load i32, i32* %26, align 4
  %92 = add i32 %91, 1
  %93 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %92
  %94 = load i32, i32* %93, align 4
  store i32 %94, i32* %22, align 4
  %95 = load i32, i32* %22, align 4
  %96 = load i32, i32* %21, align 4
  %97 = sub nsw i32 %95, %96
  %98 = sitofp i32 %97 to double
  store double %98, double* %29, align 8
  store double 0.000000e+00, double* %27, align 8
  %99 = load i32, i32* %21, align 4
  store i32 %99, i32* %23, align 4
  br label %100

; <label>:100:                                    ; preds = %124, %82
  %101 = load i32, i32* %23, align 4
  %102 = load i32, i32* %22, align 4
  %103 = icmp slt i32 %101, %102
  br i1 %103, label %104, label %127

; <label>:104:                                    ; preds = %100
  %105 = load double*, double** %11, align 4
  %106 = load i32, i32* %23, align 4
  %107 = getelementptr inbounds double, double* %105, i32 %106
  %108 = load double, double* %107, align 8
  %109 = call arm_aapcscc double @fabs(double %108) #9
  %110 = load i32*, i32** %12, align 4
  %111 = load i32, i32* %23, align 4
  %112 = getelementptr inbounds i32, i32* %110, i32 %111
  %113 = load i32, i32* %112, align 4
  %114 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %113
  %115 = load double, double* %114, align 8
  %116 = load double, double* %32, align 8
  %117 = fmul double %115, %116
  %118 = fsub double %109, %117
  store double %118, double* %34, align 8
  %119 = load double, double* %34, align 8
  %120 = load double, double* %34, align 8
  %121 = fmul double %119, %120
  %122 = load double, double* %27, align 8
  %123 = fadd double %122, %121
  store double %123, double* %27, align 8
  br label %124

; <label>:124:                                    ; preds = %104
  %125 = load i32, i32* %23, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %23, align 4
  br label %100

; <label>:127:                                    ; preds = %100
  %128 = load double, double* %27, align 8
  %129 = load double, double* %29, align 8
  %130 = fdiv double %128, %129
  %131 = load [21 x double]*, [21 x double]** %14, align 4
  %132 = getelementptr inbounds [21 x double], [21 x double]* %131, i32 0
  %133 = load i32, i32* %26, align 4
  %134 = getelementptr inbounds [21 x double], [21 x double]* %132, i32 0, i32 %133
  store double %130, double* %134, align 8
  %135 = load [21 x double]*, [21 x double]** %14, align 4
  %136 = getelementptr inbounds [21 x double], [21 x double]* %135, i32 0
  %137 = load i32, i32* %26, align 4
  %138 = getelementptr inbounds [21 x double], [21 x double]* %136, i32 0, i32 %137
  %139 = load double, double* %138, align 8
  %140 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %16, align 4
  %141 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %140, i32 0, i32 0
  %142 = load i32, i32* %26, align 4
  %143 = getelementptr inbounds [22 x double], [22 x double]* %141, i32 0, i32 %142
  %144 = load double, double* %143, align 8
  %145 = fdiv double %139, %144
  %146 = fcmp ogt double 1.000000e-03, %145
  br i1 %146, label %147, label %148

; <label>:147:                                    ; preds = %127
  br label %160

; <label>:148:                                    ; preds = %127
  %149 = load [21 x double]*, [21 x double]** %14, align 4
  %150 = getelementptr inbounds [21 x double], [21 x double]* %149, i32 0
  %151 = load i32, i32* %26, align 4
  %152 = getelementptr inbounds [21 x double], [21 x double]* %150, i32 0, i32 %151
  %153 = load double, double* %152, align 8
  %154 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %16, align 4
  %155 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %154, i32 0, i32 0
  %156 = load i32, i32* %26, align 4
  %157 = getelementptr inbounds [22 x double], [22 x double]* %155, i32 0, i32 %156
  %158 = load double, double* %157, align 8
  %159 = fdiv double %153, %158
  br label %160

; <label>:160:                                    ; preds = %148, %147
  %161 = phi double [ 1.000000e-03, %147 ], [ %159, %148 ]
  %162 = call arm_aapcscc double @log10(double %161) #7
  %163 = fmul double 1.000000e+01, %162
  store double %163, double* %31, align 8
  %164 = load double, double* %31, align 8
  %165 = load [21 x double]*, [21 x double]** %15, align 4
  %166 = getelementptr inbounds [21 x double], [21 x double]* %165, i32 0
  %167 = load i32, i32* %26, align 4
  %168 = getelementptr inbounds [21 x double], [21 x double]* %166, i32 0, i32 %167
  store double %164, double* %168, align 8
  %169 = load double, double* %31, align 8
  %170 = fcmp ogt double %169, 0.000000e+00
  br i1 %170, label %171, label %178

; <label>:171:                                    ; preds = %160
  %172 = load i32, i32* %25, align 4
  %173 = add nsw i32 %172, 1
  store i32 %173, i32* %25, align 4
  %174 = load double, double* %31, align 8
  %175 = load double*, double** %18, align 4
  %176 = load double, double* %175, align 8
  %177 = fadd double %176, %174
  store double %177, double* %175, align 8
  br label %178

; <label>:178:                                    ; preds = %171, %160
  %179 = load double, double* %31, align 8
  %180 = load double*, double** %19, align 4
  %181 = load double, double* %180, align 8
  %182 = fadd double %181, %179
  store double %182, double* %180, align 8
  %183 = load double*, double** %20, align 4
  %184 = load double, double* %183, align 8
  %185 = load double, double* %31, align 8
  %186 = fcmp ogt double %184, %185
  br i1 %186, label %187, label %190

; <label>:187:                                    ; preds = %178
  %188 = load double*, double** %20, align 4
  %189 = load double, double* %188, align 8
  br label %192

; <label>:190:                                    ; preds = %178
  %191 = load double, double* %31, align 8
  br label %192

; <label>:192:                                    ; preds = %190, %187
  %193 = phi double [ %189, %187 ], [ %191, %190 ]
  %194 = load double*, double** %20, align 4
  store double %193, double* %194, align 8
  %195 = load i32, i32* %30, align 4
  %196 = add nsw i32 %195, 1
  store i32 %196, i32* %30, align 4
  br label %197

; <label>:197:                                    ; preds = %192
  %198 = load i32, i32* %26, align 4
  %199 = add i32 %198, 1
  store i32 %199, i32* %26, align 4
  br label %40

; <label>:200:                                    ; preds = %40
  store i32 0, i32* %24, align 4
  br label %201

; <label>:201:                                    ; preds = %382, %200
  %202 = load i32, i32* %24, align 4
  %203 = icmp slt i32 %202, 3
  br i1 %203, label %204, label %385

; <label>:204:                                    ; preds = %201
  %205 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %206 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %205, i32 0, i32 17
  %207 = load i32, i32* %206, align 4
  store i32 %207, i32* %26, align 4
  br label %208

; <label>:208:                                    ; preds = %378, %204
  %209 = load i32, i32* %26, align 4
  %210 = icmp ult i32 %209, 12
  br i1 %210, label %211, label %381

; <label>:211:                                    ; preds = %208
  %212 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %17, align 4
  %213 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %212, i32 0, i32 1
  %214 = load i32, i32* %26, align 4
  %215 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %213, i32 0, i32 %214
  %216 = load i32, i32* %24, align 4
  %217 = getelementptr inbounds [3 x i32], [3 x i32]* %215, i32 0, i32 %216
  %218 = load i32, i32* %217, align 4
  %219 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %220 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %219, i32 0, i32 13
  %221 = load i32, i32* %220, align 4
  %222 = add i32 %221, 1
  %223 = shl i32 %218, %222
  %224 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %225 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %224, i32 0, i32 9
  %226 = load i32, i32* %24, align 4
  %227 = getelementptr inbounds [3 x i32], [3 x i32]* %225, i32 0, i32 %226
  %228 = load i32, i32* %227, align 4
  %229 = mul nsw i32 %228, 8
  %230 = add nsw i32 %223, %229
  store i32 %230, i32* %35, align 4
  %231 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %232 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %231, i32 0, i32 3
  %233 = load i32, i32* %232, align 4
  %234 = load i32, i32* %35, align 4
  %235 = sub i32 %233, %234
  store i32 %235, i32* %35, align 4
  %236 = load i32, i32* %35, align 4
  %237 = icmp slt i32 %236, 256
  br i1 %237, label %239, label %238

; <label>:238:                                    ; preds = %211
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7.218, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 1000, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.calc_noise1, i32 0, i32 0))
  br label %239

; <label>:239:                                    ; preds = %238, %211
  %240 = phi i1 [ true, %211 ], [ false, %238 ]
  %241 = zext i1 %240 to i32
  %242 = load i32, i32* %35, align 4
  %243 = icmp sge i32 %242, 0
  br i1 %243, label %245, label %244

; <label>:244:                                    ; preds = %239
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.219, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 1001, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.calc_noise1, i32 0, i32 0))
  br label %245

; <label>:245:                                    ; preds = %244, %239
  %246 = phi i1 [ true, %239 ], [ false, %244 ]
  %247 = zext i1 %246 to i32
  %248 = load i32, i32* %35, align 4
  %249 = getelementptr inbounds [256 x double], [256 x double]* @pow20, i32 0, i32 %248
  %250 = load double, double* %249, align 8
  store double %250, double* %28, align 8
  %251 = load i32, i32* %26, align 4
  %252 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %251
  %253 = load i32, i32* %252, align 4
  store i32 %253, i32* %21, align 4
  %254 = load i32, i32* %26, align 4
  %255 = add i32 %254, 1
  %256 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %255
  %257 = load i32, i32* %256, align 4
  store i32 %257, i32* %22, align 4
  %258 = load i32, i32* %22, align 4
  %259 = load i32, i32* %21, align 4
  %260 = sub nsw i32 %258, %259
  %261 = sitofp i32 %260 to double
  store double %261, double* %29, align 8
  store double 0.000000e+00, double* %27, align 8
  %262 = load i32, i32* %21, align 4
  store i32 %262, i32* %23, align 4
  br label %263

; <label>:263:                                    ; preds = %293, %245
  %264 = load i32, i32* %23, align 4
  %265 = load i32, i32* %22, align 4
  %266 = icmp slt i32 %264, %265
  br i1 %266, label %267, label %296

; <label>:267:                                    ; preds = %263
  %268 = load double*, double** %11, align 4
  %269 = load i32, i32* %23, align 4
  %270 = mul nsw i32 %269, 3
  %271 = load i32, i32* %24, align 4
  %272 = add nsw i32 %270, %271
  %273 = getelementptr inbounds double, double* %268, i32 %272
  %274 = load double, double* %273, align 8
  %275 = call arm_aapcscc double @fabs(double %274) #9
  %276 = load i32*, i32** %12, align 4
  %277 = load i32, i32* %23, align 4
  %278 = mul nsw i32 %277, 3
  %279 = load i32, i32* %24, align 4
  %280 = add nsw i32 %278, %279
  %281 = getelementptr inbounds i32, i32* %276, i32 %280
  %282 = load i32, i32* %281, align 4
  %283 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %282
  %284 = load double, double* %283, align 8
  %285 = load double, double* %28, align 8
  %286 = fmul double %284, %285
  %287 = fsub double %275, %286
  store double %287, double* %36, align 8
  %288 = load double, double* %36, align 8
  %289 = load double, double* %36, align 8
  %290 = fmul double %288, %289
  %291 = load double, double* %27, align 8
  %292 = fadd double %291, %290
  store double %292, double* %27, align 8
  br label %293

; <label>:293:                                    ; preds = %267
  %294 = load i32, i32* %23, align 4
  %295 = add nsw i32 %294, 1
  store i32 %295, i32* %23, align 4
  br label %263

; <label>:296:                                    ; preds = %263
  %297 = load double, double* %27, align 8
  %298 = load double, double* %29, align 8
  %299 = fdiv double %297, %298
  %300 = load [21 x double]*, [21 x double]** %14, align 4
  %301 = load i32, i32* %24, align 4
  %302 = add nsw i32 %301, 1
  %303 = getelementptr inbounds [21 x double], [21 x double]* %300, i32 %302
  %304 = load i32, i32* %26, align 4
  %305 = getelementptr inbounds [21 x double], [21 x double]* %303, i32 0, i32 %304
  store double %299, double* %305, align 8
  %306 = load [21 x double]*, [21 x double]** %14, align 4
  %307 = load i32, i32* %24, align 4
  %308 = add nsw i32 %307, 1
  %309 = getelementptr inbounds [21 x double], [21 x double]* %306, i32 %308
  %310 = load i32, i32* %26, align 4
  %311 = getelementptr inbounds [21 x double], [21 x double]* %309, i32 0, i32 %310
  %312 = load double, double* %311, align 8
  %313 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %16, align 4
  %314 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %313, i32 0, i32 1
  %315 = load i32, i32* %26, align 4
  %316 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %314, i32 0, i32 %315
  %317 = load i32, i32* %24, align 4
  %318 = getelementptr inbounds [3 x double], [3 x double]* %316, i32 0, i32 %317
  %319 = load double, double* %318, align 8
  %320 = fdiv double %312, %319
  %321 = fcmp ogt double 1.000000e-03, %320
  br i1 %321, label %322, label %323

; <label>:322:                                    ; preds = %296
  br label %339

; <label>:323:                                    ; preds = %296
  %324 = load [21 x double]*, [21 x double]** %14, align 4
  %325 = load i32, i32* %24, align 4
  %326 = add nsw i32 %325, 1
  %327 = getelementptr inbounds [21 x double], [21 x double]* %324, i32 %326
  %328 = load i32, i32* %26, align 4
  %329 = getelementptr inbounds [21 x double], [21 x double]* %327, i32 0, i32 %328
  %330 = load double, double* %329, align 8
  %331 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %16, align 4
  %332 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %331, i32 0, i32 1
  %333 = load i32, i32* %26, align 4
  %334 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %332, i32 0, i32 %333
  %335 = load i32, i32* %24, align 4
  %336 = getelementptr inbounds [3 x double], [3 x double]* %334, i32 0, i32 %335
  %337 = load double, double* %336, align 8
  %338 = fdiv double %330, %337
  br label %339

; <label>:339:                                    ; preds = %323, %322
  %340 = phi double [ 1.000000e-03, %322 ], [ %338, %323 ]
  %341 = call arm_aapcscc double @log10(double %340) #7
  %342 = fmul double 1.000000e+01, %341
  store double %342, double* %31, align 8
  %343 = load double, double* %31, align 8
  %344 = load [21 x double]*, [21 x double]** %15, align 4
  %345 = load i32, i32* %24, align 4
  %346 = add nsw i32 %345, 1
  %347 = getelementptr inbounds [21 x double], [21 x double]* %344, i32 %346
  %348 = load i32, i32* %26, align 4
  %349 = getelementptr inbounds [21 x double], [21 x double]* %347, i32 0, i32 %348
  store double %343, double* %349, align 8
  %350 = load double, double* %31, align 8
  %351 = fcmp ogt double %350, 0.000000e+00
  br i1 %351, label %352, label %359

; <label>:352:                                    ; preds = %339
  %353 = load i32, i32* %25, align 4
  %354 = add nsw i32 %353, 1
  store i32 %354, i32* %25, align 4
  %355 = load double, double* %31, align 8
  %356 = load double*, double** %18, align 4
  %357 = load double, double* %356, align 8
  %358 = fadd double %357, %355
  store double %358, double* %356, align 8
  br label %359

; <label>:359:                                    ; preds = %352, %339
  %360 = load double, double* %31, align 8
  %361 = load double*, double** %19, align 4
  %362 = load double, double* %361, align 8
  %363 = fadd double %362, %360
  store double %363, double* %361, align 8
  %364 = load double*, double** %20, align 4
  %365 = load double, double* %364, align 8
  %366 = load double, double* %31, align 8
  %367 = fcmp ogt double %365, %366
  br i1 %367, label %368, label %371

; <label>:368:                                    ; preds = %359
  %369 = load double*, double** %20, align 4
  %370 = load double, double* %369, align 8
  br label %373

; <label>:371:                                    ; preds = %359
  %372 = load double, double* %31, align 8
  br label %373

; <label>:373:                                    ; preds = %371, %368
  %374 = phi double [ %370, %368 ], [ %372, %371 ]
  %375 = load double*, double** %20, align 4
  store double %374, double* %375, align 8
  %376 = load i32, i32* %30, align 4
  %377 = add nsw i32 %376, 1
  store i32 %377, i32* %30, align 4
  br label %378

; <label>:378:                                    ; preds = %373
  %379 = load i32, i32* %26, align 4
  %380 = add i32 %379, 1
  store i32 %380, i32* %26, align 4
  br label %208

; <label>:381:                                    ; preds = %208
  br label %382

; <label>:382:                                    ; preds = %381
  %383 = load i32, i32* %24, align 4
  %384 = add nsw i32 %383, 1
  store i32 %384, i32* %24, align 4
  br label %201

; <label>:385:                                    ; preds = %201
  %386 = load i32, i32* %30, align 4
  %387 = icmp sgt i32 %386, 1
  br i1 %387, label %388, label %394

; <label>:388:                                    ; preds = %385
  %389 = load i32, i32* %30, align 4
  %390 = sitofp i32 %389 to double
  %391 = load double*, double** %19, align 4
  %392 = load double, double* %391, align 8
  %393 = fdiv double %392, %390
  store double %393, double* %391, align 8
  br label %394

; <label>:394:                                    ; preds = %388, %385
  %395 = load i32, i32* %25, align 4
  %396 = icmp sgt i32 %395, 1
  br i1 %396, label %397, label %403

; <label>:397:                                    ; preds = %394
  %398 = load i32, i32* %25, align 4
  %399 = sitofp i32 %398 to double
  %400 = load double*, double** %18, align 4
  %401 = load double, double* %400, align 8
  %402 = fdiv double %401, %399
  store double %402, double* %400, align 8
  br label %403

; <label>:403:                                    ; preds = %397, %394
  %404 = load i32, i32* %25, align 4
  ret i32 %404
}

; Function Attrs: nounwind
define arm_aapcscc i32 @quant_compare(i32, i32, double, double, double, i32, double, double, double) #0 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca i32, align 4
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  %19 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  store i32 %1, i32* %11, align 4
  store double %2, double* %12, align 8
  store double %3, double* %13, align 8
  store double %4, double* %14, align 8
  store i32 %5, i32* %15, align 4
  store double %6, double* %16, align 8
  store double %7, double* %17, align 8
  store double %8, double* %18, align 8
  store i32 0, i32* %19, align 4
  %20 = load i32, i32* %10, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %39

; <label>:22:                                     ; preds = %9
  %23 = load i32, i32* %15, align 4
  %24 = load i32, i32* %11, align 4
  %25 = icmp slt i32 %23, %24
  br i1 %25, label %36, label %26

; <label>:26:                                     ; preds = %22
  %27 = load i32, i32* %15, align 4
  %28 = load i32, i32* %11, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %30, label %34

; <label>:30:                                     ; preds = %26
  %31 = load double, double* %17, align 8
  %32 = load double, double* %13, align 8
  %33 = fcmp ole double %31, %32
  br label %34

; <label>:34:                                     ; preds = %30, %26
  %35 = phi i1 [ false, %26 ], [ %33, %30 ]
  br label %36

; <label>:36:                                     ; preds = %34, %22
  %37 = phi i1 [ true, %22 ], [ %35, %34 ]
  %38 = zext i1 %37 to i32
  store i32 %38, i32* %19, align 4
  br label %39

; <label>:39:                                     ; preds = %36, %9
  %40 = load i32, i32* %10, align 4
  %41 = icmp eq i32 %40, 1
  br i1 %41, label %42, label %47

; <label>:42:                                     ; preds = %39
  %43 = load double, double* %18, align 8
  %44 = load double, double* %14, align 8
  %45 = fcmp olt double %43, %44
  %46 = zext i1 %45 to i32
  store i32 %46, i32* %19, align 4
  br label %47

; <label>:47:                                     ; preds = %42, %39
  %48 = load i32, i32* %10, align 4
  %49 = icmp eq i32 %48, 2
  br i1 %49, label %50, label %55

; <label>:50:                                     ; preds = %47
  %51 = load double, double* %16, align 8
  %52 = load double, double* %12, align 8
  %53 = fcmp olt double %51, %52
  %54 = zext i1 %53 to i32
  store i32 %54, i32* %19, align 4
  br label %55

; <label>:55:                                     ; preds = %50, %47
  %56 = load i32, i32* %10, align 4
  %57 = icmp eq i32 %56, 3
  br i1 %57, label %58, label %70

; <label>:58:                                     ; preds = %55
  %59 = load double, double* %16, align 8
  %60 = load double, double* %12, align 8
  %61 = fcmp olt double %59, %60
  br i1 %61, label %62, label %67

; <label>:62:                                     ; preds = %58
  %63 = load double, double* %18, align 8
  %64 = load double, double* %14, align 8
  %65 = fadd double %64, 2.000000e+00
  %66 = fcmp olt double %63, %65
  br label %67

; <label>:67:                                     ; preds = %62, %58
  %68 = phi i1 [ false, %58 ], [ %66, %62 ]
  %69 = zext i1 %68 to i32
  store i32 %69, i32* %19, align 4
  br label %70

; <label>:70:                                     ; preds = %67, %55
  %71 = load i32, i32* %10, align 4
  %72 = icmp eq i32 %71, 4
  br i1 %72, label %73, label %158

; <label>:73:                                     ; preds = %70
  %74 = load double, double* %18, align 8
  %75 = fcmp oge double 0.000000e+00, %74
  br i1 %75, label %76, label %79

; <label>:76:                                     ; preds = %73
  %77 = load double, double* %14, align 8
  %78 = fcmp ogt double %77, 2.000000e+00
  br i1 %78, label %155, label %79

; <label>:79:                                     ; preds = %76, %73
  %80 = load double, double* %18, align 8
  %81 = fcmp oge double 0.000000e+00, %80
  br i1 %81, label %82, label %94

; <label>:82:                                     ; preds = %79
  %83 = load double, double* %14, align 8
  %84 = fcmp olt double %83, 0.000000e+00
  br i1 %84, label %85, label %94

; <label>:85:                                     ; preds = %82
  %86 = load double, double* %14, align 8
  %87 = fadd double %86, 2.000000e+00
  %88 = load double, double* %18, align 8
  %89 = fcmp ogt double %87, %88
  br i1 %89, label %90, label %94

; <label>:90:                                     ; preds = %85
  %91 = load double, double* %16, align 8
  %92 = load double, double* %12, align 8
  %93 = fcmp olt double %91, %92
  br i1 %93, label %155, label %94

; <label>:94:                                     ; preds = %90, %85, %82, %79
  %95 = load double, double* %18, align 8
  %96 = fcmp oge double 0.000000e+00, %95
  br i1 %96, label %97, label %111

; <label>:97:                                     ; preds = %94
  %98 = load double, double* %14, align 8
  %99 = fcmp ogt double %98, 0.000000e+00
  br i1 %99, label %100, label %111

; <label>:100:                                    ; preds = %97
  %101 = load double, double* %14, align 8
  %102 = fadd double %101, 2.000000e+00
  %103 = load double, double* %18, align 8
  %104 = fcmp ogt double %102, %103
  br i1 %104, label %105, label %111

; <label>:105:                                    ; preds = %100
  %106 = load double, double* %16, align 8
  %107 = load double, double* %12, align 8
  %108 = load double, double* %13, align 8
  %109 = fadd double %107, %108
  %110 = fcmp olt double %106, %109
  br i1 %110, label %155, label %111

; <label>:111:                                    ; preds = %105, %100, %97, %94
  %112 = load double, double* %18, align 8
  %113 = fcmp olt double 0.000000e+00, %112
  br i1 %113, label %114, label %130

; <label>:114:                                    ; preds = %111
  %115 = load double, double* %14, align 8
  %116 = fcmp ogt double %115, -5.000000e-01
  br i1 %116, label %117, label %130

; <label>:117:                                    ; preds = %114
  %118 = load double, double* %14, align 8
  %119 = fadd double %118, 1.000000e+00
  %120 = load double, double* %18, align 8
  %121 = fcmp ogt double %119, %120
  br i1 %121, label %122, label %130

; <label>:122:                                    ; preds = %117
  %123 = load double, double* %16, align 8
  %124 = load double, double* %17, align 8
  %125 = fadd double %123, %124
  %126 = load double, double* %12, align 8
  %127 = load double, double* %13, align 8
  %128 = fadd double %126, %127
  %129 = fcmp olt double %125, %128
  br i1 %129, label %155, label %130

; <label>:130:                                    ; preds = %122, %117, %114, %111
  %131 = load double, double* %18, align 8
  %132 = fcmp olt double 0.000000e+00, %131
  br i1 %132, label %133, label %153

; <label>:133:                                    ; preds = %130
  %134 = load double, double* %14, align 8
  %135 = fcmp ogt double %134, -1.000000e+00
  br i1 %135, label %136, label %153

; <label>:136:                                    ; preds = %133
  %137 = load double, double* %14, align 8
  %138 = fadd double %137, 1.500000e+00
  %139 = load double, double* %18, align 8
  %140 = fcmp ogt double %138, %139
  br i1 %140, label %141, label %153

; <label>:141:                                    ; preds = %136
  %142 = load double, double* %16, align 8
  %143 = load double, double* %17, align 8
  %144 = fadd double %142, %143
  %145 = load double, double* %17, align 8
  %146 = fadd double %144, %145
  %147 = load double, double* %12, align 8
  %148 = load double, double* %13, align 8
  %149 = fadd double %147, %148
  %150 = load double, double* %13, align 8
  %151 = fadd double %149, %150
  %152 = fcmp olt double %146, %151
  br label %153

; <label>:153:                                    ; preds = %141, %136, %133, %130
  %154 = phi i1 [ false, %136 ], [ false, %133 ], [ false, %130 ], [ %152, %141 ]
  br label %155

; <label>:155:                                    ; preds = %153, %122, %105, %90, %76
  %156 = phi i1 [ true, %122 ], [ true, %105 ], [ true, %90 ], [ true, %76 ], [ %154, %153 ]
  %157 = zext i1 %156 to i32
  store i32 %157, i32* %19, align 4
  br label %158

; <label>:158:                                    ; preds = %155, %70
  %159 = load i32, i32* %10, align 4
  %160 = icmp eq i32 %159, 5
  br i1 %160, label %161, label %178

; <label>:161:                                    ; preds = %158
  %162 = load double, double* %17, align 8
  %163 = load double, double* %13, align 8
  %164 = fcmp olt double %162, %163
  br i1 %164, label %175, label %165

; <label>:165:                                    ; preds = %161
  %166 = load double, double* %17, align 8
  %167 = load double, double* %13, align 8
  %168 = fcmp oeq double %166, %167
  br i1 %168, label %169, label %173

; <label>:169:                                    ; preds = %165
  %170 = load double, double* %16, align 8
  %171 = load double, double* %12, align 8
  %172 = fcmp olt double %170, %171
  br label %173

; <label>:173:                                    ; preds = %169, %165
  %174 = phi i1 [ false, %165 ], [ %172, %169 ]
  br label %175

; <label>:175:                                    ; preds = %173, %161
  %176 = phi i1 [ true, %161 ], [ %174, %173 ]
  %177 = zext i1 %176 to i32
  store i32 %177, i32* %19, align 4
  br label %178

; <label>:178:                                    ; preds = %175, %158
  %179 = load i32, i32* %10, align 4
  %180 = icmp eq i32 %179, 6
  br i1 %180, label %181, label %210

; <label>:181:                                    ; preds = %178
  %182 = load double, double* %17, align 8
  %183 = load double, double* %13, align 8
  %184 = fcmp olt double %182, %183
  br i1 %184, label %207, label %185

; <label>:185:                                    ; preds = %181
  %186 = load double, double* %17, align 8
  %187 = load double, double* %13, align 8
  %188 = fcmp oeq double %186, %187
  br i1 %188, label %189, label %205

; <label>:189:                                    ; preds = %185
  %190 = load double, double* %18, align 8
  %191 = load double, double* %14, align 8
  %192 = fcmp olt double %190, %191
  br i1 %192, label %203, label %193

; <label>:193:                                    ; preds = %189
  %194 = load double, double* %18, align 8
  %195 = load double, double* %14, align 8
  %196 = fcmp oeq double %194, %195
  br i1 %196, label %197, label %201

; <label>:197:                                    ; preds = %193
  %198 = load double, double* %16, align 8
  %199 = load double, double* %12, align 8
  %200 = fcmp ole double %198, %199
  br label %201

; <label>:201:                                    ; preds = %197, %193
  %202 = phi i1 [ false, %193 ], [ %200, %197 ]
  br label %203

; <label>:203:                                    ; preds = %201, %189
  %204 = phi i1 [ true, %189 ], [ %202, %201 ]
  br label %205

; <label>:205:                                    ; preds = %203, %185
  %206 = phi i1 [ false, %185 ], [ %204, %203 ]
  br label %207

; <label>:207:                                    ; preds = %205, %181
  %208 = phi i1 [ true, %181 ], [ %206, %205 ]
  %209 = zext i1 %208 to i32
  store i32 %209, i32* %19, align 4
  br label %210

; <label>:210:                                    ; preds = %207, %178
  %211 = load i32, i32* %19, align 4
  ret i32 %211
}

; Function Attrs: nounwind
define arm_aapcscc void @amp_scalefac_bands(double*, %struct.gr_info*, %struct.III_scalefac_t*, [21 x double]*) #0 {
  %5 = alloca double*, align 4
  %6 = alloca %struct.gr_info*, align 4
  %7 = alloca %struct.III_scalefac_t*, align 4
  %8 = alloca [21 x double]*, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  store double* %0, double** %5, align 4
  store %struct.gr_info* %1, %struct.gr_info** %6, align 4
  store %struct.III_scalefac_t* %2, %struct.III_scalefac_t** %7, align 4
  store [21 x double]* %3, [21 x double]** %8, align 4
  %16 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %17 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %16, i32 0, i32 13
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %4
  store double 0x3FF4BFDAD5362A27, double* %14, align 8
  br label %22

; <label>:21:                                     ; preds = %4
  store double 0x3FFAE89F995AD3AE, double* %14, align 8
  br label %22

; <label>:22:                                     ; preds = %21, %20
  store double -9.000000e+02, double* %15, align 8
  store i32 0, i32* %13, align 4
  br label %23

; <label>:23:                                     ; preds = %47, %22
  %24 = load i32, i32* %13, align 4
  %25 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %26 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %25, i32 0, i32 16
  %27 = load i32, i32* %26, align 4
  %28 = icmp ult i32 %24, %27
  br i1 %28, label %29, label %50

; <label>:29:                                     ; preds = %23
  %30 = load [21 x double]*, [21 x double]** %8, align 4
  %31 = getelementptr inbounds [21 x double], [21 x double]* %30, i32 0
  %32 = load i32, i32* %13, align 4
  %33 = getelementptr inbounds [21 x double], [21 x double]* %31, i32 0, i32 %32
  %34 = load double, double* %33, align 8
  %35 = load double, double* %15, align 8
  %36 = fcmp ogt double %34, %35
  br i1 %36, label %37, label %43

; <label>:37:                                     ; preds = %29
  %38 = load [21 x double]*, [21 x double]** %8, align 4
  %39 = getelementptr inbounds [21 x double], [21 x double]* %38, i32 0
  %40 = load i32, i32* %13, align 4
  %41 = getelementptr inbounds [21 x double], [21 x double]* %39, i32 0, i32 %40
  %42 = load double, double* %41, align 8
  br label %45

; <label>:43:                                     ; preds = %29
  %44 = load double, double* %15, align 8
  br label %45

; <label>:45:                                     ; preds = %43, %37
  %46 = phi double [ %42, %37 ], [ %44, %43 ]
  store double %46, double* %15, align 8
  br label %47

; <label>:47:                                     ; preds = %45
  %48 = load i32, i32* %13, align 4
  %49 = add i32 %48, 1
  store i32 %49, i32* %13, align 4
  br label %23

; <label>:50:                                     ; preds = %23
  %51 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %52 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %51, i32 0, i32 17
  %53 = load i32, i32* %52, align 4
  store i32 %53, i32* %13, align 4
  br label %54

; <label>:54:                                     ; preds = %87, %50
  %55 = load i32, i32* %13, align 4
  %56 = icmp ult i32 %55, 12
  br i1 %56, label %57, label %90

; <label>:57:                                     ; preds = %54
  store i32 0, i32* %12, align 4
  br label %58

; <label>:58:                                     ; preds = %83, %57
  %59 = load i32, i32* %12, align 4
  %60 = icmp slt i32 %59, 3
  br i1 %60, label %61, label %86

; <label>:61:                                     ; preds = %58
  %62 = load [21 x double]*, [21 x double]** %8, align 4
  %63 = load i32, i32* %12, align 4
  %64 = add nsw i32 %63, 1
  %65 = getelementptr inbounds [21 x double], [21 x double]* %62, i32 %64
  %66 = load i32, i32* %13, align 4
  %67 = getelementptr inbounds [21 x double], [21 x double]* %65, i32 0, i32 %66
  %68 = load double, double* %67, align 8
  %69 = load double, double* %15, align 8
  %70 = fcmp ogt double %68, %69
  br i1 %70, label %71, label %79

; <label>:71:                                     ; preds = %61
  %72 = load [21 x double]*, [21 x double]** %8, align 4
  %73 = load i32, i32* %12, align 4
  %74 = add nsw i32 %73, 1
  %75 = getelementptr inbounds [21 x double], [21 x double]* %72, i32 %74
  %76 = load i32, i32* %13, align 4
  %77 = getelementptr inbounds [21 x double], [21 x double]* %75, i32 0, i32 %76
  %78 = load double, double* %77, align 8
  br label %81

; <label>:79:                                     ; preds = %61
  %80 = load double, double* %15, align 8
  br label %81

; <label>:81:                                     ; preds = %79, %71
  %82 = phi double [ %78, %71 ], [ %80, %79 ]
  store double %82, double* %15, align 8
  br label %83

; <label>:83:                                     ; preds = %81
  %84 = load i32, i32* %12, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %12, align 4
  br label %58

; <label>:86:                                     ; preds = %58
  br label %87

; <label>:87:                                     ; preds = %86
  %88 = load i32, i32* %13, align 4
  %89 = add i32 %88, 1
  store i32 %89, i32* %13, align 4
  br label %54

; <label>:90:                                     ; preds = %54
  %91 = load double, double* %15, align 8
  %92 = fmul double %91, 1.050000e+00
  %93 = fcmp olt double %92, 0.000000e+00
  br i1 %93, label %94, label %97

; <label>:94:                                     ; preds = %90
  %95 = load double, double* %15, align 8
  %96 = fmul double %95, 1.050000e+00
  br label %98

; <label>:97:                                     ; preds = %90
  br label %98

; <label>:98:                                     ; preds = %97, %94
  %99 = phi double [ %96, %94 ], [ 0.000000e+00, %97 ]
  store double %99, double* %15, align 8
  store i32 0, i32* %13, align 4
  br label %100

; <label>:100:                                    ; preds = %145, %98
  %101 = load i32, i32* %13, align 4
  %102 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %103 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %102, i32 0, i32 16
  %104 = load i32, i32* %103, align 4
  %105 = icmp ult i32 %101, %104
  br i1 %105, label %106, label %148

; <label>:106:                                    ; preds = %100
  %107 = load [21 x double]*, [21 x double]** %8, align 4
  %108 = getelementptr inbounds [21 x double], [21 x double]* %107, i32 0
  %109 = load i32, i32* %13, align 4
  %110 = getelementptr inbounds [21 x double], [21 x double]* %108, i32 0, i32 %109
  %111 = load double, double* %110, align 8
  %112 = load double, double* %15, align 8
  %113 = fcmp ogt double %111, %112
  br i1 %113, label %114, label %144

; <label>:114:                                    ; preds = %106
  %115 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %7, align 4
  %116 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %115, i32 0, i32 0
  %117 = load i32, i32* %13, align 4
  %118 = getelementptr inbounds [22 x i32], [22 x i32]* %116, i32 0, i32 %117
  %119 = load i32, i32* %118, align 4
  %120 = add nsw i32 %119, 1
  store i32 %120, i32* %118, align 4
  %121 = load i32, i32* %13, align 4
  %122 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %121
  %123 = load i32, i32* %122, align 4
  store i32 %123, i32* %9, align 4
  %124 = load i32, i32* %13, align 4
  %125 = add i32 %124, 1
  %126 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %125
  %127 = load i32, i32* %126, align 4
  store i32 %127, i32* %10, align 4
  %128 = load i32, i32* %9, align 4
  store i32 %128, i32* %11, align 4
  br label %129

; <label>:129:                                    ; preds = %140, %114
  %130 = load i32, i32* %11, align 4
  %131 = load i32, i32* %10, align 4
  %132 = icmp slt i32 %130, %131
  br i1 %132, label %133, label %143

; <label>:133:                                    ; preds = %129
  %134 = load double, double* %14, align 8
  %135 = load double*, double** %5, align 4
  %136 = load i32, i32* %11, align 4
  %137 = getelementptr inbounds double, double* %135, i32 %136
  %138 = load double, double* %137, align 8
  %139 = fmul double %138, %134
  store double %139, double* %137, align 8
  br label %140

; <label>:140:                                    ; preds = %133
  %141 = load i32, i32* %11, align 4
  %142 = add nsw i32 %141, 1
  store i32 %142, i32* %11, align 4
  br label %129

; <label>:143:                                    ; preds = %129
  br label %144

; <label>:144:                                    ; preds = %143, %106
  br label %145

; <label>:145:                                    ; preds = %144
  %146 = load i32, i32* %13, align 4
  %147 = add i32 %146, 1
  store i32 %147, i32* %13, align 4
  br label %100

; <label>:148:                                    ; preds = %100
  store i32 0, i32* %12, align 4
  br label %149

; <label>:149:                                    ; preds = %209, %148
  %150 = load i32, i32* %12, align 4
  %151 = icmp slt i32 %150, 3
  br i1 %151, label %152, label %212

; <label>:152:                                    ; preds = %149
  %153 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %154 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %153, i32 0, i32 17
  %155 = load i32, i32* %154, align 4
  store i32 %155, i32* %13, align 4
  br label %156

; <label>:156:                                    ; preds = %205, %152
  %157 = load i32, i32* %13, align 4
  %158 = icmp ult i32 %157, 12
  br i1 %158, label %159, label %208

; <label>:159:                                    ; preds = %156
  %160 = load [21 x double]*, [21 x double]** %8, align 4
  %161 = load i32, i32* %12, align 4
  %162 = add nsw i32 %161, 1
  %163 = getelementptr inbounds [21 x double], [21 x double]* %160, i32 %162
  %164 = load i32, i32* %13, align 4
  %165 = getelementptr inbounds [21 x double], [21 x double]* %163, i32 0, i32 %164
  %166 = load double, double* %165, align 8
  %167 = load double, double* %15, align 8
  %168 = fcmp ogt double %166, %167
  br i1 %168, label %169, label %204

; <label>:169:                                    ; preds = %159
  %170 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %7, align 4
  %171 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %170, i32 0, i32 1
  %172 = load i32, i32* %13, align 4
  %173 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %171, i32 0, i32 %172
  %174 = load i32, i32* %12, align 4
  %175 = getelementptr inbounds [3 x i32], [3 x i32]* %173, i32 0, i32 %174
  %176 = load i32, i32* %175, align 4
  %177 = add nsw i32 %176, 1
  store i32 %177, i32* %175, align 4
  %178 = load i32, i32* %13, align 4
  %179 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %178
  %180 = load i32, i32* %179, align 4
  store i32 %180, i32* %9, align 4
  %181 = load i32, i32* %13, align 4
  %182 = add i32 %181, 1
  %183 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %182
  %184 = load i32, i32* %183, align 4
  store i32 %184, i32* %10, align 4
  %185 = load i32, i32* %9, align 4
  store i32 %185, i32* %11, align 4
  br label %186

; <label>:186:                                    ; preds = %200, %169
  %187 = load i32, i32* %11, align 4
  %188 = load i32, i32* %10, align 4
  %189 = icmp slt i32 %187, %188
  br i1 %189, label %190, label %203

; <label>:190:                                    ; preds = %186
  %191 = load double, double* %14, align 8
  %192 = load double*, double** %5, align 4
  %193 = load i32, i32* %11, align 4
  %194 = mul nsw i32 %193, 3
  %195 = load i32, i32* %12, align 4
  %196 = add nsw i32 %194, %195
  %197 = getelementptr inbounds double, double* %192, i32 %196
  %198 = load double, double* %197, align 8
  %199 = fmul double %198, %191
  store double %199, double* %197, align 8
  br label %200

; <label>:200:                                    ; preds = %190
  %201 = load i32, i32* %11, align 4
  %202 = add nsw i32 %201, 1
  store i32 %202, i32* %11, align 4
  br label %186

; <label>:203:                                    ; preds = %186
  br label %204

; <label>:204:                                    ; preds = %203, %159
  br label %205

; <label>:205:                                    ; preds = %204
  %206 = load i32, i32* %13, align 4
  %207 = add i32 %206, 1
  store i32 %207, i32* %13, align 4
  br label %156

; <label>:208:                                    ; preds = %156
  br label %209

; <label>:209:                                    ; preds = %208
  %210 = load i32, i32* %12, align 4
  %211 = add nsw i32 %210, 1
  store i32 %211, i32* %12, align 4
  br label %149

; <label>:212:                                    ; preds = %149
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @set_masking_lower(i32, i32) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %7 = load i32, i32* %3, align 4
  %8 = mul nsw i32 2, %7
  %9 = add nsw i32 -6, %8
  %10 = sitofp i32 %9 to float
  store float %10, float* %5, align 4
  %11 = load i32, i32* %4, align 4
  %12 = sub nsw i32 %11, 125
  %13 = sitofp i32 %12 to double
  %14 = fdiv double %13, 2.375000e+03
  %15 = fptrunc double %14 to float
  store float %15, float* %6, align 4
  %16 = load float, float* %6, align 4
  %17 = fsub float %16, 1.000000e+00
  %18 = fmul float 4.000000e+00, %17
  store float %18, float* %6, align 4
  %19 = load float, float* %6, align 4
  %20 = load float, float* %5, align 4
  %21 = fadd float %20, %19
  store float %21, float* %5, align 4
  %22 = load float, float* %5, align 4
  %23 = fdiv float %22, 1.000000e+01
  %24 = fpext float %23 to double
  %25 = call arm_aapcscc double @pow(double 1.000000e+01, double %24) #7
  %26 = fptrunc double %25 to float
  store float %26, float* @masking_lower, align 4
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @VBR_iteration_loop(%struct.lame_global_flags*, [2 x double]*, double*, [2 x [576 x double]]*, [2 x %struct.III_psy_ratio]*, %struct.III_side_info_t*, [2 x [576 x i32]]*, [2 x %struct.III_scalefac_t]*) #0 {
  %9 = alloca %struct.lame_global_flags*, align 4
  %10 = alloca [2 x double]*, align 4
  %11 = alloca double*, align 4
  %12 = alloca [2 x [576 x double]]*, align 4
  %13 = alloca [2 x %struct.III_psy_ratio]*, align 4
  %14 = alloca %struct.III_side_info_t*, align 4
  %15 = alloca [2 x [576 x i32]]*, align 4
  %16 = alloca [2 x %struct.III_scalefac_t]*, align 4
  %17 = alloca %struct.gr_info, align 4
  %18 = alloca %struct.gr_info, align 4
  %19 = alloca %struct.III_scalefac_t, align 4
  %20 = alloca [576 x i32], align 4
  %21 = alloca %struct.III_psy_xmin, align 8
  %22 = alloca %struct.gr_info*, align 4
  %23 = alloca [2 x [2 x i32]], align 4
  %24 = alloca [4 x double], align 8
  %25 = alloca [4 x double], align 8
  %26 = alloca [4 x [21 x double]], align 8
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca [15 x i32], align 4
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  %45 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %9, align 4
  store [2 x double]* %1, [2 x double]** %10, align 4
  store double* %2, double** %11, align 4
  store [2 x [576 x double]]* %3, [2 x [576 x double]]** %12, align 4
  store [2 x %struct.III_psy_ratio]* %4, [2 x %struct.III_psy_ratio]** %13, align 4
  store %struct.III_side_info_t* %5, %struct.III_side_info_t** %14, align 4
  store [2 x [576 x i32]]* %6, [2 x [576 x i32]]** %15, align 4
  store [2 x %struct.III_scalefac_t]* %7, [2 x %struct.III_scalefac_t]** %16, align 4
  store %struct.gr_info* null, %struct.gr_info** %22, align 4
  store i32 0, i32* %29, align 4
  store i32 0, i32* %32, align 4
  store i32 0, i32* %41, align 4
  %46 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %47 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %48 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  call arm_aapcscc void @iteration_init(%struct.lame_global_flags* %46, %struct.III_side_info_t* %47, [2 x [576 x i32]]* %48)
  %49 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %50 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %49, i32 0, i32 50
  store i32 1, i32* %50, align 4
  br label %51

; <label>:51:                                     ; preds = %84, %8
  %52 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %53 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %52, i32 0, i32 50
  %54 = load i32, i32* %53, align 4
  %55 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %56 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %55, i32 0, i32 48
  %57 = load i32, i32* %56, align 4
  %58 = icmp sle i32 %54, %57
  br i1 %58, label %59, label %89

; <label>:59:                                     ; preds = %51
  %60 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  call arm_aapcscc void @getframebits(%struct.lame_global_flags* %60, i32* %34, i32* %36)
  %61 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %62 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %61, i32 0, i32 50
  %63 = load i32, i32* %62, align 4
  %64 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %65 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %64, i32 0, i32 47
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %63, %66
  br i1 %67, label %68, label %74

; <label>:68:                                     ; preds = %59
  %69 = load i32, i32* %36, align 4
  %70 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %71 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %70, i32 0, i32 46
  %72 = load i32, i32* %71, align 4
  %73 = sdiv i32 %69, %72
  store i32 %73, i32* %32, align 4
  br label %74

; <label>:74:                                     ; preds = %68, %59
  %75 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %76 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %77 = load i32, i32* %36, align 4
  %78 = load i32, i32* %34, align 4
  %79 = call arm_aapcscc i32 @ResvFrameBegin(%struct.lame_global_flags* %75, %struct.III_side_info_t* %76, i32 %77, i32 %78)
  %80 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %81 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %80, i32 0, i32 50
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds [15 x i32], [15 x i32]* %33, i32 0, i32 %82
  store i32 %79, i32* %83, align 4
  br label %84

; <label>:84:                                     ; preds = %74
  %85 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %86 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %85, i32 0, i32 50
  %87 = load i32, i32* %86, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %86, align 4
  br label %51

; <label>:89:                                     ; preds = %51
  %90 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %91 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %90, i32 0, i32 48
  %92 = load i32, i32* %91, align 4
  %93 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %94 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %93, i32 0, i32 50
  store i32 %92, i32* %94, align 4
  store i32 0, i32* %40, align 4
  store i32 0, i32* %39, align 4
  br label %95

; <label>:95:                                     ; preds = %469, %89
  %96 = load i32, i32* %39, align 4
  %97 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %98 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %97, i32 0, i32 45
  %99 = load i32, i32* %98, align 4
  %100 = icmp slt i32 %96, %99
  br i1 %100, label %101, label %472

; <label>:101:                                    ; preds = %95
  %102 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %103 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %102, i32 0, i32 46
  %104 = load i32, i32* %103, align 4
  store i32 %104, i32* %42, align 4
  %105 = load i32, i32* @reduce_sidechannel, align 4
  %106 = icmp ne i32 %105, 0
  br i1 %106, label %107, label %108

; <label>:107:                                    ; preds = %101
  store i32 1, i32* %42, align 4
  br label %108

; <label>:108:                                    ; preds = %107, %101
  %109 = load i32, i32* @convert_mdct, align 4
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %111, label %120

; <label>:111:                                    ; preds = %108
  %112 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %113 = load i32, i32* %39, align 4
  %114 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %112, i32 %113
  %115 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %114, i32 0, i32 0
  %116 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %117 = load i32, i32* %39, align 4
  %118 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %116, i32 %117
  %119 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %118, i32 0, i32 0
  call arm_aapcscc void @ms_convert([576 x double]* %115, [576 x double]* %119)
  br label %120

; <label>:120:                                    ; preds = %111, %108
  store i32 0, i32* %38, align 4
  br label %121

; <label>:121:                                    ; preds = %465, %120
  %122 = load i32, i32* %38, align 4
  %123 = load i32, i32* %42, align 4
  %124 = icmp slt i32 %122, %123
  br i1 %124, label %125, label %468

; <label>:125:                                    ; preds = %121
  %126 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %127 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %126, i32 0, i32 4
  %128 = load i32, i32* %39, align 4
  %129 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %127, i32 0, i32 %128
  %130 = getelementptr inbounds %struct.anon, %struct.anon* %129, i32 0, i32 0
  %131 = load i32, i32* %38, align 4
  %132 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %130, i32 0, i32 %131
  %133 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %132, i32 0, i32 0
  store %struct.gr_info* %133, %struct.gr_info** %22, align 4
  %134 = load i32, i32* %32, align 4
  %135 = icmp sgt i32 125, %134
  br i1 %135, label %136, label %137

; <label>:136:                                    ; preds = %125
  br label %139

; <label>:137:                                    ; preds = %125
  %138 = load i32, i32* %32, align 4
  br label %139

; <label>:139:                                    ; preds = %137, %136
  %140 = phi i32 [ 125, %136 ], [ %138, %137 ]
  store i32 %140, i32* %30, align 4
  %141 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %142 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %143 = load i32, i32* %39, align 4
  %144 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %142, i32 %143
  %145 = load i32, i32* %38, align 4
  %146 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %144, i32 0, i32 %145
  %147 = getelementptr inbounds [576 x double], [576 x double]* %146, i32 0, i32 0
  %148 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %149 = call arm_aapcscc i32 @init_outer_loop(%struct.lame_global_flags* %141, double* %147, %struct.gr_info* %148)
  %150 = icmp ne i32 %149, 0
  br i1 %150, label %169, label %151

; <label>:151:                                    ; preds = %139
  %152 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %153 = load i32, i32* %39, align 4
  %154 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %152, i32 %153
  %155 = load i32, i32* %38, align 4
  %156 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %154, i32 0, i32 %155
  %157 = bitcast %struct.III_scalefac_t* %156 to i8*
  call void @llvm.memset.p0i8.i32(i8* %157, i8 0, i32 244, i32 4, i1 false)
  %158 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %159 = load i32, i32* %39, align 4
  %160 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %158, i32 %159
  %161 = load i32, i32* %38, align 4
  %162 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %160, i32 0, i32 %161
  %163 = getelementptr inbounds [576 x i32], [576 x i32]* %162, i32 0, i32 0
  %164 = bitcast i32* %163 to i8*
  call void @llvm.memset.p0i8.i32(i8* %164, i8 0, i32 2304, i32 4, i1 false)
  %165 = load i32, i32* %39, align 4
  %166 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %165
  %167 = load i32, i32* %38, align 4
  %168 = getelementptr inbounds [2 x i32], [2 x i32]* %166, i32 0, i32 %167
  store i32 0, i32* %168, align 4
  store i32 1, i32* %40, align 4
  br label %465

; <label>:169:                                    ; preds = %139
  %170 = bitcast %struct.gr_info* %18 to i8*
  %171 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %172 = bitcast %struct.gr_info* %171 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %170, i8* %172, i32 112, i32 4, i1 false)
  %173 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %174 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %173, i32 0, i32 22
  %175 = load i32, i32* %174, align 4
  call arm_aapcscc void @set_masking_lower(i32 %175, i32 2500)
  %176 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %177 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %178 = load i32, i32* %39, align 4
  %179 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %177, i32 %178
  %180 = load i32, i32* %38, align 4
  %181 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %179, i32 0, i32 %180
  %182 = getelementptr inbounds [576 x double], [576 x double]* %181, i32 0, i32 0
  %183 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %13, align 4
  %184 = load i32, i32* %39, align 4
  %185 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %183, i32 %184
  %186 = load i32, i32* %38, align 4
  %187 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %185, i32 0, i32 %186
  %188 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %189 = call arm_aapcscc i32 @calc_xmin(%struct.lame_global_flags* %176, double* %182, %struct.III_psy_ratio* %187, %struct.gr_info* %188, %struct.III_psy_xmin* %21)
  %190 = icmp eq i32 0, %189
  br i1 %190, label %191, label %192

; <label>:191:                                    ; preds = %169
  store i32 1, i32* %40, align 4
  store i32 125, i32* %30, align 4
  br label %192

; <label>:192:                                    ; preds = %191, %169
  %193 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %194 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %193, i32 0, i32 6
  %195 = load i32, i32* %194, align 4
  %196 = icmp eq i32 %195, 2
  br i1 %196, label %197, label %226

; <label>:197:                                    ; preds = %192
  %198 = load [2 x double]*, [2 x double]** %10, align 4
  %199 = load i32, i32* %39, align 4
  %200 = getelementptr inbounds [2 x double], [2 x double]* %198, i32 %199
  %201 = load i32, i32* %38, align 4
  %202 = getelementptr inbounds [2 x double], [2 x double]* %200, i32 0, i32 %201
  %203 = load double, double* %202, align 8
  %204 = fcmp ogt double 1.100000e+03, %203
  br i1 %204, label %205, label %206

; <label>:205:                                    ; preds = %197
  br label %213

; <label>:206:                                    ; preds = %197
  %207 = load [2 x double]*, [2 x double]** %10, align 4
  %208 = load i32, i32* %39, align 4
  %209 = getelementptr inbounds [2 x double], [2 x double]* %207, i32 %208
  %210 = load i32, i32* %38, align 4
  %211 = getelementptr inbounds [2 x double], [2 x double]* %209, i32 0, i32 %210
  %212 = load double, double* %211, align 8
  br label %213

; <label>:213:                                    ; preds = %206, %205
  %214 = phi double [ 1.100000e+03, %205 ], [ %212, %206 ]
  %215 = load i32, i32* %30, align 4
  %216 = sitofp i32 %215 to double
  %217 = fadd double %216, %214
  %218 = fptosi double %217 to i32
  store i32 %218, i32* %30, align 4
  %219 = load i32, i32* %30, align 4
  %220 = icmp slt i32 %219, 1800
  br i1 %220, label %221, label %223

; <label>:221:                                    ; preds = %213
  %222 = load i32, i32* %30, align 4
  br label %224

; <label>:223:                                    ; preds = %213
  br label %224

; <label>:224:                                    ; preds = %223, %221
  %225 = phi i32 [ %222, %221 ], [ 1800, %223 ]
  store i32 %225, i32* %30, align 4
  br label %226

; <label>:226:                                    ; preds = %224, %192
  %227 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %228 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %227, i32 0, i32 48
  %229 = load i32, i32* %228, align 4
  %230 = getelementptr inbounds [15 x i32], [15 x i32]* %33, i32 0, i32 %229
  %231 = load i32, i32* %230, align 4
  %232 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %233 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %232, i32 0, i32 46
  %234 = load i32, i32* %233, align 4
  %235 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %236 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %235, i32 0, i32 45
  %237 = load i32, i32* %236, align 4
  %238 = mul nsw i32 %234, %237
  %239 = sdiv i32 %231, %238
  %240 = add nsw i32 1200, %239
  store i32 %240, i32* %31, align 4
  %241 = load i32, i32* %31, align 4
  %242 = icmp slt i32 %241, 2500
  br i1 %242, label %243, label %245

; <label>:243:                                    ; preds = %226
  %244 = load i32, i32* %31, align 4
  br label %246

; <label>:245:                                    ; preds = %226
  br label %246

; <label>:246:                                    ; preds = %245, %243
  %247 = phi i32 [ %244, %243 ], [ 2500, %245 ]
  store i32 %247, i32* %31, align 4
  %248 = load i32, i32* %31, align 4
  %249 = load i32, i32* %30, align 4
  %250 = icmp sgt i32 %248, %249
  br i1 %250, label %251, label %253

; <label>:251:                                    ; preds = %246
  %252 = load i32, i32* %31, align 4
  br label %255

; <label>:253:                                    ; preds = %246
  %254 = load i32, i32* %30, align 4
  br label %255

; <label>:255:                                    ; preds = %253, %251
  %256 = phi i32 [ %252, %251 ], [ %254, %253 ]
  store i32 %256, i32* %31, align 4
  %257 = load i32, i32* %31, align 4
  %258 = load i32, i32* %30, align 4
  %259 = sub nsw i32 %257, %258
  %260 = sdiv i32 %259, 4
  store i32 %260, i32* %28, align 4
  %261 = load i32, i32* %31, align 4
  %262 = load i32, i32* %30, align 4
  %263 = add nsw i32 %261, %262
  %264 = sdiv i32 %263, 2
  store i32 %264, i32* %27, align 4
  %265 = load i32, i32* %31, align 4
  %266 = add nsw i32 %265, 1
  store i32 %266, i32* %43, align 4
  br label %267

; <label>:267:                                    ; preds = %414, %255
  %268 = load i32, i32* %27, align 4
  %269 = load i32, i32* %30, align 4
  %270 = icmp sge i32 %268, %269
  br i1 %270, label %272, label %271

; <label>:271:                                    ; preds = %267
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.222, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 400, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.VBR_iteration_loop, i32 0, i32 0))
  br label %272

; <label>:272:                                    ; preds = %271, %267
  %273 = phi i1 [ true, %267 ], [ false, %271 ]
  %274 = zext i1 %273 to i32
  %275 = load i32, i32* %27, align 4
  %276 = load i32, i32* %31, align 4
  %277 = icmp sle i32 %275, %276
  br i1 %277, label %279, label %278

; <label>:278:                                    ; preds = %272
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2.223, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 401, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.VBR_iteration_loop, i32 0, i32 0))
  br label %279

; <label>:279:                                    ; preds = %278, %272
  %280 = phi i1 [ true, %272 ], [ false, %278 ]
  %281 = zext i1 %280 to i32
  %282 = load i32, i32* %27, align 4
  %283 = load i32, i32* %43, align 4
  %284 = icmp sge i32 %282, %283
  br i1 %284, label %285, label %291

; <label>:285:                                    ; preds = %279
  %286 = load i32, i32* %28, align 4
  %287 = load i32, i32* %27, align 4
  %288 = sub nsw i32 %287, %286
  store i32 %288, i32* %27, align 4
  %289 = load i32, i32* %28, align 4
  %290 = sdiv i32 %289, 2
  store i32 %290, i32* %28, align 4
  br label %414

; <label>:291:                                    ; preds = %279
  %292 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 0
  store double 0.000000e+00, double* %292, align 8
  %293 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 1
  store double 0.000000e+00, double* %293, align 8
  %294 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 2
  store double 0.000000e+00, double* %294, align 8
  %295 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 3
  store double 0.000000e+00, double* %295, align 8
  %296 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 0
  %297 = load double, double* %296, align 8
  %298 = fcmp ogt double 0.000000e+00, %297
  br i1 %298, label %299, label %300

; <label>:299:                                    ; preds = %291
  br label %303

; <label>:300:                                    ; preds = %291
  %301 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 0
  %302 = load double, double* %301, align 8
  br label %303

; <label>:303:                                    ; preds = %300, %299
  %304 = phi double [ 0.000000e+00, %299 ], [ %302, %300 ]
  %305 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 0
  store double %304, double* %305, align 8
  %306 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 2
  %307 = load double, double* %306, align 8
  %308 = fcmp ogt double 0.000000e+00, %307
  br i1 %308, label %309, label %310

; <label>:309:                                    ; preds = %303
  br label %313

; <label>:310:                                    ; preds = %303
  %311 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 2
  %312 = load double, double* %311, align 8
  br label %313

; <label>:313:                                    ; preds = %310, %309
  %314 = phi double [ 0.000000e+00, %309 ], [ %312, %310 ]
  %315 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 2
  store double %314, double* %315, align 8
  %316 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %317 = bitcast %struct.gr_info* %316 to i8*
  %318 = bitcast %struct.gr_info* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %317, i8* %318, i32 112, i32 4, i1 false)
  %319 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %320 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %319, i32 0, i32 22
  %321 = load i32, i32* %320, align 4
  %322 = load i32, i32* %27, align 4
  call arm_aapcscc void @set_masking_lower(i32 %321, i32 %322)
  %323 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %324 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %325 = load i32, i32* %39, align 4
  %326 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %324, i32 %325
  %327 = load i32, i32* %38, align 4
  %328 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %326, i32 0, i32 %327
  %329 = getelementptr inbounds [576 x double], [576 x double]* %328, i32 0, i32 0
  %330 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %13, align 4
  %331 = load i32, i32* %39, align 4
  %332 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %330, i32 %331
  %333 = load i32, i32* %38, align 4
  %334 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %332, i32 0, i32 %333
  %335 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %336 = call arm_aapcscc i32 @calc_xmin(%struct.lame_global_flags* %323, double* %329, %struct.III_psy_ratio* %334, %struct.gr_info* %335, %struct.III_psy_xmin* %21)
  %337 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %338 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %339 = load i32, i32* %39, align 4
  %340 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %338, i32 %339
  %341 = load i32, i32* %38, align 4
  %342 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %340, i32 0, i32 %341
  %343 = getelementptr inbounds [576 x double], [576 x double]* %342, i32 0, i32 0
  %344 = load i32, i32* %27, align 4
  %345 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 0
  %346 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %347 = load i32, i32* %39, align 4
  %348 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %346, i32 %347
  %349 = load i32, i32* %38, align 4
  %350 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %348, i32 0, i32 %349
  %351 = getelementptr inbounds [576 x i32], [576 x i32]* %350, i32 0, i32 0
  %352 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %353 = load i32, i32* %39, align 4
  %354 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %352, i32 %353
  %355 = load i32, i32* %38, align 4
  %356 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %354, i32 0, i32 %355
  %357 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %358 = getelementptr inbounds [4 x [21 x double]], [4 x [21 x double]]* %26, i32 0, i32 0
  %359 = load i32, i32* %38, align 4
  call arm_aapcscc void @outer_loop(%struct.lame_global_flags* %337, double* %343, i32 %344, double* %345, %struct.III_psy_xmin* %21, i32* %351, %struct.III_scalefac_t* %356, %struct.gr_info* %357, [21 x double]* %358, i32 %359)
  %360 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 0
  %361 = load double, double* %360, align 8
  %362 = fptosi double %361 to i32
  %363 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 3
  %364 = load double, double* %363, align 8
  %365 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 2
  %366 = load double, double* %365, align 8
  %367 = getelementptr inbounds [4 x double], [4 x double]* %25, i32 0, i32 1
  %368 = load double, double* %367, align 8
  %369 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 0
  %370 = load double, double* %369, align 8
  %371 = fptosi double %370 to i32
  %372 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 3
  %373 = load double, double* %372, align 8
  %374 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 2
  %375 = load double, double* %374, align 8
  %376 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 1
  %377 = load double, double* %376, align 8
  %378 = call arm_aapcscc i32 @VBR_compare(i32 %362, double %364, double %366, double %368, i32 %371, double %373, double %375, double %377)
  store i32 %378, i32* %44, align 4
  %379 = load i32, i32* %44, align 4
  %380 = icmp ne i32 %379, 0
  br i1 %380, label %381, label %407

; <label>:381:                                    ; preds = %313
  %382 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %383 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %382, i32 0, i32 0
  %384 = load i32, i32* %383, align 4
  store i32 %384, i32* %43, align 4
  %385 = bitcast %struct.III_scalefac_t* %19 to i8*
  %386 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %387 = load i32, i32* %39, align 4
  %388 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %386, i32 %387
  %389 = load i32, i32* %38, align 4
  %390 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %388, i32 0, i32 %389
  %391 = bitcast %struct.III_scalefac_t* %390 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %385, i8* %391, i32 244, i32 4, i1 false)
  %392 = getelementptr inbounds [576 x i32], [576 x i32]* %20, i32 0, i32 0
  %393 = bitcast i32* %392 to i8*
  %394 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %395 = load i32, i32* %39, align 4
  %396 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %394, i32 %395
  %397 = load i32, i32* %38, align 4
  %398 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %396, i32 0, i32 %397
  %399 = getelementptr inbounds [576 x i32], [576 x i32]* %398, i32 0, i32 0
  %400 = bitcast i32* %399 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %393, i8* %400, i32 2304, i32 4, i1 false)
  %401 = bitcast %struct.gr_info* %17 to i8*
  %402 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %403 = bitcast %struct.gr_info* %402 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %401, i8* %403, i32 112, i32 4, i1 false)
  %404 = load i32, i32* %28, align 4
  %405 = load i32, i32* %27, align 4
  %406 = sub nsw i32 %405, %404
  store i32 %406, i32* %27, align 4
  br label %411

; <label>:407:                                    ; preds = %313
  %408 = load i32, i32* %28, align 4
  %409 = load i32, i32* %27, align 4
  %410 = add nsw i32 %409, %408
  store i32 %410, i32* %27, align 4
  br label %411

; <label>:411:                                    ; preds = %407, %381
  %412 = load i32, i32* %28, align 4
  %413 = sdiv i32 %412, 2
  store i32 %413, i32* %28, align 4
  br label %414

; <label>:414:                                    ; preds = %411, %285
  %415 = load i32, i32* %28, align 4
  %416 = icmp sgt i32 %415, 10
  br i1 %416, label %267, label %417

; <label>:417:                                    ; preds = %414
  %418 = load i32, i32* %43, align 4
  %419 = load i32, i32* %31, align 4
  %420 = icmp sle i32 %418, %419
  br i1 %420, label %421, label %441

; <label>:421:                                    ; preds = %417
  %422 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %423 = bitcast %struct.gr_info* %422 to i8*
  %424 = bitcast %struct.gr_info* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %423, i8* %424, i32 112, i32 4, i1 false)
  %425 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %426 = load i32, i32* %39, align 4
  %427 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %425, i32 %426
  %428 = load i32, i32* %38, align 4
  %429 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %427, i32 0, i32 %428
  %430 = bitcast %struct.III_scalefac_t* %429 to i8*
  %431 = bitcast %struct.III_scalefac_t* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %430, i8* %431, i32 244, i32 4, i1 false)
  %432 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %433 = load i32, i32* %39, align 4
  %434 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %432, i32 %433
  %435 = load i32, i32* %38, align 4
  %436 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %434, i32 0, i32 %435
  %437 = getelementptr inbounds [576 x i32], [576 x i32]* %436, i32 0, i32 0
  %438 = bitcast i32* %437 to i8*
  %439 = getelementptr inbounds [576 x i32], [576 x i32]* %20, i32 0, i32 0
  %440 = bitcast i32* %439 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %438, i8* %440, i32 2304, i32 4, i1 false)
  br label %441

; <label>:441:                                    ; preds = %421, %417
  %442 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %443 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %442, i32 0, i32 0
  %444 = load i32, i32* %443, align 4
  %445 = load i32, i32* %31, align 4
  %446 = icmp sle i32 %444, %445
  br i1 %446, label %448, label %447

; <label>:447:                                    ; preds = %441
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3.224, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 497, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.VBR_iteration_loop, i32 0, i32 0))
  br label %448

; <label>:448:                                    ; preds = %447, %441
  %449 = phi i1 [ true, %441 ], [ false, %447 ]
  %450 = zext i1 %449 to i32
  %451 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %452 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %451, i32 0, i32 0
  %453 = load i32, i32* %452, align 4
  %454 = load i32, i32* %39, align 4
  %455 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %454
  %456 = load i32, i32* %38, align 4
  %457 = getelementptr inbounds [2 x i32], [2 x i32]* %455, i32 0, i32 %456
  store i32 %453, i32* %457, align 4
  %458 = load i32, i32* %39, align 4
  %459 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %458
  %460 = load i32, i32* %38, align 4
  %461 = getelementptr inbounds [2 x i32], [2 x i32]* %459, i32 0, i32 %460
  %462 = load i32, i32* %461, align 4
  %463 = load i32, i32* %29, align 4
  %464 = add nsw i32 %463, %462
  store i32 %464, i32* %29, align 4
  br label %465

; <label>:465:                                    ; preds = %448, %151
  %466 = load i32, i32* %38, align 4
  %467 = add nsw i32 %466, 1
  store i32 %467, i32* %38, align 4
  br label %121

; <label>:468:                                    ; preds = %121
  br label %469

; <label>:469:                                    ; preds = %468
  %470 = load i32, i32* %39, align 4
  %471 = add nsw i32 %470, 1
  store i32 %471, i32* %39, align 4
  br label %95

; <label>:472:                                    ; preds = %95
  %473 = load i32, i32* @reduce_sidechannel, align 4
  %474 = icmp ne i32 %473, 0
  br i1 %474, label %475, label %531

; <label>:475:                                    ; preds = %472
  store i32 0, i32* %39, align 4
  br label %476

; <label>:476:                                    ; preds = %527, %475
  %477 = load i32, i32* %39, align 4
  %478 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %479 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %478, i32 0, i32 45
  %480 = load i32, i32* %479, align 4
  %481 = icmp slt i32 %477, %480
  br i1 %481, label %482, label %530

; <label>:482:                                    ; preds = %476
  %483 = load double*, double** %11, align 4
  %484 = load i32, i32* %39, align 4
  %485 = getelementptr inbounds double, double* %483, i32 %484
  %486 = load double, double* %485, align 8
  %487 = fsub double 5.000000e-01, %486
  %488 = fmul double 3.300000e-01, %487
  %489 = fdiv double %488, 5.000000e-01
  store double %489, double* %45, align 8
  %490 = load double, double* %45, align 8
  %491 = fsub double 1.000000e+00, %490
  %492 = load double, double* %45, align 8
  %493 = fadd double 1.000000e+00, %492
  %494 = fdiv double %491, %493
  %495 = load i32, i32* %39, align 4
  %496 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %495
  %497 = getelementptr inbounds [2 x i32], [2 x i32]* %496, i32 0, i32 0
  %498 = load i32, i32* %497, align 4
  %499 = sitofp i32 %498 to double
  %500 = fmul double %494, %499
  %501 = fptosi double %500 to i32
  %502 = load i32, i32* %39, align 4
  %503 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %502
  %504 = getelementptr inbounds [2 x i32], [2 x i32]* %503, i32 0, i32 1
  store i32 %501, i32* %504, align 4
  %505 = load i32, i32* %39, align 4
  %506 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %505
  %507 = getelementptr inbounds [2 x i32], [2 x i32]* %506, i32 0, i32 1
  %508 = load i32, i32* %507, align 4
  %509 = icmp sgt i32 125, %508
  br i1 %509, label %510, label %511

; <label>:510:                                    ; preds = %482
  br label %516

; <label>:511:                                    ; preds = %482
  %512 = load i32, i32* %39, align 4
  %513 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %512
  %514 = getelementptr inbounds [2 x i32], [2 x i32]* %513, i32 0, i32 1
  %515 = load i32, i32* %514, align 4
  br label %516

; <label>:516:                                    ; preds = %511, %510
  %517 = phi i32 [ 125, %510 ], [ %515, %511 ]
  %518 = load i32, i32* %39, align 4
  %519 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %518
  %520 = getelementptr inbounds [2 x i32], [2 x i32]* %519, i32 0, i32 1
  store i32 %517, i32* %520, align 4
  %521 = load i32, i32* %39, align 4
  %522 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %521
  %523 = getelementptr inbounds [2 x i32], [2 x i32]* %522, i32 0, i32 1
  %524 = load i32, i32* %523, align 4
  %525 = load i32, i32* %29, align 4
  %526 = add nsw i32 %525, %524
  store i32 %526, i32* %29, align 4
  br label %527

; <label>:527:                                    ; preds = %516
  %528 = load i32, i32* %39, align 4
  %529 = add nsw i32 %528, 1
  store i32 %529, i32* %39, align 4
  br label %476

; <label>:530:                                    ; preds = %476
  br label %531

; <label>:531:                                    ; preds = %530, %472
  %532 = load i32, i32* %40, align 4
  %533 = icmp ne i32 %532, 0
  br i1 %533, label %534, label %535

; <label>:534:                                    ; preds = %531
  br label %539

; <label>:535:                                    ; preds = %531
  %536 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %537 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %536, i32 0, i32 47
  %538 = load i32, i32* %537, align 4
  br label %539

; <label>:539:                                    ; preds = %535, %534
  %540 = phi i32 [ 1, %534 ], [ %538, %535 ]
  %541 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %542 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %541, i32 0, i32 50
  store i32 %540, i32* %542, align 4
  br label %543

; <label>:543:                                    ; preds = %561, %539
  %544 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %545 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %544, i32 0, i32 50
  %546 = load i32, i32* %545, align 4
  %547 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %548 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %547, i32 0, i32 48
  %549 = load i32, i32* %548, align 4
  %550 = icmp slt i32 %546, %549
  br i1 %550, label %551, label %566

; <label>:551:                                    ; preds = %543
  %552 = load i32, i32* %29, align 4
  %553 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %554 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %553, i32 0, i32 50
  %555 = load i32, i32* %554, align 4
  %556 = getelementptr inbounds [15 x i32], [15 x i32]* %33, i32 0, i32 %555
  %557 = load i32, i32* %556, align 4
  %558 = icmp sle i32 %552, %557
  br i1 %558, label %559, label %560

; <label>:559:                                    ; preds = %551
  br label %566

; <label>:560:                                    ; preds = %551
  br label %561

; <label>:561:                                    ; preds = %560
  %562 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %563 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %562, i32 0, i32 50
  %564 = load i32, i32* %563, align 4
  %565 = add nsw i32 %564, 1
  store i32 %565, i32* %563, align 4
  br label %543

; <label>:566:                                    ; preds = %559, %543
  %567 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  call arm_aapcscc void @getframebits(%struct.lame_global_flags* %567, i32* %34, i32* %36)
  %568 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %569 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %570 = load i32, i32* %36, align 4
  %571 = load i32, i32* %34, align 4
  %572 = call arm_aapcscc i32 @ResvFrameBegin(%struct.lame_global_flags* %568, %struct.III_side_info_t* %569, i32 %570, i32 %571)
  store i32 %572, i32* %35, align 4
  %573 = load i32, i32* %29, align 4
  %574 = load i32, i32* %35, align 4
  %575 = icmp sgt i32 %573, %574
  br i1 %575, label %576, label %645

; <label>:576:                                    ; preds = %566
  store i32 1, i32* %41, align 4
  store i32 0, i32* %39, align 4
  br label %577

; <label>:577:                                    ; preds = %612, %576
  %578 = load i32, i32* %39, align 4
  %579 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %580 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %579, i32 0, i32 45
  %581 = load i32, i32* %580, align 4
  %582 = icmp slt i32 %578, %581
  br i1 %582, label %583, label %615

; <label>:583:                                    ; preds = %577
  store i32 0, i32* %38, align 4
  br label %584

; <label>:584:                                    ; preds = %608, %583
  %585 = load i32, i32* %38, align 4
  %586 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %587 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %586, i32 0, i32 46
  %588 = load i32, i32* %587, align 4
  %589 = icmp slt i32 %585, %588
  br i1 %589, label %590, label %611

; <label>:590:                                    ; preds = %584
  %591 = load i32, i32* %39, align 4
  %592 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %591
  %593 = load i32, i32* %38, align 4
  %594 = getelementptr inbounds [2 x i32], [2 x i32]* %592, i32 0, i32 %593
  %595 = load i32, i32* %594, align 4
  %596 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %597 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %596, i32 0, i32 50
  %598 = load i32, i32* %597, align 4
  %599 = getelementptr inbounds [15 x i32], [15 x i32]* %33, i32 0, i32 %598
  %600 = load i32, i32* %599, align 4
  %601 = mul nsw i32 %595, %600
  %602 = load i32, i32* %29, align 4
  %603 = sdiv i32 %601, %602
  %604 = load i32, i32* %39, align 4
  %605 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %604
  %606 = load i32, i32* %38, align 4
  %607 = getelementptr inbounds [2 x i32], [2 x i32]* %605, i32 0, i32 %606
  store i32 %603, i32* %607, align 4
  br label %608

; <label>:608:                                    ; preds = %590
  %609 = load i32, i32* %38, align 4
  %610 = add nsw i32 %609, 1
  store i32 %610, i32* %38, align 4
  br label %584

; <label>:611:                                    ; preds = %584
  br label %612

; <label>:612:                                    ; preds = %611
  %613 = load i32, i32* %39, align 4
  %614 = add nsw i32 %613, 1
  store i32 %614, i32* %39, align 4
  br label %577

; <label>:615:                                    ; preds = %577
  store i32 0, i32* %29, align 4
  store i32 0, i32* %39, align 4
  br label %616

; <label>:616:                                    ; preds = %641, %615
  %617 = load i32, i32* %39, align 4
  %618 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %619 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %618, i32 0, i32 45
  %620 = load i32, i32* %619, align 4
  %621 = icmp slt i32 %617, %620
  br i1 %621, label %622, label %644

; <label>:622:                                    ; preds = %616
  store i32 0, i32* %38, align 4
  br label %623

; <label>:623:                                    ; preds = %637, %622
  %624 = load i32, i32* %38, align 4
  %625 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %626 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %625, i32 0, i32 46
  %627 = load i32, i32* %626, align 4
  %628 = icmp slt i32 %624, %627
  br i1 %628, label %629, label %640

; <label>:629:                                    ; preds = %623
  %630 = load i32, i32* %39, align 4
  %631 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %630
  %632 = load i32, i32* %38, align 4
  %633 = getelementptr inbounds [2 x i32], [2 x i32]* %631, i32 0, i32 %632
  %634 = load i32, i32* %633, align 4
  %635 = load i32, i32* %29, align 4
  %636 = add nsw i32 %635, %634
  store i32 %636, i32* %29, align 4
  br label %637

; <label>:637:                                    ; preds = %629
  %638 = load i32, i32* %38, align 4
  %639 = add nsw i32 %638, 1
  store i32 %639, i32* %38, align 4
  br label %623

; <label>:640:                                    ; preds = %623
  br label %641

; <label>:641:                                    ; preds = %640
  %642 = load i32, i32* %39, align 4
  %643 = add nsw i32 %642, 1
  store i32 %643, i32* %39, align 4
  br label %616

; <label>:644:                                    ; preds = %616
  br label %645

; <label>:645:                                    ; preds = %644, %566
  %646 = load i32, i32* %29, align 4
  %647 = load i32, i32* %35, align 4
  %648 = icmp sle i32 %646, %647
  br i1 %648, label %650, label %649

; <label>:649:                                    ; preds = %645
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4.225, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.216, i32 0, i32 0), i32 552, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.VBR_iteration_loop, i32 0, i32 0))
  br label %650

; <label>:650:                                    ; preds = %649, %645
  %651 = phi i1 [ true, %645 ], [ false, %649 ]
  %652 = zext i1 %651 to i32
  store i32 0, i32* %39, align 4
  br label %653

; <label>:653:                                    ; preds = %768, %650
  %654 = load i32, i32* %39, align 4
  %655 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %656 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %655, i32 0, i32 45
  %657 = load i32, i32* %656, align 4
  %658 = icmp slt i32 %654, %657
  br i1 %658, label %659, label %771

; <label>:659:                                    ; preds = %653
  store i32 0, i32* %38, align 4
  br label %660

; <label>:660:                                    ; preds = %764, %659
  %661 = load i32, i32* %38, align 4
  %662 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %663 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %662, i32 0, i32 46
  %664 = load i32, i32* %663, align 4
  %665 = icmp slt i32 %661, %664
  br i1 %665, label %666, label %767

; <label>:666:                                    ; preds = %660
  %667 = load i32, i32* %41, align 4
  %668 = icmp ne i32 %667, 0
  br i1 %668, label %675, label %669

; <label>:669:                                    ; preds = %666
  %670 = load i32, i32* @reduce_sidechannel, align 4
  %671 = icmp ne i32 %670, 0
  br i1 %671, label %672, label %763

; <label>:672:                                    ; preds = %669
  %673 = load i32, i32* %38, align 4
  %674 = icmp eq i32 %673, 1
  br i1 %674, label %675, label %763

; <label>:675:                                    ; preds = %672, %666
  %676 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %677 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %676, i32 0, i32 4
  %678 = load i32, i32* %39, align 4
  %679 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %677, i32 0, i32 %678
  %680 = getelementptr inbounds %struct.anon, %struct.anon* %679, i32 0, i32 0
  %681 = load i32, i32* %38, align 4
  %682 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %680, i32 0, i32 %681
  %683 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %682, i32 0, i32 0
  store %struct.gr_info* %683, %struct.gr_info** %22, align 4
  %684 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %685 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %686 = load i32, i32* %39, align 4
  %687 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %685, i32 %686
  %688 = load i32, i32* %38, align 4
  %689 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %687, i32 0, i32 %688
  %690 = getelementptr inbounds [576 x double], [576 x double]* %689, i32 0, i32 0
  %691 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %692 = call arm_aapcscc i32 @init_outer_loop(%struct.lame_global_flags* %684, double* %690, %struct.gr_info* %691)
  %693 = icmp ne i32 %692, 0
  br i1 %693, label %712, label %694

; <label>:694:                                    ; preds = %675
  %695 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %696 = load i32, i32* %39, align 4
  %697 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %695, i32 %696
  %698 = load i32, i32* %38, align 4
  %699 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %697, i32 0, i32 %698
  %700 = bitcast %struct.III_scalefac_t* %699 to i8*
  call void @llvm.memset.p0i8.i32(i8* %700, i8 0, i32 244, i32 4, i1 false)
  %701 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %702 = load i32, i32* %39, align 4
  %703 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %701, i32 %702
  %704 = load i32, i32* %38, align 4
  %705 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %703, i32 0, i32 %704
  %706 = getelementptr inbounds [576 x i32], [576 x i32]* %705, i32 0, i32 0
  %707 = bitcast i32* %706 to i8*
  call void @llvm.memset.p0i8.i32(i8* %707, i8 0, i32 2304, i32 4, i1 false)
  %708 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 3
  store double 0.000000e+00, double* %708, align 8
  %709 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 2
  store double 0.000000e+00, double* %709, align 8
  %710 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 1
  store double 0.000000e+00, double* %710, align 8
  %711 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 0
  store double 0.000000e+00, double* %711, align 8
  br label %762

; <label>:712:                                    ; preds = %675
  %713 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %714 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %713, i32 0, i32 22
  %715 = load i32, i32* %714, align 4
  %716 = load i32, i32* %39, align 4
  %717 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %716
  %718 = load i32, i32* %38, align 4
  %719 = getelementptr inbounds [2 x i32], [2 x i32]* %717, i32 0, i32 %718
  %720 = load i32, i32* %719, align 4
  call arm_aapcscc void @set_masking_lower(i32 %715, i32 %720)
  %721 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %722 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %723 = load i32, i32* %39, align 4
  %724 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %722, i32 %723
  %725 = load i32, i32* %38, align 4
  %726 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %724, i32 0, i32 %725
  %727 = getelementptr inbounds [576 x double], [576 x double]* %726, i32 0, i32 0
  %728 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %13, align 4
  %729 = load i32, i32* %39, align 4
  %730 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %728, i32 %729
  %731 = load i32, i32* %38, align 4
  %732 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %730, i32 0, i32 %731
  %733 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %734 = call arm_aapcscc i32 @calc_xmin(%struct.lame_global_flags* %721, double* %727, %struct.III_psy_ratio* %732, %struct.gr_info* %733, %struct.III_psy_xmin* %21)
  %735 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %736 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %737 = load i32, i32* %39, align 4
  %738 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %736, i32 %737
  %739 = load i32, i32* %38, align 4
  %740 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %738, i32 0, i32 %739
  %741 = getelementptr inbounds [576 x double], [576 x double]* %740, i32 0, i32 0
  %742 = load i32, i32* %39, align 4
  %743 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %23, i32 0, i32 %742
  %744 = load i32, i32* %38, align 4
  %745 = getelementptr inbounds [2 x i32], [2 x i32]* %743, i32 0, i32 %744
  %746 = load i32, i32* %745, align 4
  %747 = getelementptr inbounds [4 x double], [4 x double]* %24, i32 0, i32 0
  %748 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %749 = load i32, i32* %39, align 4
  %750 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %748, i32 %749
  %751 = load i32, i32* %38, align 4
  %752 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %750, i32 0, i32 %751
  %753 = getelementptr inbounds [576 x i32], [576 x i32]* %752, i32 0, i32 0
  %754 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %755 = load i32, i32* %39, align 4
  %756 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %754, i32 %755
  %757 = load i32, i32* %38, align 4
  %758 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %756, i32 0, i32 %757
  %759 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %760 = getelementptr inbounds [4 x [21 x double]], [4 x [21 x double]]* %26, i32 0, i32 0
  %761 = load i32, i32* %38, align 4
  call arm_aapcscc void @outer_loop(%struct.lame_global_flags* %735, double* %741, i32 %746, double* %747, %struct.III_psy_xmin* %21, i32* %753, %struct.III_scalefac_t* %758, %struct.gr_info* %759, [21 x double]* %760, i32 %761)
  br label %762

; <label>:762:                                    ; preds = %712, %694
  br label %763

; <label>:763:                                    ; preds = %762, %672, %669
  br label %764

; <label>:764:                                    ; preds = %763
  %765 = load i32, i32* %38, align 4
  %766 = add nsw i32 %765, 1
  store i32 %766, i32* %38, align 4
  br label %660

; <label>:767:                                    ; preds = %660
  br label %768

; <label>:768:                                    ; preds = %767
  %769 = load i32, i32* %39, align 4
  %770 = add nsw i32 %769, 1
  store i32 %770, i32* %39, align 4
  br label %653

; <label>:771:                                    ; preds = %653
  store i32 0, i32* %39, align 4
  br label %772

; <label>:772:                                    ; preds = %823, %771
  %773 = load i32, i32* %39, align 4
  %774 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %775 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %774, i32 0, i32 45
  %776 = load i32, i32* %775, align 4
  %777 = icmp slt i32 %773, %776
  br i1 %777, label %778, label %826

; <label>:778:                                    ; preds = %772
  store i32 0, i32* %38, align 4
  br label %779

; <label>:779:                                    ; preds = %819, %778
  %780 = load i32, i32* %38, align 4
  %781 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %782 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %781, i32 0, i32 46
  %783 = load i32, i32* %782, align 4
  %784 = icmp slt i32 %780, %783
  br i1 %784, label %785, label %822

; <label>:785:                                    ; preds = %779
  %786 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %787 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %786, i32 0, i32 4
  %788 = load i32, i32* %39, align 4
  %789 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %787, i32 0, i32 %788
  %790 = getelementptr inbounds %struct.anon, %struct.anon* %789, i32 0, i32 0
  %791 = load i32, i32* %38, align 4
  %792 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %790, i32 0, i32 %791
  %793 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %792, i32 0, i32 0
  store %struct.gr_info* %793, %struct.gr_info** %22, align 4
  %794 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %795 = load i32, i32* %39, align 4
  %796 = load i32, i32* %38, align 4
  %797 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %798 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %799 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  call arm_aapcscc void @best_scalefac_store(%struct.lame_global_flags* %794, i32 %795, i32 %796, [2 x [576 x i32]]* %797, %struct.III_side_info_t* %798, [2 x %struct.III_scalefac_t]* %799)
  %800 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %801 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %800, i32 0, i32 6
  %802 = load i32, i32* %801, align 4
  %803 = icmp eq i32 %802, 0
  br i1 %803, label %804, label %814

; <label>:804:                                    ; preds = %785
  %805 = load i32, i32* %39, align 4
  %806 = load i32, i32* %38, align 4
  %807 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %808 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %809 = load i32, i32* %39, align 4
  %810 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %808, i32 %809
  %811 = load i32, i32* %38, align 4
  %812 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %810, i32 0, i32 %811
  %813 = getelementptr inbounds [576 x i32], [576 x i32]* %812, i32 0, i32 0
  call arm_aapcscc void @best_huffman_divide(i32 %805, i32 %806, %struct.gr_info* %807, i32* %813)
  br label %814

; <label>:814:                                    ; preds = %804, %785
  %815 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %816 = load %struct.gr_info*, %struct.gr_info** %22, align 4
  %817 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %818 = load i32, i32* %36, align 4
  call arm_aapcscc void @ResvAdjust(%struct.lame_global_flags* %815, %struct.gr_info* %816, %struct.III_side_info_t* %817, i32 %818)
  br label %819

; <label>:819:                                    ; preds = %814
  %820 = load i32, i32* %38, align 4
  %821 = add nsw i32 %820, 1
  store i32 %821, i32* %38, align 4
  br label %779

; <label>:822:                                    ; preds = %779
  br label %823

; <label>:823:                                    ; preds = %822
  %824 = load i32, i32* %39, align 4
  %825 = add nsw i32 %824, 1
  store i32 %825, i32* %39, align 4
  br label %772

; <label>:826:                                    ; preds = %772
  store i32 0, i32* %39, align 4
  br label %827

; <label>:827:                                    ; preds = %873, %826
  %828 = load i32, i32* %39, align 4
  %829 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %830 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %829, i32 0, i32 45
  %831 = load i32, i32* %830, align 4
  %832 = icmp slt i32 %828, %831
  br i1 %832, label %833, label %876

; <label>:833:                                    ; preds = %827
  store i32 0, i32* %38, align 4
  br label %834

; <label>:834:                                    ; preds = %869, %833
  %835 = load i32, i32* %38, align 4
  %836 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %837 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %836, i32 0, i32 46
  %838 = load i32, i32* %837, align 4
  %839 = icmp slt i32 %835, %838
  br i1 %839, label %840, label %872

; <label>:840:                                    ; preds = %834
  store i32 0, i32* %37, align 4
  br label %841

; <label>:841:                                    ; preds = %865, %840
  %842 = load i32, i32* %37, align 4
  %843 = icmp slt i32 %842, 576
  br i1 %843, label %844, label %868

; <label>:844:                                    ; preds = %841
  %845 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %846 = load i32, i32* %39, align 4
  %847 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %845, i32 %846
  %848 = load i32, i32* %38, align 4
  %849 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %847, i32 0, i32 %848
  %850 = load i32, i32* %37, align 4
  %851 = getelementptr inbounds [576 x double], [576 x double]* %849, i32 0, i32 %850
  %852 = load double, double* %851, align 8
  %853 = fcmp olt double %852, 0.000000e+00
  br i1 %853, label %854, label %864

; <label>:854:                                    ; preds = %844
  %855 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  %856 = load i32, i32* %39, align 4
  %857 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %855, i32 %856
  %858 = load i32, i32* %38, align 4
  %859 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %857, i32 0, i32 %858
  %860 = load i32, i32* %37, align 4
  %861 = getelementptr inbounds [576 x i32], [576 x i32]* %859, i32 0, i32 %860
  %862 = load i32, i32* %861, align 4
  %863 = mul nsw i32 %862, -1
  store i32 %863, i32* %861, align 4
  br label %864

; <label>:864:                                    ; preds = %854, %844
  br label %865

; <label>:865:                                    ; preds = %864
  %866 = load i32, i32* %37, align 4
  %867 = add nsw i32 %866, 1
  store i32 %867, i32* %37, align 4
  br label %841

; <label>:868:                                    ; preds = %841
  br label %869

; <label>:869:                                    ; preds = %868
  %870 = load i32, i32* %38, align 4
  %871 = add nsw i32 %870, 1
  store i32 %871, i32* %38, align 4
  br label %834

; <label>:872:                                    ; preds = %834
  br label %873

; <label>:873:                                    ; preds = %872
  %874 = load i32, i32* %39, align 4
  %875 = add nsw i32 %874, 1
  store i32 %875, i32* %39, align 4
  br label %827

; <label>:876:                                    ; preds = %827
  %877 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %878 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %879 = load i32, i32* %36, align 4
  call arm_aapcscc void @ResvFrameEnd(%struct.lame_global_flags* %877, %struct.III_side_info_t* %878, i32 %879)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @VBR_compare(i32, double, double, double, i32, double, double, double) #0 {
  %9 = alloca i32, align 4
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca i32, align 4
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca i32, align 4
  store i32 %0, i32* %9, align 4
  store double %1, double* %10, align 8
  store double %2, double* %11, align 8
  store double %3, double* %12, align 8
  store i32 %4, i32* %13, align 4
  store double %5, double* %14, align 8
  store double %6, double* %15, align 8
  store double %7, double* %16, align 8
  store i32 0, i32* %17, align 4
  %18 = load i32, i32* %13, align 4
  %19 = load i32, i32* %9, align 4
  %20 = icmp sle i32 %18, %19
  br i1 %20, label %21, label %33

; <label>:21:                                     ; preds = %8
  %22 = load double, double* %15, align 8
  %23 = load double, double* %11, align 8
  %24 = fcmp ole double %22, %23
  br i1 %24, label %25, label %33

; <label>:25:                                     ; preds = %21
  %26 = load double, double* %14, align 8
  %27 = load double, double* %10, align 8
  %28 = fcmp ole double %26, %27
  br i1 %28, label %29, label %33

; <label>:29:                                     ; preds = %25
  %30 = load double, double* %16, align 8
  %31 = load double, double* %12, align 8
  %32 = fcmp ole double %30, %31
  br label %33

; <label>:33:                                     ; preds = %29, %25, %21, %8
  %34 = phi i1 [ false, %25 ], [ false, %21 ], [ false, %8 ], [ %32, %29 ]
  %35 = zext i1 %34 to i32
  store i32 %35, i32* %17, align 4
  %36 = load i32, i32* %17, align 4
  ret i32 %36
}

; Function Attrs: nounwind
define arm_aapcscc void @iteration_init(%struct.lame_global_flags*, %struct.III_side_info_t*, [2 x [576 x i32]]*) #0 {
  %4 = alloca %struct.lame_global_flags*, align 4
  %5 = alloca %struct.III_side_info_t*, align 4
  %6 = alloca [2 x [576 x i32]]*, align 4
  %7 = alloca %struct.gr_info*, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %4, align 4
  store %struct.III_side_info_t* %1, %struct.III_side_info_t** %5, align 4
  store [2 x [576 x i32]]* %2, [2 x [576 x i32]]** %6, align 4
  %11 = load %struct.III_side_info_t*, %struct.III_side_info_t** %5, align 4
  %12 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %11, i32 0, i32 2
  store i32 0, i32* %12, align 4
  %13 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %14 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %13, i32 0, i32 39
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %152

; <label>:17:                                     ; preds = %3
  store i32 0, i32* %10, align 4
  br label %18

; <label>:18:                                     ; preds = %37, %17
  %19 = load i32, i32* %10, align 4
  %20 = icmp slt i32 %19, 23
  br i1 %20, label %21, label %40

; <label>:21:                                     ; preds = %18
  %22 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %23 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %22, i32 0, i32 51
  %24 = load i32, i32* %23, align 4
  %25 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %26 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %25, i32 0, i32 43
  %27 = load i32, i32* %26, align 4
  %28 = mul nsw i32 %27, 3
  %29 = add nsw i32 %24, %28
  %30 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i32 0, i32 %29
  %31 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* %30, i32 0, i32 0
  %32 = load i32, i32* %10, align 4
  %33 = getelementptr inbounds [23 x i32], [23 x i32]* %31, i32 0, i32 %32
  %34 = load i32, i32* %33, align 4
  %35 = load i32, i32* %10, align 4
  %36 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %35
  store i32 %34, i32* %36, align 4
  br label %37

; <label>:37:                                     ; preds = %21
  %38 = load i32, i32* %10, align 4
  %39 = add nsw i32 %38, 1
  store i32 %39, i32* %10, align 4
  br label %18

; <label>:40:                                     ; preds = %18
  store i32 0, i32* %10, align 4
  br label %41

; <label>:41:                                     ; preds = %60, %40
  %42 = load i32, i32* %10, align 4
  %43 = icmp slt i32 %42, 14
  br i1 %43, label %44, label %63

; <label>:44:                                     ; preds = %41
  %45 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %46 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %45, i32 0, i32 51
  %47 = load i32, i32* %46, align 4
  %48 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %49 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %48, i32 0, i32 43
  %50 = load i32, i32* %49, align 4
  %51 = mul nsw i32 %50, 3
  %52 = add nsw i32 %47, %51
  %53 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i32 0, i32 %52
  %54 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* %53, i32 0, i32 1
  %55 = load i32, i32* %10, align 4
  %56 = getelementptr inbounds [14 x i32], [14 x i32]* %54, i32 0, i32 %55
  %57 = load i32, i32* %56, align 4
  %58 = load i32, i32* %10, align 4
  %59 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %58
  store i32 %57, i32* %59, align 4
  br label %60

; <label>:60:                                     ; preds = %44
  %61 = load i32, i32* %10, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %10, align 4
  br label %41

; <label>:63:                                     ; preds = %41
  %64 = load %struct.III_side_info_t*, %struct.III_side_info_t** %5, align 4
  %65 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %64, i32 0, i32 0
  store i32 0, i32* %65, align 4
  %66 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  call arm_aapcscc void @compute_ath(%struct.lame_global_flags* %66, double* getelementptr inbounds ([21 x double], [21 x double]* @ATH_l, i32 0, i32 0), double* getelementptr inbounds ([21 x double], [21 x double]* @ATH_s, i32 0, i32 0))
  store i32 0, i32* %10, align 4
  br label %67

; <label>:67:                                     ; preds = %76, %63
  %68 = load i32, i32* %10, align 4
  %69 = icmp slt i32 %68, 8208
  br i1 %69, label %70, label %79

; <label>:70:                                     ; preds = %67
  %71 = load i32, i32* %10, align 4
  %72 = sitofp i32 %71 to double
  %73 = call arm_aapcscc double @pow(double %72, double 0x3FF5555555555555) #7
  %74 = load i32, i32* %10, align 4
  %75 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %74
  store double %73, double* %75, align 8
  br label %76

; <label>:76:                                     ; preds = %70
  %77 = load i32, i32* %10, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %10, align 4
  br label %67

; <label>:79:                                     ; preds = %67
  store i32 0, i32* %10, align 4
  br label %80

; <label>:80:                                     ; preds = %100, %79
  %81 = load i32, i32* %10, align 4
  %82 = icmp slt i32 %81, 8207
  br i1 %82, label %83, label %103

; <label>:83:                                     ; preds = %80
  %84 = load i32, i32* %10, align 4
  %85 = add nsw i32 %84, 1
  %86 = sitofp i32 %85 to double
  %87 = load i32, i32* %10, align 4
  %88 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %87
  %89 = load double, double* %88, align 8
  %90 = load i32, i32* %10, align 4
  %91 = add nsw i32 %90, 1
  %92 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %91
  %93 = load double, double* %92, align 8
  %94 = fadd double %89, %93
  %95 = fmul double 5.000000e-01, %94
  %96 = call arm_aapcscc double @pow(double %95, double 7.500000e-01) #7
  %97 = fsub double %86, %96
  %98 = load i32, i32* %10, align 4
  %99 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %98
  store double %97, double* %99, align 8
  br label %100

; <label>:100:                                    ; preds = %83
  %101 = load i32, i32* %10, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %10, align 4
  br label %80

; <label>:103:                                    ; preds = %80
  %104 = load i32, i32* %10, align 4
  %105 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %104
  store double 5.000000e-01, double* %105, align 8
  store double 0.000000e+00, double* getelementptr inbounds ([8208 x double], [8208 x double]* @adj43asm, i32 0, i32 0), align 8
  store i32 1, i32* %10, align 4
  br label %106

; <label>:106:                                    ; preds = %126, %103
  %107 = load i32, i32* %10, align 4
  %108 = icmp slt i32 %107, 8208
  br i1 %108, label %109, label %129

; <label>:109:                                    ; preds = %106
  %110 = load i32, i32* %10, align 4
  %111 = sitofp i32 %110 to double
  %112 = fsub double %111, 5.000000e-01
  %113 = load i32, i32* %10, align 4
  %114 = sub nsw i32 %113, 1
  %115 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %114
  %116 = load double, double* %115, align 8
  %117 = load i32, i32* %10, align 4
  %118 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %117
  %119 = load double, double* %118, align 8
  %120 = fadd double %116, %119
  %121 = fmul double 5.000000e-01, %120
  %122 = call arm_aapcscc double @pow(double %121, double 7.500000e-01) #7
  %123 = fsub double %112, %122
  %124 = load i32, i32* %10, align 4
  %125 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43asm, i32 0, i32 %124
  store double %123, double* %125, align 8
  br label %126

; <label>:126:                                    ; preds = %109
  %127 = load i32, i32* %10, align 4
  %128 = add nsw i32 %127, 1
  store i32 %128, i32* %10, align 4
  br label %106

; <label>:129:                                    ; preds = %106
  store i32 0, i32* %10, align 4
  br label %130

; <label>:130:                                    ; preds = %148, %129
  %131 = load i32, i32* %10, align 4
  %132 = icmp slt i32 %131, 256
  br i1 %132, label %133, label %151

; <label>:133:                                    ; preds = %130
  %134 = load i32, i32* %10, align 4
  %135 = sub nsw i32 %134, 210
  %136 = sitofp i32 %135 to double
  %137 = fmul double %136, -1.875000e-01
  %138 = call arm_aapcscc double @pow(double 2.000000e+00, double %137) #7
  %139 = load i32, i32* %10, align 4
  %140 = getelementptr inbounds [256 x double], [256 x double]* @ipow20, i32 0, i32 %139
  store double %138, double* %140, align 8
  %141 = load i32, i32* %10, align 4
  %142 = sub nsw i32 %141, 210
  %143 = sitofp i32 %142 to double
  %144 = fmul double %143, 2.500000e-01
  %145 = call arm_aapcscc double @pow(double 2.000000e+00, double %144) #7
  %146 = load i32, i32* %10, align 4
  %147 = getelementptr inbounds [256 x double], [256 x double]* @pow20, i32 0, i32 %146
  store double %145, double* %147, align 8
  br label %148

; <label>:148:                                    ; preds = %133
  %149 = load i32, i32* %10, align 4
  %150 = add nsw i32 %149, 1
  store i32 %150, i32* %10, align 4
  br label %130

; <label>:151:                                    ; preds = %130
  br label %152

; <label>:152:                                    ; preds = %151, %3
  store i32 0, i32* @convert_mdct, align 4
  store i32 0, i32* @reduce_sidechannel, align 4
  %153 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %154 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %153, i32 0, i32 52
  %155 = load i32, i32* %154, align 4
  %156 = icmp eq i32 %155, 2
  br i1 %156, label %157, label %158

; <label>:157:                                    ; preds = %152
  store i32 1, i32* @convert_mdct, align 4
  store i32 1, i32* @reduce_sidechannel, align 4
  br label %158

; <label>:158:                                    ; preds = %157, %152
  store i32 0, i32* %9, align 4
  br label %159

; <label>:159:                                    ; preds = %200, %158
  %160 = load i32, i32* %9, align 4
  %161 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %162 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %161, i32 0, i32 45
  %163 = load i32, i32* %162, align 4
  %164 = icmp slt i32 %160, %163
  br i1 %164, label %165, label %203

; <label>:165:                                    ; preds = %159
  store i32 0, i32* %8, align 4
  br label %166

; <label>:166:                                    ; preds = %196, %165
  %167 = load i32, i32* %8, align 4
  %168 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %169 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %168, i32 0, i32 46
  %170 = load i32, i32* %169, align 4
  %171 = icmp slt i32 %167, %170
  br i1 %171, label %172, label %199

; <label>:172:                                    ; preds = %166
  %173 = load %struct.III_side_info_t*, %struct.III_side_info_t** %5, align 4
  %174 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %173, i32 0, i32 4
  %175 = load i32, i32* %9, align 4
  %176 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %174, i32 0, i32 %175
  %177 = getelementptr inbounds %struct.anon, %struct.anon* %176, i32 0, i32 0
  %178 = load i32, i32* %8, align 4
  %179 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %177, i32 0, i32 %178
  %180 = bitcast %struct.gr_info_ss* %179 to %struct.gr_info*
  store %struct.gr_info* %180, %struct.gr_info** %7, align 4
  %181 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %182 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %181, i32 0, i32 6
  %183 = load i32, i32* %182, align 4
  %184 = icmp eq i32 %183, 2
  br i1 %184, label %185, label %190

; <label>:185:                                    ; preds = %172
  %186 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %187 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %186, i32 0, i32 16
  store i32 0, i32* %187, align 4
  %188 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %189 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %188, i32 0, i32 17
  store i32 0, i32* %189, align 4
  br label %195

; <label>:190:                                    ; preds = %172
  %191 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %192 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %191, i32 0, i32 16
  store i32 21, i32* %192, align 4
  %193 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %194 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %193, i32 0, i32 17
  store i32 12, i32* %194, align 4
  br label %195

; <label>:195:                                    ; preds = %190, %185
  br label %196

; <label>:196:                                    ; preds = %195
  %197 = load i32, i32* %8, align 4
  %198 = add nsw i32 %197, 1
  store i32 %198, i32* %8, align 4
  br label %166

; <label>:199:                                    ; preds = %166
  br label %200

; <label>:200:                                    ; preds = %199
  %201 = load i32, i32* %9, align 4
  %202 = add nsw i32 %201, 1
  store i32 %202, i32* %9, align 4
  br label %159

; <label>:203:                                    ; preds = %159
  store i32 0, i32* %8, align 4
  br label %204

; <label>:204:                                    ; preds = %225, %203
  %205 = load i32, i32* %8, align 4
  %206 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %207 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %206, i32 0, i32 46
  %208 = load i32, i32* %207, align 4
  %209 = icmp slt i32 %205, %208
  br i1 %209, label %210, label %228

; <label>:210:                                    ; preds = %204
  store i32 0, i32* %10, align 4
  br label %211

; <label>:211:                                    ; preds = %221, %210
  %212 = load i32, i32* %10, align 4
  %213 = icmp slt i32 %212, 4
  br i1 %213, label %214, label %224

; <label>:214:                                    ; preds = %211
  %215 = load %struct.III_side_info_t*, %struct.III_side_info_t** %5, align 4
  %216 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %215, i32 0, i32 3
  %217 = load i32, i32* %8, align 4
  %218 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %216, i32 0, i32 %217
  %219 = load i32, i32* %10, align 4
  %220 = getelementptr inbounds [4 x i32], [4 x i32]* %218, i32 0, i32 %219
  store i32 0, i32* %220, align 4
  br label %221

; <label>:221:                                    ; preds = %214
  %222 = load i32, i32* %10, align 4
  %223 = add nsw i32 %222, 1
  store i32 %223, i32* %10, align 4
  br label %211

; <label>:224:                                    ; preds = %211
  br label %225

; <label>:225:                                    ; preds = %224
  %226 = load i32, i32* %8, align 4
  %227 = add nsw i32 %226, 1
  store i32 %227, i32* %8, align 4
  br label %204

; <label>:228:                                    ; preds = %204
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @compute_ath(%struct.lame_global_flags*, double*, double*) #0 {
  %4 = alloca %struct.lame_global_flags*, align 4
  %5 = alloca double*, align 4
  %6 = alloca double*, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %4, align 4
  store double* %1, double** %5, align 4
  store double* %2, double** %6, align 4
  %13 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %14 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %13, i32 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = sitofp i32 %15 to double
  %17 = fdiv double %16, 1.000000e+03
  store double %17, double* %12, align 8
  store i32 0, i32* %7, align 4
  br label %18

; <label>:18:                                     ; preds = %67, %3
  %19 = load i32, i32* %7, align 4
  %20 = icmp slt i32 %19, 21
  br i1 %20, label %21, label %70

; <label>:21:                                     ; preds = %18
  %22 = load i32, i32* %7, align 4
  %23 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %22
  %24 = load i32, i32* %23, align 4
  store i32 %24, i32* %9, align 4
  %25 = load i32, i32* %7, align 4
  %26 = add nsw i32 %25, 1
  %27 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %26
  %28 = load i32, i32* %27, align 4
  store i32 %28, i32* %10, align 4
  %29 = load double*, double** %5, align 4
  %30 = load i32, i32* %7, align 4
  %31 = getelementptr inbounds double, double* %29, i32 %30
  store double 1.000000e+99, double* %31, align 8
  %32 = load i32, i32* %9, align 4
  store i32 %32, i32* %8, align 4
  br label %33

; <label>:33:                                     ; preds = %63, %21
  %34 = load i32, i32* %8, align 4
  %35 = load i32, i32* %10, align 4
  %36 = icmp slt i32 %34, %35
  br i1 %36, label %37, label %66

; <label>:37:                                     ; preds = %33
  %38 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %39 = load double, double* %12, align 8
  %40 = load i32, i32* %8, align 4
  %41 = sitofp i32 %40 to double
  %42 = fmul double %39, %41
  %43 = fdiv double %42, 1.152000e+03
  %44 = call arm_aapcscc double @ATHformula(%struct.lame_global_flags* %38, double %43)
  store double %44, double* %11, align 8
  %45 = load double*, double** %5, align 4
  %46 = load i32, i32* %7, align 4
  %47 = getelementptr inbounds double, double* %45, i32 %46
  %48 = load double, double* %47, align 8
  %49 = load double, double* %11, align 8
  %50 = fcmp olt double %48, %49
  br i1 %50, label %51, label %56

; <label>:51:                                     ; preds = %37
  %52 = load double*, double** %5, align 4
  %53 = load i32, i32* %7, align 4
  %54 = getelementptr inbounds double, double* %52, i32 %53
  %55 = load double, double* %54, align 8
  br label %58

; <label>:56:                                     ; preds = %37
  %57 = load double, double* %11, align 8
  br label %58

; <label>:58:                                     ; preds = %56, %51
  %59 = phi double [ %55, %51 ], [ %57, %56 ]
  %60 = load double*, double** %5, align 4
  %61 = load i32, i32* %7, align 4
  %62 = getelementptr inbounds double, double* %60, i32 %61
  store double %59, double* %62, align 8
  br label %63

; <label>:63:                                     ; preds = %58
  %64 = load i32, i32* %8, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %8, align 4
  br label %33

; <label>:66:                                     ; preds = %33
  br label %67

; <label>:67:                                     ; preds = %66
  %68 = load i32, i32* %7, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %7, align 4
  br label %18

; <label>:70:                                     ; preds = %18
  store i32 0, i32* %7, align 4
  br label %71

; <label>:71:                                     ; preds = %120, %70
  %72 = load i32, i32* %7, align 4
  %73 = icmp slt i32 %72, 12
  br i1 %73, label %74, label %123

; <label>:74:                                     ; preds = %71
  %75 = load i32, i32* %7, align 4
  %76 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %75
  %77 = load i32, i32* %76, align 4
  store i32 %77, i32* %9, align 4
  %78 = load i32, i32* %7, align 4
  %79 = add nsw i32 %78, 1
  %80 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %79
  %81 = load i32, i32* %80, align 4
  store i32 %81, i32* %10, align 4
  %82 = load double*, double** %6, align 4
  %83 = load i32, i32* %7, align 4
  %84 = getelementptr inbounds double, double* %82, i32 %83
  store double 1.000000e+99, double* %84, align 8
  %85 = load i32, i32* %9, align 4
  store i32 %85, i32* %8, align 4
  br label %86

; <label>:86:                                     ; preds = %116, %74
  %87 = load i32, i32* %8, align 4
  %88 = load i32, i32* %10, align 4
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %90, label %119

; <label>:90:                                     ; preds = %86
  %91 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %92 = load double, double* %12, align 8
  %93 = load i32, i32* %8, align 4
  %94 = sitofp i32 %93 to double
  %95 = fmul double %92, %94
  %96 = fdiv double %95, 3.840000e+02
  %97 = call arm_aapcscc double @ATHformula(%struct.lame_global_flags* %91, double %96)
  store double %97, double* %11, align 8
  %98 = load double*, double** %6, align 4
  %99 = load i32, i32* %7, align 4
  %100 = getelementptr inbounds double, double* %98, i32 %99
  %101 = load double, double* %100, align 8
  %102 = load double, double* %11, align 8
  %103 = fcmp olt double %101, %102
  br i1 %103, label %104, label %109

; <label>:104:                                    ; preds = %90
  %105 = load double*, double** %6, align 4
  %106 = load i32, i32* %7, align 4
  %107 = getelementptr inbounds double, double* %105, i32 %106
  %108 = load double, double* %107, align 8
  br label %111

; <label>:109:                                    ; preds = %90
  %110 = load double, double* %11, align 8
  br label %111

; <label>:111:                                    ; preds = %109, %104
  %112 = phi double [ %108, %104 ], [ %110, %109 ]
  %113 = load double*, double** %6, align 4
  %114 = load i32, i32* %7, align 4
  %115 = getelementptr inbounds double, double* %113, i32 %114
  store double %112, double* %115, align 8
  br label %116

; <label>:116:                                    ; preds = %111
  %117 = load i32, i32* %8, align 4
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %8, align 4
  br label %86

; <label>:119:                                    ; preds = %86
  br label %120

; <label>:120:                                    ; preds = %119
  %121 = load i32, i32* %7, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %7, align 4
  br label %71

; <label>:123:                                    ; preds = %71
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc double @ATHformula(%struct.lame_global_flags*, double) #0 {
  %3 = alloca %struct.lame_global_flags*, align 4
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %3, align 4
  store double %1, double* %4, align 8
  %6 = load double, double* %4, align 8
  %7 = fcmp ogt double 2.000000e-02, %6
  br i1 %7, label %8, label %9

; <label>:8:                                      ; preds = %2
  br label %11

; <label>:9:                                      ; preds = %2
  %10 = load double, double* %4, align 8
  br label %11

; <label>:11:                                     ; preds = %9, %8
  %12 = phi double [ 2.000000e-02, %8 ], [ %10, %9 ]
  store double %12, double* %4, align 8
  %13 = load double, double* %4, align 8
  %14 = call arm_aapcscc double @pow(double %13, double -8.000000e-01) #7
  %15 = fmul double 3.640000e+00, %14
  %16 = load double, double* %4, align 8
  %17 = fsub double %16, 3.300000e+00
  %18 = call arm_aapcscc double @pow(double %17, double 2.000000e+00) #7
  %19 = fmul double -6.000000e-01, %18
  %20 = call arm_aapcscc double @exp(double %19) #7
  %21 = fmul double 6.500000e+00, %20
  %22 = fsub double %15, %21
  %23 = load double, double* %4, align 8
  %24 = call arm_aapcscc double @pow(double %23, double 4.000000e+00) #7
  %25 = fmul double 1.000000e-03, %24
  %26 = fadd double %22, %25
  store double %26, double* %5, align 8
  %27 = load %struct.lame_global_flags*, %struct.lame_global_flags** %3, align 4
  %28 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %27, i32 0, i32 34
  %29 = load i32, i32* %28, align 4
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %34

; <label>:31:                                     ; preds = %11
  %32 = load double, double* %5, align 8
  %33 = fsub double %32, 2.000000e+02
  store double %33, double* %5, align 8
  br label %37

; <label>:34:                                     ; preds = %11
  %35 = load double, double* %5, align 8
  %36 = fsub double %35, 1.140000e+02
  store double %36, double* %5, align 8
  br label %37

; <label>:37:                                     ; preds = %34, %31
  %38 = load double, double* %5, align 8
  %39 = fdiv double %38, 1.000000e+01
  %40 = call arm_aapcscc double @pow(double 1.000000e+01, double %39) #7
  store double %40, double* %5, align 8
  %41 = load double, double* %5, align 8
  ret double %41
}

; Function Attrs: nounwind
define arm_aapcscc void @ms_convert([576 x double]*, [576 x double]*) #0 {
  %3 = alloca [576 x double]*, align 4
  %4 = alloca [576 x double]*, align 4
  %5 = alloca i32, align 4
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  store [576 x double]* %0, [576 x double]** %3, align 4
  store [576 x double]* %1, [576 x double]** %4, align 4
  store i32 0, i32* %5, align 4
  br label %8

; <label>:8:                                      ; preds = %38, %2
  %9 = load i32, i32* %5, align 4
  %10 = icmp slt i32 %9, 576
  br i1 %10, label %11, label %41

; <label>:11:                                     ; preds = %8
  %12 = load [576 x double]*, [576 x double]** %4, align 4
  %13 = getelementptr inbounds [576 x double], [576 x double]* %12, i32 0
  %14 = load i32, i32* %5, align 4
  %15 = getelementptr inbounds [576 x double], [576 x double]* %13, i32 0, i32 %14
  %16 = load double, double* %15, align 8
  store double %16, double* %6, align 8
  %17 = load [576 x double]*, [576 x double]** %4, align 4
  %18 = getelementptr inbounds [576 x double], [576 x double]* %17, i32 1
  %19 = load i32, i32* %5, align 4
  %20 = getelementptr inbounds [576 x double], [576 x double]* %18, i32 0, i32 %19
  %21 = load double, double* %20, align 8
  store double %21, double* %7, align 8
  %22 = load double, double* %6, align 8
  %23 = load double, double* %7, align 8
  %24 = fadd double %22, %23
  %25 = fmul double %24, 0x3FE6A09E667F3BCD
  %26 = load [576 x double]*, [576 x double]** %3, align 4
  %27 = getelementptr inbounds [576 x double], [576 x double]* %26, i32 0
  %28 = load i32, i32* %5, align 4
  %29 = getelementptr inbounds [576 x double], [576 x double]* %27, i32 0, i32 %28
  store double %25, double* %29, align 8
  %30 = load double, double* %6, align 8
  %31 = load double, double* %7, align 8
  %32 = fsub double %30, %31
  %33 = fmul double %32, 0x3FE6A09E667F3BCD
  %34 = load [576 x double]*, [576 x double]** %3, align 4
  %35 = getelementptr inbounds [576 x double], [576 x double]* %34, i32 1
  %36 = load i32, i32* %5, align 4
  %37 = getelementptr inbounds [576 x double], [576 x double]* %35, i32 0, i32 %36
  store double %33, double* %37, align 8
  br label %38

; <label>:38:                                     ; preds = %11
  %39 = load i32, i32* %5, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %5, align 4
  br label %8

; <label>:41:                                     ; preds = %8
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @on_pe(%struct.lame_global_flags*, [2 x double]*, %struct.III_side_info_t*, i32*, i32, i32) #0 {
  %7 = alloca %struct.lame_global_flags*, align 4
  %8 = alloca [2 x double]*, align 4
  %9 = alloca %struct.III_side_info_t*, align 4
  %10 = alloca i32*, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.gr_info*, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca [2 x i32], align 4
  %18 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %7, align 4
  store [2 x double]* %1, [2 x double]** %8, align 4
  store %struct.III_side_info_t* %2, %struct.III_side_info_t** %9, align 4
  store i32* %3, i32** %10, align 4
  store i32 %4, i32* %11, align 4
  store i32 %5, i32* %12, align 4
  %19 = load i32, i32* %11, align 4
  %20 = load i32, i32* %12, align 4
  call arm_aapcscc void @ResvMaxBits(i32 %19, i32* %15, i32* %14, i32 %20)
  store i32 0, i32* %18, align 4
  br label %21

; <label>:21:                                     ; preds = %130, %6
  %22 = load i32, i32* %18, align 4
  %23 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %24 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %23, i32 0, i32 46
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %22, %25
  br i1 %26, label %27, label %133

; <label>:27:                                     ; preds = %21
  %28 = load %struct.III_side_info_t*, %struct.III_side_info_t** %9, align 4
  %29 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %28, i32 0, i32 4
  %30 = load i32, i32* %12, align 4
  %31 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %29, i32 0, i32 %30
  %32 = getelementptr inbounds %struct.anon, %struct.anon* %31, i32 0, i32 0
  %33 = load i32, i32* %18, align 4
  %34 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %32, i32 0, i32 %33
  %35 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %34, i32 0, i32 0
  store %struct.gr_info* %35, %struct.gr_info** %13, align 4
  %36 = load i32, i32* %15, align 4
  %37 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %38 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %37, i32 0, i32 46
  %39 = load i32, i32* %38, align 4
  %40 = sdiv i32 %36, %39
  %41 = load i32*, i32** %10, align 4
  %42 = load i32, i32* %18, align 4
  %43 = getelementptr inbounds i32, i32* %41, i32 %42
  store i32 %40, i32* %43, align 4
  store i32 0, i32* %16, align 4
  %44 = load [2 x double]*, [2 x double]** %8, align 4
  %45 = load i32, i32* %12, align 4
  %46 = getelementptr inbounds [2 x double], [2 x double]* %44, i32 %45
  %47 = load i32, i32* %18, align 4
  %48 = getelementptr inbounds [2 x double], [2 x double]* %46, i32 0, i32 %47
  %49 = load double, double* %48, align 8
  %50 = fsub double %49, 7.500000e+02
  %51 = fdiv double %50, 1.550000e+00
  %52 = fptosi double %51 to i32
  %53 = load i32, i32* %18, align 4
  %54 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %53
  store i32 %52, i32* %54, align 4
  %55 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %56 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %55, i32 0, i32 6
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 2
  br i1 %58, label %59, label %68

; <label>:59:                                     ; preds = %27
  %60 = load i32, i32* %18, align 4
  %61 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %60
  %62 = load i32, i32* %61, align 4
  %63 = icmp slt i32 %62, 500
  br i1 %63, label %64, label %67

; <label>:64:                                     ; preds = %59
  %65 = load i32, i32* %18, align 4
  %66 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %65
  store i32 500, i32* %66, align 4
  br label %67

; <label>:67:                                     ; preds = %64, %59
  br label %68

; <label>:68:                                     ; preds = %67, %27
  %69 = load i32, i32* %18, align 4
  %70 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %69
  %71 = load i32, i32* %70, align 4
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %73, label %76

; <label>:73:                                     ; preds = %68
  %74 = load i32, i32* %18, align 4
  %75 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %74
  store i32 0, i32* %75, align 4
  br label %76

; <label>:76:                                     ; preds = %73, %68
  %77 = load i32, i32* %18, align 4
  %78 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %77
  %79 = load i32, i32* %78, align 4
  %80 = load i32, i32* %16, align 4
  %81 = add nsw i32 %80, %79
  store i32 %81, i32* %16, align 4
  %82 = load i32, i32* %16, align 4
  %83 = load i32, i32* %14, align 4
  %84 = icmp sgt i32 %82, %83
  br i1 %84, label %85, label %95

; <label>:85:                                     ; preds = %76
  %86 = load i32, i32* %14, align 4
  %87 = load i32, i32* %18, align 4
  %88 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %87
  %89 = load i32, i32* %88, align 4
  %90 = mul nsw i32 %86, %89
  %91 = load i32, i32* %16, align 4
  %92 = sdiv i32 %90, %91
  %93 = load i32, i32* %18, align 4
  %94 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %93
  store i32 %92, i32* %94, align 4
  br label %95

; <label>:95:                                     ; preds = %85, %76
  %96 = load i32*, i32** %10, align 4
  %97 = load i32, i32* %18, align 4
  %98 = getelementptr inbounds i32, i32* %96, i32 %97
  %99 = load i32, i32* %98, align 4
  %100 = load i32, i32* %18, align 4
  %101 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %100
  %102 = load i32, i32* %101, align 4
  %103 = add nsw i32 %99, %102
  %104 = icmp sgt i32 %103, 4095
  br i1 %104, label %105, label %113

; <label>:105:                                    ; preds = %95
  %106 = load i32*, i32** %10, align 4
  %107 = load i32, i32* %18, align 4
  %108 = getelementptr inbounds i32, i32* %106, i32 %107
  %109 = load i32, i32* %108, align 4
  %110 = sub nsw i32 4095, %109
  %111 = load i32, i32* %18, align 4
  %112 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %111
  store i32 %110, i32* %112, align 4
  br label %113

; <label>:113:                                    ; preds = %105, %95
  %114 = load i32*, i32** %10, align 4
  %115 = load i32, i32* %18, align 4
  %116 = getelementptr inbounds i32, i32* %114, i32 %115
  %117 = load i32, i32* %116, align 4
  %118 = load i32, i32* %18, align 4
  %119 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %118
  %120 = load i32, i32* %119, align 4
  %121 = add nsw i32 %117, %120
  %122 = load i32*, i32** %10, align 4
  %123 = load i32, i32* %18, align 4
  %124 = getelementptr inbounds i32, i32* %122, i32 %123
  store i32 %121, i32* %124, align 4
  %125 = load i32, i32* %18, align 4
  %126 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i32 0, i32 %125
  %127 = load i32, i32* %126, align 4
  %128 = load i32, i32* %14, align 4
  %129 = sub nsw i32 %128, %127
  store i32 %129, i32* %14, align 4
  br label %130

; <label>:130:                                    ; preds = %113
  %131 = load i32, i32* %18, align 4
  %132 = add nsw i32 %131, 1
  store i32 %132, i32* %18, align 4
  br label %21

; <label>:133:                                    ; preds = %21
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @reduce_side(i32*, double, i32) #0 {
  %4 = alloca i32*, align 4
  %5 = alloca double, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca float, align 4
  %10 = alloca i32, align 4
  store i32* %0, i32** %4, align 4
  store double %1, double* %5, align 8
  store i32 %2, i32* %6, align 4
  store i32 2, i32* %8, align 4
  %11 = load double, double* %5, align 8
  %12 = fsub double 5.000000e-01, %11
  %13 = fmul double 3.300000e-01, %12
  %14 = fdiv double %13, 5.000000e-01
  %15 = fptrunc double %14 to float
  store float %15, float* %9, align 4
  %16 = load float, float* %9, align 4
  %17 = fcmp olt float %16, 0.000000e+00
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %3
  store float 0.000000e+00, float* %9, align 4
  br label %19

; <label>:19:                                     ; preds = %18, %3
  %20 = load i32*, i32** %4, align 4
  %21 = getelementptr inbounds i32, i32* %20, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp sge i32 %22, 125
  br i1 %23, label %24, label %74

; <label>:24:                                     ; preds = %19
  %25 = load i32*, i32** %4, align 4
  %26 = getelementptr inbounds i32, i32* %25, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = sitofp i32 %27 to float
  %29 = load i32*, i32** %4, align 4
  %30 = getelementptr inbounds i32, i32* %29, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = sitofp i32 %31 to float
  %33 = load float, float* %9, align 4
  %34 = fmul float %32, %33
  %35 = fsub float %28, %34
  %36 = fcmp ogt float %35, 1.250000e+02
  br i1 %36, label %37, label %62

; <label>:37:                                     ; preds = %24
  %38 = load i32*, i32** %4, align 4
  %39 = getelementptr inbounds i32, i32* %38, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = sitofp i32 %40 to float
  %42 = load float, float* %9, align 4
  %43 = fmul float %41, %42
  %44 = load i32*, i32** %4, align 4
  %45 = getelementptr inbounds i32, i32* %44, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = sitofp i32 %46 to float
  %48 = fadd float %47, %43
  %49 = fptosi float %48 to i32
  store i32 %49, i32* %45, align 4
  %50 = load i32*, i32** %4, align 4
  %51 = getelementptr inbounds i32, i32* %50, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = sitofp i32 %52 to float
  %54 = load float, float* %9, align 4
  %55 = fmul float %53, %54
  %56 = load i32*, i32** %4, align 4
  %57 = getelementptr inbounds i32, i32* %56, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = sitofp i32 %58 to float
  %60 = fsub float %59, %55
  %61 = fptosi float %60 to i32
  store i32 %61, i32* %57, align 4
  br label %73

; <label>:62:                                     ; preds = %24
  %63 = load i32*, i32** %4, align 4
  %64 = getelementptr inbounds i32, i32* %63, i32 1
  %65 = load i32, i32* %64, align 4
  %66 = sub nsw i32 %65, 125
  %67 = load i32*, i32** %4, align 4
  %68 = getelementptr inbounds i32, i32* %67, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = add nsw i32 %69, %66
  store i32 %70, i32* %68, align 4
  %71 = load i32*, i32** %4, align 4
  %72 = getelementptr inbounds i32, i32* %71, i32 1
  store i32 125, i32* %72, align 4
  br label %73

; <label>:73:                                     ; preds = %62, %37
  br label %74

; <label>:74:                                     ; preds = %73, %19
  store i32 0, i32* %7, align 4
  br label %75

; <label>:75:                                     ; preds = %103, %74
  %76 = load i32, i32* %7, align 4
  %77 = load i32, i32* %8, align 4
  %78 = icmp slt i32 %76, %77
  br i1 %78, label %79, label %106

; <label>:79:                                     ; preds = %75
  %80 = load i32, i32* %6, align 4
  %81 = sdiv i32 %80, 2
  %82 = add nsw i32 %81, 1200
  %83 = icmp slt i32 4095, %82
  br i1 %83, label %84, label %85

; <label>:84:                                     ; preds = %79
  br label %89

; <label>:85:                                     ; preds = %79
  %86 = load i32, i32* %6, align 4
  %87 = sdiv i32 %86, 2
  %88 = add nsw i32 %87, 1200
  br label %89

; <label>:89:                                     ; preds = %85, %84
  %90 = phi i32 [ 4095, %84 ], [ %88, %85 ]
  store i32 %90, i32* %10, align 4
  %91 = load i32*, i32** %4, align 4
  %92 = load i32, i32* %7, align 4
  %93 = getelementptr inbounds i32, i32* %91, i32 %92
  %94 = load i32, i32* %93, align 4
  %95 = load i32, i32* %10, align 4
  %96 = icmp sgt i32 %94, %95
  br i1 %96, label %97, label %102

; <label>:97:                                     ; preds = %89
  %98 = load i32, i32* %10, align 4
  %99 = load i32*, i32** %4, align 4
  %100 = load i32, i32* %7, align 4
  %101 = getelementptr inbounds i32, i32* %99, i32 %100
  store i32 %98, i32* %101, align 4
  br label %102

; <label>:102:                                    ; preds = %97, %89
  br label %103

; <label>:103:                                    ; preds = %102
  %104 = load i32, i32* %7, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %7, align 4
  br label %75

; <label>:106:                                    ; preds = %75
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @inner_loop(%struct.lame_global_flags*, double*, i32*, i32, %struct.gr_info*) #0 {
  %6 = alloca %struct.lame_global_flags*, align 4
  %7 = alloca double*, align 4
  %8 = alloca i32*, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.gr_info*, align 4
  %11 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %6, align 4
  store double* %1, double** %7, align 4
  store i32* %2, i32** %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.gr_info* %4, %struct.gr_info** %10, align 4
  %12 = load i32, i32* %9, align 4
  %13 = icmp sge i32 %12, 0
  br i1 %13, label %15, label %14

; <label>:14:                                     ; preds = %5
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.254, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1.255, i32 0, i32 0), i32 431, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__.inner_loop, i32 0, i32 0))
  br label %15

; <label>:15:                                     ; preds = %14, %5
  %16 = phi i1 [ true, %5 ], [ false, %14 ]
  %17 = zext i1 %16 to i32
  %18 = load %struct.gr_info*, %struct.gr_info** %10, align 4
  %19 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = add i32 %20, -1
  store i32 %21, i32* %19, align 4
  br label %22

; <label>:22:                                     ; preds = %32, %15
  %23 = load %struct.gr_info*, %struct.gr_info** %10, align 4
  %24 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %23, i32 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = add i32 %25, 1
  store i32 %26, i32* %24, align 4
  %27 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %28 = load i32*, i32** %8, align 4
  %29 = load double*, double** %7, align 4
  %30 = load %struct.gr_info*, %struct.gr_info** %10, align 4
  %31 = call arm_aapcscc i32 @count_bits(%struct.lame_global_flags* %27, i32* %28, double* %29, %struct.gr_info* %30)
  store i32 %31, i32* %11, align 4
  br label %32

; <label>:32:                                     ; preds = %22
  %33 = load i32, i32* %11, align 4
  %34 = load i32, i32* %9, align 4
  %35 = icmp sgt i32 %33, %34
  br i1 %35, label %22, label %36

; <label>:36:                                     ; preds = %32
  %37 = load i32, i32* %11, align 4
  ret i32 %37
}

; Function Attrs: nounwind
define arm_aapcscc i32 @scale_bitcount(%struct.III_scalefac_t*, %struct.gr_info*) #0 {
  %3 = alloca %struct.III_scalefac_t*, align 4
  %4 = alloca %struct.gr_info*, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32*, align 4
  store %struct.III_scalefac_t* %0, %struct.III_scalefac_t** %3, align 4
  store %struct.gr_info* %1, %struct.gr_info** %4, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  store i32 2, i32* %10, align 4
  %12 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %13 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %12, i32 0, i32 6
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 2
  br i1 %15, label %16, label %77

; <label>:16:                                     ; preds = %2
  store i32* getelementptr inbounds ([16 x i32], [16 x i32]* @scale_bitcount.slen1_tab, i32 0, i32 0), i32** %11, align 4
  store i32 0, i32* %5, align 4
  br label %17

; <label>:17:                                     ; preds = %73, %16
  %18 = load i32, i32* %5, align 4
  %19 = icmp slt i32 %18, 3
  br i1 %19, label %20, label %76

; <label>:20:                                     ; preds = %17
  store i32 0, i32* %7, align 4
  br label %21

; <label>:21:                                     ; preds = %43, %20
  %22 = load i32, i32* %7, align 4
  %23 = icmp slt i32 %22, 6
  br i1 %23, label %24, label %46

; <label>:24:                                     ; preds = %21
  %25 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %26 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %25, i32 0, i32 1
  %27 = load i32, i32* %7, align 4
  %28 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %26, i32 0, i32 %27
  %29 = load i32, i32* %5, align 4
  %30 = getelementptr inbounds [3 x i32], [3 x i32]* %28, i32 0, i32 %29
  %31 = load i32, i32* %30, align 4
  %32 = load i32, i32* %8, align 4
  %33 = icmp sgt i32 %31, %32
  br i1 %33, label %34, label %42

; <label>:34:                                     ; preds = %24
  %35 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %36 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %35, i32 0, i32 1
  %37 = load i32, i32* %7, align 4
  %38 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %36, i32 0, i32 %37
  %39 = load i32, i32* %5, align 4
  %40 = getelementptr inbounds [3 x i32], [3 x i32]* %38, i32 0, i32 %39
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %8, align 4
  br label %42

; <label>:42:                                     ; preds = %34, %24
  br label %43

; <label>:43:                                     ; preds = %42
  %44 = load i32, i32* %7, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %7, align 4
  br label %21

; <label>:46:                                     ; preds = %21
  store i32 6, i32* %7, align 4
  br label %47

; <label>:47:                                     ; preds = %69, %46
  %48 = load i32, i32* %7, align 4
  %49 = icmp slt i32 %48, 12
  br i1 %49, label %50, label %72

; <label>:50:                                     ; preds = %47
  %51 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %52 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %51, i32 0, i32 1
  %53 = load i32, i32* %7, align 4
  %54 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %52, i32 0, i32 %53
  %55 = load i32, i32* %5, align 4
  %56 = getelementptr inbounds [3 x i32], [3 x i32]* %54, i32 0, i32 %55
  %57 = load i32, i32* %56, align 4
  %58 = load i32, i32* %9, align 4
  %59 = icmp sgt i32 %57, %58
  br i1 %59, label %60, label %68

; <label>:60:                                     ; preds = %50
  %61 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %62 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %61, i32 0, i32 1
  %63 = load i32, i32* %7, align 4
  %64 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %62, i32 0, i32 %63
  %65 = load i32, i32* %5, align 4
  %66 = getelementptr inbounds [3 x i32], [3 x i32]* %64, i32 0, i32 %65
  %67 = load i32, i32* %66, align 4
  store i32 %67, i32* %9, align 4
  br label %68

; <label>:68:                                     ; preds = %60, %50
  br label %69

; <label>:69:                                     ; preds = %68
  %70 = load i32, i32* %7, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %7, align 4
  br label %47

; <label>:72:                                     ; preds = %47
  br label %73

; <label>:73:                                     ; preds = %72
  %74 = load i32, i32* %5, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %5, align 4
  br label %17

; <label>:76:                                     ; preds = %17
  br label %170

; <label>:77:                                     ; preds = %2
  store i32* getelementptr inbounds ([16 x i32], [16 x i32]* @scale_bitcount.slen2_tab, i32 0, i32 0), i32** %11, align 4
  store i32 0, i32* %7, align 4
  br label %78

; <label>:78:                                     ; preds = %96, %77
  %79 = load i32, i32* %7, align 4
  %80 = icmp slt i32 %79, 11
  br i1 %80, label %81, label %99

; <label>:81:                                     ; preds = %78
  %82 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %83 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %82, i32 0, i32 0
  %84 = load i32, i32* %7, align 4
  %85 = getelementptr inbounds [22 x i32], [22 x i32]* %83, i32 0, i32 %84
  %86 = load i32, i32* %85, align 4
  %87 = load i32, i32* %8, align 4
  %88 = icmp sgt i32 %86, %87
  br i1 %88, label %89, label %95

; <label>:89:                                     ; preds = %81
  %90 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %91 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %90, i32 0, i32 0
  %92 = load i32, i32* %7, align 4
  %93 = getelementptr inbounds [22 x i32], [22 x i32]* %91, i32 0, i32 %92
  %94 = load i32, i32* %93, align 4
  store i32 %94, i32* %8, align 4
  br label %95

; <label>:95:                                     ; preds = %89, %81
  br label %96

; <label>:96:                                     ; preds = %95
  %97 = load i32, i32* %7, align 4
  %98 = add nsw i32 %97, 1
  store i32 %98, i32* %7, align 4
  br label %78

; <label>:99:                                     ; preds = %78
  %100 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %101 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %100, i32 0, i32 12
  %102 = load i32, i32* %101, align 4
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %147, label %104

; <label>:104:                                    ; preds = %99
  store i32 11, i32* %7, align 4
  br label %105

; <label>:105:                                    ; preds = %120, %104
  %106 = load i32, i32* %7, align 4
  %107 = icmp slt i32 %106, 21
  br i1 %107, label %108, label %123

; <label>:108:                                    ; preds = %105
  %109 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %110 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %109, i32 0, i32 0
  %111 = load i32, i32* %7, align 4
  %112 = getelementptr inbounds [22 x i32], [22 x i32]* %110, i32 0, i32 %111
  %113 = load i32, i32* %112, align 4
  %114 = load i32, i32* %7, align 4
  %115 = getelementptr inbounds [21 x i32], [21 x i32]* @pretab, i32 0, i32 %114
  %116 = load i32, i32* %115, align 4
  %117 = icmp slt i32 %113, %116
  br i1 %117, label %118, label %119

; <label>:118:                                    ; preds = %108
  br label %123

; <label>:119:                                    ; preds = %108
  br label %120

; <label>:120:                                    ; preds = %119
  %121 = load i32, i32* %7, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %7, align 4
  br label %105

; <label>:123:                                    ; preds = %118, %105
  %124 = load i32, i32* %7, align 4
  %125 = icmp eq i32 %124, 21
  br i1 %125, label %126, label %146

; <label>:126:                                    ; preds = %123
  %127 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %128 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %127, i32 0, i32 12
  store i32 1, i32* %128, align 4
  store i32 11, i32* %7, align 4
  br label %129

; <label>:129:                                    ; preds = %142, %126
  %130 = load i32, i32* %7, align 4
  %131 = icmp slt i32 %130, 21
  br i1 %131, label %132, label %145

; <label>:132:                                    ; preds = %129
  %133 = load i32, i32* %7, align 4
  %134 = getelementptr inbounds [21 x i32], [21 x i32]* @pretab, i32 0, i32 %133
  %135 = load i32, i32* %134, align 4
  %136 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %137 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %136, i32 0, i32 0
  %138 = load i32, i32* %7, align 4
  %139 = getelementptr inbounds [22 x i32], [22 x i32]* %137, i32 0, i32 %138
  %140 = load i32, i32* %139, align 4
  %141 = sub nsw i32 %140, %135
  store i32 %141, i32* %139, align 4
  br label %142

; <label>:142:                                    ; preds = %132
  %143 = load i32, i32* %7, align 4
  %144 = add nsw i32 %143, 1
  store i32 %144, i32* %7, align 4
  br label %129

; <label>:145:                                    ; preds = %129
  br label %146

; <label>:146:                                    ; preds = %145, %123
  br label %147

; <label>:147:                                    ; preds = %146, %99
  store i32 11, i32* %7, align 4
  br label %148

; <label>:148:                                    ; preds = %166, %147
  %149 = load i32, i32* %7, align 4
  %150 = icmp slt i32 %149, 21
  br i1 %150, label %151, label %169

; <label>:151:                                    ; preds = %148
  %152 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %153 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %152, i32 0, i32 0
  %154 = load i32, i32* %7, align 4
  %155 = getelementptr inbounds [22 x i32], [22 x i32]* %153, i32 0, i32 %154
  %156 = load i32, i32* %155, align 4
  %157 = load i32, i32* %9, align 4
  %158 = icmp sgt i32 %156, %157
  br i1 %158, label %159, label %165

; <label>:159:                                    ; preds = %151
  %160 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %161 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %160, i32 0, i32 0
  %162 = load i32, i32* %7, align 4
  %163 = getelementptr inbounds [22 x i32], [22 x i32]* %161, i32 0, i32 %162
  %164 = load i32, i32* %163, align 4
  store i32 %164, i32* %9, align 4
  br label %165

; <label>:165:                                    ; preds = %159, %151
  br label %166

; <label>:166:                                    ; preds = %165
  %167 = load i32, i32* %7, align 4
  %168 = add nsw i32 %167, 1
  store i32 %168, i32* %7, align 4
  br label %148

; <label>:169:                                    ; preds = %148
  br label %170

; <label>:170:                                    ; preds = %169, %76
  %171 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %172 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %171, i32 0, i32 15
  store i32 100000, i32* %172, align 4
  store i32 0, i32* %6, align 4
  br label %173

; <label>:173:                                    ; preds = %208, %170
  %174 = load i32, i32* %6, align 4
  %175 = icmp slt i32 %174, 16
  br i1 %175, label %176, label %211

; <label>:176:                                    ; preds = %173
  %177 = load i32, i32* %8, align 4
  %178 = load i32, i32* %6, align 4
  %179 = getelementptr inbounds [16 x i32], [16 x i32]* @scale_bitcount.slen1, i32 0, i32 %178
  %180 = load i32, i32* %179, align 4
  %181 = icmp slt i32 %177, %180
  br i1 %181, label %182, label %207

; <label>:182:                                    ; preds = %176
  %183 = load i32, i32* %9, align 4
  %184 = load i32, i32* %6, align 4
  %185 = getelementptr inbounds [16 x i32], [16 x i32]* @scale_bitcount.slen2, i32 0, i32 %184
  %186 = load i32, i32* %185, align 4
  %187 = icmp slt i32 %183, %186
  br i1 %187, label %188, label %207

; <label>:188:                                    ; preds = %182
  %189 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %190 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %189, i32 0, i32 15
  %191 = load i32, i32* %190, align 4
  %192 = load i32*, i32** %11, align 4
  %193 = load i32, i32* %6, align 4
  %194 = getelementptr inbounds i32, i32* %192, i32 %193
  %195 = load i32, i32* %194, align 4
  %196 = icmp sgt i32 %191, %195
  br i1 %196, label %197, label %207

; <label>:197:                                    ; preds = %188
  %198 = load i32*, i32** %11, align 4
  %199 = load i32, i32* %6, align 4
  %200 = getelementptr inbounds i32, i32* %198, i32 %199
  %201 = load i32, i32* %200, align 4
  %202 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %203 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %202, i32 0, i32 15
  store i32 %201, i32* %203, align 4
  %204 = load i32, i32* %6, align 4
  %205 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %206 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %205, i32 0, i32 4
  store i32 %204, i32* %206, align 4
  store i32 0, i32* %10, align 4
  br label %207

; <label>:207:                                    ; preds = %197, %188, %182, %176
  br label %208

; <label>:208:                                    ; preds = %207
  %209 = load i32, i32* %6, align 4
  %210 = add nsw i32 %209, 1
  store i32 %210, i32* %6, align 4
  br label %173

; <label>:211:                                    ; preds = %173
  %212 = load i32, i32* %10, align 4
  ret i32 %212
}

; Function Attrs: nounwind
define arm_aapcscc i32 @scale_bitcount_lsf(%struct.III_scalefac_t*, %struct.gr_info*) #0 {
  %3 = alloca %struct.III_scalefac_t*, align 4
  %4 = alloca %struct.gr_info*, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [4 x i32], align 4
  %14 = alloca i32*, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.III_scalefac_t* %0, %struct.III_scalefac_t** %3, align 4
  store %struct.gr_info* %1, %struct.gr_info** %4, align 4
  %19 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %20 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %19, i32 0, i32 12
  %21 = load i32, i32* %20, align 4
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %2
  store i32 2, i32* %5, align 4
  br label %25

; <label>:24:                                     ; preds = %2
  store i32 0, i32* %5, align 4
  br label %25

; <label>:25:                                     ; preds = %24, %23
  store i32 0, i32* %11, align 4
  br label %26

; <label>:26:                                     ; preds = %32, %25
  %27 = load i32, i32* %11, align 4
  %28 = icmp slt i32 %27, 4
  br i1 %28, label %29, label %35

; <label>:29:                                     ; preds = %26
  %30 = load i32, i32* %11, align 4
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i32 0, i32 %30
  store i32 0, i32* %31, align 4
  br label %32

; <label>:32:                                     ; preds = %29
  %33 = load i32, i32* %11, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %11, align 4
  br label %26

; <label>:35:                                     ; preds = %26
  %36 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %37 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %36, i32 0, i32 6
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 2
  br i1 %39, label %40, label %100

; <label>:40:                                     ; preds = %35
  store i32 1, i32* %6, align 4
  %41 = load i32, i32* %5, align 4
  %42 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i32 0, i32 %41
  %43 = load i32, i32* %6, align 4
  %44 = getelementptr inbounds [3 x [4 x i32]], [3 x [4 x i32]]* %42, i32 0, i32 %43
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %44, i32 0, i32 0
  store i32* %45, i32** %14, align 4
  store i32 0, i32* %12, align 4
  store i32 0, i32* %7, align 4
  br label %46

; <label>:46:                                     ; preds = %96, %40
  %47 = load i32, i32* %7, align 4
  %48 = icmp slt i32 %47, 4
  br i1 %48, label %49, label %99

; <label>:49:                                     ; preds = %46
  %50 = load i32*, i32** %14, align 4
  %51 = load i32, i32* %7, align 4
  %52 = getelementptr inbounds i32, i32* %50, i32 %51
  %53 = load i32, i32* %52, align 4
  %54 = udiv i32 %53, 3
  store i32 %54, i32* %8, align 4
  store i32 0, i32* %11, align 4
  br label %55

; <label>:55:                                     ; preds = %90, %49
  %56 = load i32, i32* %11, align 4
  %57 = load i32, i32* %8, align 4
  %58 = icmp slt i32 %56, %57
  br i1 %58, label %59, label %95

; <label>:59:                                     ; preds = %55
  store i32 0, i32* %9, align 4
  br label %60

; <label>:60:                                     ; preds = %86, %59
  %61 = load i32, i32* %9, align 4
  %62 = icmp slt i32 %61, 3
  br i1 %62, label %63, label %89

; <label>:63:                                     ; preds = %60
  %64 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %65 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %64, i32 0, i32 1
  %66 = load i32, i32* %12, align 4
  %67 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %65, i32 0, i32 %66
  %68 = load i32, i32* %9, align 4
  %69 = getelementptr inbounds [3 x i32], [3 x i32]* %67, i32 0, i32 %68
  %70 = load i32, i32* %69, align 4
  %71 = load i32, i32* %7, align 4
  %72 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i32 0, i32 %71
  %73 = load i32, i32* %72, align 4
  %74 = icmp sgt i32 %70, %73
  br i1 %74, label %75, label %85

; <label>:75:                                     ; preds = %63
  %76 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %77 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %76, i32 0, i32 1
  %78 = load i32, i32* %12, align 4
  %79 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %77, i32 0, i32 %78
  %80 = load i32, i32* %9, align 4
  %81 = getelementptr inbounds [3 x i32], [3 x i32]* %79, i32 0, i32 %80
  %82 = load i32, i32* %81, align 4
  %83 = load i32, i32* %7, align 4
  %84 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i32 0, i32 %83
  store i32 %82, i32* %84, align 4
  br label %85

; <label>:85:                                     ; preds = %75, %63
  br label %86

; <label>:86:                                     ; preds = %85
  %87 = load i32, i32* %9, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %9, align 4
  br label %60

; <label>:89:                                     ; preds = %60
  br label %90

; <label>:90:                                     ; preds = %89
  %91 = load i32, i32* %11, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %11, align 4
  %93 = load i32, i32* %12, align 4
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %12, align 4
  br label %55

; <label>:95:                                     ; preds = %55
  br label %96

; <label>:96:                                     ; preds = %95
  %97 = load i32, i32* %7, align 4
  %98 = add nsw i32 %97, 1
  store i32 %98, i32* %7, align 4
  br label %46

; <label>:99:                                     ; preds = %46
  br label %147

; <label>:100:                                    ; preds = %35
  store i32 0, i32* %6, align 4
  %101 = load i32, i32* %5, align 4
  %102 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i32 0, i32 %101
  %103 = load i32, i32* %6, align 4
  %104 = getelementptr inbounds [3 x [4 x i32]], [3 x [4 x i32]]* %102, i32 0, i32 %103
  %105 = getelementptr inbounds [4 x i32], [4 x i32]* %104, i32 0, i32 0
  store i32* %105, i32** %14, align 4
  store i32 0, i32* %12, align 4
  store i32 0, i32* %7, align 4
  br label %106

; <label>:106:                                    ; preds = %143, %100
  %107 = load i32, i32* %7, align 4
  %108 = icmp slt i32 %107, 4
  br i1 %108, label %109, label %146

; <label>:109:                                    ; preds = %106
  %110 = load i32*, i32** %14, align 4
  %111 = load i32, i32* %7, align 4
  %112 = getelementptr inbounds i32, i32* %110, i32 %111
  %113 = load i32, i32* %112, align 4
  store i32 %113, i32* %8, align 4
  store i32 0, i32* %11, align 4
  br label %114

; <label>:114:                                    ; preds = %137, %109
  %115 = load i32, i32* %11, align 4
  %116 = load i32, i32* %8, align 4
  %117 = icmp slt i32 %115, %116
  br i1 %117, label %118, label %142

; <label>:118:                                    ; preds = %114
  %119 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %120 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %119, i32 0, i32 0
  %121 = load i32, i32* %12, align 4
  %122 = getelementptr inbounds [22 x i32], [22 x i32]* %120, i32 0, i32 %121
  %123 = load i32, i32* %122, align 4
  %124 = load i32, i32* %7, align 4
  %125 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i32 0, i32 %124
  %126 = load i32, i32* %125, align 4
  %127 = icmp sgt i32 %123, %126
  br i1 %127, label %128, label %136

; <label>:128:                                    ; preds = %118
  %129 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %3, align 4
  %130 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %129, i32 0, i32 0
  %131 = load i32, i32* %12, align 4
  %132 = getelementptr inbounds [22 x i32], [22 x i32]* %130, i32 0, i32 %131
  %133 = load i32, i32* %132, align 4
  %134 = load i32, i32* %7, align 4
  %135 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i32 0, i32 %134
  store i32 %133, i32* %135, align 4
  br label %136

; <label>:136:                                    ; preds = %128, %118
  br label %137

; <label>:137:                                    ; preds = %136
  %138 = load i32, i32* %11, align 4
  %139 = add nsw i32 %138, 1
  store i32 %139, i32* %11, align 4
  %140 = load i32, i32* %12, align 4
  %141 = add nsw i32 %140, 1
  store i32 %141, i32* %12, align 4
  br label %114

; <label>:142:                                    ; preds = %114
  br label %143

; <label>:143:                                    ; preds = %142
  %144 = load i32, i32* %7, align 4
  %145 = add nsw i32 %144, 1
  store i32 %145, i32* %7, align 4
  br label %106

; <label>:146:                                    ; preds = %106
  br label %147

; <label>:147:                                    ; preds = %146, %99
  store i32 0, i32* %10, align 4
  store i32 0, i32* %7, align 4
  br label %148

; <label>:148:                                    ; preds = %165, %147
  %149 = load i32, i32* %7, align 4
  %150 = icmp slt i32 %149, 4
  br i1 %150, label %151, label %168

; <label>:151:                                    ; preds = %148
  %152 = load i32, i32* %7, align 4
  %153 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i32 0, i32 %152
  %154 = load i32, i32* %153, align 4
  %155 = load i32, i32* %5, align 4
  %156 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @max_range_sfac_tab, i32 0, i32 %155
  %157 = load i32, i32* %7, align 4
  %158 = getelementptr inbounds [4 x i32], [4 x i32]* %156, i32 0, i32 %157
  %159 = load i32, i32* %158, align 4
  %160 = icmp sgt i32 %154, %159
  br i1 %160, label %161, label %164

; <label>:161:                                    ; preds = %151
  %162 = load i32, i32* %10, align 4
  %163 = add nsw i32 %162, 1
  store i32 %163, i32* %10, align 4
  br label %164

; <label>:164:                                    ; preds = %161, %151
  br label %165

; <label>:165:                                    ; preds = %164
  %166 = load i32, i32* %7, align 4
  %167 = add nsw i32 %166, 1
  store i32 %167, i32* %7, align 4
  br label %148

; <label>:168:                                    ; preds = %148
  %169 = load i32, i32* %10, align 4
  %170 = icmp ne i32 %169, 0
  br i1 %170, label %249, label %171

; <label>:171:                                    ; preds = %168
  %172 = load i32, i32* %5, align 4
  %173 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i32 0, i32 %172
  %174 = load i32, i32* %6, align 4
  %175 = getelementptr inbounds [3 x [4 x i32]], [3 x [4 x i32]]* %173, i32 0, i32 %174
  %176 = getelementptr inbounds [4 x i32], [4 x i32]* %175, i32 0, i32 0
  %177 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %178 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %177, i32 0, i32 19
  store i32* %176, i32** %178, align 4
  store i32 0, i32* %7, align 4
  br label %179

; <label>:179:                                    ; preds = %192, %171
  %180 = load i32, i32* %7, align 4
  %181 = icmp slt i32 %180, 4
  br i1 %181, label %182, label %195

; <label>:182:                                    ; preds = %179
  %183 = load i32, i32* %7, align 4
  %184 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i32 0, i32 %183
  %185 = load i32, i32* %184, align 4
  %186 = getelementptr inbounds [16 x i32], [16 x i32]* @scale_bitcount_lsf.log2tab, i32 0, i32 %185
  %187 = load i32, i32* %186, align 4
  %188 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %189 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %188, i32 0, i32 20
  %190 = load i32, i32* %7, align 4
  %191 = getelementptr inbounds [4 x i32], [4 x i32]* %189, i32 0, i32 %190
  store i32 %187, i32* %191, align 4
  br label %192

; <label>:192:                                    ; preds = %182
  %193 = load i32, i32* %7, align 4
  %194 = add nsw i32 %193, 1
  store i32 %194, i32* %7, align 4
  br label %179

; <label>:195:                                    ; preds = %179
  %196 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %197 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %196, i32 0, i32 20
  %198 = getelementptr inbounds [4 x i32], [4 x i32]* %197, i32 0, i32 0
  %199 = load i32, i32* %198, align 4
  store i32 %199, i32* %15, align 4
  %200 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %201 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %200, i32 0, i32 20
  %202 = getelementptr inbounds [4 x i32], [4 x i32]* %201, i32 0, i32 1
  %203 = load i32, i32* %202, align 4
  store i32 %203, i32* %16, align 4
  %204 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %205 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %204, i32 0, i32 20
  %206 = getelementptr inbounds [4 x i32], [4 x i32]* %205, i32 0, i32 2
  %207 = load i32, i32* %206, align 4
  store i32 %207, i32* %17, align 4
  %208 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %209 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %208, i32 0, i32 20
  %210 = getelementptr inbounds [4 x i32], [4 x i32]* %209, i32 0, i32 3
  %211 = load i32, i32* %210, align 4
  store i32 %211, i32* %18, align 4
  %212 = load i32, i32* %5, align 4
  switch i32 %212, label %245 [
    i32 0, label %213
    i32 1, label %226
    i32 2, label %237
  ]

; <label>:213:                                    ; preds = %195
  %214 = load i32, i32* %15, align 4
  %215 = mul i32 %214, 5
  %216 = load i32, i32* %16, align 4
  %217 = add i32 %215, %216
  %218 = shl i32 %217, 4
  %219 = load i32, i32* %17, align 4
  %220 = shl i32 %219, 2
  %221 = add i32 %218, %220
  %222 = load i32, i32* %18, align 4
  %223 = add i32 %221, %222
  %224 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %225 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %224, i32 0, i32 4
  store i32 %223, i32* %225, align 4
  br label %248

; <label>:226:                                    ; preds = %195
  %227 = load i32, i32* %15, align 4
  %228 = mul i32 %227, 5
  %229 = load i32, i32* %16, align 4
  %230 = add i32 %228, %229
  %231 = shl i32 %230, 2
  %232 = add i32 400, %231
  %233 = load i32, i32* %17, align 4
  %234 = add i32 %232, %233
  %235 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %236 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %235, i32 0, i32 4
  store i32 %234, i32* %236, align 4
  br label %248

; <label>:237:                                    ; preds = %195
  %238 = load i32, i32* %15, align 4
  %239 = mul i32 %238, 3
  %240 = add i32 500, %239
  %241 = load i32, i32* %16, align 4
  %242 = add i32 %240, %241
  %243 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %244 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %243, i32 0, i32 4
  store i32 %242, i32* %244, align 4
  br label %248

; <label>:245:                                    ; preds = %195
  %246 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %247 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %246, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2.260, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:248:                                    ; preds = %237, %226, %213
  br label %249

; <label>:249:                                    ; preds = %248, %168
  %250 = load i32, i32* %10, align 4
  %251 = icmp ne i32 %250, 0
  br i1 %251, label %287, label %252

; <label>:252:                                    ; preds = %249
  %253 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %254 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %253, i32 0, i32 19
  %255 = load i32*, i32** %254, align 4
  %256 = icmp ne i32* %255, null
  br i1 %256, label %258, label %257

; <label>:257:                                    ; preds = %252
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3.261, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1.255, i32 0, i32 0), i32 665, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.scale_bitcount_lsf, i32 0, i32 0))
  br label %258

; <label>:258:                                    ; preds = %257, %252
  %259 = phi i1 [ true, %252 ], [ false, %257 ]
  %260 = zext i1 %259 to i32
  %261 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %262 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %261, i32 0, i32 15
  store i32 0, i32* %262, align 4
  store i32 0, i32* %7, align 4
  br label %263

; <label>:263:                                    ; preds = %283, %258
  %264 = load i32, i32* %7, align 4
  %265 = icmp slt i32 %264, 4
  br i1 %265, label %266, label %286

; <label>:266:                                    ; preds = %263
  %267 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %268 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %267, i32 0, i32 20
  %269 = load i32, i32* %7, align 4
  %270 = getelementptr inbounds [4 x i32], [4 x i32]* %268, i32 0, i32 %269
  %271 = load i32, i32* %270, align 4
  %272 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %273 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %272, i32 0, i32 19
  %274 = load i32*, i32** %273, align 4
  %275 = load i32, i32* %7, align 4
  %276 = getelementptr inbounds i32, i32* %274, i32 %275
  %277 = load i32, i32* %276, align 4
  %278 = mul i32 %271, %277
  %279 = load %struct.gr_info*, %struct.gr_info** %4, align 4
  %280 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %279, i32 0, i32 15
  %281 = load i32, i32* %280, align 4
  %282 = add i32 %281, %278
  store i32 %282, i32* %280, align 4
  br label %283

; <label>:283:                                    ; preds = %266
  %284 = load i32, i32* %7, align 4
  %285 = add nsw i32 %284, 1
  store i32 %285, i32* %7, align 4
  br label %263

; <label>:286:                                    ; preds = %263
  br label %287

; <label>:287:                                    ; preds = %286, %249
  %288 = load i32, i32* %10, align 4
  ret i32 %288
}

; Function Attrs: nounwind
define arm_aapcscc i32 @calc_xmin(%struct.lame_global_flags*, double*, %struct.III_psy_ratio*, %struct.gr_info*, %struct.III_psy_xmin*) #0 {
  %6 = alloca %struct.lame_global_flags*, align 4
  %7 = alloca double*, align 4
  %8 = alloca %struct.III_psy_ratio*, align 4
  %9 = alloca %struct.gr_info*, align 4
  %10 = alloca %struct.III_psy_xmin*, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %6, align 4
  store double* %1, double** %7, align 4
  store %struct.III_psy_ratio* %2, %struct.III_psy_ratio** %8, align 4
  store %struct.gr_info* %3, %struct.gr_info** %9, align 4
  store %struct.III_psy_xmin* %4, %struct.III_psy_xmin** %10, align 4
  store i32 0, i32* %16, align 4
  %21 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %22 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %21, i32 0, i32 33
  %23 = load i32, i32* %22, align 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %72

; <label>:25:                                     ; preds = %5
  %26 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %27 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %26, i32 0, i32 17
  %28 = load i32, i32* %27, align 4
  store i32 %28, i32* %17, align 4
  br label %29

; <label>:29:                                     ; preds = %50, %25
  %30 = load i32, i32* %17, align 4
  %31 = icmp ult i32 %30, 12
  br i1 %31, label %32, label %53

; <label>:32:                                     ; preds = %29
  store i32 0, i32* %15, align 4
  br label %33

; <label>:33:                                     ; preds = %46, %32
  %34 = load i32, i32* %15, align 4
  %35 = icmp slt i32 %34, 3
  br i1 %35, label %36, label %49

; <label>:36:                                     ; preds = %33
  %37 = load i32, i32* %17, align 4
  %38 = getelementptr inbounds [21 x double], [21 x double]* @ATH_s, i32 0, i32 %37
  %39 = load double, double* %38, align 8
  %40 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %10, align 4
  %41 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %40, i32 0, i32 1
  %42 = load i32, i32* %17, align 4
  %43 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %41, i32 0, i32 %42
  %44 = load i32, i32* %15, align 4
  %45 = getelementptr inbounds [3 x double], [3 x double]* %43, i32 0, i32 %44
  store double %39, double* %45, align 8
  br label %46

; <label>:46:                                     ; preds = %36
  %47 = load i32, i32* %15, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %15, align 4
  br label %33

; <label>:49:                                     ; preds = %33
  br label %50

; <label>:50:                                     ; preds = %49
  %51 = load i32, i32* %17, align 4
  %52 = add i32 %51, 1
  store i32 %52, i32* %17, align 4
  br label %29

; <label>:53:                                     ; preds = %29
  store i32 0, i32* %17, align 4
  br label %54

; <label>:54:                                     ; preds = %68, %53
  %55 = load i32, i32* %17, align 4
  %56 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %57 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %56, i32 0, i32 16
  %58 = load i32, i32* %57, align 4
  %59 = icmp ult i32 %55, %58
  br i1 %59, label %60, label %71

; <label>:60:                                     ; preds = %54
  %61 = load i32, i32* %17, align 4
  %62 = getelementptr inbounds [21 x double], [21 x double]* @ATH_l, i32 0, i32 %61
  %63 = load double, double* %62, align 8
  %64 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %10, align 4
  %65 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %64, i32 0, i32 0
  %66 = load i32, i32* %17, align 4
  %67 = getelementptr inbounds [22 x double], [22 x double]* %65, i32 0, i32 %66
  store double %63, double* %67, align 8
  br label %68

; <label>:68:                                     ; preds = %60
  %69 = load i32, i32* %17, align 4
  %70 = add i32 %69, 1
  store i32 %70, i32* %17, align 4
  br label %54

; <label>:71:                                     ; preds = %54
  br label %280

; <label>:72:                                     ; preds = %5
  %73 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %74 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %73, i32 0, i32 17
  %75 = load i32, i32* %74, align 4
  store i32 %75, i32* %17, align 4
  br label %76

; <label>:76:                                     ; preds = %180, %72
  %77 = load i32, i32* %17, align 4
  %78 = icmp ult i32 %77, 12
  br i1 %78, label %79, label %183

; <label>:79:                                     ; preds = %76
  %80 = load i32, i32* %17, align 4
  %81 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %80
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %11, align 4
  %83 = load i32, i32* %17, align 4
  %84 = add i32 %83, 1
  %85 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %84
  %86 = load i32, i32* %85, align 4
  store i32 %86, i32* %12, align 4
  %87 = load i32, i32* %12, align 4
  %88 = load i32, i32* %11, align 4
  %89 = sub nsw i32 %87, %88
  store i32 %89, i32* %13, align 4
  store i32 0, i32* %15, align 4
  br label %90

; <label>:90:                                     ; preds = %176, %79
  %91 = load i32, i32* %15, align 4
  %92 = icmp slt i32 %91, 3
  br i1 %92, label %93, label %179

; <label>:93:                                     ; preds = %90
  store double 0.000000e+00, double* %18, align 8
  %94 = load i32, i32* %11, align 4
  store i32 %94, i32* %14, align 4
  br label %95

; <label>:95:                                     ; preds = %113, %93
  %96 = load i32, i32* %14, align 4
  %97 = load i32, i32* %12, align 4
  %98 = icmp slt i32 %96, %97
  br i1 %98, label %99, label %116

; <label>:99:                                     ; preds = %95
  %100 = load double*, double** %7, align 4
  %101 = load i32, i32* %14, align 4
  %102 = mul nsw i32 %101, 3
  %103 = load i32, i32* %15, align 4
  %104 = add nsw i32 %102, %103
  %105 = getelementptr inbounds double, double* %100, i32 %104
  %106 = load double, double* %105, align 8
  store double %106, double* %20, align 8
  %107 = load double, double* %20, align 8
  %108 = load double, double* %20, align 8
  %109 = fmul double %107, %108
  store double %109, double* %20, align 8
  %110 = load double, double* %20, align 8
  %111 = load double, double* %18, align 8
  %112 = fadd double %111, %110
  store double %112, double* %18, align 8
  br label %113

; <label>:113:                                    ; preds = %99
  %114 = load i32, i32* %14, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %14, align 4
  br label %95

; <label>:116:                                    ; preds = %95
  %117 = load i32, i32* %13, align 4
  %118 = sitofp i32 %117 to double
  %119 = load double, double* %18, align 8
  %120 = fdiv double %119, %118
  store double %120, double* %18, align 8
  %121 = load %struct.III_psy_ratio*, %struct.III_psy_ratio** %8, align 4
  %122 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %121, i32 0, i32 1
  %123 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %122, i32 0, i32 1
  %124 = load i32, i32* %17, align 4
  %125 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %123, i32 0, i32 %124
  %126 = load i32, i32* %15, align 4
  %127 = getelementptr inbounds [3 x double], [3 x double]* %125, i32 0, i32 %126
  %128 = load double, double* %127, align 8
  store double %128, double* %19, align 8
  %129 = load double, double* %19, align 8
  %130 = fcmp ogt double %129, 0.000000e+00
  br i1 %130, label %131, label %147

; <label>:131:                                    ; preds = %116
  %132 = load double, double* %18, align 8
  %133 = load %struct.III_psy_ratio*, %struct.III_psy_ratio** %8, align 4
  %134 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %133, i32 0, i32 0
  %135 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %134, i32 0, i32 1
  %136 = load i32, i32* %17, align 4
  %137 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %135, i32 0, i32 %136
  %138 = load i32, i32* %15, align 4
  %139 = getelementptr inbounds [3 x double], [3 x double]* %137, i32 0, i32 %138
  %140 = load double, double* %139, align 8
  %141 = fmul double %132, %140
  %142 = load float, float* @masking_lower, align 4
  %143 = fpext float %142 to double
  %144 = fmul double %141, %143
  %145 = load double, double* %19, align 8
  %146 = fdiv double %144, %145
  store double %146, double* %19, align 8
  br label %147

; <label>:147:                                    ; preds = %131, %116
  %148 = load i32, i32* %17, align 4
  %149 = getelementptr inbounds [21 x double], [21 x double]* @ATH_s, i32 0, i32 %148
  %150 = load double, double* %149, align 8
  %151 = load double, double* %19, align 8
  %152 = fcmp ogt double %150, %151
  br i1 %152, label %153, label %157

; <label>:153:                                    ; preds = %147
  %154 = load i32, i32* %17, align 4
  %155 = getelementptr inbounds [21 x double], [21 x double]* @ATH_s, i32 0, i32 %154
  %156 = load double, double* %155, align 8
  br label %159

; <label>:157:                                    ; preds = %147
  %158 = load double, double* %19, align 8
  br label %159

; <label>:159:                                    ; preds = %157, %153
  %160 = phi double [ %156, %153 ], [ %158, %157 ]
  %161 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %10, align 4
  %162 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %161, i32 0, i32 1
  %163 = load i32, i32* %17, align 4
  %164 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %162, i32 0, i32 %163
  %165 = load i32, i32* %15, align 4
  %166 = getelementptr inbounds [3 x double], [3 x double]* %164, i32 0, i32 %165
  store double %160, double* %166, align 8
  %167 = load double, double* %18, align 8
  %168 = load i32, i32* %17, align 4
  %169 = getelementptr inbounds [21 x double], [21 x double]* @ATH_s, i32 0, i32 %168
  %170 = load double, double* %169, align 8
  %171 = fcmp ogt double %167, %170
  br i1 %171, label %172, label %175

; <label>:172:                                    ; preds = %159
  %173 = load i32, i32* %16, align 4
  %174 = add nsw i32 %173, 1
  store i32 %174, i32* %16, align 4
  br label %175

; <label>:175:                                    ; preds = %172, %159
  br label %176

; <label>:176:                                    ; preds = %175
  %177 = load i32, i32* %15, align 4
  %178 = add nsw i32 %177, 1
  store i32 %178, i32* %15, align 4
  br label %90

; <label>:179:                                    ; preds = %90
  br label %180

; <label>:180:                                    ; preds = %179
  %181 = load i32, i32* %17, align 4
  %182 = add i32 %181, 1
  store i32 %182, i32* %17, align 4
  br label %76

; <label>:183:                                    ; preds = %76
  store i32 0, i32* %17, align 4
  br label %184

; <label>:184:                                    ; preds = %276, %183
  %185 = load i32, i32* %17, align 4
  %186 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %187 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %186, i32 0, i32 16
  %188 = load i32, i32* %187, align 4
  %189 = icmp ult i32 %185, %188
  br i1 %189, label %190, label %279

; <label>:190:                                    ; preds = %184
  %191 = load i32, i32* %17, align 4
  %192 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %191
  %193 = load i32, i32* %192, align 4
  store i32 %193, i32* %11, align 4
  %194 = load i32, i32* %17, align 4
  %195 = add i32 %194, 1
  %196 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %195
  %197 = load i32, i32* %196, align 4
  store i32 %197, i32* %12, align 4
  %198 = load i32, i32* %12, align 4
  %199 = load i32, i32* %11, align 4
  %200 = sub nsw i32 %198, %199
  store i32 %200, i32* %13, align 4
  store double 0.000000e+00, double* %18, align 8
  %201 = load i32, i32* %11, align 4
  store i32 %201, i32* %14, align 4
  br label %202

; <label>:202:                                    ; preds = %219, %190
  %203 = load i32, i32* %14, align 4
  %204 = load i32, i32* %12, align 4
  %205 = icmp slt i32 %203, %204
  br i1 %205, label %206, label %222

; <label>:206:                                    ; preds = %202
  %207 = load double*, double** %7, align 4
  %208 = load i32, i32* %14, align 4
  %209 = getelementptr inbounds double, double* %207, i32 %208
  %210 = load double, double* %209, align 8
  %211 = load double*, double** %7, align 4
  %212 = load i32, i32* %14, align 4
  %213 = getelementptr inbounds double, double* %211, i32 %212
  %214 = load double, double* %213, align 8
  %215 = fmul double %210, %214
  store double %215, double* %20, align 8
  %216 = load double, double* %20, align 8
  %217 = load double, double* %18, align 8
  %218 = fadd double %217, %216
  store double %218, double* %18, align 8
  br label %219

; <label>:219:                                    ; preds = %206
  %220 = load i32, i32* %14, align 4
  %221 = add nsw i32 %220, 1
  store i32 %221, i32* %14, align 4
  br label %202

; <label>:222:                                    ; preds = %202
  %223 = load i32, i32* %13, align 4
  %224 = sitofp i32 %223 to double
  %225 = load double, double* %18, align 8
  %226 = fdiv double %225, %224
  store double %226, double* %18, align 8
  %227 = load %struct.III_psy_ratio*, %struct.III_psy_ratio** %8, align 4
  %228 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %227, i32 0, i32 1
  %229 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %228, i32 0, i32 0
  %230 = load i32, i32* %17, align 4
  %231 = getelementptr inbounds [22 x double], [22 x double]* %229, i32 0, i32 %230
  %232 = load double, double* %231, align 8
  store double %232, double* %19, align 8
  %233 = load double, double* %19, align 8
  %234 = fcmp ogt double %233, 0.000000e+00
  br i1 %234, label %235, label %249

; <label>:235:                                    ; preds = %222
  %236 = load double, double* %18, align 8
  %237 = load %struct.III_psy_ratio*, %struct.III_psy_ratio** %8, align 4
  %238 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %237, i32 0, i32 0
  %239 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %238, i32 0, i32 0
  %240 = load i32, i32* %17, align 4
  %241 = getelementptr inbounds [22 x double], [22 x double]* %239, i32 0, i32 %240
  %242 = load double, double* %241, align 8
  %243 = fmul double %236, %242
  %244 = load float, float* @masking_lower, align 4
  %245 = fpext float %244 to double
  %246 = fmul double %243, %245
  %247 = load double, double* %19, align 8
  %248 = fdiv double %246, %247
  store double %248, double* %19, align 8
  br label %249

; <label>:249:                                    ; preds = %235, %222
  %250 = load i32, i32* %17, align 4
  %251 = getelementptr inbounds [21 x double], [21 x double]* @ATH_l, i32 0, i32 %250
  %252 = load double, double* %251, align 8
  %253 = load double, double* %19, align 8
  %254 = fcmp ogt double %252, %253
  br i1 %254, label %255, label %259

; <label>:255:                                    ; preds = %249
  %256 = load i32, i32* %17, align 4
  %257 = getelementptr inbounds [21 x double], [21 x double]* @ATH_l, i32 0, i32 %256
  %258 = load double, double* %257, align 8
  br label %261

; <label>:259:                                    ; preds = %249
  %260 = load double, double* %19, align 8
  br label %261

; <label>:261:                                    ; preds = %259, %255
  %262 = phi double [ %258, %255 ], [ %260, %259 ]
  %263 = load %struct.III_psy_xmin*, %struct.III_psy_xmin** %10, align 4
  %264 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %263, i32 0, i32 0
  %265 = load i32, i32* %17, align 4
  %266 = getelementptr inbounds [22 x double], [22 x double]* %264, i32 0, i32 %265
  store double %262, double* %266, align 8
  %267 = load double, double* %18, align 8
  %268 = load i32, i32* %17, align 4
  %269 = getelementptr inbounds [21 x double], [21 x double]* @ATH_l, i32 0, i32 %268
  %270 = load double, double* %269, align 8
  %271 = fcmp ogt double %267, %270
  br i1 %271, label %272, label %275

; <label>:272:                                    ; preds = %261
  %273 = load i32, i32* %16, align 4
  %274 = add nsw i32 %273, 1
  store i32 %274, i32* %16, align 4
  br label %275

; <label>:275:                                    ; preds = %272, %261
  br label %276

; <label>:276:                                    ; preds = %275
  %277 = load i32, i32* %17, align 4
  %278 = add i32 %277, 1
  store i32 %278, i32* %17, align 4
  br label %184

; <label>:279:                                    ; preds = %184
  br label %280

; <label>:280:                                    ; preds = %279, %71
  %281 = load i32, i32* %16, align 4
  ret i32 %281
}

; Function Attrs: nounwind
define arm_aapcscc i32 @loop_break(%struct.III_scalefac_t*, %struct.gr_info*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.III_scalefac_t*, align 4
  %5 = alloca %struct.gr_info*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store %struct.III_scalefac_t* %0, %struct.III_scalefac_t** %4, align 4
  store %struct.gr_info* %1, %struct.gr_info** %5, align 4
  store i32 0, i32* %7, align 4
  br label %8

; <label>:8:                                      ; preds = %23, %2
  %9 = load i32, i32* %7, align 4
  %10 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %11 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %10, i32 0, i32 16
  %12 = load i32, i32* %11, align 4
  %13 = icmp ult i32 %9, %12
  br i1 %13, label %14, label %26

; <label>:14:                                     ; preds = %8
  %15 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %4, align 4
  %16 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %15, i32 0, i32 0
  %17 = load i32, i32* %7, align 4
  %18 = getelementptr inbounds [22 x i32], [22 x i32]* %16, i32 0, i32 %17
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %14
  store i32 0, i32* %3, align 4
  br label %56

; <label>:22:                                     ; preds = %14
  br label %23

; <label>:23:                                     ; preds = %22
  %24 = load i32, i32* %7, align 4
  %25 = add i32 %24, 1
  store i32 %25, i32* %7, align 4
  br label %8

; <label>:26:                                     ; preds = %8
  %27 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %28 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %27, i32 0, i32 17
  %29 = load i32, i32* %28, align 4
  store i32 %29, i32* %7, align 4
  br label %30

; <label>:30:                                     ; preds = %52, %26
  %31 = load i32, i32* %7, align 4
  %32 = icmp ult i32 %31, 12
  br i1 %32, label %33, label %55

; <label>:33:                                     ; preds = %30
  store i32 0, i32* %6, align 4
  br label %34

; <label>:34:                                     ; preds = %48, %33
  %35 = load i32, i32* %6, align 4
  %36 = icmp slt i32 %35, 3
  br i1 %36, label %37, label %51

; <label>:37:                                     ; preds = %34
  %38 = load %struct.III_scalefac_t*, %struct.III_scalefac_t** %4, align 4
  %39 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %38, i32 0, i32 1
  %40 = load i32, i32* %7, align 4
  %41 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %39, i32 0, i32 %40
  %42 = load i32, i32* %6, align 4
  %43 = getelementptr inbounds [3 x i32], [3 x i32]* %41, i32 0, i32 %42
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %47

; <label>:46:                                     ; preds = %37
  store i32 0, i32* %3, align 4
  br label %56

; <label>:47:                                     ; preds = %37
  br label %48

; <label>:48:                                     ; preds = %47
  %49 = load i32, i32* %6, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %6, align 4
  br label %34

; <label>:51:                                     ; preds = %34
  br label %52

; <label>:52:                                     ; preds = %51
  %53 = load i32, i32* %7, align 4
  %54 = add i32 %53, 1
  store i32 %54, i32* %7, align 4
  br label %30

; <label>:55:                                     ; preds = %30
  store i32 1, i32* %3, align 4
  br label %56

; <label>:56:                                     ; preds = %55, %46, %21
  %57 = load i32, i32* %3, align 4
  ret i32 %57
}

; Function Attrs: nounwind
define arm_aapcscc i32 @bin_search_StepSize2(%struct.lame_global_flags*, i32, i32, i32*, double*, %struct.gr_info*) #0 {
  %7 = alloca %struct.lame_global_flags*, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 4
  %11 = alloca double*, align 4
  %12 = alloca %struct.gr_info*, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32* %3, i32** %10, align 4
  store double* %4, double** %11, align 4
  store %struct.gr_info* %5, %struct.gr_info** %12, align 4
  store i32 0, i32* %14, align 4
  %17 = load i32, i32* %9, align 4
  store i32 %17, i32* %15, align 4
  store i32 0, i32* %16, align 4
  br label %18

; <label>:18:                                     ; preds = %81, %6
  %19 = load i32, i32* %15, align 4
  %20 = load %struct.gr_info*, %struct.gr_info** %12, align 4
  %21 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %20, i32 0, i32 3
  store i32 %19, i32* %21, align 4
  %22 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %23 = load i32*, i32** %10, align 4
  %24 = load double*, double** %11, align 4
  %25 = load %struct.gr_info*, %struct.gr_info** %12, align 4
  %26 = call arm_aapcscc i32 @count_bits(%struct.lame_global_flags* %22, i32* %23, double* %24, %struct.gr_info* %25)
  store i32 %26, i32* %13, align 4
  %27 = load i32, i32* @bin_search_StepSize2.CurrentStep, align 4
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %30

; <label>:29:                                     ; preds = %18
  br label %82

; <label>:30:                                     ; preds = %18
  %31 = load i32, i32* %14, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %36

; <label>:33:                                     ; preds = %30
  %34 = load i32, i32* @bin_search_StepSize2.CurrentStep, align 4
  %35 = sdiv i32 %34, 2
  store i32 %35, i32* @bin_search_StepSize2.CurrentStep, align 4
  br label %36

; <label>:36:                                     ; preds = %33, %30
  %37 = load i32, i32* %13, align 4
  %38 = load i32, i32* %8, align 4
  %39 = icmp sgt i32 %37, %38
  br i1 %39, label %40, label %57

; <label>:40:                                     ; preds = %36
  %41 = load i32, i32* %16, align 4
  %42 = icmp eq i32 %41, 2
  br i1 %42, label %43, label %49

; <label>:43:                                     ; preds = %40
  %44 = load i32, i32* %14, align 4
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %49, label %46

; <label>:46:                                     ; preds = %43
  store i32 1, i32* %14, align 4
  %47 = load i32, i32* @bin_search_StepSize2.CurrentStep, align 4
  %48 = sdiv i32 %47, 2
  store i32 %48, i32* @bin_search_StepSize2.CurrentStep, align 4
  br label %49

; <label>:49:                                     ; preds = %46, %43, %40
  store i32 1, i32* %16, align 4
  %50 = load i32, i32* @bin_search_StepSize2.CurrentStep, align 4
  %51 = load i32, i32* %15, align 4
  %52 = add nsw i32 %51, %50
  store i32 %52, i32* %15, align 4
  %53 = load i32, i32* %15, align 4
  %54 = icmp sgt i32 %53, 255
  br i1 %54, label %55, label %56

; <label>:55:                                     ; preds = %49
  br label %82

; <label>:56:                                     ; preds = %49
  br label %80

; <label>:57:                                     ; preds = %36
  %58 = load i32, i32* %13, align 4
  %59 = load i32, i32* %8, align 4
  %60 = icmp slt i32 %58, %59
  br i1 %60, label %61, label %78

; <label>:61:                                     ; preds = %57
  %62 = load i32, i32* %16, align 4
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %64, label %70

; <label>:64:                                     ; preds = %61
  %65 = load i32, i32* %14, align 4
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %70, label %67

; <label>:67:                                     ; preds = %64
  store i32 1, i32* %14, align 4
  %68 = load i32, i32* @bin_search_StepSize2.CurrentStep, align 4
  %69 = sdiv i32 %68, 2
  store i32 %69, i32* @bin_search_StepSize2.CurrentStep, align 4
  br label %70

; <label>:70:                                     ; preds = %67, %64, %61
  store i32 2, i32* %16, align 4
  %71 = load i32, i32* @bin_search_StepSize2.CurrentStep, align 4
  %72 = load i32, i32* %15, align 4
  %73 = sub nsw i32 %72, %71
  store i32 %73, i32* %15, align 4
  %74 = load i32, i32* %15, align 4
  %75 = icmp slt i32 %74, 0
  br i1 %75, label %76, label %77

; <label>:76:                                     ; preds = %70
  br label %82

; <label>:77:                                     ; preds = %70
  br label %79

; <label>:78:                                     ; preds = %57
  br label %82

; <label>:79:                                     ; preds = %77
  br label %80

; <label>:80:                                     ; preds = %79, %56
  br label %81

; <label>:81:                                     ; preds = %80
  br i1 true, label %18, label %82

; <label>:82:                                     ; preds = %81, %78, %76, %55, %29
  %83 = load i32, i32* %9, align 4
  %84 = load i32, i32* %15, align 4
  %85 = sub nsw i32 %83, %84
  %86 = call arm_aapcscc i32 @abs(i32 %85) #9
  store i32 %86, i32* @bin_search_StepSize2.CurrentStep, align 4
  %87 = load i32, i32* @bin_search_StepSize2.CurrentStep, align 4
  %88 = icmp sge i32 %87, 4
  br i1 %88, label %89, label %90

; <label>:89:                                     ; preds = %82
  store i32 4, i32* @bin_search_StepSize2.CurrentStep, align 4
  br label %91

; <label>:90:                                     ; preds = %82
  store i32 2, i32* @bin_search_StepSize2.CurrentStep, align 4
  br label %91

; <label>:91:                                     ; preds = %90, %89
  %92 = load i32, i32* %13, align 4
  ret i32 %92
}

; Function Attrs: nounwind readnone
declare arm_aapcscc i32 @abs(i32) #6

; Function Attrs: nounwind
define arm_aapcscc void @quantize_xrpow(double*, i32*, %struct.gr_info*) #0 {
  %4 = alloca double*, align 4
  %5 = alloca i32*, align 4
  %6 = alloca %struct.gr_info*, align 4
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  store double* %0, double** %4, align 4
  store i32* %1, i32** %5, align 4
  store %struct.gr_info* %2, %struct.gr_info** %6, align 4
  %25 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %26 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %25, i32 0, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds [256 x double], [256 x double]* @ipow20, i32 0, i32 %27
  %29 = load double, double* %28, align 8
  store double %29, double* %7, align 8
  store i32 72, i32* %8, align 4
  br label %30

; <label>:30:                                     ; preds = %162, %3
  %31 = load i32, i32* %8, align 4
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %33, label %165

; <label>:33:                                     ; preds = %30
  %34 = load double*, double** %4, align 4
  %35 = getelementptr inbounds double, double* %34, i32 1
  store double* %35, double** %4, align 4
  %36 = load double, double* %34, align 8
  %37 = load double, double* %7, align 8
  %38 = fmul double %36, %37
  store double %38, double* %9, align 8
  %39 = load double*, double** %4, align 4
  %40 = getelementptr inbounds double, double* %39, i32 1
  store double* %40, double** %4, align 4
  %41 = load double, double* %39, align 8
  %42 = load double, double* %7, align 8
  %43 = fmul double %41, %42
  store double %43, double* %10, align 8
  %44 = load double, double* %9, align 8
  %45 = fptosi double %44 to i32
  store i32 %45, i32* %17, align 4
  %46 = load double*, double** %4, align 4
  %47 = getelementptr inbounds double, double* %46, i32 1
  store double* %47, double** %4, align 4
  %48 = load double, double* %46, align 8
  %49 = load double, double* %7, align 8
  %50 = fmul double %48, %49
  store double %50, double* %11, align 8
  %51 = load double, double* %10, align 8
  %52 = fptosi double %51 to i32
  store i32 %52, i32* %18, align 4
  %53 = load double*, double** %4, align 4
  %54 = getelementptr inbounds double, double* %53, i32 1
  store double* %54, double** %4, align 4
  %55 = load double, double* %53, align 8
  %56 = load double, double* %7, align 8
  %57 = fmul double %55, %56
  store double %57, double* %12, align 8
  %58 = load double, double* %11, align 8
  %59 = fptosi double %58 to i32
  store i32 %59, i32* %19, align 4
  %60 = load double*, double** %4, align 4
  %61 = getelementptr inbounds double, double* %60, i32 1
  store double* %61, double** %4, align 4
  %62 = load double, double* %60, align 8
  %63 = load double, double* %7, align 8
  %64 = fmul double %62, %63
  store double %64, double* %13, align 8
  %65 = load double, double* %12, align 8
  %66 = fptosi double %65 to i32
  store i32 %66, i32* %20, align 4
  %67 = load double*, double** %4, align 4
  %68 = getelementptr inbounds double, double* %67, i32 1
  store double* %68, double** %4, align 4
  %69 = load double, double* %67, align 8
  %70 = load double, double* %7, align 8
  %71 = fmul double %69, %70
  store double %71, double* %14, align 8
  %72 = load double, double* %13, align 8
  %73 = fptosi double %72 to i32
  store i32 %73, i32* %21, align 4
  %74 = load double*, double** %4, align 4
  %75 = getelementptr inbounds double, double* %74, i32 1
  store double* %75, double** %4, align 4
  %76 = load double, double* %74, align 8
  %77 = load double, double* %7, align 8
  %78 = fmul double %76, %77
  store double %78, double* %15, align 8
  %79 = load double, double* %14, align 8
  %80 = fptosi double %79 to i32
  store i32 %80, i32* %22, align 4
  %81 = load double*, double** %4, align 4
  %82 = getelementptr inbounds double, double* %81, i32 1
  store double* %82, double** %4, align 4
  %83 = load double, double* %81, align 8
  %84 = load double, double* %7, align 8
  %85 = fmul double %83, %84
  store double %85, double* %16, align 8
  %86 = load double, double* %15, align 8
  %87 = fptosi double %86 to i32
  store i32 %87, i32* %23, align 4
  %88 = load i32, i32* %17, align 4
  %89 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %88
  %90 = load double, double* %89, align 8
  %91 = load double, double* %9, align 8
  %92 = fadd double %91, %90
  store double %92, double* %9, align 8
  %93 = load double, double* %16, align 8
  %94 = fptosi double %93 to i32
  store i32 %94, i32* %24, align 4
  %95 = load i32, i32* %18, align 4
  %96 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %95
  %97 = load double, double* %96, align 8
  %98 = load double, double* %10, align 8
  %99 = fadd double %98, %97
  store double %99, double* %10, align 8
  %100 = load double, double* %9, align 8
  %101 = fptosi double %100 to i32
  %102 = load i32*, i32** %5, align 4
  %103 = getelementptr inbounds i32, i32* %102, i32 1
  store i32* %103, i32** %5, align 4
  store i32 %101, i32* %102, align 4
  %104 = load i32, i32* %19, align 4
  %105 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %104
  %106 = load double, double* %105, align 8
  %107 = load double, double* %11, align 8
  %108 = fadd double %107, %106
  store double %108, double* %11, align 8
  %109 = load double, double* %10, align 8
  %110 = fptosi double %109 to i32
  %111 = load i32*, i32** %5, align 4
  %112 = getelementptr inbounds i32, i32* %111, i32 1
  store i32* %112, i32** %5, align 4
  store i32 %110, i32* %111, align 4
  %113 = load i32, i32* %20, align 4
  %114 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %113
  %115 = load double, double* %114, align 8
  %116 = load double, double* %12, align 8
  %117 = fadd double %116, %115
  store double %117, double* %12, align 8
  %118 = load double, double* %11, align 8
  %119 = fptosi double %118 to i32
  %120 = load i32*, i32** %5, align 4
  %121 = getelementptr inbounds i32, i32* %120, i32 1
  store i32* %121, i32** %5, align 4
  store i32 %119, i32* %120, align 4
  %122 = load i32, i32* %21, align 4
  %123 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %122
  %124 = load double, double* %123, align 8
  %125 = load double, double* %13, align 8
  %126 = fadd double %125, %124
  store double %126, double* %13, align 8
  %127 = load double, double* %12, align 8
  %128 = fptosi double %127 to i32
  %129 = load i32*, i32** %5, align 4
  %130 = getelementptr inbounds i32, i32* %129, i32 1
  store i32* %130, i32** %5, align 4
  store i32 %128, i32* %129, align 4
  %131 = load i32, i32* %22, align 4
  %132 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %131
  %133 = load double, double* %132, align 8
  %134 = load double, double* %14, align 8
  %135 = fadd double %134, %133
  store double %135, double* %14, align 8
  %136 = load double, double* %13, align 8
  %137 = fptosi double %136 to i32
  %138 = load i32*, i32** %5, align 4
  %139 = getelementptr inbounds i32, i32* %138, i32 1
  store i32* %139, i32** %5, align 4
  store i32 %137, i32* %138, align 4
  %140 = load i32, i32* %23, align 4
  %141 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %140
  %142 = load double, double* %141, align 8
  %143 = load double, double* %15, align 8
  %144 = fadd double %143, %142
  store double %144, double* %15, align 8
  %145 = load double, double* %14, align 8
  %146 = fptosi double %145 to i32
  %147 = load i32*, i32** %5, align 4
  %148 = getelementptr inbounds i32, i32* %147, i32 1
  store i32* %148, i32** %5, align 4
  store i32 %146, i32* %147, align 4
  %149 = load i32, i32* %24, align 4
  %150 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i32 0, i32 %149
  %151 = load double, double* %150, align 8
  %152 = load double, double* %16, align 8
  %153 = fadd double %152, %151
  store double %153, double* %16, align 8
  %154 = load double, double* %15, align 8
  %155 = fptosi double %154 to i32
  %156 = load i32*, i32** %5, align 4
  %157 = getelementptr inbounds i32, i32* %156, i32 1
  store i32* %157, i32** %5, align 4
  store i32 %155, i32* %156, align 4
  %158 = load double, double* %16, align 8
  %159 = fptosi double %158 to i32
  %160 = load i32*, i32** %5, align 4
  %161 = getelementptr inbounds i32, i32* %160, i32 1
  store i32* %161, i32** %5, align 4
  store i32 %159, i32* %160, align 4
  br label %162

; <label>:162:                                    ; preds = %33
  %163 = load i32, i32* %8, align 4
  %164 = add nsw i32 %163, -1
  store i32 %164, i32* %8, align 4
  br label %30

; <label>:165:                                    ; preds = %30
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @quantize_xrpow_ISO(double*, i32*, %struct.gr_info*) #0 {
  %4 = alloca double*, align 4
  %5 = alloca i32*, align 4
  %6 = alloca %struct.gr_info*, align 4
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca double, align 8
  store double* %0, double** %4, align 4
  store i32* %1, i32** %5, align 4
  store %struct.gr_info* %2, %struct.gr_info** %6, align 4
  %10 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %11 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %10, i32 0, i32 3
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds [256 x double], [256 x double]* @ipow20, i32 0, i32 %12
  %14 = load double, double* %13, align 8
  store double %14, double* %7, align 8
  %15 = load double, double* %7, align 8
  %16 = fdiv double 5.946000e-01, %15
  store double %16, double* %9, align 8
  store i32 576, i32* %8, align 4
  br label %17

; <label>:17:                                     ; preds = %41, %3
  %18 = load i32, i32* %8, align 4
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %44

; <label>:20:                                     ; preds = %17
  %21 = load double, double* %9, align 8
  %22 = load double*, double** %4, align 4
  %23 = load double, double* %22, align 8
  %24 = fcmp ogt double %21, %23
  br i1 %24, label %25, label %30

; <label>:25:                                     ; preds = %20
  %26 = load i32*, i32** %5, align 4
  %27 = getelementptr inbounds i32, i32* %26, i32 1
  store i32* %27, i32** %5, align 4
  store i32 0, i32* %26, align 4
  %28 = load double*, double** %4, align 4
  %29 = getelementptr inbounds double, double* %28, i32 1
  store double* %29, double** %4, align 4
  br label %40

; <label>:30:                                     ; preds = %20
  %31 = load double, double* %7, align 8
  %32 = load double*, double** %4, align 4
  %33 = getelementptr inbounds double, double* %32, i32 1
  store double* %33, double** %4, align 4
  %34 = load double, double* %32, align 8
  %35 = fmul double %31, %34
  %36 = fadd double %35, 4.054000e-01
  %37 = fptosi double %36 to i32
  %38 = load i32*, i32** %5, align 4
  %39 = getelementptr inbounds i32, i32* %38, i32 1
  store i32* %39, i32** %5, align 4
  store i32 %37, i32* %38, align 4
  br label %40

; <label>:40:                                     ; preds = %30, %25
  br label %41

; <label>:41:                                     ; preds = %40
  %42 = load i32, i32* %8, align 4
  %43 = add nsw i32 %42, -1
  store i32 %43, i32* %8, align 4
  br label %17

; <label>:44:                                     ; preds = %17
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @ResvFrameBegin(%struct.lame_global_flags*, %struct.III_side_info_t*, i32, i32) #0 {
  %5 = alloca %struct.lame_global_flags*, align 4
  %6 = alloca %struct.III_side_info_t*, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %5, align 4
  store %struct.III_side_info_t* %1, %struct.III_side_info_t** %6, align 4
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %11 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %12 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %11, i32 0, i32 39
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %16

; <label>:15:                                     ; preds = %4
  store i32 0, i32* @ResvSize, align 4
  br label %16

; <label>:16:                                     ; preds = %15, %4
  %17 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %18 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %17, i32 0, i32 43
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %16
  store i32 4088, i32* %10, align 4
  br label %23

; <label>:22:                                     ; preds = %16
  store i32 2040, i32* %10, align 4
  br label %23

; <label>:23:                                     ; preds = %22, %21
  %24 = load %struct.III_side_info_t*, %struct.III_side_info_t** %6, align 4
  %25 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = mul nsw i32 %26, 8
  %28 = load i32, i32* @ResvSize, align 4
  %29 = icmp eq i32 %27, %28
  br i1 %29, label %31, label %30

; <label>:30:                                     ; preds = %23
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.270, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1.271, i32 0, i32 0), i32 68, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__func__.ResvFrameBegin, i32 0, i32 0))
  br label %31

; <label>:31:                                     ; preds = %30, %23
  %32 = phi i1 [ true, %23 ], [ false, %30 ]
  %33 = zext i1 %32 to i32
  %34 = load i32, i32* %7, align 4
  %35 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %36 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %35, i32 0, i32 45
  %37 = load i32, i32* %36, align 4
  %38 = mul nsw i32 %34, %37
  %39 = load i32, i32* @ResvSize, align 4
  %40 = add nsw i32 %38, %39
  store i32 %40, i32* %9, align 4
  %41 = load i32, i32* %8, align 4
  %42 = icmp sgt i32 %41, 7680
  br i1 %42, label %43, label %44

; <label>:43:                                     ; preds = %31
  store i32 0, i32* @ResvMax, align 4
  br label %47

; <label>:44:                                     ; preds = %31
  %45 = load i32, i32* %8, align 4
  %46 = sub nsw i32 7680, %45
  store i32 %46, i32* @ResvMax, align 4
  br label %47

; <label>:47:                                     ; preds = %44, %43
  %48 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %49 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %48, i32 0, i32 17
  %50 = load i32, i32* %49, align 4
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %53

; <label>:52:                                     ; preds = %47
  store i32 0, i32* @ResvMax, align 4
  br label %53

; <label>:53:                                     ; preds = %52, %47
  %54 = load i32, i32* @ResvMax, align 4
  %55 = load i32, i32* %10, align 4
  %56 = icmp sgt i32 %54, %55
  br i1 %56, label %57, label %59

; <label>:57:                                     ; preds = %53
  %58 = load i32, i32* %10, align 4
  store i32 %58, i32* @ResvMax, align 4
  br label %59

; <label>:59:                                     ; preds = %57, %53
  %60 = load i32, i32* %9, align 4
  ret i32 %60
}

; Function Attrs: nounwind
define arm_aapcscc void @ResvMaxBits(i32, i32*, i32*, i32) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 4
  %7 = alloca i32*, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32* %1, i32** %6, align 4
  store i32* %2, i32** %7, align 4
  store i32 %3, i32* %8, align 4
  %10 = load i32, i32* %5, align 4
  %11 = load i32*, i32** %6, align 4
  store i32 %10, i32* %11, align 4
  %12 = load i32, i32* @ResvSize, align 4
  %13 = load i32, i32* @ResvMax, align 4
  %14 = mul nsw i32 %13, 9
  %15 = sdiv i32 %14, 10
  %16 = icmp sgt i32 %12, %15
  br i1 %16, label %17, label %27

; <label>:17:                                     ; preds = %4
  %18 = load i32, i32* @ResvSize, align 4
  %19 = load i32, i32* @ResvMax, align 4
  %20 = mul nsw i32 %19, 9
  %21 = sdiv i32 %20, 10
  %22 = sub nsw i32 %18, %21
  store i32 %22, i32* %9, align 4
  %23 = load i32, i32* %9, align 4
  %24 = load i32*, i32** %6, align 4
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, %23
  store i32 %26, i32* %24, align 4
  br label %35

; <label>:27:                                     ; preds = %4
  store i32 0, i32* %9, align 4
  %28 = load i32, i32* %5, align 4
  %29 = sitofp i32 %28 to double
  %30 = fdiv double %29, 1.520000e+01
  %31 = fptosi double %30 to i32
  %32 = load i32*, i32** %6, align 4
  %33 = load i32, i32* %32, align 4
  %34 = sub nsw i32 %33, %31
  store i32 %34, i32* %32, align 4
  br label %35

; <label>:35:                                     ; preds = %27, %17
  %36 = load i32, i32* @ResvSize, align 4
  %37 = load i32, i32* @ResvMax, align 4
  %38 = mul nsw i32 %37, 6
  %39 = sdiv i32 %38, 10
  %40 = icmp slt i32 %36, %39
  br i1 %40, label %41, label %43

; <label>:41:                                     ; preds = %35
  %42 = load i32, i32* @ResvSize, align 4
  br label %47

; <label>:43:                                     ; preds = %35
  %44 = load i32, i32* @ResvMax, align 4
  %45 = mul nsw i32 %44, 6
  %46 = sdiv i32 %45, 10
  br label %47

; <label>:47:                                     ; preds = %43, %41
  %48 = phi i32 [ %42, %41 ], [ %46, %43 ]
  %49 = load i32*, i32** %7, align 4
  store i32 %48, i32* %49, align 4
  %50 = load i32, i32* %9, align 4
  %51 = load i32*, i32** %7, align 4
  %52 = load i32, i32* %51, align 4
  %53 = sub nsw i32 %52, %50
  store i32 %53, i32* %51, align 4
  %54 = load i32*, i32** %7, align 4
  %55 = load i32, i32* %54, align 4
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %57, label %59

; <label>:57:                                     ; preds = %47
  %58 = load i32*, i32** %7, align 4
  store i32 0, i32* %58, align 4
  br label %59

; <label>:59:                                     ; preds = %57, %47
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @ResvAdjust(%struct.lame_global_flags*, %struct.gr_info*, %struct.III_side_info_t*, i32) #0 {
  %5 = alloca %struct.lame_global_flags*, align 4
  %6 = alloca %struct.gr_info*, align 4
  %7 = alloca %struct.III_side_info_t*, align 4
  %8 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %5, align 4
  store %struct.gr_info* %1, %struct.gr_info** %6, align 4
  store %struct.III_side_info_t* %2, %struct.III_side_info_t** %7, align 4
  store i32 %3, i32* %8, align 4
  %9 = load i32, i32* %8, align 4
  %10 = load %struct.lame_global_flags*, %struct.lame_global_flags** %5, align 4
  %11 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %10, i32 0, i32 46
  %12 = load i32, i32* %11, align 4
  %13 = sdiv i32 %9, %12
  %14 = load %struct.gr_info*, %struct.gr_info** %6, align 4
  %15 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %14, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = sub i32 %13, %16
  %18 = load i32, i32* @ResvSize, align 4
  %19 = add i32 %18, %17
  store i32 %19, i32* @ResvSize, align 4
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @ResvFrameEnd(%struct.lame_global_flags*, %struct.III_side_info_t*, i32) #0 {
  %4 = alloca %struct.lame_global_flags*, align 4
  %5 = alloca %struct.III_side_info_t*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %4, align 4
  store %struct.III_side_info_t* %1, %struct.III_side_info_t** %5, align 4
  store i32 %2, i32* %6, align 4
  %9 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %10 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %9, i32 0, i32 46
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 2
  br i1 %12, label %13, label %20

; <label>:13:                                     ; preds = %3
  %14 = load i32, i32* %6, align 4
  %15 = and i32 %14, 1
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %20

; <label>:17:                                     ; preds = %13
  %18 = load i32, i32* @ResvSize, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* @ResvSize, align 4
  br label %20

; <label>:20:                                     ; preds = %17, %13, %3
  %21 = load i32, i32* @ResvSize, align 4
  %22 = load i32, i32* @ResvMax, align 4
  %23 = sub nsw i32 %21, %22
  store i32 %23, i32* %8, align 4
  %24 = load i32, i32* %8, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %20
  store i32 0, i32* %8, align 4
  br label %27

; <label>:27:                                     ; preds = %26, %20
  %28 = load i32, i32* %8, align 4
  %29 = load i32, i32* @ResvSize, align 4
  %30 = sub nsw i32 %29, %28
  store i32 %30, i32* @ResvSize, align 4
  %31 = load i32, i32* %8, align 4
  store i32 %31, i32* %7, align 4
  %32 = load i32, i32* @ResvSize, align 4
  %33 = srem i32 %32, 8
  store i32 %33, i32* %8, align 4
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %42

; <label>:35:                                     ; preds = %27
  %36 = load i32, i32* %8, align 4
  %37 = load i32, i32* %7, align 4
  %38 = add nsw i32 %37, %36
  store i32 %38, i32* %7, align 4
  %39 = load i32, i32* %8, align 4
  %40 = load i32, i32* @ResvSize, align 4
  %41 = sub nsw i32 %40, %39
  store i32 %41, i32* @ResvSize, align 4
  br label %42

; <label>:42:                                     ; preds = %35, %27
  %43 = load i32, i32* %7, align 4
  %44 = load %struct.III_side_info_t*, %struct.III_side_info_t** %5, align 4
  %45 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %44, i32 0, i32 2
  store i32 %43, i32* %45, align 4
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @initrtp(%struct.rtpheader*) #0 {
  %2 = alloca %struct.rtpheader*, align 4
  store %struct.rtpheader* %0, %struct.rtpheader** %2, align 4
  %3 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %4 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %3, i32 0, i32 0
  %5 = bitcast %struct.rtpbits* %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 1073741823
  %8 = or i32 %7, -2147483648
  store i32 %8, i32* %5, align 4
  %9 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %10 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %9, i32 0, i32 0
  %11 = bitcast %struct.rtpbits* %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, -536870913
  store i32 %13, i32* %11, align 4
  %14 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %15 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %14, i32 0, i32 0
  %16 = bitcast %struct.rtpbits* %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = and i32 %17, -268435457
  store i32 %18, i32* %16, align 4
  %19 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %20 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %19, i32 0, i32 0
  %21 = bitcast %struct.rtpbits* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %22, -251658241
  store i32 %23, i32* %21, align 4
  %24 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %25 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %24, i32 0, i32 0
  %26 = bitcast %struct.rtpbits* %25 to i32*
  %27 = load i32, i32* %26, align 4
  %28 = and i32 %27, -8388609
  store i32 %28, i32* %26, align 4
  %29 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %30 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %29, i32 0, i32 0
  %31 = bitcast %struct.rtpbits* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %32, -8323073
  %34 = or i32 %33, 917504
  store i32 %34, i32* %31, align 4
  %35 = call arm_aapcscc i32 @rand()
  %36 = and i32 %35, 65535
  %37 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %38 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %37, i32 0, i32 0
  %39 = bitcast %struct.rtpbits* %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = and i32 %36, 65535
  %42 = and i32 %40, -65536
  %43 = or i32 %42, %41
  store i32 %43, i32* %39, align 4
  %44 = shl i32 %41, 16
  %45 = ashr i32 %44, 16
  %46 = call arm_aapcscc i32 @rand()
  %47 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %48 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %47, i32 0, i32 1
  store i32 %46, i32* %48, align 4
  %49 = call arm_aapcscc i32 @rand()
  %50 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %51 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %50, i32 0, i32 2
  store i32 %49, i32* %51, align 4
  %52 = load %struct.rtpheader*, %struct.rtpheader** %2, align 4
  %53 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %52, i32 0, i32 3
  store i32 0, i32* %53, align 4
  ret void
}

declare arm_aapcscc i32 @rand() #3

; Function Attrs: nounwind
define arm_aapcscc i32 @sendrtp(i32, %struct.sockaddr_in*, %struct.rtpheader*, i8*, i32) #0 {
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr_in*, align 4
  %8 = alloca %struct.rtpheader*, align 4
  %9 = alloca i8*, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 4
  %12 = alloca i32*, align 4
  %13 = alloca i32*, align 4
  store i32 %0, i32* %6, align 4
  store %struct.sockaddr_in* %1, %struct.sockaddr_in** %7, align 4
  store %struct.rtpheader* %2, %struct.rtpheader** %8, align 4
  store i8* %3, i8** %9, align 4
  store i32 %4, i32* %10, align 4
  %14 = load i32, i32* %10, align 4
  %15 = add i32 %14, 16
  %16 = alloca i8, i32 %15
  store i8* %16, i8** %11, align 4
  %17 = load %struct.rtpheader*, %struct.rtpheader** %8, align 4
  %18 = bitcast %struct.rtpheader* %17 to i32*
  store i32* %18, i32** %12, align 4
  %19 = load i8*, i8** %11, align 4
  %20 = bitcast i8* %19 to i32*
  store i32* %20, i32** %13, align 4
  %21 = load i32*, i32** %12, align 4
  %22 = getelementptr inbounds i32, i32* %21, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = call arm_aapcscc i32 @htonl(i32 %23)
  %25 = load i32*, i32** %13, align 4
  %26 = getelementptr inbounds i32, i32* %25, i32 0
  store i32 %24, i32* %26, align 4
  %27 = load i32*, i32** %12, align 4
  %28 = getelementptr inbounds i32, i32* %27, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = call arm_aapcscc i32 @htonl(i32 %29)
  %31 = load i32*, i32** %13, align 4
  %32 = getelementptr inbounds i32, i32* %31, i32 1
  store i32 %30, i32* %32, align 4
  %33 = load i32*, i32** %12, align 4
  %34 = getelementptr inbounds i32, i32* %33, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = call arm_aapcscc i32 @htonl(i32 %35)
  %37 = load i32*, i32** %13, align 4
  %38 = getelementptr inbounds i32, i32* %37, i32 2
  store i32 %36, i32* %38, align 4
  %39 = load i32*, i32** %12, align 4
  %40 = getelementptr inbounds i32, i32* %39, i32 3
  %41 = load i32, i32* %40, align 4
  %42 = call arm_aapcscc i32 @htonl(i32 %41)
  %43 = load i32*, i32** %13, align 4
  %44 = getelementptr inbounds i32, i32* %43, i32 3
  store i32 %42, i32* %44, align 4
  %45 = load i8*, i8** %11, align 4
  %46 = getelementptr inbounds i8, i8* %45, i32 16
  %47 = load i8*, i8** %9, align 4
  %48 = load i32, i32* %10, align 4
  call void @llvm.memmove.p0i8.p0i8.i32(i8* %46, i8* %47, i32 %48, i32 1, i1 false)
  %49 = load i32, i32* %6, align 4
  %50 = load i8*, i8** %11, align 4
  %51 = load i32, i32* %10, align 4
  %52 = add i32 %51, 16
  %53 = load %struct.sockaddr_in*, %struct.sockaddr_in** %7, align 4
  %54 = bitcast %struct.sockaddr_in* %53 to %struct.sockaddr*
  %55 = call arm_aapcscc i32 @sendto(i32 %49, i8* %50, i32 %52, i32 0, %struct.sockaddr* %54, i32 16)
  ret i32 %55
}

declare arm_aapcscc i32 @htonl(i32) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture, i8* nocapture readonly, i32, i32, i1) #5

declare arm_aapcscc i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #3

; Function Attrs: nounwind
define arm_aapcscc i32 @makesocket(i8*, i16 zeroext, i32, %struct.sockaddr_in*) #0 {
  %5 = alloca i8*, align 4
  %6 = alloca i16, align 2
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in*, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.sockaddr_in, align 4
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i8* %0, i8** %5, align 4
  store i16 %1, i16* %6, align 2
  store i32 %2, i32* %7, align 4
  store %struct.sockaddr_in* %3, %struct.sockaddr_in** %8, align 4
  store i32 1, i32* %10, align 4
  %16 = load i32, i32* %7, align 4
  %17 = trunc i32 %16 to i8
  store i8 %17, i8* %12, align 1
  store i8 0, i8* %13, align 1
  %18 = call arm_aapcscc i32 @socket(i32 2, i32 2, i32 0)
  store i32 %18, i32* %15, align 4
  %19 = load i32, i32* %15, align 4
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %24

; <label>:21:                                     ; preds = %4
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %23 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.278, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:24:                                     ; preds = %4
  %25 = load i8*, i8** %5, align 4
  %26 = call arm_aapcscc i32 @inet_addr(i8* %25)
  store i32 %26, i32* %14, align 4
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  store i16 2, i16* %27, align 4
  %28 = load %struct.sockaddr_in*, %struct.sockaddr_in** %8, align 4
  %29 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %28, i32 0, i32 0
  store i16 2, i16* %29, align 4
  %30 = load i16, i16* %6, align 2
  %31 = call arm_aapcscc zeroext i16 @htons(i16 zeroext %30)
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  store i16 %31, i16* %32, align 2
  %33 = load %struct.sockaddr_in*, %struct.sockaddr_in** %8, align 4
  %34 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %33, i32 0, i32 1
  store i16 %31, i16* %34, align 2
  %35 = load i32, i32* %14, align 4
  %36 = load %struct.sockaddr_in*, %struct.sockaddr_in** %8, align 4
  %37 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %36, i32 0, i32 2
  %38 = getelementptr inbounds %struct.rtpbits, %struct.rtpbits* %37, i32 0, i32 0
  store i32 %35, i32* %38, align 4
  %39 = load i32, i32* %15, align 4
  %40 = bitcast i32* %10 to i8*
  %41 = call arm_aapcscc i32 @setsockopt(i32 %39, i32 1, i32 2, i8* %40, i32 4)
  store i32 %41, i32* %9, align 4
  %42 = load i32, i32* %9, align 4
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %44, label %47

; <label>:44:                                     ; preds = %24
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %46 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1.279, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:47:                                     ; preds = %24
  %48 = load i32, i32* %14, align 4
  %49 = call arm_aapcscc i32 @ntohl(i32 %48)
  %50 = lshr i32 %49, 28
  %51 = icmp eq i32 %50, 14
  br i1 %51, label %52, label %69

; <label>:52:                                     ; preds = %47
  %53 = load i32, i32* %15, align 4
  %54 = call arm_aapcscc i32 @setsockopt(i32 %53, i32 0, i32 33, i8* %12, i32 1)
  store i32 %54, i32* %9, align 4
  %55 = load i32, i32* %9, align 4
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %57, label %60

; <label>:57:                                     ; preds = %52
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %59 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %58, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.2.280, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:60:                                     ; preds = %52
  store i8 1, i8* %13, align 1
  %61 = load i32, i32* %15, align 4
  %62 = call arm_aapcscc i32 @setsockopt(i32 %61, i32 0, i32 34, i8* %13, i32 1)
  store i32 %62, i32* %9, align 4
  %63 = load i32, i32* %9, align 4
  %64 = icmp slt i32 %63, 0
  br i1 %64, label %65, label %68

; <label>:65:                                     ; preds = %60
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %67 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %66, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3.281, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:68:                                     ; preds = %60
  br label %69

; <label>:69:                                     ; preds = %68, %47
  %70 = load i32, i32* %15, align 4
  ret i32 %70
}

declare arm_aapcscc i32 @socket(i32, i32, i32) #3

declare arm_aapcscc i32 @inet_addr(i8*) #3

declare arm_aapcscc zeroext i16 @htons(i16 zeroext) #3

declare arm_aapcscc i32 @setsockopt(i32, i32, i32, i8*, i32) #3

declare arm_aapcscc i32 @ntohl(i32) #3

; Function Attrs: nounwind
define arm_aapcscc i32 @count_bits(%struct.lame_global_flags*, i32*, double*, %struct.gr_info*) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.lame_global_flags*, align 4
  %7 = alloca i32*, align 4
  %8 = alloca double*, align 4
  %9 = alloca %struct.gr_info*, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %6, align 4
  store i32* %1, i32** %7, align 4
  store double* %2, double** %8, align 4
  store %struct.gr_info* %3, %struct.gr_info** %9, align 4
  store i32 0, i32* %10, align 4
  %13 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %14 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %13, i32 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds [256 x double], [256 x double]* @ipow20, i32 0, i32 %15
  %17 = load double, double* %16, align 8
  %18 = fdiv double 8.206000e+03, %17
  store double %18, double* %12, align 8
  store i32 0, i32* %11, align 4
  br label %19

; <label>:19:                                     ; preds = %31, %4
  %20 = load i32, i32* %11, align 4
  %21 = icmp slt i32 %20, 576
  br i1 %21, label %22, label %34

; <label>:22:                                     ; preds = %19
  %23 = load double*, double** %8, align 4
  %24 = load i32, i32* %11, align 4
  %25 = getelementptr inbounds double, double* %23, i32 %24
  %26 = load double, double* %25, align 8
  %27 = load double, double* %12, align 8
  %28 = fcmp ogt double %26, %27
  br i1 %28, label %29, label %30

; <label>:29:                                     ; preds = %22
  store i32 100000, i32* %5, align 4
  br label %90

; <label>:30:                                     ; preds = %22
  br label %31

; <label>:31:                                     ; preds = %30
  %32 = load i32, i32* %11, align 4
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %11, align 4
  br label %19

; <label>:34:                                     ; preds = %19
  %35 = load %struct.lame_global_flags*, %struct.lame_global_flags** %6, align 4
  %36 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %35, i32 0, i32 60
  %37 = load i32, i32* %36, align 4
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %43

; <label>:39:                                     ; preds = %34
  %40 = load double*, double** %8, align 4
  %41 = load i32*, i32** %7, align 4
  %42 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  call arm_aapcscc void @quantize_xrpow(double* %40, i32* %41, %struct.gr_info* %42)
  br label %47

; <label>:43:                                     ; preds = %34
  %44 = load double*, double** %8, align 4
  %45 = load i32*, i32** %7, align 4
  %46 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  call arm_aapcscc void @quantize_xrpow_ISO(double* %44, i32* %45, %struct.gr_info* %46)
  br label %47

; <label>:47:                                     ; preds = %43, %39
  %48 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %49 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %48, i32 0, i32 6
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 2
  br i1 %51, label %52, label %70

; <label>:52:                                     ; preds = %47
  %53 = load i32*, i32** %7, align 4
  %54 = load i32*, i32** %7, align 4
  %55 = getelementptr inbounds i32, i32* %54, i32 36
  %56 = call arm_aapcscc i32 @choose_table_short(i32* %53, i32* %55, i32* %10)
  %57 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %58 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %57, i32 0, i32 8
  %59 = getelementptr inbounds [3 x i32], [3 x i32]* %58, i32 0, i32 0
  store i32 %56, i32* %59, align 4
  %60 = load i32*, i32** %7, align 4
  %61 = getelementptr inbounds i32, i32* %60, i32 36
  %62 = load i32*, i32** %7, align 4
  %63 = getelementptr inbounds i32, i32* %62, i32 576
  %64 = call arm_aapcscc i32 @choose_table_short(i32* %61, i32* %63, i32* %10)
  %65 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %66 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %65, i32 0, i32 8
  %67 = getelementptr inbounds [3 x i32], [3 x i32]* %66, i32 0, i32 1
  store i32 %64, i32* %67, align 4
  %68 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %69 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %68, i32 0, i32 1
  store i32 288, i32* %69, align 4
  br label %88

; <label>:70:                                     ; preds = %47
  %71 = load i32*, i32** %7, align 4
  %72 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %73 = call arm_aapcscc i32 @count_bits_long(i32* %71, %struct.gr_info* %72)
  store i32 %73, i32* %10, align 4
  %74 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %75 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %74, i32 0, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %78 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %77, i32 0, i32 1
  %79 = load i32, i32* %78, align 4
  %80 = sub i32 %76, %79
  %81 = udiv i32 %80, 4
  %82 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %83 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %82, i32 0, i32 2
  store i32 %81, i32* %83, align 4
  %84 = load %struct.gr_info*, %struct.gr_info** %9, align 4
  %85 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %84, i32 0, i32 1
  %86 = load i32, i32* %85, align 4
  %87 = udiv i32 %86, 2
  store i32 %87, i32* %85, align 4
  br label %88

; <label>:88:                                     ; preds = %70, %52
  %89 = load i32, i32* %10, align 4
  store i32 %89, i32* %5, align 4
  br label %90

; <label>:90:                                     ; preds = %88, %29
  %91 = load i32, i32* %5, align 4
  ret i32 %91
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @choose_table_short(i32*, i32*, i32*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 4
  %6 = alloca i32*, align 4
  %7 = alloca i32*, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32* %0, i32** %5, align 4
  store i32* %1, i32** %6, align 4
  store i32* %2, i32** %7, align 4
  %13 = load i32*, i32** %5, align 4
  %14 = load i32*, i32** %6, align 4
  %15 = call arm_aapcscc i32 @ix_max(i32* %13, i32* %14)
  store i32 %15, i32* %8, align 4
  %16 = load i32, i32* %8, align 4
  %17 = icmp sgt i32 %16, 8206
  br i1 %17, label %18, label %20

; <label>:18:                                     ; preds = %3
  %19 = load i32*, i32** %7, align 4
  store i32 100000, i32* %19, align 4
  store i32 -1, i32* %4, align 4
  br label %125

; <label>:20:                                     ; preds = %3
  %21 = load i32, i32* %8, align 4
  %22 = icmp sle i32 %21, 15
  br i1 %22, label %23, label %80

; <label>:23:                                     ; preds = %20
  %24 = load i32, i32* %8, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %23
  store i32 0, i32* %4, align 4
  br label %125

; <label>:27:                                     ; preds = %23
  %28 = load i32, i32* %8, align 4
  %29 = sub nsw i32 %28, 1
  %30 = getelementptr inbounds [15 x i32], [15 x i32]* @huf_tbl_noESC, i32 0, i32 %29
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %9, align 4
  %32 = load i32*, i32** %5, align 4
  %33 = load i32*, i32** %6, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call arm_aapcscc i32 @count_bit_short_noESC(i32* %32, i32* %33, i32 %34)
  store i32 %35, i32* %10, align 4
  %36 = load i32, i32* %9, align 4
  store i32 %36, i32* %11, align 4
  %37 = load i32, i32* %9, align 4
  switch i32 %37, label %74 [
    i32 7, label %38
    i32 10, label %38
    i32 2, label %50
    i32 5, label %50
    i32 13, label %62
  ]

; <label>:38:                                     ; preds = %27, %27
  %39 = load i32, i32* %11, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %11, align 4
  %41 = load i32, i32* %11, align 4
  %42 = call arm_aapcscc i32 @count_bit_noESC2(i32 %41)
  store i32 %42, i32* %12, align 4
  %43 = load i32, i32* %10, align 4
  %44 = load i32, i32* %12, align 4
  %45 = icmp sgt i32 %43, %44
  br i1 %45, label %46, label %49

; <label>:46:                                     ; preds = %38
  %47 = load i32, i32* %12, align 4
  store i32 %47, i32* %10, align 4
  %48 = load i32, i32* %11, align 4
  store i32 %48, i32* %9, align 4
  br label %49

; <label>:49:                                     ; preds = %46, %38
  br label %50

; <label>:50:                                     ; preds = %49, %27, %27
  %51 = load i32, i32* %11, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %11, align 4
  %53 = load i32, i32* %11, align 4
  %54 = call arm_aapcscc i32 @count_bit_noESC2(i32 %53)
  store i32 %54, i32* %12, align 4
  %55 = load i32, i32* %10, align 4
  %56 = load i32, i32* %12, align 4
  %57 = icmp sgt i32 %55, %56
  br i1 %57, label %58, label %61

; <label>:58:                                     ; preds = %50
  %59 = load i32, i32* %12, align 4
  store i32 %59, i32* %10, align 4
  %60 = load i32, i32* %11, align 4
  store i32 %60, i32* %9, align 4
  br label %61

; <label>:61:                                     ; preds = %58, %50
  br label %75

; <label>:62:                                     ; preds = %27
  %63 = load i32, i32* %11, align 4
  %64 = add nsw i32 %63, 2
  store i32 %64, i32* %11, align 4
  %65 = load i32, i32* %11, align 4
  %66 = call arm_aapcscc i32 @count_bit_noESC2(i32 %65)
  store i32 %66, i32* %12, align 4
  %67 = load i32, i32* %10, align 4
  %68 = load i32, i32* %12, align 4
  %69 = icmp sgt i32 %67, %68
  br i1 %69, label %70, label %73

; <label>:70:                                     ; preds = %62
  %71 = load i32, i32* %12, align 4
  store i32 %71, i32* %10, align 4
  %72 = load i32, i32* %11, align 4
  store i32 %72, i32* %9, align 4
  br label %73

; <label>:73:                                     ; preds = %70, %62
  br label %75

; <label>:74:                                     ; preds = %27
  br label %75

; <label>:75:                                     ; preds = %74, %73, %61
  %76 = load i32, i32* %10, align 4
  %77 = load i32*, i32** %7, align 4
  %78 = load i32, i32* %77, align 4
  %79 = add nsw i32 %78, %76
  store i32 %79, i32* %77, align 4
  br label %123

; <label>:80:                                     ; preds = %20
  %81 = load i32, i32* %8, align 4
  %82 = sub nsw i32 %81, 15
  store i32 %82, i32* %8, align 4
  store i32 24, i32* %11, align 4
  br label %83

; <label>:83:                                     ; preds = %95, %80
  %84 = load i32, i32* %11, align 4
  %85 = icmp slt i32 %84, 32
  br i1 %85, label %86, label %98

; <label>:86:                                     ; preds = %83
  %87 = load i32, i32* %11, align 4
  %88 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %87
  %89 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %88, i32 0, i32 1
  %90 = load i32, i32* %89, align 4
  %91 = load i32, i32* %8, align 4
  %92 = icmp sge i32 %90, %91
  br i1 %92, label %93, label %94

; <label>:93:                                     ; preds = %86
  br label %98

; <label>:94:                                     ; preds = %86
  br label %95

; <label>:95:                                     ; preds = %94
  %96 = load i32, i32* %11, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %11, align 4
  br label %83

; <label>:98:                                     ; preds = %93, %83
  %99 = load i32, i32* %11, align 4
  %100 = sub nsw i32 %99, 8
  store i32 %100, i32* %9, align 4
  br label %101

; <label>:101:                                    ; preds = %113, %98
  %102 = load i32, i32* %9, align 4
  %103 = icmp slt i32 %102, 24
  br i1 %103, label %104, label %116

; <label>:104:                                    ; preds = %101
  %105 = load i32, i32* %9, align 4
  %106 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %105
  %107 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %106, i32 0, i32 1
  %108 = load i32, i32* %107, align 4
  %109 = load i32, i32* %8, align 4
  %110 = icmp sge i32 %108, %109
  br i1 %110, label %111, label %112

; <label>:111:                                    ; preds = %104
  br label %116

; <label>:112:                                    ; preds = %104
  br label %113

; <label>:113:                                    ; preds = %112
  %114 = load i32, i32* %9, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %9, align 4
  br label %101

; <label>:116:                                    ; preds = %111, %101
  %117 = load i32*, i32** %5, align 4
  %118 = load i32*, i32** %6, align 4
  %119 = load i32, i32* %9, align 4
  %120 = load i32, i32* %11, align 4
  %121 = load i32*, i32** %7, align 4
  %122 = call arm_aapcscc i32 @count_bit_short_ESC(i32* %117, i32* %118, i32 %119, i32 %120, i32* %121)
  store i32 %122, i32* %9, align 4
  br label %123

; <label>:123:                                    ; preds = %116, %75
  %124 = load i32, i32* %9, align 4
  store i32 %124, i32* %4, align 4
  br label %125

; <label>:125:                                    ; preds = %123, %26, %18
  %126 = load i32, i32* %4, align 4
  ret i32 %126
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @count_bits_long(i32*, %struct.gr_info*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32*, align 4
  %5 = alloca %struct.gr_info*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32* %0, i32** %4, align 4
  store %struct.gr_info* %1, %struct.gr_info** %5, align 4
  store i32 0, i32* %9, align 4
  store i32 576, i32* %6, align 4
  br label %14

; <label>:14:                                     ; preds = %32, %2
  %15 = load i32, i32* %6, align 4
  %16 = icmp sgt i32 %15, 1
  br i1 %16, label %17, label %35

; <label>:17:                                     ; preds = %14
  %18 = load i32*, i32** %4, align 4
  %19 = load i32, i32* %6, align 4
  %20 = sub nsw i32 %19, 1
  %21 = getelementptr inbounds i32, i32* %18, i32 %20
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %4, align 4
  %24 = load i32, i32* %6, align 4
  %25 = sub nsw i32 %24, 2
  %26 = getelementptr inbounds i32, i32* %23, i32 %25
  %27 = load i32, i32* %26, align 4
  %28 = or i32 %22, %27
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %31

; <label>:30:                                     ; preds = %17
  br label %35

; <label>:31:                                     ; preds = %17
  br label %32

; <label>:32:                                     ; preds = %31
  %33 = load i32, i32* %6, align 4
  %34 = sub nsw i32 %33, 2
  store i32 %34, i32* %6, align 4
  br label %14

; <label>:35:                                     ; preds = %30, %14
  %36 = load i32, i32* %6, align 4
  %37 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %38 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %37, i32 0, i32 2
  store i32 %36, i32* %38, align 4
  store i32 0, i32* %7, align 4
  br label %39

; <label>:39:                                     ; preds = %124, %35
  %40 = load i32, i32* %6, align 4
  %41 = icmp sgt i32 %40, 3
  br i1 %41, label %42, label %127

; <label>:42:                                     ; preds = %39
  %43 = load i32*, i32** %4, align 4
  %44 = load i32, i32* %6, align 4
  %45 = sub nsw i32 %44, 1
  %46 = getelementptr inbounds i32, i32* %43, i32 %45
  %47 = load i32, i32* %46, align 4
  %48 = load i32*, i32** %4, align 4
  %49 = load i32, i32* %6, align 4
  %50 = sub nsw i32 %49, 2
  %51 = getelementptr inbounds i32, i32* %48, i32 %50
  %52 = load i32, i32* %51, align 4
  %53 = or i32 %47, %52
  %54 = load i32*, i32** %4, align 4
  %55 = load i32, i32* %6, align 4
  %56 = sub nsw i32 %55, 3
  %57 = getelementptr inbounds i32, i32* %54, i32 %56
  %58 = load i32, i32* %57, align 4
  %59 = or i32 %53, %58
  %60 = load i32*, i32** %4, align 4
  %61 = load i32, i32* %6, align 4
  %62 = sub nsw i32 %61, 4
  %63 = getelementptr inbounds i32, i32* %60, i32 %62
  %64 = load i32, i32* %63, align 4
  %65 = or i32 %59, %64
  %66 = icmp ugt i32 %65, 1
  br i1 %66, label %67, label %68

; <label>:67:                                     ; preds = %42
  br label %127

; <label>:68:                                     ; preds = %42
  %69 = load i32*, i32** %4, align 4
  %70 = load i32, i32* %6, align 4
  %71 = sub nsw i32 %70, 1
  %72 = getelementptr inbounds i32, i32* %69, i32 %71
  %73 = load i32, i32* %72, align 4
  store i32 %73, i32* %11, align 4
  %74 = load i32, i32* %11, align 4
  store i32 %74, i32* %10, align 4
  %75 = load i32, i32* %11, align 4
  %76 = load i32, i32* %9, align 4
  %77 = add nsw i32 %76, %75
  store i32 %77, i32* %9, align 4
  %78 = load i32*, i32** %4, align 4
  %79 = load i32, i32* %6, align 4
  %80 = sub nsw i32 %79, 2
  %81 = getelementptr inbounds i32, i32* %78, i32 %80
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %11, align 4
  %83 = load i32, i32* %11, align 4
  %84 = icmp ne i32 %83, 0
  br i1 %84, label %85, label %90

; <label>:85:                                     ; preds = %68
  %86 = load i32, i32* %10, align 4
  %87 = add nsw i32 %86, 2
  store i32 %87, i32* %10, align 4
  %88 = load i32, i32* %9, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %9, align 4
  br label %90

; <label>:90:                                     ; preds = %85, %68
  %91 = load i32*, i32** %4, align 4
  %92 = load i32, i32* %6, align 4
  %93 = sub nsw i32 %92, 3
  %94 = getelementptr inbounds i32, i32* %91, i32 %93
  %95 = load i32, i32* %94, align 4
  store i32 %95, i32* %11, align 4
  %96 = load i32, i32* %11, align 4
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %103

; <label>:98:                                     ; preds = %90
  %99 = load i32, i32* %10, align 4
  %100 = add nsw i32 %99, 4
  store i32 %100, i32* %10, align 4
  %101 = load i32, i32* %9, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %9, align 4
  br label %103

; <label>:103:                                    ; preds = %98, %90
  %104 = load i32*, i32** %4, align 4
  %105 = load i32, i32* %6, align 4
  %106 = sub nsw i32 %105, 4
  %107 = getelementptr inbounds i32, i32* %104, i32 %106
  %108 = load i32, i32* %107, align 4
  store i32 %108, i32* %11, align 4
  %109 = load i32, i32* %11, align 4
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %111, label %116

; <label>:111:                                    ; preds = %103
  %112 = load i32, i32* %10, align 4
  %113 = add nsw i32 %112, 8
  store i32 %113, i32* %10, align 4
  %114 = load i32, i32* %9, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %9, align 4
  br label %116

; <label>:116:                                    ; preds = %111, %103
  %117 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 32, i32 3), align 4
  %118 = load i32, i32* %10, align 4
  %119 = getelementptr inbounds i8, i8* %117, i32 %118
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = load i32, i32* %7, align 4
  %123 = add nsw i32 %122, %121
  store i32 %123, i32* %7, align 4
  br label %124

; <label>:124:                                    ; preds = %116
  %125 = load i32, i32* %6, align 4
  %126 = sub nsw i32 %125, 4
  store i32 %126, i32* %6, align 4
  br label %39

; <label>:127:                                    ; preds = %67, %39
  %128 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %129 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %128, i32 0, i32 2
  %130 = load i32, i32* %129, align 4
  %131 = load i32, i32* %6, align 4
  %132 = sub i32 %130, %131
  store i32 %132, i32* %8, align 4
  %133 = load i32, i32* %7, align 4
  %134 = load i32, i32* %8, align 4
  %135 = icmp slt i32 %133, %134
  br i1 %135, label %136, label %142

; <label>:136:                                    ; preds = %127
  %137 = load i32, i32* %7, align 4
  %138 = load i32, i32* %9, align 4
  %139 = add nsw i32 %138, %137
  store i32 %139, i32* %9, align 4
  %140 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %141 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %140, i32 0, i32 14
  store i32 0, i32* %141, align 4
  br label %148

; <label>:142:                                    ; preds = %127
  %143 = load i32, i32* %8, align 4
  %144 = load i32, i32* %9, align 4
  %145 = add nsw i32 %144, %143
  store i32 %145, i32* %9, align 4
  %146 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %147 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %146, i32 0, i32 14
  store i32 1, i32* %147, align 4
  br label %148

; <label>:148:                                    ; preds = %142, %136
  %149 = load i32, i32* %9, align 4
  %150 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %151 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %150, i32 0, i32 18
  store i32 %149, i32* %151, align 4
  %152 = load i32, i32* %6, align 4
  %153 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %154 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %153, i32 0, i32 1
  store i32 %152, i32* %154, align 4
  %155 = load i32, i32* %6, align 4
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %159

; <label>:157:                                    ; preds = %148
  %158 = load i32, i32* %9, align 4
  store i32 %158, i32* %3, align 4
  br label %271

; <label>:159:                                    ; preds = %148
  %160 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %161 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %160, i32 0, i32 6
  %162 = load i32, i32* %161, align 4
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %164, label %238

; <label>:164:                                    ; preds = %159
  store i32 0, i32* %13, align 4
  br label %165

; <label>:165:                                    ; preds = %172, %164
  %166 = load i32, i32* %13, align 4
  %167 = add nsw i32 %166, 1
  store i32 %167, i32* %13, align 4
  %168 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %167
  %169 = load i32, i32* %168, align 4
  %170 = load i32, i32* %6, align 4
  %171 = icmp slt i32 %169, %170
  br i1 %171, label %172, label %173

; <label>:172:                                    ; preds = %165
  br label %165

; <label>:173:                                    ; preds = %165
  %174 = load i32, i32* %13, align 4
  %175 = getelementptr inbounds [23 x %struct.anon.55], [23 x %struct.anon.55]* @subdv_table, i32 0, i32 %174
  %176 = getelementptr inbounds %struct.anon.55, %struct.anon.55* %175, i32 0, i32 0
  %177 = load i32, i32* %176, align 4
  store i32 %177, i32* %12, align 4
  br label %178

; <label>:178:                                    ; preds = %185, %173
  %179 = load i32, i32* %12, align 4
  %180 = add nsw i32 %179, 1
  %181 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %180
  %182 = load i32, i32* %181, align 4
  %183 = load i32, i32* %6, align 4
  %184 = icmp sgt i32 %182, %183
  br i1 %184, label %185, label %188

; <label>:185:                                    ; preds = %178
  %186 = load i32, i32* %12, align 4
  %187 = add nsw i32 %186, -1
  store i32 %187, i32* %12, align 4
  br label %178

; <label>:188:                                    ; preds = %178
  %189 = load i32, i32* %12, align 4
  %190 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %191 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %190, i32 0, i32 10
  store i32 %189, i32* %191, align 4
  %192 = load i32, i32* %13, align 4
  %193 = getelementptr inbounds [23 x %struct.anon.55], [23 x %struct.anon.55]* @subdv_table, i32 0, i32 %192
  %194 = getelementptr inbounds %struct.anon.55, %struct.anon.55* %193, i32 0, i32 1
  %195 = load i32, i32* %194, align 4
  store i32 %195, i32* %12, align 4
  br label %196

; <label>:196:                                    ; preds = %207, %188
  %197 = load i32, i32* %12, align 4
  %198 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %199 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %198, i32 0, i32 10
  %200 = load i32, i32* %199, align 4
  %201 = add i32 %197, %200
  %202 = add i32 %201, 2
  %203 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %202
  %204 = load i32, i32* %203, align 4
  %205 = load i32, i32* %6, align 4
  %206 = icmp sgt i32 %204, %205
  br i1 %206, label %207, label %210

; <label>:207:                                    ; preds = %196
  %208 = load i32, i32* %12, align 4
  %209 = add nsw i32 %208, -1
  store i32 %209, i32* %12, align 4
  br label %196

; <label>:210:                                    ; preds = %196
  %211 = load i32, i32* %12, align 4
  %212 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %213 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %212, i32 0, i32 11
  store i32 %211, i32* %213, align 4
  %214 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %215 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %214, i32 0, i32 10
  %216 = load i32, i32* %215, align 4
  %217 = add i32 %216, 1
  %218 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %217
  %219 = load i32, i32* %218, align 4
  store i32 %219, i32* %7, align 4
  %220 = load i32, i32* %12, align 4
  %221 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %222 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %221, i32 0, i32 10
  %223 = load i32, i32* %222, align 4
  %224 = add i32 %220, %223
  %225 = add i32 %224, 2
  %226 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %225
  %227 = load i32, i32* %226, align 4
  store i32 %227, i32* %8, align 4
  %228 = load i32*, i32** %4, align 4
  %229 = load i32, i32* %8, align 4
  %230 = getelementptr inbounds i32, i32* %228, i32 %229
  %231 = load i32*, i32** %4, align 4
  %232 = load i32, i32* %6, align 4
  %233 = getelementptr inbounds i32, i32* %231, i32 %232
  %234 = call arm_aapcscc i32 @choose_table(i32* %230, i32* %233, i32* %9)
  %235 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %236 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %235, i32 0, i32 8
  %237 = getelementptr inbounds [3 x i32], [3 x i32]* %236, i32 0, i32 2
  store i32 %234, i32* %237, align 4
  br label %251

; <label>:238:                                    ; preds = %159
  %239 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %240 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %239, i32 0, i32 10
  store i32 7, i32* %240, align 4
  %241 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %242 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %241, i32 0, i32 11
  store i32 13, i32* %242, align 4
  %243 = load i32, i32* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0, i32 8), align 4
  store i32 %243, i32* %7, align 4
  %244 = load i32, i32* %6, align 4
  store i32 %244, i32* %8, align 4
  %245 = load i32, i32* %7, align 4
  %246 = load i32, i32* %8, align 4
  %247 = icmp sgt i32 %245, %246
  br i1 %247, label %248, label %250

; <label>:248:                                    ; preds = %238
  %249 = load i32, i32* %8, align 4
  store i32 %249, i32* %7, align 4
  br label %250

; <label>:250:                                    ; preds = %248, %238
  br label %251

; <label>:251:                                    ; preds = %250, %210
  %252 = load i32*, i32** %4, align 4
  %253 = load i32*, i32** %4, align 4
  %254 = load i32, i32* %7, align 4
  %255 = getelementptr inbounds i32, i32* %253, i32 %254
  %256 = call arm_aapcscc i32 @choose_table(i32* %252, i32* %255, i32* %9)
  %257 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %258 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %257, i32 0, i32 8
  %259 = getelementptr inbounds [3 x i32], [3 x i32]* %258, i32 0, i32 0
  store i32 %256, i32* %259, align 4
  %260 = load i32*, i32** %4, align 4
  %261 = load i32, i32* %7, align 4
  %262 = getelementptr inbounds i32, i32* %260, i32 %261
  %263 = load i32*, i32** %4, align 4
  %264 = load i32, i32* %8, align 4
  %265 = getelementptr inbounds i32, i32* %263, i32 %264
  %266 = call arm_aapcscc i32 @choose_table(i32* %262, i32* %265, i32* %9)
  %267 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %268 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %267, i32 0, i32 8
  %269 = getelementptr inbounds [3 x i32], [3 x i32]* %268, i32 0, i32 1
  store i32 %266, i32* %269, align 4
  %270 = load i32, i32* %9, align 4
  store i32 %270, i32* %3, align 4
  br label %271

; <label>:271:                                    ; preds = %251, %157
  %272 = load i32, i32* %3, align 4
  ret i32 %272
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @choose_table(i32*, i32*, i32*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 4
  %6 = alloca i32*, align 4
  %7 = alloca i32*, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32* %0, i32** %5, align 4
  store i32* %1, i32** %6, align 4
  store i32* %2, i32** %7, align 4
  %13 = load i32*, i32** %5, align 4
  %14 = load i32*, i32** %6, align 4
  %15 = call arm_aapcscc i32 @ix_max(i32* %13, i32* %14)
  store i32 %15, i32* %8, align 4
  %16 = load i32, i32* %8, align 4
  %17 = icmp sgt i32 %16, 8206
  br i1 %17, label %18, label %20

; <label>:18:                                     ; preds = %3
  %19 = load i32*, i32** %7, align 4
  store i32 100000, i32* %19, align 4
  store i32 -1, i32* %4, align 4
  br label %125

; <label>:20:                                     ; preds = %3
  %21 = load i32, i32* %8, align 4
  %22 = icmp sle i32 %21, 15
  br i1 %22, label %23, label %80

; <label>:23:                                     ; preds = %20
  %24 = load i32, i32* %8, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %23
  store i32 0, i32* %4, align 4
  br label %125

; <label>:27:                                     ; preds = %23
  %28 = load i32, i32* %8, align 4
  %29 = sub nsw i32 %28, 1
  %30 = getelementptr inbounds [15 x i32], [15 x i32]* @huf_tbl_noESC, i32 0, i32 %29
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %9, align 4
  %32 = load i32*, i32** %5, align 4
  %33 = load i32*, i32** %6, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call arm_aapcscc i32 @count_bit_noESC(i32* %32, i32* %33, i32 %34)
  store i32 %35, i32* %10, align 4
  %36 = load i32, i32* %9, align 4
  store i32 %36, i32* %11, align 4
  %37 = load i32, i32* %9, align 4
  switch i32 %37, label %74 [
    i32 7, label %38
    i32 10, label %38
    i32 2, label %50
    i32 5, label %50
    i32 13, label %62
  ]

; <label>:38:                                     ; preds = %27, %27
  %39 = load i32, i32* %11, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %11, align 4
  %41 = load i32, i32* %11, align 4
  %42 = call arm_aapcscc i32 @count_bit_noESC2(i32 %41)
  store i32 %42, i32* %12, align 4
  %43 = load i32, i32* %10, align 4
  %44 = load i32, i32* %12, align 4
  %45 = icmp sgt i32 %43, %44
  br i1 %45, label %46, label %49

; <label>:46:                                     ; preds = %38
  %47 = load i32, i32* %12, align 4
  store i32 %47, i32* %10, align 4
  %48 = load i32, i32* %11, align 4
  store i32 %48, i32* %9, align 4
  br label %49

; <label>:49:                                     ; preds = %46, %38
  br label %50

; <label>:50:                                     ; preds = %49, %27, %27
  %51 = load i32, i32* %11, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %11, align 4
  %53 = load i32, i32* %11, align 4
  %54 = call arm_aapcscc i32 @count_bit_noESC2(i32 %53)
  store i32 %54, i32* %12, align 4
  %55 = load i32, i32* %10, align 4
  %56 = load i32, i32* %12, align 4
  %57 = icmp sgt i32 %55, %56
  br i1 %57, label %58, label %61

; <label>:58:                                     ; preds = %50
  %59 = load i32, i32* %12, align 4
  store i32 %59, i32* %10, align 4
  %60 = load i32, i32* %11, align 4
  store i32 %60, i32* %9, align 4
  br label %61

; <label>:61:                                     ; preds = %58, %50
  br label %75

; <label>:62:                                     ; preds = %27
  %63 = load i32, i32* %11, align 4
  %64 = add nsw i32 %63, 2
  store i32 %64, i32* %11, align 4
  %65 = load i32, i32* %11, align 4
  %66 = call arm_aapcscc i32 @count_bit_noESC2(i32 %65)
  store i32 %66, i32* %12, align 4
  %67 = load i32, i32* %10, align 4
  %68 = load i32, i32* %12, align 4
  %69 = icmp sgt i32 %67, %68
  br i1 %69, label %70, label %73

; <label>:70:                                     ; preds = %62
  %71 = load i32, i32* %12, align 4
  store i32 %71, i32* %10, align 4
  %72 = load i32, i32* %11, align 4
  store i32 %72, i32* %9, align 4
  br label %73

; <label>:73:                                     ; preds = %70, %62
  br label %75

; <label>:74:                                     ; preds = %27
  br label %75

; <label>:75:                                     ; preds = %74, %73, %61
  %76 = load i32, i32* %10, align 4
  %77 = load i32*, i32** %7, align 4
  %78 = load i32, i32* %77, align 4
  %79 = add nsw i32 %78, %76
  store i32 %79, i32* %77, align 4
  br label %123

; <label>:80:                                     ; preds = %20
  %81 = load i32, i32* %8, align 4
  %82 = sub nsw i32 %81, 15
  store i32 %82, i32* %8, align 4
  store i32 24, i32* %11, align 4
  br label %83

; <label>:83:                                     ; preds = %95, %80
  %84 = load i32, i32* %11, align 4
  %85 = icmp slt i32 %84, 32
  br i1 %85, label %86, label %98

; <label>:86:                                     ; preds = %83
  %87 = load i32, i32* %11, align 4
  %88 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %87
  %89 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %88, i32 0, i32 1
  %90 = load i32, i32* %89, align 4
  %91 = load i32, i32* %8, align 4
  %92 = icmp sge i32 %90, %91
  br i1 %92, label %93, label %94

; <label>:93:                                     ; preds = %86
  br label %98

; <label>:94:                                     ; preds = %86
  br label %95

; <label>:95:                                     ; preds = %94
  %96 = load i32, i32* %11, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %11, align 4
  br label %83

; <label>:98:                                     ; preds = %93, %83
  %99 = load i32, i32* %11, align 4
  %100 = sub nsw i32 %99, 8
  store i32 %100, i32* %9, align 4
  br label %101

; <label>:101:                                    ; preds = %113, %98
  %102 = load i32, i32* %9, align 4
  %103 = icmp slt i32 %102, 24
  br i1 %103, label %104, label %116

; <label>:104:                                    ; preds = %101
  %105 = load i32, i32* %9, align 4
  %106 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %105
  %107 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %106, i32 0, i32 1
  %108 = load i32, i32* %107, align 4
  %109 = load i32, i32* %8, align 4
  %110 = icmp sge i32 %108, %109
  br i1 %110, label %111, label %112

; <label>:111:                                    ; preds = %104
  br label %116

; <label>:112:                                    ; preds = %104
  br label %113

; <label>:113:                                    ; preds = %112
  %114 = load i32, i32* %9, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %9, align 4
  br label %101

; <label>:116:                                    ; preds = %111, %101
  %117 = load i32*, i32** %5, align 4
  %118 = load i32*, i32** %6, align 4
  %119 = load i32, i32* %9, align 4
  %120 = load i32, i32* %11, align 4
  %121 = load i32*, i32** %7, align 4
  %122 = call arm_aapcscc i32 @count_bit_ESC(i32* %117, i32* %118, i32 %119, i32 %120, i32* %121)
  store i32 %122, i32* %9, align 4
  br label %123

; <label>:123:                                    ; preds = %116, %75
  %124 = load i32, i32* %9, align 4
  store i32 %124, i32* %4, align 4
  br label %125

; <label>:125:                                    ; preds = %123, %26, %18
  %126 = load i32, i32* %4, align 4
  ret i32 %126
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @ix_max(i32*, i32*) #0 {
  %3 = alloca i32*, align 4
  %4 = alloca i32*, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32* %0, i32** %3, align 4
  store i32* %1, i32** %4, align 4
  store i32 0, i32* %5, align 4
  br label %7

; <label>:7:                                      ; preds = %29, %2
  %8 = load i32*, i32** %3, align 4
  %9 = load i32*, i32** %4, align 4
  %10 = icmp ult i32* %8, %9
  br i1 %10, label %11, label %30

; <label>:11:                                     ; preds = %7
  %12 = load i32*, i32** %3, align 4
  %13 = getelementptr inbounds i32, i32* %12, i32 1
  store i32* %13, i32** %3, align 4
  %14 = load i32, i32* %12, align 4
  store i32 %14, i32* %6, align 4
  %15 = load i32, i32* %5, align 4
  %16 = load i32, i32* %6, align 4
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %18, label %20

; <label>:18:                                     ; preds = %11
  %19 = load i32, i32* %6, align 4
  store i32 %19, i32* %5, align 4
  br label %20

; <label>:20:                                     ; preds = %18, %11
  %21 = load i32*, i32** %3, align 4
  %22 = getelementptr inbounds i32, i32* %21, i32 1
  store i32* %22, i32** %3, align 4
  %23 = load i32, i32* %21, align 4
  store i32 %23, i32* %6, align 4
  %24 = load i32, i32* %5, align 4
  %25 = load i32, i32* %6, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %29

; <label>:27:                                     ; preds = %20
  %28 = load i32, i32* %6, align 4
  store i32 %28, i32* %5, align 4
  br label %29

; <label>:29:                                     ; preds = %27, %20
  br label %7

; <label>:30:                                     ; preds = %7
  %31 = load i32, i32* %5, align 4
  ret i32 %31
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @count_bit_noESC(i32*, i32*, i32) #0 {
  %4 = alloca i32*, align 4
  %5 = alloca i32*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 4
  %10 = alloca i32*, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32* %0, i32** %4, align 4
  store i32* %1, i32** %5, align 4
  store i32 %2, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  %13 = load i32, i32* %6, align 4
  %14 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %13
  %15 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %14, i32 0, i32 3
  %16 = load i8*, i8** %15, align 4
  store i8* %16, i8** %9, align 4
  store i32* getelementptr inbounds ([288 x i32], [288 x i32]* @cb_esc_buf, i32 0, i32 0), i32** %10, align 4
  br label %17

; <label>:17:                                     ; preds = %51, %3
  %18 = load i32*, i32** %4, align 4
  %19 = getelementptr inbounds i32, i32* %18, i32 1
  store i32* %19, i32** %4, align 4
  %20 = load i32, i32* %18, align 4
  store i32 %20, i32* %11, align 4
  %21 = load i32*, i32** %4, align 4
  %22 = getelementptr inbounds i32, i32* %21, i32 1
  store i32* %22, i32** %4, align 4
  %23 = load i32, i32* %21, align 4
  store i32 %23, i32* %12, align 4
  %24 = load i32, i32* %11, align 4
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %31

; <label>:26:                                     ; preds = %17
  %27 = load i32, i32* %8, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %11, align 4
  %30 = mul nsw i32 %29, 16
  store i32 %30, i32* %11, align 4
  br label %31

; <label>:31:                                     ; preds = %26, %17
  %32 = load i32, i32* %12, align 4
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %40

; <label>:34:                                     ; preds = %31
  %35 = load i32, i32* %8, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %8, align 4
  %37 = load i32, i32* %12, align 4
  %38 = load i32, i32* %11, align 4
  %39 = add nsw i32 %38, %37
  store i32 %39, i32* %11, align 4
  br label %40

; <label>:40:                                     ; preds = %34, %31
  %41 = load i32, i32* %11, align 4
  %42 = load i32*, i32** %10, align 4
  %43 = getelementptr inbounds i32, i32* %42, i32 1
  store i32* %43, i32** %10, align 4
  store i32 %41, i32* %42, align 4
  %44 = load i8*, i8** %9, align 4
  %45 = load i32, i32* %11, align 4
  %46 = getelementptr inbounds i8, i8* %44, i32 %45
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = load i32, i32* %7, align 4
  %50 = add nsw i32 %49, %48
  store i32 %50, i32* %7, align 4
  br label %51

; <label>:51:                                     ; preds = %40
  %52 = load i32*, i32** %4, align 4
  %53 = load i32*, i32** %5, align 4
  %54 = icmp ult i32* %52, %53
  br i1 %54, label %17, label %55

; <label>:55:                                     ; preds = %51
  %56 = load i32, i32* %8, align 4
  store i32 %56, i32* @cb_esc_sign, align 4
  %57 = load i32*, i32** %10, align 4
  store i32* %57, i32** @cb_esc_end, align 4
  %58 = load i32, i32* %7, align 4
  %59 = load i32, i32* %8, align 4
  %60 = add nsw i32 %58, %59
  ret i32 %60
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @count_bit_noESC2(i32) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32*, align 4
  store i32 %0, i32* %2, align 4
  %5 = load i32, i32* @cb_esc_sign, align 4
  store i32 %5, i32* %3, align 4
  store i32* getelementptr inbounds ([288 x i32], [288 x i32]* @cb_esc_buf, i32 0, i32 0), i32** %4, align 4
  br label %6

; <label>:6:                                      ; preds = %19, %1
  %7 = load i32, i32* %2, align 4
  %8 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %7
  %9 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %8, i32 0, i32 3
  %10 = load i8*, i8** %9, align 4
  %11 = load i32*, i32** %4, align 4
  %12 = getelementptr inbounds i32, i32* %11, i32 1
  store i32* %12, i32** %4, align 4
  %13 = load i32, i32* %11, align 4
  %14 = getelementptr inbounds i8, i8* %10, i32 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = load i32, i32* %3, align 4
  %18 = add nsw i32 %17, %16
  store i32 %18, i32* %3, align 4
  br label %19

; <label>:19:                                     ; preds = %6
  %20 = load i32*, i32** %4, align 4
  %21 = load i32*, i32** @cb_esc_end, align 4
  %22 = icmp ult i32* %20, %21
  br i1 %22, label %6, label %23

; <label>:23:                                     ; preds = %19
  %24 = load i32, i32* %3, align 4
  ret i32 %24
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @count_bit_ESC(i32*, i32*, i32, i32, i32*) #0 {
  %6 = alloca i32*, align 4
  %7 = alloca i32*, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32* %0, i32** %6, align 4
  store i32* %1, i32** %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32* %4, i32** %10, align 4
  %18 = load i32, i32* %8, align 4
  %19 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %18
  %20 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %19, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %11, align 4
  %22 = load i32, i32* %9, align 4
  %23 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %22
  %24 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %23, i32 0, i32 0
  %25 = load i32, i32* %24, align 4
  store i32 %25, i32* %12, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %14, align 4
  store i32 0, i32* %15, align 4
  br label %26

; <label>:26:                                     ; preds = %73, %5
  %27 = load i32*, i32** %6, align 4
  %28 = load i32*, i32** %7, align 4
  %29 = icmp ult i32* %27, %28
  br i1 %29, label %30, label %88

; <label>:30:                                     ; preds = %26
  %31 = load i32*, i32** %6, align 4
  %32 = getelementptr inbounds i32, i32* %31, i32 1
  store i32* %32, i32** %6, align 4
  %33 = load i32, i32* %31, align 4
  store i32 %33, i32* %16, align 4
  %34 = load i32*, i32** %6, align 4
  %35 = getelementptr inbounds i32, i32* %34, i32 1
  store i32* %35, i32** %6, align 4
  %36 = load i32, i32* %34, align 4
  store i32 %36, i32* %17, align 4
  %37 = load i32, i32* %16, align 4
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %54

; <label>:39:                                     ; preds = %30
  %40 = load i32, i32* %13, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %13, align 4
  %42 = load i32, i32* %16, align 4
  %43 = icmp sgt i32 %42, 14
  br i1 %43, label %44, label %51

; <label>:44:                                     ; preds = %39
  store i32 15, i32* %16, align 4
  %45 = load i32, i32* %11, align 4
  %46 = load i32, i32* %14, align 4
  %47 = add nsw i32 %46, %45
  store i32 %47, i32* %14, align 4
  %48 = load i32, i32* %12, align 4
  %49 = load i32, i32* %15, align 4
  %50 = add nsw i32 %49, %48
  store i32 %50, i32* %15, align 4
  br label %51

; <label>:51:                                     ; preds = %44, %39
  %52 = load i32, i32* %16, align 4
  %53 = mul nsw i32 %52, 16
  store i32 %53, i32* %16, align 4
  br label %54

; <label>:54:                                     ; preds = %51, %30
  %55 = load i32, i32* %17, align 4
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %57, label %73

; <label>:57:                                     ; preds = %54
  %58 = load i32, i32* %13, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %13, align 4
  %60 = load i32, i32* %17, align 4
  %61 = icmp sgt i32 %60, 14
  br i1 %61, label %62, label %69

; <label>:62:                                     ; preds = %57
  store i32 15, i32* %17, align 4
  %63 = load i32, i32* %11, align 4
  %64 = load i32, i32* %14, align 4
  %65 = add nsw i32 %64, %63
  store i32 %65, i32* %14, align 4
  %66 = load i32, i32* %12, align 4
  %67 = load i32, i32* %15, align 4
  %68 = add nsw i32 %67, %66
  store i32 %68, i32* %15, align 4
  br label %69

; <label>:69:                                     ; preds = %62, %57
  %70 = load i32, i32* %17, align 4
  %71 = load i32, i32* %16, align 4
  %72 = add nsw i32 %71, %70
  store i32 %72, i32* %16, align 4
  br label %73

; <label>:73:                                     ; preds = %69, %54
  %74 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 16, i32 3), align 4
  %75 = load i32, i32* %16, align 4
  %76 = getelementptr inbounds i8, i8* %74, i32 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = load i32, i32* %14, align 4
  %80 = add nsw i32 %79, %78
  store i32 %80, i32* %14, align 4
  %81 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 24, i32 3), align 4
  %82 = load i32, i32* %16, align 4
  %83 = getelementptr inbounds i8, i8* %81, i32 %82
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = load i32, i32* %15, align 4
  %87 = add nsw i32 %86, %85
  store i32 %87, i32* %15, align 4
  br label %26

; <label>:88:                                     ; preds = %26
  %89 = load i32, i32* %14, align 4
  %90 = load i32, i32* %15, align 4
  %91 = icmp sgt i32 %89, %90
  br i1 %91, label %92, label %95

; <label>:92:                                     ; preds = %88
  %93 = load i32, i32* %15, align 4
  store i32 %93, i32* %14, align 4
  %94 = load i32, i32* %9, align 4
  store i32 %94, i32* %8, align 4
  br label %95

; <label>:95:                                     ; preds = %92, %88
  %96 = load i32, i32* %13, align 4
  %97 = load i32, i32* %14, align 4
  %98 = add nsw i32 %96, %97
  %99 = load i32*, i32** %10, align 4
  %100 = load i32, i32* %99, align 4
  %101 = add nsw i32 %100, %98
  store i32 %101, i32* %99, align 4
  %102 = load i32, i32* %8, align 4
  ret i32 %102
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @count_bit_short_noESC(i32*, i32*, i32) #0 {
  %4 = alloca i32*, align 4
  %5 = alloca i32*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 4
  %10 = alloca i32*, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32* %0, i32** %4, align 4
  store i32* %1, i32** %5, align 4
  store i32 %2, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  %14 = load i32, i32* %6, align 4
  %15 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %14
  %16 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %15, i32 0, i32 3
  %17 = load i8*, i8** %16, align 4
  store i8* %17, i8** %9, align 4
  store i32* getelementptr inbounds ([288 x i32], [288 x i32]* @cb_esc_buf, i32 0, i32 0), i32** %10, align 4
  br label %18

; <label>:18:                                     ; preds = %62, %3
  store i32 0, i32* %11, align 4
  br label %19

; <label>:19:                                     ; preds = %56, %18
  %20 = load i32, i32* %11, align 4
  %21 = icmp slt i32 %20, 3
  br i1 %21, label %22, label %59

; <label>:22:                                     ; preds = %19
  %23 = load i32*, i32** %4, align 4
  %24 = getelementptr inbounds i32, i32* %23, i32 3
  %25 = load i32, i32* %24, align 4
  store i32 %25, i32* %12, align 4
  %26 = load i32*, i32** %4, align 4
  %27 = getelementptr inbounds i32, i32* %26, i32 1
  store i32* %27, i32** %4, align 4
  %28 = load i32, i32* %26, align 4
  store i32 %28, i32* %13, align 4
  %29 = load i32, i32* %13, align 4
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %36

; <label>:31:                                     ; preds = %22
  %32 = load i32, i32* %8, align 4
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %8, align 4
  %34 = load i32, i32* %13, align 4
  %35 = mul nsw i32 %34, 16
  store i32 %35, i32* %13, align 4
  br label %36

; <label>:36:                                     ; preds = %31, %22
  %37 = load i32, i32* %12, align 4
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %45

; <label>:39:                                     ; preds = %36
  %40 = load i32, i32* %8, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %8, align 4
  %42 = load i32, i32* %12, align 4
  %43 = load i32, i32* %13, align 4
  %44 = add nsw i32 %43, %42
  store i32 %44, i32* %13, align 4
  br label %45

; <label>:45:                                     ; preds = %39, %36
  %46 = load i32, i32* %13, align 4
  %47 = load i32*, i32** %10, align 4
  %48 = getelementptr inbounds i32, i32* %47, i32 1
  store i32* %48, i32** %10, align 4
  store i32 %46, i32* %47, align 4
  %49 = load i8*, i8** %9, align 4
  %50 = load i32, i32* %13, align 4
  %51 = getelementptr inbounds i8, i8* %49, i32 %50
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = load i32, i32* %7, align 4
  %55 = add nsw i32 %54, %53
  store i32 %55, i32* %7, align 4
  br label %56

; <label>:56:                                     ; preds = %45
  %57 = load i32, i32* %11, align 4
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* %11, align 4
  br label %19

; <label>:59:                                     ; preds = %19
  %60 = load i32*, i32** %4, align 4
  %61 = getelementptr inbounds i32, i32* %60, i32 3
  store i32* %61, i32** %4, align 4
  br label %62

; <label>:62:                                     ; preds = %59
  %63 = load i32*, i32** %4, align 4
  %64 = load i32*, i32** %5, align 4
  %65 = icmp ult i32* %63, %64
  br i1 %65, label %18, label %66

; <label>:66:                                     ; preds = %62
  %67 = load i32, i32* %8, align 4
  store i32 %67, i32* @cb_esc_sign, align 4
  %68 = load i32*, i32** %10, align 4
  store i32* %68, i32** @cb_esc_end, align 4
  %69 = load i32, i32* %7, align 4
  %70 = load i32, i32* %8, align 4
  %71 = add nsw i32 %69, %70
  ret i32 %71
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @count_bit_short_ESC(i32*, i32*, i32, i32, i32*) #0 {
  %6 = alloca i32*, align 4
  %7 = alloca i32*, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store i32* %0, i32** %6, align 4
  store i32* %1, i32** %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32* %4, i32** %10, align 4
  %19 = load i32, i32* %8, align 4
  %20 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %19
  %21 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %20, i32 0, i32 0
  %22 = load i32, i32* %21, align 4
  store i32 %22, i32* %11, align 4
  %23 = load i32, i32* %9, align 4
  %24 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 %23
  %25 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  store i32 %26, i32* %12, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %14, align 4
  store i32 0, i32* %15, align 4
  br label %27

; <label>:27:                                     ; preds = %95, %5
  store i32 0, i32* %16, align 4
  br label %28

; <label>:28:                                     ; preds = %89, %27
  %29 = load i32, i32* %16, align 4
  %30 = icmp slt i32 %29, 3
  br i1 %30, label %31, label %92

; <label>:31:                                     ; preds = %28
  %32 = load i32*, i32** %6, align 4
  %33 = getelementptr inbounds i32, i32* %32, i32 3
  %34 = load i32, i32* %33, align 4
  store i32 %34, i32* %17, align 4
  %35 = load i32*, i32** %6, align 4
  %36 = getelementptr inbounds i32, i32* %35, i32 1
  store i32* %36, i32** %6, align 4
  %37 = load i32, i32* %35, align 4
  store i32 %37, i32* %18, align 4
  %38 = load i32, i32* %18, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %55

; <label>:40:                                     ; preds = %31
  %41 = load i32, i32* %13, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %13, align 4
  %43 = load i32, i32* %18, align 4
  %44 = icmp sgt i32 %43, 14
  br i1 %44, label %45, label %52

; <label>:45:                                     ; preds = %40
  store i32 15, i32* %18, align 4
  %46 = load i32, i32* %11, align 4
  %47 = load i32, i32* %14, align 4
  %48 = add nsw i32 %47, %46
  store i32 %48, i32* %14, align 4
  %49 = load i32, i32* %12, align 4
  %50 = load i32, i32* %15, align 4
  %51 = add nsw i32 %50, %49
  store i32 %51, i32* %15, align 4
  br label %52

; <label>:52:                                     ; preds = %45, %40
  %53 = load i32, i32* %18, align 4
  %54 = mul nsw i32 %53, 16
  store i32 %54, i32* %18, align 4
  br label %55

; <label>:55:                                     ; preds = %52, %31
  %56 = load i32, i32* %17, align 4
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %74

; <label>:58:                                     ; preds = %55
  %59 = load i32, i32* %13, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %13, align 4
  %61 = load i32, i32* %17, align 4
  %62 = icmp sgt i32 %61, 14
  br i1 %62, label %63, label %70

; <label>:63:                                     ; preds = %58
  store i32 15, i32* %17, align 4
  %64 = load i32, i32* %11, align 4
  %65 = load i32, i32* %14, align 4
  %66 = add nsw i32 %65, %64
  store i32 %66, i32* %14, align 4
  %67 = load i32, i32* %12, align 4
  %68 = load i32, i32* %15, align 4
  %69 = add nsw i32 %68, %67
  store i32 %69, i32* %15, align 4
  br label %70

; <label>:70:                                     ; preds = %63, %58
  %71 = load i32, i32* %17, align 4
  %72 = load i32, i32* %18, align 4
  %73 = add nsw i32 %72, %71
  store i32 %73, i32* %18, align 4
  br label %74

; <label>:74:                                     ; preds = %70, %55
  %75 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 16, i32 3), align 4
  %76 = load i32, i32* %18, align 4
  %77 = getelementptr inbounds i8, i8* %75, i32 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = load i32, i32* %14, align 4
  %81 = add nsw i32 %80, %79
  store i32 %81, i32* %14, align 4
  %82 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i32 0, i32 24, i32 3), align 4
  %83 = load i32, i32* %18, align 4
  %84 = getelementptr inbounds i8, i8* %82, i32 %83
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = load i32, i32* %15, align 4
  %88 = add nsw i32 %87, %86
  store i32 %88, i32* %15, align 4
  br label %89

; <label>:89:                                     ; preds = %74
  %90 = load i32, i32* %16, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %16, align 4
  br label %28

; <label>:92:                                     ; preds = %28
  %93 = load i32*, i32** %6, align 4
  %94 = getelementptr inbounds i32, i32* %93, i32 3
  store i32* %94, i32** %6, align 4
  br label %95

; <label>:95:                                     ; preds = %92
  %96 = load i32*, i32** %6, align 4
  %97 = load i32*, i32** %7, align 4
  %98 = icmp ult i32* %96, %97
  br i1 %98, label %27, label %99

; <label>:99:                                     ; preds = %95
  %100 = load i32, i32* %14, align 4
  %101 = load i32, i32* %15, align 4
  %102 = icmp sgt i32 %100, %101
  br i1 %102, label %103, label %106

; <label>:103:                                    ; preds = %99
  %104 = load i32, i32* %15, align 4
  store i32 %104, i32* %14, align 4
  %105 = load i32, i32* %9, align 4
  store i32 %105, i32* %8, align 4
  br label %106

; <label>:106:                                    ; preds = %103, %99
  %107 = load i32, i32* %13, align 4
  %108 = load i32, i32* %14, align 4
  %109 = add nsw i32 %107, %108
  %110 = load i32*, i32** %10, align 4
  %111 = load i32, i32* %110, align 4
  %112 = add nsw i32 %111, %109
  store i32 %112, i32* %110, align 4
  %113 = load i32, i32* %8, align 4
  ret i32 %113
}

; Function Attrs: nounwind
define arm_aapcscc void @best_huffman_divide(i32, i32, %struct.gr_info*, i32*) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.gr_info*, align 4
  %8 = alloca i32*, align 4
  %9 = alloca i32*, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca [25 x i32], align 4
  %17 = alloca [25 x i32], align 4
  %18 = alloca %struct.gr_info, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store %struct.gr_info* %2, %struct.gr_info** %7, align 4
  store i32* %3, i32** %8, align 4
  %19 = bitcast %struct.gr_info* %18 to i8*
  %20 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %21 = bitcast %struct.gr_info* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %19, i8* %21, i32 112, i32 4, i1 false)
  %22 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = mul i32 %23, 2
  store i32 %24, i32* %14, align 4
  %25 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 0
  store i32* %25, i32** %9, align 4
  store i32 2, i32* %10, align 4
  br label %26

; <label>:26:                                     ; preds = %56, %4
  %27 = load i32, i32* %10, align 4
  %28 = icmp slt i32 %27, 23
  br i1 %28, label %29, label %59

; <label>:29:                                     ; preds = %26
  %30 = load i32, i32* %10, align 4
  %31 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %30
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %13, align 4
  %33 = load i32, i32* %13, align 4
  %34 = load i32, i32* %14, align 4
  %35 = icmp sgt i32 %33, %34
  br i1 %35, label %36, label %37

; <label>:36:                                     ; preds = %29
  br label %59

; <label>:37:                                     ; preds = %29
  %38 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 18
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 15
  %41 = load i32, i32* %40, align 4
  %42 = add i32 %39, %41
  %43 = load i32, i32* %10, align 4
  %44 = getelementptr inbounds [25 x i32], [25 x i32]* %16, i32 0, i32 %43
  store i32 %42, i32* %44, align 4
  %45 = load i32*, i32** %8, align 4
  %46 = load i32, i32* %13, align 4
  %47 = getelementptr inbounds i32, i32* %45, i32 %46
  %48 = load i32*, i32** %8, align 4
  %49 = load i32, i32* %14, align 4
  %50 = getelementptr inbounds i32, i32* %48, i32 %49
  %51 = load i32, i32* %10, align 4
  %52 = getelementptr inbounds [25 x i32], [25 x i32]* %16, i32 0, i32 %51
  %53 = call arm_aapcscc i32 @choose_table(i32* %47, i32* %50, i32* %52)
  %54 = load i32, i32* %10, align 4
  %55 = getelementptr inbounds [25 x i32], [25 x i32]* %17, i32 0, i32 %54
  store i32 %53, i32* %55, align 4
  br label %56

; <label>:56:                                     ; preds = %37
  %57 = load i32, i32* %10, align 4
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* %10, align 4
  br label %26

; <label>:59:                                     ; preds = %36, %26
  br label %60

; <label>:60:                                     ; preds = %66, %59
  %61 = load i32, i32* %10, align 4
  %62 = icmp sle i32 %61, 24
  br i1 %62, label %63, label %69

; <label>:63:                                     ; preds = %60
  %64 = load i32, i32* %10, align 4
  %65 = getelementptr inbounds [25 x i32], [25 x i32]* %16, i32 0, i32 %64
  store i32 100000, i32* %65, align 4
  br label %66

; <label>:66:                                     ; preds = %63
  %67 = load i32, i32* %10, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %10, align 4
  br label %60

; <label>:69:                                     ; preds = %60
  store i32 0, i32* %10, align 4
  br label %70

; <label>:70:                                     ; preds = %161, %69
  %71 = load i32, i32* %10, align 4
  %72 = icmp slt i32 %71, 16
  br i1 %72, label %73, label %164

; <label>:73:                                     ; preds = %70
  %74 = load i32, i32* %10, align 4
  %75 = add nsw i32 %74, 1
  %76 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %75
  %77 = load i32, i32* %76, align 4
  store i32 %77, i32* %12, align 4
  %78 = load i32, i32* %12, align 4
  %79 = load i32, i32* %14, align 4
  %80 = icmp sgt i32 %78, %79
  br i1 %80, label %81, label %82

; <label>:81:                                     ; preds = %73
  br label %164

; <label>:82:                                     ; preds = %73
  %83 = load i32, i32* %10, align 4
  %84 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 10
  store i32 %83, i32* %84, align 4
  store i32 0, i32* %15, align 4
  %85 = load i32*, i32** %8, align 4
  %86 = load i32*, i32** %8, align 4
  %87 = load i32, i32* %12, align 4
  %88 = getelementptr inbounds i32, i32* %86, i32 %87
  %89 = call arm_aapcscc i32 @choose_table(i32* %85, i32* %88, i32* %15)
  %90 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 8
  %91 = getelementptr inbounds [3 x i32], [3 x i32]* %90, i32 0, i32 0
  store i32 %89, i32* %91, align 4
  %92 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %93 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %92, i32 0, i32 0
  %94 = load i32, i32* %93, align 4
  %95 = load i32, i32* %15, align 4
  %96 = icmp slt i32 %94, %95
  br i1 %96, label %97, label %98

; <label>:97:                                     ; preds = %82
  br label %164

; <label>:98:                                     ; preds = %82
  store i32 0, i32* %11, align 4
  br label %99

; <label>:99:                                     ; preds = %157, %98
  %100 = load i32, i32* %11, align 4
  %101 = icmp slt i32 %100, 8
  br i1 %101, label %102, label %160

; <label>:102:                                    ; preds = %99
  %103 = load i32, i32* %15, align 4
  %104 = load i32, i32* %10, align 4
  %105 = load i32, i32* %11, align 4
  %106 = add nsw i32 %104, %105
  %107 = add nsw i32 %106, 2
  %108 = getelementptr inbounds [25 x i32], [25 x i32]* %16, i32 0, i32 %107
  %109 = load i32, i32* %108, align 4
  %110 = add nsw i32 %103, %109
  %111 = load i32*, i32** %9, align 4
  store i32 %110, i32* %111, align 4
  %112 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %113 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %112, i32 0, i32 0
  %114 = load i32, i32* %113, align 4
  %115 = load i32*, i32** %9, align 4
  %116 = load i32, i32* %115, align 4
  %117 = icmp slt i32 %114, %116
  br i1 %117, label %118, label %119

; <label>:118:                                    ; preds = %102
  br label %157

; <label>:119:                                    ; preds = %102
  %120 = load i32, i32* %10, align 4
  %121 = load i32, i32* %11, align 4
  %122 = add nsw i32 %120, %121
  %123 = add nsw i32 %122, 2
  %124 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %123
  %125 = load i32, i32* %124, align 4
  store i32 %125, i32* %13, align 4
  %126 = load i32*, i32** %8, align 4
  %127 = load i32, i32* %12, align 4
  %128 = getelementptr inbounds i32, i32* %126, i32 %127
  %129 = load i32*, i32** %8, align 4
  %130 = load i32, i32* %13, align 4
  %131 = getelementptr inbounds i32, i32* %129, i32 %130
  %132 = load i32*, i32** %9, align 4
  %133 = call arm_aapcscc i32 @choose_table(i32* %128, i32* %131, i32* %132)
  %134 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 8
  %135 = getelementptr inbounds [3 x i32], [3 x i32]* %134, i32 0, i32 1
  store i32 %133, i32* %135, align 4
  %136 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %137 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %136, i32 0, i32 0
  %138 = load i32, i32* %137, align 4
  %139 = load i32*, i32** %9, align 4
  %140 = load i32, i32* %139, align 4
  %141 = icmp slt i32 %138, %140
  br i1 %141, label %142, label %143

; <label>:142:                                    ; preds = %119
  br label %157

; <label>:143:                                    ; preds = %119
  %144 = load i32, i32* %11, align 4
  %145 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 11
  store i32 %144, i32* %145, align 4
  %146 = load i32, i32* %10, align 4
  %147 = load i32, i32* %11, align 4
  %148 = add nsw i32 %146, %147
  %149 = add nsw i32 %148, 2
  %150 = getelementptr inbounds [25 x i32], [25 x i32]* %17, i32 0, i32 %149
  %151 = load i32, i32* %150, align 4
  %152 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %18, i32 0, i32 8
  %153 = getelementptr inbounds [3 x i32], [3 x i32]* %152, i32 0, i32 2
  store i32 %151, i32* %153, align 4
  %154 = load %struct.gr_info*, %struct.gr_info** %7, align 4
  %155 = bitcast %struct.gr_info* %154 to i8*
  %156 = bitcast %struct.gr_info* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %155, i8* %156, i32 112, i32 4, i1 false)
  br label %157

; <label>:157:                                    ; preds = %143, %142, %118
  %158 = load i32, i32* %11, align 4
  %159 = add nsw i32 %158, 1
  store i32 %159, i32* %11, align 4
  br label %99

; <label>:160:                                    ; preds = %99
  br label %161

; <label>:161:                                    ; preds = %160
  %162 = load i32, i32* %10, align 4
  %163 = add nsw i32 %162, 1
  store i32 %163, i32* %10, align 4
  br label %70

; <label>:164:                                    ; preds = %97, %81, %70
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @best_scalefac_store(%struct.lame_global_flags*, i32, i32, [2 x [576 x i32]]*, %struct.III_side_info_t*, [2 x %struct.III_scalefac_t]*) #0 {
  %7 = alloca %struct.lame_global_flags*, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [2 x [576 x i32]]*, align 4
  %11 = alloca %struct.III_side_info_t*, align 4
  %12 = alloca [2 x %struct.III_scalefac_t]*, align 4
  %13 = alloca %struct.gr_info*, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store [2 x [576 x i32]]* %3, [2 x [576 x i32]]** %10, align 4
  store %struct.III_side_info_t* %4, %struct.III_side_info_t** %11, align 4
  store [2 x %struct.III_scalefac_t]* %5, [2 x %struct.III_scalefac_t]** %12, align 4
  %22 = load %struct.III_side_info_t*, %struct.III_side_info_t** %11, align 4
  %23 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %22, i32 0, i32 4
  %24 = load i32, i32* %8, align 4
  %25 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %23, i32 0, i32 %24
  %26 = getelementptr inbounds %struct.anon, %struct.anon* %25, i32 0, i32 0
  %27 = load i32, i32* %9, align 4
  %28 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %26, i32 0, i32 %27
  %29 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %28, i32 0, i32 0
  store %struct.gr_info* %29, %struct.gr_info** %13, align 4
  store i32 0, i32* %14, align 4
  br label %30

; <label>:30:                                     ; preds = %90, %6
  %31 = load i32, i32* %14, align 4
  %32 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %33 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %32, i32 0, i32 16
  %34 = load i32, i32* %33, align 4
  %35 = icmp ult i32 %31, %34
  br i1 %35, label %36, label %93

; <label>:36:                                     ; preds = %30
  %37 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %38 = load i32, i32* %8, align 4
  %39 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %37, i32 %38
  %40 = load i32, i32* %9, align 4
  %41 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %39, i32 0, i32 %40
  %42 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %41, i32 0, i32 0
  %43 = load i32, i32* %14, align 4
  %44 = getelementptr inbounds [22 x i32], [22 x i32]* %42, i32 0, i32 %43
  %45 = load i32, i32* %44, align 4
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %47, label %89

; <label>:47:                                     ; preds = %36
  %48 = load i32, i32* %14, align 4
  %49 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %48
  %50 = load i32, i32* %49, align 4
  store i32 %50, i32* %17, align 4
  %51 = load i32, i32* %14, align 4
  %52 = add nsw i32 %51, 1
  %53 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %52
  %54 = load i32, i32* %53, align 4
  store i32 %54, i32* %18, align 4
  %55 = load i32, i32* %17, align 4
  store i32 %55, i32* %16, align 4
  br label %56

; <label>:56:                                     ; preds = %72, %47
  %57 = load i32, i32* %16, align 4
  %58 = load i32, i32* %18, align 4
  %59 = icmp slt i32 %57, %58
  br i1 %59, label %60, label %75

; <label>:60:                                     ; preds = %56
  %61 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %10, align 4
  %62 = load i32, i32* %8, align 4
  %63 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %61, i32 %62
  %64 = load i32, i32* %9, align 4
  %65 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %63, i32 0, i32 %64
  %66 = load i32, i32* %16, align 4
  %67 = getelementptr inbounds [576 x i32], [576 x i32]* %65, i32 0, i32 %66
  %68 = load i32, i32* %67, align 4
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %70, label %71

; <label>:70:                                     ; preds = %60
  br label %75

; <label>:71:                                     ; preds = %60
  br label %72

; <label>:72:                                     ; preds = %71
  %73 = load i32, i32* %16, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %16, align 4
  br label %56

; <label>:75:                                     ; preds = %70, %56
  %76 = load i32, i32* %16, align 4
  %77 = load i32, i32* %18, align 4
  %78 = icmp eq i32 %76, %77
  br i1 %78, label %79, label %88

; <label>:79:                                     ; preds = %75
  %80 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %81 = load i32, i32* %8, align 4
  %82 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %80, i32 %81
  %83 = load i32, i32* %9, align 4
  %84 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %82, i32 0, i32 %83
  %85 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %84, i32 0, i32 0
  %86 = load i32, i32* %14, align 4
  %87 = getelementptr inbounds [22 x i32], [22 x i32]* %85, i32 0, i32 %86
  store i32 0, i32* %87, align 4
  br label %88

; <label>:88:                                     ; preds = %79, %75
  br label %89

; <label>:89:                                     ; preds = %88, %36
  br label %90

; <label>:90:                                     ; preds = %89
  %91 = load i32, i32* %14, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %14, align 4
  br label %30

; <label>:93:                                     ; preds = %30
  store i32 0, i32* %15, align 4
  br label %94

; <label>:94:                                     ; preds = %169, %93
  %95 = load i32, i32* %15, align 4
  %96 = icmp slt i32 %95, 3
  br i1 %96, label %97, label %172

; <label>:97:                                     ; preds = %94
  %98 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %99 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %98, i32 0, i32 17
  %100 = load i32, i32* %99, align 4
  store i32 %100, i32* %14, align 4
  br label %101

; <label>:101:                                    ; preds = %165, %97
  %102 = load i32, i32* %14, align 4
  %103 = icmp slt i32 %102, 12
  br i1 %103, label %104, label %168

; <label>:104:                                    ; preds = %101
  %105 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %106 = load i32, i32* %8, align 4
  %107 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %105, i32 %106
  %108 = load i32, i32* %9, align 4
  %109 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %107, i32 0, i32 %108
  %110 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %109, i32 0, i32 1
  %111 = load i32, i32* %14, align 4
  %112 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %110, i32 0, i32 %111
  %113 = load i32, i32* %15, align 4
  %114 = getelementptr inbounds [3 x i32], [3 x i32]* %112, i32 0, i32 %113
  %115 = load i32, i32* %114, align 4
  %116 = icmp sgt i32 %115, 0
  br i1 %116, label %117, label %164

; <label>:117:                                    ; preds = %104
  %118 = load i32, i32* %14, align 4
  %119 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %118
  %120 = load i32, i32* %119, align 4
  store i32 %120, i32* %17, align 4
  %121 = load i32, i32* %14, align 4
  %122 = add nsw i32 %121, 1
  %123 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %122
  %124 = load i32, i32* %123, align 4
  store i32 %124, i32* %18, align 4
  %125 = load i32, i32* %17, align 4
  store i32 %125, i32* %16, align 4
  br label %126

; <label>:126:                                    ; preds = %145, %117
  %127 = load i32, i32* %16, align 4
  %128 = load i32, i32* %18, align 4
  %129 = icmp slt i32 %127, %128
  br i1 %129, label %130, label %148

; <label>:130:                                    ; preds = %126
  %131 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %10, align 4
  %132 = load i32, i32* %8, align 4
  %133 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %131, i32 %132
  %134 = load i32, i32* %9, align 4
  %135 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %133, i32 0, i32 %134
  %136 = load i32, i32* %16, align 4
  %137 = mul nsw i32 3, %136
  %138 = load i32, i32* %15, align 4
  %139 = add nsw i32 %137, %138
  %140 = getelementptr inbounds [576 x i32], [576 x i32]* %135, i32 0, i32 %139
  %141 = load i32, i32* %140, align 4
  %142 = icmp ne i32 %141, 0
  br i1 %142, label %143, label %144

; <label>:143:                                    ; preds = %130
  br label %148

; <label>:144:                                    ; preds = %130
  br label %145

; <label>:145:                                    ; preds = %144
  %146 = load i32, i32* %16, align 4
  %147 = add nsw i32 %146, 1
  store i32 %147, i32* %16, align 4
  br label %126

; <label>:148:                                    ; preds = %143, %126
  %149 = load i32, i32* %16, align 4
  %150 = load i32, i32* %18, align 4
  %151 = icmp eq i32 %149, %150
  br i1 %151, label %152, label %163

; <label>:152:                                    ; preds = %148
  %153 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %154 = load i32, i32* %8, align 4
  %155 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %153, i32 %154
  %156 = load i32, i32* %9, align 4
  %157 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %155, i32 0, i32 %156
  %158 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %157, i32 0, i32 1
  %159 = load i32, i32* %14, align 4
  %160 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %158, i32 0, i32 %159
  %161 = load i32, i32* %15, align 4
  %162 = getelementptr inbounds [3 x i32], [3 x i32]* %160, i32 0, i32 %161
  store i32 0, i32* %162, align 4
  br label %163

; <label>:163:                                    ; preds = %152, %148
  br label %164

; <label>:164:                                    ; preds = %163, %104
  br label %165

; <label>:165:                                    ; preds = %164
  %166 = load i32, i32* %14, align 4
  %167 = add nsw i32 %166, 1
  store i32 %167, i32* %14, align 4
  br label %101

; <label>:168:                                    ; preds = %101
  br label %169

; <label>:169:                                    ; preds = %168
  %170 = load i32, i32* %15, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %15, align 4
  br label %94

; <label>:172:                                    ; preds = %94
  %173 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %174 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %173, i32 0, i32 15
  %175 = load i32, i32* %174, align 4
  %176 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %177 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %176, i32 0, i32 0
  %178 = load i32, i32* %177, align 4
  %179 = sub i32 %178, %175
  store i32 %179, i32* %177, align 4
  %180 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %181 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %180, i32 0, i32 13
  %182 = load i32, i32* %181, align 4
  %183 = icmp ne i32 %182, 0
  br i1 %183, label %329, label %184

; <label>:184:                                    ; preds = %172
  %185 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %186 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %185, i32 0, i32 12
  %187 = load i32, i32* %186, align 4
  %188 = icmp ne i32 %187, 0
  br i1 %188, label %329, label %189

; <label>:189:                                    ; preds = %184
  store i32 0, i32* %21, align 4
  store i32 0, i32* %19, align 4
  br label %190

; <label>:190:                                    ; preds = %208, %189
  %191 = load i32, i32* %19, align 4
  %192 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %193 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %192, i32 0, i32 16
  %194 = load i32, i32* %193, align 4
  %195 = icmp ult i32 %191, %194
  br i1 %195, label %196, label %211

; <label>:196:                                    ; preds = %190
  %197 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %198 = load i32, i32* %8, align 4
  %199 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %197, i32 %198
  %200 = load i32, i32* %9, align 4
  %201 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %199, i32 0, i32 %200
  %202 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %201, i32 0, i32 0
  %203 = load i32, i32* %19, align 4
  %204 = getelementptr inbounds [22 x i32], [22 x i32]* %202, i32 0, i32 %203
  %205 = load i32, i32* %204, align 4
  %206 = load i32, i32* %21, align 4
  %207 = or i32 %206, %205
  store i32 %207, i32* %21, align 4
  br label %208

; <label>:208:                                    ; preds = %196
  %209 = load i32, i32* %19, align 4
  %210 = add i32 %209, 1
  store i32 %210, i32* %19, align 4
  br label %190

; <label>:211:                                    ; preds = %190
  %212 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %213 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %212, i32 0, i32 17
  %214 = load i32, i32* %213, align 4
  store i32 %214, i32* %19, align 4
  br label %215

; <label>:215:                                    ; preds = %240, %211
  %216 = load i32, i32* %19, align 4
  %217 = icmp ult i32 %216, 12
  br i1 %217, label %218, label %243

; <label>:218:                                    ; preds = %215
  store i32 0, i32* %20, align 4
  br label %219

; <label>:219:                                    ; preds = %236, %218
  %220 = load i32, i32* %20, align 4
  %221 = icmp slt i32 %220, 3
  br i1 %221, label %222, label %239

; <label>:222:                                    ; preds = %219
  %223 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %224 = load i32, i32* %8, align 4
  %225 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %223, i32 %224
  %226 = load i32, i32* %9, align 4
  %227 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %225, i32 0, i32 %226
  %228 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %227, i32 0, i32 1
  %229 = load i32, i32* %19, align 4
  %230 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %228, i32 0, i32 %229
  %231 = load i32, i32* %20, align 4
  %232 = getelementptr inbounds [3 x i32], [3 x i32]* %230, i32 0, i32 %231
  %233 = load i32, i32* %232, align 4
  %234 = load i32, i32* %21, align 4
  %235 = or i32 %234, %233
  store i32 %235, i32* %21, align 4
  br label %236

; <label>:236:                                    ; preds = %222
  %237 = load i32, i32* %20, align 4
  %238 = add nsw i32 %237, 1
  store i32 %238, i32* %20, align 4
  br label %219

; <label>:239:                                    ; preds = %219
  br label %240

; <label>:240:                                    ; preds = %239
  %241 = load i32, i32* %19, align 4
  %242 = add i32 %241, 1
  store i32 %242, i32* %19, align 4
  br label %215

; <label>:243:                                    ; preds = %215
  %244 = load i32, i32* %21, align 4
  %245 = and i32 %244, 1
  %246 = icmp ne i32 %245, 0
  br i1 %246, label %328, label %247

; <label>:247:                                    ; preds = %243
  %248 = load i32, i32* %21, align 4
  %249 = icmp ne i32 %248, 0
  br i1 %249, label %250, label %328

; <label>:250:                                    ; preds = %247
  store i32 0, i32* %19, align 4
  br label %251

; <label>:251:                                    ; preds = %268, %250
  %252 = load i32, i32* %19, align 4
  %253 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %254 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %253, i32 0, i32 16
  %255 = load i32, i32* %254, align 4
  %256 = icmp ult i32 %252, %255
  br i1 %256, label %257, label %271

; <label>:257:                                    ; preds = %251
  %258 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %259 = load i32, i32* %8, align 4
  %260 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %258, i32 %259
  %261 = load i32, i32* %9, align 4
  %262 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %260, i32 0, i32 %261
  %263 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %262, i32 0, i32 0
  %264 = load i32, i32* %19, align 4
  %265 = getelementptr inbounds [22 x i32], [22 x i32]* %263, i32 0, i32 %264
  %266 = load i32, i32* %265, align 4
  %267 = sdiv i32 %266, 2
  store i32 %267, i32* %265, align 4
  br label %268

; <label>:268:                                    ; preds = %257
  %269 = load i32, i32* %19, align 4
  %270 = add i32 %269, 1
  store i32 %270, i32* %19, align 4
  br label %251

; <label>:271:                                    ; preds = %251
  %272 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %273 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %272, i32 0, i32 17
  %274 = load i32, i32* %273, align 4
  store i32 %274, i32* %19, align 4
  br label %275

; <label>:275:                                    ; preds = %299, %271
  %276 = load i32, i32* %19, align 4
  %277 = icmp ult i32 %276, 12
  br i1 %277, label %278, label %302

; <label>:278:                                    ; preds = %275
  store i32 0, i32* %20, align 4
  br label %279

; <label>:279:                                    ; preds = %295, %278
  %280 = load i32, i32* %20, align 4
  %281 = icmp slt i32 %280, 3
  br i1 %281, label %282, label %298

; <label>:282:                                    ; preds = %279
  %283 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %284 = load i32, i32* %8, align 4
  %285 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %283, i32 %284
  %286 = load i32, i32* %9, align 4
  %287 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %285, i32 0, i32 %286
  %288 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %287, i32 0, i32 1
  %289 = load i32, i32* %19, align 4
  %290 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %288, i32 0, i32 %289
  %291 = load i32, i32* %20, align 4
  %292 = getelementptr inbounds [3 x i32], [3 x i32]* %290, i32 0, i32 %291
  %293 = load i32, i32* %292, align 4
  %294 = sdiv i32 %293, 2
  store i32 %294, i32* %292, align 4
  br label %295

; <label>:295:                                    ; preds = %282
  %296 = load i32, i32* %20, align 4
  %297 = add nsw i32 %296, 1
  store i32 %297, i32* %20, align 4
  br label %279

; <label>:298:                                    ; preds = %279
  br label %299

; <label>:299:                                    ; preds = %298
  %300 = load i32, i32* %19, align 4
  %301 = add i32 %300, 1
  store i32 %301, i32* %19, align 4
  br label %275

; <label>:302:                                    ; preds = %275
  %303 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %304 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %303, i32 0, i32 13
  store i32 1, i32* %304, align 4
  %305 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %306 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %305, i32 0, i32 15
  store i32 99999999, i32* %306, align 4
  %307 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %308 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %307, i32 0, i32 45
  %309 = load i32, i32* %308, align 4
  %310 = icmp eq i32 %309, 2
  br i1 %310, label %311, label %319

; <label>:311:                                    ; preds = %302
  %312 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %313 = load i32, i32* %8, align 4
  %314 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %312, i32 %313
  %315 = load i32, i32* %9, align 4
  %316 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %314, i32 0, i32 %315
  %317 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %318 = call arm_aapcscc i32 @scale_bitcount(%struct.III_scalefac_t* %316, %struct.gr_info* %317)
  br label %327

; <label>:319:                                    ; preds = %302
  %320 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  %321 = load i32, i32* %8, align 4
  %322 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %320, i32 %321
  %323 = load i32, i32* %9, align 4
  %324 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %322, i32 0, i32 %323
  %325 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %326 = call arm_aapcscc i32 @scale_bitcount_lsf(%struct.III_scalefac_t* %324, %struct.gr_info* %325)
  br label %327

; <label>:327:                                    ; preds = %319, %311
  br label %328

; <label>:328:                                    ; preds = %327, %247, %243
  br label %329

; <label>:329:                                    ; preds = %328, %184, %172
  %330 = load %struct.lame_global_flags*, %struct.lame_global_flags** %7, align 4
  %331 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %330, i32 0, i32 45
  %332 = load i32, i32* %331, align 4
  %333 = icmp eq i32 %332, 2
  br i1 %333, label %334, label %403

; <label>:334:                                    ; preds = %329
  %335 = load i32, i32* %8, align 4
  %336 = icmp eq i32 %335, 1
  br i1 %336, label %337, label %403

; <label>:337:                                    ; preds = %334
  %338 = load %struct.III_side_info_t*, %struct.III_side_info_t** %11, align 4
  %339 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %338, i32 0, i32 4
  %340 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %339, i32 0, i32 0
  %341 = getelementptr inbounds %struct.anon, %struct.anon* %340, i32 0, i32 0
  %342 = load i32, i32* %9, align 4
  %343 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %341, i32 0, i32 %342
  %344 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %343, i32 0, i32 0
  %345 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %344, i32 0, i32 6
  %346 = load i32, i32* %345, align 4
  %347 = icmp ne i32 %346, 2
  br i1 %347, label %348, label %403

; <label>:348:                                    ; preds = %337
  %349 = load %struct.III_side_info_t*, %struct.III_side_info_t** %11, align 4
  %350 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %349, i32 0, i32 4
  %351 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %350, i32 0, i32 1
  %352 = getelementptr inbounds %struct.anon, %struct.anon* %351, i32 0, i32 0
  %353 = load i32, i32* %9, align 4
  %354 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %352, i32 0, i32 %353
  %355 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %354, i32 0, i32 0
  %356 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %355, i32 0, i32 6
  %357 = load i32, i32* %356, align 4
  %358 = icmp ne i32 %357, 2
  br i1 %358, label %359, label %403

; <label>:359:                                    ; preds = %348
  %360 = load %struct.III_side_info_t*, %struct.III_side_info_t** %11, align 4
  %361 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %360, i32 0, i32 4
  %362 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %361, i32 0, i32 0
  %363 = getelementptr inbounds %struct.anon, %struct.anon* %362, i32 0, i32 0
  %364 = load i32, i32* %9, align 4
  %365 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %363, i32 0, i32 %364
  %366 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %365, i32 0, i32 0
  %367 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %366, i32 0, i32 13
  %368 = load i32, i32* %367, align 4
  %369 = load %struct.III_side_info_t*, %struct.III_side_info_t** %11, align 4
  %370 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %369, i32 0, i32 4
  %371 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %370, i32 0, i32 1
  %372 = getelementptr inbounds %struct.anon, %struct.anon* %371, i32 0, i32 0
  %373 = load i32, i32* %9, align 4
  %374 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %372, i32 0, i32 %373
  %375 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %374, i32 0, i32 0
  %376 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %375, i32 0, i32 13
  %377 = load i32, i32* %376, align 4
  %378 = icmp eq i32 %368, %377
  br i1 %378, label %379, label %403

; <label>:379:                                    ; preds = %359
  %380 = load %struct.III_side_info_t*, %struct.III_side_info_t** %11, align 4
  %381 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %380, i32 0, i32 4
  %382 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %381, i32 0, i32 0
  %383 = getelementptr inbounds %struct.anon, %struct.anon* %382, i32 0, i32 0
  %384 = load i32, i32* %9, align 4
  %385 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %383, i32 0, i32 %384
  %386 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %385, i32 0, i32 0
  %387 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %386, i32 0, i32 12
  %388 = load i32, i32* %387, align 4
  %389 = load %struct.III_side_info_t*, %struct.III_side_info_t** %11, align 4
  %390 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %389, i32 0, i32 4
  %391 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %390, i32 0, i32 1
  %392 = getelementptr inbounds %struct.anon, %struct.anon* %391, i32 0, i32 0
  %393 = load i32, i32* %9, align 4
  %394 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %392, i32 0, i32 %393
  %395 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %394, i32 0, i32 0
  %396 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %395, i32 0, i32 12
  %397 = load i32, i32* %396, align 4
  %398 = icmp eq i32 %388, %397
  br i1 %398, label %399, label %403

; <label>:399:                                    ; preds = %379
  %400 = load i32, i32* %9, align 4
  %401 = load %struct.III_side_info_t*, %struct.III_side_info_t** %11, align 4
  %402 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %12, align 4
  call arm_aapcscc void @scfsi_calc(i32 %400, %struct.III_side_info_t* %401, [2 x %struct.III_scalefac_t]* %402)
  br label %403

; <label>:403:                                    ; preds = %399, %379, %359, %348, %337, %334, %329
  %404 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %405 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %404, i32 0, i32 15
  %406 = load i32, i32* %405, align 4
  %407 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %408 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %407, i32 0, i32 0
  %409 = load i32, i32* %408, align 4
  %410 = add i32 %409, %406
  store i32 %410, i32* %408, align 4
  ret void
}

; Function Attrs: nounwind
define internal arm_aapcscc void @scfsi_calc(i32, %struct.III_side_info_t*, [2 x %struct.III_scalefac_t]*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.III_side_info_t*, align 4
  %6 = alloca [2 x %struct.III_scalefac_t]*, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.gr_info*, align 4
  %14 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store %struct.III_side_info_t* %1, %struct.III_side_info_t** %5, align 4
  store [2 x %struct.III_scalefac_t]* %2, [2 x %struct.III_scalefac_t]** %6, align 4
  %15 = load %struct.III_side_info_t*, %struct.III_side_info_t** %5, align 4
  %16 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %15, i32 0, i32 4
  %17 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.anon, %struct.anon* %17, i32 0, i32 0
  %19 = load i32, i32* %4, align 4
  %20 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %18, i32 0, i32 %19
  %21 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %20, i32 0, i32 0
  store %struct.gr_info* %21, %struct.gr_info** %13, align 4
  store i32 0, i32* %7, align 4
  br label %22

; <label>:22:                                     ; preds = %32, %3
  %23 = load i32, i32* %7, align 4
  %24 = icmp slt i32 %23, 4
  br i1 %24, label %25, label %35

; <label>:25:                                     ; preds = %22
  %26 = load %struct.III_side_info_t*, %struct.III_side_info_t** %5, align 4
  %27 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %26, i32 0, i32 3
  %28 = load i32, i32* %4, align 4
  %29 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %27, i32 0, i32 %28
  %30 = load i32, i32* %7, align 4
  %31 = getelementptr inbounds [4 x i32], [4 x i32]* %29, i32 0, i32 %30
  store i32 0, i32* %31, align 4
  br label %32

; <label>:32:                                     ; preds = %25
  %33 = load i32, i32* %7, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %7, align 4
  br label %22

; <label>:35:                                     ; preds = %22
  store i32 0, i32* %7, align 4
  br label %36

; <label>:36:                                     ; preds = %110, %35
  %37 = load i32, i32* %7, align 4
  %38 = icmp slt i32 %37, 4
  br i1 %38, label %39, label %113

; <label>:39:                                     ; preds = %36
  %40 = load i32, i32* %7, align 4
  %41 = getelementptr inbounds [5 x i32], [5 x i32]* @scfsi_calc.scfsi_band, i32 0, i32 %40
  %42 = load i32, i32* %41, align 4
  store i32 %42, i32* %12, align 4
  br label %43

; <label>:43:                                     ; preds = %70, %39
  %44 = load i32, i32* %12, align 4
  %45 = load i32, i32* %7, align 4
  %46 = add nsw i32 %45, 1
  %47 = getelementptr inbounds [5 x i32], [5 x i32]* @scfsi_calc.scfsi_band, i32 0, i32 %46
  %48 = load i32, i32* %47, align 4
  %49 = icmp slt i32 %44, %48
  br i1 %49, label %50, label %73

; <label>:50:                                     ; preds = %43
  %51 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %52 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %51, i32 0
  %53 = load i32, i32* %4, align 4
  %54 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %52, i32 0, i32 %53
  %55 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %54, i32 0, i32 0
  %56 = load i32, i32* %12, align 4
  %57 = getelementptr inbounds [22 x i32], [22 x i32]* %55, i32 0, i32 %56
  %58 = load i32, i32* %57, align 4
  %59 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %60 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %59, i32 1
  %61 = load i32, i32* %4, align 4
  %62 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %60, i32 0, i32 %61
  %63 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %62, i32 0, i32 0
  %64 = load i32, i32* %12, align 4
  %65 = getelementptr inbounds [22 x i32], [22 x i32]* %63, i32 0, i32 %64
  %66 = load i32, i32* %65, align 4
  %67 = icmp ne i32 %58, %66
  br i1 %67, label %68, label %69

; <label>:68:                                     ; preds = %50
  br label %73

; <label>:69:                                     ; preds = %50
  br label %70

; <label>:70:                                     ; preds = %69
  %71 = load i32, i32* %12, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %12, align 4
  br label %43

; <label>:73:                                     ; preds = %68, %43
  %74 = load i32, i32* %12, align 4
  %75 = load i32, i32* %7, align 4
  %76 = add nsw i32 %75, 1
  %77 = getelementptr inbounds [5 x i32], [5 x i32]* @scfsi_calc.scfsi_band, i32 0, i32 %76
  %78 = load i32, i32* %77, align 4
  %79 = icmp eq i32 %74, %78
  br i1 %79, label %80, label %109

; <label>:80:                                     ; preds = %73
  %81 = load i32, i32* %7, align 4
  %82 = getelementptr inbounds [5 x i32], [5 x i32]* @scfsi_calc.scfsi_band, i32 0, i32 %81
  %83 = load i32, i32* %82, align 4
  store i32 %83, i32* %12, align 4
  br label %84

; <label>:84:                                     ; preds = %99, %80
  %85 = load i32, i32* %12, align 4
  %86 = load i32, i32* %7, align 4
  %87 = add nsw i32 %86, 1
  %88 = getelementptr inbounds [5 x i32], [5 x i32]* @scfsi_calc.scfsi_band, i32 0, i32 %87
  %89 = load i32, i32* %88, align 4
  %90 = icmp slt i32 %85, %89
  br i1 %90, label %91, label %102

; <label>:91:                                     ; preds = %84
  %92 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %93 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %92, i32 1
  %94 = load i32, i32* %4, align 4
  %95 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %93, i32 0, i32 %94
  %96 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %95, i32 0, i32 0
  %97 = load i32, i32* %12, align 4
  %98 = getelementptr inbounds [22 x i32], [22 x i32]* %96, i32 0, i32 %97
  store i32 -1, i32* %98, align 4
  br label %99

; <label>:99:                                     ; preds = %91
  %100 = load i32, i32* %12, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %12, align 4
  br label %84

; <label>:102:                                    ; preds = %84
  %103 = load %struct.III_side_info_t*, %struct.III_side_info_t** %5, align 4
  %104 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %103, i32 0, i32 3
  %105 = load i32, i32* %4, align 4
  %106 = getelementptr inbounds [2 x [4 x i32]], [2 x [4 x i32]]* %104, i32 0, i32 %105
  %107 = load i32, i32* %7, align 4
  %108 = getelementptr inbounds [4 x i32], [4 x i32]* %106, i32 0, i32 %107
  store i32 1, i32* %108, align 4
  br label %109

; <label>:109:                                    ; preds = %102, %73
  br label %110

; <label>:110:                                    ; preds = %109
  %111 = load i32, i32* %7, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %7, align 4
  br label %36

; <label>:113:                                    ; preds = %36
  store i32 0, i32* %10, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %12, align 4
  br label %114

; <label>:114:                                    ; preds = %151, %113
  %115 = load i32, i32* %12, align 4
  %116 = icmp slt i32 %115, 11
  br i1 %116, label %117, label %154

; <label>:117:                                    ; preds = %114
  %118 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %119 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %118, i32 1
  %120 = load i32, i32* %4, align 4
  %121 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %119, i32 0, i32 %120
  %122 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %121, i32 0, i32 0
  %123 = load i32, i32* %12, align 4
  %124 = getelementptr inbounds [22 x i32], [22 x i32]* %122, i32 0, i32 %123
  %125 = load i32, i32* %124, align 4
  %126 = icmp slt i32 %125, 0
  br i1 %126, label %127, label %128

; <label>:127:                                    ; preds = %117
  br label %151

; <label>:128:                                    ; preds = %117
  %129 = load i32, i32* %10, align 4
  %130 = add nsw i32 %129, 1
  store i32 %130, i32* %10, align 4
  %131 = load i32, i32* %8, align 4
  %132 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %133 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %132, i32 1
  %134 = load i32, i32* %4, align 4
  %135 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %133, i32 0, i32 %134
  %136 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %135, i32 0, i32 0
  %137 = load i32, i32* %12, align 4
  %138 = getelementptr inbounds [22 x i32], [22 x i32]* %136, i32 0, i32 %137
  %139 = load i32, i32* %138, align 4
  %140 = icmp slt i32 %131, %139
  br i1 %140, label %141, label %150

; <label>:141:                                    ; preds = %128
  %142 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %143 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %142, i32 1
  %144 = load i32, i32* %4, align 4
  %145 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %143, i32 0, i32 %144
  %146 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %145, i32 0, i32 0
  %147 = load i32, i32* %12, align 4
  %148 = getelementptr inbounds [22 x i32], [22 x i32]* %146, i32 0, i32 %147
  %149 = load i32, i32* %148, align 4
  store i32 %149, i32* %8, align 4
  br label %150

; <label>:150:                                    ; preds = %141, %128
  br label %151

; <label>:151:                                    ; preds = %150, %127
  %152 = load i32, i32* %12, align 4
  %153 = add nsw i32 %152, 1
  store i32 %153, i32* %12, align 4
  br label %114

; <label>:154:                                    ; preds = %114
  store i32 0, i32* %11, align 4
  store i32 0, i32* %9, align 4
  br label %155

; <label>:155:                                    ; preds = %192, %154
  %156 = load i32, i32* %12, align 4
  %157 = icmp slt i32 %156, 21
  br i1 %157, label %158, label %195

; <label>:158:                                    ; preds = %155
  %159 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %160 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %159, i32 1
  %161 = load i32, i32* %4, align 4
  %162 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %160, i32 0, i32 %161
  %163 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %162, i32 0, i32 0
  %164 = load i32, i32* %12, align 4
  %165 = getelementptr inbounds [22 x i32], [22 x i32]* %163, i32 0, i32 %164
  %166 = load i32, i32* %165, align 4
  %167 = icmp slt i32 %166, 0
  br i1 %167, label %168, label %169

; <label>:168:                                    ; preds = %158
  br label %192

; <label>:169:                                    ; preds = %158
  %170 = load i32, i32* %11, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %11, align 4
  %172 = load i32, i32* %9, align 4
  %173 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %174 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %173, i32 1
  %175 = load i32, i32* %4, align 4
  %176 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %174, i32 0, i32 %175
  %177 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %176, i32 0, i32 0
  %178 = load i32, i32* %12, align 4
  %179 = getelementptr inbounds [22 x i32], [22 x i32]* %177, i32 0, i32 %178
  %180 = load i32, i32* %179, align 4
  %181 = icmp slt i32 %172, %180
  br i1 %181, label %182, label %191

; <label>:182:                                    ; preds = %169
  %183 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %6, align 4
  %184 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %183, i32 1
  %185 = load i32, i32* %4, align 4
  %186 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %184, i32 0, i32 %185
  %187 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %186, i32 0, i32 0
  %188 = load i32, i32* %12, align 4
  %189 = getelementptr inbounds [22 x i32], [22 x i32]* %187, i32 0, i32 %188
  %190 = load i32, i32* %189, align 4
  store i32 %190, i32* %9, align 4
  br label %191

; <label>:191:                                    ; preds = %182, %169
  br label %192

; <label>:192:                                    ; preds = %191, %168
  %193 = load i32, i32* %12, align 4
  %194 = add nsw i32 %193, 1
  store i32 %194, i32* %12, align 4
  br label %155

; <label>:195:                                    ; preds = %155
  store i32 0, i32* %7, align 4
  br label %196

; <label>:196:                                    ; preds = %237, %195
  %197 = load i32, i32* %7, align 4
  %198 = icmp slt i32 %197, 16
  br i1 %198, label %199, label %240

; <label>:199:                                    ; preds = %196
  %200 = load i32, i32* %8, align 4
  %201 = load i32, i32* %7, align 4
  %202 = getelementptr inbounds [16 x i32], [16 x i32]* @scfsi_calc.slen1_n, i32 0, i32 %201
  %203 = load i32, i32* %202, align 4
  %204 = icmp slt i32 %200, %203
  br i1 %204, label %205, label %236

; <label>:205:                                    ; preds = %199
  %206 = load i32, i32* %9, align 4
  %207 = load i32, i32* %7, align 4
  %208 = getelementptr inbounds [16 x i32], [16 x i32]* @scfsi_calc.slen2_n, i32 0, i32 %207
  %209 = load i32, i32* %208, align 4
  %210 = icmp slt i32 %206, %209
  br i1 %210, label %211, label %236

; <label>:211:                                    ; preds = %205
  %212 = load i32, i32* %7, align 4
  %213 = getelementptr inbounds [16 x i32], [16 x i32]* @scfsi_calc.slen1_tab, i32 0, i32 %212
  %214 = load i32, i32* %213, align 4
  %215 = load i32, i32* %10, align 4
  %216 = mul nsw i32 %214, %215
  %217 = load i32, i32* %7, align 4
  %218 = getelementptr inbounds [16 x i32], [16 x i32]* @scfsi_calc.slen2_tab, i32 0, i32 %217
  %219 = load i32, i32* %218, align 4
  %220 = load i32, i32* %11, align 4
  %221 = mul nsw i32 %219, %220
  %222 = add nsw i32 %216, %221
  store i32 %222, i32* %14, align 4
  %223 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %224 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %223, i32 0, i32 15
  %225 = load i32, i32* %224, align 4
  %226 = load i32, i32* %14, align 4
  %227 = icmp sgt i32 %225, %226
  br i1 %227, label %228, label %235

; <label>:228:                                    ; preds = %211
  %229 = load i32, i32* %14, align 4
  %230 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %231 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %230, i32 0, i32 15
  store i32 %229, i32* %231, align 4
  %232 = load i32, i32* %7, align 4
  %233 = load %struct.gr_info*, %struct.gr_info** %13, align 4
  %234 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %233, i32 0, i32 4
  store i32 %232, i32* %234, align 4
  br label %235

; <label>:235:                                    ; preds = %228, %211
  br label %236

; <label>:236:                                    ; preds = %235, %205, %199
  br label %237

; <label>:237:                                    ; preds = %236
  %238 = load i32, i32* %7, align 4
  %239 = add nsw i32 %238, 1
  store i32 %239, i32* %7, align 4
  br label %196

; <label>:240:                                    ; preds = %196
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc float @ts_real_time(i32) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = call arm_aapcscc i32 @time(i32* %3)
  %5 = load i32, i32* %2, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %9

; <label>:7:                                      ; preds = %1
  %8 = load i32, i32* %3, align 4
  store i32 %8, i32* @ts_real_time.initial_time, align 4
  br label %9

; <label>:9:                                      ; preds = %7, %1
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* @ts_real_time.initial_time, align 4
  %12 = call arm_aapcscc double @difftime(i32 %10, i32 %11)
  %13 = fptrunc double %12 to float
  ret float %13
}

declare arm_aapcscc i32 @time(i32*) #3

declare arm_aapcscc double @difftime(i32, i32) #3

; Function Attrs: nounwind
define arm_aapcscc float @ts_process_time(i32) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = call arm_aapcscc i32 @clock()
  store i32 %4, i32* %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %9

; <label>:7:                                      ; preds = %1
  %8 = load i32, i32* %3, align 4
  store i32 %8, i32* @ts_process_time.initial_time, align 4
  br label %9

; <label>:9:                                      ; preds = %7, %1
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* @ts_process_time.initial_time, align 4
  %12 = sub nsw i32 %10, %11
  %13 = sitofp i32 %12 to float
  %14 = fdiv float %13, 1.000000e+06
  ret float %14
}

declare arm_aapcscc i32 @clock() #3

; Function Attrs: nounwind
define arm_aapcscc void @ts_calc_times(%struct.ts_times*, i32, i32, i32, i32) #0 {
  %6 = alloca %struct.ts_times*, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.ts_times* %0, %struct.ts_times** %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32 %4, i32* %10, align 4
  %11 = load i32, i32* %8, align 4
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %59

; <label>:13:                                     ; preds = %5
  %14 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %15 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %14, i32 0, i32 0
  %16 = load float, float* %15, align 4
  %17 = load i32, i32* %9, align 4
  %18 = sitofp i32 %17 to float
  %19 = fmul float %16, %18
  %20 = load i32, i32* %8, align 4
  %21 = sitofp i32 %20 to float
  %22 = fdiv float %19, %21
  %23 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %24 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %23, i32 0, i32 1
  store float %22, float* %24, align 4
  %25 = load i32, i32* %7, align 4
  %26 = sitofp i32 %25 to float
  %27 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %28 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %27, i32 0, i32 1
  %29 = load float, float* %28, align 4
  %30 = fmul float %26, %29
  %31 = fcmp ogt float %30, 0.000000e+00
  br i1 %31, label %32, label %46

; <label>:32:                                     ; preds = %13
  %33 = load i32, i32* %9, align 4
  %34 = load i32, i32* %10, align 4
  %35 = mul nsw i32 %33, %34
  %36 = sitofp i32 %35 to float
  %37 = load i32, i32* %7, align 4
  %38 = sitofp i32 %37 to float
  %39 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %40 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %39, i32 0, i32 1
  %41 = load float, float* %40, align 4
  %42 = fmul float %38, %41
  %43 = fdiv float %36, %42
  %44 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %45 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %44, i32 0, i32 2
  store float %43, float* %45, align 4
  br label %49

; <label>:46:                                     ; preds = %13
  %47 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %48 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %47, i32 0, i32 2
  store float 0.000000e+00, float* %48, align 4
  br label %49

; <label>:49:                                     ; preds = %46, %32
  %50 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %51 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %50, i32 0, i32 1
  %52 = load float, float* %51, align 4
  %53 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %54 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %53, i32 0, i32 0
  %55 = load float, float* %54, align 4
  %56 = fsub float %52, %55
  %57 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %58 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %57, i32 0, i32 3
  store float %56, float* %58, align 4
  br label %66

; <label>:59:                                     ; preds = %5
  %60 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %61 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %60, i32 0, i32 1
  store float 0.000000e+00, float* %61, align 4
  %62 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %63 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %62, i32 0, i32 2
  store float 0.000000e+00, float* %63, align 4
  %64 = load %struct.ts_times*, %struct.ts_times** %6, align 4
  %65 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %64, i32 0, i32 3
  store float 0.000000e+00, float* %65, align 4
  br label %66

; <label>:66:                                     ; preds = %59, %49
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @timestatus(i32, i32, i32, i32) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.ts_times, align 4
  %10 = alloca %struct.ts_times, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %12 = load i32, i32* %6, align 4
  %13 = call arm_aapcscc float @ts_real_time(i32 %12)
  %14 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 0
  store float %13, float* %14, align 4
  %15 = load i32, i32* %6, align 4
  %16 = call arm_aapcscc float @ts_process_time(i32 %15)
  %17 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %10, i32 0, i32 0
  store float %16, float* %17, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %23

; <label>:20:                                     ; preds = %4
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %22 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.294, i32 0, i32 0))
  br label %151

; <label>:23:                                     ; preds = %4
  %24 = load i32, i32* %5, align 4
  %25 = load i32, i32* %6, align 4
  %26 = load i32, i32* %7, align 4
  %27 = load i32, i32* %8, align 4
  call arm_aapcscc void @ts_calc_times(%struct.ts_times* %9, i32 %24, i32 %25, i32 %26, i32 %27)
  %28 = load i32, i32* %5, align 4
  %29 = load i32, i32* %6, align 4
  %30 = load i32, i32* %7, align 4
  %31 = load i32, i32* %8, align 4
  call arm_aapcscc void @ts_calc_times(%struct.ts_times* %10, i32 %28, i32 %29, i32 %30, i32 %31)
  %32 = load i32, i32* %7, align 4
  %33 = icmp sgt i32 %32, 1
  br i1 %33, label %34, label %43

; <label>:34:                                     ; preds = %23
  %35 = load i32, i32* %6, align 4
  %36 = sitofp i32 %35 to double
  %37 = fmul double 1.000000e+02, %36
  %38 = load i32, i32* %7, align 4
  %39 = sub nsw i32 %38, 1
  %40 = sitofp i32 %39 to double
  %41 = fdiv double %37, %40
  %42 = fptosi double %41 to i32
  store i32 %42, i32* %11, align 4
  br label %44

; <label>:43:                                     ; preds = %23
  store i32 100, i32* %11, align 4
  br label %44

; <label>:44:                                     ; preds = %43, %34
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %46 = load i32, i32* %6, align 4
  %47 = load i32, i32* %7, align 4
  %48 = sub nsw i32 %47, 1
  %49 = load i32, i32* %11, align 4
  %50 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %10, i32 0, i32 0
  %51 = load float, float* %50, align 4
  %52 = fpext float %51 to double
  %53 = fadd double %52, 5.000000e-01
  %54 = fptosi double %53 to i32
  %55 = sdiv i32 %54, 3600
  %56 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %10, i32 0, i32 0
  %57 = load float, float* %56, align 4
  %58 = fpext float %57 to double
  %59 = fadd double %58, 5.000000e-01
  %60 = fdiv double %59, 6.000000e+01
  %61 = fptosi double %60 to i32
  %62 = srem i32 %61, 60
  %63 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %10, i32 0, i32 0
  %64 = load float, float* %63, align 4
  %65 = fpext float %64 to double
  %66 = fadd double %65, 5.000000e-01
  %67 = fptosi double %66 to i32
  %68 = srem i32 %67, 60
  %69 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %10, i32 0, i32 1
  %70 = load float, float* %69, align 4
  %71 = fpext float %70 to double
  %72 = fadd double %71, 5.000000e-01
  %73 = fptosi double %72 to i32
  %74 = sdiv i32 %73, 3600
  %75 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %10, i32 0, i32 1
  %76 = load float, float* %75, align 4
  %77 = fpext float %76 to double
  %78 = fadd double %77, 5.000000e-01
  %79 = fdiv double %78, 6.000000e+01
  %80 = fptosi double %79 to i32
  %81 = srem i32 %80, 60
  %82 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %10, i32 0, i32 1
  %83 = load float, float* %82, align 4
  %84 = fpext float %83 to double
  %85 = fadd double %84, 5.000000e-01
  %86 = fptosi double %85 to i32
  %87 = srem i32 %86, 60
  %88 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 0
  %89 = load float, float* %88, align 4
  %90 = fpext float %89 to double
  %91 = fadd double %90, 5.000000e-01
  %92 = fptosi double %91 to i32
  %93 = sdiv i32 %92, 3600
  %94 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 0
  %95 = load float, float* %94, align 4
  %96 = fpext float %95 to double
  %97 = fadd double %96, 5.000000e-01
  %98 = fdiv double %97, 6.000000e+01
  %99 = fptosi double %98 to i32
  %100 = srem i32 %99, 60
  %101 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 0
  %102 = load float, float* %101, align 4
  %103 = fpext float %102 to double
  %104 = fadd double %103, 5.000000e-01
  %105 = fptosi double %104 to i32
  %106 = srem i32 %105, 60
  %107 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 1
  %108 = load float, float* %107, align 4
  %109 = fpext float %108 to double
  %110 = fadd double %109, 5.000000e-01
  %111 = fptosi double %110 to i32
  %112 = sdiv i32 %111, 3600
  %113 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 1
  %114 = load float, float* %113, align 4
  %115 = fpext float %114 to double
  %116 = fadd double %115, 5.000000e-01
  %117 = fdiv double %116, 6.000000e+01
  %118 = fptosi double %117 to i32
  %119 = srem i32 %118, 60
  %120 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 1
  %121 = load float, float* %120, align 4
  %122 = fpext float %121 to double
  %123 = fadd double %122, 5.000000e-01
  %124 = fptosi double %123 to i32
  %125 = srem i32 %124, 60
  %126 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %10, i32 0, i32 2
  %127 = load float, float* %126, align 4
  %128 = fpext float %127 to double
  %129 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 3
  %130 = load float, float* %129, align 4
  %131 = fpext float %130 to double
  %132 = fadd double %131, 5.000000e-01
  %133 = fptosi double %132 to i32
  %134 = sdiv i32 %133, 3600
  %135 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 3
  %136 = load float, float* %135, align 4
  %137 = fpext float %136 to double
  %138 = fadd double %137, 5.000000e-01
  %139 = fdiv double %138, 6.000000e+01
  %140 = fptosi double %139 to i32
  %141 = srem i32 %140, 60
  %142 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %9, i32 0, i32 3
  %143 = load float, float* %142, align 4
  %144 = fpext float %143 to double
  %145 = fadd double %144, 5.000000e-01
  %146 = fptosi double %145 to i32
  %147 = srem i32 %146, 60
  %148 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.1.295, i32 0, i32 0), i32 %46, i32 %48, i32 %49, i32 %55, i32 %62, i32 %68, i32 %74, i32 %81, i32 %87, i32 %93, i32 %100, i32 %106, i32 %112, i32 %119, i32 %125, double %128, i32 %134, i32 %141, i32 %147)
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %150 = call arm_aapcscc i32 @fflush(%struct._IO_FILE* %149)
  br label %151

; <label>:151:                                    ; preds = %44, %20
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @getframebits(%struct.lame_global_flags*, i32*, i32*) #0 {
  %4 = alloca %struct.lame_global_flags*, align 4
  %5 = alloca i32*, align 4
  %6 = alloca i32*, align 4
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %4, align 4
  store i32* %1, i32** %5, align 4
  store i32* %2, i32** %6, align 4
  %12 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %13 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %12, i32 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = sitofp i32 %14 to double
  %16 = fdiv double %15, 1.000000e+03
  store double %16, double* %9, align 8
  %17 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %18 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %17, i32 0, i32 43
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i32 0, i32 %19
  %21 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %22 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %21, i32 0, i32 50
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds [15 x i32], [15 x i32]* %20, i32 0, i32 %23
  %25 = load i32, i32* %24, align 4
  %26 = sitofp i32 %25 to double
  store double %26, double* %8, align 8
  store i32 8, i32* %10, align 4
  store i32 32, i32* %11, align 4
  %27 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %28 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %27, i32 0, i32 43
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 1
  br i1 %30, label %31, label %43

; <label>:31:                                     ; preds = %3
  %32 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %33 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %32, i32 0, i32 46
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 1
  br i1 %35, label %36, label %39

; <label>:36:                                     ; preds = %31
  %37 = load i32, i32* %11, align 4
  %38 = add nsw i32 %37, 136
  store i32 %38, i32* %11, align 4
  br label %42

; <label>:39:                                     ; preds = %31
  %40 = load i32, i32* %11, align 4
  %41 = add nsw i32 %40, 256
  store i32 %41, i32* %11, align 4
  br label %42

; <label>:42:                                     ; preds = %39, %36
  br label %55

; <label>:43:                                     ; preds = %3
  %44 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %45 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %44, i32 0, i32 46
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 1
  br i1 %47, label %48, label %51

; <label>:48:                                     ; preds = %43
  %49 = load i32, i32* %11, align 4
  %50 = add nsw i32 %49, 72
  store i32 %50, i32* %11, align 4
  br label %54

; <label>:51:                                     ; preds = %43
  %52 = load i32, i32* %11, align 4
  %53 = add nsw i32 %52, 136
  store i32 %53, i32* %11, align 4
  br label %54

; <label>:54:                                     ; preds = %51, %48
  br label %55

; <label>:55:                                     ; preds = %54, %42
  %56 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %57 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %56, i32 0, i32 14
  %58 = load i32, i32* %57, align 4
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %60, label %63

; <label>:60:                                     ; preds = %55
  %61 = load i32, i32* %11, align 4
  %62 = add nsw i32 %61, 16
  store i32 %62, i32* %11, align 4
  br label %63

; <label>:63:                                     ; preds = %60, %55
  %64 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %65 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %64, i32 0, i32 42
  %66 = load i32, i32* %65, align 4
  %67 = sitofp i32 %66 to double
  %68 = load double, double* %9, align 8
  %69 = fdiv double %67, %68
  %70 = load double, double* %8, align 8
  %71 = load i32, i32* %10, align 4
  %72 = sitofp i32 %71 to double
  %73 = fdiv double %70, %72
  %74 = fmul double %69, %73
  %75 = fadd double %74, 1.000000e-09
  %76 = call arm_aapcscc double @floor(double %75) #9
  %77 = fptosi double %76 to i32
  store i32 %77, i32* %7, align 4
  %78 = load i32, i32* %7, align 4
  %79 = mul nsw i32 8, %78
  %80 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %81 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %80, i32 0, i32 44
  %82 = load i32, i32* %81, align 4
  %83 = mul nsw i32 %82, 8
  %84 = add nsw i32 %79, %83
  %85 = load i32*, i32** %5, align 4
  store i32 %84, i32* %85, align 4
  %86 = load i32*, i32** %5, align 4
  %87 = load i32, i32* %86, align 4
  %88 = load i32, i32* %11, align 4
  %89 = sub nsw i32 %87, %88
  %90 = load %struct.lame_global_flags*, %struct.lame_global_flags** %4, align 4
  %91 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %90, i32 0, i32 45
  %92 = load i32, i32* %91, align 4
  %93 = sdiv i32 %89, %92
  %94 = load i32*, i32** %6, align 4
  store i32 %93, i32* %94, align 4
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @display_bitrates(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  store i32 1, i32* %4, align 4
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %6 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.302, i32 0, i32 0))
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %8 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1.303, i32 0, i32 0))
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %10 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2.304, i32 0, i32 0))
  store i32 1, i32* %3, align 4
  br label %11

; <label>:11:                                     ; preds = %22, %1
  %12 = load i32, i32* %3, align 4
  %13 = icmp slt i32 %12, 15
  br i1 %13, label %14, label %25

; <label>:14:                                     ; preds = %11
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %16 = load i32, i32* %4, align 4
  %17 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i32 0, i32 %16
  %18 = load i32, i32* %3, align 4
  %19 = getelementptr inbounds [15 x i32], [15 x i32]* %17, i32 0, i32 %18
  %20 = load i32, i32* %19, align 4
  %21 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.305, i32 0, i32 0), i32 %20)
  br label %22

; <label>:22:                                     ; preds = %14
  %23 = load i32, i32* %3, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %3, align 4
  br label %11

; <label>:25:                                     ; preds = %11
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %27 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.302, i32 0, i32 0))
  store i32 0, i32* %4, align 4
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %29 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.302, i32 0, i32 0))
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %31 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4.306, i32 0, i32 0))
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %33 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2.304, i32 0, i32 0))
  store i32 1, i32* %3, align 4
  br label %34

; <label>:34:                                     ; preds = %45, %25
  %35 = load i32, i32* %3, align 4
  %36 = icmp slt i32 %35, 15
  br i1 %36, label %37, label %48

; <label>:37:                                     ; preds = %34
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %39 = load i32, i32* %4, align 4
  %40 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i32 0, i32 %39
  %41 = load i32, i32* %3, align 4
  %42 = getelementptr inbounds [15 x i32], [15 x i32]* %40, i32 0, i32 %41
  %43 = load i32, i32* %42, align 4
  %44 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.305, i32 0, i32 0), i32 %43)
  br label %45

; <label>:45:                                     ; preds = %37
  %46 = load i32, i32* %3, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %3, align 4
  br label %34

; <label>:48:                                     ; preds = %34
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %50 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.302, i32 0, i32 0))
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @BitrateIndex(i32, i32, i32) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  br label %10

; <label>:10:                                     ; preds = %30, %3
  %11 = load i32, i32* %9, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %16, label %13

; <label>:13:                                     ; preds = %10
  %14 = load i32, i32* %8, align 4
  %15 = icmp slt i32 %14, 15
  br label %16

; <label>:16:                                     ; preds = %13, %10
  %17 = phi i1 [ false, %10 ], [ %15, %13 ]
  br i1 %17, label %18, label %31

; <label>:18:                                     ; preds = %16
  %19 = load i32, i32* %6, align 4
  %20 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i32 0, i32 %19
  %21 = load i32, i32* %8, align 4
  %22 = getelementptr inbounds [15 x i32], [15 x i32]* %20, i32 0, i32 %21
  %23 = load i32, i32* %22, align 4
  %24 = load i32, i32* %5, align 4
  %25 = icmp eq i32 %23, %24
  br i1 %25, label %26, label %27

; <label>:26:                                     ; preds = %18
  store i32 1, i32* %9, align 4
  br label %30

; <label>:27:                                     ; preds = %18
  %28 = load i32, i32* %8, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %8, align 4
  br label %30

; <label>:30:                                     ; preds = %27, %26
  br label %10

; <label>:31:                                     ; preds = %16
  %32 = load i32, i32* %9, align 4
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %36

; <label>:34:                                     ; preds = %31
  %35 = load i32, i32* %8, align 4
  store i32 %35, i32* %4, align 4
  br label %41

; <label>:36:                                     ; preds = %31
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %38 = load i32, i32* %5, align 4
  %39 = load i32, i32* %7, align 4
  %40 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.5.309, i32 0, i32 0), i32 %38, i32 %39)
  store i32 -1, i32* %4, align 4
  br label %41

; <label>:41:                                     ; preds = %36, %34
  %42 = load i32, i32* %4, align 4
  ret i32 %42
}

; Function Attrs: nounwind
define arm_aapcscc i32 @SmpFrqIndex(i32, i32*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 4
  store i32 %0, i32* %4, align 4
  store i32* %1, i32** %5, align 4
  %6 = load i32*, i32** %5, align 4
  store i32 0, i32* %6, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp eq i32 %7, 44100
  br i1 %8, label %9, label %11

; <label>:9:                                      ; preds = %2
  %10 = load i32*, i32** %5, align 4
  store i32 1, i32* %10, align 4
  store i32 0, i32* %3, align 4
  br label %40

; <label>:11:                                     ; preds = %2
  %12 = load i32, i32* %4, align 4
  %13 = icmp eq i32 %12, 48000
  br i1 %13, label %14, label %16

; <label>:14:                                     ; preds = %11
  %15 = load i32*, i32** %5, align 4
  store i32 1, i32* %15, align 4
  store i32 1, i32* %3, align 4
  br label %40

; <label>:16:                                     ; preds = %11
  %17 = load i32, i32* %4, align 4
  %18 = icmp eq i32 %17, 32000
  br i1 %18, label %19, label %21

; <label>:19:                                     ; preds = %16
  %20 = load i32*, i32** %5, align 4
  store i32 1, i32* %20, align 4
  store i32 2, i32* %3, align 4
  br label %40

; <label>:21:                                     ; preds = %16
  %22 = load i32, i32* %4, align 4
  %23 = icmp eq i32 %22, 24000
  br i1 %23, label %24, label %26

; <label>:24:                                     ; preds = %21
  %25 = load i32*, i32** %5, align 4
  store i32 0, i32* %25, align 4
  store i32 1, i32* %3, align 4
  br label %40

; <label>:26:                                     ; preds = %21
  %27 = load i32, i32* %4, align 4
  %28 = icmp eq i32 %27, 22050
  br i1 %28, label %29, label %31

; <label>:29:                                     ; preds = %26
  %30 = load i32*, i32** %5, align 4
  store i32 0, i32* %30, align 4
  store i32 0, i32* %3, align 4
  br label %40

; <label>:31:                                     ; preds = %26
  %32 = load i32, i32* %4, align 4
  %33 = icmp eq i32 %32, 16000
  br i1 %33, label %34, label %36

; <label>:34:                                     ; preds = %31
  %35 = load i32*, i32** %5, align 4
  store i32 0, i32* %35, align 4
  store i32 2, i32* %3, align 4
  br label %40

; <label>:36:                                     ; preds = %31
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %38 = load i32, i32* %4, align 4
  %39 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.6.312, i32 0, i32 0), i32 %38)
  store i32 -1, i32* %3, align 4
  br label %40

; <label>:40:                                     ; preds = %36, %34, %29, %24, %19, %14, %9
  %41 = load i32, i32* %3, align 4
  ret i32 %41
}

; Function Attrs: nounwind
define arm_aapcscc i8* @mem_alloc(i32, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 4
  %5 = alloca i8*, align 4
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 4
  %6 = load i32, i32* %3, align 4
  %7 = call arm_aapcscc i8* @malloc(i32 %6)
  store i8* %7, i8** %5, align 4
  %8 = load i8*, i8** %5, align 4
  %9 = icmp ne i8* %8, null
  br i1 %9, label %10, label %13

; <label>:10:                                     ; preds = %2
  %11 = load i8*, i8** %5, align 4
  %12 = load i32, i32* %3, align 4
  call void @llvm.memset.p0i8.i32(i8* %11, i8 0, i32 %12, i32 1, i1 false)
  br label %17

; <label>:13:                                     ; preds = %2
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %15 = load i8*, i8** %4, align 4
  %16 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.313, i32 0, i32 0), i8* %15)
  call arm_aapcscc void @exit(i32 1) #8
  unreachable

; <label>:17:                                     ; preds = %10
  %18 = load i8*, i8** %5, align 4
  ret i8* %18
}

; Function Attrs: nounwind
define arm_aapcscc i32 @DetermineByteOrder() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [5 x i8], align 1
  %3 = alloca %struct.rtpbits, align 4
  %4 = bitcast %struct.rtpbits* %3 to i32*
  store i32 1094861636, i32* %4, align 4
  %5 = getelementptr inbounds [5 x i8], [5 x i8]* %2, i32 0, i32 0
  %6 = bitcast %struct.rtpbits* %3 to [4 x i8]*
  %7 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i32 0, i32 0
  %8 = call arm_aapcscc i8* @strncpy(i8* %5, i8* %7, i32 4)
  %9 = getelementptr inbounds [5 x i8], [5 x i8]* %2, i32 0, i32 4
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds [5 x i8], [5 x i8]* %2, i32 0, i32 0
  %11 = call arm_aapcscc i32 @strcmp(i8* %10, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.314, i32 0, i32 0))
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

; <label>:13:                                     ; preds = %0
  store i32 1, i32* %1, align 4
  br label %20

; <label>:14:                                     ; preds = %0
  %15 = getelementptr inbounds [5 x i8], [5 x i8]* %2, i32 0, i32 0
  %16 = call arm_aapcscc i32 @strcmp(i8* %15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9.315, i32 0, i32 0))
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %14
  store i32 2, i32* %1, align 4
  br label %20

; <label>:19:                                     ; preds = %14
  store i32 0, i32* %1, align 4
  br label %20

; <label>:20:                                     ; preds = %19, %18, %13
  %21 = load i32, i32* %1, align 4
  ret i32 %21
}

; Function Attrs: nounwind
define arm_aapcscc void @SwapBytesInWords(i16*, i32) #0 {
  %3 = alloca i16*, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i16, align 2
  %7 = alloca i8*, align 4
  %8 = alloca i8*, align 4
  store i16* %0, i16** %3, align 4
  store i32 %1, i32* %4, align 4
  %9 = bitcast i16* %6 to i8*
  store i8* %9, i8** %8, align 4
  store i32 0, i32* %5, align 4
  br label %10

; <label>:10:                                     ; preds = %30, %2
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %4, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %33

; <label>:14:                                     ; preds = %10
  %15 = load i16*, i16** %3, align 4
  %16 = load i16, i16* %15, align 2
  store i16 %16, i16* %6, align 2
  %17 = load i16*, i16** %3, align 4
  %18 = getelementptr inbounds i16, i16* %17, i32 1
  store i16* %18, i16** %3, align 4
  %19 = bitcast i16* %17 to i8*
  store i8* %19, i8** %7, align 4
  %20 = load i8*, i8** %8, align 4
  %21 = getelementptr inbounds i8, i8* %20, i32 1
  %22 = load i8, i8* %21, align 1
  %23 = load i8*, i8** %7, align 4
  %24 = getelementptr inbounds i8, i8* %23, i32 0
  store i8 %22, i8* %24, align 1
  %25 = load i8*, i8** %8, align 4
  %26 = getelementptr inbounds i8, i8* %25, i32 0
  %27 = load i8, i8* %26, align 1
  %28 = load i8*, i8** %7, align 4
  %29 = getelementptr inbounds i8, i8* %28, i32 1
  store i8 %27, i8* %29, align 1
  br label %30

; <label>:30:                                     ; preds = %14
  %31 = load i32, i32* %5, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %5, align 4
  br label %10

; <label>:33:                                     ; preds = %10
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @empty_buffer(%struct.bit_stream_struc*) #0 {
  %2 = alloca %struct.bit_stream_struc*, align 4
  %3 = alloca i32, align 4
  store %struct.bit_stream_struc* %0, %struct.bit_stream_struc** %2, align 4
  %4 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %5 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %4, i32 0, i32 6
  %6 = load i32, i32* %5, align 4
  %7 = add nsw i32 1, %6
  store i32 %7, i32* %3, align 4
  %8 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %9 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %8, i32 0, i32 4
  %10 = load i32, i32* %9, align 4
  %11 = load i32, i32* %3, align 4
  %12 = sub nsw i32 %10, %11
  %13 = icmp sle i32 %12, 0
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %1
  br label %31

; <label>:15:                                     ; preds = %1
  %16 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %17 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %16, i32 0, i32 4
  %18 = load i32, i32* %17, align 4
  %19 = sub nsw i32 %18, 1
  %20 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %21 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %20, i32 0, i32 6
  store i32 %19, i32* %21, align 4
  %22 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %23 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %22, i32 0, i32 7
  store i32 8, i32* %23, align 4
  %24 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %25 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %24, i32 0, i32 3
  %26 = load i8*, i8** %25, align 4
  %27 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %28 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %27, i32 0, i32 6
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds i8, i8* %26, i32 %29
  store i8 0, i8* %30, align 1
  br label %31

; <label>:31:                                     ; preds = %15, %14
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @copy_buffer(i8*, i32, %struct.bit_stream_struc*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.bit_stream_struc*, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i8* %0, i8** %5, align 4
  store i32 %1, i32* %6, align 4
  store %struct.bit_stream_struc* %2, %struct.bit_stream_struc** %7, align 4
  store i32 0, i32* %9, align 4
  %10 = load i32, i32* %6, align 4
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %24

; <label>:12:                                     ; preds = %3
  %13 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %7, align 4
  %14 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %13, i32 0, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = sub nsw i32 %15, 1
  %17 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %7, align 4
  %18 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %17, i32 0, i32 6
  %19 = load i32, i32* %18, align 4
  %20 = sub nsw i32 %16, %19
  %21 = load i32, i32* %6, align 4
  %22 = icmp sgt i32 %20, %21
  br i1 %22, label %23, label %24

; <label>:23:                                     ; preds = %12
  store i32 -1, i32* %4, align 4
  br label %66

; <label>:24:                                     ; preds = %12, %3
  %25 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %7, align 4
  %26 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %25, i32 0, i32 4
  %27 = load i32, i32* %26, align 4
  %28 = sub nsw i32 %27, 1
  store i32 %28, i32* %8, align 4
  br label %29

; <label>:29:                                     ; preds = %46, %24
  %30 = load i32, i32* %8, align 4
  %31 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %7, align 4
  %32 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %31, i32 0, i32 6
  %33 = load i32, i32* %32, align 4
  %34 = icmp sgt i32 %30, %33
  br i1 %34, label %35, label %49

; <label>:35:                                     ; preds = %29
  %36 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %7, align 4
  %37 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %36, i32 0, i32 3
  %38 = load i8*, i8** %37, align 4
  %39 = load i32, i32* %8, align 4
  %40 = getelementptr inbounds i8, i8* %38, i32 %39
  %41 = load i8, i8* %40, align 1
  %42 = load i8*, i8** %5, align 4
  %43 = load i32, i32* %9, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %9, align 4
  %45 = getelementptr inbounds i8, i8* %42, i32 %43
  store i8 %41, i8* %45, align 1
  br label %46

; <label>:46:                                     ; preds = %35
  %47 = load i32, i32* %8, align 4
  %48 = add nsw i32 %47, -1
  store i32 %48, i32* %8, align 4
  br label %29

; <label>:49:                                     ; preds = %29
  %50 = load i32, i32* %9, align 4
  %51 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %7, align 4
  %52 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %51, i32 0, i32 4
  %53 = load i32, i32* %52, align 4
  %54 = sub nsw i32 %53, 1
  %55 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %7, align 4
  %56 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %55, i32 0, i32 6
  %57 = load i32, i32* %56, align 4
  %58 = sub nsw i32 %54, %57
  %59 = icmp eq i32 %50, %58
  br i1 %59, label %61, label %60

; <label>:60:                                     ; preds = %49
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.10.318, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11.319, i32 0, i32 0), i32 271, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.copy_buffer, i32 0, i32 0))
  br label %61

; <label>:61:                                     ; preds = %60, %49
  %62 = phi i1 [ true, %49 ], [ false, %60 ]
  %63 = zext i1 %62 to i32
  %64 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %7, align 4
  call arm_aapcscc void @empty_buffer(%struct.bit_stream_struc* %64)
  %65 = load i32, i32* %9, align 4
  store i32 %65, i32* %4, align 4
  br label %66

; <label>:66:                                     ; preds = %61, %23
  %67 = load i32, i32* %4, align 4
  ret i32 %67
}

; Function Attrs: nounwind
define arm_aapcscc void @init_bit_stream_w(%struct.bit_stream_struc*) #0 {
  %2 = alloca %struct.bit_stream_struc*, align 4
  store %struct.bit_stream_struc* %0, %struct.bit_stream_struc** %2, align 4
  %3 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  call arm_aapcscc void @alloc_buffer(%struct.bit_stream_struc* %3, i32 16384)
  %4 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %5 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %4, i32 0, i32 6
  store i32 16383, i32* %5, align 4
  %6 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %7 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %6, i32 0, i32 7
  store i32 8, i32* %7, align 4
  %8 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %9 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %8, i32 0, i32 5
  store i32 0, i32* %9, align 4
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @alloc_buffer(%struct.bit_stream_struc*, i32) #0 {
  %3 = alloca %struct.bit_stream_struc*, align 4
  %4 = alloca i32, align 4
  store %struct.bit_stream_struc* %0, %struct.bit_stream_struc** %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = mul i32 %5, 1
  %7 = call arm_aapcscc i8* @mem_alloc(i32 %6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12.322, i32 0, i32 0))
  %8 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %3, align 4
  %9 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %8, i32 0, i32 3
  store i8* %7, i8** %9, align 4
  %10 = load i32, i32* %4, align 4
  %11 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %3, align 4
  %12 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %11, i32 0, i32 4
  store i32 %10, i32* %12, align 4
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @desalloc_buffer(%struct.bit_stream_struc*) #0 {
  %2 = alloca %struct.bit_stream_struc*, align 4
  store %struct.bit_stream_struc* %0, %struct.bit_stream_struc** %2, align 4
  %3 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %2, align 4
  %4 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %3, i32 0, i32 3
  %5 = load i8*, i8** %4, align 4
  call arm_aapcscc void @free(i8* %5)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @putbits(%struct.bit_stream_struc*, i32, i32) #0 {
  %4 = alloca %struct.bit_stream_struc*, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store %struct.bit_stream_struc* %0, %struct.bit_stream_struc** %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %10 = load i32, i32* %6, align 4
  store i32 %10, i32* %7, align 4
  %11 = load i32, i32* %6, align 4
  %12 = icmp sgt i32 %11, 32
  br i1 %12, label %13, label %16

; <label>:13:                                     ; preds = %3
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %15 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.13.327, i32 0, i32 0), i32 32)
  br label %16

; <label>:16:                                     ; preds = %13, %3
  %17 = load i32, i32* %6, align 4
  %18 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %19 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %18, i32 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = add i32 %20, %17
  store i32 %21, i32* %19, align 4
  br label %22

; <label>:22:                                     ; preds = %97, %16
  %23 = load i32, i32* %7, align 4
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %25, label %101

; <label>:25:                                     ; preds = %22
  %26 = load i32, i32* %7, align 4
  %27 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %28 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %27, i32 0, i32 7
  %29 = load i32, i32* %28, align 4
  %30 = icmp slt i32 %26, %29
  br i1 %30, label %31, label %33

; <label>:31:                                     ; preds = %25
  %32 = load i32, i32* %7, align 4
  br label %37

; <label>:33:                                     ; preds = %25
  %34 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %35 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %34, i32 0, i32 7
  %36 = load i32, i32* %35, align 4
  br label %37

; <label>:37:                                     ; preds = %33, %31
  %38 = phi i32 [ %32, %31 ], [ %36, %33 ]
  store i32 %38, i32* %8, align 4
  %39 = load i32, i32* %5, align 4
  %40 = load i32, i32* %7, align 4
  %41 = load i32, i32* %8, align 4
  %42 = sub nsw i32 %40, %41
  %43 = lshr i32 %39, %42
  store i32 %43, i32* %9, align 4
  %44 = load i32, i32* %9, align 4
  %45 = load i32, i32* %8, align 4
  %46 = getelementptr inbounds [9 x i32], [9 x i32]* @putmask, i32 0, i32 %45
  %47 = load i32, i32* %46, align 4
  %48 = and i32 %44, %47
  %49 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %50 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %49, i32 0, i32 7
  %51 = load i32, i32* %50, align 4
  %52 = load i32, i32* %8, align 4
  %53 = sub nsw i32 %51, %52
  %54 = shl i32 %48, %53
  %55 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %56 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %55, i32 0, i32 3
  %57 = load i8*, i8** %56, align 4
  %58 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %59 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %58, i32 0, i32 6
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds i8, i8* %57, i32 %60
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = or i32 %63, %54
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %61, align 1
  %66 = load i32, i32* %8, align 4
  %67 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %68 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %67, i32 0, i32 7
  %69 = load i32, i32* %68, align 4
  %70 = sub nsw i32 %69, %66
  store i32 %70, i32* %68, align 4
  %71 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %72 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %71, i32 0, i32 7
  %73 = load i32, i32* %72, align 4
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %97, label %75

; <label>:75:                                     ; preds = %37
  %76 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %77 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %76, i32 0, i32 7
  store i32 8, i32* %77, align 4
  %78 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %79 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %78, i32 0, i32 6
  %80 = load i32, i32* %79, align 4
  %81 = add nsw i32 %80, -1
  store i32 %81, i32* %79, align 4
  %82 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %83 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %82, i32 0, i32 6
  %84 = load i32, i32* %83, align 4
  %85 = icmp sge i32 %84, 0
  br i1 %85, label %87, label %86

; <label>:86:                                     ; preds = %75
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14.328, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11.319, i32 0, i32 0), i32 329, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__func__.putbits, i32 0, i32 0))
  br label %87

; <label>:87:                                     ; preds = %86, %75
  %88 = phi i1 [ true, %75 ], [ false, %86 ]
  %89 = zext i1 %88 to i32
  %90 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %91 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %90, i32 0, i32 3
  %92 = load i8*, i8** %91, align 4
  %93 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %4, align 4
  %94 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %93, i32 0, i32 6
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds i8, i8* %92, i32 %95
  store i8 0, i8* %96, align 1
  br label %97

; <label>:97:                                     ; preds = %87, %37
  %98 = load i32, i32* %8, align 4
  %99 = load i32, i32* %7, align 4
  %100 = sub nsw i32 %99, %98
  store i32 %100, i32* %7, align 4
  br label %22

; <label>:101:                                    ; preds = %22
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc double @calc_sfb_ave_noise(double*, double*, i32, i32, double) #0 {
  %6 = alloca double, align 8
  %7 = alloca double*, align 4
  %8 = alloca double*, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca i32, align 4
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca i32, align 4
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  store double* %0, double** %7, align 4
  store double* %1, double** %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store double %4, double* %11, align 8
  store double 0.000000e+00, double* %13, align 8
  %18 = load double, double* %11, align 8
  %19 = call arm_aapcscc double @pow(double %18, double 7.500000e-01) #7
  store double %19, double* %14, align 8
  store i32 0, i32* %12, align 4
  br label %20

; <label>:20:                                     ; preds = %79, %5
  %21 = load i32, i32* %12, align 4
  %22 = load i32, i32* %9, align 4
  %23 = load i32, i32* %10, align 4
  %24 = mul nsw i32 %22, %23
  %25 = icmp slt i32 %21, %24
  br i1 %25, label %26, label %83

; <label>:26:                                     ; preds = %20
  %27 = load double*, double** %8, align 4
  %28 = load i32, i32* %12, align 4
  %29 = getelementptr inbounds double, double* %27, i32 %28
  %30 = load double, double* %29, align 8
  %31 = load double, double* %14, align 8
  %32 = fdiv double %30, %31
  %33 = call arm_aapcscc double @floor(double %32) #9
  %34 = fptosi double %33 to i32
  store i32 %34, i32* %15, align 4
  %35 = load i32, i32* %15, align 4
  %36 = icmp sgt i32 %35, 8206
  br i1 %36, label %37, label %38

; <label>:37:                                     ; preds = %26
  store double -1.000000e+00, double* %6, align 8
  br label %88

; <label>:38:                                     ; preds = %26
  %39 = load double*, double** %7, align 4
  %40 = load i32, i32* %12, align 4
  %41 = getelementptr inbounds double, double* %39, i32 %40
  %42 = load double, double* %41, align 8
  %43 = call arm_aapcscc double @fabs(double %42) #9
  %44 = load i32, i32* %15, align 4
  %45 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %44
  %46 = load double, double* %45, align 8
  %47 = load double, double* %11, align 8
  %48 = fmul double %46, %47
  %49 = fsub double %43, %48
  store double %49, double* %16, align 8
  %50 = load i32, i32* %15, align 4
  %51 = icmp slt i32 %50, 8206
  br i1 %51, label %52, label %73

; <label>:52:                                     ; preds = %38
  %53 = load double*, double** %7, align 4
  %54 = load i32, i32* %12, align 4
  %55 = getelementptr inbounds double, double* %53, i32 %54
  %56 = load double, double* %55, align 8
  %57 = call arm_aapcscc double @fabs(double %56) #9
  %58 = load i32, i32* %15, align 4
  %59 = add nsw i32 %58, 1
  %60 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i32 0, i32 %59
  %61 = load double, double* %60, align 8
  %62 = load double, double* %11, align 8
  %63 = fmul double %61, %62
  %64 = fsub double %57, %63
  store double %64, double* %17, align 8
  %65 = load double, double* %17, align 8
  %66 = call arm_aapcscc double @fabs(double %65) #9
  %67 = load double, double* %16, align 8
  %68 = call arm_aapcscc double @fabs(double %67) #9
  %69 = fcmp olt double %66, %68
  br i1 %69, label %70, label %72

; <label>:70:                                     ; preds = %52
  %71 = load double, double* %17, align 8
  store double %71, double* %16, align 8
  br label %72

; <label>:72:                                     ; preds = %70, %52
  br label %73

; <label>:73:                                     ; preds = %72, %38
  %74 = load double, double* %16, align 8
  %75 = load double, double* %16, align 8
  %76 = fmul double %74, %75
  %77 = load double, double* %13, align 8
  %78 = fadd double %77, %76
  store double %78, double* %13, align 8
  br label %79

; <label>:79:                                     ; preds = %73
  %80 = load i32, i32* %9, align 4
  %81 = load i32, i32* %12, align 4
  %82 = add nsw i32 %81, %80
  store i32 %82, i32* %12, align 4
  br label %20

; <label>:83:                                     ; preds = %20
  %84 = load double, double* %13, align 8
  %85 = load i32, i32* %10, align 4
  %86 = sitofp i32 %85 to double
  %87 = fdiv double %84, %86
  store double %87, double* %6, align 8
  br label %88

; <label>:88:                                     ; preds = %83, %37
  %89 = load double, double* %6, align 8
  ret double %89
}

; Function Attrs: nounwind
define arm_aapcscc double @find_scalefac(double*, double*, i32, i32, double, i32) #0 {
  %7 = alloca double, align 8
  %8 = alloca double*, align 4
  %9 = alloca double*, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  %13 = alloca i32, align 4
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  store double* %0, double** %8, align 4
  store double* %1, double** %9, align 4
  store i32 %2, i32* %10, align 4
  store i32 %3, i32* %11, align 4
  store double %4, double* %12, align 8
  store i32 %5, i32* %13, align 4
  store double -2.050000e+01, double* %16, align 8
  store i32 -82, i32* %19, align 4
  store double 3.200000e+01, double* %18, align 8
  store i32 128, i32* %21, align 4
  store double 1.000000e+04, double* %17, align 8
  store i32 10000, i32* %20, align 4
  store i32 0, i32* %22, align 4
  br label %23

; <label>:23:                                     ; preds = %80, %6
  %24 = load i32, i32* %22, align 4
  %25 = icmp slt i32 %24, 7
  br i1 %25, label %26, label %83

; <label>:26:                                     ; preds = %23
  %27 = load double, double* %18, align 8
  %28 = fdiv double %27, 2.000000e+00
  store double %28, double* %18, align 8
  %29 = load i32, i32* %21, align 4
  %30 = sdiv i32 %29, 2
  store i32 %30, i32* %21, align 4
  %31 = load double, double* %16, align 8
  %32 = call arm_aapcscc double @pow(double 2.000000e+00, double %31) #7
  store double %32, double* %15, align 8
  %33 = load double*, double** %8, align 4
  %34 = load double*, double** %9, align 4
  %35 = load i32, i32* %10, align 4
  %36 = load i32, i32* %13, align 4
  %37 = load double, double* %15, align 8
  %38 = call arm_aapcscc double @calc_sfb_ave_noise(double* %33, double* %34, i32 %35, i32 %36, double %37)
  store double %38, double* %14, align 8
  %39 = load double, double* %14, align 8
  %40 = fcmp olt double %39, 0.000000e+00
  br i1 %40, label %41, label %48

; <label>:41:                                     ; preds = %26
  %42 = load double, double* %18, align 8
  %43 = load double, double* %16, align 8
  %44 = fadd double %43, %42
  store double %44, double* %16, align 8
  %45 = load i32, i32* %21, align 4
  %46 = load i32, i32* %19, align 4
  %47 = add nsw i32 %46, %45
  store i32 %47, i32* %19, align 4
  br label %79

; <label>:48:                                     ; preds = %26
  %49 = load double, double* %17, align 8
  %50 = fcmp oeq double %49, 1.000000e+04
  br i1 %50, label %51, label %53

; <label>:51:                                     ; preds = %48
  %52 = load double, double* %16, align 8
  store double %52, double* %17, align 8
  br label %53

; <label>:53:                                     ; preds = %51, %48
  %54 = load i32, i32* %20, align 4
  %55 = icmp eq i32 %54, 10000
  br i1 %55, label %56, label %58

; <label>:56:                                     ; preds = %53
  %57 = load i32, i32* %19, align 4
  store i32 %57, i32* %20, align 4
  br label %58

; <label>:58:                                     ; preds = %56, %53
  %59 = load double, double* %14, align 8
  %60 = load double, double* %12, align 8
  %61 = fcmp ogt double %59, %60
  br i1 %61, label %62, label %69

; <label>:62:                                     ; preds = %58
  %63 = load double, double* %18, align 8
  %64 = load double, double* %16, align 8
  %65 = fsub double %64, %63
  store double %65, double* %16, align 8
  %66 = load i32, i32* %21, align 4
  %67 = load i32, i32* %19, align 4
  %68 = sub nsw i32 %67, %66
  store i32 %68, i32* %19, align 4
  br label %78

; <label>:69:                                     ; preds = %58
  %70 = load double, double* %16, align 8
  store double %70, double* %17, align 8
  %71 = load i32, i32* %19, align 4
  store i32 %71, i32* %20, align 4
  %72 = load double, double* %18, align 8
  %73 = load double, double* %16, align 8
  %74 = fadd double %73, %72
  store double %74, double* %16, align 8
  %75 = load i32, i32* %21, align 4
  %76 = load i32, i32* %19, align 4
  %77 = add nsw i32 %76, %75
  store i32 %77, i32* %19, align 4
  br label %78

; <label>:78:                                     ; preds = %69, %62
  br label %79

; <label>:79:                                     ; preds = %78, %41
  br label %80

; <label>:80:                                     ; preds = %79
  %81 = load i32, i32* %22, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %22, align 4
  br label %23

; <label>:83:                                     ; preds = %23
  %84 = load double, double* %17, align 8
  %85 = fcmp une double %84, 1.000000e+04
  br i1 %85, label %87, label %86

; <label>:86:                                     ; preds = %83
  call arm_aapcscc void @__assert_fail(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.329, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.330, i32 0, i32 0), i32 108, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__func__.find_scalefac, i32 0, i32 0))
  br label %87

; <label>:87:                                     ; preds = %86, %83
  %88 = phi i1 [ true, %83 ], [ false, %86 ]
  %89 = zext i1 %88 to i32
  %90 = load double, double* %17, align 8
  %91 = fadd double %90, 7.500000e-01
  store double %91, double* %16, align 8
  %92 = load i32, i32* %20, align 4
  %93 = add nsw i32 %92, 3
  store i32 %93, i32* %19, align 4
  br label %94

; <label>:94:                                     ; preds = %139, %87
  %95 = load double, double* %16, align 8
  %96 = load double, double* %17, align 8
  %97 = fadd double %96, 1.000000e-02
  %98 = fcmp ogt double %95, %97
  br i1 %98, label %99, label %144

; <label>:99:                                     ; preds = %94
  %100 = load double, double* %16, align 8
  %101 = load double, double* %17, align 8
  %102 = load double, double* %18, align 8
  %103 = fmul double 2.000000e+00, %102
  %104 = fadd double %101, %103
  %105 = fsub double %100, %104
  %106 = call arm_aapcscc double @fabs(double %105) #9
  %107 = fcmp olt double %106, 1.000000e-02
  br i1 %107, label %108, label %111

; <label>:108:                                    ; preds = %99
  %109 = load double, double* %16, align 8
  %110 = fsub double %109, 2.500000e-01
  store double %110, double* %16, align 8
  br label %111

; <label>:111:                                    ; preds = %108, %99
  %112 = load i32, i32* %19, align 4
  %113 = load i32, i32* %20, align 4
  %114 = load i32, i32* %21, align 4
  %115 = mul nsw i32 2, %114
  %116 = add nsw i32 %113, %115
  %117 = icmp eq i32 %112, %116
  br i1 %117, label %118, label %121

; <label>:118:                                    ; preds = %111
  %119 = load i32, i32* %19, align 4
  %120 = sub nsw i32 %119, 1
  store i32 %120, i32* %19, align 4
  br label %121

; <label>:121:                                    ; preds = %118, %111
  %122 = load double, double* %16, align 8
  %123 = call arm_aapcscc double @pow(double 2.000000e+00, double %122) #7
  store double %123, double* %15, align 8
  %124 = load double*, double** %8, align 4
  %125 = load double*, double** %9, align 4
  %126 = load i32, i32* %10, align 4
  %127 = load i32, i32* %13, align 4
  %128 = load double, double* %15, align 8
  %129 = call arm_aapcscc double @calc_sfb_ave_noise(double* %124, double* %125, i32 %126, i32 %127, double %128)
  store double %129, double* %14, align 8
  %130 = load double, double* %14, align 8
  %131 = fcmp ogt double %130, 0.000000e+00
  br i1 %131, label %132, label %139

; <label>:132:                                    ; preds = %121
  %133 = load double, double* %14, align 8
  %134 = load double, double* %12, align 8
  %135 = fcmp ole double %133, %134
  br i1 %135, label %136, label %138

; <label>:136:                                    ; preds = %132
  %137 = load double, double* %16, align 8
  store double %137, double* %7, align 8
  br label %146

; <label>:138:                                    ; preds = %132
  br label %139

; <label>:139:                                    ; preds = %138, %121
  %140 = load double, double* %16, align 8
  %141 = fsub double %140, 2.500000e-01
  store double %141, double* %16, align 8
  %142 = load i32, i32* %19, align 4
  %143 = sub nsw i32 %142, 1
  store i32 %143, i32* %19, align 4
  br label %94

; <label>:144:                                    ; preds = %94
  %145 = load double, double* %17, align 8
  store double %145, double* %7, align 8
  br label %146

; <label>:146:                                    ; preds = %144, %136
  %147 = load double, double* %7, align 8
  ret double %147
}

; Function Attrs: nounwind
define arm_aapcscc double @compute_scalefacs_short([3 x double]*, %struct.gr_info*, [3 x i32]*) #0 {
  %4 = alloca [3 x double]*, align 4
  %5 = alloca %struct.gr_info*, align 4
  %6 = alloca [3 x i32]*, align 4
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca [12 x [3 x double]], align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store [3 x double]* %0, [3 x double]** %4, align 4
  store %struct.gr_info* %1, %struct.gr_info** %5, align 4
  store [3 x i32]* %2, [3 x i32]** %6, align 4
  %13 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %14 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %13, i32 0, i32 13
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 2, i32 1
  store i32 %17, i32* %12, align 4
  %18 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %9, i32 0, i32 0
  %19 = bitcast [3 x double]* %18 to i8*
  %20 = load [3 x double]*, [3 x double]** %4, align 4
  %21 = bitcast [3 x double]* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %19, i8* %21, i32 288, i32 8, i1 false)
  store double 0.000000e+00, double* %8, align 8
  store i32 0, i32* %10, align 4
  br label %22

; <label>:22:                                     ; preds = %81, %3
  %23 = load i32, i32* %10, align 4
  %24 = icmp slt i32 %23, 12
  br i1 %24, label %25, label %84

; <label>:25:                                     ; preds = %22
  store i32 0, i32* %11, align 4
  br label %26

; <label>:26:                                     ; preds = %77, %25
  %27 = load i32, i32* %11, align 4
  %28 = icmp slt i32 %27, 3
  br i1 %28, label %29, label %80

; <label>:29:                                     ; preds = %26
  %30 = load i32, i32* %10, align 4
  %31 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %9, i32 0, i32 %30
  %32 = load i32, i32* %11, align 4
  %33 = getelementptr inbounds [3 x double], [3 x double]* %31, i32 0, i32 %32
  %34 = load double, double* %33, align 8
  %35 = fsub double -0.000000e+00, %34
  %36 = load i32, i32* %12, align 4
  %37 = sitofp i32 %36 to double
  %38 = fmul double %35, %37
  %39 = fadd double %38, 7.500000e-01
  %40 = fadd double %39, 1.000000e-04
  %41 = call arm_aapcscc double @floor(double %40) #9
  %42 = fptosi double %41 to i32
  %43 = load [3 x i32]*, [3 x i32]** %6, align 4
  %44 = load i32, i32* %10, align 4
  %45 = getelementptr inbounds [3 x i32], [3 x i32]* %43, i32 %44
  %46 = load i32, i32* %11, align 4
  %47 = getelementptr inbounds [3 x i32], [3 x i32]* %45, i32 0, i32 %46
  store i32 %42, i32* %47, align 4
  %48 = load i32, i32* %10, align 4
  %49 = icmp slt i32 %48, 6
  br i1 %49, label %50, label %54

; <label>:50:                                     ; preds = %29
  %51 = load i32, i32* %12, align 4
  %52 = sitofp i32 %51 to double
  %53 = fdiv double 1.500000e+01, %52
  store double %53, double* %7, align 8
  br label %58

; <label>:54:                                     ; preds = %29
  %55 = load i32, i32* %12, align 4
  %56 = sitofp i32 %55 to double
  %57 = fdiv double 7.000000e+00, %56
  store double %57, double* %7, align 8
  br label %58

; <label>:58:                                     ; preds = %54, %50
  %59 = load double, double* %7, align 8
  %60 = load i32, i32* %10, align 4
  %61 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %9, i32 0, i32 %60
  %62 = load i32, i32* %11, align 4
  %63 = getelementptr inbounds [3 x double], [3 x double]* %61, i32 0, i32 %62
  %64 = load double, double* %63, align 8
  %65 = fadd double %59, %64
  %66 = load double, double* %8, align 8
  %67 = fcmp ogt double %65, %66
  br i1 %67, label %68, label %76

; <label>:68:                                     ; preds = %58
  %69 = load double, double* %7, align 8
  %70 = load i32, i32* %10, align 4
  %71 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %9, i32 0, i32 %70
  %72 = load i32, i32* %11, align 4
  %73 = getelementptr inbounds [3 x double], [3 x double]* %71, i32 0, i32 %72
  %74 = load double, double* %73, align 8
  %75 = fadd double %69, %74
  store double %75, double* %8, align 8
  br label %76

; <label>:76:                                     ; preds = %68, %58
  br label %77

; <label>:77:                                     ; preds = %76
  %78 = load i32, i32* %11, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %11, align 4
  br label %26

; <label>:80:                                     ; preds = %26
  br label %81

; <label>:81:                                     ; preds = %80
  %82 = load i32, i32* %10, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %10, align 4
  br label %22

; <label>:84:                                     ; preds = %22
  %85 = load double, double* %8, align 8
  ret double %85
}

; Function Attrs: nounwind
define arm_aapcscc double @compute_scalefacs_long(double*, %struct.gr_info*, i32*) #0 {
  %4 = alloca double*, align 4
  %5 = alloca %struct.gr_info*, align 4
  %6 = alloca i32*, align 4
  %7 = alloca i32, align 4
  %8 = alloca [21 x double], align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca i32, align 4
  store double* %0, double** %4, align 4
  store %struct.gr_info* %1, %struct.gr_info** %5, align 4
  store i32* %2, i32** %6, align 4
  %12 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %13 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %12, i32 0, i32 13
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, i32 2, i32 1
  store i32 %16, i32* %11, align 4
  %17 = getelementptr inbounds [21 x double], [21 x double]* %8, i32 0, i32 0
  %18 = bitcast double* %17 to i8*
  %19 = load double*, double** %4, align 4
  %20 = bitcast double* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %18, i8* %20, i32 168, i32 8, i1 false)
  %21 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %22 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %21, i32 0, i32 12
  store i32 0, i32* %22, align 4
  store i32 11, i32* %7, align 4
  br label %23

; <label>:23:                                     ; preds = %40, %3
  %24 = load i32, i32* %7, align 4
  %25 = icmp slt i32 %24, 21
  br i1 %25, label %26, label %43

; <label>:26:                                     ; preds = %23
  %27 = load i32, i32* %7, align 4
  %28 = getelementptr inbounds [21 x double], [21 x double]* %8, i32 0, i32 %27
  %29 = load double, double* %28, align 8
  %30 = load i32, i32* %7, align 4
  %31 = getelementptr inbounds [21 x i32], [21 x i32]* @pretab, i32 0, i32 %30
  %32 = load i32, i32* %31, align 4
  %33 = load i32, i32* %11, align 4
  %34 = sdiv i32 %32, %33
  %35 = sitofp i32 %34 to double
  %36 = fadd double %29, %35
  %37 = fcmp ogt double %36, 0.000000e+00
  br i1 %37, label %38, label %39

; <label>:38:                                     ; preds = %26
  br label %43

; <label>:39:                                     ; preds = %26
  br label %40

; <label>:40:                                     ; preds = %39
  %41 = load i32, i32* %7, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %7, align 4
  br label %23

; <label>:43:                                     ; preds = %38, %23
  %44 = load i32, i32* %7, align 4
  %45 = icmp eq i32 %44, 21
  br i1 %45, label %46, label %67

; <label>:46:                                     ; preds = %43
  %47 = load %struct.gr_info*, %struct.gr_info** %5, align 4
  %48 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %47, i32 0, i32 12
  store i32 1, i32* %48, align 4
  store i32 11, i32* %7, align 4
  br label %49

; <label>:49:                                     ; preds = %63, %46
  %50 = load i32, i32* %7, align 4
  %51 = icmp slt i32 %50, 21
  br i1 %51, label %52, label %66

; <label>:52:                                     ; preds = %49
  %53 = load i32, i32* %7, align 4
  %54 = getelementptr inbounds [21 x i32], [21 x i32]* @pretab, i32 0, i32 %53
  %55 = load i32, i32* %54, align 4
  %56 = load i32, i32* %11, align 4
  %57 = sdiv i32 %55, %56
  %58 = sitofp i32 %57 to double
  %59 = load i32, i32* %7, align 4
  %60 = getelementptr inbounds [21 x double], [21 x double]* %8, i32 0, i32 %59
  %61 = load double, double* %60, align 8
  %62 = fadd double %61, %58
  store double %62, double* %60, align 8
  br label %63

; <label>:63:                                     ; preds = %52
  %64 = load i32, i32* %7, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %7, align 4
  br label %49

; <label>:66:                                     ; preds = %49
  br label %67

; <label>:67:                                     ; preds = %66, %43
  store double 0.000000e+00, double* %10, align 8
  store i32 0, i32* %7, align 4
  br label %68

; <label>:68:                                     ; preds = %111, %67
  %69 = load i32, i32* %7, align 4
  %70 = icmp slt i32 %69, 21
  br i1 %70, label %71, label %114

; <label>:71:                                     ; preds = %68
  %72 = load i32, i32* %7, align 4
  %73 = getelementptr inbounds [21 x double], [21 x double]* %8, i32 0, i32 %72
  %74 = load double, double* %73, align 8
  %75 = fsub double -0.000000e+00, %74
  %76 = load i32, i32* %11, align 4
  %77 = sitofp i32 %76 to double
  %78 = fmul double %75, %77
  %79 = fadd double %78, 7.500000e-01
  %80 = fadd double %79, 1.000000e-04
  %81 = call arm_aapcscc double @floor(double %80) #9
  %82 = fptosi double %81 to i32
  %83 = load i32*, i32** %6, align 4
  %84 = load i32, i32* %7, align 4
  %85 = getelementptr inbounds i32, i32* %83, i32 %84
  store i32 %82, i32* %85, align 4
  %86 = load i32, i32* %7, align 4
  %87 = icmp slt i32 %86, 11
  br i1 %87, label %88, label %92

; <label>:88:                                     ; preds = %71
  %89 = load i32, i32* %11, align 4
  %90 = sitofp i32 %89 to double
  %91 = fdiv double 1.500000e+01, %90
  store double %91, double* %9, align 8
  br label %96

; <label>:92:                                     ; preds = %71
  %93 = load i32, i32* %11, align 4
  %94 = sitofp i32 %93 to double
  %95 = fdiv double 7.000000e+00, %94
  store double %95, double* %9, align 8
  br label %96

; <label>:96:                                     ; preds = %92, %88
  %97 = load double, double* %9, align 8
  %98 = load i32, i32* %7, align 4
  %99 = getelementptr inbounds [21 x double], [21 x double]* %8, i32 0, i32 %98
  %100 = load double, double* %99, align 8
  %101 = fadd double %97, %100
  %102 = load double, double* %10, align 8
  %103 = fcmp ogt double %101, %102
  br i1 %103, label %104, label %110

; <label>:104:                                    ; preds = %96
  %105 = load double, double* %9, align 8
  %106 = load i32, i32* %7, align 4
  %107 = getelementptr inbounds [21 x double], [21 x double]* %8, i32 0, i32 %106
  %108 = load double, double* %107, align 8
  %109 = fadd double %105, %108
  store double %109, double* %10, align 8
  br label %110

; <label>:110:                                    ; preds = %104, %96
  br label %111

; <label>:111:                                    ; preds = %110
  %112 = load i32, i32* %7, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %7, align 4
  br label %68

; <label>:114:                                    ; preds = %68
  %115 = load double, double* %10, align 8
  ret double %115
}

; Function Attrs: nounwind
define arm_aapcscc void @VBR_iteration_loop_new(%struct.lame_global_flags*, [2 x double]*, double*, [2 x [576 x double]]*, [2 x %struct.III_psy_ratio]*, %struct.III_side_info_t*, [2 x [576 x i32]]*, [2 x %struct.III_scalefac_t]*) #0 {
  %9 = alloca %struct.lame_global_flags*, align 4
  %10 = alloca [2 x double]*, align 4
  %11 = alloca double*, align 4
  %12 = alloca [2 x [576 x double]]*, align 4
  %13 = alloca [2 x %struct.III_psy_ratio]*, align 4
  %14 = alloca %struct.III_side_info_t*, align 4
  %15 = alloca [2 x [576 x i32]]*, align 4
  %16 = alloca [2 x %struct.III_scalefac_t]*, align 4
  %17 = alloca [2 x [2 x %struct.III_psy_xmin]], align 8
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca %struct.III_psy_xmin, align 8
  %29 = alloca double, align 8
  %30 = alloca [576 x double], align 8
  %31 = alloca %struct.gr_info*, align 4
  %32 = alloca i32, align 4
  %33 = alloca double, align 8
  store %struct.lame_global_flags* %0, %struct.lame_global_flags** %9, align 4
  store [2 x double]* %1, [2 x double]** %10, align 4
  store double* %2, double** %11, align 4
  store [2 x [576 x double]]* %3, [2 x [576 x double]]** %12, align 4
  store [2 x %struct.III_psy_ratio]* %4, [2 x %struct.III_psy_ratio]** %13, align 4
  store %struct.III_side_info_t* %5, %struct.III_side_info_t** %14, align 4
  store [2 x [576 x i32]]* %6, [2 x [576 x i32]]** %15, align 4
  store [2 x %struct.III_scalefac_t]* %7, [2 x %struct.III_scalefac_t]** %16, align 4
  %34 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %35 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %36 = load [2 x [576 x i32]]*, [2 x [576 x i32]]** %15, align 4
  call arm_aapcscc void @iteration_init(%struct.lame_global_flags* %34, %struct.III_side_info_t* %35, [2 x [576 x i32]]* %36)
  %37 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %38 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %37, i32 0, i32 22
  %39 = load i32, i32* %38, align 4
  %40 = mul nsw i32 2, %39
  %41 = add nsw i32 -10, %40
  %42 = sitofp i32 %41 to double
  store double %42, double* %18, align 8
  %43 = load double, double* %18, align 8
  %44 = fdiv double %43, 1.000000e+01
  %45 = call arm_aapcscc double @pow(double 1.000000e+01, double %44) #7
  %46 = fptrunc double %45 to float
  store float %46, float* @masking_lower, align 4
  store float 1.000000e+00, float* @masking_lower, align 4
  store i32 0, i32* %26, align 4
  br label %47

; <label>:47:                                     ; preds = %386, %8
  %48 = load i32, i32* %26, align 4
  %49 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %50 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %49, i32 0, i32 45
  %51 = load i32, i32* %50, align 4
  %52 = icmp slt i32 %48, %51
  br i1 %52, label %53, label %389

; <label>:53:                                     ; preds = %47
  %54 = load i32, i32* @convert_mdct, align 4
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %65

; <label>:56:                                     ; preds = %53
  %57 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %58 = load i32, i32* %26, align 4
  %59 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %57, i32 %58
  %60 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %59, i32 0, i32 0
  %61 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %62 = load i32, i32* %26, align 4
  %63 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %61, i32 %62
  %64 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %63, i32 0, i32 0
  call arm_aapcscc void @ms_convert([576 x double]* %60, [576 x double]* %64)
  br label %65

; <label>:65:                                     ; preds = %56, %53
  store i32 0, i32* %25, align 4
  br label %66

; <label>:66:                                     ; preds = %382, %65
  %67 = load i32, i32* %25, align 4
  %68 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %69 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %68, i32 0, i32 46
  %70 = load i32, i32* %69, align 4
  %71 = icmp slt i32 %67, %70
  br i1 %71, label %72, label %385

; <label>:72:                                     ; preds = %66
  %73 = load %struct.III_side_info_t*, %struct.III_side_info_t** %14, align 4
  %74 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %73, i32 0, i32 4
  %75 = load i32, i32* %26, align 4
  %76 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %74, i32 0, i32 %75
  %77 = getelementptr inbounds %struct.anon, %struct.anon* %76, i32 0, i32 0
  %78 = load i32, i32* %25, align 4
  %79 = getelementptr inbounds [2 x %struct.gr_info_ss], [2 x %struct.gr_info_ss]* %77, i32 0, i32 %78
  %80 = getelementptr inbounds %struct.gr_info_ss, %struct.gr_info_ss* %79, i32 0, i32 0
  store %struct.gr_info* %80, %struct.gr_info** %31, align 4
  store i32 0, i32* %27, align 4
  %81 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %82 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %81, i32 0, i32 6
  %83 = load i32, i32* %82, align 4
  %84 = icmp eq i32 %83, 2
  %85 = zext i1 %84 to i32
  store i32 %85, i32* %32, align 4
  store i32 0, i32* %24, align 4
  br label %86

; <label>:86:                                     ; preds = %106, %72
  %87 = load i32, i32* %24, align 4
  %88 = icmp slt i32 %87, 576
  br i1 %88, label %89, label %109

; <label>:89:                                     ; preds = %86
  %90 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %91 = load i32, i32* %26, align 4
  %92 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %90, i32 %91
  %93 = load i32, i32* %25, align 4
  %94 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %92, i32 0, i32 %93
  %95 = load i32, i32* %24, align 4
  %96 = getelementptr inbounds [576 x double], [576 x double]* %94, i32 0, i32 %95
  %97 = load double, double* %96, align 8
  %98 = call arm_aapcscc double @fabs(double %97) #9
  store double %98, double* %33, align 8
  %99 = load double, double* %33, align 8
  %100 = call arm_aapcscc double @sqrt(double %99) #7
  %101 = load double, double* %33, align 8
  %102 = fmul double %100, %101
  %103 = call arm_aapcscc double @sqrt(double %102) #7
  %104 = load i32, i32* %24, align 4
  %105 = getelementptr inbounds [576 x double], [576 x double]* %30, i32 0, i32 %104
  store double %103, double* %105, align 8
  br label %106

; <label>:106:                                    ; preds = %89
  %107 = load i32, i32* %24, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %24, align 4
  br label %86

; <label>:109:                                    ; preds = %86
  %110 = load %struct.lame_global_flags*, %struct.lame_global_flags** %9, align 4
  %111 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %112 = load i32, i32* %26, align 4
  %113 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %111, i32 %112
  %114 = load i32, i32* %25, align 4
  %115 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %113, i32 0, i32 %114
  %116 = getelementptr inbounds [576 x double], [576 x double]* %115, i32 0, i32 0
  %117 = load [2 x %struct.III_psy_ratio]*, [2 x %struct.III_psy_ratio]** %13, align 4
  %118 = load i32, i32* %26, align 4
  %119 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %117, i32 %118
  %120 = load i32, i32* %25, align 4
  %121 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %119, i32 0, i32 %120
  %122 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %123 = load i32, i32* %26, align 4
  %124 = getelementptr inbounds [2 x [2 x %struct.III_psy_xmin]], [2 x [2 x %struct.III_psy_xmin]]* %17, i32 0, i32 %123
  %125 = load i32, i32* %25, align 4
  %126 = getelementptr inbounds [2 x %struct.III_psy_xmin], [2 x %struct.III_psy_xmin]* %124, i32 0, i32 %125
  %127 = call arm_aapcscc i32 @calc_xmin(%struct.lame_global_flags* %110, double* %116, %struct.III_psy_ratio* %121, %struct.gr_info* %122, %struct.III_psy_xmin* %126)
  store double 0.000000e+00, double* %29, align 8
  %128 = load i32, i32* %32, align 4
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %130, label %209

; <label>:130:                                    ; preds = %109
  store i32 0, i32* %23, align 4
  br label %131

; <label>:131:                                    ; preds = %205, %130
  %132 = load i32, i32* %23, align 4
  %133 = icmp slt i32 %132, 12
  br i1 %133, label %134, label %208

; <label>:134:                                    ; preds = %131
  store i32 0, i32* %24, align 4
  br label %135

; <label>:135:                                    ; preds = %201, %134
  %136 = load i32, i32* %24, align 4
  %137 = icmp slt i32 %136, 3
  br i1 %137, label %138, label %204

; <label>:138:                                    ; preds = %135
  %139 = load i32, i32* %23, align 4
  %140 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %139
  %141 = load i32, i32* %140, align 4
  store i32 %141, i32* %20, align 4
  %142 = load i32, i32* %23, align 4
  %143 = add nsw i32 %142, 1
  %144 = getelementptr inbounds [14 x i32], [14 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 1), i32 0, i32 %143
  %145 = load i32, i32* %144, align 4
  store i32 %145, i32* %21, align 4
  %146 = load i32, i32* %21, align 4
  %147 = load i32, i32* %20, align 4
  %148 = sub nsw i32 %146, %147
  store i32 %148, i32* %22, align 4
  %149 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %150 = load i32, i32* %26, align 4
  %151 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %149, i32 %150
  %152 = load i32, i32* %25, align 4
  %153 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %151, i32 0, i32 %152
  %154 = load i32, i32* %20, align 4
  %155 = mul nsw i32 3, %154
  %156 = load i32, i32* %24, align 4
  %157 = add nsw i32 %155, %156
  %158 = getelementptr inbounds [576 x double], [576 x double]* %153, i32 0, i32 %157
  %159 = load i32, i32* %20, align 4
  %160 = mul nsw i32 3, %159
  %161 = load i32, i32* %24, align 4
  %162 = add nsw i32 %160, %161
  %163 = getelementptr inbounds [576 x double], [576 x double]* %30, i32 0, i32 %162
  %164 = load i32, i32* %23, align 4
  %165 = load float, float* @masking_lower, align 4
  %166 = fpext float %165 to double
  %167 = load i32, i32* %26, align 4
  %168 = getelementptr inbounds [2 x [2 x %struct.III_psy_xmin]], [2 x [2 x %struct.III_psy_xmin]]* %17, i32 0, i32 %167
  %169 = load i32, i32* %25, align 4
  %170 = getelementptr inbounds [2 x %struct.III_psy_xmin], [2 x %struct.III_psy_xmin]* %168, i32 0, i32 %169
  %171 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %170, i32 0, i32 1
  %172 = load i32, i32* %23, align 4
  %173 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %171, i32 0, i32 %172
  %174 = load i32, i32* %24, align 4
  %175 = getelementptr inbounds [3 x double], [3 x double]* %173, i32 0, i32 %174
  %176 = load double, double* %175, align 8
  %177 = fmul double %166, %176
  %178 = load i32, i32* %22, align 4
  %179 = call arm_aapcscc double @find_scalefac(double* %158, double* %163, i32 3, i32 %164, double %177, i32 %178)
  %180 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 1
  %181 = load i32, i32* %23, align 4
  %182 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %180, i32 0, i32 %181
  %183 = load i32, i32* %24, align 4
  %184 = getelementptr inbounds [3 x double], [3 x double]* %182, i32 0, i32 %183
  store double %179, double* %184, align 8
  %185 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 1
  %186 = load i32, i32* %23, align 4
  %187 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %185, i32 0, i32 %186
  %188 = load i32, i32* %24, align 4
  %189 = getelementptr inbounds [3 x double], [3 x double]* %187, i32 0, i32 %188
  %190 = load double, double* %189, align 8
  %191 = load double, double* %29, align 8
  %192 = fcmp ogt double %190, %191
  br i1 %192, label %193, label %200

; <label>:193:                                    ; preds = %138
  %194 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 1
  %195 = load i32, i32* %23, align 4
  %196 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %194, i32 0, i32 %195
  %197 = load i32, i32* %24, align 4
  %198 = getelementptr inbounds [3 x double], [3 x double]* %196, i32 0, i32 %197
  %199 = load double, double* %198, align 8
  store double %199, double* %29, align 8
  br label %200

; <label>:200:                                    ; preds = %193, %138
  br label %201

; <label>:201:                                    ; preds = %200
  %202 = load i32, i32* %24, align 4
  %203 = add nsw i32 %202, 1
  store i32 %203, i32* %24, align 4
  br label %135

; <label>:204:                                    ; preds = %135
  br label %205

; <label>:205:                                    ; preds = %204
  %206 = load i32, i32* %23, align 4
  %207 = add nsw i32 %206, 1
  store i32 %207, i32* %23, align 4
  br label %131

; <label>:208:                                    ; preds = %131
  br label %266

; <label>:209:                                    ; preds = %109
  store i32 0, i32* %23, align 4
  br label %210

; <label>:210:                                    ; preds = %262, %209
  %211 = load i32, i32* %23, align 4
  %212 = icmp slt i32 %211, 21
  br i1 %212, label %213, label %265

; <label>:213:                                    ; preds = %210
  %214 = load i32, i32* %23, align 4
  %215 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %214
  %216 = load i32, i32* %215, align 4
  store i32 %216, i32* %20, align 4
  %217 = load i32, i32* %23, align 4
  %218 = add nsw i32 %217, 1
  %219 = getelementptr inbounds [23 x i32], [23 x i32]* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i32 0, i32 0), i32 0, i32 %218
  %220 = load i32, i32* %219, align 4
  store i32 %220, i32* %21, align 4
  %221 = load i32, i32* %21, align 4
  %222 = load i32, i32* %20, align 4
  %223 = sub nsw i32 %221, %222
  store i32 %223, i32* %22, align 4
  %224 = load [2 x [576 x double]]*, [2 x [576 x double]]** %12, align 4
  %225 = load i32, i32* %26, align 4
  %226 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %224, i32 %225
  %227 = load i32, i32* %25, align 4
  %228 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %226, i32 0, i32 %227
  %229 = load i32, i32* %20, align 4
  %230 = getelementptr inbounds [576 x double], [576 x double]* %228, i32 0, i32 %229
  %231 = load i32, i32* %20, align 4
  %232 = getelementptr inbounds [576 x double], [576 x double]* %30, i32 0, i32 %231
  %233 = load i32, i32* %23, align 4
  %234 = load float, float* @masking_lower, align 4
  %235 = fpext float %234 to double
  %236 = load i32, i32* %26, align 4
  %237 = getelementptr inbounds [2 x [2 x %struct.III_psy_xmin]], [2 x [2 x %struct.III_psy_xmin]]* %17, i32 0, i32 %236
  %238 = load i32, i32* %25, align 4
  %239 = getelementptr inbounds [2 x %struct.III_psy_xmin], [2 x %struct.III_psy_xmin]* %237, i32 0, i32 %238
  %240 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %239, i32 0, i32 0
  %241 = load i32, i32* %23, align 4
  %242 = getelementptr inbounds [22 x double], [22 x double]* %240, i32 0, i32 %241
  %243 = load double, double* %242, align 8
  %244 = fmul double %235, %243
  %245 = load i32, i32* %22, align 4
  %246 = call arm_aapcscc double @find_scalefac(double* %230, double* %232, i32 1, i32 %233, double %244, i32 %245)
  %247 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 0
  %248 = load i32, i32* %23, align 4
  %249 = getelementptr inbounds [22 x double], [22 x double]* %247, i32 0, i32 %248
  store double %246, double* %249, align 8
  %250 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 0
  %251 = load i32, i32* %23, align 4
  %252 = getelementptr inbounds [22 x double], [22 x double]* %250, i32 0, i32 %251
  %253 = load double, double* %252, align 8
  %254 = load double, double* %29, align 8
  %255 = fcmp ogt double %253, %254
  br i1 %255, label %256, label %261

; <label>:256:                                    ; preds = %213
  %257 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 0
  %258 = load i32, i32* %23, align 4
  %259 = getelementptr inbounds [22 x double], [22 x double]* %257, i32 0, i32 %258
  %260 = load double, double* %259, align 8
  store double %260, double* %29, align 8
  br label %261

; <label>:261:                                    ; preds = %256, %213
  br label %262

; <label>:262:                                    ; preds = %261
  %263 = load i32, i32* %23, align 4
  %264 = add nsw i32 %263, 1
  store i32 %264, i32* %23, align 4
  br label %210

; <label>:265:                                    ; preds = %210
  br label %266

; <label>:266:                                    ; preds = %265, %208
  %267 = load double, double* %29, align 8
  %268 = fmul double 4.000000e+00, %267
  %269 = fadd double %268, 2.100000e+02
  %270 = fadd double %269, 5.000000e-01
  %271 = call arm_aapcscc double @floor(double %270) #9
  %272 = fptoui double %271 to i32
  %273 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %274 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %273, i32 0, i32 3
  store i32 %272, i32* %274, align 4
  %275 = load i32, i32* %32, align 4
  %276 = icmp ne i32 %275, 0
  br i1 %276, label %277, label %334

; <label>:277:                                    ; preds = %266
  store i32 0, i32* %23, align 4
  br label %278

; <label>:278:                                    ; preds = %298, %277
  %279 = load i32, i32* %23, align 4
  %280 = icmp slt i32 %279, 12
  br i1 %280, label %281, label %301

; <label>:281:                                    ; preds = %278
  store i32 0, i32* %24, align 4
  br label %282

; <label>:282:                                    ; preds = %294, %281
  %283 = load i32, i32* %24, align 4
  %284 = icmp slt i32 %283, 3
  br i1 %284, label %285, label %297

; <label>:285:                                    ; preds = %282
  %286 = load double, double* %29, align 8
  %287 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 1
  %288 = load i32, i32* %23, align 4
  %289 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %287, i32 0, i32 %288
  %290 = load i32, i32* %24, align 4
  %291 = getelementptr inbounds [3 x double], [3 x double]* %289, i32 0, i32 %290
  %292 = load double, double* %291, align 8
  %293 = fsub double %292, %286
  store double %293, double* %291, align 8
  br label %294

; <label>:294:                                    ; preds = %285
  %295 = load i32, i32* %24, align 4
  %296 = add nsw i32 %295, 1
  store i32 %296, i32* %24, align 4
  br label %282

; <label>:297:                                    ; preds = %282
  br label %298

; <label>:298:                                    ; preds = %297
  %299 = load i32, i32* %23, align 4
  %300 = add nsw i32 %299, 1
  store i32 %300, i32* %23, align 4
  br label %278

; <label>:301:                                    ; preds = %278
  %302 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %303 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %302, i32 0, i32 13
  store i32 0, i32* %303, align 4
  %304 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 1
  %305 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %304, i32 0, i32 0
  %306 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %307 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %308 = load i32, i32* %26, align 4
  %309 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %307, i32 %308
  %310 = load i32, i32* %25, align 4
  %311 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %309, i32 0, i32 %310
  %312 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %311, i32 0, i32 1
  %313 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %312, i32 0, i32 0
  %314 = call arm_aapcscc double @compute_scalefacs_short([3 x double]* %305, %struct.gr_info* %306, [3 x i32]* %313)
  %315 = fcmp ogt double %314, 0.000000e+00
  br i1 %315, label %316, label %333

; <label>:316:                                    ; preds = %301
  %317 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %318 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %317, i32 0, i32 13
  store i32 1, i32* %318, align 4
  %319 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 1
  %320 = getelementptr inbounds [13 x [3 x double]], [13 x [3 x double]]* %319, i32 0, i32 0
  %321 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %322 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %323 = load i32, i32* %26, align 4
  %324 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %322, i32 %323
  %325 = load i32, i32* %25, align 4
  %326 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %324, i32 0, i32 %325
  %327 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %326, i32 0, i32 1
  %328 = getelementptr inbounds [13 x [3 x i32]], [13 x [3 x i32]]* %327, i32 0, i32 0
  %329 = call arm_aapcscc double @compute_scalefacs_short([3 x double]* %320, %struct.gr_info* %321, [3 x i32]* %328)
  %330 = fcmp ogt double %329, 0.000000e+00
  br i1 %330, label %331, label %332

; <label>:331:                                    ; preds = %316
  call arm_aapcscc void @exit(i32 32) #8
  unreachable

; <label>:332:                                    ; preds = %316
  br label %333

; <label>:333:                                    ; preds = %332, %301
  br label %381

; <label>:334:                                    ; preds = %266
  store i32 0, i32* %23, align 4
  br label %335

; <label>:335:                                    ; preds = %345, %334
  %336 = load i32, i32* %23, align 4
  %337 = icmp slt i32 %336, 21
  br i1 %337, label %338, label %348

; <label>:338:                                    ; preds = %335
  %339 = load double, double* %29, align 8
  %340 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 0
  %341 = load i32, i32* %23, align 4
  %342 = getelementptr inbounds [22 x double], [22 x double]* %340, i32 0, i32 %341
  %343 = load double, double* %342, align 8
  %344 = fsub double %343, %339
  store double %344, double* %342, align 8
  br label %345

; <label>:345:                                    ; preds = %338
  %346 = load i32, i32* %23, align 4
  %347 = add nsw i32 %346, 1
  store i32 %347, i32* %23, align 4
  br label %335

; <label>:348:                                    ; preds = %335
  %349 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %350 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %349, i32 0, i32 13
  store i32 0, i32* %350, align 4
  %351 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 0
  %352 = getelementptr inbounds [22 x double], [22 x double]* %351, i32 0, i32 0
  %353 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %354 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %355 = load i32, i32* %26, align 4
  %356 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %354, i32 %355
  %357 = load i32, i32* %25, align 4
  %358 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %356, i32 0, i32 %357
  %359 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %358, i32 0, i32 0
  %360 = getelementptr inbounds [22 x i32], [22 x i32]* %359, i32 0, i32 0
  %361 = call arm_aapcscc double @compute_scalefacs_long(double* %352, %struct.gr_info* %353, i32* %360)
  %362 = fcmp ogt double %361, 0.000000e+00
  br i1 %362, label %363, label %380

; <label>:363:                                    ; preds = %348
  %364 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %365 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %364, i32 0, i32 13
  store i32 1, i32* %365, align 4
  %366 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %28, i32 0, i32 0
  %367 = getelementptr inbounds [22 x double], [22 x double]* %366, i32 0, i32 0
  %368 = load %struct.gr_info*, %struct.gr_info** %31, align 4
  %369 = load [2 x %struct.III_scalefac_t]*, [2 x %struct.III_scalefac_t]** %16, align 4
  %370 = load i32, i32* %26, align 4
  %371 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %369, i32 %370
  %372 = load i32, i32* %25, align 4
  %373 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %371, i32 0, i32 %372
  %374 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %373, i32 0, i32 0
  %375 = getelementptr inbounds [22 x i32], [22 x i32]* %374, i32 0, i32 0
  %376 = call arm_aapcscc double @compute_scalefacs_long(double* %367, %struct.gr_info* %368, i32* %375)
  %377 = fcmp ogt double %376, 0.000000e+00
  br i1 %377, label %378, label %379

; <label>:378:                                    ; preds = %363
  call arm_aapcscc void @exit(i32 32) #8
  unreachable

; <label>:379:                                    ; preds = %363
  br label %380

; <label>:380:                                    ; preds = %379, %348
  br label %381

; <label>:381:                                    ; preds = %380, %333
  br label %382

; <label>:382:                                    ; preds = %381
  %383 = load i32, i32* %25, align 4
  %384 = add nsw i32 %383, 1
  store i32 %384, i32* %25, align 4
  br label %66

; <label>:385:                                    ; preds = %66
  br label %386

; <label>:386:                                    ; preds = %385
  %387 = load i32, i32* %26, align 4
  %388 = add nsw i32 %387, 1
  store i32 %388, i32* %26, align 4
  br label %47

; <label>:389:                                    ; preds = %47
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc void @AddVbrFrame(i32) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32*, i32** @pVbrFrames, align 4
  %4 = icmp eq i32* %3, null
  br i1 %4, label %8, label %5

; <label>:5:                                      ; preds = %1
  %6 = load i32, i32* @nVbrFrameBufferSize, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %13

; <label>:8:                                      ; preds = %5, %1
  store i32 100, i32* @nVbrFrameBufferSize, align 4
  %9 = load i32, i32* @nVbrFrameBufferSize, align 4
  %10 = mul i32 %9, 4
  %11 = call arm_aapcscc i8* @malloc(i32 %10)
  %12 = bitcast i8* %11 to i32*
  store i32* %12, i32** @pVbrFrames, align 4
  br label %13

; <label>:13:                                     ; preds = %8, %5
  %14 = load i32, i32* @nVbrNumFrames, align 4
  %15 = load i32, i32* @nVbrFrameBufferSize, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %26

; <label>:17:                                     ; preds = %13
  %18 = load i32, i32* @nVbrFrameBufferSize, align 4
  %19 = mul nsw i32 %18, 2
  store i32 %19, i32* @nVbrFrameBufferSize, align 4
  %20 = load i32*, i32** @pVbrFrames, align 4
  %21 = bitcast i32* %20 to i8*
  %22 = load i32, i32* @nVbrFrameBufferSize, align 4
  %23 = mul i32 %22, 4
  %24 = call arm_aapcscc i8* @realloc(i8* %21, i32 %23)
  %25 = bitcast i8* %24 to i32*
  store i32* %25, i32** @pVbrFrames, align 4
  br label %26

; <label>:26:                                     ; preds = %17, %13
  %27 = load i32, i32* %2, align 4
  %28 = load i32*, i32** @pVbrFrames, align 4
  %29 = load i32, i32* @nVbrNumFrames, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* @nVbrNumFrames, align 4
  %31 = getelementptr inbounds i32, i32* %28, i32 %29
  store i32 %27, i32* %31, align 4
  ret void
}

declare arm_aapcscc i8* @realloc(i8*, i32) #3

; Function Attrs: nounwind
define arm_aapcscc void @CreateI4(i8*, i32) #0 {
  %3 = alloca i8*, align 4
  %4 = alloca i32, align 4
  store i8* %0, i8** %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = ashr i32 %5, 24
  %7 = and i32 %6, 255
  %8 = trunc i32 %7 to i8
  %9 = load i8*, i8** %3, align 4
  %10 = getelementptr inbounds i8, i8* %9, i32 0
  store i8 %8, i8* %10, align 1
  %11 = load i32, i32* %4, align 4
  %12 = ashr i32 %11, 16
  %13 = and i32 %12, 255
  %14 = trunc i32 %13 to i8
  %15 = load i8*, i8** %3, align 4
  %16 = getelementptr inbounds i8, i8* %15, i32 1
  store i8 %14, i8* %16, align 1
  %17 = load i32, i32* %4, align 4
  %18 = ashr i32 %17, 8
  %19 = and i32 %18, 255
  %20 = trunc i32 %19 to i8
  %21 = load i8*, i8** %3, align 4
  %22 = getelementptr inbounds i8, i8* %21, i32 2
  store i8 %20, i8* %22, align 1
  %23 = load i32, i32* %4, align 4
  %24 = and i32 %23, 255
  %25 = trunc i32 %24 to i8
  %26 = load i8*, i8** %3, align 4
  %27 = getelementptr inbounds i8, i8* %26, i32 3
  store i8 %25, i8* %27, align 1
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i32 @CheckVbrTag(i8*) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i8* %0, i8** %3, align 4
  %7 = load i8*, i8** %3, align 4
  %8 = getelementptr inbounds i8, i8* %7, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = ashr i32 %10, 3
  %12 = and i32 %11, 1
  store i32 %12, i32* %4, align 4
  %13 = load i8*, i8** %3, align 4
  %14 = getelementptr inbounds i8, i8* %13, i32 2
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = ashr i32 %16, 2
  %18 = and i32 %17, 3
  store i32 %18, i32* %6, align 4
  %19 = load i8*, i8** %3, align 4
  %20 = getelementptr inbounds i8, i8* %19, i32 3
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = ashr i32 %22, 6
  %24 = and i32 %23, 3
  store i32 %24, i32* %5, align 4
  %25 = load i32, i32* %4, align 4
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %37

; <label>:27:                                     ; preds = %1
  %28 = load i32, i32* %5, align 4
  %29 = icmp ne i32 %28, 3
  br i1 %29, label %30, label %33

; <label>:30:                                     ; preds = %27
  %31 = load i8*, i8** %3, align 4
  %32 = getelementptr inbounds i8, i8* %31, i32 36
  store i8* %32, i8** %3, align 4
  br label %36

; <label>:33:                                     ; preds = %27
  %34 = load i8*, i8** %3, align 4
  %35 = getelementptr inbounds i8, i8* %34, i32 21
  store i8* %35, i8** %3, align 4
  br label %36

; <label>:36:                                     ; preds = %33, %30
  br label %47

; <label>:37:                                     ; preds = %1
  %38 = load i32, i32* %5, align 4
  %39 = icmp ne i32 %38, 3
  br i1 %39, label %40, label %43

; <label>:40:                                     ; preds = %37
  %41 = load i8*, i8** %3, align 4
  %42 = getelementptr inbounds i8, i8* %41, i32 21
  store i8* %42, i8** %3, align 4
  br label %46

; <label>:43:                                     ; preds = %37
  %44 = load i8*, i8** %3, align 4
  %45 = getelementptr inbounds i8, i8* %44, i32 13
  store i8* %45, i8** %3, align 4
  br label %46

; <label>:46:                                     ; preds = %43, %40
  br label %47

; <label>:47:                                     ; preds = %46, %36
  %48 = load i8*, i8** %3, align 4
  %49 = getelementptr inbounds i8, i8* %48, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 0), align 1
  %53 = zext i8 %52 to i32
  %54 = icmp ne i32 %51, %53
  br i1 %54, label %55, label %56

; <label>:55:                                     ; preds = %47
  store i32 0, i32* %2, align 4
  br label %84

; <label>:56:                                     ; preds = %47
  %57 = load i8*, i8** %3, align 4
  %58 = getelementptr inbounds i8, i8* %57, i32 1
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 1), align 1
  %62 = zext i8 %61 to i32
  %63 = icmp ne i32 %60, %62
  br i1 %63, label %64, label %65

; <label>:64:                                     ; preds = %56
  store i32 0, i32* %2, align 4
  br label %84

; <label>:65:                                     ; preds = %56
  %66 = load i8*, i8** %3, align 4
  %67 = getelementptr inbounds i8, i8* %66, i32 2
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 2), align 1
  %71 = zext i8 %70 to i32
  %72 = icmp ne i32 %69, %71
  br i1 %72, label %73, label %74

; <label>:73:                                     ; preds = %65
  store i32 0, i32* %2, align 4
  br label %84

; <label>:74:                                     ; preds = %65
  %75 = load i8*, i8** %3, align 4
  %76 = getelementptr inbounds i8, i8* %75, i32 3
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 3), align 1
  %80 = zext i8 %79 to i32
  %81 = icmp ne i32 %78, %80
  br i1 %81, label %82, label %83

; <label>:82:                                     ; preds = %74
  store i32 0, i32* %2, align 4
  br label %84

; <label>:83:                                     ; preds = %74
  store i32 1, i32* %2, align 4
  br label %84

; <label>:84:                                     ; preds = %83, %82, %73, %64, %55
  %85 = load i32, i32* %2, align 4
  ret i32 %85
}

; Function Attrs: nounwind
define arm_aapcscc i32 @GetVbrTag(%struct.VBRTAGDATA*, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.VBRTAGDATA*, align 4
  %5 = alloca i8*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.VBRTAGDATA* %0, %struct.VBRTAGDATA** %4, align 4
  store i8* %1, i8** %5, align 4
  %11 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %12 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %11, i32 0, i32 2
  store i32 0, i32* %12, align 4
  %13 = load i8*, i8** %5, align 4
  %14 = getelementptr inbounds i8, i8* %13, i32 1
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = ashr i32 %16, 3
  %18 = and i32 %17, 1
  store i32 %18, i32* %8, align 4
  %19 = load i8*, i8** %5, align 4
  %20 = getelementptr inbounds i8, i8* %19, i32 2
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = ashr i32 %22, 2
  %24 = and i32 %23, 3
  store i32 %24, i32* %10, align 4
  %25 = load i8*, i8** %5, align 4
  %26 = getelementptr inbounds i8, i8* %25, i32 3
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = ashr i32 %28, 6
  %30 = and i32 %29, 3
  store i32 %30, i32* %9, align 4
  %31 = load i32, i32* %8, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %43

; <label>:33:                                     ; preds = %2
  %34 = load i32, i32* %9, align 4
  %35 = icmp ne i32 %34, 3
  br i1 %35, label %36, label %39

; <label>:36:                                     ; preds = %33
  %37 = load i8*, i8** %5, align 4
  %38 = getelementptr inbounds i8, i8* %37, i32 36
  store i8* %38, i8** %5, align 4
  br label %42

; <label>:39:                                     ; preds = %33
  %40 = load i8*, i8** %5, align 4
  %41 = getelementptr inbounds i8, i8* %40, i32 21
  store i8* %41, i8** %5, align 4
  br label %42

; <label>:42:                                     ; preds = %39, %36
  br label %53

; <label>:43:                                     ; preds = %2
  %44 = load i32, i32* %9, align 4
  %45 = icmp ne i32 %44, 3
  br i1 %45, label %46, label %49

; <label>:46:                                     ; preds = %43
  %47 = load i8*, i8** %5, align 4
  %48 = getelementptr inbounds i8, i8* %47, i32 21
  store i8* %48, i8** %5, align 4
  br label %52

; <label>:49:                                     ; preds = %43
  %50 = load i8*, i8** %5, align 4
  %51 = getelementptr inbounds i8, i8* %50, i32 13
  store i8* %51, i8** %5, align 4
  br label %52

; <label>:52:                                     ; preds = %49, %46
  br label %53

; <label>:53:                                     ; preds = %52, %42
  %54 = load i8*, i8** %5, align 4
  %55 = getelementptr inbounds i8, i8* %54, i32 0
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 0), align 1
  %59 = zext i8 %58 to i32
  %60 = icmp ne i32 %57, %59
  br i1 %60, label %61, label %62

; <label>:61:                                     ; preds = %53
  store i32 0, i32* %3, align 4
  br label %178

; <label>:62:                                     ; preds = %53
  %63 = load i8*, i8** %5, align 4
  %64 = getelementptr inbounds i8, i8* %63, i32 1
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 1), align 1
  %68 = zext i8 %67 to i32
  %69 = icmp ne i32 %66, %68
  br i1 %69, label %70, label %71

; <label>:70:                                     ; preds = %62
  store i32 0, i32* %3, align 4
  br label %178

; <label>:71:                                     ; preds = %62
  %72 = load i8*, i8** %5, align 4
  %73 = getelementptr inbounds i8, i8* %72, i32 2
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 2), align 1
  %77 = zext i8 %76 to i32
  %78 = icmp ne i32 %75, %77
  br i1 %78, label %79, label %80

; <label>:79:                                     ; preds = %71
  store i32 0, i32* %3, align 4
  br label %178

; <label>:80:                                     ; preds = %71
  %81 = load i8*, i8** %5, align 4
  %82 = getelementptr inbounds i8, i8* %81, i32 3
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 3), align 1
  %86 = zext i8 %85 to i32
  %87 = icmp ne i32 %84, %86
  br i1 %87, label %88, label %89

; <label>:88:                                     ; preds = %80
  store i32 0, i32* %3, align 4
  br label %178

; <label>:89:                                     ; preds = %80
  %90 = load i8*, i8** %5, align 4
  %91 = getelementptr inbounds i8, i8* %90, i32 4
  store i8* %91, i8** %5, align 4
  %92 = load i32, i32* %8, align 4
  %93 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %94 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %93, i32 0, i32 0
  store i32 %92, i32* %94, align 4
  %95 = load i32, i32* %10, align 4
  %96 = getelementptr inbounds [4 x i32], [4 x i32]* @GetVbrTag.sr_table, i32 0, i32 %95
  %97 = load i32, i32* %96, align 4
  %98 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %99 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %98, i32 0, i32 1
  store i32 %97, i32* %99, align 4
  %100 = load i32, i32* %8, align 4
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %107

; <label>:102:                                    ; preds = %89
  %103 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %104 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %103, i32 0, i32 1
  %105 = load i32, i32* %104, align 4
  %106 = ashr i32 %105, 1
  store i32 %106, i32* %104, align 4
  br label %107

; <label>:107:                                    ; preds = %102, %89
  %108 = load i8*, i8** %5, align 4
  %109 = call arm_aapcscc i32 @ExtractI4(i8* %108)
  %110 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %111 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %110, i32 0, i32 2
  store i32 %109, i32* %111, align 4
  store i32 %109, i32* %7, align 4
  %112 = load i8*, i8** %5, align 4
  %113 = getelementptr inbounds i8, i8* %112, i32 4
  store i8* %113, i8** %5, align 4
  %114 = load i32, i32* %7, align 4
  %115 = and i32 %114, 1
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %124

; <label>:117:                                    ; preds = %107
  %118 = load i8*, i8** %5, align 4
  %119 = call arm_aapcscc i32 @ExtractI4(i8* %118)
  %120 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %121 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %120, i32 0, i32 3
  store i32 %119, i32* %121, align 4
  %122 = load i8*, i8** %5, align 4
  %123 = getelementptr inbounds i8, i8* %122, i32 4
  store i8* %123, i8** %5, align 4
  br label %124

; <label>:124:                                    ; preds = %117, %107
  %125 = load i32, i32* %7, align 4
  %126 = and i32 %125, 2
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %128, label %135

; <label>:128:                                    ; preds = %124
  %129 = load i8*, i8** %5, align 4
  %130 = call arm_aapcscc i32 @ExtractI4(i8* %129)
  %131 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %132 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %131, i32 0, i32 4
  store i32 %130, i32* %132, align 4
  %133 = load i8*, i8** %5, align 4
  %134 = getelementptr inbounds i8, i8* %133, i32 4
  store i8* %134, i8** %5, align 4
  br label %135

; <label>:135:                                    ; preds = %128, %124
  %136 = load i32, i32* %7, align 4
  %137 = and i32 %136, 4
  %138 = icmp ne i32 %137, 0
  br i1 %138, label %139, label %164

; <label>:139:                                    ; preds = %135
  %140 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %141 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %140, i32 0, i32 6
  %142 = getelementptr inbounds [100 x i8], [100 x i8]* %141, i32 0, i32 0
  %143 = icmp ne i8* %142, null
  br i1 %143, label %144, label %161

; <label>:144:                                    ; preds = %139
  store i32 0, i32* %6, align 4
  br label %145

; <label>:145:                                    ; preds = %157, %144
  %146 = load i32, i32* %6, align 4
  %147 = icmp slt i32 %146, 100
  br i1 %147, label %148, label %160

; <label>:148:                                    ; preds = %145
  %149 = load i8*, i8** %5, align 4
  %150 = load i32, i32* %6, align 4
  %151 = getelementptr inbounds i8, i8* %149, i32 %150
  %152 = load i8, i8* %151, align 1
  %153 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %154 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %153, i32 0, i32 6
  %155 = load i32, i32* %6, align 4
  %156 = getelementptr inbounds [100 x i8], [100 x i8]* %154, i32 0, i32 %155
  store i8 %152, i8* %156, align 1
  br label %157

; <label>:157:                                    ; preds = %148
  %158 = load i32, i32* %6, align 4
  %159 = add nsw i32 %158, 1
  store i32 %159, i32* %6, align 4
  br label %145

; <label>:160:                                    ; preds = %145
  br label %161

; <label>:161:                                    ; preds = %160, %139
  %162 = load i8*, i8** %5, align 4
  %163 = getelementptr inbounds i8, i8* %162, i32 100
  store i8* %163, i8** %5, align 4
  br label %164

; <label>:164:                                    ; preds = %161, %135
  %165 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %166 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %165, i32 0, i32 5
  store i32 -1, i32* %166, align 4
  %167 = load i32, i32* %7, align 4
  %168 = and i32 %167, 8
  %169 = icmp ne i32 %168, 0
  br i1 %169, label %170, label %177

; <label>:170:                                    ; preds = %164
  %171 = load i8*, i8** %5, align 4
  %172 = call arm_aapcscc i32 @ExtractI4(i8* %171)
  %173 = load %struct.VBRTAGDATA*, %struct.VBRTAGDATA** %4, align 4
  %174 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %173, i32 0, i32 5
  store i32 %172, i32* %174, align 4
  %175 = load i8*, i8** %5, align 4
  %176 = getelementptr inbounds i8, i8* %175, i32 4
  store i8* %176, i8** %5, align 4
  br label %177

; <label>:177:                                    ; preds = %170, %164
  store i32 1, i32* %3, align 4
  br label %178

; <label>:178:                                    ; preds = %177, %88, %79, %70, %61
  %179 = load i32, i32* %3, align 4
  ret i32 %179
}

; Function Attrs: nounwind
define internal arm_aapcscc i32 @ExtractI4(i8*) #0 {
  %2 = alloca i8*, align 4
  %3 = alloca i32, align 4
  store i8* %0, i8** %2, align 4
  %4 = load i8*, i8** %2, align 4
  %5 = getelementptr inbounds i8, i8* %4, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  store i32 %7, i32* %3, align 4
  %8 = load i32, i32* %3, align 4
  %9 = shl i32 %8, 8
  store i32 %9, i32* %3, align 4
  %10 = load i8*, i8** %2, align 4
  %11 = getelementptr inbounds i8, i8* %10, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = load i32, i32* %3, align 4
  %15 = or i32 %14, %13
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %3, align 4
  %17 = shl i32 %16, 8
  store i32 %17, i32* %3, align 4
  %18 = load i8*, i8** %2, align 4
  %19 = getelementptr inbounds i8, i8* %18, i32 2
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = load i32, i32* %3, align 4
  %23 = or i32 %22, %21
  store i32 %23, i32* %3, align 4
  %24 = load i32, i32* %3, align 4
  %25 = shl i32 %24, 8
  store i32 %25, i32* %3, align 4
  %26 = load i8*, i8** %2, align 4
  %27 = getelementptr inbounds i8, i8* %26, i32 3
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = load i32, i32* %3, align 4
  %31 = or i32 %30, %29
  store i32 %31, i32* %3, align 4
  %32 = load i32, i32* %3, align 4
  ret i32 %32
}

; Function Attrs: nounwind
define arm_aapcscc i32 @InitVbrTag(%struct.bit_stream_struc*, i32, i32, i32) #0 {
  %5 = alloca %struct.bit_stream_struc*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.bit_stream_struc* %0, %struct.bit_stream_struc** %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  store i32* null, i32** @pVbrFrames, align 4
  store i32 0, i32* @nVbrNumFrames, align 4
  store i32 0, i32* @nVbrFrameBufferSize, align 4
  call void @llvm.memset.p0i8.i32(i8* bitcast ([100 x i32]* @g_Position to i8*), i8 0, i32 400, i32 4, i1 false)
  call void @llvm.memset.p0i8.i32(i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 0), i8 0, i32 216, i32 1, i1 false)
  store i32 0, i32* %9, align 4
  br label %11

; <label>:11:                                     ; preds = %17, %4
  %12 = load i32, i32* %9, align 4
  %13 = icmp slt i32 %12, 100
  br i1 %13, label %14, label %20

; <label>:14:                                     ; preds = %11
  %15 = load i32, i32* %9, align 4
  %16 = getelementptr inbounds [100 x i32], [100 x i32]* @g_Position, i32 0, i32 %15
  store i32 -1, i32* %16, align 4
  br label %17

; <label>:17:                                     ; preds = %14
  %18 = load i32, i32* %9, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %9, align 4
  br label %11

; <label>:20:                                     ; preds = %11
  %21 = load i32, i32* %7, align 4
  %22 = icmp eq i32 %21, 3
  br i1 %22, label %23, label %29

; <label>:23:                                     ; preds = %20
  %24 = load i32, i32* %6, align 4
  %25 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @SizeOfEmptyFrame, i32 0, i32 %24
  %26 = getelementptr inbounds [2 x i32], [2 x i32]* %25, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = add nsw i32 %27, 4
  store i32 %28, i32* @nZeroStreamSize, align 4
  br label %35

; <label>:29:                                     ; preds = %20
  %30 = load i32, i32* %6, align 4
  %31 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @SizeOfEmptyFrame, i32 0, i32 %30
  %32 = getelementptr inbounds [2 x i32], [2 x i32]* %31, i32 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = add nsw i32 %33, 4
  store i32 %34, i32* @nZeroStreamSize, align 4
  br label %35

; <label>:35:                                     ; preds = %29, %23
  %36 = load i32, i32* %8, align 4
  %37 = icmp sgt i32 %36, 2
  br i1 %37, label %38, label %41

; <label>:38:                                     ; preds = %35
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %40 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.335, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:41:                                     ; preds = %35
  %42 = load i32, i32* %8, align 4
  %43 = getelementptr inbounds [3 x i32], [3 x i32]* @InitVbrTag.framesize, i32 0, i32 %42
  %44 = load i32, i32* %43, align 4
  store i32 %44, i32* @TotalFrameSize, align 4
  %45 = load i32, i32* @nZeroStreamSize, align 4
  %46 = add nsw i32 %45, 120
  store i32 %46, i32* %10, align 4
  %47 = load i32, i32* %10, align 4
  %48 = add nsw i32 %47, 20
  store i32 %48, i32* %10, align 4
  %49 = load i32, i32* @TotalFrameSize, align 4
  %50 = load i32, i32* %10, align 4
  %51 = icmp slt i32 %49, %50
  br i1 %51, label %52, label %55

; <label>:52:                                     ; preds = %41
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 4
  %54 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1.336, i32 0, i32 0))
  call arm_aapcscc void @exit(i32 -1) #8
  unreachable

; <label>:55:                                     ; preds = %41
  store i32 0, i32* %9, align 4
  br label %56

; <label>:56:                                     ; preds = %62, %55
  %57 = load i32, i32* %9, align 4
  %58 = load i32, i32* @TotalFrameSize, align 4
  %59 = icmp slt i32 %57, %58
  br i1 %59, label %60, label %65

; <label>:60:                                     ; preds = %56
  %61 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** %5, align 4
  call arm_aapcscc void @putbits(%struct.bit_stream_struc* %61, i32 0, i32 8)
  br label %62

; <label>:62:                                     ; preds = %60
  %63 = load i32, i32* %9, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %9, align 4
  br label %56

; <label>:65:                                     ; preds = %56
  ret i32 0
}

; Function Attrs: nounwind
define arm_aapcscc i32 @PutVbrTag(i8*, i32, i32) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca [100 x i8], align 1
  %13 = alloca %struct._IO_FILE*, align 4
  %14 = alloca [80 x i8], align 1
  %15 = alloca i32, align 4
  %16 = alloca float, align 4
  store i8* %0, i8** %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  %17 = load i32, i32* @nVbrNumFrames, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %22, label %19

; <label>:19:                                     ; preds = %3
  %20 = load i32*, i32** @pVbrFrames, align 4
  %21 = icmp eq i32* %20, null
  br i1 %21, label %22, label %23

; <label>:22:                                     ; preds = %19, %3
  store i32 -1, i32* %4, align 4
  br label %160

; <label>:23:                                     ; preds = %19
  %24 = load i8*, i8** %5, align 4
  %25 = call arm_aapcscc %struct._IO_FILE* @fopen(i8* %24, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.339, i32 0, i32 0))
  store %struct._IO_FILE* %25, %struct._IO_FILE** %13, align 4
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 4
  %27 = icmp eq %struct._IO_FILE* %26, null
  br i1 %27, label %28, label %29

; <label>:28:                                     ; preds = %23
  store i32 -1, i32* %4, align 4
  br label %160

; <label>:29:                                     ; preds = %23
  call void @llvm.memset.p0i8.i32(i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 0), i8 0, i32 216, i32 1, i1 false)
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 4
  %31 = call arm_aapcscc i32 @fseek(%struct._IO_FILE* %30, i32 0, i32 2)
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 4
  %33 = call arm_aapcscc i32 @ftell(%struct._IO_FILE* %32)
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %37

; <label>:36:                                     ; preds = %29
  store i32 -1, i32* %4, align 4
  br label %160

; <label>:37:                                     ; preds = %29
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 4
  %39 = load i32, i32* @TotalFrameSize, align 4
  %40 = call arm_aapcscc i32 @fseek(%struct._IO_FILE* %38, i32 %39, i32 0)
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 4
  %42 = call arm_aapcscc i32 @fread(i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 0), i32 4, i32 1, %struct._IO_FILE* %41)
  store i8 -1, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 0), align 1
  %43 = load i32, i32* %7, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %54

; <label>:45:                                     ; preds = %37
  store i8 -5, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 1), align 1
  %46 = load i8, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 2), align 1
  %47 = zext i8 %46 to i32
  %48 = and i32 %47, 12
  %49 = trunc i32 %48 to i8
  store i8 %49, i8* %11, align 1
  %50 = load i8, i8* %11, align 1
  %51 = zext i8 %50 to i32
  %52 = or i32 80, %51
  %53 = trunc i32 %52 to i8
  store i8 %53, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 2), align 1
  br label %63

; <label>:54:                                     ; preds = %37
  store i8 -13, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 1), align 1
  %55 = load i8, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 2), align 1
  %56 = zext i8 %55 to i32
  %57 = and i32 %56, 12
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %11, align 1
  %59 = load i8, i8* %11, align 1
  %60 = zext i8 %59 to i32
  %61 = or i32 128, %60
  %62 = trunc i32 %61 to i8
  store i8 %62, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 2), align 1
  br label %63

; <label>:63:                                     ; preds = %54, %45
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 4
  %65 = call arm_aapcscc i32 @fseek(%struct._IO_FILE* %64, i32 0, i32 0)
  %66 = getelementptr inbounds [100 x i8], [100 x i8]* %12, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* %66, i8 0, i32 100, i32 1, i1 false)
  store i32 1, i32* %8, align 4
  br label %67

; <label>:67:                                     ; preds = %96, %63
  %68 = load i32, i32* %8, align 4
  %69 = icmp slt i32 %68, 100
  br i1 %69, label %70, label %99

; <label>:70:                                     ; preds = %67
  %71 = load i32, i32* %8, align 4
  %72 = sitofp i32 %71 to double
  %73 = fmul double 1.000000e-02, %72
  %74 = load i32, i32* @nVbrNumFrames, align 4
  %75 = sitofp i32 %74 to double
  %76 = fmul double %73, %75
  %77 = call arm_aapcscc double @floor(double %76) #9
  %78 = fptosi double %77 to i32
  store i32 %78, i32* %15, align 4
  %79 = load i32*, i32** @pVbrFrames, align 4
  %80 = load i32, i32* %15, align 4
  %81 = getelementptr inbounds i32, i32* %79, i32 %80
  %82 = load i32, i32* %81, align 4
  %83 = sitofp i32 %82 to float
  %84 = fmul float 2.560000e+02, %83
  %85 = load i32, i32* %9, align 4
  %86 = sitofp i32 %85 to float
  %87 = fdiv float %84, %86
  store float %87, float* %16, align 4
  %88 = load float, float* %16, align 4
  %89 = fcmp ogt float %88, 2.550000e+02
  br i1 %89, label %90, label %91

; <label>:90:                                     ; preds = %70
  store float 2.550000e+02, float* %16, align 4
  br label %91

; <label>:91:                                     ; preds = %90, %70
  %92 = load float, float* %16, align 4
  %93 = fptoui float %92 to i8
  %94 = load i32, i32* %8, align 4
  %95 = getelementptr inbounds [100 x i8], [100 x i8]* %12, i32 0, i32 %94
  store i8 %93, i8* %95, align 1
  br label %96

; <label>:96:                                     ; preds = %91
  %97 = load i32, i32* %8, align 4
  %98 = add nsw i32 %97, 1
  store i32 %98, i32* %8, align 4
  br label %67

; <label>:99:                                     ; preds = %67
  %100 = load i32, i32* @nZeroStreamSize, align 4
  store i32 %100, i32* %10, align 4
  %101 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 0), align 1
  %102 = load i32, i32* %10, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %10, align 4
  %104 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %102
  store i8 %101, i8* %104, align 1
  %105 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 1), align 1
  %106 = load i32, i32* %10, align 4
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %10, align 4
  %108 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %106
  store i8 %105, i8* %108, align 1
  %109 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 2), align 1
  %110 = load i32, i32* %10, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %10, align 4
  %112 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %110
  store i8 %109, i8* %112, align 1
  %113 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @VBRTag, i32 0, i32 3), align 1
  %114 = load i32, i32* %10, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %10, align 4
  %116 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %114
  store i8 %113, i8* %116, align 1
  %117 = load i32, i32* %10, align 4
  %118 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %117
  call arm_aapcscc void @CreateI4(i8* %118, i32 15)
  %119 = load i32, i32* %10, align 4
  %120 = add nsw i32 %119, 4
  store i32 %120, i32* %10, align 4
  %121 = load i32, i32* %10, align 4
  %122 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %121
  %123 = load i32, i32* @nVbrNumFrames, align 4
  call arm_aapcscc void @CreateI4(i8* %122, i32 %123)
  %124 = load i32, i32* %10, align 4
  %125 = add nsw i32 %124, 4
  store i32 %125, i32* %10, align 4
  %126 = load i32, i32* %10, align 4
  %127 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %126
  %128 = load i32, i32* %9, align 4
  call arm_aapcscc void @CreateI4(i8* %127, i32 %128)
  %129 = load i32, i32* %10, align 4
  %130 = add nsw i32 %129, 4
  store i32 %130, i32* %10, align 4
  %131 = load i32, i32* %10, align 4
  %132 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %131
  %133 = getelementptr inbounds [100 x i8], [100 x i8]* %12, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %132, i8* %133, i32 100, i32 1, i1 false)
  %134 = load i32, i32* %10, align 4
  %135 = add i32 %134, 100
  store i32 %135, i32* %10, align 4
  %136 = load i32, i32* %10, align 4
  %137 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %136
  %138 = load i32, i32* %6, align 4
  call arm_aapcscc void @CreateI4(i8* %137, i32 %138)
  %139 = load i32, i32* %10, align 4
  %140 = add nsw i32 %139, 4
  store i32 %140, i32* %10, align 4
  %141 = getelementptr inbounds [80 x i8], [80 x i8]* %14, i32 0, i32 0
  %142 = call arm_aapcscc i8* @get_lame_version()
  %143 = call arm_aapcscc i32 (i8*, i8*, ...) @sprintf(i8* %141, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3.340, i32 0, i32 0), i8* %142)
  %144 = load i32, i32* %10, align 4
  %145 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 %144
  %146 = getelementptr inbounds [80 x i8], [80 x i8]* %14, i32 0, i32 0
  %147 = call arm_aapcscc i8* @strncpy(i8* %145, i8* %146, i32 20)
  %148 = load i32, i32* %10, align 4
  %149 = add nsw i32 %148, 20
  store i32 %149, i32* %10, align 4
  %150 = load i32, i32* @TotalFrameSize, align 4
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 4
  %152 = call arm_aapcscc i32 @fwrite(i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i32 0, i32 0), i32 %150, i32 1, %struct._IO_FILE* %151)
  %153 = icmp ne i32 %152, 1
  br i1 %153, label %154, label %155

; <label>:154:                                    ; preds = %99
  store i32 -1, i32* %4, align 4
  br label %160

; <label>:155:                                    ; preds = %99
  %156 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 4
  %157 = call arm_aapcscc i32 @fclose(%struct._IO_FILE* %156)
  %158 = load i32*, i32** @pVbrFrames, align 4
  %159 = bitcast i32* %158 to i8*
  call arm_aapcscc void @free(i8* %159)
  store i32* null, i32** @pVbrFrames, align 4
  store i32 0, i32* %4, align 4
  br label %160

; <label>:160:                                    ; preds = %155, %154, %36, %28, %22
  %161 = load i32, i32* %4, align 4
  ret i32 %161
}

declare arm_aapcscc i32 @ftell(%struct._IO_FILE*) #3

declare arm_aapcscc i32 @fread(i8*, i32, i32, %struct._IO_FILE*) #3

declare arm_aapcscc i32 @sprintf(i8*, i8*, ...) #3

; Function Attrs: nounwind
define arm_aapcscc i32 @SeekPoint(i8*, i32, float) #0 {
  %4 = alloca i8*, align 4
  %5 = alloca i32, align 4
  %6 = alloca float, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  store i8* %0, i8** %4, align 4
  store i32 %1, i32* %5, align 4
  store float %2, float* %6, align 4
  %12 = load float, float* %6, align 4
  %13 = fcmp olt float %12, 0.000000e+00
  br i1 %13, label %14, label %15

; <label>:14:                                     ; preds = %3
  store float 0.000000e+00, float* %6, align 4
  br label %15

; <label>:15:                                     ; preds = %14, %3
  %16 = load float, float* %6, align 4
  %17 = fcmp ogt float %16, 1.000000e+02
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %15
  store float 1.000000e+02, float* %6, align 4
  br label %19

; <label>:19:                                     ; preds = %18, %15
  %20 = load float, float* %6, align 4
  %21 = fptosi float %20 to i32
  store i32 %21, i32* %7, align 4
  %22 = load i32, i32* %7, align 4
  %23 = icmp sgt i32 %22, 99
  br i1 %23, label %24, label %25

; <label>:24:                                     ; preds = %19
  store i32 99, i32* %7, align 4
  br label %25

; <label>:25:                                     ; preds = %24, %19
  %26 = load i8*, i8** %4, align 4
  %27 = load i32, i32* %7, align 4
  %28 = getelementptr inbounds i8, i8* %26, i32 %27
  %29 = load i8, i8* %28, align 1
  %30 = uitofp i8 %29 to float
  store float %30, float* %9, align 4
  %31 = load i32, i32* %7, align 4
  %32 = icmp slt i32 %31, 99
  br i1 %32, label %33, label %40

; <label>:33:                                     ; preds = %25
  %34 = load i8*, i8** %4, align 4
  %35 = load i32, i32* %7, align 4
  %36 = add nsw i32 %35, 1
  %37 = getelementptr inbounds i8, i8* %34, i32 %36
  %38 = load i8, i8* %37, align 1
  %39 = uitofp i8 %38 to float
  store float %39, float* %10, align 4
  br label %41

; <label>:40:                                     ; preds = %25
  store float 2.560000e+02, float* %10, align 4
  br label %41

; <label>:41:                                     ; preds = %40, %33
  %42 = load float, float* %9, align 4
  %43 = load float, float* %10, align 4
  %44 = load float, float* %9, align 4
  %45 = fsub float %43, %44
  %46 = load float, float* %6, align 4
  %47 = load i32, i32* %7, align 4
  %48 = sitofp i32 %47 to float
  %49 = fsub float %46, %48
  %50 = fmul float %45, %49
  %51 = fadd float %42, %50
  store float %51, float* %11, align 4
  %52 = load float, float* %11, align 4
  %53 = fmul float 3.906250e-03, %52
  %54 = load i32, i32* %5, align 4
  %55 = sitofp i32 %54 to float
  %56 = fmul float %53, %55
  %57 = fptosi float %56 to i32
  store i32 %57, i32* %8, align 4
  %58 = load i32, i32* %8, align 4
  ret i32 %58
}

; Function Attrs: nounwind
define arm_aapcscc void @lame_print_version(%struct._IO_FILE*) #0 {
  %2 = alloca %struct._IO_FILE*, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 4
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %4 = call arm_aapcscc i8* @get_lame_version()
  %5 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.345, i32 0, i32 0), i8* %4)
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 4
  %7 = call arm_aapcscc i8* @get_psy_version()
  %8 = call arm_aapcscc i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1.346, i32 0, i32 0), i8* %7)
  ret void
}

; Function Attrs: nounwind
define arm_aapcscc i8* @get_lame_version() #0 {
  %1 = call arm_aapcscc i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2.347, i32 0, i32 0), i32 3, i32 70)
  ret i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i32 0, i32 0)
}

; Function Attrs: nounwind
define arm_aapcscc i8* @get_psy_version() #0 {
  %1 = call arm_aapcscc i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2.347, i32 0, i32 0), i32 0, i32 77)
  ret i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i32 0, i32 0)
}

; Function Attrs: nounwind
define arm_aapcscc i8* @get_mp3x_version() #0 {
  %1 = call arm_aapcscc i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.348, i32 0, i32 0), i32 0, i32 82)
  ret i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i32 0, i32 0)
}

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3,-crypto,-d16,-fp-armv8,-fp-only-sp,-fp16,-vfp4" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3,-crypto,-d16,-fp-armv8,-fp-only-sp,-fp16,-vfp4" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3,-crypto,-d16,-fp-armv8,-fp-only-sp,-fp16,-vfp4" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3,-crypto,-d16,-fp-armv8,-fp-only-sp,-fp16,-vfp4" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3,-crypto,-d16,-fp-armv8,-fp-only-sp,-fp16,-vfp4" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-a8" "target-features"="+dsp,+neon,+vfp3,-crypto,-d16,-fp-armv8,-fp-only-sp,-fp16,-vfp4" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn }
attributes #9 = { nounwind readnone }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2}

!0 = !{!"clang version 4.0.0 (trunk)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 1, !"min_enum_size", i32 4}
